
solar_uros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000187ac  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e48  08018990  08018990  00019990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080197d8  080197d8  0001b118  2**0
                  CONTENTS
  4 .ARM          00000008  080197d8  080197d8  0001a7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080197e0  080197e0  0001b118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080197e0  080197e0  0001a7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080197e8  080197e8  0001a7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000118  20000000  080197ec  0001b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ad24  20000118  08019904  0001b118  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000ae3c  08019904  0001be3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b118  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022217  00000000  00000000  0001b148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004836  00000000  00000000  0003d35f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad8  00000000  00000000  00041b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014c0  00000000  00000000  00043670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b7c7  00000000  00000000  00044b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ff10  00000000  00000000  000702f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112737  00000000  00000000  00090207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001a293e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fc8  00000000  00000000  001a29b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001aa97c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000118 	.word	0x20000118
 80001fc:	00000000 	.word	0x00000000
 8000200:	08018974 	.word	0x08018974

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000011c 	.word	0x2000011c
 800021c:	08018974 	.word	0x08018974

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__aeabi_d2uiz>:
 8000a8c:	004a      	lsls	r2, r1, #1
 8000a8e:	d211      	bcs.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a94:	d211      	bcs.n	8000aba <__aeabi_d2uiz+0x2e>
 8000a96:	d50d      	bpl.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a98:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d40e      	bmi.n	8000ac0 <__aeabi_d2uiz+0x34>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d102      	bne.n	8000ac6 <__aeabi_d2uiz+0x3a>
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac4:	4770      	bx	lr
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	4770      	bx	lr

08000acc <__aeabi_ldivmod>:
 8000acc:	b97b      	cbnz	r3, 8000aee <__aeabi_ldivmod+0x22>
 8000ace:	b972      	cbnz	r2, 8000aee <__aeabi_ldivmod+0x22>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bfbe      	ittt	lt
 8000ad4:	2000      	movlt	r0, #0
 8000ad6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ada:	e006      	blt.n	8000aea <__aeabi_ldivmod+0x1e>
 8000adc:	bf08      	it	eq
 8000ade:	2800      	cmpeq	r0, #0
 8000ae0:	bf1c      	itt	ne
 8000ae2:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ae6:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000aea:	f000 b9b5 	b.w	8000e58 <__aeabi_idiv0>
 8000aee:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000af6:	2900      	cmp	r1, #0
 8000af8:	db09      	blt.n	8000b0e <__aeabi_ldivmod+0x42>
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	db1a      	blt.n	8000b34 <__aeabi_ldivmod+0x68>
 8000afe:	f000 f84d 	bl	8000b9c <__udivmoddi4>
 8000b02:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b0a:	b004      	add	sp, #16
 8000b0c:	4770      	bx	lr
 8000b0e:	4240      	negs	r0, r0
 8000b10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	db1b      	blt.n	8000b50 <__aeabi_ldivmod+0x84>
 8000b18:	f000 f840 	bl	8000b9c <__udivmoddi4>
 8000b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b24:	b004      	add	sp, #16
 8000b26:	4240      	negs	r0, r0
 8000b28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b2c:	4252      	negs	r2, r2
 8000b2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b32:	4770      	bx	lr
 8000b34:	4252      	negs	r2, r2
 8000b36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b3a:	f000 f82f 	bl	8000b9c <__udivmoddi4>
 8000b3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b46:	b004      	add	sp, #16
 8000b48:	4240      	negs	r0, r0
 8000b4a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b4e:	4770      	bx	lr
 8000b50:	4252      	negs	r2, r2
 8000b52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b56:	f000 f821 	bl	8000b9c <__udivmoddi4>
 8000b5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b62:	b004      	add	sp, #16
 8000b64:	4252      	negs	r2, r2
 8000b66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b80:	f000 b96a 	b.w	8000e58 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	460c      	mov	r4, r1
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d14e      	bne.n	8000c46 <__udivmoddi4+0xaa>
 8000ba8:	4694      	mov	ip, r2
 8000baa:	458c      	cmp	ip, r1
 8000bac:	4686      	mov	lr, r0
 8000bae:	fab2 f282 	clz	r2, r2
 8000bb2:	d962      	bls.n	8000c7a <__udivmoddi4+0xde>
 8000bb4:	b14a      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb6:	f1c2 0320 	rsb	r3, r2, #32
 8000bba:	4091      	lsls	r1, r2
 8000bbc:	fa20 f303 	lsr.w	r3, r0, r3
 8000bc0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc4:	4319      	orrs	r1, r3
 8000bc6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bce:	fa1f f68c 	uxth.w	r6, ip
 8000bd2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bd6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bda:	fb07 1114 	mls	r1, r7, r4, r1
 8000bde:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be2:	fb04 f106 	mul.w	r1, r4, r6
 8000be6:	4299      	cmp	r1, r3
 8000be8:	d90a      	bls.n	8000c00 <__udivmoddi4+0x64>
 8000bea:	eb1c 0303 	adds.w	r3, ip, r3
 8000bee:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000bf2:	f080 8112 	bcs.w	8000e1a <__udivmoddi4+0x27e>
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	f240 810f 	bls.w	8000e1a <__udivmoddi4+0x27e>
 8000bfc:	3c02      	subs	r4, #2
 8000bfe:	4463      	add	r3, ip
 8000c00:	1a59      	subs	r1, r3, r1
 8000c02:	fa1f f38e 	uxth.w	r3, lr
 8000c06:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c0a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c12:	fb00 f606 	mul.w	r6, r0, r6
 8000c16:	429e      	cmp	r6, r3
 8000c18:	d90a      	bls.n	8000c30 <__udivmoddi4+0x94>
 8000c1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c22:	f080 80fc 	bcs.w	8000e1e <__udivmoddi4+0x282>
 8000c26:	429e      	cmp	r6, r3
 8000c28:	f240 80f9 	bls.w	8000e1e <__udivmoddi4+0x282>
 8000c2c:	4463      	add	r3, ip
 8000c2e:	3802      	subs	r0, #2
 8000c30:	1b9b      	subs	r3, r3, r6
 8000c32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c36:	2100      	movs	r1, #0
 8000c38:	b11d      	cbz	r5, 8000c42 <__udivmoddi4+0xa6>
 8000c3a:	40d3      	lsrs	r3, r2
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d905      	bls.n	8000c56 <__udivmoddi4+0xba>
 8000c4a:	b10d      	cbz	r5, 8000c50 <__udivmoddi4+0xb4>
 8000c4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c50:	2100      	movs	r1, #0
 8000c52:	4608      	mov	r0, r1
 8000c54:	e7f5      	b.n	8000c42 <__udivmoddi4+0xa6>
 8000c56:	fab3 f183 	clz	r1, r3
 8000c5a:	2900      	cmp	r1, #0
 8000c5c:	d146      	bne.n	8000cec <__udivmoddi4+0x150>
 8000c5e:	42a3      	cmp	r3, r4
 8000c60:	d302      	bcc.n	8000c68 <__udivmoddi4+0xcc>
 8000c62:	4290      	cmp	r0, r2
 8000c64:	f0c0 80f0 	bcc.w	8000e48 <__udivmoddi4+0x2ac>
 8000c68:	1a86      	subs	r6, r0, r2
 8000c6a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c6e:	2001      	movs	r0, #1
 8000c70:	2d00      	cmp	r5, #0
 8000c72:	d0e6      	beq.n	8000c42 <__udivmoddi4+0xa6>
 8000c74:	e9c5 6300 	strd	r6, r3, [r5]
 8000c78:	e7e3      	b.n	8000c42 <__udivmoddi4+0xa6>
 8000c7a:	2a00      	cmp	r2, #0
 8000c7c:	f040 8090 	bne.w	8000da0 <__udivmoddi4+0x204>
 8000c80:	eba1 040c 	sub.w	r4, r1, ip
 8000c84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c88:	fa1f f78c 	uxth.w	r7, ip
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c96:	fb08 4416 	mls	r4, r8, r6, r4
 8000c9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c9e:	fb07 f006 	mul.w	r0, r7, r6
 8000ca2:	4298      	cmp	r0, r3
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x11c>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x11a>
 8000cb0:	4298      	cmp	r0, r3
 8000cb2:	f200 80cd 	bhi.w	8000e50 <__udivmoddi4+0x2b4>
 8000cb6:	4626      	mov	r6, r4
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	fa1f f38e 	uxth.w	r3, lr
 8000cbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cc2:	fb08 4410 	mls	r4, r8, r0, r4
 8000cc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cca:	fb00 f707 	mul.w	r7, r0, r7
 8000cce:	429f      	cmp	r7, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x148>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x146>
 8000cdc:	429f      	cmp	r7, r3
 8000cde:	f200 80b0 	bhi.w	8000e42 <__udivmoddi4+0x2a6>
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	1bdb      	subs	r3, r3, r7
 8000ce6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cea:	e7a5      	b.n	8000c38 <__udivmoddi4+0x9c>
 8000cec:	f1c1 0620 	rsb	r6, r1, #32
 8000cf0:	408b      	lsls	r3, r1
 8000cf2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cf6:	431f      	orrs	r7, r3
 8000cf8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cfc:	fa04 f301 	lsl.w	r3, r4, r1
 8000d00:	ea43 030c 	orr.w	r3, r3, ip
 8000d04:	40f4      	lsrs	r4, r6
 8000d06:	fa00 f801 	lsl.w	r8, r0, r1
 8000d0a:	0c38      	lsrs	r0, r7, #16
 8000d0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d10:	fbb4 fef0 	udiv	lr, r4, r0
 8000d14:	fa1f fc87 	uxth.w	ip, r7
 8000d18:	fb00 441e 	mls	r4, r0, lr, r4
 8000d1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d20:	fb0e f90c 	mul.w	r9, lr, ip
 8000d24:	45a1      	cmp	r9, r4
 8000d26:	fa02 f201 	lsl.w	r2, r2, r1
 8000d2a:	d90a      	bls.n	8000d42 <__udivmoddi4+0x1a6>
 8000d2c:	193c      	adds	r4, r7, r4
 8000d2e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d32:	f080 8084 	bcs.w	8000e3e <__udivmoddi4+0x2a2>
 8000d36:	45a1      	cmp	r9, r4
 8000d38:	f240 8081 	bls.w	8000e3e <__udivmoddi4+0x2a2>
 8000d3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d40:	443c      	add	r4, r7
 8000d42:	eba4 0409 	sub.w	r4, r4, r9
 8000d46:	fa1f f983 	uxth.w	r9, r3
 8000d4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	d907      	bls.n	8000d6e <__udivmoddi4+0x1d2>
 8000d5e:	193c      	adds	r4, r7, r4
 8000d60:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d64:	d267      	bcs.n	8000e36 <__udivmoddi4+0x29a>
 8000d66:	45a4      	cmp	ip, r4
 8000d68:	d965      	bls.n	8000e36 <__udivmoddi4+0x29a>
 8000d6a:	3b02      	subs	r3, #2
 8000d6c:	443c      	add	r4, r7
 8000d6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d72:	fba0 9302 	umull	r9, r3, r0, r2
 8000d76:	eba4 040c 	sub.w	r4, r4, ip
 8000d7a:	429c      	cmp	r4, r3
 8000d7c:	46ce      	mov	lr, r9
 8000d7e:	469c      	mov	ip, r3
 8000d80:	d351      	bcc.n	8000e26 <__udivmoddi4+0x28a>
 8000d82:	d04e      	beq.n	8000e22 <__udivmoddi4+0x286>
 8000d84:	b155      	cbz	r5, 8000d9c <__udivmoddi4+0x200>
 8000d86:	ebb8 030e 	subs.w	r3, r8, lr
 8000d8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d92:	40cb      	lsrs	r3, r1
 8000d94:	431e      	orrs	r6, r3
 8000d96:	40cc      	lsrs	r4, r1
 8000d98:	e9c5 6400 	strd	r6, r4, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	e750      	b.n	8000c42 <__udivmoddi4+0xa6>
 8000da0:	f1c2 0320 	rsb	r3, r2, #32
 8000da4:	fa20 f103 	lsr.w	r1, r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	fa24 f303 	lsr.w	r3, r4, r3
 8000db0:	4094      	lsls	r4, r2
 8000db2:	430c      	orrs	r4, r1
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dbc:	fa1f f78c 	uxth.w	r7, ip
 8000dc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc4:	fb08 3110 	mls	r1, r8, r0, r3
 8000dc8:	0c23      	lsrs	r3, r4, #16
 8000dca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dce:	fb00 f107 	mul.w	r1, r0, r7
 8000dd2:	4299      	cmp	r1, r3
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x24c>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000dde:	d22c      	bcs.n	8000e3a <__udivmoddi4+0x29e>
 8000de0:	4299      	cmp	r1, r3
 8000de2:	d92a      	bls.n	8000e3a <__udivmoddi4+0x29e>
 8000de4:	3802      	subs	r0, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000df0:	fb08 3311 	mls	r3, r8, r1, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb01 f307 	mul.w	r3, r1, r7
 8000dfc:	42a3      	cmp	r3, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x276>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e08:	d213      	bcs.n	8000e32 <__udivmoddi4+0x296>
 8000e0a:	42a3      	cmp	r3, r4
 8000e0c:	d911      	bls.n	8000e32 <__udivmoddi4+0x296>
 8000e0e:	3902      	subs	r1, #2
 8000e10:	4464      	add	r4, ip
 8000e12:	1ae4      	subs	r4, r4, r3
 8000e14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e18:	e739      	b.n	8000c8e <__udivmoddi4+0xf2>
 8000e1a:	4604      	mov	r4, r0
 8000e1c:	e6f0      	b.n	8000c00 <__udivmoddi4+0x64>
 8000e1e:	4608      	mov	r0, r1
 8000e20:	e706      	b.n	8000c30 <__udivmoddi4+0x94>
 8000e22:	45c8      	cmp	r8, r9
 8000e24:	d2ae      	bcs.n	8000d84 <__udivmoddi4+0x1e8>
 8000e26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e2e:	3801      	subs	r0, #1
 8000e30:	e7a8      	b.n	8000d84 <__udivmoddi4+0x1e8>
 8000e32:	4631      	mov	r1, r6
 8000e34:	e7ed      	b.n	8000e12 <__udivmoddi4+0x276>
 8000e36:	4603      	mov	r3, r0
 8000e38:	e799      	b.n	8000d6e <__udivmoddi4+0x1d2>
 8000e3a:	4630      	mov	r0, r6
 8000e3c:	e7d4      	b.n	8000de8 <__udivmoddi4+0x24c>
 8000e3e:	46d6      	mov	lr, sl
 8000e40:	e77f      	b.n	8000d42 <__udivmoddi4+0x1a6>
 8000e42:	4463      	add	r3, ip
 8000e44:	3802      	subs	r0, #2
 8000e46:	e74d      	b.n	8000ce4 <__udivmoddi4+0x148>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	4623      	mov	r3, r4
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	e70f      	b.n	8000c70 <__udivmoddi4+0xd4>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	e730      	b.n	8000cb8 <__udivmoddi4+0x11c>
 8000e56:	bf00      	nop

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	4613      	mov	r3, r2
 8000e68:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e9c <PWM_init+0x40>)
 8000e6e:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	88fa      	ldrh	r2, [r7, #6]
 8000e7a:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 8000e82:	68b8      	ldr	r0, [r7, #8]
 8000e84:	f003 fc4a 	bl	800471c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8000e88:	88fb      	ldrh	r3, [r7, #6]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	68b8      	ldr	r0, [r7, #8]
 8000e8e:	f003 fd8f 	bl	80049b0 <HAL_TIM_PWM_Start>
}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	0a21fe80 	.word	0x0a21fe80

08000ea0 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 8000ea0:	b5b0      	push	{r4, r5, r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	ed87 0a02 	vstr	s0, [r7, #8]
 8000eac:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8000eb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000eb4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ebc:	d137      	bne.n	8000f2e <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	889b      	ldrh	r3, [r3, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d105      	bne.n	8000ed2 <PWM_write_duty+0x32>
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8000ed0:	e0e1      	b.n	8001096 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	889b      	ldrh	r3, [r3, #4]
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	d105      	bne.n	8000ee6 <PWM_write_duty+0x46>
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	6393      	str	r3, [r2, #56]	@ 0x38
 8000ee4:	e0d7      	b.n	8001096 <PWM_write_duty+0x1f6>
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	889b      	ldrh	r3, [r3, #4]
 8000eea:	2b08      	cmp	r3, #8
 8000eec:	d105      	bne.n	8000efa <PWM_write_duty+0x5a>
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000ef8:	e0cd      	b.n	8001096 <PWM_write_duty+0x1f6>
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	889b      	ldrh	r3, [r3, #4]
 8000efe:	2b0c      	cmp	r3, #12
 8000f00:	d105      	bne.n	8000f0e <PWM_write_duty+0x6e>
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	2300      	movs	r3, #0
 8000f0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f0c:	e0c3      	b.n	8001096 <PWM_write_duty+0x1f6>
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	889b      	ldrh	r3, [r3, #4]
 8000f12:	2b10      	cmp	r3, #16
 8000f14:	d105      	bne.n	8000f22 <PWM_write_duty+0x82>
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f20:	e0b9      	b.n	8001096 <PWM_write_duty+0x1f6>
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	2300      	movs	r3, #0
 8000f2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000f2c:	e0b3      	b.n	8001096 <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	691b      	ldr	r3, [r3, #16]
 8000f32:	ee07 3a90 	vmov	s15, r3
 8000f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000f3a:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f46:	ee17 2a90 	vmov	r2, s15
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000f56:	33fe      	adds	r3, #254	@ 0xfe
 8000f58:	4a51      	ldr	r2, [pc, #324]	@ (80010a0 <PWM_write_duty+0x200>)
 8000f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5e:	0bdb      	lsrs	r3, r3, #15
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	3b01      	subs	r3, #1
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	ee07 3a90 	vmov	s15, r3
 8000f72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	899b      	ldrh	r3, [r3, #12]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000f88:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f9c:	ee17 3a90 	vmov	r3, s15
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	89db      	ldrh	r3, [r3, #14]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff faf2 	bl	8000594 <__aeabi_i2d>
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	460d      	mov	r5, r1
 8000fb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fb8:	eef0 7ae7 	vabs.f32	s15, s15
 8000fbc:	ee17 0a90 	vmov	r0, s15
 8000fc0:	f7ff fafa 	bl	80005b8 <__aeabi_f2d>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4620      	mov	r0, r4
 8000fca:	4629      	mov	r1, r5
 8000fcc:	f7ff fb4c 	bl	8000668 <__aeabi_dmul>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	4610      	mov	r0, r2
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f04f 0200 	mov.w	r2, #0
 8000fdc:	4b31      	ldr	r3, [pc, #196]	@ (80010a4 <PWM_write_duty+0x204>)
 8000fde:	f7ff fc6d 	bl	80008bc <__aeabi_ddiv>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f7ff fd4f 	bl	8000a8c <__aeabi_d2uiz>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	899a      	ldrh	r2, [r3, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	89da      	ldrh	r2, [r3, #14]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	89da      	ldrh	r2, [r3, #14]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	889b      	ldrh	r3, [r3, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d106      	bne.n	8001030 <PWM_write_duty+0x190>
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	68fa      	ldr	r2, [r7, #12]
 800102a:	6952      	ldr	r2, [r2, #20]
 800102c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800102e:	e032      	b.n	8001096 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	889b      	ldrh	r3, [r3, #4]
 8001034:	2b04      	cmp	r3, #4
 8001036:	d106      	bne.n	8001046 <PWM_write_duty+0x1a6>
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001044:	e027      	b.n	8001096 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	889b      	ldrh	r3, [r3, #4]
 800104a:	2b08      	cmp	r3, #8
 800104c:	d106      	bne.n	800105c <PWM_write_duty+0x1bc>
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800105a:	e01c      	b.n	8001096 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	889b      	ldrh	r3, [r3, #4]
 8001060:	2b0c      	cmp	r3, #12
 8001062:	d106      	bne.n	8001072 <PWM_write_duty+0x1d2>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001070:	e011      	b.n	8001096 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	889b      	ldrh	r3, [r3, #4]
 8001076:	2b10      	cmp	r3, #16
 8001078:	d106      	bne.n	8001088 <PWM_write_duty+0x1e8>
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8001086:	e006      	b.n	8001096 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001094:	e7ff      	b.n	8001096 <PWM_write_duty+0x1f6>
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bdb0      	pop	{r4, r5, r7, pc}
 800109e:	bf00      	nop
 80010a0:	80008001 	.word	0x80008001
 80010a4:	40590000 	.word	0x40590000

080010a8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010ac:	f3bf 8f4f 	dsb	sy
}
 80010b0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80010b2:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <__NVIC_SystemReset+0x24>)
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80010ba:	4904      	ldr	r1, [pc, #16]	@ (80010cc <__NVIC_SystemReset+0x24>)
 80010bc:	4b04      	ldr	r3, [pc, #16]	@ (80010d0 <__NVIC_SystemReset+0x28>)
 80010be:	4313      	orrs	r3, r2
 80010c0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80010c2:	f3bf 8f4f 	dsb	sy
}
 80010c6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <__NVIC_SystemReset+0x20>
 80010cc:	e000ed00 	.word	0xe000ed00
 80010d0:	05fa0004 	.word	0x05fa0004

080010d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d8:	f001 fc53 	bl	8002982 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010dc:	f000 f838 	bl	8001150 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e0:	f000 f9f6 	bl	80014d0 <MX_GPIO_Init>
  MX_DMA_Init();
 80010e4:	f000 f9c2 	bl	800146c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80010e8:	f000 f87e 	bl	80011e8 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 80010ec:	f000 f8c6 	bl	800127c <MX_TIM2_Init>
  MX_TIM3_Init();
 80010f0:	f000 f93a 	bl	8001368 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  PWM_init(&BrushMTR, &htim2, TIM_CHANNEL_1);
 80010f4:	2200      	movs	r2, #0
 80010f6:	490f      	ldr	r1, [pc, #60]	@ (8001134 <main+0x60>)
 80010f8:	480f      	ldr	r0, [pc, #60]	@ (8001138 <main+0x64>)
 80010fa:	f7ff feaf 	bl	8000e5c <PWM_init>
  PWM_init(&BrushUD, &htim3, TIM_CHANNEL_1);
 80010fe:	2200      	movs	r2, #0
 8001100:	490e      	ldr	r1, [pc, #56]	@ (800113c <main+0x68>)
 8001102:	480f      	ldr	r0, [pc, #60]	@ (8001140 <main+0x6c>)
 8001104:	f7ff feaa 	bl	8000e5c <PWM_init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001108:	2100      	movs	r1, #0
 800110a:	480a      	ldr	r0, [pc, #40]	@ (8001134 <main+0x60>)
 800110c:	f003 fc50 	bl	80049b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001110:	2100      	movs	r1, #0
 8001112:	480a      	ldr	r0, [pc, #40]	@ (800113c <main+0x68>)
 8001114:	f003 fc4c 	bl	80049b0 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001118:	f006 fca2 	bl	8007a60 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800111c:	4a09      	ldr	r2, [pc, #36]	@ (8001144 <main+0x70>)
 800111e:	2100      	movs	r1, #0
 8001120:	4809      	ldr	r0, [pc, #36]	@ (8001148 <main+0x74>)
 8001122:	f006 fce7 	bl	8007af4 <osThreadNew>
 8001126:	4603      	mov	r3, r0
 8001128:	4a08      	ldr	r2, [pc, #32]	@ (800114c <main+0x78>)
 800112a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800112c:	f006 fcbc 	bl	8007aa8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <main+0x5c>
 8001134:	20000288 	.word	0x20000288
 8001138:	20003368 	.word	0x20003368
 800113c:	200002d4 	.word	0x200002d4
 8001140:	20003380 	.word	0x20003380
 8001144:	08018a50 	.word	0x08018a50
 8001148:	08001821 	.word	0x08001821
 800114c:	20000320 	.word	0x20000320

08001150 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b094      	sub	sp, #80	@ 0x50
 8001154:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001156:	f107 0318 	add.w	r3, r7, #24
 800115a:	2238      	movs	r2, #56	@ 0x38
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f016 fc6a 	bl	8017a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001172:	2000      	movs	r0, #0
 8001174:	f002 fa18 	bl	80035a8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001178:	2302      	movs	r3, #2
 800117a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800117c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001180:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001182:	2340      	movs	r3, #64	@ 0x40
 8001184:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001186:	2302      	movs	r3, #2
 8001188:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800118a:	2302      	movs	r3, #2
 800118c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800118e:	2304      	movs	r3, #4
 8001190:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001192:	2355      	movs	r3, #85	@ 0x55
 8001194:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001196:	2302      	movs	r3, #2
 8001198:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800119a:	2302      	movs	r3, #2
 800119c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800119e:	2302      	movs	r3, #2
 80011a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a2:	f107 0318 	add.w	r3, r7, #24
 80011a6:	4618      	mov	r0, r3
 80011a8:	f002 fab2 	bl	8003710 <HAL_RCC_OscConfig>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011b2:	f000 fc35 	bl	8001a20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b6:	230f      	movs	r3, #15
 80011b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ba:	2303      	movs	r3, #3
 80011bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	2104      	movs	r1, #4
 80011ce:	4618      	mov	r0, r3
 80011d0:	f002 fdb0 	bl	8003d34 <HAL_RCC_ClockConfig>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80011da:	f000 fc21 	bl	8001a20 <Error_Handler>
  }
}
 80011de:	bf00      	nop
 80011e0:	3750      	adds	r7, #80	@ 0x50
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80011ec:	4b21      	ldr	r3, [pc, #132]	@ (8001274 <MX_LPUART1_UART_Init+0x8c>)
 80011ee:	4a22      	ldr	r2, [pc, #136]	@ (8001278 <MX_LPUART1_UART_Init+0x90>)
 80011f0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80011f2:	4b20      	ldr	r3, [pc, #128]	@ (8001274 <MX_LPUART1_UART_Init+0x8c>)
 80011f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011f8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001274 <MX_LPUART1_UART_Init+0x8c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001200:	4b1c      	ldr	r3, [pc, #112]	@ (8001274 <MX_LPUART1_UART_Init+0x8c>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001206:	4b1b      	ldr	r3, [pc, #108]	@ (8001274 <MX_LPUART1_UART_Init+0x8c>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800120c:	4b19      	ldr	r3, [pc, #100]	@ (8001274 <MX_LPUART1_UART_Init+0x8c>)
 800120e:	220c      	movs	r2, #12
 8001210:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001212:	4b18      	ldr	r3, [pc, #96]	@ (8001274 <MX_LPUART1_UART_Init+0x8c>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001218:	4b16      	ldr	r3, [pc, #88]	@ (8001274 <MX_LPUART1_UART_Init+0x8c>)
 800121a:	2200      	movs	r2, #0
 800121c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800121e:	4b15      	ldr	r3, [pc, #84]	@ (8001274 <MX_LPUART1_UART_Init+0x8c>)
 8001220:	2200      	movs	r2, #0
 8001222:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001224:	4b13      	ldr	r3, [pc, #76]	@ (8001274 <MX_LPUART1_UART_Init+0x8c>)
 8001226:	2200      	movs	r2, #0
 8001228:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800122a:	4812      	ldr	r0, [pc, #72]	@ (8001274 <MX_LPUART1_UART_Init+0x8c>)
 800122c:	f004 fdf0 	bl	8005e10 <HAL_UART_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001236:	f000 fbf3 	bl	8001a20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800123a:	2100      	movs	r1, #0
 800123c:	480d      	ldr	r0, [pc, #52]	@ (8001274 <MX_LPUART1_UART_Init+0x8c>)
 800123e:	f006 fb00 	bl	8007842 <HAL_UARTEx_SetTxFifoThreshold>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001248:	f000 fbea 	bl	8001a20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800124c:	2100      	movs	r1, #0
 800124e:	4809      	ldr	r0, [pc, #36]	@ (8001274 <MX_LPUART1_UART_Init+0x8c>)
 8001250:	f006 fb35 	bl	80078be <HAL_UARTEx_SetRxFifoThreshold>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800125a:	f000 fbe1 	bl	8001a20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800125e:	4805      	ldr	r0, [pc, #20]	@ (8001274 <MX_LPUART1_UART_Init+0x8c>)
 8001260:	f006 fab6 	bl	80077d0 <HAL_UARTEx_DisableFifoMode>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800126a:	f000 fbd9 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000134 	.word	0x20000134
 8001278:	40008000 	.word	0x40008000

0800127c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08e      	sub	sp, #56	@ 0x38
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001282:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800129c:	463b      	mov	r3, r7
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]
 80012aa:	615a      	str	r2, [r3, #20]
 80012ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001364 <MX_TIM2_Init+0xe8>)
 80012b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80012b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001364 <MX_TIM2_Init+0xe8>)
 80012b8:	22a9      	movs	r2, #169	@ 0xa9
 80012ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012bc:	4b29      	ldr	r3, [pc, #164]	@ (8001364 <MX_TIM2_Init+0xe8>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80012c2:	4b28      	ldr	r3, [pc, #160]	@ (8001364 <MX_TIM2_Init+0xe8>)
 80012c4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ca:	4b26      	ldr	r3, [pc, #152]	@ (8001364 <MX_TIM2_Init+0xe8>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d0:	4b24      	ldr	r3, [pc, #144]	@ (8001364 <MX_TIM2_Init+0xe8>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012d6:	4823      	ldr	r0, [pc, #140]	@ (8001364 <MX_TIM2_Init+0xe8>)
 80012d8:	f003 f9c8 	bl	800466c <HAL_TIM_Base_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80012e2:	f000 fb9d 	bl	8001a20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012f0:	4619      	mov	r1, r3
 80012f2:	481c      	ldr	r0, [pc, #112]	@ (8001364 <MX_TIM2_Init+0xe8>)
 80012f4:	f003 fed2 	bl	800509c <HAL_TIM_ConfigClockSource>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80012fe:	f000 fb8f 	bl	8001a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001302:	4818      	ldr	r0, [pc, #96]	@ (8001364 <MX_TIM2_Init+0xe8>)
 8001304:	f003 faf2 	bl	80048ec <HAL_TIM_PWM_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800130e:	f000 fb87 	bl	8001a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	4619      	mov	r1, r3
 8001320:	4810      	ldr	r0, [pc, #64]	@ (8001364 <MX_TIM2_Init+0xe8>)
 8001322:	f004 fc99 	bl	8005c58 <HAL_TIMEx_MasterConfigSynchronization>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800132c:	f000 fb78 	bl	8001a20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001330:	2360      	movs	r3, #96	@ 0x60
 8001332:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001338:	2300      	movs	r3, #0
 800133a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001340:	463b      	mov	r3, r7
 8001342:	2200      	movs	r2, #0
 8001344:	4619      	mov	r1, r3
 8001346:	4807      	ldr	r0, [pc, #28]	@ (8001364 <MX_TIM2_Init+0xe8>)
 8001348:	f003 fd94 	bl	8004e74 <HAL_TIM_PWM_ConfigChannel>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001352:	f000 fb65 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001356:	4803      	ldr	r0, [pc, #12]	@ (8001364 <MX_TIM2_Init+0xe8>)
 8001358:	f000 fc82 	bl	8001c60 <HAL_TIM_MspPostInit>

}
 800135c:	bf00      	nop
 800135e:	3738      	adds	r7, #56	@ 0x38
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000288 	.word	0x20000288

08001368 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08e      	sub	sp, #56	@ 0x38
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001388:	463b      	mov	r3, r7
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
 8001394:	611a      	str	r2, [r3, #16]
 8001396:	615a      	str	r2, [r3, #20]
 8001398:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800139a:	4b32      	ldr	r3, [pc, #200]	@ (8001464 <MX_TIM3_Init+0xfc>)
 800139c:	4a32      	ldr	r2, [pc, #200]	@ (8001468 <MX_TIM3_Init+0x100>)
 800139e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 80013a0:	4b30      	ldr	r3, [pc, #192]	@ (8001464 <MX_TIM3_Init+0xfc>)
 80013a2:	22a9      	movs	r2, #169	@ 0xa9
 80013a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001464 <MX_TIM3_Init+0xfc>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80013ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001464 <MX_TIM3_Init+0xfc>)
 80013ae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001464 <MX_TIM3_Init+0xfc>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001464 <MX_TIM3_Init+0xfc>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013c0:	4828      	ldr	r0, [pc, #160]	@ (8001464 <MX_TIM3_Init+0xfc>)
 80013c2:	f003 f953 	bl	800466c <HAL_TIM_Base_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80013cc:	f000 fb28 	bl	8001a20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013da:	4619      	mov	r1, r3
 80013dc:	4821      	ldr	r0, [pc, #132]	@ (8001464 <MX_TIM3_Init+0xfc>)
 80013de:	f003 fe5d 	bl	800509c <HAL_TIM_ConfigClockSource>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80013e8:	f000 fb1a 	bl	8001a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013ec:	481d      	ldr	r0, [pc, #116]	@ (8001464 <MX_TIM3_Init+0xfc>)
 80013ee:	f003 fa7d 	bl	80048ec <HAL_TIM_PWM_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80013f8:	f000 fb12 	bl	8001a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001404:	f107 031c 	add.w	r3, r7, #28
 8001408:	4619      	mov	r1, r3
 800140a:	4816      	ldr	r0, [pc, #88]	@ (8001464 <MX_TIM3_Init+0xfc>)
 800140c:	f004 fc24 	bl	8005c58 <HAL_TIMEx_MasterConfigSynchronization>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001416:	f000 fb03 	bl	8001a20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800141a:	2360      	movs	r3, #96	@ 0x60
 800141c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800142a:	463b      	mov	r3, r7
 800142c:	2200      	movs	r2, #0
 800142e:	4619      	mov	r1, r3
 8001430:	480c      	ldr	r0, [pc, #48]	@ (8001464 <MX_TIM3_Init+0xfc>)
 8001432:	f003 fd1f 	bl	8004e74 <HAL_TIM_PWM_ConfigChannel>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800143c:	f000 faf0 	bl	8001a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001440:	463b      	mov	r3, r7
 8001442:	2204      	movs	r2, #4
 8001444:	4619      	mov	r1, r3
 8001446:	4807      	ldr	r0, [pc, #28]	@ (8001464 <MX_TIM3_Init+0xfc>)
 8001448:	f003 fd14 	bl	8004e74 <HAL_TIM_PWM_ConfigChannel>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001452:	f000 fae5 	bl	8001a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001456:	4803      	ldr	r0, [pc, #12]	@ (8001464 <MX_TIM3_Init+0xfc>)
 8001458:	f000 fc02 	bl	8001c60 <HAL_TIM_MspPostInit>

}
 800145c:	bf00      	nop
 800145e:	3738      	adds	r7, #56	@ 0x38
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200002d4 	.word	0x200002d4
 8001468:	40000400 	.word	0x40000400

0800146c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001472:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <MX_DMA_Init+0x60>)
 8001474:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001476:	4a15      	ldr	r2, [pc, #84]	@ (80014cc <MX_DMA_Init+0x60>)
 8001478:	f043 0304 	orr.w	r3, r3, #4
 800147c:	6493      	str	r3, [r2, #72]	@ 0x48
 800147e:	4b13      	ldr	r3, [pc, #76]	@ (80014cc <MX_DMA_Init+0x60>)
 8001480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001482:	f003 0304 	and.w	r3, r3, #4
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800148a:	4b10      	ldr	r3, [pc, #64]	@ (80014cc <MX_DMA_Init+0x60>)
 800148c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800148e:	4a0f      	ldr	r2, [pc, #60]	@ (80014cc <MX_DMA_Init+0x60>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6493      	str	r3, [r2, #72]	@ 0x48
 8001496:	4b0d      	ldr	r3, [pc, #52]	@ (80014cc <MX_DMA_Init+0x60>)
 8001498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2105      	movs	r1, #5
 80014a6:	200b      	movs	r0, #11
 80014a8:	f001 fb5a 	bl	8002b60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014ac:	200b      	movs	r0, #11
 80014ae:	f001 fb71 	bl	8002b94 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2105      	movs	r1, #5
 80014b6:	200c      	movs	r0, #12
 80014b8:	f001 fb52 	bl	8002b60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80014bc:	200c      	movs	r0, #12
 80014be:	f001 fb69 	bl	8002b94 <HAL_NVIC_EnableIRQ>

}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000

080014d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	@ 0x28
 80014d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e6:	4b41      	ldr	r3, [pc, #260]	@ (80015ec <MX_GPIO_Init+0x11c>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ea:	4a40      	ldr	r2, [pc, #256]	@ (80015ec <MX_GPIO_Init+0x11c>)
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f2:	4b3e      	ldr	r3, [pc, #248]	@ (80015ec <MX_GPIO_Init+0x11c>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014fe:	4b3b      	ldr	r3, [pc, #236]	@ (80015ec <MX_GPIO_Init+0x11c>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001502:	4a3a      	ldr	r2, [pc, #232]	@ (80015ec <MX_GPIO_Init+0x11c>)
 8001504:	f043 0320 	orr.w	r3, r3, #32
 8001508:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800150a:	4b38      	ldr	r3, [pc, #224]	@ (80015ec <MX_GPIO_Init+0x11c>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150e:	f003 0320 	and.w	r3, r3, #32
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	4b35      	ldr	r3, [pc, #212]	@ (80015ec <MX_GPIO_Init+0x11c>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151a:	4a34      	ldr	r2, [pc, #208]	@ (80015ec <MX_GPIO_Init+0x11c>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001522:	4b32      	ldr	r3, [pc, #200]	@ (80015ec <MX_GPIO_Init+0x11c>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152e:	4b2f      	ldr	r3, [pc, #188]	@ (80015ec <MX_GPIO_Init+0x11c>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001532:	4a2e      	ldr	r2, [pc, #184]	@ (80015ec <MX_GPIO_Init+0x11c>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800153a:	4b2c      	ldr	r3, [pc, #176]	@ (80015ec <MX_GPIO_Init+0x11c>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8001546:	2200      	movs	r2, #0
 8001548:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800154c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001550:	f001 ffee 	bl	8003530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	2140      	movs	r1, #64	@ 0x40
 8001558:	4825      	ldr	r0, [pc, #148]	@ (80015f0 <MX_GPIO_Init+0x120>)
 800155a:	f001 ffe9 	bl	8003530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800155e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001562:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001564:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	481f      	ldr	r0, [pc, #124]	@ (80015f4 <MX_GPIO_Init+0x124>)
 8001576:	f001 fe59 	bl	800322c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800157a:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800157e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001580:	2301      	movs	r3, #1
 8001582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001596:	f001 fe49 	bl	800322c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800159a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800159e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	4619      	mov	r1, r3
 80015ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b2:	f001 fe3b 	bl	800322c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015b6:	2340      	movs	r3, #64	@ 0x40
 80015b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ba:	2301      	movs	r3, #1
 80015bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	2300      	movs	r3, #0
 80015c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	4808      	ldr	r0, [pc, #32]	@ (80015f0 <MX_GPIO_Init+0x120>)
 80015ce:	f001 fe2d 	bl	800322c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2105      	movs	r1, #5
 80015d6:	2028      	movs	r0, #40	@ 0x28
 80015d8:	f001 fac2 	bl	8002b60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015dc:	2028      	movs	r0, #40	@ 0x28
 80015de:	f001 fad9 	bl	8002b94 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015e2:	bf00      	nop
 80015e4:	3728      	adds	r7, #40	@ 0x28
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000
 80015f0:	48000400 	.word	0x48000400
 80015f4:	48000800 	.word	0x48000800

080015f8 <timer_callback>:
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d005      	beq.n	8001616 <timer_callback+0x1e>
		BrusheMotorControlled();
 800160a:	f000 f817 	bl	800163c <BrusheMotorControlled>
		BrushUpDownControlled();
 800160e:	f000 f83d 	bl	800168c <BrushUpDownControlled>
		BrushUpDownMode();
 8001612:	f000 f875 	bl	8001700 <BrushUpDownMode>
	}
	rcl_ret_t ret = rcl_publish(&publisher, &msg_pub, NULL);
 8001616:	2200      	movs	r2, #0
 8001618:	4906      	ldr	r1, [pc, #24]	@ (8001634 <timer_callback+0x3c>)
 800161a:	4807      	ldr	r0, [pc, #28]	@ (8001638 <timer_callback+0x40>)
 800161c:	f009 f99c 	bl	800a958 <rcl_publish>
 8001620:	6178      	str	r0, [r7, #20]
	if (ret != RCL_RET_OK)
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <timer_callback+0x34>
	{
		NVIC_SystemReset();
 8001628:	f7ff fd3e 	bl	80010a8 <__NVIC_SystemReset>
	}
}
 800162c:	bf00      	nop
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20003274 	.word	0x20003274
 8001638:	20003270 	.word	0x20003270

0800163c <BrusheMotorControlled>:

void BrusheMotorControlled()
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	if (Brush)
 8001640:	4b0d      	ldr	r3, [pc, #52]	@ (8001678 <BrusheMotorControlled+0x3c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d00e      	beq.n	8001666 <BrusheMotorControlled+0x2a>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8001648:	2200      	movs	r2, #0
 800164a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800164e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001652:	f001 ff6d 	bl	8003530 <HAL_GPIO_WritePin>
		PWM_write_duty(&BrushMTR, 2000, 100);
 8001656:	eddf 0a09 	vldr	s1, [pc, #36]	@ 800167c <BrusheMotorControlled+0x40>
 800165a:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8001680 <BrusheMotorControlled+0x44>
 800165e:	4809      	ldr	r0, [pc, #36]	@ (8001684 <BrusheMotorControlled+0x48>)
 8001660:	f7ff fc1e 	bl	8000ea0 <PWM_write_duty>
	}
	else
	{
		PWM_write_duty(&BrushMTR, 2000, 0);
	}
}
 8001664:	e006      	b.n	8001674 <BrusheMotorControlled+0x38>
		PWM_write_duty(&BrushMTR, 2000, 0);
 8001666:	eddf 0a08 	vldr	s1, [pc, #32]	@ 8001688 <BrusheMotorControlled+0x4c>
 800166a:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8001680 <BrusheMotorControlled+0x44>
 800166e:	4805      	ldr	r0, [pc, #20]	@ (8001684 <BrusheMotorControlled+0x48>)
 8001670:	f7ff fc16 	bl	8000ea0 <PWM_write_duty>
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20003358 	.word	0x20003358
 800167c:	42c80000 	.word	0x42c80000
 8001680:	44fa0000 	.word	0x44fa0000
 8001684:	20003368 	.word	0x20003368
 8001688:	00000000 	.word	0x00000000

0800168c <BrushUpDownControlled>:
void BrushUpDownControlled()
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
	if (BrushUD_mode == 1)
 8001690:	4b16      	ldr	r3, [pc, #88]	@ (80016ec <BrushUpDownControlled+0x60>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d10d      	bne.n	80016b4 <BrushUpDownControlled+0x28>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 8001698:	2200      	movs	r2, #0
 800169a:	2180      	movs	r1, #128	@ 0x80
 800169c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016a0:	f001 ff46 	bl	8003530 <HAL_GPIO_WritePin>
		PWM_write_duty(&BrushUD, 2000, 100);
 80016a4:	eddf 0a12 	vldr	s1, [pc, #72]	@ 80016f0 <BrushUpDownControlled+0x64>
 80016a8:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 80016f4 <BrushUpDownControlled+0x68>
 80016ac:	4812      	ldr	r0, [pc, #72]	@ (80016f8 <BrushUpDownControlled+0x6c>)
 80016ae:	f7ff fbf7 	bl	8000ea0 <PWM_write_duty>
	}
	else
	{
		PWM_write_duty(&BrushUD, 2000, 0);
	}
}
 80016b2:	e018      	b.n	80016e6 <BrushUpDownControlled+0x5a>
	else if (BrushUD_mode == 2)
 80016b4:	4b0d      	ldr	r3, [pc, #52]	@ (80016ec <BrushUpDownControlled+0x60>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d10d      	bne.n	80016d8 <BrushUpDownControlled+0x4c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 80016bc:	2201      	movs	r2, #1
 80016be:	2180      	movs	r1, #128	@ 0x80
 80016c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016c4:	f001 ff34 	bl	8003530 <HAL_GPIO_WritePin>
		PWM_write_duty(&BrushUD, 2000, 100);
 80016c8:	eddf 0a09 	vldr	s1, [pc, #36]	@ 80016f0 <BrushUpDownControlled+0x64>
 80016cc:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 80016f4 <BrushUpDownControlled+0x68>
 80016d0:	4809      	ldr	r0, [pc, #36]	@ (80016f8 <BrushUpDownControlled+0x6c>)
 80016d2:	f7ff fbe5 	bl	8000ea0 <PWM_write_duty>
}
 80016d6:	e006      	b.n	80016e6 <BrushUpDownControlled+0x5a>
		PWM_write_duty(&BrushUD, 2000, 0);
 80016d8:	eddf 0a08 	vldr	s1, [pc, #32]	@ 80016fc <BrushUpDownControlled+0x70>
 80016dc:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 80016f4 <BrushUpDownControlled+0x68>
 80016e0:	4805      	ldr	r0, [pc, #20]	@ (80016f8 <BrushUpDownControlled+0x6c>)
 80016e2:	f7ff fbdd 	bl	8000ea0 <PWM_write_duty>
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20003360 	.word	0x20003360
 80016f0:	42c80000 	.word	0x42c80000
 80016f4:	44fa0000 	.word	0x44fa0000
 80016f8:	20003380 	.word	0x20003380
 80016fc:	00000000 	.word	0x00000000

08001700 <BrushUpDownMode>:
void BrushUpDownMode()
{
 8001700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001704:	b084      	sub	sp, #16
 8001706:	af00      	add	r7, sp, #0
	static uint64_t brush_timestamp = 0;
	static uint64_t time_period = 500;
	if (Servo_switch && Servo_switch != prev_Servo){
 8001708:	4b2e      	ldr	r3, [pc, #184]	@ (80017c4 <BrushUpDownMode+0xc4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d014      	beq.n	800173a <BrushUpDownMode+0x3a>
 8001710:	4b2c      	ldr	r3, [pc, #176]	@ (80017c4 <BrushUpDownMode+0xc4>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b2c      	ldr	r3, [pc, #176]	@ (80017c8 <BrushUpDownMode+0xc8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d00e      	beq.n	800173a <BrushUpDownMode+0x3a>
		BrushUD_mode = 1;
 800171c:	4b2b      	ldr	r3, [pc, #172]	@ (80017cc <BrushUpDownMode+0xcc>)
 800171e:	2201      	movs	r2, #1
 8001720:	601a      	str	r2, [r3, #0]
		brush_timestamp = HAL_GetTick();
 8001722:	f001 f959 	bl	80029d8 <HAL_GetTick>
 8001726:	4603      	mov	r3, r0
 8001728:	2200      	movs	r2, #0
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	60fa      	str	r2, [r7, #12]
 800172e:	4b28      	ldr	r3, [pc, #160]	@ (80017d0 <BrushUpDownMode+0xd0>)
 8001730:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001734:	e9c3 1200 	strd	r1, r2, [r3]
 8001738:	e03b      	b.n	80017b2 <BrushUpDownMode+0xb2>
	}
	else if (Servo_switch != prev_Servo){
 800173a:	4b22      	ldr	r3, [pc, #136]	@ (80017c4 <BrushUpDownMode+0xc4>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4b22      	ldr	r3, [pc, #136]	@ (80017c8 <BrushUpDownMode+0xc8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	d00e      	beq.n	8001764 <BrushUpDownMode+0x64>
		BrushUD_mode = 2;
 8001746:	4b21      	ldr	r3, [pc, #132]	@ (80017cc <BrushUpDownMode+0xcc>)
 8001748:	2202      	movs	r2, #2
 800174a:	601a      	str	r2, [r3, #0]
		brush_timestamp = HAL_GetTick();
 800174c:	f001 f944 	bl	80029d8 <HAL_GetTick>
 8001750:	4603      	mov	r3, r0
 8001752:	2200      	movs	r2, #0
 8001754:	603b      	str	r3, [r7, #0]
 8001756:	607a      	str	r2, [r7, #4]
 8001758:	4b1d      	ldr	r3, [pc, #116]	@ (80017d0 <BrushUpDownMode+0xd0>)
 800175a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800175e:	e9c3 1200 	strd	r1, r2, [r3]
 8001762:	e026      	b.n	80017b2 <BrushUpDownMode+0xb2>
	}
	else if ((BrushUD_mode == 1 || BrushUD_mode == 2) && HAL_GetTick() - brush_timestamp > time_period){
 8001764:	4b19      	ldr	r3, [pc, #100]	@ (80017cc <BrushUpDownMode+0xcc>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d003      	beq.n	8001774 <BrushUpDownMode+0x74>
 800176c:	4b17      	ldr	r3, [pc, #92]	@ (80017cc <BrushUpDownMode+0xcc>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b02      	cmp	r3, #2
 8001772:	d11e      	bne.n	80017b2 <BrushUpDownMode+0xb2>
 8001774:	f001 f930 	bl	80029d8 <HAL_GetTick>
 8001778:	4603      	mov	r3, r0
 800177a:	2200      	movs	r2, #0
 800177c:	4698      	mov	r8, r3
 800177e:	4691      	mov	r9, r2
 8001780:	4b13      	ldr	r3, [pc, #76]	@ (80017d0 <BrushUpDownMode+0xd0>)
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	ebb8 0402 	subs.w	r4, r8, r2
 800178a:	eb69 0503 	sbc.w	r5, r9, r3
 800178e:	4b11      	ldr	r3, [pc, #68]	@ (80017d4 <BrushUpDownMode+0xd4>)
 8001790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001794:	42a2      	cmp	r2, r4
 8001796:	41ab      	sbcs	r3, r5
 8001798:	d20b      	bcs.n	80017b2 <BrushUpDownMode+0xb2>
		BrushUD_mode = 0;
 800179a:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <BrushUpDownMode+0xcc>)
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
		brush_timestamp = HAL_GetTick();
 80017a0:	f001 f91a 	bl	80029d8 <HAL_GetTick>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2200      	movs	r2, #0
 80017a8:	469a      	mov	sl, r3
 80017aa:	4693      	mov	fp, r2
 80017ac:	4b08      	ldr	r3, [pc, #32]	@ (80017d0 <BrushUpDownMode+0xd0>)
 80017ae:	e9c3 ab00 	strd	sl, fp, [r3]
	}

	prev_Servo = Servo_switch;
 80017b2:	4b04      	ldr	r3, [pc, #16]	@ (80017c4 <BrushUpDownMode+0xc4>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a04      	ldr	r2, [pc, #16]	@ (80017c8 <BrushUpDownMode+0xc8>)
 80017b8:	6013      	str	r3, [r2, #0]

}
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017c4:	2000335c 	.word	0x2000335c
 80017c8:	20003364 	.word	0x20003364
 80017cc:	20003360 	.word	0x20003360
 80017d0:	20003398 	.word	0x20003398
 80017d4:	20000000 	.word	0x20000000

080017d8 <subscription_callback_servo>:

void subscription_callback_servo(const void * msgin)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32 *)msgin;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	60fb      	str	r3, [r7, #12]
	Servo_switch = msg->data;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a03      	ldr	r2, [pc, #12]	@ (80017f8 <subscription_callback_servo+0x20>)
 80017ea:	6013      	str	r3, [r2, #0]

}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	2000335c 	.word	0x2000335c

080017fc <subscription_callback_Brush>:

void subscription_callback_Brush(const void * msgin)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32 *)msgin;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	60fb      	str	r3, [r7, #12]
	Brush = msg->data;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a03      	ldr	r2, [pc, #12]	@ (800181c <subscription_callback_Brush+0x20>)
 800180e:	6013      	str	r3, [r2, #0]

}
 8001810:	bf00      	nop
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	20003358 	.word	0x20003358

08001820 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001820:	b5b0      	push	{r4, r5, r7, lr}
 8001822:	b0b2      	sub	sp, #200	@ 0xc8
 8001824:	af02      	add	r7, sp, #8
 8001826:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
  /* USER CODE BEGIN 5 */
		rmw_uros_set_custom_transport(
 800182a:	4b55      	ldr	r3, [pc, #340]	@ (8001980 <StartDefaultTask+0x160>)
 800182c:	9301      	str	r3, [sp, #4]
 800182e:	4b55      	ldr	r3, [pc, #340]	@ (8001984 <StartDefaultTask+0x164>)
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	4b55      	ldr	r3, [pc, #340]	@ (8001988 <StartDefaultTask+0x168>)
 8001834:	4a55      	ldr	r2, [pc, #340]	@ (800198c <StartDefaultTask+0x16c>)
 8001836:	4956      	ldr	r1, [pc, #344]	@ (8001990 <StartDefaultTask+0x170>)
 8001838:	2001      	movs	r0, #1
 800183a:	f00a f915 	bl	800ba68 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

		rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 800183e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001842:	4618      	mov	r0, r3
 8001844:	f00a f82c 	bl	800b8a0 <rcutils_get_zero_initialized_allocator>
		freeRTOS_allocator.allocate = microros_allocate;
 8001848:	4b52      	ldr	r3, [pc, #328]	@ (8001994 <StartDefaultTask+0x174>)
 800184a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		freeRTOS_allocator.deallocate = microros_deallocate;
 800184e:	4b52      	ldr	r3, [pc, #328]	@ (8001998 <StartDefaultTask+0x178>)
 8001850:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		freeRTOS_allocator.reallocate = microros_reallocate;
 8001854:	4b51      	ldr	r3, [pc, #324]	@ (800199c <StartDefaultTask+0x17c>)
 8001856:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
		freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 800185a:	4b51      	ldr	r3, [pc, #324]	@ (80019a0 <StartDefaultTask+0x180>)
 800185c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

		if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001860:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001864:	4618      	mov	r0, r3
 8001866:	f00a f829 	bl	800b8bc <rcutils_set_default_allocator>
 800186a:	4603      	mov	r3, r0
 800186c:	f083 0301 	eor.w	r3, r3, #1
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d004      	beq.n	8001880 <StartDefaultTask+0x60>
		  printf("Error on default allocators (line %d)\n", __LINE__);
 8001876:	f44f 711b 	mov.w	r1, #620	@ 0x26c
 800187a:	484a      	ldr	r0, [pc, #296]	@ (80019a4 <StartDefaultTask+0x184>)
 800187c:	f015 fff0 	bl	8017860 <iprintf>
		}

		// micro-ROS app
		allocator = rcl_get_default_allocator();
 8001880:	4c49      	ldr	r4, [pc, #292]	@ (80019a8 <StartDefaultTask+0x188>)
 8001882:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001886:	4618      	mov	r0, r3
 8001888:	f00a f836 	bl	800b8f8 <rcutils_get_default_allocator>
 800188c:	4625      	mov	r5, r4
 800188e:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8001892:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001894:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001896:	6823      	ldr	r3, [r4, #0]
 8001898:	602b      	str	r3, [r5, #0]

		init_options = rcl_get_zero_initialized_init_options();
 800189a:	f008 fe8d 	bl	800a5b8 <rcl_get_zero_initialized_init_options>
 800189e:	4603      	mov	r3, r0
 80018a0:	4a42      	ldr	r2, [pc, #264]	@ (80019ac <StartDefaultTask+0x18c>)
 80018a2:	6013      	str	r3, [r2, #0]
		rcl_init_options_init(&init_options, allocator);
 80018a4:	4b40      	ldr	r3, [pc, #256]	@ (80019a8 <StartDefaultTask+0x188>)
 80018a6:	466c      	mov	r4, sp
 80018a8:	f103 020c 	add.w	r2, r3, #12
 80018ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018b0:	e884 0003 	stmia.w	r4, {r0, r1}
 80018b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018b6:	483d      	ldr	r0, [pc, #244]	@ (80019ac <StartDefaultTask+0x18c>)
 80018b8:	f008 fe80 	bl	800a5bc <rcl_init_options_init>
		rcl_init_options_set_domain_id(&init_options, 1);
 80018bc:	2101      	movs	r1, #1
 80018be:	483b      	ldr	r0, [pc, #236]	@ (80019ac <StartDefaultTask+0x18c>)
 80018c0:	f008 ff78 	bl	800a7b4 <rcl_init_options_set_domain_id>

		// Initialize rclc support object with custom options
		rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 80018c4:	4b38      	ldr	r3, [pc, #224]	@ (80019a8 <StartDefaultTask+0x188>)
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	4b38      	ldr	r3, [pc, #224]	@ (80019ac <StartDefaultTask+0x18c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	4838      	ldr	r0, [pc, #224]	@ (80019b0 <StartDefaultTask+0x190>)
 80018d0:	f009 fed6 	bl	800b680 <rclc_support_init_with_options>

		// Create node
		rclc_node_init_default(&node, "cubemx_node", "", &support);
 80018d4:	4b36      	ldr	r3, [pc, #216]	@ (80019b0 <StartDefaultTask+0x190>)
 80018d6:	4a37      	ldr	r2, [pc, #220]	@ (80019b4 <StartDefaultTask+0x194>)
 80018d8:	4937      	ldr	r1, [pc, #220]	@ (80019b8 <StartDefaultTask+0x198>)
 80018da:	4838      	ldr	r0, [pc, #224]	@ (80019bc <StartDefaultTask+0x19c>)
 80018dc:	f009 ff04 	bl	800b6e8 <rclc_node_init_default>

		// Create timer
		rclc_timer_init_default(&timer, &support, RCL_MS_TO_NS(10), timer_callback);
 80018e0:	4b37      	ldr	r3, [pc, #220]	@ (80019c0 <StartDefaultTask+0x1a0>)
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	4a37      	ldr	r2, [pc, #220]	@ (80019c4 <StartDefaultTask+0x1a4>)
 80018e6:	f04f 0300 	mov.w	r3, #0
 80018ea:	4931      	ldr	r1, [pc, #196]	@ (80019b0 <StartDefaultTask+0x190>)
 80018ec:	4836      	ldr	r0, [pc, #216]	@ (80019c8 <StartDefaultTask+0x1a8>)
 80018ee:	f009 ff9f 	bl	800b830 <rclc_timer_init_default>

		// Create subscriber
		rclc_subscription_init_default(
 80018f2:	f00b fb05 	bl	800cf00 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80018f6:	4602      	mov	r2, r0
 80018f8:	4b34      	ldr	r3, [pc, #208]	@ (80019cc <StartDefaultTask+0x1ac>)
 80018fa:	4930      	ldr	r1, [pc, #192]	@ (80019bc <StartDefaultTask+0x19c>)
 80018fc:	4834      	ldr	r0, [pc, #208]	@ (80019d0 <StartDefaultTask+0x1b0>)
 80018fe:	f009 ff63 	bl	800b7c8 <rclc_subscription_init_default>
			&subscriber_servo,
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			"cubemx_publisher_servo");

		rclc_subscription_init_default(
 8001902:	f00b fafd 	bl	800cf00 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001906:	4602      	mov	r2, r0
 8001908:	4b32      	ldr	r3, [pc, #200]	@ (80019d4 <StartDefaultTask+0x1b4>)
 800190a:	492c      	ldr	r1, [pc, #176]	@ (80019bc <StartDefaultTask+0x19c>)
 800190c:	4832      	ldr	r0, [pc, #200]	@ (80019d8 <StartDefaultTask+0x1b8>)
 800190e:	f009 ff5b 	bl	800b7c8 <rclc_subscription_init_default>
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			"cubemx_publisher_Brush");

		// create publisher
		rclc_publisher_init_default(
 8001912:	f00b faf5 	bl	800cf00 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001916:	4602      	mov	r2, r0
 8001918:	4b30      	ldr	r3, [pc, #192]	@ (80019dc <StartDefaultTask+0x1bc>)
 800191a:	4928      	ldr	r1, [pc, #160]	@ (80019bc <StartDefaultTask+0x19c>)
 800191c:	4830      	ldr	r0, [pc, #192]	@ (80019e0 <StartDefaultTask+0x1c0>)
 800191e:	f009 ff1f 	bl	800b760 <rclc_publisher_init_default>
			&publisher,
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			"cubemx_publisher");

		msg_pub.data = 0;
 8001922:	4b30      	ldr	r3, [pc, #192]	@ (80019e4 <StartDefaultTask+0x1c4>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]

		// Initialize the executor
		executor = rclc_executor_get_zero_initialized_executor();
 8001928:	4c2f      	ldr	r4, [pc, #188]	@ (80019e8 <StartDefaultTask+0x1c8>)
 800192a:	463b      	mov	r3, r7
 800192c:	4618      	mov	r0, r3
 800192e:	f009 fba1 	bl	800b074 <rclc_executor_get_zero_initialized_executor>
 8001932:	4620      	mov	r0, r4
 8001934:	463b      	mov	r3, r7
 8001936:	2288      	movs	r2, #136	@ 0x88
 8001938:	4619      	mov	r1, r3
 800193a:	f016 f946 	bl	8017bca <memcpy>
		rclc_executor_init(&executor, &support.context, 3, &allocator);
 800193e:	4b1a      	ldr	r3, [pc, #104]	@ (80019a8 <StartDefaultTask+0x188>)
 8001940:	2203      	movs	r2, #3
 8001942:	491b      	ldr	r1, [pc, #108]	@ (80019b0 <StartDefaultTask+0x190>)
 8001944:	4828      	ldr	r0, [pc, #160]	@ (80019e8 <StartDefaultTask+0x1c8>)
 8001946:	f009 fb9f 	bl	800b088 <rclc_executor_init>
		rclc_executor_add_timer(&executor, &timer);
 800194a:	491f      	ldr	r1, [pc, #124]	@ (80019c8 <StartDefaultTask+0x1a8>)
 800194c:	4826      	ldr	r0, [pc, #152]	@ (80019e8 <StartDefaultTask+0x1c8>)
 800194e:	f009 fc3f 	bl	800b1d0 <rclc_executor_add_timer>
		rclc_executor_add_subscription(&executor, &subscriber_servo, &msg_servo, subscription_callback_servo, ON_NEW_DATA);
 8001952:	2300      	movs	r3, #0
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	4b25      	ldr	r3, [pc, #148]	@ (80019ec <StartDefaultTask+0x1cc>)
 8001958:	4a25      	ldr	r2, [pc, #148]	@ (80019f0 <StartDefaultTask+0x1d0>)
 800195a:	491d      	ldr	r1, [pc, #116]	@ (80019d0 <StartDefaultTask+0x1b0>)
 800195c:	4822      	ldr	r0, [pc, #136]	@ (80019e8 <StartDefaultTask+0x1c8>)
 800195e:	f009 fc03 	bl	800b168 <rclc_executor_add_subscription>
		rclc_executor_add_subscription(&executor, &subscriber_Brush, &msg_Brush, subscription_callback_Brush, ON_NEW_DATA);
 8001962:	2300      	movs	r3, #0
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	4b23      	ldr	r3, [pc, #140]	@ (80019f4 <StartDefaultTask+0x1d4>)
 8001968:	4a23      	ldr	r2, [pc, #140]	@ (80019f8 <StartDefaultTask+0x1d8>)
 800196a:	491b      	ldr	r1, [pc, #108]	@ (80019d8 <StartDefaultTask+0x1b8>)
 800196c:	481e      	ldr	r0, [pc, #120]	@ (80019e8 <StartDefaultTask+0x1c8>)
 800196e:	f009 fbfb 	bl	800b168 <rclc_executor_add_subscription>
		rclc_executor_spin(&executor);
 8001972:	481d      	ldr	r0, [pc, #116]	@ (80019e8 <StartDefaultTask+0x1c8>)
 8001974:	f009 fe42 	bl	800b5fc <rclc_executor_spin>

		for(;;)
		{
			osDelay(10);
 8001978:	200a      	movs	r0, #10
 800197a:	f006 f94d 	bl	8007c18 <osDelay>
 800197e:	e7fb      	b.n	8001978 <StartDefaultTask+0x158>
 8001980:	08002889 	.word	0x08002889
 8001984:	08002825 	.word	0x08002825
 8001988:	08002805 	.word	0x08002805
 800198c:	080027d9 	.word	0x080027d9
 8001990:	20000134 	.word	0x20000134
 8001994:	08002511 	.word	0x08002511
 8001998:	08002555 	.word	0x08002555
 800199c:	0800258d 	.word	0x0800258d
 80019a0:	080025f9 	.word	0x080025f9
 80019a4:	0801899c 	.word	0x0801899c
 80019a8:	200032b0 	.word	0x200032b0
 80019ac:	200032cc 	.word	0x200032cc
 80019b0:	2000327c 	.word	0x2000327c
 80019b4:	080189c4 	.word	0x080189c4
 80019b8:	080189c8 	.word	0x080189c8
 80019bc:	200032c4 	.word	0x200032c4
 80019c0:	080015f9 	.word	0x080015f9
 80019c4:	00989680 	.word	0x00989680
 80019c8:	20003278 	.word	0x20003278
 80019cc:	080189d4 	.word	0x080189d4
 80019d0:	20003260 	.word	0x20003260
 80019d4:	080189ec 	.word	0x080189ec
 80019d8:	20003268 	.word	0x20003268
 80019dc:	08018a04 	.word	0x08018a04
 80019e0:	20003270 	.word	0x20003270
 80019e4:	20003274 	.word	0x20003274
 80019e8:	200032d0 	.word	0x200032d0
 80019ec:	080017d9 	.word	0x080017d9
 80019f0:	20003264 	.word	0x20003264
 80019f4:	080017fd 	.word	0x080017fd
 80019f8:	2000326c 	.word	0x2000326c

080019fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a04      	ldr	r2, [pc, #16]	@ (8001a1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d101      	bne.n	8001a12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a0e:	f000 ffd1 	bl	80029b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40012c00 	.word	0x40012c00

08001a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a24:	b672      	cpsid	i
}
 8001a26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <Error_Handler+0x8>

08001a2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a32:	4b12      	ldr	r3, [pc, #72]	@ (8001a7c <HAL_MspInit+0x50>)
 8001a34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a36:	4a11      	ldr	r2, [pc, #68]	@ (8001a7c <HAL_MspInit+0x50>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a7c <HAL_MspInit+0x50>)
 8001a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a7c <HAL_MspInit+0x50>)
 8001a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a7c <HAL_MspInit+0x50>)
 8001a50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a54:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a56:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <HAL_MspInit+0x50>)
 8001a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	210f      	movs	r1, #15
 8001a66:	f06f 0001 	mvn.w	r0, #1
 8001a6a:	f001 f879 	bl	8002b60 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a6e:	f001 fe3f 	bl	80036f0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40021000 	.word	0x40021000

08001a80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b09e      	sub	sp, #120	@ 0x78
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a98:	f107 0310 	add.w	r3, r7, #16
 8001a9c:	2254      	movs	r2, #84	@ 0x54
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f015 ffc9 	bl	8017a38 <memset>
  if(huart->Instance==LPUART1)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a4e      	ldr	r2, [pc, #312]	@ (8001be4 <HAL_UART_MspInit+0x164>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	f040 8094 	bne.w	8001bda <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001ab2:	2320      	movs	r3, #32
 8001ab4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aba:	f107 0310 	add.w	r3, r7, #16
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f002 fb86 	bl	80041d0 <HAL_RCCEx_PeriphCLKConfig>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001aca:	f7ff ffa9 	bl	8001a20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001ace:	4b46      	ldr	r3, [pc, #280]	@ (8001be8 <HAL_UART_MspInit+0x168>)
 8001ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad2:	4a45      	ldr	r2, [pc, #276]	@ (8001be8 <HAL_UART_MspInit+0x168>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001ada:	4b43      	ldr	r3, [pc, #268]	@ (8001be8 <HAL_UART_MspInit+0x168>)
 8001adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae6:	4b40      	ldr	r3, [pc, #256]	@ (8001be8 <HAL_UART_MspInit+0x168>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aea:	4a3f      	ldr	r2, [pc, #252]	@ (8001be8 <HAL_UART_MspInit+0x168>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001af2:	4b3d      	ldr	r3, [pc, #244]	@ (8001be8 <HAL_UART_MspInit+0x168>)
 8001af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001afe:	230c      	movs	r3, #12
 8001b00:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001b0e:	230c      	movs	r3, #12
 8001b10:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b12:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b16:	4619      	mov	r1, r3
 8001b18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b1c:	f001 fb86 	bl	800322c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 8001b20:	4b32      	ldr	r3, [pc, #200]	@ (8001bec <HAL_UART_MspInit+0x16c>)
 8001b22:	4a33      	ldr	r2, [pc, #204]	@ (8001bf0 <HAL_UART_MspInit+0x170>)
 8001b24:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001b26:	4b31      	ldr	r3, [pc, #196]	@ (8001bec <HAL_UART_MspInit+0x16c>)
 8001b28:	2223      	movs	r2, #35	@ 0x23
 8001b2a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b2c:	4b2f      	ldr	r3, [pc, #188]	@ (8001bec <HAL_UART_MspInit+0x16c>)
 8001b2e:	2210      	movs	r2, #16
 8001b30:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b32:	4b2e      	ldr	r3, [pc, #184]	@ (8001bec <HAL_UART_MspInit+0x16c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b38:	4b2c      	ldr	r3, [pc, #176]	@ (8001bec <HAL_UART_MspInit+0x16c>)
 8001b3a:	2280      	movs	r2, #128	@ 0x80
 8001b3c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b3e:	4b2b      	ldr	r3, [pc, #172]	@ (8001bec <HAL_UART_MspInit+0x16c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b44:	4b29      	ldr	r3, [pc, #164]	@ (8001bec <HAL_UART_MspInit+0x16c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001b4a:	4b28      	ldr	r3, [pc, #160]	@ (8001bec <HAL_UART_MspInit+0x16c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001b50:	4b26      	ldr	r3, [pc, #152]	@ (8001bec <HAL_UART_MspInit+0x16c>)
 8001b52:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001b56:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001b58:	4824      	ldr	r0, [pc, #144]	@ (8001bec <HAL_UART_MspInit+0x16c>)
 8001b5a:	f001 f829 	bl	8002bb0 <HAL_DMA_Init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8001b64:	f7ff ff5c 	bl	8001a20 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a20      	ldr	r2, [pc, #128]	@ (8001bec <HAL_UART_MspInit+0x16c>)
 8001b6c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001b6e:	4a1f      	ldr	r2, [pc, #124]	@ (8001bec <HAL_UART_MspInit+0x16c>)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8001b74:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf4 <HAL_UART_MspInit+0x174>)
 8001b76:	4a20      	ldr	r2, [pc, #128]	@ (8001bf8 <HAL_UART_MspInit+0x178>)
 8001b78:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf4 <HAL_UART_MspInit+0x174>)
 8001b7c:	2222      	movs	r2, #34	@ 0x22
 8001b7e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b80:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf4 <HAL_UART_MspInit+0x174>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b86:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf4 <HAL_UART_MspInit+0x174>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b8c:	4b19      	ldr	r3, [pc, #100]	@ (8001bf4 <HAL_UART_MspInit+0x174>)
 8001b8e:	2280      	movs	r2, #128	@ 0x80
 8001b90:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b92:	4b18      	ldr	r3, [pc, #96]	@ (8001bf4 <HAL_UART_MspInit+0x174>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b98:	4b16      	ldr	r3, [pc, #88]	@ (8001bf4 <HAL_UART_MspInit+0x174>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8001b9e:	4b15      	ldr	r3, [pc, #84]	@ (8001bf4 <HAL_UART_MspInit+0x174>)
 8001ba0:	2220      	movs	r2, #32
 8001ba2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ba4:	4b13      	ldr	r3, [pc, #76]	@ (8001bf4 <HAL_UART_MspInit+0x174>)
 8001ba6:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001baa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001bac:	4811      	ldr	r0, [pc, #68]	@ (8001bf4 <HAL_UART_MspInit+0x174>)
 8001bae:	f000 ffff 	bl	8002bb0 <HAL_DMA_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8001bb8:	f7ff ff32 	bl	8001a20 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf4 <HAL_UART_MspInit+0x174>)
 8001bc0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001bc4:	4a0b      	ldr	r2, [pc, #44]	@ (8001bf4 <HAL_UART_MspInit+0x174>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2105      	movs	r1, #5
 8001bce:	205b      	movs	r0, #91	@ 0x5b
 8001bd0:	f000 ffc6 	bl	8002b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001bd4:	205b      	movs	r0, #91	@ 0x5b
 8001bd6:	f000 ffdd 	bl	8002b94 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8001bda:	bf00      	nop
 8001bdc:	3778      	adds	r7, #120	@ 0x78
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40008000 	.word	0x40008000
 8001be8:	40021000 	.word	0x40021000
 8001bec:	200001c8 	.word	0x200001c8
 8001bf0:	40020008 	.word	0x40020008
 8001bf4:	20000228 	.word	0x20000228
 8001bf8:	4002001c 	.word	0x4002001c

08001bfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c0c:	d10c      	bne.n	8001c28 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c0e:	4b12      	ldr	r3, [pc, #72]	@ (8001c58 <HAL_TIM_Base_MspInit+0x5c>)
 8001c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c12:	4a11      	ldr	r2, [pc, #68]	@ (8001c58 <HAL_TIM_Base_MspInit+0x5c>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c58 <HAL_TIM_Base_MspInit+0x5c>)
 8001c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c26:	e010      	b.n	8001c4a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001c5c <HAL_TIM_Base_MspInit+0x60>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d10b      	bne.n	8001c4a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c32:	4b09      	ldr	r3, [pc, #36]	@ (8001c58 <HAL_TIM_Base_MspInit+0x5c>)
 8001c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c36:	4a08      	ldr	r2, [pc, #32]	@ (8001c58 <HAL_TIM_Base_MspInit+0x5c>)
 8001c38:	f043 0302 	orr.w	r3, r3, #2
 8001c3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c3e:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <HAL_TIM_Base_MspInit+0x5c>)
 8001c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	68bb      	ldr	r3, [r7, #8]
}
 8001c4a:	bf00      	nop
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40000400 	.word	0x40000400

08001c60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08a      	sub	sp, #40	@ 0x28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	f107 0314 	add.w	r3, r7, #20
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c80:	d11d      	bne.n	8001cbe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c82:	4b30      	ldr	r3, [pc, #192]	@ (8001d44 <HAL_TIM_MspPostInit+0xe4>)
 8001c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c86:	4a2f      	ldr	r2, [pc, #188]	@ (8001d44 <HAL_TIM_MspPostInit+0xe4>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c8e:	4b2d      	ldr	r3, [pc, #180]	@ (8001d44 <HAL_TIM_MspPostInit+0xe4>)
 8001c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c9a:	2320      	movs	r3, #32
 8001c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001caa:	2301      	movs	r3, #1
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cb8:	f001 fab8 	bl	800322c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001cbc:	e03d      	b.n	8001d3a <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM3)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a21      	ldr	r2, [pc, #132]	@ (8001d48 <HAL_TIM_MspPostInit+0xe8>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d138      	bne.n	8001d3a <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d44 <HAL_TIM_MspPostInit+0xe4>)
 8001cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ccc:	4a1d      	ldr	r2, [pc, #116]	@ (8001d44 <HAL_TIM_MspPostInit+0xe4>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d44 <HAL_TIM_MspPostInit+0xe4>)
 8001cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce0:	4b18      	ldr	r3, [pc, #96]	@ (8001d44 <HAL_TIM_MspPostInit+0xe4>)
 8001ce2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce4:	4a17      	ldr	r2, [pc, #92]	@ (8001d44 <HAL_TIM_MspPostInit+0xe4>)
 8001ce6:	f043 0304 	orr.w	r3, r3, #4
 8001cea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cec:	4b15      	ldr	r3, [pc, #84]	@ (8001d44 <HAL_TIM_MspPostInit+0xe4>)
 8001cee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cf8:	2340      	movs	r3, #64	@ 0x40
 8001cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2300      	movs	r3, #0
 8001d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4619      	mov	r1, r3
 8001d12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d16:	f001 fa89 	bl	800322c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d1a:	2380      	movs	r3, #128	@ 0x80
 8001d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d26:	2300      	movs	r3, #0
 8001d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d2e:	f107 0314 	add.w	r3, r7, #20
 8001d32:	4619      	mov	r1, r3
 8001d34:	4805      	ldr	r0, [pc, #20]	@ (8001d4c <HAL_TIM_MspPostInit+0xec>)
 8001d36:	f001 fa79 	bl	800322c <HAL_GPIO_Init>
}
 8001d3a:	bf00      	nop
 8001d3c:	3728      	adds	r7, #40	@ 0x28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40000400 	.word	0x40000400
 8001d4c:	48000800 	.word	0x48000800

08001d50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08c      	sub	sp, #48	@ 0x30
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d60:	4b2c      	ldr	r3, [pc, #176]	@ (8001e14 <HAL_InitTick+0xc4>)
 8001d62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d64:	4a2b      	ldr	r2, [pc, #172]	@ (8001e14 <HAL_InitTick+0xc4>)
 8001d66:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d6a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d6c:	4b29      	ldr	r3, [pc, #164]	@ (8001e14 <HAL_InitTick+0xc4>)
 8001d6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d78:	f107 020c 	add.w	r2, r7, #12
 8001d7c:	f107 0310 	add.w	r3, r7, #16
 8001d80:	4611      	mov	r1, r2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f002 f9ac 	bl	80040e0 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001d88:	f002 f994 	bl	80040b4 <HAL_RCC_GetPCLK2Freq>
 8001d8c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d90:	4a21      	ldr	r2, [pc, #132]	@ (8001e18 <HAL_InitTick+0xc8>)
 8001d92:	fba2 2303 	umull	r2, r3, r2, r3
 8001d96:	0c9b      	lsrs	r3, r3, #18
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d9c:	4b1f      	ldr	r3, [pc, #124]	@ (8001e1c <HAL_InitTick+0xcc>)
 8001d9e:	4a20      	ldr	r2, [pc, #128]	@ (8001e20 <HAL_InitTick+0xd0>)
 8001da0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001da2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e1c <HAL_InitTick+0xcc>)
 8001da4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001da8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001daa:	4a1c      	ldr	r2, [pc, #112]	@ (8001e1c <HAL_InitTick+0xcc>)
 8001dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dae:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001db0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e1c <HAL_InitTick+0xcc>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db6:	4b19      	ldr	r3, [pc, #100]	@ (8001e1c <HAL_InitTick+0xcc>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001dbc:	4817      	ldr	r0, [pc, #92]	@ (8001e1c <HAL_InitTick+0xcc>)
 8001dbe:	f002 fc55 	bl	800466c <HAL_TIM_Base_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001dc8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d11b      	bne.n	8001e08 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001dd0:	4812      	ldr	r0, [pc, #72]	@ (8001e1c <HAL_InitTick+0xcc>)
 8001dd2:	f002 fd13 	bl	80047fc <HAL_TIM_Base_Start_IT>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001ddc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d111      	bne.n	8001e08 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001de4:	2019      	movs	r0, #25
 8001de6:	f000 fed5 	bl	8002b94 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b0f      	cmp	r3, #15
 8001dee:	d808      	bhi.n	8001e02 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001df0:	2200      	movs	r2, #0
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	2019      	movs	r0, #25
 8001df6:	f000 feb3 	bl	8002b60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001e24 <HAL_InitTick+0xd4>)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	e002      	b.n	8001e08 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001e08:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3730      	adds	r7, #48	@ 0x30
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40021000 	.word	0x40021000
 8001e18:	431bde83 	.word	0x431bde83
 8001e1c:	200033a0 	.word	0x200033a0
 8001e20:	40012c00 	.word	0x40012c00
 8001e24:	20000010 	.word	0x20000010

08001e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e2c:	bf00      	nop
 8001e2e:	e7fd      	b.n	8001e2c <NMI_Handler+0x4>

08001e30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e34:	bf00      	nop
 8001e36:	e7fd      	b.n	8001e34 <HardFault_Handler+0x4>

08001e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e3c:	bf00      	nop
 8001e3e:	e7fd      	b.n	8001e3c <MemManage_Handler+0x4>

08001e40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e44:	bf00      	nop
 8001e46:	e7fd      	b.n	8001e44 <BusFault_Handler+0x4>

08001e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e4c:	bf00      	nop
 8001e4e:	e7fd      	b.n	8001e4c <UsageFault_Handler+0x4>

08001e50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001e64:	4802      	ldr	r0, [pc, #8]	@ (8001e70 <DMA1_Channel1_IRQHandler+0x10>)
 8001e66:	f001 f886 	bl	8002f76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	200001c8 	.word	0x200001c8

08001e74 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001e78:	4802      	ldr	r0, [pc, #8]	@ (8001e84 <DMA1_Channel2_IRQHandler+0x10>)
 8001e7a:	f001 f87c 	bl	8002f76 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000228 	.word	0x20000228

08001e88 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e8c:	4802      	ldr	r0, [pc, #8]	@ (8001e98 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001e8e:	f002 fea1 	bl	8004bd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	200033a0 	.word	0x200033a0

08001e9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001ea0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ea4:	f001 fb5c 	bl	8003560 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001eb0:	4802      	ldr	r0, [pc, #8]	@ (8001ebc <LPUART1_IRQHandler+0x10>)
 8001eb2:	f004 f95f 	bl	8006174 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000134 	.word	0x20000134

08001ec0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return 1;
 8001ec4:	2301      	movs	r3, #1
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <_kill>:

int _kill(int pid, int sig)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001eda:	f015 fe41 	bl	8017b60 <__errno>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2216      	movs	r2, #22
 8001ee2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ee4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <_exit>:

void _exit (int status)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ef8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff ffe7 	bl	8001ed0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f02:	bf00      	nop
 8001f04:	e7fd      	b.n	8001f02 <_exit+0x12>

08001f06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b086      	sub	sp, #24
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	60f8      	str	r0, [r7, #12]
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	e00a      	b.n	8001f2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f18:	f3af 8000 	nop.w
 8001f1c:	4601      	mov	r1, r0
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	60ba      	str	r2, [r7, #8]
 8001f24:	b2ca      	uxtb	r2, r1
 8001f26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	dbf0      	blt.n	8001f18 <_read+0x12>
  }

  return len;
 8001f36:	687b      	ldr	r3, [r7, #4]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	e009      	b.n	8001f66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	1c5a      	adds	r2, r3, #1
 8001f56:	60ba      	str	r2, [r7, #8]
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	3301      	adds	r3, #1
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	dbf1      	blt.n	8001f52 <_write+0x12>
  }
  return len;
 8001f6e:	687b      	ldr	r3, [r7, #4]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <_close>:

int _close(int file)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fa0:	605a      	str	r2, [r3, #4]
  return 0;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <_isatty>:

int _isatty(int file)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fb8:	2301      	movs	r3, #1
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b085      	sub	sp, #20
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	60f8      	str	r0, [r7, #12]
 8001fce:	60b9      	str	r1, [r7, #8]
 8001fd0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fe8:	4a14      	ldr	r2, [pc, #80]	@ (800203c <_sbrk+0x5c>)
 8001fea:	4b15      	ldr	r3, [pc, #84]	@ (8002040 <_sbrk+0x60>)
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ff4:	4b13      	ldr	r3, [pc, #76]	@ (8002044 <_sbrk+0x64>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d102      	bne.n	8002002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ffc:	4b11      	ldr	r3, [pc, #68]	@ (8002044 <_sbrk+0x64>)
 8001ffe:	4a12      	ldr	r2, [pc, #72]	@ (8002048 <_sbrk+0x68>)
 8002000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002002:	4b10      	ldr	r3, [pc, #64]	@ (8002044 <_sbrk+0x64>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	429a      	cmp	r2, r3
 800200e:	d207      	bcs.n	8002020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002010:	f015 fda6 	bl	8017b60 <__errno>
 8002014:	4603      	mov	r3, r0
 8002016:	220c      	movs	r2, #12
 8002018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800201a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800201e:	e009      	b.n	8002034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002020:	4b08      	ldr	r3, [pc, #32]	@ (8002044 <_sbrk+0x64>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002026:	4b07      	ldr	r3, [pc, #28]	@ (8002044 <_sbrk+0x64>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	4a05      	ldr	r2, [pc, #20]	@ (8002044 <_sbrk+0x64>)
 8002030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002032:	68fb      	ldr	r3, [r7, #12]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20020000 	.word	0x20020000
 8002040:	00000400 	.word	0x00000400
 8002044:	200033f0 	.word	0x200033f0
 8002048:	2000ae40 	.word	0x2000ae40

0800204c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002050:	4b06      	ldr	r3, [pc, #24]	@ (800206c <SystemInit+0x20>)
 8002052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002056:	4a05      	ldr	r2, [pc, #20]	@ (800206c <SystemInit+0x20>)
 8002058:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800205c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08a      	sub	sp, #40	@ 0x28
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002078:	2300      	movs	r3, #0
 800207a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800207c:	f006 fe0e 	bl	8008c9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002080:	4b5a      	ldr	r3, [pc, #360]	@ (80021ec <pvPortMallocMicroROS+0x17c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8002088:	f000 f986 	bl	8002398 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800208c:	4b58      	ldr	r3, [pc, #352]	@ (80021f0 <pvPortMallocMicroROS+0x180>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4013      	ands	r3, r2
 8002094:	2b00      	cmp	r3, #0
 8002096:	f040 8090 	bne.w	80021ba <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d01e      	beq.n	80020de <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80020a0:	2208      	movs	r2, #8
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d015      	beq.n	80020de <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f023 0307 	bic.w	r3, r3, #7
 80020b8:	3308      	adds	r3, #8
 80020ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00b      	beq.n	80020de <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80020c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020ca:	f383 8811 	msr	BASEPRI, r3
 80020ce:	f3bf 8f6f 	isb	sy
 80020d2:	f3bf 8f4f 	dsb	sy
 80020d6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80020d8:	bf00      	nop
 80020da:	bf00      	nop
 80020dc:	e7fd      	b.n	80020da <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d06a      	beq.n	80021ba <pvPortMallocMicroROS+0x14a>
 80020e4:	4b43      	ldr	r3, [pc, #268]	@ (80021f4 <pvPortMallocMicroROS+0x184>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d865      	bhi.n	80021ba <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80020ee:	4b42      	ldr	r3, [pc, #264]	@ (80021f8 <pvPortMallocMicroROS+0x188>)
 80020f0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80020f2:	4b41      	ldr	r3, [pc, #260]	@ (80021f8 <pvPortMallocMicroROS+0x188>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80020f8:	e004      	b.n	8002104 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 80020fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80020fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	429a      	cmp	r2, r3
 800210c:	d903      	bls.n	8002116 <pvPortMallocMicroROS+0xa6>
 800210e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f1      	bne.n	80020fa <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002116:	4b35      	ldr	r3, [pc, #212]	@ (80021ec <pvPortMallocMicroROS+0x17c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800211c:	429a      	cmp	r2, r3
 800211e:	d04c      	beq.n	80021ba <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002120:	6a3b      	ldr	r3, [r7, #32]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2208      	movs	r2, #8
 8002126:	4413      	add	r3, r2
 8002128:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800212a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	1ad2      	subs	r2, r2, r3
 800213a:	2308      	movs	r3, #8
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	429a      	cmp	r2, r3
 8002140:	d920      	bls.n	8002184 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002142:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4413      	add	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00b      	beq.n	800216c <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8002154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002158:	f383 8811 	msr	BASEPRI, r3
 800215c:	f3bf 8f6f 	isb	sy
 8002160:	f3bf 8f4f 	dsb	sy
 8002164:	613b      	str	r3, [r7, #16]
}
 8002166:	bf00      	nop
 8002168:	bf00      	nop
 800216a:	e7fd      	b.n	8002168 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800216c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	1ad2      	subs	r2, r2, r3
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800217e:	69b8      	ldr	r0, [r7, #24]
 8002180:	f000 f96c 	bl	800245c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002184:	4b1b      	ldr	r3, [pc, #108]	@ (80021f4 <pvPortMallocMicroROS+0x184>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	4a19      	ldr	r2, [pc, #100]	@ (80021f4 <pvPortMallocMicroROS+0x184>)
 8002190:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002192:	4b18      	ldr	r3, [pc, #96]	@ (80021f4 <pvPortMallocMicroROS+0x184>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	4b19      	ldr	r3, [pc, #100]	@ (80021fc <pvPortMallocMicroROS+0x18c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d203      	bcs.n	80021a6 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800219e:	4b15      	ldr	r3, [pc, #84]	@ (80021f4 <pvPortMallocMicroROS+0x184>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a16      	ldr	r2, [pc, #88]	@ (80021fc <pvPortMallocMicroROS+0x18c>)
 80021a4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80021a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	4b11      	ldr	r3, [pc, #68]	@ (80021f0 <pvPortMallocMicroROS+0x180>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	431a      	orrs	r2, r3
 80021b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80021b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80021ba:	f006 fd7d 	bl	8008cb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00b      	beq.n	80021e0 <pvPortMallocMicroROS+0x170>
	__asm volatile
 80021c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021cc:	f383 8811 	msr	BASEPRI, r3
 80021d0:	f3bf 8f6f 	isb	sy
 80021d4:	f3bf 8f4f 	dsb	sy
 80021d8:	60fb      	str	r3, [r7, #12]
}
 80021da:	bf00      	nop
 80021dc:	bf00      	nop
 80021de:	e7fd      	b.n	80021dc <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80021e0:	69fb      	ldr	r3, [r7, #28]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3728      	adds	r7, #40	@ 0x28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20003ffc 	.word	0x20003ffc
 80021f0:	20004008 	.word	0x20004008
 80021f4:	20004000 	.word	0x20004000
 80021f8:	20003ff4 	.word	0x20003ff4
 80021fc:	20004004 	.word	0x20004004

08002200 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d04a      	beq.n	80022a8 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002212:	2308      	movs	r3, #8
 8002214:	425b      	negs	r3, r3
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	4413      	add	r3, r2
 800221a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	4b22      	ldr	r3, [pc, #136]	@ (80022b0 <vPortFreeMicroROS+0xb0>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4013      	ands	r3, r2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10b      	bne.n	8002246 <vPortFreeMicroROS+0x46>
	__asm volatile
 800222e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002232:	f383 8811 	msr	BASEPRI, r3
 8002236:	f3bf 8f6f 	isb	sy
 800223a:	f3bf 8f4f 	dsb	sy
 800223e:	60fb      	str	r3, [r7, #12]
}
 8002240:	bf00      	nop
 8002242:	bf00      	nop
 8002244:	e7fd      	b.n	8002242 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00b      	beq.n	8002266 <vPortFreeMicroROS+0x66>
	__asm volatile
 800224e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002252:	f383 8811 	msr	BASEPRI, r3
 8002256:	f3bf 8f6f 	isb	sy
 800225a:	f3bf 8f4f 	dsb	sy
 800225e:	60bb      	str	r3, [r7, #8]
}
 8002260:	bf00      	nop
 8002262:	bf00      	nop
 8002264:	e7fd      	b.n	8002262 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	4b11      	ldr	r3, [pc, #68]	@ (80022b0 <vPortFreeMicroROS+0xb0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4013      	ands	r3, r2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d019      	beq.n	80022a8 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d115      	bne.n	80022a8 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	4b0b      	ldr	r3, [pc, #44]	@ (80022b0 <vPortFreeMicroROS+0xb0>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	43db      	mvns	r3, r3
 8002286:	401a      	ands	r2, r3
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800228c:	f006 fd06 	bl	8008c9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	4b07      	ldr	r3, [pc, #28]	@ (80022b4 <vPortFreeMicroROS+0xb4>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4413      	add	r3, r2
 800229a:	4a06      	ldr	r2, [pc, #24]	@ (80022b4 <vPortFreeMicroROS+0xb4>)
 800229c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800229e:	6938      	ldr	r0, [r7, #16]
 80022a0:	f000 f8dc 	bl	800245c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80022a4:	f006 fd08 	bl	8008cb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80022a8:	bf00      	nop
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	20004008 	.word	0x20004008
 80022b4:	20004000 	.word	0x20004000

080022b8 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80022b8:	b480      	push	{r7}
 80022ba:	b087      	sub	sp, #28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80022c4:	2308      	movs	r3, #8
 80022c6:	425b      	negs	r3, r3
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	4413      	add	r3, r2
 80022cc:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <getBlockSize+0x38>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	43db      	mvns	r3, r3
 80022dc:	4013      	ands	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]

	return count;
 80022e0:	68fb      	ldr	r3, [r7, #12]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	371c      	adds	r7, #28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	20004008 	.word	0x20004008

080022f4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80022fe:	f006 fccd 	bl	8008c9c <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8002302:	6838      	ldr	r0, [r7, #0]
 8002304:	f7ff feb4 	bl	8002070 <pvPortMallocMicroROS>
 8002308:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d017      	beq.n	8002340 <pvPortReallocMicroROS+0x4c>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d014      	beq.n	8002340 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff ffce 	bl	80022b8 <getBlockSize>
 800231c:	4603      	mov	r3, r0
 800231e:	2208      	movs	r2, #8
 8002320:	1a9b      	subs	r3, r3, r2
 8002322:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	429a      	cmp	r2, r3
 800232a:	d201      	bcs.n	8002330 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	68b8      	ldr	r0, [r7, #8]
 8002336:	f015 fc48 	bl	8017bca <memcpy>

		vPortFreeMicroROS(pv);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff ff60 	bl	8002200 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8002340:	f006 fcba 	bl	8008cb8 <xTaskResumeAll>

	return newmem;
 8002344:	68bb      	ldr	r3, [r7, #8]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b086      	sub	sp, #24
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8002358:	f006 fca0 	bl	8008c9c <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	fb02 f303 	mul.w	r3, r2, r3
 8002364:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8002366:	6978      	ldr	r0, [r7, #20]
 8002368:	f7ff fe82 	bl	8002070 <pvPortMallocMicroROS>
 800236c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	613b      	str	r3, [r7, #16]

  	while(count--)
 8002372:	e004      	b.n	800237e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	613a      	str	r2, [r7, #16]
 800237a:	2200      	movs	r2, #0
 800237c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	1e5a      	subs	r2, r3, #1
 8002382:	617a      	str	r2, [r7, #20]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1f5      	bne.n	8002374 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8002388:	f006 fc96 	bl	8008cb8 <xTaskResumeAll>
  	return mem;
 800238c:	68fb      	ldr	r3, [r7, #12]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800239e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80023a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80023a4:	4b27      	ldr	r3, [pc, #156]	@ (8002444 <prvHeapInit+0xac>)
 80023a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00c      	beq.n	80023cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	3307      	adds	r3, #7
 80023b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f023 0307 	bic.w	r3, r3, #7
 80023be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002444 <prvHeapInit+0xac>)
 80023c8:	4413      	add	r3, r2
 80023ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80023d0:	4a1d      	ldr	r2, [pc, #116]	@ (8002448 <prvHeapInit+0xb0>)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80023d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002448 <prvHeapInit+0xb0>)
 80023d8:	2200      	movs	r2, #0
 80023da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	4413      	add	r3, r2
 80023e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80023e4:	2208      	movs	r2, #8
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f023 0307 	bic.w	r3, r3, #7
 80023f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4a15      	ldr	r2, [pc, #84]	@ (800244c <prvHeapInit+0xb4>)
 80023f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80023fa:	4b14      	ldr	r3, [pc, #80]	@ (800244c <prvHeapInit+0xb4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2200      	movs	r2, #0
 8002400:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002402:	4b12      	ldr	r3, [pc, #72]	@ (800244c <prvHeapInit+0xb4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	1ad2      	subs	r2, r2, r3
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002418:	4b0c      	ldr	r3, [pc, #48]	@ (800244c <prvHeapInit+0xb4>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	4a0a      	ldr	r2, [pc, #40]	@ (8002450 <prvHeapInit+0xb8>)
 8002426:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	4a09      	ldr	r2, [pc, #36]	@ (8002454 <prvHeapInit+0xbc>)
 800242e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002430:	4b09      	ldr	r3, [pc, #36]	@ (8002458 <prvHeapInit+0xc0>)
 8002432:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002436:	601a      	str	r2, [r3, #0]
}
 8002438:	bf00      	nop
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	200033f4 	.word	0x200033f4
 8002448:	20003ff4 	.word	0x20003ff4
 800244c:	20003ffc 	.word	0x20003ffc
 8002450:	20004004 	.word	0x20004004
 8002454:	20004000 	.word	0x20004000
 8002458:	20004008 	.word	0x20004008

0800245c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002464:	4b28      	ldr	r3, [pc, #160]	@ (8002508 <prvInsertBlockIntoFreeList+0xac>)
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	e002      	b.n	8002470 <prvInsertBlockIntoFreeList+0x14>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	429a      	cmp	r2, r3
 8002478:	d8f7      	bhi.n	800246a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	4413      	add	r3, r2
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	429a      	cmp	r2, r3
 800248a:	d108      	bne.n	800249e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	441a      	add	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	441a      	add	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d118      	bne.n	80024e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	4b15      	ldr	r3, [pc, #84]	@ (800250c <prvInsertBlockIntoFreeList+0xb0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d00d      	beq.n	80024da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	441a      	add	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	e008      	b.n	80024ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80024da:	4b0c      	ldr	r3, [pc, #48]	@ (800250c <prvInsertBlockIntoFreeList+0xb0>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	e003      	b.n	80024ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d002      	beq.n	80024fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80024fa:	bf00      	nop
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20003ff4 	.word	0x20003ff4
 800250c:	20003ffc 	.word	0x20003ffc

08002510 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800251a:	4b0c      	ldr	r3, [pc, #48]	@ (800254c <microros_allocate+0x3c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	461a      	mov	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4413      	add	r3, r2
 8002524:	461a      	mov	r2, r3
 8002526:	4b09      	ldr	r3, [pc, #36]	@ (800254c <microros_allocate+0x3c>)
 8002528:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800252a:	4b09      	ldr	r3, [pc, #36]	@ (8002550 <microros_allocate+0x40>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4413      	add	r3, r2
 8002534:	461a      	mov	r2, r3
 8002536:	4b06      	ldr	r3, [pc, #24]	@ (8002550 <microros_allocate+0x40>)
 8002538:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff fd98 	bl	8002070 <pvPortMallocMicroROS>
 8002540:	4603      	mov	r3, r0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	2000400c 	.word	0x2000400c
 8002550:	20004010 	.word	0x20004010

08002554 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00c      	beq.n	800257e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff fea7 	bl	80022b8 <getBlockSize>
 800256a:	4603      	mov	r3, r0
 800256c:	4a06      	ldr	r2, [pc, #24]	@ (8002588 <microros_deallocate+0x34>)
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	461a      	mov	r2, r3
 8002574:	4b04      	ldr	r3, [pc, #16]	@ (8002588 <microros_deallocate+0x34>)
 8002576:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7ff fe41 	bl	8002200 <vPortFreeMicroROS>
  }
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20004010 	.word	0x20004010

0800258c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002598:	4b15      	ldr	r3, [pc, #84]	@ (80025f0 <microros_reallocate+0x64>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	461a      	mov	r2, r3
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	4413      	add	r3, r2
 80025a2:	461a      	mov	r2, r3
 80025a4:	4b12      	ldr	r3, [pc, #72]	@ (80025f0 <microros_reallocate+0x64>)
 80025a6:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80025a8:	4b12      	ldr	r3, [pc, #72]	@ (80025f4 <microros_reallocate+0x68>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	461a      	mov	r2, r3
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	4413      	add	r3, r2
 80025b2:	461a      	mov	r2, r3
 80025b4:	4b0f      	ldr	r3, [pc, #60]	@ (80025f4 <microros_reallocate+0x68>)
 80025b6:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d104      	bne.n	80025c8 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80025be:	68b8      	ldr	r0, [r7, #8]
 80025c0:	f7ff fd56 	bl	8002070 <pvPortMallocMicroROS>
 80025c4:	4603      	mov	r3, r0
 80025c6:	e00e      	b.n	80025e6 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f7ff fe75 	bl	80022b8 <getBlockSize>
 80025ce:	4603      	mov	r3, r0
 80025d0:	4a08      	ldr	r2, [pc, #32]	@ (80025f4 <microros_reallocate+0x68>)
 80025d2:	6812      	ldr	r2, [r2, #0]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	461a      	mov	r2, r3
 80025d8:	4b06      	ldr	r3, [pc, #24]	@ (80025f4 <microros_reallocate+0x68>)
 80025da:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80025dc:	68b9      	ldr	r1, [r7, #8]
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f7ff fe88 	bl	80022f4 <pvPortReallocMicroROS>
 80025e4:	4603      	mov	r3, r0
  }
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	2000400c 	.word	0x2000400c
 80025f4:	20004010 	.word	0x20004010

080025f8 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	fb02 f303 	mul.w	r3, r2, r3
 800260c:	4a0c      	ldr	r2, [pc, #48]	@ (8002640 <microros_zero_allocate+0x48>)
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	4413      	add	r3, r2
 8002612:	461a      	mov	r2, r3
 8002614:	4b0a      	ldr	r3, [pc, #40]	@ (8002640 <microros_zero_allocate+0x48>)
 8002616:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	fb02 f303 	mul.w	r3, r2, r3
 8002620:	4a08      	ldr	r2, [pc, #32]	@ (8002644 <microros_zero_allocate+0x4c>)
 8002622:	6812      	ldr	r2, [r2, #0]
 8002624:	4413      	add	r3, r2
 8002626:	461a      	mov	r2, r3
 8002628:	4b06      	ldr	r3, [pc, #24]	@ (8002644 <microros_zero_allocate+0x4c>)
 800262a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 800262c:	68b9      	ldr	r1, [r7, #8]
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f7ff fe8d 	bl	800234e <pvPortCallocMicroROS>
 8002634:	4603      	mov	r3, r0
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	2000400c 	.word	0x2000400c
 8002644:	20004010 	.word	0x20004010

08002648 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002648:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800264c:	b086      	sub	sp, #24
 800264e:	af00      	add	r7, sp, #0
 8002650:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002654:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800265a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800265e:	a320      	add	r3, pc, #128	@ (adr r3, 80026e0 <UTILS_NanosecondsToTimespec+0x98>)
 8002660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002664:	f7fe fa32 	bl	8000acc <__aeabi_ldivmod>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002672:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002676:	a31a      	add	r3, pc, #104	@ (adr r3, 80026e0 <UTILS_NanosecondsToTimespec+0x98>)
 8002678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267c:	f7fe fa26 	bl	8000acc <__aeabi_ldivmod>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	da20      	bge.n	80026ce <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	4a11      	ldr	r2, [pc, #68]	@ (80026d8 <UTILS_NanosecondsToTimespec+0x90>)
 8002692:	fb82 1203 	smull	r1, r2, r2, r3
 8002696:	1712      	asrs	r2, r2, #28
 8002698:	17db      	asrs	r3, r3, #31
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	3301      	adds	r3, #1
 800269e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a6:	6979      	ldr	r1, [r7, #20]
 80026a8:	17c8      	asrs	r0, r1, #31
 80026aa:	460c      	mov	r4, r1
 80026ac:	4605      	mov	r5, r0
 80026ae:	ebb2 0804 	subs.w	r8, r2, r4
 80026b2:	eb63 0905 	sbc.w	r9, r3, r5
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	4906      	ldr	r1, [pc, #24]	@ (80026dc <UTILS_NanosecondsToTimespec+0x94>)
 80026c4:	fb01 f303 	mul.w	r3, r1, r3
 80026c8:	441a      	add	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	609a      	str	r2, [r3, #8]
    }
}
 80026ce:	bf00      	nop
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80026d8:	44b82fa1 	.word	0x44b82fa1
 80026dc:	3b9aca00 	.word	0x3b9aca00
 80026e0:	3b9aca00 	.word	0x3b9aca00
 80026e4:	00000000 	.word	0x00000000

080026e8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80026e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026ec:	b08e      	sub	sp, #56	@ 0x38
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80026f2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80026f4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80026f8:	2300      	movs	r3, #0
 80026fa:	6013      	str	r3, [r2, #0]
 80026fc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	f04f 0300 	mov.w	r3, #0
 8002706:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800270a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800270e:	4618      	mov	r0, r3
 8002710:	f006 fd4e 	bl	80091b0 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002716:	17da      	asrs	r2, r3, #31
 8002718:	61bb      	str	r3, [r7, #24]
 800271a:	61fa      	str	r2, [r7, #28]
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	f04f 0300 	mov.w	r3, #0
 8002724:	69b9      	ldr	r1, [r7, #24]
 8002726:	000b      	movs	r3, r1
 8002728:	2200      	movs	r2, #0
 800272a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800272e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002730:	2200      	movs	r2, #0
 8002732:	461c      	mov	r4, r3
 8002734:	4615      	mov	r5, r2
 8002736:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800273a:	1911      	adds	r1, r2, r4
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	416b      	adcs	r3, r5
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002746:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800274a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	f04f 0400 	mov.w	r4, #0
 8002756:	f04f 0500 	mov.w	r5, #0
 800275a:	015d      	lsls	r5, r3, #5
 800275c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002760:	0154      	lsls	r4, r2, #5
 8002762:	4622      	mov	r2, r4
 8002764:	462b      	mov	r3, r5
 8002766:	ebb2 0800 	subs.w	r8, r2, r0
 800276a:	eb63 0901 	sbc.w	r9, r3, r1
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	f04f 0300 	mov.w	r3, #0
 8002776:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800277a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800277e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002782:	4690      	mov	r8, r2
 8002784:	4699      	mov	r9, r3
 8002786:	eb18 0a00 	adds.w	sl, r8, r0
 800278a:	eb49 0b01 	adc.w	fp, r9, r1
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	f04f 0300 	mov.w	r3, #0
 8002796:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800279a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800279e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027a2:	ebb2 040a 	subs.w	r4, r2, sl
 80027a6:	603c      	str	r4, [r7, #0]
 80027a8:	eb63 030b 	sbc.w	r3, r3, fp
 80027ac:	607b      	str	r3, [r7, #4]
 80027ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027b2:	4623      	mov	r3, r4
 80027b4:	181b      	adds	r3, r3, r0
 80027b6:	613b      	str	r3, [r7, #16]
 80027b8:	462b      	mov	r3, r5
 80027ba:	eb41 0303 	adc.w	r3, r1, r3
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	6a3a      	ldr	r2, [r7, #32]
 80027c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027c6:	f7ff ff3f 	bl	8002648 <UTILS_NanosecondsToTimespec>

    return 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	4618      	mov	r0, r3
 80027ce:	3738      	adds	r7, #56	@ 0x38
 80027d0:	46bd      	mov	sp, r7
 80027d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080027d8 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80027e6:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80027e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027ec:	4904      	ldr	r1, [pc, #16]	@ (8002800 <cubemx_transport_open+0x28>)
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f003 fbde 	bl	8005fb0 <HAL_UART_Receive_DMA>
    return true;
 80027f4:	2301      	movs	r3, #1
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20004014 	.word	0x20004014

08002804 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002812:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f003 fc17 	bl	8006048 <HAL_UART_DMAStop>
    return true;
 800281a:	2301      	movs	r3, #1
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002838:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002840:	2b20      	cmp	r3, #32
 8002842:	d11b      	bne.n	800287c <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	b29b      	uxth	r3, r3
 8002848:	461a      	mov	r2, r3
 800284a:	68b9      	ldr	r1, [r7, #8]
 800284c:	6978      	ldr	r0, [r7, #20]
 800284e:	f003 fb2f 	bl	8005eb0 <HAL_UART_Transmit_DMA>
 8002852:	4603      	mov	r3, r0
 8002854:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002856:	e002      	b.n	800285e <cubemx_transport_write+0x3a>
            osDelay(1);
 8002858:	2001      	movs	r0, #1
 800285a:	f005 f9dd 	bl	8007c18 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800285e:	7cfb      	ldrb	r3, [r7, #19]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d104      	bne.n	800286e <cubemx_transport_write+0x4a>
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800286a:	2b20      	cmp	r3, #32
 800286c:	d1f4      	bne.n	8002858 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 800286e:	7cfb      	ldrb	r3, [r7, #19]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <cubemx_transport_write+0x54>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	e002      	b.n	800287e <cubemx_transport_write+0x5a>
 8002878:	2300      	movs	r3, #0
 800287a:	e000      	b.n	800287e <cubemx_transport_write+0x5a>
    }else{
        return 0;
 800287c:	2300      	movs	r3, #0
    }
}
 800287e:	4618      	mov	r0, r3
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
 8002894:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800289c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80028a2:	b672      	cpsid	i
}
 80028a4:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80028b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002924 <cubemx_transport_read+0x9c>)
 80028b6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80028b8:	b662      	cpsie	i
}
 80028ba:	bf00      	nop
        __enable_irq();
        ms_used++;
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	3301      	adds	r3, #1
 80028c0:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80028c2:	2001      	movs	r0, #1
 80028c4:	f005 f9a8 	bl	8007c18 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80028c8:	4b17      	ldr	r3, [pc, #92]	@ (8002928 <cubemx_transport_read+0xa0>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	4b15      	ldr	r3, [pc, #84]	@ (8002924 <cubemx_transport_read+0x9c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d103      	bne.n	80028dc <cubemx_transport_read+0x54>
 80028d4:	69fa      	ldr	r2, [r7, #28]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	429a      	cmp	r2, r3
 80028da:	dbe2      	blt.n	80028a2 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80028e0:	e011      	b.n	8002906 <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 80028e2:	4b11      	ldr	r3, [pc, #68]	@ (8002928 <cubemx_transport_read+0xa0>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68b9      	ldr	r1, [r7, #8]
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	440b      	add	r3, r1
 80028ec:	490f      	ldr	r1, [pc, #60]	@ (800292c <cubemx_transport_read+0xa4>)
 80028ee:	5c8a      	ldrb	r2, [r1, r2]
 80028f0:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80028f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002928 <cubemx_transport_read+0xa0>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	3301      	adds	r3, #1
 80028f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002928 <cubemx_transport_read+0xa0>)
 80028fe:	6013      	str	r3, [r2, #0]
        wrote++;
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	3301      	adds	r3, #1
 8002904:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002906:	4b08      	ldr	r3, [pc, #32]	@ (8002928 <cubemx_transport_read+0xa0>)
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	4b06      	ldr	r3, [pc, #24]	@ (8002924 <cubemx_transport_read+0x9c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d003      	beq.n	800291a <cubemx_transport_read+0x92>
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	429a      	cmp	r2, r3
 8002918:	d3e3      	bcc.n	80028e2 <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 800291a:	69bb      	ldr	r3, [r7, #24]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3720      	adds	r7, #32
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	20004818 	.word	0x20004818
 8002928:	20004814 	.word	0x20004814
 800292c:	20004014 	.word	0x20004014

08002930 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002930:	480d      	ldr	r0, [pc, #52]	@ (8002968 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002932:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002934:	f7ff fb8a 	bl	800204c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002938:	480c      	ldr	r0, [pc, #48]	@ (800296c <LoopForever+0x6>)
  ldr r1, =_edata
 800293a:	490d      	ldr	r1, [pc, #52]	@ (8002970 <LoopForever+0xa>)
  ldr r2, =_sidata
 800293c:	4a0d      	ldr	r2, [pc, #52]	@ (8002974 <LoopForever+0xe>)
  movs r3, #0
 800293e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002940:	e002      	b.n	8002948 <LoopCopyDataInit>

08002942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002946:	3304      	adds	r3, #4

08002948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800294a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800294c:	d3f9      	bcc.n	8002942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800294e:	4a0a      	ldr	r2, [pc, #40]	@ (8002978 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002950:	4c0a      	ldr	r4, [pc, #40]	@ (800297c <LoopForever+0x16>)
  movs r3, #0
 8002952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002954:	e001      	b.n	800295a <LoopFillZerobss>

08002956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002958:	3204      	adds	r2, #4

0800295a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800295a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800295c:	d3fb      	bcc.n	8002956 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800295e:	f015 f905 	bl	8017b6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002962:	f7fe fbb7 	bl	80010d4 <main>

08002966 <LoopForever>:

LoopForever:
    b LoopForever
 8002966:	e7fe      	b.n	8002966 <LoopForever>
  ldr   r0, =_estack
 8002968:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800296c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002970:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8002974:	080197ec 	.word	0x080197ec
  ldr r2, =_sbss
 8002978:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 800297c:	2000ae3c 	.word	0x2000ae3c

08002980 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002980:	e7fe      	b.n	8002980 <ADC1_2_IRQHandler>

08002982 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002988:	2300      	movs	r3, #0
 800298a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800298c:	2003      	movs	r0, #3
 800298e:	f000 f8dc 	bl	8002b4a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002992:	200f      	movs	r0, #15
 8002994:	f7ff f9dc 	bl	8001d50 <HAL_InitTick>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	71fb      	strb	r3, [r7, #7]
 80029a2:	e001      	b.n	80029a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029a4:	f7ff f842 	bl	8001a2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029a8:	79fb      	ldrb	r3, [r7, #7]

}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029b8:	4b05      	ldr	r3, [pc, #20]	@ (80029d0 <HAL_IncTick+0x1c>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	4b05      	ldr	r3, [pc, #20]	@ (80029d4 <HAL_IncTick+0x20>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4413      	add	r3, r2
 80029c2:	4a03      	ldr	r2, [pc, #12]	@ (80029d0 <HAL_IncTick+0x1c>)
 80029c4:	6013      	str	r3, [r2, #0]
}
 80029c6:	bf00      	nop
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	2000481c 	.word	0x2000481c
 80029d4:	20000014 	.word	0x20000014

080029d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  return uwTick;
 80029dc:	4b03      	ldr	r3, [pc, #12]	@ (80029ec <HAL_GetTick+0x14>)
 80029de:	681b      	ldr	r3, [r3, #0]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	2000481c 	.word	0x2000481c

080029f0 <__NVIC_SetPriorityGrouping>:
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a00:	4b0c      	ldr	r3, [pc, #48]	@ (8002a34 <__NVIC_SetPriorityGrouping+0x44>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a22:	4a04      	ldr	r2, [pc, #16]	@ (8002a34 <__NVIC_SetPriorityGrouping+0x44>)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	60d3      	str	r3, [r2, #12]
}
 8002a28:	bf00      	nop
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	e000ed00 	.word	0xe000ed00

08002a38 <__NVIC_GetPriorityGrouping>:
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a3c:	4b04      	ldr	r3, [pc, #16]	@ (8002a50 <__NVIC_GetPriorityGrouping+0x18>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	0a1b      	lsrs	r3, r3, #8
 8002a42:	f003 0307 	and.w	r3, r3, #7
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	e000ed00 	.word	0xe000ed00

08002a54 <__NVIC_EnableIRQ>:
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	db0b      	blt.n	8002a7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	f003 021f 	and.w	r2, r3, #31
 8002a6c:	4907      	ldr	r1, [pc, #28]	@ (8002a8c <__NVIC_EnableIRQ+0x38>)
 8002a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	2001      	movs	r0, #1
 8002a76:	fa00 f202 	lsl.w	r2, r0, r2
 8002a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	e000e100 	.word	0xe000e100

08002a90 <__NVIC_SetPriority>:
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	6039      	str	r1, [r7, #0]
 8002a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	db0a      	blt.n	8002aba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	490c      	ldr	r1, [pc, #48]	@ (8002adc <__NVIC_SetPriority+0x4c>)
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	0112      	lsls	r2, r2, #4
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002ab8:	e00a      	b.n	8002ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	4908      	ldr	r1, [pc, #32]	@ (8002ae0 <__NVIC_SetPriority+0x50>)
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	3b04      	subs	r3, #4
 8002ac8:	0112      	lsls	r2, r2, #4
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	440b      	add	r3, r1
 8002ace:	761a      	strb	r2, [r3, #24]
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	e000e100 	.word	0xe000e100
 8002ae0:	e000ed00 	.word	0xe000ed00

08002ae4 <NVIC_EncodePriority>:
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b089      	sub	sp, #36	@ 0x24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f1c3 0307 	rsb	r3, r3, #7
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	bf28      	it	cs
 8002b02:	2304      	movcs	r3, #4
 8002b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	3304      	adds	r3, #4
 8002b0a:	2b06      	cmp	r3, #6
 8002b0c:	d902      	bls.n	8002b14 <NVIC_EncodePriority+0x30>
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3b03      	subs	r3, #3
 8002b12:	e000      	b.n	8002b16 <NVIC_EncodePriority+0x32>
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43da      	mvns	r2, r3
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	401a      	ands	r2, r3
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b2c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	fa01 f303 	lsl.w	r3, r1, r3
 8002b36:	43d9      	mvns	r1, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b3c:	4313      	orrs	r3, r2
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3724      	adds	r7, #36	@ 0x24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7ff ff4c 	bl	80029f0 <__NVIC_SetPriorityGrouping>
}
 8002b58:	bf00      	nop
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
 8002b6c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b6e:	f7ff ff63 	bl	8002a38 <__NVIC_GetPriorityGrouping>
 8002b72:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	68b9      	ldr	r1, [r7, #8]
 8002b78:	6978      	ldr	r0, [r7, #20]
 8002b7a:	f7ff ffb3 	bl	8002ae4 <NVIC_EncodePriority>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b84:	4611      	mov	r1, r2
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff ff82 	bl	8002a90 <__NVIC_SetPriority>
}
 8002b8c:	bf00      	nop
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff ff56 	bl	8002a54 <__NVIC_EnableIRQ>
}
 8002ba8:	bf00      	nop
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e08d      	b.n	8002cde <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	4b47      	ldr	r3, [pc, #284]	@ (8002ce8 <HAL_DMA_Init+0x138>)
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d80f      	bhi.n	8002bee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	4b45      	ldr	r3, [pc, #276]	@ (8002cec <HAL_DMA_Init+0x13c>)
 8002bd6:	4413      	add	r3, r2
 8002bd8:	4a45      	ldr	r2, [pc, #276]	@ (8002cf0 <HAL_DMA_Init+0x140>)
 8002bda:	fba2 2303 	umull	r2, r3, r2, r3
 8002bde:	091b      	lsrs	r3, r3, #4
 8002be0:	009a      	lsls	r2, r3, #2
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a42      	ldr	r2, [pc, #264]	@ (8002cf4 <HAL_DMA_Init+0x144>)
 8002bea:	641a      	str	r2, [r3, #64]	@ 0x40
 8002bec:	e00e      	b.n	8002c0c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	4b40      	ldr	r3, [pc, #256]	@ (8002cf8 <HAL_DMA_Init+0x148>)
 8002bf6:	4413      	add	r3, r2
 8002bf8:	4a3d      	ldr	r2, [pc, #244]	@ (8002cf0 <HAL_DMA_Init+0x140>)
 8002bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfe:	091b      	lsrs	r3, r3, #4
 8002c00:	009a      	lsls	r2, r3, #2
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a3c      	ldr	r2, [pc, #240]	@ (8002cfc <HAL_DMA_Init+0x14c>)
 8002c0a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002c30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 fa82 	bl	8003168 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c6c:	d102      	bne.n	8002c74 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c88:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d010      	beq.n	8002cb4 <HAL_DMA_Init+0x104>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d80c      	bhi.n	8002cb4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 faa2 	bl	80031e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	e008      	b.n	8002cc6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40020407 	.word	0x40020407
 8002cec:	bffdfff8 	.word	0xbffdfff8
 8002cf0:	cccccccd 	.word	0xcccccccd
 8002cf4:	40020000 	.word	0x40020000
 8002cf8:	bffdfbf8 	.word	0xbffdfbf8
 8002cfc:	40020400 	.word	0x40020400

08002d00 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
 8002d0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_DMA_Start_IT+0x20>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e066      	b.n	8002dee <HAL_DMA_Start_IT+0xee>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d155      	bne.n	8002de0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0201 	bic.w	r2, r2, #1
 8002d50:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	68b9      	ldr	r1, [r7, #8]
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 f9c7 	bl	80030ec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d008      	beq.n	8002d78 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f042 020e 	orr.w	r2, r2, #14
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	e00f      	b.n	8002d98 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0204 	bic.w	r2, r2, #4
 8002d86:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 020a 	orr.w	r2, r2, #10
 8002d96:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d007      	beq.n	8002db6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002db0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002db4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d007      	beq.n	8002dce <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dcc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f042 0201 	orr.w	r2, r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	e005      	b.n	8002dec <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002de8:	2302      	movs	r3, #2
 8002dea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002dec:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b085      	sub	sp, #20
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d005      	beq.n	8002e1a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2204      	movs	r2, #4
 8002e12:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	73fb      	strb	r3, [r7, #15]
 8002e18:	e037      	b.n	8002e8a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 020e 	bic.w	r2, r2, #14
 8002e28:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e38:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0201 	bic.w	r2, r2, #1
 8002e48:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4e:	f003 021f 	and.w	r2, r3, #31
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e56:	2101      	movs	r1, #1
 8002e58:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e66:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00c      	beq.n	8002e8a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e7a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e7e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002e88:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d00d      	beq.n	8002edc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2204      	movs	r2, #4
 8002ec4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	73fb      	strb	r3, [r7, #15]
 8002eda:	e047      	b.n	8002f6c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 020e 	bic.w	r2, r2, #14
 8002eea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0201 	bic.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f06:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f10:	f003 021f 	and.w	r2, r3, #31
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f18:	2101      	movs	r1, #1
 8002f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f1e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f28:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00c      	beq.n	8002f4c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f40:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002f4a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	4798      	blx	r3
    }
  }
  return status;
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b084      	sub	sp, #16
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f92:	f003 031f 	and.w	r3, r3, #31
 8002f96:	2204      	movs	r2, #4
 8002f98:	409a      	lsls	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d026      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x7a>
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d021      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0320 	and.w	r3, r3, #32
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d107      	bne.n	8002fca <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0204 	bic.w	r2, r2, #4
 8002fc8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fce:	f003 021f 	and.w	r2, r3, #31
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd6:	2104      	movs	r1, #4
 8002fd8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fdc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d071      	beq.n	80030ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002fee:	e06c      	b.n	80030ca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff4:	f003 031f 	and.w	r3, r3, #31
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	409a      	lsls	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d02e      	beq.n	8003062 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d029      	beq.n	8003062 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0320 	and.w	r3, r3, #32
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10b      	bne.n	8003034 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 020a 	bic.w	r2, r2, #10
 800302a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003038:	f003 021f 	and.w	r2, r3, #31
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003040:	2102      	movs	r1, #2
 8003042:	fa01 f202 	lsl.w	r2, r1, r2
 8003046:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003054:	2b00      	cmp	r3, #0
 8003056:	d038      	beq.n	80030ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003060:	e033      	b.n	80030ca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003066:	f003 031f 	and.w	r3, r3, #31
 800306a:	2208      	movs	r2, #8
 800306c:	409a      	lsls	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	4013      	ands	r3, r2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d02a      	beq.n	80030cc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	f003 0308 	and.w	r3, r3, #8
 800307c:	2b00      	cmp	r3, #0
 800307e:	d025      	beq.n	80030cc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 020e 	bic.w	r2, r2, #14
 800308e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003094:	f003 021f 	and.w	r2, r3, #31
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309c:	2101      	movs	r1, #1
 800309e:	fa01 f202 	lsl.w	r2, r1, r2
 80030a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d004      	beq.n	80030cc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80030ca:	bf00      	nop
 80030cc:	bf00      	nop
}
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
 80030f8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003102:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003108:	2b00      	cmp	r3, #0
 800310a:	d004      	beq.n	8003116 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003114:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311a:	f003 021f 	and.w	r2, r3, #31
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003122:	2101      	movs	r1, #1
 8003124:	fa01 f202 	lsl.w	r2, r1, r2
 8003128:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	2b10      	cmp	r3, #16
 8003138:	d108      	bne.n	800314c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800314a:	e007      	b.n	800315c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	60da      	str	r2, [r3, #12]
}
 800315c:	bf00      	nop
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003168:	b480      	push	{r7}
 800316a:	b087      	sub	sp, #28
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	461a      	mov	r2, r3
 8003176:	4b16      	ldr	r3, [pc, #88]	@ (80031d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003178:	429a      	cmp	r2, r3
 800317a:	d802      	bhi.n	8003182 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800317c:	4b15      	ldr	r3, [pc, #84]	@ (80031d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	e001      	b.n	8003186 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003182:	4b15      	ldr	r3, [pc, #84]	@ (80031d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003184:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	b2db      	uxtb	r3, r3
 8003190:	3b08      	subs	r3, #8
 8003192:	4a12      	ldr	r2, [pc, #72]	@ (80031dc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003194:	fba2 2303 	umull	r2, r3, r2, r3
 8003198:	091b      	lsrs	r3, r3, #4
 800319a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a0:	089b      	lsrs	r3, r3, #2
 80031a2:	009a      	lsls	r2, r3, #2
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	4413      	add	r3, r2
 80031a8:	461a      	mov	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a0b      	ldr	r2, [pc, #44]	@ (80031e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80031b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f003 031f 	and.w	r3, r3, #31
 80031ba:	2201      	movs	r2, #1
 80031bc:	409a      	lsls	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80031c2:	bf00      	nop
 80031c4:	371c      	adds	r7, #28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40020407 	.word	0x40020407
 80031d4:	40020800 	.word	0x40020800
 80031d8:	40020820 	.word	0x40020820
 80031dc:	cccccccd 	.word	0xcccccccd
 80031e0:	40020880 	.word	0x40020880

080031e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80031f8:	4413      	add	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	461a      	mov	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a08      	ldr	r2, [pc, #32]	@ (8003228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003206:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	3b01      	subs	r3, #1
 800320c:	f003 031f 	and.w	r3, r3, #31
 8003210:	2201      	movs	r2, #1
 8003212:	409a      	lsls	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003218:	bf00      	nop
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	1000823f 	.word	0x1000823f
 8003228:	40020940 	.word	0x40020940

0800322c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800322c:	b480      	push	{r7}
 800322e:	b087      	sub	sp, #28
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003236:	2300      	movs	r3, #0
 8003238:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800323a:	e15a      	b.n	80034f2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	2101      	movs	r1, #1
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	fa01 f303 	lsl.w	r3, r1, r3
 8003248:	4013      	ands	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 814c 	beq.w	80034ec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	2b01      	cmp	r3, #1
 800325e:	d005      	beq.n	800326c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003268:	2b02      	cmp	r3, #2
 800326a:	d130      	bne.n	80032ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	2203      	movs	r2, #3
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	43db      	mvns	r3, r3
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4013      	ands	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	4313      	orrs	r3, r2
 8003294:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032a2:	2201      	movs	r2, #1
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	43db      	mvns	r3, r3
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	4013      	ands	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	091b      	lsrs	r3, r3, #4
 80032b8:	f003 0201 	and.w	r2, r3, #1
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	2b03      	cmp	r3, #3
 80032d8:	d017      	beq.n	800330a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	2203      	movs	r2, #3
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	43db      	mvns	r3, r3
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4013      	ands	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	4313      	orrs	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d123      	bne.n	800335e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	08da      	lsrs	r2, r3, #3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3208      	adds	r2, #8
 800331e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003322:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	220f      	movs	r2, #15
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	43db      	mvns	r3, r3
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	4013      	ands	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	691a      	ldr	r2, [r3, #16]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	08da      	lsrs	r2, r3, #3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3208      	adds	r2, #8
 8003358:	6939      	ldr	r1, [r7, #16]
 800335a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	2203      	movs	r2, #3
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43db      	mvns	r3, r3
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	4013      	ands	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f003 0203 	and.w	r2, r3, #3
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 80a6 	beq.w	80034ec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033a0:	4b5b      	ldr	r3, [pc, #364]	@ (8003510 <HAL_GPIO_Init+0x2e4>)
 80033a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033a4:	4a5a      	ldr	r2, [pc, #360]	@ (8003510 <HAL_GPIO_Init+0x2e4>)
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	6613      	str	r3, [r2, #96]	@ 0x60
 80033ac:	4b58      	ldr	r3, [pc, #352]	@ (8003510 <HAL_GPIO_Init+0x2e4>)
 80033ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	60bb      	str	r3, [r7, #8]
 80033b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033b8:	4a56      	ldr	r2, [pc, #344]	@ (8003514 <HAL_GPIO_Init+0x2e8>)
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	089b      	lsrs	r3, r3, #2
 80033be:	3302      	adds	r3, #2
 80033c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f003 0303 	and.w	r3, r3, #3
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	220f      	movs	r2, #15
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	43db      	mvns	r3, r3
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4013      	ands	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80033e2:	d01f      	beq.n	8003424 <HAL_GPIO_Init+0x1f8>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a4c      	ldr	r2, [pc, #304]	@ (8003518 <HAL_GPIO_Init+0x2ec>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d019      	beq.n	8003420 <HAL_GPIO_Init+0x1f4>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a4b      	ldr	r2, [pc, #300]	@ (800351c <HAL_GPIO_Init+0x2f0>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d013      	beq.n	800341c <HAL_GPIO_Init+0x1f0>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a4a      	ldr	r2, [pc, #296]	@ (8003520 <HAL_GPIO_Init+0x2f4>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d00d      	beq.n	8003418 <HAL_GPIO_Init+0x1ec>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a49      	ldr	r2, [pc, #292]	@ (8003524 <HAL_GPIO_Init+0x2f8>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d007      	beq.n	8003414 <HAL_GPIO_Init+0x1e8>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a48      	ldr	r2, [pc, #288]	@ (8003528 <HAL_GPIO_Init+0x2fc>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d101      	bne.n	8003410 <HAL_GPIO_Init+0x1e4>
 800340c:	2305      	movs	r3, #5
 800340e:	e00a      	b.n	8003426 <HAL_GPIO_Init+0x1fa>
 8003410:	2306      	movs	r3, #6
 8003412:	e008      	b.n	8003426 <HAL_GPIO_Init+0x1fa>
 8003414:	2304      	movs	r3, #4
 8003416:	e006      	b.n	8003426 <HAL_GPIO_Init+0x1fa>
 8003418:	2303      	movs	r3, #3
 800341a:	e004      	b.n	8003426 <HAL_GPIO_Init+0x1fa>
 800341c:	2302      	movs	r3, #2
 800341e:	e002      	b.n	8003426 <HAL_GPIO_Init+0x1fa>
 8003420:	2301      	movs	r3, #1
 8003422:	e000      	b.n	8003426 <HAL_GPIO_Init+0x1fa>
 8003424:	2300      	movs	r3, #0
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	f002 0203 	and.w	r2, r2, #3
 800342c:	0092      	lsls	r2, r2, #2
 800342e:	4093      	lsls	r3, r2
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	4313      	orrs	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003436:	4937      	ldr	r1, [pc, #220]	@ (8003514 <HAL_GPIO_Init+0x2e8>)
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	089b      	lsrs	r3, r3, #2
 800343c:	3302      	adds	r3, #2
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003444:	4b39      	ldr	r3, [pc, #228]	@ (800352c <HAL_GPIO_Init+0x300>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	43db      	mvns	r3, r3
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	4013      	ands	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4313      	orrs	r3, r2
 8003466:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003468:	4a30      	ldr	r2, [pc, #192]	@ (800352c <HAL_GPIO_Init+0x300>)
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800346e:	4b2f      	ldr	r3, [pc, #188]	@ (800352c <HAL_GPIO_Init+0x300>)
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	43db      	mvns	r3, r3
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	4013      	ands	r3, r2
 800347c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4313      	orrs	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003492:	4a26      	ldr	r2, [pc, #152]	@ (800352c <HAL_GPIO_Init+0x300>)
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003498:	4b24      	ldr	r3, [pc, #144]	@ (800352c <HAL_GPIO_Init+0x300>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	43db      	mvns	r3, r3
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4013      	ands	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034bc:	4a1b      	ldr	r2, [pc, #108]	@ (800352c <HAL_GPIO_Init+0x300>)
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80034c2:	4b1a      	ldr	r3, [pc, #104]	@ (800352c <HAL_GPIO_Init+0x300>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	43db      	mvns	r3, r3
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	4013      	ands	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034e6:	4a11      	ldr	r2, [pc, #68]	@ (800352c <HAL_GPIO_Init+0x300>)
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	3301      	adds	r3, #1
 80034f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	fa22 f303 	lsr.w	r3, r2, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f47f ae9d 	bne.w	800323c <HAL_GPIO_Init+0x10>
  }
}
 8003502:	bf00      	nop
 8003504:	bf00      	nop
 8003506:	371c      	adds	r7, #28
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr
 8003510:	40021000 	.word	0x40021000
 8003514:	40010000 	.word	0x40010000
 8003518:	48000400 	.word	0x48000400
 800351c:	48000800 	.word	0x48000800
 8003520:	48000c00 	.word	0x48000c00
 8003524:	48001000 	.word	0x48001000
 8003528:	48001400 	.word	0x48001400
 800352c:	40010400 	.word	0x40010400

08003530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	807b      	strh	r3, [r7, #2]
 800353c:	4613      	mov	r3, r2
 800353e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003540:	787b      	ldrb	r3, [r7, #1]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003546:	887a      	ldrh	r2, [r7, #2]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800354c:	e002      	b.n	8003554 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800354e:	887a      	ldrh	r2, [r7, #2]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800356a:	4b08      	ldr	r3, [pc, #32]	@ (800358c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800356c:	695a      	ldr	r2, [r3, #20]
 800356e:	88fb      	ldrh	r3, [r7, #6]
 8003570:	4013      	ands	r3, r2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d006      	beq.n	8003584 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003576:	4a05      	ldr	r2, [pc, #20]	@ (800358c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003578:	88fb      	ldrh	r3, [r7, #6]
 800357a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800357c:	88fb      	ldrh	r3, [r7, #6]
 800357e:	4618      	mov	r0, r3
 8003580:	f000 f806 	bl	8003590 <HAL_GPIO_EXTI_Callback>
  }
}
 8003584:	bf00      	nop
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40010400 	.word	0x40010400

08003590 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
	...

080035a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d141      	bne.n	800363a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035b6:	4b4b      	ldr	r3, [pc, #300]	@ (80036e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80035be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035c2:	d131      	bne.n	8003628 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035c4:	4b47      	ldr	r3, [pc, #284]	@ (80036e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035ca:	4a46      	ldr	r2, [pc, #280]	@ (80036e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035d4:	4b43      	ldr	r3, [pc, #268]	@ (80036e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80035dc:	4a41      	ldr	r2, [pc, #260]	@ (80036e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035e4:	4b40      	ldr	r3, [pc, #256]	@ (80036e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2232      	movs	r2, #50	@ 0x32
 80035ea:	fb02 f303 	mul.w	r3, r2, r3
 80035ee:	4a3f      	ldr	r2, [pc, #252]	@ (80036ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80035f0:	fba2 2303 	umull	r2, r3, r2, r3
 80035f4:	0c9b      	lsrs	r3, r3, #18
 80035f6:	3301      	adds	r3, #1
 80035f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035fa:	e002      	b.n	8003602 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	3b01      	subs	r3, #1
 8003600:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003602:	4b38      	ldr	r3, [pc, #224]	@ (80036e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800360a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800360e:	d102      	bne.n	8003616 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f2      	bne.n	80035fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003616:	4b33      	ldr	r3, [pc, #204]	@ (80036e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800361e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003622:	d158      	bne.n	80036d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e057      	b.n	80036d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003628:	4b2e      	ldr	r3, [pc, #184]	@ (80036e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800362a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800362e:	4a2d      	ldr	r2, [pc, #180]	@ (80036e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003630:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003634:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003638:	e04d      	b.n	80036d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003640:	d141      	bne.n	80036c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003642:	4b28      	ldr	r3, [pc, #160]	@ (80036e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800364a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800364e:	d131      	bne.n	80036b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003650:	4b24      	ldr	r3, [pc, #144]	@ (80036e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003652:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003656:	4a23      	ldr	r2, [pc, #140]	@ (80036e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003658:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800365c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003660:	4b20      	ldr	r3, [pc, #128]	@ (80036e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003668:	4a1e      	ldr	r2, [pc, #120]	@ (80036e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800366a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800366e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003670:	4b1d      	ldr	r3, [pc, #116]	@ (80036e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2232      	movs	r2, #50	@ 0x32
 8003676:	fb02 f303 	mul.w	r3, r2, r3
 800367a:	4a1c      	ldr	r2, [pc, #112]	@ (80036ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800367c:	fba2 2303 	umull	r2, r3, r2, r3
 8003680:	0c9b      	lsrs	r3, r3, #18
 8003682:	3301      	adds	r3, #1
 8003684:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003686:	e002      	b.n	800368e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	3b01      	subs	r3, #1
 800368c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800368e:	4b15      	ldr	r3, [pc, #84]	@ (80036e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003696:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800369a:	d102      	bne.n	80036a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1f2      	bne.n	8003688 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036a2:	4b10      	ldr	r3, [pc, #64]	@ (80036e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ae:	d112      	bne.n	80036d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e011      	b.n	80036d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036b4:	4b0b      	ldr	r3, [pc, #44]	@ (80036e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036ba:	4a0a      	ldr	r2, [pc, #40]	@ (80036e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80036c4:	e007      	b.n	80036d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036c6:	4b07      	ldr	r3, [pc, #28]	@ (80036e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80036ce:	4a05      	ldr	r2, [pc, #20]	@ (80036e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036d4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	40007000 	.word	0x40007000
 80036e8:	2000000c 	.word	0x2000000c
 80036ec:	431bde83 	.word	0x431bde83

080036f0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80036f4:	4b05      	ldr	r3, [pc, #20]	@ (800370c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	4a04      	ldr	r2, [pc, #16]	@ (800370c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80036fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036fe:	6093      	str	r3, [r2, #8]
}
 8003700:	bf00      	nop
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40007000 	.word	0x40007000

08003710 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e2fe      	b.n	8003d20 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d075      	beq.n	800381a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800372e:	4b97      	ldr	r3, [pc, #604]	@ (800398c <HAL_RCC_OscConfig+0x27c>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 030c 	and.w	r3, r3, #12
 8003736:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003738:	4b94      	ldr	r3, [pc, #592]	@ (800398c <HAL_RCC_OscConfig+0x27c>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f003 0303 	and.w	r3, r3, #3
 8003740:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	2b0c      	cmp	r3, #12
 8003746:	d102      	bne.n	800374e <HAL_RCC_OscConfig+0x3e>
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	2b03      	cmp	r3, #3
 800374c:	d002      	beq.n	8003754 <HAL_RCC_OscConfig+0x44>
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	2b08      	cmp	r3, #8
 8003752:	d10b      	bne.n	800376c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003754:	4b8d      	ldr	r3, [pc, #564]	@ (800398c <HAL_RCC_OscConfig+0x27c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d05b      	beq.n	8003818 <HAL_RCC_OscConfig+0x108>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d157      	bne.n	8003818 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e2d9      	b.n	8003d20 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003774:	d106      	bne.n	8003784 <HAL_RCC_OscConfig+0x74>
 8003776:	4b85      	ldr	r3, [pc, #532]	@ (800398c <HAL_RCC_OscConfig+0x27c>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a84      	ldr	r2, [pc, #528]	@ (800398c <HAL_RCC_OscConfig+0x27c>)
 800377c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	e01d      	b.n	80037c0 <HAL_RCC_OscConfig+0xb0>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800378c:	d10c      	bne.n	80037a8 <HAL_RCC_OscConfig+0x98>
 800378e:	4b7f      	ldr	r3, [pc, #508]	@ (800398c <HAL_RCC_OscConfig+0x27c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a7e      	ldr	r2, [pc, #504]	@ (800398c <HAL_RCC_OscConfig+0x27c>)
 8003794:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	4b7c      	ldr	r3, [pc, #496]	@ (800398c <HAL_RCC_OscConfig+0x27c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a7b      	ldr	r2, [pc, #492]	@ (800398c <HAL_RCC_OscConfig+0x27c>)
 80037a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	e00b      	b.n	80037c0 <HAL_RCC_OscConfig+0xb0>
 80037a8:	4b78      	ldr	r3, [pc, #480]	@ (800398c <HAL_RCC_OscConfig+0x27c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a77      	ldr	r2, [pc, #476]	@ (800398c <HAL_RCC_OscConfig+0x27c>)
 80037ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037b2:	6013      	str	r3, [r2, #0]
 80037b4:	4b75      	ldr	r3, [pc, #468]	@ (800398c <HAL_RCC_OscConfig+0x27c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a74      	ldr	r2, [pc, #464]	@ (800398c <HAL_RCC_OscConfig+0x27c>)
 80037ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d013      	beq.n	80037f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c8:	f7ff f906 	bl	80029d8 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d0:	f7ff f902 	bl	80029d8 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b64      	cmp	r3, #100	@ 0x64
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e29e      	b.n	8003d20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037e2:	4b6a      	ldr	r3, [pc, #424]	@ (800398c <HAL_RCC_OscConfig+0x27c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0f0      	beq.n	80037d0 <HAL_RCC_OscConfig+0xc0>
 80037ee:	e014      	b.n	800381a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f0:	f7ff f8f2 	bl	80029d8 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f8:	f7ff f8ee 	bl	80029d8 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b64      	cmp	r3, #100	@ 0x64
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e28a      	b.n	8003d20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800380a:	4b60      	ldr	r3, [pc, #384]	@ (800398c <HAL_RCC_OscConfig+0x27c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f0      	bne.n	80037f8 <HAL_RCC_OscConfig+0xe8>
 8003816:	e000      	b.n	800381a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d075      	beq.n	8003912 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003826:	4b59      	ldr	r3, [pc, #356]	@ (800398c <HAL_RCC_OscConfig+0x27c>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 030c 	and.w	r3, r3, #12
 800382e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003830:	4b56      	ldr	r3, [pc, #344]	@ (800398c <HAL_RCC_OscConfig+0x27c>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f003 0303 	and.w	r3, r3, #3
 8003838:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	2b0c      	cmp	r3, #12
 800383e:	d102      	bne.n	8003846 <HAL_RCC_OscConfig+0x136>
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d002      	beq.n	800384c <HAL_RCC_OscConfig+0x13c>
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	2b04      	cmp	r3, #4
 800384a:	d11f      	bne.n	800388c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800384c:	4b4f      	ldr	r3, [pc, #316]	@ (800398c <HAL_RCC_OscConfig+0x27c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <HAL_RCC_OscConfig+0x154>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e25d      	b.n	8003d20 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003864:	4b49      	ldr	r3, [pc, #292]	@ (800398c <HAL_RCC_OscConfig+0x27c>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	061b      	lsls	r3, r3, #24
 8003872:	4946      	ldr	r1, [pc, #280]	@ (800398c <HAL_RCC_OscConfig+0x27c>)
 8003874:	4313      	orrs	r3, r2
 8003876:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003878:	4b45      	ldr	r3, [pc, #276]	@ (8003990 <HAL_RCC_OscConfig+0x280>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f7fe fa67 	bl	8001d50 <HAL_InitTick>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d043      	beq.n	8003910 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e249      	b.n	8003d20 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d023      	beq.n	80038dc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003894:	4b3d      	ldr	r3, [pc, #244]	@ (800398c <HAL_RCC_OscConfig+0x27c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a3c      	ldr	r2, [pc, #240]	@ (800398c <HAL_RCC_OscConfig+0x27c>)
 800389a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800389e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a0:	f7ff f89a 	bl	80029d8 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038a8:	f7ff f896 	bl	80029d8 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e232      	b.n	8003d20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038ba:	4b34      	ldr	r3, [pc, #208]	@ (800398c <HAL_RCC_OscConfig+0x27c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0f0      	beq.n	80038a8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c6:	4b31      	ldr	r3, [pc, #196]	@ (800398c <HAL_RCC_OscConfig+0x27c>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	061b      	lsls	r3, r3, #24
 80038d4:	492d      	ldr	r1, [pc, #180]	@ (800398c <HAL_RCC_OscConfig+0x27c>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	604b      	str	r3, [r1, #4]
 80038da:	e01a      	b.n	8003912 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038dc:	4b2b      	ldr	r3, [pc, #172]	@ (800398c <HAL_RCC_OscConfig+0x27c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a2a      	ldr	r2, [pc, #168]	@ (800398c <HAL_RCC_OscConfig+0x27c>)
 80038e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e8:	f7ff f876 	bl	80029d8 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038f0:	f7ff f872 	bl	80029d8 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e20e      	b.n	8003d20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003902:	4b22      	ldr	r3, [pc, #136]	@ (800398c <HAL_RCC_OscConfig+0x27c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1f0      	bne.n	80038f0 <HAL_RCC_OscConfig+0x1e0>
 800390e:	e000      	b.n	8003912 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003910:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b00      	cmp	r3, #0
 800391c:	d041      	beq.n	80039a2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d01c      	beq.n	8003960 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003926:	4b19      	ldr	r3, [pc, #100]	@ (800398c <HAL_RCC_OscConfig+0x27c>)
 8003928:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800392c:	4a17      	ldr	r2, [pc, #92]	@ (800398c <HAL_RCC_OscConfig+0x27c>)
 800392e:	f043 0301 	orr.w	r3, r3, #1
 8003932:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003936:	f7ff f84f 	bl	80029d8 <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800393e:	f7ff f84b 	bl	80029d8 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e1e7      	b.n	8003d20 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003950:	4b0e      	ldr	r3, [pc, #56]	@ (800398c <HAL_RCC_OscConfig+0x27c>)
 8003952:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0ef      	beq.n	800393e <HAL_RCC_OscConfig+0x22e>
 800395e:	e020      	b.n	80039a2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003960:	4b0a      	ldr	r3, [pc, #40]	@ (800398c <HAL_RCC_OscConfig+0x27c>)
 8003962:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003966:	4a09      	ldr	r2, [pc, #36]	@ (800398c <HAL_RCC_OscConfig+0x27c>)
 8003968:	f023 0301 	bic.w	r3, r3, #1
 800396c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003970:	f7ff f832 	bl	80029d8 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003976:	e00d      	b.n	8003994 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003978:	f7ff f82e 	bl	80029d8 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d906      	bls.n	8003994 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e1ca      	b.n	8003d20 <HAL_RCC_OscConfig+0x610>
 800398a:	bf00      	nop
 800398c:	40021000 	.word	0x40021000
 8003990:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003994:	4b8c      	ldr	r3, [pc, #560]	@ (8003bc8 <HAL_RCC_OscConfig+0x4b8>)
 8003996:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1ea      	bne.n	8003978 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 80a6 	beq.w	8003afc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039b0:	2300      	movs	r3, #0
 80039b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039b4:	4b84      	ldr	r3, [pc, #528]	@ (8003bc8 <HAL_RCC_OscConfig+0x4b8>)
 80039b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_RCC_OscConfig+0x2b4>
 80039c0:	2301      	movs	r3, #1
 80039c2:	e000      	b.n	80039c6 <HAL_RCC_OscConfig+0x2b6>
 80039c4:	2300      	movs	r3, #0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00d      	beq.n	80039e6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ca:	4b7f      	ldr	r3, [pc, #508]	@ (8003bc8 <HAL_RCC_OscConfig+0x4b8>)
 80039cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ce:	4a7e      	ldr	r2, [pc, #504]	@ (8003bc8 <HAL_RCC_OscConfig+0x4b8>)
 80039d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80039d6:	4b7c      	ldr	r3, [pc, #496]	@ (8003bc8 <HAL_RCC_OscConfig+0x4b8>)
 80039d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80039e2:	2301      	movs	r3, #1
 80039e4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039e6:	4b79      	ldr	r3, [pc, #484]	@ (8003bcc <HAL_RCC_OscConfig+0x4bc>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d118      	bne.n	8003a24 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039f2:	4b76      	ldr	r3, [pc, #472]	@ (8003bcc <HAL_RCC_OscConfig+0x4bc>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a75      	ldr	r2, [pc, #468]	@ (8003bcc <HAL_RCC_OscConfig+0x4bc>)
 80039f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039fe:	f7fe ffeb 	bl	80029d8 <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a04:	e008      	b.n	8003a18 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a06:	f7fe ffe7 	bl	80029d8 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e183      	b.n	8003d20 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a18:	4b6c      	ldr	r3, [pc, #432]	@ (8003bcc <HAL_RCC_OscConfig+0x4bc>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0f0      	beq.n	8003a06 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d108      	bne.n	8003a3e <HAL_RCC_OscConfig+0x32e>
 8003a2c:	4b66      	ldr	r3, [pc, #408]	@ (8003bc8 <HAL_RCC_OscConfig+0x4b8>)
 8003a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a32:	4a65      	ldr	r2, [pc, #404]	@ (8003bc8 <HAL_RCC_OscConfig+0x4b8>)
 8003a34:	f043 0301 	orr.w	r3, r3, #1
 8003a38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a3c:	e024      	b.n	8003a88 <HAL_RCC_OscConfig+0x378>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	2b05      	cmp	r3, #5
 8003a44:	d110      	bne.n	8003a68 <HAL_RCC_OscConfig+0x358>
 8003a46:	4b60      	ldr	r3, [pc, #384]	@ (8003bc8 <HAL_RCC_OscConfig+0x4b8>)
 8003a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a4c:	4a5e      	ldr	r2, [pc, #376]	@ (8003bc8 <HAL_RCC_OscConfig+0x4b8>)
 8003a4e:	f043 0304 	orr.w	r3, r3, #4
 8003a52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a56:	4b5c      	ldr	r3, [pc, #368]	@ (8003bc8 <HAL_RCC_OscConfig+0x4b8>)
 8003a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a5c:	4a5a      	ldr	r2, [pc, #360]	@ (8003bc8 <HAL_RCC_OscConfig+0x4b8>)
 8003a5e:	f043 0301 	orr.w	r3, r3, #1
 8003a62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a66:	e00f      	b.n	8003a88 <HAL_RCC_OscConfig+0x378>
 8003a68:	4b57      	ldr	r3, [pc, #348]	@ (8003bc8 <HAL_RCC_OscConfig+0x4b8>)
 8003a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a6e:	4a56      	ldr	r2, [pc, #344]	@ (8003bc8 <HAL_RCC_OscConfig+0x4b8>)
 8003a70:	f023 0301 	bic.w	r3, r3, #1
 8003a74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a78:	4b53      	ldr	r3, [pc, #332]	@ (8003bc8 <HAL_RCC_OscConfig+0x4b8>)
 8003a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a7e:	4a52      	ldr	r2, [pc, #328]	@ (8003bc8 <HAL_RCC_OscConfig+0x4b8>)
 8003a80:	f023 0304 	bic.w	r3, r3, #4
 8003a84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d016      	beq.n	8003abe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a90:	f7fe ffa2 	bl	80029d8 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a96:	e00a      	b.n	8003aae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a98:	f7fe ff9e 	bl	80029d8 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e138      	b.n	8003d20 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aae:	4b46      	ldr	r3, [pc, #280]	@ (8003bc8 <HAL_RCC_OscConfig+0x4b8>)
 8003ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0ed      	beq.n	8003a98 <HAL_RCC_OscConfig+0x388>
 8003abc:	e015      	b.n	8003aea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003abe:	f7fe ff8b 	bl	80029d8 <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ac4:	e00a      	b.n	8003adc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac6:	f7fe ff87 	bl	80029d8 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e121      	b.n	8003d20 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003adc:	4b3a      	ldr	r3, [pc, #232]	@ (8003bc8 <HAL_RCC_OscConfig+0x4b8>)
 8003ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1ed      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003aea:	7ffb      	ldrb	r3, [r7, #31]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d105      	bne.n	8003afc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003af0:	4b35      	ldr	r3, [pc, #212]	@ (8003bc8 <HAL_RCC_OscConfig+0x4b8>)
 8003af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af4:	4a34      	ldr	r2, [pc, #208]	@ (8003bc8 <HAL_RCC_OscConfig+0x4b8>)
 8003af6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003afa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0320 	and.w	r3, r3, #32
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d03c      	beq.n	8003b82 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d01c      	beq.n	8003b4a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b10:	4b2d      	ldr	r3, [pc, #180]	@ (8003bc8 <HAL_RCC_OscConfig+0x4b8>)
 8003b12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b16:	4a2c      	ldr	r2, [pc, #176]	@ (8003bc8 <HAL_RCC_OscConfig+0x4b8>)
 8003b18:	f043 0301 	orr.w	r3, r3, #1
 8003b1c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b20:	f7fe ff5a 	bl	80029d8 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b28:	f7fe ff56 	bl	80029d8 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e0f2      	b.n	8003d20 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b3a:	4b23      	ldr	r3, [pc, #140]	@ (8003bc8 <HAL_RCC_OscConfig+0x4b8>)
 8003b3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0ef      	beq.n	8003b28 <HAL_RCC_OscConfig+0x418>
 8003b48:	e01b      	b.n	8003b82 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b4a:	4b1f      	ldr	r3, [pc, #124]	@ (8003bc8 <HAL_RCC_OscConfig+0x4b8>)
 8003b4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b50:	4a1d      	ldr	r2, [pc, #116]	@ (8003bc8 <HAL_RCC_OscConfig+0x4b8>)
 8003b52:	f023 0301 	bic.w	r3, r3, #1
 8003b56:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5a:	f7fe ff3d 	bl	80029d8 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b62:	f7fe ff39 	bl	80029d8 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e0d5      	b.n	8003d20 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b74:	4b14      	ldr	r3, [pc, #80]	@ (8003bc8 <HAL_RCC_OscConfig+0x4b8>)
 8003b76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1ef      	bne.n	8003b62 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 80c9 	beq.w	8003d1e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8003bc8 <HAL_RCC_OscConfig+0x4b8>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f003 030c 	and.w	r3, r3, #12
 8003b94:	2b0c      	cmp	r3, #12
 8003b96:	f000 8083 	beq.w	8003ca0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d15e      	bne.n	8003c60 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba2:	4b09      	ldr	r3, [pc, #36]	@ (8003bc8 <HAL_RCC_OscConfig+0x4b8>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a08      	ldr	r2, [pc, #32]	@ (8003bc8 <HAL_RCC_OscConfig+0x4b8>)
 8003ba8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bae:	f7fe ff13 	bl	80029d8 <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bb4:	e00c      	b.n	8003bd0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bb6:	f7fe ff0f 	bl	80029d8 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d905      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e0ab      	b.n	8003d20 <HAL_RCC_OscConfig+0x610>
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bd0:	4b55      	ldr	r3, [pc, #340]	@ (8003d28 <HAL_RCC_OscConfig+0x618>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1ec      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bdc:	4b52      	ldr	r3, [pc, #328]	@ (8003d28 <HAL_RCC_OscConfig+0x618>)
 8003bde:	68da      	ldr	r2, [r3, #12]
 8003be0:	4b52      	ldr	r3, [pc, #328]	@ (8003d2c <HAL_RCC_OscConfig+0x61c>)
 8003be2:	4013      	ands	r3, r2
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6a11      	ldr	r1, [r2, #32]
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003bec:	3a01      	subs	r2, #1
 8003bee:	0112      	lsls	r2, r2, #4
 8003bf0:	4311      	orrs	r1, r2
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003bf6:	0212      	lsls	r2, r2, #8
 8003bf8:	4311      	orrs	r1, r2
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003bfe:	0852      	lsrs	r2, r2, #1
 8003c00:	3a01      	subs	r2, #1
 8003c02:	0552      	lsls	r2, r2, #21
 8003c04:	4311      	orrs	r1, r2
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003c0a:	0852      	lsrs	r2, r2, #1
 8003c0c:	3a01      	subs	r2, #1
 8003c0e:	0652      	lsls	r2, r2, #25
 8003c10:	4311      	orrs	r1, r2
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003c16:	06d2      	lsls	r2, r2, #27
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	4943      	ldr	r1, [pc, #268]	@ (8003d28 <HAL_RCC_OscConfig+0x618>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c20:	4b41      	ldr	r3, [pc, #260]	@ (8003d28 <HAL_RCC_OscConfig+0x618>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a40      	ldr	r2, [pc, #256]	@ (8003d28 <HAL_RCC_OscConfig+0x618>)
 8003c26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c2a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c2c:	4b3e      	ldr	r3, [pc, #248]	@ (8003d28 <HAL_RCC_OscConfig+0x618>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	4a3d      	ldr	r2, [pc, #244]	@ (8003d28 <HAL_RCC_OscConfig+0x618>)
 8003c32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c36:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c38:	f7fe fece 	bl	80029d8 <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c40:	f7fe feca 	bl	80029d8 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e066      	b.n	8003d20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c52:	4b35      	ldr	r3, [pc, #212]	@ (8003d28 <HAL_RCC_OscConfig+0x618>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0f0      	beq.n	8003c40 <HAL_RCC_OscConfig+0x530>
 8003c5e:	e05e      	b.n	8003d1e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c60:	4b31      	ldr	r3, [pc, #196]	@ (8003d28 <HAL_RCC_OscConfig+0x618>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a30      	ldr	r2, [pc, #192]	@ (8003d28 <HAL_RCC_OscConfig+0x618>)
 8003c66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6c:	f7fe feb4 	bl	80029d8 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c74:	f7fe feb0 	bl	80029d8 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e04c      	b.n	8003d20 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c86:	4b28      	ldr	r3, [pc, #160]	@ (8003d28 <HAL_RCC_OscConfig+0x618>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f0      	bne.n	8003c74 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003c92:	4b25      	ldr	r3, [pc, #148]	@ (8003d28 <HAL_RCC_OscConfig+0x618>)
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	4924      	ldr	r1, [pc, #144]	@ (8003d28 <HAL_RCC_OscConfig+0x618>)
 8003c98:	4b25      	ldr	r3, [pc, #148]	@ (8003d30 <HAL_RCC_OscConfig+0x620>)
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	60cb      	str	r3, [r1, #12]
 8003c9e:	e03e      	b.n	8003d1e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	69db      	ldr	r3, [r3, #28]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e039      	b.n	8003d20 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003cac:	4b1e      	ldr	r3, [pc, #120]	@ (8003d28 <HAL_RCC_OscConfig+0x618>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f003 0203 	and.w	r2, r3, #3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d12c      	bne.n	8003d1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d123      	bne.n	8003d1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cdc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d11b      	bne.n	8003d1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cec:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d113      	bne.n	8003d1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfc:	085b      	lsrs	r3, r3, #1
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d109      	bne.n	8003d1a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d10:	085b      	lsrs	r3, r3, #1
 8003d12:	3b01      	subs	r3, #1
 8003d14:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d001      	beq.n	8003d1e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e000      	b.n	8003d20 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3720      	adds	r7, #32
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	019f800c 	.word	0x019f800c
 8003d30:	feeefffc 	.word	0xfeeefffc

08003d34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b086      	sub	sp, #24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e11e      	b.n	8003f8a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d4c:	4b91      	ldr	r3, [pc, #580]	@ (8003f94 <HAL_RCC_ClockConfig+0x260>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 030f 	and.w	r3, r3, #15
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d910      	bls.n	8003d7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5a:	4b8e      	ldr	r3, [pc, #568]	@ (8003f94 <HAL_RCC_ClockConfig+0x260>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f023 020f 	bic.w	r2, r3, #15
 8003d62:	498c      	ldr	r1, [pc, #560]	@ (8003f94 <HAL_RCC_ClockConfig+0x260>)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d6a:	4b8a      	ldr	r3, [pc, #552]	@ (8003f94 <HAL_RCC_ClockConfig+0x260>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 030f 	and.w	r3, r3, #15
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d001      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e106      	b.n	8003f8a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d073      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2b03      	cmp	r3, #3
 8003d8e:	d129      	bne.n	8003de4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d90:	4b81      	ldr	r3, [pc, #516]	@ (8003f98 <HAL_RCC_ClockConfig+0x264>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e0f4      	b.n	8003f8a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003da0:	f000 f9d0 	bl	8004144 <RCC_GetSysClockFreqFromPLLSource>
 8003da4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	4a7c      	ldr	r2, [pc, #496]	@ (8003f9c <HAL_RCC_ClockConfig+0x268>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d93f      	bls.n	8003e2e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003dae:	4b7a      	ldr	r3, [pc, #488]	@ (8003f98 <HAL_RCC_ClockConfig+0x264>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d009      	beq.n	8003dce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d033      	beq.n	8003e2e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d12f      	bne.n	8003e2e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003dce:	4b72      	ldr	r3, [pc, #456]	@ (8003f98 <HAL_RCC_ClockConfig+0x264>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003dd6:	4a70      	ldr	r2, [pc, #448]	@ (8003f98 <HAL_RCC_ClockConfig+0x264>)
 8003dd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ddc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003dde:	2380      	movs	r3, #128	@ 0x80
 8003de0:	617b      	str	r3, [r7, #20]
 8003de2:	e024      	b.n	8003e2e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d107      	bne.n	8003dfc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dec:	4b6a      	ldr	r3, [pc, #424]	@ (8003f98 <HAL_RCC_ClockConfig+0x264>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d109      	bne.n	8003e0c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e0c6      	b.n	8003f8a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dfc:	4b66      	ldr	r3, [pc, #408]	@ (8003f98 <HAL_RCC_ClockConfig+0x264>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e0be      	b.n	8003f8a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003e0c:	f000 f8ce 	bl	8003fac <HAL_RCC_GetSysClockFreq>
 8003e10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	4a61      	ldr	r2, [pc, #388]	@ (8003f9c <HAL_RCC_ClockConfig+0x268>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d909      	bls.n	8003e2e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e1a:	4b5f      	ldr	r3, [pc, #380]	@ (8003f98 <HAL_RCC_ClockConfig+0x264>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e22:	4a5d      	ldr	r2, [pc, #372]	@ (8003f98 <HAL_RCC_ClockConfig+0x264>)
 8003e24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e28:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003e2a:	2380      	movs	r3, #128	@ 0x80
 8003e2c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e2e:	4b5a      	ldr	r3, [pc, #360]	@ (8003f98 <HAL_RCC_ClockConfig+0x264>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f023 0203 	bic.w	r2, r3, #3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	4957      	ldr	r1, [pc, #348]	@ (8003f98 <HAL_RCC_ClockConfig+0x264>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e40:	f7fe fdca 	bl	80029d8 <HAL_GetTick>
 8003e44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e46:	e00a      	b.n	8003e5e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e48:	f7fe fdc6 	bl	80029d8 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e095      	b.n	8003f8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e5e:	4b4e      	ldr	r3, [pc, #312]	@ (8003f98 <HAL_RCC_ClockConfig+0x264>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 020c 	and.w	r2, r3, #12
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d1eb      	bne.n	8003e48 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d023      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d005      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e88:	4b43      	ldr	r3, [pc, #268]	@ (8003f98 <HAL_RCC_ClockConfig+0x264>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	4a42      	ldr	r2, [pc, #264]	@ (8003f98 <HAL_RCC_ClockConfig+0x264>)
 8003e8e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003e92:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d007      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003ea0:	4b3d      	ldr	r3, [pc, #244]	@ (8003f98 <HAL_RCC_ClockConfig+0x264>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003ea8:	4a3b      	ldr	r2, [pc, #236]	@ (8003f98 <HAL_RCC_ClockConfig+0x264>)
 8003eaa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003eae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eb0:	4b39      	ldr	r3, [pc, #228]	@ (8003f98 <HAL_RCC_ClockConfig+0x264>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	4936      	ldr	r1, [pc, #216]	@ (8003f98 <HAL_RCC_ClockConfig+0x264>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	608b      	str	r3, [r1, #8]
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	2b80      	cmp	r3, #128	@ 0x80
 8003ec8:	d105      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003eca:	4b33      	ldr	r3, [pc, #204]	@ (8003f98 <HAL_RCC_ClockConfig+0x264>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	4a32      	ldr	r2, [pc, #200]	@ (8003f98 <HAL_RCC_ClockConfig+0x264>)
 8003ed0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ed4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed6:	4b2f      	ldr	r3, [pc, #188]	@ (8003f94 <HAL_RCC_ClockConfig+0x260>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d21d      	bcs.n	8003f20 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee4:	4b2b      	ldr	r3, [pc, #172]	@ (8003f94 <HAL_RCC_ClockConfig+0x260>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f023 020f 	bic.w	r2, r3, #15
 8003eec:	4929      	ldr	r1, [pc, #164]	@ (8003f94 <HAL_RCC_ClockConfig+0x260>)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ef4:	f7fe fd70 	bl	80029d8 <HAL_GetTick>
 8003ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003efa:	e00a      	b.n	8003f12 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003efc:	f7fe fd6c 	bl	80029d8 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e03b      	b.n	8003f8a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f12:	4b20      	ldr	r3, [pc, #128]	@ (8003f94 <HAL_RCC_ClockConfig+0x260>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 030f 	and.w	r3, r3, #15
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d1ed      	bne.n	8003efc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d008      	beq.n	8003f3e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8003f98 <HAL_RCC_ClockConfig+0x264>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	4917      	ldr	r1, [pc, #92]	@ (8003f98 <HAL_RCC_ClockConfig+0x264>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d009      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f4a:	4b13      	ldr	r3, [pc, #76]	@ (8003f98 <HAL_RCC_ClockConfig+0x264>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	490f      	ldr	r1, [pc, #60]	@ (8003f98 <HAL_RCC_ClockConfig+0x264>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f5e:	f000 f825 	bl	8003fac <HAL_RCC_GetSysClockFreq>
 8003f62:	4602      	mov	r2, r0
 8003f64:	4b0c      	ldr	r3, [pc, #48]	@ (8003f98 <HAL_RCC_ClockConfig+0x264>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	091b      	lsrs	r3, r3, #4
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	490c      	ldr	r1, [pc, #48]	@ (8003fa0 <HAL_RCC_ClockConfig+0x26c>)
 8003f70:	5ccb      	ldrb	r3, [r1, r3]
 8003f72:	f003 031f 	and.w	r3, r3, #31
 8003f76:	fa22 f303 	lsr.w	r3, r2, r3
 8003f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8003fa4 <HAL_RCC_ClockConfig+0x270>)
 8003f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa8 <HAL_RCC_ClockConfig+0x274>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fd fee4 	bl	8001d50 <HAL_InitTick>
 8003f88:	4603      	mov	r3, r0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3718      	adds	r7, #24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40022000 	.word	0x40022000
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	04c4b400 	.word	0x04c4b400
 8003fa0:	08018a74 	.word	0x08018a74
 8003fa4:	2000000c 	.word	0x2000000c
 8003fa8:	20000010 	.word	0x20000010

08003fac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003fb2:	4b2c      	ldr	r3, [pc, #176]	@ (8004064 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 030c 	and.w	r3, r3, #12
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d102      	bne.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fbe:	4b2a      	ldr	r3, [pc, #168]	@ (8004068 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003fc0:	613b      	str	r3, [r7, #16]
 8003fc2:	e047      	b.n	8004054 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003fc4:	4b27      	ldr	r3, [pc, #156]	@ (8004064 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 030c 	and.w	r3, r3, #12
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d102      	bne.n	8003fd6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fd0:	4b26      	ldr	r3, [pc, #152]	@ (800406c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003fd2:	613b      	str	r3, [r7, #16]
 8003fd4:	e03e      	b.n	8004054 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003fd6:	4b23      	ldr	r3, [pc, #140]	@ (8004064 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 030c 	and.w	r3, r3, #12
 8003fde:	2b0c      	cmp	r3, #12
 8003fe0:	d136      	bne.n	8004050 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fe2:	4b20      	ldr	r3, [pc, #128]	@ (8004064 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	f003 0303 	and.w	r3, r3, #3
 8003fea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fec:	4b1d      	ldr	r3, [pc, #116]	@ (8004064 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	091b      	lsrs	r3, r3, #4
 8003ff2:	f003 030f 	and.w	r3, r3, #15
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2b03      	cmp	r3, #3
 8003ffe:	d10c      	bne.n	800401a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004000:	4a1a      	ldr	r2, [pc, #104]	@ (800406c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	fbb2 f3f3 	udiv	r3, r2, r3
 8004008:	4a16      	ldr	r2, [pc, #88]	@ (8004064 <HAL_RCC_GetSysClockFreq+0xb8>)
 800400a:	68d2      	ldr	r2, [r2, #12]
 800400c:	0a12      	lsrs	r2, r2, #8
 800400e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004012:	fb02 f303 	mul.w	r3, r2, r3
 8004016:	617b      	str	r3, [r7, #20]
      break;
 8004018:	e00c      	b.n	8004034 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800401a:	4a13      	ldr	r2, [pc, #76]	@ (8004068 <HAL_RCC_GetSysClockFreq+0xbc>)
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004022:	4a10      	ldr	r2, [pc, #64]	@ (8004064 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004024:	68d2      	ldr	r2, [r2, #12]
 8004026:	0a12      	lsrs	r2, r2, #8
 8004028:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800402c:	fb02 f303 	mul.w	r3, r2, r3
 8004030:	617b      	str	r3, [r7, #20]
      break;
 8004032:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004034:	4b0b      	ldr	r3, [pc, #44]	@ (8004064 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	0e5b      	lsrs	r3, r3, #25
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	3301      	adds	r3, #1
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	fbb2 f3f3 	udiv	r3, r2, r3
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	e001      	b.n	8004054 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004054:	693b      	ldr	r3, [r7, #16]
}
 8004056:	4618      	mov	r0, r3
 8004058:	371c      	adds	r7, #28
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	40021000 	.word	0x40021000
 8004068:	00f42400 	.word	0x00f42400
 800406c:	016e3600 	.word	0x016e3600

08004070 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004074:	4b03      	ldr	r3, [pc, #12]	@ (8004084 <HAL_RCC_GetHCLKFreq+0x14>)
 8004076:	681b      	ldr	r3, [r3, #0]
}
 8004078:	4618      	mov	r0, r3
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	2000000c 	.word	0x2000000c

08004088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800408c:	f7ff fff0 	bl	8004070 <HAL_RCC_GetHCLKFreq>
 8004090:	4602      	mov	r2, r0
 8004092:	4b06      	ldr	r3, [pc, #24]	@ (80040ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	0a1b      	lsrs	r3, r3, #8
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	4904      	ldr	r1, [pc, #16]	@ (80040b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800409e:	5ccb      	ldrb	r3, [r1, r3]
 80040a0:	f003 031f 	and.w	r3, r3, #31
 80040a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40021000 	.word	0x40021000
 80040b0:	08018a84 	.word	0x08018a84

080040b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80040b8:	f7ff ffda 	bl	8004070 <HAL_RCC_GetHCLKFreq>
 80040bc:	4602      	mov	r2, r0
 80040be:	4b06      	ldr	r3, [pc, #24]	@ (80040d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	0adb      	lsrs	r3, r3, #11
 80040c4:	f003 0307 	and.w	r3, r3, #7
 80040c8:	4904      	ldr	r1, [pc, #16]	@ (80040dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80040ca:	5ccb      	ldrb	r3, [r1, r3]
 80040cc:	f003 031f 	and.w	r3, r3, #31
 80040d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40021000 	.word	0x40021000
 80040dc:	08018a84 	.word	0x08018a84

080040e0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	220f      	movs	r2, #15
 80040ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80040f0:	4b12      	ldr	r3, [pc, #72]	@ (800413c <HAL_RCC_GetClockConfig+0x5c>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 0203 	and.w	r2, r3, #3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80040fc:	4b0f      	ldr	r3, [pc, #60]	@ (800413c <HAL_RCC_GetClockConfig+0x5c>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004108:	4b0c      	ldr	r3, [pc, #48]	@ (800413c <HAL_RCC_GetClockConfig+0x5c>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004114:	4b09      	ldr	r3, [pc, #36]	@ (800413c <HAL_RCC_GetClockConfig+0x5c>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	08db      	lsrs	r3, r3, #3
 800411a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004122:	4b07      	ldr	r3, [pc, #28]	@ (8004140 <HAL_RCC_GetClockConfig+0x60>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 020f 	and.w	r2, r3, #15
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	601a      	str	r2, [r3, #0]
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	40021000 	.word	0x40021000
 8004140:	40022000 	.word	0x40022000

08004144 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800414a:	4b1e      	ldr	r3, [pc, #120]	@ (80041c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004154:	4b1b      	ldr	r3, [pc, #108]	@ (80041c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	091b      	lsrs	r3, r3, #4
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	3301      	adds	r3, #1
 8004160:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	2b03      	cmp	r3, #3
 8004166:	d10c      	bne.n	8004182 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004168:	4a17      	ldr	r2, [pc, #92]	@ (80041c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004170:	4a14      	ldr	r2, [pc, #80]	@ (80041c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004172:	68d2      	ldr	r2, [r2, #12]
 8004174:	0a12      	lsrs	r2, r2, #8
 8004176:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800417a:	fb02 f303 	mul.w	r3, r2, r3
 800417e:	617b      	str	r3, [r7, #20]
    break;
 8004180:	e00c      	b.n	800419c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004182:	4a12      	ldr	r2, [pc, #72]	@ (80041cc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	fbb2 f3f3 	udiv	r3, r2, r3
 800418a:	4a0e      	ldr	r2, [pc, #56]	@ (80041c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800418c:	68d2      	ldr	r2, [r2, #12]
 800418e:	0a12      	lsrs	r2, r2, #8
 8004190:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004194:	fb02 f303 	mul.w	r3, r2, r3
 8004198:	617b      	str	r3, [r7, #20]
    break;
 800419a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800419c:	4b09      	ldr	r3, [pc, #36]	@ (80041c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	0e5b      	lsrs	r3, r3, #25
 80041a2:	f003 0303 	and.w	r3, r3, #3
 80041a6:	3301      	adds	r3, #1
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80041b6:	687b      	ldr	r3, [r7, #4]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	371c      	adds	r7, #28
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	40021000 	.word	0x40021000
 80041c8:	016e3600 	.word	0x016e3600
 80041cc:	00f42400 	.word	0x00f42400

080041d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041d8:	2300      	movs	r3, #0
 80041da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041dc:	2300      	movs	r3, #0
 80041de:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 8098 	beq.w	800431e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ee:	2300      	movs	r3, #0
 80041f0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041f2:	4b43      	ldr	r3, [pc, #268]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10d      	bne.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041fe:	4b40      	ldr	r3, [pc, #256]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004202:	4a3f      	ldr	r2, [pc, #252]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004204:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004208:	6593      	str	r3, [r2, #88]	@ 0x58
 800420a:	4b3d      	ldr	r3, [pc, #244]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800420c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800420e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004212:	60bb      	str	r3, [r7, #8]
 8004214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004216:	2301      	movs	r3, #1
 8004218:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800421a:	4b3a      	ldr	r3, [pc, #232]	@ (8004304 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a39      	ldr	r2, [pc, #228]	@ (8004304 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004220:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004224:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004226:	f7fe fbd7 	bl	80029d8 <HAL_GetTick>
 800422a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800422c:	e009      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800422e:	f7fe fbd3 	bl	80029d8 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d902      	bls.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	74fb      	strb	r3, [r7, #19]
        break;
 8004240:	e005      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004242:	4b30      	ldr	r3, [pc, #192]	@ (8004304 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0ef      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800424e:	7cfb      	ldrb	r3, [r7, #19]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d159      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004254:	4b2a      	ldr	r3, [pc, #168]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800425a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800425e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d01e      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	429a      	cmp	r2, r3
 800426e:	d019      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004270:	4b23      	ldr	r3, [pc, #140]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004276:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800427a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800427c:	4b20      	ldr	r3, [pc, #128]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800427e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004282:	4a1f      	ldr	r2, [pc, #124]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004284:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004288:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800428c:	4b1c      	ldr	r3, [pc, #112]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800428e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004292:	4a1b      	ldr	r2, [pc, #108]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004294:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004298:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800429c:	4a18      	ldr	r2, [pc, #96]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d016      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ae:	f7fe fb93 	bl	80029d8 <HAL_GetTick>
 80042b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042b4:	e00b      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b6:	f7fe fb8f 	bl	80029d8 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d902      	bls.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	74fb      	strb	r3, [r7, #19]
            break;
 80042cc:	e006      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ce:	4b0c      	ldr	r3, [pc, #48]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0ec      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80042dc:	7cfb      	ldrb	r3, [r7, #19]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10b      	bne.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042e2:	4b07      	ldr	r3, [pc, #28]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042f0:	4903      	ldr	r1, [pc, #12]	@ (8004300 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80042f8:	e008      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042fa:	7cfb      	ldrb	r3, [r7, #19]
 80042fc:	74bb      	strb	r3, [r7, #18]
 80042fe:	e005      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004300:	40021000 	.word	0x40021000
 8004304:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004308:	7cfb      	ldrb	r3, [r7, #19]
 800430a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800430c:	7c7b      	ldrb	r3, [r7, #17]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d105      	bne.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004312:	4ba7      	ldr	r3, [pc, #668]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004316:	4aa6      	ldr	r2, [pc, #664]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004318:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800431c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00a      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800432a:	4ba1      	ldr	r3, [pc, #644]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800432c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004330:	f023 0203 	bic.w	r2, r3, #3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	499d      	ldr	r1, [pc, #628]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800433a:	4313      	orrs	r3, r2
 800433c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00a      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800434c:	4b98      	ldr	r3, [pc, #608]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800434e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004352:	f023 020c 	bic.w	r2, r3, #12
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	4995      	ldr	r1, [pc, #596]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800435c:	4313      	orrs	r3, r2
 800435e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0304 	and.w	r3, r3, #4
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800436e:	4b90      	ldr	r3, [pc, #576]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004374:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	498c      	ldr	r1, [pc, #560]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0308 	and.w	r3, r3, #8
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00a      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004390:	4b87      	ldr	r3, [pc, #540]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004396:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	4984      	ldr	r1, [pc, #528]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0310 	and.w	r3, r3, #16
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043b2:	4b7f      	ldr	r3, [pc, #508]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	497b      	ldr	r1, [pc, #492]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0320 	and.w	r3, r3, #32
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00a      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043d4:	4b76      	ldr	r3, [pc, #472]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	4973      	ldr	r1, [pc, #460]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00a      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043f6:	4b6e      	ldr	r3, [pc, #440]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043fc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	496a      	ldr	r1, [pc, #424]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004406:	4313      	orrs	r3, r2
 8004408:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00a      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004418:	4b65      	ldr	r3, [pc, #404]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800441a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800441e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	4962      	ldr	r1, [pc, #392]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004428:	4313      	orrs	r3, r2
 800442a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00a      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800443a:	4b5d      	ldr	r3, [pc, #372]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800443c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004440:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004448:	4959      	ldr	r1, [pc, #356]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800445c:	4b54      	ldr	r3, [pc, #336]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800445e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004462:	f023 0203 	bic.w	r2, r3, #3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800446a:	4951      	ldr	r1, [pc, #324]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800446c:	4313      	orrs	r3, r2
 800446e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800447e:	4b4c      	ldr	r3, [pc, #304]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004484:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448c:	4948      	ldr	r1, [pc, #288]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800449c:	2b00      	cmp	r3, #0
 800449e:	d015      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044a0:	4b43      	ldr	r3, [pc, #268]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ae:	4940      	ldr	r1, [pc, #256]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044be:	d105      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044c0:	4b3b      	ldr	r3, [pc, #236]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	4a3a      	ldr	r2, [pc, #232]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044ca:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d015      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044d8:	4b35      	ldr	r3, [pc, #212]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044de:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044e6:	4932      	ldr	r1, [pc, #200]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044f6:	d105      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044f8:	4b2d      	ldr	r3, [pc, #180]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	4a2c      	ldr	r2, [pc, #176]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004502:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d015      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004510:	4b27      	ldr	r3, [pc, #156]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004516:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451e:	4924      	ldr	r1, [pc, #144]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800452a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800452e:	d105      	bne.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004530:	4b1f      	ldr	r3, [pc, #124]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	4a1e      	ldr	r2, [pc, #120]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004536:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800453a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d015      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004548:	4b19      	ldr	r3, [pc, #100]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800454a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800454e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004556:	4916      	ldr	r1, [pc, #88]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004558:	4313      	orrs	r3, r2
 800455a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004562:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004566:	d105      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004568:	4b11      	ldr	r3, [pc, #68]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	4a10      	ldr	r2, [pc, #64]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800456e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004572:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d019      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004580:	4b0b      	ldr	r3, [pc, #44]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004586:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458e:	4908      	ldr	r1, [pc, #32]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004590:	4313      	orrs	r3, r2
 8004592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800459e:	d109      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045a0:	4b03      	ldr	r3, [pc, #12]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	4a02      	ldr	r2, [pc, #8]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045aa:	60d3      	str	r3, [r2, #12]
 80045ac:	e002      	b.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80045ae:	bf00      	nop
 80045b0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d015      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80045c0:	4b29      	ldr	r3, [pc, #164]	@ (8004668 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ce:	4926      	ldr	r1, [pc, #152]	@ (8004668 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045de:	d105      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80045e0:	4b21      	ldr	r3, [pc, #132]	@ (8004668 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	4a20      	ldr	r2, [pc, #128]	@ (8004668 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045ea:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d015      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80045f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004668 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045fe:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004606:	4918      	ldr	r1, [pc, #96]	@ (8004668 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004608:	4313      	orrs	r3, r2
 800460a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004616:	d105      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004618:	4b13      	ldr	r3, [pc, #76]	@ (8004668 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	4a12      	ldr	r2, [pc, #72]	@ (8004668 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800461e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004622:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d015      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004630:	4b0d      	ldr	r3, [pc, #52]	@ (8004668 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004632:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004636:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800463e:	490a      	ldr	r1, [pc, #40]	@ (8004668 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800464a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800464e:	d105      	bne.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004650:	4b05      	ldr	r3, [pc, #20]	@ (8004668 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	4a04      	ldr	r2, [pc, #16]	@ (8004668 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004656:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800465a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800465c:	7cbb      	ldrb	r3, [r7, #18]
}
 800465e:	4618      	mov	r0, r3
 8004660:	3718      	adds	r7, #24
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	40021000 	.word	0x40021000

0800466c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e049      	b.n	8004712 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7fd fab2 	bl	8001bfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3304      	adds	r3, #4
 80046a8:	4619      	mov	r1, r3
 80046aa:	4610      	mov	r0, r2
 80046ac:	f000 fe34 	bl	8005318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
	...

0800471c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b01      	cmp	r3, #1
 800472e:	d001      	beq.n	8004734 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e04c      	b.n	80047ce <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a26      	ldr	r2, [pc, #152]	@ (80047dc <HAL_TIM_Base_Start+0xc0>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d022      	beq.n	800478c <HAL_TIM_Base_Start+0x70>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800474e:	d01d      	beq.n	800478c <HAL_TIM_Base_Start+0x70>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a22      	ldr	r2, [pc, #136]	@ (80047e0 <HAL_TIM_Base_Start+0xc4>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d018      	beq.n	800478c <HAL_TIM_Base_Start+0x70>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a21      	ldr	r2, [pc, #132]	@ (80047e4 <HAL_TIM_Base_Start+0xc8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d013      	beq.n	800478c <HAL_TIM_Base_Start+0x70>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a1f      	ldr	r2, [pc, #124]	@ (80047e8 <HAL_TIM_Base_Start+0xcc>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d00e      	beq.n	800478c <HAL_TIM_Base_Start+0x70>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a1e      	ldr	r2, [pc, #120]	@ (80047ec <HAL_TIM_Base_Start+0xd0>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d009      	beq.n	800478c <HAL_TIM_Base_Start+0x70>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a1c      	ldr	r2, [pc, #112]	@ (80047f0 <HAL_TIM_Base_Start+0xd4>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d004      	beq.n	800478c <HAL_TIM_Base_Start+0x70>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a1b      	ldr	r2, [pc, #108]	@ (80047f4 <HAL_TIM_Base_Start+0xd8>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d115      	bne.n	80047b8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689a      	ldr	r2, [r3, #8]
 8004792:	4b19      	ldr	r3, [pc, #100]	@ (80047f8 <HAL_TIM_Base_Start+0xdc>)
 8004794:	4013      	ands	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2b06      	cmp	r3, #6
 800479c:	d015      	beq.n	80047ca <HAL_TIM_Base_Start+0xae>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047a4:	d011      	beq.n	80047ca <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f042 0201 	orr.w	r2, r2, #1
 80047b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b6:	e008      	b.n	80047ca <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0201 	orr.w	r2, r2, #1
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	e000      	b.n	80047cc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40012c00 	.word	0x40012c00
 80047e0:	40000400 	.word	0x40000400
 80047e4:	40000800 	.word	0x40000800
 80047e8:	40000c00 	.word	0x40000c00
 80047ec:	40013400 	.word	0x40013400
 80047f0:	40014000 	.word	0x40014000
 80047f4:	40015000 	.word	0x40015000
 80047f8:	00010007 	.word	0x00010007

080047fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b01      	cmp	r3, #1
 800480e:	d001      	beq.n	8004814 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e054      	b.n	80048be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0201 	orr.w	r2, r2, #1
 800482a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a26      	ldr	r2, [pc, #152]	@ (80048cc <HAL_TIM_Base_Start_IT+0xd0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d022      	beq.n	800487c <HAL_TIM_Base_Start_IT+0x80>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800483e:	d01d      	beq.n	800487c <HAL_TIM_Base_Start_IT+0x80>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a22      	ldr	r2, [pc, #136]	@ (80048d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d018      	beq.n	800487c <HAL_TIM_Base_Start_IT+0x80>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a21      	ldr	r2, [pc, #132]	@ (80048d4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d013      	beq.n	800487c <HAL_TIM_Base_Start_IT+0x80>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a1f      	ldr	r2, [pc, #124]	@ (80048d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d00e      	beq.n	800487c <HAL_TIM_Base_Start_IT+0x80>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a1e      	ldr	r2, [pc, #120]	@ (80048dc <HAL_TIM_Base_Start_IT+0xe0>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d009      	beq.n	800487c <HAL_TIM_Base_Start_IT+0x80>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a1c      	ldr	r2, [pc, #112]	@ (80048e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d004      	beq.n	800487c <HAL_TIM_Base_Start_IT+0x80>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a1b      	ldr	r2, [pc, #108]	@ (80048e4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d115      	bne.n	80048a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689a      	ldr	r2, [r3, #8]
 8004882:	4b19      	ldr	r3, [pc, #100]	@ (80048e8 <HAL_TIM_Base_Start_IT+0xec>)
 8004884:	4013      	ands	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2b06      	cmp	r3, #6
 800488c:	d015      	beq.n	80048ba <HAL_TIM_Base_Start_IT+0xbe>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004894:	d011      	beq.n	80048ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f042 0201 	orr.w	r2, r2, #1
 80048a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a6:	e008      	b.n	80048ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0201 	orr.w	r2, r2, #1
 80048b6:	601a      	str	r2, [r3, #0]
 80048b8:	e000      	b.n	80048bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3714      	adds	r7, #20
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	40012c00 	.word	0x40012c00
 80048d0:	40000400 	.word	0x40000400
 80048d4:	40000800 	.word	0x40000800
 80048d8:	40000c00 	.word	0x40000c00
 80048dc:	40013400 	.word	0x40013400
 80048e0:	40014000 	.word	0x40014000
 80048e4:	40015000 	.word	0x40015000
 80048e8:	00010007 	.word	0x00010007

080048ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e049      	b.n	8004992 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d106      	bne.n	8004918 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f841 	bl	800499a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	3304      	adds	r3, #4
 8004928:	4619      	mov	r1, r3
 800492a:	4610      	mov	r0, r2
 800492c:	f000 fcf4 	bl	8005318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
	...

080049b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d109      	bne.n	80049d4 <HAL_TIM_PWM_Start+0x24>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	bf14      	ite	ne
 80049cc:	2301      	movne	r3, #1
 80049ce:	2300      	moveq	r3, #0
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	e03c      	b.n	8004a4e <HAL_TIM_PWM_Start+0x9e>
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	2b04      	cmp	r3, #4
 80049d8:	d109      	bne.n	80049ee <HAL_TIM_PWM_Start+0x3e>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	bf14      	ite	ne
 80049e6:	2301      	movne	r3, #1
 80049e8:	2300      	moveq	r3, #0
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	e02f      	b.n	8004a4e <HAL_TIM_PWM_Start+0x9e>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d109      	bne.n	8004a08 <HAL_TIM_PWM_Start+0x58>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	bf14      	ite	ne
 8004a00:	2301      	movne	r3, #1
 8004a02:	2300      	moveq	r3, #0
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	e022      	b.n	8004a4e <HAL_TIM_PWM_Start+0x9e>
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2b0c      	cmp	r3, #12
 8004a0c:	d109      	bne.n	8004a22 <HAL_TIM_PWM_Start+0x72>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	bf14      	ite	ne
 8004a1a:	2301      	movne	r3, #1
 8004a1c:	2300      	moveq	r3, #0
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	e015      	b.n	8004a4e <HAL_TIM_PWM_Start+0x9e>
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b10      	cmp	r3, #16
 8004a26:	d109      	bne.n	8004a3c <HAL_TIM_PWM_Start+0x8c>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	bf14      	ite	ne
 8004a34:	2301      	movne	r3, #1
 8004a36:	2300      	moveq	r3, #0
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	e008      	b.n	8004a4e <HAL_TIM_PWM_Start+0x9e>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	bf14      	ite	ne
 8004a48:	2301      	movne	r3, #1
 8004a4a:	2300      	moveq	r3, #0
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e0a6      	b.n	8004ba4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d104      	bne.n	8004a66 <HAL_TIM_PWM_Start+0xb6>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a64:	e023      	b.n	8004aae <HAL_TIM_PWM_Start+0xfe>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	d104      	bne.n	8004a76 <HAL_TIM_PWM_Start+0xc6>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a74:	e01b      	b.n	8004aae <HAL_TIM_PWM_Start+0xfe>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d104      	bne.n	8004a86 <HAL_TIM_PWM_Start+0xd6>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a84:	e013      	b.n	8004aae <HAL_TIM_PWM_Start+0xfe>
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b0c      	cmp	r3, #12
 8004a8a:	d104      	bne.n	8004a96 <HAL_TIM_PWM_Start+0xe6>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2202      	movs	r2, #2
 8004a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a94:	e00b      	b.n	8004aae <HAL_TIM_PWM_Start+0xfe>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	2b10      	cmp	r3, #16
 8004a9a:	d104      	bne.n	8004aa6 <HAL_TIM_PWM_Start+0xf6>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004aa4:	e003      	b.n	8004aae <HAL_TIM_PWM_Start+0xfe>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	6839      	ldr	r1, [r7, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f001 f8a8 	bl	8005c0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a3a      	ldr	r2, [pc, #232]	@ (8004bac <HAL_TIM_PWM_Start+0x1fc>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d018      	beq.n	8004af8 <HAL_TIM_PWM_Start+0x148>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a39      	ldr	r2, [pc, #228]	@ (8004bb0 <HAL_TIM_PWM_Start+0x200>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d013      	beq.n	8004af8 <HAL_TIM_PWM_Start+0x148>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a37      	ldr	r2, [pc, #220]	@ (8004bb4 <HAL_TIM_PWM_Start+0x204>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d00e      	beq.n	8004af8 <HAL_TIM_PWM_Start+0x148>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a36      	ldr	r2, [pc, #216]	@ (8004bb8 <HAL_TIM_PWM_Start+0x208>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d009      	beq.n	8004af8 <HAL_TIM_PWM_Start+0x148>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a34      	ldr	r2, [pc, #208]	@ (8004bbc <HAL_TIM_PWM_Start+0x20c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d004      	beq.n	8004af8 <HAL_TIM_PWM_Start+0x148>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a33      	ldr	r2, [pc, #204]	@ (8004bc0 <HAL_TIM_PWM_Start+0x210>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d101      	bne.n	8004afc <HAL_TIM_PWM_Start+0x14c>
 8004af8:	2301      	movs	r3, #1
 8004afa:	e000      	b.n	8004afe <HAL_TIM_PWM_Start+0x14e>
 8004afc:	2300      	movs	r3, #0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d007      	beq.n	8004b12 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b10:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a25      	ldr	r2, [pc, #148]	@ (8004bac <HAL_TIM_PWM_Start+0x1fc>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d022      	beq.n	8004b62 <HAL_TIM_PWM_Start+0x1b2>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b24:	d01d      	beq.n	8004b62 <HAL_TIM_PWM_Start+0x1b2>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a26      	ldr	r2, [pc, #152]	@ (8004bc4 <HAL_TIM_PWM_Start+0x214>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d018      	beq.n	8004b62 <HAL_TIM_PWM_Start+0x1b2>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a24      	ldr	r2, [pc, #144]	@ (8004bc8 <HAL_TIM_PWM_Start+0x218>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d013      	beq.n	8004b62 <HAL_TIM_PWM_Start+0x1b2>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a23      	ldr	r2, [pc, #140]	@ (8004bcc <HAL_TIM_PWM_Start+0x21c>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d00e      	beq.n	8004b62 <HAL_TIM_PWM_Start+0x1b2>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a19      	ldr	r2, [pc, #100]	@ (8004bb0 <HAL_TIM_PWM_Start+0x200>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d009      	beq.n	8004b62 <HAL_TIM_PWM_Start+0x1b2>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a18      	ldr	r2, [pc, #96]	@ (8004bb4 <HAL_TIM_PWM_Start+0x204>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d004      	beq.n	8004b62 <HAL_TIM_PWM_Start+0x1b2>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a18      	ldr	r2, [pc, #96]	@ (8004bc0 <HAL_TIM_PWM_Start+0x210>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d115      	bne.n	8004b8e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	4b19      	ldr	r3, [pc, #100]	@ (8004bd0 <HAL_TIM_PWM_Start+0x220>)
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2b06      	cmp	r3, #6
 8004b72:	d015      	beq.n	8004ba0 <HAL_TIM_PWM_Start+0x1f0>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b7a:	d011      	beq.n	8004ba0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0201 	orr.w	r2, r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b8c:	e008      	b.n	8004ba0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f042 0201 	orr.w	r2, r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	e000      	b.n	8004ba2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	40012c00 	.word	0x40012c00
 8004bb0:	40013400 	.word	0x40013400
 8004bb4:	40014000 	.word	0x40014000
 8004bb8:	40014400 	.word	0x40014400
 8004bbc:	40014800 	.word	0x40014800
 8004bc0:	40015000 	.word	0x40015000
 8004bc4:	40000400 	.word	0x40000400
 8004bc8:	40000800 	.word	0x40000800
 8004bcc:	40000c00 	.word	0x40000c00
 8004bd0:	00010007 	.word	0x00010007

08004bd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d020      	beq.n	8004c38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d01b      	beq.n	8004c38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f06f 0202 	mvn.w	r2, #2
 8004c08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	f003 0303 	and.w	r3, r3, #3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fb5c 	bl	80052dc <HAL_TIM_IC_CaptureCallback>
 8004c24:	e005      	b.n	8004c32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fb4e 	bl	80052c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fb5f 	bl	80052f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f003 0304 	and.w	r3, r3, #4
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d020      	beq.n	8004c84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d01b      	beq.n	8004c84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f06f 0204 	mvn.w	r2, #4
 8004c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2202      	movs	r2, #2
 8004c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fb36 	bl	80052dc <HAL_TIM_IC_CaptureCallback>
 8004c70:	e005      	b.n	8004c7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fb28 	bl	80052c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 fb39 	bl	80052f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f003 0308 	and.w	r3, r3, #8
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d020      	beq.n	8004cd0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f003 0308 	and.w	r3, r3, #8
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d01b      	beq.n	8004cd0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f06f 0208 	mvn.w	r2, #8
 8004ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2204      	movs	r2, #4
 8004ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 fb10 	bl	80052dc <HAL_TIM_IC_CaptureCallback>
 8004cbc:	e005      	b.n	8004cca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 fb02 	bl	80052c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 fb13 	bl	80052f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	f003 0310 	and.w	r3, r3, #16
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d020      	beq.n	8004d1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f003 0310 	and.w	r3, r3, #16
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d01b      	beq.n	8004d1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f06f 0210 	mvn.w	r2, #16
 8004cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2208      	movs	r2, #8
 8004cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 faea 	bl	80052dc <HAL_TIM_IC_CaptureCallback>
 8004d08:	e005      	b.n	8004d16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 fadc 	bl	80052c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 faed 	bl	80052f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00c      	beq.n	8004d40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d007      	beq.n	8004d40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f06f 0201 	mvn.w	r2, #1
 8004d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7fc fe5e 	bl	80019fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d104      	bne.n	8004d54 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00c      	beq.n	8004d6e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d007      	beq.n	8004d6e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004d66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f001 f815 	bl	8005d98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00c      	beq.n	8004d92 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d007      	beq.n	8004d92 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f001 f80d 	bl	8005dac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00c      	beq.n	8004db6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d007      	beq.n	8004db6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004dae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 faa7 	bl	8005304 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	f003 0320 	and.w	r3, r3, #32
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00c      	beq.n	8004dda <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d007      	beq.n	8004dda <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f06f 0220 	mvn.w	r2, #32
 8004dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 ffd5 	bl	8005d84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00c      	beq.n	8004dfe <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d007      	beq.n	8004dfe <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 ffe1 	bl	8005dc0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00c      	beq.n	8004e22 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d007      	beq.n	8004e22 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 ffd9 	bl	8005dd4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00c      	beq.n	8004e46 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d007      	beq.n	8004e46 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 ffd1 	bl	8005de8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00c      	beq.n	8004e6a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d007      	beq.n	8004e6a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 ffc9 	bl	8005dfc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e6a:	bf00      	nop
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
	...

08004e74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d101      	bne.n	8004e92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e8e:	2302      	movs	r3, #2
 8004e90:	e0ff      	b.n	8005092 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b14      	cmp	r3, #20
 8004e9e:	f200 80f0 	bhi.w	8005082 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ea8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea8:	08004efd 	.word	0x08004efd
 8004eac:	08005083 	.word	0x08005083
 8004eb0:	08005083 	.word	0x08005083
 8004eb4:	08005083 	.word	0x08005083
 8004eb8:	08004f3d 	.word	0x08004f3d
 8004ebc:	08005083 	.word	0x08005083
 8004ec0:	08005083 	.word	0x08005083
 8004ec4:	08005083 	.word	0x08005083
 8004ec8:	08004f7f 	.word	0x08004f7f
 8004ecc:	08005083 	.word	0x08005083
 8004ed0:	08005083 	.word	0x08005083
 8004ed4:	08005083 	.word	0x08005083
 8004ed8:	08004fbf 	.word	0x08004fbf
 8004edc:	08005083 	.word	0x08005083
 8004ee0:	08005083 	.word	0x08005083
 8004ee4:	08005083 	.word	0x08005083
 8004ee8:	08005001 	.word	0x08005001
 8004eec:	08005083 	.word	0x08005083
 8004ef0:	08005083 	.word	0x08005083
 8004ef4:	08005083 	.word	0x08005083
 8004ef8:	08005041 	.word	0x08005041
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68b9      	ldr	r1, [r7, #8]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 fabc 	bl	8005480 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699a      	ldr	r2, [r3, #24]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f042 0208 	orr.w	r2, r2, #8
 8004f16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	699a      	ldr	r2, [r3, #24]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f022 0204 	bic.w	r2, r2, #4
 8004f26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6999      	ldr	r1, [r3, #24]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	691a      	ldr	r2, [r3, #16]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	619a      	str	r2, [r3, #24]
      break;
 8004f3a:	e0a5      	b.n	8005088 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68b9      	ldr	r1, [r7, #8]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 fb36 	bl	80055b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699a      	ldr	r2, [r3, #24]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	699a      	ldr	r2, [r3, #24]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6999      	ldr	r1, [r3, #24]
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	021a      	lsls	r2, r3, #8
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	619a      	str	r2, [r3, #24]
      break;
 8004f7c:	e084      	b.n	8005088 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68b9      	ldr	r1, [r7, #8]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 fba9 	bl	80056dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	69da      	ldr	r2, [r3, #28]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f042 0208 	orr.w	r2, r2, #8
 8004f98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	69da      	ldr	r2, [r3, #28]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f022 0204 	bic.w	r2, r2, #4
 8004fa8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	69d9      	ldr	r1, [r3, #28]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	691a      	ldr	r2, [r3, #16]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	61da      	str	r2, [r3, #28]
      break;
 8004fbc:	e064      	b.n	8005088 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68b9      	ldr	r1, [r7, #8]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 fc1b 	bl	8005800 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	69da      	ldr	r2, [r3, #28]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	69da      	ldr	r2, [r3, #28]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	69d9      	ldr	r1, [r3, #28]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	021a      	lsls	r2, r3, #8
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	61da      	str	r2, [r3, #28]
      break;
 8004ffe:	e043      	b.n	8005088 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68b9      	ldr	r1, [r7, #8]
 8005006:	4618      	mov	r0, r3
 8005008:	f000 fc8e 	bl	8005928 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f042 0208 	orr.w	r2, r2, #8
 800501a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0204 	bic.w	r2, r2, #4
 800502a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	691a      	ldr	r2, [r3, #16]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	430a      	orrs	r2, r1
 800503c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800503e:	e023      	b.n	8005088 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68b9      	ldr	r1, [r7, #8]
 8005046:	4618      	mov	r0, r3
 8005048:	f000 fcd8 	bl	80059fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800505a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800506a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	021a      	lsls	r2, r3, #8
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	430a      	orrs	r2, r1
 800507e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005080:	e002      	b.n	8005088 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	75fb      	strb	r3, [r7, #23]
      break;
 8005086:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005090:	7dfb      	ldrb	r3, [r7, #23]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop

0800509c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050a6:	2300      	movs	r3, #0
 80050a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d101      	bne.n	80050b8 <HAL_TIM_ConfigClockSource+0x1c>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e0f6      	b.n	80052a6 <HAL_TIM_ConfigClockSource+0x20a>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80050d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80050da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a6f      	ldr	r2, [pc, #444]	@ (80052b0 <HAL_TIM_ConfigClockSource+0x214>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	f000 80c1 	beq.w	800527a <HAL_TIM_ConfigClockSource+0x1de>
 80050f8:	4a6d      	ldr	r2, [pc, #436]	@ (80052b0 <HAL_TIM_ConfigClockSource+0x214>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	f200 80c6 	bhi.w	800528c <HAL_TIM_ConfigClockSource+0x1f0>
 8005100:	4a6c      	ldr	r2, [pc, #432]	@ (80052b4 <HAL_TIM_ConfigClockSource+0x218>)
 8005102:	4293      	cmp	r3, r2
 8005104:	f000 80b9 	beq.w	800527a <HAL_TIM_ConfigClockSource+0x1de>
 8005108:	4a6a      	ldr	r2, [pc, #424]	@ (80052b4 <HAL_TIM_ConfigClockSource+0x218>)
 800510a:	4293      	cmp	r3, r2
 800510c:	f200 80be 	bhi.w	800528c <HAL_TIM_ConfigClockSource+0x1f0>
 8005110:	4a69      	ldr	r2, [pc, #420]	@ (80052b8 <HAL_TIM_ConfigClockSource+0x21c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	f000 80b1 	beq.w	800527a <HAL_TIM_ConfigClockSource+0x1de>
 8005118:	4a67      	ldr	r2, [pc, #412]	@ (80052b8 <HAL_TIM_ConfigClockSource+0x21c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	f200 80b6 	bhi.w	800528c <HAL_TIM_ConfigClockSource+0x1f0>
 8005120:	4a66      	ldr	r2, [pc, #408]	@ (80052bc <HAL_TIM_ConfigClockSource+0x220>)
 8005122:	4293      	cmp	r3, r2
 8005124:	f000 80a9 	beq.w	800527a <HAL_TIM_ConfigClockSource+0x1de>
 8005128:	4a64      	ldr	r2, [pc, #400]	@ (80052bc <HAL_TIM_ConfigClockSource+0x220>)
 800512a:	4293      	cmp	r3, r2
 800512c:	f200 80ae 	bhi.w	800528c <HAL_TIM_ConfigClockSource+0x1f0>
 8005130:	4a63      	ldr	r2, [pc, #396]	@ (80052c0 <HAL_TIM_ConfigClockSource+0x224>)
 8005132:	4293      	cmp	r3, r2
 8005134:	f000 80a1 	beq.w	800527a <HAL_TIM_ConfigClockSource+0x1de>
 8005138:	4a61      	ldr	r2, [pc, #388]	@ (80052c0 <HAL_TIM_ConfigClockSource+0x224>)
 800513a:	4293      	cmp	r3, r2
 800513c:	f200 80a6 	bhi.w	800528c <HAL_TIM_ConfigClockSource+0x1f0>
 8005140:	4a60      	ldr	r2, [pc, #384]	@ (80052c4 <HAL_TIM_ConfigClockSource+0x228>)
 8005142:	4293      	cmp	r3, r2
 8005144:	f000 8099 	beq.w	800527a <HAL_TIM_ConfigClockSource+0x1de>
 8005148:	4a5e      	ldr	r2, [pc, #376]	@ (80052c4 <HAL_TIM_ConfigClockSource+0x228>)
 800514a:	4293      	cmp	r3, r2
 800514c:	f200 809e 	bhi.w	800528c <HAL_TIM_ConfigClockSource+0x1f0>
 8005150:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005154:	f000 8091 	beq.w	800527a <HAL_TIM_ConfigClockSource+0x1de>
 8005158:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800515c:	f200 8096 	bhi.w	800528c <HAL_TIM_ConfigClockSource+0x1f0>
 8005160:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005164:	f000 8089 	beq.w	800527a <HAL_TIM_ConfigClockSource+0x1de>
 8005168:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800516c:	f200 808e 	bhi.w	800528c <HAL_TIM_ConfigClockSource+0x1f0>
 8005170:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005174:	d03e      	beq.n	80051f4 <HAL_TIM_ConfigClockSource+0x158>
 8005176:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800517a:	f200 8087 	bhi.w	800528c <HAL_TIM_ConfigClockSource+0x1f0>
 800517e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005182:	f000 8086 	beq.w	8005292 <HAL_TIM_ConfigClockSource+0x1f6>
 8005186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800518a:	d87f      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x1f0>
 800518c:	2b70      	cmp	r3, #112	@ 0x70
 800518e:	d01a      	beq.n	80051c6 <HAL_TIM_ConfigClockSource+0x12a>
 8005190:	2b70      	cmp	r3, #112	@ 0x70
 8005192:	d87b      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x1f0>
 8005194:	2b60      	cmp	r3, #96	@ 0x60
 8005196:	d050      	beq.n	800523a <HAL_TIM_ConfigClockSource+0x19e>
 8005198:	2b60      	cmp	r3, #96	@ 0x60
 800519a:	d877      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x1f0>
 800519c:	2b50      	cmp	r3, #80	@ 0x50
 800519e:	d03c      	beq.n	800521a <HAL_TIM_ConfigClockSource+0x17e>
 80051a0:	2b50      	cmp	r3, #80	@ 0x50
 80051a2:	d873      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x1f0>
 80051a4:	2b40      	cmp	r3, #64	@ 0x40
 80051a6:	d058      	beq.n	800525a <HAL_TIM_ConfigClockSource+0x1be>
 80051a8:	2b40      	cmp	r3, #64	@ 0x40
 80051aa:	d86f      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x1f0>
 80051ac:	2b30      	cmp	r3, #48	@ 0x30
 80051ae:	d064      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x1de>
 80051b0:	2b30      	cmp	r3, #48	@ 0x30
 80051b2:	d86b      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x1f0>
 80051b4:	2b20      	cmp	r3, #32
 80051b6:	d060      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x1de>
 80051b8:	2b20      	cmp	r3, #32
 80051ba:	d867      	bhi.n	800528c <HAL_TIM_ConfigClockSource+0x1f0>
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d05c      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x1de>
 80051c0:	2b10      	cmp	r3, #16
 80051c2:	d05a      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x1de>
 80051c4:	e062      	b.n	800528c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051d6:	f000 fcf9 	bl	8005bcc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80051e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	609a      	str	r2, [r3, #8]
      break;
 80051f2:	e04f      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005204:	f000 fce2 	bl	8005bcc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689a      	ldr	r2, [r3, #8]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005216:	609a      	str	r2, [r3, #8]
      break;
 8005218:	e03c      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005226:	461a      	mov	r2, r3
 8005228:	f000 fc54 	bl	8005ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2150      	movs	r1, #80	@ 0x50
 8005232:	4618      	mov	r0, r3
 8005234:	f000 fcad 	bl	8005b92 <TIM_ITRx_SetConfig>
      break;
 8005238:	e02c      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005246:	461a      	mov	r2, r3
 8005248:	f000 fc73 	bl	8005b32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2160      	movs	r1, #96	@ 0x60
 8005252:	4618      	mov	r0, r3
 8005254:	f000 fc9d 	bl	8005b92 <TIM_ITRx_SetConfig>
      break;
 8005258:	e01c      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005266:	461a      	mov	r2, r3
 8005268:	f000 fc34 	bl	8005ad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2140      	movs	r1, #64	@ 0x40
 8005272:	4618      	mov	r0, r3
 8005274:	f000 fc8d 	bl	8005b92 <TIM_ITRx_SetConfig>
      break;
 8005278:	e00c      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4619      	mov	r1, r3
 8005284:	4610      	mov	r0, r2
 8005286:	f000 fc84 	bl	8005b92 <TIM_ITRx_SetConfig>
      break;
 800528a:	e003      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	73fb      	strb	r3, [r7, #15]
      break;
 8005290:	e000      	b.n	8005294 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005292:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	00100070 	.word	0x00100070
 80052b4:	00100060 	.word	0x00100060
 80052b8:	00100050 	.word	0x00100050
 80052bc:	00100040 	.word	0x00100040
 80052c0:	00100030 	.word	0x00100030
 80052c4:	00100020 	.word	0x00100020

080052c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a4c      	ldr	r2, [pc, #304]	@ (800545c <TIM_Base_SetConfig+0x144>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d017      	beq.n	8005360 <TIM_Base_SetConfig+0x48>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005336:	d013      	beq.n	8005360 <TIM_Base_SetConfig+0x48>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a49      	ldr	r2, [pc, #292]	@ (8005460 <TIM_Base_SetConfig+0x148>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d00f      	beq.n	8005360 <TIM_Base_SetConfig+0x48>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a48      	ldr	r2, [pc, #288]	@ (8005464 <TIM_Base_SetConfig+0x14c>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d00b      	beq.n	8005360 <TIM_Base_SetConfig+0x48>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a47      	ldr	r2, [pc, #284]	@ (8005468 <TIM_Base_SetConfig+0x150>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d007      	beq.n	8005360 <TIM_Base_SetConfig+0x48>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a46      	ldr	r2, [pc, #280]	@ (800546c <TIM_Base_SetConfig+0x154>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d003      	beq.n	8005360 <TIM_Base_SetConfig+0x48>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a45      	ldr	r2, [pc, #276]	@ (8005470 <TIM_Base_SetConfig+0x158>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d108      	bne.n	8005372 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005366:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a39      	ldr	r2, [pc, #228]	@ (800545c <TIM_Base_SetConfig+0x144>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d023      	beq.n	80053c2 <TIM_Base_SetConfig+0xaa>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005380:	d01f      	beq.n	80053c2 <TIM_Base_SetConfig+0xaa>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a36      	ldr	r2, [pc, #216]	@ (8005460 <TIM_Base_SetConfig+0x148>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d01b      	beq.n	80053c2 <TIM_Base_SetConfig+0xaa>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a35      	ldr	r2, [pc, #212]	@ (8005464 <TIM_Base_SetConfig+0x14c>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d017      	beq.n	80053c2 <TIM_Base_SetConfig+0xaa>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a34      	ldr	r2, [pc, #208]	@ (8005468 <TIM_Base_SetConfig+0x150>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d013      	beq.n	80053c2 <TIM_Base_SetConfig+0xaa>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a33      	ldr	r2, [pc, #204]	@ (800546c <TIM_Base_SetConfig+0x154>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d00f      	beq.n	80053c2 <TIM_Base_SetConfig+0xaa>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a33      	ldr	r2, [pc, #204]	@ (8005474 <TIM_Base_SetConfig+0x15c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d00b      	beq.n	80053c2 <TIM_Base_SetConfig+0xaa>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a32      	ldr	r2, [pc, #200]	@ (8005478 <TIM_Base_SetConfig+0x160>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d007      	beq.n	80053c2 <TIM_Base_SetConfig+0xaa>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a31      	ldr	r2, [pc, #196]	@ (800547c <TIM_Base_SetConfig+0x164>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d003      	beq.n	80053c2 <TIM_Base_SetConfig+0xaa>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a2c      	ldr	r2, [pc, #176]	@ (8005470 <TIM_Base_SetConfig+0x158>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d108      	bne.n	80053d4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	4313      	orrs	r3, r2
 80053e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a18      	ldr	r2, [pc, #96]	@ (800545c <TIM_Base_SetConfig+0x144>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d013      	beq.n	8005428 <TIM_Base_SetConfig+0x110>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a1a      	ldr	r2, [pc, #104]	@ (800546c <TIM_Base_SetConfig+0x154>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d00f      	beq.n	8005428 <TIM_Base_SetConfig+0x110>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a1a      	ldr	r2, [pc, #104]	@ (8005474 <TIM_Base_SetConfig+0x15c>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d00b      	beq.n	8005428 <TIM_Base_SetConfig+0x110>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a19      	ldr	r2, [pc, #100]	@ (8005478 <TIM_Base_SetConfig+0x160>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d007      	beq.n	8005428 <TIM_Base_SetConfig+0x110>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a18      	ldr	r2, [pc, #96]	@ (800547c <TIM_Base_SetConfig+0x164>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d003      	beq.n	8005428 <TIM_Base_SetConfig+0x110>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a13      	ldr	r2, [pc, #76]	@ (8005470 <TIM_Base_SetConfig+0x158>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d103      	bne.n	8005430 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	691a      	ldr	r2, [r3, #16]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b01      	cmp	r3, #1
 8005440:	d105      	bne.n	800544e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	f023 0201 	bic.w	r2, r3, #1
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	611a      	str	r2, [r3, #16]
  }
}
 800544e:	bf00      	nop
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	40012c00 	.word	0x40012c00
 8005460:	40000400 	.word	0x40000400
 8005464:	40000800 	.word	0x40000800
 8005468:	40000c00 	.word	0x40000c00
 800546c:	40013400 	.word	0x40013400
 8005470:	40015000 	.word	0x40015000
 8005474:	40014000 	.word	0x40014000
 8005478:	40014400 	.word	0x40014400
 800547c:	40014800 	.word	0x40014800

08005480 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	f023 0201 	bic.w	r2, r3, #1
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f023 0303 	bic.w	r3, r3, #3
 80054ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f023 0302 	bic.w	r3, r3, #2
 80054cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a30      	ldr	r2, [pc, #192]	@ (800559c <TIM_OC1_SetConfig+0x11c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d013      	beq.n	8005508 <TIM_OC1_SetConfig+0x88>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a2f      	ldr	r2, [pc, #188]	@ (80055a0 <TIM_OC1_SetConfig+0x120>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d00f      	beq.n	8005508 <TIM_OC1_SetConfig+0x88>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a2e      	ldr	r2, [pc, #184]	@ (80055a4 <TIM_OC1_SetConfig+0x124>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d00b      	beq.n	8005508 <TIM_OC1_SetConfig+0x88>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a2d      	ldr	r2, [pc, #180]	@ (80055a8 <TIM_OC1_SetConfig+0x128>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d007      	beq.n	8005508 <TIM_OC1_SetConfig+0x88>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a2c      	ldr	r2, [pc, #176]	@ (80055ac <TIM_OC1_SetConfig+0x12c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d003      	beq.n	8005508 <TIM_OC1_SetConfig+0x88>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a2b      	ldr	r2, [pc, #172]	@ (80055b0 <TIM_OC1_SetConfig+0x130>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d10c      	bne.n	8005522 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f023 0308 	bic.w	r3, r3, #8
 800550e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	4313      	orrs	r3, r2
 8005518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f023 0304 	bic.w	r3, r3, #4
 8005520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a1d      	ldr	r2, [pc, #116]	@ (800559c <TIM_OC1_SetConfig+0x11c>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d013      	beq.n	8005552 <TIM_OC1_SetConfig+0xd2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a1c      	ldr	r2, [pc, #112]	@ (80055a0 <TIM_OC1_SetConfig+0x120>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d00f      	beq.n	8005552 <TIM_OC1_SetConfig+0xd2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a1b      	ldr	r2, [pc, #108]	@ (80055a4 <TIM_OC1_SetConfig+0x124>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d00b      	beq.n	8005552 <TIM_OC1_SetConfig+0xd2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a1a      	ldr	r2, [pc, #104]	@ (80055a8 <TIM_OC1_SetConfig+0x128>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d007      	beq.n	8005552 <TIM_OC1_SetConfig+0xd2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a19      	ldr	r2, [pc, #100]	@ (80055ac <TIM_OC1_SetConfig+0x12c>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d003      	beq.n	8005552 <TIM_OC1_SetConfig+0xd2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a18      	ldr	r2, [pc, #96]	@ (80055b0 <TIM_OC1_SetConfig+0x130>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d111      	bne.n	8005576 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	4313      	orrs	r3, r2
 800556a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	4313      	orrs	r3, r2
 8005574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	621a      	str	r2, [r3, #32]
}
 8005590:	bf00      	nop
 8005592:	371c      	adds	r7, #28
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	40012c00 	.word	0x40012c00
 80055a0:	40013400 	.word	0x40013400
 80055a4:	40014000 	.word	0x40014000
 80055a8:	40014400 	.word	0x40014400
 80055ac:	40014800 	.word	0x40014800
 80055b0:	40015000 	.word	0x40015000

080055b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b087      	sub	sp, #28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a1b      	ldr	r3, [r3, #32]
 80055c8:	f023 0210 	bic.w	r2, r3, #16
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	021b      	lsls	r3, r3, #8
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	f023 0320 	bic.w	r3, r3, #32
 8005602:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	4313      	orrs	r3, r2
 800560e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a2c      	ldr	r2, [pc, #176]	@ (80056c4 <TIM_OC2_SetConfig+0x110>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d007      	beq.n	8005628 <TIM_OC2_SetConfig+0x74>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a2b      	ldr	r2, [pc, #172]	@ (80056c8 <TIM_OC2_SetConfig+0x114>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d003      	beq.n	8005628 <TIM_OC2_SetConfig+0x74>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a2a      	ldr	r2, [pc, #168]	@ (80056cc <TIM_OC2_SetConfig+0x118>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d10d      	bne.n	8005644 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800562e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	4313      	orrs	r3, r2
 800563a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005642:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a1f      	ldr	r2, [pc, #124]	@ (80056c4 <TIM_OC2_SetConfig+0x110>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d013      	beq.n	8005674 <TIM_OC2_SetConfig+0xc0>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a1e      	ldr	r2, [pc, #120]	@ (80056c8 <TIM_OC2_SetConfig+0x114>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d00f      	beq.n	8005674 <TIM_OC2_SetConfig+0xc0>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a1e      	ldr	r2, [pc, #120]	@ (80056d0 <TIM_OC2_SetConfig+0x11c>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d00b      	beq.n	8005674 <TIM_OC2_SetConfig+0xc0>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a1d      	ldr	r2, [pc, #116]	@ (80056d4 <TIM_OC2_SetConfig+0x120>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d007      	beq.n	8005674 <TIM_OC2_SetConfig+0xc0>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a1c      	ldr	r2, [pc, #112]	@ (80056d8 <TIM_OC2_SetConfig+0x124>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d003      	beq.n	8005674 <TIM_OC2_SetConfig+0xc0>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a17      	ldr	r2, [pc, #92]	@ (80056cc <TIM_OC2_SetConfig+0x118>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d113      	bne.n	800569c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800567a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005682:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	4313      	orrs	r3, r2
 800568e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	4313      	orrs	r3, r2
 800569a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	621a      	str	r2, [r3, #32]
}
 80056b6:	bf00      	nop
 80056b8:	371c      	adds	r7, #28
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	40012c00 	.word	0x40012c00
 80056c8:	40013400 	.word	0x40013400
 80056cc:	40015000 	.word	0x40015000
 80056d0:	40014000 	.word	0x40014000
 80056d4:	40014400 	.word	0x40014400
 80056d8:	40014800 	.word	0x40014800

080056dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056dc:	b480      	push	{r7}
 80056de:	b087      	sub	sp, #28
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800570a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800570e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f023 0303 	bic.w	r3, r3, #3
 8005716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	4313      	orrs	r3, r2
 8005720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	021b      	lsls	r3, r3, #8
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	4313      	orrs	r3, r2
 8005734:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a2b      	ldr	r2, [pc, #172]	@ (80057e8 <TIM_OC3_SetConfig+0x10c>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d007      	beq.n	800574e <TIM_OC3_SetConfig+0x72>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a2a      	ldr	r2, [pc, #168]	@ (80057ec <TIM_OC3_SetConfig+0x110>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d003      	beq.n	800574e <TIM_OC3_SetConfig+0x72>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a29      	ldr	r2, [pc, #164]	@ (80057f0 <TIM_OC3_SetConfig+0x114>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d10d      	bne.n	800576a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005754:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	021b      	lsls	r3, r3, #8
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	4313      	orrs	r3, r2
 8005760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005768:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a1e      	ldr	r2, [pc, #120]	@ (80057e8 <TIM_OC3_SetConfig+0x10c>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d013      	beq.n	800579a <TIM_OC3_SetConfig+0xbe>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a1d      	ldr	r2, [pc, #116]	@ (80057ec <TIM_OC3_SetConfig+0x110>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d00f      	beq.n	800579a <TIM_OC3_SetConfig+0xbe>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a1d      	ldr	r2, [pc, #116]	@ (80057f4 <TIM_OC3_SetConfig+0x118>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d00b      	beq.n	800579a <TIM_OC3_SetConfig+0xbe>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a1c      	ldr	r2, [pc, #112]	@ (80057f8 <TIM_OC3_SetConfig+0x11c>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d007      	beq.n	800579a <TIM_OC3_SetConfig+0xbe>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a1b      	ldr	r2, [pc, #108]	@ (80057fc <TIM_OC3_SetConfig+0x120>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d003      	beq.n	800579a <TIM_OC3_SetConfig+0xbe>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a16      	ldr	r2, [pc, #88]	@ (80057f0 <TIM_OC3_SetConfig+0x114>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d113      	bne.n	80057c2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	011b      	lsls	r3, r3, #4
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	011b      	lsls	r3, r3, #4
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	4313      	orrs	r3, r2
 80057c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	621a      	str	r2, [r3, #32]
}
 80057dc:	bf00      	nop
 80057de:	371c      	adds	r7, #28
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr
 80057e8:	40012c00 	.word	0x40012c00
 80057ec:	40013400 	.word	0x40013400
 80057f0:	40015000 	.word	0x40015000
 80057f4:	40014000 	.word	0x40014000
 80057f8:	40014400 	.word	0x40014400
 80057fc:	40014800 	.word	0x40014800

08005800 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a1b      	ldr	r3, [r3, #32]
 8005814:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	69db      	ldr	r3, [r3, #28]
 8005826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800582e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800583a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	021b      	lsls	r3, r3, #8
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	4313      	orrs	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800584e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	031b      	lsls	r3, r3, #12
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	4313      	orrs	r3, r2
 800585a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a2c      	ldr	r2, [pc, #176]	@ (8005910 <TIM_OC4_SetConfig+0x110>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d007      	beq.n	8005874 <TIM_OC4_SetConfig+0x74>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a2b      	ldr	r2, [pc, #172]	@ (8005914 <TIM_OC4_SetConfig+0x114>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d003      	beq.n	8005874 <TIM_OC4_SetConfig+0x74>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a2a      	ldr	r2, [pc, #168]	@ (8005918 <TIM_OC4_SetConfig+0x118>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d10d      	bne.n	8005890 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800587a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	031b      	lsls	r3, r3, #12
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	4313      	orrs	r3, r2
 8005886:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800588e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a1f      	ldr	r2, [pc, #124]	@ (8005910 <TIM_OC4_SetConfig+0x110>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d013      	beq.n	80058c0 <TIM_OC4_SetConfig+0xc0>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a1e      	ldr	r2, [pc, #120]	@ (8005914 <TIM_OC4_SetConfig+0x114>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d00f      	beq.n	80058c0 <TIM_OC4_SetConfig+0xc0>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a1e      	ldr	r2, [pc, #120]	@ (800591c <TIM_OC4_SetConfig+0x11c>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d00b      	beq.n	80058c0 <TIM_OC4_SetConfig+0xc0>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a1d      	ldr	r2, [pc, #116]	@ (8005920 <TIM_OC4_SetConfig+0x120>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d007      	beq.n	80058c0 <TIM_OC4_SetConfig+0xc0>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a1c      	ldr	r2, [pc, #112]	@ (8005924 <TIM_OC4_SetConfig+0x124>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d003      	beq.n	80058c0 <TIM_OC4_SetConfig+0xc0>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a17      	ldr	r2, [pc, #92]	@ (8005918 <TIM_OC4_SetConfig+0x118>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d113      	bne.n	80058e8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058c6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80058ce:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	019b      	lsls	r3, r3, #6
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	4313      	orrs	r3, r2
 80058da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	019b      	lsls	r3, r3, #6
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	621a      	str	r2, [r3, #32]
}
 8005902:	bf00      	nop
 8005904:	371c      	adds	r7, #28
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	40012c00 	.word	0x40012c00
 8005914:	40013400 	.word	0x40013400
 8005918:	40015000 	.word	0x40015000
 800591c:	40014000 	.word	0x40014000
 8005920:	40014400 	.word	0x40014400
 8005924:	40014800 	.word	0x40014800

08005928 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800594e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800595a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800596c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	041b      	lsls	r3, r3, #16
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	4313      	orrs	r3, r2
 8005978:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a19      	ldr	r2, [pc, #100]	@ (80059e4 <TIM_OC5_SetConfig+0xbc>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d013      	beq.n	80059aa <TIM_OC5_SetConfig+0x82>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a18      	ldr	r2, [pc, #96]	@ (80059e8 <TIM_OC5_SetConfig+0xc0>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d00f      	beq.n	80059aa <TIM_OC5_SetConfig+0x82>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a17      	ldr	r2, [pc, #92]	@ (80059ec <TIM_OC5_SetConfig+0xc4>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d00b      	beq.n	80059aa <TIM_OC5_SetConfig+0x82>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a16      	ldr	r2, [pc, #88]	@ (80059f0 <TIM_OC5_SetConfig+0xc8>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d007      	beq.n	80059aa <TIM_OC5_SetConfig+0x82>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a15      	ldr	r2, [pc, #84]	@ (80059f4 <TIM_OC5_SetConfig+0xcc>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d003      	beq.n	80059aa <TIM_OC5_SetConfig+0x82>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a14      	ldr	r2, [pc, #80]	@ (80059f8 <TIM_OC5_SetConfig+0xd0>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d109      	bne.n	80059be <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	021b      	lsls	r3, r3, #8
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	621a      	str	r2, [r3, #32]
}
 80059d8:	bf00      	nop
 80059da:	371c      	adds	r7, #28
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr
 80059e4:	40012c00 	.word	0x40012c00
 80059e8:	40013400 	.word	0x40013400
 80059ec:	40014000 	.word	0x40014000
 80059f0:	40014400 	.word	0x40014400
 80059f4:	40014800 	.word	0x40014800
 80059f8:	40015000 	.word	0x40015000

080059fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b087      	sub	sp, #28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	021b      	lsls	r3, r3, #8
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	051b      	lsls	r3, r3, #20
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a1a      	ldr	r2, [pc, #104]	@ (8005abc <TIM_OC6_SetConfig+0xc0>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d013      	beq.n	8005a80 <TIM_OC6_SetConfig+0x84>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a19      	ldr	r2, [pc, #100]	@ (8005ac0 <TIM_OC6_SetConfig+0xc4>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d00f      	beq.n	8005a80 <TIM_OC6_SetConfig+0x84>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a18      	ldr	r2, [pc, #96]	@ (8005ac4 <TIM_OC6_SetConfig+0xc8>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d00b      	beq.n	8005a80 <TIM_OC6_SetConfig+0x84>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a17      	ldr	r2, [pc, #92]	@ (8005ac8 <TIM_OC6_SetConfig+0xcc>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d007      	beq.n	8005a80 <TIM_OC6_SetConfig+0x84>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a16      	ldr	r2, [pc, #88]	@ (8005acc <TIM_OC6_SetConfig+0xd0>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d003      	beq.n	8005a80 <TIM_OC6_SetConfig+0x84>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a15      	ldr	r2, [pc, #84]	@ (8005ad0 <TIM_OC6_SetConfig+0xd4>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d109      	bne.n	8005a94 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	029b      	lsls	r3, r3, #10
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	621a      	str	r2, [r3, #32]
}
 8005aae:	bf00      	nop
 8005ab0:	371c      	adds	r7, #28
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	40012c00 	.word	0x40012c00
 8005ac0:	40013400 	.word	0x40013400
 8005ac4:	40014000 	.word	0x40014000
 8005ac8:	40014400 	.word	0x40014400
 8005acc:	40014800 	.word	0x40014800
 8005ad0:	40015000 	.word	0x40015000

08005ad4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	f023 0201 	bic.w	r2, r3, #1
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005afe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f023 030a 	bic.w	r3, r3, #10
 8005b10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	621a      	str	r2, [r3, #32]
}
 8005b26:	bf00      	nop
 8005b28:	371c      	adds	r7, #28
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b087      	sub	sp, #28
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	60f8      	str	r0, [r7, #12]
 8005b3a:	60b9      	str	r1, [r7, #8]
 8005b3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	f023 0210 	bic.w	r2, r3, #16
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005b5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	031b      	lsls	r3, r3, #12
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005b6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	011b      	lsls	r3, r3, #4
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	621a      	str	r2, [r3, #32]
}
 8005b86:	bf00      	nop
 8005b88:	371c      	adds	r7, #28
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b085      	sub	sp, #20
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
 8005b9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005ba8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	f043 0307 	orr.w	r3, r3, #7
 8005bb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	609a      	str	r2, [r3, #8]
}
 8005bc0:	bf00      	nop
 8005bc2:	3714      	adds	r7, #20
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b087      	sub	sp, #28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
 8005bd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005be6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	021a      	lsls	r2, r3, #8
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	609a      	str	r2, [r3, #8]
}
 8005c00:	bf00      	nop
 8005c02:	371c      	adds	r7, #28
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b087      	sub	sp, #28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	f003 031f 	and.w	r3, r3, #31
 8005c1e:	2201      	movs	r2, #1
 8005c20:	fa02 f303 	lsl.w	r3, r2, r3
 8005c24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6a1a      	ldr	r2, [r3, #32]
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	43db      	mvns	r3, r3
 8005c2e:	401a      	ands	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6a1a      	ldr	r2, [r3, #32]
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f003 031f 	and.w	r3, r3, #31
 8005c3e:	6879      	ldr	r1, [r7, #4]
 8005c40:	fa01 f303 	lsl.w	r3, r1, r3
 8005c44:	431a      	orrs	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	621a      	str	r2, [r3, #32]
}
 8005c4a:	bf00      	nop
 8005c4c:	371c      	adds	r7, #28
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
	...

08005c58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d101      	bne.n	8005c70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	e074      	b.n	8005d5a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a34      	ldr	r2, [pc, #208]	@ (8005d68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d009      	beq.n	8005cae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a33      	ldr	r2, [pc, #204]	@ (8005d6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d004      	beq.n	8005cae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a31      	ldr	r2, [pc, #196]	@ (8005d70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d108      	bne.n	8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005cb4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005cc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a21      	ldr	r2, [pc, #132]	@ (8005d68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d022      	beq.n	8005d2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cf0:	d01d      	beq.n	8005d2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a1f      	ldr	r2, [pc, #124]	@ (8005d74 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d018      	beq.n	8005d2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a1d      	ldr	r2, [pc, #116]	@ (8005d78 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d013      	beq.n	8005d2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a1c      	ldr	r2, [pc, #112]	@ (8005d7c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d00e      	beq.n	8005d2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a15      	ldr	r2, [pc, #84]	@ (8005d6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d009      	beq.n	8005d2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a18      	ldr	r2, [pc, #96]	@ (8005d80 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d004      	beq.n	8005d2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a11      	ldr	r2, [pc, #68]	@ (8005d70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d10c      	bne.n	8005d48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	40012c00 	.word	0x40012c00
 8005d6c:	40013400 	.word	0x40013400
 8005d70:	40015000 	.word	0x40015000
 8005d74:	40000400 	.word	0x40000400
 8005d78:	40000800 	.word	0x40000800
 8005d7c:	40000c00 	.word	0x40000c00
 8005d80:	40014000 	.word	0x40014000

08005d84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e042      	b.n	8005ea8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d106      	bne.n	8005e3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7fb fe23 	bl	8001a80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2224      	movs	r2, #36	@ 0x24
 8005e3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f022 0201 	bic.w	r2, r2, #1
 8005e50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d002      	beq.n	8005e60 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f001 f806 	bl	8006e6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 fd07 	bl	8006874 <UART_SetConfig>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d101      	bne.n	8005e70 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e01b      	b.n	8005ea8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689a      	ldr	r2, [r3, #8]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f042 0201 	orr.w	r2, r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f001 f885 	bl	8006fb0 <UART_CheckIdleState>
 8005ea6:	4603      	mov	r3, r0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b08a      	sub	sp, #40	@ 0x28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ec4:	2b20      	cmp	r3, #32
 8005ec6:	d167      	bne.n	8005f98 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d002      	beq.n	8005ed4 <HAL_UART_Transmit_DMA+0x24>
 8005ece:	88fb      	ldrh	r3, [r7, #6]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d101      	bne.n	8005ed8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e060      	b.n	8005f9a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	88fa      	ldrh	r2, [r7, #6]
 8005ee2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	88fa      	ldrh	r2, [r7, #6]
 8005eea:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2221      	movs	r2, #33	@ 0x21
 8005efa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d028      	beq.n	8005f58 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f0a:	4a26      	ldr	r2, [pc, #152]	@ (8005fa4 <HAL_UART_Transmit_DMA+0xf4>)
 8005f0c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f12:	4a25      	ldr	r2, [pc, #148]	@ (8005fa8 <HAL_UART_Transmit_DMA+0xf8>)
 8005f14:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f1a:	4a24      	ldr	r2, [pc, #144]	@ (8005fac <HAL_UART_Transmit_DMA+0xfc>)
 8005f1c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f22:	2200      	movs	r2, #0
 8005f24:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f2e:	4619      	mov	r1, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	3328      	adds	r3, #40	@ 0x28
 8005f36:	461a      	mov	r2, r3
 8005f38:	88fb      	ldrh	r3, [r7, #6]
 8005f3a:	f7fc fee1 	bl	8002d00 <HAL_DMA_Start_IT>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d009      	beq.n	8005f58 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2210      	movs	r2, #16
 8005f48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2220      	movs	r2, #32
 8005f50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e020      	b.n	8005f9a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2240      	movs	r2, #64	@ 0x40
 8005f5e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	3308      	adds	r3, #8
 8005f66:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	e853 3f00 	ldrex	r3, [r3]
 8005f6e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f76:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	3308      	adds	r3, #8
 8005f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f80:	623a      	str	r2, [r7, #32]
 8005f82:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f84:	69f9      	ldr	r1, [r7, #28]
 8005f86:	6a3a      	ldr	r2, [r7, #32]
 8005f88:	e841 2300 	strex	r3, r2, [r1]
 8005f8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1e5      	bne.n	8005f60 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8005f94:	2300      	movs	r3, #0
 8005f96:	e000      	b.n	8005f9a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005f98:	2302      	movs	r3, #2
  }
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3728      	adds	r7, #40	@ 0x28
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	0800747b 	.word	0x0800747b
 8005fa8:	08007515 	.word	0x08007515
 8005fac:	0800769b 	.word	0x0800769b

08005fb0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b08a      	sub	sp, #40	@ 0x28
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fc4:	2b20      	cmp	r3, #32
 8005fc6:	d137      	bne.n	8006038 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d002      	beq.n	8005fd4 <HAL_UART_Receive_DMA+0x24>
 8005fce:	88fb      	ldrh	r3, [r7, #6]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d101      	bne.n	8005fd8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e030      	b.n	800603a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a18      	ldr	r2, [pc, #96]	@ (8006044 <HAL_UART_Receive_DMA+0x94>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d01f      	beq.n	8006028 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d018      	beq.n	8006028 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	e853 3f00 	ldrex	r3, [r3]
 8006002:	613b      	str	r3, [r7, #16]
   return(result);
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800600a:	627b      	str	r3, [r7, #36]	@ 0x24
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	461a      	mov	r2, r3
 8006012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006014:	623b      	str	r3, [r7, #32]
 8006016:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006018:	69f9      	ldr	r1, [r7, #28]
 800601a:	6a3a      	ldr	r2, [r7, #32]
 800601c:	e841 2300 	strex	r3, r2, [r1]
 8006020:	61bb      	str	r3, [r7, #24]
   return(result);
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1e6      	bne.n	8005ff6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006028:	88fb      	ldrh	r3, [r7, #6]
 800602a:	461a      	mov	r2, r3
 800602c:	68b9      	ldr	r1, [r7, #8]
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f001 f8d6 	bl	80071e0 <UART_Start_Receive_DMA>
 8006034:	4603      	mov	r3, r0
 8006036:	e000      	b.n	800603a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006038:	2302      	movs	r3, #2
  }
}
 800603a:	4618      	mov	r0, r3
 800603c:	3728      	adds	r7, #40	@ 0x28
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	40008000 	.word	0x40008000

08006048 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b090      	sub	sp, #64	@ 0x40
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006056:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800605e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800606a:	2b80      	cmp	r3, #128	@ 0x80
 800606c:	d139      	bne.n	80060e2 <HAL_UART_DMAStop+0x9a>
 800606e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006070:	2b21      	cmp	r3, #33	@ 0x21
 8006072:	d136      	bne.n	80060e2 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	3308      	adds	r3, #8
 800607a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	e853 3f00 	ldrex	r3, [r3]
 8006082:	61fb      	str	r3, [r7, #28]
   return(result);
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800608a:	637b      	str	r3, [r7, #52]	@ 0x34
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	3308      	adds	r3, #8
 8006092:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006094:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006096:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006098:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800609a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800609c:	e841 2300 	strex	r3, r2, [r1]
 80060a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1e5      	bne.n	8006074 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d015      	beq.n	80060dc <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7fc fe9e 	bl	8002df6 <HAL_DMA_Abort>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00d      	beq.n	80060dc <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7fd f805 	bl	80030d4 <HAL_DMA_GetError>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b20      	cmp	r3, #32
 80060ce:	d105      	bne.n	80060dc <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2210      	movs	r2, #16
 80060d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e047      	b.n	800616c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f001 f925 	bl	800732c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ec:	2b40      	cmp	r3, #64	@ 0x40
 80060ee:	d13c      	bne.n	800616a <HAL_UART_DMAStop+0x122>
 80060f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060f2:	2b22      	cmp	r3, #34	@ 0x22
 80060f4:	d139      	bne.n	800616a <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3308      	adds	r3, #8
 80060fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	e853 3f00 	ldrex	r3, [r3]
 8006104:	60bb      	str	r3, [r7, #8]
   return(result);
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800610c:	633b      	str	r3, [r7, #48]	@ 0x30
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	3308      	adds	r3, #8
 8006114:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006116:	61ba      	str	r2, [r7, #24]
 8006118:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611a:	6979      	ldr	r1, [r7, #20]
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	e841 2300 	strex	r3, r2, [r1]
 8006122:	613b      	str	r3, [r7, #16]
   return(result);
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d1e5      	bne.n	80060f6 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006130:	2b00      	cmp	r3, #0
 8006132:	d017      	beq.n	8006164 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800613a:	4618      	mov	r0, r3
 800613c:	f7fc fe5b 	bl	8002df6 <HAL_DMA_Abort>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00e      	beq.n	8006164 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800614c:	4618      	mov	r0, r3
 800614e:	f7fc ffc1 	bl	80030d4 <HAL_DMA_GetError>
 8006152:	4603      	mov	r3, r0
 8006154:	2b20      	cmp	r3, #32
 8006156:	d105      	bne.n	8006164 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2210      	movs	r2, #16
 800615c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	e003      	b.n	800616c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f001 f922 	bl	80073ae <UART_EndRxTransfer>
  }

  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3740      	adds	r7, #64	@ 0x40
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b0ba      	sub	sp, #232	@ 0xe8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800619a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800619e:	f640 030f 	movw	r3, #2063	@ 0x80f
 80061a2:	4013      	ands	r3, r2
 80061a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80061a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d11b      	bne.n	80061e8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80061b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061b4:	f003 0320 	and.w	r3, r3, #32
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d015      	beq.n	80061e8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80061bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061c0:	f003 0320 	and.w	r3, r3, #32
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d105      	bne.n	80061d4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80061c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d009      	beq.n	80061e8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 8300 	beq.w	80067de <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	4798      	blx	r3
      }
      return;
 80061e6:	e2fa      	b.n	80067de <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80061e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f000 8123 	beq.w	8006438 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80061f2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80061f6:	4b8d      	ldr	r3, [pc, #564]	@ (800642c <HAL_UART_IRQHandler+0x2b8>)
 80061f8:	4013      	ands	r3, r2
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d106      	bne.n	800620c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80061fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006202:	4b8b      	ldr	r3, [pc, #556]	@ (8006430 <HAL_UART_IRQHandler+0x2bc>)
 8006204:	4013      	ands	r3, r2
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 8116 	beq.w	8006438 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800620c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	2b00      	cmp	r3, #0
 8006216:	d011      	beq.n	800623c <HAL_UART_IRQHandler+0xc8>
 8006218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800621c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00b      	beq.n	800623c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2201      	movs	r2, #1
 800622a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006232:	f043 0201 	orr.w	r2, r3, #1
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800623c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006240:	f003 0302 	and.w	r3, r3, #2
 8006244:	2b00      	cmp	r3, #0
 8006246:	d011      	beq.n	800626c <HAL_UART_IRQHandler+0xf8>
 8006248:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00b      	beq.n	800626c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2202      	movs	r2, #2
 800625a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006262:	f043 0204 	orr.w	r2, r3, #4
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800626c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006270:	f003 0304 	and.w	r3, r3, #4
 8006274:	2b00      	cmp	r3, #0
 8006276:	d011      	beq.n	800629c <HAL_UART_IRQHandler+0x128>
 8006278:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00b      	beq.n	800629c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2204      	movs	r2, #4
 800628a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006292:	f043 0202 	orr.w	r2, r3, #2
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800629c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062a0:	f003 0308 	and.w	r3, r3, #8
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d017      	beq.n	80062d8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80062a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062ac:	f003 0320 	and.w	r3, r3, #32
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d105      	bne.n	80062c0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80062b4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80062b8:	4b5c      	ldr	r3, [pc, #368]	@ (800642c <HAL_UART_IRQHandler+0x2b8>)
 80062ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00b      	beq.n	80062d8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2208      	movs	r2, #8
 80062c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ce:	f043 0208 	orr.w	r2, r3, #8
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80062d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d012      	beq.n	800630a <HAL_UART_IRQHandler+0x196>
 80062e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00c      	beq.n	800630a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80062f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006300:	f043 0220 	orr.w	r2, r3, #32
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 8266 	beq.w	80067e2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800631a:	f003 0320 	and.w	r3, r3, #32
 800631e:	2b00      	cmp	r3, #0
 8006320:	d013      	beq.n	800634a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006326:	f003 0320 	and.w	r3, r3, #32
 800632a:	2b00      	cmp	r3, #0
 800632c:	d105      	bne.n	800633a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800632e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d007      	beq.n	800634a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006350:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800635e:	2b40      	cmp	r3, #64	@ 0x40
 8006360:	d005      	beq.n	800636e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006362:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006366:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800636a:	2b00      	cmp	r3, #0
 800636c:	d054      	beq.n	8006418 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f001 f81d 	bl	80073ae <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800637e:	2b40      	cmp	r3, #64	@ 0x40
 8006380:	d146      	bne.n	8006410 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	3308      	adds	r3, #8
 8006388:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006390:	e853 3f00 	ldrex	r3, [r3]
 8006394:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006398:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800639c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3308      	adds	r3, #8
 80063aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80063ae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80063b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80063ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80063be:	e841 2300 	strex	r3, r2, [r1]
 80063c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80063c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1d9      	bne.n	8006382 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d017      	beq.n	8006408 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063de:	4a15      	ldr	r2, [pc, #84]	@ (8006434 <HAL_UART_IRQHandler+0x2c0>)
 80063e0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7fc fd5d 	bl	8002ea8 <HAL_DMA_Abort_IT>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d019      	beq.n	8006428 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006402:	4610      	mov	r0, r2
 8006404:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006406:	e00f      	b.n	8006428 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 fa1d 	bl	8006848 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800640e:	e00b      	b.n	8006428 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fa19 	bl	8006848 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006416:	e007      	b.n	8006428 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 fa15 	bl	8006848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006426:	e1dc      	b.n	80067e2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006428:	bf00      	nop
    return;
 800642a:	e1da      	b.n	80067e2 <HAL_UART_IRQHandler+0x66e>
 800642c:	10000001 	.word	0x10000001
 8006430:	04000120 	.word	0x04000120
 8006434:	0800771b 	.word	0x0800771b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800643c:	2b01      	cmp	r3, #1
 800643e:	f040 8170 	bne.w	8006722 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006446:	f003 0310 	and.w	r3, r3, #16
 800644a:	2b00      	cmp	r3, #0
 800644c:	f000 8169 	beq.w	8006722 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006454:	f003 0310 	and.w	r3, r3, #16
 8006458:	2b00      	cmp	r3, #0
 800645a:	f000 8162 	beq.w	8006722 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2210      	movs	r2, #16
 8006464:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006470:	2b40      	cmp	r3, #64	@ 0x40
 8006472:	f040 80d8 	bne.w	8006626 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006484:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006488:	2b00      	cmp	r3, #0
 800648a:	f000 80af 	beq.w	80065ec <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006494:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006498:	429a      	cmp	r2, r3
 800649a:	f080 80a7 	bcs.w	80065ec <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0320 	and.w	r3, r3, #32
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	f040 8087 	bne.w	80065ca <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80064c8:	e853 3f00 	ldrex	r3, [r3]
 80064cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80064d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80064d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	461a      	mov	r2, r3
 80064e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80064e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80064ea:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80064f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80064f6:	e841 2300 	strex	r3, r2, [r1]
 80064fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80064fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1da      	bne.n	80064bc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	3308      	adds	r3, #8
 800650c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006510:	e853 3f00 	ldrex	r3, [r3]
 8006514:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006516:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006518:	f023 0301 	bic.w	r3, r3, #1
 800651c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	3308      	adds	r3, #8
 8006526:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800652a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800652e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006530:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006532:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006536:	e841 2300 	strex	r3, r2, [r1]
 800653a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800653c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1e1      	bne.n	8006506 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	3308      	adds	r3, #8
 8006548:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800654c:	e853 3f00 	ldrex	r3, [r3]
 8006550:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006552:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006554:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006558:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	3308      	adds	r3, #8
 8006562:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006566:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006568:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800656c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800656e:	e841 2300 	strex	r3, r2, [r1]
 8006572:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006574:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1e3      	bne.n	8006542 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2220      	movs	r2, #32
 800657e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006590:	e853 3f00 	ldrex	r3, [r3]
 8006594:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006596:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006598:	f023 0310 	bic.w	r3, r3, #16
 800659c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	461a      	mov	r2, r3
 80065a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80065aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065ac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80065b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065b2:	e841 2300 	strex	r3, r2, [r1]
 80065b6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80065b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1e4      	bne.n	8006588 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7fc fc16 	bl	8002df6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2202      	movs	r2, #2
 80065ce:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80065dc:	b29b      	uxth	r3, r3
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	4619      	mov	r1, r3
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 f939 	bl	800685c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80065ea:	e0fc      	b.n	80067e6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80065f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065f6:	429a      	cmp	r2, r3
 80065f8:	f040 80f5 	bne.w	80067e6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0320 	and.w	r3, r3, #32
 800660a:	2b20      	cmp	r3, #32
 800660c:	f040 80eb 	bne.w	80067e6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2202      	movs	r2, #2
 8006614:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800661c:	4619      	mov	r1, r3
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f91c 	bl	800685c <HAL_UARTEx_RxEventCallback>
      return;
 8006624:	e0df      	b.n	80067e6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006632:	b29b      	uxth	r3, r3
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006640:	b29b      	uxth	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 80d1 	beq.w	80067ea <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006648:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 80cc 	beq.w	80067ea <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800665a:	e853 3f00 	ldrex	r3, [r3]
 800665e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006662:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006666:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	461a      	mov	r2, r3
 8006670:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006674:	647b      	str	r3, [r7, #68]	@ 0x44
 8006676:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006678:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800667a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800667c:	e841 2300 	strex	r3, r2, [r1]
 8006680:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1e4      	bne.n	8006652 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	3308      	adds	r3, #8
 800668e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006692:	e853 3f00 	ldrex	r3, [r3]
 8006696:	623b      	str	r3, [r7, #32]
   return(result);
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800669e:	f023 0301 	bic.w	r3, r3, #1
 80066a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	3308      	adds	r3, #8
 80066ac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80066b0:	633a      	str	r2, [r7, #48]	@ 0x30
 80066b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066b8:	e841 2300 	strex	r3, r2, [r1]
 80066bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1e1      	bne.n	8006688 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2220      	movs	r2, #32
 80066c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	e853 3f00 	ldrex	r3, [r3]
 80066e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f023 0310 	bic.w	r3, r3, #16
 80066ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	461a      	mov	r2, r3
 80066f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80066fa:	61fb      	str	r3, [r7, #28]
 80066fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fe:	69b9      	ldr	r1, [r7, #24]
 8006700:	69fa      	ldr	r2, [r7, #28]
 8006702:	e841 2300 	strex	r3, r2, [r1]
 8006706:	617b      	str	r3, [r7, #20]
   return(result);
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1e4      	bne.n	80066d8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2202      	movs	r2, #2
 8006712:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006714:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006718:	4619      	mov	r1, r3
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 f89e 	bl	800685c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006720:	e063      	b.n	80067ea <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006726:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00e      	beq.n	800674c <HAL_UART_IRQHandler+0x5d8>
 800672e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006732:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d008      	beq.n	800674c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006742:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f001 f825 	bl	8007794 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800674a:	e051      	b.n	80067f0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800674c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006750:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006754:	2b00      	cmp	r3, #0
 8006756:	d014      	beq.n	8006782 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800675c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006760:	2b00      	cmp	r3, #0
 8006762:	d105      	bne.n	8006770 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006764:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006768:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d008      	beq.n	8006782 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006774:	2b00      	cmp	r3, #0
 8006776:	d03a      	beq.n	80067ee <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	4798      	blx	r3
    }
    return;
 8006780:	e035      	b.n	80067ee <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800678a:	2b00      	cmp	r3, #0
 800678c:	d009      	beq.n	80067a2 <HAL_UART_IRQHandler+0x62e>
 800678e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006796:	2b00      	cmp	r3, #0
 8006798:	d003      	beq.n	80067a2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 ffcf 	bl	800773e <UART_EndTransmit_IT>
    return;
 80067a0:	e026      	b.n	80067f0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80067a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d009      	beq.n	80067c2 <HAL_UART_IRQHandler+0x64e>
 80067ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067b2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fffe 	bl	80077bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067c0:	e016      	b.n	80067f0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80067c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d010      	beq.n	80067f0 <HAL_UART_IRQHandler+0x67c>
 80067ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	da0c      	bge.n	80067f0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 ffe6 	bl	80077a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067dc:	e008      	b.n	80067f0 <HAL_UART_IRQHandler+0x67c>
      return;
 80067de:	bf00      	nop
 80067e0:	e006      	b.n	80067f0 <HAL_UART_IRQHandler+0x67c>
    return;
 80067e2:	bf00      	nop
 80067e4:	e004      	b.n	80067f0 <HAL_UART_IRQHandler+0x67c>
      return;
 80067e6:	bf00      	nop
 80067e8:	e002      	b.n	80067f0 <HAL_UART_IRQHandler+0x67c>
      return;
 80067ea:	bf00      	nop
 80067ec:	e000      	b.n	80067f0 <HAL_UART_IRQHandler+0x67c>
    return;
 80067ee:	bf00      	nop
  }
}
 80067f0:	37e8      	adds	r7, #232	@ 0xe8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop

080067f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	460b      	mov	r3, r1
 8006866:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006878:	b08c      	sub	sp, #48	@ 0x30
 800687a:	af00      	add	r7, sp, #0
 800687c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800687e:	2300      	movs	r3, #0
 8006880:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	689a      	ldr	r2, [r3, #8]
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	431a      	orrs	r2, r3
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	431a      	orrs	r2, r3
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	69db      	ldr	r3, [r3, #28]
 8006898:	4313      	orrs	r3, r2
 800689a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	4baa      	ldr	r3, [pc, #680]	@ (8006b4c <UART_SetConfig+0x2d8>)
 80068a4:	4013      	ands	r3, r2
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	6812      	ldr	r2, [r2, #0]
 80068aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068ac:	430b      	orrs	r3, r1
 80068ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	68da      	ldr	r2, [r3, #12]
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	430a      	orrs	r2, r1
 80068c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a9f      	ldr	r2, [pc, #636]	@ (8006b50 <UART_SetConfig+0x2dc>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d004      	beq.n	80068e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068dc:	4313      	orrs	r3, r2
 80068de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80068ea:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	6812      	ldr	r2, [r2, #0]
 80068f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068f4:	430b      	orrs	r3, r1
 80068f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068fe:	f023 010f 	bic.w	r1, r3, #15
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	430a      	orrs	r2, r1
 800690c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a90      	ldr	r2, [pc, #576]	@ (8006b54 <UART_SetConfig+0x2e0>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d125      	bne.n	8006964 <UART_SetConfig+0xf0>
 8006918:	4b8f      	ldr	r3, [pc, #572]	@ (8006b58 <UART_SetConfig+0x2e4>)
 800691a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800691e:	f003 0303 	and.w	r3, r3, #3
 8006922:	2b03      	cmp	r3, #3
 8006924:	d81a      	bhi.n	800695c <UART_SetConfig+0xe8>
 8006926:	a201      	add	r2, pc, #4	@ (adr r2, 800692c <UART_SetConfig+0xb8>)
 8006928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692c:	0800693d 	.word	0x0800693d
 8006930:	0800694d 	.word	0x0800694d
 8006934:	08006945 	.word	0x08006945
 8006938:	08006955 	.word	0x08006955
 800693c:	2301      	movs	r3, #1
 800693e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006942:	e116      	b.n	8006b72 <UART_SetConfig+0x2fe>
 8006944:	2302      	movs	r3, #2
 8006946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800694a:	e112      	b.n	8006b72 <UART_SetConfig+0x2fe>
 800694c:	2304      	movs	r3, #4
 800694e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006952:	e10e      	b.n	8006b72 <UART_SetConfig+0x2fe>
 8006954:	2308      	movs	r3, #8
 8006956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800695a:	e10a      	b.n	8006b72 <UART_SetConfig+0x2fe>
 800695c:	2310      	movs	r3, #16
 800695e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006962:	e106      	b.n	8006b72 <UART_SetConfig+0x2fe>
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a7c      	ldr	r2, [pc, #496]	@ (8006b5c <UART_SetConfig+0x2e8>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d138      	bne.n	80069e0 <UART_SetConfig+0x16c>
 800696e:	4b7a      	ldr	r3, [pc, #488]	@ (8006b58 <UART_SetConfig+0x2e4>)
 8006970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006974:	f003 030c 	and.w	r3, r3, #12
 8006978:	2b0c      	cmp	r3, #12
 800697a:	d82d      	bhi.n	80069d8 <UART_SetConfig+0x164>
 800697c:	a201      	add	r2, pc, #4	@ (adr r2, 8006984 <UART_SetConfig+0x110>)
 800697e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006982:	bf00      	nop
 8006984:	080069b9 	.word	0x080069b9
 8006988:	080069d9 	.word	0x080069d9
 800698c:	080069d9 	.word	0x080069d9
 8006990:	080069d9 	.word	0x080069d9
 8006994:	080069c9 	.word	0x080069c9
 8006998:	080069d9 	.word	0x080069d9
 800699c:	080069d9 	.word	0x080069d9
 80069a0:	080069d9 	.word	0x080069d9
 80069a4:	080069c1 	.word	0x080069c1
 80069a8:	080069d9 	.word	0x080069d9
 80069ac:	080069d9 	.word	0x080069d9
 80069b0:	080069d9 	.word	0x080069d9
 80069b4:	080069d1 	.word	0x080069d1
 80069b8:	2300      	movs	r3, #0
 80069ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069be:	e0d8      	b.n	8006b72 <UART_SetConfig+0x2fe>
 80069c0:	2302      	movs	r3, #2
 80069c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069c6:	e0d4      	b.n	8006b72 <UART_SetConfig+0x2fe>
 80069c8:	2304      	movs	r3, #4
 80069ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ce:	e0d0      	b.n	8006b72 <UART_SetConfig+0x2fe>
 80069d0:	2308      	movs	r3, #8
 80069d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069d6:	e0cc      	b.n	8006b72 <UART_SetConfig+0x2fe>
 80069d8:	2310      	movs	r3, #16
 80069da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069de:	e0c8      	b.n	8006b72 <UART_SetConfig+0x2fe>
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a5e      	ldr	r2, [pc, #376]	@ (8006b60 <UART_SetConfig+0x2ec>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d125      	bne.n	8006a36 <UART_SetConfig+0x1c2>
 80069ea:	4b5b      	ldr	r3, [pc, #364]	@ (8006b58 <UART_SetConfig+0x2e4>)
 80069ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069f0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80069f4:	2b30      	cmp	r3, #48	@ 0x30
 80069f6:	d016      	beq.n	8006a26 <UART_SetConfig+0x1b2>
 80069f8:	2b30      	cmp	r3, #48	@ 0x30
 80069fa:	d818      	bhi.n	8006a2e <UART_SetConfig+0x1ba>
 80069fc:	2b20      	cmp	r3, #32
 80069fe:	d00a      	beq.n	8006a16 <UART_SetConfig+0x1a2>
 8006a00:	2b20      	cmp	r3, #32
 8006a02:	d814      	bhi.n	8006a2e <UART_SetConfig+0x1ba>
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d002      	beq.n	8006a0e <UART_SetConfig+0x19a>
 8006a08:	2b10      	cmp	r3, #16
 8006a0a:	d008      	beq.n	8006a1e <UART_SetConfig+0x1aa>
 8006a0c:	e00f      	b.n	8006a2e <UART_SetConfig+0x1ba>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a14:	e0ad      	b.n	8006b72 <UART_SetConfig+0x2fe>
 8006a16:	2302      	movs	r3, #2
 8006a18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a1c:	e0a9      	b.n	8006b72 <UART_SetConfig+0x2fe>
 8006a1e:	2304      	movs	r3, #4
 8006a20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a24:	e0a5      	b.n	8006b72 <UART_SetConfig+0x2fe>
 8006a26:	2308      	movs	r3, #8
 8006a28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a2c:	e0a1      	b.n	8006b72 <UART_SetConfig+0x2fe>
 8006a2e:	2310      	movs	r3, #16
 8006a30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a34:	e09d      	b.n	8006b72 <UART_SetConfig+0x2fe>
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a4a      	ldr	r2, [pc, #296]	@ (8006b64 <UART_SetConfig+0x2f0>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d125      	bne.n	8006a8c <UART_SetConfig+0x218>
 8006a40:	4b45      	ldr	r3, [pc, #276]	@ (8006b58 <UART_SetConfig+0x2e4>)
 8006a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a46:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006a4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a4c:	d016      	beq.n	8006a7c <UART_SetConfig+0x208>
 8006a4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a50:	d818      	bhi.n	8006a84 <UART_SetConfig+0x210>
 8006a52:	2b80      	cmp	r3, #128	@ 0x80
 8006a54:	d00a      	beq.n	8006a6c <UART_SetConfig+0x1f8>
 8006a56:	2b80      	cmp	r3, #128	@ 0x80
 8006a58:	d814      	bhi.n	8006a84 <UART_SetConfig+0x210>
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d002      	beq.n	8006a64 <UART_SetConfig+0x1f0>
 8006a5e:	2b40      	cmp	r3, #64	@ 0x40
 8006a60:	d008      	beq.n	8006a74 <UART_SetConfig+0x200>
 8006a62:	e00f      	b.n	8006a84 <UART_SetConfig+0x210>
 8006a64:	2300      	movs	r3, #0
 8006a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a6a:	e082      	b.n	8006b72 <UART_SetConfig+0x2fe>
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a72:	e07e      	b.n	8006b72 <UART_SetConfig+0x2fe>
 8006a74:	2304      	movs	r3, #4
 8006a76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a7a:	e07a      	b.n	8006b72 <UART_SetConfig+0x2fe>
 8006a7c:	2308      	movs	r3, #8
 8006a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a82:	e076      	b.n	8006b72 <UART_SetConfig+0x2fe>
 8006a84:	2310      	movs	r3, #16
 8006a86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a8a:	e072      	b.n	8006b72 <UART_SetConfig+0x2fe>
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a35      	ldr	r2, [pc, #212]	@ (8006b68 <UART_SetConfig+0x2f4>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d12a      	bne.n	8006aec <UART_SetConfig+0x278>
 8006a96:	4b30      	ldr	r3, [pc, #192]	@ (8006b58 <UART_SetConfig+0x2e4>)
 8006a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006aa0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006aa4:	d01a      	beq.n	8006adc <UART_SetConfig+0x268>
 8006aa6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006aaa:	d81b      	bhi.n	8006ae4 <UART_SetConfig+0x270>
 8006aac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ab0:	d00c      	beq.n	8006acc <UART_SetConfig+0x258>
 8006ab2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ab6:	d815      	bhi.n	8006ae4 <UART_SetConfig+0x270>
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d003      	beq.n	8006ac4 <UART_SetConfig+0x250>
 8006abc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ac0:	d008      	beq.n	8006ad4 <UART_SetConfig+0x260>
 8006ac2:	e00f      	b.n	8006ae4 <UART_SetConfig+0x270>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aca:	e052      	b.n	8006b72 <UART_SetConfig+0x2fe>
 8006acc:	2302      	movs	r3, #2
 8006ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ad2:	e04e      	b.n	8006b72 <UART_SetConfig+0x2fe>
 8006ad4:	2304      	movs	r3, #4
 8006ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ada:	e04a      	b.n	8006b72 <UART_SetConfig+0x2fe>
 8006adc:	2308      	movs	r3, #8
 8006ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ae2:	e046      	b.n	8006b72 <UART_SetConfig+0x2fe>
 8006ae4:	2310      	movs	r3, #16
 8006ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aea:	e042      	b.n	8006b72 <UART_SetConfig+0x2fe>
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a17      	ldr	r2, [pc, #92]	@ (8006b50 <UART_SetConfig+0x2dc>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d13a      	bne.n	8006b6c <UART_SetConfig+0x2f8>
 8006af6:	4b18      	ldr	r3, [pc, #96]	@ (8006b58 <UART_SetConfig+0x2e4>)
 8006af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006afc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006b00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b04:	d01a      	beq.n	8006b3c <UART_SetConfig+0x2c8>
 8006b06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b0a:	d81b      	bhi.n	8006b44 <UART_SetConfig+0x2d0>
 8006b0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b10:	d00c      	beq.n	8006b2c <UART_SetConfig+0x2b8>
 8006b12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b16:	d815      	bhi.n	8006b44 <UART_SetConfig+0x2d0>
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <UART_SetConfig+0x2b0>
 8006b1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b20:	d008      	beq.n	8006b34 <UART_SetConfig+0x2c0>
 8006b22:	e00f      	b.n	8006b44 <UART_SetConfig+0x2d0>
 8006b24:	2300      	movs	r3, #0
 8006b26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b2a:	e022      	b.n	8006b72 <UART_SetConfig+0x2fe>
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b32:	e01e      	b.n	8006b72 <UART_SetConfig+0x2fe>
 8006b34:	2304      	movs	r3, #4
 8006b36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b3a:	e01a      	b.n	8006b72 <UART_SetConfig+0x2fe>
 8006b3c:	2308      	movs	r3, #8
 8006b3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b42:	e016      	b.n	8006b72 <UART_SetConfig+0x2fe>
 8006b44:	2310      	movs	r3, #16
 8006b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b4a:	e012      	b.n	8006b72 <UART_SetConfig+0x2fe>
 8006b4c:	cfff69f3 	.word	0xcfff69f3
 8006b50:	40008000 	.word	0x40008000
 8006b54:	40013800 	.word	0x40013800
 8006b58:	40021000 	.word	0x40021000
 8006b5c:	40004400 	.word	0x40004400
 8006b60:	40004800 	.word	0x40004800
 8006b64:	40004c00 	.word	0x40004c00
 8006b68:	40005000 	.word	0x40005000
 8006b6c:	2310      	movs	r3, #16
 8006b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4aae      	ldr	r2, [pc, #696]	@ (8006e30 <UART_SetConfig+0x5bc>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	f040 8097 	bne.w	8006cac <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b7e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006b82:	2b08      	cmp	r3, #8
 8006b84:	d823      	bhi.n	8006bce <UART_SetConfig+0x35a>
 8006b86:	a201      	add	r2, pc, #4	@ (adr r2, 8006b8c <UART_SetConfig+0x318>)
 8006b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b8c:	08006bb1 	.word	0x08006bb1
 8006b90:	08006bcf 	.word	0x08006bcf
 8006b94:	08006bb9 	.word	0x08006bb9
 8006b98:	08006bcf 	.word	0x08006bcf
 8006b9c:	08006bbf 	.word	0x08006bbf
 8006ba0:	08006bcf 	.word	0x08006bcf
 8006ba4:	08006bcf 	.word	0x08006bcf
 8006ba8:	08006bcf 	.word	0x08006bcf
 8006bac:	08006bc7 	.word	0x08006bc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bb0:	f7fd fa6a 	bl	8004088 <HAL_RCC_GetPCLK1Freq>
 8006bb4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006bb6:	e010      	b.n	8006bda <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bb8:	4b9e      	ldr	r3, [pc, #632]	@ (8006e34 <UART_SetConfig+0x5c0>)
 8006bba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006bbc:	e00d      	b.n	8006bda <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bbe:	f7fd f9f5 	bl	8003fac <HAL_RCC_GetSysClockFreq>
 8006bc2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006bc4:	e009      	b.n	8006bda <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006bcc:	e005      	b.n	8006bda <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006bd8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f000 8130 	beq.w	8006e42 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be6:	4a94      	ldr	r2, [pc, #592]	@ (8006e38 <UART_SetConfig+0x5c4>)
 8006be8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bec:	461a      	mov	r2, r3
 8006bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bf4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	685a      	ldr	r2, [r3, #4]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	005b      	lsls	r3, r3, #1
 8006bfe:	4413      	add	r3, r2
 8006c00:	69ba      	ldr	r2, [r7, #24]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d305      	bcc.n	8006c12 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c0c:	69ba      	ldr	r2, [r7, #24]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d903      	bls.n	8006c1a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006c18:	e113      	b.n	8006e42 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	60bb      	str	r3, [r7, #8]
 8006c20:	60fa      	str	r2, [r7, #12]
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c26:	4a84      	ldr	r2, [pc, #528]	@ (8006e38 <UART_SetConfig+0x5c4>)
 8006c28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	2200      	movs	r2, #0
 8006c30:	603b      	str	r3, [r7, #0]
 8006c32:	607a      	str	r2, [r7, #4]
 8006c34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c3c:	f7f9 ff96 	bl	8000b6c <__aeabi_uldivmod>
 8006c40:	4602      	mov	r2, r0
 8006c42:	460b      	mov	r3, r1
 8006c44:	4610      	mov	r0, r2
 8006c46:	4619      	mov	r1, r3
 8006c48:	f04f 0200 	mov.w	r2, #0
 8006c4c:	f04f 0300 	mov.w	r3, #0
 8006c50:	020b      	lsls	r3, r1, #8
 8006c52:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006c56:	0202      	lsls	r2, r0, #8
 8006c58:	6979      	ldr	r1, [r7, #20]
 8006c5a:	6849      	ldr	r1, [r1, #4]
 8006c5c:	0849      	lsrs	r1, r1, #1
 8006c5e:	2000      	movs	r0, #0
 8006c60:	460c      	mov	r4, r1
 8006c62:	4605      	mov	r5, r0
 8006c64:	eb12 0804 	adds.w	r8, r2, r4
 8006c68:	eb43 0905 	adc.w	r9, r3, r5
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	469a      	mov	sl, r3
 8006c74:	4693      	mov	fp, r2
 8006c76:	4652      	mov	r2, sl
 8006c78:	465b      	mov	r3, fp
 8006c7a:	4640      	mov	r0, r8
 8006c7c:	4649      	mov	r1, r9
 8006c7e:	f7f9 ff75 	bl	8000b6c <__aeabi_uldivmod>
 8006c82:	4602      	mov	r2, r0
 8006c84:	460b      	mov	r3, r1
 8006c86:	4613      	mov	r3, r2
 8006c88:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c90:	d308      	bcc.n	8006ca4 <UART_SetConfig+0x430>
 8006c92:	6a3b      	ldr	r3, [r7, #32]
 8006c94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c98:	d204      	bcs.n	8006ca4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	6a3a      	ldr	r2, [r7, #32]
 8006ca0:	60da      	str	r2, [r3, #12]
 8006ca2:	e0ce      	b.n	8006e42 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006caa:	e0ca      	b.n	8006e42 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	69db      	ldr	r3, [r3, #28]
 8006cb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cb4:	d166      	bne.n	8006d84 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006cb6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006cba:	2b08      	cmp	r3, #8
 8006cbc:	d827      	bhi.n	8006d0e <UART_SetConfig+0x49a>
 8006cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc4 <UART_SetConfig+0x450>)
 8006cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc4:	08006ce9 	.word	0x08006ce9
 8006cc8:	08006cf1 	.word	0x08006cf1
 8006ccc:	08006cf9 	.word	0x08006cf9
 8006cd0:	08006d0f 	.word	0x08006d0f
 8006cd4:	08006cff 	.word	0x08006cff
 8006cd8:	08006d0f 	.word	0x08006d0f
 8006cdc:	08006d0f 	.word	0x08006d0f
 8006ce0:	08006d0f 	.word	0x08006d0f
 8006ce4:	08006d07 	.word	0x08006d07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ce8:	f7fd f9ce 	bl	8004088 <HAL_RCC_GetPCLK1Freq>
 8006cec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cee:	e014      	b.n	8006d1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cf0:	f7fd f9e0 	bl	80040b4 <HAL_RCC_GetPCLK2Freq>
 8006cf4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006cf6:	e010      	b.n	8006d1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cf8:	4b4e      	ldr	r3, [pc, #312]	@ (8006e34 <UART_SetConfig+0x5c0>)
 8006cfa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006cfc:	e00d      	b.n	8006d1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cfe:	f7fd f955 	bl	8003fac <HAL_RCC_GetSysClockFreq>
 8006d02:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d04:	e009      	b.n	8006d1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d0c:	e005      	b.n	8006d1a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 8090 	beq.w	8006e42 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d26:	4a44      	ldr	r2, [pc, #272]	@ (8006e38 <UART_SetConfig+0x5c4>)
 8006d28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d30:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d34:	005a      	lsls	r2, r3, #1
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	085b      	lsrs	r3, r3, #1
 8006d3c:	441a      	add	r2, r3
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d48:	6a3b      	ldr	r3, [r7, #32]
 8006d4a:	2b0f      	cmp	r3, #15
 8006d4c:	d916      	bls.n	8006d7c <UART_SetConfig+0x508>
 8006d4e:	6a3b      	ldr	r3, [r7, #32]
 8006d50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d54:	d212      	bcs.n	8006d7c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d56:	6a3b      	ldr	r3, [r7, #32]
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	f023 030f 	bic.w	r3, r3, #15
 8006d5e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	085b      	lsrs	r3, r3, #1
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	f003 0307 	and.w	r3, r3, #7
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	8bfb      	ldrh	r3, [r7, #30]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	8bfa      	ldrh	r2, [r7, #30]
 8006d78:	60da      	str	r2, [r3, #12]
 8006d7a:	e062      	b.n	8006e42 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d82:	e05e      	b.n	8006e42 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d84:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d88:	2b08      	cmp	r3, #8
 8006d8a:	d828      	bhi.n	8006dde <UART_SetConfig+0x56a>
 8006d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8006d94 <UART_SetConfig+0x520>)
 8006d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d92:	bf00      	nop
 8006d94:	08006db9 	.word	0x08006db9
 8006d98:	08006dc1 	.word	0x08006dc1
 8006d9c:	08006dc9 	.word	0x08006dc9
 8006da0:	08006ddf 	.word	0x08006ddf
 8006da4:	08006dcf 	.word	0x08006dcf
 8006da8:	08006ddf 	.word	0x08006ddf
 8006dac:	08006ddf 	.word	0x08006ddf
 8006db0:	08006ddf 	.word	0x08006ddf
 8006db4:	08006dd7 	.word	0x08006dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006db8:	f7fd f966 	bl	8004088 <HAL_RCC_GetPCLK1Freq>
 8006dbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dbe:	e014      	b.n	8006dea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dc0:	f7fd f978 	bl	80040b4 <HAL_RCC_GetPCLK2Freq>
 8006dc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dc6:	e010      	b.n	8006dea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8006e34 <UART_SetConfig+0x5c0>)
 8006dca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006dcc:	e00d      	b.n	8006dea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dce:	f7fd f8ed 	bl	8003fac <HAL_RCC_GetSysClockFreq>
 8006dd2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006dd4:	e009      	b.n	8006dea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006dda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ddc:	e005      	b.n	8006dea <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006de8:	bf00      	nop
    }

    if (pclk != 0U)
 8006dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d028      	beq.n	8006e42 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df4:	4a10      	ldr	r2, [pc, #64]	@ (8006e38 <UART_SetConfig+0x5c4>)
 8006df6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfe:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	085b      	lsrs	r3, r3, #1
 8006e08:	441a      	add	r2, r3
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	2b0f      	cmp	r3, #15
 8006e18:	d910      	bls.n	8006e3c <UART_SetConfig+0x5c8>
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e20:	d20c      	bcs.n	8006e3c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e22:	6a3b      	ldr	r3, [r7, #32]
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	60da      	str	r2, [r3, #12]
 8006e2c:	e009      	b.n	8006e42 <UART_SetConfig+0x5ce>
 8006e2e:	bf00      	nop
 8006e30:	40008000 	.word	0x40008000
 8006e34:	00f42400 	.word	0x00f42400
 8006e38:	08018a8c 	.word	0x08018a8c
      }
      else
      {
        ret = HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	2200      	movs	r2, #0
 8006e56:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006e5e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3730      	adds	r7, #48	@ 0x30
 8006e66:	46bd      	mov	sp, r7
 8006e68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006e6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e78:	f003 0308 	and.w	r3, r3, #8
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00a      	beq.n	8006e96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	430a      	orrs	r2, r1
 8006e94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e9a:	f003 0301 	and.w	r3, r3, #1
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00a      	beq.n	8006eb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	430a      	orrs	r2, r1
 8006eb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ebc:	f003 0302 	and.w	r3, r3, #2
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00a      	beq.n	8006eda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ede:	f003 0304 	and.w	r3, r3, #4
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00a      	beq.n	8006efc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f00:	f003 0310 	and.w	r3, r3, #16
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00a      	beq.n	8006f1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	430a      	orrs	r2, r1
 8006f1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f22:	f003 0320 	and.w	r3, r3, #32
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00a      	beq.n	8006f40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d01a      	beq.n	8006f82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	430a      	orrs	r2, r1
 8006f60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f6a:	d10a      	bne.n	8006f82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00a      	beq.n	8006fa4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	430a      	orrs	r2, r1
 8006fa2:	605a      	str	r2, [r3, #4]
  }
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b098      	sub	sp, #96	@ 0x60
 8006fb4:	af02      	add	r7, sp, #8
 8006fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fc0:	f7fb fd0a 	bl	80029d8 <HAL_GetTick>
 8006fc4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0308 	and.w	r3, r3, #8
 8006fd0:	2b08      	cmp	r3, #8
 8006fd2:	d12f      	bne.n	8007034 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fd4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f88e 	bl	8007104 <UART_WaitOnFlagUntilTimeout>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d022      	beq.n	8007034 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff6:	e853 3f00 	ldrex	r3, [r3]
 8006ffa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ffe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007002:	653b      	str	r3, [r7, #80]	@ 0x50
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	461a      	mov	r2, r3
 800700a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800700c:	647b      	str	r3, [r7, #68]	@ 0x44
 800700e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007010:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007012:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007014:	e841 2300 	strex	r3, r2, [r1]
 8007018:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800701a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1e6      	bne.n	8006fee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2220      	movs	r2, #32
 8007024:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e063      	b.n	80070fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0304 	and.w	r3, r3, #4
 800703e:	2b04      	cmp	r3, #4
 8007040:	d149      	bne.n	80070d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007042:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007046:	9300      	str	r3, [sp, #0]
 8007048:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800704a:	2200      	movs	r2, #0
 800704c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f857 	bl	8007104 <UART_WaitOnFlagUntilTimeout>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d03c      	beq.n	80070d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007064:	e853 3f00 	ldrex	r3, [r3]
 8007068:	623b      	str	r3, [r7, #32]
   return(result);
 800706a:	6a3b      	ldr	r3, [r7, #32]
 800706c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007070:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800707a:	633b      	str	r3, [r7, #48]	@ 0x30
 800707c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007080:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007082:	e841 2300 	strex	r3, r2, [r1]
 8007086:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1e6      	bne.n	800705c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	3308      	adds	r3, #8
 8007094:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	e853 3f00 	ldrex	r3, [r3]
 800709c:	60fb      	str	r3, [r7, #12]
   return(result);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f023 0301 	bic.w	r3, r3, #1
 80070a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	3308      	adds	r3, #8
 80070ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070ae:	61fa      	str	r2, [r7, #28]
 80070b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b2:	69b9      	ldr	r1, [r7, #24]
 80070b4:	69fa      	ldr	r2, [r7, #28]
 80070b6:	e841 2300 	strex	r3, r2, [r1]
 80070ba:	617b      	str	r3, [r7, #20]
   return(result);
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1e5      	bne.n	800708e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2220      	movs	r2, #32
 80070c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e012      	b.n	80070fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2220      	movs	r2, #32
 80070da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2220      	movs	r2, #32
 80070e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3758      	adds	r7, #88	@ 0x58
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	603b      	str	r3, [r7, #0]
 8007110:	4613      	mov	r3, r2
 8007112:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007114:	e04f      	b.n	80071b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800711c:	d04b      	beq.n	80071b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800711e:	f7fb fc5b 	bl	80029d8 <HAL_GetTick>
 8007122:	4602      	mov	r2, r0
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	69ba      	ldr	r2, [r7, #24]
 800712a:	429a      	cmp	r2, r3
 800712c:	d302      	bcc.n	8007134 <UART_WaitOnFlagUntilTimeout+0x30>
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d101      	bne.n	8007138 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	e04e      	b.n	80071d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0304 	and.w	r3, r3, #4
 8007142:	2b00      	cmp	r3, #0
 8007144:	d037      	beq.n	80071b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	2b80      	cmp	r3, #128	@ 0x80
 800714a:	d034      	beq.n	80071b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	2b40      	cmp	r3, #64	@ 0x40
 8007150:	d031      	beq.n	80071b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	69db      	ldr	r3, [r3, #28]
 8007158:	f003 0308 	and.w	r3, r3, #8
 800715c:	2b08      	cmp	r3, #8
 800715e:	d110      	bne.n	8007182 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2208      	movs	r2, #8
 8007166:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f000 f920 	bl	80073ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2208      	movs	r2, #8
 8007172:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e029      	b.n	80071d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	69db      	ldr	r3, [r3, #28]
 8007188:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800718c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007190:	d111      	bne.n	80071b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800719a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f000 f906 	bl	80073ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2220      	movs	r2, #32
 80071a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	e00f      	b.n	80071d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	69da      	ldr	r2, [r3, #28]
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	4013      	ands	r3, r2
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	bf0c      	ite	eq
 80071c6:	2301      	moveq	r3, #1
 80071c8:	2300      	movne	r3, #0
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	461a      	mov	r2, r3
 80071ce:	79fb      	ldrb	r3, [r7, #7]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d0a0      	beq.n	8007116 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
	...

080071e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b096      	sub	sp, #88	@ 0x58
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	4613      	mov	r3, r2
 80071ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	88fa      	ldrh	r2, [r7, #6]
 80071f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2200      	movs	r2, #0
 8007200:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2222      	movs	r2, #34	@ 0x22
 8007208:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007212:	2b00      	cmp	r3, #0
 8007214:	d02d      	beq.n	8007272 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800721c:	4a40      	ldr	r2, [pc, #256]	@ (8007320 <UART_Start_Receive_DMA+0x140>)
 800721e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007226:	4a3f      	ldr	r2, [pc, #252]	@ (8007324 <UART_Start_Receive_DMA+0x144>)
 8007228:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007230:	4a3d      	ldr	r2, [pc, #244]	@ (8007328 <UART_Start_Receive_DMA+0x148>)
 8007232:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800723a:	2200      	movs	r2, #0
 800723c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	3324      	adds	r3, #36	@ 0x24
 800724a:	4619      	mov	r1, r3
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007250:	461a      	mov	r2, r3
 8007252:	88fb      	ldrh	r3, [r7, #6]
 8007254:	f7fb fd54 	bl	8002d00 <HAL_DMA_Start_IT>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d009      	beq.n	8007272 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2210      	movs	r2, #16
 8007262:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2220      	movs	r2, #32
 800726a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e051      	b.n	8007316 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d018      	beq.n	80072ac <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007282:	e853 3f00 	ldrex	r3, [r3]
 8007286:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800728a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800728e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	461a      	mov	r2, r3
 8007296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007298:	64bb      	str	r3, [r7, #72]	@ 0x48
 800729a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800729e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80072a0:	e841 2300 	strex	r3, r2, [r1]
 80072a4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80072a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d1e6      	bne.n	800727a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	3308      	adds	r3, #8
 80072b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b6:	e853 3f00 	ldrex	r3, [r3]
 80072ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80072bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072be:	f043 0301 	orr.w	r3, r3, #1
 80072c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	3308      	adds	r3, #8
 80072ca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80072cc:	637a      	str	r2, [r7, #52]	@ 0x34
 80072ce:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80072d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80072d4:	e841 2300 	strex	r3, r2, [r1]
 80072d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80072da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1e5      	bne.n	80072ac <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	3308      	adds	r3, #8
 80072e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	e853 3f00 	ldrex	r3, [r3]
 80072ee:	613b      	str	r3, [r7, #16]
   return(result);
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	3308      	adds	r3, #8
 80072fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007300:	623a      	str	r2, [r7, #32]
 8007302:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007304:	69f9      	ldr	r1, [r7, #28]
 8007306:	6a3a      	ldr	r2, [r7, #32]
 8007308:	e841 2300 	strex	r3, r2, [r1]
 800730c:	61bb      	str	r3, [r7, #24]
   return(result);
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1e5      	bne.n	80072e0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3758      	adds	r7, #88	@ 0x58
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	08007531 	.word	0x08007531
 8007324:	0800765d 	.word	0x0800765d
 8007328:	0800769b 	.word	0x0800769b

0800732c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800732c:	b480      	push	{r7}
 800732e:	b08f      	sub	sp, #60	@ 0x3c
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733a:	6a3b      	ldr	r3, [r7, #32]
 800733c:	e853 3f00 	ldrex	r3, [r3]
 8007340:	61fb      	str	r3, [r7, #28]
   return(result);
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007348:	637b      	str	r3, [r7, #52]	@ 0x34
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	461a      	mov	r2, r3
 8007350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007352:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007354:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007356:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007358:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800735a:	e841 2300 	strex	r3, r2, [r1]
 800735e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1e6      	bne.n	8007334 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	3308      	adds	r3, #8
 800736c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	e853 3f00 	ldrex	r3, [r3]
 8007374:	60bb      	str	r3, [r7, #8]
   return(result);
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800737c:	633b      	str	r3, [r7, #48]	@ 0x30
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	3308      	adds	r3, #8
 8007384:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007386:	61ba      	str	r2, [r7, #24]
 8007388:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738a:	6979      	ldr	r1, [r7, #20]
 800738c:	69ba      	ldr	r2, [r7, #24]
 800738e:	e841 2300 	strex	r3, r2, [r1]
 8007392:	613b      	str	r3, [r7, #16]
   return(result);
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1e5      	bne.n	8007366 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2220      	movs	r2, #32
 800739e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80073a2:	bf00      	nop
 80073a4:	373c      	adds	r7, #60	@ 0x3c
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073ae:	b480      	push	{r7}
 80073b0:	b095      	sub	sp, #84	@ 0x54
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073be:	e853 3f00 	ldrex	r3, [r3]
 80073c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80073c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	461a      	mov	r2, r3
 80073d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80073d6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80073da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073dc:	e841 2300 	strex	r3, r2, [r1]
 80073e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80073e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1e6      	bne.n	80073b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	3308      	adds	r3, #8
 80073ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f0:	6a3b      	ldr	r3, [r7, #32]
 80073f2:	e853 3f00 	ldrex	r3, [r3]
 80073f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073fe:	f023 0301 	bic.w	r3, r3, #1
 8007402:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	3308      	adds	r3, #8
 800740a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800740c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800740e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007410:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007412:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007414:	e841 2300 	strex	r3, r2, [r1]
 8007418:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800741a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1e3      	bne.n	80073e8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007424:	2b01      	cmp	r3, #1
 8007426:	d118      	bne.n	800745a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	e853 3f00 	ldrex	r3, [r3]
 8007434:	60bb      	str	r3, [r7, #8]
   return(result);
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	f023 0310 	bic.w	r3, r3, #16
 800743c:	647b      	str	r3, [r7, #68]	@ 0x44
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	461a      	mov	r2, r3
 8007444:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007446:	61bb      	str	r3, [r7, #24]
 8007448:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744a:	6979      	ldr	r1, [r7, #20]
 800744c:	69ba      	ldr	r2, [r7, #24]
 800744e:	e841 2300 	strex	r3, r2, [r1]
 8007452:	613b      	str	r3, [r7, #16]
   return(result);
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1e6      	bne.n	8007428 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2220      	movs	r2, #32
 800745e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800746e:	bf00      	nop
 8007470:	3754      	adds	r7, #84	@ 0x54
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr

0800747a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b090      	sub	sp, #64	@ 0x40
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007486:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 0320 	and.w	r3, r3, #32
 8007492:	2b00      	cmp	r3, #0
 8007494:	d137      	bne.n	8007506 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007498:	2200      	movs	r2, #0
 800749a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800749e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3308      	adds	r3, #8
 80074a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a8:	e853 3f00 	ldrex	r3, [r3]
 80074ac:	623b      	str	r3, [r7, #32]
   return(result);
 80074ae:	6a3b      	ldr	r3, [r7, #32]
 80074b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	3308      	adds	r3, #8
 80074bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80074be:	633a      	str	r2, [r7, #48]	@ 0x30
 80074c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074c6:	e841 2300 	strex	r3, r2, [r1]
 80074ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80074cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1e5      	bne.n	800749e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	e853 3f00 	ldrex	r3, [r3]
 80074de:	60fb      	str	r3, [r7, #12]
   return(result);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80074e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	461a      	mov	r2, r3
 80074ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074f0:	61fb      	str	r3, [r7, #28]
 80074f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f4:	69b9      	ldr	r1, [r7, #24]
 80074f6:	69fa      	ldr	r2, [r7, #28]
 80074f8:	e841 2300 	strex	r3, r2, [r1]
 80074fc:	617b      	str	r3, [r7, #20]
   return(result);
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1e6      	bne.n	80074d2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007504:	e002      	b.n	800750c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007506:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007508:	f7ff f976 	bl	80067f8 <HAL_UART_TxCpltCallback>
}
 800750c:	bf00      	nop
 800750e:	3740      	adds	r7, #64	@ 0x40
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007520:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	f7ff f972 	bl	800680c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007528:	bf00      	nop
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b09c      	sub	sp, #112	@ 0x70
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800753c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0320 	and.w	r3, r3, #32
 8007548:	2b00      	cmp	r3, #0
 800754a:	d171      	bne.n	8007630 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800754c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800754e:	2200      	movs	r2, #0
 8007550:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007554:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800755c:	e853 3f00 	ldrex	r3, [r3]
 8007560:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007562:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007564:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007568:	66bb      	str	r3, [r7, #104]	@ 0x68
 800756a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	461a      	mov	r2, r3
 8007570:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007572:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007574:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007576:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007578:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800757a:	e841 2300 	strex	r3, r2, [r1]
 800757e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007580:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1e6      	bne.n	8007554 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007586:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	3308      	adds	r3, #8
 800758c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007590:	e853 3f00 	ldrex	r3, [r3]
 8007594:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007598:	f023 0301 	bic.w	r3, r3, #1
 800759c:	667b      	str	r3, [r7, #100]	@ 0x64
 800759e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3308      	adds	r3, #8
 80075a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80075a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80075a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80075ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075ae:	e841 2300 	strex	r3, r2, [r1]
 80075b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80075b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1e5      	bne.n	8007586 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	3308      	adds	r3, #8
 80075c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c4:	e853 3f00 	ldrex	r3, [r3]
 80075c8:	623b      	str	r3, [r7, #32]
   return(result);
 80075ca:	6a3b      	ldr	r3, [r7, #32]
 80075cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80075d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	3308      	adds	r3, #8
 80075d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80075da:	633a      	str	r2, [r7, #48]	@ 0x30
 80075dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075e2:	e841 2300 	strex	r3, r2, [r1]
 80075e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80075e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1e5      	bne.n	80075ba <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80075ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075f0:	2220      	movs	r2, #32
 80075f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d118      	bne.n	8007630 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	e853 3f00 	ldrex	r3, [r3]
 800760a:	60fb      	str	r3, [r7, #12]
   return(result);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f023 0310 	bic.w	r3, r3, #16
 8007612:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007614:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	461a      	mov	r2, r3
 800761a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800761c:	61fb      	str	r3, [r7, #28]
 800761e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007620:	69b9      	ldr	r1, [r7, #24]
 8007622:	69fa      	ldr	r2, [r7, #28]
 8007624:	e841 2300 	strex	r3, r2, [r1]
 8007628:	617b      	str	r3, [r7, #20]
   return(result);
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1e6      	bne.n	80075fe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007630:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007632:	2200      	movs	r2, #0
 8007634:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007636:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007638:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800763a:	2b01      	cmp	r3, #1
 800763c:	d107      	bne.n	800764e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800763e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007640:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007644:	4619      	mov	r1, r3
 8007646:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007648:	f7ff f908 	bl	800685c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800764c:	e002      	b.n	8007654 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800764e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007650:	f7ff f8e6 	bl	8006820 <HAL_UART_RxCpltCallback>
}
 8007654:	bf00      	nop
 8007656:	3770      	adds	r7, #112	@ 0x70
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007668:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2201      	movs	r2, #1
 800766e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007674:	2b01      	cmp	r3, #1
 8007676:	d109      	bne.n	800768c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800767e:	085b      	lsrs	r3, r3, #1
 8007680:	b29b      	uxth	r3, r3
 8007682:	4619      	mov	r1, r3
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f7ff f8e9 	bl	800685c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800768a:	e002      	b.n	8007692 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f7ff f8d1 	bl	8006834 <HAL_UART_RxHalfCpltCallback>
}
 8007692:	bf00      	nop
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b086      	sub	sp, #24
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076a6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076ae:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076b6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076c2:	2b80      	cmp	r3, #128	@ 0x80
 80076c4:	d109      	bne.n	80076da <UART_DMAError+0x40>
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	2b21      	cmp	r3, #33	@ 0x21
 80076ca:	d106      	bne.n	80076da <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80076d4:	6978      	ldr	r0, [r7, #20]
 80076d6:	f7ff fe29 	bl	800732c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076e4:	2b40      	cmp	r3, #64	@ 0x40
 80076e6:	d109      	bne.n	80076fc <UART_DMAError+0x62>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2b22      	cmp	r3, #34	@ 0x22
 80076ec:	d106      	bne.n	80076fc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80076f6:	6978      	ldr	r0, [r7, #20]
 80076f8:	f7ff fe59 	bl	80073ae <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007702:	f043 0210 	orr.w	r2, r3, #16
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800770c:	6978      	ldr	r0, [r7, #20]
 800770e:	f7ff f89b 	bl	8006848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007712:	bf00      	nop
 8007714:	3718      	adds	r7, #24
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b084      	sub	sp, #16
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007726:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2200      	movs	r2, #0
 800772c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f7ff f889 	bl	8006848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007736:	bf00      	nop
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b088      	sub	sp, #32
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	e853 3f00 	ldrex	r3, [r3]
 8007752:	60bb      	str	r3, [r7, #8]
   return(result);
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800775a:	61fb      	str	r3, [r7, #28]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	461a      	mov	r2, r3
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	61bb      	str	r3, [r7, #24]
 8007766:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007768:	6979      	ldr	r1, [r7, #20]
 800776a:	69ba      	ldr	r2, [r7, #24]
 800776c:	e841 2300 	strex	r3, r2, [r1]
 8007770:	613b      	str	r3, [r7, #16]
   return(result);
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1e6      	bne.n	8007746 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2220      	movs	r2, #32
 800777c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f7ff f836 	bl	80067f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800778c:	bf00      	nop
 800778e:	3720      	adds	r7, #32
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d101      	bne.n	80077e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80077e2:	2302      	movs	r3, #2
 80077e4:	e027      	b.n	8007836 <HAL_UARTEx_DisableFifoMode+0x66>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2201      	movs	r2, #1
 80077ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2224      	movs	r2, #36	@ 0x24
 80077f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f022 0201 	bic.w	r2, r2, #1
 800780c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007814:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	68fa      	ldr	r2, [r7, #12]
 8007822:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2220      	movs	r2, #32
 8007828:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3714      	adds	r7, #20
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b084      	sub	sp, #16
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007852:	2b01      	cmp	r3, #1
 8007854:	d101      	bne.n	800785a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007856:	2302      	movs	r3, #2
 8007858:	e02d      	b.n	80078b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2201      	movs	r2, #1
 800785e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2224      	movs	r2, #36	@ 0x24
 8007866:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f022 0201 	bic.w	r2, r2, #1
 8007880:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	683a      	ldr	r2, [r7, #0]
 8007892:	430a      	orrs	r2, r1
 8007894:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f850 	bl	800793c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2220      	movs	r2, #32
 80078a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b084      	sub	sp, #16
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
 80078c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d101      	bne.n	80078d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80078d2:	2302      	movs	r3, #2
 80078d4:	e02d      	b.n	8007932 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2201      	movs	r2, #1
 80078da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2224      	movs	r2, #36	@ 0x24
 80078e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f022 0201 	bic.w	r2, r2, #1
 80078fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	683a      	ldr	r2, [r7, #0]
 800790e:	430a      	orrs	r2, r1
 8007910:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f812 	bl	800793c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2220      	movs	r2, #32
 8007924:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
	...

0800793c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800793c:	b480      	push	{r7}
 800793e:	b085      	sub	sp, #20
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007948:	2b00      	cmp	r3, #0
 800794a:	d108      	bne.n	800795e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800795c:	e031      	b.n	80079c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800795e:	2308      	movs	r3, #8
 8007960:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007962:	2308      	movs	r3, #8
 8007964:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	0e5b      	lsrs	r3, r3, #25
 800796e:	b2db      	uxtb	r3, r3
 8007970:	f003 0307 	and.w	r3, r3, #7
 8007974:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	0f5b      	lsrs	r3, r3, #29
 800797e:	b2db      	uxtb	r3, r3
 8007980:	f003 0307 	and.w	r3, r3, #7
 8007984:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007986:	7bbb      	ldrb	r3, [r7, #14]
 8007988:	7b3a      	ldrb	r2, [r7, #12]
 800798a:	4911      	ldr	r1, [pc, #68]	@ (80079d0 <UARTEx_SetNbDataToProcess+0x94>)
 800798c:	5c8a      	ldrb	r2, [r1, r2]
 800798e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007992:	7b3a      	ldrb	r2, [r7, #12]
 8007994:	490f      	ldr	r1, [pc, #60]	@ (80079d4 <UARTEx_SetNbDataToProcess+0x98>)
 8007996:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007998:	fb93 f3f2 	sdiv	r3, r3, r2
 800799c:	b29a      	uxth	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079a4:	7bfb      	ldrb	r3, [r7, #15]
 80079a6:	7b7a      	ldrb	r2, [r7, #13]
 80079a8:	4909      	ldr	r1, [pc, #36]	@ (80079d0 <UARTEx_SetNbDataToProcess+0x94>)
 80079aa:	5c8a      	ldrb	r2, [r1, r2]
 80079ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80079b0:	7b7a      	ldrb	r2, [r7, #13]
 80079b2:	4908      	ldr	r1, [pc, #32]	@ (80079d4 <UARTEx_SetNbDataToProcess+0x98>)
 80079b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80079ba:	b29a      	uxth	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80079c2:	bf00      	nop
 80079c4:	3714      	adds	r7, #20
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	08018aa4 	.word	0x08018aa4
 80079d4:	08018aac 	.word	0x08018aac

080079d8 <__NVIC_SetPriority>:
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	4603      	mov	r3, r0
 80079e0:	6039      	str	r1, [r7, #0]
 80079e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	db0a      	blt.n	8007a02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	b2da      	uxtb	r2, r3
 80079f0:	490c      	ldr	r1, [pc, #48]	@ (8007a24 <__NVIC_SetPriority+0x4c>)
 80079f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079f6:	0112      	lsls	r2, r2, #4
 80079f8:	b2d2      	uxtb	r2, r2
 80079fa:	440b      	add	r3, r1
 80079fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007a00:	e00a      	b.n	8007a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	b2da      	uxtb	r2, r3
 8007a06:	4908      	ldr	r1, [pc, #32]	@ (8007a28 <__NVIC_SetPriority+0x50>)
 8007a08:	79fb      	ldrb	r3, [r7, #7]
 8007a0a:	f003 030f 	and.w	r3, r3, #15
 8007a0e:	3b04      	subs	r3, #4
 8007a10:	0112      	lsls	r2, r2, #4
 8007a12:	b2d2      	uxtb	r2, r2
 8007a14:	440b      	add	r3, r1
 8007a16:	761a      	strb	r2, [r3, #24]
}
 8007a18:	bf00      	nop
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr
 8007a24:	e000e100 	.word	0xe000e100
 8007a28:	e000ed00 	.word	0xe000ed00

08007a2c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007a30:	4b05      	ldr	r3, [pc, #20]	@ (8007a48 <SysTick_Handler+0x1c>)
 8007a32:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007a34:	f001 fd40 	bl	80094b8 <xTaskGetSchedulerState>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d001      	beq.n	8007a42 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007a3e:	f002 fb3b 	bl	800a0b8 <xPortSysTickHandler>
  }
}
 8007a42:	bf00      	nop
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	e000e010 	.word	0xe000e010

08007a4c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007a50:	2100      	movs	r1, #0
 8007a52:	f06f 0004 	mvn.w	r0, #4
 8007a56:	f7ff ffbf 	bl	80079d8 <__NVIC_SetPriority>
#endif
}
 8007a5a:	bf00      	nop
 8007a5c:	bd80      	pop	{r7, pc}
	...

08007a60 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a66:	f3ef 8305 	mrs	r3, IPSR
 8007a6a:	603b      	str	r3, [r7, #0]
  return(result);
 8007a6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d003      	beq.n	8007a7a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007a72:	f06f 0305 	mvn.w	r3, #5
 8007a76:	607b      	str	r3, [r7, #4]
 8007a78:	e00c      	b.n	8007a94 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8007aa4 <osKernelInitialize+0x44>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d105      	bne.n	8007a8e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007a82:	4b08      	ldr	r3, [pc, #32]	@ (8007aa4 <osKernelInitialize+0x44>)
 8007a84:	2201      	movs	r2, #1
 8007a86:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	607b      	str	r3, [r7, #4]
 8007a8c:	e002      	b.n	8007a94 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007a8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007a92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007a94:	687b      	ldr	r3, [r7, #4]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	370c      	adds	r7, #12
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	20004820 	.word	0x20004820

08007aa8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007aae:	f3ef 8305 	mrs	r3, IPSR
 8007ab2:	603b      	str	r3, [r7, #0]
  return(result);
 8007ab4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d003      	beq.n	8007ac2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007aba:	f06f 0305 	mvn.w	r3, #5
 8007abe:	607b      	str	r3, [r7, #4]
 8007ac0:	e010      	b.n	8007ae4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8007af0 <osKernelStart+0x48>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d109      	bne.n	8007ade <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007aca:	f7ff ffbf 	bl	8007a4c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007ace:	4b08      	ldr	r3, [pc, #32]	@ (8007af0 <osKernelStart+0x48>)
 8007ad0:	2202      	movs	r2, #2
 8007ad2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007ad4:	f001 f87a 	bl	8008bcc <vTaskStartScheduler>
      stat = osOK;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	607b      	str	r3, [r7, #4]
 8007adc:	e002      	b.n	8007ae4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007ade:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007ae2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007ae4:	687b      	ldr	r3, [r7, #4]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3708      	adds	r7, #8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	20004820 	.word	0x20004820

08007af4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b08e      	sub	sp, #56	@ 0x38
 8007af8:	af04      	add	r7, sp, #16
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007b00:	2300      	movs	r3, #0
 8007b02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b04:	f3ef 8305 	mrs	r3, IPSR
 8007b08:	617b      	str	r3, [r7, #20]
  return(result);
 8007b0a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d17e      	bne.n	8007c0e <osThreadNew+0x11a>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d07b      	beq.n	8007c0e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007b16:	2380      	movs	r3, #128	@ 0x80
 8007b18:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007b1a:	2318      	movs	r3, #24
 8007b1c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007b22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b26:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d045      	beq.n	8007bba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d002      	beq.n	8007b3c <osThreadNew+0x48>
        name = attr->name;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d002      	beq.n	8007b4a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d008      	beq.n	8007b62 <osThreadNew+0x6e>
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	2b38      	cmp	r3, #56	@ 0x38
 8007b54:	d805      	bhi.n	8007b62 <osThreadNew+0x6e>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	f003 0301 	and.w	r3, r3, #1
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d001      	beq.n	8007b66 <osThreadNew+0x72>
        return (NULL);
 8007b62:	2300      	movs	r3, #0
 8007b64:	e054      	b.n	8007c10 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	695b      	ldr	r3, [r3, #20]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d003      	beq.n	8007b76 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	089b      	lsrs	r3, r3, #2
 8007b74:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00e      	beq.n	8007b9c <osThreadNew+0xa8>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	2b5b      	cmp	r3, #91	@ 0x5b
 8007b84:	d90a      	bls.n	8007b9c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d006      	beq.n	8007b9c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	695b      	ldr	r3, [r3, #20]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d002      	beq.n	8007b9c <osThreadNew+0xa8>
        mem = 1;
 8007b96:	2301      	movs	r3, #1
 8007b98:	61bb      	str	r3, [r7, #24]
 8007b9a:	e010      	b.n	8007bbe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d10c      	bne.n	8007bbe <osThreadNew+0xca>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d108      	bne.n	8007bbe <osThreadNew+0xca>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d104      	bne.n	8007bbe <osThreadNew+0xca>
          mem = 0;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	61bb      	str	r3, [r7, #24]
 8007bb8:	e001      	b.n	8007bbe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d110      	bne.n	8007be6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007bcc:	9202      	str	r2, [sp, #8]
 8007bce:	9301      	str	r3, [sp, #4]
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	9300      	str	r3, [sp, #0]
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	6a3a      	ldr	r2, [r7, #32]
 8007bd8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f000 fe1a 	bl	8008814 <xTaskCreateStatic>
 8007be0:	4603      	mov	r3, r0
 8007be2:	613b      	str	r3, [r7, #16]
 8007be4:	e013      	b.n	8007c0e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007be6:	69bb      	ldr	r3, [r7, #24]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d110      	bne.n	8007c0e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007bec:	6a3b      	ldr	r3, [r7, #32]
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	f107 0310 	add.w	r3, r7, #16
 8007bf4:	9301      	str	r3, [sp, #4]
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	9300      	str	r3, [sp, #0]
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f000 fe68 	bl	80088d4 <xTaskCreate>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d001      	beq.n	8007c0e <osThreadNew+0x11a>
            hTask = NULL;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007c0e:	693b      	ldr	r3, [r7, #16]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3728      	adds	r7, #40	@ 0x28
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c20:	f3ef 8305 	mrs	r3, IPSR
 8007c24:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c26:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d003      	beq.n	8007c34 <osDelay+0x1c>
    stat = osErrorISR;
 8007c2c:	f06f 0305 	mvn.w	r3, #5
 8007c30:	60fb      	str	r3, [r7, #12]
 8007c32:	e007      	b.n	8007c44 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007c34:	2300      	movs	r3, #0
 8007c36:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d002      	beq.n	8007c44 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 ff8e 	bl	8008b60 <vTaskDelay>
    }
  }

  return (stat);
 8007c44:	68fb      	ldr	r3, [r7, #12]
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
	...

08007c50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	4a07      	ldr	r2, [pc, #28]	@ (8007c7c <vApplicationGetIdleTaskMemory+0x2c>)
 8007c60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	4a06      	ldr	r2, [pc, #24]	@ (8007c80 <vApplicationGetIdleTaskMemory+0x30>)
 8007c66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2280      	movs	r2, #128	@ 0x80
 8007c6c:	601a      	str	r2, [r3, #0]
}
 8007c6e:	bf00      	nop
 8007c70:	3714      	adds	r7, #20
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	20004824 	.word	0x20004824
 8007c80:	20004880 	.word	0x20004880

08007c84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	4a07      	ldr	r2, [pc, #28]	@ (8007cb0 <vApplicationGetTimerTaskMemory+0x2c>)
 8007c94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	4a06      	ldr	r2, [pc, #24]	@ (8007cb4 <vApplicationGetTimerTaskMemory+0x30>)
 8007c9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007ca2:	601a      	str	r2, [r3, #0]
}
 8007ca4:	bf00      	nop
 8007ca6:	3714      	adds	r7, #20
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr
 8007cb0:	20004a80 	.word	0x20004a80
 8007cb4:	20004adc 	.word	0x20004adc

08007cb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f103 0208 	add.w	r2, r3, #8
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007cd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f103 0208 	add.w	r2, r3, #8
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f103 0208 	add.w	r2, r3, #8
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007cec:	bf00      	nop
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007d06:	bf00      	nop
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d12:	b480      	push	{r7}
 8007d14:	b085      	sub	sp, #20
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
 8007d1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	689a      	ldr	r2, [r3, #8]
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	683a      	ldr	r2, [r7, #0]
 8007d36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	683a      	ldr	r2, [r7, #0]
 8007d3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	1c5a      	adds	r2, r3, #1
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	601a      	str	r2, [r3, #0]
}
 8007d4e:	bf00      	nop
 8007d50:	3714      	adds	r7, #20
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b085      	sub	sp, #20
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
 8007d62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d70:	d103      	bne.n	8007d7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	60fb      	str	r3, [r7, #12]
 8007d78:	e00c      	b.n	8007d94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	3308      	adds	r3, #8
 8007d7e:	60fb      	str	r3, [r7, #12]
 8007d80:	e002      	b.n	8007d88 <vListInsert+0x2e>
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	60fb      	str	r3, [r7, #12]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68ba      	ldr	r2, [r7, #8]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d2f6      	bcs.n	8007d82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	685a      	ldr	r2, [r3, #4]
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	683a      	ldr	r2, [r7, #0]
 8007da2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	683a      	ldr	r2, [r7, #0]
 8007dae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	1c5a      	adds	r2, r3, #1
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	601a      	str	r2, [r3, #0]
}
 8007dc0:	bf00      	nop
 8007dc2:	3714      	adds	r7, #20
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b085      	sub	sp, #20
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	691b      	ldr	r3, [r3, #16]
 8007dd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	6892      	ldr	r2, [r2, #8]
 8007de2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	6852      	ldr	r2, [r2, #4]
 8007dec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d103      	bne.n	8007e00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	689a      	ldr	r2, [r3, #8]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	1e5a      	subs	r2, r3, #1
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3714      	adds	r7, #20
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10b      	bne.n	8007e4c <xQueueGenericReset+0x2c>
	__asm volatile
 8007e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e38:	f383 8811 	msr	BASEPRI, r3
 8007e3c:	f3bf 8f6f 	isb	sy
 8007e40:	f3bf 8f4f 	dsb	sy
 8007e44:	60bb      	str	r3, [r7, #8]
}
 8007e46:	bf00      	nop
 8007e48:	bf00      	nop
 8007e4a:	e7fd      	b.n	8007e48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007e4c:	f002 f8a4 	bl	8009f98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e58:	68f9      	ldr	r1, [r7, #12]
 8007e5a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007e5c:	fb01 f303 	mul.w	r3, r1, r3
 8007e60:	441a      	add	r2, r3
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	68f9      	ldr	r1, [r7, #12]
 8007e80:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007e82:	fb01 f303 	mul.w	r3, r1, r3
 8007e86:	441a      	add	r2, r3
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	22ff      	movs	r2, #255	@ 0xff
 8007e90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	22ff      	movs	r2, #255	@ 0xff
 8007e98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d114      	bne.n	8007ecc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d01a      	beq.n	8007ee0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	3310      	adds	r3, #16
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f001 f91a 	bl	80090e8 <xTaskRemoveFromEventList>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d012      	beq.n	8007ee0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007eba:	4b0d      	ldr	r3, [pc, #52]	@ (8007ef0 <xQueueGenericReset+0xd0>)
 8007ebc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ec0:	601a      	str	r2, [r3, #0]
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	f3bf 8f6f 	isb	sy
 8007eca:	e009      	b.n	8007ee0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	3310      	adds	r3, #16
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7ff fef1 	bl	8007cb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	3324      	adds	r3, #36	@ 0x24
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7ff feec 	bl	8007cb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007ee0:	f002 f88c 	bl	8009ffc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007ee4:	2301      	movs	r3, #1
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	e000ed04 	.word	0xe000ed04

08007ef4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b08e      	sub	sp, #56	@ 0x38
 8007ef8:	af02      	add	r7, sp, #8
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
 8007f00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d10b      	bne.n	8007f20 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f0c:	f383 8811 	msr	BASEPRI, r3
 8007f10:	f3bf 8f6f 	isb	sy
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007f1a:	bf00      	nop
 8007f1c:	bf00      	nop
 8007f1e:	e7fd      	b.n	8007f1c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d10b      	bne.n	8007f3e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f2a:	f383 8811 	msr	BASEPRI, r3
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	f3bf 8f4f 	dsb	sy
 8007f36:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007f38:	bf00      	nop
 8007f3a:	bf00      	nop
 8007f3c:	e7fd      	b.n	8007f3a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d002      	beq.n	8007f4a <xQueueGenericCreateStatic+0x56>
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <xQueueGenericCreateStatic+0x5a>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e000      	b.n	8007f50 <xQueueGenericCreateStatic+0x5c>
 8007f4e:	2300      	movs	r3, #0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d10b      	bne.n	8007f6c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f58:	f383 8811 	msr	BASEPRI, r3
 8007f5c:	f3bf 8f6f 	isb	sy
 8007f60:	f3bf 8f4f 	dsb	sy
 8007f64:	623b      	str	r3, [r7, #32]
}
 8007f66:	bf00      	nop
 8007f68:	bf00      	nop
 8007f6a:	e7fd      	b.n	8007f68 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d102      	bne.n	8007f78 <xQueueGenericCreateStatic+0x84>
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d101      	bne.n	8007f7c <xQueueGenericCreateStatic+0x88>
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e000      	b.n	8007f7e <xQueueGenericCreateStatic+0x8a>
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10b      	bne.n	8007f9a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	61fb      	str	r3, [r7, #28]
}
 8007f94:	bf00      	nop
 8007f96:	bf00      	nop
 8007f98:	e7fd      	b.n	8007f96 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007f9a:	2350      	movs	r3, #80	@ 0x50
 8007f9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	2b50      	cmp	r3, #80	@ 0x50
 8007fa2:	d00b      	beq.n	8007fbc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa8:	f383 8811 	msr	BASEPRI, r3
 8007fac:	f3bf 8f6f 	isb	sy
 8007fb0:	f3bf 8f4f 	dsb	sy
 8007fb4:	61bb      	str	r3, [r7, #24]
}
 8007fb6:	bf00      	nop
 8007fb8:	bf00      	nop
 8007fba:	e7fd      	b.n	8007fb8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007fbc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d00d      	beq.n	8007fe4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007fd0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	4613      	mov	r3, r2
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	68b9      	ldr	r1, [r7, #8]
 8007fde:	68f8      	ldr	r0, [r7, #12]
 8007fe0:	f000 f805 	bl	8007fee <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3730      	adds	r7, #48	@ 0x30
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b084      	sub	sp, #16
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	60f8      	str	r0, [r7, #12]
 8007ff6:	60b9      	str	r1, [r7, #8]
 8007ff8:	607a      	str	r2, [r7, #4]
 8007ffa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d103      	bne.n	800800a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	69ba      	ldr	r2, [r7, #24]
 8008006:	601a      	str	r2, [r3, #0]
 8008008:	e002      	b.n	8008010 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	68fa      	ldr	r2, [r7, #12]
 8008014:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	68ba      	ldr	r2, [r7, #8]
 800801a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800801c:	2101      	movs	r1, #1
 800801e:	69b8      	ldr	r0, [r7, #24]
 8008020:	f7ff fefe 	bl	8007e20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	78fa      	ldrb	r2, [r7, #3]
 8008028:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800802c:	bf00      	nop
 800802e:	3710      	adds	r7, #16
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b08e      	sub	sp, #56	@ 0x38
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	607a      	str	r2, [r7, #4]
 8008040:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008042:	2300      	movs	r3, #0
 8008044:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800804a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10b      	bne.n	8008068 <xQueueGenericSend+0x34>
	__asm volatile
 8008050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008062:	bf00      	nop
 8008064:	bf00      	nop
 8008066:	e7fd      	b.n	8008064 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d103      	bne.n	8008076 <xQueueGenericSend+0x42>
 800806e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008072:	2b00      	cmp	r3, #0
 8008074:	d101      	bne.n	800807a <xQueueGenericSend+0x46>
 8008076:	2301      	movs	r3, #1
 8008078:	e000      	b.n	800807c <xQueueGenericSend+0x48>
 800807a:	2300      	movs	r3, #0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d10b      	bne.n	8008098 <xQueueGenericSend+0x64>
	__asm volatile
 8008080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008084:	f383 8811 	msr	BASEPRI, r3
 8008088:	f3bf 8f6f 	isb	sy
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008092:	bf00      	nop
 8008094:	bf00      	nop
 8008096:	e7fd      	b.n	8008094 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	2b02      	cmp	r3, #2
 800809c:	d103      	bne.n	80080a6 <xQueueGenericSend+0x72>
 800809e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d101      	bne.n	80080aa <xQueueGenericSend+0x76>
 80080a6:	2301      	movs	r3, #1
 80080a8:	e000      	b.n	80080ac <xQueueGenericSend+0x78>
 80080aa:	2300      	movs	r3, #0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d10b      	bne.n	80080c8 <xQueueGenericSend+0x94>
	__asm volatile
 80080b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	623b      	str	r3, [r7, #32]
}
 80080c2:	bf00      	nop
 80080c4:	bf00      	nop
 80080c6:	e7fd      	b.n	80080c4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080c8:	f001 f9f6 	bl	80094b8 <xTaskGetSchedulerState>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d102      	bne.n	80080d8 <xQueueGenericSend+0xa4>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d101      	bne.n	80080dc <xQueueGenericSend+0xa8>
 80080d8:	2301      	movs	r3, #1
 80080da:	e000      	b.n	80080de <xQueueGenericSend+0xaa>
 80080dc:	2300      	movs	r3, #0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d10b      	bne.n	80080fa <xQueueGenericSend+0xc6>
	__asm volatile
 80080e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e6:	f383 8811 	msr	BASEPRI, r3
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	61fb      	str	r3, [r7, #28]
}
 80080f4:	bf00      	nop
 80080f6:	bf00      	nop
 80080f8:	e7fd      	b.n	80080f6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080fa:	f001 ff4d 	bl	8009f98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80080fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008100:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008106:	429a      	cmp	r2, r3
 8008108:	d302      	bcc.n	8008110 <xQueueGenericSend+0xdc>
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	2b02      	cmp	r3, #2
 800810e:	d129      	bne.n	8008164 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008110:	683a      	ldr	r2, [r7, #0]
 8008112:	68b9      	ldr	r1, [r7, #8]
 8008114:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008116:	f000 fa0f 	bl	8008538 <prvCopyDataToQueue>
 800811a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800811c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008120:	2b00      	cmp	r3, #0
 8008122:	d010      	beq.n	8008146 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008126:	3324      	adds	r3, #36	@ 0x24
 8008128:	4618      	mov	r0, r3
 800812a:	f000 ffdd 	bl	80090e8 <xTaskRemoveFromEventList>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d013      	beq.n	800815c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008134:	4b3f      	ldr	r3, [pc, #252]	@ (8008234 <xQueueGenericSend+0x200>)
 8008136:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800813a:	601a      	str	r2, [r3, #0]
 800813c:	f3bf 8f4f 	dsb	sy
 8008140:	f3bf 8f6f 	isb	sy
 8008144:	e00a      	b.n	800815c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008148:	2b00      	cmp	r3, #0
 800814a:	d007      	beq.n	800815c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800814c:	4b39      	ldr	r3, [pc, #228]	@ (8008234 <xQueueGenericSend+0x200>)
 800814e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	f3bf 8f4f 	dsb	sy
 8008158:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800815c:	f001 ff4e 	bl	8009ffc <vPortExitCritical>
				return pdPASS;
 8008160:	2301      	movs	r3, #1
 8008162:	e063      	b.n	800822c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d103      	bne.n	8008172 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800816a:	f001 ff47 	bl	8009ffc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800816e:	2300      	movs	r3, #0
 8008170:	e05c      	b.n	800822c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008174:	2b00      	cmp	r3, #0
 8008176:	d106      	bne.n	8008186 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008178:	f107 0314 	add.w	r3, r7, #20
 800817c:	4618      	mov	r0, r3
 800817e:	f001 f83f 	bl	8009200 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008182:	2301      	movs	r3, #1
 8008184:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008186:	f001 ff39 	bl	8009ffc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800818a:	f000 fd87 	bl	8008c9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800818e:	f001 ff03 	bl	8009f98 <vPortEnterCritical>
 8008192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008194:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008198:	b25b      	sxtb	r3, r3
 800819a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800819e:	d103      	bne.n	80081a8 <xQueueGenericSend+0x174>
 80081a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081ae:	b25b      	sxtb	r3, r3
 80081b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081b4:	d103      	bne.n	80081be <xQueueGenericSend+0x18a>
 80081b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081be:	f001 ff1d 	bl	8009ffc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081c2:	1d3a      	adds	r2, r7, #4
 80081c4:	f107 0314 	add.w	r3, r7, #20
 80081c8:	4611      	mov	r1, r2
 80081ca:	4618      	mov	r0, r3
 80081cc:	f001 f82e 	bl	800922c <xTaskCheckForTimeOut>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d124      	bne.n	8008220 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80081d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80081d8:	f000 faa6 	bl	8008728 <prvIsQueueFull>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d018      	beq.n	8008214 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80081e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e4:	3310      	adds	r3, #16
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	4611      	mov	r1, r2
 80081ea:	4618      	mov	r0, r3
 80081ec:	f000 ff2a 	bl	8009044 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80081f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80081f2:	f000 fa31 	bl	8008658 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80081f6:	f000 fd5f 	bl	8008cb8 <xTaskResumeAll>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f47f af7c 	bne.w	80080fa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008202:	4b0c      	ldr	r3, [pc, #48]	@ (8008234 <xQueueGenericSend+0x200>)
 8008204:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008208:	601a      	str	r2, [r3, #0]
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	f3bf 8f6f 	isb	sy
 8008212:	e772      	b.n	80080fa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008214:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008216:	f000 fa1f 	bl	8008658 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800821a:	f000 fd4d 	bl	8008cb8 <xTaskResumeAll>
 800821e:	e76c      	b.n	80080fa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008220:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008222:	f000 fa19 	bl	8008658 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008226:	f000 fd47 	bl	8008cb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800822a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800822c:	4618      	mov	r0, r3
 800822e:	3738      	adds	r7, #56	@ 0x38
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	e000ed04 	.word	0xe000ed04

08008238 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b090      	sub	sp, #64	@ 0x40
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]
 8008244:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800824a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10b      	bne.n	8008268 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008254:	f383 8811 	msr	BASEPRI, r3
 8008258:	f3bf 8f6f 	isb	sy
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008262:	bf00      	nop
 8008264:	bf00      	nop
 8008266:	e7fd      	b.n	8008264 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d103      	bne.n	8008276 <xQueueGenericSendFromISR+0x3e>
 800826e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008272:	2b00      	cmp	r3, #0
 8008274:	d101      	bne.n	800827a <xQueueGenericSendFromISR+0x42>
 8008276:	2301      	movs	r3, #1
 8008278:	e000      	b.n	800827c <xQueueGenericSendFromISR+0x44>
 800827a:	2300      	movs	r3, #0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10b      	bne.n	8008298 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008284:	f383 8811 	msr	BASEPRI, r3
 8008288:	f3bf 8f6f 	isb	sy
 800828c:	f3bf 8f4f 	dsb	sy
 8008290:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008292:	bf00      	nop
 8008294:	bf00      	nop
 8008296:	e7fd      	b.n	8008294 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	2b02      	cmp	r3, #2
 800829c:	d103      	bne.n	80082a6 <xQueueGenericSendFromISR+0x6e>
 800829e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d101      	bne.n	80082aa <xQueueGenericSendFromISR+0x72>
 80082a6:	2301      	movs	r3, #1
 80082a8:	e000      	b.n	80082ac <xQueueGenericSendFromISR+0x74>
 80082aa:	2300      	movs	r3, #0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d10b      	bne.n	80082c8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80082b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b4:	f383 8811 	msr	BASEPRI, r3
 80082b8:	f3bf 8f6f 	isb	sy
 80082bc:	f3bf 8f4f 	dsb	sy
 80082c0:	623b      	str	r3, [r7, #32]
}
 80082c2:	bf00      	nop
 80082c4:	bf00      	nop
 80082c6:	e7fd      	b.n	80082c4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80082c8:	f001 ff46 	bl	800a158 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80082cc:	f3ef 8211 	mrs	r2, BASEPRI
 80082d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d4:	f383 8811 	msr	BASEPRI, r3
 80082d8:	f3bf 8f6f 	isb	sy
 80082dc:	f3bf 8f4f 	dsb	sy
 80082e0:	61fa      	str	r2, [r7, #28]
 80082e2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80082e4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80082e6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80082e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d302      	bcc.n	80082fa <xQueueGenericSendFromISR+0xc2>
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	d12f      	bne.n	800835a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80082fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008300:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008308:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800830a:	683a      	ldr	r2, [r7, #0]
 800830c:	68b9      	ldr	r1, [r7, #8]
 800830e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008310:	f000 f912 	bl	8008538 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008314:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008318:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800831c:	d112      	bne.n	8008344 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800831e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008322:	2b00      	cmp	r3, #0
 8008324:	d016      	beq.n	8008354 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008328:	3324      	adds	r3, #36	@ 0x24
 800832a:	4618      	mov	r0, r3
 800832c:	f000 fedc 	bl	80090e8 <xTaskRemoveFromEventList>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00e      	beq.n	8008354 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00b      	beq.n	8008354 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	601a      	str	r2, [r3, #0]
 8008342:	e007      	b.n	8008354 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008344:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008348:	3301      	adds	r3, #1
 800834a:	b2db      	uxtb	r3, r3
 800834c:	b25a      	sxtb	r2, r3
 800834e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008350:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008354:	2301      	movs	r3, #1
 8008356:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008358:	e001      	b.n	800835e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800835a:	2300      	movs	r3, #0
 800835c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800835e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008360:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008368:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800836a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800836c:	4618      	mov	r0, r3
 800836e:	3740      	adds	r7, #64	@ 0x40
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b08c      	sub	sp, #48	@ 0x30
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008380:	2300      	movs	r3, #0
 8008382:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800838a:	2b00      	cmp	r3, #0
 800838c:	d10b      	bne.n	80083a6 <xQueueReceive+0x32>
	__asm volatile
 800838e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	623b      	str	r3, [r7, #32]
}
 80083a0:	bf00      	nop
 80083a2:	bf00      	nop
 80083a4:	e7fd      	b.n	80083a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d103      	bne.n	80083b4 <xQueueReceive+0x40>
 80083ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d101      	bne.n	80083b8 <xQueueReceive+0x44>
 80083b4:	2301      	movs	r3, #1
 80083b6:	e000      	b.n	80083ba <xQueueReceive+0x46>
 80083b8:	2300      	movs	r3, #0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d10b      	bne.n	80083d6 <xQueueReceive+0x62>
	__asm volatile
 80083be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c2:	f383 8811 	msr	BASEPRI, r3
 80083c6:	f3bf 8f6f 	isb	sy
 80083ca:	f3bf 8f4f 	dsb	sy
 80083ce:	61fb      	str	r3, [r7, #28]
}
 80083d0:	bf00      	nop
 80083d2:	bf00      	nop
 80083d4:	e7fd      	b.n	80083d2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083d6:	f001 f86f 	bl	80094b8 <xTaskGetSchedulerState>
 80083da:	4603      	mov	r3, r0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d102      	bne.n	80083e6 <xQueueReceive+0x72>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d101      	bne.n	80083ea <xQueueReceive+0x76>
 80083e6:	2301      	movs	r3, #1
 80083e8:	e000      	b.n	80083ec <xQueueReceive+0x78>
 80083ea:	2300      	movs	r3, #0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d10b      	bne.n	8008408 <xQueueReceive+0x94>
	__asm volatile
 80083f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f4:	f383 8811 	msr	BASEPRI, r3
 80083f8:	f3bf 8f6f 	isb	sy
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	61bb      	str	r3, [r7, #24]
}
 8008402:	bf00      	nop
 8008404:	bf00      	nop
 8008406:	e7fd      	b.n	8008404 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008408:	f001 fdc6 	bl	8009f98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800840c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800840e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008410:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008414:	2b00      	cmp	r3, #0
 8008416:	d01f      	beq.n	8008458 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008418:	68b9      	ldr	r1, [r7, #8]
 800841a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800841c:	f000 f8f6 	bl	800860c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008422:	1e5a      	subs	r2, r3, #1
 8008424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008426:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00f      	beq.n	8008450 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008432:	3310      	adds	r3, #16
 8008434:	4618      	mov	r0, r3
 8008436:	f000 fe57 	bl	80090e8 <xTaskRemoveFromEventList>
 800843a:	4603      	mov	r3, r0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d007      	beq.n	8008450 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008440:	4b3c      	ldr	r3, [pc, #240]	@ (8008534 <xQueueReceive+0x1c0>)
 8008442:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008446:	601a      	str	r2, [r3, #0]
 8008448:	f3bf 8f4f 	dsb	sy
 800844c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008450:	f001 fdd4 	bl	8009ffc <vPortExitCritical>
				return pdPASS;
 8008454:	2301      	movs	r3, #1
 8008456:	e069      	b.n	800852c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d103      	bne.n	8008466 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800845e:	f001 fdcd 	bl	8009ffc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008462:	2300      	movs	r3, #0
 8008464:	e062      	b.n	800852c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008468:	2b00      	cmp	r3, #0
 800846a:	d106      	bne.n	800847a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800846c:	f107 0310 	add.w	r3, r7, #16
 8008470:	4618      	mov	r0, r3
 8008472:	f000 fec5 	bl	8009200 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008476:	2301      	movs	r3, #1
 8008478:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800847a:	f001 fdbf 	bl	8009ffc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800847e:	f000 fc0d 	bl	8008c9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008482:	f001 fd89 	bl	8009f98 <vPortEnterCritical>
 8008486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008488:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800848c:	b25b      	sxtb	r3, r3
 800848e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008492:	d103      	bne.n	800849c <xQueueReceive+0x128>
 8008494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008496:	2200      	movs	r2, #0
 8008498:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800849c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800849e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084a2:	b25b      	sxtb	r3, r3
 80084a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80084a8:	d103      	bne.n	80084b2 <xQueueReceive+0x13e>
 80084aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ac:	2200      	movs	r2, #0
 80084ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80084b2:	f001 fda3 	bl	8009ffc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084b6:	1d3a      	adds	r2, r7, #4
 80084b8:	f107 0310 	add.w	r3, r7, #16
 80084bc:	4611      	mov	r1, r2
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 feb4 	bl	800922c <xTaskCheckForTimeOut>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d123      	bne.n	8008512 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084cc:	f000 f916 	bl	80086fc <prvIsQueueEmpty>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d017      	beq.n	8008506 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80084d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d8:	3324      	adds	r3, #36	@ 0x24
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	4611      	mov	r1, r2
 80084de:	4618      	mov	r0, r3
 80084e0:	f000 fdb0 	bl	8009044 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80084e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084e6:	f000 f8b7 	bl	8008658 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80084ea:	f000 fbe5 	bl	8008cb8 <xTaskResumeAll>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d189      	bne.n	8008408 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80084f4:	4b0f      	ldr	r3, [pc, #60]	@ (8008534 <xQueueReceive+0x1c0>)
 80084f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084fa:	601a      	str	r2, [r3, #0]
 80084fc:	f3bf 8f4f 	dsb	sy
 8008500:	f3bf 8f6f 	isb	sy
 8008504:	e780      	b.n	8008408 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008506:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008508:	f000 f8a6 	bl	8008658 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800850c:	f000 fbd4 	bl	8008cb8 <xTaskResumeAll>
 8008510:	e77a      	b.n	8008408 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008512:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008514:	f000 f8a0 	bl	8008658 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008518:	f000 fbce 	bl	8008cb8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800851c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800851e:	f000 f8ed 	bl	80086fc <prvIsQueueEmpty>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	f43f af6f 	beq.w	8008408 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800852a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800852c:	4618      	mov	r0, r3
 800852e:	3730      	adds	r7, #48	@ 0x30
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	e000ed04 	.word	0xe000ed04

08008538 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b086      	sub	sp, #24
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008544:	2300      	movs	r3, #0
 8008546:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800854c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008552:	2b00      	cmp	r3, #0
 8008554:	d10d      	bne.n	8008572 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d14d      	bne.n	80085fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	4618      	mov	r0, r3
 8008564:	f000 ffc6 	bl	80094f4 <xTaskPriorityDisinherit>
 8008568:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2200      	movs	r2, #0
 800856e:	609a      	str	r2, [r3, #8]
 8008570:	e043      	b.n	80085fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d119      	bne.n	80085ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6858      	ldr	r0, [r3, #4]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008580:	461a      	mov	r2, r3
 8008582:	68b9      	ldr	r1, [r7, #8]
 8008584:	f00f fb21 	bl	8017bca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	685a      	ldr	r2, [r3, #4]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008590:	441a      	add	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	685a      	ldr	r2, [r3, #4]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d32b      	bcc.n	80085fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	605a      	str	r2, [r3, #4]
 80085aa:	e026      	b.n	80085fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	68d8      	ldr	r0, [r3, #12]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085b4:	461a      	mov	r2, r3
 80085b6:	68b9      	ldr	r1, [r7, #8]
 80085b8:	f00f fb07 	bl	8017bca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	68da      	ldr	r2, [r3, #12]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085c4:	425b      	negs	r3, r3
 80085c6:	441a      	add	r2, r3
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	68da      	ldr	r2, [r3, #12]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d207      	bcs.n	80085e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	689a      	ldr	r2, [r3, #8]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085e0:	425b      	negs	r3, r3
 80085e2:	441a      	add	r2, r3
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d105      	bne.n	80085fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d002      	beq.n	80085fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	3b01      	subs	r3, #1
 80085f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	1c5a      	adds	r2, r3, #1
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008602:	697b      	ldr	r3, [r7, #20]
}
 8008604:	4618      	mov	r0, r3
 8008606:	3718      	adds	r7, #24
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800861a:	2b00      	cmp	r3, #0
 800861c:	d018      	beq.n	8008650 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	68da      	ldr	r2, [r3, #12]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008626:	441a      	add	r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	68da      	ldr	r2, [r3, #12]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	429a      	cmp	r2, r3
 8008636:	d303      	bcc.n	8008640 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	68d9      	ldr	r1, [r3, #12]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008648:	461a      	mov	r2, r3
 800864a:	6838      	ldr	r0, [r7, #0]
 800864c:	f00f fabd 	bl	8017bca <memcpy>
	}
}
 8008650:	bf00      	nop
 8008652:	3708      	adds	r7, #8
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008660:	f001 fc9a 	bl	8009f98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800866a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800866c:	e011      	b.n	8008692 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008672:	2b00      	cmp	r3, #0
 8008674:	d012      	beq.n	800869c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	3324      	adds	r3, #36	@ 0x24
 800867a:	4618      	mov	r0, r3
 800867c:	f000 fd34 	bl	80090e8 <xTaskRemoveFromEventList>
 8008680:	4603      	mov	r3, r0
 8008682:	2b00      	cmp	r3, #0
 8008684:	d001      	beq.n	800868a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008686:	f000 fe35 	bl	80092f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800868a:	7bfb      	ldrb	r3, [r7, #15]
 800868c:	3b01      	subs	r3, #1
 800868e:	b2db      	uxtb	r3, r3
 8008690:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008696:	2b00      	cmp	r3, #0
 8008698:	dce9      	bgt.n	800866e <prvUnlockQueue+0x16>
 800869a:	e000      	b.n	800869e <prvUnlockQueue+0x46>
					break;
 800869c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	22ff      	movs	r2, #255	@ 0xff
 80086a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80086a6:	f001 fca9 	bl	8009ffc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80086aa:	f001 fc75 	bl	8009f98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80086b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80086b6:	e011      	b.n	80086dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	691b      	ldr	r3, [r3, #16]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d012      	beq.n	80086e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	3310      	adds	r3, #16
 80086c4:	4618      	mov	r0, r3
 80086c6:	f000 fd0f 	bl	80090e8 <xTaskRemoveFromEventList>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d001      	beq.n	80086d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80086d0:	f000 fe10 	bl	80092f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80086d4:	7bbb      	ldrb	r3, [r7, #14]
 80086d6:	3b01      	subs	r3, #1
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80086dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	dce9      	bgt.n	80086b8 <prvUnlockQueue+0x60>
 80086e4:	e000      	b.n	80086e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80086e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	22ff      	movs	r2, #255	@ 0xff
 80086ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80086f0:	f001 fc84 	bl	8009ffc <vPortExitCritical>
}
 80086f4:	bf00      	nop
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008704:	f001 fc48 	bl	8009f98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800870c:	2b00      	cmp	r3, #0
 800870e:	d102      	bne.n	8008716 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008710:	2301      	movs	r3, #1
 8008712:	60fb      	str	r3, [r7, #12]
 8008714:	e001      	b.n	800871a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008716:	2300      	movs	r3, #0
 8008718:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800871a:	f001 fc6f 	bl	8009ffc <vPortExitCritical>

	return xReturn;
 800871e:	68fb      	ldr	r3, [r7, #12]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008730:	f001 fc32 	bl	8009f98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800873c:	429a      	cmp	r2, r3
 800873e:	d102      	bne.n	8008746 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008740:	2301      	movs	r3, #1
 8008742:	60fb      	str	r3, [r7, #12]
 8008744:	e001      	b.n	800874a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008746:	2300      	movs	r3, #0
 8008748:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800874a:	f001 fc57 	bl	8009ffc <vPortExitCritical>

	return xReturn;
 800874e:	68fb      	ldr	r3, [r7, #12]
}
 8008750:	4618      	mov	r0, r3
 8008752:	3710      	adds	r7, #16
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008758:	b480      	push	{r7}
 800875a:	b085      	sub	sp, #20
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008762:	2300      	movs	r3, #0
 8008764:	60fb      	str	r3, [r7, #12]
 8008766:	e014      	b.n	8008792 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008768:	4a0f      	ldr	r2, [pc, #60]	@ (80087a8 <vQueueAddToRegistry+0x50>)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d10b      	bne.n	800878c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008774:	490c      	ldr	r1, [pc, #48]	@ (80087a8 <vQueueAddToRegistry+0x50>)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	683a      	ldr	r2, [r7, #0]
 800877a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800877e:	4a0a      	ldr	r2, [pc, #40]	@ (80087a8 <vQueueAddToRegistry+0x50>)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	00db      	lsls	r3, r3, #3
 8008784:	4413      	add	r3, r2
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800878a:	e006      	b.n	800879a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	3301      	adds	r3, #1
 8008790:	60fb      	str	r3, [r7, #12]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2b07      	cmp	r3, #7
 8008796:	d9e7      	bls.n	8008768 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008798:	bf00      	nop
 800879a:	bf00      	nop
 800879c:	3714      	adds	r7, #20
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	20004edc 	.word	0x20004edc

080087ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b086      	sub	sp, #24
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80087bc:	f001 fbec 	bl	8009f98 <vPortEnterCritical>
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80087c6:	b25b      	sxtb	r3, r3
 80087c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087cc:	d103      	bne.n	80087d6 <vQueueWaitForMessageRestricted+0x2a>
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80087dc:	b25b      	sxtb	r3, r3
 80087de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087e2:	d103      	bne.n	80087ec <vQueueWaitForMessageRestricted+0x40>
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087ec:	f001 fc06 	bl	8009ffc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d106      	bne.n	8008806 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	3324      	adds	r3, #36	@ 0x24
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	68b9      	ldr	r1, [r7, #8]
 8008800:	4618      	mov	r0, r3
 8008802:	f000 fc45 	bl	8009090 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008806:	6978      	ldr	r0, [r7, #20]
 8008808:	f7ff ff26 	bl	8008658 <prvUnlockQueue>
	}
 800880c:	bf00      	nop
 800880e:	3718      	adds	r7, #24
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008814:	b580      	push	{r7, lr}
 8008816:	b08e      	sub	sp, #56	@ 0x38
 8008818:	af04      	add	r7, sp, #16
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	607a      	str	r2, [r7, #4]
 8008820:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008824:	2b00      	cmp	r3, #0
 8008826:	d10b      	bne.n	8008840 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800882c:	f383 8811 	msr	BASEPRI, r3
 8008830:	f3bf 8f6f 	isb	sy
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	623b      	str	r3, [r7, #32]
}
 800883a:	bf00      	nop
 800883c:	bf00      	nop
 800883e:	e7fd      	b.n	800883c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10b      	bne.n	800885e <xTaskCreateStatic+0x4a>
	__asm volatile
 8008846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	61fb      	str	r3, [r7, #28]
}
 8008858:	bf00      	nop
 800885a:	bf00      	nop
 800885c:	e7fd      	b.n	800885a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800885e:	235c      	movs	r3, #92	@ 0x5c
 8008860:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	2b5c      	cmp	r3, #92	@ 0x5c
 8008866:	d00b      	beq.n	8008880 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800886c:	f383 8811 	msr	BASEPRI, r3
 8008870:	f3bf 8f6f 	isb	sy
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	61bb      	str	r3, [r7, #24]
}
 800887a:	bf00      	nop
 800887c:	bf00      	nop
 800887e:	e7fd      	b.n	800887c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008880:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008884:	2b00      	cmp	r3, #0
 8008886:	d01e      	beq.n	80088c6 <xTaskCreateStatic+0xb2>
 8008888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800888a:	2b00      	cmp	r3, #0
 800888c:	d01b      	beq.n	80088c6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800888e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008890:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008894:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008896:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800889a:	2202      	movs	r2, #2
 800889c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80088a0:	2300      	movs	r3, #0
 80088a2:	9303      	str	r3, [sp, #12]
 80088a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a6:	9302      	str	r3, [sp, #8]
 80088a8:	f107 0314 	add.w	r3, r7, #20
 80088ac:	9301      	str	r3, [sp, #4]
 80088ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b0:	9300      	str	r3, [sp, #0]
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	68b9      	ldr	r1, [r7, #8]
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	f000 f850 	bl	800895e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80088be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80088c0:	f000 f8de 	bl	8008a80 <prvAddNewTaskToReadyList>
 80088c4:	e001      	b.n	80088ca <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80088c6:	2300      	movs	r3, #0
 80088c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80088ca:	697b      	ldr	r3, [r7, #20]
	}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3728      	adds	r7, #40	@ 0x28
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b08c      	sub	sp, #48	@ 0x30
 80088d8:	af04      	add	r7, sp, #16
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	603b      	str	r3, [r7, #0]
 80088e0:	4613      	mov	r3, r2
 80088e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80088e4:	88fb      	ldrh	r3, [r7, #6]
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	4618      	mov	r0, r3
 80088ea:	f001 fc77 	bl	800a1dc <pvPortMalloc>
 80088ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d00e      	beq.n	8008914 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80088f6:	205c      	movs	r0, #92	@ 0x5c
 80088f8:	f001 fc70 	bl	800a1dc <pvPortMalloc>
 80088fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80088fe:	69fb      	ldr	r3, [r7, #28]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d003      	beq.n	800890c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	697a      	ldr	r2, [r7, #20]
 8008908:	631a      	str	r2, [r3, #48]	@ 0x30
 800890a:	e005      	b.n	8008918 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800890c:	6978      	ldr	r0, [r7, #20]
 800890e:	f001 fd33 	bl	800a378 <vPortFree>
 8008912:	e001      	b.n	8008918 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008914:	2300      	movs	r3, #0
 8008916:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d017      	beq.n	800894e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008926:	88fa      	ldrh	r2, [r7, #6]
 8008928:	2300      	movs	r3, #0
 800892a:	9303      	str	r3, [sp, #12]
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	9302      	str	r3, [sp, #8]
 8008930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008932:	9301      	str	r3, [sp, #4]
 8008934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008936:	9300      	str	r3, [sp, #0]
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	68b9      	ldr	r1, [r7, #8]
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f000 f80e 	bl	800895e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008942:	69f8      	ldr	r0, [r7, #28]
 8008944:	f000 f89c 	bl	8008a80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008948:	2301      	movs	r3, #1
 800894a:	61bb      	str	r3, [r7, #24]
 800894c:	e002      	b.n	8008954 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800894e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008952:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008954:	69bb      	ldr	r3, [r7, #24]
	}
 8008956:	4618      	mov	r0, r3
 8008958:	3720      	adds	r7, #32
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b088      	sub	sp, #32
 8008962:	af00      	add	r7, sp, #0
 8008964:	60f8      	str	r0, [r7, #12]
 8008966:	60b9      	str	r1, [r7, #8]
 8008968:	607a      	str	r2, [r7, #4]
 800896a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800896c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800896e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	461a      	mov	r2, r3
 8008976:	21a5      	movs	r1, #165	@ 0xa5
 8008978:	f00f f85e 	bl	8017a38 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800897c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008986:	3b01      	subs	r3, #1
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4413      	add	r3, r2
 800898c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800898e:	69bb      	ldr	r3, [r7, #24]
 8008990:	f023 0307 	bic.w	r3, r3, #7
 8008994:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	f003 0307 	and.w	r3, r3, #7
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00b      	beq.n	80089b8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80089a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	617b      	str	r3, [r7, #20]
}
 80089b2:	bf00      	nop
 80089b4:	bf00      	nop
 80089b6:	e7fd      	b.n	80089b4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d01f      	beq.n	80089fe <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089be:	2300      	movs	r3, #0
 80089c0:	61fb      	str	r3, [r7, #28]
 80089c2:	e012      	b.n	80089ea <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80089c4:	68ba      	ldr	r2, [r7, #8]
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	4413      	add	r3, r2
 80089ca:	7819      	ldrb	r1, [r3, #0]
 80089cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	4413      	add	r3, r2
 80089d2:	3334      	adds	r3, #52	@ 0x34
 80089d4:	460a      	mov	r2, r1
 80089d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80089d8:	68ba      	ldr	r2, [r7, #8]
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	4413      	add	r3, r2
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d006      	beq.n	80089f2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	3301      	adds	r3, #1
 80089e8:	61fb      	str	r3, [r7, #28]
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	2b0f      	cmp	r3, #15
 80089ee:	d9e9      	bls.n	80089c4 <prvInitialiseNewTask+0x66>
 80089f0:	e000      	b.n	80089f4 <prvInitialiseNewTask+0x96>
			{
				break;
 80089f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80089f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80089fc:	e003      	b.n	8008a06 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80089fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a00:	2200      	movs	r2, #0
 8008a02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a08:	2b37      	cmp	r3, #55	@ 0x37
 8008a0a:	d901      	bls.n	8008a10 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008a0c:	2337      	movs	r3, #55	@ 0x37
 8008a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a14:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a1a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a1e:	2200      	movs	r2, #0
 8008a20:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a24:	3304      	adds	r3, #4
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7ff f966 	bl	8007cf8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a2e:	3318      	adds	r3, #24
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7ff f961 	bl	8007cf8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a3e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a4a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a4e:	2200      	movs	r2, #0
 8008a50:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a54:	2200      	movs	r2, #0
 8008a56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008a5a:	683a      	ldr	r2, [r7, #0]
 8008a5c:	68f9      	ldr	r1, [r7, #12]
 8008a5e:	69b8      	ldr	r0, [r7, #24]
 8008a60:	f001 f966 	bl	8009d30 <pxPortInitialiseStack>
 8008a64:	4602      	mov	r2, r0
 8008a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a68:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d002      	beq.n	8008a76 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a76:	bf00      	nop
 8008a78:	3720      	adds	r7, #32
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
	...

08008a80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008a88:	f001 fa86 	bl	8009f98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8008b44 <prvAddNewTaskToReadyList+0xc4>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	3301      	adds	r3, #1
 8008a92:	4a2c      	ldr	r2, [pc, #176]	@ (8008b44 <prvAddNewTaskToReadyList+0xc4>)
 8008a94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008a96:	4b2c      	ldr	r3, [pc, #176]	@ (8008b48 <prvAddNewTaskToReadyList+0xc8>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d109      	bne.n	8008ab2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008a9e:	4a2a      	ldr	r2, [pc, #168]	@ (8008b48 <prvAddNewTaskToReadyList+0xc8>)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008aa4:	4b27      	ldr	r3, [pc, #156]	@ (8008b44 <prvAddNewTaskToReadyList+0xc4>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d110      	bne.n	8008ace <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008aac:	f000 fc46 	bl	800933c <prvInitialiseTaskLists>
 8008ab0:	e00d      	b.n	8008ace <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008ab2:	4b26      	ldr	r3, [pc, #152]	@ (8008b4c <prvAddNewTaskToReadyList+0xcc>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d109      	bne.n	8008ace <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008aba:	4b23      	ldr	r3, [pc, #140]	@ (8008b48 <prvAddNewTaskToReadyList+0xc8>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d802      	bhi.n	8008ace <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008ac8:	4a1f      	ldr	r2, [pc, #124]	@ (8008b48 <prvAddNewTaskToReadyList+0xc8>)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008ace:	4b20      	ldr	r3, [pc, #128]	@ (8008b50 <prvAddNewTaskToReadyList+0xd0>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	4a1e      	ldr	r2, [pc, #120]	@ (8008b50 <prvAddNewTaskToReadyList+0xd0>)
 8008ad6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8008b50 <prvAddNewTaskToReadyList+0xd0>)
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8008b54 <prvAddNewTaskToReadyList+0xd4>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d903      	bls.n	8008af4 <prvAddNewTaskToReadyList+0x74>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af0:	4a18      	ldr	r2, [pc, #96]	@ (8008b54 <prvAddNewTaskToReadyList+0xd4>)
 8008af2:	6013      	str	r3, [r2, #0]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008af8:	4613      	mov	r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4413      	add	r3, r2
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	4a15      	ldr	r2, [pc, #84]	@ (8008b58 <prvAddNewTaskToReadyList+0xd8>)
 8008b02:	441a      	add	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	3304      	adds	r3, #4
 8008b08:	4619      	mov	r1, r3
 8008b0a:	4610      	mov	r0, r2
 8008b0c:	f7ff f901 	bl	8007d12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008b10:	f001 fa74 	bl	8009ffc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008b14:	4b0d      	ldr	r3, [pc, #52]	@ (8008b4c <prvAddNewTaskToReadyList+0xcc>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00e      	beq.n	8008b3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8008b48 <prvAddNewTaskToReadyList+0xc8>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d207      	bcs.n	8008b3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8008b5c <prvAddNewTaskToReadyList+0xdc>)
 8008b2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b30:	601a      	str	r2, [r3, #0]
 8008b32:	f3bf 8f4f 	dsb	sy
 8008b36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b3a:	bf00      	nop
 8008b3c:	3708      	adds	r7, #8
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	200053f0 	.word	0x200053f0
 8008b48:	20004f1c 	.word	0x20004f1c
 8008b4c:	200053fc 	.word	0x200053fc
 8008b50:	2000540c 	.word	0x2000540c
 8008b54:	200053f8 	.word	0x200053f8
 8008b58:	20004f20 	.word	0x20004f20
 8008b5c:	e000ed04 	.word	0xe000ed04

08008b60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d018      	beq.n	8008ba4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008b72:	4b14      	ldr	r3, [pc, #80]	@ (8008bc4 <vTaskDelay+0x64>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00b      	beq.n	8008b92 <vTaskDelay+0x32>
	__asm volatile
 8008b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b7e:	f383 8811 	msr	BASEPRI, r3
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	f3bf 8f4f 	dsb	sy
 8008b8a:	60bb      	str	r3, [r7, #8]
}
 8008b8c:	bf00      	nop
 8008b8e:	bf00      	nop
 8008b90:	e7fd      	b.n	8008b8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008b92:	f000 f883 	bl	8008c9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008b96:	2100      	movs	r1, #0
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 fd1b 	bl	80095d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008b9e:	f000 f88b 	bl	8008cb8 <xTaskResumeAll>
 8008ba2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d107      	bne.n	8008bba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008baa:	4b07      	ldr	r3, [pc, #28]	@ (8008bc8 <vTaskDelay+0x68>)
 8008bac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bb0:	601a      	str	r2, [r3, #0]
 8008bb2:	f3bf 8f4f 	dsb	sy
 8008bb6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008bba:	bf00      	nop
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	20005418 	.word	0x20005418
 8008bc8:	e000ed04 	.word	0xe000ed04

08008bcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b08a      	sub	sp, #40	@ 0x28
 8008bd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008bda:	463a      	mov	r2, r7
 8008bdc:	1d39      	adds	r1, r7, #4
 8008bde:	f107 0308 	add.w	r3, r7, #8
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7ff f834 	bl	8007c50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008be8:	6839      	ldr	r1, [r7, #0]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	68ba      	ldr	r2, [r7, #8]
 8008bee:	9202      	str	r2, [sp, #8]
 8008bf0:	9301      	str	r3, [sp, #4]
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	460a      	mov	r2, r1
 8008bfa:	4922      	ldr	r1, [pc, #136]	@ (8008c84 <vTaskStartScheduler+0xb8>)
 8008bfc:	4822      	ldr	r0, [pc, #136]	@ (8008c88 <vTaskStartScheduler+0xbc>)
 8008bfe:	f7ff fe09 	bl	8008814 <xTaskCreateStatic>
 8008c02:	4603      	mov	r3, r0
 8008c04:	4a21      	ldr	r2, [pc, #132]	@ (8008c8c <vTaskStartScheduler+0xc0>)
 8008c06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008c08:	4b20      	ldr	r3, [pc, #128]	@ (8008c8c <vTaskStartScheduler+0xc0>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d002      	beq.n	8008c16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008c10:	2301      	movs	r3, #1
 8008c12:	617b      	str	r3, [r7, #20]
 8008c14:	e001      	b.n	8008c1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008c16:	2300      	movs	r3, #0
 8008c18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d102      	bne.n	8008c26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008c20:	f000 fd2c 	bl	800967c <xTimerCreateTimerTask>
 8008c24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d116      	bne.n	8008c5a <vTaskStartScheduler+0x8e>
	__asm volatile
 8008c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c30:	f383 8811 	msr	BASEPRI, r3
 8008c34:	f3bf 8f6f 	isb	sy
 8008c38:	f3bf 8f4f 	dsb	sy
 8008c3c:	613b      	str	r3, [r7, #16]
}
 8008c3e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008c40:	4b13      	ldr	r3, [pc, #76]	@ (8008c90 <vTaskStartScheduler+0xc4>)
 8008c42:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008c46:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008c48:	4b12      	ldr	r3, [pc, #72]	@ (8008c94 <vTaskStartScheduler+0xc8>)
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008c4e:	4b12      	ldr	r3, [pc, #72]	@ (8008c98 <vTaskStartScheduler+0xcc>)
 8008c50:	2200      	movs	r2, #0
 8008c52:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008c54:	f001 f8fc 	bl	8009e50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008c58:	e00f      	b.n	8008c7a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c60:	d10b      	bne.n	8008c7a <vTaskStartScheduler+0xae>
	__asm volatile
 8008c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c66:	f383 8811 	msr	BASEPRI, r3
 8008c6a:	f3bf 8f6f 	isb	sy
 8008c6e:	f3bf 8f4f 	dsb	sy
 8008c72:	60fb      	str	r3, [r7, #12]
}
 8008c74:	bf00      	nop
 8008c76:	bf00      	nop
 8008c78:	e7fd      	b.n	8008c76 <vTaskStartScheduler+0xaa>
}
 8008c7a:	bf00      	nop
 8008c7c:	3718      	adds	r7, #24
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	08018a18 	.word	0x08018a18
 8008c88:	0800930d 	.word	0x0800930d
 8008c8c:	20005414 	.word	0x20005414
 8008c90:	20005410 	.word	0x20005410
 8008c94:	200053fc 	.word	0x200053fc
 8008c98:	200053f4 	.word	0x200053f4

08008c9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008ca0:	4b04      	ldr	r3, [pc, #16]	@ (8008cb4 <vTaskSuspendAll+0x18>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	4a03      	ldr	r2, [pc, #12]	@ (8008cb4 <vTaskSuspendAll+0x18>)
 8008ca8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008caa:	bf00      	nop
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr
 8008cb4:	20005418 	.word	0x20005418

08008cb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008cc6:	4b42      	ldr	r3, [pc, #264]	@ (8008dd0 <xTaskResumeAll+0x118>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d10b      	bne.n	8008ce6 <xTaskResumeAll+0x2e>
	__asm volatile
 8008cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	603b      	str	r3, [r7, #0]
}
 8008ce0:	bf00      	nop
 8008ce2:	bf00      	nop
 8008ce4:	e7fd      	b.n	8008ce2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008ce6:	f001 f957 	bl	8009f98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008cea:	4b39      	ldr	r3, [pc, #228]	@ (8008dd0 <xTaskResumeAll+0x118>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	3b01      	subs	r3, #1
 8008cf0:	4a37      	ldr	r2, [pc, #220]	@ (8008dd0 <xTaskResumeAll+0x118>)
 8008cf2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cf4:	4b36      	ldr	r3, [pc, #216]	@ (8008dd0 <xTaskResumeAll+0x118>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d162      	bne.n	8008dc2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008cfc:	4b35      	ldr	r3, [pc, #212]	@ (8008dd4 <xTaskResumeAll+0x11c>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d05e      	beq.n	8008dc2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d04:	e02f      	b.n	8008d66 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d06:	4b34      	ldr	r3, [pc, #208]	@ (8008dd8 <xTaskResumeAll+0x120>)
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	3318      	adds	r3, #24
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7ff f85a 	bl	8007dcc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	3304      	adds	r3, #4
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f7ff f855 	bl	8007dcc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d26:	4b2d      	ldr	r3, [pc, #180]	@ (8008ddc <xTaskResumeAll+0x124>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d903      	bls.n	8008d36 <xTaskResumeAll+0x7e>
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d32:	4a2a      	ldr	r2, [pc, #168]	@ (8008ddc <xTaskResumeAll+0x124>)
 8008d34:	6013      	str	r3, [r2, #0]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	4413      	add	r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	4a27      	ldr	r2, [pc, #156]	@ (8008de0 <xTaskResumeAll+0x128>)
 8008d44:	441a      	add	r2, r3
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	3304      	adds	r3, #4
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	4610      	mov	r0, r2
 8008d4e:	f7fe ffe0 	bl	8007d12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d56:	4b23      	ldr	r3, [pc, #140]	@ (8008de4 <xTaskResumeAll+0x12c>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d302      	bcc.n	8008d66 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008d60:	4b21      	ldr	r3, [pc, #132]	@ (8008de8 <xTaskResumeAll+0x130>)
 8008d62:	2201      	movs	r2, #1
 8008d64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d66:	4b1c      	ldr	r3, [pc, #112]	@ (8008dd8 <xTaskResumeAll+0x120>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1cb      	bne.n	8008d06 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d001      	beq.n	8008d78 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008d74:	f000 fb80 	bl	8009478 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008d78:	4b1c      	ldr	r3, [pc, #112]	@ (8008dec <xTaskResumeAll+0x134>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d010      	beq.n	8008da6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008d84:	f000 f846 	bl	8008e14 <xTaskIncrementTick>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d002      	beq.n	8008d94 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008d8e:	4b16      	ldr	r3, [pc, #88]	@ (8008de8 <xTaskResumeAll+0x130>)
 8008d90:	2201      	movs	r2, #1
 8008d92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	3b01      	subs	r3, #1
 8008d98:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d1f1      	bne.n	8008d84 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008da0:	4b12      	ldr	r3, [pc, #72]	@ (8008dec <xTaskResumeAll+0x134>)
 8008da2:	2200      	movs	r2, #0
 8008da4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008da6:	4b10      	ldr	r3, [pc, #64]	@ (8008de8 <xTaskResumeAll+0x130>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d009      	beq.n	8008dc2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008dae:	2301      	movs	r3, #1
 8008db0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008db2:	4b0f      	ldr	r3, [pc, #60]	@ (8008df0 <xTaskResumeAll+0x138>)
 8008db4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008db8:	601a      	str	r2, [r3, #0]
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008dc2:	f001 f91b 	bl	8009ffc <vPortExitCritical>

	return xAlreadyYielded;
 8008dc6:	68bb      	ldr	r3, [r7, #8]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	20005418 	.word	0x20005418
 8008dd4:	200053f0 	.word	0x200053f0
 8008dd8:	200053b0 	.word	0x200053b0
 8008ddc:	200053f8 	.word	0x200053f8
 8008de0:	20004f20 	.word	0x20004f20
 8008de4:	20004f1c 	.word	0x20004f1c
 8008de8:	20005404 	.word	0x20005404
 8008dec:	20005400 	.word	0x20005400
 8008df0:	e000ed04 	.word	0xe000ed04

08008df4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008dfa:	4b05      	ldr	r3, [pc, #20]	@ (8008e10 <xTaskGetTickCount+0x1c>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008e00:	687b      	ldr	r3, [r7, #4]
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	370c      	adds	r7, #12
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	200053f4 	.word	0x200053f4

08008e14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b086      	sub	sp, #24
 8008e18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e1e:	4b4f      	ldr	r3, [pc, #316]	@ (8008f5c <xTaskIncrementTick+0x148>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f040 8090 	bne.w	8008f48 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008e28:	4b4d      	ldr	r3, [pc, #308]	@ (8008f60 <xTaskIncrementTick+0x14c>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008e30:	4a4b      	ldr	r2, [pc, #300]	@ (8008f60 <xTaskIncrementTick+0x14c>)
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d121      	bne.n	8008e80 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008e3c:	4b49      	ldr	r3, [pc, #292]	@ (8008f64 <xTaskIncrementTick+0x150>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00b      	beq.n	8008e5e <xTaskIncrementTick+0x4a>
	__asm volatile
 8008e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e4a:	f383 8811 	msr	BASEPRI, r3
 8008e4e:	f3bf 8f6f 	isb	sy
 8008e52:	f3bf 8f4f 	dsb	sy
 8008e56:	603b      	str	r3, [r7, #0]
}
 8008e58:	bf00      	nop
 8008e5a:	bf00      	nop
 8008e5c:	e7fd      	b.n	8008e5a <xTaskIncrementTick+0x46>
 8008e5e:	4b41      	ldr	r3, [pc, #260]	@ (8008f64 <xTaskIncrementTick+0x150>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	60fb      	str	r3, [r7, #12]
 8008e64:	4b40      	ldr	r3, [pc, #256]	@ (8008f68 <xTaskIncrementTick+0x154>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a3e      	ldr	r2, [pc, #248]	@ (8008f64 <xTaskIncrementTick+0x150>)
 8008e6a:	6013      	str	r3, [r2, #0]
 8008e6c:	4a3e      	ldr	r2, [pc, #248]	@ (8008f68 <xTaskIncrementTick+0x154>)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	6013      	str	r3, [r2, #0]
 8008e72:	4b3e      	ldr	r3, [pc, #248]	@ (8008f6c <xTaskIncrementTick+0x158>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	3301      	adds	r3, #1
 8008e78:	4a3c      	ldr	r2, [pc, #240]	@ (8008f6c <xTaskIncrementTick+0x158>)
 8008e7a:	6013      	str	r3, [r2, #0]
 8008e7c:	f000 fafc 	bl	8009478 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008e80:	4b3b      	ldr	r3, [pc, #236]	@ (8008f70 <xTaskIncrementTick+0x15c>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	693a      	ldr	r2, [r7, #16]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d349      	bcc.n	8008f1e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e8a:	4b36      	ldr	r3, [pc, #216]	@ (8008f64 <xTaskIncrementTick+0x150>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d104      	bne.n	8008e9e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e94:	4b36      	ldr	r3, [pc, #216]	@ (8008f70 <xTaskIncrementTick+0x15c>)
 8008e96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008e9a:	601a      	str	r2, [r3, #0]
					break;
 8008e9c:	e03f      	b.n	8008f1e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e9e:	4b31      	ldr	r3, [pc, #196]	@ (8008f64 <xTaskIncrementTick+0x150>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	68db      	ldr	r3, [r3, #12]
 8008ea6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008eae:	693a      	ldr	r2, [r7, #16]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d203      	bcs.n	8008ebe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008eb6:	4a2e      	ldr	r2, [pc, #184]	@ (8008f70 <xTaskIncrementTick+0x15c>)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008ebc:	e02f      	b.n	8008f1e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	3304      	adds	r3, #4
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7fe ff82 	bl	8007dcc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d004      	beq.n	8008eda <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	3318      	adds	r3, #24
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7fe ff79 	bl	8007dcc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ede:	4b25      	ldr	r3, [pc, #148]	@ (8008f74 <xTaskIncrementTick+0x160>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d903      	bls.n	8008eee <xTaskIncrementTick+0xda>
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eea:	4a22      	ldr	r2, [pc, #136]	@ (8008f74 <xTaskIncrementTick+0x160>)
 8008eec:	6013      	str	r3, [r2, #0]
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	4413      	add	r3, r2
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	4a1f      	ldr	r2, [pc, #124]	@ (8008f78 <xTaskIncrementTick+0x164>)
 8008efc:	441a      	add	r2, r3
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	3304      	adds	r3, #4
 8008f02:	4619      	mov	r1, r3
 8008f04:	4610      	mov	r0, r2
 8008f06:	f7fe ff04 	bl	8007d12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f0e:	4b1b      	ldr	r3, [pc, #108]	@ (8008f7c <xTaskIncrementTick+0x168>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d3b8      	bcc.n	8008e8a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f1c:	e7b5      	b.n	8008e8a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008f1e:	4b17      	ldr	r3, [pc, #92]	@ (8008f7c <xTaskIncrementTick+0x168>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f24:	4914      	ldr	r1, [pc, #80]	@ (8008f78 <xTaskIncrementTick+0x164>)
 8008f26:	4613      	mov	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4413      	add	r3, r2
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	440b      	add	r3, r1
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d901      	bls.n	8008f3a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008f36:	2301      	movs	r3, #1
 8008f38:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008f3a:	4b11      	ldr	r3, [pc, #68]	@ (8008f80 <xTaskIncrementTick+0x16c>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d007      	beq.n	8008f52 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008f42:	2301      	movs	r3, #1
 8008f44:	617b      	str	r3, [r7, #20]
 8008f46:	e004      	b.n	8008f52 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008f48:	4b0e      	ldr	r3, [pc, #56]	@ (8008f84 <xTaskIncrementTick+0x170>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	4a0d      	ldr	r2, [pc, #52]	@ (8008f84 <xTaskIncrementTick+0x170>)
 8008f50:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008f52:	697b      	ldr	r3, [r7, #20]
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3718      	adds	r7, #24
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	20005418 	.word	0x20005418
 8008f60:	200053f4 	.word	0x200053f4
 8008f64:	200053a8 	.word	0x200053a8
 8008f68:	200053ac 	.word	0x200053ac
 8008f6c:	20005408 	.word	0x20005408
 8008f70:	20005410 	.word	0x20005410
 8008f74:	200053f8 	.word	0x200053f8
 8008f78:	20004f20 	.word	0x20004f20
 8008f7c:	20004f1c 	.word	0x20004f1c
 8008f80:	20005404 	.word	0x20005404
 8008f84:	20005400 	.word	0x20005400

08008f88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008f8e:	4b28      	ldr	r3, [pc, #160]	@ (8009030 <vTaskSwitchContext+0xa8>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d003      	beq.n	8008f9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008f96:	4b27      	ldr	r3, [pc, #156]	@ (8009034 <vTaskSwitchContext+0xac>)
 8008f98:	2201      	movs	r2, #1
 8008f9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008f9c:	e042      	b.n	8009024 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008f9e:	4b25      	ldr	r3, [pc, #148]	@ (8009034 <vTaskSwitchContext+0xac>)
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fa4:	4b24      	ldr	r3, [pc, #144]	@ (8009038 <vTaskSwitchContext+0xb0>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	60fb      	str	r3, [r7, #12]
 8008faa:	e011      	b.n	8008fd0 <vTaskSwitchContext+0x48>
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d10b      	bne.n	8008fca <vTaskSwitchContext+0x42>
	__asm volatile
 8008fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fb6:	f383 8811 	msr	BASEPRI, r3
 8008fba:	f3bf 8f6f 	isb	sy
 8008fbe:	f3bf 8f4f 	dsb	sy
 8008fc2:	607b      	str	r3, [r7, #4]
}
 8008fc4:	bf00      	nop
 8008fc6:	bf00      	nop
 8008fc8:	e7fd      	b.n	8008fc6 <vTaskSwitchContext+0x3e>
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	60fb      	str	r3, [r7, #12]
 8008fd0:	491a      	ldr	r1, [pc, #104]	@ (800903c <vTaskSwitchContext+0xb4>)
 8008fd2:	68fa      	ldr	r2, [r7, #12]
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	4413      	add	r3, r2
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	440b      	add	r3, r1
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d0e3      	beq.n	8008fac <vTaskSwitchContext+0x24>
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	4413      	add	r3, r2
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	4a13      	ldr	r2, [pc, #76]	@ (800903c <vTaskSwitchContext+0xb4>)
 8008ff0:	4413      	add	r3, r2
 8008ff2:	60bb      	str	r3, [r7, #8]
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	685a      	ldr	r2, [r3, #4]
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	605a      	str	r2, [r3, #4]
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	685a      	ldr	r2, [r3, #4]
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	3308      	adds	r3, #8
 8009006:	429a      	cmp	r2, r3
 8009008:	d104      	bne.n	8009014 <vTaskSwitchContext+0x8c>
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	685a      	ldr	r2, [r3, #4]
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	605a      	str	r2, [r3, #4]
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	4a09      	ldr	r2, [pc, #36]	@ (8009040 <vTaskSwitchContext+0xb8>)
 800901c:	6013      	str	r3, [r2, #0]
 800901e:	4a06      	ldr	r2, [pc, #24]	@ (8009038 <vTaskSwitchContext+0xb0>)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6013      	str	r3, [r2, #0]
}
 8009024:	bf00      	nop
 8009026:	3714      	adds	r7, #20
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr
 8009030:	20005418 	.word	0x20005418
 8009034:	20005404 	.word	0x20005404
 8009038:	200053f8 	.word	0x200053f8
 800903c:	20004f20 	.word	0x20004f20
 8009040:	20004f1c 	.word	0x20004f1c

08009044 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d10b      	bne.n	800906c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009058:	f383 8811 	msr	BASEPRI, r3
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	60fb      	str	r3, [r7, #12]
}
 8009066:	bf00      	nop
 8009068:	bf00      	nop
 800906a:	e7fd      	b.n	8009068 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800906c:	4b07      	ldr	r3, [pc, #28]	@ (800908c <vTaskPlaceOnEventList+0x48>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	3318      	adds	r3, #24
 8009072:	4619      	mov	r1, r3
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f7fe fe70 	bl	8007d5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800907a:	2101      	movs	r1, #1
 800907c:	6838      	ldr	r0, [r7, #0]
 800907e:	f000 faa9 	bl	80095d4 <prvAddCurrentTaskToDelayedList>
}
 8009082:	bf00      	nop
 8009084:	3710      	adds	r7, #16
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	20004f1c 	.word	0x20004f1c

08009090 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009090:	b580      	push	{r7, lr}
 8009092:	b086      	sub	sp, #24
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d10b      	bne.n	80090ba <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80090a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090a6:	f383 8811 	msr	BASEPRI, r3
 80090aa:	f3bf 8f6f 	isb	sy
 80090ae:	f3bf 8f4f 	dsb	sy
 80090b2:	617b      	str	r3, [r7, #20]
}
 80090b4:	bf00      	nop
 80090b6:	bf00      	nop
 80090b8:	e7fd      	b.n	80090b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80090ba:	4b0a      	ldr	r3, [pc, #40]	@ (80090e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	3318      	adds	r3, #24
 80090c0:	4619      	mov	r1, r3
 80090c2:	68f8      	ldr	r0, [r7, #12]
 80090c4:	f7fe fe25 	bl	8007d12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d002      	beq.n	80090d4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80090ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80090d2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80090d4:	6879      	ldr	r1, [r7, #4]
 80090d6:	68b8      	ldr	r0, [r7, #8]
 80090d8:	f000 fa7c 	bl	80095d4 <prvAddCurrentTaskToDelayedList>
	}
 80090dc:	bf00      	nop
 80090de:	3718      	adds	r7, #24
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	20004f1c 	.word	0x20004f1c

080090e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b086      	sub	sp, #24
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	68db      	ldr	r3, [r3, #12]
 80090f4:	68db      	ldr	r3, [r3, #12]
 80090f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d10b      	bne.n	8009116 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80090fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009102:	f383 8811 	msr	BASEPRI, r3
 8009106:	f3bf 8f6f 	isb	sy
 800910a:	f3bf 8f4f 	dsb	sy
 800910e:	60fb      	str	r3, [r7, #12]
}
 8009110:	bf00      	nop
 8009112:	bf00      	nop
 8009114:	e7fd      	b.n	8009112 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	3318      	adds	r3, #24
 800911a:	4618      	mov	r0, r3
 800911c:	f7fe fe56 	bl	8007dcc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009120:	4b1d      	ldr	r3, [pc, #116]	@ (8009198 <xTaskRemoveFromEventList+0xb0>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d11d      	bne.n	8009164 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	3304      	adds	r3, #4
 800912c:	4618      	mov	r0, r3
 800912e:	f7fe fe4d 	bl	8007dcc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009136:	4b19      	ldr	r3, [pc, #100]	@ (800919c <xTaskRemoveFromEventList+0xb4>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	429a      	cmp	r2, r3
 800913c:	d903      	bls.n	8009146 <xTaskRemoveFromEventList+0x5e>
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009142:	4a16      	ldr	r2, [pc, #88]	@ (800919c <xTaskRemoveFromEventList+0xb4>)
 8009144:	6013      	str	r3, [r2, #0]
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800914a:	4613      	mov	r3, r2
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	4413      	add	r3, r2
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	4a13      	ldr	r2, [pc, #76]	@ (80091a0 <xTaskRemoveFromEventList+0xb8>)
 8009154:	441a      	add	r2, r3
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	3304      	adds	r3, #4
 800915a:	4619      	mov	r1, r3
 800915c:	4610      	mov	r0, r2
 800915e:	f7fe fdd8 	bl	8007d12 <vListInsertEnd>
 8009162:	e005      	b.n	8009170 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	3318      	adds	r3, #24
 8009168:	4619      	mov	r1, r3
 800916a:	480e      	ldr	r0, [pc, #56]	@ (80091a4 <xTaskRemoveFromEventList+0xbc>)
 800916c:	f7fe fdd1 	bl	8007d12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009174:	4b0c      	ldr	r3, [pc, #48]	@ (80091a8 <xTaskRemoveFromEventList+0xc0>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800917a:	429a      	cmp	r2, r3
 800917c:	d905      	bls.n	800918a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800917e:	2301      	movs	r3, #1
 8009180:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009182:	4b0a      	ldr	r3, [pc, #40]	@ (80091ac <xTaskRemoveFromEventList+0xc4>)
 8009184:	2201      	movs	r2, #1
 8009186:	601a      	str	r2, [r3, #0]
 8009188:	e001      	b.n	800918e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800918a:	2300      	movs	r3, #0
 800918c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800918e:	697b      	ldr	r3, [r7, #20]
}
 8009190:	4618      	mov	r0, r3
 8009192:	3718      	adds	r7, #24
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	20005418 	.word	0x20005418
 800919c:	200053f8 	.word	0x200053f8
 80091a0:	20004f20 	.word	0x20004f20
 80091a4:	200053b0 	.word	0x200053b0
 80091a8:	20004f1c 	.word	0x20004f1c
 80091ac:	20005404 	.word	0x20005404

080091b0 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d10b      	bne.n	80091d6 <vTaskSetTimeOutState+0x26>
	__asm volatile
 80091be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091c2:	f383 8811 	msr	BASEPRI, r3
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	60fb      	str	r3, [r7, #12]
}
 80091d0:	bf00      	nop
 80091d2:	bf00      	nop
 80091d4:	e7fd      	b.n	80091d2 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 80091d6:	f000 fedf 	bl	8009f98 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80091da:	4b07      	ldr	r3, [pc, #28]	@ (80091f8 <vTaskSetTimeOutState+0x48>)
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80091e2:	4b06      	ldr	r3, [pc, #24]	@ (80091fc <vTaskSetTimeOutState+0x4c>)
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80091ea:	f000 ff07 	bl	8009ffc <vPortExitCritical>
}
 80091ee:	bf00      	nop
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	20005408 	.word	0x20005408
 80091fc:	200053f4 	.word	0x200053f4

08009200 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009208:	4b06      	ldr	r3, [pc, #24]	@ (8009224 <vTaskInternalSetTimeOutState+0x24>)
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009210:	4b05      	ldr	r3, [pc, #20]	@ (8009228 <vTaskInternalSetTimeOutState+0x28>)
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	605a      	str	r2, [r3, #4]
}
 8009218:	bf00      	nop
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr
 8009224:	20005408 	.word	0x20005408
 8009228:	200053f4 	.word	0x200053f4

0800922c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b088      	sub	sp, #32
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d10b      	bne.n	8009254 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800923c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009240:	f383 8811 	msr	BASEPRI, r3
 8009244:	f3bf 8f6f 	isb	sy
 8009248:	f3bf 8f4f 	dsb	sy
 800924c:	613b      	str	r3, [r7, #16]
}
 800924e:	bf00      	nop
 8009250:	bf00      	nop
 8009252:	e7fd      	b.n	8009250 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10b      	bne.n	8009272 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800925a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800925e:	f383 8811 	msr	BASEPRI, r3
 8009262:	f3bf 8f6f 	isb	sy
 8009266:	f3bf 8f4f 	dsb	sy
 800926a:	60fb      	str	r3, [r7, #12]
}
 800926c:	bf00      	nop
 800926e:	bf00      	nop
 8009270:	e7fd      	b.n	800926e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009272:	f000 fe91 	bl	8009f98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009276:	4b1d      	ldr	r3, [pc, #116]	@ (80092ec <xTaskCheckForTimeOut+0xc0>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	69ba      	ldr	r2, [r7, #24]
 8009282:	1ad3      	subs	r3, r2, r3
 8009284:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800928e:	d102      	bne.n	8009296 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009290:	2300      	movs	r3, #0
 8009292:	61fb      	str	r3, [r7, #28]
 8009294:	e023      	b.n	80092de <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	4b15      	ldr	r3, [pc, #84]	@ (80092f0 <xTaskCheckForTimeOut+0xc4>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d007      	beq.n	80092b2 <xTaskCheckForTimeOut+0x86>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	69ba      	ldr	r2, [r7, #24]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d302      	bcc.n	80092b2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80092ac:	2301      	movs	r3, #1
 80092ae:	61fb      	str	r3, [r7, #28]
 80092b0:	e015      	b.n	80092de <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	697a      	ldr	r2, [r7, #20]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d20b      	bcs.n	80092d4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	1ad2      	subs	r2, r2, r3
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f7ff ff99 	bl	8009200 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80092ce:	2300      	movs	r3, #0
 80092d0:	61fb      	str	r3, [r7, #28]
 80092d2:	e004      	b.n	80092de <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	2200      	movs	r2, #0
 80092d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80092da:	2301      	movs	r3, #1
 80092dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80092de:	f000 fe8d 	bl	8009ffc <vPortExitCritical>

	return xReturn;
 80092e2:	69fb      	ldr	r3, [r7, #28]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3720      	adds	r7, #32
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	200053f4 	.word	0x200053f4
 80092f0:	20005408 	.word	0x20005408

080092f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80092f4:	b480      	push	{r7}
 80092f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80092f8:	4b03      	ldr	r3, [pc, #12]	@ (8009308 <vTaskMissedYield+0x14>)
 80092fa:	2201      	movs	r2, #1
 80092fc:	601a      	str	r2, [r3, #0]
}
 80092fe:	bf00      	nop
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr
 8009308:	20005404 	.word	0x20005404

0800930c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009314:	f000 f852 	bl	80093bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009318:	4b06      	ldr	r3, [pc, #24]	@ (8009334 <prvIdleTask+0x28>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2b01      	cmp	r3, #1
 800931e:	d9f9      	bls.n	8009314 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009320:	4b05      	ldr	r3, [pc, #20]	@ (8009338 <prvIdleTask+0x2c>)
 8009322:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009326:	601a      	str	r2, [r3, #0]
 8009328:	f3bf 8f4f 	dsb	sy
 800932c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009330:	e7f0      	b.n	8009314 <prvIdleTask+0x8>
 8009332:	bf00      	nop
 8009334:	20004f20 	.word	0x20004f20
 8009338:	e000ed04 	.word	0xe000ed04

0800933c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009342:	2300      	movs	r3, #0
 8009344:	607b      	str	r3, [r7, #4]
 8009346:	e00c      	b.n	8009362 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	4613      	mov	r3, r2
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	4413      	add	r3, r2
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	4a12      	ldr	r2, [pc, #72]	@ (800939c <prvInitialiseTaskLists+0x60>)
 8009354:	4413      	add	r3, r2
 8009356:	4618      	mov	r0, r3
 8009358:	f7fe fcae 	bl	8007cb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	3301      	adds	r3, #1
 8009360:	607b      	str	r3, [r7, #4]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2b37      	cmp	r3, #55	@ 0x37
 8009366:	d9ef      	bls.n	8009348 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009368:	480d      	ldr	r0, [pc, #52]	@ (80093a0 <prvInitialiseTaskLists+0x64>)
 800936a:	f7fe fca5 	bl	8007cb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800936e:	480d      	ldr	r0, [pc, #52]	@ (80093a4 <prvInitialiseTaskLists+0x68>)
 8009370:	f7fe fca2 	bl	8007cb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009374:	480c      	ldr	r0, [pc, #48]	@ (80093a8 <prvInitialiseTaskLists+0x6c>)
 8009376:	f7fe fc9f 	bl	8007cb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800937a:	480c      	ldr	r0, [pc, #48]	@ (80093ac <prvInitialiseTaskLists+0x70>)
 800937c:	f7fe fc9c 	bl	8007cb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009380:	480b      	ldr	r0, [pc, #44]	@ (80093b0 <prvInitialiseTaskLists+0x74>)
 8009382:	f7fe fc99 	bl	8007cb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009386:	4b0b      	ldr	r3, [pc, #44]	@ (80093b4 <prvInitialiseTaskLists+0x78>)
 8009388:	4a05      	ldr	r2, [pc, #20]	@ (80093a0 <prvInitialiseTaskLists+0x64>)
 800938a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800938c:	4b0a      	ldr	r3, [pc, #40]	@ (80093b8 <prvInitialiseTaskLists+0x7c>)
 800938e:	4a05      	ldr	r2, [pc, #20]	@ (80093a4 <prvInitialiseTaskLists+0x68>)
 8009390:	601a      	str	r2, [r3, #0]
}
 8009392:	bf00      	nop
 8009394:	3708      	adds	r7, #8
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	20004f20 	.word	0x20004f20
 80093a0:	20005380 	.word	0x20005380
 80093a4:	20005394 	.word	0x20005394
 80093a8:	200053b0 	.word	0x200053b0
 80093ac:	200053c4 	.word	0x200053c4
 80093b0:	200053dc 	.word	0x200053dc
 80093b4:	200053a8 	.word	0x200053a8
 80093b8:	200053ac 	.word	0x200053ac

080093bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80093c2:	e019      	b.n	80093f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80093c4:	f000 fde8 	bl	8009f98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093c8:	4b10      	ldr	r3, [pc, #64]	@ (800940c <prvCheckTasksWaitingTermination+0x50>)
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	3304      	adds	r3, #4
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7fe fcf9 	bl	8007dcc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80093da:	4b0d      	ldr	r3, [pc, #52]	@ (8009410 <prvCheckTasksWaitingTermination+0x54>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	3b01      	subs	r3, #1
 80093e0:	4a0b      	ldr	r2, [pc, #44]	@ (8009410 <prvCheckTasksWaitingTermination+0x54>)
 80093e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80093e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009414 <prvCheckTasksWaitingTermination+0x58>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	3b01      	subs	r3, #1
 80093ea:	4a0a      	ldr	r2, [pc, #40]	@ (8009414 <prvCheckTasksWaitingTermination+0x58>)
 80093ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80093ee:	f000 fe05 	bl	8009ffc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 f810 	bl	8009418 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80093f8:	4b06      	ldr	r3, [pc, #24]	@ (8009414 <prvCheckTasksWaitingTermination+0x58>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d1e1      	bne.n	80093c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009400:	bf00      	nop
 8009402:	bf00      	nop
 8009404:	3708      	adds	r7, #8
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	200053c4 	.word	0x200053c4
 8009410:	200053f0 	.word	0x200053f0
 8009414:	200053d8 	.word	0x200053d8

08009418 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009426:	2b00      	cmp	r3, #0
 8009428:	d108      	bne.n	800943c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800942e:	4618      	mov	r0, r3
 8009430:	f000 ffa2 	bl	800a378 <vPortFree>
				vPortFree( pxTCB );
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 ff9f 	bl	800a378 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800943a:	e019      	b.n	8009470 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009442:	2b01      	cmp	r3, #1
 8009444:	d103      	bne.n	800944e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 ff96 	bl	800a378 <vPortFree>
	}
 800944c:	e010      	b.n	8009470 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009454:	2b02      	cmp	r3, #2
 8009456:	d00b      	beq.n	8009470 <prvDeleteTCB+0x58>
	__asm volatile
 8009458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800945c:	f383 8811 	msr	BASEPRI, r3
 8009460:	f3bf 8f6f 	isb	sy
 8009464:	f3bf 8f4f 	dsb	sy
 8009468:	60fb      	str	r3, [r7, #12]
}
 800946a:	bf00      	nop
 800946c:	bf00      	nop
 800946e:	e7fd      	b.n	800946c <prvDeleteTCB+0x54>
	}
 8009470:	bf00      	nop
 8009472:	3710      	adds	r7, #16
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800947e:	4b0c      	ldr	r3, [pc, #48]	@ (80094b0 <prvResetNextTaskUnblockTime+0x38>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d104      	bne.n	8009492 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009488:	4b0a      	ldr	r3, [pc, #40]	@ (80094b4 <prvResetNextTaskUnblockTime+0x3c>)
 800948a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800948e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009490:	e008      	b.n	80094a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009492:	4b07      	ldr	r3, [pc, #28]	@ (80094b0 <prvResetNextTaskUnblockTime+0x38>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	68db      	ldr	r3, [r3, #12]
 800949a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	4a04      	ldr	r2, [pc, #16]	@ (80094b4 <prvResetNextTaskUnblockTime+0x3c>)
 80094a2:	6013      	str	r3, [r2, #0]
}
 80094a4:	bf00      	nop
 80094a6:	370c      	adds	r7, #12
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr
 80094b0:	200053a8 	.word	0x200053a8
 80094b4:	20005410 	.word	0x20005410

080094b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80094be:	4b0b      	ldr	r3, [pc, #44]	@ (80094ec <xTaskGetSchedulerState+0x34>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d102      	bne.n	80094cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80094c6:	2301      	movs	r3, #1
 80094c8:	607b      	str	r3, [r7, #4]
 80094ca:	e008      	b.n	80094de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094cc:	4b08      	ldr	r3, [pc, #32]	@ (80094f0 <xTaskGetSchedulerState+0x38>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d102      	bne.n	80094da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80094d4:	2302      	movs	r3, #2
 80094d6:	607b      	str	r3, [r7, #4]
 80094d8:	e001      	b.n	80094de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80094da:	2300      	movs	r3, #0
 80094dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80094de:	687b      	ldr	r3, [r7, #4]
	}
 80094e0:	4618      	mov	r0, r3
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr
 80094ec:	200053fc 	.word	0x200053fc
 80094f0:	20005418 	.word	0x20005418

080094f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b086      	sub	sp, #24
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009500:	2300      	movs	r3, #0
 8009502:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d058      	beq.n	80095bc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800950a:	4b2f      	ldr	r3, [pc, #188]	@ (80095c8 <xTaskPriorityDisinherit+0xd4>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	693a      	ldr	r2, [r7, #16]
 8009510:	429a      	cmp	r2, r3
 8009512:	d00b      	beq.n	800952c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009518:	f383 8811 	msr	BASEPRI, r3
 800951c:	f3bf 8f6f 	isb	sy
 8009520:	f3bf 8f4f 	dsb	sy
 8009524:	60fb      	str	r3, [r7, #12]
}
 8009526:	bf00      	nop
 8009528:	bf00      	nop
 800952a:	e7fd      	b.n	8009528 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009530:	2b00      	cmp	r3, #0
 8009532:	d10b      	bne.n	800954c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009538:	f383 8811 	msr	BASEPRI, r3
 800953c:	f3bf 8f6f 	isb	sy
 8009540:	f3bf 8f4f 	dsb	sy
 8009544:	60bb      	str	r3, [r7, #8]
}
 8009546:	bf00      	nop
 8009548:	bf00      	nop
 800954a:	e7fd      	b.n	8009548 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009550:	1e5a      	subs	r2, r3, #1
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800955e:	429a      	cmp	r2, r3
 8009560:	d02c      	beq.n	80095bc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009566:	2b00      	cmp	r3, #0
 8009568:	d128      	bne.n	80095bc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	3304      	adds	r3, #4
 800956e:	4618      	mov	r0, r3
 8009570:	f7fe fc2c 	bl	8007dcc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009580:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800958c:	4b0f      	ldr	r3, [pc, #60]	@ (80095cc <xTaskPriorityDisinherit+0xd8>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	429a      	cmp	r2, r3
 8009592:	d903      	bls.n	800959c <xTaskPriorityDisinherit+0xa8>
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009598:	4a0c      	ldr	r2, [pc, #48]	@ (80095cc <xTaskPriorityDisinherit+0xd8>)
 800959a:	6013      	str	r3, [r2, #0]
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095a0:	4613      	mov	r3, r2
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	4413      	add	r3, r2
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	4a09      	ldr	r2, [pc, #36]	@ (80095d0 <xTaskPriorityDisinherit+0xdc>)
 80095aa:	441a      	add	r2, r3
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	3304      	adds	r3, #4
 80095b0:	4619      	mov	r1, r3
 80095b2:	4610      	mov	r0, r2
 80095b4:	f7fe fbad 	bl	8007d12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80095b8:	2301      	movs	r3, #1
 80095ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80095bc:	697b      	ldr	r3, [r7, #20]
	}
 80095be:	4618      	mov	r0, r3
 80095c0:	3718      	adds	r7, #24
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	20004f1c 	.word	0x20004f1c
 80095cc:	200053f8 	.word	0x200053f8
 80095d0:	20004f20 	.word	0x20004f20

080095d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80095de:	4b21      	ldr	r3, [pc, #132]	@ (8009664 <prvAddCurrentTaskToDelayedList+0x90>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095e4:	4b20      	ldr	r3, [pc, #128]	@ (8009668 <prvAddCurrentTaskToDelayedList+0x94>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	3304      	adds	r3, #4
 80095ea:	4618      	mov	r0, r3
 80095ec:	f7fe fbee 	bl	8007dcc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095f6:	d10a      	bne.n	800960e <prvAddCurrentTaskToDelayedList+0x3a>
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d007      	beq.n	800960e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095fe:	4b1a      	ldr	r3, [pc, #104]	@ (8009668 <prvAddCurrentTaskToDelayedList+0x94>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	3304      	adds	r3, #4
 8009604:	4619      	mov	r1, r3
 8009606:	4819      	ldr	r0, [pc, #100]	@ (800966c <prvAddCurrentTaskToDelayedList+0x98>)
 8009608:	f7fe fb83 	bl	8007d12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800960c:	e026      	b.n	800965c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800960e:	68fa      	ldr	r2, [r7, #12]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4413      	add	r3, r2
 8009614:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009616:	4b14      	ldr	r3, [pc, #80]	@ (8009668 <prvAddCurrentTaskToDelayedList+0x94>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800961e:	68ba      	ldr	r2, [r7, #8]
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	429a      	cmp	r2, r3
 8009624:	d209      	bcs.n	800963a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009626:	4b12      	ldr	r3, [pc, #72]	@ (8009670 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	4b0f      	ldr	r3, [pc, #60]	@ (8009668 <prvAddCurrentTaskToDelayedList+0x94>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	3304      	adds	r3, #4
 8009630:	4619      	mov	r1, r3
 8009632:	4610      	mov	r0, r2
 8009634:	f7fe fb91 	bl	8007d5a <vListInsert>
}
 8009638:	e010      	b.n	800965c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800963a:	4b0e      	ldr	r3, [pc, #56]	@ (8009674 <prvAddCurrentTaskToDelayedList+0xa0>)
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	4b0a      	ldr	r3, [pc, #40]	@ (8009668 <prvAddCurrentTaskToDelayedList+0x94>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	3304      	adds	r3, #4
 8009644:	4619      	mov	r1, r3
 8009646:	4610      	mov	r0, r2
 8009648:	f7fe fb87 	bl	8007d5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800964c:	4b0a      	ldr	r3, [pc, #40]	@ (8009678 <prvAddCurrentTaskToDelayedList+0xa4>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	68ba      	ldr	r2, [r7, #8]
 8009652:	429a      	cmp	r2, r3
 8009654:	d202      	bcs.n	800965c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009656:	4a08      	ldr	r2, [pc, #32]	@ (8009678 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	6013      	str	r3, [r2, #0]
}
 800965c:	bf00      	nop
 800965e:	3710      	adds	r7, #16
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	200053f4 	.word	0x200053f4
 8009668:	20004f1c 	.word	0x20004f1c
 800966c:	200053dc 	.word	0x200053dc
 8009670:	200053ac 	.word	0x200053ac
 8009674:	200053a8 	.word	0x200053a8
 8009678:	20005410 	.word	0x20005410

0800967c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b08a      	sub	sp, #40	@ 0x28
 8009680:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009682:	2300      	movs	r3, #0
 8009684:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009686:	f000 fb13 	bl	8009cb0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800968a:	4b1d      	ldr	r3, [pc, #116]	@ (8009700 <xTimerCreateTimerTask+0x84>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d021      	beq.n	80096d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009692:	2300      	movs	r3, #0
 8009694:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009696:	2300      	movs	r3, #0
 8009698:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800969a:	1d3a      	adds	r2, r7, #4
 800969c:	f107 0108 	add.w	r1, r7, #8
 80096a0:	f107 030c 	add.w	r3, r7, #12
 80096a4:	4618      	mov	r0, r3
 80096a6:	f7fe faed 	bl	8007c84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80096aa:	6879      	ldr	r1, [r7, #4]
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	9202      	str	r2, [sp, #8]
 80096b2:	9301      	str	r3, [sp, #4]
 80096b4:	2302      	movs	r3, #2
 80096b6:	9300      	str	r3, [sp, #0]
 80096b8:	2300      	movs	r3, #0
 80096ba:	460a      	mov	r2, r1
 80096bc:	4911      	ldr	r1, [pc, #68]	@ (8009704 <xTimerCreateTimerTask+0x88>)
 80096be:	4812      	ldr	r0, [pc, #72]	@ (8009708 <xTimerCreateTimerTask+0x8c>)
 80096c0:	f7ff f8a8 	bl	8008814 <xTaskCreateStatic>
 80096c4:	4603      	mov	r3, r0
 80096c6:	4a11      	ldr	r2, [pc, #68]	@ (800970c <xTimerCreateTimerTask+0x90>)
 80096c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80096ca:	4b10      	ldr	r3, [pc, #64]	@ (800970c <xTimerCreateTimerTask+0x90>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d001      	beq.n	80096d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80096d2:	2301      	movs	r3, #1
 80096d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d10b      	bne.n	80096f4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80096dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e0:	f383 8811 	msr	BASEPRI, r3
 80096e4:	f3bf 8f6f 	isb	sy
 80096e8:	f3bf 8f4f 	dsb	sy
 80096ec:	613b      	str	r3, [r7, #16]
}
 80096ee:	bf00      	nop
 80096f0:	bf00      	nop
 80096f2:	e7fd      	b.n	80096f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80096f4:	697b      	ldr	r3, [r7, #20]
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3718      	adds	r7, #24
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	2000544c 	.word	0x2000544c
 8009704:	08018a20 	.word	0x08018a20
 8009708:	08009849 	.word	0x08009849
 800970c:	20005450 	.word	0x20005450

08009710 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b08a      	sub	sp, #40	@ 0x28
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	607a      	str	r2, [r7, #4]
 800971c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800971e:	2300      	movs	r3, #0
 8009720:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d10b      	bne.n	8009740 <xTimerGenericCommand+0x30>
	__asm volatile
 8009728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800972c:	f383 8811 	msr	BASEPRI, r3
 8009730:	f3bf 8f6f 	isb	sy
 8009734:	f3bf 8f4f 	dsb	sy
 8009738:	623b      	str	r3, [r7, #32]
}
 800973a:	bf00      	nop
 800973c:	bf00      	nop
 800973e:	e7fd      	b.n	800973c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009740:	4b19      	ldr	r3, [pc, #100]	@ (80097a8 <xTimerGenericCommand+0x98>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d02a      	beq.n	800979e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	2b05      	cmp	r3, #5
 8009758:	dc18      	bgt.n	800978c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800975a:	f7ff fead 	bl	80094b8 <xTaskGetSchedulerState>
 800975e:	4603      	mov	r3, r0
 8009760:	2b02      	cmp	r3, #2
 8009762:	d109      	bne.n	8009778 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009764:	4b10      	ldr	r3, [pc, #64]	@ (80097a8 <xTimerGenericCommand+0x98>)
 8009766:	6818      	ldr	r0, [r3, #0]
 8009768:	f107 0110 	add.w	r1, r7, #16
 800976c:	2300      	movs	r3, #0
 800976e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009770:	f7fe fc60 	bl	8008034 <xQueueGenericSend>
 8009774:	6278      	str	r0, [r7, #36]	@ 0x24
 8009776:	e012      	b.n	800979e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009778:	4b0b      	ldr	r3, [pc, #44]	@ (80097a8 <xTimerGenericCommand+0x98>)
 800977a:	6818      	ldr	r0, [r3, #0]
 800977c:	f107 0110 	add.w	r1, r7, #16
 8009780:	2300      	movs	r3, #0
 8009782:	2200      	movs	r2, #0
 8009784:	f7fe fc56 	bl	8008034 <xQueueGenericSend>
 8009788:	6278      	str	r0, [r7, #36]	@ 0x24
 800978a:	e008      	b.n	800979e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800978c:	4b06      	ldr	r3, [pc, #24]	@ (80097a8 <xTimerGenericCommand+0x98>)
 800978e:	6818      	ldr	r0, [r3, #0]
 8009790:	f107 0110 	add.w	r1, r7, #16
 8009794:	2300      	movs	r3, #0
 8009796:	683a      	ldr	r2, [r7, #0]
 8009798:	f7fe fd4e 	bl	8008238 <xQueueGenericSendFromISR>
 800979c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800979e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3728      	adds	r7, #40	@ 0x28
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	2000544c 	.word	0x2000544c

080097ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b088      	sub	sp, #32
 80097b0:	af02      	add	r7, sp, #8
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097b6:	4b23      	ldr	r3, [pc, #140]	@ (8009844 <prvProcessExpiredTimer+0x98>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	3304      	adds	r3, #4
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7fe fb01 	bl	8007dcc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80097d0:	f003 0304 	and.w	r3, r3, #4
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d023      	beq.n	8009820 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	699a      	ldr	r2, [r3, #24]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	18d1      	adds	r1, r2, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	683a      	ldr	r2, [r7, #0]
 80097e4:	6978      	ldr	r0, [r7, #20]
 80097e6:	f000 f8d5 	bl	8009994 <prvInsertTimerInActiveList>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d020      	beq.n	8009832 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80097f0:	2300      	movs	r3, #0
 80097f2:	9300      	str	r3, [sp, #0]
 80097f4:	2300      	movs	r3, #0
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	2100      	movs	r1, #0
 80097fa:	6978      	ldr	r0, [r7, #20]
 80097fc:	f7ff ff88 	bl	8009710 <xTimerGenericCommand>
 8009800:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d114      	bne.n	8009832 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800980c:	f383 8811 	msr	BASEPRI, r3
 8009810:	f3bf 8f6f 	isb	sy
 8009814:	f3bf 8f4f 	dsb	sy
 8009818:	60fb      	str	r3, [r7, #12]
}
 800981a:	bf00      	nop
 800981c:	bf00      	nop
 800981e:	e7fd      	b.n	800981c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009826:	f023 0301 	bic.w	r3, r3, #1
 800982a:	b2da      	uxtb	r2, r3
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	6a1b      	ldr	r3, [r3, #32]
 8009836:	6978      	ldr	r0, [r7, #20]
 8009838:	4798      	blx	r3
}
 800983a:	bf00      	nop
 800983c:	3718      	adds	r7, #24
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	20005444 	.word	0x20005444

08009848 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009850:	f107 0308 	add.w	r3, r7, #8
 8009854:	4618      	mov	r0, r3
 8009856:	f000 f859 	bl	800990c <prvGetNextExpireTime>
 800985a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	4619      	mov	r1, r3
 8009860:	68f8      	ldr	r0, [r7, #12]
 8009862:	f000 f805 	bl	8009870 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009866:	f000 f8d7 	bl	8009a18 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800986a:	bf00      	nop
 800986c:	e7f0      	b.n	8009850 <prvTimerTask+0x8>
	...

08009870 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800987a:	f7ff fa0f 	bl	8008c9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800987e:	f107 0308 	add.w	r3, r7, #8
 8009882:	4618      	mov	r0, r3
 8009884:	f000 f866 	bl	8009954 <prvSampleTimeNow>
 8009888:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d130      	bne.n	80098f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d10a      	bne.n	80098ac <prvProcessTimerOrBlockTask+0x3c>
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	429a      	cmp	r2, r3
 800989c:	d806      	bhi.n	80098ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800989e:	f7ff fa0b 	bl	8008cb8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80098a2:	68f9      	ldr	r1, [r7, #12]
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f7ff ff81 	bl	80097ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80098aa:	e024      	b.n	80098f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d008      	beq.n	80098c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80098b2:	4b13      	ldr	r3, [pc, #76]	@ (8009900 <prvProcessTimerOrBlockTask+0x90>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d101      	bne.n	80098c0 <prvProcessTimerOrBlockTask+0x50>
 80098bc:	2301      	movs	r3, #1
 80098be:	e000      	b.n	80098c2 <prvProcessTimerOrBlockTask+0x52>
 80098c0:	2300      	movs	r3, #0
 80098c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80098c4:	4b0f      	ldr	r3, [pc, #60]	@ (8009904 <prvProcessTimerOrBlockTask+0x94>)
 80098c6:	6818      	ldr	r0, [r3, #0]
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	1ad3      	subs	r3, r2, r3
 80098ce:	683a      	ldr	r2, [r7, #0]
 80098d0:	4619      	mov	r1, r3
 80098d2:	f7fe ff6b 	bl	80087ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80098d6:	f7ff f9ef 	bl	8008cb8 <xTaskResumeAll>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d10a      	bne.n	80098f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80098e0:	4b09      	ldr	r3, [pc, #36]	@ (8009908 <prvProcessTimerOrBlockTask+0x98>)
 80098e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098e6:	601a      	str	r2, [r3, #0]
 80098e8:	f3bf 8f4f 	dsb	sy
 80098ec:	f3bf 8f6f 	isb	sy
}
 80098f0:	e001      	b.n	80098f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80098f2:	f7ff f9e1 	bl	8008cb8 <xTaskResumeAll>
}
 80098f6:	bf00      	nop
 80098f8:	3710      	adds	r7, #16
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	20005448 	.word	0x20005448
 8009904:	2000544c 	.word	0x2000544c
 8009908:	e000ed04 	.word	0xe000ed04

0800990c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800990c:	b480      	push	{r7}
 800990e:	b085      	sub	sp, #20
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009914:	4b0e      	ldr	r3, [pc, #56]	@ (8009950 <prvGetNextExpireTime+0x44>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d101      	bne.n	8009922 <prvGetNextExpireTime+0x16>
 800991e:	2201      	movs	r2, #1
 8009920:	e000      	b.n	8009924 <prvGetNextExpireTime+0x18>
 8009922:	2200      	movs	r2, #0
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d105      	bne.n	800993c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009930:	4b07      	ldr	r3, [pc, #28]	@ (8009950 <prvGetNextExpireTime+0x44>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	60fb      	str	r3, [r7, #12]
 800993a:	e001      	b.n	8009940 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800993c:	2300      	movs	r3, #0
 800993e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009940:	68fb      	ldr	r3, [r7, #12]
}
 8009942:	4618      	mov	r0, r3
 8009944:	3714      	adds	r7, #20
 8009946:	46bd      	mov	sp, r7
 8009948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994c:	4770      	bx	lr
 800994e:	bf00      	nop
 8009950:	20005444 	.word	0x20005444

08009954 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800995c:	f7ff fa4a 	bl	8008df4 <xTaskGetTickCount>
 8009960:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009962:	4b0b      	ldr	r3, [pc, #44]	@ (8009990 <prvSampleTimeNow+0x3c>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	68fa      	ldr	r2, [r7, #12]
 8009968:	429a      	cmp	r2, r3
 800996a:	d205      	bcs.n	8009978 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800996c:	f000 f93a 	bl	8009be4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	601a      	str	r2, [r3, #0]
 8009976:	e002      	b.n	800997e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800997e:	4a04      	ldr	r2, [pc, #16]	@ (8009990 <prvSampleTimeNow+0x3c>)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009984:	68fb      	ldr	r3, [r7, #12]
}
 8009986:	4618      	mov	r0, r3
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	20005454 	.word	0x20005454

08009994 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b086      	sub	sp, #24
 8009998:	af00      	add	r7, sp, #0
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	607a      	str	r2, [r7, #4]
 80099a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80099a2:	2300      	movs	r3, #0
 80099a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	68fa      	ldr	r2, [r7, #12]
 80099b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80099b2:	68ba      	ldr	r2, [r7, #8]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d812      	bhi.n	80099e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	1ad2      	subs	r2, r2, r3
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	699b      	ldr	r3, [r3, #24]
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d302      	bcc.n	80099ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80099c8:	2301      	movs	r3, #1
 80099ca:	617b      	str	r3, [r7, #20]
 80099cc:	e01b      	b.n	8009a06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80099ce:	4b10      	ldr	r3, [pc, #64]	@ (8009a10 <prvInsertTimerInActiveList+0x7c>)
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	3304      	adds	r3, #4
 80099d6:	4619      	mov	r1, r3
 80099d8:	4610      	mov	r0, r2
 80099da:	f7fe f9be 	bl	8007d5a <vListInsert>
 80099de:	e012      	b.n	8009a06 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d206      	bcs.n	80099f6 <prvInsertTimerInActiveList+0x62>
 80099e8:	68ba      	ldr	r2, [r7, #8]
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d302      	bcc.n	80099f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80099f0:	2301      	movs	r3, #1
 80099f2:	617b      	str	r3, [r7, #20]
 80099f4:	e007      	b.n	8009a06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80099f6:	4b07      	ldr	r3, [pc, #28]	@ (8009a14 <prvInsertTimerInActiveList+0x80>)
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	3304      	adds	r3, #4
 80099fe:	4619      	mov	r1, r3
 8009a00:	4610      	mov	r0, r2
 8009a02:	f7fe f9aa 	bl	8007d5a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009a06:	697b      	ldr	r3, [r7, #20]
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3718      	adds	r7, #24
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	20005448 	.word	0x20005448
 8009a14:	20005444 	.word	0x20005444

08009a18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b08e      	sub	sp, #56	@ 0x38
 8009a1c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a1e:	e0ce      	b.n	8009bbe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	da19      	bge.n	8009a5a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009a26:	1d3b      	adds	r3, r7, #4
 8009a28:	3304      	adds	r3, #4
 8009a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d10b      	bne.n	8009a4a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a36:	f383 8811 	msr	BASEPRI, r3
 8009a3a:	f3bf 8f6f 	isb	sy
 8009a3e:	f3bf 8f4f 	dsb	sy
 8009a42:	61fb      	str	r3, [r7, #28]
}
 8009a44:	bf00      	nop
 8009a46:	bf00      	nop
 8009a48:	e7fd      	b.n	8009a46 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a50:	6850      	ldr	r0, [r2, #4]
 8009a52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a54:	6892      	ldr	r2, [r2, #8]
 8009a56:	4611      	mov	r1, r2
 8009a58:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	f2c0 80ae 	blt.w	8009bbe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a68:	695b      	ldr	r3, [r3, #20]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d004      	beq.n	8009a78 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a70:	3304      	adds	r3, #4
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7fe f9aa 	bl	8007dcc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a78:	463b      	mov	r3, r7
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7ff ff6a 	bl	8009954 <prvSampleTimeNow>
 8009a80:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2b09      	cmp	r3, #9
 8009a86:	f200 8097 	bhi.w	8009bb8 <prvProcessReceivedCommands+0x1a0>
 8009a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8009a90 <prvProcessReceivedCommands+0x78>)
 8009a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a90:	08009ab9 	.word	0x08009ab9
 8009a94:	08009ab9 	.word	0x08009ab9
 8009a98:	08009ab9 	.word	0x08009ab9
 8009a9c:	08009b2f 	.word	0x08009b2f
 8009aa0:	08009b43 	.word	0x08009b43
 8009aa4:	08009b8f 	.word	0x08009b8f
 8009aa8:	08009ab9 	.word	0x08009ab9
 8009aac:	08009ab9 	.word	0x08009ab9
 8009ab0:	08009b2f 	.word	0x08009b2f
 8009ab4:	08009b43 	.word	0x08009b43
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009abe:	f043 0301 	orr.w	r3, r3, #1
 8009ac2:	b2da      	uxtb	r2, r3
 8009ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ac6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009aca:	68ba      	ldr	r2, [r7, #8]
 8009acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ace:	699b      	ldr	r3, [r3, #24]
 8009ad0:	18d1      	adds	r1, r2, r3
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ad6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ad8:	f7ff ff5c 	bl	8009994 <prvInsertTimerInActiveList>
 8009adc:	4603      	mov	r3, r0
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d06c      	beq.n	8009bbc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ae4:	6a1b      	ldr	r3, [r3, #32]
 8009ae6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ae8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009af0:	f003 0304 	and.w	r3, r3, #4
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d061      	beq.n	8009bbc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009af8:	68ba      	ldr	r2, [r7, #8]
 8009afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009afc:	699b      	ldr	r3, [r3, #24]
 8009afe:	441a      	add	r2, r3
 8009b00:	2300      	movs	r3, #0
 8009b02:	9300      	str	r3, [sp, #0]
 8009b04:	2300      	movs	r3, #0
 8009b06:	2100      	movs	r1, #0
 8009b08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b0a:	f7ff fe01 	bl	8009710 <xTimerGenericCommand>
 8009b0e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009b10:	6a3b      	ldr	r3, [r7, #32]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d152      	bne.n	8009bbc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b1a:	f383 8811 	msr	BASEPRI, r3
 8009b1e:	f3bf 8f6f 	isb	sy
 8009b22:	f3bf 8f4f 	dsb	sy
 8009b26:	61bb      	str	r3, [r7, #24]
}
 8009b28:	bf00      	nop
 8009b2a:	bf00      	nop
 8009b2c:	e7fd      	b.n	8009b2a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b34:	f023 0301 	bic.w	r3, r3, #1
 8009b38:	b2da      	uxtb	r2, r3
 8009b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b3c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009b40:	e03d      	b.n	8009bbe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b48:	f043 0301 	orr.w	r3, r3, #1
 8009b4c:	b2da      	uxtb	r2, r3
 8009b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b50:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009b54:	68ba      	ldr	r2, [r7, #8]
 8009b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b58:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b5c:	699b      	ldr	r3, [r3, #24]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d10b      	bne.n	8009b7a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b66:	f383 8811 	msr	BASEPRI, r3
 8009b6a:	f3bf 8f6f 	isb	sy
 8009b6e:	f3bf 8f4f 	dsb	sy
 8009b72:	617b      	str	r3, [r7, #20]
}
 8009b74:	bf00      	nop
 8009b76:	bf00      	nop
 8009b78:	e7fd      	b.n	8009b76 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b7c:	699a      	ldr	r2, [r3, #24]
 8009b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b80:	18d1      	adds	r1, r2, r3
 8009b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b88:	f7ff ff04 	bl	8009994 <prvInsertTimerInActiveList>
					break;
 8009b8c:	e017      	b.n	8009bbe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b94:	f003 0302 	and.w	r3, r3, #2
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d103      	bne.n	8009ba4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009b9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b9e:	f000 fbeb 	bl	800a378 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009ba2:	e00c      	b.n	8009bbe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009baa:	f023 0301 	bic.w	r3, r3, #1
 8009bae:	b2da      	uxtb	r2, r3
 8009bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009bb6:	e002      	b.n	8009bbe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009bb8:	bf00      	nop
 8009bba:	e000      	b.n	8009bbe <prvProcessReceivedCommands+0x1a6>
					break;
 8009bbc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009bbe:	4b08      	ldr	r3, [pc, #32]	@ (8009be0 <prvProcessReceivedCommands+0x1c8>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	1d39      	adds	r1, r7, #4
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f7fe fbd4 	bl	8008374 <xQueueReceive>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	f47f af26 	bne.w	8009a20 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009bd4:	bf00      	nop
 8009bd6:	bf00      	nop
 8009bd8:	3730      	adds	r7, #48	@ 0x30
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	2000544c 	.word	0x2000544c

08009be4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b088      	sub	sp, #32
 8009be8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009bea:	e049      	b.n	8009c80 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009bec:	4b2e      	ldr	r3, [pc, #184]	@ (8009ca8 <prvSwitchTimerLists+0xc4>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	68db      	ldr	r3, [r3, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8009ca8 <prvSwitchTimerLists+0xc4>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	3304      	adds	r3, #4
 8009c04:	4618      	mov	r0, r3
 8009c06:	f7fe f8e1 	bl	8007dcc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	6a1b      	ldr	r3, [r3, #32]
 8009c0e:	68f8      	ldr	r0, [r7, #12]
 8009c10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c18:	f003 0304 	and.w	r3, r3, #4
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d02f      	beq.n	8009c80 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	699b      	ldr	r3, [r3, #24]
 8009c24:	693a      	ldr	r2, [r7, #16]
 8009c26:	4413      	add	r3, r2
 8009c28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009c2a:	68ba      	ldr	r2, [r7, #8]
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d90e      	bls.n	8009c50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	68ba      	ldr	r2, [r7, #8]
 8009c36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	68fa      	ldr	r2, [r7, #12]
 8009c3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8009ca8 <prvSwitchTimerLists+0xc4>)
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	3304      	adds	r3, #4
 8009c46:	4619      	mov	r1, r3
 8009c48:	4610      	mov	r0, r2
 8009c4a:	f7fe f886 	bl	8007d5a <vListInsert>
 8009c4e:	e017      	b.n	8009c80 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c50:	2300      	movs	r3, #0
 8009c52:	9300      	str	r3, [sp, #0]
 8009c54:	2300      	movs	r3, #0
 8009c56:	693a      	ldr	r2, [r7, #16]
 8009c58:	2100      	movs	r1, #0
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f7ff fd58 	bl	8009710 <xTimerGenericCommand>
 8009c60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d10b      	bne.n	8009c80 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c6c:	f383 8811 	msr	BASEPRI, r3
 8009c70:	f3bf 8f6f 	isb	sy
 8009c74:	f3bf 8f4f 	dsb	sy
 8009c78:	603b      	str	r3, [r7, #0]
}
 8009c7a:	bf00      	nop
 8009c7c:	bf00      	nop
 8009c7e:	e7fd      	b.n	8009c7c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c80:	4b09      	ldr	r3, [pc, #36]	@ (8009ca8 <prvSwitchTimerLists+0xc4>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d1b0      	bne.n	8009bec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009c8a:	4b07      	ldr	r3, [pc, #28]	@ (8009ca8 <prvSwitchTimerLists+0xc4>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009c90:	4b06      	ldr	r3, [pc, #24]	@ (8009cac <prvSwitchTimerLists+0xc8>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a04      	ldr	r2, [pc, #16]	@ (8009ca8 <prvSwitchTimerLists+0xc4>)
 8009c96:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009c98:	4a04      	ldr	r2, [pc, #16]	@ (8009cac <prvSwitchTimerLists+0xc8>)
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	6013      	str	r3, [r2, #0]
}
 8009c9e:	bf00      	nop
 8009ca0:	3718      	adds	r7, #24
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	20005444 	.word	0x20005444
 8009cac:	20005448 	.word	0x20005448

08009cb0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009cb6:	f000 f96f 	bl	8009f98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009cba:	4b15      	ldr	r3, [pc, #84]	@ (8009d10 <prvCheckForValidListAndQueue+0x60>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d120      	bne.n	8009d04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009cc2:	4814      	ldr	r0, [pc, #80]	@ (8009d14 <prvCheckForValidListAndQueue+0x64>)
 8009cc4:	f7fd fff8 	bl	8007cb8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009cc8:	4813      	ldr	r0, [pc, #76]	@ (8009d18 <prvCheckForValidListAndQueue+0x68>)
 8009cca:	f7fd fff5 	bl	8007cb8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009cce:	4b13      	ldr	r3, [pc, #76]	@ (8009d1c <prvCheckForValidListAndQueue+0x6c>)
 8009cd0:	4a10      	ldr	r2, [pc, #64]	@ (8009d14 <prvCheckForValidListAndQueue+0x64>)
 8009cd2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009cd4:	4b12      	ldr	r3, [pc, #72]	@ (8009d20 <prvCheckForValidListAndQueue+0x70>)
 8009cd6:	4a10      	ldr	r2, [pc, #64]	@ (8009d18 <prvCheckForValidListAndQueue+0x68>)
 8009cd8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009cda:	2300      	movs	r3, #0
 8009cdc:	9300      	str	r3, [sp, #0]
 8009cde:	4b11      	ldr	r3, [pc, #68]	@ (8009d24 <prvCheckForValidListAndQueue+0x74>)
 8009ce0:	4a11      	ldr	r2, [pc, #68]	@ (8009d28 <prvCheckForValidListAndQueue+0x78>)
 8009ce2:	2110      	movs	r1, #16
 8009ce4:	200a      	movs	r0, #10
 8009ce6:	f7fe f905 	bl	8007ef4 <xQueueGenericCreateStatic>
 8009cea:	4603      	mov	r3, r0
 8009cec:	4a08      	ldr	r2, [pc, #32]	@ (8009d10 <prvCheckForValidListAndQueue+0x60>)
 8009cee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009cf0:	4b07      	ldr	r3, [pc, #28]	@ (8009d10 <prvCheckForValidListAndQueue+0x60>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d005      	beq.n	8009d04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009cf8:	4b05      	ldr	r3, [pc, #20]	@ (8009d10 <prvCheckForValidListAndQueue+0x60>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	490b      	ldr	r1, [pc, #44]	@ (8009d2c <prvCheckForValidListAndQueue+0x7c>)
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7fe fd2a 	bl	8008758 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d04:	f000 f97a 	bl	8009ffc <vPortExitCritical>
}
 8009d08:	bf00      	nop
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	2000544c 	.word	0x2000544c
 8009d14:	2000541c 	.word	0x2000541c
 8009d18:	20005430 	.word	0x20005430
 8009d1c:	20005444 	.word	0x20005444
 8009d20:	20005448 	.word	0x20005448
 8009d24:	200054f8 	.word	0x200054f8
 8009d28:	20005458 	.word	0x20005458
 8009d2c:	08018a28 	.word	0x08018a28

08009d30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009d30:	b480      	push	{r7}
 8009d32:	b085      	sub	sp, #20
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	3b04      	subs	r3, #4
 8009d40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009d48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	3b04      	subs	r3, #4
 8009d4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	f023 0201 	bic.w	r2, r3, #1
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	3b04      	subs	r3, #4
 8009d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009d60:	4a0c      	ldr	r2, [pc, #48]	@ (8009d94 <pxPortInitialiseStack+0x64>)
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	3b14      	subs	r3, #20
 8009d6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	3b04      	subs	r3, #4
 8009d76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f06f 0202 	mvn.w	r2, #2
 8009d7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	3b20      	subs	r3, #32
 8009d84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009d86:	68fb      	ldr	r3, [r7, #12]
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3714      	adds	r7, #20
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr
 8009d94:	08009d99 	.word	0x08009d99

08009d98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009da2:	4b13      	ldr	r3, [pc, #76]	@ (8009df0 <prvTaskExitError+0x58>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009daa:	d00b      	beq.n	8009dc4 <prvTaskExitError+0x2c>
	__asm volatile
 8009dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db0:	f383 8811 	msr	BASEPRI, r3
 8009db4:	f3bf 8f6f 	isb	sy
 8009db8:	f3bf 8f4f 	dsb	sy
 8009dbc:	60fb      	str	r3, [r7, #12]
}
 8009dbe:	bf00      	nop
 8009dc0:	bf00      	nop
 8009dc2:	e7fd      	b.n	8009dc0 <prvTaskExitError+0x28>
	__asm volatile
 8009dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dc8:	f383 8811 	msr	BASEPRI, r3
 8009dcc:	f3bf 8f6f 	isb	sy
 8009dd0:	f3bf 8f4f 	dsb	sy
 8009dd4:	60bb      	str	r3, [r7, #8]
}
 8009dd6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009dd8:	bf00      	nop
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d0fc      	beq.n	8009dda <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009de0:	bf00      	nop
 8009de2:	bf00      	nop
 8009de4:	3714      	adds	r7, #20
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr
 8009dee:	bf00      	nop
 8009df0:	20000018 	.word	0x20000018
	...

08009e00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009e00:	4b07      	ldr	r3, [pc, #28]	@ (8009e20 <pxCurrentTCBConst2>)
 8009e02:	6819      	ldr	r1, [r3, #0]
 8009e04:	6808      	ldr	r0, [r1, #0]
 8009e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e0a:	f380 8809 	msr	PSP, r0
 8009e0e:	f3bf 8f6f 	isb	sy
 8009e12:	f04f 0000 	mov.w	r0, #0
 8009e16:	f380 8811 	msr	BASEPRI, r0
 8009e1a:	4770      	bx	lr
 8009e1c:	f3af 8000 	nop.w

08009e20 <pxCurrentTCBConst2>:
 8009e20:	20004f1c 	.word	0x20004f1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009e24:	bf00      	nop
 8009e26:	bf00      	nop

08009e28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009e28:	4808      	ldr	r0, [pc, #32]	@ (8009e4c <prvPortStartFirstTask+0x24>)
 8009e2a:	6800      	ldr	r0, [r0, #0]
 8009e2c:	6800      	ldr	r0, [r0, #0]
 8009e2e:	f380 8808 	msr	MSP, r0
 8009e32:	f04f 0000 	mov.w	r0, #0
 8009e36:	f380 8814 	msr	CONTROL, r0
 8009e3a:	b662      	cpsie	i
 8009e3c:	b661      	cpsie	f
 8009e3e:	f3bf 8f4f 	dsb	sy
 8009e42:	f3bf 8f6f 	isb	sy
 8009e46:	df00      	svc	0
 8009e48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009e4a:	bf00      	nop
 8009e4c:	e000ed08 	.word	0xe000ed08

08009e50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b086      	sub	sp, #24
 8009e54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009e56:	4b47      	ldr	r3, [pc, #284]	@ (8009f74 <xPortStartScheduler+0x124>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a47      	ldr	r2, [pc, #284]	@ (8009f78 <xPortStartScheduler+0x128>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d10b      	bne.n	8009e78 <xPortStartScheduler+0x28>
	__asm volatile
 8009e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e64:	f383 8811 	msr	BASEPRI, r3
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	f3bf 8f4f 	dsb	sy
 8009e70:	613b      	str	r3, [r7, #16]
}
 8009e72:	bf00      	nop
 8009e74:	bf00      	nop
 8009e76:	e7fd      	b.n	8009e74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009e78:	4b3e      	ldr	r3, [pc, #248]	@ (8009f74 <xPortStartScheduler+0x124>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a3f      	ldr	r2, [pc, #252]	@ (8009f7c <xPortStartScheduler+0x12c>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d10b      	bne.n	8009e9a <xPortStartScheduler+0x4a>
	__asm volatile
 8009e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e86:	f383 8811 	msr	BASEPRI, r3
 8009e8a:	f3bf 8f6f 	isb	sy
 8009e8e:	f3bf 8f4f 	dsb	sy
 8009e92:	60fb      	str	r3, [r7, #12]
}
 8009e94:	bf00      	nop
 8009e96:	bf00      	nop
 8009e98:	e7fd      	b.n	8009e96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009e9a:	4b39      	ldr	r3, [pc, #228]	@ (8009f80 <xPortStartScheduler+0x130>)
 8009e9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	b2db      	uxtb	r3, r3
 8009ea4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	22ff      	movs	r2, #255	@ 0xff
 8009eaa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009eb4:	78fb      	ldrb	r3, [r7, #3]
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009ebc:	b2da      	uxtb	r2, r3
 8009ebe:	4b31      	ldr	r3, [pc, #196]	@ (8009f84 <xPortStartScheduler+0x134>)
 8009ec0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009ec2:	4b31      	ldr	r3, [pc, #196]	@ (8009f88 <xPortStartScheduler+0x138>)
 8009ec4:	2207      	movs	r2, #7
 8009ec6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ec8:	e009      	b.n	8009ede <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009eca:	4b2f      	ldr	r3, [pc, #188]	@ (8009f88 <xPortStartScheduler+0x138>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	4a2d      	ldr	r2, [pc, #180]	@ (8009f88 <xPortStartScheduler+0x138>)
 8009ed2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009ed4:	78fb      	ldrb	r3, [r7, #3]
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	005b      	lsls	r3, r3, #1
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ede:	78fb      	ldrb	r3, [r7, #3]
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ee6:	2b80      	cmp	r3, #128	@ 0x80
 8009ee8:	d0ef      	beq.n	8009eca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009eea:	4b27      	ldr	r3, [pc, #156]	@ (8009f88 <xPortStartScheduler+0x138>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f1c3 0307 	rsb	r3, r3, #7
 8009ef2:	2b04      	cmp	r3, #4
 8009ef4:	d00b      	beq.n	8009f0e <xPortStartScheduler+0xbe>
	__asm volatile
 8009ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009efa:	f383 8811 	msr	BASEPRI, r3
 8009efe:	f3bf 8f6f 	isb	sy
 8009f02:	f3bf 8f4f 	dsb	sy
 8009f06:	60bb      	str	r3, [r7, #8]
}
 8009f08:	bf00      	nop
 8009f0a:	bf00      	nop
 8009f0c:	e7fd      	b.n	8009f0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8009f88 <xPortStartScheduler+0x138>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	021b      	lsls	r3, r3, #8
 8009f14:	4a1c      	ldr	r2, [pc, #112]	@ (8009f88 <xPortStartScheduler+0x138>)
 8009f16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009f18:	4b1b      	ldr	r3, [pc, #108]	@ (8009f88 <xPortStartScheduler+0x138>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009f20:	4a19      	ldr	r2, [pc, #100]	@ (8009f88 <xPortStartScheduler+0x138>)
 8009f22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	b2da      	uxtb	r2, r3
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009f2c:	4b17      	ldr	r3, [pc, #92]	@ (8009f8c <xPortStartScheduler+0x13c>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a16      	ldr	r2, [pc, #88]	@ (8009f8c <xPortStartScheduler+0x13c>)
 8009f32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009f36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009f38:	4b14      	ldr	r3, [pc, #80]	@ (8009f8c <xPortStartScheduler+0x13c>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a13      	ldr	r2, [pc, #76]	@ (8009f8c <xPortStartScheduler+0x13c>)
 8009f3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009f42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009f44:	f000 f8da 	bl	800a0fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009f48:	4b11      	ldr	r3, [pc, #68]	@ (8009f90 <xPortStartScheduler+0x140>)
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009f4e:	f000 f8f9 	bl	800a144 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009f52:	4b10      	ldr	r3, [pc, #64]	@ (8009f94 <xPortStartScheduler+0x144>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a0f      	ldr	r2, [pc, #60]	@ (8009f94 <xPortStartScheduler+0x144>)
 8009f58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009f5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009f5e:	f7ff ff63 	bl	8009e28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009f62:	f7ff f811 	bl	8008f88 <vTaskSwitchContext>
	prvTaskExitError();
 8009f66:	f7ff ff17 	bl	8009d98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009f6a:	2300      	movs	r3, #0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3718      	adds	r7, #24
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	e000ed00 	.word	0xe000ed00
 8009f78:	410fc271 	.word	0x410fc271
 8009f7c:	410fc270 	.word	0x410fc270
 8009f80:	e000e400 	.word	0xe000e400
 8009f84:	20005548 	.word	0x20005548
 8009f88:	2000554c 	.word	0x2000554c
 8009f8c:	e000ed20 	.word	0xe000ed20
 8009f90:	20000018 	.word	0x20000018
 8009f94:	e000ef34 	.word	0xe000ef34

08009f98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fa2:	f383 8811 	msr	BASEPRI, r3
 8009fa6:	f3bf 8f6f 	isb	sy
 8009faa:	f3bf 8f4f 	dsb	sy
 8009fae:	607b      	str	r3, [r7, #4]
}
 8009fb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009fb2:	4b10      	ldr	r3, [pc, #64]	@ (8009ff4 <vPortEnterCritical+0x5c>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	4a0e      	ldr	r2, [pc, #56]	@ (8009ff4 <vPortEnterCritical+0x5c>)
 8009fba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8009ff4 <vPortEnterCritical+0x5c>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d110      	bne.n	8009fe6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8009ff8 <vPortEnterCritical+0x60>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d00b      	beq.n	8009fe6 <vPortEnterCritical+0x4e>
	__asm volatile
 8009fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fd2:	f383 8811 	msr	BASEPRI, r3
 8009fd6:	f3bf 8f6f 	isb	sy
 8009fda:	f3bf 8f4f 	dsb	sy
 8009fde:	603b      	str	r3, [r7, #0]
}
 8009fe0:	bf00      	nop
 8009fe2:	bf00      	nop
 8009fe4:	e7fd      	b.n	8009fe2 <vPortEnterCritical+0x4a>
	}
}
 8009fe6:	bf00      	nop
 8009fe8:	370c      	adds	r7, #12
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	20000018 	.word	0x20000018
 8009ff8:	e000ed04 	.word	0xe000ed04

08009ffc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b083      	sub	sp, #12
 800a000:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a002:	4b12      	ldr	r3, [pc, #72]	@ (800a04c <vPortExitCritical+0x50>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d10b      	bne.n	800a022 <vPortExitCritical+0x26>
	__asm volatile
 800a00a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a00e:	f383 8811 	msr	BASEPRI, r3
 800a012:	f3bf 8f6f 	isb	sy
 800a016:	f3bf 8f4f 	dsb	sy
 800a01a:	607b      	str	r3, [r7, #4]
}
 800a01c:	bf00      	nop
 800a01e:	bf00      	nop
 800a020:	e7fd      	b.n	800a01e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a022:	4b0a      	ldr	r3, [pc, #40]	@ (800a04c <vPortExitCritical+0x50>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	3b01      	subs	r3, #1
 800a028:	4a08      	ldr	r2, [pc, #32]	@ (800a04c <vPortExitCritical+0x50>)
 800a02a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a02c:	4b07      	ldr	r3, [pc, #28]	@ (800a04c <vPortExitCritical+0x50>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d105      	bne.n	800a040 <vPortExitCritical+0x44>
 800a034:	2300      	movs	r3, #0
 800a036:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	f383 8811 	msr	BASEPRI, r3
}
 800a03e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a040:	bf00      	nop
 800a042:	370c      	adds	r7, #12
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr
 800a04c:	20000018 	.word	0x20000018

0800a050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a050:	f3ef 8009 	mrs	r0, PSP
 800a054:	f3bf 8f6f 	isb	sy
 800a058:	4b15      	ldr	r3, [pc, #84]	@ (800a0b0 <pxCurrentTCBConst>)
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	f01e 0f10 	tst.w	lr, #16
 800a060:	bf08      	it	eq
 800a062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a06a:	6010      	str	r0, [r2, #0]
 800a06c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a070:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a074:	f380 8811 	msr	BASEPRI, r0
 800a078:	f3bf 8f4f 	dsb	sy
 800a07c:	f3bf 8f6f 	isb	sy
 800a080:	f7fe ff82 	bl	8008f88 <vTaskSwitchContext>
 800a084:	f04f 0000 	mov.w	r0, #0
 800a088:	f380 8811 	msr	BASEPRI, r0
 800a08c:	bc09      	pop	{r0, r3}
 800a08e:	6819      	ldr	r1, [r3, #0]
 800a090:	6808      	ldr	r0, [r1, #0]
 800a092:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a096:	f01e 0f10 	tst.w	lr, #16
 800a09a:	bf08      	it	eq
 800a09c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a0a0:	f380 8809 	msr	PSP, r0
 800a0a4:	f3bf 8f6f 	isb	sy
 800a0a8:	4770      	bx	lr
 800a0aa:	bf00      	nop
 800a0ac:	f3af 8000 	nop.w

0800a0b0 <pxCurrentTCBConst>:
 800a0b0:	20004f1c 	.word	0x20004f1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a0b4:	bf00      	nop
 800a0b6:	bf00      	nop

0800a0b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a0be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0c2:	f383 8811 	msr	BASEPRI, r3
 800a0c6:	f3bf 8f6f 	isb	sy
 800a0ca:	f3bf 8f4f 	dsb	sy
 800a0ce:	607b      	str	r3, [r7, #4]
}
 800a0d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a0d2:	f7fe fe9f 	bl	8008e14 <xTaskIncrementTick>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d003      	beq.n	800a0e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a0dc:	4b06      	ldr	r3, [pc, #24]	@ (800a0f8 <xPortSysTickHandler+0x40>)
 800a0de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0e2:	601a      	str	r2, [r3, #0]
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	f383 8811 	msr	BASEPRI, r3
}
 800a0ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a0f0:	bf00      	nop
 800a0f2:	3708      	adds	r7, #8
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}
 800a0f8:	e000ed04 	.word	0xe000ed04

0800a0fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a100:	4b0b      	ldr	r3, [pc, #44]	@ (800a130 <vPortSetupTimerInterrupt+0x34>)
 800a102:	2200      	movs	r2, #0
 800a104:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a106:	4b0b      	ldr	r3, [pc, #44]	@ (800a134 <vPortSetupTimerInterrupt+0x38>)
 800a108:	2200      	movs	r2, #0
 800a10a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a10c:	4b0a      	ldr	r3, [pc, #40]	@ (800a138 <vPortSetupTimerInterrupt+0x3c>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a0a      	ldr	r2, [pc, #40]	@ (800a13c <vPortSetupTimerInterrupt+0x40>)
 800a112:	fba2 2303 	umull	r2, r3, r2, r3
 800a116:	099b      	lsrs	r3, r3, #6
 800a118:	4a09      	ldr	r2, [pc, #36]	@ (800a140 <vPortSetupTimerInterrupt+0x44>)
 800a11a:	3b01      	subs	r3, #1
 800a11c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a11e:	4b04      	ldr	r3, [pc, #16]	@ (800a130 <vPortSetupTimerInterrupt+0x34>)
 800a120:	2207      	movs	r2, #7
 800a122:	601a      	str	r2, [r3, #0]
}
 800a124:	bf00      	nop
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr
 800a12e:	bf00      	nop
 800a130:	e000e010 	.word	0xe000e010
 800a134:	e000e018 	.word	0xe000e018
 800a138:	2000000c 	.word	0x2000000c
 800a13c:	10624dd3 	.word	0x10624dd3
 800a140:	e000e014 	.word	0xe000e014

0800a144 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a144:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a154 <vPortEnableVFP+0x10>
 800a148:	6801      	ldr	r1, [r0, #0]
 800a14a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a14e:	6001      	str	r1, [r0, #0]
 800a150:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a152:	bf00      	nop
 800a154:	e000ed88 	.word	0xe000ed88

0800a158 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a158:	b480      	push	{r7}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a15e:	f3ef 8305 	mrs	r3, IPSR
 800a162:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2b0f      	cmp	r3, #15
 800a168:	d915      	bls.n	800a196 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a16a:	4a18      	ldr	r2, [pc, #96]	@ (800a1cc <vPortValidateInterruptPriority+0x74>)
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	4413      	add	r3, r2
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a174:	4b16      	ldr	r3, [pc, #88]	@ (800a1d0 <vPortValidateInterruptPriority+0x78>)
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	7afa      	ldrb	r2, [r7, #11]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d20b      	bcs.n	800a196 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a17e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a182:	f383 8811 	msr	BASEPRI, r3
 800a186:	f3bf 8f6f 	isb	sy
 800a18a:	f3bf 8f4f 	dsb	sy
 800a18e:	607b      	str	r3, [r7, #4]
}
 800a190:	bf00      	nop
 800a192:	bf00      	nop
 800a194:	e7fd      	b.n	800a192 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a196:	4b0f      	ldr	r3, [pc, #60]	@ (800a1d4 <vPortValidateInterruptPriority+0x7c>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a19e:	4b0e      	ldr	r3, [pc, #56]	@ (800a1d8 <vPortValidateInterruptPriority+0x80>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d90b      	bls.n	800a1be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a1a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1aa:	f383 8811 	msr	BASEPRI, r3
 800a1ae:	f3bf 8f6f 	isb	sy
 800a1b2:	f3bf 8f4f 	dsb	sy
 800a1b6:	603b      	str	r3, [r7, #0]
}
 800a1b8:	bf00      	nop
 800a1ba:	bf00      	nop
 800a1bc:	e7fd      	b.n	800a1ba <vPortValidateInterruptPriority+0x62>
	}
 800a1be:	bf00      	nop
 800a1c0:	3714      	adds	r7, #20
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	e000e3f0 	.word	0xe000e3f0
 800a1d0:	20005548 	.word	0x20005548
 800a1d4:	e000ed0c 	.word	0xe000ed0c
 800a1d8:	2000554c 	.word	0x2000554c

0800a1dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b08a      	sub	sp, #40	@ 0x28
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a1e8:	f7fe fd58 	bl	8008c9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a1ec:	4b5c      	ldr	r3, [pc, #368]	@ (800a360 <pvPortMalloc+0x184>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d101      	bne.n	800a1f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a1f4:	f000 f924 	bl	800a440 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a1f8:	4b5a      	ldr	r3, [pc, #360]	@ (800a364 <pvPortMalloc+0x188>)
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	4013      	ands	r3, r2
 800a200:	2b00      	cmp	r3, #0
 800a202:	f040 8095 	bne.w	800a330 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d01e      	beq.n	800a24a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a20c:	2208      	movs	r2, #8
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	4413      	add	r3, r2
 800a212:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f003 0307 	and.w	r3, r3, #7
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d015      	beq.n	800a24a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f023 0307 	bic.w	r3, r3, #7
 800a224:	3308      	adds	r3, #8
 800a226:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f003 0307 	and.w	r3, r3, #7
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d00b      	beq.n	800a24a <pvPortMalloc+0x6e>
	__asm volatile
 800a232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a236:	f383 8811 	msr	BASEPRI, r3
 800a23a:	f3bf 8f6f 	isb	sy
 800a23e:	f3bf 8f4f 	dsb	sy
 800a242:	617b      	str	r3, [r7, #20]
}
 800a244:	bf00      	nop
 800a246:	bf00      	nop
 800a248:	e7fd      	b.n	800a246 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d06f      	beq.n	800a330 <pvPortMalloc+0x154>
 800a250:	4b45      	ldr	r3, [pc, #276]	@ (800a368 <pvPortMalloc+0x18c>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	429a      	cmp	r2, r3
 800a258:	d86a      	bhi.n	800a330 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a25a:	4b44      	ldr	r3, [pc, #272]	@ (800a36c <pvPortMalloc+0x190>)
 800a25c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a25e:	4b43      	ldr	r3, [pc, #268]	@ (800a36c <pvPortMalloc+0x190>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a264:	e004      	b.n	800a270 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a268:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	429a      	cmp	r2, r3
 800a278:	d903      	bls.n	800a282 <pvPortMalloc+0xa6>
 800a27a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d1f1      	bne.n	800a266 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a282:	4b37      	ldr	r3, [pc, #220]	@ (800a360 <pvPortMalloc+0x184>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a288:	429a      	cmp	r2, r3
 800a28a:	d051      	beq.n	800a330 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a28c:	6a3b      	ldr	r3, [r7, #32]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2208      	movs	r2, #8
 800a292:	4413      	add	r3, r2
 800a294:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	6a3b      	ldr	r3, [r7, #32]
 800a29c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a0:	685a      	ldr	r2, [r3, #4]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	1ad2      	subs	r2, r2, r3
 800a2a6:	2308      	movs	r3, #8
 800a2a8:	005b      	lsls	r3, r3, #1
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d920      	bls.n	800a2f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a2ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2b6:	69bb      	ldr	r3, [r7, #24]
 800a2b8:	f003 0307 	and.w	r3, r3, #7
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d00b      	beq.n	800a2d8 <pvPortMalloc+0xfc>
	__asm volatile
 800a2c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2c4:	f383 8811 	msr	BASEPRI, r3
 800a2c8:	f3bf 8f6f 	isb	sy
 800a2cc:	f3bf 8f4f 	dsb	sy
 800a2d0:	613b      	str	r3, [r7, #16]
}
 800a2d2:	bf00      	nop
 800a2d4:	bf00      	nop
 800a2d6:	e7fd      	b.n	800a2d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2da:	685a      	ldr	r2, [r3, #4]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	1ad2      	subs	r2, r2, r3
 800a2e0:	69bb      	ldr	r3, [r7, #24]
 800a2e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a2ea:	69b8      	ldr	r0, [r7, #24]
 800a2ec:	f000 f90a 	bl	800a504 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a2f0:	4b1d      	ldr	r3, [pc, #116]	@ (800a368 <pvPortMalloc+0x18c>)
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	1ad3      	subs	r3, r2, r3
 800a2fa:	4a1b      	ldr	r2, [pc, #108]	@ (800a368 <pvPortMalloc+0x18c>)
 800a2fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a2fe:	4b1a      	ldr	r3, [pc, #104]	@ (800a368 <pvPortMalloc+0x18c>)
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	4b1b      	ldr	r3, [pc, #108]	@ (800a370 <pvPortMalloc+0x194>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	429a      	cmp	r2, r3
 800a308:	d203      	bcs.n	800a312 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a30a:	4b17      	ldr	r3, [pc, #92]	@ (800a368 <pvPortMalloc+0x18c>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4a18      	ldr	r2, [pc, #96]	@ (800a370 <pvPortMalloc+0x194>)
 800a310:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a314:	685a      	ldr	r2, [r3, #4]
 800a316:	4b13      	ldr	r3, [pc, #76]	@ (800a364 <pvPortMalloc+0x188>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	431a      	orrs	r2, r3
 800a31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a31e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a322:	2200      	movs	r2, #0
 800a324:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a326:	4b13      	ldr	r3, [pc, #76]	@ (800a374 <pvPortMalloc+0x198>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	3301      	adds	r3, #1
 800a32c:	4a11      	ldr	r2, [pc, #68]	@ (800a374 <pvPortMalloc+0x198>)
 800a32e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a330:	f7fe fcc2 	bl	8008cb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	f003 0307 	and.w	r3, r3, #7
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d00b      	beq.n	800a356 <pvPortMalloc+0x17a>
	__asm volatile
 800a33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a342:	f383 8811 	msr	BASEPRI, r3
 800a346:	f3bf 8f6f 	isb	sy
 800a34a:	f3bf 8f4f 	dsb	sy
 800a34e:	60fb      	str	r3, [r7, #12]
}
 800a350:	bf00      	nop
 800a352:	bf00      	nop
 800a354:	e7fd      	b.n	800a352 <pvPortMalloc+0x176>
	return pvReturn;
 800a356:	69fb      	ldr	r3, [r7, #28]
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3728      	adds	r7, #40	@ 0x28
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}
 800a360:	20006158 	.word	0x20006158
 800a364:	2000616c 	.word	0x2000616c
 800a368:	2000615c 	.word	0x2000615c
 800a36c:	20006150 	.word	0x20006150
 800a370:	20006160 	.word	0x20006160
 800a374:	20006164 	.word	0x20006164

0800a378 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b086      	sub	sp, #24
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d04f      	beq.n	800a42a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a38a:	2308      	movs	r3, #8
 800a38c:	425b      	negs	r3, r3
 800a38e:	697a      	ldr	r2, [r7, #20]
 800a390:	4413      	add	r3, r2
 800a392:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	685a      	ldr	r2, [r3, #4]
 800a39c:	4b25      	ldr	r3, [pc, #148]	@ (800a434 <vPortFree+0xbc>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4013      	ands	r3, r2
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d10b      	bne.n	800a3be <vPortFree+0x46>
	__asm volatile
 800a3a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3aa:	f383 8811 	msr	BASEPRI, r3
 800a3ae:	f3bf 8f6f 	isb	sy
 800a3b2:	f3bf 8f4f 	dsb	sy
 800a3b6:	60fb      	str	r3, [r7, #12]
}
 800a3b8:	bf00      	nop
 800a3ba:	bf00      	nop
 800a3bc:	e7fd      	b.n	800a3ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d00b      	beq.n	800a3de <vPortFree+0x66>
	__asm volatile
 800a3c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ca:	f383 8811 	msr	BASEPRI, r3
 800a3ce:	f3bf 8f6f 	isb	sy
 800a3d2:	f3bf 8f4f 	dsb	sy
 800a3d6:	60bb      	str	r3, [r7, #8]
}
 800a3d8:	bf00      	nop
 800a3da:	bf00      	nop
 800a3dc:	e7fd      	b.n	800a3da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	685a      	ldr	r2, [r3, #4]
 800a3e2:	4b14      	ldr	r3, [pc, #80]	@ (800a434 <vPortFree+0xbc>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4013      	ands	r3, r2
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d01e      	beq.n	800a42a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d11a      	bne.n	800a42a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	685a      	ldr	r2, [r3, #4]
 800a3f8:	4b0e      	ldr	r3, [pc, #56]	@ (800a434 <vPortFree+0xbc>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	43db      	mvns	r3, r3
 800a3fe:	401a      	ands	r2, r3
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a404:	f7fe fc4a 	bl	8008c9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	685a      	ldr	r2, [r3, #4]
 800a40c:	4b0a      	ldr	r3, [pc, #40]	@ (800a438 <vPortFree+0xc0>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4413      	add	r3, r2
 800a412:	4a09      	ldr	r2, [pc, #36]	@ (800a438 <vPortFree+0xc0>)
 800a414:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a416:	6938      	ldr	r0, [r7, #16]
 800a418:	f000 f874 	bl	800a504 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a41c:	4b07      	ldr	r3, [pc, #28]	@ (800a43c <vPortFree+0xc4>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	3301      	adds	r3, #1
 800a422:	4a06      	ldr	r2, [pc, #24]	@ (800a43c <vPortFree+0xc4>)
 800a424:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a426:	f7fe fc47 	bl	8008cb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a42a:	bf00      	nop
 800a42c:	3718      	adds	r7, #24
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	2000616c 	.word	0x2000616c
 800a438:	2000615c 	.word	0x2000615c
 800a43c:	20006168 	.word	0x20006168

0800a440 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a440:	b480      	push	{r7}
 800a442:	b085      	sub	sp, #20
 800a444:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a446:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a44a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a44c:	4b27      	ldr	r3, [pc, #156]	@ (800a4ec <prvHeapInit+0xac>)
 800a44e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f003 0307 	and.w	r3, r3, #7
 800a456:	2b00      	cmp	r3, #0
 800a458:	d00c      	beq.n	800a474 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	3307      	adds	r3, #7
 800a45e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f023 0307 	bic.w	r3, r3, #7
 800a466:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a468:	68ba      	ldr	r2, [r7, #8]
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	1ad3      	subs	r3, r2, r3
 800a46e:	4a1f      	ldr	r2, [pc, #124]	@ (800a4ec <prvHeapInit+0xac>)
 800a470:	4413      	add	r3, r2
 800a472:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a478:	4a1d      	ldr	r2, [pc, #116]	@ (800a4f0 <prvHeapInit+0xb0>)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a47e:	4b1c      	ldr	r3, [pc, #112]	@ (800a4f0 <prvHeapInit+0xb0>)
 800a480:	2200      	movs	r2, #0
 800a482:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	68ba      	ldr	r2, [r7, #8]
 800a488:	4413      	add	r3, r2
 800a48a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a48c:	2208      	movs	r2, #8
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	1a9b      	subs	r3, r3, r2
 800a492:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f023 0307 	bic.w	r3, r3, #7
 800a49a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	4a15      	ldr	r2, [pc, #84]	@ (800a4f4 <prvHeapInit+0xb4>)
 800a4a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a4a2:	4b14      	ldr	r3, [pc, #80]	@ (800a4f4 <prvHeapInit+0xb4>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a4aa:	4b12      	ldr	r3, [pc, #72]	@ (800a4f4 <prvHeapInit+0xb4>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	68fa      	ldr	r2, [r7, #12]
 800a4ba:	1ad2      	subs	r2, r2, r3
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a4c0:	4b0c      	ldr	r3, [pc, #48]	@ (800a4f4 <prvHeapInit+0xb4>)
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	4a0a      	ldr	r2, [pc, #40]	@ (800a4f8 <prvHeapInit+0xb8>)
 800a4ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	4a09      	ldr	r2, [pc, #36]	@ (800a4fc <prvHeapInit+0xbc>)
 800a4d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a4d8:	4b09      	ldr	r3, [pc, #36]	@ (800a500 <prvHeapInit+0xc0>)
 800a4da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a4de:	601a      	str	r2, [r3, #0]
}
 800a4e0:	bf00      	nop
 800a4e2:	3714      	adds	r7, #20
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr
 800a4ec:	20005550 	.word	0x20005550
 800a4f0:	20006150 	.word	0x20006150
 800a4f4:	20006158 	.word	0x20006158
 800a4f8:	20006160 	.word	0x20006160
 800a4fc:	2000615c 	.word	0x2000615c
 800a500:	2000616c 	.word	0x2000616c

0800a504 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a504:	b480      	push	{r7}
 800a506:	b085      	sub	sp, #20
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a50c:	4b28      	ldr	r3, [pc, #160]	@ (800a5b0 <prvInsertBlockIntoFreeList+0xac>)
 800a50e:	60fb      	str	r3, [r7, #12]
 800a510:	e002      	b.n	800a518 <prvInsertBlockIntoFreeList+0x14>
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	60fb      	str	r3, [r7, #12]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	687a      	ldr	r2, [r7, #4]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d8f7      	bhi.n	800a512 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	68ba      	ldr	r2, [r7, #8]
 800a52c:	4413      	add	r3, r2
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	429a      	cmp	r2, r3
 800a532:	d108      	bne.n	800a546 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	685a      	ldr	r2, [r3, #4]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	441a      	add	r2, r3
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	68ba      	ldr	r2, [r7, #8]
 800a550:	441a      	add	r2, r3
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	429a      	cmp	r2, r3
 800a558:	d118      	bne.n	800a58c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681a      	ldr	r2, [r3, #0]
 800a55e:	4b15      	ldr	r3, [pc, #84]	@ (800a5b4 <prvInsertBlockIntoFreeList+0xb0>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	429a      	cmp	r2, r3
 800a564:	d00d      	beq.n	800a582 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	685a      	ldr	r2, [r3, #4]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	441a      	add	r2, r3
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	601a      	str	r2, [r3, #0]
 800a580:	e008      	b.n	800a594 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a582:	4b0c      	ldr	r3, [pc, #48]	@ (800a5b4 <prvInsertBlockIntoFreeList+0xb0>)
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	601a      	str	r2, [r3, #0]
 800a58a:	e003      	b.n	800a594 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a594:	68fa      	ldr	r2, [r7, #12]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	429a      	cmp	r2, r3
 800a59a:	d002      	beq.n	800a5a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5a2:	bf00      	nop
 800a5a4:	3714      	adds	r7, #20
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop
 800a5b0:	20006150 	.word	0x20006150
 800a5b4:	20006158 	.word	0x20006158

0800a5b8 <rcl_get_zero_initialized_init_options>:
 800a5b8:	2000      	movs	r0, #0
 800a5ba:	4770      	bx	lr

0800a5bc <rcl_init_options_init>:
 800a5bc:	b084      	sub	sp, #16
 800a5be:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5c0:	b097      	sub	sp, #92	@ 0x5c
 800a5c2:	ae1d      	add	r6, sp, #116	@ 0x74
 800a5c4:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	d058      	beq.n	800a67e <rcl_init_options_init+0xc2>
 800a5cc:	6803      	ldr	r3, [r0, #0]
 800a5ce:	4605      	mov	r5, r0
 800a5d0:	b133      	cbz	r3, 800a5e0 <rcl_init_options_init+0x24>
 800a5d2:	2464      	movs	r4, #100	@ 0x64
 800a5d4:	4620      	mov	r0, r4
 800a5d6:	b017      	add	sp, #92	@ 0x5c
 800a5d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a5dc:	b004      	add	sp, #16
 800a5de:	4770      	bx	lr
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	f001 f997 	bl	800b914 <rcutils_allocator_is_valid>
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	d049      	beq.n	800a67e <rcl_init_options_init+0xc2>
 800a5ea:	46b4      	mov	ip, r6
 800a5ec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a5f0:	ac11      	add	r4, sp, #68	@ 0x44
 800a5f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a5f4:	f8dc 3000 	ldr.w	r3, [ip]
 800a5f8:	6023      	str	r3, [r4, #0]
 800a5fa:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800a5fc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a5fe:	2050      	movs	r0, #80	@ 0x50
 800a600:	4798      	blx	r3
 800a602:	4604      	mov	r4, r0
 800a604:	6028      	str	r0, [r5, #0]
 800a606:	2800      	cmp	r0, #0
 800a608:	d03b      	beq.n	800a682 <rcl_init_options_init+0xc6>
 800a60a:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800a60e:	4686      	mov	lr, r0
 800a610:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a614:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a618:	f8dc 3000 	ldr.w	r3, [ip]
 800a61c:	f8ce 3000 	str.w	r3, [lr]
 800a620:	a802      	add	r0, sp, #8
 800a622:	f001 fa09 	bl	800ba38 <rmw_get_zero_initialized_init_options>
 800a626:	f10d 0e08 	add.w	lr, sp, #8
 800a62a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a62e:	f104 0c18 	add.w	ip, r4, #24
 800a632:	682f      	ldr	r7, [r5, #0]
 800a634:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a638:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a63c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a640:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a644:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a648:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800a64c:	ac20      	add	r4, sp, #128	@ 0x80
 800a64e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800a652:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a656:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a65a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800a65e:	f107 0018 	add.w	r0, r7, #24
 800a662:	f001 fa17 	bl	800ba94 <rmw_init_options_init>
 800a666:	4604      	mov	r4, r0
 800a668:	2800      	cmp	r0, #0
 800a66a:	d0b3      	beq.n	800a5d4 <rcl_init_options_init+0x18>
 800a66c:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800a66e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a670:	6828      	ldr	r0, [r5, #0]
 800a672:	4798      	blx	r3
 800a674:	4620      	mov	r0, r4
 800a676:	f007 fa7d 	bl	8011b74 <rcl_convert_rmw_ret_to_rcl_ret>
 800a67a:	4604      	mov	r4, r0
 800a67c:	e7aa      	b.n	800a5d4 <rcl_init_options_init+0x18>
 800a67e:	240b      	movs	r4, #11
 800a680:	e7a8      	b.n	800a5d4 <rcl_init_options_init+0x18>
 800a682:	240a      	movs	r4, #10
 800a684:	e7a6      	b.n	800a5d4 <rcl_init_options_init+0x18>
 800a686:	bf00      	nop

0800a688 <rcl_init_options_fini>:
 800a688:	b530      	push	{r4, r5, lr}
 800a68a:	b087      	sub	sp, #28
 800a68c:	b1f0      	cbz	r0, 800a6cc <rcl_init_options_fini+0x44>
 800a68e:	6803      	ldr	r3, [r0, #0]
 800a690:	4604      	mov	r4, r0
 800a692:	b1db      	cbz	r3, 800a6cc <rcl_init_options_fini+0x44>
 800a694:	469c      	mov	ip, r3
 800a696:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a69a:	f10d 0e04 	add.w	lr, sp, #4
 800a69e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a6a2:	f8dc 3000 	ldr.w	r3, [ip]
 800a6a6:	f8ce 3000 	str.w	r3, [lr]
 800a6aa:	a801      	add	r0, sp, #4
 800a6ac:	f001 f932 	bl	800b914 <rcutils_allocator_is_valid>
 800a6b0:	b160      	cbz	r0, 800a6cc <rcl_init_options_fini+0x44>
 800a6b2:	6820      	ldr	r0, [r4, #0]
 800a6b4:	3018      	adds	r0, #24
 800a6b6:	f001 fa9d 	bl	800bbf4 <rmw_init_options_fini>
 800a6ba:	4605      	mov	r5, r0
 800a6bc:	b950      	cbnz	r0, 800a6d4 <rcl_init_options_fini+0x4c>
 800a6be:	6820      	ldr	r0, [r4, #0]
 800a6c0:	9b02      	ldr	r3, [sp, #8]
 800a6c2:	9905      	ldr	r1, [sp, #20]
 800a6c4:	4798      	blx	r3
 800a6c6:	4628      	mov	r0, r5
 800a6c8:	b007      	add	sp, #28
 800a6ca:	bd30      	pop	{r4, r5, pc}
 800a6cc:	250b      	movs	r5, #11
 800a6ce:	4628      	mov	r0, r5
 800a6d0:	b007      	add	sp, #28
 800a6d2:	bd30      	pop	{r4, r5, pc}
 800a6d4:	f007 fa4e 	bl	8011b74 <rcl_convert_rmw_ret_to_rcl_ret>
 800a6d8:	4605      	mov	r5, r0
 800a6da:	e7f8      	b.n	800a6ce <rcl_init_options_fini+0x46>

0800a6dc <rcl_init_options_copy>:
 800a6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6e0:	b094      	sub	sp, #80	@ 0x50
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	d058      	beq.n	800a798 <rcl_init_options_copy+0xbc>
 800a6e6:	4604      	mov	r4, r0
 800a6e8:	6800      	ldr	r0, [r0, #0]
 800a6ea:	2800      	cmp	r0, #0
 800a6ec:	d054      	beq.n	800a798 <rcl_init_options_copy+0xbc>
 800a6ee:	460e      	mov	r6, r1
 800a6f0:	f001 f910 	bl	800b914 <rcutils_allocator_is_valid>
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	d04f      	beq.n	800a798 <rcl_init_options_copy+0xbc>
 800a6f8:	2e00      	cmp	r6, #0
 800a6fa:	d04d      	beq.n	800a798 <rcl_init_options_copy+0xbc>
 800a6fc:	6833      	ldr	r3, [r6, #0]
 800a6fe:	b123      	cbz	r3, 800a70a <rcl_init_options_copy+0x2e>
 800a700:	2464      	movs	r4, #100	@ 0x64
 800a702:	4620      	mov	r0, r4
 800a704:	b014      	add	sp, #80	@ 0x50
 800a706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a70a:	6827      	ldr	r7, [r4, #0]
 800a70c:	46bc      	mov	ip, r7
 800a70e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a712:	ad0f      	add	r5, sp, #60	@ 0x3c
 800a714:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a716:	f8dc 3000 	ldr.w	r3, [ip]
 800a71a:	f8d7 8000 	ldr.w	r8, [r7]
 800a71e:	602b      	str	r3, [r5, #0]
 800a720:	4619      	mov	r1, r3
 800a722:	2050      	movs	r0, #80	@ 0x50
 800a724:	47c0      	blx	r8
 800a726:	4605      	mov	r5, r0
 800a728:	6030      	str	r0, [r6, #0]
 800a72a:	b3d0      	cbz	r0, 800a7a2 <rcl_init_options_copy+0xc6>
 800a72c:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800a730:	4686      	mov	lr, r0
 800a732:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a736:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a73a:	f8dc 3000 	ldr.w	r3, [ip]
 800a73e:	f8ce 3000 	str.w	r3, [lr]
 800a742:	4668      	mov	r0, sp
 800a744:	f001 f978 	bl	800ba38 <rmw_get_zero_initialized_init_options>
 800a748:	46ee      	mov	lr, sp
 800a74a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a74e:	f105 0c18 	add.w	ip, r5, #24
 800a752:	6824      	ldr	r4, [r4, #0]
 800a754:	6835      	ldr	r5, [r6, #0]
 800a756:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a75a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a75e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a762:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a766:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a76a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800a76e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800a772:	f104 0018 	add.w	r0, r4, #24
 800a776:	f105 0118 	add.w	r1, r5, #24
 800a77a:	f001 f9f3 	bl	800bb64 <rmw_init_options_copy>
 800a77e:	4604      	mov	r4, r0
 800a780:	2800      	cmp	r0, #0
 800a782:	d0be      	beq.n	800a702 <rcl_init_options_copy+0x26>
 800a784:	f001 f8d4 	bl	800b930 <rcutils_get_error_string>
 800a788:	f001 f8ea 	bl	800b960 <rcutils_reset_error>
 800a78c:	4630      	mov	r0, r6
 800a78e:	f7ff ff7b 	bl	800a688 <rcl_init_options_fini>
 800a792:	b140      	cbz	r0, 800a7a6 <rcl_init_options_copy+0xca>
 800a794:	4604      	mov	r4, r0
 800a796:	e7b4      	b.n	800a702 <rcl_init_options_copy+0x26>
 800a798:	240b      	movs	r4, #11
 800a79a:	4620      	mov	r0, r4
 800a79c:	b014      	add	sp, #80	@ 0x50
 800a79e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7a2:	240a      	movs	r4, #10
 800a7a4:	e7ad      	b.n	800a702 <rcl_init_options_copy+0x26>
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	b014      	add	sp, #80	@ 0x50
 800a7aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ae:	f007 b9e1 	b.w	8011b74 <rcl_convert_rmw_ret_to_rcl_ret>
 800a7b2:	bf00      	nop

0800a7b4 <rcl_init_options_set_domain_id>:
 800a7b4:	b120      	cbz	r0, 800a7c0 <rcl_init_options_set_domain_id+0xc>
 800a7b6:	6803      	ldr	r3, [r0, #0]
 800a7b8:	b113      	cbz	r3, 800a7c0 <rcl_init_options_set_domain_id+0xc>
 800a7ba:	6259      	str	r1, [r3, #36]	@ 0x24
 800a7bc:	2000      	movs	r0, #0
 800a7be:	4770      	bx	lr
 800a7c0:	200b      	movs	r0, #11
 800a7c2:	4770      	bx	lr

0800a7c4 <rcl_get_zero_initialized_publisher>:
 800a7c4:	4b01      	ldr	r3, [pc, #4]	@ (800a7cc <rcl_get_zero_initialized_publisher+0x8>)
 800a7c6:	6818      	ldr	r0, [r3, #0]
 800a7c8:	4770      	bx	lr
 800a7ca:	bf00      	nop
 800a7cc:	08018ab4 	.word	0x08018ab4

0800a7d0 <rcl_publisher_init>:
 800a7d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7d4:	b088      	sub	sp, #32
 800a7d6:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800a7d8:	2d00      	cmp	r5, #0
 800a7da:	d069      	beq.n	800a8b0 <rcl_publisher_init+0xe0>
 800a7dc:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800a7e0:	4604      	mov	r4, r0
 800a7e2:	4648      	mov	r0, r9
 800a7e4:	460e      	mov	r6, r1
 800a7e6:	4690      	mov	r8, r2
 800a7e8:	461f      	mov	r7, r3
 800a7ea:	f001 f893 	bl	800b914 <rcutils_allocator_is_valid>
 800a7ee:	2800      	cmp	r0, #0
 800a7f0:	d05e      	beq.n	800a8b0 <rcl_publisher_init+0xe0>
 800a7f2:	2c00      	cmp	r4, #0
 800a7f4:	d05c      	beq.n	800a8b0 <rcl_publisher_init+0xe0>
 800a7f6:	f8d4 a000 	ldr.w	sl, [r4]
 800a7fa:	f1ba 0f00 	cmp.w	sl, #0
 800a7fe:	d004      	beq.n	800a80a <rcl_publisher_init+0x3a>
 800a800:	2764      	movs	r7, #100	@ 0x64
 800a802:	4638      	mov	r0, r7
 800a804:	b008      	add	sp, #32
 800a806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a80a:	4630      	mov	r0, r6
 800a80c:	f007 fcac 	bl	8012168 <rcl_node_is_valid>
 800a810:	2800      	cmp	r0, #0
 800a812:	d052      	beq.n	800a8ba <rcl_publisher_init+0xea>
 800a814:	f1b8 0f00 	cmp.w	r8, #0
 800a818:	d04a      	beq.n	800a8b0 <rcl_publisher_init+0xe0>
 800a81a:	2f00      	cmp	r7, #0
 800a81c:	d048      	beq.n	800a8b0 <rcl_publisher_init+0xe0>
 800a81e:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800a822:	aa07      	add	r2, sp, #28
 800a824:	9205      	str	r2, [sp, #20]
 800a826:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800a82a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a82e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a832:	f8cd a01c 	str.w	sl, [sp, #28]
 800a836:	4639      	mov	r1, r7
 800a838:	e899 000c 	ldmia.w	r9, {r2, r3}
 800a83c:	4630      	mov	r0, r6
 800a83e:	f007 fce7 	bl	8012210 <rcl_node_resolve_name>
 800a842:	4607      	mov	r7, r0
 800a844:	2800      	cmp	r0, #0
 800a846:	d14f      	bne.n	800a8e8 <rcl_publisher_init+0x118>
 800a848:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800a84a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a84c:	20c8      	movs	r0, #200	@ 0xc8
 800a84e:	4798      	blx	r3
 800a850:	6020      	str	r0, [r4, #0]
 800a852:	2800      	cmp	r0, #0
 800a854:	d04e      	beq.n	800a8f4 <rcl_publisher_init+0x124>
 800a856:	4630      	mov	r0, r6
 800a858:	f007 fca8 	bl	80121ac <rcl_node_get_rmw_handle>
 800a85c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a860:	9300      	str	r3, [sp, #0]
 800a862:	9a07      	ldr	r2, [sp, #28]
 800a864:	6827      	ldr	r7, [r4, #0]
 800a866:	462b      	mov	r3, r5
 800a868:	4641      	mov	r1, r8
 800a86a:	f001 fceb 	bl	800c244 <rmw_create_publisher>
 800a86e:	6823      	ldr	r3, [r4, #0]
 800a870:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800a874:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a878:	b370      	cbz	r0, 800a8d8 <rcl_publisher_init+0x108>
 800a87a:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800a87e:	f001 fdbf 	bl	800c400 <rmw_publisher_get_actual_qos>
 800a882:	6823      	ldr	r3, [r4, #0]
 800a884:	4607      	mov	r7, r0
 800a886:	b9d0      	cbnz	r0, 800a8be <rcl_publisher_init+0xee>
 800a888:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800a88c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800a890:	4629      	mov	r1, r5
 800a892:	2270      	movs	r2, #112	@ 0x70
 800a894:	4618      	mov	r0, r3
 800a896:	f00d f998 	bl	8017bca <memcpy>
 800a89a:	6832      	ldr	r2, [r6, #0]
 800a89c:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800a8a0:	9807      	ldr	r0, [sp, #28]
 800a8a2:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800a8a4:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a8a6:	4798      	blx	r3
 800a8a8:	4638      	mov	r0, r7
 800a8aa:	b008      	add	sp, #32
 800a8ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8b0:	270b      	movs	r7, #11
 800a8b2:	4638      	mov	r0, r7
 800a8b4:	b008      	add	sp, #32
 800a8b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8ba:	27c8      	movs	r7, #200	@ 0xc8
 800a8bc:	e7a1      	b.n	800a802 <rcl_publisher_init+0x32>
 800a8be:	b18b      	cbz	r3, 800a8e4 <rcl_publisher_init+0x114>
 800a8c0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a8c4:	b142      	cbz	r2, 800a8d8 <rcl_publisher_init+0x108>
 800a8c6:	4630      	mov	r0, r6
 800a8c8:	f007 fc70 	bl	80121ac <rcl_node_get_rmw_handle>
 800a8cc:	6823      	ldr	r3, [r4, #0]
 800a8ce:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800a8d2:	f001 fda5 	bl	800c420 <rmw_destroy_publisher>
 800a8d6:	6823      	ldr	r3, [r4, #0]
 800a8d8:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800a8da:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a8dc:	4618      	mov	r0, r3
 800a8de:	4790      	blx	r2
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	6023      	str	r3, [r4, #0]
 800a8e4:	2701      	movs	r7, #1
 800a8e6:	e7db      	b.n	800a8a0 <rcl_publisher_init+0xd0>
 800a8e8:	2867      	cmp	r0, #103	@ 0x67
 800a8ea:	d0d9      	beq.n	800a8a0 <rcl_publisher_init+0xd0>
 800a8ec:	2869      	cmp	r0, #105	@ 0x69
 800a8ee:	d003      	beq.n	800a8f8 <rcl_publisher_init+0x128>
 800a8f0:	280a      	cmp	r0, #10
 800a8f2:	d1f7      	bne.n	800a8e4 <rcl_publisher_init+0x114>
 800a8f4:	270a      	movs	r7, #10
 800a8f6:	e7d3      	b.n	800a8a0 <rcl_publisher_init+0xd0>
 800a8f8:	2767      	movs	r7, #103	@ 0x67
 800a8fa:	e7d1      	b.n	800a8a0 <rcl_publisher_init+0xd0>

0800a8fc <rcl_publisher_get_default_options>:
 800a8fc:	b570      	push	{r4, r5, r6, lr}
 800a8fe:	4d14      	ldr	r5, [pc, #80]	@ (800a950 <rcl_publisher_get_default_options+0x54>)
 800a900:	4914      	ldr	r1, [pc, #80]	@ (800a954 <rcl_publisher_get_default_options+0x58>)
 800a902:	b088      	sub	sp, #32
 800a904:	4604      	mov	r4, r0
 800a906:	2250      	movs	r2, #80	@ 0x50
 800a908:	4628      	mov	r0, r5
 800a90a:	f00d f95e 	bl	8017bca <memcpy>
 800a90e:	a802      	add	r0, sp, #8
 800a910:	f000 fff2 	bl	800b8f8 <rcutils_get_default_allocator>
 800a914:	f10d 0c08 	add.w	ip, sp, #8
 800a918:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a91c:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800a920:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a924:	466e      	mov	r6, sp
 800a926:	f8dc 3000 	ldr.w	r3, [ip]
 800a92a:	f8ce 3000 	str.w	r3, [lr]
 800a92e:	4630      	mov	r0, r6
 800a930:	f001 f892 	bl	800ba58 <rmw_get_default_publisher_options>
 800a934:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a938:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800a93c:	e883 0003 	stmia.w	r3, {r0, r1}
 800a940:	2270      	movs	r2, #112	@ 0x70
 800a942:	4629      	mov	r1, r5
 800a944:	4620      	mov	r0, r4
 800a946:	f00d f940 	bl	8017bca <memcpy>
 800a94a:	4620      	mov	r0, r4
 800a94c:	b008      	add	sp, #32
 800a94e:	bd70      	pop	{r4, r5, r6, pc}
 800a950:	20006170 	.word	0x20006170
 800a954:	08018ab8 	.word	0x08018ab8

0800a958 <rcl_publish>:
 800a958:	b1f8      	cbz	r0, 800a99a <rcl_publish+0x42>
 800a95a:	6803      	ldr	r3, [r0, #0]
 800a95c:	b570      	push	{r4, r5, r6, lr}
 800a95e:	4604      	mov	r4, r0
 800a960:	b1b3      	cbz	r3, 800a990 <rcl_publish+0x38>
 800a962:	4616      	mov	r6, r2
 800a964:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a968:	b192      	cbz	r2, 800a990 <rcl_publish+0x38>
 800a96a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800a96e:	460d      	mov	r5, r1
 800a970:	f007 f91e 	bl	8011bb0 <rcl_context_is_valid>
 800a974:	b160      	cbz	r0, 800a990 <rcl_publish+0x38>
 800a976:	6823      	ldr	r3, [r4, #0]
 800a978:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a97c:	b140      	cbz	r0, 800a990 <rcl_publish+0x38>
 800a97e:	b155      	cbz	r5, 800a996 <rcl_publish+0x3e>
 800a980:	4632      	mov	r2, r6
 800a982:	4629      	mov	r1, r5
 800a984:	f001 fbfe 	bl	800c184 <rmw_publish>
 800a988:	3800      	subs	r0, #0
 800a98a:	bf18      	it	ne
 800a98c:	2001      	movne	r0, #1
 800a98e:	bd70      	pop	{r4, r5, r6, pc}
 800a990:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a994:	bd70      	pop	{r4, r5, r6, pc}
 800a996:	200b      	movs	r0, #11
 800a998:	bd70      	pop	{r4, r5, r6, pc}
 800a99a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800a99e:	4770      	bx	lr

0800a9a0 <rcl_publisher_is_valid>:
 800a9a0:	b1a0      	cbz	r0, 800a9cc <rcl_publisher_is_valid+0x2c>
 800a9a2:	6803      	ldr	r3, [r0, #0]
 800a9a4:	b510      	push	{r4, lr}
 800a9a6:	4604      	mov	r4, r0
 800a9a8:	b173      	cbz	r3, 800a9c8 <rcl_publisher_is_valid+0x28>
 800a9aa:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800a9ae:	b15a      	cbz	r2, 800a9c8 <rcl_publisher_is_valid+0x28>
 800a9b0:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800a9b4:	f007 f8fc 	bl	8011bb0 <rcl_context_is_valid>
 800a9b8:	b130      	cbz	r0, 800a9c8 <rcl_publisher_is_valid+0x28>
 800a9ba:	6823      	ldr	r3, [r4, #0]
 800a9bc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800a9c0:	3800      	subs	r0, #0
 800a9c2:	bf18      	it	ne
 800a9c4:	2001      	movne	r0, #1
 800a9c6:	bd10      	pop	{r4, pc}
 800a9c8:	2000      	movs	r0, #0
 800a9ca:	bd10      	pop	{r4, pc}
 800a9cc:	2000      	movs	r0, #0
 800a9ce:	4770      	bx	lr

0800a9d0 <rcl_publisher_is_valid_except_context>:
 800a9d0:	b130      	cbz	r0, 800a9e0 <rcl_publisher_is_valid_except_context+0x10>
 800a9d2:	6800      	ldr	r0, [r0, #0]
 800a9d4:	b120      	cbz	r0, 800a9e0 <rcl_publisher_is_valid_except_context+0x10>
 800a9d6:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800a9da:	3800      	subs	r0, #0
 800a9dc:	bf18      	it	ne
 800a9de:	2001      	movne	r0, #1
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop

0800a9e4 <_rclc_check_for_new_data>:
 800a9e4:	2800      	cmp	r0, #0
 800a9e6:	d046      	beq.n	800aa76 <_rclc_check_for_new_data+0x92>
 800a9e8:	b510      	push	{r4, lr}
 800a9ea:	7802      	ldrb	r2, [r0, #0]
 800a9ec:	b084      	sub	sp, #16
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2a0a      	cmp	r2, #10
 800a9f2:	d842      	bhi.n	800aa7a <_rclc_check_for_new_data+0x96>
 800a9f4:	e8df f002 	tbb	[pc, r2]
 800a9f8:	14181212 	.word	0x14181212
 800a9fc:	06060614 	.word	0x06060614
 800aa00:	2e1a      	.short	0x2e1a
 800aa02:	16          	.byte	0x16
 800aa03:	00          	.byte	0x00
 800aa04:	6a0a      	ldr	r2, [r1, #32]
 800aa06:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800aa08:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800aa0c:	2000      	movs	r0, #0
 800aa0e:	1a12      	subs	r2, r2, r0
 800aa10:	bf18      	it	ne
 800aa12:	2201      	movne	r2, #1
 800aa14:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800aa18:	b004      	add	sp, #16
 800aa1a:	bd10      	pop	{r4, pc}
 800aa1c:	680a      	ldr	r2, [r1, #0]
 800aa1e:	e7f2      	b.n	800aa06 <_rclc_check_for_new_data+0x22>
 800aa20:	698a      	ldr	r2, [r1, #24]
 800aa22:	e7f0      	b.n	800aa06 <_rclc_check_for_new_data+0x22>
 800aa24:	688a      	ldr	r2, [r1, #8]
 800aa26:	e7ee      	b.n	800aa06 <_rclc_check_for_new_data+0x22>
 800aa28:	690a      	ldr	r2, [r1, #16]
 800aa2a:	e7ec      	b.n	800aa06 <_rclc_check_for_new_data+0x22>
 800aa2c:	685c      	ldr	r4, [r3, #4]
 800aa2e:	4608      	mov	r0, r1
 800aa30:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800aa34:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800aa38:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800aa3c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800aa40:	9300      	str	r3, [sp, #0]
 800aa42:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800aa46:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800aa4a:	f104 0110 	add.w	r1, r4, #16
 800aa4e:	f009 fab7 	bl	8013fc0 <rcl_action_client_wait_set_get_entities_ready>
 800aa52:	e7e1      	b.n	800aa18 <_rclc_check_for_new_data+0x34>
 800aa54:	685c      	ldr	r4, [r3, #4]
 800aa56:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800aa5a:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800aa5e:	e9cd 3200 	strd	r3, r2, [sp]
 800aa62:	4608      	mov	r0, r1
 800aa64:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800aa68:	f104 0220 	add.w	r2, r4, #32
 800aa6c:	f104 0110 	add.w	r1, r4, #16
 800aa70:	f009 fcbe 	bl	80143f0 <rcl_action_server_wait_set_get_entities_ready>
 800aa74:	e7d0      	b.n	800aa18 <_rclc_check_for_new_data+0x34>
 800aa76:	200b      	movs	r0, #11
 800aa78:	4770      	bx	lr
 800aa7a:	2001      	movs	r0, #1
 800aa7c:	e7cc      	b.n	800aa18 <_rclc_check_for_new_data+0x34>
 800aa7e:	bf00      	nop

0800aa80 <_rclc_take_new_data>:
 800aa80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa82:	b09b      	sub	sp, #108	@ 0x6c
 800aa84:	2800      	cmp	r0, #0
 800aa86:	f000 8088 	beq.w	800ab9a <_rclc_take_new_data+0x11a>
 800aa8a:	7803      	ldrb	r3, [r0, #0]
 800aa8c:	4604      	mov	r4, r0
 800aa8e:	2b0a      	cmp	r3, #10
 800aa90:	f200 8167 	bhi.w	800ad62 <_rclc_take_new_data+0x2e2>
 800aa94:	e8df f003 	tbb	[pc, r3]
 800aa98:	44152d2d 	.word	0x44152d2d
 800aa9c:	19191944 	.word	0x19191944
 800aaa0:	065a      	.short	0x065a
 800aaa2:	15          	.byte	0x15
 800aaa3:	00          	.byte	0x00
 800aaa4:	6840      	ldr	r0, [r0, #4]
 800aaa6:	f890 3020 	ldrb.w	r3, [r0, #32]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	f040 80b2 	bne.w	800ac14 <_rclc_take_new_data+0x194>
 800aab0:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	f040 80e4 	bne.w	800ac82 <_rclc_take_new_data+0x202>
 800aaba:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d16f      	bne.n	800aba2 <_rclc_take_new_data+0x122>
 800aac2:	2500      	movs	r5, #0
 800aac4:	4628      	mov	r0, r5
 800aac6:	b01b      	add	sp, #108	@ 0x6c
 800aac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaca:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800aacc:	6a0b      	ldr	r3, [r1, #32]
 800aace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d0f5      	beq.n	800aac2 <_rclc_take_new_data+0x42>
 800aad6:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800aada:	f104 0110 	add.w	r1, r4, #16
 800aade:	f007 fd41 	bl	8012564 <rcl_take_request>
 800aae2:	4605      	mov	r5, r0
 800aae4:	2800      	cmp	r0, #0
 800aae6:	d0ec      	beq.n	800aac2 <_rclc_take_new_data+0x42>
 800aae8:	f240 2359 	movw	r3, #601	@ 0x259
 800aaec:	4298      	cmp	r0, r3
 800aaee:	d013      	beq.n	800ab18 <_rclc_take_new_data+0x98>
 800aaf0:	e029      	b.n	800ab46 <_rclc_take_new_data+0xc6>
 800aaf2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800aaf4:	680b      	ldr	r3, [r1, #0]
 800aaf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d0e1      	beq.n	800aac2 <_rclc_take_new_data+0x42>
 800aafe:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800ab02:	2300      	movs	r3, #0
 800ab04:	aa0a      	add	r2, sp, #40	@ 0x28
 800ab06:	f007 fe6b 	bl	80127e0 <rcl_take>
 800ab0a:	4605      	mov	r5, r0
 800ab0c:	2800      	cmp	r0, #0
 800ab0e:	d0d9      	beq.n	800aac4 <_rclc_take_new_data+0x44>
 800ab10:	f240 1391 	movw	r3, #401	@ 0x191
 800ab14:	4298      	cmp	r0, r3
 800ab16:	d116      	bne.n	800ab46 <_rclc_take_new_data+0xc6>
 800ab18:	2300      	movs	r3, #0
 800ab1a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800ab1e:	e7d1      	b.n	800aac4 <_rclc_take_new_data+0x44>
 800ab20:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800ab22:	698b      	ldr	r3, [r1, #24]
 800ab24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d0ca      	beq.n	800aac2 <_rclc_take_new_data+0x42>
 800ab2c:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800ab30:	f104 0110 	add.w	r1, r4, #16
 800ab34:	f006 ffcc 	bl	8011ad0 <rcl_take_response>
 800ab38:	4605      	mov	r5, r0
 800ab3a:	2800      	cmp	r0, #0
 800ab3c:	d0c1      	beq.n	800aac2 <_rclc_take_new_data+0x42>
 800ab3e:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800ab42:	4298      	cmp	r0, r3
 800ab44:	d0be      	beq.n	800aac4 <_rclc_take_new_data+0x44>
 800ab46:	f000 ff0b 	bl	800b960 <rcutils_reset_error>
 800ab4a:	e7bb      	b.n	800aac4 <_rclc_take_new_data+0x44>
 800ab4c:	6840      	ldr	r0, [r0, #4]
 800ab4e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d17d      	bne.n	800ac52 <_rclc_take_new_data+0x1d2>
 800ab56:	69c3      	ldr	r3, [r0, #28]
 800ab58:	b11b      	cbz	r3, 800ab62 <_rclc_take_new_data+0xe2>
 800ab5a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d144      	bne.n	800abec <_rclc_take_new_data+0x16c>
 800ab62:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	f040 80ac 	bne.w	800acc4 <_rclc_take_new_data+0x244>
 800ab6c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d0a6      	beq.n	800aac2 <_rclc_take_new_data+0x42>
 800ab74:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800ab76:	a90a      	add	r1, sp, #40	@ 0x28
 800ab78:	3010      	adds	r0, #16
 800ab7a:	f009 f8f9 	bl	8013d70 <rcl_action_take_result_response>
 800ab7e:	4605      	mov	r5, r0
 800ab80:	2800      	cmp	r0, #0
 800ab82:	d1e0      	bne.n	800ab46 <_rclc_take_new_data+0xc6>
 800ab84:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ab88:	6860      	ldr	r0, [r4, #4]
 800ab8a:	f009 fd55 	bl	8014638 <rclc_action_find_handle_by_result_request_sequence_number>
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	d098      	beq.n	800aac4 <_rclc_take_new_data+0x44>
 800ab92:	2301      	movs	r3, #1
 800ab94:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800ab98:	e794      	b.n	800aac4 <_rclc_take_new_data+0x44>
 800ab9a:	250b      	movs	r5, #11
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	b01b      	add	sp, #108	@ 0x6c
 800aba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aba2:	ae04      	add	r6, sp, #16
 800aba4:	aa0a      	add	r2, sp, #40	@ 0x28
 800aba6:	3010      	adds	r0, #16
 800aba8:	4631      	mov	r1, r6
 800abaa:	f009 fb55 	bl	8014258 <rcl_action_take_cancel_request>
 800abae:	4605      	mov	r5, r0
 800abb0:	2800      	cmp	r0, #0
 800abb2:	d1c8      	bne.n	800ab46 <_rclc_take_new_data+0xc6>
 800abb4:	6860      	ldr	r0, [r4, #4]
 800abb6:	a90a      	add	r1, sp, #40	@ 0x28
 800abb8:	f009 fcfc 	bl	80145b4 <rclc_action_find_goal_handle_by_uuid>
 800abbc:	4607      	mov	r7, r0
 800abbe:	2800      	cmp	r0, #0
 800abc0:	f000 80bb 	beq.w	800ad3a <_rclc_take_new_data+0x2ba>
 800abc4:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800abc8:	2101      	movs	r1, #1
 800abca:	f009 fc7d 	bl	80144c8 <rcl_action_transition_goal_state>
 800abce:	2803      	cmp	r0, #3
 800abd0:	4684      	mov	ip, r0
 800abd2:	f040 80a7 	bne.w	800ad24 <_rclc_take_new_data+0x2a4>
 800abd6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800abd8:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800abdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800abde:	e896 0003 	ldmia.w	r6, {r0, r1}
 800abe2:	e884 0003 	stmia.w	r4, {r0, r1}
 800abe6:	f887 c008 	strb.w	ip, [r7, #8]
 800abea:	e76b      	b.n	800aac4 <_rclc_take_new_data+0x44>
 800abec:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800abee:	3010      	adds	r0, #16
 800abf0:	f009 f93e 	bl	8013e70 <rcl_action_take_feedback>
 800abf4:	4605      	mov	r5, r0
 800abf6:	2800      	cmp	r0, #0
 800abf8:	d1a5      	bne.n	800ab46 <_rclc_take_new_data+0xc6>
 800abfa:	6860      	ldr	r0, [r4, #4]
 800abfc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800abfe:	f009 fcd9 	bl	80145b4 <rclc_action_find_goal_handle_by_uuid>
 800ac02:	4603      	mov	r3, r0
 800ac04:	2800      	cmp	r0, #0
 800ac06:	f000 80a3 	beq.w	800ad50 <_rclc_take_new_data+0x2d0>
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	6860      	ldr	r0, [r4, #4]
 800ac0e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800ac12:	e7a6      	b.n	800ab62 <_rclc_take_new_data+0xe2>
 800ac14:	f009 fca8 	bl	8014568 <rclc_action_take_goal_handle>
 800ac18:	4606      	mov	r6, r0
 800ac1a:	6860      	ldr	r0, [r4, #4]
 800ac1c:	2e00      	cmp	r6, #0
 800ac1e:	f43f af47 	beq.w	800aab0 <_rclc_take_new_data+0x30>
 800ac22:	6070      	str	r0, [r6, #4]
 800ac24:	69f2      	ldr	r2, [r6, #28]
 800ac26:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800ac2a:	3010      	adds	r0, #16
 800ac2c:	f009 fa5c 	bl	80140e8 <rcl_action_take_goal_request>
 800ac30:	4605      	mov	r5, r0
 800ac32:	2800      	cmp	r0, #0
 800ac34:	f040 808e 	bne.w	800ad54 <_rclc_take_new_data+0x2d4>
 800ac38:	69f7      	ldr	r7, [r6, #28]
 800ac3a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ac3c:	7235      	strb	r5, [r6, #8]
 800ac3e:	f8c6 0009 	str.w	r0, [r6, #9]
 800ac42:	f8c6 100d 	str.w	r1, [r6, #13]
 800ac46:	6860      	ldr	r0, [r4, #4]
 800ac48:	f8c6 2011 	str.w	r2, [r6, #17]
 800ac4c:	f8c6 3015 	str.w	r3, [r6, #21]
 800ac50:	e72e      	b.n	800aab0 <_rclc_take_new_data+0x30>
 800ac52:	aa04      	add	r2, sp, #16
 800ac54:	a90a      	add	r1, sp, #40	@ 0x28
 800ac56:	3010      	adds	r0, #16
 800ac58:	f009 f812 	bl	8013c80 <rcl_action_take_goal_response>
 800ac5c:	4605      	mov	r5, r0
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	f47f af71 	bne.w	800ab46 <_rclc_take_new_data+0xc6>
 800ac64:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ac68:	6860      	ldr	r0, [r4, #4]
 800ac6a:	f009 fcd3 	bl	8014614 <rclc_action_find_handle_by_goal_request_sequence_number>
 800ac6e:	b130      	cbz	r0, 800ac7e <_rclc_take_new_data+0x1fe>
 800ac70:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800ac74:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800ac78:	2201      	movs	r2, #1
 800ac7a:	f880 2020 	strb.w	r2, [r0, #32]
 800ac7e:	6860      	ldr	r0, [r4, #4]
 800ac80:	e769      	b.n	800ab56 <_rclc_take_new_data+0xd6>
 800ac82:	aa04      	add	r2, sp, #16
 800ac84:	3010      	adds	r0, #16
 800ac86:	a90a      	add	r1, sp, #40	@ 0x28
 800ac88:	f009 faa6 	bl	80141d8 <rcl_action_take_result_request>
 800ac8c:	4605      	mov	r5, r0
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	f47f af59 	bne.w	800ab46 <_rclc_take_new_data+0xc6>
 800ac94:	6860      	ldr	r0, [r4, #4]
 800ac96:	a904      	add	r1, sp, #16
 800ac98:	f009 fc8c 	bl	80145b4 <rclc_action_find_goal_handle_by_uuid>
 800ac9c:	4607      	mov	r7, r0
 800ac9e:	b160      	cbz	r0, 800acba <_rclc_take_new_data+0x23a>
 800aca0:	ad0a      	add	r5, sp, #40	@ 0x28
 800aca2:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800aca6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aca8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800acaa:	e895 0003 	ldmia.w	r5, {r0, r1}
 800acae:	f04f 0c02 	mov.w	ip, #2
 800acb2:	e886 0003 	stmia.w	r6, {r0, r1}
 800acb6:	f887 c008 	strb.w	ip, [r7, #8]
 800acba:	6860      	ldr	r0, [r4, #4]
 800acbc:	2300      	movs	r3, #0
 800acbe:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800acc2:	e6fa      	b.n	800aaba <_rclc_take_new_data+0x3a>
 800acc4:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800acc8:	a90a      	add	r1, sp, #40	@ 0x28
 800acca:	3010      	adds	r0, #16
 800accc:	f009 f890 	bl	8013df0 <rcl_action_take_cancel_response>
 800acd0:	4605      	mov	r5, r0
 800acd2:	2800      	cmp	r0, #0
 800acd4:	f47f af37 	bne.w	800ab46 <_rclc_take_new_data+0xc6>
 800acd8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800acdc:	6860      	ldr	r0, [r4, #4]
 800acde:	f009 fcbd 	bl	801465c <rclc_action_find_handle_by_cancel_request_sequence_number>
 800ace2:	4606      	mov	r6, r0
 800ace4:	6860      	ldr	r0, [r4, #4]
 800ace6:	2e00      	cmp	r6, #0
 800ace8:	f43f af40 	beq.w	800ab6c <_rclc_take_new_data+0xec>
 800acec:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800acee:	2701      	movs	r7, #1
 800acf0:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	f43f af3a 	beq.w	800ab6c <_rclc_take_new_data+0xec>
 800acf8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800acfa:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800acfe:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800ad02:	f009 fc57 	bl	80145b4 <rclc_action_find_goal_handle_by_uuid>
 800ad06:	b138      	cbz	r0, 800ad18 <_rclc_take_new_data+0x298>
 800ad08:	6860      	ldr	r0, [r4, #4]
 800ad0a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ad0c:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800ad10:	3501      	adds	r5, #1
 800ad12:	42ab      	cmp	r3, r5
 800ad14:	d8f0      	bhi.n	800acf8 <_rclc_take_new_data+0x278>
 800ad16:	e729      	b.n	800ab6c <_rclc_take_new_data+0xec>
 800ad18:	6860      	ldr	r0, [r4, #4]
 800ad1a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ad1c:	3501      	adds	r5, #1
 800ad1e:	42ab      	cmp	r3, r5
 800ad20:	d8ea      	bhi.n	800acf8 <_rclc_take_new_data+0x278>
 800ad22:	e723      	b.n	800ab6c <_rclc_take_new_data+0xec>
 800ad24:	ab06      	add	r3, sp, #24
 800ad26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ad28:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ad2c:	2103      	movs	r1, #3
 800ad2e:	e896 000c 	ldmia.w	r6, {r2, r3}
 800ad32:	6860      	ldr	r0, [r4, #4]
 800ad34:	f009 fd08 	bl	8014748 <rclc_action_server_goal_cancel_reject>
 800ad38:	e6c4      	b.n	800aac4 <_rclc_take_new_data+0x44>
 800ad3a:	ab06      	add	r3, sp, #24
 800ad3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ad3e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ad42:	2102      	movs	r1, #2
 800ad44:	e896 000c 	ldmia.w	r6, {r2, r3}
 800ad48:	6860      	ldr	r0, [r4, #4]
 800ad4a:	f009 fcfd 	bl	8014748 <rclc_action_server_goal_cancel_reject>
 800ad4e:	e6b9      	b.n	800aac4 <_rclc_take_new_data+0x44>
 800ad50:	6860      	ldr	r0, [r4, #4]
 800ad52:	e706      	b.n	800ab62 <_rclc_take_new_data+0xe2>
 800ad54:	6860      	ldr	r0, [r4, #4]
 800ad56:	4631      	mov	r1, r6
 800ad58:	f009 fc16 	bl	8014588 <rclc_action_remove_used_goal_handle>
 800ad5c:	f000 fe00 	bl	800b960 <rcutils_reset_error>
 800ad60:	e6b0      	b.n	800aac4 <_rclc_take_new_data+0x44>
 800ad62:	2501      	movs	r5, #1
 800ad64:	e6ae      	b.n	800aac4 <_rclc_take_new_data+0x44>
 800ad66:	bf00      	nop

0800ad68 <_rclc_execute.part.0>:
 800ad68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad6a:	7803      	ldrb	r3, [r0, #0]
 800ad6c:	b087      	sub	sp, #28
 800ad6e:	4604      	mov	r4, r0
 800ad70:	2b0a      	cmp	r3, #10
 800ad72:	f200 8136 	bhi.w	800afe2 <_rclc_execute.part.0+0x27a>
 800ad76:	e8df f003 	tbb	[pc, r3]
 800ad7a:	435e      	.short	0x435e
 800ad7c:	06a1664f 	.word	0x06a1664f
 800ad80:	6c1e0606 	.word	0x6c1e0606
 800ad84:	59          	.byte	0x59
 800ad85:	00          	.byte	0x00
 800ad86:	2b06      	cmp	r3, #6
 800ad88:	f000 8122 	beq.w	800afd0 <_rclc_execute.part.0+0x268>
 800ad8c:	2b07      	cmp	r3, #7
 800ad8e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ad90:	f040 8118 	bne.w	800afc4 <_rclc_execute.part.0+0x25c>
 800ad94:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800ad98:	6880      	ldr	r0, [r0, #8]
 800ad9a:	4798      	blx	r3
 800ad9c:	f104 0110 	add.w	r1, r4, #16
 800ada0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800ada2:	6860      	ldr	r0, [r4, #4]
 800ada4:	f007 fc1e 	bl	80125e4 <rcl_send_response>
 800ada8:	2800      	cmp	r0, #0
 800adaa:	d033      	beq.n	800ae14 <_rclc_execute.part.0+0xac>
 800adac:	9005      	str	r0, [sp, #20]
 800adae:	f000 fdd7 	bl	800b960 <rcutils_reset_error>
 800adb2:	9805      	ldr	r0, [sp, #20]
 800adb4:	e02e      	b.n	800ae14 <_rclc_execute.part.0+0xac>
 800adb6:	6840      	ldr	r0, [r0, #4]
 800adb8:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	f000 8086 	beq.w	800aece <_rclc_execute.part.0+0x166>
 800adc2:	2600      	movs	r6, #0
 800adc4:	2701      	movs	r7, #1
 800adc6:	e004      	b.n	800add2 <_rclc_execute.part.0+0x6a>
 800adc8:	f009 fba8 	bl	801451c <rclc_action_send_result_request>
 800adcc:	b998      	cbnz	r0, 800adf6 <_rclc_execute.part.0+0x8e>
 800adce:	722f      	strb	r7, [r5, #8]
 800add0:	6860      	ldr	r0, [r4, #4]
 800add2:	f009 fc55 	bl	8014680 <rclc_action_find_first_handle_with_goal_response>
 800add6:	4605      	mov	r5, r0
 800add8:	2800      	cmp	r0, #0
 800adda:	d077      	beq.n	800aecc <_rclc_execute.part.0+0x164>
 800addc:	6863      	ldr	r3, [r4, #4]
 800adde:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ade0:	699b      	ldr	r3, [r3, #24]
 800ade2:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800ade6:	f885 6020 	strb.w	r6, [r5, #32]
 800adea:	4798      	blx	r3
 800adec:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800adf0:	4628      	mov	r0, r5
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d1e8      	bne.n	800adc8 <_rclc_execute.part.0+0x60>
 800adf6:	6860      	ldr	r0, [r4, #4]
 800adf8:	4629      	mov	r1, r5
 800adfa:	f009 fbc5 	bl	8014588 <rclc_action_remove_used_goal_handle>
 800adfe:	e7e7      	b.n	800add0 <_rclc_execute.part.0+0x68>
 800ae00:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800ae04:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800ae08:	2d00      	cmp	r5, #0
 800ae0a:	f000 80c9 	beq.w	800afa0 <_rclc_execute.part.0+0x238>
 800ae0e:	6880      	ldr	r0, [r0, #8]
 800ae10:	4798      	blx	r3
 800ae12:	2000      	movs	r0, #0
 800ae14:	b007      	add	sp, #28
 800ae16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae18:	6840      	ldr	r0, [r0, #4]
 800ae1a:	f007 ffef 	bl	8012dfc <rcl_timer_call>
 800ae1e:	f240 3321 	movw	r3, #801	@ 0x321
 800ae22:	4298      	cmp	r0, r3
 800ae24:	d004      	beq.n	800ae30 <_rclc_execute.part.0+0xc8>
 800ae26:	2800      	cmp	r0, #0
 800ae28:	d0f4      	beq.n	800ae14 <_rclc_execute.part.0+0xac>
 800ae2a:	e7bf      	b.n	800adac <_rclc_execute.part.0+0x44>
 800ae2c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ae2e:	4798      	blx	r3
 800ae30:	2000      	movs	r0, #0
 800ae32:	b007      	add	sp, #28
 800ae34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae36:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800ae3a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ae3c:	b925      	cbnz	r5, 800ae48 <_rclc_execute.part.0+0xe0>
 800ae3e:	4628      	mov	r0, r5
 800ae40:	4798      	blx	r3
 800ae42:	4628      	mov	r0, r5
 800ae44:	e7e6      	b.n	800ae14 <_rclc_execute.part.0+0xac>
 800ae46:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ae48:	68a0      	ldr	r0, [r4, #8]
 800ae4a:	4798      	blx	r3
 800ae4c:	2000      	movs	r0, #0
 800ae4e:	b007      	add	sp, #28
 800ae50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae52:	6840      	ldr	r0, [r0, #4]
 800ae54:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800ae58:	bb3b      	cbnz	r3, 800aeaa <_rclc_execute.part.0+0x142>
 800ae5a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d07b      	beq.n	800af5a <_rclc_execute.part.0+0x1f2>
 800ae62:	f640 0634 	movw	r6, #2100	@ 0x834
 800ae66:	2701      	movs	r7, #1
 800ae68:	e007      	b.n	800ae7a <_rclc_execute.part.0+0x112>
 800ae6a:	4628      	mov	r0, r5
 800ae6c:	f009 fc20 	bl	80146b0 <rclc_action_server_response_goal_request>
 800ae70:	6860      	ldr	r0, [r4, #4]
 800ae72:	4629      	mov	r1, r5
 800ae74:	f009 fb88 	bl	8014588 <rclc_action_remove_used_goal_handle>
 800ae78:	6860      	ldr	r0, [r4, #4]
 800ae7a:	2100      	movs	r1, #0
 800ae7c:	f009 fbb2 	bl	80145e4 <rclc_action_find_first_handle_by_status>
 800ae80:	4605      	mov	r5, r0
 800ae82:	2800      	cmp	r0, #0
 800ae84:	d066      	beq.n	800af54 <_rclc_execute.part.0+0x1ec>
 800ae86:	6863      	ldr	r3, [r4, #4]
 800ae88:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ae8a:	699b      	ldr	r3, [r3, #24]
 800ae8c:	4798      	blx	r3
 800ae8e:	42b0      	cmp	r0, r6
 800ae90:	f04f 0100 	mov.w	r1, #0
 800ae94:	d1e9      	bne.n	800ae6a <_rclc_execute.part.0+0x102>
 800ae96:	2101      	movs	r1, #1
 800ae98:	4628      	mov	r0, r5
 800ae9a:	f009 fc09 	bl	80146b0 <rclc_action_server_response_goal_request>
 800ae9e:	722f      	strb	r7, [r5, #8]
 800aea0:	e7ea      	b.n	800ae78 <_rclc_execute.part.0+0x110>
 800aea2:	6848      	ldr	r0, [r1, #4]
 800aea4:	f009 fb70 	bl	8014588 <rclc_action_remove_used_goal_handle>
 800aea8:	6860      	ldr	r0, [r4, #4]
 800aeaa:	f009 fba7 	bl	80145fc <rclc_action_find_first_terminated_handle>
 800aeae:	4601      	mov	r1, r0
 800aeb0:	2800      	cmp	r0, #0
 800aeb2:	d1f6      	bne.n	800aea2 <_rclc_execute.part.0+0x13a>
 800aeb4:	6860      	ldr	r0, [r4, #4]
 800aeb6:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800aeba:	e7ce      	b.n	800ae5a <_rclc_execute.part.0+0xf2>
 800aebc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800aebe:	6880      	ldr	r0, [r0, #8]
 800aec0:	f104 0110 	add.w	r1, r4, #16
 800aec4:	4798      	blx	r3
 800aec6:	2000      	movs	r0, #0
 800aec8:	b007      	add	sp, #28
 800aeca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aecc:	6860      	ldr	r0, [r4, #4]
 800aece:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800aed2:	b18b      	cbz	r3, 800aef8 <_rclc_execute.part.0+0x190>
 800aed4:	68c5      	ldr	r5, [r0, #12]
 800aed6:	b32d      	cbz	r5, 800af24 <_rclc_execute.part.0+0x1bc>
 800aed8:	2600      	movs	r6, #0
 800aeda:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800aede:	b143      	cbz	r3, 800aef2 <_rclc_execute.part.0+0x18a>
 800aee0:	69c3      	ldr	r3, [r0, #28]
 800aee2:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800aee6:	b123      	cbz	r3, 800aef2 <_rclc_execute.part.0+0x18a>
 800aee8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800aeea:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800aeec:	4628      	mov	r0, r5
 800aeee:	4798      	blx	r3
 800aef0:	6860      	ldr	r0, [r4, #4]
 800aef2:	682d      	ldr	r5, [r5, #0]
 800aef4:	2d00      	cmp	r5, #0
 800aef6:	d1f0      	bne.n	800aeda <_rclc_execute.part.0+0x172>
 800aef8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800aefc:	b193      	cbz	r3, 800af24 <_rclc_execute.part.0+0x1bc>
 800aefe:	68c5      	ldr	r5, [r0, #12]
 800af00:	b185      	cbz	r5, 800af24 <_rclc_execute.part.0+0x1bc>
 800af02:	2600      	movs	r6, #0
 800af04:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800af08:	b14b      	cbz	r3, 800af1e <_rclc_execute.part.0+0x1b6>
 800af0a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800af0c:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800af10:	b12b      	cbz	r3, 800af1e <_rclc_execute.part.0+0x1b6>
 800af12:	4628      	mov	r0, r5
 800af14:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800af18:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800af1a:	4798      	blx	r3
 800af1c:	6860      	ldr	r0, [r4, #4]
 800af1e:	682d      	ldr	r5, [r5, #0]
 800af20:	2d00      	cmp	r5, #0
 800af22:	d1ef      	bne.n	800af04 <_rclc_execute.part.0+0x19c>
 800af24:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d081      	beq.n	800ae30 <_rclc_execute.part.0+0xc8>
 800af2c:	2700      	movs	r7, #0
 800af2e:	e00b      	b.n	800af48 <_rclc_execute.part.0+0x1e0>
 800af30:	6863      	ldr	r3, [r4, #4]
 800af32:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800af34:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800af36:	6a1e      	ldr	r6, [r3, #32]
 800af38:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800af3c:	47b0      	blx	r6
 800af3e:	6860      	ldr	r0, [r4, #4]
 800af40:	4629      	mov	r1, r5
 800af42:	f009 fb21 	bl	8014588 <rclc_action_remove_used_goal_handle>
 800af46:	6860      	ldr	r0, [r4, #4]
 800af48:	f009 fba6 	bl	8014698 <rclc_action_find_first_handle_with_result_response>
 800af4c:	4605      	mov	r5, r0
 800af4e:	2800      	cmp	r0, #0
 800af50:	d1ee      	bne.n	800af30 <_rclc_execute.part.0+0x1c8>
 800af52:	e76d      	b.n	800ae30 <_rclc_execute.part.0+0xc8>
 800af54:	6860      	ldr	r0, [r4, #4]
 800af56:	f880 5020 	strb.w	r5, [r0, #32]
 800af5a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800af5e:	2b00      	cmp	r3, #0
 800af60:	f43f af66 	beq.w	800ae30 <_rclc_execute.part.0+0xc8>
 800af64:	68c5      	ldr	r5, [r0, #12]
 800af66:	b1b5      	cbz	r5, 800af96 <_rclc_execute.part.0+0x22e>
 800af68:	2602      	movs	r6, #2
 800af6a:	e001      	b.n	800af70 <_rclc_execute.part.0+0x208>
 800af6c:	682d      	ldr	r5, [r5, #0]
 800af6e:	b195      	cbz	r5, 800af96 <_rclc_execute.part.0+0x22e>
 800af70:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800af74:	2b03      	cmp	r3, #3
 800af76:	d1f9      	bne.n	800af6c <_rclc_execute.part.0+0x204>
 800af78:	69c3      	ldr	r3, [r0, #28]
 800af7a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800af7c:	4628      	mov	r0, r5
 800af7e:	4798      	blx	r3
 800af80:	4603      	mov	r3, r0
 800af82:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800af86:	4628      	mov	r0, r5
 800af88:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800af8c:	b163      	cbz	r3, 800afa8 <_rclc_execute.part.0+0x240>
 800af8e:	f009 fbaf 	bl	80146f0 <rclc_action_server_goal_cancel_accept>
 800af92:	6860      	ldr	r0, [r4, #4]
 800af94:	e7ea      	b.n	800af6c <_rclc_execute.part.0+0x204>
 800af96:	2300      	movs	r3, #0
 800af98:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800af9c:	4618      	mov	r0, r3
 800af9e:	e739      	b.n	800ae14 <_rclc_execute.part.0+0xac>
 800afa0:	4628      	mov	r0, r5
 800afa2:	4798      	blx	r3
 800afa4:	4628      	mov	r0, r5
 800afa6:	e735      	b.n	800ae14 <_rclc_execute.part.0+0xac>
 800afa8:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800afaa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800afae:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800afb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afb6:	6860      	ldr	r0, [r4, #4]
 800afb8:	2101      	movs	r1, #1
 800afba:	f009 fbc5 	bl	8014748 <rclc_action_server_goal_cancel_reject>
 800afbe:	722e      	strb	r6, [r5, #8]
 800afc0:	6860      	ldr	r0, [r4, #4]
 800afc2:	e7d3      	b.n	800af6c <_rclc_execute.part.0+0x204>
 800afc4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800afc6:	6880      	ldr	r0, [r0, #8]
 800afc8:	4798      	blx	r3
 800afca:	f104 0110 	add.w	r1, r4, #16
 800afce:	e6e7      	b.n	800ada0 <_rclc_execute.part.0+0x38>
 800afd0:	f100 0110 	add.w	r1, r0, #16
 800afd4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800afd6:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800afd8:	6880      	ldr	r0, [r0, #8]
 800afda:	9105      	str	r1, [sp, #20]
 800afdc:	4798      	blx	r3
 800afde:	9905      	ldr	r1, [sp, #20]
 800afe0:	e6de      	b.n	800ada0 <_rclc_execute.part.0+0x38>
 800afe2:	2001      	movs	r0, #1
 800afe4:	e716      	b.n	800ae14 <_rclc_execute.part.0+0xac>
 800afe6:	bf00      	nop

0800afe8 <rclc_executor_trigger_any>:
 800afe8:	2800      	cmp	r0, #0
 800afea:	d03f      	beq.n	800b06c <rclc_executor_trigger_any+0x84>
 800afec:	2900      	cmp	r1, #0
 800afee:	d03e      	beq.n	800b06e <rclc_executor_trigger_any+0x86>
 800aff0:	4603      	mov	r3, r0
 800aff2:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800aff6:	2200      	movs	r2, #0
 800aff8:	2800      	cmp	r0, #0
 800affa:	d037      	beq.n	800b06c <rclc_executor_trigger_any+0x84>
 800affc:	b430      	push	{r4, r5}
 800affe:	f893 c000 	ldrb.w	ip, [r3]
 800b002:	f1bc 0f08 	cmp.w	ip, #8
 800b006:	d11e      	bne.n	800b046 <rclc_executor_trigger_any+0x5e>
 800b008:	685c      	ldr	r4, [r3, #4]
 800b00a:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800b00c:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800b010:	d105      	bne.n	800b01e <rclc_executor_trigger_any+0x36>
 800b012:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800b016:	b910      	cbnz	r0, 800b01e <rclc_executor_trigger_any+0x36>
 800b018:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800b01c:	b128      	cbz	r0, 800b02a <rclc_executor_trigger_any+0x42>
 800b01e:	bc30      	pop	{r4, r5}
 800b020:	4770      	bx	lr
 800b022:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800b026:	2800      	cmp	r0, #0
 800b028:	d1f9      	bne.n	800b01e <rclc_executor_trigger_any+0x36>
 800b02a:	3201      	adds	r2, #1
 800b02c:	4291      	cmp	r1, r2
 800b02e:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800b032:	d018      	beq.n	800b066 <rclc_executor_trigger_any+0x7e>
 800b034:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800b038:	2800      	cmp	r0, #0
 800b03a:	d0f0      	beq.n	800b01e <rclc_executor_trigger_any+0x36>
 800b03c:	f893 c000 	ldrb.w	ip, [r3]
 800b040:	f1bc 0f08 	cmp.w	ip, #8
 800b044:	d0e0      	beq.n	800b008 <rclc_executor_trigger_any+0x20>
 800b046:	f1bc 0f09 	cmp.w	ip, #9
 800b04a:	d1ea      	bne.n	800b022 <rclc_executor_trigger_any+0x3a>
 800b04c:	685c      	ldr	r4, [r3, #4]
 800b04e:	6a25      	ldr	r5, [r4, #32]
 800b050:	2d00      	cmp	r5, #0
 800b052:	d1e4      	bne.n	800b01e <rclc_executor_trigger_any+0x36>
 800b054:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800b058:	2800      	cmp	r0, #0
 800b05a:	d1e0      	bne.n	800b01e <rclc_executor_trigger_any+0x36>
 800b05c:	3201      	adds	r2, #1
 800b05e:	4291      	cmp	r1, r2
 800b060:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800b064:	d1e6      	bne.n	800b034 <rclc_executor_trigger_any+0x4c>
 800b066:	2000      	movs	r0, #0
 800b068:	bc30      	pop	{r4, r5}
 800b06a:	4770      	bx	lr
 800b06c:	4770      	bx	lr
 800b06e:	4608      	mov	r0, r1
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop

0800b074 <rclc_executor_get_zero_initialized_executor>:
 800b074:	b510      	push	{r4, lr}
 800b076:	4903      	ldr	r1, [pc, #12]	@ (800b084 <rclc_executor_get_zero_initialized_executor+0x10>)
 800b078:	4604      	mov	r4, r0
 800b07a:	2288      	movs	r2, #136	@ 0x88
 800b07c:	f00c fda5 	bl	8017bca <memcpy>
 800b080:	4620      	mov	r0, r4
 800b082:	bd10      	pop	{r4, pc}
 800b084:	08018b08 	.word	0x08018b08

0800b088 <rclc_executor_init>:
 800b088:	2800      	cmp	r0, #0
 800b08a:	d05f      	beq.n	800b14c <rclc_executor_init+0xc4>
 800b08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b090:	460c      	mov	r4, r1
 800b092:	b0b0      	sub	sp, #192	@ 0xc0
 800b094:	2900      	cmp	r1, #0
 800b096:	d051      	beq.n	800b13c <rclc_executor_init+0xb4>
 800b098:	4605      	mov	r5, r0
 800b09a:	4618      	mov	r0, r3
 800b09c:	4616      	mov	r6, r2
 800b09e:	461f      	mov	r7, r3
 800b0a0:	f000 fc38 	bl	800b914 <rcutils_allocator_is_valid>
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	d049      	beq.n	800b13c <rclc_executor_init+0xb4>
 800b0a8:	2e00      	cmp	r6, #0
 800b0aa:	d047      	beq.n	800b13c <rclc_executor_init+0xb4>
 800b0ac:	492c      	ldr	r1, [pc, #176]	@ (800b160 <rclc_executor_init+0xd8>)
 800b0ae:	2288      	movs	r2, #136	@ 0x88
 800b0b0:	a80e      	add	r0, sp, #56	@ 0x38
 800b0b2:	f00c fd8a 	bl	8017bca <memcpy>
 800b0b6:	a90e      	add	r1, sp, #56	@ 0x38
 800b0b8:	2288      	movs	r2, #136	@ 0x88
 800b0ba:	4628      	mov	r0, r5
 800b0bc:	f00c fd85 	bl	8017bca <memcpy>
 800b0c0:	602c      	str	r4, [r5, #0]
 800b0c2:	4668      	mov	r0, sp
 800b0c4:	60ae      	str	r6, [r5, #8]
 800b0c6:	466c      	mov	r4, sp
 800b0c8:	f008 f80a 	bl	80130e0 <rcl_get_zero_initialized_wait_set>
 800b0cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b0ce:	f105 0c14 	add.w	ip, r5, #20
 800b0d2:	f8d7 8000 	ldr.w	r8, [r7]
 800b0d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b0da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b0dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b0e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b0e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b0e6:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800b158 <rclc_executor_init+0xd0>
 800b0ea:	6823      	ldr	r3, [r4, #0]
 800b0ec:	f8cc 3000 	str.w	r3, [ip]
 800b0f0:	6939      	ldr	r1, [r7, #16]
 800b0f2:	612f      	str	r7, [r5, #16]
 800b0f4:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800b0f8:	01b0      	lsls	r0, r6, #6
 800b0fa:	47c0      	blx	r8
 800b0fc:	6068      	str	r0, [r5, #4]
 800b0fe:	b338      	cbz	r0, 800b150 <rclc_executor_init+0xc8>
 800b100:	2400      	movs	r4, #0
 800b102:	e000      	b.n	800b106 <rclc_executor_init+0x7e>
 800b104:	6868      	ldr	r0, [r5, #4]
 800b106:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800b10a:	4631      	mov	r1, r6
 800b10c:	3401      	adds	r4, #1
 800b10e:	f000 fa9f 	bl	800b650 <rclc_executor_handle_init>
 800b112:	42a6      	cmp	r6, r4
 800b114:	d1f6      	bne.n	800b104 <rclc_executor_init+0x7c>
 800b116:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800b11a:	f000 fa8d 	bl	800b638 <rclc_executor_handle_counters_zero_init>
 800b11e:	4a11      	ldr	r2, [pc, #68]	@ (800b164 <rclc_executor_init+0xdc>)
 800b120:	686b      	ldr	r3, [r5, #4]
 800b122:	2000      	movs	r0, #0
 800b124:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800b128:	b163      	cbz	r3, 800b144 <rclc_executor_init+0xbc>
 800b12a:	692b      	ldr	r3, [r5, #16]
 800b12c:	b153      	cbz	r3, 800b144 <rclc_executor_init+0xbc>
 800b12e:	68ab      	ldr	r3, [r5, #8]
 800b130:	b143      	cbz	r3, 800b144 <rclc_executor_init+0xbc>
 800b132:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800b136:	b030      	add	sp, #192	@ 0xc0
 800b138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b13c:	200b      	movs	r0, #11
 800b13e:	b030      	add	sp, #192	@ 0xc0
 800b140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b144:	4618      	mov	r0, r3
 800b146:	b030      	add	sp, #192	@ 0xc0
 800b148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b14c:	200b      	movs	r0, #11
 800b14e:	4770      	bx	lr
 800b150:	200a      	movs	r0, #10
 800b152:	e7f4      	b.n	800b13e <rclc_executor_init+0xb6>
 800b154:	f3af 8000 	nop.w
 800b158:	3b9aca00 	.word	0x3b9aca00
 800b15c:	00000000 	.word	0x00000000
 800b160:	08018b08 	.word	0x08018b08
 800b164:	0800afe9 	.word	0x0800afe9

0800b168 <rclc_executor_add_subscription>:
 800b168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b16a:	f89d e018 	ldrb.w	lr, [sp, #24]
 800b16e:	b338      	cbz	r0, 800b1c0 <rclc_executor_add_subscription+0x58>
 800b170:	b331      	cbz	r1, 800b1c0 <rclc_executor_add_subscription+0x58>
 800b172:	b32a      	cbz	r2, 800b1c0 <rclc_executor_add_subscription+0x58>
 800b174:	b323      	cbz	r3, 800b1c0 <rclc_executor_add_subscription+0x58>
 800b176:	4604      	mov	r4, r0
 800b178:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800b17c:	42a8      	cmp	r0, r5
 800b17e:	d301      	bcc.n	800b184 <rclc_executor_add_subscription+0x1c>
 800b180:	2001      	movs	r0, #1
 800b182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b184:	6866      	ldr	r6, [r4, #4]
 800b186:	0187      	lsls	r7, r0, #6
 800b188:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800b18c:	2500      	movs	r5, #0
 800b18e:	55f5      	strb	r5, [r6, r7]
 800b190:	3001      	adds	r0, #1
 800b192:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800b196:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800b19a:	2301      	movs	r3, #1
 800b19c:	f104 0514 	add.w	r5, r4, #20
 800b1a0:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800b1a4:	f88c e001 	strb.w	lr, [ip, #1]
 800b1a8:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800b1ac:	60e0      	str	r0, [r4, #12]
 800b1ae:	4628      	mov	r0, r5
 800b1b0:	f007 ffaa 	bl	8013108 <rcl_wait_set_is_valid>
 800b1b4:	b930      	cbnz	r0, 800b1c4 <rclc_executor_add_subscription+0x5c>
 800b1b6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	2000      	movs	r0, #0
 800b1bc:	64a3      	str	r3, [r4, #72]	@ 0x48
 800b1be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1c0:	200b      	movs	r0, #11
 800b1c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1c4:	4628      	mov	r0, r5
 800b1c6:	f007 ffa5 	bl	8013114 <rcl_wait_set_fini>
 800b1ca:	2800      	cmp	r0, #0
 800b1cc:	d0f3      	beq.n	800b1b6 <rclc_executor_add_subscription+0x4e>
 800b1ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b1d0 <rclc_executor_add_timer>:
 800b1d0:	b300      	cbz	r0, 800b214 <rclc_executor_add_timer+0x44>
 800b1d2:	b1f9      	cbz	r1, 800b214 <rclc_executor_add_timer+0x44>
 800b1d4:	b538      	push	{r3, r4, r5, lr}
 800b1d6:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	4604      	mov	r4, r0
 800b1de:	d301      	bcc.n	800b1e4 <rclc_executor_add_timer+0x14>
 800b1e0:	2001      	movs	r0, #1
 800b1e2:	bd38      	pop	{r3, r4, r5, pc}
 800b1e4:	6840      	ldr	r0, [r0, #4]
 800b1e6:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800b1ea:	019d      	lsls	r5, r3, #6
 800b1ec:	6051      	str	r1, [r2, #4]
 800b1ee:	2102      	movs	r1, #2
 800b1f0:	5341      	strh	r1, [r0, r5]
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	2000      	movs	r0, #0
 800b1f6:	2101      	movs	r1, #1
 800b1f8:	f104 0514 	add.w	r5, r4, #20
 800b1fc:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800b1fe:	8711      	strh	r1, [r2, #56]	@ 0x38
 800b200:	4628      	mov	r0, r5
 800b202:	60e3      	str	r3, [r4, #12]
 800b204:	f007 ff80 	bl	8013108 <rcl_wait_set_is_valid>
 800b208:	b930      	cbnz	r0, 800b218 <rclc_executor_add_timer+0x48>
 800b20a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800b20c:	3301      	adds	r3, #1
 800b20e:	2000      	movs	r0, #0
 800b210:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800b212:	bd38      	pop	{r3, r4, r5, pc}
 800b214:	200b      	movs	r0, #11
 800b216:	4770      	bx	lr
 800b218:	4628      	mov	r0, r5
 800b21a:	f007 ff7b 	bl	8013114 <rcl_wait_set_fini>
 800b21e:	2800      	cmp	r0, #0
 800b220:	d0f3      	beq.n	800b20a <rclc_executor_add_timer+0x3a>
 800b222:	bd38      	pop	{r3, r4, r5, pc}

0800b224 <rclc_executor_prepare>:
 800b224:	2800      	cmp	r0, #0
 800b226:	d044      	beq.n	800b2b2 <rclc_executor_prepare+0x8e>
 800b228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b22a:	f100 0514 	add.w	r5, r0, #20
 800b22e:	b09b      	sub	sp, #108	@ 0x6c
 800b230:	4604      	mov	r4, r0
 800b232:	4628      	mov	r0, r5
 800b234:	f007 ff68 	bl	8013108 <rcl_wait_set_is_valid>
 800b238:	b110      	cbz	r0, 800b240 <rclc_executor_prepare+0x1c>
 800b23a:	2000      	movs	r0, #0
 800b23c:	b01b      	add	sp, #108	@ 0x6c
 800b23e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b240:	4628      	mov	r0, r5
 800b242:	f007 ff67 	bl	8013114 <rcl_wait_set_fini>
 800b246:	2800      	cmp	r0, #0
 800b248:	d130      	bne.n	800b2ac <rclc_executor_prepare+0x88>
 800b24a:	a80c      	add	r0, sp, #48	@ 0x30
 800b24c:	f007 ff48 	bl	80130e0 <rcl_get_zero_initialized_wait_set>
 800b250:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800b254:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b258:	46ae      	mov	lr, r5
 800b25a:	6927      	ldr	r7, [r4, #16]
 800b25c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b260:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b264:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b268:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b26c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b270:	f8dc 3000 	ldr.w	r3, [ip]
 800b274:	f8ce 3000 	str.w	r3, [lr]
 800b278:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b27a:	ae04      	add	r6, sp, #16
 800b27c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	6822      	ldr	r2, [r4, #0]
 800b282:	6033      	str	r3, [r6, #0]
 800b284:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b286:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800b288:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800b28c:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800b290:	e9cd 2100 	strd	r2, r1, [sp]
 800b294:	4628      	mov	r0, r5
 800b296:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800b298:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b29a:	f008 fa39 	bl	8013710 <rcl_wait_set_init>
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	d0cc      	beq.n	800b23c <rclc_executor_prepare+0x18>
 800b2a2:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b2a4:	f000 fb5c 	bl	800b960 <rcutils_reset_error>
 800b2a8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b2aa:	e7c7      	b.n	800b23c <rclc_executor_prepare+0x18>
 800b2ac:	f000 fb58 	bl	800b960 <rcutils_reset_error>
 800b2b0:	e7cb      	b.n	800b24a <rclc_executor_prepare+0x26>
 800b2b2:	200b      	movs	r0, #11
 800b2b4:	4770      	bx	lr
 800b2b6:	bf00      	nop

0800b2b8 <rclc_executor_spin_some.part.0>:
 800b2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2bc:	f100 0614 	add.w	r6, r0, #20
 800b2c0:	b083      	sub	sp, #12
 800b2c2:	4691      	mov	r9, r2
 800b2c4:	4698      	mov	r8, r3
 800b2c6:	4605      	mov	r5, r0
 800b2c8:	f7ff ffac 	bl	800b224 <rclc_executor_prepare>
 800b2cc:	4630      	mov	r0, r6
 800b2ce:	f007 ffed 	bl	80132ac <rcl_wait_set_clear>
 800b2d2:	4607      	mov	r7, r0
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	f040 80ed 	bne.w	800b4b4 <rclc_executor_spin_some.part.0+0x1fc>
 800b2da:	68ab      	ldr	r3, [r5, #8]
 800b2dc:	4604      	mov	r4, r0
 800b2de:	b303      	cbz	r3, 800b322 <rclc_executor_spin_some.part.0+0x6a>
 800b2e0:	6869      	ldr	r1, [r5, #4]
 800b2e2:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800b2e6:	01a2      	lsls	r2, r4, #6
 800b2e8:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800b2ec:	b1cb      	cbz	r3, 800b322 <rclc_executor_spin_some.part.0+0x6a>
 800b2ee:	5c8b      	ldrb	r3, [r1, r2]
 800b2f0:	2b0a      	cmp	r3, #10
 800b2f2:	f200 80d8 	bhi.w	800b4a6 <rclc_executor_spin_some.part.0+0x1ee>
 800b2f6:	e8df f003 	tbb	[pc, r3]
 800b2fa:	9c9c      	.short	0x9c9c
 800b2fc:	068c8ca7 	.word	0x068c8ca7
 800b300:	bdc90606 	.word	0xbdc90606
 800b304:	b2          	.byte	0xb2
 800b305:	00          	.byte	0x00
 800b306:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b30a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b30e:	4630      	mov	r0, r6
 800b310:	f008 fb14 	bl	801393c <rcl_wait_set_add_service>
 800b314:	2800      	cmp	r0, #0
 800b316:	f040 8086 	bne.w	800b426 <rclc_executor_spin_some.part.0+0x16e>
 800b31a:	68ab      	ldr	r3, [r5, #8]
 800b31c:	3401      	adds	r4, #1
 800b31e:	429c      	cmp	r4, r3
 800b320:	d3de      	bcc.n	800b2e0 <rclc_executor_spin_some.part.0+0x28>
 800b322:	4643      	mov	r3, r8
 800b324:	464a      	mov	r2, r9
 800b326:	4630      	mov	r0, r6
 800b328:	f008 fb36 	bl	8013998 <rcl_wait>
 800b32c:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800b330:	2b00      	cmp	r3, #0
 800b332:	f000 80c7 	beq.w	800b4c4 <rclc_executor_spin_some.part.0+0x20c>
 800b336:	2b01      	cmp	r3, #1
 800b338:	f040 80b5 	bne.w	800b4a6 <rclc_executor_spin_some.part.0+0x1ee>
 800b33c:	68ab      	ldr	r3, [r5, #8]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	f000 8159 	beq.w	800b5f6 <rclc_executor_spin_some.part.0+0x33e>
 800b344:	2400      	movs	r4, #0
 800b346:	46a0      	mov	r8, r4
 800b348:	f240 1991 	movw	r9, #401	@ 0x191
 800b34c:	e00a      	b.n	800b364 <rclc_executor_spin_some.part.0+0xac>
 800b34e:	f7ff fb49 	bl	800a9e4 <_rclc_check_for_new_data>
 800b352:	4604      	mov	r4, r0
 800b354:	b110      	cbz	r0, 800b35c <rclc_executor_spin_some.part.0+0xa4>
 800b356:	4548      	cmp	r0, r9
 800b358:	f040 80b2 	bne.w	800b4c0 <rclc_executor_spin_some.part.0+0x208>
 800b35c:	68ab      	ldr	r3, [r5, #8]
 800b35e:	4598      	cmp	r8, r3
 800b360:	f080 8126 	bcs.w	800b5b0 <rclc_executor_spin_some.part.0+0x2f8>
 800b364:	686a      	ldr	r2, [r5, #4]
 800b366:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800b36a:	4631      	mov	r1, r6
 800b36c:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800b370:	f108 0801 	add.w	r8, r8, #1
 800b374:	f1bc 0f00 	cmp.w	ip, #0
 800b378:	d1e9      	bne.n	800b34e <rclc_executor_spin_some.part.0+0x96>
 800b37a:	4619      	mov	r1, r3
 800b37c:	4610      	mov	r0, r2
 800b37e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800b382:	4798      	blx	r3
 800b384:	2800      	cmp	r0, #0
 800b386:	f000 809b 	beq.w	800b4c0 <rclc_executor_spin_some.part.0+0x208>
 800b38a:	68ab      	ldr	r3, [r5, #8]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	f000 8097 	beq.w	800b4c0 <rclc_executor_spin_some.part.0+0x208>
 800b392:	f04f 0800 	mov.w	r8, #0
 800b396:	f240 1991 	movw	r9, #401	@ 0x191
 800b39a:	e009      	b.n	800b3b0 <rclc_executor_spin_some.part.0+0xf8>
 800b39c:	f7ff fb70 	bl	800aa80 <_rclc_take_new_data>
 800b3a0:	4604      	mov	r4, r0
 800b3a2:	b110      	cbz	r0, 800b3aa <rclc_executor_spin_some.part.0+0xf2>
 800b3a4:	4548      	cmp	r0, r9
 800b3a6:	f040 808b 	bne.w	800b4c0 <rclc_executor_spin_some.part.0+0x208>
 800b3aa:	68ab      	ldr	r3, [r5, #8]
 800b3ac:	4598      	cmp	r8, r3
 800b3ae:	d209      	bcs.n	800b3c4 <rclc_executor_spin_some.part.0+0x10c>
 800b3b0:	6868      	ldr	r0, [r5, #4]
 800b3b2:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800b3b6:	4631      	mov	r1, r6
 800b3b8:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800b3bc:	f108 0801 	add.w	r8, r8, #1
 800b3c0:	2a00      	cmp	r2, #0
 800b3c2:	d1eb      	bne.n	800b39c <rclc_executor_spin_some.part.0+0xe4>
 800b3c4:	2600      	movs	r6, #0
 800b3c6:	b97b      	cbnz	r3, 800b3e8 <rclc_executor_spin_some.part.0+0x130>
 800b3c8:	e07a      	b.n	800b4c0 <rclc_executor_spin_some.part.0+0x208>
 800b3ca:	f812 200c 	ldrb.w	r2, [r2, ip]
 800b3ce:	2a08      	cmp	r2, #8
 800b3d0:	f000 80fd 	beq.w	800b5ce <rclc_executor_spin_some.part.0+0x316>
 800b3d4:	2a09      	cmp	r2, #9
 800b3d6:	f000 80ef 	beq.w	800b5b8 <rclc_executor_spin_some.part.0+0x300>
 800b3da:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800b3de:	b98a      	cbnz	r2, 800b404 <rclc_executor_spin_some.part.0+0x14c>
 800b3e0:	3601      	adds	r6, #1
 800b3e2:	429e      	cmp	r6, r3
 800b3e4:	d262      	bcs.n	800b4ac <rclc_executor_spin_some.part.0+0x1f4>
 800b3e6:	2400      	movs	r4, #0
 800b3e8:	686a      	ldr	r2, [r5, #4]
 800b3ea:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800b3ee:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800b3f2:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800b3f6:	2900      	cmp	r1, #0
 800b3f8:	d062      	beq.n	800b4c0 <rclc_executor_spin_some.part.0+0x208>
 800b3fa:	7841      	ldrb	r1, [r0, #1]
 800b3fc:	2900      	cmp	r1, #0
 800b3fe:	d0e4      	beq.n	800b3ca <rclc_executor_spin_some.part.0+0x112>
 800b400:	2901      	cmp	r1, #1
 800b402:	d1ed      	bne.n	800b3e0 <rclc_executor_spin_some.part.0+0x128>
 800b404:	f7ff fcb0 	bl	800ad68 <_rclc_execute.part.0>
 800b408:	2800      	cmp	r0, #0
 800b40a:	f040 80b6 	bne.w	800b57a <rclc_executor_spin_some.part.0+0x2c2>
 800b40e:	68ab      	ldr	r3, [r5, #8]
 800b410:	e7e6      	b.n	800b3e0 <rclc_executor_spin_some.part.0+0x128>
 800b412:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b416:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b41a:	4630      	mov	r0, r6
 800b41c:	f008 fa62 	bl	80138e4 <rcl_wait_set_add_client>
 800b420:	2800      	cmp	r0, #0
 800b422:	f43f af7a 	beq.w	800b31a <rclc_executor_spin_some.part.0+0x62>
 800b426:	9001      	str	r0, [sp, #4]
 800b428:	f000 fa9a 	bl	800b960 <rcutils_reset_error>
 800b42c:	9801      	ldr	r0, [sp, #4]
 800b42e:	4607      	mov	r7, r0
 800b430:	e03c      	b.n	800b4ac <rclc_executor_spin_some.part.0+0x1f4>
 800b432:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b436:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b43a:	4630      	mov	r0, r6
 800b43c:	f007 ff0a 	bl	8013254 <rcl_wait_set_add_subscription>
 800b440:	2800      	cmp	r0, #0
 800b442:	f43f af6a 	beq.w	800b31a <rclc_executor_spin_some.part.0+0x62>
 800b446:	e7ee      	b.n	800b426 <rclc_executor_spin_some.part.0+0x16e>
 800b448:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b44c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b450:	4630      	mov	r0, r6
 800b452:	f008 fa17 	bl	8013884 <rcl_wait_set_add_timer>
 800b456:	2800      	cmp	r0, #0
 800b458:	f43f af5f 	beq.w	800b31a <rclc_executor_spin_some.part.0+0x62>
 800b45c:	e7e3      	b.n	800b426 <rclc_executor_spin_some.part.0+0x16e>
 800b45e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b462:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b466:	4630      	mov	r0, r6
 800b468:	f008 f9e0 	bl	801382c <rcl_wait_set_add_guard_condition>
 800b46c:	2800      	cmp	r0, #0
 800b46e:	f43f af54 	beq.w	800b31a <rclc_executor_spin_some.part.0+0x62>
 800b472:	e7d8      	b.n	800b426 <rclc_executor_spin_some.part.0+0x16e>
 800b474:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b478:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b47c:	3110      	adds	r1, #16
 800b47e:	4630      	mov	r0, r6
 800b480:	f008 ff62 	bl	8014348 <rcl_action_wait_set_add_action_server>
 800b484:	2800      	cmp	r0, #0
 800b486:	f43f af48 	beq.w	800b31a <rclc_executor_spin_some.part.0+0x62>
 800b48a:	e7cc      	b.n	800b426 <rclc_executor_spin_some.part.0+0x16e>
 800b48c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b490:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b494:	3110      	adds	r1, #16
 800b496:	2300      	movs	r3, #0
 800b498:	4630      	mov	r0, r6
 800b49a:	f008 fd2d 	bl	8013ef8 <rcl_action_wait_set_add_action_client>
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	f43f af3b 	beq.w	800b31a <rclc_executor_spin_some.part.0+0x62>
 800b4a4:	e7bf      	b.n	800b426 <rclc_executor_spin_some.part.0+0x16e>
 800b4a6:	f000 fa5b 	bl	800b960 <rcutils_reset_error>
 800b4aa:	2701      	movs	r7, #1
 800b4ac:	4638      	mov	r0, r7
 800b4ae:	b003      	add	sp, #12
 800b4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4b4:	f000 fa54 	bl	800b960 <rcutils_reset_error>
 800b4b8:	4638      	mov	r0, r7
 800b4ba:	b003      	add	sp, #12
 800b4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4c0:	4627      	mov	r7, r4
 800b4c2:	e7f3      	b.n	800b4ac <rclc_executor_spin_some.part.0+0x1f4>
 800b4c4:	68ab      	ldr	r3, [r5, #8]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	f000 8092 	beq.w	800b5f0 <rclc_executor_spin_some.part.0+0x338>
 800b4cc:	2400      	movs	r4, #0
 800b4ce:	46a0      	mov	r8, r4
 800b4d0:	f240 1991 	movw	r9, #401	@ 0x191
 800b4d4:	e008      	b.n	800b4e8 <rclc_executor_spin_some.part.0+0x230>
 800b4d6:	f7ff fa85 	bl	800a9e4 <_rclc_check_for_new_data>
 800b4da:	4604      	mov	r4, r0
 800b4dc:	b108      	cbz	r0, 800b4e2 <rclc_executor_spin_some.part.0+0x22a>
 800b4de:	4548      	cmp	r0, r9
 800b4e0:	d1ee      	bne.n	800b4c0 <rclc_executor_spin_some.part.0+0x208>
 800b4e2:	68ab      	ldr	r3, [r5, #8]
 800b4e4:	4598      	cmp	r8, r3
 800b4e6:	d265      	bcs.n	800b5b4 <rclc_executor_spin_some.part.0+0x2fc>
 800b4e8:	686a      	ldr	r2, [r5, #4]
 800b4ea:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800b4ee:	4631      	mov	r1, r6
 800b4f0:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800b4f4:	f108 0801 	add.w	r8, r8, #1
 800b4f8:	f1bc 0f00 	cmp.w	ip, #0
 800b4fc:	d1eb      	bne.n	800b4d6 <rclc_executor_spin_some.part.0+0x21e>
 800b4fe:	4619      	mov	r1, r3
 800b500:	4610      	mov	r0, r2
 800b502:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800b506:	4798      	blx	r3
 800b508:	2800      	cmp	r0, #0
 800b50a:	d0d9      	beq.n	800b4c0 <rclc_executor_spin_some.part.0+0x208>
 800b50c:	68ab      	ldr	r3, [r5, #8]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d0d6      	beq.n	800b4c0 <rclc_executor_spin_some.part.0+0x208>
 800b512:	f04f 0800 	mov.w	r8, #0
 800b516:	f240 1991 	movw	r9, #401	@ 0x191
 800b51a:	f240 2a59 	movw	sl, #601	@ 0x259
 800b51e:	e00e      	b.n	800b53e <rclc_executor_spin_some.part.0+0x286>
 800b520:	f813 300b 	ldrb.w	r3, [r3, fp]
 800b524:	2b08      	cmp	r3, #8
 800b526:	d033      	beq.n	800b590 <rclc_executor_spin_some.part.0+0x2d8>
 800b528:	2b09      	cmp	r3, #9
 800b52a:	d028      	beq.n	800b57e <rclc_executor_spin_some.part.0+0x2c6>
 800b52c:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800b530:	b9fb      	cbnz	r3, 800b572 <rclc_executor_spin_some.part.0+0x2ba>
 800b532:	68ab      	ldr	r3, [r5, #8]
 800b534:	f108 0801 	add.w	r8, r8, #1
 800b538:	4598      	cmp	r8, r3
 800b53a:	d2b7      	bcs.n	800b4ac <rclc_executor_spin_some.part.0+0x1f4>
 800b53c:	2400      	movs	r4, #0
 800b53e:	6868      	ldr	r0, [r5, #4]
 800b540:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800b544:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800b548:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d0b7      	beq.n	800b4c0 <rclc_executor_spin_some.part.0+0x208>
 800b550:	4631      	mov	r1, r6
 800b552:	f7ff fa95 	bl	800aa80 <_rclc_take_new_data>
 800b556:	b118      	cbz	r0, 800b560 <rclc_executor_spin_some.part.0+0x2a8>
 800b558:	4548      	cmp	r0, r9
 800b55a:	d001      	beq.n	800b560 <rclc_executor_spin_some.part.0+0x2a8>
 800b55c:	4550      	cmp	r0, sl
 800b55e:	d10c      	bne.n	800b57a <rclc_executor_spin_some.part.0+0x2c2>
 800b560:	686b      	ldr	r3, [r5, #4]
 800b562:	eb13 000b 	adds.w	r0, r3, fp
 800b566:	d021      	beq.n	800b5ac <rclc_executor_spin_some.part.0+0x2f4>
 800b568:	7842      	ldrb	r2, [r0, #1]
 800b56a:	2a00      	cmp	r2, #0
 800b56c:	d0d8      	beq.n	800b520 <rclc_executor_spin_some.part.0+0x268>
 800b56e:	2a01      	cmp	r2, #1
 800b570:	d1df      	bne.n	800b532 <rclc_executor_spin_some.part.0+0x27a>
 800b572:	f7ff fbf9 	bl	800ad68 <_rclc_execute.part.0>
 800b576:	2800      	cmp	r0, #0
 800b578:	d0db      	beq.n	800b532 <rclc_executor_spin_some.part.0+0x27a>
 800b57a:	4607      	mov	r7, r0
 800b57c:	e796      	b.n	800b4ac <rclc_executor_spin_some.part.0+0x1f4>
 800b57e:	6843      	ldr	r3, [r0, #4]
 800b580:	6a1a      	ldr	r2, [r3, #32]
 800b582:	2a00      	cmp	r2, #0
 800b584:	d1f5      	bne.n	800b572 <rclc_executor_spin_some.part.0+0x2ba>
 800b586:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d0d1      	beq.n	800b532 <rclc_executor_spin_some.part.0+0x27a>
 800b58e:	e7f0      	b.n	800b572 <rclc_executor_spin_some.part.0+0x2ba>
 800b590:	6843      	ldr	r3, [r0, #4]
 800b592:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b594:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800b598:	d1eb      	bne.n	800b572 <rclc_executor_spin_some.part.0+0x2ba>
 800b59a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800b59e:	2a00      	cmp	r2, #0
 800b5a0:	d1e7      	bne.n	800b572 <rclc_executor_spin_some.part.0+0x2ba>
 800b5a2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d0c3      	beq.n	800b532 <rclc_executor_spin_some.part.0+0x27a>
 800b5aa:	e7e2      	b.n	800b572 <rclc_executor_spin_some.part.0+0x2ba>
 800b5ac:	270b      	movs	r7, #11
 800b5ae:	e77d      	b.n	800b4ac <rclc_executor_spin_some.part.0+0x1f4>
 800b5b0:	686a      	ldr	r2, [r5, #4]
 800b5b2:	e6e2      	b.n	800b37a <rclc_executor_spin_some.part.0+0xc2>
 800b5b4:	686a      	ldr	r2, [r5, #4]
 800b5b6:	e7a2      	b.n	800b4fe <rclc_executor_spin_some.part.0+0x246>
 800b5b8:	6842      	ldr	r2, [r0, #4]
 800b5ba:	6a11      	ldr	r1, [r2, #32]
 800b5bc:	2900      	cmp	r1, #0
 800b5be:	f47f af21 	bne.w	800b404 <rclc_executor_spin_some.part.0+0x14c>
 800b5c2:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800b5c6:	2a00      	cmp	r2, #0
 800b5c8:	f43f af0a 	beq.w	800b3e0 <rclc_executor_spin_some.part.0+0x128>
 800b5cc:	e71a      	b.n	800b404 <rclc_executor_spin_some.part.0+0x14c>
 800b5ce:	6842      	ldr	r2, [r0, #4]
 800b5d0:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800b5d2:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800b5d6:	f47f af15 	bne.w	800b404 <rclc_executor_spin_some.part.0+0x14c>
 800b5da:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800b5de:	2900      	cmp	r1, #0
 800b5e0:	f47f af10 	bne.w	800b404 <rclc_executor_spin_some.part.0+0x14c>
 800b5e4:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800b5e8:	2a00      	cmp	r2, #0
 800b5ea:	f43f aef9 	beq.w	800b3e0 <rclc_executor_spin_some.part.0+0x128>
 800b5ee:	e709      	b.n	800b404 <rclc_executor_spin_some.part.0+0x14c>
 800b5f0:	686a      	ldr	r2, [r5, #4]
 800b5f2:	461c      	mov	r4, r3
 800b5f4:	e783      	b.n	800b4fe <rclc_executor_spin_some.part.0+0x246>
 800b5f6:	686a      	ldr	r2, [r5, #4]
 800b5f8:	461c      	mov	r4, r3
 800b5fa:	e6be      	b.n	800b37a <rclc_executor_spin_some.part.0+0xc2>

0800b5fc <rclc_executor_spin>:
 800b5fc:	b1d0      	cbz	r0, 800b634 <rclc_executor_spin+0x38>
 800b5fe:	b510      	push	{r4, lr}
 800b600:	4604      	mov	r4, r0
 800b602:	b082      	sub	sp, #8
 800b604:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800b608:	6820      	ldr	r0, [r4, #0]
 800b60a:	e9cd 2300 	strd	r2, r3, [sp]
 800b60e:	f006 facf 	bl	8011bb0 <rcl_context_is_valid>
 800b612:	4601      	mov	r1, r0
 800b614:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b618:	4620      	mov	r0, r4
 800b61a:	b131      	cbz	r1, 800b62a <rclc_executor_spin+0x2e>
 800b61c:	f7ff fe4c 	bl	800b2b8 <rclc_executor_spin_some.part.0>
 800b620:	f030 0302 	bics.w	r3, r0, #2
 800b624:	d0ee      	beq.n	800b604 <rclc_executor_spin+0x8>
 800b626:	b002      	add	sp, #8
 800b628:	bd10      	pop	{r4, pc}
 800b62a:	f000 f999 	bl	800b960 <rcutils_reset_error>
 800b62e:	2001      	movs	r0, #1
 800b630:	b002      	add	sp, #8
 800b632:	bd10      	pop	{r4, pc}
 800b634:	200b      	movs	r0, #11
 800b636:	4770      	bx	lr

0800b638 <rclc_executor_handle_counters_zero_init>:
 800b638:	b130      	cbz	r0, 800b648 <rclc_executor_handle_counters_zero_init+0x10>
 800b63a:	b508      	push	{r3, lr}
 800b63c:	2220      	movs	r2, #32
 800b63e:	2100      	movs	r1, #0
 800b640:	f00c f9fa 	bl	8017a38 <memset>
 800b644:	2000      	movs	r0, #0
 800b646:	bd08      	pop	{r3, pc}
 800b648:	200b      	movs	r0, #11
 800b64a:	4770      	bx	lr
 800b64c:	0000      	movs	r0, r0
	...

0800b650 <rclc_executor_handle_init>:
 800b650:	b168      	cbz	r0, 800b66e <rclc_executor_handle_init+0x1e>
 800b652:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800b678 <rclc_executor_handle_init+0x28>
 800b656:	2300      	movs	r3, #0
 800b658:	220b      	movs	r2, #11
 800b65a:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800b65e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800b662:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800b666:	8002      	strh	r2, [r0, #0]
 800b668:	8703      	strh	r3, [r0, #56]	@ 0x38
 800b66a:	4618      	mov	r0, r3
 800b66c:	4770      	bx	lr
 800b66e:	200b      	movs	r0, #11
 800b670:	4770      	bx	lr
 800b672:	bf00      	nop
 800b674:	f3af 8000 	nop.w
	...

0800b680 <rclc_support_init_with_options>:
 800b680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b684:	b083      	sub	sp, #12
 800b686:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b688:	b340      	cbz	r0, 800b6dc <rclc_support_init_with_options+0x5c>
 800b68a:	461d      	mov	r5, r3
 800b68c:	b333      	cbz	r3, 800b6dc <rclc_support_init_with_options+0x5c>
 800b68e:	b32e      	cbz	r6, 800b6dc <rclc_support_init_with_options+0x5c>
 800b690:	46e9      	mov	r9, sp
 800b692:	4604      	mov	r4, r0
 800b694:	4648      	mov	r0, r9
 800b696:	460f      	mov	r7, r1
 800b698:	4690      	mov	r8, r2
 800b69a:	f006 fa7f 	bl	8011b9c <rcl_get_zero_initialized_context>
 800b69e:	e899 0003 	ldmia.w	r9, {r0, r1}
 800b6a2:	462a      	mov	r2, r5
 800b6a4:	e884 0003 	stmia.w	r4, {r0, r1}
 800b6a8:	4623      	mov	r3, r4
 800b6aa:	4641      	mov	r1, r8
 800b6ac:	4638      	mov	r0, r7
 800b6ae:	f006 fae5 	bl	8011c7c <rcl_init>
 800b6b2:	4605      	mov	r5, r0
 800b6b4:	b960      	cbnz	r0, 800b6d0 <rclc_support_init_with_options+0x50>
 800b6b6:	60a6      	str	r6, [r4, #8]
 800b6b8:	4632      	mov	r2, r6
 800b6ba:	f104 010c 	add.w	r1, r4, #12
 800b6be:	2003      	movs	r0, #3
 800b6c0:	f007 f90e 	bl	80128e0 <rcl_clock_init>
 800b6c4:	4605      	mov	r5, r0
 800b6c6:	b918      	cbnz	r0, 800b6d0 <rclc_support_init_with_options+0x50>
 800b6c8:	4628      	mov	r0, r5
 800b6ca:	b003      	add	sp, #12
 800b6cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6d0:	f000 f946 	bl	800b960 <rcutils_reset_error>
 800b6d4:	4628      	mov	r0, r5
 800b6d6:	b003      	add	sp, #12
 800b6d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6dc:	250b      	movs	r5, #11
 800b6de:	4628      	mov	r0, r5
 800b6e0:	b003      	add	sp, #12
 800b6e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6e6:	bf00      	nop

0800b6e8 <rclc_node_init_default>:
 800b6e8:	b3b8      	cbz	r0, 800b75a <rclc_node_init_default+0x72>
 800b6ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b6ee:	460d      	mov	r5, r1
 800b6f0:	b0a1      	sub	sp, #132	@ 0x84
 800b6f2:	b329      	cbz	r1, 800b740 <rclc_node_init_default+0x58>
 800b6f4:	4616      	mov	r6, r2
 800b6f6:	b31a      	cbz	r2, 800b740 <rclc_node_init_default+0x58>
 800b6f8:	461f      	mov	r7, r3
 800b6fa:	b30b      	cbz	r3, 800b740 <rclc_node_init_default+0x58>
 800b6fc:	f10d 0810 	add.w	r8, sp, #16
 800b700:	4604      	mov	r4, r0
 800b702:	4640      	mov	r0, r8
 800b704:	f006 fbe0 	bl	8011ec8 <rcl_get_zero_initialized_node>
 800b708:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b70c:	f10d 0918 	add.w	r9, sp, #24
 800b710:	e884 0003 	stmia.w	r4, {r0, r1}
 800b714:	4648      	mov	r0, r9
 800b716:	f006 fd4f 	bl	80121b8 <rcl_node_get_default_options>
 800b71a:	4640      	mov	r0, r8
 800b71c:	f006 fbd4 	bl	8011ec8 <rcl_get_zero_initialized_node>
 800b720:	f8cd 9000 	str.w	r9, [sp]
 800b724:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b728:	463b      	mov	r3, r7
 800b72a:	e884 0003 	stmia.w	r4, {r0, r1}
 800b72e:	4632      	mov	r2, r6
 800b730:	4629      	mov	r1, r5
 800b732:	4620      	mov	r0, r4
 800b734:	f006 fbd2 	bl	8011edc <rcl_node_init>
 800b738:	b930      	cbnz	r0, 800b748 <rclc_node_init_default+0x60>
 800b73a:	b021      	add	sp, #132	@ 0x84
 800b73c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b740:	200b      	movs	r0, #11
 800b742:	b021      	add	sp, #132	@ 0x84
 800b744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b748:	9003      	str	r0, [sp, #12]
 800b74a:	f000 f909 	bl	800b960 <rcutils_reset_error>
 800b74e:	f000 f907 	bl	800b960 <rcutils_reset_error>
 800b752:	9803      	ldr	r0, [sp, #12]
 800b754:	b021      	add	sp, #132	@ 0x84
 800b756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b75a:	200b      	movs	r0, #11
 800b75c:	4770      	bx	lr
 800b75e:	bf00      	nop

0800b760 <rclc_publisher_init_default>:
 800b760:	b368      	cbz	r0, 800b7be <rclc_publisher_init_default+0x5e>
 800b762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b766:	460d      	mov	r5, r1
 800b768:	b0a0      	sub	sp, #128	@ 0x80
 800b76a:	b321      	cbz	r1, 800b7b6 <rclc_publisher_init_default+0x56>
 800b76c:	4616      	mov	r6, r2
 800b76e:	b312      	cbz	r2, 800b7b6 <rclc_publisher_init_default+0x56>
 800b770:	461f      	mov	r7, r3
 800b772:	b303      	cbz	r3, 800b7b6 <rclc_publisher_init_default+0x56>
 800b774:	4604      	mov	r4, r0
 800b776:	f7ff f825 	bl	800a7c4 <rcl_get_zero_initialized_publisher>
 800b77a:	f10d 0810 	add.w	r8, sp, #16
 800b77e:	6020      	str	r0, [r4, #0]
 800b780:	4640      	mov	r0, r8
 800b782:	f7ff f8bb 	bl	800a8fc <rcl_publisher_get_default_options>
 800b786:	490f      	ldr	r1, [pc, #60]	@ (800b7c4 <rclc_publisher_init_default+0x64>)
 800b788:	2250      	movs	r2, #80	@ 0x50
 800b78a:	4640      	mov	r0, r8
 800b78c:	f00c fa1d 	bl	8017bca <memcpy>
 800b790:	f8cd 8000 	str.w	r8, [sp]
 800b794:	463b      	mov	r3, r7
 800b796:	4632      	mov	r2, r6
 800b798:	4629      	mov	r1, r5
 800b79a:	4620      	mov	r0, r4
 800b79c:	f7ff f818 	bl	800a7d0 <rcl_publisher_init>
 800b7a0:	b910      	cbnz	r0, 800b7a8 <rclc_publisher_init_default+0x48>
 800b7a2:	b020      	add	sp, #128	@ 0x80
 800b7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7a8:	9003      	str	r0, [sp, #12]
 800b7aa:	f000 f8d9 	bl	800b960 <rcutils_reset_error>
 800b7ae:	9803      	ldr	r0, [sp, #12]
 800b7b0:	b020      	add	sp, #128	@ 0x80
 800b7b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7b6:	200b      	movs	r0, #11
 800b7b8:	b020      	add	sp, #128	@ 0x80
 800b7ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7be:	200b      	movs	r0, #11
 800b7c0:	4770      	bx	lr
 800b7c2:	bf00      	nop
 800b7c4:	08018b90 	.word	0x08018b90

0800b7c8 <rclc_subscription_init_default>:
 800b7c8:	b368      	cbz	r0, 800b826 <rclc_subscription_init_default+0x5e>
 800b7ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7ce:	460d      	mov	r5, r1
 800b7d0:	b0a0      	sub	sp, #128	@ 0x80
 800b7d2:	b321      	cbz	r1, 800b81e <rclc_subscription_init_default+0x56>
 800b7d4:	4616      	mov	r6, r2
 800b7d6:	b312      	cbz	r2, 800b81e <rclc_subscription_init_default+0x56>
 800b7d8:	461f      	mov	r7, r3
 800b7da:	b303      	cbz	r3, 800b81e <rclc_subscription_init_default+0x56>
 800b7dc:	4604      	mov	r4, r0
 800b7de:	f006 ff23 	bl	8012628 <rcl_get_zero_initialized_subscription>
 800b7e2:	f10d 0810 	add.w	r8, sp, #16
 800b7e6:	6020      	str	r0, [r4, #0]
 800b7e8:	4640      	mov	r0, r8
 800b7ea:	f006 ffcb 	bl	8012784 <rcl_subscription_get_default_options>
 800b7ee:	490f      	ldr	r1, [pc, #60]	@ (800b82c <rclc_subscription_init_default+0x64>)
 800b7f0:	2250      	movs	r2, #80	@ 0x50
 800b7f2:	4640      	mov	r0, r8
 800b7f4:	f00c f9e9 	bl	8017bca <memcpy>
 800b7f8:	f8cd 8000 	str.w	r8, [sp]
 800b7fc:	463b      	mov	r3, r7
 800b7fe:	4632      	mov	r2, r6
 800b800:	4629      	mov	r1, r5
 800b802:	4620      	mov	r0, r4
 800b804:	f006 ff16 	bl	8012634 <rcl_subscription_init>
 800b808:	b910      	cbnz	r0, 800b810 <rclc_subscription_init_default+0x48>
 800b80a:	b020      	add	sp, #128	@ 0x80
 800b80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b810:	9003      	str	r0, [sp, #12]
 800b812:	f000 f8a5 	bl	800b960 <rcutils_reset_error>
 800b816:	9803      	ldr	r0, [sp, #12]
 800b818:	b020      	add	sp, #128	@ 0x80
 800b81a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b81e:	200b      	movs	r0, #11
 800b820:	b020      	add	sp, #128	@ 0x80
 800b822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b826:	200b      	movs	r0, #11
 800b828:	4770      	bx	lr
 800b82a:	bf00      	nop
 800b82c:	08018be0 	.word	0x08018be0

0800b830 <rclc_timer_init_default>:
 800b830:	b360      	cbz	r0, 800b88c <rclc_timer_init_default+0x5c>
 800b832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b836:	460e      	mov	r6, r1
 800b838:	b08a      	sub	sp, #40	@ 0x28
 800b83a:	b319      	cbz	r1, 800b884 <rclc_timer_init_default+0x54>
 800b83c:	4690      	mov	r8, r2
 800b83e:	461f      	mov	r7, r3
 800b840:	4605      	mov	r5, r0
 800b842:	f007 fa2b 	bl	8012c9c <rcl_get_zero_initialized_timer>
 800b846:	68b4      	ldr	r4, [r6, #8]
 800b848:	6028      	str	r0, [r5, #0]
 800b84a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b84c:	f10d 0c0c 	add.w	ip, sp, #12
 800b850:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b854:	6823      	ldr	r3, [r4, #0]
 800b856:	f8cc 3000 	str.w	r3, [ip]
 800b85a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b85c:	9302      	str	r3, [sp, #8]
 800b85e:	e9cd 8700 	strd	r8, r7, [sp]
 800b862:	4628      	mov	r0, r5
 800b864:	4632      	mov	r2, r6
 800b866:	f106 010c 	add.w	r1, r6, #12
 800b86a:	f007 fa1d 	bl	8012ca8 <rcl_timer_init>
 800b86e:	b910      	cbnz	r0, 800b876 <rclc_timer_init_default+0x46>
 800b870:	b00a      	add	sp, #40	@ 0x28
 800b872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b876:	9009      	str	r0, [sp, #36]	@ 0x24
 800b878:	f000 f872 	bl	800b960 <rcutils_reset_error>
 800b87c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b87e:	b00a      	add	sp, #40	@ 0x28
 800b880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b884:	200b      	movs	r0, #11
 800b886:	b00a      	add	sp, #40	@ 0x28
 800b888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b88c:	200b      	movs	r0, #11
 800b88e:	4770      	bx	lr

0800b890 <__default_zero_allocate>:
 800b890:	f00b bce8 	b.w	8017264 <calloc>

0800b894 <__default_reallocate>:
 800b894:	f00b be74 	b.w	8017580 <realloc>

0800b898 <__default_deallocate>:
 800b898:	f00b bd50 	b.w	801733c <free>

0800b89c <__default_allocate>:
 800b89c:	f00b bd46 	b.w	801732c <malloc>

0800b8a0 <rcutils_get_zero_initialized_allocator>:
 800b8a0:	b510      	push	{r4, lr}
 800b8a2:	4c05      	ldr	r4, [pc, #20]	@ (800b8b8 <rcutils_get_zero_initialized_allocator+0x18>)
 800b8a4:	4686      	mov	lr, r0
 800b8a6:	4684      	mov	ip, r0
 800b8a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b8aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b8ae:	6823      	ldr	r3, [r4, #0]
 800b8b0:	f8cc 3000 	str.w	r3, [ip]
 800b8b4:	4670      	mov	r0, lr
 800b8b6:	bd10      	pop	{r4, pc}
 800b8b8:	08018c30 	.word	0x08018c30

0800b8bc <rcutils_set_default_allocator>:
 800b8bc:	b1a8      	cbz	r0, 800b8ea <rcutils_set_default_allocator+0x2e>
 800b8be:	6802      	ldr	r2, [r0, #0]
 800b8c0:	b1a2      	cbz	r2, 800b8ec <rcutils_set_default_allocator+0x30>
 800b8c2:	6841      	ldr	r1, [r0, #4]
 800b8c4:	b1a1      	cbz	r1, 800b8f0 <rcutils_set_default_allocator+0x34>
 800b8c6:	b410      	push	{r4}
 800b8c8:	68c4      	ldr	r4, [r0, #12]
 800b8ca:	b164      	cbz	r4, 800b8e6 <rcutils_set_default_allocator+0x2a>
 800b8cc:	6880      	ldr	r0, [r0, #8]
 800b8ce:	b138      	cbz	r0, 800b8e0 <rcutils_set_default_allocator+0x24>
 800b8d0:	4b08      	ldr	r3, [pc, #32]	@ (800b8f4 <rcutils_set_default_allocator+0x38>)
 800b8d2:	601a      	str	r2, [r3, #0]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800b8da:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800b8de:	2001      	movs	r0, #1
 800b8e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8e4:	4770      	bx	lr
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	e7fa      	b.n	800b8e0 <rcutils_set_default_allocator+0x24>
 800b8ea:	4770      	bx	lr
 800b8ec:	4610      	mov	r0, r2
 800b8ee:	4770      	bx	lr
 800b8f0:	4608      	mov	r0, r1
 800b8f2:	4770      	bx	lr
 800b8f4:	2000001c 	.word	0x2000001c

0800b8f8 <rcutils_get_default_allocator>:
 800b8f8:	b510      	push	{r4, lr}
 800b8fa:	4c05      	ldr	r4, [pc, #20]	@ (800b910 <rcutils_get_default_allocator+0x18>)
 800b8fc:	4686      	mov	lr, r0
 800b8fe:	4684      	mov	ip, r0
 800b900:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b902:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b906:	6823      	ldr	r3, [r4, #0]
 800b908:	f8cc 3000 	str.w	r3, [ip]
 800b90c:	4670      	mov	r0, lr
 800b90e:	bd10      	pop	{r4, pc}
 800b910:	2000001c 	.word	0x2000001c

0800b914 <rcutils_allocator_is_valid>:
 800b914:	b158      	cbz	r0, 800b92e <rcutils_allocator_is_valid+0x1a>
 800b916:	6803      	ldr	r3, [r0, #0]
 800b918:	b143      	cbz	r3, 800b92c <rcutils_allocator_is_valid+0x18>
 800b91a:	6843      	ldr	r3, [r0, #4]
 800b91c:	b133      	cbz	r3, 800b92c <rcutils_allocator_is_valid+0x18>
 800b91e:	68c3      	ldr	r3, [r0, #12]
 800b920:	b123      	cbz	r3, 800b92c <rcutils_allocator_is_valid+0x18>
 800b922:	6880      	ldr	r0, [r0, #8]
 800b924:	3800      	subs	r0, #0
 800b926:	bf18      	it	ne
 800b928:	2001      	movne	r0, #1
 800b92a:	4770      	bx	lr
 800b92c:	4618      	mov	r0, r3
 800b92e:	4770      	bx	lr

0800b930 <rcutils_get_error_string>:
 800b930:	4b06      	ldr	r3, [pc, #24]	@ (800b94c <rcutils_get_error_string+0x1c>)
 800b932:	781b      	ldrb	r3, [r3, #0]
 800b934:	b13b      	cbz	r3, 800b946 <rcutils_get_error_string+0x16>
 800b936:	4b06      	ldr	r3, [pc, #24]	@ (800b950 <rcutils_get_error_string+0x20>)
 800b938:	781a      	ldrb	r2, [r3, #0]
 800b93a:	b90a      	cbnz	r2, 800b940 <rcutils_get_error_string+0x10>
 800b93c:	2201      	movs	r2, #1
 800b93e:	701a      	strb	r2, [r3, #0]
 800b940:	4b04      	ldr	r3, [pc, #16]	@ (800b954 <rcutils_get_error_string+0x24>)
 800b942:	7818      	ldrb	r0, [r3, #0]
 800b944:	4770      	bx	lr
 800b946:	4b04      	ldr	r3, [pc, #16]	@ (800b958 <rcutils_get_error_string+0x28>)
 800b948:	7818      	ldrb	r0, [r3, #0]
 800b94a:	4770      	bx	lr
 800b94c:	200061e0 	.word	0x200061e0
 800b950:	200061f9 	.word	0x200061f9
 800b954:	200061f8 	.word	0x200061f8
 800b958:	08018c44 	.word	0x08018c44
 800b95c:	00000000 	.word	0x00000000

0800b960 <rcutils_reset_error>:
 800b960:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800b980 <rcutils_reset_error+0x20>
 800b964:	4a08      	ldr	r2, [pc, #32]	@ (800b988 <rcutils_reset_error+0x28>)
 800b966:	4809      	ldr	r0, [pc, #36]	@ (800b98c <rcutils_reset_error+0x2c>)
 800b968:	4909      	ldr	r1, [pc, #36]	@ (800b990 <rcutils_reset_error+0x30>)
 800b96a:	2300      	movs	r3, #0
 800b96c:	8013      	strh	r3, [r2, #0]
 800b96e:	ed82 7b02 	vstr	d7, [r2, #8]
 800b972:	4a08      	ldr	r2, [pc, #32]	@ (800b994 <rcutils_reset_error+0x34>)
 800b974:	7003      	strb	r3, [r0, #0]
 800b976:	700b      	strb	r3, [r1, #0]
 800b978:	7013      	strb	r3, [r2, #0]
 800b97a:	4770      	bx	lr
 800b97c:	f3af 8000 	nop.w
	...
 800b988:	200061e8 	.word	0x200061e8
 800b98c:	200061f9 	.word	0x200061f9
 800b990:	200061f8 	.word	0x200061f8
 800b994:	200061e0 	.word	0x200061e0

0800b998 <rcutils_system_time_now>:
 800b998:	b308      	cbz	r0, 800b9de <rcutils_system_time_now+0x46>
 800b99a:	b570      	push	{r4, r5, r6, lr}
 800b99c:	b084      	sub	sp, #16
 800b99e:	4604      	mov	r4, r0
 800b9a0:	4669      	mov	r1, sp
 800b9a2:	2001      	movs	r0, #1
 800b9a4:	f7f6 fea0 	bl	80026e8 <clock_gettime>
 800b9a8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b9ac:	2d00      	cmp	r5, #0
 800b9ae:	db13      	blt.n	800b9d8 <rcutils_system_time_now+0x40>
 800b9b0:	9902      	ldr	r1, [sp, #8]
 800b9b2:	2900      	cmp	r1, #0
 800b9b4:	db0d      	blt.n	800b9d2 <rcutils_system_time_now+0x3a>
 800b9b6:	4e0b      	ldr	r6, [pc, #44]	@ (800b9e4 <rcutils_system_time_now+0x4c>)
 800b9b8:	fba3 3206 	umull	r3, r2, r3, r6
 800b9bc:	185b      	adds	r3, r3, r1
 800b9be:	fb06 2205 	mla	r2, r6, r5, r2
 800b9c2:	f04f 0000 	mov.w	r0, #0
 800b9c6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800b9ca:	e9c4 3200 	strd	r3, r2, [r4]
 800b9ce:	b004      	add	sp, #16
 800b9d0:	bd70      	pop	{r4, r5, r6, pc}
 800b9d2:	ea53 0205 	orrs.w	r2, r3, r5
 800b9d6:	d1ee      	bne.n	800b9b6 <rcutils_system_time_now+0x1e>
 800b9d8:	2002      	movs	r0, #2
 800b9da:	b004      	add	sp, #16
 800b9dc:	bd70      	pop	{r4, r5, r6, pc}
 800b9de:	200b      	movs	r0, #11
 800b9e0:	4770      	bx	lr
 800b9e2:	bf00      	nop
 800b9e4:	3b9aca00 	.word	0x3b9aca00

0800b9e8 <rcutils_steady_time_now>:
 800b9e8:	b308      	cbz	r0, 800ba2e <rcutils_steady_time_now+0x46>
 800b9ea:	b570      	push	{r4, r5, r6, lr}
 800b9ec:	b084      	sub	sp, #16
 800b9ee:	4604      	mov	r4, r0
 800b9f0:	4669      	mov	r1, sp
 800b9f2:	2000      	movs	r0, #0
 800b9f4:	f7f6 fe78 	bl	80026e8 <clock_gettime>
 800b9f8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b9fc:	2d00      	cmp	r5, #0
 800b9fe:	db13      	blt.n	800ba28 <rcutils_steady_time_now+0x40>
 800ba00:	9902      	ldr	r1, [sp, #8]
 800ba02:	2900      	cmp	r1, #0
 800ba04:	db0d      	blt.n	800ba22 <rcutils_steady_time_now+0x3a>
 800ba06:	4e0b      	ldr	r6, [pc, #44]	@ (800ba34 <rcutils_steady_time_now+0x4c>)
 800ba08:	fba3 3206 	umull	r3, r2, r3, r6
 800ba0c:	185b      	adds	r3, r3, r1
 800ba0e:	fb06 2205 	mla	r2, r6, r5, r2
 800ba12:	f04f 0000 	mov.w	r0, #0
 800ba16:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800ba1a:	e9c4 3200 	strd	r3, r2, [r4]
 800ba1e:	b004      	add	sp, #16
 800ba20:	bd70      	pop	{r4, r5, r6, pc}
 800ba22:	ea53 0205 	orrs.w	r2, r3, r5
 800ba26:	d1ee      	bne.n	800ba06 <rcutils_steady_time_now+0x1e>
 800ba28:	2002      	movs	r0, #2
 800ba2a:	b004      	add	sp, #16
 800ba2c:	bd70      	pop	{r4, r5, r6, pc}
 800ba2e:	200b      	movs	r0, #11
 800ba30:	4770      	bx	lr
 800ba32:	bf00      	nop
 800ba34:	3b9aca00 	.word	0x3b9aca00

0800ba38 <rmw_get_zero_initialized_init_options>:
 800ba38:	b510      	push	{r4, lr}
 800ba3a:	2238      	movs	r2, #56	@ 0x38
 800ba3c:	4604      	mov	r4, r0
 800ba3e:	2100      	movs	r1, #0
 800ba40:	f00b fffa 	bl	8017a38 <memset>
 800ba44:	f104 0010 	add.w	r0, r4, #16
 800ba48:	f000 f80a 	bl	800ba60 <rmw_get_default_security_options>
 800ba4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ba50:	60e3      	str	r3, [r4, #12]
 800ba52:	4620      	mov	r0, r4
 800ba54:	bd10      	pop	{r4, pc}
 800ba56:	bf00      	nop

0800ba58 <rmw_get_default_publisher_options>:
 800ba58:	2200      	movs	r2, #0
 800ba5a:	6002      	str	r2, [r0, #0]
 800ba5c:	7102      	strb	r2, [r0, #4]
 800ba5e:	4770      	bx	lr

0800ba60 <rmw_get_default_security_options>:
 800ba60:	2200      	movs	r2, #0
 800ba62:	7002      	strb	r2, [r0, #0]
 800ba64:	6042      	str	r2, [r0, #4]
 800ba66:	4770      	bx	lr

0800ba68 <rmw_uros_set_custom_transport>:
 800ba68:	b470      	push	{r4, r5, r6}
 800ba6a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800ba6e:	b162      	cbz	r2, 800ba8a <rmw_uros_set_custom_transport+0x22>
 800ba70:	b15b      	cbz	r3, 800ba8a <rmw_uros_set_custom_transport+0x22>
 800ba72:	b155      	cbz	r5, 800ba8a <rmw_uros_set_custom_transport+0x22>
 800ba74:	b14e      	cbz	r6, 800ba8a <rmw_uros_set_custom_transport+0x22>
 800ba76:	4c06      	ldr	r4, [pc, #24]	@ (800ba90 <rmw_uros_set_custom_transport+0x28>)
 800ba78:	7020      	strb	r0, [r4, #0]
 800ba7a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800ba7e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ba82:	6166      	str	r6, [r4, #20]
 800ba84:	2000      	movs	r0, #0
 800ba86:	bc70      	pop	{r4, r5, r6}
 800ba88:	4770      	bx	lr
 800ba8a:	200b      	movs	r0, #11
 800ba8c:	bc70      	pop	{r4, r5, r6}
 800ba8e:	4770      	bx	lr
 800ba90:	200061fc 	.word	0x200061fc

0800ba94 <rmw_init_options_init>:
 800ba94:	b084      	sub	sp, #16
 800ba96:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba98:	b083      	sub	sp, #12
 800ba9a:	ad09      	add	r5, sp, #36	@ 0x24
 800ba9c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800baa0:	b130      	cbz	r0, 800bab0 <rmw_init_options_init+0x1c>
 800baa2:	4604      	mov	r4, r0
 800baa4:	4628      	mov	r0, r5
 800baa6:	f7ff ff35 	bl	800b914 <rcutils_allocator_is_valid>
 800baaa:	b108      	cbz	r0, 800bab0 <rmw_init_options_init+0x1c>
 800baac:	68a6      	ldr	r6, [r4, #8]
 800baae:	b12e      	cbz	r6, 800babc <rmw_init_options_init+0x28>
 800bab0:	200b      	movs	r0, #11
 800bab2:	b003      	add	sp, #12
 800bab4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bab8:	b004      	add	sp, #16
 800baba:	4770      	bx	lr
 800babc:	2200      	movs	r2, #0
 800babe:	2300      	movs	r3, #0
 800bac0:	e9c4 2300 	strd	r2, r3, [r4]
 800bac4:	4b22      	ldr	r3, [pc, #136]	@ (800bb50 <rmw_init_options_init+0xbc>)
 800bac6:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800bb60 <rmw_init_options_init+0xcc>
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	60a3      	str	r3, [r4, #8]
 800bace:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bad0:	f104 0c20 	add.w	ip, r4, #32
 800bad4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bad8:	466f      	mov	r7, sp
 800bada:	682b      	ldr	r3, [r5, #0]
 800badc:	f8cc 3000 	str.w	r3, [ip]
 800bae0:	4638      	mov	r0, r7
 800bae2:	f8c4 e01c 	str.w	lr, [r4, #28]
 800bae6:	60e6      	str	r6, [r4, #12]
 800bae8:	f7ff ffba 	bl	800ba60 <rmw_get_default_security_options>
 800baec:	e897 0003 	ldmia.w	r7, {r0, r1}
 800baf0:	f104 0310 	add.w	r3, r4, #16
 800baf4:	e883 0003 	stmia.w	r3, {r0, r1}
 800baf8:	2203      	movs	r2, #3
 800bafa:	4816      	ldr	r0, [pc, #88]	@ (800bb54 <rmw_init_options_init+0xc0>)
 800bafc:	4916      	ldr	r1, [pc, #88]	@ (800bb58 <rmw_init_options_init+0xc4>)
 800bafe:	7626      	strb	r6, [r4, #24]
 800bb00:	f000 ff8e 	bl	800ca20 <rmw_uxrce_init_init_options_impl_memory>
 800bb04:	4813      	ldr	r0, [pc, #76]	@ (800bb54 <rmw_init_options_init+0xc0>)
 800bb06:	f009 fc73 	bl	80153f0 <get_memory>
 800bb0a:	b1f0      	cbz	r0, 800bb4a <rmw_init_options_init+0xb6>
 800bb0c:	4a13      	ldr	r2, [pc, #76]	@ (800bb5c <rmw_init_options_init+0xc8>)
 800bb0e:	6883      	ldr	r3, [r0, #8]
 800bb10:	6851      	ldr	r1, [r2, #4]
 800bb12:	7810      	ldrb	r0, [r2, #0]
 800bb14:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb16:	7418      	strb	r0, [r3, #16]
 800bb18:	6159      	str	r1, [r3, #20]
 800bb1a:	68d1      	ldr	r1, [r2, #12]
 800bb1c:	61d9      	str	r1, [r3, #28]
 800bb1e:	6911      	ldr	r1, [r2, #16]
 800bb20:	6219      	str	r1, [r3, #32]
 800bb22:	6951      	ldr	r1, [r2, #20]
 800bb24:	6892      	ldr	r2, [r2, #8]
 800bb26:	619a      	str	r2, [r3, #24]
 800bb28:	6259      	str	r1, [r3, #36]	@ 0x24
 800bb2a:	f004 fd6b 	bl	8010604 <uxr_nanos>
 800bb2e:	f00b fcbb 	bl	80174a8 <srand>
 800bb32:	f00b fce7 	bl	8017504 <rand>
 800bb36:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bb38:	6298      	str	r0, [r3, #40]	@ 0x28
 800bb3a:	2800      	cmp	r0, #0
 800bb3c:	d0f9      	beq.n	800bb32 <rmw_init_options_init+0x9e>
 800bb3e:	2000      	movs	r0, #0
 800bb40:	b003      	add	sp, #12
 800bb42:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bb46:	b004      	add	sp, #16
 800bb48:	4770      	bx	lr
 800bb4a:	2001      	movs	r0, #1
 800bb4c:	e7b1      	b.n	800bab2 <rmw_init_options_init+0x1e>
 800bb4e:	bf00      	nop
 800bb50:	080195a0 	.word	0x080195a0
 800bb54:	2000ab14 	.word	0x2000ab14
 800bb58:	200063b0 	.word	0x200063b0
 800bb5c:	200061fc 	.word	0x200061fc
 800bb60:	08018c48 	.word	0x08018c48

0800bb64 <rmw_init_options_copy>:
 800bb64:	b570      	push	{r4, r5, r6, lr}
 800bb66:	b158      	cbz	r0, 800bb80 <rmw_init_options_copy+0x1c>
 800bb68:	460d      	mov	r5, r1
 800bb6a:	b149      	cbz	r1, 800bb80 <rmw_init_options_copy+0x1c>
 800bb6c:	4604      	mov	r4, r0
 800bb6e:	6880      	ldr	r0, [r0, #8]
 800bb70:	b120      	cbz	r0, 800bb7c <rmw_init_options_copy+0x18>
 800bb72:	4b1e      	ldr	r3, [pc, #120]	@ (800bbec <rmw_init_options_copy+0x88>)
 800bb74:	6819      	ldr	r1, [r3, #0]
 800bb76:	f7f4 fb53 	bl	8000220 <strcmp>
 800bb7a:	bb90      	cbnz	r0, 800bbe2 <rmw_init_options_copy+0x7e>
 800bb7c:	68ab      	ldr	r3, [r5, #8]
 800bb7e:	b113      	cbz	r3, 800bb86 <rmw_init_options_copy+0x22>
 800bb80:	250b      	movs	r5, #11
 800bb82:	4628      	mov	r0, r5
 800bb84:	bd70      	pop	{r4, r5, r6, pc}
 800bb86:	4623      	mov	r3, r4
 800bb88:	462a      	mov	r2, r5
 800bb8a:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800bb8e:	f8d3 c000 	ldr.w	ip, [r3]
 800bb92:	6858      	ldr	r0, [r3, #4]
 800bb94:	6899      	ldr	r1, [r3, #8]
 800bb96:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800bb9a:	f8c2 e00c 	str.w	lr, [r2, #12]
 800bb9e:	3310      	adds	r3, #16
 800bba0:	42b3      	cmp	r3, r6
 800bba2:	f8c2 c000 	str.w	ip, [r2]
 800bba6:	6050      	str	r0, [r2, #4]
 800bba8:	6091      	str	r1, [r2, #8]
 800bbaa:	f102 0210 	add.w	r2, r2, #16
 800bbae:	d1ee      	bne.n	800bb8e <rmw_init_options_copy+0x2a>
 800bbb0:	6819      	ldr	r1, [r3, #0]
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	480e      	ldr	r0, [pc, #56]	@ (800bbf0 <rmw_init_options_copy+0x8c>)
 800bbb6:	6053      	str	r3, [r2, #4]
 800bbb8:	6011      	str	r1, [r2, #0]
 800bbba:	f009 fc19 	bl	80153f0 <get_memory>
 800bbbe:	b198      	cbz	r0, 800bbe8 <rmw_init_options_copy+0x84>
 800bbc0:	6883      	ldr	r3, [r0, #8]
 800bbc2:	636b      	str	r3, [r5, #52]	@ 0x34
 800bbc4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800bbc6:	f102 0c10 	add.w	ip, r2, #16
 800bbca:	f103 0410 	add.w	r4, r3, #16
 800bbce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bbd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bbd4:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800bbd8:	2500      	movs	r5, #0
 800bbda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bbde:	4628      	mov	r0, r5
 800bbe0:	bd70      	pop	{r4, r5, r6, pc}
 800bbe2:	250c      	movs	r5, #12
 800bbe4:	4628      	mov	r0, r5
 800bbe6:	bd70      	pop	{r4, r5, r6, pc}
 800bbe8:	2501      	movs	r5, #1
 800bbea:	e7ca      	b.n	800bb82 <rmw_init_options_copy+0x1e>
 800bbec:	080195a0 	.word	0x080195a0
 800bbf0:	2000ab14 	.word	0x2000ab14

0800bbf4 <rmw_init_options_fini>:
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	d03d      	beq.n	800bc74 <rmw_init_options_fini+0x80>
 800bbf8:	b510      	push	{r4, lr}
 800bbfa:	4604      	mov	r4, r0
 800bbfc:	b08e      	sub	sp, #56	@ 0x38
 800bbfe:	3020      	adds	r0, #32
 800bc00:	f7ff fe88 	bl	800b914 <rcutils_allocator_is_valid>
 800bc04:	b360      	cbz	r0, 800bc60 <rmw_init_options_fini+0x6c>
 800bc06:	68a0      	ldr	r0, [r4, #8]
 800bc08:	b120      	cbz	r0, 800bc14 <rmw_init_options_fini+0x20>
 800bc0a:	4b1c      	ldr	r3, [pc, #112]	@ (800bc7c <rmw_init_options_fini+0x88>)
 800bc0c:	6819      	ldr	r1, [r3, #0]
 800bc0e:	f7f4 fb07 	bl	8000220 <strcmp>
 800bc12:	bb68      	cbnz	r0, 800bc70 <rmw_init_options_fini+0x7c>
 800bc14:	4b1a      	ldr	r3, [pc, #104]	@ (800bc80 <rmw_init_options_fini+0x8c>)
 800bc16:	6819      	ldr	r1, [r3, #0]
 800bc18:	b331      	cbz	r1, 800bc68 <rmw_init_options_fini+0x74>
 800bc1a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800bc1c:	e001      	b.n	800bc22 <rmw_init_options_fini+0x2e>
 800bc1e:	6849      	ldr	r1, [r1, #4]
 800bc20:	b311      	cbz	r1, 800bc68 <rmw_init_options_fini+0x74>
 800bc22:	688b      	ldr	r3, [r1, #8]
 800bc24:	429a      	cmp	r2, r3
 800bc26:	d1fa      	bne.n	800bc1e <rmw_init_options_fini+0x2a>
 800bc28:	4815      	ldr	r0, [pc, #84]	@ (800bc80 <rmw_init_options_fini+0x8c>)
 800bc2a:	f009 fbf1 	bl	8015410 <put_memory>
 800bc2e:	4668      	mov	r0, sp
 800bc30:	f7ff ff02 	bl	800ba38 <rmw_get_zero_initialized_init_options>
 800bc34:	46ee      	mov	lr, sp
 800bc36:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bc3a:	46a4      	mov	ip, r4
 800bc3c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bc40:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bc44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bc48:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bc4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bc50:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800bc54:	e88c 0003 	stmia.w	ip, {r0, r1}
 800bc58:	2300      	movs	r3, #0
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	b00e      	add	sp, #56	@ 0x38
 800bc5e:	bd10      	pop	{r4, pc}
 800bc60:	230b      	movs	r3, #11
 800bc62:	4618      	mov	r0, r3
 800bc64:	b00e      	add	sp, #56	@ 0x38
 800bc66:	bd10      	pop	{r4, pc}
 800bc68:	2301      	movs	r3, #1
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	b00e      	add	sp, #56	@ 0x38
 800bc6e:	bd10      	pop	{r4, pc}
 800bc70:	230c      	movs	r3, #12
 800bc72:	e7f2      	b.n	800bc5a <rmw_init_options_fini+0x66>
 800bc74:	230b      	movs	r3, #11
 800bc76:	4618      	mov	r0, r3
 800bc78:	4770      	bx	lr
 800bc7a:	bf00      	nop
 800bc7c:	080195a0 	.word	0x080195a0
 800bc80:	2000ab14 	.word	0x2000ab14

0800bc84 <rmw_init>:
 800bc84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc88:	b083      	sub	sp, #12
 800bc8a:	2800      	cmp	r0, #0
 800bc8c:	f000 80d3 	beq.w	800be36 <rmw_init+0x1b2>
 800bc90:	460e      	mov	r6, r1
 800bc92:	2900      	cmp	r1, #0
 800bc94:	f000 80cf 	beq.w	800be36 <rmw_init+0x1b2>
 800bc98:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800bc9a:	4605      	mov	r5, r0
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	f000 80ca 	beq.w	800be36 <rmw_init+0x1b2>
 800bca2:	4b78      	ldr	r3, [pc, #480]	@ (800be84 <rmw_init+0x200>)
 800bca4:	6880      	ldr	r0, [r0, #8]
 800bca6:	681f      	ldr	r7, [r3, #0]
 800bca8:	b128      	cbz	r0, 800bcb6 <rmw_init+0x32>
 800bcaa:	4639      	mov	r1, r7
 800bcac:	f7f4 fab8 	bl	8000220 <strcmp>
 800bcb0:	2800      	cmp	r0, #0
 800bcb2:	f040 80ca 	bne.w	800be4a <rmw_init+0x1c6>
 800bcb6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bcba:	4c73      	ldr	r4, [pc, #460]	@ (800be88 <rmw_init+0x204>)
 800bcbc:	4973      	ldr	r1, [pc, #460]	@ (800be8c <rmw_init+0x208>)
 800bcbe:	4874      	ldr	r0, [pc, #464]	@ (800be90 <rmw_init+0x20c>)
 800bcc0:	60b7      	str	r7, [r6, #8]
 800bcc2:	e9c6 2300 	strd	r2, r3, [r6]
 800bcc6:	68eb      	ldr	r3, [r5, #12]
 800bcc8:	64b3      	str	r3, [r6, #72]	@ 0x48
 800bcca:	2201      	movs	r2, #1
 800bccc:	f000 fe48 	bl	800c960 <rmw_uxrce_init_session_memory>
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	4970      	ldr	r1, [pc, #448]	@ (800be94 <rmw_init+0x210>)
 800bcd4:	2204      	movs	r2, #4
 800bcd6:	f000 fe83 	bl	800c9e0 <rmw_uxrce_init_static_input_buffer_memory>
 800bcda:	f04f 0800 	mov.w	r8, #0
 800bcde:	486c      	ldr	r0, [pc, #432]	@ (800be90 <rmw_init+0x20c>)
 800bce0:	f884 800d 	strb.w	r8, [r4, #13]
 800bce4:	f009 fb84 	bl	80153f0 <get_memory>
 800bce8:	2800      	cmp	r0, #0
 800bcea:	f000 80a9 	beq.w	800be40 <rmw_init+0x1bc>
 800bcee:	6884      	ldr	r4, [r0, #8]
 800bcf0:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800bcf2:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800bcf4:	f890 c010 	ldrb.w	ip, [r0, #16]
 800bcf8:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800bcfc:	9101      	str	r1, [sp, #4]
 800bcfe:	6a00      	ldr	r0, [r0, #32]
 800bd00:	9000      	str	r0, [sp, #0]
 800bd02:	f104 0910 	add.w	r9, r4, #16
 800bd06:	4661      	mov	r1, ip
 800bd08:	4648      	mov	r0, r9
 800bd0a:	f002 fc19 	bl	800e540 <uxr_set_custom_transport_callbacks>
 800bd0e:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800bd12:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800bd16:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800bd1a:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800bd1e:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800bd22:	495d      	ldr	r1, [pc, #372]	@ (800be98 <rmw_init+0x214>)
 800bd24:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800bd28:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800bd2c:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800bd30:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800bd34:	4859      	ldr	r0, [pc, #356]	@ (800be9c <rmw_init+0x218>)
 800bd36:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800bd3e:	f000 fdef 	bl	800c920 <rmw_uxrce_init_node_memory>
 800bd42:	4957      	ldr	r1, [pc, #348]	@ (800bea0 <rmw_init+0x21c>)
 800bd44:	4857      	ldr	r0, [pc, #348]	@ (800bea4 <rmw_init+0x220>)
 800bd46:	2205      	movs	r2, #5
 800bd48:	f000 fdca 	bl	800c8e0 <rmw_uxrce_init_subscription_memory>
 800bd4c:	4956      	ldr	r1, [pc, #344]	@ (800bea8 <rmw_init+0x224>)
 800bd4e:	4857      	ldr	r0, [pc, #348]	@ (800beac <rmw_init+0x228>)
 800bd50:	220a      	movs	r2, #10
 800bd52:	f000 fda5 	bl	800c8a0 <rmw_uxrce_init_publisher_memory>
 800bd56:	4956      	ldr	r1, [pc, #344]	@ (800beb0 <rmw_init+0x22c>)
 800bd58:	4856      	ldr	r0, [pc, #344]	@ (800beb4 <rmw_init+0x230>)
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	f000 fd60 	bl	800c820 <rmw_uxrce_init_service_memory>
 800bd60:	4955      	ldr	r1, [pc, #340]	@ (800beb8 <rmw_init+0x234>)
 800bd62:	4856      	ldr	r0, [pc, #344]	@ (800bebc <rmw_init+0x238>)
 800bd64:	2201      	movs	r2, #1
 800bd66:	f000 fd7b 	bl	800c860 <rmw_uxrce_init_client_memory>
 800bd6a:	4955      	ldr	r1, [pc, #340]	@ (800bec0 <rmw_init+0x23c>)
 800bd6c:	4855      	ldr	r0, [pc, #340]	@ (800bec4 <rmw_init+0x240>)
 800bd6e:	220f      	movs	r2, #15
 800bd70:	f000 fe16 	bl	800c9a0 <rmw_uxrce_init_topic_memory>
 800bd74:	4954      	ldr	r1, [pc, #336]	@ (800bec8 <rmw_init+0x244>)
 800bd76:	4855      	ldr	r0, [pc, #340]	@ (800becc <rmw_init+0x248>)
 800bd78:	2203      	movs	r2, #3
 800bd7a:	f000 fe51 	bl	800ca20 <rmw_uxrce_init_init_options_impl_memory>
 800bd7e:	4954      	ldr	r1, [pc, #336]	@ (800bed0 <rmw_init+0x24c>)
 800bd80:	4854      	ldr	r0, [pc, #336]	@ (800bed4 <rmw_init+0x250>)
 800bd82:	2204      	movs	r2, #4
 800bd84:	f000 fe6c 	bl	800ca60 <rmw_uxrce_init_wait_set_memory>
 800bd88:	4953      	ldr	r1, [pc, #332]	@ (800bed8 <rmw_init+0x254>)
 800bd8a:	4854      	ldr	r0, [pc, #336]	@ (800bedc <rmw_init+0x258>)
 800bd8c:	2204      	movs	r2, #4
 800bd8e:	f000 fe87 	bl	800caa0 <rmw_uxrce_init_guard_condition_memory>
 800bd92:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800bd94:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800bd96:	4642      	mov	r2, r8
 800bd98:	f000 fd2a 	bl	800c7f0 <rmw_uxrce_transport_init>
 800bd9c:	4607      	mov	r7, r0
 800bd9e:	2800      	cmp	r0, #0
 800bda0:	d158      	bne.n	800be54 <rmw_init+0x1d0>
 800bda2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800bda4:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800bda8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bdaa:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800bdae:	4628      	mov	r0, r5
 800bdb0:	f002 fdfa 	bl	800e9a8 <uxr_init_session>
 800bdb4:	494a      	ldr	r1, [pc, #296]	@ (800bee0 <rmw_init+0x25c>)
 800bdb6:	4622      	mov	r2, r4
 800bdb8:	4628      	mov	r0, r5
 800bdba:	f002 fe19 	bl	800e9f0 <uxr_set_topic_callback>
 800bdbe:	4949      	ldr	r1, [pc, #292]	@ (800bee4 <rmw_init+0x260>)
 800bdc0:	463a      	mov	r2, r7
 800bdc2:	4628      	mov	r0, r5
 800bdc4:	f002 fe10 	bl	800e9e8 <uxr_set_status_callback>
 800bdc8:	4947      	ldr	r1, [pc, #284]	@ (800bee8 <rmw_init+0x264>)
 800bdca:	463a      	mov	r2, r7
 800bdcc:	4628      	mov	r0, r5
 800bdce:	f002 fe13 	bl	800e9f8 <uxr_set_request_callback>
 800bdd2:	4946      	ldr	r1, [pc, #280]	@ (800beec <rmw_init+0x268>)
 800bdd4:	463a      	mov	r2, r7
 800bdd6:	4628      	mov	r0, r5
 800bdd8:	f002 fe12 	bl	800ea00 <uxr_set_reply_callback>
 800bddc:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800bde0:	2304      	movs	r3, #4
 800bde2:	0092      	lsls	r2, r2, #2
 800bde4:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800bde8:	4628      	mov	r0, r5
 800bdea:	f002 fe47 	bl	800ea7c <uxr_create_input_reliable_stream>
 800bdee:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800bdf2:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800bdf6:	0092      	lsls	r2, r2, #2
 800bdf8:	2304      	movs	r3, #4
 800bdfa:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800bdfe:	4628      	mov	r0, r5
 800be00:	f002 fe14 	bl	800ea2c <uxr_create_output_reliable_stream>
 800be04:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800be08:	4628      	mov	r0, r5
 800be0a:	f002 fe31 	bl	800ea70 <uxr_create_input_best_effort_stream>
 800be0e:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800be12:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800be16:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800be1a:	3114      	adds	r1, #20
 800be1c:	4628      	mov	r0, r5
 800be1e:	f002 fdf3 	bl	800ea08 <uxr_create_output_best_effort_stream>
 800be22:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800be26:	4628      	mov	r0, r5
 800be28:	f003 fb7e 	bl	800f528 <uxr_create_session>
 800be2c:	b1f8      	cbz	r0, 800be6e <rmw_init+0x1ea>
 800be2e:	4638      	mov	r0, r7
 800be30:	b003      	add	sp, #12
 800be32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be36:	270b      	movs	r7, #11
 800be38:	4638      	mov	r0, r7
 800be3a:	b003      	add	sp, #12
 800be3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be40:	2701      	movs	r7, #1
 800be42:	4638      	mov	r0, r7
 800be44:	b003      	add	sp, #12
 800be46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be4a:	270c      	movs	r7, #12
 800be4c:	4638      	mov	r0, r7
 800be4e:	b003      	add	sp, #12
 800be50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be54:	4648      	mov	r0, r9
 800be56:	f002 fbb5 	bl	800e5c4 <uxr_close_custom_transport>
 800be5a:	480d      	ldr	r0, [pc, #52]	@ (800be90 <rmw_init+0x20c>)
 800be5c:	4621      	mov	r1, r4
 800be5e:	f009 fad7 	bl	8015410 <put_memory>
 800be62:	4638      	mov	r0, r7
 800be64:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800be68:	b003      	add	sp, #12
 800be6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be6e:	4648      	mov	r0, r9
 800be70:	f002 fba8 	bl	800e5c4 <uxr_close_custom_transport>
 800be74:	4806      	ldr	r0, [pc, #24]	@ (800be90 <rmw_init+0x20c>)
 800be76:	4621      	mov	r1, r4
 800be78:	f009 faca 	bl	8015410 <put_memory>
 800be7c:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800be7e:	2701      	movs	r7, #1
 800be80:	e7d5      	b.n	800be2e <rmw_init+0x1aa>
 800be82:	bf00      	nop
 800be84:	080195a0 	.word	0x080195a0
 800be88:	2000ab64 	.word	0x2000ab64
 800be8c:	20006e10 	.word	0x20006e10
 800be90:	2000ab54 	.word	0x2000ab54
 800be94:	200083b8 	.word	0x200083b8
 800be98:	20006434 	.word	0x20006434
 800be9c:	2000ab24 	.word	0x2000ab24
 800bea0:	2000a4b8 	.word	0x2000a4b8
 800bea4:	2000ab74 	.word	0x2000ab74
 800bea8:	200064d8 	.word	0x200064d8
 800beac:	2000ab34 	.word	0x2000ab34
 800beb0:	20006d48 	.word	0x20006d48
 800beb4:	2000ab44 	.word	0x2000ab44
 800beb8:	20006268 	.word	0x20006268
 800bebc:	20006254 	.word	0x20006254
 800bec0:	2000a8f0 	.word	0x2000a8f0
 800bec4:	2000ab84 	.word	0x2000ab84
 800bec8:	200063b0 	.word	0x200063b0
 800becc:	2000ab14 	.word	0x2000ab14
 800bed0:	2000aa94 	.word	0x2000aa94
 800bed4:	2000ab94 	.word	0x2000ab94
 800bed8:	20006330 	.word	0x20006330
 800bedc:	2000ab04 	.word	0x2000ab04
 800bee0:	08015229 	.word	0x08015229
 800bee4:	08015221 	.word	0x08015221
 800bee8:	080152c1 	.word	0x080152c1
 800beec:	0801535d 	.word	0x0801535d

0800bef0 <rmw_context_fini>:
 800bef0:	4b17      	ldr	r3, [pc, #92]	@ (800bf50 <rmw_context_fini+0x60>)
 800bef2:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800bef4:	b570      	push	{r4, r5, r6, lr}
 800bef6:	681c      	ldr	r4, [r3, #0]
 800bef8:	4605      	mov	r5, r0
 800befa:	b334      	cbz	r4, 800bf4a <rmw_context_fini+0x5a>
 800befc:	2600      	movs	r6, #0
 800befe:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800bf02:	6902      	ldr	r2, [r0, #16]
 800bf04:	428a      	cmp	r2, r1
 800bf06:	d018      	beq.n	800bf3a <rmw_context_fini+0x4a>
 800bf08:	2c00      	cmp	r4, #0
 800bf0a:	d1f8      	bne.n	800befe <rmw_context_fini+0xe>
 800bf0c:	b189      	cbz	r1, 800bf32 <rmw_context_fini+0x42>
 800bf0e:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800bf12:	789b      	ldrb	r3, [r3, #2]
 800bf14:	2b01      	cmp	r3, #1
 800bf16:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800bf1a:	bf14      	ite	ne
 800bf1c:	210a      	movne	r1, #10
 800bf1e:	2100      	moveq	r1, #0
 800bf20:	f003 fada 	bl	800f4d8 <uxr_delete_session_retries>
 800bf24:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800bf26:	f000 fddb 	bl	800cae0 <rmw_uxrce_fini_session_memory>
 800bf2a:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800bf2c:	3010      	adds	r0, #16
 800bf2e:	f002 fb49 	bl	800e5c4 <uxr_close_custom_transport>
 800bf32:	2300      	movs	r3, #0
 800bf34:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800bf36:	4630      	mov	r0, r6
 800bf38:	bd70      	pop	{r4, r5, r6, pc}
 800bf3a:	3018      	adds	r0, #24
 800bf3c:	f000 f89c 	bl	800c078 <rmw_destroy_node>
 800bf40:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800bf42:	4606      	mov	r6, r0
 800bf44:	2c00      	cmp	r4, #0
 800bf46:	d1da      	bne.n	800befe <rmw_context_fini+0xe>
 800bf48:	e7e0      	b.n	800bf0c <rmw_context_fini+0x1c>
 800bf4a:	4626      	mov	r6, r4
 800bf4c:	e7de      	b.n	800bf0c <rmw_context_fini+0x1c>
 800bf4e:	bf00      	nop
 800bf50:	2000ab24 	.word	0x2000ab24

0800bf54 <create_node>:
 800bf54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf58:	b083      	sub	sp, #12
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d05f      	beq.n	800c01e <create_node+0xca>
 800bf5e:	4606      	mov	r6, r0
 800bf60:	4835      	ldr	r0, [pc, #212]	@ (800c038 <create_node+0xe4>)
 800bf62:	460f      	mov	r7, r1
 800bf64:	4690      	mov	r8, r2
 800bf66:	461d      	mov	r5, r3
 800bf68:	f009 fa42 	bl	80153f0 <get_memory>
 800bf6c:	2800      	cmp	r0, #0
 800bf6e:	d056      	beq.n	800c01e <create_node+0xca>
 800bf70:	6884      	ldr	r4, [r0, #8]
 800bf72:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800bf74:	6123      	str	r3, [r4, #16]
 800bf76:	f009 faa3 	bl	80154c0 <rmw_get_implementation_identifier>
 800bf7a:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800bf7e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800bf82:	f8c4 9020 	str.w	r9, [r4, #32]
 800bf86:	4630      	mov	r0, r6
 800bf88:	f7f4 f954 	bl	8000234 <strlen>
 800bf8c:	1c42      	adds	r2, r0, #1
 800bf8e:	2a3c      	cmp	r2, #60	@ 0x3c
 800bf90:	f104 0518 	add.w	r5, r4, #24
 800bf94:	d840      	bhi.n	800c018 <create_node+0xc4>
 800bf96:	4648      	mov	r0, r9
 800bf98:	4631      	mov	r1, r6
 800bf9a:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800bf9e:	f00b fe14 	bl	8017bca <memcpy>
 800bfa2:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800bfa6:	4638      	mov	r0, r7
 800bfa8:	f7f4 f944 	bl	8000234 <strlen>
 800bfac:	1c42      	adds	r2, r0, #1
 800bfae:	2a3c      	cmp	r2, #60	@ 0x3c
 800bfb0:	d832      	bhi.n	800c018 <create_node+0xc4>
 800bfb2:	4639      	mov	r1, r7
 800bfb4:	4648      	mov	r0, r9
 800bfb6:	f00b fe08 	bl	8017bca <memcpy>
 800bfba:	6923      	ldr	r3, [r4, #16]
 800bfbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bfc0:	2101      	movs	r1, #1
 800bfc2:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800bfc6:	1842      	adds	r2, r0, r1
 800bfc8:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800bfcc:	f002 fafe 	bl	800e5cc <uxr_object_id>
 800bfd0:	6160      	str	r0, [r4, #20]
 800bfd2:	783b      	ldrb	r3, [r7, #0]
 800bfd4:	2b2f      	cmp	r3, #47	@ 0x2f
 800bfd6:	d127      	bne.n	800c028 <create_node+0xd4>
 800bfd8:	787b      	ldrb	r3, [r7, #1]
 800bfda:	bb2b      	cbnz	r3, 800c028 <create_node+0xd4>
 800bfdc:	4a17      	ldr	r2, [pc, #92]	@ (800c03c <create_node+0xe8>)
 800bfde:	4818      	ldr	r0, [pc, #96]	@ (800c040 <create_node+0xec>)
 800bfe0:	4633      	mov	r3, r6
 800bfe2:	213c      	movs	r1, #60	@ 0x3c
 800bfe4:	f00b fc4e 	bl	8017884 <sniprintf>
 800bfe8:	6920      	ldr	r0, [r4, #16]
 800bfea:	4915      	ldr	r1, [pc, #84]	@ (800c040 <create_node+0xec>)
 800bfec:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800bff0:	9100      	str	r1, [sp, #0]
 800bff2:	2106      	movs	r1, #6
 800bff4:	9101      	str	r1, [sp, #4]
 800bff6:	6811      	ldr	r1, [r2, #0]
 800bff8:	6962      	ldr	r2, [r4, #20]
 800bffa:	fa1f f388 	uxth.w	r3, r8
 800bffe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c002:	f002 f86b 	bl	800e0dc <uxr_buffer_create_participant_bin>
 800c006:	4602      	mov	r2, r0
 800c008:	6920      	ldr	r0, [r4, #16]
 800c00a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c00e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c012:	f000 fedb 	bl	800cdcc <run_xrce_session>
 800c016:	b918      	cbnz	r0, 800c020 <create_node+0xcc>
 800c018:	4628      	mov	r0, r5
 800c01a:	f000 fd67 	bl	800caec <rmw_uxrce_fini_node_memory>
 800c01e:	2500      	movs	r5, #0
 800c020:	4628      	mov	r0, r5
 800c022:	b003      	add	sp, #12
 800c024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c028:	4a06      	ldr	r2, [pc, #24]	@ (800c044 <create_node+0xf0>)
 800c02a:	9600      	str	r6, [sp, #0]
 800c02c:	463b      	mov	r3, r7
 800c02e:	213c      	movs	r1, #60	@ 0x3c
 800c030:	4803      	ldr	r0, [pc, #12]	@ (800c040 <create_node+0xec>)
 800c032:	f00b fc27 	bl	8017884 <sniprintf>
 800c036:	e7d7      	b.n	800bfe8 <create_node+0x94>
 800c038:	2000ab24 	.word	0x2000ab24
 800c03c:	08018c88 	.word	0x08018c88
 800c040:	20006218 	.word	0x20006218
 800c044:	08018c4c 	.word	0x08018c4c

0800c048 <rmw_create_node>:
 800c048:	b199      	cbz	r1, 800c072 <rmw_create_node+0x2a>
 800c04a:	780b      	ldrb	r3, [r1, #0]
 800c04c:	468c      	mov	ip, r1
 800c04e:	b183      	cbz	r3, 800c072 <rmw_create_node+0x2a>
 800c050:	b410      	push	{r4}
 800c052:	4614      	mov	r4, r2
 800c054:	b14a      	cbz	r2, 800c06a <rmw_create_node+0x22>
 800c056:	7813      	ldrb	r3, [r2, #0]
 800c058:	b13b      	cbz	r3, 800c06a <rmw_create_node+0x22>
 800c05a:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800c05c:	4603      	mov	r3, r0
 800c05e:	4621      	mov	r1, r4
 800c060:	4660      	mov	r0, ip
 800c062:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c066:	f7ff bf75 	b.w	800bf54 <create_node>
 800c06a:	2000      	movs	r0, #0
 800c06c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c070:	4770      	bx	lr
 800c072:	2000      	movs	r0, #0
 800c074:	4770      	bx	lr
 800c076:	bf00      	nop

0800c078 <rmw_destroy_node>:
 800c078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c07a:	b328      	cbz	r0, 800c0c8 <rmw_destroy_node+0x50>
 800c07c:	4607      	mov	r7, r0
 800c07e:	6800      	ldr	r0, [r0, #0]
 800c080:	b120      	cbz	r0, 800c08c <rmw_destroy_node+0x14>
 800c082:	4b36      	ldr	r3, [pc, #216]	@ (800c15c <rmw_destroy_node+0xe4>)
 800c084:	6819      	ldr	r1, [r3, #0]
 800c086:	f7f4 f8cb 	bl	8000220 <strcmp>
 800c08a:	b9e8      	cbnz	r0, 800c0c8 <rmw_destroy_node+0x50>
 800c08c:	687d      	ldr	r5, [r7, #4]
 800c08e:	b1dd      	cbz	r5, 800c0c8 <rmw_destroy_node+0x50>
 800c090:	4b33      	ldr	r3, [pc, #204]	@ (800c160 <rmw_destroy_node+0xe8>)
 800c092:	681c      	ldr	r4, [r3, #0]
 800c094:	2c00      	cmp	r4, #0
 800c096:	d05f      	beq.n	800c158 <rmw_destroy_node+0xe0>
 800c098:	2600      	movs	r6, #0
 800c09a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800c09e:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800c0a2:	429d      	cmp	r5, r3
 800c0a4:	d013      	beq.n	800c0ce <rmw_destroy_node+0x56>
 800c0a6:	2c00      	cmp	r4, #0
 800c0a8:	d1f7      	bne.n	800c09a <rmw_destroy_node+0x22>
 800c0aa:	4b2e      	ldr	r3, [pc, #184]	@ (800c164 <rmw_destroy_node+0xec>)
 800c0ac:	681c      	ldr	r4, [r3, #0]
 800c0ae:	b1c4      	cbz	r4, 800c0e2 <rmw_destroy_node+0x6a>
 800c0b0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800c0b4:	6a0b      	ldr	r3, [r1, #32]
 800c0b6:	429d      	cmp	r5, r3
 800c0b8:	d1f9      	bne.n	800c0ae <rmw_destroy_node+0x36>
 800c0ba:	317c      	adds	r1, #124	@ 0x7c
 800c0bc:	4638      	mov	r0, r7
 800c0be:	f000 fb37 	bl	800c730 <rmw_destroy_subscription>
 800c0c2:	2801      	cmp	r0, #1
 800c0c4:	4606      	mov	r6, r0
 800c0c6:	d1f2      	bne.n	800c0ae <rmw_destroy_node+0x36>
 800c0c8:	2601      	movs	r6, #1
 800c0ca:	4630      	mov	r0, r6
 800c0cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0ce:	3184      	adds	r1, #132	@ 0x84
 800c0d0:	4638      	mov	r0, r7
 800c0d2:	f000 f9a5 	bl	800c420 <rmw_destroy_publisher>
 800c0d6:	2801      	cmp	r0, #1
 800c0d8:	4606      	mov	r6, r0
 800c0da:	d0f5      	beq.n	800c0c8 <rmw_destroy_node+0x50>
 800c0dc:	2c00      	cmp	r4, #0
 800c0de:	d1dc      	bne.n	800c09a <rmw_destroy_node+0x22>
 800c0e0:	e7e3      	b.n	800c0aa <rmw_destroy_node+0x32>
 800c0e2:	4b21      	ldr	r3, [pc, #132]	@ (800c168 <rmw_destroy_node+0xf0>)
 800c0e4:	681c      	ldr	r4, [r3, #0]
 800c0e6:	b16c      	cbz	r4, 800c104 <rmw_destroy_node+0x8c>
 800c0e8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800c0ec:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800c0ee:	429d      	cmp	r5, r3
 800c0f0:	d1f9      	bne.n	800c0e6 <rmw_destroy_node+0x6e>
 800c0f2:	317c      	adds	r1, #124	@ 0x7c
 800c0f4:	4638      	mov	r0, r7
 800c0f6:	f000 f9e5 	bl	800c4c4 <rmw_destroy_service>
 800c0fa:	2801      	cmp	r0, #1
 800c0fc:	4606      	mov	r6, r0
 800c0fe:	d0e3      	beq.n	800c0c8 <rmw_destroy_node+0x50>
 800c100:	2c00      	cmp	r4, #0
 800c102:	d1f1      	bne.n	800c0e8 <rmw_destroy_node+0x70>
 800c104:	4b19      	ldr	r3, [pc, #100]	@ (800c16c <rmw_destroy_node+0xf4>)
 800c106:	681c      	ldr	r4, [r3, #0]
 800c108:	b16c      	cbz	r4, 800c126 <rmw_destroy_node+0xae>
 800c10a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800c10e:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800c110:	429d      	cmp	r5, r3
 800c112:	d1f9      	bne.n	800c108 <rmw_destroy_node+0x90>
 800c114:	317c      	adds	r1, #124	@ 0x7c
 800c116:	4638      	mov	r0, r7
 800c118:	f009 f98e 	bl	8015438 <rmw_destroy_client>
 800c11c:	2801      	cmp	r0, #1
 800c11e:	4606      	mov	r6, r0
 800c120:	d0d2      	beq.n	800c0c8 <rmw_destroy_node+0x50>
 800c122:	2c00      	cmp	r4, #0
 800c124:	d1f1      	bne.n	800c10a <rmw_destroy_node+0x92>
 800c126:	6928      	ldr	r0, [r5, #16]
 800c128:	696a      	ldr	r2, [r5, #20]
 800c12a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c12e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c132:	6819      	ldr	r1, [r3, #0]
 800c134:	f001 ff86 	bl	800e044 <uxr_buffer_delete_entity>
 800c138:	4602      	mov	r2, r0
 800c13a:	6928      	ldr	r0, [r5, #16]
 800c13c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c140:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c144:	f000 fe42 	bl	800cdcc <run_xrce_session>
 800c148:	2800      	cmp	r0, #0
 800c14a:	bf08      	it	eq
 800c14c:	2602      	moveq	r6, #2
 800c14e:	4638      	mov	r0, r7
 800c150:	f000 fccc 	bl	800caec <rmw_uxrce_fini_node_memory>
 800c154:	4630      	mov	r0, r6
 800c156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c158:	4626      	mov	r6, r4
 800c15a:	e7a6      	b.n	800c0aa <rmw_destroy_node+0x32>
 800c15c:	080195a0 	.word	0x080195a0
 800c160:	2000ab34 	.word	0x2000ab34
 800c164:	2000ab74 	.word	0x2000ab74
 800c168:	2000ab44 	.word	0x2000ab44
 800c16c:	20006254 	.word	0x20006254

0800c170 <rmw_node_get_graph_guard_condition>:
 800c170:	6843      	ldr	r3, [r0, #4]
 800c172:	6918      	ldr	r0, [r3, #16]
 800c174:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800c178:	4770      	bx	lr
 800c17a:	bf00      	nop

0800c17c <flush_session>:
 800c17c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800c17e:	f003 b863 	b.w	800f248 <uxr_run_session_until_confirm_delivery>
 800c182:	bf00      	nop

0800c184 <rmw_publish>:
 800c184:	2800      	cmp	r0, #0
 800c186:	d053      	beq.n	800c230 <rmw_publish+0xac>
 800c188:	b570      	push	{r4, r5, r6, lr}
 800c18a:	460d      	mov	r5, r1
 800c18c:	b08e      	sub	sp, #56	@ 0x38
 800c18e:	2900      	cmp	r1, #0
 800c190:	d04b      	beq.n	800c22a <rmw_publish+0xa6>
 800c192:	4604      	mov	r4, r0
 800c194:	6800      	ldr	r0, [r0, #0]
 800c196:	f000 fe99 	bl	800cecc <is_uxrce_rmw_identifier_valid>
 800c19a:	2800      	cmp	r0, #0
 800c19c:	d045      	beq.n	800c22a <rmw_publish+0xa6>
 800c19e:	6866      	ldr	r6, [r4, #4]
 800c1a0:	2e00      	cmp	r6, #0
 800c1a2:	d042      	beq.n	800c22a <rmw_publish+0xa6>
 800c1a4:	69b4      	ldr	r4, [r6, #24]
 800c1a6:	4628      	mov	r0, r5
 800c1a8:	6923      	ldr	r3, [r4, #16]
 800c1aa:	4798      	blx	r3
 800c1ac:	69f3      	ldr	r3, [r6, #28]
 800c1ae:	9005      	str	r0, [sp, #20]
 800c1b0:	b113      	cbz	r3, 800c1b8 <rmw_publish+0x34>
 800c1b2:	a805      	add	r0, sp, #20
 800c1b4:	4798      	blx	r3
 800c1b6:	9805      	ldr	r0, [sp, #20]
 800c1b8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800c1bc:	691b      	ldr	r3, [r3, #16]
 800c1be:	9000      	str	r0, [sp, #0]
 800c1c0:	6972      	ldr	r2, [r6, #20]
 800c1c2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800c1c4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800c1c8:	ab06      	add	r3, sp, #24
 800c1ca:	f004 fabb 	bl	8010744 <uxr_prepare_output_stream>
 800c1ce:	b1d8      	cbz	r0, 800c208 <rmw_publish+0x84>
 800c1d0:	68a3      	ldr	r3, [r4, #8]
 800c1d2:	a906      	add	r1, sp, #24
 800c1d4:	4628      	mov	r0, r5
 800c1d6:	4798      	blx	r3
 800c1d8:	6a33      	ldr	r3, [r6, #32]
 800c1da:	4604      	mov	r4, r0
 800c1dc:	b10b      	cbz	r3, 800c1e2 <rmw_publish+0x5e>
 800c1de:	a806      	add	r0, sp, #24
 800c1e0:	4798      	blx	r3
 800c1e2:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800c1e6:	2b01      	cmp	r3, #1
 800c1e8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800c1ec:	d022      	beq.n	800c234 <rmw_publish+0xb0>
 800c1ee:	6918      	ldr	r0, [r3, #16]
 800c1f0:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800c1f2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c1f6:	f003 f827 	bl	800f248 <uxr_run_session_until_confirm_delivery>
 800c1fa:	4020      	ands	r0, r4
 800c1fc:	b2c4      	uxtb	r4, r0
 800c1fe:	f084 0001 	eor.w	r0, r4, #1
 800c202:	b2c0      	uxtb	r0, r0
 800c204:	b00e      	add	sp, #56	@ 0x38
 800c206:	bd70      	pop	{r4, r5, r6, pc}
 800c208:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800c20c:	6918      	ldr	r0, [r3, #16]
 800c20e:	9b05      	ldr	r3, [sp, #20]
 800c210:	9300      	str	r3, [sp, #0]
 800c212:	4b0b      	ldr	r3, [pc, #44]	@ (800c240 <rmw_publish+0xbc>)
 800c214:	9301      	str	r3, [sp, #4]
 800c216:	9602      	str	r6, [sp, #8]
 800c218:	6972      	ldr	r2, [r6, #20]
 800c21a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800c21c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c220:	ab06      	add	r3, sp, #24
 800c222:	f004 fabf 	bl	80107a4 <uxr_prepare_output_stream_fragmented>
 800c226:	2800      	cmp	r0, #0
 800c228:	d1d2      	bne.n	800c1d0 <rmw_publish+0x4c>
 800c22a:	2001      	movs	r0, #1
 800c22c:	b00e      	add	sp, #56	@ 0x38
 800c22e:	bd70      	pop	{r4, r5, r6, pc}
 800c230:	2001      	movs	r0, #1
 800c232:	4770      	bx	lr
 800c234:	6918      	ldr	r0, [r3, #16]
 800c236:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c23a:	f002 fc45 	bl	800eac8 <uxr_flash_output_streams>
 800c23e:	e7de      	b.n	800c1fe <rmw_publish+0x7a>
 800c240:	0800c17d 	.word	0x0800c17d

0800c244 <rmw_create_publisher>:
 800c244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c248:	b087      	sub	sp, #28
 800c24a:	2800      	cmp	r0, #0
 800c24c:	f000 80cc 	beq.w	800c3e8 <rmw_create_publisher+0x1a4>
 800c250:	460e      	mov	r6, r1
 800c252:	2900      	cmp	r1, #0
 800c254:	f000 80c8 	beq.w	800c3e8 <rmw_create_publisher+0x1a4>
 800c258:	4604      	mov	r4, r0
 800c25a:	6800      	ldr	r0, [r0, #0]
 800c25c:	4615      	mov	r5, r2
 800c25e:	4698      	mov	r8, r3
 800c260:	f000 fe34 	bl	800cecc <is_uxrce_rmw_identifier_valid>
 800c264:	2800      	cmp	r0, #0
 800c266:	f000 80bf 	beq.w	800c3e8 <rmw_create_publisher+0x1a4>
 800c26a:	2d00      	cmp	r5, #0
 800c26c:	f000 80bc 	beq.w	800c3e8 <rmw_create_publisher+0x1a4>
 800c270:	782b      	ldrb	r3, [r5, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	f000 80b8 	beq.w	800c3e8 <rmw_create_publisher+0x1a4>
 800c278:	f1b8 0f00 	cmp.w	r8, #0
 800c27c:	f000 80b4 	beq.w	800c3e8 <rmw_create_publisher+0x1a4>
 800c280:	485c      	ldr	r0, [pc, #368]	@ (800c3f4 <rmw_create_publisher+0x1b0>)
 800c282:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c286:	f009 f8b3 	bl	80153f0 <get_memory>
 800c28a:	2800      	cmp	r0, #0
 800c28c:	f000 80ac 	beq.w	800c3e8 <rmw_create_publisher+0x1a4>
 800c290:	6884      	ldr	r4, [r0, #8]
 800c292:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800c296:	f009 f913 	bl	80154c0 <rmw_get_implementation_identifier>
 800c29a:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800c29e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800c2a2:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800c2a6:	4628      	mov	r0, r5
 800c2a8:	f7f3 ffc4 	bl	8000234 <strlen>
 800c2ac:	3001      	adds	r0, #1
 800c2ae:	283c      	cmp	r0, #60	@ 0x3c
 800c2b0:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800c2b4:	f200 8091 	bhi.w	800c3da <rmw_create_publisher+0x196>
 800c2b8:	4a4f      	ldr	r2, [pc, #316]	@ (800c3f8 <rmw_create_publisher+0x1b4>)
 800c2ba:	462b      	mov	r3, r5
 800c2bc:	213c      	movs	r1, #60	@ 0x3c
 800c2be:	4650      	mov	r0, sl
 800c2c0:	f00b fae0 	bl	8017884 <sniprintf>
 800c2c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c2c8:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800c2ca:	4641      	mov	r1, r8
 800c2cc:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800c2d0:	2250      	movs	r2, #80	@ 0x50
 800c2d2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800c2d6:	f00b fc78 	bl	8017bca <memcpy>
 800c2da:	f898 3008 	ldrb.w	r3, [r8, #8]
 800c2de:	4947      	ldr	r1, [pc, #284]	@ (800c3fc <rmw_create_publisher+0x1b8>)
 800c2e0:	2b02      	cmp	r3, #2
 800c2e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c2e6:	bf0c      	ite	eq
 800c2e8:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800c2ec:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800c2f0:	67a3      	str	r3, [r4, #120]	@ 0x78
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800c2f8:	4630      	mov	r0, r6
 800c2fa:	f000 fdf5 	bl	800cee8 <get_message_typesupport_handle>
 800c2fe:	2800      	cmp	r0, #0
 800c300:	d06b      	beq.n	800c3da <rmw_create_publisher+0x196>
 800c302:	6842      	ldr	r2, [r0, #4]
 800c304:	61a2      	str	r2, [r4, #24]
 800c306:	2a00      	cmp	r2, #0
 800c308:	d067      	beq.n	800c3da <rmw_create_publisher+0x196>
 800c30a:	4629      	mov	r1, r5
 800c30c:	4643      	mov	r3, r8
 800c30e:	4648      	mov	r0, r9
 800c310:	f009 f8dc 	bl	80154cc <create_topic>
 800c314:	6260      	str	r0, [r4, #36]	@ 0x24
 800c316:	2800      	cmp	r0, #0
 800c318:	d063      	beq.n	800c3e2 <rmw_create_publisher+0x19e>
 800c31a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c31e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c322:	2103      	movs	r1, #3
 800c324:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800c328:	1c42      	adds	r2, r0, #1
 800c32a:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800c32e:	f002 f94d 	bl	800e5cc <uxr_object_id>
 800c332:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800c336:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c33a:	6120      	str	r0, [r4, #16]
 800c33c:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800c340:	6910      	ldr	r0, [r2, #16]
 800c342:	2506      	movs	r5, #6
 800c344:	9500      	str	r5, [sp, #0]
 800c346:	6819      	ldr	r1, [r3, #0]
 800c348:	6922      	ldr	r2, [r4, #16]
 800c34a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c34e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c352:	f001 ff2b 	bl	800e1ac <uxr_buffer_create_publisher_bin>
 800c356:	4602      	mov	r2, r0
 800c358:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c35c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c360:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c364:	f000 fd32 	bl	800cdcc <run_xrce_session>
 800c368:	b3b8      	cbz	r0, 800c3da <rmw_create_publisher+0x196>
 800c36a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c36e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c372:	2105      	movs	r1, #5
 800c374:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800c378:	1c42      	adds	r2, r0, #1
 800c37a:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800c37e:	f002 f925 	bl	800e5cc <uxr_object_id>
 800c382:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800c386:	6160      	str	r0, [r4, #20]
 800c388:	691e      	ldr	r6, [r3, #16]
 800c38a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c38e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800c392:	f10d 0a10 	add.w	sl, sp, #16
 800c396:	4641      	mov	r1, r8
 800c398:	4650      	mov	r0, sl
 800c39a:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800c39e:	f000 fd31 	bl	800ce04 <convert_qos_profile>
 800c3a2:	9503      	str	r5, [sp, #12]
 800c3a4:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800c3a8:	9001      	str	r0, [sp, #4]
 800c3aa:	f8ad 1008 	strh.w	r1, [sp, #8]
 800c3ae:	f8db 3010 	ldr.w	r3, [fp, #16]
 800c3b2:	9300      	str	r3, [sp, #0]
 800c3b4:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800c3b8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800c3bc:	f8d8 1000 	ldr.w	r1, [r8]
 800c3c0:	4630      	mov	r0, r6
 800c3c2:	f001 ff53 	bl	800e26c <uxr_buffer_create_datawriter_bin>
 800c3c6:	4602      	mov	r2, r0
 800c3c8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c3cc:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c3d0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c3d4:	f000 fcfa 	bl	800cdcc <run_xrce_session>
 800c3d8:	b938      	cbnz	r0, 800c3ea <rmw_create_publisher+0x1a6>
 800c3da:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c3dc:	b108      	cbz	r0, 800c3e2 <rmw_create_publisher+0x19e>
 800c3de:	f000 fbf5 	bl	800cbcc <rmw_uxrce_fini_topic_memory>
 800c3e2:	4638      	mov	r0, r7
 800c3e4:	f000 fb9a 	bl	800cb1c <rmw_uxrce_fini_publisher_memory>
 800c3e8:	2700      	movs	r7, #0
 800c3ea:	4638      	mov	r0, r7
 800c3ec:	b007      	add	sp, #28
 800c3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3f2:	bf00      	nop
 800c3f4:	2000ab34 	.word	0x2000ab34
 800c3f8:	08018c88 	.word	0x08018c88
 800c3fc:	08018c54 	.word	0x08018c54

0800c400 <rmw_publisher_get_actual_qos>:
 800c400:	b150      	cbz	r0, 800c418 <rmw_publisher_get_actual_qos+0x18>
 800c402:	b508      	push	{r3, lr}
 800c404:	460b      	mov	r3, r1
 800c406:	b149      	cbz	r1, 800c41c <rmw_publisher_get_actual_qos+0x1c>
 800c408:	6841      	ldr	r1, [r0, #4]
 800c40a:	2250      	movs	r2, #80	@ 0x50
 800c40c:	3128      	adds	r1, #40	@ 0x28
 800c40e:	4618      	mov	r0, r3
 800c410:	f00b fbdb 	bl	8017bca <memcpy>
 800c414:	2000      	movs	r0, #0
 800c416:	bd08      	pop	{r3, pc}
 800c418:	200b      	movs	r0, #11
 800c41a:	4770      	bx	lr
 800c41c:	200b      	movs	r0, #11
 800c41e:	bd08      	pop	{r3, pc}

0800c420 <rmw_destroy_publisher>:
 800c420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c422:	b128      	cbz	r0, 800c430 <rmw_destroy_publisher+0x10>
 800c424:	4604      	mov	r4, r0
 800c426:	6800      	ldr	r0, [r0, #0]
 800c428:	460d      	mov	r5, r1
 800c42a:	f000 fd4f 	bl	800cecc <is_uxrce_rmw_identifier_valid>
 800c42e:	b910      	cbnz	r0, 800c436 <rmw_destroy_publisher+0x16>
 800c430:	2401      	movs	r4, #1
 800c432:	4620      	mov	r0, r4
 800c434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c436:	6863      	ldr	r3, [r4, #4]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d0f9      	beq.n	800c430 <rmw_destroy_publisher+0x10>
 800c43c:	2d00      	cmp	r5, #0
 800c43e:	d0f7      	beq.n	800c430 <rmw_destroy_publisher+0x10>
 800c440:	6828      	ldr	r0, [r5, #0]
 800c442:	f000 fd43 	bl	800cecc <is_uxrce_rmw_identifier_valid>
 800c446:	2800      	cmp	r0, #0
 800c448:	d0f2      	beq.n	800c430 <rmw_destroy_publisher+0x10>
 800c44a:	686c      	ldr	r4, [r5, #4]
 800c44c:	2c00      	cmp	r4, #0
 800c44e:	d0ef      	beq.n	800c430 <rmw_destroy_publisher+0x10>
 800c450:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c452:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800c456:	f009 f889 	bl	801556c <destroy_topic>
 800c45a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800c45e:	6962      	ldr	r2, [r4, #20]
 800c460:	6918      	ldr	r0, [r3, #16]
 800c462:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c466:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c46a:	6819      	ldr	r1, [r3, #0]
 800c46c:	f001 fdea 	bl	800e044 <uxr_buffer_delete_entity>
 800c470:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800c474:	6922      	ldr	r2, [r4, #16]
 800c476:	691b      	ldr	r3, [r3, #16]
 800c478:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800c47c:	4604      	mov	r4, r0
 800c47e:	6809      	ldr	r1, [r1, #0]
 800c480:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800c484:	f001 fdde 	bl	800e044 <uxr_buffer_delete_entity>
 800c488:	693e      	ldr	r6, [r7, #16]
 800c48a:	4622      	mov	r2, r4
 800c48c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800c490:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800c494:	4604      	mov	r4, r0
 800c496:	4630      	mov	r0, r6
 800c498:	f000 fc98 	bl	800cdcc <run_xrce_session>
 800c49c:	693e      	ldr	r6, [r7, #16]
 800c49e:	4622      	mov	r2, r4
 800c4a0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800c4a4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800c4a8:	4604      	mov	r4, r0
 800c4aa:	4630      	mov	r0, r6
 800c4ac:	f000 fc8e 	bl	800cdcc <run_xrce_session>
 800c4b0:	b12c      	cbz	r4, 800c4be <rmw_destroy_publisher+0x9e>
 800c4b2:	b120      	cbz	r0, 800c4be <rmw_destroy_publisher+0x9e>
 800c4b4:	2400      	movs	r4, #0
 800c4b6:	4628      	mov	r0, r5
 800c4b8:	f000 fb30 	bl	800cb1c <rmw_uxrce_fini_publisher_memory>
 800c4bc:	e7b9      	b.n	800c432 <rmw_destroy_publisher+0x12>
 800c4be:	2402      	movs	r4, #2
 800c4c0:	e7f9      	b.n	800c4b6 <rmw_destroy_publisher+0x96>
 800c4c2:	bf00      	nop

0800c4c4 <rmw_destroy_service>:
 800c4c4:	b570      	push	{r4, r5, r6, lr}
 800c4c6:	b128      	cbz	r0, 800c4d4 <rmw_destroy_service+0x10>
 800c4c8:	4604      	mov	r4, r0
 800c4ca:	6800      	ldr	r0, [r0, #0]
 800c4cc:	460d      	mov	r5, r1
 800c4ce:	f000 fcfd 	bl	800cecc <is_uxrce_rmw_identifier_valid>
 800c4d2:	b910      	cbnz	r0, 800c4da <rmw_destroy_service+0x16>
 800c4d4:	2401      	movs	r4, #1
 800c4d6:	4620      	mov	r0, r4
 800c4d8:	bd70      	pop	{r4, r5, r6, pc}
 800c4da:	6863      	ldr	r3, [r4, #4]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d0f9      	beq.n	800c4d4 <rmw_destroy_service+0x10>
 800c4e0:	2d00      	cmp	r5, #0
 800c4e2:	d0f7      	beq.n	800c4d4 <rmw_destroy_service+0x10>
 800c4e4:	6828      	ldr	r0, [r5, #0]
 800c4e6:	f000 fcf1 	bl	800cecc <is_uxrce_rmw_identifier_valid>
 800c4ea:	2800      	cmp	r0, #0
 800c4ec:	d0f2      	beq.n	800c4d4 <rmw_destroy_service+0x10>
 800c4ee:	686e      	ldr	r6, [r5, #4]
 800c4f0:	2e00      	cmp	r6, #0
 800c4f2:	d0ef      	beq.n	800c4d4 <rmw_destroy_service+0x10>
 800c4f4:	6864      	ldr	r4, [r4, #4]
 800c4f6:	6932      	ldr	r2, [r6, #16]
 800c4f8:	6920      	ldr	r0, [r4, #16]
 800c4fa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c4fe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c502:	6819      	ldr	r1, [r3, #0]
 800c504:	f002 f8cc 	bl	800e6a0 <uxr_buffer_cancel_data>
 800c508:	4602      	mov	r2, r0
 800c50a:	6920      	ldr	r0, [r4, #16]
 800c50c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c510:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c514:	f000 fc5a 	bl	800cdcc <run_xrce_session>
 800c518:	6920      	ldr	r0, [r4, #16]
 800c51a:	6932      	ldr	r2, [r6, #16]
 800c51c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c520:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c524:	6819      	ldr	r1, [r3, #0]
 800c526:	f001 fd8d 	bl	800e044 <uxr_buffer_delete_entity>
 800c52a:	4602      	mov	r2, r0
 800c52c:	6920      	ldr	r0, [r4, #16]
 800c52e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c532:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c536:	f000 fc49 	bl	800cdcc <run_xrce_session>
 800c53a:	2800      	cmp	r0, #0
 800c53c:	4628      	mov	r0, r5
 800c53e:	bf14      	ite	ne
 800c540:	2400      	movne	r4, #0
 800c542:	2402      	moveq	r4, #2
 800c544:	f000 fb16 	bl	800cb74 <rmw_uxrce_fini_service_memory>
 800c548:	e7c5      	b.n	800c4d6 <rmw_destroy_service+0x12>
 800c54a:	bf00      	nop

0800c54c <rmw_create_subscription>:
 800c54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c550:	b08d      	sub	sp, #52	@ 0x34
 800c552:	2800      	cmp	r0, #0
 800c554:	f000 80d1 	beq.w	800c6fa <rmw_create_subscription+0x1ae>
 800c558:	460e      	mov	r6, r1
 800c55a:	2900      	cmp	r1, #0
 800c55c:	f000 80cd 	beq.w	800c6fa <rmw_create_subscription+0x1ae>
 800c560:	4604      	mov	r4, r0
 800c562:	6800      	ldr	r0, [r0, #0]
 800c564:	4615      	mov	r5, r2
 800c566:	4698      	mov	r8, r3
 800c568:	f000 fcb0 	bl	800cecc <is_uxrce_rmw_identifier_valid>
 800c56c:	2800      	cmp	r0, #0
 800c56e:	f000 80c4 	beq.w	800c6fa <rmw_create_subscription+0x1ae>
 800c572:	2d00      	cmp	r5, #0
 800c574:	f000 80c1 	beq.w	800c6fa <rmw_create_subscription+0x1ae>
 800c578:	782b      	ldrb	r3, [r5, #0]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	f000 80bd 	beq.w	800c6fa <rmw_create_subscription+0x1ae>
 800c580:	f1b8 0f00 	cmp.w	r8, #0
 800c584:	f000 80b9 	beq.w	800c6fa <rmw_create_subscription+0x1ae>
 800c588:	485e      	ldr	r0, [pc, #376]	@ (800c704 <rmw_create_subscription+0x1b8>)
 800c58a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c58e:	f008 ff2f 	bl	80153f0 <get_memory>
 800c592:	4604      	mov	r4, r0
 800c594:	2800      	cmp	r0, #0
 800c596:	f000 80b1 	beq.w	800c6fc <rmw_create_subscription+0x1b0>
 800c59a:	6887      	ldr	r7, [r0, #8]
 800c59c:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800c5a0:	f008 ff8e 	bl	80154c0 <rmw_get_implementation_identifier>
 800c5a4:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 800c5a8:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800c5aa:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800c5ae:	4628      	mov	r0, r5
 800c5b0:	f7f3 fe40 	bl	8000234 <strlen>
 800c5b4:	3001      	adds	r0, #1
 800c5b6:	283c      	cmp	r0, #60	@ 0x3c
 800c5b8:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800c5bc:	f200 8096 	bhi.w	800c6ec <rmw_create_subscription+0x1a0>
 800c5c0:	4a51      	ldr	r2, [pc, #324]	@ (800c708 <rmw_create_subscription+0x1bc>)
 800c5c2:	462b      	mov	r3, r5
 800c5c4:	213c      	movs	r1, #60	@ 0x3c
 800c5c6:	4650      	mov	r0, sl
 800c5c8:	f00b f95c 	bl	8017884 <sniprintf>
 800c5cc:	4641      	mov	r1, r8
 800c5ce:	f8c7 9020 	str.w	r9, [r7, #32]
 800c5d2:	2250      	movs	r2, #80	@ 0x50
 800c5d4:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800c5d8:	f00b faf7 	bl	8017bca <memcpy>
 800c5dc:	494b      	ldr	r1, [pc, #300]	@ (800c70c <rmw_create_subscription+0x1c0>)
 800c5de:	4630      	mov	r0, r6
 800c5e0:	f000 fc82 	bl	800cee8 <get_message_typesupport_handle>
 800c5e4:	2800      	cmp	r0, #0
 800c5e6:	f000 8081 	beq.w	800c6ec <rmw_create_subscription+0x1a0>
 800c5ea:	6842      	ldr	r2, [r0, #4]
 800c5ec:	61ba      	str	r2, [r7, #24]
 800c5ee:	2a00      	cmp	r2, #0
 800c5f0:	d07c      	beq.n	800c6ec <rmw_create_subscription+0x1a0>
 800c5f2:	4629      	mov	r1, r5
 800c5f4:	4643      	mov	r3, r8
 800c5f6:	4648      	mov	r0, r9
 800c5f8:	f008 ff68 	bl	80154cc <create_topic>
 800c5fc:	61f8      	str	r0, [r7, #28]
 800c5fe:	2800      	cmp	r0, #0
 800c600:	d078      	beq.n	800c6f4 <rmw_create_subscription+0x1a8>
 800c602:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c606:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c60a:	2104      	movs	r1, #4
 800c60c:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 800c610:	1c42      	adds	r2, r0, #1
 800c612:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 800c616:	f001 ffd9 	bl	800e5cc <uxr_object_id>
 800c61a:	6138      	str	r0, [r7, #16]
 800c61c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c620:	2506      	movs	r5, #6
 800c622:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 800c626:	9500      	str	r5, [sp, #0]
 800c628:	6819      	ldr	r1, [r3, #0]
 800c62a:	693a      	ldr	r2, [r7, #16]
 800c62c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c630:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c634:	f001 fdea 	bl	800e20c <uxr_buffer_create_subscriber_bin>
 800c638:	4602      	mov	r2, r0
 800c63a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c63e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c642:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c646:	f000 fbc1 	bl	800cdcc <run_xrce_session>
 800c64a:	2800      	cmp	r0, #0
 800c64c:	d04e      	beq.n	800c6ec <rmw_create_subscription+0x1a0>
 800c64e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c652:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c656:	4629      	mov	r1, r5
 800c658:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 800c65c:	1c42      	adds	r2, r0, #1
 800c65e:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 800c662:	f001 ffb3 	bl	800e5cc <uxr_object_id>
 800c666:	ae08      	add	r6, sp, #32
 800c668:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c66c:	69fb      	ldr	r3, [r7, #28]
 800c66e:	6178      	str	r0, [r7, #20]
 800c670:	4641      	mov	r1, r8
 800c672:	4630      	mov	r0, r6
 800c674:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800c678:	9305      	str	r3, [sp, #20]
 800c67a:	f000 fbc3 	bl	800ce04 <convert_qos_profile>
 800c67e:	9503      	str	r5, [sp, #12]
 800c680:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c684:	9b05      	ldr	r3, [sp, #20]
 800c686:	9001      	str	r0, [sp, #4]
 800c688:	f8ad 1008 	strh.w	r1, [sp, #8]
 800c68c:	691b      	ldr	r3, [r3, #16]
 800c68e:	9300      	str	r3, [sp, #0]
 800c690:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800c694:	f8db 1000 	ldr.w	r1, [fp]
 800c698:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800c69c:	f001 fe5c 	bl	800e358 <uxr_buffer_create_datareader_bin>
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c6a6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c6aa:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c6ae:	f000 fb8d 	bl	800cdcc <run_xrce_session>
 800c6b2:	b1d8      	cbz	r0, 800c6ec <rmw_create_subscription+0x1a0>
 800c6b4:	f898 3008 	ldrb.w	r3, [r8, #8]
 800c6b8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c6bc:	2b02      	cmp	r3, #2
 800c6be:	bf0c      	ite	eq
 800c6c0:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800c6c4:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800c6c8:	9307      	str	r3, [sp, #28]
 800c6ca:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800c6d4:	ab0a      	add	r3, sp, #40	@ 0x28
 800c6d6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c6da:	9300      	str	r3, [sp, #0]
 800c6dc:	697a      	ldr	r2, [r7, #20]
 800c6de:	9b07      	ldr	r3, [sp, #28]
 800c6e0:	6809      	ldr	r1, [r1, #0]
 800c6e2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c6e6:	f001 ffa1 	bl	800e62c <uxr_buffer_request_data>
 800c6ea:	e007      	b.n	800c6fc <rmw_create_subscription+0x1b0>
 800c6ec:	69f8      	ldr	r0, [r7, #28]
 800c6ee:	b108      	cbz	r0, 800c6f4 <rmw_create_subscription+0x1a8>
 800c6f0:	f000 fa6c 	bl	800cbcc <rmw_uxrce_fini_topic_memory>
 800c6f4:	4620      	mov	r0, r4
 800c6f6:	f000 fa27 	bl	800cb48 <rmw_uxrce_fini_subscription_memory>
 800c6fa:	2400      	movs	r4, #0
 800c6fc:	4620      	mov	r0, r4
 800c6fe:	b00d      	add	sp, #52	@ 0x34
 800c700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c704:	2000ab74 	.word	0x2000ab74
 800c708:	08018c88 	.word	0x08018c88
 800c70c:	08018c54 	.word	0x08018c54

0800c710 <rmw_subscription_get_actual_qos>:
 800c710:	b150      	cbz	r0, 800c728 <rmw_subscription_get_actual_qos+0x18>
 800c712:	b508      	push	{r3, lr}
 800c714:	460b      	mov	r3, r1
 800c716:	b149      	cbz	r1, 800c72c <rmw_subscription_get_actual_qos+0x1c>
 800c718:	6841      	ldr	r1, [r0, #4]
 800c71a:	2250      	movs	r2, #80	@ 0x50
 800c71c:	3128      	adds	r1, #40	@ 0x28
 800c71e:	4618      	mov	r0, r3
 800c720:	f00b fa53 	bl	8017bca <memcpy>
 800c724:	2000      	movs	r0, #0
 800c726:	bd08      	pop	{r3, pc}
 800c728:	200b      	movs	r0, #11
 800c72a:	4770      	bx	lr
 800c72c:	200b      	movs	r0, #11
 800c72e:	bd08      	pop	{r3, pc}

0800c730 <rmw_destroy_subscription>:
 800c730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c732:	b128      	cbz	r0, 800c740 <rmw_destroy_subscription+0x10>
 800c734:	4604      	mov	r4, r0
 800c736:	6800      	ldr	r0, [r0, #0]
 800c738:	460d      	mov	r5, r1
 800c73a:	f000 fbc7 	bl	800cecc <is_uxrce_rmw_identifier_valid>
 800c73e:	b910      	cbnz	r0, 800c746 <rmw_destroy_subscription+0x16>
 800c740:	2401      	movs	r4, #1
 800c742:	4620      	mov	r0, r4
 800c744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c746:	6863      	ldr	r3, [r4, #4]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d0f9      	beq.n	800c740 <rmw_destroy_subscription+0x10>
 800c74c:	2d00      	cmp	r5, #0
 800c74e:	d0f7      	beq.n	800c740 <rmw_destroy_subscription+0x10>
 800c750:	6828      	ldr	r0, [r5, #0]
 800c752:	f000 fbbb 	bl	800cecc <is_uxrce_rmw_identifier_valid>
 800c756:	2800      	cmp	r0, #0
 800c758:	d0f2      	beq.n	800c740 <rmw_destroy_subscription+0x10>
 800c75a:	686c      	ldr	r4, [r5, #4]
 800c75c:	2c00      	cmp	r4, #0
 800c75e:	d0ef      	beq.n	800c740 <rmw_destroy_subscription+0x10>
 800c760:	6a26      	ldr	r6, [r4, #32]
 800c762:	6962      	ldr	r2, [r4, #20]
 800c764:	6930      	ldr	r0, [r6, #16]
 800c766:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c76a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c76e:	6819      	ldr	r1, [r3, #0]
 800c770:	f001 ff96 	bl	800e6a0 <uxr_buffer_cancel_data>
 800c774:	4602      	mov	r2, r0
 800c776:	6930      	ldr	r0, [r6, #16]
 800c778:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c77c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c780:	f000 fb24 	bl	800cdcc <run_xrce_session>
 800c784:	69e0      	ldr	r0, [r4, #28]
 800c786:	f008 fef1 	bl	801556c <destroy_topic>
 800c78a:	6a23      	ldr	r3, [r4, #32]
 800c78c:	6962      	ldr	r2, [r4, #20]
 800c78e:	6918      	ldr	r0, [r3, #16]
 800c790:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c794:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c798:	6819      	ldr	r1, [r3, #0]
 800c79a:	f001 fc53 	bl	800e044 <uxr_buffer_delete_entity>
 800c79e:	6a23      	ldr	r3, [r4, #32]
 800c7a0:	6922      	ldr	r2, [r4, #16]
 800c7a2:	691b      	ldr	r3, [r3, #16]
 800c7a4:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800c7a8:	4604      	mov	r4, r0
 800c7aa:	6809      	ldr	r1, [r1, #0]
 800c7ac:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800c7b0:	f001 fc48 	bl	800e044 <uxr_buffer_delete_entity>
 800c7b4:	6937      	ldr	r7, [r6, #16]
 800c7b6:	4622      	mov	r2, r4
 800c7b8:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800c7bc:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800c7c0:	4604      	mov	r4, r0
 800c7c2:	4638      	mov	r0, r7
 800c7c4:	f000 fb02 	bl	800cdcc <run_xrce_session>
 800c7c8:	6936      	ldr	r6, [r6, #16]
 800c7ca:	4622      	mov	r2, r4
 800c7cc:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800c7d0:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800c7d4:	4604      	mov	r4, r0
 800c7d6:	4630      	mov	r0, r6
 800c7d8:	f000 faf8 	bl	800cdcc <run_xrce_session>
 800c7dc:	b12c      	cbz	r4, 800c7ea <rmw_destroy_subscription+0xba>
 800c7de:	b120      	cbz	r0, 800c7ea <rmw_destroy_subscription+0xba>
 800c7e0:	2400      	movs	r4, #0
 800c7e2:	4628      	mov	r0, r5
 800c7e4:	f000 f9b0 	bl	800cb48 <rmw_uxrce_fini_subscription_memory>
 800c7e8:	e7ab      	b.n	800c742 <rmw_destroy_subscription+0x12>
 800c7ea:	2402      	movs	r4, #2
 800c7ec:	e7f9      	b.n	800c7e2 <rmw_destroy_subscription+0xb2>
 800c7ee:	bf00      	nop

0800c7f0 <rmw_uxrce_transport_init>:
 800c7f0:	b508      	push	{r3, lr}
 800c7f2:	b108      	cbz	r0, 800c7f8 <rmw_uxrce_transport_init+0x8>
 800c7f4:	f100 0210 	add.w	r2, r0, #16
 800c7f8:	b139      	cbz	r1, 800c80a <rmw_uxrce_transport_init+0x1a>
 800c7fa:	6949      	ldr	r1, [r1, #20]
 800c7fc:	4610      	mov	r0, r2
 800c7fe:	f001 fead 	bl	800e55c <uxr_init_custom_transport>
 800c802:	f080 0001 	eor.w	r0, r0, #1
 800c806:	b2c0      	uxtb	r0, r0
 800c808:	bd08      	pop	{r3, pc}
 800c80a:	4b04      	ldr	r3, [pc, #16]	@ (800c81c <rmw_uxrce_transport_init+0x2c>)
 800c80c:	4610      	mov	r0, r2
 800c80e:	6859      	ldr	r1, [r3, #4]
 800c810:	f001 fea4 	bl	800e55c <uxr_init_custom_transport>
 800c814:	f080 0001 	eor.w	r0, r0, #1
 800c818:	b2c0      	uxtb	r0, r0
 800c81a:	bd08      	pop	{r3, pc}
 800c81c:	200061fc 	.word	0x200061fc

0800c820 <rmw_uxrce_init_service_memory>:
 800c820:	b1e2      	cbz	r2, 800c85c <rmw_uxrce_init_service_memory+0x3c>
 800c822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c826:	7b05      	ldrb	r5, [r0, #12]
 800c828:	4606      	mov	r6, r0
 800c82a:	b9ad      	cbnz	r5, 800c858 <rmw_uxrce_init_service_memory+0x38>
 800c82c:	23c8      	movs	r3, #200	@ 0xc8
 800c82e:	e9c0 5500 	strd	r5, r5, [r0]
 800c832:	6083      	str	r3, [r0, #8]
 800c834:	f240 1301 	movw	r3, #257	@ 0x101
 800c838:	4617      	mov	r7, r2
 800c83a:	8183      	strh	r3, [r0, #12]
 800c83c:	460c      	mov	r4, r1
 800c83e:	46a8      	mov	r8, r5
 800c840:	4621      	mov	r1, r4
 800c842:	4630      	mov	r0, r6
 800c844:	3501      	adds	r5, #1
 800c846:	f008 fde3 	bl	8015410 <put_memory>
 800c84a:	42af      	cmp	r7, r5
 800c84c:	60a4      	str	r4, [r4, #8]
 800c84e:	f884 800c 	strb.w	r8, [r4, #12]
 800c852:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800c856:	d1f3      	bne.n	800c840 <rmw_uxrce_init_service_memory+0x20>
 800c858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c85c:	4770      	bx	lr
 800c85e:	bf00      	nop

0800c860 <rmw_uxrce_init_client_memory>:
 800c860:	b1e2      	cbz	r2, 800c89c <rmw_uxrce_init_client_memory+0x3c>
 800c862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c866:	7b05      	ldrb	r5, [r0, #12]
 800c868:	4606      	mov	r6, r0
 800c86a:	b9ad      	cbnz	r5, 800c898 <rmw_uxrce_init_client_memory+0x38>
 800c86c:	23c8      	movs	r3, #200	@ 0xc8
 800c86e:	e9c0 5500 	strd	r5, r5, [r0]
 800c872:	6083      	str	r3, [r0, #8]
 800c874:	f240 1301 	movw	r3, #257	@ 0x101
 800c878:	4617      	mov	r7, r2
 800c87a:	8183      	strh	r3, [r0, #12]
 800c87c:	460c      	mov	r4, r1
 800c87e:	46a8      	mov	r8, r5
 800c880:	4621      	mov	r1, r4
 800c882:	4630      	mov	r0, r6
 800c884:	3501      	adds	r5, #1
 800c886:	f008 fdc3 	bl	8015410 <put_memory>
 800c88a:	42af      	cmp	r7, r5
 800c88c:	60a4      	str	r4, [r4, #8]
 800c88e:	f884 800c 	strb.w	r8, [r4, #12]
 800c892:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800c896:	d1f3      	bne.n	800c880 <rmw_uxrce_init_client_memory+0x20>
 800c898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c89c:	4770      	bx	lr
 800c89e:	bf00      	nop

0800c8a0 <rmw_uxrce_init_publisher_memory>:
 800c8a0:	b1e2      	cbz	r2, 800c8dc <rmw_uxrce_init_publisher_memory+0x3c>
 800c8a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8a6:	7b05      	ldrb	r5, [r0, #12]
 800c8a8:	4606      	mov	r6, r0
 800c8aa:	b9ad      	cbnz	r5, 800c8d8 <rmw_uxrce_init_publisher_memory+0x38>
 800c8ac:	23d8      	movs	r3, #216	@ 0xd8
 800c8ae:	e9c0 5500 	strd	r5, r5, [r0]
 800c8b2:	6083      	str	r3, [r0, #8]
 800c8b4:	f240 1301 	movw	r3, #257	@ 0x101
 800c8b8:	4617      	mov	r7, r2
 800c8ba:	8183      	strh	r3, [r0, #12]
 800c8bc:	460c      	mov	r4, r1
 800c8be:	46a8      	mov	r8, r5
 800c8c0:	4621      	mov	r1, r4
 800c8c2:	4630      	mov	r0, r6
 800c8c4:	3501      	adds	r5, #1
 800c8c6:	f008 fda3 	bl	8015410 <put_memory>
 800c8ca:	42af      	cmp	r7, r5
 800c8cc:	60a4      	str	r4, [r4, #8]
 800c8ce:	f884 800c 	strb.w	r8, [r4, #12]
 800c8d2:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800c8d6:	d1f3      	bne.n	800c8c0 <rmw_uxrce_init_publisher_memory+0x20>
 800c8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8dc:	4770      	bx	lr
 800c8de:	bf00      	nop

0800c8e0 <rmw_uxrce_init_subscription_memory>:
 800c8e0:	b1e2      	cbz	r2, 800c91c <rmw_uxrce_init_subscription_memory+0x3c>
 800c8e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8e6:	7b05      	ldrb	r5, [r0, #12]
 800c8e8:	4606      	mov	r6, r0
 800c8ea:	b9ad      	cbnz	r5, 800c918 <rmw_uxrce_init_subscription_memory+0x38>
 800c8ec:	23d8      	movs	r3, #216	@ 0xd8
 800c8ee:	e9c0 5500 	strd	r5, r5, [r0]
 800c8f2:	6083      	str	r3, [r0, #8]
 800c8f4:	f240 1301 	movw	r3, #257	@ 0x101
 800c8f8:	4617      	mov	r7, r2
 800c8fa:	8183      	strh	r3, [r0, #12]
 800c8fc:	460c      	mov	r4, r1
 800c8fe:	46a8      	mov	r8, r5
 800c900:	4621      	mov	r1, r4
 800c902:	4630      	mov	r0, r6
 800c904:	3501      	adds	r5, #1
 800c906:	f008 fd83 	bl	8015410 <put_memory>
 800c90a:	42af      	cmp	r7, r5
 800c90c:	60a4      	str	r4, [r4, #8]
 800c90e:	f884 800c 	strb.w	r8, [r4, #12]
 800c912:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800c916:	d1f3      	bne.n	800c900 <rmw_uxrce_init_subscription_memory+0x20>
 800c918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c91c:	4770      	bx	lr
 800c91e:	bf00      	nop

0800c920 <rmw_uxrce_init_node_memory>:
 800c920:	b1e2      	cbz	r2, 800c95c <rmw_uxrce_init_node_memory+0x3c>
 800c922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c926:	7b05      	ldrb	r5, [r0, #12]
 800c928:	4606      	mov	r6, r0
 800c92a:	b9ad      	cbnz	r5, 800c958 <rmw_uxrce_init_node_memory+0x38>
 800c92c:	23a4      	movs	r3, #164	@ 0xa4
 800c92e:	e9c0 5500 	strd	r5, r5, [r0]
 800c932:	6083      	str	r3, [r0, #8]
 800c934:	f240 1301 	movw	r3, #257	@ 0x101
 800c938:	4617      	mov	r7, r2
 800c93a:	8183      	strh	r3, [r0, #12]
 800c93c:	460c      	mov	r4, r1
 800c93e:	46a8      	mov	r8, r5
 800c940:	4621      	mov	r1, r4
 800c942:	4630      	mov	r0, r6
 800c944:	3501      	adds	r5, #1
 800c946:	f008 fd63 	bl	8015410 <put_memory>
 800c94a:	42af      	cmp	r7, r5
 800c94c:	60a4      	str	r4, [r4, #8]
 800c94e:	f884 800c 	strb.w	r8, [r4, #12]
 800c952:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800c956:	d1f3      	bne.n	800c940 <rmw_uxrce_init_node_memory+0x20>
 800c958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c95c:	4770      	bx	lr
 800c95e:	bf00      	nop

0800c960 <rmw_uxrce_init_session_memory>:
 800c960:	b1ea      	cbz	r2, 800c99e <rmw_uxrce_init_session_memory+0x3e>
 800c962:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c966:	7b05      	ldrb	r5, [r0, #12]
 800c968:	4606      	mov	r6, r0
 800c96a:	b9b5      	cbnz	r5, 800c99a <rmw_uxrce_init_session_memory+0x3a>
 800c96c:	e9c0 5500 	strd	r5, r5, [r0]
 800c970:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800c974:	f240 1301 	movw	r3, #257	@ 0x101
 800c978:	4617      	mov	r7, r2
 800c97a:	f8c0 8008 	str.w	r8, [r0, #8]
 800c97e:	460c      	mov	r4, r1
 800c980:	8183      	strh	r3, [r0, #12]
 800c982:	46a9      	mov	r9, r5
 800c984:	4621      	mov	r1, r4
 800c986:	4630      	mov	r0, r6
 800c988:	3501      	adds	r5, #1
 800c98a:	f008 fd41 	bl	8015410 <put_memory>
 800c98e:	42af      	cmp	r7, r5
 800c990:	60a4      	str	r4, [r4, #8]
 800c992:	f884 900c 	strb.w	r9, [r4, #12]
 800c996:	4444      	add	r4, r8
 800c998:	d1f4      	bne.n	800c984 <rmw_uxrce_init_session_memory+0x24>
 800c99a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c99e:	4770      	bx	lr

0800c9a0 <rmw_uxrce_init_topic_memory>:
 800c9a0:	b1e2      	cbz	r2, 800c9dc <rmw_uxrce_init_topic_memory+0x3c>
 800c9a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9a6:	7b05      	ldrb	r5, [r0, #12]
 800c9a8:	4606      	mov	r6, r0
 800c9aa:	b9ad      	cbnz	r5, 800c9d8 <rmw_uxrce_init_topic_memory+0x38>
 800c9ac:	231c      	movs	r3, #28
 800c9ae:	e9c0 5500 	strd	r5, r5, [r0]
 800c9b2:	6083      	str	r3, [r0, #8]
 800c9b4:	f240 1301 	movw	r3, #257	@ 0x101
 800c9b8:	4617      	mov	r7, r2
 800c9ba:	8183      	strh	r3, [r0, #12]
 800c9bc:	460c      	mov	r4, r1
 800c9be:	46a8      	mov	r8, r5
 800c9c0:	4621      	mov	r1, r4
 800c9c2:	4630      	mov	r0, r6
 800c9c4:	3501      	adds	r5, #1
 800c9c6:	f008 fd23 	bl	8015410 <put_memory>
 800c9ca:	42af      	cmp	r7, r5
 800c9cc:	60a4      	str	r4, [r4, #8]
 800c9ce:	f884 800c 	strb.w	r8, [r4, #12]
 800c9d2:	f104 041c 	add.w	r4, r4, #28
 800c9d6:	d1f3      	bne.n	800c9c0 <rmw_uxrce_init_topic_memory+0x20>
 800c9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9dc:	4770      	bx	lr
 800c9de:	bf00      	nop

0800c9e0 <rmw_uxrce_init_static_input_buffer_memory>:
 800c9e0:	b1ea      	cbz	r2, 800ca1e <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800c9e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9e6:	7b05      	ldrb	r5, [r0, #12]
 800c9e8:	4606      	mov	r6, r0
 800c9ea:	b9b5      	cbnz	r5, 800ca1a <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800c9ec:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800c9f0:	e9c0 5500 	strd	r5, r5, [r0]
 800c9f4:	6083      	str	r3, [r0, #8]
 800c9f6:	f240 1301 	movw	r3, #257	@ 0x101
 800c9fa:	4617      	mov	r7, r2
 800c9fc:	8183      	strh	r3, [r0, #12]
 800c9fe:	460c      	mov	r4, r1
 800ca00:	46a8      	mov	r8, r5
 800ca02:	4621      	mov	r1, r4
 800ca04:	4630      	mov	r0, r6
 800ca06:	3501      	adds	r5, #1
 800ca08:	f008 fd02 	bl	8015410 <put_memory>
 800ca0c:	42af      	cmp	r7, r5
 800ca0e:	60a4      	str	r4, [r4, #8]
 800ca10:	f884 800c 	strb.w	r8, [r4, #12]
 800ca14:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800ca18:	d1f3      	bne.n	800ca02 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800ca1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca1e:	4770      	bx	lr

0800ca20 <rmw_uxrce_init_init_options_impl_memory>:
 800ca20:	b1e2      	cbz	r2, 800ca5c <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800ca22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca26:	7b05      	ldrb	r5, [r0, #12]
 800ca28:	4606      	mov	r6, r0
 800ca2a:	b9ad      	cbnz	r5, 800ca58 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800ca2c:	232c      	movs	r3, #44	@ 0x2c
 800ca2e:	e9c0 5500 	strd	r5, r5, [r0]
 800ca32:	6083      	str	r3, [r0, #8]
 800ca34:	f240 1301 	movw	r3, #257	@ 0x101
 800ca38:	4617      	mov	r7, r2
 800ca3a:	8183      	strh	r3, [r0, #12]
 800ca3c:	460c      	mov	r4, r1
 800ca3e:	46a8      	mov	r8, r5
 800ca40:	4621      	mov	r1, r4
 800ca42:	4630      	mov	r0, r6
 800ca44:	3501      	adds	r5, #1
 800ca46:	f008 fce3 	bl	8015410 <put_memory>
 800ca4a:	42af      	cmp	r7, r5
 800ca4c:	60a4      	str	r4, [r4, #8]
 800ca4e:	f884 800c 	strb.w	r8, [r4, #12]
 800ca52:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800ca56:	d1f3      	bne.n	800ca40 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800ca58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca5c:	4770      	bx	lr
 800ca5e:	bf00      	nop

0800ca60 <rmw_uxrce_init_wait_set_memory>:
 800ca60:	b1e2      	cbz	r2, 800ca9c <rmw_uxrce_init_wait_set_memory+0x3c>
 800ca62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca66:	7b05      	ldrb	r5, [r0, #12]
 800ca68:	4606      	mov	r6, r0
 800ca6a:	b9ad      	cbnz	r5, 800ca98 <rmw_uxrce_init_wait_set_memory+0x38>
 800ca6c:	231c      	movs	r3, #28
 800ca6e:	e9c0 5500 	strd	r5, r5, [r0]
 800ca72:	6083      	str	r3, [r0, #8]
 800ca74:	f240 1301 	movw	r3, #257	@ 0x101
 800ca78:	4617      	mov	r7, r2
 800ca7a:	8183      	strh	r3, [r0, #12]
 800ca7c:	460c      	mov	r4, r1
 800ca7e:	46a8      	mov	r8, r5
 800ca80:	4621      	mov	r1, r4
 800ca82:	4630      	mov	r0, r6
 800ca84:	3501      	adds	r5, #1
 800ca86:	f008 fcc3 	bl	8015410 <put_memory>
 800ca8a:	42af      	cmp	r7, r5
 800ca8c:	60a4      	str	r4, [r4, #8]
 800ca8e:	f884 800c 	strb.w	r8, [r4, #12]
 800ca92:	f104 041c 	add.w	r4, r4, #28
 800ca96:	d1f3      	bne.n	800ca80 <rmw_uxrce_init_wait_set_memory+0x20>
 800ca98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca9c:	4770      	bx	lr
 800ca9e:	bf00      	nop

0800caa0 <rmw_uxrce_init_guard_condition_memory>:
 800caa0:	b1e2      	cbz	r2, 800cadc <rmw_uxrce_init_guard_condition_memory+0x3c>
 800caa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caa6:	7b05      	ldrb	r5, [r0, #12]
 800caa8:	4606      	mov	r6, r0
 800caaa:	b9ad      	cbnz	r5, 800cad8 <rmw_uxrce_init_guard_condition_memory+0x38>
 800caac:	2320      	movs	r3, #32
 800caae:	e9c0 5500 	strd	r5, r5, [r0]
 800cab2:	6083      	str	r3, [r0, #8]
 800cab4:	f240 1301 	movw	r3, #257	@ 0x101
 800cab8:	4617      	mov	r7, r2
 800caba:	8183      	strh	r3, [r0, #12]
 800cabc:	460c      	mov	r4, r1
 800cabe:	46a8      	mov	r8, r5
 800cac0:	4621      	mov	r1, r4
 800cac2:	4630      	mov	r0, r6
 800cac4:	3501      	adds	r5, #1
 800cac6:	f008 fca3 	bl	8015410 <put_memory>
 800caca:	42af      	cmp	r7, r5
 800cacc:	60a4      	str	r4, [r4, #8]
 800cace:	f884 800c 	strb.w	r8, [r4, #12]
 800cad2:	f104 0420 	add.w	r4, r4, #32
 800cad6:	d1f3      	bne.n	800cac0 <rmw_uxrce_init_guard_condition_memory+0x20>
 800cad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cadc:	4770      	bx	lr
 800cade:	bf00      	nop

0800cae0 <rmw_uxrce_fini_session_memory>:
 800cae0:	4601      	mov	r1, r0
 800cae2:	4801      	ldr	r0, [pc, #4]	@ (800cae8 <rmw_uxrce_fini_session_memory+0x8>)
 800cae4:	f008 bc94 	b.w	8015410 <put_memory>
 800cae8:	2000ab54 	.word	0x2000ab54

0800caec <rmw_uxrce_fini_node_memory>:
 800caec:	b538      	push	{r3, r4, r5, lr}
 800caee:	4604      	mov	r4, r0
 800caf0:	6800      	ldr	r0, [r0, #0]
 800caf2:	b128      	cbz	r0, 800cb00 <rmw_uxrce_fini_node_memory+0x14>
 800caf4:	4b07      	ldr	r3, [pc, #28]	@ (800cb14 <rmw_uxrce_fini_node_memory+0x28>)
 800caf6:	6819      	ldr	r1, [r3, #0]
 800caf8:	f7f3 fb92 	bl	8000220 <strcmp>
 800cafc:	b940      	cbnz	r0, 800cb10 <rmw_uxrce_fini_node_memory+0x24>
 800cafe:	6020      	str	r0, [r4, #0]
 800cb00:	6861      	ldr	r1, [r4, #4]
 800cb02:	b129      	cbz	r1, 800cb10 <rmw_uxrce_fini_node_memory+0x24>
 800cb04:	2500      	movs	r5, #0
 800cb06:	4804      	ldr	r0, [pc, #16]	@ (800cb18 <rmw_uxrce_fini_node_memory+0x2c>)
 800cb08:	610d      	str	r5, [r1, #16]
 800cb0a:	f008 fc81 	bl	8015410 <put_memory>
 800cb0e:	6065      	str	r5, [r4, #4]
 800cb10:	bd38      	pop	{r3, r4, r5, pc}
 800cb12:	bf00      	nop
 800cb14:	080195a0 	.word	0x080195a0
 800cb18:	2000ab24 	.word	0x2000ab24

0800cb1c <rmw_uxrce_fini_publisher_memory>:
 800cb1c:	b510      	push	{r4, lr}
 800cb1e:	4604      	mov	r4, r0
 800cb20:	6800      	ldr	r0, [r0, #0]
 800cb22:	b128      	cbz	r0, 800cb30 <rmw_uxrce_fini_publisher_memory+0x14>
 800cb24:	4b06      	ldr	r3, [pc, #24]	@ (800cb40 <rmw_uxrce_fini_publisher_memory+0x24>)
 800cb26:	6819      	ldr	r1, [r3, #0]
 800cb28:	f7f3 fb7a 	bl	8000220 <strcmp>
 800cb2c:	b938      	cbnz	r0, 800cb3e <rmw_uxrce_fini_publisher_memory+0x22>
 800cb2e:	6020      	str	r0, [r4, #0]
 800cb30:	6861      	ldr	r1, [r4, #4]
 800cb32:	b121      	cbz	r1, 800cb3e <rmw_uxrce_fini_publisher_memory+0x22>
 800cb34:	4803      	ldr	r0, [pc, #12]	@ (800cb44 <rmw_uxrce_fini_publisher_memory+0x28>)
 800cb36:	f008 fc6b 	bl	8015410 <put_memory>
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	6063      	str	r3, [r4, #4]
 800cb3e:	bd10      	pop	{r4, pc}
 800cb40:	080195a0 	.word	0x080195a0
 800cb44:	2000ab34 	.word	0x2000ab34

0800cb48 <rmw_uxrce_fini_subscription_memory>:
 800cb48:	b510      	push	{r4, lr}
 800cb4a:	4604      	mov	r4, r0
 800cb4c:	6800      	ldr	r0, [r0, #0]
 800cb4e:	b128      	cbz	r0, 800cb5c <rmw_uxrce_fini_subscription_memory+0x14>
 800cb50:	4b06      	ldr	r3, [pc, #24]	@ (800cb6c <rmw_uxrce_fini_subscription_memory+0x24>)
 800cb52:	6819      	ldr	r1, [r3, #0]
 800cb54:	f7f3 fb64 	bl	8000220 <strcmp>
 800cb58:	b938      	cbnz	r0, 800cb6a <rmw_uxrce_fini_subscription_memory+0x22>
 800cb5a:	6020      	str	r0, [r4, #0]
 800cb5c:	6861      	ldr	r1, [r4, #4]
 800cb5e:	b121      	cbz	r1, 800cb6a <rmw_uxrce_fini_subscription_memory+0x22>
 800cb60:	4803      	ldr	r0, [pc, #12]	@ (800cb70 <rmw_uxrce_fini_subscription_memory+0x28>)
 800cb62:	f008 fc55 	bl	8015410 <put_memory>
 800cb66:	2300      	movs	r3, #0
 800cb68:	6063      	str	r3, [r4, #4]
 800cb6a:	bd10      	pop	{r4, pc}
 800cb6c:	080195a0 	.word	0x080195a0
 800cb70:	2000ab74 	.word	0x2000ab74

0800cb74 <rmw_uxrce_fini_service_memory>:
 800cb74:	b510      	push	{r4, lr}
 800cb76:	4604      	mov	r4, r0
 800cb78:	6800      	ldr	r0, [r0, #0]
 800cb7a:	b128      	cbz	r0, 800cb88 <rmw_uxrce_fini_service_memory+0x14>
 800cb7c:	4b06      	ldr	r3, [pc, #24]	@ (800cb98 <rmw_uxrce_fini_service_memory+0x24>)
 800cb7e:	6819      	ldr	r1, [r3, #0]
 800cb80:	f7f3 fb4e 	bl	8000220 <strcmp>
 800cb84:	b938      	cbnz	r0, 800cb96 <rmw_uxrce_fini_service_memory+0x22>
 800cb86:	6020      	str	r0, [r4, #0]
 800cb88:	6861      	ldr	r1, [r4, #4]
 800cb8a:	b121      	cbz	r1, 800cb96 <rmw_uxrce_fini_service_memory+0x22>
 800cb8c:	4803      	ldr	r0, [pc, #12]	@ (800cb9c <rmw_uxrce_fini_service_memory+0x28>)
 800cb8e:	f008 fc3f 	bl	8015410 <put_memory>
 800cb92:	2300      	movs	r3, #0
 800cb94:	6063      	str	r3, [r4, #4]
 800cb96:	bd10      	pop	{r4, pc}
 800cb98:	080195a0 	.word	0x080195a0
 800cb9c:	2000ab44 	.word	0x2000ab44

0800cba0 <rmw_uxrce_fini_client_memory>:
 800cba0:	b510      	push	{r4, lr}
 800cba2:	4604      	mov	r4, r0
 800cba4:	6800      	ldr	r0, [r0, #0]
 800cba6:	b128      	cbz	r0, 800cbb4 <rmw_uxrce_fini_client_memory+0x14>
 800cba8:	4b06      	ldr	r3, [pc, #24]	@ (800cbc4 <rmw_uxrce_fini_client_memory+0x24>)
 800cbaa:	6819      	ldr	r1, [r3, #0]
 800cbac:	f7f3 fb38 	bl	8000220 <strcmp>
 800cbb0:	b938      	cbnz	r0, 800cbc2 <rmw_uxrce_fini_client_memory+0x22>
 800cbb2:	6020      	str	r0, [r4, #0]
 800cbb4:	6861      	ldr	r1, [r4, #4]
 800cbb6:	b121      	cbz	r1, 800cbc2 <rmw_uxrce_fini_client_memory+0x22>
 800cbb8:	4803      	ldr	r0, [pc, #12]	@ (800cbc8 <rmw_uxrce_fini_client_memory+0x28>)
 800cbba:	f008 fc29 	bl	8015410 <put_memory>
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	6063      	str	r3, [r4, #4]
 800cbc2:	bd10      	pop	{r4, pc}
 800cbc4:	080195a0 	.word	0x080195a0
 800cbc8:	20006254 	.word	0x20006254

0800cbcc <rmw_uxrce_fini_topic_memory>:
 800cbcc:	b510      	push	{r4, lr}
 800cbce:	4604      	mov	r4, r0
 800cbd0:	4621      	mov	r1, r4
 800cbd2:	4803      	ldr	r0, [pc, #12]	@ (800cbe0 <rmw_uxrce_fini_topic_memory+0x14>)
 800cbd4:	f008 fc1c 	bl	8015410 <put_memory>
 800cbd8:	2300      	movs	r3, #0
 800cbda:	61a3      	str	r3, [r4, #24]
 800cbdc:	bd10      	pop	{r4, pc}
 800cbde:	bf00      	nop
 800cbe0:	2000ab84 	.word	0x2000ab84

0800cbe4 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800cbe4:	b082      	sub	sp, #8
 800cbe6:	b530      	push	{r4, r5, lr}
 800cbe8:	4925      	ldr	r1, [pc, #148]	@ (800cc80 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800cbea:	680d      	ldr	r5, [r1, #0]
 800cbec:	ac03      	add	r4, sp, #12
 800cbee:	e884 000c 	stmia.w	r4, {r2, r3}
 800cbf2:	461c      	mov	r4, r3
 800cbf4:	2d00      	cmp	r5, #0
 800cbf6:	d041      	beq.n	800cc7c <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800cbf8:	462b      	mov	r3, r5
 800cbfa:	2100      	movs	r1, #0
 800cbfc:	689a      	ldr	r2, [r3, #8]
 800cbfe:	685b      	ldr	r3, [r3, #4]
 800cc00:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800cc04:	4290      	cmp	r0, r2
 800cc06:	bf08      	it	eq
 800cc08:	3101      	addeq	r1, #1
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d1f6      	bne.n	800cbfc <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800cc0e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800cc12:	2b02      	cmp	r3, #2
 800cc14:	d029      	beq.n	800cc6a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800cc16:	d907      	bls.n	800cc28 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800cc18:	2b03      	cmp	r3, #3
 800cc1a:	d005      	beq.n	800cc28 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800cc1c:	2100      	movs	r1, #0
 800cc1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc22:	4608      	mov	r0, r1
 800cc24:	b002      	add	sp, #8
 800cc26:	4770      	bx	lr
 800cc28:	b314      	cbz	r4, 800cc70 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800cc2a:	428c      	cmp	r4, r1
 800cc2c:	d820      	bhi.n	800cc70 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800cc2e:	2d00      	cmp	r5, #0
 800cc30:	d0f4      	beq.n	800cc1c <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800cc32:	2100      	movs	r1, #0
 800cc34:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800cc38:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800cc3c:	e002      	b.n	800cc44 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800cc3e:	686d      	ldr	r5, [r5, #4]
 800cc40:	2d00      	cmp	r5, #0
 800cc42:	d0ec      	beq.n	800cc1e <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800cc44:	68ab      	ldr	r3, [r5, #8]
 800cc46:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800cc4a:	4290      	cmp	r0, r2
 800cc4c:	d1f7      	bne.n	800cc3e <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800cc4e:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800cc52:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800cc56:	4562      	cmp	r2, ip
 800cc58:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800cc5c:	eb73 0e04 	sbcs.w	lr, r3, r4
 800cc60:	daed      	bge.n	800cc3e <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800cc62:	4694      	mov	ip, r2
 800cc64:	461c      	mov	r4, r3
 800cc66:	4629      	mov	r1, r5
 800cc68:	e7e9      	b.n	800cc3e <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800cc6a:	b10c      	cbz	r4, 800cc70 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800cc6c:	428c      	cmp	r4, r1
 800cc6e:	d9d5      	bls.n	800cc1c <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800cc70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc74:	4802      	ldr	r0, [pc, #8]	@ (800cc80 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800cc76:	b002      	add	sp, #8
 800cc78:	f008 bbba 	b.w	80153f0 <get_memory>
 800cc7c:	4629      	mov	r1, r5
 800cc7e:	e7c6      	b.n	800cc0e <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800cc80:	2000ab64 	.word	0x2000ab64

0800cc84 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800cc84:	4b11      	ldr	r3, [pc, #68]	@ (800cccc <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	b530      	push	{r4, r5, lr}
 800cc8a:	b1e3      	cbz	r3, 800ccc6 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800cc8c:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800cc90:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800cc94:	2400      	movs	r4, #0
 800cc96:	e001      	b.n	800cc9c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800cc98:	685b      	ldr	r3, [r3, #4]
 800cc9a:	b193      	cbz	r3, 800ccc2 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800cc9c:	689a      	ldr	r2, [r3, #8]
 800cc9e:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800cca2:	4288      	cmp	r0, r1
 800cca4:	d1f8      	bne.n	800cc98 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800cca6:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800ccaa:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800ccae:	4571      	cmp	r1, lr
 800ccb0:	eb72 050c 	sbcs.w	r5, r2, ip
 800ccb4:	daf0      	bge.n	800cc98 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800ccb6:	461c      	mov	r4, r3
 800ccb8:	685b      	ldr	r3, [r3, #4]
 800ccba:	468e      	mov	lr, r1
 800ccbc:	4694      	mov	ip, r2
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d1ec      	bne.n	800cc9c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800ccc2:	4620      	mov	r0, r4
 800ccc4:	bd30      	pop	{r4, r5, pc}
 800ccc6:	461c      	mov	r4, r3
 800ccc8:	4620      	mov	r0, r4
 800ccca:	bd30      	pop	{r4, r5, pc}
 800cccc:	2000ab64 	.word	0x2000ab64

0800ccd0 <rmw_uxrce_clean_expired_static_input_buffer>:
 800ccd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccd4:	4b3c      	ldr	r3, [pc, #240]	@ (800cdc8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800ccd6:	ed2d 8b06 	vpush	{d8-d10}
 800ccda:	681f      	ldr	r7, [r3, #0]
 800ccdc:	b08d      	sub	sp, #52	@ 0x34
 800ccde:	f008 ffa3 	bl	8015c28 <rmw_uros_epoch_nanos>
 800cce2:	2f00      	cmp	r7, #0
 800cce4:	d05d      	beq.n	800cda2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800cce6:	46b8      	mov	r8, r7
 800cce8:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800cdb0 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800ccec:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800ccf0:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800ccf4:	2b04      	cmp	r3, #4
 800ccf6:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800cdb8 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800ccfa:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800cdc0 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800ccfe:	4681      	mov	r9, r0
 800cd00:	468a      	mov	sl, r1
 800cd02:	ac04      	add	r4, sp, #16
 800cd04:	d03f      	beq.n	800cd86 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800cd06:	2b05      	cmp	r3, #5
 800cd08:	d044      	beq.n	800cd94 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800cd0a:	2b03      	cmp	r3, #3
 800cd0c:	d03b      	beq.n	800cd86 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800cd0e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800cd12:	ed8d ab06 	vstr	d10, [sp, #24]
 800cd16:	ed8d 8b08 	vstr	d8, [sp, #32]
 800cd1a:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800cd1e:	ab08      	add	r3, sp, #32
 800cd20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cd22:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800cd26:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800cd2a:	f008 f8ad 	bl	8014e88 <rmw_time_equal>
 800cd2e:	b118      	cbz	r0, 800cd38 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800cd30:	ed8d 9b04 	vstr	d9, [sp, #16]
 800cd34:	ed8d 8b06 	vstr	d8, [sp, #24]
 800cd38:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800cd3c:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800cd40:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800cd44:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800cd48:	f008 f8f2 	bl	8014f30 <rmw_time_total_nsec>
 800cd4c:	1830      	adds	r0, r6, r0
 800cd4e:	eb47 0101 	adc.w	r1, r7, r1
 800cd52:	4548      	cmp	r0, r9
 800cd54:	eb71 030a 	sbcs.w	r3, r1, sl
 800cd58:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800cd5c:	db05      	blt.n	800cd6a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800cd5e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800cd62:	4591      	cmp	r9, r2
 800cd64:	eb7a 0303 	sbcs.w	r3, sl, r3
 800cd68:	da03      	bge.n	800cd72 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800cd6a:	4817      	ldr	r0, [pc, #92]	@ (800cdc8 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800cd6c:	4641      	mov	r1, r8
 800cd6e:	f008 fb4f 	bl	8015410 <put_memory>
 800cd72:	f1bb 0f00 	cmp.w	fp, #0
 800cd76:	d014      	beq.n	800cda2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800cd78:	46d8      	mov	r8, fp
 800cd7a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800cd7e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800cd82:	2b04      	cmp	r3, #4
 800cd84:	d1bf      	bne.n	800cd06 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800cd86:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800cd8a:	3340      	adds	r3, #64	@ 0x40
 800cd8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cd8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cd92:	e7c0      	b.n	800cd16 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800cd94:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800cd98:	3348      	adds	r3, #72	@ 0x48
 800cd9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cd9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cda0:	e7b9      	b.n	800cd16 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800cda2:	b00d      	add	sp, #52	@ 0x34
 800cda4:	ecbd 8b06 	vpop	{d8-d10}
 800cda8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdac:	f3af 8000 	nop.w
	...
 800cdb8:	00000001 	.word	0x00000001
 800cdbc:	00000000 	.word	0x00000000
 800cdc0:	0000001e 	.word	0x0000001e
 800cdc4:	00000000 	.word	0x00000000
 800cdc8:	2000ab64 	.word	0x2000ab64

0800cdcc <run_xrce_session>:
 800cdcc:	b510      	push	{r4, lr}
 800cdce:	788c      	ldrb	r4, [r1, #2]
 800cdd0:	b086      	sub	sp, #24
 800cdd2:	2c01      	cmp	r4, #1
 800cdd4:	f8ad 200e 	strh.w	r2, [sp, #14]
 800cdd8:	d00c      	beq.n	800cdf4 <run_xrce_session+0x28>
 800cdda:	4619      	mov	r1, r3
 800cddc:	2301      	movs	r3, #1
 800cdde:	9300      	str	r3, [sp, #0]
 800cde0:	f10d 020e 	add.w	r2, sp, #14
 800cde4:	f10d 0317 	add.w	r3, sp, #23
 800cde8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cdec:	f002 fa52 	bl	800f294 <uxr_run_session_until_all_status>
 800cdf0:	b006      	add	sp, #24
 800cdf2:	bd10      	pop	{r4, pc}
 800cdf4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cdf8:	f001 fe66 	bl	800eac8 <uxr_flash_output_streams>
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	b006      	add	sp, #24
 800ce00:	bd10      	pop	{r4, pc}
 800ce02:	bf00      	nop

0800ce04 <convert_qos_profile>:
 800ce04:	7a4a      	ldrb	r2, [r1, #9]
 800ce06:	f891 c008 	ldrb.w	ip, [r1, #8]
 800ce0a:	2a02      	cmp	r2, #2
 800ce0c:	bf18      	it	ne
 800ce0e:	2200      	movne	r2, #0
 800ce10:	7002      	strb	r2, [r0, #0]
 800ce12:	780a      	ldrb	r2, [r1, #0]
 800ce14:	8889      	ldrh	r1, [r1, #4]
 800ce16:	8081      	strh	r1, [r0, #4]
 800ce18:	f1ac 0c02 	sub.w	ip, ip, #2
 800ce1c:	f1a2 0202 	sub.w	r2, r2, #2
 800ce20:	fabc fc8c 	clz	ip, ip
 800ce24:	fab2 f282 	clz	r2, r2
 800ce28:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800ce2c:	0952      	lsrs	r2, r2, #5
 800ce2e:	f880 c001 	strb.w	ip, [r0, #1]
 800ce32:	7082      	strb	r2, [r0, #2]
 800ce34:	4770      	bx	lr
 800ce36:	bf00      	nop

0800ce38 <generate_type_name>:
 800ce38:	b530      	push	{r4, r5, lr}
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	700b      	strb	r3, [r1, #0]
 800ce3e:	6803      	ldr	r3, [r0, #0]
 800ce40:	b087      	sub	sp, #28
 800ce42:	4614      	mov	r4, r2
 800ce44:	b1d3      	cbz	r3, 800ce7c <generate_type_name+0x44>
 800ce46:	4a0f      	ldr	r2, [pc, #60]	@ (800ce84 <generate_type_name+0x4c>)
 800ce48:	4615      	mov	r5, r2
 800ce4a:	9203      	str	r2, [sp, #12]
 800ce4c:	9500      	str	r5, [sp, #0]
 800ce4e:	6842      	ldr	r2, [r0, #4]
 800ce50:	480d      	ldr	r0, [pc, #52]	@ (800ce88 <generate_type_name+0x50>)
 800ce52:	9001      	str	r0, [sp, #4]
 800ce54:	4608      	mov	r0, r1
 800ce56:	490d      	ldr	r1, [pc, #52]	@ (800ce8c <generate_type_name+0x54>)
 800ce58:	9204      	str	r2, [sp, #16]
 800ce5a:	9105      	str	r1, [sp, #20]
 800ce5c:	9102      	str	r1, [sp, #8]
 800ce5e:	4a0c      	ldr	r2, [pc, #48]	@ (800ce90 <generate_type_name+0x58>)
 800ce60:	4621      	mov	r1, r4
 800ce62:	f00a fd0f 	bl	8017884 <sniprintf>
 800ce66:	2800      	cmp	r0, #0
 800ce68:	db05      	blt.n	800ce76 <generate_type_name+0x3e>
 800ce6a:	4284      	cmp	r4, r0
 800ce6c:	bfd4      	ite	le
 800ce6e:	2000      	movle	r0, #0
 800ce70:	2001      	movgt	r0, #1
 800ce72:	b007      	add	sp, #28
 800ce74:	bd30      	pop	{r4, r5, pc}
 800ce76:	2000      	movs	r0, #0
 800ce78:	b007      	add	sp, #28
 800ce7a:	bd30      	pop	{r4, r5, pc}
 800ce7c:	4b05      	ldr	r3, [pc, #20]	@ (800ce94 <generate_type_name+0x5c>)
 800ce7e:	4a01      	ldr	r2, [pc, #4]	@ (800ce84 <generate_type_name+0x4c>)
 800ce80:	461d      	mov	r5, r3
 800ce82:	e7e2      	b.n	800ce4a <generate_type_name+0x12>
 800ce84:	08018c78 	.word	0x08018c78
 800ce88:	08018c90 	.word	0x08018c90
 800ce8c:	08018c8c 	.word	0x08018c8c
 800ce90:	08018c7c 	.word	0x08018c7c
 800ce94:	08019378 	.word	0x08019378

0800ce98 <generate_topic_name>:
 800ce98:	b510      	push	{r4, lr}
 800ce9a:	b082      	sub	sp, #8
 800ce9c:	4614      	mov	r4, r2
 800ce9e:	9000      	str	r0, [sp, #0]
 800cea0:	4b08      	ldr	r3, [pc, #32]	@ (800cec4 <generate_topic_name+0x2c>)
 800cea2:	4a09      	ldr	r2, [pc, #36]	@ (800cec8 <generate_topic_name+0x30>)
 800cea4:	4608      	mov	r0, r1
 800cea6:	4621      	mov	r1, r4
 800cea8:	f00a fcec 	bl	8017884 <sniprintf>
 800ceac:	2800      	cmp	r0, #0
 800ceae:	db05      	blt.n	800cebc <generate_topic_name+0x24>
 800ceb0:	4284      	cmp	r4, r0
 800ceb2:	bfd4      	ite	le
 800ceb4:	2000      	movle	r0, #0
 800ceb6:	2001      	movgt	r0, #1
 800ceb8:	b002      	add	sp, #8
 800ceba:	bd10      	pop	{r4, pc}
 800cebc:	2000      	movs	r0, #0
 800cebe:	b002      	add	sp, #8
 800cec0:	bd10      	pop	{r4, pc}
 800cec2:	bf00      	nop
 800cec4:	08018c9c 	.word	0x08018c9c
 800cec8:	08018c94 	.word	0x08018c94

0800cecc <is_uxrce_rmw_identifier_valid>:
 800cecc:	b510      	push	{r4, lr}
 800cece:	4604      	mov	r4, r0
 800ced0:	b140      	cbz	r0, 800cee4 <is_uxrce_rmw_identifier_valid+0x18>
 800ced2:	f008 faf5 	bl	80154c0 <rmw_get_implementation_identifier>
 800ced6:	4601      	mov	r1, r0
 800ced8:	4620      	mov	r0, r4
 800ceda:	f7f3 f9a1 	bl	8000220 <strcmp>
 800cede:	fab0 f080 	clz	r0, r0
 800cee2:	0940      	lsrs	r0, r0, #5
 800cee4:	bd10      	pop	{r4, pc}
 800cee6:	bf00      	nop

0800cee8 <get_message_typesupport_handle>:
 800cee8:	6883      	ldr	r3, [r0, #8]
 800ceea:	4718      	bx	r3

0800ceec <get_message_typesupport_handle_function>:
 800ceec:	b510      	push	{r4, lr}
 800ceee:	4604      	mov	r4, r0
 800cef0:	6800      	ldr	r0, [r0, #0]
 800cef2:	f7f3 f995 	bl	8000220 <strcmp>
 800cef6:	2800      	cmp	r0, #0
 800cef8:	bf0c      	ite	eq
 800cefa:	4620      	moveq	r0, r4
 800cefc:	2000      	movne	r0, #0
 800cefe:	bd10      	pop	{r4, pc}

0800cf00 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800cf00:	4b04      	ldr	r3, [pc, #16]	@ (800cf14 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800cf02:	681a      	ldr	r2, [r3, #0]
 800cf04:	b10a      	cbz	r2, 800cf0a <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800cf06:	4803      	ldr	r0, [pc, #12]	@ (800cf14 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800cf08:	4770      	bx	lr
 800cf0a:	4a03      	ldr	r2, [pc, #12]	@ (800cf18 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800cf0c:	4801      	ldr	r0, [pc, #4]	@ (800cf14 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800cf0e:	6812      	ldr	r2, [r2, #0]
 800cf10:	601a      	str	r2, [r3, #0]
 800cf12:	4770      	bx	lr
 800cf14:	20000038 	.word	0x20000038
 800cf18:	200000b4 	.word	0x200000b4

0800cf1c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800cf1c:	4a02      	ldr	r2, [pc, #8]	@ (800cf28 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800cf1e:	4b03      	ldr	r3, [pc, #12]	@ (800cf2c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800cf20:	6812      	ldr	r2, [r2, #0]
 800cf22:	601a      	str	r2, [r3, #0]
 800cf24:	4770      	bx	lr
 800cf26:	bf00      	nop
 800cf28:	200000b4 	.word	0x200000b4
 800cf2c:	20000038 	.word	0x20000038

0800cf30 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800cf30:	f008 beb6 	b.w	8015ca0 <std_msgs__msg__Int32__init>

0800cf34 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800cf34:	f008 beb8 	b.w	8015ca8 <std_msgs__msg__Int32__fini>

0800cf38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800cf38:	4b04      	ldr	r3, [pc, #16]	@ (800cf4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	b10a      	cbz	r2, 800cf42 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800cf3e:	4803      	ldr	r0, [pc, #12]	@ (800cf4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800cf40:	4770      	bx	lr
 800cf42:	4a03      	ldr	r2, [pc, #12]	@ (800cf50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800cf44:	4801      	ldr	r0, [pc, #4]	@ (800cf4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800cf46:	6812      	ldr	r2, [r2, #0]
 800cf48:	601a      	str	r2, [r3, #0]
 800cf4a:	4770      	bx	lr
 800cf4c:	20000080 	.word	0x20000080
 800cf50:	200000b8 	.word	0x200000b8

0800cf54 <_Int32__max_serialized_size>:
 800cf54:	b508      	push	{r3, lr}
 800cf56:	2104      	movs	r1, #4
 800cf58:	2000      	movs	r0, #0
 800cf5a:	f001 f807 	bl	800df6c <ucdr_alignment>
 800cf5e:	3004      	adds	r0, #4
 800cf60:	bd08      	pop	{r3, pc}
 800cf62:	bf00      	nop

0800cf64 <_Int32__cdr_deserialize>:
 800cf64:	b109      	cbz	r1, 800cf6a <_Int32__cdr_deserialize+0x6>
 800cf66:	f000 bf19 	b.w	800dd9c <ucdr_deserialize_int32_t>
 800cf6a:	4608      	mov	r0, r1
 800cf6c:	4770      	bx	lr
 800cf6e:	bf00      	nop

0800cf70 <get_serialized_size_std_msgs__msg__Int32>:
 800cf70:	b138      	cbz	r0, 800cf82 <get_serialized_size_std_msgs__msg__Int32+0x12>
 800cf72:	b508      	push	{r3, lr}
 800cf74:	460b      	mov	r3, r1
 800cf76:	4618      	mov	r0, r3
 800cf78:	2104      	movs	r1, #4
 800cf7a:	f000 fff7 	bl	800df6c <ucdr_alignment>
 800cf7e:	3004      	adds	r0, #4
 800cf80:	bd08      	pop	{r3, pc}
 800cf82:	4770      	bx	lr

0800cf84 <_Int32__cdr_serialize>:
 800cf84:	460a      	mov	r2, r1
 800cf86:	b118      	cbz	r0, 800cf90 <_Int32__cdr_serialize+0xc>
 800cf88:	6801      	ldr	r1, [r0, #0]
 800cf8a:	4610      	mov	r0, r2
 800cf8c:	f000 be6e 	b.w	800dc6c <ucdr_serialize_int32_t>
 800cf90:	4770      	bx	lr
 800cf92:	bf00      	nop

0800cf94 <_Int32__get_serialized_size>:
 800cf94:	b130      	cbz	r0, 800cfa4 <_Int32__get_serialized_size+0x10>
 800cf96:	b508      	push	{r3, lr}
 800cf98:	2104      	movs	r1, #4
 800cf9a:	2000      	movs	r0, #0
 800cf9c:	f000 ffe6 	bl	800df6c <ucdr_alignment>
 800cfa0:	3004      	adds	r0, #4
 800cfa2:	bd08      	pop	{r3, pc}
 800cfa4:	4770      	bx	lr
 800cfa6:	bf00      	nop

0800cfa8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800cfa8:	4800      	ldr	r0, [pc, #0]	@ (800cfac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800cfaa:	4770      	bx	lr
 800cfac:	2000008c 	.word	0x2000008c

0800cfb0 <ucdr_serialize_bool>:
 800cfb0:	b538      	push	{r3, r4, r5, lr}
 800cfb2:	460d      	mov	r5, r1
 800cfb4:	2101      	movs	r1, #1
 800cfb6:	4604      	mov	r4, r0
 800cfb8:	f000 ff8c 	bl	800ded4 <ucdr_check_final_buffer_behavior>
 800cfbc:	b148      	cbz	r0, 800cfd2 <ucdr_serialize_bool+0x22>
 800cfbe:	68a3      	ldr	r3, [r4, #8]
 800cfc0:	701d      	strb	r5, [r3, #0]
 800cfc2:	68a2      	ldr	r2, [r4, #8]
 800cfc4:	6923      	ldr	r3, [r4, #16]
 800cfc6:	2101      	movs	r1, #1
 800cfc8:	440a      	add	r2, r1
 800cfca:	440b      	add	r3, r1
 800cfcc:	60a2      	str	r2, [r4, #8]
 800cfce:	6123      	str	r3, [r4, #16]
 800cfd0:	7561      	strb	r1, [r4, #21]
 800cfd2:	7da0      	ldrb	r0, [r4, #22]
 800cfd4:	f080 0001 	eor.w	r0, r0, #1
 800cfd8:	bd38      	pop	{r3, r4, r5, pc}
 800cfda:	bf00      	nop

0800cfdc <ucdr_deserialize_bool>:
 800cfdc:	b538      	push	{r3, r4, r5, lr}
 800cfde:	460d      	mov	r5, r1
 800cfe0:	2101      	movs	r1, #1
 800cfe2:	4604      	mov	r4, r0
 800cfe4:	f000 ff76 	bl	800ded4 <ucdr_check_final_buffer_behavior>
 800cfe8:	b160      	cbz	r0, 800d004 <ucdr_deserialize_bool+0x28>
 800cfea:	68a2      	ldr	r2, [r4, #8]
 800cfec:	6923      	ldr	r3, [r4, #16]
 800cfee:	f812 1b01 	ldrb.w	r1, [r2], #1
 800cff2:	3900      	subs	r1, #0
 800cff4:	bf18      	it	ne
 800cff6:	2101      	movne	r1, #1
 800cff8:	7029      	strb	r1, [r5, #0]
 800cffa:	3301      	adds	r3, #1
 800cffc:	2101      	movs	r1, #1
 800cffe:	60a2      	str	r2, [r4, #8]
 800d000:	6123      	str	r3, [r4, #16]
 800d002:	7561      	strb	r1, [r4, #21]
 800d004:	7da0      	ldrb	r0, [r4, #22]
 800d006:	f080 0001 	eor.w	r0, r0, #1
 800d00a:	bd38      	pop	{r3, r4, r5, pc}

0800d00c <ucdr_serialize_uint8_t>:
 800d00c:	b538      	push	{r3, r4, r5, lr}
 800d00e:	460d      	mov	r5, r1
 800d010:	2101      	movs	r1, #1
 800d012:	4604      	mov	r4, r0
 800d014:	f000 ff5e 	bl	800ded4 <ucdr_check_final_buffer_behavior>
 800d018:	b148      	cbz	r0, 800d02e <ucdr_serialize_uint8_t+0x22>
 800d01a:	68a3      	ldr	r3, [r4, #8]
 800d01c:	701d      	strb	r5, [r3, #0]
 800d01e:	68a2      	ldr	r2, [r4, #8]
 800d020:	6923      	ldr	r3, [r4, #16]
 800d022:	2101      	movs	r1, #1
 800d024:	440a      	add	r2, r1
 800d026:	440b      	add	r3, r1
 800d028:	60a2      	str	r2, [r4, #8]
 800d02a:	6123      	str	r3, [r4, #16]
 800d02c:	7561      	strb	r1, [r4, #21]
 800d02e:	7da0      	ldrb	r0, [r4, #22]
 800d030:	f080 0001 	eor.w	r0, r0, #1
 800d034:	bd38      	pop	{r3, r4, r5, pc}
 800d036:	bf00      	nop

0800d038 <ucdr_deserialize_uint8_t>:
 800d038:	b538      	push	{r3, r4, r5, lr}
 800d03a:	460d      	mov	r5, r1
 800d03c:	2101      	movs	r1, #1
 800d03e:	4604      	mov	r4, r0
 800d040:	f000 ff48 	bl	800ded4 <ucdr_check_final_buffer_behavior>
 800d044:	b150      	cbz	r0, 800d05c <ucdr_deserialize_uint8_t+0x24>
 800d046:	68a3      	ldr	r3, [r4, #8]
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	702b      	strb	r3, [r5, #0]
 800d04c:	68a2      	ldr	r2, [r4, #8]
 800d04e:	6923      	ldr	r3, [r4, #16]
 800d050:	2101      	movs	r1, #1
 800d052:	440a      	add	r2, r1
 800d054:	440b      	add	r3, r1
 800d056:	60a2      	str	r2, [r4, #8]
 800d058:	6123      	str	r3, [r4, #16]
 800d05a:	7561      	strb	r1, [r4, #21]
 800d05c:	7da0      	ldrb	r0, [r4, #22]
 800d05e:	f080 0001 	eor.w	r0, r0, #1
 800d062:	bd38      	pop	{r3, r4, r5, pc}

0800d064 <ucdr_serialize_uint16_t>:
 800d064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d068:	b082      	sub	sp, #8
 800d06a:	460b      	mov	r3, r1
 800d06c:	2102      	movs	r1, #2
 800d06e:	4604      	mov	r4, r0
 800d070:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d074:	f000 ff82 	bl	800df7c <ucdr_buffer_alignment>
 800d078:	4601      	mov	r1, r0
 800d07a:	4620      	mov	r0, r4
 800d07c:	7d67      	ldrb	r7, [r4, #21]
 800d07e:	f000 ffc1 	bl	800e004 <ucdr_advance_buffer>
 800d082:	2102      	movs	r1, #2
 800d084:	4620      	mov	r0, r4
 800d086:	f000 ff19 	bl	800debc <ucdr_check_buffer_available_for>
 800d08a:	bb78      	cbnz	r0, 800d0ec <ucdr_serialize_uint16_t+0x88>
 800d08c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d090:	42ab      	cmp	r3, r5
 800d092:	d926      	bls.n	800d0e2 <ucdr_serialize_uint16_t+0x7e>
 800d094:	1b5e      	subs	r6, r3, r5
 800d096:	60a3      	str	r3, [r4, #8]
 800d098:	6923      	ldr	r3, [r4, #16]
 800d09a:	f1c6 0802 	rsb	r8, r6, #2
 800d09e:	4433      	add	r3, r6
 800d0a0:	6123      	str	r3, [r4, #16]
 800d0a2:	4641      	mov	r1, r8
 800d0a4:	4620      	mov	r0, r4
 800d0a6:	f000 ff15 	bl	800ded4 <ucdr_check_final_buffer_behavior>
 800d0aa:	2800      	cmp	r0, #0
 800d0ac:	d03b      	beq.n	800d126 <ucdr_serialize_uint16_t+0xc2>
 800d0ae:	7d23      	ldrb	r3, [r4, #20]
 800d0b0:	2b01      	cmp	r3, #1
 800d0b2:	d04a      	beq.n	800d14a <ucdr_serialize_uint16_t+0xe6>
 800d0b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d0b8:	702b      	strb	r3, [r5, #0]
 800d0ba:	2e00      	cmp	r6, #0
 800d0bc:	d040      	beq.n	800d140 <ucdr_serialize_uint16_t+0xdc>
 800d0be:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d0c2:	706b      	strb	r3, [r5, #1]
 800d0c4:	6923      	ldr	r3, [r4, #16]
 800d0c6:	68a2      	ldr	r2, [r4, #8]
 800d0c8:	7da0      	ldrb	r0, [r4, #22]
 800d0ca:	3302      	adds	r3, #2
 800d0cc:	1b9e      	subs	r6, r3, r6
 800d0ce:	4442      	add	r2, r8
 800d0d0:	2302      	movs	r3, #2
 800d0d2:	f080 0001 	eor.w	r0, r0, #1
 800d0d6:	60a2      	str	r2, [r4, #8]
 800d0d8:	6126      	str	r6, [r4, #16]
 800d0da:	7563      	strb	r3, [r4, #21]
 800d0dc:	b002      	add	sp, #8
 800d0de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0e2:	2102      	movs	r1, #2
 800d0e4:	4620      	mov	r0, r4
 800d0e6:	f000 fef5 	bl	800ded4 <ucdr_check_final_buffer_behavior>
 800d0ea:	b190      	cbz	r0, 800d112 <ucdr_serialize_uint16_t+0xae>
 800d0ec:	7d23      	ldrb	r3, [r4, #20]
 800d0ee:	2b01      	cmp	r3, #1
 800d0f0:	68a3      	ldr	r3, [r4, #8]
 800d0f2:	d014      	beq.n	800d11e <ucdr_serialize_uint16_t+0xba>
 800d0f4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d0f8:	701a      	strb	r2, [r3, #0]
 800d0fa:	68a3      	ldr	r3, [r4, #8]
 800d0fc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d100:	705a      	strb	r2, [r3, #1]
 800d102:	68a2      	ldr	r2, [r4, #8]
 800d104:	6923      	ldr	r3, [r4, #16]
 800d106:	3202      	adds	r2, #2
 800d108:	3302      	adds	r3, #2
 800d10a:	2102      	movs	r1, #2
 800d10c:	60a2      	str	r2, [r4, #8]
 800d10e:	6123      	str	r3, [r4, #16]
 800d110:	7561      	strb	r1, [r4, #21]
 800d112:	7da0      	ldrb	r0, [r4, #22]
 800d114:	f080 0001 	eor.w	r0, r0, #1
 800d118:	b002      	add	sp, #8
 800d11a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d11e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d122:	801a      	strh	r2, [r3, #0]
 800d124:	e7ed      	b.n	800d102 <ucdr_serialize_uint16_t+0x9e>
 800d126:	68a2      	ldr	r2, [r4, #8]
 800d128:	6923      	ldr	r3, [r4, #16]
 800d12a:	7da0      	ldrb	r0, [r4, #22]
 800d12c:	7567      	strb	r7, [r4, #21]
 800d12e:	1b92      	subs	r2, r2, r6
 800d130:	1b9b      	subs	r3, r3, r6
 800d132:	f080 0001 	eor.w	r0, r0, #1
 800d136:	60a2      	str	r2, [r4, #8]
 800d138:	6123      	str	r3, [r4, #16]
 800d13a:	b002      	add	sp, #8
 800d13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d140:	68a3      	ldr	r3, [r4, #8]
 800d142:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d146:	701a      	strb	r2, [r3, #0]
 800d148:	e7bc      	b.n	800d0c4 <ucdr_serialize_uint16_t+0x60>
 800d14a:	4628      	mov	r0, r5
 800d14c:	f10d 0506 	add.w	r5, sp, #6
 800d150:	4629      	mov	r1, r5
 800d152:	4632      	mov	r2, r6
 800d154:	f00a fd39 	bl	8017bca <memcpy>
 800d158:	68a0      	ldr	r0, [r4, #8]
 800d15a:	4642      	mov	r2, r8
 800d15c:	19a9      	adds	r1, r5, r6
 800d15e:	f00a fd34 	bl	8017bca <memcpy>
 800d162:	e7af      	b.n	800d0c4 <ucdr_serialize_uint16_t+0x60>

0800d164 <ucdr_serialize_endian_uint16_t>:
 800d164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d168:	b083      	sub	sp, #12
 800d16a:	460d      	mov	r5, r1
 800d16c:	2102      	movs	r1, #2
 800d16e:	4604      	mov	r4, r0
 800d170:	f8ad 2006 	strh.w	r2, [sp, #6]
 800d174:	f000 ff02 	bl	800df7c <ucdr_buffer_alignment>
 800d178:	4601      	mov	r1, r0
 800d17a:	4620      	mov	r0, r4
 800d17c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d180:	f000 ff40 	bl	800e004 <ucdr_advance_buffer>
 800d184:	2102      	movs	r1, #2
 800d186:	4620      	mov	r0, r4
 800d188:	f000 fe98 	bl	800debc <ucdr_check_buffer_available_for>
 800d18c:	bb70      	cbnz	r0, 800d1ec <ucdr_serialize_endian_uint16_t+0x88>
 800d18e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d192:	42be      	cmp	r6, r7
 800d194:	d925      	bls.n	800d1e2 <ucdr_serialize_endian_uint16_t+0x7e>
 800d196:	6923      	ldr	r3, [r4, #16]
 800d198:	60a6      	str	r6, [r4, #8]
 800d19a:	1bf6      	subs	r6, r6, r7
 800d19c:	4433      	add	r3, r6
 800d19e:	f1c6 0902 	rsb	r9, r6, #2
 800d1a2:	6123      	str	r3, [r4, #16]
 800d1a4:	4649      	mov	r1, r9
 800d1a6:	4620      	mov	r0, r4
 800d1a8:	f000 fe94 	bl	800ded4 <ucdr_check_final_buffer_behavior>
 800d1ac:	2800      	cmp	r0, #0
 800d1ae:	d039      	beq.n	800d224 <ucdr_serialize_endian_uint16_t+0xc0>
 800d1b0:	2d01      	cmp	r5, #1
 800d1b2:	d04a      	beq.n	800d24a <ucdr_serialize_endian_uint16_t+0xe6>
 800d1b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d1b8:	703b      	strb	r3, [r7, #0]
 800d1ba:	2e00      	cmp	r6, #0
 800d1bc:	d040      	beq.n	800d240 <ucdr_serialize_endian_uint16_t+0xdc>
 800d1be:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d1c2:	707b      	strb	r3, [r7, #1]
 800d1c4:	6923      	ldr	r3, [r4, #16]
 800d1c6:	68a2      	ldr	r2, [r4, #8]
 800d1c8:	7da0      	ldrb	r0, [r4, #22]
 800d1ca:	3302      	adds	r3, #2
 800d1cc:	444a      	add	r2, r9
 800d1ce:	1b9b      	subs	r3, r3, r6
 800d1d0:	2102      	movs	r1, #2
 800d1d2:	f080 0001 	eor.w	r0, r0, #1
 800d1d6:	60a2      	str	r2, [r4, #8]
 800d1d8:	6123      	str	r3, [r4, #16]
 800d1da:	7561      	strb	r1, [r4, #21]
 800d1dc:	b003      	add	sp, #12
 800d1de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1e2:	2102      	movs	r1, #2
 800d1e4:	4620      	mov	r0, r4
 800d1e6:	f000 fe75 	bl	800ded4 <ucdr_check_final_buffer_behavior>
 800d1ea:	b188      	cbz	r0, 800d210 <ucdr_serialize_endian_uint16_t+0xac>
 800d1ec:	2d01      	cmp	r5, #1
 800d1ee:	68a3      	ldr	r3, [r4, #8]
 800d1f0:	d014      	beq.n	800d21c <ucdr_serialize_endian_uint16_t+0xb8>
 800d1f2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d1f6:	701a      	strb	r2, [r3, #0]
 800d1f8:	68a3      	ldr	r3, [r4, #8]
 800d1fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d1fe:	705a      	strb	r2, [r3, #1]
 800d200:	68a2      	ldr	r2, [r4, #8]
 800d202:	6923      	ldr	r3, [r4, #16]
 800d204:	3202      	adds	r2, #2
 800d206:	3302      	adds	r3, #2
 800d208:	2102      	movs	r1, #2
 800d20a:	60a2      	str	r2, [r4, #8]
 800d20c:	6123      	str	r3, [r4, #16]
 800d20e:	7561      	strb	r1, [r4, #21]
 800d210:	7da0      	ldrb	r0, [r4, #22]
 800d212:	f080 0001 	eor.w	r0, r0, #1
 800d216:	b003      	add	sp, #12
 800d218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d21c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d220:	801a      	strh	r2, [r3, #0]
 800d222:	e7ed      	b.n	800d200 <ucdr_serialize_endian_uint16_t+0x9c>
 800d224:	68a2      	ldr	r2, [r4, #8]
 800d226:	6923      	ldr	r3, [r4, #16]
 800d228:	7da0      	ldrb	r0, [r4, #22]
 800d22a:	f884 8015 	strb.w	r8, [r4, #21]
 800d22e:	1b92      	subs	r2, r2, r6
 800d230:	1b9b      	subs	r3, r3, r6
 800d232:	f080 0001 	eor.w	r0, r0, #1
 800d236:	60a2      	str	r2, [r4, #8]
 800d238:	6123      	str	r3, [r4, #16]
 800d23a:	b003      	add	sp, #12
 800d23c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d240:	68a3      	ldr	r3, [r4, #8]
 800d242:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d246:	701a      	strb	r2, [r3, #0]
 800d248:	e7bc      	b.n	800d1c4 <ucdr_serialize_endian_uint16_t+0x60>
 800d24a:	f10d 0506 	add.w	r5, sp, #6
 800d24e:	4629      	mov	r1, r5
 800d250:	4632      	mov	r2, r6
 800d252:	4638      	mov	r0, r7
 800d254:	f00a fcb9 	bl	8017bca <memcpy>
 800d258:	68a0      	ldr	r0, [r4, #8]
 800d25a:	464a      	mov	r2, r9
 800d25c:	19a9      	adds	r1, r5, r6
 800d25e:	f00a fcb4 	bl	8017bca <memcpy>
 800d262:	e7af      	b.n	800d1c4 <ucdr_serialize_endian_uint16_t+0x60>

0800d264 <ucdr_deserialize_uint16_t>:
 800d264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d268:	460d      	mov	r5, r1
 800d26a:	2102      	movs	r1, #2
 800d26c:	4604      	mov	r4, r0
 800d26e:	f000 fe85 	bl	800df7c <ucdr_buffer_alignment>
 800d272:	4601      	mov	r1, r0
 800d274:	4620      	mov	r0, r4
 800d276:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d27a:	f000 fec3 	bl	800e004 <ucdr_advance_buffer>
 800d27e:	2102      	movs	r1, #2
 800d280:	4620      	mov	r0, r4
 800d282:	f000 fe1b 	bl	800debc <ucdr_check_buffer_available_for>
 800d286:	bb60      	cbnz	r0, 800d2e2 <ucdr_deserialize_uint16_t+0x7e>
 800d288:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d28c:	42be      	cmp	r6, r7
 800d28e:	d923      	bls.n	800d2d8 <ucdr_deserialize_uint16_t+0x74>
 800d290:	6923      	ldr	r3, [r4, #16]
 800d292:	60a6      	str	r6, [r4, #8]
 800d294:	1bf6      	subs	r6, r6, r7
 800d296:	4433      	add	r3, r6
 800d298:	f1c6 0902 	rsb	r9, r6, #2
 800d29c:	6123      	str	r3, [r4, #16]
 800d29e:	4649      	mov	r1, r9
 800d2a0:	4620      	mov	r0, r4
 800d2a2:	f000 fe17 	bl	800ded4 <ucdr_check_final_buffer_behavior>
 800d2a6:	2800      	cmp	r0, #0
 800d2a8:	d034      	beq.n	800d314 <ucdr_deserialize_uint16_t+0xb0>
 800d2aa:	7d23      	ldrb	r3, [r4, #20]
 800d2ac:	2b01      	cmp	r3, #1
 800d2ae:	d042      	beq.n	800d336 <ucdr_deserialize_uint16_t+0xd2>
 800d2b0:	787b      	ldrb	r3, [r7, #1]
 800d2b2:	702b      	strb	r3, [r5, #0]
 800d2b4:	2e00      	cmp	r6, #0
 800d2b6:	d03a      	beq.n	800d32e <ucdr_deserialize_uint16_t+0xca>
 800d2b8:	783b      	ldrb	r3, [r7, #0]
 800d2ba:	706b      	strb	r3, [r5, #1]
 800d2bc:	6923      	ldr	r3, [r4, #16]
 800d2be:	68a2      	ldr	r2, [r4, #8]
 800d2c0:	7da0      	ldrb	r0, [r4, #22]
 800d2c2:	2102      	movs	r1, #2
 800d2c4:	3302      	adds	r3, #2
 800d2c6:	444a      	add	r2, r9
 800d2c8:	1b9b      	subs	r3, r3, r6
 800d2ca:	7561      	strb	r1, [r4, #21]
 800d2cc:	60a2      	str	r2, [r4, #8]
 800d2ce:	6123      	str	r3, [r4, #16]
 800d2d0:	f080 0001 	eor.w	r0, r0, #1
 800d2d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2d8:	2102      	movs	r1, #2
 800d2da:	4620      	mov	r0, r4
 800d2dc:	f000 fdfa 	bl	800ded4 <ucdr_check_final_buffer_behavior>
 800d2e0:	b180      	cbz	r0, 800d304 <ucdr_deserialize_uint16_t+0xa0>
 800d2e2:	7d23      	ldrb	r3, [r4, #20]
 800d2e4:	2b01      	cmp	r3, #1
 800d2e6:	68a3      	ldr	r3, [r4, #8]
 800d2e8:	d011      	beq.n	800d30e <ucdr_deserialize_uint16_t+0xaa>
 800d2ea:	785b      	ldrb	r3, [r3, #1]
 800d2ec:	702b      	strb	r3, [r5, #0]
 800d2ee:	68a3      	ldr	r3, [r4, #8]
 800d2f0:	781b      	ldrb	r3, [r3, #0]
 800d2f2:	706b      	strb	r3, [r5, #1]
 800d2f4:	68a2      	ldr	r2, [r4, #8]
 800d2f6:	6923      	ldr	r3, [r4, #16]
 800d2f8:	3202      	adds	r2, #2
 800d2fa:	3302      	adds	r3, #2
 800d2fc:	2102      	movs	r1, #2
 800d2fe:	60a2      	str	r2, [r4, #8]
 800d300:	6123      	str	r3, [r4, #16]
 800d302:	7561      	strb	r1, [r4, #21]
 800d304:	7da0      	ldrb	r0, [r4, #22]
 800d306:	f080 0001 	eor.w	r0, r0, #1
 800d30a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d30e:	881b      	ldrh	r3, [r3, #0]
 800d310:	802b      	strh	r3, [r5, #0]
 800d312:	e7ef      	b.n	800d2f4 <ucdr_deserialize_uint16_t+0x90>
 800d314:	68a2      	ldr	r2, [r4, #8]
 800d316:	6923      	ldr	r3, [r4, #16]
 800d318:	7da0      	ldrb	r0, [r4, #22]
 800d31a:	f884 8015 	strb.w	r8, [r4, #21]
 800d31e:	1b92      	subs	r2, r2, r6
 800d320:	1b9b      	subs	r3, r3, r6
 800d322:	60a2      	str	r2, [r4, #8]
 800d324:	6123      	str	r3, [r4, #16]
 800d326:	f080 0001 	eor.w	r0, r0, #1
 800d32a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d32e:	68a3      	ldr	r3, [r4, #8]
 800d330:	781b      	ldrb	r3, [r3, #0]
 800d332:	706b      	strb	r3, [r5, #1]
 800d334:	e7c2      	b.n	800d2bc <ucdr_deserialize_uint16_t+0x58>
 800d336:	4639      	mov	r1, r7
 800d338:	4632      	mov	r2, r6
 800d33a:	4628      	mov	r0, r5
 800d33c:	f00a fc45 	bl	8017bca <memcpy>
 800d340:	68a1      	ldr	r1, [r4, #8]
 800d342:	464a      	mov	r2, r9
 800d344:	19a8      	adds	r0, r5, r6
 800d346:	f00a fc40 	bl	8017bca <memcpy>
 800d34a:	e7b7      	b.n	800d2bc <ucdr_deserialize_uint16_t+0x58>

0800d34c <ucdr_deserialize_endian_uint16_t>:
 800d34c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d350:	460e      	mov	r6, r1
 800d352:	2102      	movs	r1, #2
 800d354:	4604      	mov	r4, r0
 800d356:	4615      	mov	r5, r2
 800d358:	f000 fe10 	bl	800df7c <ucdr_buffer_alignment>
 800d35c:	4601      	mov	r1, r0
 800d35e:	4620      	mov	r0, r4
 800d360:	f894 9015 	ldrb.w	r9, [r4, #21]
 800d364:	f000 fe4e 	bl	800e004 <ucdr_advance_buffer>
 800d368:	2102      	movs	r1, #2
 800d36a:	4620      	mov	r0, r4
 800d36c:	f000 fda6 	bl	800debc <ucdr_check_buffer_available_for>
 800d370:	bb70      	cbnz	r0, 800d3d0 <ucdr_deserialize_endian_uint16_t+0x84>
 800d372:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800d376:	4547      	cmp	r7, r8
 800d378:	d925      	bls.n	800d3c6 <ucdr_deserialize_endian_uint16_t+0x7a>
 800d37a:	6923      	ldr	r3, [r4, #16]
 800d37c:	60a7      	str	r7, [r4, #8]
 800d37e:	eba7 0708 	sub.w	r7, r7, r8
 800d382:	443b      	add	r3, r7
 800d384:	f1c7 0a02 	rsb	sl, r7, #2
 800d388:	6123      	str	r3, [r4, #16]
 800d38a:	4651      	mov	r1, sl
 800d38c:	4620      	mov	r0, r4
 800d38e:	f000 fda1 	bl	800ded4 <ucdr_check_final_buffer_behavior>
 800d392:	2800      	cmp	r0, #0
 800d394:	d034      	beq.n	800d400 <ucdr_deserialize_endian_uint16_t+0xb4>
 800d396:	2e01      	cmp	r6, #1
 800d398:	d043      	beq.n	800d422 <ucdr_deserialize_endian_uint16_t+0xd6>
 800d39a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d39e:	702b      	strb	r3, [r5, #0]
 800d3a0:	2f00      	cmp	r7, #0
 800d3a2:	d03a      	beq.n	800d41a <ucdr_deserialize_endian_uint16_t+0xce>
 800d3a4:	f898 3000 	ldrb.w	r3, [r8]
 800d3a8:	706b      	strb	r3, [r5, #1]
 800d3aa:	6923      	ldr	r3, [r4, #16]
 800d3ac:	68a2      	ldr	r2, [r4, #8]
 800d3ae:	7da0      	ldrb	r0, [r4, #22]
 800d3b0:	2102      	movs	r1, #2
 800d3b2:	3302      	adds	r3, #2
 800d3b4:	4452      	add	r2, sl
 800d3b6:	1bdb      	subs	r3, r3, r7
 800d3b8:	7561      	strb	r1, [r4, #21]
 800d3ba:	60a2      	str	r2, [r4, #8]
 800d3bc:	6123      	str	r3, [r4, #16]
 800d3be:	f080 0001 	eor.w	r0, r0, #1
 800d3c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3c6:	2102      	movs	r1, #2
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	f000 fd83 	bl	800ded4 <ucdr_check_final_buffer_behavior>
 800d3ce:	b178      	cbz	r0, 800d3f0 <ucdr_deserialize_endian_uint16_t+0xa4>
 800d3d0:	2e01      	cmp	r6, #1
 800d3d2:	68a3      	ldr	r3, [r4, #8]
 800d3d4:	d011      	beq.n	800d3fa <ucdr_deserialize_endian_uint16_t+0xae>
 800d3d6:	785b      	ldrb	r3, [r3, #1]
 800d3d8:	702b      	strb	r3, [r5, #0]
 800d3da:	68a3      	ldr	r3, [r4, #8]
 800d3dc:	781b      	ldrb	r3, [r3, #0]
 800d3de:	706b      	strb	r3, [r5, #1]
 800d3e0:	68a2      	ldr	r2, [r4, #8]
 800d3e2:	6923      	ldr	r3, [r4, #16]
 800d3e4:	3202      	adds	r2, #2
 800d3e6:	3302      	adds	r3, #2
 800d3e8:	2102      	movs	r1, #2
 800d3ea:	60a2      	str	r2, [r4, #8]
 800d3ec:	6123      	str	r3, [r4, #16]
 800d3ee:	7561      	strb	r1, [r4, #21]
 800d3f0:	7da0      	ldrb	r0, [r4, #22]
 800d3f2:	f080 0001 	eor.w	r0, r0, #1
 800d3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3fa:	881b      	ldrh	r3, [r3, #0]
 800d3fc:	802b      	strh	r3, [r5, #0]
 800d3fe:	e7ef      	b.n	800d3e0 <ucdr_deserialize_endian_uint16_t+0x94>
 800d400:	68a2      	ldr	r2, [r4, #8]
 800d402:	6923      	ldr	r3, [r4, #16]
 800d404:	7da0      	ldrb	r0, [r4, #22]
 800d406:	f884 9015 	strb.w	r9, [r4, #21]
 800d40a:	1bd2      	subs	r2, r2, r7
 800d40c:	1bdb      	subs	r3, r3, r7
 800d40e:	60a2      	str	r2, [r4, #8]
 800d410:	6123      	str	r3, [r4, #16]
 800d412:	f080 0001 	eor.w	r0, r0, #1
 800d416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d41a:	68a3      	ldr	r3, [r4, #8]
 800d41c:	781b      	ldrb	r3, [r3, #0]
 800d41e:	706b      	strb	r3, [r5, #1]
 800d420:	e7c3      	b.n	800d3aa <ucdr_deserialize_endian_uint16_t+0x5e>
 800d422:	4641      	mov	r1, r8
 800d424:	463a      	mov	r2, r7
 800d426:	4628      	mov	r0, r5
 800d428:	f00a fbcf 	bl	8017bca <memcpy>
 800d42c:	68a1      	ldr	r1, [r4, #8]
 800d42e:	4652      	mov	r2, sl
 800d430:	19e8      	adds	r0, r5, r7
 800d432:	f00a fbca 	bl	8017bca <memcpy>
 800d436:	e7b8      	b.n	800d3aa <ucdr_deserialize_endian_uint16_t+0x5e>

0800d438 <ucdr_serialize_uint32_t>:
 800d438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d43c:	b082      	sub	sp, #8
 800d43e:	4604      	mov	r4, r0
 800d440:	9101      	str	r1, [sp, #4]
 800d442:	2104      	movs	r1, #4
 800d444:	f000 fd9a 	bl	800df7c <ucdr_buffer_alignment>
 800d448:	4601      	mov	r1, r0
 800d44a:	4620      	mov	r0, r4
 800d44c:	7d67      	ldrb	r7, [r4, #21]
 800d44e:	f000 fdd9 	bl	800e004 <ucdr_advance_buffer>
 800d452:	2104      	movs	r1, #4
 800d454:	4620      	mov	r0, r4
 800d456:	f000 fd31 	bl	800debc <ucdr_check_buffer_available_for>
 800d45a:	2800      	cmp	r0, #0
 800d45c:	d139      	bne.n	800d4d2 <ucdr_serialize_uint32_t+0x9a>
 800d45e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d462:	42ab      	cmp	r3, r5
 800d464:	d930      	bls.n	800d4c8 <ucdr_serialize_uint32_t+0x90>
 800d466:	1b5e      	subs	r6, r3, r5
 800d468:	60a3      	str	r3, [r4, #8]
 800d46a:	6923      	ldr	r3, [r4, #16]
 800d46c:	f1c6 0804 	rsb	r8, r6, #4
 800d470:	4433      	add	r3, r6
 800d472:	6123      	str	r3, [r4, #16]
 800d474:	4641      	mov	r1, r8
 800d476:	4620      	mov	r0, r4
 800d478:	f000 fd2c 	bl	800ded4 <ucdr_check_final_buffer_behavior>
 800d47c:	2800      	cmp	r0, #0
 800d47e:	d04c      	beq.n	800d51a <ucdr_serialize_uint32_t+0xe2>
 800d480:	7d23      	ldrb	r3, [r4, #20]
 800d482:	2b01      	cmp	r3, #1
 800d484:	d063      	beq.n	800d54e <ucdr_serialize_uint32_t+0x116>
 800d486:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d48a:	702b      	strb	r3, [r5, #0]
 800d48c:	2e00      	cmp	r6, #0
 800d48e:	d051      	beq.n	800d534 <ucdr_serialize_uint32_t+0xfc>
 800d490:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d494:	706b      	strb	r3, [r5, #1]
 800d496:	2e01      	cmp	r6, #1
 800d498:	d050      	beq.n	800d53c <ucdr_serialize_uint32_t+0x104>
 800d49a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d49e:	70ab      	strb	r3, [r5, #2]
 800d4a0:	2e02      	cmp	r6, #2
 800d4a2:	d04f      	beq.n	800d544 <ucdr_serialize_uint32_t+0x10c>
 800d4a4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d4a8:	70eb      	strb	r3, [r5, #3]
 800d4aa:	6923      	ldr	r3, [r4, #16]
 800d4ac:	68a2      	ldr	r2, [r4, #8]
 800d4ae:	7da0      	ldrb	r0, [r4, #22]
 800d4b0:	3304      	adds	r3, #4
 800d4b2:	1b9e      	subs	r6, r3, r6
 800d4b4:	4442      	add	r2, r8
 800d4b6:	2304      	movs	r3, #4
 800d4b8:	f080 0001 	eor.w	r0, r0, #1
 800d4bc:	60a2      	str	r2, [r4, #8]
 800d4be:	6126      	str	r6, [r4, #16]
 800d4c0:	7563      	strb	r3, [r4, #21]
 800d4c2:	b002      	add	sp, #8
 800d4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4c8:	2104      	movs	r1, #4
 800d4ca:	4620      	mov	r0, r4
 800d4cc:	f000 fd02 	bl	800ded4 <ucdr_check_final_buffer_behavior>
 800d4d0:	b1d0      	cbz	r0, 800d508 <ucdr_serialize_uint32_t+0xd0>
 800d4d2:	7d23      	ldrb	r3, [r4, #20]
 800d4d4:	2b01      	cmp	r3, #1
 800d4d6:	68a3      	ldr	r3, [r4, #8]
 800d4d8:	d01c      	beq.n	800d514 <ucdr_serialize_uint32_t+0xdc>
 800d4da:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d4de:	701a      	strb	r2, [r3, #0]
 800d4e0:	68a3      	ldr	r3, [r4, #8]
 800d4e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d4e6:	705a      	strb	r2, [r3, #1]
 800d4e8:	68a3      	ldr	r3, [r4, #8]
 800d4ea:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d4ee:	709a      	strb	r2, [r3, #2]
 800d4f0:	68a3      	ldr	r3, [r4, #8]
 800d4f2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d4f6:	70da      	strb	r2, [r3, #3]
 800d4f8:	68a2      	ldr	r2, [r4, #8]
 800d4fa:	6923      	ldr	r3, [r4, #16]
 800d4fc:	3204      	adds	r2, #4
 800d4fe:	3304      	adds	r3, #4
 800d500:	2104      	movs	r1, #4
 800d502:	60a2      	str	r2, [r4, #8]
 800d504:	6123      	str	r3, [r4, #16]
 800d506:	7561      	strb	r1, [r4, #21]
 800d508:	7da0      	ldrb	r0, [r4, #22]
 800d50a:	f080 0001 	eor.w	r0, r0, #1
 800d50e:	b002      	add	sp, #8
 800d510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d514:	9a01      	ldr	r2, [sp, #4]
 800d516:	601a      	str	r2, [r3, #0]
 800d518:	e7ee      	b.n	800d4f8 <ucdr_serialize_uint32_t+0xc0>
 800d51a:	68a2      	ldr	r2, [r4, #8]
 800d51c:	6923      	ldr	r3, [r4, #16]
 800d51e:	7da0      	ldrb	r0, [r4, #22]
 800d520:	7567      	strb	r7, [r4, #21]
 800d522:	1b92      	subs	r2, r2, r6
 800d524:	1b9b      	subs	r3, r3, r6
 800d526:	f080 0001 	eor.w	r0, r0, #1
 800d52a:	60a2      	str	r2, [r4, #8]
 800d52c:	6123      	str	r3, [r4, #16]
 800d52e:	b002      	add	sp, #8
 800d530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d534:	68a3      	ldr	r3, [r4, #8]
 800d536:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d53a:	701a      	strb	r2, [r3, #0]
 800d53c:	68a3      	ldr	r3, [r4, #8]
 800d53e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d542:	701a      	strb	r2, [r3, #0]
 800d544:	68a3      	ldr	r3, [r4, #8]
 800d546:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d54a:	701a      	strb	r2, [r3, #0]
 800d54c:	e7ad      	b.n	800d4aa <ucdr_serialize_uint32_t+0x72>
 800d54e:	4628      	mov	r0, r5
 800d550:	ad01      	add	r5, sp, #4
 800d552:	4629      	mov	r1, r5
 800d554:	4632      	mov	r2, r6
 800d556:	f00a fb38 	bl	8017bca <memcpy>
 800d55a:	68a0      	ldr	r0, [r4, #8]
 800d55c:	4642      	mov	r2, r8
 800d55e:	19a9      	adds	r1, r5, r6
 800d560:	f00a fb33 	bl	8017bca <memcpy>
 800d564:	e7a1      	b.n	800d4aa <ucdr_serialize_uint32_t+0x72>
 800d566:	bf00      	nop

0800d568 <ucdr_serialize_endian_uint32_t>:
 800d568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d56c:	b083      	sub	sp, #12
 800d56e:	460d      	mov	r5, r1
 800d570:	2104      	movs	r1, #4
 800d572:	4604      	mov	r4, r0
 800d574:	9201      	str	r2, [sp, #4]
 800d576:	f000 fd01 	bl	800df7c <ucdr_buffer_alignment>
 800d57a:	4601      	mov	r1, r0
 800d57c:	4620      	mov	r0, r4
 800d57e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d582:	f000 fd3f 	bl	800e004 <ucdr_advance_buffer>
 800d586:	2104      	movs	r1, #4
 800d588:	4620      	mov	r0, r4
 800d58a:	f000 fc97 	bl	800debc <ucdr_check_buffer_available_for>
 800d58e:	2800      	cmp	r0, #0
 800d590:	d138      	bne.n	800d604 <ucdr_serialize_endian_uint32_t+0x9c>
 800d592:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d596:	42b7      	cmp	r7, r6
 800d598:	d92f      	bls.n	800d5fa <ucdr_serialize_endian_uint32_t+0x92>
 800d59a:	6923      	ldr	r3, [r4, #16]
 800d59c:	60a7      	str	r7, [r4, #8]
 800d59e:	1bbf      	subs	r7, r7, r6
 800d5a0:	443b      	add	r3, r7
 800d5a2:	f1c7 0904 	rsb	r9, r7, #4
 800d5a6:	6123      	str	r3, [r4, #16]
 800d5a8:	4649      	mov	r1, r9
 800d5aa:	4620      	mov	r0, r4
 800d5ac:	f000 fc92 	bl	800ded4 <ucdr_check_final_buffer_behavior>
 800d5b0:	2800      	cmp	r0, #0
 800d5b2:	d04a      	beq.n	800d64a <ucdr_serialize_endian_uint32_t+0xe2>
 800d5b4:	2d01      	cmp	r5, #1
 800d5b6:	d063      	beq.n	800d680 <ucdr_serialize_endian_uint32_t+0x118>
 800d5b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d5bc:	7033      	strb	r3, [r6, #0]
 800d5be:	2f00      	cmp	r7, #0
 800d5c0:	d051      	beq.n	800d666 <ucdr_serialize_endian_uint32_t+0xfe>
 800d5c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d5c6:	7073      	strb	r3, [r6, #1]
 800d5c8:	2f01      	cmp	r7, #1
 800d5ca:	d050      	beq.n	800d66e <ucdr_serialize_endian_uint32_t+0x106>
 800d5cc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d5d0:	70b3      	strb	r3, [r6, #2]
 800d5d2:	2f02      	cmp	r7, #2
 800d5d4:	d04f      	beq.n	800d676 <ucdr_serialize_endian_uint32_t+0x10e>
 800d5d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d5da:	70f3      	strb	r3, [r6, #3]
 800d5dc:	6923      	ldr	r3, [r4, #16]
 800d5de:	68a2      	ldr	r2, [r4, #8]
 800d5e0:	7da0      	ldrb	r0, [r4, #22]
 800d5e2:	3304      	adds	r3, #4
 800d5e4:	444a      	add	r2, r9
 800d5e6:	1bdb      	subs	r3, r3, r7
 800d5e8:	2104      	movs	r1, #4
 800d5ea:	f080 0001 	eor.w	r0, r0, #1
 800d5ee:	60a2      	str	r2, [r4, #8]
 800d5f0:	6123      	str	r3, [r4, #16]
 800d5f2:	7561      	strb	r1, [r4, #21]
 800d5f4:	b003      	add	sp, #12
 800d5f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5fa:	2104      	movs	r1, #4
 800d5fc:	4620      	mov	r0, r4
 800d5fe:	f000 fc69 	bl	800ded4 <ucdr_check_final_buffer_behavior>
 800d602:	b1c8      	cbz	r0, 800d638 <ucdr_serialize_endian_uint32_t+0xd0>
 800d604:	2d01      	cmp	r5, #1
 800d606:	68a3      	ldr	r3, [r4, #8]
 800d608:	d01c      	beq.n	800d644 <ucdr_serialize_endian_uint32_t+0xdc>
 800d60a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d60e:	701a      	strb	r2, [r3, #0]
 800d610:	68a3      	ldr	r3, [r4, #8]
 800d612:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d616:	705a      	strb	r2, [r3, #1]
 800d618:	68a3      	ldr	r3, [r4, #8]
 800d61a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d61e:	709a      	strb	r2, [r3, #2]
 800d620:	68a3      	ldr	r3, [r4, #8]
 800d622:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d626:	70da      	strb	r2, [r3, #3]
 800d628:	68a2      	ldr	r2, [r4, #8]
 800d62a:	6923      	ldr	r3, [r4, #16]
 800d62c:	3204      	adds	r2, #4
 800d62e:	3304      	adds	r3, #4
 800d630:	2104      	movs	r1, #4
 800d632:	60a2      	str	r2, [r4, #8]
 800d634:	6123      	str	r3, [r4, #16]
 800d636:	7561      	strb	r1, [r4, #21]
 800d638:	7da0      	ldrb	r0, [r4, #22]
 800d63a:	f080 0001 	eor.w	r0, r0, #1
 800d63e:	b003      	add	sp, #12
 800d640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d644:	9a01      	ldr	r2, [sp, #4]
 800d646:	601a      	str	r2, [r3, #0]
 800d648:	e7ee      	b.n	800d628 <ucdr_serialize_endian_uint32_t+0xc0>
 800d64a:	68a2      	ldr	r2, [r4, #8]
 800d64c:	6923      	ldr	r3, [r4, #16]
 800d64e:	7da0      	ldrb	r0, [r4, #22]
 800d650:	f884 8015 	strb.w	r8, [r4, #21]
 800d654:	1bd2      	subs	r2, r2, r7
 800d656:	1bdb      	subs	r3, r3, r7
 800d658:	f080 0001 	eor.w	r0, r0, #1
 800d65c:	60a2      	str	r2, [r4, #8]
 800d65e:	6123      	str	r3, [r4, #16]
 800d660:	b003      	add	sp, #12
 800d662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d666:	68a3      	ldr	r3, [r4, #8]
 800d668:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d66c:	701a      	strb	r2, [r3, #0]
 800d66e:	68a3      	ldr	r3, [r4, #8]
 800d670:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d674:	701a      	strb	r2, [r3, #0]
 800d676:	68a3      	ldr	r3, [r4, #8]
 800d678:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d67c:	701a      	strb	r2, [r3, #0]
 800d67e:	e7ad      	b.n	800d5dc <ucdr_serialize_endian_uint32_t+0x74>
 800d680:	ad01      	add	r5, sp, #4
 800d682:	4629      	mov	r1, r5
 800d684:	463a      	mov	r2, r7
 800d686:	4630      	mov	r0, r6
 800d688:	f00a fa9f 	bl	8017bca <memcpy>
 800d68c:	68a0      	ldr	r0, [r4, #8]
 800d68e:	464a      	mov	r2, r9
 800d690:	19e9      	adds	r1, r5, r7
 800d692:	f00a fa9a 	bl	8017bca <memcpy>
 800d696:	e7a1      	b.n	800d5dc <ucdr_serialize_endian_uint32_t+0x74>

0800d698 <ucdr_deserialize_uint32_t>:
 800d698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d69c:	460d      	mov	r5, r1
 800d69e:	2104      	movs	r1, #4
 800d6a0:	4604      	mov	r4, r0
 800d6a2:	f000 fc6b 	bl	800df7c <ucdr_buffer_alignment>
 800d6a6:	4601      	mov	r1, r0
 800d6a8:	4620      	mov	r0, r4
 800d6aa:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d6ae:	f000 fca9 	bl	800e004 <ucdr_advance_buffer>
 800d6b2:	2104      	movs	r1, #4
 800d6b4:	4620      	mov	r0, r4
 800d6b6:	f000 fc01 	bl	800debc <ucdr_check_buffer_available_for>
 800d6ba:	2800      	cmp	r0, #0
 800d6bc:	d138      	bne.n	800d730 <ucdr_deserialize_uint32_t+0x98>
 800d6be:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d6c2:	42b7      	cmp	r7, r6
 800d6c4:	d92f      	bls.n	800d726 <ucdr_deserialize_uint32_t+0x8e>
 800d6c6:	6923      	ldr	r3, [r4, #16]
 800d6c8:	60a7      	str	r7, [r4, #8]
 800d6ca:	1bbf      	subs	r7, r7, r6
 800d6cc:	443b      	add	r3, r7
 800d6ce:	f1c7 0904 	rsb	r9, r7, #4
 800d6d2:	6123      	str	r3, [r4, #16]
 800d6d4:	4649      	mov	r1, r9
 800d6d6:	4620      	mov	r0, r4
 800d6d8:	f000 fbfc 	bl	800ded4 <ucdr_check_final_buffer_behavior>
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	d046      	beq.n	800d76e <ucdr_deserialize_uint32_t+0xd6>
 800d6e0:	7d23      	ldrb	r3, [r4, #20]
 800d6e2:	2b01      	cmp	r3, #1
 800d6e4:	d05c      	beq.n	800d7a0 <ucdr_deserialize_uint32_t+0x108>
 800d6e6:	78f3      	ldrb	r3, [r6, #3]
 800d6e8:	702b      	strb	r3, [r5, #0]
 800d6ea:	2f00      	cmp	r7, #0
 800d6ec:	d04c      	beq.n	800d788 <ucdr_deserialize_uint32_t+0xf0>
 800d6ee:	78b3      	ldrb	r3, [r6, #2]
 800d6f0:	706b      	strb	r3, [r5, #1]
 800d6f2:	2f01      	cmp	r7, #1
 800d6f4:	f105 0302 	add.w	r3, r5, #2
 800d6f8:	d04a      	beq.n	800d790 <ucdr_deserialize_uint32_t+0xf8>
 800d6fa:	7873      	ldrb	r3, [r6, #1]
 800d6fc:	70ab      	strb	r3, [r5, #2]
 800d6fe:	2f02      	cmp	r7, #2
 800d700:	f105 0303 	add.w	r3, r5, #3
 800d704:	d048      	beq.n	800d798 <ucdr_deserialize_uint32_t+0x100>
 800d706:	7833      	ldrb	r3, [r6, #0]
 800d708:	70eb      	strb	r3, [r5, #3]
 800d70a:	6923      	ldr	r3, [r4, #16]
 800d70c:	68a2      	ldr	r2, [r4, #8]
 800d70e:	7da0      	ldrb	r0, [r4, #22]
 800d710:	2104      	movs	r1, #4
 800d712:	3304      	adds	r3, #4
 800d714:	444a      	add	r2, r9
 800d716:	1bdb      	subs	r3, r3, r7
 800d718:	7561      	strb	r1, [r4, #21]
 800d71a:	60a2      	str	r2, [r4, #8]
 800d71c:	6123      	str	r3, [r4, #16]
 800d71e:	f080 0001 	eor.w	r0, r0, #1
 800d722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d726:	2104      	movs	r1, #4
 800d728:	4620      	mov	r0, r4
 800d72a:	f000 fbd3 	bl	800ded4 <ucdr_check_final_buffer_behavior>
 800d72e:	b1b0      	cbz	r0, 800d75e <ucdr_deserialize_uint32_t+0xc6>
 800d730:	7d23      	ldrb	r3, [r4, #20]
 800d732:	2b01      	cmp	r3, #1
 800d734:	68a3      	ldr	r3, [r4, #8]
 800d736:	d017      	beq.n	800d768 <ucdr_deserialize_uint32_t+0xd0>
 800d738:	78db      	ldrb	r3, [r3, #3]
 800d73a:	702b      	strb	r3, [r5, #0]
 800d73c:	68a3      	ldr	r3, [r4, #8]
 800d73e:	789b      	ldrb	r3, [r3, #2]
 800d740:	706b      	strb	r3, [r5, #1]
 800d742:	68a3      	ldr	r3, [r4, #8]
 800d744:	785b      	ldrb	r3, [r3, #1]
 800d746:	70ab      	strb	r3, [r5, #2]
 800d748:	68a3      	ldr	r3, [r4, #8]
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	70eb      	strb	r3, [r5, #3]
 800d74e:	68a2      	ldr	r2, [r4, #8]
 800d750:	6923      	ldr	r3, [r4, #16]
 800d752:	3204      	adds	r2, #4
 800d754:	3304      	adds	r3, #4
 800d756:	2104      	movs	r1, #4
 800d758:	60a2      	str	r2, [r4, #8]
 800d75a:	6123      	str	r3, [r4, #16]
 800d75c:	7561      	strb	r1, [r4, #21]
 800d75e:	7da0      	ldrb	r0, [r4, #22]
 800d760:	f080 0001 	eor.w	r0, r0, #1
 800d764:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	602b      	str	r3, [r5, #0]
 800d76c:	e7ef      	b.n	800d74e <ucdr_deserialize_uint32_t+0xb6>
 800d76e:	68a2      	ldr	r2, [r4, #8]
 800d770:	6923      	ldr	r3, [r4, #16]
 800d772:	7da0      	ldrb	r0, [r4, #22]
 800d774:	f884 8015 	strb.w	r8, [r4, #21]
 800d778:	1bd2      	subs	r2, r2, r7
 800d77a:	1bdb      	subs	r3, r3, r7
 800d77c:	60a2      	str	r2, [r4, #8]
 800d77e:	6123      	str	r3, [r4, #16]
 800d780:	f080 0001 	eor.w	r0, r0, #1
 800d784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d788:	68a3      	ldr	r3, [r4, #8]
 800d78a:	789b      	ldrb	r3, [r3, #2]
 800d78c:	706b      	strb	r3, [r5, #1]
 800d78e:	1cab      	adds	r3, r5, #2
 800d790:	68a2      	ldr	r2, [r4, #8]
 800d792:	7852      	ldrb	r2, [r2, #1]
 800d794:	f803 2b01 	strb.w	r2, [r3], #1
 800d798:	68a2      	ldr	r2, [r4, #8]
 800d79a:	7812      	ldrb	r2, [r2, #0]
 800d79c:	701a      	strb	r2, [r3, #0]
 800d79e:	e7b4      	b.n	800d70a <ucdr_deserialize_uint32_t+0x72>
 800d7a0:	4631      	mov	r1, r6
 800d7a2:	463a      	mov	r2, r7
 800d7a4:	4628      	mov	r0, r5
 800d7a6:	f00a fa10 	bl	8017bca <memcpy>
 800d7aa:	68a1      	ldr	r1, [r4, #8]
 800d7ac:	464a      	mov	r2, r9
 800d7ae:	19e8      	adds	r0, r5, r7
 800d7b0:	f00a fa0b 	bl	8017bca <memcpy>
 800d7b4:	e7a9      	b.n	800d70a <ucdr_deserialize_uint32_t+0x72>
 800d7b6:	bf00      	nop

0800d7b8 <ucdr_deserialize_endian_uint32_t>:
 800d7b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7bc:	460e      	mov	r6, r1
 800d7be:	2104      	movs	r1, #4
 800d7c0:	4604      	mov	r4, r0
 800d7c2:	4615      	mov	r5, r2
 800d7c4:	f000 fbda 	bl	800df7c <ucdr_buffer_alignment>
 800d7c8:	4601      	mov	r1, r0
 800d7ca:	4620      	mov	r0, r4
 800d7cc:	f894 9015 	ldrb.w	r9, [r4, #21]
 800d7d0:	f000 fc18 	bl	800e004 <ucdr_advance_buffer>
 800d7d4:	2104      	movs	r1, #4
 800d7d6:	4620      	mov	r0, r4
 800d7d8:	f000 fb70 	bl	800debc <ucdr_check_buffer_available_for>
 800d7dc:	2800      	cmp	r0, #0
 800d7de:	d13c      	bne.n	800d85a <ucdr_deserialize_endian_uint32_t+0xa2>
 800d7e0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800d7e4:	42bb      	cmp	r3, r7
 800d7e6:	d933      	bls.n	800d850 <ucdr_deserialize_endian_uint32_t+0x98>
 800d7e8:	eba3 0807 	sub.w	r8, r3, r7
 800d7ec:	60a3      	str	r3, [r4, #8]
 800d7ee:	6923      	ldr	r3, [r4, #16]
 800d7f0:	f1c8 0a04 	rsb	sl, r8, #4
 800d7f4:	4443      	add	r3, r8
 800d7f6:	6123      	str	r3, [r4, #16]
 800d7f8:	4651      	mov	r1, sl
 800d7fa:	4620      	mov	r0, r4
 800d7fc:	f000 fb6a 	bl	800ded4 <ucdr_check_final_buffer_behavior>
 800d800:	2800      	cmp	r0, #0
 800d802:	d048      	beq.n	800d896 <ucdr_deserialize_endian_uint32_t+0xde>
 800d804:	2e01      	cmp	r6, #1
 800d806:	d061      	beq.n	800d8cc <ucdr_deserialize_endian_uint32_t+0x114>
 800d808:	78fb      	ldrb	r3, [r7, #3]
 800d80a:	702b      	strb	r3, [r5, #0]
 800d80c:	f1b8 0f00 	cmp.w	r8, #0
 800d810:	d050      	beq.n	800d8b4 <ucdr_deserialize_endian_uint32_t+0xfc>
 800d812:	78bb      	ldrb	r3, [r7, #2]
 800d814:	706b      	strb	r3, [r5, #1]
 800d816:	f1b8 0f01 	cmp.w	r8, #1
 800d81a:	f105 0302 	add.w	r3, r5, #2
 800d81e:	d04d      	beq.n	800d8bc <ucdr_deserialize_endian_uint32_t+0x104>
 800d820:	787b      	ldrb	r3, [r7, #1]
 800d822:	70ab      	strb	r3, [r5, #2]
 800d824:	f1b8 0f02 	cmp.w	r8, #2
 800d828:	f105 0303 	add.w	r3, r5, #3
 800d82c:	d04a      	beq.n	800d8c4 <ucdr_deserialize_endian_uint32_t+0x10c>
 800d82e:	783b      	ldrb	r3, [r7, #0]
 800d830:	70eb      	strb	r3, [r5, #3]
 800d832:	6923      	ldr	r3, [r4, #16]
 800d834:	68a2      	ldr	r2, [r4, #8]
 800d836:	7da0      	ldrb	r0, [r4, #22]
 800d838:	2104      	movs	r1, #4
 800d83a:	3304      	adds	r3, #4
 800d83c:	4452      	add	r2, sl
 800d83e:	eba3 0308 	sub.w	r3, r3, r8
 800d842:	7561      	strb	r1, [r4, #21]
 800d844:	60a2      	str	r2, [r4, #8]
 800d846:	6123      	str	r3, [r4, #16]
 800d848:	f080 0001 	eor.w	r0, r0, #1
 800d84c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d850:	2104      	movs	r1, #4
 800d852:	4620      	mov	r0, r4
 800d854:	f000 fb3e 	bl	800ded4 <ucdr_check_final_buffer_behavior>
 800d858:	b1a8      	cbz	r0, 800d886 <ucdr_deserialize_endian_uint32_t+0xce>
 800d85a:	2e01      	cmp	r6, #1
 800d85c:	68a3      	ldr	r3, [r4, #8]
 800d85e:	d017      	beq.n	800d890 <ucdr_deserialize_endian_uint32_t+0xd8>
 800d860:	78db      	ldrb	r3, [r3, #3]
 800d862:	702b      	strb	r3, [r5, #0]
 800d864:	68a3      	ldr	r3, [r4, #8]
 800d866:	789b      	ldrb	r3, [r3, #2]
 800d868:	706b      	strb	r3, [r5, #1]
 800d86a:	68a3      	ldr	r3, [r4, #8]
 800d86c:	785b      	ldrb	r3, [r3, #1]
 800d86e:	70ab      	strb	r3, [r5, #2]
 800d870:	68a3      	ldr	r3, [r4, #8]
 800d872:	781b      	ldrb	r3, [r3, #0]
 800d874:	70eb      	strb	r3, [r5, #3]
 800d876:	68a2      	ldr	r2, [r4, #8]
 800d878:	6923      	ldr	r3, [r4, #16]
 800d87a:	3204      	adds	r2, #4
 800d87c:	3304      	adds	r3, #4
 800d87e:	2104      	movs	r1, #4
 800d880:	60a2      	str	r2, [r4, #8]
 800d882:	6123      	str	r3, [r4, #16]
 800d884:	7561      	strb	r1, [r4, #21]
 800d886:	7da0      	ldrb	r0, [r4, #22]
 800d888:	f080 0001 	eor.w	r0, r0, #1
 800d88c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	602b      	str	r3, [r5, #0]
 800d894:	e7ef      	b.n	800d876 <ucdr_deserialize_endian_uint32_t+0xbe>
 800d896:	68a2      	ldr	r2, [r4, #8]
 800d898:	6923      	ldr	r3, [r4, #16]
 800d89a:	7da0      	ldrb	r0, [r4, #22]
 800d89c:	f884 9015 	strb.w	r9, [r4, #21]
 800d8a0:	eba2 0208 	sub.w	r2, r2, r8
 800d8a4:	eba3 0308 	sub.w	r3, r3, r8
 800d8a8:	60a2      	str	r2, [r4, #8]
 800d8aa:	6123      	str	r3, [r4, #16]
 800d8ac:	f080 0001 	eor.w	r0, r0, #1
 800d8b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8b4:	68a3      	ldr	r3, [r4, #8]
 800d8b6:	789b      	ldrb	r3, [r3, #2]
 800d8b8:	706b      	strb	r3, [r5, #1]
 800d8ba:	1cab      	adds	r3, r5, #2
 800d8bc:	68a2      	ldr	r2, [r4, #8]
 800d8be:	7852      	ldrb	r2, [r2, #1]
 800d8c0:	f803 2b01 	strb.w	r2, [r3], #1
 800d8c4:	68a2      	ldr	r2, [r4, #8]
 800d8c6:	7812      	ldrb	r2, [r2, #0]
 800d8c8:	701a      	strb	r2, [r3, #0]
 800d8ca:	e7b2      	b.n	800d832 <ucdr_deserialize_endian_uint32_t+0x7a>
 800d8cc:	4639      	mov	r1, r7
 800d8ce:	4642      	mov	r2, r8
 800d8d0:	4628      	mov	r0, r5
 800d8d2:	f00a f97a 	bl	8017bca <memcpy>
 800d8d6:	68a1      	ldr	r1, [r4, #8]
 800d8d8:	4652      	mov	r2, sl
 800d8da:	eb05 0008 	add.w	r0, r5, r8
 800d8de:	f00a f974 	bl	8017bca <memcpy>
 800d8e2:	e7a6      	b.n	800d832 <ucdr_deserialize_endian_uint32_t+0x7a>

0800d8e4 <ucdr_serialize_uint64_t>:
 800d8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8e8:	2108      	movs	r1, #8
 800d8ea:	b082      	sub	sp, #8
 800d8ec:	4604      	mov	r4, r0
 800d8ee:	e9cd 2300 	strd	r2, r3, [sp]
 800d8f2:	f000 fb43 	bl	800df7c <ucdr_buffer_alignment>
 800d8f6:	4601      	mov	r1, r0
 800d8f8:	4620      	mov	r0, r4
 800d8fa:	7d67      	ldrb	r7, [r4, #21]
 800d8fc:	f000 fb82 	bl	800e004 <ucdr_advance_buffer>
 800d900:	2108      	movs	r1, #8
 800d902:	4620      	mov	r0, r4
 800d904:	f000 fada 	bl	800debc <ucdr_check_buffer_available_for>
 800d908:	2800      	cmp	r0, #0
 800d90a:	d14e      	bne.n	800d9aa <ucdr_serialize_uint64_t+0xc6>
 800d90c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d910:	42ab      	cmp	r3, r5
 800d912:	d945      	bls.n	800d9a0 <ucdr_serialize_uint64_t+0xbc>
 800d914:	1b5e      	subs	r6, r3, r5
 800d916:	60a3      	str	r3, [r4, #8]
 800d918:	6923      	ldr	r3, [r4, #16]
 800d91a:	f1c6 0808 	rsb	r8, r6, #8
 800d91e:	4433      	add	r3, r6
 800d920:	6123      	str	r3, [r4, #16]
 800d922:	4641      	mov	r1, r8
 800d924:	4620      	mov	r0, r4
 800d926:	f000 fad5 	bl	800ded4 <ucdr_check_final_buffer_behavior>
 800d92a:	2800      	cmp	r0, #0
 800d92c:	d074      	beq.n	800da18 <ucdr_serialize_uint64_t+0x134>
 800d92e:	7d23      	ldrb	r3, [r4, #20]
 800d930:	2b01      	cmp	r3, #1
 800d932:	f000 809b 	beq.w	800da6c <ucdr_serialize_uint64_t+0x188>
 800d936:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d93a:	702b      	strb	r3, [r5, #0]
 800d93c:	2e00      	cmp	r6, #0
 800d93e:	d078      	beq.n	800da32 <ucdr_serialize_uint64_t+0x14e>
 800d940:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d944:	706b      	strb	r3, [r5, #1]
 800d946:	2e01      	cmp	r6, #1
 800d948:	d077      	beq.n	800da3a <ucdr_serialize_uint64_t+0x156>
 800d94a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d94e:	70ab      	strb	r3, [r5, #2]
 800d950:	2e02      	cmp	r6, #2
 800d952:	d076      	beq.n	800da42 <ucdr_serialize_uint64_t+0x15e>
 800d954:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d958:	70eb      	strb	r3, [r5, #3]
 800d95a:	2e03      	cmp	r6, #3
 800d95c:	d075      	beq.n	800da4a <ucdr_serialize_uint64_t+0x166>
 800d95e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d962:	712b      	strb	r3, [r5, #4]
 800d964:	2e04      	cmp	r6, #4
 800d966:	d074      	beq.n	800da52 <ucdr_serialize_uint64_t+0x16e>
 800d968:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800d96c:	716b      	strb	r3, [r5, #5]
 800d96e:	2e05      	cmp	r6, #5
 800d970:	d073      	beq.n	800da5a <ucdr_serialize_uint64_t+0x176>
 800d972:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d976:	71ab      	strb	r3, [r5, #6]
 800d978:	2e06      	cmp	r6, #6
 800d97a:	d072      	beq.n	800da62 <ucdr_serialize_uint64_t+0x17e>
 800d97c:	f89d 3000 	ldrb.w	r3, [sp]
 800d980:	71eb      	strb	r3, [r5, #7]
 800d982:	6923      	ldr	r3, [r4, #16]
 800d984:	68a2      	ldr	r2, [r4, #8]
 800d986:	7da0      	ldrb	r0, [r4, #22]
 800d988:	3308      	adds	r3, #8
 800d98a:	1b9e      	subs	r6, r3, r6
 800d98c:	4442      	add	r2, r8
 800d98e:	2308      	movs	r3, #8
 800d990:	f080 0001 	eor.w	r0, r0, #1
 800d994:	60a2      	str	r2, [r4, #8]
 800d996:	6126      	str	r6, [r4, #16]
 800d998:	7563      	strb	r3, [r4, #21]
 800d99a:	b002      	add	sp, #8
 800d99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9a0:	2108      	movs	r1, #8
 800d9a2:	4620      	mov	r0, r4
 800d9a4:	f000 fa96 	bl	800ded4 <ucdr_check_final_buffer_behavior>
 800d9a8:	b350      	cbz	r0, 800da00 <ucdr_serialize_uint64_t+0x11c>
 800d9aa:	7d23      	ldrb	r3, [r4, #20]
 800d9ac:	2b01      	cmp	r3, #1
 800d9ae:	d02d      	beq.n	800da0c <ucdr_serialize_uint64_t+0x128>
 800d9b0:	68a3      	ldr	r3, [r4, #8]
 800d9b2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d9b6:	701a      	strb	r2, [r3, #0]
 800d9b8:	68a3      	ldr	r3, [r4, #8]
 800d9ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d9be:	705a      	strb	r2, [r3, #1]
 800d9c0:	68a3      	ldr	r3, [r4, #8]
 800d9c2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d9c6:	709a      	strb	r2, [r3, #2]
 800d9c8:	68a3      	ldr	r3, [r4, #8]
 800d9ca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d9ce:	70da      	strb	r2, [r3, #3]
 800d9d0:	68a3      	ldr	r3, [r4, #8]
 800d9d2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d9d6:	711a      	strb	r2, [r3, #4]
 800d9d8:	68a3      	ldr	r3, [r4, #8]
 800d9da:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d9de:	715a      	strb	r2, [r3, #5]
 800d9e0:	68a3      	ldr	r3, [r4, #8]
 800d9e2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d9e6:	719a      	strb	r2, [r3, #6]
 800d9e8:	68a3      	ldr	r3, [r4, #8]
 800d9ea:	f89d 2000 	ldrb.w	r2, [sp]
 800d9ee:	71da      	strb	r2, [r3, #7]
 800d9f0:	68a2      	ldr	r2, [r4, #8]
 800d9f2:	6923      	ldr	r3, [r4, #16]
 800d9f4:	3208      	adds	r2, #8
 800d9f6:	3308      	adds	r3, #8
 800d9f8:	2108      	movs	r1, #8
 800d9fa:	60a2      	str	r2, [r4, #8]
 800d9fc:	6123      	str	r3, [r4, #16]
 800d9fe:	7561      	strb	r1, [r4, #21]
 800da00:	7da0      	ldrb	r0, [r4, #22]
 800da02:	f080 0001 	eor.w	r0, r0, #1
 800da06:	b002      	add	sp, #8
 800da08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da0c:	466b      	mov	r3, sp
 800da0e:	cb03      	ldmia	r3!, {r0, r1}
 800da10:	68a3      	ldr	r3, [r4, #8]
 800da12:	6018      	str	r0, [r3, #0]
 800da14:	6059      	str	r1, [r3, #4]
 800da16:	e7eb      	b.n	800d9f0 <ucdr_serialize_uint64_t+0x10c>
 800da18:	68a2      	ldr	r2, [r4, #8]
 800da1a:	6923      	ldr	r3, [r4, #16]
 800da1c:	7da0      	ldrb	r0, [r4, #22]
 800da1e:	7567      	strb	r7, [r4, #21]
 800da20:	1b92      	subs	r2, r2, r6
 800da22:	1b9b      	subs	r3, r3, r6
 800da24:	f080 0001 	eor.w	r0, r0, #1
 800da28:	60a2      	str	r2, [r4, #8]
 800da2a:	6123      	str	r3, [r4, #16]
 800da2c:	b002      	add	sp, #8
 800da2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da32:	68a3      	ldr	r3, [r4, #8]
 800da34:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800da38:	701a      	strb	r2, [r3, #0]
 800da3a:	68a3      	ldr	r3, [r4, #8]
 800da3c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800da40:	701a      	strb	r2, [r3, #0]
 800da42:	68a3      	ldr	r3, [r4, #8]
 800da44:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800da48:	701a      	strb	r2, [r3, #0]
 800da4a:	68a3      	ldr	r3, [r4, #8]
 800da4c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800da50:	701a      	strb	r2, [r3, #0]
 800da52:	68a3      	ldr	r3, [r4, #8]
 800da54:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800da58:	701a      	strb	r2, [r3, #0]
 800da5a:	68a3      	ldr	r3, [r4, #8]
 800da5c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800da60:	701a      	strb	r2, [r3, #0]
 800da62:	68a3      	ldr	r3, [r4, #8]
 800da64:	f89d 2000 	ldrb.w	r2, [sp]
 800da68:	701a      	strb	r2, [r3, #0]
 800da6a:	e78a      	b.n	800d982 <ucdr_serialize_uint64_t+0x9e>
 800da6c:	4628      	mov	r0, r5
 800da6e:	466d      	mov	r5, sp
 800da70:	4629      	mov	r1, r5
 800da72:	4632      	mov	r2, r6
 800da74:	f00a f8a9 	bl	8017bca <memcpy>
 800da78:	68a0      	ldr	r0, [r4, #8]
 800da7a:	4642      	mov	r2, r8
 800da7c:	19a9      	adds	r1, r5, r6
 800da7e:	f00a f8a4 	bl	8017bca <memcpy>
 800da82:	e77e      	b.n	800d982 <ucdr_serialize_uint64_t+0x9e>

0800da84 <ucdr_serialize_int16_t>:
 800da84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da88:	b082      	sub	sp, #8
 800da8a:	460b      	mov	r3, r1
 800da8c:	2102      	movs	r1, #2
 800da8e:	4604      	mov	r4, r0
 800da90:	f8ad 3006 	strh.w	r3, [sp, #6]
 800da94:	f000 fa72 	bl	800df7c <ucdr_buffer_alignment>
 800da98:	4601      	mov	r1, r0
 800da9a:	4620      	mov	r0, r4
 800da9c:	7d67      	ldrb	r7, [r4, #21]
 800da9e:	f000 fab1 	bl	800e004 <ucdr_advance_buffer>
 800daa2:	2102      	movs	r1, #2
 800daa4:	4620      	mov	r0, r4
 800daa6:	f000 fa09 	bl	800debc <ucdr_check_buffer_available_for>
 800daaa:	bb78      	cbnz	r0, 800db0c <ucdr_serialize_int16_t+0x88>
 800daac:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800dab0:	42ab      	cmp	r3, r5
 800dab2:	d926      	bls.n	800db02 <ucdr_serialize_int16_t+0x7e>
 800dab4:	1b5e      	subs	r6, r3, r5
 800dab6:	60a3      	str	r3, [r4, #8]
 800dab8:	6923      	ldr	r3, [r4, #16]
 800daba:	f1c6 0802 	rsb	r8, r6, #2
 800dabe:	4433      	add	r3, r6
 800dac0:	6123      	str	r3, [r4, #16]
 800dac2:	4641      	mov	r1, r8
 800dac4:	4620      	mov	r0, r4
 800dac6:	f000 fa05 	bl	800ded4 <ucdr_check_final_buffer_behavior>
 800daca:	2800      	cmp	r0, #0
 800dacc:	d03b      	beq.n	800db46 <ucdr_serialize_int16_t+0xc2>
 800dace:	7d23      	ldrb	r3, [r4, #20]
 800dad0:	2b01      	cmp	r3, #1
 800dad2:	d04a      	beq.n	800db6a <ucdr_serialize_int16_t+0xe6>
 800dad4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dad8:	702b      	strb	r3, [r5, #0]
 800dada:	2e00      	cmp	r6, #0
 800dadc:	d040      	beq.n	800db60 <ucdr_serialize_int16_t+0xdc>
 800dade:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dae2:	706b      	strb	r3, [r5, #1]
 800dae4:	6923      	ldr	r3, [r4, #16]
 800dae6:	68a2      	ldr	r2, [r4, #8]
 800dae8:	7da0      	ldrb	r0, [r4, #22]
 800daea:	3302      	adds	r3, #2
 800daec:	1b9e      	subs	r6, r3, r6
 800daee:	4442      	add	r2, r8
 800daf0:	2302      	movs	r3, #2
 800daf2:	f080 0001 	eor.w	r0, r0, #1
 800daf6:	60a2      	str	r2, [r4, #8]
 800daf8:	6126      	str	r6, [r4, #16]
 800dafa:	7563      	strb	r3, [r4, #21]
 800dafc:	b002      	add	sp, #8
 800dafe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db02:	2102      	movs	r1, #2
 800db04:	4620      	mov	r0, r4
 800db06:	f000 f9e5 	bl	800ded4 <ucdr_check_final_buffer_behavior>
 800db0a:	b190      	cbz	r0, 800db32 <ucdr_serialize_int16_t+0xae>
 800db0c:	7d23      	ldrb	r3, [r4, #20]
 800db0e:	2b01      	cmp	r3, #1
 800db10:	68a3      	ldr	r3, [r4, #8]
 800db12:	d014      	beq.n	800db3e <ucdr_serialize_int16_t+0xba>
 800db14:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800db18:	701a      	strb	r2, [r3, #0]
 800db1a:	68a3      	ldr	r3, [r4, #8]
 800db1c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800db20:	705a      	strb	r2, [r3, #1]
 800db22:	68a2      	ldr	r2, [r4, #8]
 800db24:	6923      	ldr	r3, [r4, #16]
 800db26:	3202      	adds	r2, #2
 800db28:	3302      	adds	r3, #2
 800db2a:	2102      	movs	r1, #2
 800db2c:	60a2      	str	r2, [r4, #8]
 800db2e:	6123      	str	r3, [r4, #16]
 800db30:	7561      	strb	r1, [r4, #21]
 800db32:	7da0      	ldrb	r0, [r4, #22]
 800db34:	f080 0001 	eor.w	r0, r0, #1
 800db38:	b002      	add	sp, #8
 800db3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db3e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800db42:	801a      	strh	r2, [r3, #0]
 800db44:	e7ed      	b.n	800db22 <ucdr_serialize_int16_t+0x9e>
 800db46:	68a2      	ldr	r2, [r4, #8]
 800db48:	6923      	ldr	r3, [r4, #16]
 800db4a:	7da0      	ldrb	r0, [r4, #22]
 800db4c:	7567      	strb	r7, [r4, #21]
 800db4e:	1b92      	subs	r2, r2, r6
 800db50:	1b9b      	subs	r3, r3, r6
 800db52:	f080 0001 	eor.w	r0, r0, #1
 800db56:	60a2      	str	r2, [r4, #8]
 800db58:	6123      	str	r3, [r4, #16]
 800db5a:	b002      	add	sp, #8
 800db5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db60:	68a3      	ldr	r3, [r4, #8]
 800db62:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800db66:	701a      	strb	r2, [r3, #0]
 800db68:	e7bc      	b.n	800dae4 <ucdr_serialize_int16_t+0x60>
 800db6a:	4628      	mov	r0, r5
 800db6c:	f10d 0506 	add.w	r5, sp, #6
 800db70:	4629      	mov	r1, r5
 800db72:	4632      	mov	r2, r6
 800db74:	f00a f829 	bl	8017bca <memcpy>
 800db78:	68a0      	ldr	r0, [r4, #8]
 800db7a:	4642      	mov	r2, r8
 800db7c:	19a9      	adds	r1, r5, r6
 800db7e:	f00a f824 	bl	8017bca <memcpy>
 800db82:	e7af      	b.n	800dae4 <ucdr_serialize_int16_t+0x60>

0800db84 <ucdr_deserialize_int16_t>:
 800db84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db88:	460d      	mov	r5, r1
 800db8a:	2102      	movs	r1, #2
 800db8c:	4604      	mov	r4, r0
 800db8e:	f000 f9f5 	bl	800df7c <ucdr_buffer_alignment>
 800db92:	4601      	mov	r1, r0
 800db94:	4620      	mov	r0, r4
 800db96:	f894 8015 	ldrb.w	r8, [r4, #21]
 800db9a:	f000 fa33 	bl	800e004 <ucdr_advance_buffer>
 800db9e:	2102      	movs	r1, #2
 800dba0:	4620      	mov	r0, r4
 800dba2:	f000 f98b 	bl	800debc <ucdr_check_buffer_available_for>
 800dba6:	bb60      	cbnz	r0, 800dc02 <ucdr_deserialize_int16_t+0x7e>
 800dba8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800dbac:	42be      	cmp	r6, r7
 800dbae:	d923      	bls.n	800dbf8 <ucdr_deserialize_int16_t+0x74>
 800dbb0:	6923      	ldr	r3, [r4, #16]
 800dbb2:	60a6      	str	r6, [r4, #8]
 800dbb4:	1bf6      	subs	r6, r6, r7
 800dbb6:	4433      	add	r3, r6
 800dbb8:	f1c6 0902 	rsb	r9, r6, #2
 800dbbc:	6123      	str	r3, [r4, #16]
 800dbbe:	4649      	mov	r1, r9
 800dbc0:	4620      	mov	r0, r4
 800dbc2:	f000 f987 	bl	800ded4 <ucdr_check_final_buffer_behavior>
 800dbc6:	2800      	cmp	r0, #0
 800dbc8:	d034      	beq.n	800dc34 <ucdr_deserialize_int16_t+0xb0>
 800dbca:	7d23      	ldrb	r3, [r4, #20]
 800dbcc:	2b01      	cmp	r3, #1
 800dbce:	d042      	beq.n	800dc56 <ucdr_deserialize_int16_t+0xd2>
 800dbd0:	787b      	ldrb	r3, [r7, #1]
 800dbd2:	702b      	strb	r3, [r5, #0]
 800dbd4:	2e00      	cmp	r6, #0
 800dbd6:	d03a      	beq.n	800dc4e <ucdr_deserialize_int16_t+0xca>
 800dbd8:	783b      	ldrb	r3, [r7, #0]
 800dbda:	706b      	strb	r3, [r5, #1]
 800dbdc:	6923      	ldr	r3, [r4, #16]
 800dbde:	68a2      	ldr	r2, [r4, #8]
 800dbe0:	7da0      	ldrb	r0, [r4, #22]
 800dbe2:	2102      	movs	r1, #2
 800dbe4:	3302      	adds	r3, #2
 800dbe6:	444a      	add	r2, r9
 800dbe8:	1b9b      	subs	r3, r3, r6
 800dbea:	7561      	strb	r1, [r4, #21]
 800dbec:	60a2      	str	r2, [r4, #8]
 800dbee:	6123      	str	r3, [r4, #16]
 800dbf0:	f080 0001 	eor.w	r0, r0, #1
 800dbf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbf8:	2102      	movs	r1, #2
 800dbfa:	4620      	mov	r0, r4
 800dbfc:	f000 f96a 	bl	800ded4 <ucdr_check_final_buffer_behavior>
 800dc00:	b180      	cbz	r0, 800dc24 <ucdr_deserialize_int16_t+0xa0>
 800dc02:	7d23      	ldrb	r3, [r4, #20]
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	68a3      	ldr	r3, [r4, #8]
 800dc08:	d011      	beq.n	800dc2e <ucdr_deserialize_int16_t+0xaa>
 800dc0a:	785b      	ldrb	r3, [r3, #1]
 800dc0c:	702b      	strb	r3, [r5, #0]
 800dc0e:	68a3      	ldr	r3, [r4, #8]
 800dc10:	781b      	ldrb	r3, [r3, #0]
 800dc12:	706b      	strb	r3, [r5, #1]
 800dc14:	68a2      	ldr	r2, [r4, #8]
 800dc16:	6923      	ldr	r3, [r4, #16]
 800dc18:	3202      	adds	r2, #2
 800dc1a:	3302      	adds	r3, #2
 800dc1c:	2102      	movs	r1, #2
 800dc1e:	60a2      	str	r2, [r4, #8]
 800dc20:	6123      	str	r3, [r4, #16]
 800dc22:	7561      	strb	r1, [r4, #21]
 800dc24:	7da0      	ldrb	r0, [r4, #22]
 800dc26:	f080 0001 	eor.w	r0, r0, #1
 800dc2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc2e:	881b      	ldrh	r3, [r3, #0]
 800dc30:	802b      	strh	r3, [r5, #0]
 800dc32:	e7ef      	b.n	800dc14 <ucdr_deserialize_int16_t+0x90>
 800dc34:	68a2      	ldr	r2, [r4, #8]
 800dc36:	6923      	ldr	r3, [r4, #16]
 800dc38:	7da0      	ldrb	r0, [r4, #22]
 800dc3a:	f884 8015 	strb.w	r8, [r4, #21]
 800dc3e:	1b92      	subs	r2, r2, r6
 800dc40:	1b9b      	subs	r3, r3, r6
 800dc42:	60a2      	str	r2, [r4, #8]
 800dc44:	6123      	str	r3, [r4, #16]
 800dc46:	f080 0001 	eor.w	r0, r0, #1
 800dc4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc4e:	68a3      	ldr	r3, [r4, #8]
 800dc50:	781b      	ldrb	r3, [r3, #0]
 800dc52:	706b      	strb	r3, [r5, #1]
 800dc54:	e7c2      	b.n	800dbdc <ucdr_deserialize_int16_t+0x58>
 800dc56:	4639      	mov	r1, r7
 800dc58:	4632      	mov	r2, r6
 800dc5a:	4628      	mov	r0, r5
 800dc5c:	f009 ffb5 	bl	8017bca <memcpy>
 800dc60:	68a1      	ldr	r1, [r4, #8]
 800dc62:	464a      	mov	r2, r9
 800dc64:	19a8      	adds	r0, r5, r6
 800dc66:	f009 ffb0 	bl	8017bca <memcpy>
 800dc6a:	e7b7      	b.n	800dbdc <ucdr_deserialize_int16_t+0x58>

0800dc6c <ucdr_serialize_int32_t>:
 800dc6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc70:	b082      	sub	sp, #8
 800dc72:	4604      	mov	r4, r0
 800dc74:	9101      	str	r1, [sp, #4]
 800dc76:	2104      	movs	r1, #4
 800dc78:	f000 f980 	bl	800df7c <ucdr_buffer_alignment>
 800dc7c:	4601      	mov	r1, r0
 800dc7e:	4620      	mov	r0, r4
 800dc80:	7d67      	ldrb	r7, [r4, #21]
 800dc82:	f000 f9bf 	bl	800e004 <ucdr_advance_buffer>
 800dc86:	2104      	movs	r1, #4
 800dc88:	4620      	mov	r0, r4
 800dc8a:	f000 f917 	bl	800debc <ucdr_check_buffer_available_for>
 800dc8e:	2800      	cmp	r0, #0
 800dc90:	d139      	bne.n	800dd06 <ucdr_serialize_int32_t+0x9a>
 800dc92:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800dc96:	42ab      	cmp	r3, r5
 800dc98:	d930      	bls.n	800dcfc <ucdr_serialize_int32_t+0x90>
 800dc9a:	1b5e      	subs	r6, r3, r5
 800dc9c:	60a3      	str	r3, [r4, #8]
 800dc9e:	6923      	ldr	r3, [r4, #16]
 800dca0:	f1c6 0804 	rsb	r8, r6, #4
 800dca4:	4433      	add	r3, r6
 800dca6:	6123      	str	r3, [r4, #16]
 800dca8:	4641      	mov	r1, r8
 800dcaa:	4620      	mov	r0, r4
 800dcac:	f000 f912 	bl	800ded4 <ucdr_check_final_buffer_behavior>
 800dcb0:	2800      	cmp	r0, #0
 800dcb2:	d04c      	beq.n	800dd4e <ucdr_serialize_int32_t+0xe2>
 800dcb4:	7d23      	ldrb	r3, [r4, #20]
 800dcb6:	2b01      	cmp	r3, #1
 800dcb8:	d063      	beq.n	800dd82 <ucdr_serialize_int32_t+0x116>
 800dcba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dcbe:	702b      	strb	r3, [r5, #0]
 800dcc0:	2e00      	cmp	r6, #0
 800dcc2:	d051      	beq.n	800dd68 <ucdr_serialize_int32_t+0xfc>
 800dcc4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dcc8:	706b      	strb	r3, [r5, #1]
 800dcca:	2e01      	cmp	r6, #1
 800dccc:	d050      	beq.n	800dd70 <ucdr_serialize_int32_t+0x104>
 800dcce:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dcd2:	70ab      	strb	r3, [r5, #2]
 800dcd4:	2e02      	cmp	r6, #2
 800dcd6:	d04f      	beq.n	800dd78 <ucdr_serialize_int32_t+0x10c>
 800dcd8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dcdc:	70eb      	strb	r3, [r5, #3]
 800dcde:	6923      	ldr	r3, [r4, #16]
 800dce0:	68a2      	ldr	r2, [r4, #8]
 800dce2:	7da0      	ldrb	r0, [r4, #22]
 800dce4:	3304      	adds	r3, #4
 800dce6:	1b9e      	subs	r6, r3, r6
 800dce8:	4442      	add	r2, r8
 800dcea:	2304      	movs	r3, #4
 800dcec:	f080 0001 	eor.w	r0, r0, #1
 800dcf0:	60a2      	str	r2, [r4, #8]
 800dcf2:	6126      	str	r6, [r4, #16]
 800dcf4:	7563      	strb	r3, [r4, #21]
 800dcf6:	b002      	add	sp, #8
 800dcf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcfc:	2104      	movs	r1, #4
 800dcfe:	4620      	mov	r0, r4
 800dd00:	f000 f8e8 	bl	800ded4 <ucdr_check_final_buffer_behavior>
 800dd04:	b1d0      	cbz	r0, 800dd3c <ucdr_serialize_int32_t+0xd0>
 800dd06:	7d23      	ldrb	r3, [r4, #20]
 800dd08:	2b01      	cmp	r3, #1
 800dd0a:	68a3      	ldr	r3, [r4, #8]
 800dd0c:	d01c      	beq.n	800dd48 <ucdr_serialize_int32_t+0xdc>
 800dd0e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800dd12:	701a      	strb	r2, [r3, #0]
 800dd14:	68a3      	ldr	r3, [r4, #8]
 800dd16:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dd1a:	705a      	strb	r2, [r3, #1]
 800dd1c:	68a3      	ldr	r3, [r4, #8]
 800dd1e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dd22:	709a      	strb	r2, [r3, #2]
 800dd24:	68a3      	ldr	r3, [r4, #8]
 800dd26:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dd2a:	70da      	strb	r2, [r3, #3]
 800dd2c:	68a2      	ldr	r2, [r4, #8]
 800dd2e:	6923      	ldr	r3, [r4, #16]
 800dd30:	3204      	adds	r2, #4
 800dd32:	3304      	adds	r3, #4
 800dd34:	2104      	movs	r1, #4
 800dd36:	60a2      	str	r2, [r4, #8]
 800dd38:	6123      	str	r3, [r4, #16]
 800dd3a:	7561      	strb	r1, [r4, #21]
 800dd3c:	7da0      	ldrb	r0, [r4, #22]
 800dd3e:	f080 0001 	eor.w	r0, r0, #1
 800dd42:	b002      	add	sp, #8
 800dd44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd48:	9a01      	ldr	r2, [sp, #4]
 800dd4a:	601a      	str	r2, [r3, #0]
 800dd4c:	e7ee      	b.n	800dd2c <ucdr_serialize_int32_t+0xc0>
 800dd4e:	68a2      	ldr	r2, [r4, #8]
 800dd50:	6923      	ldr	r3, [r4, #16]
 800dd52:	7da0      	ldrb	r0, [r4, #22]
 800dd54:	7567      	strb	r7, [r4, #21]
 800dd56:	1b92      	subs	r2, r2, r6
 800dd58:	1b9b      	subs	r3, r3, r6
 800dd5a:	f080 0001 	eor.w	r0, r0, #1
 800dd5e:	60a2      	str	r2, [r4, #8]
 800dd60:	6123      	str	r3, [r4, #16]
 800dd62:	b002      	add	sp, #8
 800dd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd68:	68a3      	ldr	r3, [r4, #8]
 800dd6a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dd6e:	701a      	strb	r2, [r3, #0]
 800dd70:	68a3      	ldr	r3, [r4, #8]
 800dd72:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dd76:	701a      	strb	r2, [r3, #0]
 800dd78:	68a3      	ldr	r3, [r4, #8]
 800dd7a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dd7e:	701a      	strb	r2, [r3, #0]
 800dd80:	e7ad      	b.n	800dcde <ucdr_serialize_int32_t+0x72>
 800dd82:	4628      	mov	r0, r5
 800dd84:	ad01      	add	r5, sp, #4
 800dd86:	4629      	mov	r1, r5
 800dd88:	4632      	mov	r2, r6
 800dd8a:	f009 ff1e 	bl	8017bca <memcpy>
 800dd8e:	68a0      	ldr	r0, [r4, #8]
 800dd90:	4642      	mov	r2, r8
 800dd92:	19a9      	adds	r1, r5, r6
 800dd94:	f009 ff19 	bl	8017bca <memcpy>
 800dd98:	e7a1      	b.n	800dcde <ucdr_serialize_int32_t+0x72>
 800dd9a:	bf00      	nop

0800dd9c <ucdr_deserialize_int32_t>:
 800dd9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dda0:	460d      	mov	r5, r1
 800dda2:	2104      	movs	r1, #4
 800dda4:	4604      	mov	r4, r0
 800dda6:	f000 f8e9 	bl	800df7c <ucdr_buffer_alignment>
 800ddaa:	4601      	mov	r1, r0
 800ddac:	4620      	mov	r0, r4
 800ddae:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ddb2:	f000 f927 	bl	800e004 <ucdr_advance_buffer>
 800ddb6:	2104      	movs	r1, #4
 800ddb8:	4620      	mov	r0, r4
 800ddba:	f000 f87f 	bl	800debc <ucdr_check_buffer_available_for>
 800ddbe:	2800      	cmp	r0, #0
 800ddc0:	d138      	bne.n	800de34 <ucdr_deserialize_int32_t+0x98>
 800ddc2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ddc6:	42b7      	cmp	r7, r6
 800ddc8:	d92f      	bls.n	800de2a <ucdr_deserialize_int32_t+0x8e>
 800ddca:	6923      	ldr	r3, [r4, #16]
 800ddcc:	60a7      	str	r7, [r4, #8]
 800ddce:	1bbf      	subs	r7, r7, r6
 800ddd0:	443b      	add	r3, r7
 800ddd2:	f1c7 0904 	rsb	r9, r7, #4
 800ddd6:	6123      	str	r3, [r4, #16]
 800ddd8:	4649      	mov	r1, r9
 800ddda:	4620      	mov	r0, r4
 800dddc:	f000 f87a 	bl	800ded4 <ucdr_check_final_buffer_behavior>
 800dde0:	2800      	cmp	r0, #0
 800dde2:	d046      	beq.n	800de72 <ucdr_deserialize_int32_t+0xd6>
 800dde4:	7d23      	ldrb	r3, [r4, #20]
 800dde6:	2b01      	cmp	r3, #1
 800dde8:	d05c      	beq.n	800dea4 <ucdr_deserialize_int32_t+0x108>
 800ddea:	78f3      	ldrb	r3, [r6, #3]
 800ddec:	702b      	strb	r3, [r5, #0]
 800ddee:	2f00      	cmp	r7, #0
 800ddf0:	d04c      	beq.n	800de8c <ucdr_deserialize_int32_t+0xf0>
 800ddf2:	78b3      	ldrb	r3, [r6, #2]
 800ddf4:	706b      	strb	r3, [r5, #1]
 800ddf6:	2f01      	cmp	r7, #1
 800ddf8:	f105 0302 	add.w	r3, r5, #2
 800ddfc:	d04a      	beq.n	800de94 <ucdr_deserialize_int32_t+0xf8>
 800ddfe:	7873      	ldrb	r3, [r6, #1]
 800de00:	70ab      	strb	r3, [r5, #2]
 800de02:	2f02      	cmp	r7, #2
 800de04:	f105 0303 	add.w	r3, r5, #3
 800de08:	d048      	beq.n	800de9c <ucdr_deserialize_int32_t+0x100>
 800de0a:	7833      	ldrb	r3, [r6, #0]
 800de0c:	70eb      	strb	r3, [r5, #3]
 800de0e:	6923      	ldr	r3, [r4, #16]
 800de10:	68a2      	ldr	r2, [r4, #8]
 800de12:	7da0      	ldrb	r0, [r4, #22]
 800de14:	2104      	movs	r1, #4
 800de16:	3304      	adds	r3, #4
 800de18:	444a      	add	r2, r9
 800de1a:	1bdb      	subs	r3, r3, r7
 800de1c:	7561      	strb	r1, [r4, #21]
 800de1e:	60a2      	str	r2, [r4, #8]
 800de20:	6123      	str	r3, [r4, #16]
 800de22:	f080 0001 	eor.w	r0, r0, #1
 800de26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de2a:	2104      	movs	r1, #4
 800de2c:	4620      	mov	r0, r4
 800de2e:	f000 f851 	bl	800ded4 <ucdr_check_final_buffer_behavior>
 800de32:	b1b0      	cbz	r0, 800de62 <ucdr_deserialize_int32_t+0xc6>
 800de34:	7d23      	ldrb	r3, [r4, #20]
 800de36:	2b01      	cmp	r3, #1
 800de38:	68a3      	ldr	r3, [r4, #8]
 800de3a:	d017      	beq.n	800de6c <ucdr_deserialize_int32_t+0xd0>
 800de3c:	78db      	ldrb	r3, [r3, #3]
 800de3e:	702b      	strb	r3, [r5, #0]
 800de40:	68a3      	ldr	r3, [r4, #8]
 800de42:	789b      	ldrb	r3, [r3, #2]
 800de44:	706b      	strb	r3, [r5, #1]
 800de46:	68a3      	ldr	r3, [r4, #8]
 800de48:	785b      	ldrb	r3, [r3, #1]
 800de4a:	70ab      	strb	r3, [r5, #2]
 800de4c:	68a3      	ldr	r3, [r4, #8]
 800de4e:	781b      	ldrb	r3, [r3, #0]
 800de50:	70eb      	strb	r3, [r5, #3]
 800de52:	68a2      	ldr	r2, [r4, #8]
 800de54:	6923      	ldr	r3, [r4, #16]
 800de56:	3204      	adds	r2, #4
 800de58:	3304      	adds	r3, #4
 800de5a:	2104      	movs	r1, #4
 800de5c:	60a2      	str	r2, [r4, #8]
 800de5e:	6123      	str	r3, [r4, #16]
 800de60:	7561      	strb	r1, [r4, #21]
 800de62:	7da0      	ldrb	r0, [r4, #22]
 800de64:	f080 0001 	eor.w	r0, r0, #1
 800de68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	602b      	str	r3, [r5, #0]
 800de70:	e7ef      	b.n	800de52 <ucdr_deserialize_int32_t+0xb6>
 800de72:	68a2      	ldr	r2, [r4, #8]
 800de74:	6923      	ldr	r3, [r4, #16]
 800de76:	7da0      	ldrb	r0, [r4, #22]
 800de78:	f884 8015 	strb.w	r8, [r4, #21]
 800de7c:	1bd2      	subs	r2, r2, r7
 800de7e:	1bdb      	subs	r3, r3, r7
 800de80:	60a2      	str	r2, [r4, #8]
 800de82:	6123      	str	r3, [r4, #16]
 800de84:	f080 0001 	eor.w	r0, r0, #1
 800de88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de8c:	68a3      	ldr	r3, [r4, #8]
 800de8e:	789b      	ldrb	r3, [r3, #2]
 800de90:	706b      	strb	r3, [r5, #1]
 800de92:	1cab      	adds	r3, r5, #2
 800de94:	68a2      	ldr	r2, [r4, #8]
 800de96:	7852      	ldrb	r2, [r2, #1]
 800de98:	f803 2b01 	strb.w	r2, [r3], #1
 800de9c:	68a2      	ldr	r2, [r4, #8]
 800de9e:	7812      	ldrb	r2, [r2, #0]
 800dea0:	701a      	strb	r2, [r3, #0]
 800dea2:	e7b4      	b.n	800de0e <ucdr_deserialize_int32_t+0x72>
 800dea4:	4631      	mov	r1, r6
 800dea6:	463a      	mov	r2, r7
 800dea8:	4628      	mov	r0, r5
 800deaa:	f009 fe8e 	bl	8017bca <memcpy>
 800deae:	68a1      	ldr	r1, [r4, #8]
 800deb0:	464a      	mov	r2, r9
 800deb2:	19e8      	adds	r0, r5, r7
 800deb4:	f009 fe89 	bl	8017bca <memcpy>
 800deb8:	e7a9      	b.n	800de0e <ucdr_deserialize_int32_t+0x72>
 800deba:	bf00      	nop

0800debc <ucdr_check_buffer_available_for>:
 800debc:	7d83      	ldrb	r3, [r0, #22]
 800debe:	b93b      	cbnz	r3, 800ded0 <ucdr_check_buffer_available_for+0x14>
 800dec0:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800dec4:	4419      	add	r1, r3
 800dec6:	4288      	cmp	r0, r1
 800dec8:	bf34      	ite	cc
 800deca:	2000      	movcc	r0, #0
 800decc:	2001      	movcs	r0, #1
 800dece:	4770      	bx	lr
 800ded0:	2000      	movs	r0, #0
 800ded2:	4770      	bx	lr

0800ded4 <ucdr_check_final_buffer_behavior>:
 800ded4:	7d83      	ldrb	r3, [r0, #22]
 800ded6:	b943      	cbnz	r3, 800deea <ucdr_check_final_buffer_behavior+0x16>
 800ded8:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800dedc:	4291      	cmp	r1, r2
 800dede:	b510      	push	{r4, lr}
 800dee0:	4604      	mov	r4, r0
 800dee2:	d205      	bcs.n	800def0 <ucdr_check_final_buffer_behavior+0x1c>
 800dee4:	2301      	movs	r3, #1
 800dee6:	4618      	mov	r0, r3
 800dee8:	bd10      	pop	{r4, pc}
 800deea:	2300      	movs	r3, #0
 800deec:	4618      	mov	r0, r3
 800deee:	4770      	bx	lr
 800def0:	6982      	ldr	r2, [r0, #24]
 800def2:	b13a      	cbz	r2, 800df04 <ucdr_check_final_buffer_behavior+0x30>
 800def4:	69c1      	ldr	r1, [r0, #28]
 800def6:	4790      	blx	r2
 800def8:	f080 0301 	eor.w	r3, r0, #1
 800defc:	b2db      	uxtb	r3, r3
 800defe:	75a0      	strb	r0, [r4, #22]
 800df00:	4618      	mov	r0, r3
 800df02:	bd10      	pop	{r4, pc}
 800df04:	2001      	movs	r0, #1
 800df06:	75a0      	strb	r0, [r4, #22]
 800df08:	e7fa      	b.n	800df00 <ucdr_check_final_buffer_behavior+0x2c>
 800df0a:	bf00      	nop

0800df0c <ucdr_set_on_full_buffer_callback>:
 800df0c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800df10:	4770      	bx	lr
 800df12:	bf00      	nop

0800df14 <ucdr_init_buffer_origin_offset_endian>:
 800df14:	b410      	push	{r4}
 800df16:	9c01      	ldr	r4, [sp, #4]
 800df18:	6001      	str	r1, [r0, #0]
 800df1a:	440a      	add	r2, r1
 800df1c:	6042      	str	r2, [r0, #4]
 800df1e:	190a      	adds	r2, r1, r4
 800df20:	441c      	add	r4, r3
 800df22:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800df26:	6082      	str	r2, [r0, #8]
 800df28:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800df2c:	7503      	strb	r3, [r0, #20]
 800df2e:	2200      	movs	r2, #0
 800df30:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800df34:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df38:	7542      	strb	r2, [r0, #21]
 800df3a:	7582      	strb	r2, [r0, #22]
 800df3c:	4770      	bx	lr
 800df3e:	bf00      	nop

0800df40 <ucdr_init_buffer_origin_offset>:
 800df40:	b510      	push	{r4, lr}
 800df42:	b082      	sub	sp, #8
 800df44:	9c04      	ldr	r4, [sp, #16]
 800df46:	9400      	str	r4, [sp, #0]
 800df48:	2401      	movs	r4, #1
 800df4a:	9401      	str	r4, [sp, #4]
 800df4c:	f7ff ffe2 	bl	800df14 <ucdr_init_buffer_origin_offset_endian>
 800df50:	b002      	add	sp, #8
 800df52:	bd10      	pop	{r4, pc}

0800df54 <ucdr_init_buffer_origin>:
 800df54:	b510      	push	{r4, lr}
 800df56:	b082      	sub	sp, #8
 800df58:	2400      	movs	r4, #0
 800df5a:	9400      	str	r4, [sp, #0]
 800df5c:	f7ff fff0 	bl	800df40 <ucdr_init_buffer_origin_offset>
 800df60:	b002      	add	sp, #8
 800df62:	bd10      	pop	{r4, pc}

0800df64 <ucdr_init_buffer>:
 800df64:	2300      	movs	r3, #0
 800df66:	f7ff bff5 	b.w	800df54 <ucdr_init_buffer_origin>
 800df6a:	bf00      	nop

0800df6c <ucdr_alignment>:
 800df6c:	fbb0 f3f1 	udiv	r3, r0, r1
 800df70:	fb03 0011 	mls	r0, r3, r1, r0
 800df74:	1a08      	subs	r0, r1, r0
 800df76:	3901      	subs	r1, #1
 800df78:	4008      	ands	r0, r1
 800df7a:	4770      	bx	lr

0800df7c <ucdr_buffer_alignment>:
 800df7c:	7d43      	ldrb	r3, [r0, #21]
 800df7e:	428b      	cmp	r3, r1
 800df80:	d208      	bcs.n	800df94 <ucdr_buffer_alignment+0x18>
 800df82:	6900      	ldr	r0, [r0, #16]
 800df84:	fbb0 f3f1 	udiv	r3, r0, r1
 800df88:	fb01 0013 	mls	r0, r1, r3, r0
 800df8c:	1a08      	subs	r0, r1, r0
 800df8e:	3901      	subs	r1, #1
 800df90:	4008      	ands	r0, r1
 800df92:	4770      	bx	lr
 800df94:	2000      	movs	r0, #0
 800df96:	4770      	bx	lr

0800df98 <ucdr_align_to>:
 800df98:	b538      	push	{r3, r4, r5, lr}
 800df9a:	4604      	mov	r4, r0
 800df9c:	460d      	mov	r5, r1
 800df9e:	f7ff ffed 	bl	800df7c <ucdr_buffer_alignment>
 800dfa2:	68a3      	ldr	r3, [r4, #8]
 800dfa4:	6921      	ldr	r1, [r4, #16]
 800dfa6:	7565      	strb	r5, [r4, #21]
 800dfa8:	181a      	adds	r2, r3, r0
 800dfaa:	6863      	ldr	r3, [r4, #4]
 800dfac:	4293      	cmp	r3, r2
 800dfae:	4408      	add	r0, r1
 800dfb0:	bf28      	it	cs
 800dfb2:	4613      	movcs	r3, r2
 800dfb4:	6120      	str	r0, [r4, #16]
 800dfb6:	60a3      	str	r3, [r4, #8]
 800dfb8:	bd38      	pop	{r3, r4, r5, pc}
 800dfba:	bf00      	nop

0800dfbc <ucdr_buffer_length>:
 800dfbc:	6882      	ldr	r2, [r0, #8]
 800dfbe:	6800      	ldr	r0, [r0, #0]
 800dfc0:	1a10      	subs	r0, r2, r0
 800dfc2:	4770      	bx	lr

0800dfc4 <ucdr_buffer_remaining>:
 800dfc4:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800dfc8:	1a10      	subs	r0, r2, r0
 800dfca:	4770      	bx	lr

0800dfcc <ucdr_check_final_buffer_behavior_array>:
 800dfcc:	b538      	push	{r3, r4, r5, lr}
 800dfce:	7d83      	ldrb	r3, [r0, #22]
 800dfd0:	b963      	cbnz	r3, 800dfec <ucdr_check_final_buffer_behavior_array+0x20>
 800dfd2:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800dfd6:	429a      	cmp	r2, r3
 800dfd8:	4604      	mov	r4, r0
 800dfda:	460d      	mov	r5, r1
 800dfdc:	d308      	bcc.n	800dff0 <ucdr_check_final_buffer_behavior_array+0x24>
 800dfde:	b139      	cbz	r1, 800dff0 <ucdr_check_final_buffer_behavior_array+0x24>
 800dfe0:	6983      	ldr	r3, [r0, #24]
 800dfe2:	b163      	cbz	r3, 800dffe <ucdr_check_final_buffer_behavior_array+0x32>
 800dfe4:	69c1      	ldr	r1, [r0, #28]
 800dfe6:	4798      	blx	r3
 800dfe8:	75a0      	strb	r0, [r4, #22]
 800dfea:	b108      	cbz	r0, 800dff0 <ucdr_check_final_buffer_behavior_array+0x24>
 800dfec:	2000      	movs	r0, #0
 800dfee:	bd38      	pop	{r3, r4, r5, pc}
 800dff0:	4620      	mov	r0, r4
 800dff2:	f7ff ffe7 	bl	800dfc4 <ucdr_buffer_remaining>
 800dff6:	42a8      	cmp	r0, r5
 800dff8:	bf28      	it	cs
 800dffa:	4628      	movcs	r0, r5
 800dffc:	bd38      	pop	{r3, r4, r5, pc}
 800dffe:	2301      	movs	r3, #1
 800e000:	7583      	strb	r3, [r0, #22]
 800e002:	e7f3      	b.n	800dfec <ucdr_check_final_buffer_behavior_array+0x20>

0800e004 <ucdr_advance_buffer>:
 800e004:	b538      	push	{r3, r4, r5, lr}
 800e006:	4604      	mov	r4, r0
 800e008:	460d      	mov	r5, r1
 800e00a:	f7ff ff57 	bl	800debc <ucdr_check_buffer_available_for>
 800e00e:	b178      	cbz	r0, 800e030 <ucdr_advance_buffer+0x2c>
 800e010:	6923      	ldr	r3, [r4, #16]
 800e012:	68a2      	ldr	r2, [r4, #8]
 800e014:	442b      	add	r3, r5
 800e016:	6123      	str	r3, [r4, #16]
 800e018:	2301      	movs	r3, #1
 800e01a:	442a      	add	r2, r5
 800e01c:	7563      	strb	r3, [r4, #21]
 800e01e:	60a2      	str	r2, [r4, #8]
 800e020:	bd38      	pop	{r3, r4, r5, pc}
 800e022:	68a2      	ldr	r2, [r4, #8]
 800e024:	6923      	ldr	r3, [r4, #16]
 800e026:	4402      	add	r2, r0
 800e028:	4403      	add	r3, r0
 800e02a:	1a2d      	subs	r5, r5, r0
 800e02c:	60a2      	str	r2, [r4, #8]
 800e02e:	6123      	str	r3, [r4, #16]
 800e030:	4629      	mov	r1, r5
 800e032:	2201      	movs	r2, #1
 800e034:	4620      	mov	r0, r4
 800e036:	f7ff ffc9 	bl	800dfcc <ucdr_check_final_buffer_behavior_array>
 800e03a:	2800      	cmp	r0, #0
 800e03c:	d1f1      	bne.n	800e022 <ucdr_advance_buffer+0x1e>
 800e03e:	2301      	movs	r3, #1
 800e040:	7563      	strb	r3, [r4, #21]
 800e042:	bd38      	pop	{r3, r4, r5, pc}

0800e044 <uxr_buffer_delete_entity>:
 800e044:	b510      	push	{r4, lr}
 800e046:	2300      	movs	r3, #0
 800e048:	b08e      	sub	sp, #56	@ 0x38
 800e04a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e04e:	2303      	movs	r3, #3
 800e050:	9300      	str	r3, [sp, #0]
 800e052:	2204      	movs	r2, #4
 800e054:	ab06      	add	r3, sp, #24
 800e056:	4604      	mov	r4, r0
 800e058:	9103      	str	r1, [sp, #12]
 800e05a:	f001 fb43 	bl	800f6e4 <uxr_prepare_stream_to_write_submessage>
 800e05e:	b918      	cbnz	r0, 800e068 <uxr_buffer_delete_entity+0x24>
 800e060:	4604      	mov	r4, r0
 800e062:	4620      	mov	r0, r4
 800e064:	b00e      	add	sp, #56	@ 0x38
 800e066:	bd10      	pop	{r4, pc}
 800e068:	9902      	ldr	r1, [sp, #8]
 800e06a:	aa05      	add	r2, sp, #20
 800e06c:	4620      	mov	r0, r4
 800e06e:	f001 fc6f 	bl	800f950 <uxr_init_base_object_request>
 800e072:	a905      	add	r1, sp, #20
 800e074:	4604      	mov	r4, r0
 800e076:	a806      	add	r0, sp, #24
 800e078:	f003 fb52 	bl	8011720 <uxr_serialize_DELETE_Payload>
 800e07c:	4620      	mov	r0, r4
 800e07e:	b00e      	add	sp, #56	@ 0x38
 800e080:	bd10      	pop	{r4, pc}
 800e082:	bf00      	nop

0800e084 <uxr_common_create_entity>:
 800e084:	b510      	push	{r4, lr}
 800e086:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800e08a:	b08c      	sub	sp, #48	@ 0x30
 800e08c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e090:	f1bc 0f01 	cmp.w	ip, #1
 800e094:	bf0c      	ite	eq
 800e096:	f003 0201 	andeq.w	r2, r3, #1
 800e09a:	2200      	movne	r2, #0
 800e09c:	330e      	adds	r3, #14
 800e09e:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800e0a2:	9101      	str	r1, [sp, #4]
 800e0a4:	441a      	add	r2, r3
 800e0a6:	2301      	movs	r3, #1
 800e0a8:	9300      	str	r3, [sp, #0]
 800e0aa:	9903      	ldr	r1, [sp, #12]
 800e0ac:	ab04      	add	r3, sp, #16
 800e0ae:	b292      	uxth	r2, r2
 800e0b0:	4604      	mov	r4, r0
 800e0b2:	f001 fb17 	bl	800f6e4 <uxr_prepare_stream_to_write_submessage>
 800e0b6:	b918      	cbnz	r0, 800e0c0 <uxr_common_create_entity+0x3c>
 800e0b8:	4604      	mov	r4, r0
 800e0ba:	4620      	mov	r0, r4
 800e0bc:	b00c      	add	sp, #48	@ 0x30
 800e0be:	bd10      	pop	{r4, pc}
 800e0c0:	9902      	ldr	r1, [sp, #8]
 800e0c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e0c4:	4620      	mov	r0, r4
 800e0c6:	f001 fc43 	bl	800f950 <uxr_init_base_object_request>
 800e0ca:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e0cc:	4604      	mov	r4, r0
 800e0ce:	a804      	add	r0, sp, #16
 800e0d0:	f003 fa82 	bl	80115d8 <uxr_serialize_CREATE_Payload>
 800e0d4:	4620      	mov	r0, r4
 800e0d6:	b00c      	add	sp, #48	@ 0x30
 800e0d8:	bd10      	pop	{r4, pc}
 800e0da:	bf00      	nop

0800e0dc <uxr_buffer_create_participant_bin>:
 800e0dc:	b570      	push	{r4, r5, r6, lr}
 800e0de:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800e0e2:	ac11      	add	r4, sp, #68	@ 0x44
 800e0e4:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800e0e8:	2303      	movs	r3, #3
 800e0ea:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e0ee:	7223      	strb	r3, [r4, #8]
 800e0f0:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800e0f2:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800e0f6:	2201      	movs	r2, #1
 800e0f8:	2100      	movs	r1, #0
 800e0fa:	4605      	mov	r5, r0
 800e0fc:	7122      	strb	r2, [r4, #4]
 800e0fe:	f88d 1014 	strb.w	r1, [sp, #20]
 800e102:	b1cb      	cbz	r3, 800e138 <uxr_buffer_create_participant_bin+0x5c>
 800e104:	f88d 201c 	strb.w	r2, [sp, #28]
 800e108:	9308      	str	r3, [sp, #32]
 800e10a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e10e:	a915      	add	r1, sp, #84	@ 0x54
 800e110:	a809      	add	r0, sp, #36	@ 0x24
 800e112:	f7ff ff27 	bl	800df64 <ucdr_init_buffer>
 800e116:	a905      	add	r1, sp, #20
 800e118:	a809      	add	r0, sp, #36	@ 0x24
 800e11a:	f002 fe3f 	bl	8010d9c <uxr_serialize_OBJK_DomainParticipant_Binary>
 800e11e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e120:	9600      	str	r6, [sp, #0]
 800e122:	9401      	str	r4, [sp, #4]
 800e124:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e128:	60e3      	str	r3, [r4, #12]
 800e12a:	4628      	mov	r0, r5
 800e12c:	b29b      	uxth	r3, r3
 800e12e:	f7ff ffa9 	bl	800e084 <uxr_common_create_entity>
 800e132:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800e136:	bd70      	pop	{r4, r5, r6, pc}
 800e138:	f88d 301c 	strb.w	r3, [sp, #28]
 800e13c:	e7e5      	b.n	800e10a <uxr_buffer_create_participant_bin+0x2e>
 800e13e:	bf00      	nop

0800e140 <uxr_buffer_create_topic_bin>:
 800e140:	b570      	push	{r4, r5, r6, lr}
 800e142:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800e146:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e14a:	9105      	str	r1, [sp, #20]
 800e14c:	4605      	mov	r5, r0
 800e14e:	a997      	add	r1, sp, #604	@ 0x25c
 800e150:	4618      	mov	r0, r3
 800e152:	2302      	movs	r3, #2
 800e154:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800e158:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800e15c:	f000 fa58 	bl	800e610 <uxr_object_id_to_raw>
 800e160:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800e162:	9306      	str	r3, [sp, #24]
 800e164:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800e166:	930a      	str	r3, [sp, #40]	@ 0x28
 800e168:	2303      	movs	r3, #3
 800e16a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800e16e:	2301      	movs	r3, #1
 800e170:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e174:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800e178:	a917      	add	r1, sp, #92	@ 0x5c
 800e17a:	2300      	movs	r3, #0
 800e17c:	a80b      	add	r0, sp, #44	@ 0x2c
 800e17e:	f88d 301c 	strb.w	r3, [sp, #28]
 800e182:	f7ff feef 	bl	800df64 <ucdr_init_buffer>
 800e186:	a906      	add	r1, sp, #24
 800e188:	a80b      	add	r0, sp, #44	@ 0x2c
 800e18a:	f002 fe29 	bl	8010de0 <uxr_serialize_OBJK_Topic_Binary>
 800e18e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e190:	9316      	str	r3, [sp, #88]	@ 0x58
 800e192:	ac13      	add	r4, sp, #76	@ 0x4c
 800e194:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e198:	9600      	str	r6, [sp, #0]
 800e19a:	9401      	str	r4, [sp, #4]
 800e19c:	b29b      	uxth	r3, r3
 800e19e:	4628      	mov	r0, r5
 800e1a0:	f7ff ff70 	bl	800e084 <uxr_common_create_entity>
 800e1a4:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800e1a8:	bd70      	pop	{r4, r5, r6, pc}
 800e1aa:	bf00      	nop

0800e1ac <uxr_buffer_create_publisher_bin>:
 800e1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1ae:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800e1b2:	4605      	mov	r5, r0
 800e1b4:	9105      	str	r1, [sp, #20]
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	2603      	movs	r6, #3
 800e1ba:	a992      	add	r1, sp, #584	@ 0x248
 800e1bc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e1c0:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800e1c4:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800e1c8:	f000 fa22 	bl	800e610 <uxr_object_id_to_raw>
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e1d2:	a912      	add	r1, sp, #72	@ 0x48
 800e1d4:	a806      	add	r0, sp, #24
 800e1d6:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800e1da:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800e1de:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800e1e2:	f7ff febf 	bl	800df64 <ucdr_init_buffer>
 800e1e6:	a993      	add	r1, sp, #588	@ 0x24c
 800e1e8:	a806      	add	r0, sp, #24
 800e1ea:	f002 fead 	bl	8010f48 <uxr_serialize_OBJK_Publisher_Binary>
 800e1ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e1f0:	9311      	str	r3, [sp, #68]	@ 0x44
 800e1f2:	ac0e      	add	r4, sp, #56	@ 0x38
 800e1f4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e1f8:	9700      	str	r7, [sp, #0]
 800e1fa:	9401      	str	r4, [sp, #4]
 800e1fc:	b29b      	uxth	r3, r3
 800e1fe:	4628      	mov	r0, r5
 800e200:	f7ff ff40 	bl	800e084 <uxr_common_create_entity>
 800e204:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800e208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e20a:	bf00      	nop

0800e20c <uxr_buffer_create_subscriber_bin>:
 800e20c:	b570      	push	{r4, r5, r6, lr}
 800e20e:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800e212:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e216:	9105      	str	r1, [sp, #20]
 800e218:	4605      	mov	r5, r0
 800e21a:	a992      	add	r1, sp, #584	@ 0x248
 800e21c:	4618      	mov	r0, r3
 800e21e:	2304      	movs	r3, #4
 800e220:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800e224:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800e228:	f000 f9f2 	bl	800e610 <uxr_object_id_to_raw>
 800e22c:	2300      	movs	r3, #0
 800e22e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e232:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800e236:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800e23a:	a912      	add	r1, sp, #72	@ 0x48
 800e23c:	2303      	movs	r3, #3
 800e23e:	a806      	add	r0, sp, #24
 800e240:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800e244:	f7ff fe8e 	bl	800df64 <ucdr_init_buffer>
 800e248:	a993      	add	r1, sp, #588	@ 0x24c
 800e24a:	a806      	add	r0, sp, #24
 800e24c:	f002 ff2c 	bl	80110a8 <uxr_serialize_OBJK_Subscriber_Binary>
 800e250:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e252:	9311      	str	r3, [sp, #68]	@ 0x44
 800e254:	ac0e      	add	r4, sp, #56	@ 0x38
 800e256:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e25a:	9600      	str	r6, [sp, #0]
 800e25c:	9401      	str	r4, [sp, #4]
 800e25e:	b29b      	uxth	r3, r3
 800e260:	4628      	mov	r0, r5
 800e262:	f7ff ff0f 	bl	800e084 <uxr_common_create_entity>
 800e266:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800e26a:	bd70      	pop	{r4, r5, r6, pc}

0800e26c <uxr_buffer_create_datawriter_bin>:
 800e26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e270:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800e274:	ac1d      	add	r4, sp, #116	@ 0x74
 800e276:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e27a:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800e27e:	9105      	str	r1, [sp, #20]
 800e280:	4606      	mov	r6, r0
 800e282:	a9a1      	add	r1, sp, #644	@ 0x284
 800e284:	4618      	mov	r0, r3
 800e286:	2305      	movs	r3, #5
 800e288:	7123      	strb	r3, [r4, #4]
 800e28a:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800e28e:	2703      	movs	r7, #3
 800e290:	f000 f9be 	bl	800e610 <uxr_object_id_to_raw>
 800e294:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800e296:	7227      	strb	r7, [r4, #8]
 800e298:	a90e      	add	r1, sp, #56	@ 0x38
 800e29a:	f000 f9b9 	bl	800e610 <uxr_object_id_to_raw>
 800e29e:	2300      	movs	r3, #0
 800e2a0:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800e2a4:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800e2a8:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800e2ac:	3d00      	subs	r5, #0
 800e2ae:	bf18      	it	ne
 800e2b0:	2501      	movne	r5, #1
 800e2b2:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800e2b6:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800e2ba:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800e2be:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800e2c8:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800e2cc:	bb8a      	cbnz	r2, 800e332 <uxr_buffer_create_datawriter_bin+0xc6>
 800e2ce:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e2d2:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800e2d6:	f04f 0c13 	mov.w	ip, #19
 800e2da:	250b      	movs	r5, #11
 800e2dc:	2221      	movs	r2, #33	@ 0x21
 800e2de:	2111      	movs	r1, #17
 800e2e0:	2009      	movs	r0, #9
 800e2e2:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800e2e6:	b923      	cbnz	r3, 800e2f2 <uxr_buffer_create_datawriter_bin+0x86>
 800e2e8:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800e2ec:	4672      	mov	r2, lr
 800e2ee:	4661      	mov	r1, ip
 800e2f0:	4628      	mov	r0, r5
 800e2f2:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800e2f6:	2b01      	cmp	r3, #1
 800e2f8:	d025      	beq.n	800e346 <uxr_buffer_create_datawriter_bin+0xda>
 800e2fa:	2b03      	cmp	r3, #3
 800e2fc:	d029      	beq.n	800e352 <uxr_buffer_create_datawriter_bin+0xe6>
 800e2fe:	b32b      	cbz	r3, 800e34c <uxr_buffer_create_datawriter_bin+0xe0>
 800e300:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e304:	a921      	add	r1, sp, #132	@ 0x84
 800e306:	a806      	add	r0, sp, #24
 800e308:	f7ff fe2c 	bl	800df64 <ucdr_init_buffer>
 800e30c:	a90e      	add	r1, sp, #56	@ 0x38
 800e30e:	a806      	add	r0, sp, #24
 800e310:	f002 ff7c 	bl	801120c <uxr_serialize_OBJK_DataWriter_Binary>
 800e314:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e316:	f8cd 8000 	str.w	r8, [sp]
 800e31a:	9401      	str	r4, [sp, #4]
 800e31c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e320:	60e3      	str	r3, [r4, #12]
 800e322:	4630      	mov	r0, r6
 800e324:	b29b      	uxth	r3, r3
 800e326:	f7ff fead 	bl	800e084 <uxr_common_create_entity>
 800e32a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800e32e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e332:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800e336:	f04f 0c12 	mov.w	ip, #18
 800e33a:	250a      	movs	r5, #10
 800e33c:	2220      	movs	r2, #32
 800e33e:	2110      	movs	r1, #16
 800e340:	2008      	movs	r0, #8
 800e342:	2702      	movs	r7, #2
 800e344:	e7cd      	b.n	800e2e2 <uxr_buffer_create_datawriter_bin+0x76>
 800e346:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800e34a:	e7d9      	b.n	800e300 <uxr_buffer_create_datawriter_bin+0x94>
 800e34c:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800e350:	e7d6      	b.n	800e300 <uxr_buffer_create_datawriter_bin+0x94>
 800e352:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800e356:	e7d3      	b.n	800e300 <uxr_buffer_create_datawriter_bin+0x94>

0800e358 <uxr_buffer_create_datareader_bin>:
 800e358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e35c:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800e360:	ac1f      	add	r4, sp, #124	@ 0x7c
 800e362:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e366:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800e36a:	9105      	str	r1, [sp, #20]
 800e36c:	4606      	mov	r6, r0
 800e36e:	a9a3      	add	r1, sp, #652	@ 0x28c
 800e370:	4618      	mov	r0, r3
 800e372:	2306      	movs	r3, #6
 800e374:	7123      	strb	r3, [r4, #4]
 800e376:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800e37a:	2703      	movs	r7, #3
 800e37c:	f000 f948 	bl	800e610 <uxr_object_id_to_raw>
 800e380:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800e382:	7227      	strb	r7, [r4, #8]
 800e384:	a90e      	add	r1, sp, #56	@ 0x38
 800e386:	f000 f943 	bl	800e610 <uxr_object_id_to_raw>
 800e38a:	2300      	movs	r3, #0
 800e38c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800e390:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800e394:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800e398:	3d00      	subs	r5, #0
 800e39a:	bf18      	it	ne
 800e39c:	2501      	movne	r5, #1
 800e39e:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800e3a2:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800e3a6:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800e3aa:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800e3ae:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800e3b8:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800e3bc:	bb8a      	cbnz	r2, 800e422 <uxr_buffer_create_datareader_bin+0xca>
 800e3be:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e3c2:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800e3c6:	f04f 0c13 	mov.w	ip, #19
 800e3ca:	250b      	movs	r5, #11
 800e3cc:	2221      	movs	r2, #33	@ 0x21
 800e3ce:	2111      	movs	r1, #17
 800e3d0:	2009      	movs	r0, #9
 800e3d2:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800e3d6:	b923      	cbnz	r3, 800e3e2 <uxr_buffer_create_datareader_bin+0x8a>
 800e3d8:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800e3dc:	4672      	mov	r2, lr
 800e3de:	4661      	mov	r1, ip
 800e3e0:	4628      	mov	r0, r5
 800e3e2:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800e3e6:	2b01      	cmp	r3, #1
 800e3e8:	d025      	beq.n	800e436 <uxr_buffer_create_datareader_bin+0xde>
 800e3ea:	2b03      	cmp	r3, #3
 800e3ec:	d029      	beq.n	800e442 <uxr_buffer_create_datareader_bin+0xea>
 800e3ee:	b32b      	cbz	r3, 800e43c <uxr_buffer_create_datareader_bin+0xe4>
 800e3f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e3f4:	a923      	add	r1, sp, #140	@ 0x8c
 800e3f6:	a806      	add	r0, sp, #24
 800e3f8:	f7ff fdb4 	bl	800df64 <ucdr_init_buffer>
 800e3fc:	a90e      	add	r1, sp, #56	@ 0x38
 800e3fe:	a806      	add	r0, sp, #24
 800e400:	f002 fec8 	bl	8011194 <uxr_serialize_OBJK_DataReader_Binary>
 800e404:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e406:	f8cd 8000 	str.w	r8, [sp]
 800e40a:	9401      	str	r4, [sp, #4]
 800e40c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e410:	60e3      	str	r3, [r4, #12]
 800e412:	4630      	mov	r0, r6
 800e414:	b29b      	uxth	r3, r3
 800e416:	f7ff fe35 	bl	800e084 <uxr_common_create_entity>
 800e41a:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800e41e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e422:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800e426:	f04f 0c12 	mov.w	ip, #18
 800e42a:	250a      	movs	r5, #10
 800e42c:	2220      	movs	r2, #32
 800e42e:	2110      	movs	r1, #16
 800e430:	2008      	movs	r0, #8
 800e432:	2702      	movs	r7, #2
 800e434:	e7cd      	b.n	800e3d2 <uxr_buffer_create_datareader_bin+0x7a>
 800e436:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800e43a:	e7d9      	b.n	800e3f0 <uxr_buffer_create_datareader_bin+0x98>
 800e43c:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800e440:	e7d6      	b.n	800e3f0 <uxr_buffer_create_datareader_bin+0x98>
 800e442:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800e446:	e7d3      	b.n	800e3f0 <uxr_buffer_create_datareader_bin+0x98>

0800e448 <get_custom_error>:
 800e448:	4b01      	ldr	r3, [pc, #4]	@ (800e450 <get_custom_error+0x8>)
 800e44a:	7818      	ldrb	r0, [r3, #0]
 800e44c:	4770      	bx	lr
 800e44e:	bf00      	nop
 800e450:	2000aba4 	.word	0x2000aba4

0800e454 <recv_custom_msg>:
 800e454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e458:	4693      	mov	fp, r2
 800e45a:	b089      	sub	sp, #36	@ 0x24
 800e45c:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800e460:	9305      	str	r3, [sp, #20]
 800e462:	468a      	mov	sl, r1
 800e464:	2100      	movs	r1, #0
 800e466:	4604      	mov	r4, r0
 800e468:	f88d 101e 	strb.w	r1, [sp, #30]
 800e46c:	b322      	cbz	r2, 800e4b8 <recv_custom_msg+0x64>
 800e46e:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800e472:	f10d 081f 	add.w	r8, sp, #31
 800e476:	af05      	add	r7, sp, #20
 800e478:	f10d 061e 	add.w	r6, sp, #30
 800e47c:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800e480:	e002      	b.n	800e488 <recv_custom_msg+0x34>
 800e482:	9b05      	ldr	r3, [sp, #20]
 800e484:	2b00      	cmp	r3, #0
 800e486:	dd0f      	ble.n	800e4a8 <recv_custom_msg+0x54>
 800e488:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800e48c:	4623      	mov	r3, r4
 800e48e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800e492:	e9cd 5600 	strd	r5, r6, [sp]
 800e496:	4622      	mov	r2, r4
 800e498:	4648      	mov	r0, r9
 800e49a:	f001 fc87 	bl	800fdac <uxr_read_framed_msg>
 800e49e:	2800      	cmp	r0, #0
 800e4a0:	d0ef      	beq.n	800e482 <recv_custom_msg+0x2e>
 800e4a2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e4a6:	b1b3      	cbz	r3, 800e4d6 <recv_custom_msg+0x82>
 800e4a8:	4b0f      	ldr	r3, [pc, #60]	@ (800e4e8 <recv_custom_msg+0x94>)
 800e4aa:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800e4ae:	701a      	strb	r2, [r3, #0]
 800e4b0:	2000      	movs	r0, #0
 800e4b2:	b009      	add	sp, #36	@ 0x24
 800e4b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4b8:	f10d 021f 	add.w	r2, sp, #31
 800e4bc:	9200      	str	r2, [sp, #0]
 800e4be:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800e4c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e4c6:	4601      	mov	r1, r0
 800e4c8:	47a8      	blx	r5
 800e4ca:	2800      	cmp	r0, #0
 800e4cc:	d0ec      	beq.n	800e4a8 <recv_custom_msg+0x54>
 800e4ce:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d1e8      	bne.n	800e4a8 <recv_custom_msg+0x54>
 800e4d6:	f8cb 0000 	str.w	r0, [fp]
 800e4da:	2001      	movs	r0, #1
 800e4dc:	f8ca 4000 	str.w	r4, [sl]
 800e4e0:	b009      	add	sp, #36	@ 0x24
 800e4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4e6:	bf00      	nop
 800e4e8:	2000aba4 	.word	0x2000aba4

0800e4ec <send_custom_msg>:
 800e4ec:	b530      	push	{r4, r5, lr}
 800e4ee:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800e4f2:	b087      	sub	sp, #28
 800e4f4:	4615      	mov	r5, r2
 800e4f6:	b974      	cbnz	r4, 800e516 <send_custom_msg+0x2a>
 800e4f8:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800e4fc:	f10d 0317 	add.w	r3, sp, #23
 800e500:	47a0      	blx	r4
 800e502:	b108      	cbz	r0, 800e508 <send_custom_msg+0x1c>
 800e504:	42a8      	cmp	r0, r5
 800e506:	d015      	beq.n	800e534 <send_custom_msg+0x48>
 800e508:	4b0c      	ldr	r3, [pc, #48]	@ (800e53c <send_custom_msg+0x50>)
 800e50a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800e50e:	701a      	strb	r2, [r3, #0]
 800e510:	2000      	movs	r0, #0
 800e512:	b007      	add	sp, #28
 800e514:	bd30      	pop	{r4, r5, pc}
 800e516:	460b      	mov	r3, r1
 800e518:	2200      	movs	r2, #0
 800e51a:	f10d 0117 	add.w	r1, sp, #23
 800e51e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800e522:	4602      	mov	r2, r0
 800e524:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800e528:	9500      	str	r5, [sp, #0]
 800e52a:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800e52e:	f001 fa45 	bl	800f9bc <uxr_write_framed_msg>
 800e532:	e7e6      	b.n	800e502 <send_custom_msg+0x16>
 800e534:	2001      	movs	r0, #1
 800e536:	b007      	add	sp, #28
 800e538:	bd30      	pop	{r4, r5, pc}
 800e53a:	bf00      	nop
 800e53c:	2000aba4 	.word	0x2000aba4

0800e540 <uxr_set_custom_transport_callbacks>:
 800e540:	b410      	push	{r4}
 800e542:	9c01      	ldr	r4, [sp, #4]
 800e544:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800e548:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800e54c:	9b02      	ldr	r3, [sp, #8]
 800e54e:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800e552:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e556:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800e55a:	4770      	bx	lr

0800e55c <uxr_init_custom_transport>:
 800e55c:	b538      	push	{r3, r4, r5, lr}
 800e55e:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800e562:	b303      	cbz	r3, 800e5a6 <uxr_init_custom_transport+0x4a>
 800e564:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800e568:	4604      	mov	r4, r0
 800e56a:	b1e2      	cbz	r2, 800e5a6 <uxr_init_custom_transport+0x4a>
 800e56c:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800e570:	b1ca      	cbz	r2, 800e5a6 <uxr_init_custom_transport+0x4a>
 800e572:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800e576:	b1b2      	cbz	r2, 800e5a6 <uxr_init_custom_transport+0x4a>
 800e578:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800e57c:	4798      	blx	r3
 800e57e:	4605      	mov	r5, r0
 800e580:	b188      	cbz	r0, 800e5a6 <uxr_init_custom_transport+0x4a>
 800e582:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800e586:	b98b      	cbnz	r3, 800e5ac <uxr_init_custom_transport+0x50>
 800e588:	490b      	ldr	r1, [pc, #44]	@ (800e5b8 <uxr_init_custom_transport+0x5c>)
 800e58a:	4b0c      	ldr	r3, [pc, #48]	@ (800e5bc <uxr_init_custom_transport+0x60>)
 800e58c:	4a0c      	ldr	r2, [pc, #48]	@ (800e5c0 <uxr_init_custom_transport+0x64>)
 800e58e:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800e592:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e596:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800e59a:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800e59e:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800e5a2:	4628      	mov	r0, r5
 800e5a4:	bd38      	pop	{r3, r4, r5, pc}
 800e5a6:	2500      	movs	r5, #0
 800e5a8:	4628      	mov	r0, r5
 800e5aa:	bd38      	pop	{r3, r4, r5, pc}
 800e5ac:	2100      	movs	r1, #0
 800e5ae:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800e5b2:	f001 f9fd 	bl	800f9b0 <uxr_init_framing_io>
 800e5b6:	e7e7      	b.n	800e588 <uxr_init_custom_transport+0x2c>
 800e5b8:	0800e4ed 	.word	0x0800e4ed
 800e5bc:	0800e455 	.word	0x0800e455
 800e5c0:	0800e449 	.word	0x0800e449

0800e5c4 <uxr_close_custom_transport>:
 800e5c4:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800e5c8:	4718      	bx	r3
 800e5ca:	bf00      	nop

0800e5cc <uxr_object_id>:
 800e5cc:	b082      	sub	sp, #8
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	f88d 1006 	strb.w	r1, [sp, #6]
 800e5d4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e5d8:	f360 030f 	bfi	r3, r0, #0, #16
 800e5dc:	f362 431f 	bfi	r3, r2, #16, #16
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	b002      	add	sp, #8
 800e5e4:	4770      	bx	lr
 800e5e6:	bf00      	nop

0800e5e8 <uxr_object_id_from_raw>:
 800e5e8:	7843      	ldrb	r3, [r0, #1]
 800e5ea:	7801      	ldrb	r1, [r0, #0]
 800e5ec:	b082      	sub	sp, #8
 800e5ee:	f003 020f 	and.w	r2, r3, #15
 800e5f2:	f88d 2006 	strb.w	r2, [sp, #6]
 800e5f6:	091b      	lsrs	r3, r3, #4
 800e5f8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e5fc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800e600:	2000      	movs	r0, #0
 800e602:	f363 000f 	bfi	r0, r3, #0, #16
 800e606:	f362 401f 	bfi	r0, r2, #16, #16
 800e60a:	b002      	add	sp, #8
 800e60c:	4770      	bx	lr
 800e60e:	bf00      	nop

0800e610 <uxr_object_id_to_raw>:
 800e610:	4602      	mov	r2, r0
 800e612:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800e616:	b082      	sub	sp, #8
 800e618:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800e61c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800e620:	f881 c000 	strb.w	ip, [r1]
 800e624:	7048      	strb	r0, [r1, #1]
 800e626:	b002      	add	sp, #8
 800e628:	4770      	bx	lr
 800e62a:	bf00      	nop

0800e62c <uxr_buffer_request_data>:
 800e62c:	b530      	push	{r4, r5, lr}
 800e62e:	b095      	sub	sp, #84	@ 0x54
 800e630:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800e634:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800e636:	9303      	str	r3, [sp, #12]
 800e638:	2200      	movs	r2, #0
 800e63a:	2d00      	cmp	r5, #0
 800e63c:	bf14      	ite	ne
 800e63e:	2101      	movne	r1, #1
 800e640:	4611      	moveq	r1, r2
 800e642:	4604      	mov	r4, r0
 800e644:	f88d 301c 	strb.w	r3, [sp, #28]
 800e648:	f88d 201d 	strb.w	r2, [sp, #29]
 800e64c:	f88d 201e 	strb.w	r2, [sp, #30]
 800e650:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800e654:	d021      	beq.n	800e69a <uxr_buffer_request_data+0x6e>
 800e656:	682a      	ldr	r2, [r5, #0]
 800e658:	686b      	ldr	r3, [r5, #4]
 800e65a:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 800e65e:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800e662:	2210      	movs	r2, #16
 800e664:	2308      	movs	r3, #8
 800e666:	2100      	movs	r1, #0
 800e668:	e9cd 3100 	strd	r3, r1, [sp]
 800e66c:	4620      	mov	r0, r4
 800e66e:	9905      	ldr	r1, [sp, #20]
 800e670:	ab0c      	add	r3, sp, #48	@ 0x30
 800e672:	f001 f837 	bl	800f6e4 <uxr_prepare_stream_to_write_submessage>
 800e676:	b918      	cbnz	r0, 800e680 <uxr_buffer_request_data+0x54>
 800e678:	4604      	mov	r4, r0
 800e67a:	4620      	mov	r0, r4
 800e67c:	b015      	add	sp, #84	@ 0x54
 800e67e:	bd30      	pop	{r4, r5, pc}
 800e680:	9904      	ldr	r1, [sp, #16]
 800e682:	aa06      	add	r2, sp, #24
 800e684:	4620      	mov	r0, r4
 800e686:	f001 f963 	bl	800f950 <uxr_init_base_object_request>
 800e68a:	a906      	add	r1, sp, #24
 800e68c:	4604      	mov	r4, r0
 800e68e:	a80c      	add	r0, sp, #48	@ 0x30
 800e690:	f003 f8f0 	bl	8011874 <uxr_serialize_READ_DATA_Payload>
 800e694:	4620      	mov	r0, r4
 800e696:	b015      	add	sp, #84	@ 0x54
 800e698:	bd30      	pop	{r4, r5, pc}
 800e69a:	2208      	movs	r2, #8
 800e69c:	e7e2      	b.n	800e664 <uxr_buffer_request_data+0x38>
 800e69e:	bf00      	nop

0800e6a0 <uxr_buffer_cancel_data>:
 800e6a0:	b510      	push	{r4, lr}
 800e6a2:	b094      	sub	sp, #80	@ 0x50
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	9202      	str	r2, [sp, #8]
 800e6a8:	9205      	str	r2, [sp, #20]
 800e6aa:	9301      	str	r3, [sp, #4]
 800e6ac:	2201      	movs	r2, #1
 800e6ae:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e6b2:	f88d 301e 	strb.w	r3, [sp, #30]
 800e6b6:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800e6ba:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800e6be:	2308      	movs	r3, #8
 800e6c0:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800e6c4:	9300      	str	r3, [sp, #0]
 800e6c6:	2210      	movs	r2, #16
 800e6c8:	ab0c      	add	r3, sp, #48	@ 0x30
 800e6ca:	4604      	mov	r4, r0
 800e6cc:	9103      	str	r1, [sp, #12]
 800e6ce:	f001 f809 	bl	800f6e4 <uxr_prepare_stream_to_write_submessage>
 800e6d2:	b918      	cbnz	r0, 800e6dc <uxr_buffer_cancel_data+0x3c>
 800e6d4:	4604      	mov	r4, r0
 800e6d6:	4620      	mov	r0, r4
 800e6d8:	b014      	add	sp, #80	@ 0x50
 800e6da:	bd10      	pop	{r4, pc}
 800e6dc:	9905      	ldr	r1, [sp, #20]
 800e6de:	aa06      	add	r2, sp, #24
 800e6e0:	4620      	mov	r0, r4
 800e6e2:	f001 f935 	bl	800f950 <uxr_init_base_object_request>
 800e6e6:	a906      	add	r1, sp, #24
 800e6e8:	4604      	mov	r4, r0
 800e6ea:	a80c      	add	r0, sp, #48	@ 0x30
 800e6ec:	f003 f8c2 	bl	8011874 <uxr_serialize_READ_DATA_Payload>
 800e6f0:	4620      	mov	r0, r4
 800e6f2:	b014      	add	sp, #80	@ 0x50
 800e6f4:	bd10      	pop	{r4, pc}
 800e6f6:	bf00      	nop

0800e6f8 <read_submessage_format>:
 800e6f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e6fc:	b095      	sub	sp, #84	@ 0x54
 800e6fe:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800e702:	b113      	cbz	r3, 800e70a <read_submessage_format+0x12>
 800e704:	b015      	add	sp, #84	@ 0x54
 800e706:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e70a:	460c      	mov	r4, r1
 800e70c:	4615      	mov	r5, r2
 800e70e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800e712:	4607      	mov	r7, r0
 800e714:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800e716:	9004      	str	r0, [sp, #16]
 800e718:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800e71a:	9005      	str	r0, [sp, #20]
 800e71c:	1a52      	subs	r2, r2, r1
 800e71e:	a80c      	add	r0, sp, #48	@ 0x30
 800e720:	4699      	mov	r9, r3
 800e722:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800e726:	f7ff fc1d 	bl	800df64 <ucdr_init_buffer>
 800e72a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e72e:	a80c      	add	r0, sp, #48	@ 0x30
 800e730:	f7ff fbec 	bl	800df0c <ucdr_set_on_full_buffer_callback>
 800e734:	69e2      	ldr	r2, [r4, #28]
 800e736:	b19a      	cbz	r2, 800e760 <read_submessage_format+0x68>
 800e738:	f1b8 0f07 	cmp.w	r8, #7
 800e73c:	f882 9014 	strb.w	r9, [r2, #20]
 800e740:	d040      	beq.n	800e7c4 <read_submessage_format+0xcc>
 800e742:	f1b8 0f08 	cmp.w	r8, #8
 800e746:	d02e      	beq.n	800e7a6 <read_submessage_format+0xae>
 800e748:	f1b8 0f06 	cmp.w	r8, #6
 800e74c:	d011      	beq.n	800e772 <read_submessage_format+0x7a>
 800e74e:	2301      	movs	r3, #1
 800e750:	7513      	strb	r3, [r2, #20]
 800e752:	4629      	mov	r1, r5
 800e754:	4620      	mov	r0, r4
 800e756:	f7ff fc55 	bl	800e004 <ucdr_advance_buffer>
 800e75a:	b015      	add	sp, #84	@ 0x54
 800e75c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e760:	f1b8 0f07 	cmp.w	r8, #7
 800e764:	d02e      	beq.n	800e7c4 <read_submessage_format+0xcc>
 800e766:	f1b8 0f08 	cmp.w	r8, #8
 800e76a:	d01c      	beq.n	800e7a6 <read_submessage_format+0xae>
 800e76c:	f1b8 0f06 	cmp.w	r8, #6
 800e770:	d1ef      	bne.n	800e752 <read_submessage_format+0x5a>
 800e772:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800e776:	f1b8 0f00 	cmp.w	r8, #0
 800e77a:	d011      	beq.n	800e7a0 <read_submessage_format+0xa8>
 800e77c:	ab0c      	add	r3, sp, #48	@ 0x30
 800e77e:	e9cd 3500 	strd	r3, r5, [sp]
 800e782:	2306      	movs	r3, #6
 800e784:	f88d 3016 	strb.w	r3, [sp, #22]
 800e788:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e78c:	9302      	str	r3, [sp, #8]
 800e78e:	4632      	mov	r2, r6
 800e790:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800e794:	4638      	mov	r0, r7
 800e796:	47c0      	blx	r8
 800e798:	2301      	movs	r3, #1
 800e79a:	69e2      	ldr	r2, [r4, #28]
 800e79c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800e7a0:	2a00      	cmp	r2, #0
 800e7a2:	d1d4      	bne.n	800e74e <read_submessage_format+0x56>
 800e7a4:	e7d5      	b.n	800e752 <read_submessage_format+0x5a>
 800e7a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d0f8      	beq.n	800e7a0 <read_submessage_format+0xa8>
 800e7ae:	a906      	add	r1, sp, #24
 800e7b0:	a80c      	add	r0, sp, #48	@ 0x30
 800e7b2:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800e7b6:	f003 f923 	bl	8011a00 <uxr_deserialize_SampleIdentity>
 800e7ba:	b9a0      	cbnz	r0, 800e7e6 <read_submessage_format+0xee>
 800e7bc:	69e2      	ldr	r2, [r4, #28]
 800e7be:	2a00      	cmp	r2, #0
 800e7c0:	d1c5      	bne.n	800e74e <read_submessage_format+0x56>
 800e7c2:	e7c6      	b.n	800e752 <read_submessage_format+0x5a>
 800e7c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e7c8:	b13b      	cbz	r3, 800e7da <read_submessage_format+0xe2>
 800e7ca:	a906      	add	r1, sp, #24
 800e7cc:	a80c      	add	r0, sp, #48	@ 0x30
 800e7ce:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800e7d2:	f002 fde9 	bl	80113a8 <uxr_deserialize_BaseObjectRequest>
 800e7d6:	bb60      	cbnz	r0, 800e832 <read_submessage_format+0x13a>
 800e7d8:	69e2      	ldr	r2, [r4, #28]
 800e7da:	68a3      	ldr	r3, [r4, #8]
 800e7dc:	442b      	add	r3, r5
 800e7de:	60a3      	str	r3, [r4, #8]
 800e7e0:	2a00      	cmp	r2, #0
 800e7e2:	d1b4      	bne.n	800e74e <read_submessage_format+0x56>
 800e7e4:	e7b5      	b.n	800e752 <read_submessage_format+0x5a>
 800e7e6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800e7ea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e7ec:	1a52      	subs	r2, r2, r1
 800e7ee:	eba8 0803 	sub.w	r8, r8, r3
 800e7f2:	a80c      	add	r0, sp, #48	@ 0x30
 800e7f4:	f7ff fbb6 	bl	800df64 <ucdr_init_buffer>
 800e7f8:	44a8      	add	r8, r5
 800e7fa:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e7fe:	a80c      	add	r0, sp, #48	@ 0x30
 800e800:	f7ff fb84 	bl	800df0c <ucdr_set_on_full_buffer_callback>
 800e804:	fa1f f888 	uxth.w	r8, r8
 800e808:	ab0c      	add	r3, sp, #48	@ 0x30
 800e80a:	9300      	str	r3, [sp, #0]
 800e80c:	f8cd 8004 	str.w	r8, [sp, #4]
 800e810:	2108      	movs	r1, #8
 800e812:	f88d 1016 	strb.w	r1, [sp, #22]
 800e816:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800e81a:	9102      	str	r1, [sp, #8]
 800e81c:	ab06      	add	r3, sp, #24
 800e81e:	4632      	mov	r2, r6
 800e820:	9905      	ldr	r1, [sp, #20]
 800e822:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800e826:	4638      	mov	r0, r7
 800e828:	47b0      	blx	r6
 800e82a:	2301      	movs	r3, #1
 800e82c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800e830:	e7c4      	b.n	800e7bc <read_submessage_format+0xc4>
 800e832:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800e836:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e838:	1a52      	subs	r2, r2, r1
 800e83a:	a80c      	add	r0, sp, #48	@ 0x30
 800e83c:	eba8 0803 	sub.w	r8, r8, r3
 800e840:	f7ff fb90 	bl	800df64 <ucdr_init_buffer>
 800e844:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e848:	a80c      	add	r0, sp, #48	@ 0x30
 800e84a:	f7ff fb5f 	bl	800df0c <ucdr_set_on_full_buffer_callback>
 800e84e:	ab0c      	add	r3, sp, #48	@ 0x30
 800e850:	9300      	str	r3, [sp, #0]
 800e852:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800e856:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e85a:	44a8      	add	r8, r5
 800e85c:	fa1f f888 	uxth.w	r8, r8
 800e860:	f8cd 8004 	str.w	r8, [sp, #4]
 800e864:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800e868:	2107      	movs	r1, #7
 800e86a:	f88d 1016 	strb.w	r1, [sp, #22]
 800e86e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800e872:	9102      	str	r1, [sp, #8]
 800e874:	4632      	mov	r2, r6
 800e876:	b29b      	uxth	r3, r3
 800e878:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800e87c:	9905      	ldr	r1, [sp, #20]
 800e87e:	4638      	mov	r0, r7
 800e880:	47b0      	blx	r6
 800e882:	2301      	movs	r3, #1
 800e884:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800e888:	e7a6      	b.n	800e7d8 <read_submessage_format+0xe0>
 800e88a:	bf00      	nop

0800e88c <on_get_fragmentation_info>:
 800e88c:	b500      	push	{lr}
 800e88e:	b08b      	sub	sp, #44	@ 0x2c
 800e890:	4601      	mov	r1, r0
 800e892:	2204      	movs	r2, #4
 800e894:	a802      	add	r0, sp, #8
 800e896:	f7ff fb65 	bl	800df64 <ucdr_init_buffer>
 800e89a:	f10d 0305 	add.w	r3, sp, #5
 800e89e:	f10d 0206 	add.w	r2, sp, #6
 800e8a2:	a901      	add	r1, sp, #4
 800e8a4:	a802      	add	r0, sp, #8
 800e8a6:	f001 fe67 	bl	8010578 <uxr_read_submessage_header>
 800e8aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e8ae:	2b0d      	cmp	r3, #13
 800e8b0:	d003      	beq.n	800e8ba <on_get_fragmentation_info+0x2e>
 800e8b2:	2000      	movs	r0, #0
 800e8b4:	b00b      	add	sp, #44	@ 0x2c
 800e8b6:	f85d fb04 	ldr.w	pc, [sp], #4
 800e8ba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e8be:	f013 0f02 	tst.w	r3, #2
 800e8c2:	bf14      	ite	ne
 800e8c4:	2002      	movne	r0, #2
 800e8c6:	2001      	moveq	r0, #1
 800e8c8:	b00b      	add	sp, #44	@ 0x2c
 800e8ca:	f85d fb04 	ldr.w	pc, [sp], #4
 800e8ce:	bf00      	nop

0800e8d0 <read_submessage_get_info>:
 800e8d0:	b570      	push	{r4, r5, r6, lr}
 800e8d2:	2500      	movs	r5, #0
 800e8d4:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800e8d8:	4604      	mov	r4, r0
 800e8da:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800e8de:	460e      	mov	r6, r1
 800e8e0:	a810      	add	r0, sp, #64	@ 0x40
 800e8e2:	4629      	mov	r1, r5
 800e8e4:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800e8e8:	f009 f8a6 	bl	8017a38 <memset>
 800e8ec:	a903      	add	r1, sp, #12
 800e8ee:	4630      	mov	r0, r6
 800e8f0:	f002 ff02 	bl	80116f8 <uxr_deserialize_GET_INFO_Payload>
 800e8f4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800e8f8:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e8fc:	4620      	mov	r0, r4
 800e8fe:	f001 f81f 	bl	800f940 <uxr_session_header_offset>
 800e902:	462b      	mov	r3, r5
 800e904:	9000      	str	r0, [sp, #0]
 800e906:	220c      	movs	r2, #12
 800e908:	a905      	add	r1, sp, #20
 800e90a:	a808      	add	r0, sp, #32
 800e90c:	f7ff fb18 	bl	800df40 <ucdr_init_buffer_origin_offset>
 800e910:	a910      	add	r1, sp, #64	@ 0x40
 800e912:	a808      	add	r0, sp, #32
 800e914:	f002 ff62 	bl	80117dc <uxr_serialize_INFO_Payload>
 800e918:	9b08      	ldr	r3, [sp, #32]
 800e91a:	462a      	mov	r2, r5
 800e91c:	4629      	mov	r1, r5
 800e91e:	4620      	mov	r0, r4
 800e920:	f000 ffb8 	bl	800f894 <uxr_stamp_session_header>
 800e924:	a808      	add	r0, sp, #32
 800e926:	f7ff fb49 	bl	800dfbc <ucdr_buffer_length>
 800e92a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e92c:	4602      	mov	r2, r0
 800e92e:	a905      	add	r1, sp, #20
 800e930:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e934:	47a0      	blx	r4
 800e936:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800e93a:	bd70      	pop	{r4, r5, r6, pc}

0800e93c <write_submessage_acknack.isra.0>:
 800e93c:	b570      	push	{r4, r5, r6, lr}
 800e93e:	b092      	sub	sp, #72	@ 0x48
 800e940:	4605      	mov	r5, r0
 800e942:	460e      	mov	r6, r1
 800e944:	4614      	mov	r4, r2
 800e946:	f000 fffb 	bl	800f940 <uxr_session_header_offset>
 800e94a:	a905      	add	r1, sp, #20
 800e94c:	9000      	str	r0, [sp, #0]
 800e94e:	2300      	movs	r3, #0
 800e950:	a80a      	add	r0, sp, #40	@ 0x28
 800e952:	2211      	movs	r2, #17
 800e954:	f7ff faf4 	bl	800df40 <ucdr_init_buffer_origin_offset>
 800e958:	2218      	movs	r2, #24
 800e95a:	fb02 5404 	mla	r4, r2, r4, r5
 800e95e:	2300      	movs	r3, #0
 800e960:	2205      	movs	r2, #5
 800e962:	3450      	adds	r4, #80	@ 0x50
 800e964:	210a      	movs	r1, #10
 800e966:	a80a      	add	r0, sp, #40	@ 0x28
 800e968:	f001 fdec 	bl	8010544 <uxr_buffer_submessage_header>
 800e96c:	a903      	add	r1, sp, #12
 800e96e:	4620      	mov	r0, r4
 800e970:	f007 fcda 	bl	8016328 <uxr_compute_acknack>
 800e974:	ba40      	rev16	r0, r0
 800e976:	f8ad 000e 	strh.w	r0, [sp, #14]
 800e97a:	a903      	add	r1, sp, #12
 800e97c:	a80a      	add	r0, sp, #40	@ 0x28
 800e97e:	f88d 6010 	strb.w	r6, [sp, #16]
 800e982:	f002 ff9b 	bl	80118bc <uxr_serialize_ACKNACK_Payload>
 800e986:	2200      	movs	r2, #0
 800e988:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e98a:	4611      	mov	r1, r2
 800e98c:	4628      	mov	r0, r5
 800e98e:	f000 ff81 	bl	800f894 <uxr_stamp_session_header>
 800e992:	a80a      	add	r0, sp, #40	@ 0x28
 800e994:	f7ff fb12 	bl	800dfbc <ucdr_buffer_length>
 800e998:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800e99a:	4602      	mov	r2, r0
 800e99c:	a905      	add	r1, sp, #20
 800e99e:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e9a2:	47a0      	blx	r4
 800e9a4:	b012      	add	sp, #72	@ 0x48
 800e9a6:	bd70      	pop	{r4, r5, r6, pc}

0800e9a8 <uxr_init_session>:
 800e9a8:	b510      	push	{r4, lr}
 800e9aa:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800e9e0 <uxr_init_session+0x38>
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800e9b4:	4604      	mov	r4, r0
 800e9b6:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800e9ba:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800e9be:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800e9c2:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800e9c6:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800e9ca:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800e9ce:	2181      	movs	r1, #129	@ 0x81
 800e9d0:	f000 fecc 	bl	800f76c <uxr_init_session_info>
 800e9d4:	f104 0008 	add.w	r0, r4, #8
 800e9d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9dc:	f001 bcce 	b.w	801037c <uxr_init_stream_storage>
	...

0800e9e8 <uxr_set_status_callback>:
 800e9e8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800e9ec:	4770      	bx	lr
 800e9ee:	bf00      	nop

0800e9f0 <uxr_set_topic_callback>:
 800e9f0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800e9f4:	4770      	bx	lr
 800e9f6:	bf00      	nop

0800e9f8 <uxr_set_request_callback>:
 800e9f8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800e9fc:	4770      	bx	lr
 800e9fe:	bf00      	nop

0800ea00 <uxr_set_reply_callback>:
 800ea00:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800ea04:	4770      	bx	lr
 800ea06:	bf00      	nop

0800ea08 <uxr_create_output_best_effort_stream>:
 800ea08:	b510      	push	{r4, lr}
 800ea0a:	b084      	sub	sp, #16
 800ea0c:	e9cd 2100 	strd	r2, r1, [sp]
 800ea10:	4604      	mov	r4, r0
 800ea12:	f000 ff95 	bl	800f940 <uxr_session_header_offset>
 800ea16:	e9dd 2100 	ldrd	r2, r1, [sp]
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	f104 0008 	add.w	r0, r4, #8
 800ea20:	b004      	add	sp, #16
 800ea22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea26:	f001 bcf3 	b.w	8010410 <uxr_add_output_best_effort_buffer>
 800ea2a:	bf00      	nop

0800ea2c <uxr_create_output_reliable_stream>:
 800ea2c:	b510      	push	{r4, lr}
 800ea2e:	b088      	sub	sp, #32
 800ea30:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800ea34:	4604      	mov	r4, r0
 800ea36:	9303      	str	r3, [sp, #12]
 800ea38:	f000 ff82 	bl	800f940 <uxr_session_header_offset>
 800ea3c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800ea40:	9000      	str	r0, [sp, #0]
 800ea42:	9905      	ldr	r1, [sp, #20]
 800ea44:	f104 0008 	add.w	r0, r4, #8
 800ea48:	f001 fcf6 	bl	8010438 <uxr_add_output_reliable_buffer>
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	b2c3      	uxtb	r3, r0
 800ea50:	f363 0207 	bfi	r2, r3, #0, #8
 800ea54:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800ea58:	f363 220f 	bfi	r2, r3, #8, #8
 800ea5c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800ea60:	f363 4217 	bfi	r2, r3, #16, #8
 800ea64:	0e03      	lsrs	r3, r0, #24
 800ea66:	f363 621f 	bfi	r2, r3, #24, #8
 800ea6a:	4610      	mov	r0, r2
 800ea6c:	b008      	add	sp, #32
 800ea6e:	bd10      	pop	{r4, pc}

0800ea70 <uxr_create_input_best_effort_stream>:
 800ea70:	b082      	sub	sp, #8
 800ea72:	3008      	adds	r0, #8
 800ea74:	b002      	add	sp, #8
 800ea76:	f001 bcf9 	b.w	801046c <uxr_add_input_best_effort_buffer>
 800ea7a:	bf00      	nop

0800ea7c <uxr_create_input_reliable_stream>:
 800ea7c:	b510      	push	{r4, lr}
 800ea7e:	b084      	sub	sp, #16
 800ea80:	4c0b      	ldr	r4, [pc, #44]	@ (800eab0 <uxr_create_input_reliable_stream+0x34>)
 800ea82:	9400      	str	r4, [sp, #0]
 800ea84:	3008      	adds	r0, #8
 800ea86:	f001 fd07 	bl	8010498 <uxr_add_input_reliable_buffer>
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	b2c3      	uxtb	r3, r0
 800ea8e:	f363 0207 	bfi	r2, r3, #0, #8
 800ea92:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800ea96:	f363 220f 	bfi	r2, r3, #8, #8
 800ea9a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800ea9e:	f363 4217 	bfi	r2, r3, #16, #8
 800eaa2:	0e03      	lsrs	r3, r0, #24
 800eaa4:	f363 621f 	bfi	r2, r3, #24, #8
 800eaa8:	4610      	mov	r0, r2
 800eaaa:	b004      	add	sp, #16
 800eaac:	bd10      	pop	{r4, pc}
 800eaae:	bf00      	nop
 800eab0:	0800e88d 	.word	0x0800e88d

0800eab4 <uxr_epoch_nanos>:
 800eab4:	b510      	push	{r4, lr}
 800eab6:	4604      	mov	r4, r0
 800eab8:	f001 fda4 	bl	8010604 <uxr_nanos>
 800eabc:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800eac0:	1ac0      	subs	r0, r0, r3
 800eac2:	eb61 0102 	sbc.w	r1, r1, r2
 800eac6:	bd10      	pop	{r4, pc}

0800eac8 <uxr_flash_output_streams>:
 800eac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eacc:	7e03      	ldrb	r3, [r0, #24]
 800eace:	b084      	sub	sp, #16
 800ead0:	4604      	mov	r4, r0
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d035      	beq.n	800eb42 <uxr_flash_output_streams+0x7a>
 800ead6:	f04f 0900 	mov.w	r9, #0
 800eada:	4648      	mov	r0, r9
 800eadc:	f10d 0802 	add.w	r8, sp, #2
 800eae0:	af03      	add	r7, sp, #12
 800eae2:	ae02      	add	r6, sp, #8
 800eae4:	e006      	b.n	800eaf4 <uxr_flash_output_streams+0x2c>
 800eae6:	7e23      	ldrb	r3, [r4, #24]
 800eae8:	f109 0901 	add.w	r9, r9, #1
 800eaec:	fa5f f089 	uxtb.w	r0, r9
 800eaf0:	4283      	cmp	r3, r0
 800eaf2:	d926      	bls.n	800eb42 <uxr_flash_output_streams+0x7a>
 800eaf4:	2201      	movs	r2, #1
 800eaf6:	4611      	mov	r1, r2
 800eaf8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800eafc:	f001 fbea 	bl	80102d4 <uxr_stream_id>
 800eb00:	3508      	adds	r5, #8
 800eb02:	4684      	mov	ip, r0
 800eb04:	4643      	mov	r3, r8
 800eb06:	463a      	mov	r2, r7
 800eb08:	4631      	mov	r1, r6
 800eb0a:	4628      	mov	r0, r5
 800eb0c:	f8cd c004 	str.w	ip, [sp, #4]
 800eb10:	f007 fc90 	bl	8016434 <uxr_prepare_best_effort_buffer_to_send>
 800eb14:	2800      	cmp	r0, #0
 800eb16:	d0e6      	beq.n	800eae6 <uxr_flash_output_streams+0x1e>
 800eb18:	9b02      	ldr	r3, [sp, #8]
 800eb1a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800eb1e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800eb22:	4620      	mov	r0, r4
 800eb24:	f000 feb6 	bl	800f894 <uxr_stamp_session_header>
 800eb28:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800eb2a:	9a03      	ldr	r2, [sp, #12]
 800eb2c:	685d      	ldr	r5, [r3, #4]
 800eb2e:	6818      	ldr	r0, [r3, #0]
 800eb30:	9902      	ldr	r1, [sp, #8]
 800eb32:	47a8      	blx	r5
 800eb34:	f109 0901 	add.w	r9, r9, #1
 800eb38:	7e23      	ldrb	r3, [r4, #24]
 800eb3a:	fa5f f089 	uxtb.w	r0, r9
 800eb3e:	4283      	cmp	r3, r0
 800eb40:	d8d8      	bhi.n	800eaf4 <uxr_flash_output_streams+0x2c>
 800eb42:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800eb46:	b38b      	cbz	r3, 800ebac <uxr_flash_output_streams+0xe4>
 800eb48:	f04f 0900 	mov.w	r9, #0
 800eb4c:	f10d 0802 	add.w	r8, sp, #2
 800eb50:	af03      	add	r7, sp, #12
 800eb52:	ae02      	add	r6, sp, #8
 800eb54:	4648      	mov	r0, r9
 800eb56:	2201      	movs	r2, #1
 800eb58:	2102      	movs	r1, #2
 800eb5a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800eb5e:	f001 fbb9 	bl	80102d4 <uxr_stream_id>
 800eb62:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800eb66:	3520      	adds	r5, #32
 800eb68:	9001      	str	r0, [sp, #4]
 800eb6a:	e00d      	b.n	800eb88 <uxr_flash_output_streams+0xc0>
 800eb6c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800eb70:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800eb74:	9b02      	ldr	r3, [sp, #8]
 800eb76:	f000 fe8d 	bl	800f894 <uxr_stamp_session_header>
 800eb7a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800eb7c:	9a03      	ldr	r2, [sp, #12]
 800eb7e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800eb82:	9902      	ldr	r1, [sp, #8]
 800eb84:	6818      	ldr	r0, [r3, #0]
 800eb86:	47d0      	blx	sl
 800eb88:	4643      	mov	r3, r8
 800eb8a:	463a      	mov	r2, r7
 800eb8c:	4631      	mov	r1, r6
 800eb8e:	4628      	mov	r0, r5
 800eb90:	f007 fe6e 	bl	8016870 <uxr_prepare_next_reliable_buffer_to_send>
 800eb94:	4603      	mov	r3, r0
 800eb96:	4620      	mov	r0, r4
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d1e7      	bne.n	800eb6c <uxr_flash_output_streams+0xa4>
 800eb9c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800eba0:	f109 0901 	add.w	r9, r9, #1
 800eba4:	fa5f f089 	uxtb.w	r0, r9
 800eba8:	4283      	cmp	r3, r0
 800ebaa:	d8d4      	bhi.n	800eb56 <uxr_flash_output_streams+0x8e>
 800ebac:	b004      	add	sp, #16
 800ebae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebb2:	bf00      	nop

0800ebb4 <read_submessage_info>:
 800ebb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebb8:	460d      	mov	r5, r1
 800ebba:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800ebbe:	4669      	mov	r1, sp
 800ebc0:	4607      	mov	r7, r0
 800ebc2:	4628      	mov	r0, r5
 800ebc4:	f002 fca6 	bl	8011514 <uxr_deserialize_BaseObjectReply>
 800ebc8:	a902      	add	r1, sp, #8
 800ebca:	4604      	mov	r4, r0
 800ebcc:	4628      	mov	r0, r5
 800ebce:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800ebd2:	f7fe fa03 	bl	800cfdc <ucdr_deserialize_bool>
 800ebd6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800ebda:	4004      	ands	r4, r0
 800ebdc:	b2e4      	uxtb	r4, r4
 800ebde:	b95b      	cbnz	r3, 800ebf8 <read_submessage_info+0x44>
 800ebe0:	a987      	add	r1, sp, #540	@ 0x21c
 800ebe2:	4628      	mov	r0, r5
 800ebe4:	f7fe f9fa 	bl	800cfdc <ucdr_deserialize_bool>
 800ebe8:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800ebec:	4606      	mov	r6, r0
 800ebee:	b94b      	cbnz	r3, 800ec04 <read_submessage_info+0x50>
 800ebf0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800ebf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebf8:	a903      	add	r1, sp, #12
 800ebfa:	4628      	mov	r0, r5
 800ebfc:	f002 fb32 	bl	8011264 <uxr_deserialize_ObjectVariant>
 800ec00:	4004      	ands	r4, r0
 800ec02:	e7ed      	b.n	800ebe0 <read_submessage_info+0x2c>
 800ec04:	a988      	add	r1, sp, #544	@ 0x220
 800ec06:	4628      	mov	r0, r5
 800ec08:	f7fe fa16 	bl	800d038 <ucdr_deserialize_uint8_t>
 800ec0c:	4234      	tst	r4, r6
 800ec0e:	d0ef      	beq.n	800ebf0 <read_submessage_info+0x3c>
 800ec10:	2800      	cmp	r0, #0
 800ec12:	d0ed      	beq.n	800ebf0 <read_submessage_info+0x3c>
 800ec14:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800ec18:	2b0d      	cmp	r3, #13
 800ec1a:	d1e9      	bne.n	800ebf0 <read_submessage_info+0x3c>
 800ec1c:	a98a      	add	r1, sp, #552	@ 0x228
 800ec1e:	4628      	mov	r0, r5
 800ec20:	f7fe ffb0 	bl	800db84 <ucdr_deserialize_int16_t>
 800ec24:	b140      	cbz	r0, 800ec38 <read_submessage_info+0x84>
 800ec26:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	dd07      	ble.n	800ec3e <read_submessage_info+0x8a>
 800ec2e:	f1b8 0f00 	cmp.w	r8, #0
 800ec32:	bf14      	ite	ne
 800ec34:	2001      	movne	r0, #1
 800ec36:	2002      	moveq	r0, #2
 800ec38:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800ec3c:	e7d8      	b.n	800ebf0 <read_submessage_info+0x3c>
 800ec3e:	2000      	movs	r0, #0
 800ec40:	e7fa      	b.n	800ec38 <read_submessage_info+0x84>
 800ec42:	bf00      	nop

0800ec44 <read_submessage_list>:
 800ec44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec48:	b097      	sub	sp, #92	@ 0x5c
 800ec4a:	4ec1      	ldr	r6, [pc, #772]	@ (800ef50 <read_submessage_list+0x30c>)
 800ec4c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ec4e:	4604      	mov	r4, r0
 800ec50:	460d      	mov	r5, r1
 800ec52:	f04f 0801 	mov.w	r8, #1
 800ec56:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800ec5a:	aa0c      	add	r2, sp, #48	@ 0x30
 800ec5c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800ec60:	4628      	mov	r0, r5
 800ec62:	f001 fc89 	bl	8010578 <uxr_read_submessage_header>
 800ec66:	2800      	cmp	r0, #0
 800ec68:	f000 813e 	beq.w	800eee8 <read_submessage_list+0x2a4>
 800ec6c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800ec70:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800ec74:	3b02      	subs	r3, #2
 800ec76:	2b0d      	cmp	r3, #13
 800ec78:	d8ed      	bhi.n	800ec56 <read_submessage_list+0x12>
 800ec7a:	a101      	add	r1, pc, #4	@ (adr r1, 800ec80 <read_submessage_list+0x3c>)
 800ec7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ec80:	0800eedf 	.word	0x0800eedf
 800ec84:	0800ec57 	.word	0x0800ec57
 800ec88:	0800eecf 	.word	0x0800eecf
 800ec8c:	0800ee6d 	.word	0x0800ee6d
 800ec90:	0800ee63 	.word	0x0800ee63
 800ec94:	0800ec57 	.word	0x0800ec57
 800ec98:	0800ec57 	.word	0x0800ec57
 800ec9c:	0800edc3 	.word	0x0800edc3
 800eca0:	0800ed53 	.word	0x0800ed53
 800eca4:	0800ed13 	.word	0x0800ed13
 800eca8:	0800ec57 	.word	0x0800ec57
 800ecac:	0800ec57 	.word	0x0800ec57
 800ecb0:	0800ec57 	.word	0x0800ec57
 800ecb4:	0800ecb9 	.word	0x0800ecb9
 800ecb8:	a910      	add	r1, sp, #64	@ 0x40
 800ecba:	4628      	mov	r0, r5
 800ecbc:	f002 fe4e 	bl	801195c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800ecc0:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800ecc4:	f1b9 0f00 	cmp.w	r9, #0
 800ecc8:	f000 8116 	beq.w	800eef8 <read_submessage_list+0x2b4>
 800eccc:	f001 fc9a 	bl	8010604 <uxr_nanos>
 800ecd0:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800ecd2:	4602      	mov	r2, r0
 800ecd4:	460b      	mov	r3, r1
 800ecd6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800ecd8:	2100      	movs	r1, #0
 800ecda:	468c      	mov	ip, r1
 800ecdc:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800ece0:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800ece4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ece6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800ece8:	468c      	mov	ip, r1
 800ecea:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800ecee:	46e2      	mov	sl, ip
 800ecf0:	46bc      	mov	ip, r7
 800ecf2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800ecf6:	fbc0 7106 	smlal	r7, r1, r0, r6
 800ecfa:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800ecfe:	e9cd 7100 	strd	r7, r1, [sp]
 800ed02:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800ed06:	9106      	str	r1, [sp, #24]
 800ed08:	4620      	mov	r0, r4
 800ed0a:	47c8      	blx	r9
 800ed0c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800ed10:	e7a1      	b.n	800ec56 <read_submessage_list+0x12>
 800ed12:	a910      	add	r1, sp, #64	@ 0x40
 800ed14:	4628      	mov	r0, r5
 800ed16:	f002 fe0f 	bl	8011938 <uxr_deserialize_HEARTBEAT_Payload>
 800ed1a:	2100      	movs	r1, #0
 800ed1c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800ed20:	f001 fb02 	bl	8010328 <uxr_stream_id_from_raw>
 800ed24:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800ed28:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ed2a:	4639      	mov	r1, r7
 800ed2c:	f104 0008 	add.w	r0, r4, #8
 800ed30:	f001 fbe8 	bl	8010504 <uxr_get_input_reliable_stream>
 800ed34:	2800      	cmp	r0, #0
 800ed36:	d08e      	beq.n	800ec56 <read_submessage_list+0x12>
 800ed38:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800ed3c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800ed40:	f007 fae6 	bl	8016310 <uxr_process_heartbeat>
 800ed44:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800ed48:	463a      	mov	r2, r7
 800ed4a:	4620      	mov	r0, r4
 800ed4c:	f7ff fdf6 	bl	800e93c <write_submessage_acknack.isra.0>
 800ed50:	e781      	b.n	800ec56 <read_submessage_list+0x12>
 800ed52:	a910      	add	r1, sp, #64	@ 0x40
 800ed54:	4628      	mov	r0, r5
 800ed56:	f002 fdc7 	bl	80118e8 <uxr_deserialize_ACKNACK_Payload>
 800ed5a:	2100      	movs	r1, #0
 800ed5c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800ed60:	f001 fae2 	bl	8010328 <uxr_stream_id_from_raw>
 800ed64:	900d      	str	r0, [sp, #52]	@ 0x34
 800ed66:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800ed6a:	f104 0008 	add.w	r0, r4, #8
 800ed6e:	f001 fbb5 	bl	80104dc <uxr_get_output_reliable_stream>
 800ed72:	4607      	mov	r7, r0
 800ed74:	2800      	cmp	r0, #0
 800ed76:	f43f af6e 	beq.w	800ec56 <read_submessage_list+0x12>
 800ed7a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800ed7e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800ed82:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800ed86:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800ed8a:	b289      	uxth	r1, r1
 800ed8c:	f007 fe1a 	bl	80169c4 <uxr_process_acknack>
 800ed90:	4638      	mov	r0, r7
 800ed92:	f007 fdd7 	bl	8016944 <uxr_begin_output_nack_buffer_it>
 800ed96:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800ed9a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800ed9e:	e006      	b.n	800edae <read_submessage_list+0x16a>
 800eda0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800eda2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800eda4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800eda8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800edaa:	6818      	ldr	r0, [r3, #0]
 800edac:	47c8      	blx	r9
 800edae:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800edb2:	aa0f      	add	r2, sp, #60	@ 0x3c
 800edb4:	4651      	mov	r1, sl
 800edb6:	4638      	mov	r0, r7
 800edb8:	f007 fdc6 	bl	8016948 <uxr_next_reliable_nack_buffer_to_send>
 800edbc:	2800      	cmp	r0, #0
 800edbe:	d1ef      	bne.n	800eda0 <read_submessage_list+0x15c>
 800edc0:	e749      	b.n	800ec56 <read_submessage_list+0x12>
 800edc2:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800edc6:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800edca:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800edce:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800edd2:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800edd6:	4651      	mov	r1, sl
 800edd8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800eddc:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800ede0:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800ede4:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800ede8:	4628      	mov	r0, r5
 800edea:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800edee:	f002 fadb 	bl	80113a8 <uxr_deserialize_BaseObjectRequest>
 800edf2:	4650      	mov	r0, sl
 800edf4:	a90f      	add	r1, sp, #60	@ 0x3c
 800edf6:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800edfa:	f000 fdc7 	bl	800f98c <uxr_parse_base_object_request>
 800edfe:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800ee02:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ee04:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800ee08:	9110      	str	r1, [sp, #64]	@ 0x40
 800ee0a:	3f04      	subs	r7, #4
 800ee0c:	f009 090e 	and.w	r9, r9, #14
 800ee10:	b2bf      	uxth	r7, r7
 800ee12:	f1bb 0f00 	cmp.w	fp, #0
 800ee16:	d006      	beq.n	800ee26 <read_submessage_list+0x1e2>
 800ee18:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800ee1c:	9300      	str	r3, [sp, #0]
 800ee1e:	4652      	mov	r2, sl
 800ee20:	2300      	movs	r3, #0
 800ee22:	4620      	mov	r0, r4
 800ee24:	47d8      	blx	fp
 800ee26:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800ee28:	b16a      	cbz	r2, 800ee46 <read_submessage_list+0x202>
 800ee2a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800ee2c:	2100      	movs	r1, #0
 800ee2e:	3802      	subs	r0, #2
 800ee30:	e002      	b.n	800ee38 <read_submessage_list+0x1f4>
 800ee32:	3101      	adds	r1, #1
 800ee34:	4291      	cmp	r1, r2
 800ee36:	d006      	beq.n	800ee46 <read_submessage_list+0x202>
 800ee38:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800ee3c:	4553      	cmp	r3, sl
 800ee3e:	d1f8      	bne.n	800ee32 <read_submessage_list+0x1ee>
 800ee40:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800ee42:	2200      	movs	r2, #0
 800ee44:	545a      	strb	r2, [r3, r1]
 800ee46:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800ee4a:	9102      	str	r1, [sp, #8]
 800ee4c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ee4e:	9101      	str	r1, [sp, #4]
 800ee50:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800ee52:	9100      	str	r1, [sp, #0]
 800ee54:	464b      	mov	r3, r9
 800ee56:	463a      	mov	r2, r7
 800ee58:	4629      	mov	r1, r5
 800ee5a:	4620      	mov	r0, r4
 800ee5c:	f7ff fc4c 	bl	800e6f8 <read_submessage_format>
 800ee60:	e6f9      	b.n	800ec56 <read_submessage_list+0x12>
 800ee62:	4629      	mov	r1, r5
 800ee64:	4620      	mov	r0, r4
 800ee66:	f7ff fea5 	bl	800ebb4 <read_submessage_info>
 800ee6a:	e6f4      	b.n	800ec56 <read_submessage_list+0x12>
 800ee6c:	2a00      	cmp	r2, #0
 800ee6e:	d03e      	beq.n	800eeee <read_submessage_list+0x2aa>
 800ee70:	a910      	add	r1, sp, #64	@ 0x40
 800ee72:	4628      	mov	r0, r5
 800ee74:	f002 fc94 	bl	80117a0 <uxr_deserialize_STATUS_Payload>
 800ee78:	a90e      	add	r1, sp, #56	@ 0x38
 800ee7a:	aa0d      	add	r2, sp, #52	@ 0x34
 800ee7c:	a810      	add	r0, sp, #64	@ 0x40
 800ee7e:	f000 fd85 	bl	800f98c <uxr_parse_base_object_request>
 800ee82:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800ee86:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ee88:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800ee8c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800ee90:	910f      	str	r1, [sp, #60]	@ 0x3c
 800ee92:	f1ba 0f00 	cmp.w	sl, #0
 800ee96:	d006      	beq.n	800eea6 <read_submessage_list+0x262>
 800ee98:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800ee9c:	9300      	str	r3, [sp, #0]
 800ee9e:	463a      	mov	r2, r7
 800eea0:	464b      	mov	r3, r9
 800eea2:	4620      	mov	r0, r4
 800eea4:	47d0      	blx	sl
 800eea6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800eea8:	2a00      	cmp	r2, #0
 800eeaa:	f43f aed4 	beq.w	800ec56 <read_submessage_list+0x12>
 800eeae:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800eeb0:	2100      	movs	r1, #0
 800eeb2:	3802      	subs	r0, #2
 800eeb4:	e003      	b.n	800eebe <read_submessage_list+0x27a>
 800eeb6:	3101      	adds	r1, #1
 800eeb8:	4291      	cmp	r1, r2
 800eeba:	f43f aecc 	beq.w	800ec56 <read_submessage_list+0x12>
 800eebe:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800eec2:	42bb      	cmp	r3, r7
 800eec4:	d1f7      	bne.n	800eeb6 <read_submessage_list+0x272>
 800eec6:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800eec8:	f803 9001 	strb.w	r9, [r3, r1]
 800eecc:	e6c3      	b.n	800ec56 <read_submessage_list+0x12>
 800eece:	2a00      	cmp	r2, #0
 800eed0:	f47f aec1 	bne.w	800ec56 <read_submessage_list+0x12>
 800eed4:	4629      	mov	r1, r5
 800eed6:	4620      	mov	r0, r4
 800eed8:	f000 fc9e 	bl	800f818 <uxr_read_create_session_status>
 800eedc:	e6bb      	b.n	800ec56 <read_submessage_list+0x12>
 800eede:	4629      	mov	r1, r5
 800eee0:	4620      	mov	r0, r4
 800eee2:	f7ff fcf5 	bl	800e8d0 <read_submessage_get_info>
 800eee6:	e6b6      	b.n	800ec56 <read_submessage_list+0x12>
 800eee8:	b017      	add	sp, #92	@ 0x5c
 800eeea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeee:	4629      	mov	r1, r5
 800eef0:	4620      	mov	r0, r4
 800eef2:	f000 fc9d 	bl	800f830 <uxr_read_delete_session_status>
 800eef6:	e6ae      	b.n	800ec56 <read_submessage_list+0x12>
 800eef8:	f001 fb84 	bl	8010604 <uxr_nanos>
 800eefc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800eefe:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800ef00:	464f      	mov	r7, r9
 800ef02:	fbc3 2706 	smlal	r2, r7, r3, r6
 800ef06:	1812      	adds	r2, r2, r0
 800ef08:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ef0a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800ef0c:	eb47 0101 	adc.w	r1, r7, r1
 800ef10:	464f      	mov	r7, r9
 800ef12:	fbc3 0706 	smlal	r0, r7, r3, r6
 800ef16:	463b      	mov	r3, r7
 800ef18:	4684      	mov	ip, r0
 800ef1a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800ef1e:	fbc7 0906 	smlal	r0, r9, r7, r6
 800ef22:	eb1c 0c00 	adds.w	ip, ip, r0
 800ef26:	464f      	mov	r7, r9
 800ef28:	eb43 0307 	adc.w	r3, r3, r7
 800ef2c:	ebb2 0c0c 	subs.w	ip, r2, ip
 800ef30:	eb61 0303 	sbc.w	r3, r1, r3
 800ef34:	0fda      	lsrs	r2, r3, #31
 800ef36:	eb12 020c 	adds.w	r2, r2, ip
 800ef3a:	f143 0300 	adc.w	r3, r3, #0
 800ef3e:	0852      	lsrs	r2, r2, #1
 800ef40:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800ef44:	105b      	asrs	r3, r3, #1
 800ef46:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800ef4a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800ef4e:	e6dd      	b.n	800ed0c <read_submessage_list+0xc8>
 800ef50:	3b9aca00 	.word	0x3b9aca00

0800ef54 <listen_message_reliably>:
 800ef54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef58:	1e0b      	subs	r3, r1, #0
 800ef5a:	b09d      	sub	sp, #116	@ 0x74
 800ef5c:	bfb8      	it	lt
 800ef5e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800ef62:	4680      	mov	r8, r0
 800ef64:	9305      	str	r3, [sp, #20]
 800ef66:	f001 fb33 	bl	80105d0 <uxr_millis>
 800ef6a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800ef6e:	4681      	mov	r9, r0
 800ef70:	2a00      	cmp	r2, #0
 800ef72:	f000 80a1 	beq.w	800f0b8 <listen_message_reliably+0x164>
 800ef76:	2600      	movs	r6, #0
 800ef78:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ef7c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800ef80:	9303      	str	r3, [sp, #12]
 800ef82:	4630      	mov	r0, r6
 800ef84:	460f      	mov	r7, r1
 800ef86:	e00f      	b.n	800efa8 <listen_message_reliably+0x54>
 800ef88:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800ef8c:	9903      	ldr	r1, [sp, #12]
 800ef8e:	455a      	cmp	r2, fp
 800ef90:	f106 0601 	add.w	r6, r6, #1
 800ef94:	eb73 0101 	sbcs.w	r1, r3, r1
 800ef98:	b2f0      	uxtb	r0, r6
 800ef9a:	da01      	bge.n	800efa0 <listen_message_reliably+0x4c>
 800ef9c:	4693      	mov	fp, r2
 800ef9e:	9303      	str	r3, [sp, #12]
 800efa0:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800efa4:	4283      	cmp	r3, r0
 800efa6:	d960      	bls.n	800f06a <listen_message_reliably+0x116>
 800efa8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800efac:	2102      	movs	r1, #2
 800efae:	2201      	movs	r2, #1
 800efb0:	f001 f990 	bl	80102d4 <uxr_stream_id>
 800efb4:	00e4      	lsls	r4, r4, #3
 800efb6:	f104 0520 	add.w	r5, r4, #32
 800efba:	4445      	add	r5, r8
 800efbc:	4601      	mov	r1, r0
 800efbe:	463b      	mov	r3, r7
 800efc0:	464a      	mov	r2, r9
 800efc2:	4628      	mov	r0, r5
 800efc4:	9109      	str	r1, [sp, #36]	@ 0x24
 800efc6:	f007 fc93 	bl	80168f0 <uxr_update_output_stream_heartbeat_timestamp>
 800efca:	eb08 0304 	add.w	r3, r8, r4
 800efce:	2800      	cmp	r0, #0
 800efd0:	d0da      	beq.n	800ef88 <listen_message_reliably+0x34>
 800efd2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800efd6:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800efda:	9304      	str	r3, [sp, #16]
 800efdc:	4640      	mov	r0, r8
 800efde:	f000 fcaf 	bl	800f940 <uxr_session_header_offset>
 800efe2:	3501      	adds	r5, #1
 800efe4:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800efe8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800efec:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800eff0:	2300      	movs	r3, #0
 800eff2:	2211      	movs	r2, #17
 800eff4:	9000      	str	r0, [sp, #0]
 800eff6:	a90c      	add	r1, sp, #48	@ 0x30
 800eff8:	4650      	mov	r0, sl
 800effa:	f7fe ffa1 	bl	800df40 <ucdr_init_buffer_origin_offset>
 800effe:	2300      	movs	r3, #0
 800f000:	2205      	movs	r2, #5
 800f002:	210b      	movs	r1, #11
 800f004:	4650      	mov	r0, sl
 800f006:	f001 fa9d 	bl	8010544 <uxr_buffer_submessage_header>
 800f00a:	8968      	ldrh	r0, [r5, #10]
 800f00c:	2101      	movs	r1, #1
 800f00e:	f007 fd31 	bl	8016a74 <uxr_seq_num_add>
 800f012:	892b      	ldrh	r3, [r5, #8]
 800f014:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800f018:	4602      	mov	r2, r0
 800f01a:	9b04      	ldr	r3, [sp, #16]
 800f01c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800f020:	a90a      	add	r1, sp, #40	@ 0x28
 800f022:	4650      	mov	r0, sl
 800f024:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800f028:	f002 fc72 	bl	8011910 <uxr_serialize_HEARTBEAT_Payload>
 800f02c:	2200      	movs	r2, #0
 800f02e:	4611      	mov	r1, r2
 800f030:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f032:	4640      	mov	r0, r8
 800f034:	f000 fc2e 	bl	800f894 <uxr_stamp_session_header>
 800f038:	4650      	mov	r0, sl
 800f03a:	f7fe ffbf 	bl	800dfbc <ucdr_buffer_length>
 800f03e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800f042:	4602      	mov	r2, r0
 800f044:	a90c      	add	r1, sp, #48	@ 0x30
 800f046:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f04a:	4444      	add	r4, r8
 800f04c:	47a8      	blx	r5
 800f04e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800f052:	9903      	ldr	r1, [sp, #12]
 800f054:	455a      	cmp	r2, fp
 800f056:	f106 0601 	add.w	r6, r6, #1
 800f05a:	eb73 0101 	sbcs.w	r1, r3, r1
 800f05e:	b2f0      	uxtb	r0, r6
 800f060:	db9c      	blt.n	800ef9c <listen_message_reliably+0x48>
 800f062:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800f066:	4283      	cmp	r3, r0
 800f068:	d89e      	bhi.n	800efa8 <listen_message_reliably+0x54>
 800f06a:	9a03      	ldr	r2, [sp, #12]
 800f06c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f070:	429a      	cmp	r2, r3
 800f072:	bf08      	it	eq
 800f074:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800f078:	d01e      	beq.n	800f0b8 <listen_message_reliably+0x164>
 800f07a:	ebab 0309 	sub.w	r3, fp, r9
 800f07e:	9905      	ldr	r1, [sp, #20]
 800f080:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800f084:	2b00      	cmp	r3, #0
 800f086:	bf08      	it	eq
 800f088:	2301      	moveq	r3, #1
 800f08a:	4299      	cmp	r1, r3
 800f08c:	bfa8      	it	ge
 800f08e:	4619      	movge	r1, r3
 800f090:	6894      	ldr	r4, [r2, #8]
 800f092:	6810      	ldr	r0, [r2, #0]
 800f094:	4689      	mov	r9, r1
 800f096:	460b      	mov	r3, r1
 800f098:	aa08      	add	r2, sp, #32
 800f09a:	a907      	add	r1, sp, #28
 800f09c:	47a0      	blx	r4
 800f09e:	b968      	cbnz	r0, 800f0bc <listen_message_reliably+0x168>
 800f0a0:	9b05      	ldr	r3, [sp, #20]
 800f0a2:	eba3 0309 	sub.w	r3, r3, r9
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	9305      	str	r3, [sp, #20]
 800f0aa:	f73f af5c 	bgt.w	800ef66 <listen_message_reliably+0x12>
 800f0ae:	4604      	mov	r4, r0
 800f0b0:	4620      	mov	r0, r4
 800f0b2:	b01d      	add	sp, #116	@ 0x74
 800f0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0b8:	9b05      	ldr	r3, [sp, #20]
 800f0ba:	e7e0      	b.n	800f07e <listen_message_reliably+0x12a>
 800f0bc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800f0c0:	4604      	mov	r4, r0
 800f0c2:	a80c      	add	r0, sp, #48	@ 0x30
 800f0c4:	f7fe ff4e 	bl	800df64 <ucdr_init_buffer>
 800f0c8:	2500      	movs	r5, #0
 800f0ca:	f10d 031a 	add.w	r3, sp, #26
 800f0ce:	aa06      	add	r2, sp, #24
 800f0d0:	a90c      	add	r1, sp, #48	@ 0x30
 800f0d2:	4640      	mov	r0, r8
 800f0d4:	f88d 5018 	strb.w	r5, [sp, #24]
 800f0d8:	f000 fbf0 	bl	800f8bc <uxr_read_session_header>
 800f0dc:	b918      	cbnz	r0, 800f0e6 <listen_message_reliably+0x192>
 800f0de:	4620      	mov	r0, r4
 800f0e0:	b01d      	add	sp, #116	@ 0x74
 800f0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0e6:	4629      	mov	r1, r5
 800f0e8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f0ec:	f001 f91c 	bl	8010328 <uxr_stream_id_from_raw>
 800f0f0:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800f0f4:	2d01      	cmp	r5, #1
 800f0f6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800f0fa:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800f0fe:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800f102:	d04b      	beq.n	800f19c <listen_message_reliably+0x248>
 800f104:	2d02      	cmp	r5, #2
 800f106:	d00f      	beq.n	800f128 <listen_message_reliably+0x1d4>
 800f108:	2d00      	cmp	r5, #0
 800f10a:	d1e8      	bne.n	800f0de <listen_message_reliably+0x18a>
 800f10c:	4629      	mov	r1, r5
 800f10e:	4628      	mov	r0, r5
 800f110:	f001 f90a 	bl	8010328 <uxr_stream_id_from_raw>
 800f114:	a90c      	add	r1, sp, #48	@ 0x30
 800f116:	4602      	mov	r2, r0
 800f118:	4640      	mov	r0, r8
 800f11a:	920a      	str	r2, [sp, #40]	@ 0x28
 800f11c:	f7ff fd92 	bl	800ec44 <read_submessage_list>
 800f120:	4620      	mov	r0, r4
 800f122:	b01d      	add	sp, #116	@ 0x74
 800f124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f128:	4631      	mov	r1, r6
 800f12a:	f108 0008 	add.w	r0, r8, #8
 800f12e:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800f132:	f001 f9e7 	bl	8010504 <uxr_get_input_reliable_stream>
 800f136:	4607      	mov	r7, r0
 800f138:	b338      	cbz	r0, 800f18a <listen_message_reliably+0x236>
 800f13a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f13c:	9203      	str	r2, [sp, #12]
 800f13e:	a80c      	add	r0, sp, #48	@ 0x30
 800f140:	f7fe ff40 	bl	800dfc4 <ucdr_buffer_remaining>
 800f144:	4603      	mov	r3, r0
 800f146:	f10d 0019 	add.w	r0, sp, #25
 800f14a:	9000      	str	r0, [sp, #0]
 800f14c:	9a03      	ldr	r2, [sp, #12]
 800f14e:	4651      	mov	r1, sl
 800f150:	4638      	mov	r0, r7
 800f152:	f006 ffe3 	bl	801611c <uxr_receive_reliable_message>
 800f156:	b1c0      	cbz	r0, 800f18a <listen_message_reliably+0x236>
 800f158:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f15c:	b393      	cbz	r3, 800f1c4 <listen_message_reliably+0x270>
 800f15e:	ad14      	add	r5, sp, #80	@ 0x50
 800f160:	f04f 0a02 	mov.w	sl, #2
 800f164:	e00a      	b.n	800f17c <listen_message_reliably+0x228>
 800f166:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800f16a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800f16e:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800f172:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f174:	4629      	mov	r1, r5
 800f176:	4640      	mov	r0, r8
 800f178:	f7ff fd64 	bl	800ec44 <read_submessage_list>
 800f17c:	2204      	movs	r2, #4
 800f17e:	4629      	mov	r1, r5
 800f180:	4638      	mov	r0, r7
 800f182:	f007 f84b 	bl	801621c <uxr_next_input_reliable_buffer_available>
 800f186:	2800      	cmp	r0, #0
 800f188:	d1ed      	bne.n	800f166 <listen_message_reliably+0x212>
 800f18a:	4640      	mov	r0, r8
 800f18c:	4632      	mov	r2, r6
 800f18e:	4649      	mov	r1, r9
 800f190:	f7ff fbd4 	bl	800e93c <write_submessage_acknack.isra.0>
 800f194:	4620      	mov	r0, r4
 800f196:	b01d      	add	sp, #116	@ 0x74
 800f198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f19c:	4631      	mov	r1, r6
 800f19e:	f108 0008 	add.w	r0, r8, #8
 800f1a2:	f001 f9a5 	bl	80104f0 <uxr_get_input_best_effort_stream>
 800f1a6:	2800      	cmp	r0, #0
 800f1a8:	d099      	beq.n	800f0de <listen_message_reliably+0x18a>
 800f1aa:	4651      	mov	r1, sl
 800f1ac:	f006 ff22 	bl	8015ff4 <uxr_receive_best_effort_message>
 800f1b0:	2800      	cmp	r0, #0
 800f1b2:	d094      	beq.n	800f0de <listen_message_reliably+0x18a>
 800f1b4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800f1b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f1ba:	a90c      	add	r1, sp, #48	@ 0x30
 800f1bc:	4640      	mov	r0, r8
 800f1be:	f7ff fd41 	bl	800ec44 <read_submessage_list>
 800f1c2:	e78c      	b.n	800f0de <listen_message_reliably+0x18a>
 800f1c4:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800f1c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f1ca:	a90c      	add	r1, sp, #48	@ 0x30
 800f1cc:	4640      	mov	r0, r8
 800f1ce:	f7ff fd39 	bl	800ec44 <read_submessage_list>
 800f1d2:	e7c4      	b.n	800f15e <listen_message_reliably+0x20a>

0800f1d4 <uxr_run_session_timeout>:
 800f1d4:	b570      	push	{r4, r5, r6, lr}
 800f1d6:	4604      	mov	r4, r0
 800f1d8:	460d      	mov	r5, r1
 800f1da:	f001 f9f9 	bl	80105d0 <uxr_millis>
 800f1de:	4606      	mov	r6, r0
 800f1e0:	4620      	mov	r0, r4
 800f1e2:	f7ff fc71 	bl	800eac8 <uxr_flash_output_streams>
 800f1e6:	4629      	mov	r1, r5
 800f1e8:	4620      	mov	r0, r4
 800f1ea:	f7ff feb3 	bl	800ef54 <listen_message_reliably>
 800f1ee:	f001 f9ef 	bl	80105d0 <uxr_millis>
 800f1f2:	1b83      	subs	r3, r0, r6
 800f1f4:	1ae9      	subs	r1, r5, r3
 800f1f6:	2900      	cmp	r1, #0
 800f1f8:	dcf6      	bgt.n	800f1e8 <uxr_run_session_timeout+0x14>
 800f1fa:	f104 0008 	add.w	r0, r4, #8
 800f1fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f202:	f001 b989 	b.w	8010518 <uxr_output_streams_confirmed>
 800f206:	bf00      	nop

0800f208 <uxr_run_session_until_data>:
 800f208:	b570      	push	{r4, r5, r6, lr}
 800f20a:	4604      	mov	r4, r0
 800f20c:	460d      	mov	r5, r1
 800f20e:	f001 f9df 	bl	80105d0 <uxr_millis>
 800f212:	4606      	mov	r6, r0
 800f214:	4620      	mov	r0, r4
 800f216:	f7ff fc57 	bl	800eac8 <uxr_flash_output_streams>
 800f21a:	2300      	movs	r3, #0
 800f21c:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800f220:	4629      	mov	r1, r5
 800f222:	e005      	b.n	800f230 <uxr_run_session_until_data+0x28>
 800f224:	f001 f9d4 	bl	80105d0 <uxr_millis>
 800f228:	1b83      	subs	r3, r0, r6
 800f22a:	1ae9      	subs	r1, r5, r3
 800f22c:	2900      	cmp	r1, #0
 800f22e:	dd07      	ble.n	800f240 <uxr_run_session_until_data+0x38>
 800f230:	4620      	mov	r0, r4
 800f232:	f7ff fe8f 	bl	800ef54 <listen_message_reliably>
 800f236:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800f23a:	2800      	cmp	r0, #0
 800f23c:	d0f2      	beq.n	800f224 <uxr_run_session_until_data+0x1c>
 800f23e:	bd70      	pop	{r4, r5, r6, pc}
 800f240:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800f244:	bd70      	pop	{r4, r5, r6, pc}
 800f246:	bf00      	nop

0800f248 <uxr_run_session_until_confirm_delivery>:
 800f248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f24c:	4606      	mov	r6, r0
 800f24e:	460d      	mov	r5, r1
 800f250:	f001 f9be 	bl	80105d0 <uxr_millis>
 800f254:	4607      	mov	r7, r0
 800f256:	4630      	mov	r0, r6
 800f258:	f7ff fc36 	bl	800eac8 <uxr_flash_output_streams>
 800f25c:	2d00      	cmp	r5, #0
 800f25e:	f106 0808 	add.w	r8, r6, #8
 800f262:	bfa8      	it	ge
 800f264:	462c      	movge	r4, r5
 800f266:	da07      	bge.n	800f278 <uxr_run_session_until_confirm_delivery+0x30>
 800f268:	e00e      	b.n	800f288 <uxr_run_session_until_confirm_delivery+0x40>
 800f26a:	f7ff fe73 	bl	800ef54 <listen_message_reliably>
 800f26e:	f001 f9af 	bl	80105d0 <uxr_millis>
 800f272:	1bc3      	subs	r3, r0, r7
 800f274:	1aec      	subs	r4, r5, r3
 800f276:	d407      	bmi.n	800f288 <uxr_run_session_until_confirm_delivery+0x40>
 800f278:	4640      	mov	r0, r8
 800f27a:	f001 f94d 	bl	8010518 <uxr_output_streams_confirmed>
 800f27e:	4603      	mov	r3, r0
 800f280:	4621      	mov	r1, r4
 800f282:	4630      	mov	r0, r6
 800f284:	2b00      	cmp	r3, #0
 800f286:	d0f0      	beq.n	800f26a <uxr_run_session_until_confirm_delivery+0x22>
 800f288:	4640      	mov	r0, r8
 800f28a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f28e:	f001 b943 	b.w	8010518 <uxr_output_streams_confirmed>
 800f292:	bf00      	nop

0800f294 <uxr_run_session_until_all_status>:
 800f294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f298:	9c08      	ldr	r4, [sp, #32]
 800f29a:	4606      	mov	r6, r0
 800f29c:	460f      	mov	r7, r1
 800f29e:	4691      	mov	r9, r2
 800f2a0:	461d      	mov	r5, r3
 800f2a2:	f7ff fc11 	bl	800eac8 <uxr_flash_output_streams>
 800f2a6:	b124      	cbz	r4, 800f2b2 <uxr_run_session_until_all_status+0x1e>
 800f2a8:	4622      	mov	r2, r4
 800f2aa:	21ff      	movs	r1, #255	@ 0xff
 800f2ac:	4628      	mov	r0, r5
 800f2ae:	f008 fbc3 	bl	8017a38 <memset>
 800f2b2:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800f2b6:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800f2b8:	f001 f98a 	bl	80105d0 <uxr_millis>
 800f2bc:	3d01      	subs	r5, #1
 800f2be:	f1a9 0902 	sub.w	r9, r9, #2
 800f2c2:	4680      	mov	r8, r0
 800f2c4:	4639      	mov	r1, r7
 800f2c6:	4630      	mov	r0, r6
 800f2c8:	f7ff fe44 	bl	800ef54 <listen_message_reliably>
 800f2cc:	f001 f980 	bl	80105d0 <uxr_millis>
 800f2d0:	eba0 0008 	sub.w	r0, r0, r8
 800f2d4:	1a39      	subs	r1, r7, r0
 800f2d6:	b344      	cbz	r4, 800f32a <uxr_run_session_until_all_status+0x96>
 800f2d8:	4628      	mov	r0, r5
 800f2da:	46ac      	mov	ip, r5
 800f2dc:	2301      	movs	r3, #1
 800f2de:	e002      	b.n	800f2e6 <uxr_run_session_until_all_status+0x52>
 800f2e0:	42a3      	cmp	r3, r4
 800f2e2:	d20d      	bcs.n	800f300 <uxr_run_session_until_all_status+0x6c>
 800f2e4:	3301      	adds	r3, #1
 800f2e6:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800f2ea:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800f2ee:	d1f7      	bne.n	800f2e0 <uxr_run_session_until_all_status+0x4c>
 800f2f0:	42a3      	cmp	r3, r4
 800f2f2:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800f2f6:	d213      	bcs.n	800f320 <uxr_run_session_until_all_status+0x8c>
 800f2f8:	2a00      	cmp	r2, #0
 800f2fa:	d0f3      	beq.n	800f2e4 <uxr_run_session_until_all_status+0x50>
 800f2fc:	2900      	cmp	r1, #0
 800f2fe:	dce2      	bgt.n	800f2c6 <uxr_run_session_until_all_status+0x32>
 800f300:	2300      	movs	r3, #0
 800f302:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800f304:	442c      	add	r4, r5
 800f306:	e001      	b.n	800f30c <uxr_run_session_until_all_status+0x78>
 800f308:	2b01      	cmp	r3, #1
 800f30a:	d812      	bhi.n	800f332 <uxr_run_session_until_all_status+0x9e>
 800f30c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800f310:	4284      	cmp	r4, r0
 800f312:	d1f9      	bne.n	800f308 <uxr_run_session_until_all_status+0x74>
 800f314:	2b01      	cmp	r3, #1
 800f316:	bf8c      	ite	hi
 800f318:	2000      	movhi	r0, #0
 800f31a:	2001      	movls	r0, #1
 800f31c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f320:	2900      	cmp	r1, #0
 800f322:	dded      	ble.n	800f300 <uxr_run_session_until_all_status+0x6c>
 800f324:	2a00      	cmp	r2, #0
 800f326:	d1ce      	bne.n	800f2c6 <uxr_run_session_until_all_status+0x32>
 800f328:	e7ea      	b.n	800f300 <uxr_run_session_until_all_status+0x6c>
 800f32a:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800f32c:	2001      	movs	r0, #1
 800f32e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f332:	2000      	movs	r0, #0
 800f334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f338 <wait_session_status>:
 800f338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f33c:	4604      	mov	r4, r0
 800f33e:	b09d      	sub	sp, #116	@ 0x74
 800f340:	20ff      	movs	r0, #255	@ 0xff
 800f342:	7160      	strb	r0, [r4, #5]
 800f344:	9303      	str	r3, [sp, #12]
 800f346:	2b00      	cmp	r3, #0
 800f348:	f000 80b6 	beq.w	800f4b8 <wait_session_status+0x180>
 800f34c:	468a      	mov	sl, r1
 800f34e:	4691      	mov	r9, r2
 800f350:	f04f 0b00 	mov.w	fp, #0
 800f354:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f356:	464a      	mov	r2, r9
 800f358:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f35c:	4651      	mov	r1, sl
 800f35e:	47a8      	blx	r5
 800f360:	f001 f936 	bl	80105d0 <uxr_millis>
 800f364:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f368:	4605      	mov	r5, r0
 800f36a:	e009      	b.n	800f380 <wait_session_status+0x48>
 800f36c:	f001 f930 	bl	80105d0 <uxr_millis>
 800f370:	1b40      	subs	r0, r0, r5
 800f372:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800f376:	2b00      	cmp	r3, #0
 800f378:	dd40      	ble.n	800f3fc <wait_session_status+0xc4>
 800f37a:	7960      	ldrb	r0, [r4, #5]
 800f37c:	28ff      	cmp	r0, #255	@ 0xff
 800f37e:	d145      	bne.n	800f40c <wait_session_status+0xd4>
 800f380:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800f382:	a908      	add	r1, sp, #32
 800f384:	6896      	ldr	r6, [r2, #8]
 800f386:	6810      	ldr	r0, [r2, #0]
 800f388:	aa09      	add	r2, sp, #36	@ 0x24
 800f38a:	47b0      	blx	r6
 800f38c:	2800      	cmp	r0, #0
 800f38e:	d0ed      	beq.n	800f36c <wait_session_status+0x34>
 800f390:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800f394:	a80c      	add	r0, sp, #48	@ 0x30
 800f396:	f7fe fde5 	bl	800df64 <ucdr_init_buffer>
 800f39a:	2600      	movs	r6, #0
 800f39c:	f10d 031e 	add.w	r3, sp, #30
 800f3a0:	aa07      	add	r2, sp, #28
 800f3a2:	a90c      	add	r1, sp, #48	@ 0x30
 800f3a4:	4620      	mov	r0, r4
 800f3a6:	f88d 601c 	strb.w	r6, [sp, #28]
 800f3aa:	f000 fa87 	bl	800f8bc <uxr_read_session_header>
 800f3ae:	2800      	cmp	r0, #0
 800f3b0:	d0dc      	beq.n	800f36c <wait_session_status+0x34>
 800f3b2:	4631      	mov	r1, r6
 800f3b4:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800f3b8:	f000 ffb6 	bl	8010328 <uxr_stream_id_from_raw>
 800f3bc:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800f3c0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800f3c4:	9302      	str	r3, [sp, #8]
 800f3c6:	2f01      	cmp	r7, #1
 800f3c8:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800f3cc:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800f3d0:	d05c      	beq.n	800f48c <wait_session_status+0x154>
 800f3d2:	2f02      	cmp	r7, #2
 800f3d4:	d020      	beq.n	800f418 <wait_session_status+0xe0>
 800f3d6:	2f00      	cmp	r7, #0
 800f3d8:	d1c8      	bne.n	800f36c <wait_session_status+0x34>
 800f3da:	4639      	mov	r1, r7
 800f3dc:	4638      	mov	r0, r7
 800f3de:	f000 ffa3 	bl	8010328 <uxr_stream_id_from_raw>
 800f3e2:	a90c      	add	r1, sp, #48	@ 0x30
 800f3e4:	4602      	mov	r2, r0
 800f3e6:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f3e8:	4620      	mov	r0, r4
 800f3ea:	f7ff fc2b 	bl	800ec44 <read_submessage_list>
 800f3ee:	f001 f8ef 	bl	80105d0 <uxr_millis>
 800f3f2:	1b40      	subs	r0, r0, r5
 800f3f4:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	dcbe      	bgt.n	800f37a <wait_session_status+0x42>
 800f3fc:	9b03      	ldr	r3, [sp, #12]
 800f3fe:	7960      	ldrb	r0, [r4, #5]
 800f400:	f10b 0b01 	add.w	fp, fp, #1
 800f404:	455b      	cmp	r3, fp
 800f406:	d001      	beq.n	800f40c <wait_session_status+0xd4>
 800f408:	28ff      	cmp	r0, #255	@ 0xff
 800f40a:	d0a3      	beq.n	800f354 <wait_session_status+0x1c>
 800f40c:	38ff      	subs	r0, #255	@ 0xff
 800f40e:	bf18      	it	ne
 800f410:	2001      	movne	r0, #1
 800f412:	b01d      	add	sp, #116	@ 0x74
 800f414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f418:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800f41c:	9304      	str	r3, [sp, #16]
 800f41e:	4631      	mov	r1, r6
 800f420:	f104 0008 	add.w	r0, r4, #8
 800f424:	f001 f86e 	bl	8010504 <uxr_get_input_reliable_stream>
 800f428:	4680      	mov	r8, r0
 800f42a:	b348      	cbz	r0, 800f480 <wait_session_status+0x148>
 800f42c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f42e:	9205      	str	r2, [sp, #20]
 800f430:	a80c      	add	r0, sp, #48	@ 0x30
 800f432:	f7fe fdc7 	bl	800dfc4 <ucdr_buffer_remaining>
 800f436:	4603      	mov	r3, r0
 800f438:	f10d 001d 	add.w	r0, sp, #29
 800f43c:	9000      	str	r0, [sp, #0]
 800f43e:	9a05      	ldr	r2, [sp, #20]
 800f440:	9902      	ldr	r1, [sp, #8]
 800f442:	4640      	mov	r0, r8
 800f444:	f006 fe6a 	bl	801611c <uxr_receive_reliable_message>
 800f448:	b1d0      	cbz	r0, 800f480 <wait_session_status+0x148>
 800f44a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d03a      	beq.n	800f4c8 <wait_session_status+0x190>
 800f452:	9f04      	ldr	r7, [sp, #16]
 800f454:	e00a      	b.n	800f46c <wait_session_status+0x134>
 800f456:	f04f 0302 	mov.w	r3, #2
 800f45a:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800f45e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800f462:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800f466:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f468:	f7ff fbec 	bl	800ec44 <read_submessage_list>
 800f46c:	a914      	add	r1, sp, #80	@ 0x50
 800f46e:	2204      	movs	r2, #4
 800f470:	4640      	mov	r0, r8
 800f472:	f006 fed3 	bl	801621c <uxr_next_input_reliable_buffer_available>
 800f476:	4603      	mov	r3, r0
 800f478:	a914      	add	r1, sp, #80	@ 0x50
 800f47a:	4620      	mov	r0, r4
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d1ea      	bne.n	800f456 <wait_session_status+0x11e>
 800f480:	9904      	ldr	r1, [sp, #16]
 800f482:	4632      	mov	r2, r6
 800f484:	4620      	mov	r0, r4
 800f486:	f7ff fa59 	bl	800e93c <write_submessage_acknack.isra.0>
 800f48a:	e76f      	b.n	800f36c <wait_session_status+0x34>
 800f48c:	4631      	mov	r1, r6
 800f48e:	f104 0008 	add.w	r0, r4, #8
 800f492:	f001 f82d 	bl	80104f0 <uxr_get_input_best_effort_stream>
 800f496:	2800      	cmp	r0, #0
 800f498:	f43f af68 	beq.w	800f36c <wait_session_status+0x34>
 800f49c:	9902      	ldr	r1, [sp, #8]
 800f49e:	f006 fda9 	bl	8015ff4 <uxr_receive_best_effort_message>
 800f4a2:	2800      	cmp	r0, #0
 800f4a4:	f43f af62 	beq.w	800f36c <wait_session_status+0x34>
 800f4a8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800f4ac:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f4ae:	a90c      	add	r1, sp, #48	@ 0x30
 800f4b0:	4620      	mov	r0, r4
 800f4b2:	f7ff fbc7 	bl	800ec44 <read_submessage_list>
 800f4b6:	e759      	b.n	800f36c <wait_session_status+0x34>
 800f4b8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f4ba:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f4be:	47a0      	blx	r4
 800f4c0:	2001      	movs	r0, #1
 800f4c2:	b01d      	add	sp, #116	@ 0x74
 800f4c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4c8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800f4cc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f4ce:	a90c      	add	r1, sp, #48	@ 0x30
 800f4d0:	4620      	mov	r0, r4
 800f4d2:	f7ff fbb7 	bl	800ec44 <read_submessage_list>
 800f4d6:	e7bc      	b.n	800f452 <wait_session_status+0x11a>

0800f4d8 <uxr_delete_session_retries>:
 800f4d8:	b530      	push	{r4, r5, lr}
 800f4da:	b08f      	sub	sp, #60	@ 0x3c
 800f4dc:	4604      	mov	r4, r0
 800f4de:	460d      	mov	r5, r1
 800f4e0:	f000 fa2e 	bl	800f940 <uxr_session_header_offset>
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	2210      	movs	r2, #16
 800f4e8:	9000      	str	r0, [sp, #0]
 800f4ea:	a902      	add	r1, sp, #8
 800f4ec:	a806      	add	r0, sp, #24
 800f4ee:	f7fe fd27 	bl	800df40 <ucdr_init_buffer_origin_offset>
 800f4f2:	a906      	add	r1, sp, #24
 800f4f4:	4620      	mov	r0, r4
 800f4f6:	f000 f973 	bl	800f7e0 <uxr_buffer_delete_session>
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	4611      	mov	r1, r2
 800f4fe:	9b06      	ldr	r3, [sp, #24]
 800f500:	4620      	mov	r0, r4
 800f502:	f000 f9c7 	bl	800f894 <uxr_stamp_session_header>
 800f506:	a806      	add	r0, sp, #24
 800f508:	f7fe fd58 	bl	800dfbc <ucdr_buffer_length>
 800f50c:	462b      	mov	r3, r5
 800f50e:	4602      	mov	r2, r0
 800f510:	a902      	add	r1, sp, #8
 800f512:	4620      	mov	r0, r4
 800f514:	f7ff ff10 	bl	800f338 <wait_session_status>
 800f518:	b118      	cbz	r0, 800f522 <uxr_delete_session_retries+0x4a>
 800f51a:	7960      	ldrb	r0, [r4, #5]
 800f51c:	fab0 f080 	clz	r0, r0
 800f520:	0940      	lsrs	r0, r0, #5
 800f522:	b00f      	add	sp, #60	@ 0x3c
 800f524:	bd30      	pop	{r4, r5, pc}
 800f526:	bf00      	nop

0800f528 <uxr_create_session>:
 800f528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f52c:	f100 0b08 	add.w	fp, r0, #8
 800f530:	b0ab      	sub	sp, #172	@ 0xac
 800f532:	4604      	mov	r4, r0
 800f534:	4658      	mov	r0, fp
 800f536:	f000 ff2b 	bl	8010390 <uxr_reset_stream_storage>
 800f53a:	4620      	mov	r0, r4
 800f53c:	f000 fa00 	bl	800f940 <uxr_session_header_offset>
 800f540:	2300      	movs	r3, #0
 800f542:	9000      	str	r0, [sp, #0]
 800f544:	221c      	movs	r2, #28
 800f546:	a90b      	add	r1, sp, #44	@ 0x2c
 800f548:	a812      	add	r0, sp, #72	@ 0x48
 800f54a:	f7fe fcf9 	bl	800df40 <ucdr_init_buffer_origin_offset>
 800f54e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f550:	8a1a      	ldrh	r2, [r3, #16]
 800f552:	3a04      	subs	r2, #4
 800f554:	b292      	uxth	r2, r2
 800f556:	a912      	add	r1, sp, #72	@ 0x48
 800f558:	4620      	mov	r0, r4
 800f55a:	f000 f917 	bl	800f78c <uxr_buffer_create_session>
 800f55e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f560:	4620      	mov	r0, r4
 800f562:	f000 f983 	bl	800f86c <uxr_stamp_create_session_header>
 800f566:	a812      	add	r0, sp, #72	@ 0x48
 800f568:	f7fe fd28 	bl	800dfbc <ucdr_buffer_length>
 800f56c:	23ff      	movs	r3, #255	@ 0xff
 800f56e:	7163      	strb	r3, [r4, #5]
 800f570:	230a      	movs	r3, #10
 800f572:	46da      	mov	sl, fp
 800f574:	9303      	str	r3, [sp, #12]
 800f576:	4683      	mov	fp, r0
 800f578:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f57a:	465a      	mov	r2, fp
 800f57c:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f580:	a90b      	add	r1, sp, #44	@ 0x2c
 800f582:	47a8      	blx	r5
 800f584:	f001 f824 	bl	80105d0 <uxr_millis>
 800f588:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f58c:	4605      	mov	r5, r0
 800f58e:	e009      	b.n	800f5a4 <uxr_create_session+0x7c>
 800f590:	f001 f81e 	bl	80105d0 <uxr_millis>
 800f594:	1b40      	subs	r0, r0, r5
 800f596:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	7962      	ldrb	r2, [r4, #5]
 800f59e:	dd38      	ble.n	800f612 <uxr_create_session+0xea>
 800f5a0:	2aff      	cmp	r2, #255	@ 0xff
 800f5a2:	d13c      	bne.n	800f61e <uxr_create_session+0xf6>
 800f5a4:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800f5a6:	a907      	add	r1, sp, #28
 800f5a8:	6896      	ldr	r6, [r2, #8]
 800f5aa:	6810      	ldr	r0, [r2, #0]
 800f5ac:	aa08      	add	r2, sp, #32
 800f5ae:	47b0      	blx	r6
 800f5b0:	2800      	cmp	r0, #0
 800f5b2:	d0ed      	beq.n	800f590 <uxr_create_session+0x68>
 800f5b4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800f5b8:	a81a      	add	r0, sp, #104	@ 0x68
 800f5ba:	f7fe fcd3 	bl	800df64 <ucdr_init_buffer>
 800f5be:	2600      	movs	r6, #0
 800f5c0:	f10d 031a 	add.w	r3, sp, #26
 800f5c4:	aa06      	add	r2, sp, #24
 800f5c6:	a91a      	add	r1, sp, #104	@ 0x68
 800f5c8:	4620      	mov	r0, r4
 800f5ca:	f88d 6018 	strb.w	r6, [sp, #24]
 800f5ce:	f000 f975 	bl	800f8bc <uxr_read_session_header>
 800f5d2:	2800      	cmp	r0, #0
 800f5d4:	d0dc      	beq.n	800f590 <uxr_create_session+0x68>
 800f5d6:	4631      	mov	r1, r6
 800f5d8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f5dc:	f000 fea4 	bl	8010328 <uxr_stream_id_from_raw>
 800f5e0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800f5e4:	2e01      	cmp	r6, #1
 800f5e6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800f5ea:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800f5ee:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800f5f2:	d053      	beq.n	800f69c <uxr_create_session+0x174>
 800f5f4:	2e02      	cmp	r6, #2
 800f5f6:	d018      	beq.n	800f62a <uxr_create_session+0x102>
 800f5f8:	2e00      	cmp	r6, #0
 800f5fa:	d1c9      	bne.n	800f590 <uxr_create_session+0x68>
 800f5fc:	4631      	mov	r1, r6
 800f5fe:	4630      	mov	r0, r6
 800f600:	f000 fe92 	bl	8010328 <uxr_stream_id_from_raw>
 800f604:	a91a      	add	r1, sp, #104	@ 0x68
 800f606:	4602      	mov	r2, r0
 800f608:	900a      	str	r0, [sp, #40]	@ 0x28
 800f60a:	4620      	mov	r0, r4
 800f60c:	f7ff fb1a 	bl	800ec44 <read_submessage_list>
 800f610:	e7be      	b.n	800f590 <uxr_create_session+0x68>
 800f612:	9b03      	ldr	r3, [sp, #12]
 800f614:	3b01      	subs	r3, #1
 800f616:	9303      	str	r3, [sp, #12]
 800f618:	d001      	beq.n	800f61e <uxr_create_session+0xf6>
 800f61a:	2aff      	cmp	r2, #255	@ 0xff
 800f61c:	d0ac      	beq.n	800f578 <uxr_create_session+0x50>
 800f61e:	2a00      	cmp	r2, #0
 800f620:	d051      	beq.n	800f6c6 <uxr_create_session+0x19e>
 800f622:	2000      	movs	r0, #0
 800f624:	b02b      	add	sp, #172	@ 0xac
 800f626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f62a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800f62e:	9304      	str	r3, [sp, #16]
 800f630:	4639      	mov	r1, r7
 800f632:	4650      	mov	r0, sl
 800f634:	f000 ff66 	bl	8010504 <uxr_get_input_reliable_stream>
 800f638:	4680      	mov	r8, r0
 800f63a:	b348      	cbz	r0, 800f690 <uxr_create_session+0x168>
 800f63c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f63e:	9205      	str	r2, [sp, #20]
 800f640:	a81a      	add	r0, sp, #104	@ 0x68
 800f642:	f7fe fcbf 	bl	800dfc4 <ucdr_buffer_remaining>
 800f646:	4603      	mov	r3, r0
 800f648:	f10d 0019 	add.w	r0, sp, #25
 800f64c:	9000      	str	r0, [sp, #0]
 800f64e:	9a05      	ldr	r2, [sp, #20]
 800f650:	4649      	mov	r1, r9
 800f652:	4640      	mov	r0, r8
 800f654:	f006 fd62 	bl	801611c <uxr_receive_reliable_message>
 800f658:	b1d0      	cbz	r0, 800f690 <uxr_create_session+0x168>
 800f65a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d038      	beq.n	800f6d4 <uxr_create_session+0x1ac>
 800f662:	9e04      	ldr	r6, [sp, #16]
 800f664:	e00a      	b.n	800f67c <uxr_create_session+0x154>
 800f666:	f04f 0302 	mov.w	r3, #2
 800f66a:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800f66e:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800f672:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f676:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f678:	f7ff fae4 	bl	800ec44 <read_submessage_list>
 800f67c:	a922      	add	r1, sp, #136	@ 0x88
 800f67e:	2204      	movs	r2, #4
 800f680:	4640      	mov	r0, r8
 800f682:	f006 fdcb 	bl	801621c <uxr_next_input_reliable_buffer_available>
 800f686:	4603      	mov	r3, r0
 800f688:	a922      	add	r1, sp, #136	@ 0x88
 800f68a:	4620      	mov	r0, r4
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d1ea      	bne.n	800f666 <uxr_create_session+0x13e>
 800f690:	9904      	ldr	r1, [sp, #16]
 800f692:	463a      	mov	r2, r7
 800f694:	4620      	mov	r0, r4
 800f696:	f7ff f951 	bl	800e93c <write_submessage_acknack.isra.0>
 800f69a:	e779      	b.n	800f590 <uxr_create_session+0x68>
 800f69c:	4639      	mov	r1, r7
 800f69e:	4650      	mov	r0, sl
 800f6a0:	f000 ff26 	bl	80104f0 <uxr_get_input_best_effort_stream>
 800f6a4:	2800      	cmp	r0, #0
 800f6a6:	f43f af73 	beq.w	800f590 <uxr_create_session+0x68>
 800f6aa:	4649      	mov	r1, r9
 800f6ac:	f006 fca2 	bl	8015ff4 <uxr_receive_best_effort_message>
 800f6b0:	2800      	cmp	r0, #0
 800f6b2:	f43f af6d 	beq.w	800f590 <uxr_create_session+0x68>
 800f6b6:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800f6ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f6bc:	a91a      	add	r1, sp, #104	@ 0x68
 800f6be:	4620      	mov	r0, r4
 800f6c0:	f7ff fac0 	bl	800ec44 <read_submessage_list>
 800f6c4:	e764      	b.n	800f590 <uxr_create_session+0x68>
 800f6c6:	4650      	mov	r0, sl
 800f6c8:	f000 fe62 	bl	8010390 <uxr_reset_stream_storage>
 800f6cc:	2001      	movs	r0, #1
 800f6ce:	b02b      	add	sp, #172	@ 0xac
 800f6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6d4:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800f6d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f6da:	a91a      	add	r1, sp, #104	@ 0x68
 800f6dc:	4620      	mov	r0, r4
 800f6de:	f7ff fab1 	bl	800ec44 <read_submessage_list>
 800f6e2:	e7be      	b.n	800f662 <uxr_create_session+0x13a>

0800f6e4 <uxr_prepare_stream_to_write_submessage>:
 800f6e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6e8:	b082      	sub	sp, #8
 800f6ea:	4682      	mov	sl, r0
 800f6ec:	4610      	mov	r0, r2
 800f6ee:	4615      	mov	r5, r2
 800f6f0:	461e      	mov	r6, r3
 800f6f2:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800f6f6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800f6fa:	9101      	str	r1, [sp, #4]
 800f6fc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800f700:	f000 ff60 	bl	80105c4 <uxr_submessage_padding>
 800f704:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f708:	f105 0904 	add.w	r9, r5, #4
 800f70c:	2b01      	cmp	r3, #1
 800f70e:	4481      	add	r9, r0
 800f710:	d01d      	beq.n	800f74e <uxr_prepare_stream_to_write_submessage+0x6a>
 800f712:	2b02      	cmp	r3, #2
 800f714:	d116      	bne.n	800f744 <uxr_prepare_stream_to_write_submessage+0x60>
 800f716:	4621      	mov	r1, r4
 800f718:	f10a 0008 	add.w	r0, sl, #8
 800f71c:	f000 fede 	bl	80104dc <uxr_get_output_reliable_stream>
 800f720:	4604      	mov	r4, r0
 800f722:	b158      	cbz	r0, 800f73c <uxr_prepare_stream_to_write_submessage+0x58>
 800f724:	4649      	mov	r1, r9
 800f726:	4632      	mov	r2, r6
 800f728:	f006 ff34 	bl	8016594 <uxr_prepare_reliable_buffer_to_write>
 800f72c:	4604      	mov	r4, r0
 800f72e:	b12c      	cbz	r4, 800f73c <uxr_prepare_stream_to_write_submessage+0x58>
 800f730:	4643      	mov	r3, r8
 800f732:	b2aa      	uxth	r2, r5
 800f734:	4639      	mov	r1, r7
 800f736:	4630      	mov	r0, r6
 800f738:	f000 ff04 	bl	8010544 <uxr_buffer_submessage_header>
 800f73c:	4620      	mov	r0, r4
 800f73e:	b002      	add	sp, #8
 800f740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f744:	2400      	movs	r4, #0
 800f746:	4620      	mov	r0, r4
 800f748:	b002      	add	sp, #8
 800f74a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f74e:	4621      	mov	r1, r4
 800f750:	f10a 0008 	add.w	r0, sl, #8
 800f754:	f000 feba 	bl	80104cc <uxr_get_output_best_effort_stream>
 800f758:	4604      	mov	r4, r0
 800f75a:	2800      	cmp	r0, #0
 800f75c:	d0ee      	beq.n	800f73c <uxr_prepare_stream_to_write_submessage+0x58>
 800f75e:	4649      	mov	r1, r9
 800f760:	4632      	mov	r2, r6
 800f762:	f006 fe47 	bl	80163f4 <uxr_prepare_best_effort_buffer_to_write>
 800f766:	4604      	mov	r4, r0
 800f768:	e7e1      	b.n	800f72e <uxr_prepare_stream_to_write_submessage+0x4a>
 800f76a:	bf00      	nop

0800f76c <uxr_init_session_info>:
 800f76c:	0e13      	lsrs	r3, r2, #24
 800f76e:	7043      	strb	r3, [r0, #1]
 800f770:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800f774:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800f778:	7001      	strb	r1, [r0, #0]
 800f77a:	70c3      	strb	r3, [r0, #3]
 800f77c:	2109      	movs	r1, #9
 800f77e:	23ff      	movs	r3, #255	@ 0xff
 800f780:	f880 c002 	strb.w	ip, [r0, #2]
 800f784:	7102      	strb	r2, [r0, #4]
 800f786:	80c1      	strh	r1, [r0, #6]
 800f788:	7143      	strb	r3, [r0, #5]
 800f78a:	4770      	bx	lr

0800f78c <uxr_buffer_create_session>:
 800f78c:	b530      	push	{r4, r5, lr}
 800f78e:	b089      	sub	sp, #36	@ 0x24
 800f790:	2300      	movs	r3, #0
 800f792:	4d12      	ldr	r5, [pc, #72]	@ (800f7dc <uxr_buffer_create_session+0x50>)
 800f794:	9307      	str	r3, [sp, #28]
 800f796:	f8ad 201c 	strh.w	r2, [sp, #28]
 800f79a:	2201      	movs	r2, #1
 800f79c:	9301      	str	r3, [sp, #4]
 800f79e:	80c2      	strh	r2, [r0, #6]
 800f7a0:	f88d 2004 	strb.w	r2, [sp, #4]
 800f7a4:	682a      	ldr	r2, [r5, #0]
 800f7a6:	9200      	str	r2, [sp, #0]
 800f7a8:	88aa      	ldrh	r2, [r5, #4]
 800f7aa:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f7ae:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800f7b2:	9202      	str	r2, [sp, #8]
 800f7b4:	460c      	mov	r4, r1
 800f7b6:	7802      	ldrb	r2, [r0, #0]
 800f7b8:	9303      	str	r3, [sp, #12]
 800f7ba:	4619      	mov	r1, r3
 800f7bc:	f88d 200c 	strb.w	r2, [sp, #12]
 800f7c0:	4620      	mov	r0, r4
 800f7c2:	2210      	movs	r2, #16
 800f7c4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800f7c8:	9306      	str	r3, [sp, #24]
 800f7ca:	f000 febb 	bl	8010544 <uxr_buffer_submessage_header>
 800f7ce:	4669      	mov	r1, sp
 800f7d0:	4620      	mov	r0, r4
 800f7d2:	f001 feff 	bl	80115d4 <uxr_serialize_CREATE_CLIENT_Payload>
 800f7d6:	b009      	add	sp, #36	@ 0x24
 800f7d8:	bd30      	pop	{r4, r5, pc}
 800f7da:	bf00      	nop
 800f7dc:	08018a30 	.word	0x08018a30

0800f7e0 <uxr_buffer_delete_session>:
 800f7e0:	b510      	push	{r4, lr}
 800f7e2:	4b0c      	ldr	r3, [pc, #48]	@ (800f814 <uxr_buffer_delete_session+0x34>)
 800f7e4:	b082      	sub	sp, #8
 800f7e6:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800f7ea:	f8ad c006 	strh.w	ip, [sp, #6]
 800f7ee:	460c      	mov	r4, r1
 800f7f0:	2202      	movs	r2, #2
 800f7f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f7f6:	80c2      	strh	r2, [r0, #6]
 800f7f8:	f8ad 3004 	strh.w	r3, [sp, #4]
 800f7fc:	2204      	movs	r2, #4
 800f7fe:	2300      	movs	r3, #0
 800f800:	2103      	movs	r1, #3
 800f802:	4620      	mov	r0, r4
 800f804:	f000 fe9e 	bl	8010544 <uxr_buffer_submessage_header>
 800f808:	a901      	add	r1, sp, #4
 800f80a:	4620      	mov	r0, r4
 800f80c:	f001 ff88 	bl	8011720 <uxr_serialize_DELETE_Payload>
 800f810:	b002      	add	sp, #8
 800f812:	bd10      	pop	{r4, pc}
 800f814:	08018a30 	.word	0x08018a30

0800f818 <uxr_read_create_session_status>:
 800f818:	b510      	push	{r4, lr}
 800f81a:	b088      	sub	sp, #32
 800f81c:	4604      	mov	r4, r0
 800f81e:	4608      	mov	r0, r1
 800f820:	a901      	add	r1, sp, #4
 800f822:	f001 ff8d 	bl	8011740 <uxr_deserialize_STATUS_AGENT_Payload>
 800f826:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f82a:	7163      	strb	r3, [r4, #5]
 800f82c:	b008      	add	sp, #32
 800f82e:	bd10      	pop	{r4, pc}

0800f830 <uxr_read_delete_session_status>:
 800f830:	b510      	push	{r4, lr}
 800f832:	4604      	mov	r4, r0
 800f834:	b084      	sub	sp, #16
 800f836:	4608      	mov	r0, r1
 800f838:	a902      	add	r1, sp, #8
 800f83a:	f001 ffb1 	bl	80117a0 <uxr_deserialize_STATUS_Payload>
 800f83e:	88e3      	ldrh	r3, [r4, #6]
 800f840:	2b02      	cmp	r3, #2
 800f842:	d001      	beq.n	800f848 <uxr_read_delete_session_status+0x18>
 800f844:	b004      	add	sp, #16
 800f846:	bd10      	pop	{r4, pc}
 800f848:	f10d 000a 	add.w	r0, sp, #10
 800f84c:	f7fe fecc 	bl	800e5e8 <uxr_object_id_from_raw>
 800f850:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800f854:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800f858:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f85c:	b29b      	uxth	r3, r3
 800f85e:	2b02      	cmp	r3, #2
 800f860:	bf04      	itt	eq
 800f862:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800f866:	7163      	strbeq	r3, [r4, #5]
 800f868:	b004      	add	sp, #16
 800f86a:	bd10      	pop	{r4, pc}

0800f86c <uxr_stamp_create_session_header>:
 800f86c:	b510      	push	{r4, lr}
 800f86e:	2208      	movs	r2, #8
 800f870:	b08a      	sub	sp, #40	@ 0x28
 800f872:	4604      	mov	r4, r0
 800f874:	eb0d 0002 	add.w	r0, sp, r2
 800f878:	f7fe fb74 	bl	800df64 <ucdr_init_buffer>
 800f87c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f880:	9400      	str	r4, [sp, #0]
 800f882:	2300      	movs	r3, #0
 800f884:	461a      	mov	r2, r3
 800f886:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800f88a:	a802      	add	r0, sp, #8
 800f88c:	f001 f854 	bl	8010938 <uxr_serialize_message_header>
 800f890:	b00a      	add	sp, #40	@ 0x28
 800f892:	bd10      	pop	{r4, pc}

0800f894 <uxr_stamp_session_header>:
 800f894:	b530      	push	{r4, r5, lr}
 800f896:	b08d      	sub	sp, #52	@ 0x34
 800f898:	4604      	mov	r4, r0
 800f89a:	460d      	mov	r5, r1
 800f89c:	9203      	str	r2, [sp, #12]
 800f89e:	4619      	mov	r1, r3
 800f8a0:	a804      	add	r0, sp, #16
 800f8a2:	2208      	movs	r2, #8
 800f8a4:	f7fe fb5e 	bl	800df64 <ucdr_init_buffer>
 800f8a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8ac:	9b03      	ldr	r3, [sp, #12]
 800f8ae:	9400      	str	r4, [sp, #0]
 800f8b0:	462a      	mov	r2, r5
 800f8b2:	a804      	add	r0, sp, #16
 800f8b4:	f001 f840 	bl	8010938 <uxr_serialize_message_header>
 800f8b8:	b00d      	add	sp, #52	@ 0x34
 800f8ba:	bd30      	pop	{r4, r5, pc}

0800f8bc <uxr_read_session_header>:
 800f8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8c0:	4607      	mov	r7, r0
 800f8c2:	b084      	sub	sp, #16
 800f8c4:	4608      	mov	r0, r1
 800f8c6:	460c      	mov	r4, r1
 800f8c8:	4615      	mov	r5, r2
 800f8ca:	461e      	mov	r6, r3
 800f8cc:	f7fe fb7a 	bl	800dfc4 <ucdr_buffer_remaining>
 800f8d0:	2808      	cmp	r0, #8
 800f8d2:	d803      	bhi.n	800f8dc <uxr_read_session_header+0x20>
 800f8d4:	2000      	movs	r0, #0
 800f8d6:	b004      	add	sp, #16
 800f8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8dc:	f10d 080c 	add.w	r8, sp, #12
 800f8e0:	4633      	mov	r3, r6
 800f8e2:	462a      	mov	r2, r5
 800f8e4:	f8cd 8000 	str.w	r8, [sp]
 800f8e8:	4620      	mov	r0, r4
 800f8ea:	f10d 010b 	add.w	r1, sp, #11
 800f8ee:	f001 f841 	bl	8010974 <uxr_deserialize_message_header>
 800f8f2:	783a      	ldrb	r2, [r7, #0]
 800f8f4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800f8f8:	4293      	cmp	r3, r2
 800f8fa:	d1eb      	bne.n	800f8d4 <uxr_read_session_header+0x18>
 800f8fc:	061b      	lsls	r3, r3, #24
 800f8fe:	d41c      	bmi.n	800f93a <uxr_read_session_header+0x7e>
 800f900:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800f904:	787b      	ldrb	r3, [r7, #1]
 800f906:	429a      	cmp	r2, r3
 800f908:	d003      	beq.n	800f912 <uxr_read_session_header+0x56>
 800f90a:	2001      	movs	r0, #1
 800f90c:	f080 0001 	eor.w	r0, r0, #1
 800f910:	e7e1      	b.n	800f8d6 <uxr_read_session_header+0x1a>
 800f912:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800f916:	78bb      	ldrb	r3, [r7, #2]
 800f918:	429a      	cmp	r2, r3
 800f91a:	f107 0102 	add.w	r1, r7, #2
 800f91e:	d1f4      	bne.n	800f90a <uxr_read_session_header+0x4e>
 800f920:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800f924:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f928:	429a      	cmp	r2, r3
 800f92a:	d1ee      	bne.n	800f90a <uxr_read_session_header+0x4e>
 800f92c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800f930:	784b      	ldrb	r3, [r1, #1]
 800f932:	429a      	cmp	r2, r3
 800f934:	d1e9      	bne.n	800f90a <uxr_read_session_header+0x4e>
 800f936:	2000      	movs	r0, #0
 800f938:	e7e8      	b.n	800f90c <uxr_read_session_header+0x50>
 800f93a:	2001      	movs	r0, #1
 800f93c:	e7cb      	b.n	800f8d6 <uxr_read_session_header+0x1a>
 800f93e:	bf00      	nop

0800f940 <uxr_session_header_offset>:
 800f940:	f990 3000 	ldrsb.w	r3, [r0]
 800f944:	2b00      	cmp	r3, #0
 800f946:	bfac      	ite	ge
 800f948:	2008      	movge	r0, #8
 800f94a:	2004      	movlt	r0, #4
 800f94c:	4770      	bx	lr
 800f94e:	bf00      	nop

0800f950 <uxr_init_base_object_request>:
 800f950:	b510      	push	{r4, lr}
 800f952:	88c3      	ldrh	r3, [r0, #6]
 800f954:	b082      	sub	sp, #8
 800f956:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800f95a:	9101      	str	r1, [sp, #4]
 800f95c:	f1a3 010a 	sub.w	r1, r3, #10
 800f960:	b289      	uxth	r1, r1
 800f962:	42a1      	cmp	r1, r4
 800f964:	d80e      	bhi.n	800f984 <uxr_init_base_object_request+0x34>
 800f966:	3301      	adds	r3, #1
 800f968:	b29c      	uxth	r4, r3
 800f96a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800f96e:	b2db      	uxtb	r3, r3
 800f970:	80c4      	strh	r4, [r0, #6]
 800f972:	9801      	ldr	r0, [sp, #4]
 800f974:	7011      	strb	r1, [r2, #0]
 800f976:	7053      	strb	r3, [r2, #1]
 800f978:	1c91      	adds	r1, r2, #2
 800f97a:	f7fe fe49 	bl	800e610 <uxr_object_id_to_raw>
 800f97e:	4620      	mov	r0, r4
 800f980:	b002      	add	sp, #8
 800f982:	bd10      	pop	{r4, pc}
 800f984:	230a      	movs	r3, #10
 800f986:	2100      	movs	r1, #0
 800f988:	461c      	mov	r4, r3
 800f98a:	e7f1      	b.n	800f970 <uxr_init_base_object_request+0x20>

0800f98c <uxr_parse_base_object_request>:
 800f98c:	b570      	push	{r4, r5, r6, lr}
 800f98e:	4604      	mov	r4, r0
 800f990:	3002      	adds	r0, #2
 800f992:	460d      	mov	r5, r1
 800f994:	4616      	mov	r6, r2
 800f996:	f7fe fe27 	bl	800e5e8 <uxr_object_id_from_raw>
 800f99a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800f99e:	8028      	strh	r0, [r5, #0]
 800f9a0:	806b      	strh	r3, [r5, #2]
 800f9a2:	7822      	ldrb	r2, [r4, #0]
 800f9a4:	7863      	ldrb	r3, [r4, #1]
 800f9a6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f9aa:	8033      	strh	r3, [r6, #0]
 800f9ac:	bd70      	pop	{r4, r5, r6, pc}
 800f9ae:	bf00      	nop

0800f9b0 <uxr_init_framing_io>:
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	7041      	strb	r1, [r0, #1]
 800f9b4:	7003      	strb	r3, [r0, #0]
 800f9b6:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800f9b8:	4770      	bx	lr
 800f9ba:	bf00      	nop

0800f9bc <uxr_write_framed_msg>:
 800f9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9c0:	4617      	mov	r7, r2
 800f9c2:	7842      	ldrb	r2, [r0, #1]
 800f9c4:	b083      	sub	sp, #12
 800f9c6:	460e      	mov	r6, r1
 800f9c8:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 800f9cc:	469a      	mov	sl, r3
 800f9ce:	2901      	cmp	r1, #1
 800f9d0:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 800f9d4:	4604      	mov	r4, r0
 800f9d6:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 800f9da:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800f9de:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 800f9e2:	f240 8137 	bls.w	800fc54 <uxr_write_framed_msg+0x298>
 800f9e6:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800f9ea:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 800f9ee:	2901      	cmp	r1, #1
 800f9f0:	f04f 0202 	mov.w	r2, #2
 800f9f4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f9f8:	f240 808f 	bls.w	800fb1a <uxr_write_framed_msg+0x15e>
 800f9fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f9fe:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 800fa02:	b2dd      	uxtb	r5, r3
 800fa04:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800fa08:	2203      	movs	r2, #3
 800fa0a:	2901      	cmp	r1, #1
 800fa0c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fa10:	f240 809a 	bls.w	800fb48 <uxr_write_framed_msg+0x18c>
 800fa14:	18a1      	adds	r1, r4, r2
 800fa16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fa18:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800fa1c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800fa20:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800fa24:	3201      	adds	r2, #1
 800fa26:	2801      	cmp	r0, #1
 800fa28:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fa2c:	f240 80a0 	bls.w	800fb70 <uxr_write_framed_msg+0x1b4>
 800fa30:	18a0      	adds	r0, r4, r2
 800fa32:	3201      	adds	r2, #1
 800fa34:	b2d2      	uxtb	r2, r2
 800fa36:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800fa3a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	f000 80a9 	beq.w	800fb96 <uxr_write_framed_msg+0x1da>
 800fa44:	f04f 0900 	mov.w	r9, #0
 800fa48:	46c8      	mov	r8, r9
 800fa4a:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800fa4e:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800fa52:	2901      	cmp	r1, #1
 800fa54:	f240 80c3 	bls.w	800fbde <uxr_write_framed_msg+0x222>
 800fa58:	2a29      	cmp	r2, #41	@ 0x29
 800fa5a:	f200 809f 	bhi.w	800fb9c <uxr_write_framed_msg+0x1e0>
 800fa5e:	18a1      	adds	r1, r4, r2
 800fa60:	3201      	adds	r2, #1
 800fa62:	b2d2      	uxtb	r2, r2
 800fa64:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800fa68:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fa6c:	ea89 0303 	eor.w	r3, r9, r3
 800fa70:	498c      	ldr	r1, [pc, #560]	@ (800fca4 <uxr_write_framed_msg+0x2e8>)
 800fa72:	b2db      	uxtb	r3, r3
 800fa74:	f108 0801 	add.w	r8, r8, #1
 800fa78:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fa7c:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 800fa80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fa82:	4543      	cmp	r3, r8
 800fa84:	d8e1      	bhi.n	800fa4a <uxr_write_framed_msg+0x8e>
 800fa86:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800fa8a:	fa5f f889 	uxtb.w	r8, r9
 800fa8e:	9301      	str	r3, [sp, #4]
 800fa90:	f04f 0900 	mov.w	r9, #0
 800fa94:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 800fa98:	fa5f f18a 	uxtb.w	r1, sl
 800fa9c:	2901      	cmp	r1, #1
 800fa9e:	d921      	bls.n	800fae4 <uxr_write_framed_msg+0x128>
 800faa0:	2a29      	cmp	r2, #41	@ 0x29
 800faa2:	f240 80af 	bls.w	800fc04 <uxr_write_framed_msg+0x248>
 800faa6:	2500      	movs	r5, #0
 800faa8:	e000      	b.n	800faac <uxr_write_framed_msg+0xf0>
 800faaa:	b160      	cbz	r0, 800fac6 <uxr_write_framed_msg+0x10a>
 800faac:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800fab0:	1b52      	subs	r2, r2, r5
 800fab2:	465b      	mov	r3, fp
 800fab4:	4421      	add	r1, r4
 800fab6:	4638      	mov	r0, r7
 800fab8:	47b0      	blx	r6
 800faba:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800fabe:	4405      	add	r5, r0
 800fac0:	4295      	cmp	r5, r2
 800fac2:	d3f2      	bcc.n	800faaa <uxr_write_framed_msg+0xee>
 800fac4:	d003      	beq.n	800face <uxr_write_framed_msg+0x112>
 800fac6:	2000      	movs	r0, #0
 800fac8:	b003      	add	sp, #12
 800faca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800face:	fa5f f18a 	uxtb.w	r1, sl
 800fad2:	f04f 0300 	mov.w	r3, #0
 800fad6:	2901      	cmp	r1, #1
 800fad8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800fadc:	f04f 0200 	mov.w	r2, #0
 800fae0:	f200 8090 	bhi.w	800fc04 <uxr_write_framed_msg+0x248>
 800fae4:	1c51      	adds	r1, r2, #1
 800fae6:	b2c9      	uxtb	r1, r1
 800fae8:	2929      	cmp	r1, #41	@ 0x29
 800faea:	d8dc      	bhi.n	800faa6 <uxr_write_framed_msg+0xea>
 800faec:	18a5      	adds	r5, r4, r2
 800faee:	4421      	add	r1, r4
 800faf0:	3202      	adds	r2, #2
 800faf2:	f088 0820 	eor.w	r8, r8, #32
 800faf6:	4648      	mov	r0, r9
 800faf8:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 800fafc:	b2d2      	uxtb	r2, r2
 800fafe:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800fb02:	f04f 0901 	mov.w	r9, #1
 800fb06:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800fb0a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fb0e:	2800      	cmp	r0, #0
 800fb10:	f040 8085 	bne.w	800fc1e <uxr_write_framed_msg+0x262>
 800fb14:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fb18:	e7bc      	b.n	800fa94 <uxr_write_framed_msg+0xd8>
 800fb1a:	4611      	mov	r1, r2
 800fb1c:	f04f 0c03 	mov.w	ip, #3
 800fb20:	2204      	movs	r2, #4
 800fb22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fb24:	4421      	add	r1, r4
 800fb26:	b2dd      	uxtb	r5, r3
 800fb28:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 800fb2c:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 800fb30:	44a4      	add	ip, r4
 800fb32:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800fb36:	f080 0020 	eor.w	r0, r0, #32
 800fb3a:	2901      	cmp	r1, #1
 800fb3c:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 800fb40:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fb44:	f63f af66 	bhi.w	800fa14 <uxr_write_framed_msg+0x58>
 800fb48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fb4a:	18a0      	adds	r0, r4, r2
 800fb4c:	f085 0520 	eor.w	r5, r5, #32
 800fb50:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800fb54:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800fb58:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800fb5c:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 800fb60:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800fb64:	3202      	adds	r2, #2
 800fb66:	2801      	cmp	r0, #1
 800fb68:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fb6c:	f63f af60 	bhi.w	800fa30 <uxr_write_framed_msg+0x74>
 800fb70:	1c50      	adds	r0, r2, #1
 800fb72:	18a5      	adds	r5, r4, r2
 800fb74:	fa54 f080 	uxtab	r0, r4, r0
 800fb78:	3202      	adds	r2, #2
 800fb7a:	f081 0120 	eor.w	r1, r1, #32
 800fb7e:	b2d2      	uxtb	r2, r2
 800fb80:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800fb84:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 800fb88:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800fb8c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	f47f af57 	bne.w	800fa44 <uxr_write_framed_msg+0x88>
 800fb96:	9301      	str	r3, [sp, #4]
 800fb98:	4698      	mov	r8, r3
 800fb9a:	e779      	b.n	800fa90 <uxr_write_framed_msg+0xd4>
 800fb9c:	2500      	movs	r5, #0
 800fb9e:	e001      	b.n	800fba4 <uxr_write_framed_msg+0x1e8>
 800fba0:	2800      	cmp	r0, #0
 800fba2:	d090      	beq.n	800fac6 <uxr_write_framed_msg+0x10a>
 800fba4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800fba8:	1b52      	subs	r2, r2, r5
 800fbaa:	465b      	mov	r3, fp
 800fbac:	4421      	add	r1, r4
 800fbae:	4638      	mov	r0, r7
 800fbb0:	47b0      	blx	r6
 800fbb2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800fbb6:	4405      	add	r5, r0
 800fbb8:	4295      	cmp	r5, r2
 800fbba:	d3f1      	bcc.n	800fba0 <uxr_write_framed_msg+0x1e4>
 800fbbc:	d183      	bne.n	800fac6 <uxr_write_framed_msg+0x10a>
 800fbbe:	f04f 0300 	mov.w	r3, #0
 800fbc2:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800fbc6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fbc8:	4543      	cmp	r3, r8
 800fbca:	d964      	bls.n	800fc96 <uxr_write_framed_msg+0x2da>
 800fbcc:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800fbd0:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800fbd4:	2901      	cmp	r1, #1
 800fbd6:	f04f 0200 	mov.w	r2, #0
 800fbda:	f63f af3d 	bhi.w	800fa58 <uxr_write_framed_msg+0x9c>
 800fbde:	1c51      	adds	r1, r2, #1
 800fbe0:	b2c9      	uxtb	r1, r1
 800fbe2:	2929      	cmp	r1, #41	@ 0x29
 800fbe4:	d8da      	bhi.n	800fb9c <uxr_write_framed_msg+0x1e0>
 800fbe6:	18a0      	adds	r0, r4, r2
 800fbe8:	4421      	add	r1, r4
 800fbea:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 800fbee:	3202      	adds	r2, #2
 800fbf0:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 800fbf4:	b2d2      	uxtb	r2, r2
 800fbf6:	f083 0020 	eor.w	r0, r3, #32
 800fbfa:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800fbfe:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fc02:	e733      	b.n	800fa6c <uxr_write_framed_msg+0xb0>
 800fc04:	18a1      	adds	r1, r4, r2
 800fc06:	3201      	adds	r2, #1
 800fc08:	4648      	mov	r0, r9
 800fc0a:	b2d2      	uxtb	r2, r2
 800fc0c:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800fc10:	f04f 0901 	mov.w	r9, #1
 800fc14:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fc18:	2800      	cmp	r0, #0
 800fc1a:	f43f af7b 	beq.w	800fb14 <uxr_write_framed_msg+0x158>
 800fc1e:	2500      	movs	r5, #0
 800fc20:	e002      	b.n	800fc28 <uxr_write_framed_msg+0x26c>
 800fc22:	2800      	cmp	r0, #0
 800fc24:	f43f af4f 	beq.w	800fac6 <uxr_write_framed_msg+0x10a>
 800fc28:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800fc2c:	1b52      	subs	r2, r2, r5
 800fc2e:	465b      	mov	r3, fp
 800fc30:	4421      	add	r1, r4
 800fc32:	4638      	mov	r0, r7
 800fc34:	47b0      	blx	r6
 800fc36:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800fc3a:	4405      	add	r5, r0
 800fc3c:	4295      	cmp	r5, r2
 800fc3e:	d3f0      	bcc.n	800fc22 <uxr_write_framed_msg+0x266>
 800fc40:	f47f af41 	bne.w	800fac6 <uxr_write_framed_msg+0x10a>
 800fc44:	2300      	movs	r3, #0
 800fc46:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800fc4a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fc4c:	b298      	uxth	r0, r3
 800fc4e:	b003      	add	sp, #12
 800fc50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc54:	217d      	movs	r1, #125	@ 0x7d
 800fc56:	f082 0220 	eor.w	r2, r2, #32
 800fc5a:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 800fc5e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800fc62:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 800fc66:	2901      	cmp	r1, #1
 800fc68:	f04f 0203 	mov.w	r2, #3
 800fc6c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fc70:	d804      	bhi.n	800fc7c <uxr_write_framed_msg+0x2c0>
 800fc72:	4611      	mov	r1, r2
 800fc74:	f04f 0c04 	mov.w	ip, #4
 800fc78:	2205      	movs	r2, #5
 800fc7a:	e752      	b.n	800fb22 <uxr_write_framed_msg+0x166>
 800fc7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fc7e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 800fc82:	b2dd      	uxtb	r5, r3
 800fc84:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800fc88:	2204      	movs	r2, #4
 800fc8a:	2901      	cmp	r1, #1
 800fc8c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fc90:	f63f aec0 	bhi.w	800fa14 <uxr_write_framed_msg+0x58>
 800fc94:	e758      	b.n	800fb48 <uxr_write_framed_msg+0x18c>
 800fc96:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800fc9a:	fa5f f889 	uxtb.w	r8, r9
 800fc9e:	9301      	str	r3, [sp, #4]
 800fca0:	2200      	movs	r2, #0
 800fca2:	e6f5      	b.n	800fa90 <uxr_write_framed_msg+0xd4>
 800fca4:	08018df0 	.word	0x08018df0

0800fca8 <uxr_framing_read_transport>:
 800fca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcac:	4604      	mov	r4, r0
 800fcae:	b083      	sub	sp, #12
 800fcb0:	461f      	mov	r7, r3
 800fcb2:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800fcb6:	4689      	mov	r9, r1
 800fcb8:	4692      	mov	sl, r2
 800fcba:	f000 fc89 	bl	80105d0 <uxr_millis>
 800fcbe:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800fcc2:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800fcc6:	42b3      	cmp	r3, r6
 800fcc8:	4680      	mov	r8, r0
 800fcca:	d061      	beq.n	800fd90 <uxr_framing_read_transport+0xe8>
 800fccc:	d81c      	bhi.n	800fd08 <uxr_framing_read_transport+0x60>
 800fcce:	1e75      	subs	r5, r6, #1
 800fcd0:	1aed      	subs	r5, r5, r3
 800fcd2:	b2ed      	uxtb	r5, r5
 800fcd4:	2600      	movs	r6, #0
 800fcd6:	455d      	cmp	r5, fp
 800fcd8:	d81f      	bhi.n	800fd1a <uxr_framing_read_transport+0x72>
 800fcda:	19ab      	adds	r3, r5, r6
 800fcdc:	455b      	cmp	r3, fp
 800fcde:	bf84      	itt	hi
 800fce0:	ebab 0605 	subhi.w	r6, fp, r5
 800fce4:	b2f6      	uxtbhi	r6, r6
 800fce6:	b9ed      	cbnz	r5, 800fd24 <uxr_framing_read_transport+0x7c>
 800fce8:	f04f 0b00 	mov.w	fp, #0
 800fcec:	f000 fc70 	bl	80105d0 <uxr_millis>
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	eba0 0808 	sub.w	r8, r0, r8
 800fcf6:	eba3 0308 	sub.w	r3, r3, r8
 800fcfa:	4658      	mov	r0, fp
 800fcfc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fd00:	603b      	str	r3, [r7, #0]
 800fd02:	b003      	add	sp, #12
 800fd04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd08:	2e00      	cmp	r6, #0
 800fd0a:	d049      	beq.n	800fda0 <uxr_framing_read_transport+0xf8>
 800fd0c:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 800fd10:	b2ed      	uxtb	r5, r5
 800fd12:	3e01      	subs	r6, #1
 800fd14:	455d      	cmp	r5, fp
 800fd16:	b2f6      	uxtb	r6, r6
 800fd18:	d9df      	bls.n	800fcda <uxr_framing_read_transport+0x32>
 800fd1a:	fa5f f58b 	uxtb.w	r5, fp
 800fd1e:	2600      	movs	r6, #0
 800fd20:	2d00      	cmp	r5, #0
 800fd22:	d0e1      	beq.n	800fce8 <uxr_framing_read_transport+0x40>
 800fd24:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800fd28:	3102      	adds	r1, #2
 800fd2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd2c:	9300      	str	r3, [sp, #0]
 800fd2e:	683b      	ldr	r3, [r7, #0]
 800fd30:	4421      	add	r1, r4
 800fd32:	462a      	mov	r2, r5
 800fd34:	4650      	mov	r0, sl
 800fd36:	47c8      	blx	r9
 800fd38:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800fd3c:	4a1a      	ldr	r2, [pc, #104]	@ (800fda8 <uxr_framing_read_transport+0x100>)
 800fd3e:	4403      	add	r3, r0
 800fd40:	0859      	lsrs	r1, r3, #1
 800fd42:	fba2 2101 	umull	r2, r1, r2, r1
 800fd46:	0889      	lsrs	r1, r1, #2
 800fd48:	222a      	movs	r2, #42	@ 0x2a
 800fd4a:	fb02 3111 	mls	r1, r2, r1, r3
 800fd4e:	4683      	mov	fp, r0
 800fd50:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800fd54:	2800      	cmp	r0, #0
 800fd56:	d0c7      	beq.n	800fce8 <uxr_framing_read_transport+0x40>
 800fd58:	42a8      	cmp	r0, r5
 800fd5a:	d1c7      	bne.n	800fcec <uxr_framing_read_transport+0x44>
 800fd5c:	2e00      	cmp	r6, #0
 800fd5e:	d0c5      	beq.n	800fcec <uxr_framing_read_transport+0x44>
 800fd60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd62:	9300      	str	r3, [sp, #0]
 800fd64:	3102      	adds	r1, #2
 800fd66:	4632      	mov	r2, r6
 800fd68:	4421      	add	r1, r4
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	4650      	mov	r0, sl
 800fd6e:	47c8      	blx	r9
 800fd70:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800fd74:	4a0c      	ldr	r2, [pc, #48]	@ (800fda8 <uxr_framing_read_transport+0x100>)
 800fd76:	180b      	adds	r3, r1, r0
 800fd78:	0859      	lsrs	r1, r3, #1
 800fd7a:	fba2 1201 	umull	r1, r2, r2, r1
 800fd7e:	0892      	lsrs	r2, r2, #2
 800fd80:	212a      	movs	r1, #42	@ 0x2a
 800fd82:	fb01 3312 	mls	r3, r1, r2, r3
 800fd86:	eb00 0b05 	add.w	fp, r0, r5
 800fd8a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800fd8e:	e7ad      	b.n	800fcec <uxr_framing_read_transport+0x44>
 800fd90:	2600      	movs	r6, #0
 800fd92:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800fd96:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800fd98:	d9bf      	bls.n	800fd1a <uxr_framing_read_transport+0x72>
 800fd9a:	2102      	movs	r1, #2
 800fd9c:	2529      	movs	r5, #41	@ 0x29
 800fd9e:	e7c4      	b.n	800fd2a <uxr_framing_read_transport+0x82>
 800fda0:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 800fda4:	b2ed      	uxtb	r5, r5
 800fda6:	e796      	b.n	800fcd6 <uxr_framing_read_transport+0x2e>
 800fda8:	30c30c31 	.word	0x30c30c31

0800fdac <uxr_read_framed_msg>:
 800fdac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdb0:	461e      	mov	r6, r3
 800fdb2:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 800fdb6:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800fdba:	429d      	cmp	r5, r3
 800fdbc:	b083      	sub	sp, #12
 800fdbe:	4604      	mov	r4, r0
 800fdc0:	4688      	mov	r8, r1
 800fdc2:	4691      	mov	r9, r2
 800fdc4:	f000 8188 	beq.w	80100d8 <uxr_read_framed_msg+0x32c>
 800fdc8:	7823      	ldrb	r3, [r4, #0]
 800fdca:	4dc1      	ldr	r5, [pc, #772]	@ (80100d0 <uxr_read_framed_msg+0x324>)
 800fdcc:	4fc1      	ldr	r7, [pc, #772]	@ (80100d4 <uxr_read_framed_msg+0x328>)
 800fdce:	2b07      	cmp	r3, #7
 800fdd0:	d8fd      	bhi.n	800fdce <uxr_read_framed_msg+0x22>
 800fdd2:	e8df f013 	tbh	[pc, r3, lsl #1]
 800fdd6:	0115      	.short	0x0115
 800fdd8:	00d600f6 	.word	0x00d600f6
 800fddc:	009000b9 	.word	0x009000b9
 800fde0:	0030004d 	.word	0x0030004d
 800fde4:	0008      	.short	0x0008
 800fde6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800fdea:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800fdee:	4299      	cmp	r1, r3
 800fdf0:	f000 814a 	beq.w	8010088 <uxr_read_framed_msg+0x2dc>
 800fdf4:	18e2      	adds	r2, r4, r3
 800fdf6:	7892      	ldrb	r2, [r2, #2]
 800fdf8:	2a7d      	cmp	r2, #125	@ 0x7d
 800fdfa:	f000 8199 	beq.w	8010130 <uxr_read_framed_msg+0x384>
 800fdfe:	3301      	adds	r3, #1
 800fe00:	0858      	lsrs	r0, r3, #1
 800fe02:	fba5 1000 	umull	r1, r0, r5, r0
 800fe06:	0880      	lsrs	r0, r0, #2
 800fe08:	212a      	movs	r1, #42	@ 0x2a
 800fe0a:	fb01 3310 	mls	r3, r1, r0, r3
 800fe0e:	2a7e      	cmp	r2, #126	@ 0x7e
 800fe10:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800fe14:	f000 8252 	beq.w	80102bc <uxr_read_framed_msg+0x510>
 800fe18:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800fe1a:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 800fe1c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800fe20:	b29b      	uxth	r3, r3
 800fe22:	2200      	movs	r2, #0
 800fe24:	4299      	cmp	r1, r3
 800fe26:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800fe28:	7022      	strb	r2, [r4, #0]
 800fe2a:	f000 8179 	beq.w	8010120 <uxr_read_framed_msg+0x374>
 800fe2e:	2000      	movs	r0, #0
 800fe30:	b003      	add	sp, #12
 800fe32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe36:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800fe3a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800fe3e:	4299      	cmp	r1, r3
 800fe40:	f000 8131 	beq.w	80100a6 <uxr_read_framed_msg+0x2fa>
 800fe44:	18e2      	adds	r2, r4, r3
 800fe46:	7890      	ldrb	r0, [r2, #2]
 800fe48:	287d      	cmp	r0, #125	@ 0x7d
 800fe4a:	f000 8190 	beq.w	801016e <uxr_read_framed_msg+0x3c2>
 800fe4e:	3301      	adds	r3, #1
 800fe50:	085a      	lsrs	r2, r3, #1
 800fe52:	fba5 1202 	umull	r1, r2, r5, r2
 800fe56:	0892      	lsrs	r2, r2, #2
 800fe58:	212a      	movs	r1, #42	@ 0x2a
 800fe5a:	fb01 3312 	mls	r3, r1, r2, r3
 800fe5e:	287e      	cmp	r0, #126	@ 0x7e
 800fe60:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800fe64:	f000 821a 	beq.w	801029c <uxr_read_framed_msg+0x4f0>
 800fe68:	2307      	movs	r3, #7
 800fe6a:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800fe6c:	7023      	strb	r3, [r4, #0]
 800fe6e:	e7ae      	b.n	800fdce <uxr_read_framed_msg+0x22>
 800fe70:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800fe72:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800fe76:	459e      	cmp	lr, r3
 800fe78:	d938      	bls.n	800feec <uxr_read_framed_msg+0x140>
 800fe7a:	ee07 8a90 	vmov	s15, r8
 800fe7e:	212a      	movs	r1, #42	@ 0x2a
 800fe80:	e020      	b.n	800fec4 <uxr_read_framed_msg+0x118>
 800fe82:	f89b c002 	ldrb.w	ip, [fp, #2]
 800fe86:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 800fe8a:	f000 80d4 	beq.w	8010036 <uxr_read_framed_msg+0x28a>
 800fe8e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800fe92:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800fe96:	f000 8219 	beq.w	80102cc <uxr_read_framed_msg+0x520>
 800fe9a:	f806 c003 	strb.w	ip, [r6, r3]
 800fe9e:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 800fea2:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800fea4:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800fea8:	ea8a 000c 	eor.w	r0, sl, ip
 800feac:	b2c0      	uxtb	r0, r0
 800feae:	3301      	adds	r3, #1
 800feb0:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 800feb4:	b29b      	uxth	r3, r3
 800feb6:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 800feba:	4573      	cmp	r3, lr
 800febc:	8663      	strh	r3, [r4, #50]	@ 0x32
 800febe:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800fec0:	f080 8120 	bcs.w	8010104 <uxr_read_framed_msg+0x358>
 800fec4:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800fec8:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800fecc:	f100 0c01 	add.w	ip, r0, #1
 800fed0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800fed4:	fba5 8202 	umull	r8, r2, r5, r2
 800fed8:	0892      	lsrs	r2, r2, #2
 800feda:	4582      	cmp	sl, r0
 800fedc:	eb04 0b00 	add.w	fp, r4, r0
 800fee0:	fb01 c212 	mls	r2, r1, r2, ip
 800fee4:	d1cd      	bne.n	800fe82 <uxr_read_framed_msg+0xd6>
 800fee6:	ee17 8a90 	vmov	r8, s15
 800feea:	459e      	cmp	lr, r3
 800feec:	f040 8111 	bne.w	8010112 <uxr_read_framed_msg+0x366>
 800fef0:	2306      	movs	r3, #6
 800fef2:	7023      	strb	r3, [r4, #0]
 800fef4:	e76b      	b.n	800fdce <uxr_read_framed_msg+0x22>
 800fef6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800fefa:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800fefe:	4298      	cmp	r0, r3
 800ff00:	f000 80c2 	beq.w	8010088 <uxr_read_framed_msg+0x2dc>
 800ff04:	18e2      	adds	r2, r4, r3
 800ff06:	7891      	ldrb	r1, [r2, #2]
 800ff08:	297d      	cmp	r1, #125	@ 0x7d
 800ff0a:	f000 814c 	beq.w	80101a6 <uxr_read_framed_msg+0x3fa>
 800ff0e:	3301      	adds	r3, #1
 800ff10:	085a      	lsrs	r2, r3, #1
 800ff12:	fba5 0202 	umull	r0, r2, r5, r2
 800ff16:	0892      	lsrs	r2, r2, #2
 800ff18:	202a      	movs	r0, #42	@ 0x2a
 800ff1a:	fb00 3312 	mls	r3, r0, r2, r3
 800ff1e:	297e      	cmp	r1, #126	@ 0x7e
 800ff20:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ff24:	f000 81ca 	beq.w	80102bc <uxr_read_framed_msg+0x510>
 800ff28:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800ff2a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800ff2e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ff30:	b29b      	uxth	r3, r3
 800ff32:	2000      	movs	r0, #0
 800ff34:	428b      	cmp	r3, r1
 800ff36:	8623      	strh	r3, [r4, #48]	@ 0x30
 800ff38:	8660      	strh	r0, [r4, #50]	@ 0x32
 800ff3a:	86e0      	strh	r0, [r4, #54]	@ 0x36
 800ff3c:	f240 80df 	bls.w	80100fe <uxr_read_framed_msg+0x352>
 800ff40:	7020      	strb	r0, [r4, #0]
 800ff42:	b003      	add	sp, #12
 800ff44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff48:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800ff4c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800ff50:	4299      	cmp	r1, r3
 800ff52:	f000 80a8 	beq.w	80100a6 <uxr_read_framed_msg+0x2fa>
 800ff56:	18e2      	adds	r2, r4, r3
 800ff58:	7890      	ldrb	r0, [r2, #2]
 800ff5a:	287d      	cmp	r0, #125	@ 0x7d
 800ff5c:	f000 8164 	beq.w	8010228 <uxr_read_framed_msg+0x47c>
 800ff60:	3301      	adds	r3, #1
 800ff62:	085a      	lsrs	r2, r3, #1
 800ff64:	fba5 1202 	umull	r1, r2, r5, r2
 800ff68:	0892      	lsrs	r2, r2, #2
 800ff6a:	212a      	movs	r1, #42	@ 0x2a
 800ff6c:	fb01 3312 	mls	r3, r1, r2, r3
 800ff70:	287e      	cmp	r0, #126	@ 0x7e
 800ff72:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ff76:	f000 8191 	beq.w	801029c <uxr_read_framed_msg+0x4f0>
 800ff7a:	2304      	movs	r3, #4
 800ff7c:	8620      	strh	r0, [r4, #48]	@ 0x30
 800ff7e:	7023      	strb	r3, [r4, #0]
 800ff80:	e725      	b.n	800fdce <uxr_read_framed_msg+0x22>
 800ff82:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800ff86:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800ff8a:	4290      	cmp	r0, r2
 800ff8c:	f000 80b3 	beq.w	80100f6 <uxr_read_framed_msg+0x34a>
 800ff90:	18a3      	adds	r3, r4, r2
 800ff92:	7899      	ldrb	r1, [r3, #2]
 800ff94:	297d      	cmp	r1, #125	@ 0x7d
 800ff96:	f000 8164 	beq.w	8010262 <uxr_read_framed_msg+0x4b6>
 800ff9a:	3201      	adds	r2, #1
 800ff9c:	0850      	lsrs	r0, r2, #1
 800ff9e:	fba5 3000 	umull	r3, r0, r5, r0
 800ffa2:	0880      	lsrs	r0, r0, #2
 800ffa4:	232a      	movs	r3, #42	@ 0x2a
 800ffa6:	fb03 2210 	mls	r2, r3, r0, r2
 800ffaa:	297e      	cmp	r1, #126	@ 0x7e
 800ffac:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800ffb0:	f000 8188 	beq.w	80102c4 <uxr_read_framed_msg+0x518>
 800ffb4:	7863      	ldrb	r3, [r4, #1]
 800ffb6:	428b      	cmp	r3, r1
 800ffb8:	bf0c      	ite	eq
 800ffba:	2303      	moveq	r3, #3
 800ffbc:	2300      	movne	r3, #0
 800ffbe:	7023      	strb	r3, [r4, #0]
 800ffc0:	e705      	b.n	800fdce <uxr_read_framed_msg+0x22>
 800ffc2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800ffc6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800ffca:	2200      	movs	r2, #0
 800ffcc:	4299      	cmp	r1, r3
 800ffce:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 800ffd2:	d06c      	beq.n	80100ae <uxr_read_framed_msg+0x302>
 800ffd4:	18e2      	adds	r2, r4, r3
 800ffd6:	7890      	ldrb	r0, [r2, #2]
 800ffd8:	287d      	cmp	r0, #125	@ 0x7d
 800ffda:	f000 8101 	beq.w	80101e0 <uxr_read_framed_msg+0x434>
 800ffde:	3301      	adds	r3, #1
 800ffe0:	085a      	lsrs	r2, r3, #1
 800ffe2:	fba5 1202 	umull	r1, r2, r5, r2
 800ffe6:	0892      	lsrs	r2, r2, #2
 800ffe8:	212a      	movs	r1, #42	@ 0x2a
 800ffea:	fb01 3312 	mls	r3, r1, r2, r3
 800ffee:	287e      	cmp	r0, #126	@ 0x7e
 800fff0:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800fff4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800fff8:	d059      	beq.n	80100ae <uxr_read_framed_msg+0x302>
 800fffa:	2302      	movs	r3, #2
 800fffc:	7023      	strb	r3, [r4, #0]
 800fffe:	e6e6      	b.n	800fdce <uxr_read_framed_msg+0x22>
 8010000:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8010004:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8010008:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 801000c:	1c51      	adds	r1, r2, #1
 801000e:	084b      	lsrs	r3, r1, #1
 8010010:	fba5 c303 	umull	ip, r3, r5, r3
 8010014:	089b      	lsrs	r3, r3, #2
 8010016:	fb0e 1313 	mls	r3, lr, r3, r1
 801001a:	4592      	cmp	sl, r2
 801001c:	eb04 0002 	add.w	r0, r4, r2
 8010020:	b2da      	uxtb	r2, r3
 8010022:	f43f af04 	beq.w	800fe2e <uxr_read_framed_msg+0x82>
 8010026:	7883      	ldrb	r3, [r0, #2]
 8010028:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801002c:	2b7e      	cmp	r3, #126	@ 0x7e
 801002e:	d1ed      	bne.n	801000c <uxr_read_framed_msg+0x260>
 8010030:	2301      	movs	r3, #1
 8010032:	7023      	strb	r3, [r4, #0]
 8010034:	e6cb      	b.n	800fdce <uxr_read_framed_msg+0x22>
 8010036:	f100 0c01 	add.w	ip, r0, #1
 801003a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801003e:	fba5 8202 	umull	r8, r2, r5, r2
 8010042:	0892      	lsrs	r2, r2, #2
 8010044:	fb01 c212 	mls	r2, r1, r2, ip
 8010048:	eb04 0c02 	add.w	ip, r4, r2
 801004c:	b2d2      	uxtb	r2, r2
 801004e:	4592      	cmp	sl, r2
 8010050:	f100 0002 	add.w	r0, r0, #2
 8010054:	f43f af47 	beq.w	800fee6 <uxr_read_framed_msg+0x13a>
 8010058:	0842      	lsrs	r2, r0, #1
 801005a:	f89c a002 	ldrb.w	sl, [ip, #2]
 801005e:	fba5 8202 	umull	r8, r2, r5, r2
 8010062:	0892      	lsrs	r2, r2, #2
 8010064:	fb01 0012 	mls	r0, r1, r2, r0
 8010068:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 801006c:	f08a 0c20 	eor.w	ip, sl, #32
 8010070:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8010074:	f47f af11 	bne.w	800fe9a <uxr_read_framed_msg+0xee>
 8010078:	459e      	cmp	lr, r3
 801007a:	ee17 8a90 	vmov	r8, s15
 801007e:	f43f af37 	beq.w	800fef0 <uxr_read_framed_msg+0x144>
 8010082:	2301      	movs	r3, #1
 8010084:	7023      	strb	r3, [r4, #0]
 8010086:	e6a2      	b.n	800fdce <uxr_read_framed_msg+0x22>
 8010088:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801008a:	9300      	str	r3, [sp, #0]
 801008c:	2301      	movs	r3, #1
 801008e:	9301      	str	r3, [sp, #4]
 8010090:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010092:	464a      	mov	r2, r9
 8010094:	4641      	mov	r1, r8
 8010096:	4620      	mov	r0, r4
 8010098:	f7ff fe06 	bl	800fca8 <uxr_framing_read_transport>
 801009c:	2800      	cmp	r0, #0
 801009e:	f43f aec6 	beq.w	800fe2e <uxr_read_framed_msg+0x82>
 80100a2:	7823      	ldrb	r3, [r4, #0]
 80100a4:	e693      	b.n	800fdce <uxr_read_framed_msg+0x22>
 80100a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80100a8:	9300      	str	r3, [sp, #0]
 80100aa:	2302      	movs	r3, #2
 80100ac:	e7ef      	b.n	801008e <uxr_read_framed_msg+0x2e2>
 80100ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80100b0:	9300      	str	r3, [sp, #0]
 80100b2:	2304      	movs	r3, #4
 80100b4:	9301      	str	r3, [sp, #4]
 80100b6:	464a      	mov	r2, r9
 80100b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80100ba:	4641      	mov	r1, r8
 80100bc:	4620      	mov	r0, r4
 80100be:	f7ff fdf3 	bl	800fca8 <uxr_framing_read_transport>
 80100c2:	2800      	cmp	r0, #0
 80100c4:	d1ed      	bne.n	80100a2 <uxr_read_framed_msg+0x2f6>
 80100c6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80100ca:	2b7e      	cmp	r3, #126	@ 0x7e
 80100cc:	d0e9      	beq.n	80100a2 <uxr_read_framed_msg+0x2f6>
 80100ce:	e6ae      	b.n	800fe2e <uxr_read_framed_msg+0x82>
 80100d0:	30c30c31 	.word	0x30c30c31
 80100d4:	08018df0 	.word	0x08018df0
 80100d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80100da:	9300      	str	r3, [sp, #0]
 80100dc:	2305      	movs	r3, #5
 80100de:	9301      	str	r3, [sp, #4]
 80100e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80100e2:	f7ff fde1 	bl	800fca8 <uxr_framing_read_transport>
 80100e6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80100ea:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80100ee:	429a      	cmp	r2, r3
 80100f0:	f43f ae9d 	beq.w	800fe2e <uxr_read_framed_msg+0x82>
 80100f4:	e668      	b.n	800fdc8 <uxr_read_framed_msg+0x1c>
 80100f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80100f8:	9300      	str	r3, [sp, #0]
 80100fa:	2303      	movs	r3, #3
 80100fc:	e7c7      	b.n	801008e <uxr_read_framed_msg+0x2e2>
 80100fe:	2305      	movs	r3, #5
 8010100:	7023      	strb	r3, [r4, #0]
 8010102:	e664      	b.n	800fdce <uxr_read_framed_msg+0x22>
 8010104:	ee17 8a90 	vmov	r8, s15
 8010108:	f43f aef2 	beq.w	800fef0 <uxr_read_framed_msg+0x144>
 801010c:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8010110:	d08e      	beq.n	8010030 <uxr_read_framed_msg+0x284>
 8010112:	ebae 0303 	sub.w	r3, lr, r3
 8010116:	3302      	adds	r3, #2
 8010118:	9301      	str	r3, [sp, #4]
 801011a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801011c:	9300      	str	r3, [sp, #0]
 801011e:	e7b7      	b.n	8010090 <uxr_read_framed_msg+0x2e4>
 8010120:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010122:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8010126:	7013      	strb	r3, [r2, #0]
 8010128:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801012a:	b003      	add	sp, #12
 801012c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010130:	f103 0c01 	add.w	ip, r3, #1
 8010134:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8010138:	fba5 0202 	umull	r0, r2, r5, r2
 801013c:	0892      	lsrs	r2, r2, #2
 801013e:	202a      	movs	r0, #42	@ 0x2a
 8010140:	fb00 c212 	mls	r2, r0, r2, ip
 8010144:	fa5f fc82 	uxtb.w	ip, r2
 8010148:	4561      	cmp	r1, ip
 801014a:	d09d      	beq.n	8010088 <uxr_read_framed_msg+0x2dc>
 801014c:	3302      	adds	r3, #2
 801014e:	4422      	add	r2, r4
 8010150:	0859      	lsrs	r1, r3, #1
 8010152:	7892      	ldrb	r2, [r2, #2]
 8010154:	fba5 c101 	umull	ip, r1, r5, r1
 8010158:	0889      	lsrs	r1, r1, #2
 801015a:	fb00 3311 	mls	r3, r0, r1, r3
 801015e:	2a7e      	cmp	r2, #126	@ 0x7e
 8010160:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010164:	f000 80aa 	beq.w	80102bc <uxr_read_framed_msg+0x510>
 8010168:	f082 0220 	eor.w	r2, r2, #32
 801016c:	e654      	b.n	800fe18 <uxr_read_framed_msg+0x6c>
 801016e:	1c58      	adds	r0, r3, #1
 8010170:	0842      	lsrs	r2, r0, #1
 8010172:	fba5 c202 	umull	ip, r2, r5, r2
 8010176:	0892      	lsrs	r2, r2, #2
 8010178:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801017c:	fb0c 0212 	mls	r2, ip, r2, r0
 8010180:	b2d0      	uxtb	r0, r2
 8010182:	4281      	cmp	r1, r0
 8010184:	d08f      	beq.n	80100a6 <uxr_read_framed_msg+0x2fa>
 8010186:	4422      	add	r2, r4
 8010188:	3302      	adds	r3, #2
 801018a:	7890      	ldrb	r0, [r2, #2]
 801018c:	085a      	lsrs	r2, r3, #1
 801018e:	fba5 1202 	umull	r1, r2, r5, r2
 8010192:	0892      	lsrs	r2, r2, #2
 8010194:	fb0c 3312 	mls	r3, ip, r2, r3
 8010198:	287e      	cmp	r0, #126	@ 0x7e
 801019a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801019e:	d07d      	beq.n	801029c <uxr_read_framed_msg+0x4f0>
 80101a0:	f080 0020 	eor.w	r0, r0, #32
 80101a4:	e660      	b.n	800fe68 <uxr_read_framed_msg+0xbc>
 80101a6:	1c59      	adds	r1, r3, #1
 80101a8:	084a      	lsrs	r2, r1, #1
 80101aa:	fba5 c202 	umull	ip, r2, r5, r2
 80101ae:	0892      	lsrs	r2, r2, #2
 80101b0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80101b4:	fb0c 1212 	mls	r2, ip, r2, r1
 80101b8:	b2d1      	uxtb	r1, r2
 80101ba:	4288      	cmp	r0, r1
 80101bc:	f43f af64 	beq.w	8010088 <uxr_read_framed_msg+0x2dc>
 80101c0:	4422      	add	r2, r4
 80101c2:	3302      	adds	r3, #2
 80101c4:	7891      	ldrb	r1, [r2, #2]
 80101c6:	085a      	lsrs	r2, r3, #1
 80101c8:	fba5 0202 	umull	r0, r2, r5, r2
 80101cc:	0892      	lsrs	r2, r2, #2
 80101ce:	fb0c 3312 	mls	r3, ip, r2, r3
 80101d2:	297e      	cmp	r1, #126	@ 0x7e
 80101d4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80101d8:	d070      	beq.n	80102bc <uxr_read_framed_msg+0x510>
 80101da:	f081 0120 	eor.w	r1, r1, #32
 80101de:	e6a3      	b.n	800ff28 <uxr_read_framed_msg+0x17c>
 80101e0:	f103 0c01 	add.w	ip, r3, #1
 80101e4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80101e8:	fba5 0202 	umull	r0, r2, r5, r2
 80101ec:	0892      	lsrs	r2, r2, #2
 80101ee:	202a      	movs	r0, #42	@ 0x2a
 80101f0:	fb00 c212 	mls	r2, r0, r2, ip
 80101f4:	fa5f fc82 	uxtb.w	ip, r2
 80101f8:	4561      	cmp	r1, ip
 80101fa:	f43f af58 	beq.w	80100ae <uxr_read_framed_msg+0x302>
 80101fe:	4422      	add	r2, r4
 8010200:	3302      	adds	r3, #2
 8010202:	7891      	ldrb	r1, [r2, #2]
 8010204:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8010208:	085a      	lsrs	r2, r3, #1
 801020a:	fba5 c202 	umull	ip, r2, r5, r2
 801020e:	0892      	lsrs	r2, r2, #2
 8010210:	fb00 3312 	mls	r3, r0, r2, r3
 8010214:	297e      	cmp	r1, #126	@ 0x7e
 8010216:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801021a:	f43f af48 	beq.w	80100ae <uxr_read_framed_msg+0x302>
 801021e:	f081 0120 	eor.w	r1, r1, #32
 8010222:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8010226:	e6e8      	b.n	800fffa <uxr_read_framed_msg+0x24e>
 8010228:	1c58      	adds	r0, r3, #1
 801022a:	0842      	lsrs	r2, r0, #1
 801022c:	fba5 c202 	umull	ip, r2, r5, r2
 8010230:	0892      	lsrs	r2, r2, #2
 8010232:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8010236:	fb0c 0212 	mls	r2, ip, r2, r0
 801023a:	b2d0      	uxtb	r0, r2
 801023c:	4281      	cmp	r1, r0
 801023e:	f43f af32 	beq.w	80100a6 <uxr_read_framed_msg+0x2fa>
 8010242:	4422      	add	r2, r4
 8010244:	3302      	adds	r3, #2
 8010246:	7890      	ldrb	r0, [r2, #2]
 8010248:	085a      	lsrs	r2, r3, #1
 801024a:	fba5 1202 	umull	r1, r2, r5, r2
 801024e:	0892      	lsrs	r2, r2, #2
 8010250:	fb0c 3312 	mls	r3, ip, r2, r3
 8010254:	287e      	cmp	r0, #126	@ 0x7e
 8010256:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801025a:	d01f      	beq.n	801029c <uxr_read_framed_msg+0x4f0>
 801025c:	f080 0020 	eor.w	r0, r0, #32
 8010260:	e68b      	b.n	800ff7a <uxr_read_framed_msg+0x1ce>
 8010262:	1c51      	adds	r1, r2, #1
 8010264:	084b      	lsrs	r3, r1, #1
 8010266:	fba5 c303 	umull	ip, r3, r5, r3
 801026a:	089b      	lsrs	r3, r3, #2
 801026c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8010270:	fb0c 1313 	mls	r3, ip, r3, r1
 8010274:	b2d9      	uxtb	r1, r3
 8010276:	4288      	cmp	r0, r1
 8010278:	f43f af3d 	beq.w	80100f6 <uxr_read_framed_msg+0x34a>
 801027c:	3202      	adds	r2, #2
 801027e:	4423      	add	r3, r4
 8010280:	0850      	lsrs	r0, r2, #1
 8010282:	789b      	ldrb	r3, [r3, #2]
 8010284:	fba5 1000 	umull	r1, r0, r5, r0
 8010288:	0880      	lsrs	r0, r0, #2
 801028a:	fb0c 2210 	mls	r2, ip, r0, r2
 801028e:	2b7e      	cmp	r3, #126	@ 0x7e
 8010290:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8010294:	d016      	beq.n	80102c4 <uxr_read_framed_msg+0x518>
 8010296:	f083 0120 	eor.w	r1, r3, #32
 801029a:	e68b      	b.n	800ffb4 <uxr_read_framed_msg+0x208>
 801029c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801029e:	9300      	str	r3, [sp, #0]
 80102a0:	2302      	movs	r3, #2
 80102a2:	9301      	str	r3, [sp, #4]
 80102a4:	464a      	mov	r2, r9
 80102a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80102a8:	4641      	mov	r1, r8
 80102aa:	4620      	mov	r0, r4
 80102ac:	f7ff fcfc 	bl	800fca8 <uxr_framing_read_transport>
 80102b0:	2800      	cmp	r0, #0
 80102b2:	f47f aef6 	bne.w	80100a2 <uxr_read_framed_msg+0x2f6>
 80102b6:	2301      	movs	r3, #1
 80102b8:	7023      	strb	r3, [r4, #0]
 80102ba:	e588      	b.n	800fdce <uxr_read_framed_msg+0x22>
 80102bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80102be:	9300      	str	r3, [sp, #0]
 80102c0:	2301      	movs	r3, #1
 80102c2:	e7ee      	b.n	80102a2 <uxr_read_framed_msg+0x4f6>
 80102c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80102c6:	9300      	str	r3, [sp, #0]
 80102c8:	2303      	movs	r3, #3
 80102ca:	e7ea      	b.n	80102a2 <uxr_read_framed_msg+0x4f6>
 80102cc:	ee17 8a90 	vmov	r8, s15
 80102d0:	e6ae      	b.n	8010030 <uxr_read_framed_msg+0x284>
 80102d2:	bf00      	nop

080102d4 <uxr_stream_id>:
 80102d4:	2901      	cmp	r1, #1
 80102d6:	b082      	sub	sp, #8
 80102d8:	d01d      	beq.n	8010316 <uxr_stream_id+0x42>
 80102da:	2902      	cmp	r1, #2
 80102dc:	f04f 0c00 	mov.w	ip, #0
 80102e0:	d01e      	beq.n	8010320 <uxr_stream_id+0x4c>
 80102e2:	2300      	movs	r3, #0
 80102e4:	f36c 0307 	bfi	r3, ip, #0, #8
 80102e8:	f360 230f 	bfi	r3, r0, #8, #8
 80102ec:	f361 4317 	bfi	r3, r1, #16, #8
 80102f0:	f362 631f 	bfi	r3, r2, #24, #8
 80102f4:	b2da      	uxtb	r2, r3
 80102f6:	2000      	movs	r0, #0
 80102f8:	f362 0007 	bfi	r0, r2, #0, #8
 80102fc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010300:	f362 200f 	bfi	r0, r2, #8, #8
 8010304:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010308:	f362 4017 	bfi	r0, r2, #16, #8
 801030c:	0e1b      	lsrs	r3, r3, #24
 801030e:	f363 601f 	bfi	r0, r3, #24, #8
 8010312:	b002      	add	sp, #8
 8010314:	4770      	bx	lr
 8010316:	f100 0c01 	add.w	ip, r0, #1
 801031a:	fa5f fc8c 	uxtb.w	ip, ip
 801031e:	e7e0      	b.n	80102e2 <uxr_stream_id+0xe>
 8010320:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8010324:	e7dd      	b.n	80102e2 <uxr_stream_id+0xe>
 8010326:	bf00      	nop

08010328 <uxr_stream_id_from_raw>:
 8010328:	b082      	sub	sp, #8
 801032a:	b130      	cbz	r0, 801033a <uxr_stream_id_from_raw+0x12>
 801032c:	0603      	lsls	r3, r0, #24
 801032e:	d420      	bmi.n	8010372 <uxr_stream_id_from_raw+0x4a>
 8010330:	1e42      	subs	r2, r0, #1
 8010332:	b2d2      	uxtb	r2, r2
 8010334:	f04f 0c01 	mov.w	ip, #1
 8010338:	e001      	b.n	801033e <uxr_stream_id_from_raw+0x16>
 801033a:	4684      	mov	ip, r0
 801033c:	4602      	mov	r2, r0
 801033e:	2300      	movs	r3, #0
 8010340:	f360 0307 	bfi	r3, r0, #0, #8
 8010344:	f362 230f 	bfi	r3, r2, #8, #8
 8010348:	f36c 4317 	bfi	r3, ip, #16, #8
 801034c:	f361 631f 	bfi	r3, r1, #24, #8
 8010350:	b2da      	uxtb	r2, r3
 8010352:	2000      	movs	r0, #0
 8010354:	f362 0007 	bfi	r0, r2, #0, #8
 8010358:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801035c:	f362 200f 	bfi	r0, r2, #8, #8
 8010360:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010364:	f362 4017 	bfi	r0, r2, #16, #8
 8010368:	0e1b      	lsrs	r3, r3, #24
 801036a:	f363 601f 	bfi	r0, r3, #24, #8
 801036e:	b002      	add	sp, #8
 8010370:	4770      	bx	lr
 8010372:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8010376:	f04f 0c02 	mov.w	ip, #2
 801037a:	e7e0      	b.n	801033e <uxr_stream_id_from_raw+0x16>

0801037c <uxr_init_stream_storage>:
 801037c:	2300      	movs	r3, #0
 801037e:	7403      	strb	r3, [r0, #16]
 8010380:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8010384:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8010388:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 801038c:	4770      	bx	lr
 801038e:	bf00      	nop

08010390 <uxr_reset_stream_storage>:
 8010390:	b570      	push	{r4, r5, r6, lr}
 8010392:	7c03      	ldrb	r3, [r0, #16]
 8010394:	4604      	mov	r4, r0
 8010396:	b153      	cbz	r3, 80103ae <uxr_reset_stream_storage+0x1e>
 8010398:	4606      	mov	r6, r0
 801039a:	2500      	movs	r5, #0
 801039c:	4630      	mov	r0, r6
 801039e:	f006 f823 	bl	80163e8 <uxr_reset_output_best_effort_stream>
 80103a2:	7c23      	ldrb	r3, [r4, #16]
 80103a4:	3501      	adds	r5, #1
 80103a6:	42ab      	cmp	r3, r5
 80103a8:	f106 0610 	add.w	r6, r6, #16
 80103ac:	d8f6      	bhi.n	801039c <uxr_reset_stream_storage+0xc>
 80103ae:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80103b2:	b163      	cbz	r3, 80103ce <uxr_reset_stream_storage+0x3e>
 80103b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80103b8:	2500      	movs	r5, #0
 80103ba:	4630      	mov	r0, r6
 80103bc:	f005 fe16 	bl	8015fec <uxr_reset_input_best_effort_stream>
 80103c0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80103c4:	3501      	adds	r5, #1
 80103c6:	42ab      	cmp	r3, r5
 80103c8:	f106 0602 	add.w	r6, r6, #2
 80103cc:	d8f5      	bhi.n	80103ba <uxr_reset_stream_storage+0x2a>
 80103ce:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80103d2:	b163      	cbz	r3, 80103ee <uxr_reset_stream_storage+0x5e>
 80103d4:	f104 0618 	add.w	r6, r4, #24
 80103d8:	2500      	movs	r5, #0
 80103da:	4630      	mov	r0, r6
 80103dc:	f006 f8b0 	bl	8016540 <uxr_reset_output_reliable_stream>
 80103e0:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80103e4:	3501      	adds	r5, #1
 80103e6:	42ab      	cmp	r3, r5
 80103e8:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 80103ec:	d8f5      	bhi.n	80103da <uxr_reset_stream_storage+0x4a>
 80103ee:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80103f2:	b163      	cbz	r3, 801040e <uxr_reset_stream_storage+0x7e>
 80103f4:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80103f8:	2500      	movs	r5, #0
 80103fa:	4630      	mov	r0, r6
 80103fc:	f005 fe6a 	bl	80160d4 <uxr_reset_input_reliable_stream>
 8010400:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8010404:	3501      	adds	r5, #1
 8010406:	42ab      	cmp	r3, r5
 8010408:	f106 0618 	add.w	r6, r6, #24
 801040c:	d8f5      	bhi.n	80103fa <uxr_reset_stream_storage+0x6a>
 801040e:	bd70      	pop	{r4, r5, r6, pc}

08010410 <uxr_add_output_best_effort_buffer>:
 8010410:	b510      	push	{r4, lr}
 8010412:	7c04      	ldrb	r4, [r0, #16]
 8010414:	f104 0c01 	add.w	ip, r4, #1
 8010418:	b082      	sub	sp, #8
 801041a:	f880 c010 	strb.w	ip, [r0, #16]
 801041e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8010422:	f005 ffd7 	bl	80163d4 <uxr_init_output_best_effort_stream>
 8010426:	2201      	movs	r2, #1
 8010428:	4611      	mov	r1, r2
 801042a:	4620      	mov	r0, r4
 801042c:	b002      	add	sp, #8
 801042e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010432:	f7ff bf4f 	b.w	80102d4 <uxr_stream_id>
 8010436:	bf00      	nop

08010438 <uxr_add_output_reliable_buffer>:
 8010438:	b510      	push	{r4, lr}
 801043a:	b084      	sub	sp, #16
 801043c:	4684      	mov	ip, r0
 801043e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8010442:	9000      	str	r0, [sp, #0]
 8010444:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8010448:	2028      	movs	r0, #40	@ 0x28
 801044a:	fb00 c004 	mla	r0, r0, r4, ip
 801044e:	f104 0e01 	add.w	lr, r4, #1
 8010452:	3018      	adds	r0, #24
 8010454:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8010458:	f006 f83a 	bl	80164d0 <uxr_init_output_reliable_stream>
 801045c:	2201      	movs	r2, #1
 801045e:	2102      	movs	r1, #2
 8010460:	4620      	mov	r0, r4
 8010462:	b004      	add	sp, #16
 8010464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010468:	f7ff bf34 	b.w	80102d4 <uxr_stream_id>

0801046c <uxr_add_input_best_effort_buffer>:
 801046c:	b510      	push	{r4, lr}
 801046e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8010472:	4603      	mov	r3, r0
 8010474:	1c62      	adds	r2, r4, #1
 8010476:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 801047a:	b082      	sub	sp, #8
 801047c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8010480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010484:	f005 fdae 	bl	8015fe4 <uxr_init_input_best_effort_stream>
 8010488:	2200      	movs	r2, #0
 801048a:	2101      	movs	r1, #1
 801048c:	4620      	mov	r0, r4
 801048e:	b002      	add	sp, #8
 8010490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010494:	f7ff bf1e 	b.w	80102d4 <uxr_stream_id>

08010498 <uxr_add_input_reliable_buffer>:
 8010498:	b510      	push	{r4, lr}
 801049a:	b084      	sub	sp, #16
 801049c:	4684      	mov	ip, r0
 801049e:	9806      	ldr	r0, [sp, #24]
 80104a0:	9000      	str	r0, [sp, #0]
 80104a2:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 80104a6:	2018      	movs	r0, #24
 80104a8:	fb00 c004 	mla	r0, r0, r4, ip
 80104ac:	f104 0e01 	add.w	lr, r4, #1
 80104b0:	3048      	adds	r0, #72	@ 0x48
 80104b2:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 80104b6:	f005 fde1 	bl	801607c <uxr_init_input_reliable_stream>
 80104ba:	2200      	movs	r2, #0
 80104bc:	2102      	movs	r1, #2
 80104be:	4620      	mov	r0, r4
 80104c0:	b004      	add	sp, #16
 80104c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104c6:	f7ff bf05 	b.w	80102d4 <uxr_stream_id>
 80104ca:	bf00      	nop

080104cc <uxr_get_output_best_effort_stream>:
 80104cc:	7c03      	ldrb	r3, [r0, #16]
 80104ce:	428b      	cmp	r3, r1
 80104d0:	bf8c      	ite	hi
 80104d2:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80104d6:	2000      	movls	r0, #0
 80104d8:	4770      	bx	lr
 80104da:	bf00      	nop

080104dc <uxr_get_output_reliable_stream>:
 80104dc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80104e0:	428b      	cmp	r3, r1
 80104e2:	bf83      	ittte	hi
 80104e4:	2328      	movhi	r3, #40	@ 0x28
 80104e6:	fb03 0001 	mlahi	r0, r3, r1, r0
 80104ea:	3018      	addhi	r0, #24
 80104ec:	2000      	movls	r0, #0
 80104ee:	4770      	bx	lr

080104f0 <uxr_get_input_best_effort_stream>:
 80104f0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80104f4:	428b      	cmp	r3, r1
 80104f6:	bf86      	itte	hi
 80104f8:	3121      	addhi	r1, #33	@ 0x21
 80104fa:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80104fe:	2000      	movls	r0, #0
 8010500:	4770      	bx	lr
 8010502:	bf00      	nop

08010504 <uxr_get_input_reliable_stream>:
 8010504:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8010508:	428b      	cmp	r3, r1
 801050a:	bf83      	ittte	hi
 801050c:	2318      	movhi	r3, #24
 801050e:	fb03 0001 	mlahi	r0, r3, r1, r0
 8010512:	3048      	addhi	r0, #72	@ 0x48
 8010514:	2000      	movls	r0, #0
 8010516:	4770      	bx	lr

08010518 <uxr_output_streams_confirmed>:
 8010518:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 801051c:	b183      	cbz	r3, 8010540 <uxr_output_streams_confirmed+0x28>
 801051e:	b570      	push	{r4, r5, r6, lr}
 8010520:	4606      	mov	r6, r0
 8010522:	f100 0518 	add.w	r5, r0, #24
 8010526:	2400      	movs	r4, #0
 8010528:	e001      	b.n	801052e <uxr_output_streams_confirmed+0x16>
 801052a:	3528      	adds	r5, #40	@ 0x28
 801052c:	b138      	cbz	r0, 801053e <uxr_output_streams_confirmed+0x26>
 801052e:	4628      	mov	r0, r5
 8010530:	f006 fa76 	bl	8016a20 <uxr_is_output_up_to_date>
 8010534:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8010538:	3401      	adds	r4, #1
 801053a:	42a3      	cmp	r3, r4
 801053c:	d8f5      	bhi.n	801052a <uxr_output_streams_confirmed+0x12>
 801053e:	bd70      	pop	{r4, r5, r6, pc}
 8010540:	2001      	movs	r0, #1
 8010542:	4770      	bx	lr

08010544 <uxr_buffer_submessage_header>:
 8010544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010546:	4604      	mov	r4, r0
 8010548:	460e      	mov	r6, r1
 801054a:	2104      	movs	r1, #4
 801054c:	4615      	mov	r5, r2
 801054e:	461f      	mov	r7, r3
 8010550:	f7fd fd22 	bl	800df98 <ucdr_align_to>
 8010554:	2301      	movs	r3, #1
 8010556:	ea47 0203 	orr.w	r2, r7, r3
 801055a:	4631      	mov	r1, r6
 801055c:	7523      	strb	r3, [r4, #20]
 801055e:	4620      	mov	r0, r4
 8010560:	462b      	mov	r3, r5
 8010562:	f000 fa27 	bl	80109b4 <uxr_serialize_submessage_header>
 8010566:	4620      	mov	r0, r4
 8010568:	f7fd fd2c 	bl	800dfc4 <ucdr_buffer_remaining>
 801056c:	42a8      	cmp	r0, r5
 801056e:	bf34      	ite	cc
 8010570:	2000      	movcc	r0, #0
 8010572:	2001      	movcs	r0, #1
 8010574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010576:	bf00      	nop

08010578 <uxr_read_submessage_header>:
 8010578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801057c:	4604      	mov	r4, r0
 801057e:	460d      	mov	r5, r1
 8010580:	2104      	movs	r1, #4
 8010582:	4616      	mov	r6, r2
 8010584:	4698      	mov	r8, r3
 8010586:	f7fd fd07 	bl	800df98 <ucdr_align_to>
 801058a:	4620      	mov	r0, r4
 801058c:	f7fd fd1a 	bl	800dfc4 <ucdr_buffer_remaining>
 8010590:	2803      	cmp	r0, #3
 8010592:	bf8c      	ite	hi
 8010594:	2701      	movhi	r7, #1
 8010596:	2700      	movls	r7, #0
 8010598:	d802      	bhi.n	80105a0 <uxr_read_submessage_header+0x28>
 801059a:	4638      	mov	r0, r7
 801059c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105a0:	4633      	mov	r3, r6
 80105a2:	4642      	mov	r2, r8
 80105a4:	4620      	mov	r0, r4
 80105a6:	4629      	mov	r1, r5
 80105a8:	f000 fa18 	bl	80109dc <uxr_deserialize_submessage_header>
 80105ac:	f898 3000 	ldrb.w	r3, [r8]
 80105b0:	f003 0201 	and.w	r2, r3, #1
 80105b4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80105b8:	f888 3000 	strb.w	r3, [r8]
 80105bc:	7522      	strb	r2, [r4, #20]
 80105be:	4638      	mov	r0, r7
 80105c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080105c4 <uxr_submessage_padding>:
 80105c4:	f010 0003 	ands.w	r0, r0, #3
 80105c8:	bf18      	it	ne
 80105ca:	f1c0 0004 	rsbne	r0, r0, #4
 80105ce:	4770      	bx	lr

080105d0 <uxr_millis>:
 80105d0:	b510      	push	{r4, lr}
 80105d2:	b084      	sub	sp, #16
 80105d4:	4669      	mov	r1, sp
 80105d6:	2001      	movs	r0, #1
 80105d8:	f7f2 f886 	bl	80026e8 <clock_gettime>
 80105dc:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80105e0:	4906      	ldr	r1, [pc, #24]	@ (80105fc <uxr_millis+0x2c>)
 80105e2:	fba0 0301 	umull	r0, r3, r0, r1
 80105e6:	1900      	adds	r0, r0, r4
 80105e8:	fb01 3102 	mla	r1, r1, r2, r3
 80105ec:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80105f0:	4a03      	ldr	r2, [pc, #12]	@ (8010600 <uxr_millis+0x30>)
 80105f2:	2300      	movs	r3, #0
 80105f4:	f7f0 fa6a 	bl	8000acc <__aeabi_ldivmod>
 80105f8:	b004      	add	sp, #16
 80105fa:	bd10      	pop	{r4, pc}
 80105fc:	3b9aca00 	.word	0x3b9aca00
 8010600:	000f4240 	.word	0x000f4240

08010604 <uxr_nanos>:
 8010604:	b510      	push	{r4, lr}
 8010606:	b084      	sub	sp, #16
 8010608:	4669      	mov	r1, sp
 801060a:	2001      	movs	r0, #1
 801060c:	f7f2 f86c 	bl	80026e8 <clock_gettime>
 8010610:	4a06      	ldr	r2, [pc, #24]	@ (801062c <uxr_nanos+0x28>)
 8010612:	9800      	ldr	r0, [sp, #0]
 8010614:	9902      	ldr	r1, [sp, #8]
 8010616:	9c01      	ldr	r4, [sp, #4]
 8010618:	fba0 0302 	umull	r0, r3, r0, r2
 801061c:	1840      	adds	r0, r0, r1
 801061e:	fb02 3304 	mla	r3, r2, r4, r3
 8010622:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8010626:	b004      	add	sp, #16
 8010628:	bd10      	pop	{r4, pc}
 801062a:	bf00      	nop
 801062c:	3b9aca00 	.word	0x3b9aca00

08010630 <on_full_output_buffer_fragmented>:
 8010630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010634:	460c      	mov	r4, r1
 8010636:	b08a      	sub	sp, #40	@ 0x28
 8010638:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 801063c:	4606      	mov	r6, r0
 801063e:	f104 0008 	add.w	r0, r4, #8
 8010642:	f7ff ff4b 	bl	80104dc <uxr_get_output_reliable_stream>
 8010646:	4605      	mov	r5, r0
 8010648:	f006 f9f4 	bl	8016a34 <get_available_free_slots>
 801064c:	b968      	cbnz	r0, 801066a <on_full_output_buffer_fragmented+0x3a>
 801064e:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8010652:	4620      	mov	r0, r4
 8010654:	4798      	blx	r3
 8010656:	b918      	cbnz	r0, 8010660 <on_full_output_buffer_fragmented+0x30>
 8010658:	2001      	movs	r0, #1
 801065a:	b00a      	add	sp, #40	@ 0x28
 801065c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010660:	4628      	mov	r0, r5
 8010662:	f006 f9e7 	bl	8016a34 <get_available_free_slots>
 8010666:	2800      	cmp	r0, #0
 8010668:	d0f6      	beq.n	8010658 <on_full_output_buffer_fragmented+0x28>
 801066a:	8929      	ldrh	r1, [r5, #8]
 801066c:	89eb      	ldrh	r3, [r5, #14]
 801066e:	7b28      	ldrb	r0, [r5, #12]
 8010670:	686a      	ldr	r2, [r5, #4]
 8010672:	fbb2 f8f1 	udiv	r8, r2, r1
 8010676:	fbb3 f2f1 	udiv	r2, r3, r1
 801067a:	fb01 3112 	mls	r1, r1, r2, r3
 801067e:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8010682:	b289      	uxth	r1, r1
 8010684:	fb08 f101 	mul.w	r1, r8, r1
 8010688:	30fc      	adds	r0, #252	@ 0xfc
 801068a:	f1a8 0804 	sub.w	r8, r8, #4
 801068e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8010692:	4440      	add	r0, r8
 8010694:	b287      	uxth	r7, r0
 8010696:	1bdb      	subs	r3, r3, r7
 8010698:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 801069c:	682b      	ldr	r3, [r5, #0]
 801069e:	3104      	adds	r1, #4
 80106a0:	4419      	add	r1, r3
 80106a2:	4642      	mov	r2, r8
 80106a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80106a8:	9300      	str	r3, [sp, #0]
 80106aa:	a802      	add	r0, sp, #8
 80106ac:	2300      	movs	r3, #0
 80106ae:	f7fd fc47 	bl	800df40 <ucdr_init_buffer_origin_offset>
 80106b2:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80106b6:	f102 0308 	add.w	r3, r2, #8
 80106ba:	4543      	cmp	r3, r8
 80106bc:	d928      	bls.n	8010710 <on_full_output_buffer_fragmented+0xe0>
 80106be:	463a      	mov	r2, r7
 80106c0:	2300      	movs	r3, #0
 80106c2:	210d      	movs	r1, #13
 80106c4:	a802      	add	r0, sp, #8
 80106c6:	f7ff ff3d 	bl	8010544 <uxr_buffer_submessage_header>
 80106ca:	8929      	ldrh	r1, [r5, #8]
 80106cc:	89eb      	ldrh	r3, [r5, #14]
 80106ce:	fbb3 f2f1 	udiv	r2, r3, r1
 80106d2:	fb01 3312 	mls	r3, r1, r2, r3
 80106d6:	b29b      	uxth	r3, r3
 80106d8:	686a      	ldr	r2, [r5, #4]
 80106da:	fbb2 f2f1 	udiv	r2, r2, r1
 80106de:	fb02 f303 	mul.w	r3, r2, r3
 80106e2:	682a      	ldr	r2, [r5, #0]
 80106e4:	f842 8003 	str.w	r8, [r2, r3]
 80106e8:	89e8      	ldrh	r0, [r5, #14]
 80106ea:	2101      	movs	r1, #1
 80106ec:	f006 f9c2 	bl	8016a74 <uxr_seq_num_add>
 80106f0:	9904      	ldr	r1, [sp, #16]
 80106f2:	9a03      	ldr	r2, [sp, #12]
 80106f4:	81e8      	strh	r0, [r5, #14]
 80106f6:	1a52      	subs	r2, r2, r1
 80106f8:	4630      	mov	r0, r6
 80106fa:	f7fd fc33 	bl	800df64 <ucdr_init_buffer>
 80106fe:	4630      	mov	r0, r6
 8010700:	490f      	ldr	r1, [pc, #60]	@ (8010740 <on_full_output_buffer_fragmented+0x110>)
 8010702:	4622      	mov	r2, r4
 8010704:	f7fd fc02 	bl	800df0c <ucdr_set_on_full_buffer_callback>
 8010708:	2000      	movs	r0, #0
 801070a:	b00a      	add	sp, #40	@ 0x28
 801070c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010710:	b292      	uxth	r2, r2
 8010712:	2302      	movs	r3, #2
 8010714:	210d      	movs	r1, #13
 8010716:	a802      	add	r0, sp, #8
 8010718:	f7ff ff14 	bl	8010544 <uxr_buffer_submessage_header>
 801071c:	8928      	ldrh	r0, [r5, #8]
 801071e:	89eb      	ldrh	r3, [r5, #14]
 8010720:	fbb3 f1f0 	udiv	r1, r3, r0
 8010724:	fb00 3311 	mls	r3, r0, r1, r3
 8010728:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801072c:	6869      	ldr	r1, [r5, #4]
 801072e:	fbb1 f1f0 	udiv	r1, r1, r0
 8010732:	b29b      	uxth	r3, r3
 8010734:	fb01 f303 	mul.w	r3, r1, r3
 8010738:	6829      	ldr	r1, [r5, #0]
 801073a:	3208      	adds	r2, #8
 801073c:	50ca      	str	r2, [r1, r3]
 801073e:	e7d3      	b.n	80106e8 <on_full_output_buffer_fragmented+0xb8>
 8010740:	08010631 	.word	0x08010631

08010744 <uxr_prepare_output_stream>:
 8010744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010746:	b087      	sub	sp, #28
 8010748:	2707      	movs	r7, #7
 801074a:	9202      	str	r2, [sp, #8]
 801074c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801074e:	9103      	str	r1, [sp, #12]
 8010750:	2500      	movs	r5, #0
 8010752:	3204      	adds	r2, #4
 8010754:	e9cd 7500 	strd	r7, r5, [sp]
 8010758:	461c      	mov	r4, r3
 801075a:	4606      	mov	r6, r0
 801075c:	f7fe ffc2 	bl	800f6e4 <uxr_prepare_stream_to_write_submessage>
 8010760:	f080 0201 	eor.w	r2, r0, #1
 8010764:	b2d2      	uxtb	r2, r2
 8010766:	75a2      	strb	r2, [r4, #22]
 8010768:	b112      	cbz	r2, 8010770 <uxr_prepare_output_stream+0x2c>
 801076a:	4628      	mov	r0, r5
 801076c:	b007      	add	sp, #28
 801076e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010770:	aa05      	add	r2, sp, #20
 8010772:	9902      	ldr	r1, [sp, #8]
 8010774:	4630      	mov	r0, r6
 8010776:	f7ff f8eb 	bl	800f950 <uxr_init_base_object_request>
 801077a:	a905      	add	r1, sp, #20
 801077c:	4605      	mov	r5, r0
 801077e:	4620      	mov	r0, r4
 8010780:	f001 f88c 	bl	801189c <uxr_serialize_WRITE_DATA_Payload_Data>
 8010784:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8010788:	69a6      	ldr	r6, [r4, #24]
 801078a:	69e7      	ldr	r7, [r4, #28]
 801078c:	1a52      	subs	r2, r2, r1
 801078e:	4620      	mov	r0, r4
 8010790:	f7fd fbe8 	bl	800df64 <ucdr_init_buffer>
 8010794:	4620      	mov	r0, r4
 8010796:	463a      	mov	r2, r7
 8010798:	4631      	mov	r1, r6
 801079a:	f7fd fbb7 	bl	800df0c <ucdr_set_on_full_buffer_callback>
 801079e:	4628      	mov	r0, r5
 80107a0:	b007      	add	sp, #28
 80107a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080107a4 <uxr_prepare_output_stream_fragmented>:
 80107a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107a8:	b091      	sub	sp, #68	@ 0x44
 80107aa:	4605      	mov	r5, r0
 80107ac:	9105      	str	r1, [sp, #20]
 80107ae:	3008      	adds	r0, #8
 80107b0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80107b4:	461e      	mov	r6, r3
 80107b6:	9204      	str	r2, [sp, #16]
 80107b8:	f7ff fe90 	bl	80104dc <uxr_get_output_reliable_stream>
 80107bc:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80107c0:	2b01      	cmp	r3, #1
 80107c2:	f000 8091 	beq.w	80108e8 <uxr_prepare_output_stream_fragmented+0x144>
 80107c6:	4604      	mov	r4, r0
 80107c8:	2800      	cmp	r0, #0
 80107ca:	f000 808d 	beq.w	80108e8 <uxr_prepare_output_stream_fragmented+0x144>
 80107ce:	f006 f931 	bl	8016a34 <get_available_free_slots>
 80107d2:	2800      	cmp	r0, #0
 80107d4:	f000 8083 	beq.w	80108de <uxr_prepare_output_stream_fragmented+0x13a>
 80107d8:	8922      	ldrh	r2, [r4, #8]
 80107da:	89e7      	ldrh	r7, [r4, #14]
 80107dc:	fbb7 f9f2 	udiv	r9, r7, r2
 80107e0:	fb02 7919 	mls	r9, r2, r9, r7
 80107e4:	fa1f f989 	uxth.w	r9, r9
 80107e8:	6863      	ldr	r3, [r4, #4]
 80107ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80107ee:	6823      	ldr	r3, [r4, #0]
 80107f0:	9203      	str	r2, [sp, #12]
 80107f2:	fb02 f909 	mul.w	r9, r2, r9
 80107f6:	f109 0904 	add.w	r9, r9, #4
 80107fa:	4499      	add	r9, r3
 80107fc:	7b23      	ldrb	r3, [r4, #12]
 80107fe:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8010802:	4543      	cmp	r3, r8
 8010804:	f1a2 0b04 	sub.w	fp, r2, #4
 8010808:	d37a      	bcc.n	8010900 <uxr_prepare_output_stream_fragmented+0x15c>
 801080a:	f1ab 0a04 	sub.w	sl, fp, #4
 801080e:	ebaa 0a03 	sub.w	sl, sl, r3
 8010812:	465a      	mov	r2, fp
 8010814:	2300      	movs	r3, #0
 8010816:	4649      	mov	r1, r9
 8010818:	a808      	add	r0, sp, #32
 801081a:	f8cd 8000 	str.w	r8, [sp]
 801081e:	f7fd fb8f 	bl	800df40 <ucdr_init_buffer_origin_offset>
 8010822:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010824:	fa1f fa8a 	uxth.w	sl, sl
 8010828:	4652      	mov	r2, sl
 801082a:	f103 0a08 	add.w	sl, r3, #8
 801082e:	45da      	cmp	sl, fp
 8010830:	bf34      	ite	cc
 8010832:	2302      	movcc	r3, #2
 8010834:	2300      	movcs	r3, #0
 8010836:	210d      	movs	r1, #13
 8010838:	a808      	add	r0, sp, #32
 801083a:	f7ff fe83 	bl	8010544 <uxr_buffer_submessage_header>
 801083e:	8921      	ldrh	r1, [r4, #8]
 8010840:	fbb7 f2f1 	udiv	r2, r7, r1
 8010844:	fb01 7212 	mls	r2, r1, r2, r7
 8010848:	b292      	uxth	r2, r2
 801084a:	6863      	ldr	r3, [r4, #4]
 801084c:	fbb3 f3f1 	udiv	r3, r3, r1
 8010850:	fb02 f303 	mul.w	r3, r2, r3
 8010854:	6822      	ldr	r2, [r4, #0]
 8010856:	4638      	mov	r0, r7
 8010858:	f842 b003 	str.w	fp, [r2, r3]
 801085c:	2101      	movs	r1, #1
 801085e:	f006 f909 	bl	8016a74 <uxr_seq_num_add>
 8010862:	9b03      	ldr	r3, [sp, #12]
 8010864:	f108 0104 	add.w	r1, r8, #4
 8010868:	f1a3 0208 	sub.w	r2, r3, #8
 801086c:	eba2 0208 	sub.w	r2, r2, r8
 8010870:	4449      	add	r1, r9
 8010872:	4607      	mov	r7, r0
 8010874:	4630      	mov	r0, r6
 8010876:	f7fd fb75 	bl	800df64 <ucdr_init_buffer>
 801087a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801087c:	81e7      	strh	r7, [r4, #14]
 801087e:	1d1a      	adds	r2, r3, #4
 8010880:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8010884:	bf28      	it	cs
 8010886:	2200      	movcs	r2, #0
 8010888:	2300      	movs	r3, #0
 801088a:	b292      	uxth	r2, r2
 801088c:	2107      	movs	r1, #7
 801088e:	4630      	mov	r0, r6
 8010890:	f7ff fe58 	bl	8010544 <uxr_buffer_submessage_header>
 8010894:	9904      	ldr	r1, [sp, #16]
 8010896:	aa07      	add	r2, sp, #28
 8010898:	4628      	mov	r0, r5
 801089a:	f7ff f859 	bl	800f950 <uxr_init_base_object_request>
 801089e:	4604      	mov	r4, r0
 80108a0:	b318      	cbz	r0, 80108ea <uxr_prepare_output_stream_fragmented+0x146>
 80108a2:	a907      	add	r1, sp, #28
 80108a4:	4630      	mov	r0, r6
 80108a6:	f000 fff9 	bl	801189c <uxr_serialize_WRITE_DATA_Payload_Data>
 80108aa:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80108ae:	4630      	mov	r0, r6
 80108b0:	1a52      	subs	r2, r2, r1
 80108b2:	f7fd fb57 	bl	800df64 <ucdr_init_buffer>
 80108b6:	9b05      	ldr	r3, [sp, #20]
 80108b8:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 80108bc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80108be:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 80108c2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80108c4:	491b      	ldr	r1, [pc, #108]	@ (8010934 <uxr_prepare_output_stream_fragmented+0x190>)
 80108c6:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 80108ca:	4630      	mov	r0, r6
 80108cc:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 80108d0:	462a      	mov	r2, r5
 80108d2:	f7fd fb1b 	bl	800df0c <ucdr_set_on_full_buffer_callback>
 80108d6:	4620      	mov	r0, r4
 80108d8:	b011      	add	sp, #68	@ 0x44
 80108da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108de:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80108e0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80108e2:	4628      	mov	r0, r5
 80108e4:	4798      	blx	r3
 80108e6:	b920      	cbnz	r0, 80108f2 <uxr_prepare_output_stream_fragmented+0x14e>
 80108e8:	2400      	movs	r4, #0
 80108ea:	4620      	mov	r0, r4
 80108ec:	b011      	add	sp, #68	@ 0x44
 80108ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108f2:	4620      	mov	r0, r4
 80108f4:	f006 f89e 	bl	8016a34 <get_available_free_slots>
 80108f8:	2800      	cmp	r0, #0
 80108fa:	f47f af6d 	bne.w	80107d8 <uxr_prepare_output_stream_fragmented+0x34>
 80108fe:	e7f3      	b.n	80108e8 <uxr_prepare_output_stream_fragmented+0x144>
 8010900:	4638      	mov	r0, r7
 8010902:	2101      	movs	r1, #1
 8010904:	f006 f8b6 	bl	8016a74 <uxr_seq_num_add>
 8010908:	8921      	ldrh	r1, [r4, #8]
 801090a:	fbb0 f2f1 	udiv	r2, r0, r1
 801090e:	fb01 0912 	mls	r9, r1, r2, r0
 8010912:	fa1f f289 	uxth.w	r2, r9
 8010916:	6863      	ldr	r3, [r4, #4]
 8010918:	fbb3 f9f1 	udiv	r9, r3, r1
 801091c:	6823      	ldr	r3, [r4, #0]
 801091e:	fb02 f909 	mul.w	r9, r2, r9
 8010922:	f109 0904 	add.w	r9, r9, #4
 8010926:	4499      	add	r9, r3
 8010928:	4607      	mov	r7, r0
 801092a:	7b23      	ldrb	r3, [r4, #12]
 801092c:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8010930:	e76b      	b.n	801080a <uxr_prepare_output_stream_fragmented+0x66>
 8010932:	bf00      	nop
 8010934:	08010631 	.word	0x08010631

08010938 <uxr_serialize_message_header>:
 8010938:	b5f0      	push	{r4, r5, r6, r7, lr}
 801093a:	b083      	sub	sp, #12
 801093c:	4616      	mov	r6, r2
 801093e:	4604      	mov	r4, r0
 8010940:	9301      	str	r3, [sp, #4]
 8010942:	460d      	mov	r5, r1
 8010944:	9f08      	ldr	r7, [sp, #32]
 8010946:	f7fc fb61 	bl	800d00c <ucdr_serialize_uint8_t>
 801094a:	4631      	mov	r1, r6
 801094c:	4620      	mov	r0, r4
 801094e:	f7fc fb5d 	bl	800d00c <ucdr_serialize_uint8_t>
 8010952:	9a01      	ldr	r2, [sp, #4]
 8010954:	2101      	movs	r1, #1
 8010956:	4620      	mov	r0, r4
 8010958:	f7fc fc04 	bl	800d164 <ucdr_serialize_endian_uint16_t>
 801095c:	062b      	lsls	r3, r5, #24
 801095e:	d501      	bpl.n	8010964 <uxr_serialize_message_header+0x2c>
 8010960:	b003      	add	sp, #12
 8010962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010964:	2204      	movs	r2, #4
 8010966:	4639      	mov	r1, r7
 8010968:	4620      	mov	r0, r4
 801096a:	b003      	add	sp, #12
 801096c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010970:	f005 ba00 	b.w	8015d74 <ucdr_serialize_array_uint8_t>

08010974 <uxr_deserialize_message_header>:
 8010974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010976:	b083      	sub	sp, #12
 8010978:	4616      	mov	r6, r2
 801097a:	4604      	mov	r4, r0
 801097c:	9301      	str	r3, [sp, #4]
 801097e:	460d      	mov	r5, r1
 8010980:	9f08      	ldr	r7, [sp, #32]
 8010982:	f7fc fb59 	bl	800d038 <ucdr_deserialize_uint8_t>
 8010986:	4631      	mov	r1, r6
 8010988:	4620      	mov	r0, r4
 801098a:	f7fc fb55 	bl	800d038 <ucdr_deserialize_uint8_t>
 801098e:	9a01      	ldr	r2, [sp, #4]
 8010990:	2101      	movs	r1, #1
 8010992:	4620      	mov	r0, r4
 8010994:	f7fc fcda 	bl	800d34c <ucdr_deserialize_endian_uint16_t>
 8010998:	f995 3000 	ldrsb.w	r3, [r5]
 801099c:	2b00      	cmp	r3, #0
 801099e:	da01      	bge.n	80109a4 <uxr_deserialize_message_header+0x30>
 80109a0:	b003      	add	sp, #12
 80109a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109a4:	2204      	movs	r2, #4
 80109a6:	4639      	mov	r1, r7
 80109a8:	4620      	mov	r0, r4
 80109aa:	b003      	add	sp, #12
 80109ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80109b0:	f005 ba44 	b.w	8015e3c <ucdr_deserialize_array_uint8_t>

080109b4 <uxr_serialize_submessage_header>:
 80109b4:	b530      	push	{r4, r5, lr}
 80109b6:	b083      	sub	sp, #12
 80109b8:	4615      	mov	r5, r2
 80109ba:	4604      	mov	r4, r0
 80109bc:	9301      	str	r3, [sp, #4]
 80109be:	f7fc fb25 	bl	800d00c <ucdr_serialize_uint8_t>
 80109c2:	4629      	mov	r1, r5
 80109c4:	4620      	mov	r0, r4
 80109c6:	f7fc fb21 	bl	800d00c <ucdr_serialize_uint8_t>
 80109ca:	9a01      	ldr	r2, [sp, #4]
 80109cc:	2101      	movs	r1, #1
 80109ce:	4620      	mov	r0, r4
 80109d0:	b003      	add	sp, #12
 80109d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80109d6:	f7fc bbc5 	b.w	800d164 <ucdr_serialize_endian_uint16_t>
 80109da:	bf00      	nop

080109dc <uxr_deserialize_submessage_header>:
 80109dc:	b530      	push	{r4, r5, lr}
 80109de:	b083      	sub	sp, #12
 80109e0:	4615      	mov	r5, r2
 80109e2:	4604      	mov	r4, r0
 80109e4:	9301      	str	r3, [sp, #4]
 80109e6:	f7fc fb27 	bl	800d038 <ucdr_deserialize_uint8_t>
 80109ea:	4629      	mov	r1, r5
 80109ec:	4620      	mov	r0, r4
 80109ee:	f7fc fb23 	bl	800d038 <ucdr_deserialize_uint8_t>
 80109f2:	9a01      	ldr	r2, [sp, #4]
 80109f4:	2101      	movs	r1, #1
 80109f6:	4620      	mov	r0, r4
 80109f8:	b003      	add	sp, #12
 80109fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80109fe:	f7fc bca5 	b.w	800d34c <ucdr_deserialize_endian_uint16_t>
 8010a02:	bf00      	nop

08010a04 <uxr_serialize_CLIENT_Representation>:
 8010a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a08:	2204      	movs	r2, #4
 8010a0a:	460e      	mov	r6, r1
 8010a0c:	4605      	mov	r5, r0
 8010a0e:	f005 f9b1 	bl	8015d74 <ucdr_serialize_array_uint8_t>
 8010a12:	2202      	movs	r2, #2
 8010a14:	4607      	mov	r7, r0
 8010a16:	1d31      	adds	r1, r6, #4
 8010a18:	4628      	mov	r0, r5
 8010a1a:	f005 f9ab 	bl	8015d74 <ucdr_serialize_array_uint8_t>
 8010a1e:	4038      	ands	r0, r7
 8010a20:	2202      	movs	r2, #2
 8010a22:	1db1      	adds	r1, r6, #6
 8010a24:	b2c7      	uxtb	r7, r0
 8010a26:	4628      	mov	r0, r5
 8010a28:	f005 f9a4 	bl	8015d74 <ucdr_serialize_array_uint8_t>
 8010a2c:	2204      	movs	r2, #4
 8010a2e:	4007      	ands	r7, r0
 8010a30:	f106 0108 	add.w	r1, r6, #8
 8010a34:	4628      	mov	r0, r5
 8010a36:	f005 f99d 	bl	8015d74 <ucdr_serialize_array_uint8_t>
 8010a3a:	7b31      	ldrb	r1, [r6, #12]
 8010a3c:	4007      	ands	r7, r0
 8010a3e:	4628      	mov	r0, r5
 8010a40:	f7fc fae4 	bl	800d00c <ucdr_serialize_uint8_t>
 8010a44:	7b71      	ldrb	r1, [r6, #13]
 8010a46:	4007      	ands	r7, r0
 8010a48:	4628      	mov	r0, r5
 8010a4a:	f7fc fab1 	bl	800cfb0 <ucdr_serialize_bool>
 8010a4e:	7b73      	ldrb	r3, [r6, #13]
 8010a50:	ea07 0800 	and.w	r8, r7, r0
 8010a54:	b93b      	cbnz	r3, 8010a66 <uxr_serialize_CLIENT_Representation+0x62>
 8010a56:	8bb1      	ldrh	r1, [r6, #28]
 8010a58:	4628      	mov	r0, r5
 8010a5a:	f7fc fb03 	bl	800d064 <ucdr_serialize_uint16_t>
 8010a5e:	ea08 0000 	and.w	r0, r8, r0
 8010a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a66:	6931      	ldr	r1, [r6, #16]
 8010a68:	4628      	mov	r0, r5
 8010a6a:	f7fc fce5 	bl	800d438 <ucdr_serialize_uint32_t>
 8010a6e:	6933      	ldr	r3, [r6, #16]
 8010a70:	b1e3      	cbz	r3, 8010aac <uxr_serialize_CLIENT_Representation+0xa8>
 8010a72:	b1c0      	cbz	r0, 8010aa6 <uxr_serialize_CLIENT_Representation+0xa2>
 8010a74:	4637      	mov	r7, r6
 8010a76:	f04f 0900 	mov.w	r9, #0
 8010a7a:	e001      	b.n	8010a80 <uxr_serialize_CLIENT_Representation+0x7c>
 8010a7c:	3708      	adds	r7, #8
 8010a7e:	b194      	cbz	r4, 8010aa6 <uxr_serialize_CLIENT_Representation+0xa2>
 8010a80:	6979      	ldr	r1, [r7, #20]
 8010a82:	4628      	mov	r0, r5
 8010a84:	f005 fa96 	bl	8015fb4 <ucdr_serialize_string>
 8010a88:	69b9      	ldr	r1, [r7, #24]
 8010a8a:	4604      	mov	r4, r0
 8010a8c:	4628      	mov	r0, r5
 8010a8e:	f005 fa91 	bl	8015fb4 <ucdr_serialize_string>
 8010a92:	6933      	ldr	r3, [r6, #16]
 8010a94:	f109 0901 	add.w	r9, r9, #1
 8010a98:	4004      	ands	r4, r0
 8010a9a:	4599      	cmp	r9, r3
 8010a9c:	b2e4      	uxtb	r4, r4
 8010a9e:	d3ed      	bcc.n	8010a7c <uxr_serialize_CLIENT_Representation+0x78>
 8010aa0:	ea08 0804 	and.w	r8, r8, r4
 8010aa4:	e7d7      	b.n	8010a56 <uxr_serialize_CLIENT_Representation+0x52>
 8010aa6:	f04f 0800 	mov.w	r8, #0
 8010aaa:	e7d4      	b.n	8010a56 <uxr_serialize_CLIENT_Representation+0x52>
 8010aac:	ea08 0800 	and.w	r8, r8, r0
 8010ab0:	e7d1      	b.n	8010a56 <uxr_serialize_CLIENT_Representation+0x52>
 8010ab2:	bf00      	nop

08010ab4 <uxr_deserialize_CLIENT_Representation>:
 8010ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ab8:	2204      	movs	r2, #4
 8010aba:	460c      	mov	r4, r1
 8010abc:	4605      	mov	r5, r0
 8010abe:	f005 f9bd 	bl	8015e3c <ucdr_deserialize_array_uint8_t>
 8010ac2:	2202      	movs	r2, #2
 8010ac4:	4607      	mov	r7, r0
 8010ac6:	1d21      	adds	r1, r4, #4
 8010ac8:	4628      	mov	r0, r5
 8010aca:	f005 f9b7 	bl	8015e3c <ucdr_deserialize_array_uint8_t>
 8010ace:	4038      	ands	r0, r7
 8010ad0:	2202      	movs	r2, #2
 8010ad2:	1da1      	adds	r1, r4, #6
 8010ad4:	b2c6      	uxtb	r6, r0
 8010ad6:	4628      	mov	r0, r5
 8010ad8:	f005 f9b0 	bl	8015e3c <ucdr_deserialize_array_uint8_t>
 8010adc:	2204      	movs	r2, #4
 8010ade:	4006      	ands	r6, r0
 8010ae0:	f104 0108 	add.w	r1, r4, #8
 8010ae4:	4628      	mov	r0, r5
 8010ae6:	f005 f9a9 	bl	8015e3c <ucdr_deserialize_array_uint8_t>
 8010aea:	f104 010c 	add.w	r1, r4, #12
 8010aee:	4006      	ands	r6, r0
 8010af0:	4628      	mov	r0, r5
 8010af2:	f7fc faa1 	bl	800d038 <ucdr_deserialize_uint8_t>
 8010af6:	f104 010d 	add.w	r1, r4, #13
 8010afa:	ea06 0700 	and.w	r7, r6, r0
 8010afe:	4628      	mov	r0, r5
 8010b00:	f7fc fa6c 	bl	800cfdc <ucdr_deserialize_bool>
 8010b04:	7b63      	ldrb	r3, [r4, #13]
 8010b06:	4007      	ands	r7, r0
 8010b08:	b93b      	cbnz	r3, 8010b1a <uxr_deserialize_CLIENT_Representation+0x66>
 8010b0a:	f104 011c 	add.w	r1, r4, #28
 8010b0e:	4628      	mov	r0, r5
 8010b10:	f7fc fba8 	bl	800d264 <ucdr_deserialize_uint16_t>
 8010b14:	4038      	ands	r0, r7
 8010b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b1a:	f104 0110 	add.w	r1, r4, #16
 8010b1e:	4628      	mov	r0, r5
 8010b20:	f7fc fdba 	bl	800d698 <ucdr_deserialize_uint32_t>
 8010b24:	6923      	ldr	r3, [r4, #16]
 8010b26:	2b01      	cmp	r3, #1
 8010b28:	d903      	bls.n	8010b32 <uxr_deserialize_CLIENT_Representation+0x7e>
 8010b2a:	2301      	movs	r3, #1
 8010b2c:	75ab      	strb	r3, [r5, #22]
 8010b2e:	2700      	movs	r7, #0
 8010b30:	e7eb      	b.n	8010b0a <uxr_deserialize_CLIENT_Representation+0x56>
 8010b32:	b30b      	cbz	r3, 8010b78 <uxr_deserialize_CLIENT_Representation+0xc4>
 8010b34:	2800      	cmp	r0, #0
 8010b36:	d0fa      	beq.n	8010b2e <uxr_deserialize_CLIENT_Representation+0x7a>
 8010b38:	46a0      	mov	r8, r4
 8010b3a:	f04f 0900 	mov.w	r9, #0
 8010b3e:	e001      	b.n	8010b44 <uxr_deserialize_CLIENT_Representation+0x90>
 8010b40:	2e00      	cmp	r6, #0
 8010b42:	d0f4      	beq.n	8010b2e <uxr_deserialize_CLIENT_Representation+0x7a>
 8010b44:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8010b48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010b4c:	4628      	mov	r0, r5
 8010b4e:	f005 fa41 	bl	8015fd4 <ucdr_deserialize_string>
 8010b52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010b56:	4606      	mov	r6, r0
 8010b58:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8010b5c:	4628      	mov	r0, r5
 8010b5e:	f005 fa39 	bl	8015fd4 <ucdr_deserialize_string>
 8010b62:	6923      	ldr	r3, [r4, #16]
 8010b64:	f109 0901 	add.w	r9, r9, #1
 8010b68:	4006      	ands	r6, r0
 8010b6a:	4599      	cmp	r9, r3
 8010b6c:	f108 0808 	add.w	r8, r8, #8
 8010b70:	b2f6      	uxtb	r6, r6
 8010b72:	d3e5      	bcc.n	8010b40 <uxr_deserialize_CLIENT_Representation+0x8c>
 8010b74:	4037      	ands	r7, r6
 8010b76:	e7c8      	b.n	8010b0a <uxr_deserialize_CLIENT_Representation+0x56>
 8010b78:	4007      	ands	r7, r0
 8010b7a:	e7c6      	b.n	8010b0a <uxr_deserialize_CLIENT_Representation+0x56>

08010b7c <uxr_serialize_AGENT_Representation>:
 8010b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b80:	2204      	movs	r2, #4
 8010b82:	460f      	mov	r7, r1
 8010b84:	4605      	mov	r5, r0
 8010b86:	f005 f8f5 	bl	8015d74 <ucdr_serialize_array_uint8_t>
 8010b8a:	2202      	movs	r2, #2
 8010b8c:	4604      	mov	r4, r0
 8010b8e:	1d39      	adds	r1, r7, #4
 8010b90:	4628      	mov	r0, r5
 8010b92:	f005 f8ef 	bl	8015d74 <ucdr_serialize_array_uint8_t>
 8010b96:	4020      	ands	r0, r4
 8010b98:	2202      	movs	r2, #2
 8010b9a:	1db9      	adds	r1, r7, #6
 8010b9c:	b2c4      	uxtb	r4, r0
 8010b9e:	4628      	mov	r0, r5
 8010ba0:	f005 f8e8 	bl	8015d74 <ucdr_serialize_array_uint8_t>
 8010ba4:	7a39      	ldrb	r1, [r7, #8]
 8010ba6:	4004      	ands	r4, r0
 8010ba8:	4628      	mov	r0, r5
 8010baa:	f7fc fa01 	bl	800cfb0 <ucdr_serialize_bool>
 8010bae:	7a3b      	ldrb	r3, [r7, #8]
 8010bb0:	ea00 0804 	and.w	r8, r0, r4
 8010bb4:	b913      	cbnz	r3, 8010bbc <uxr_serialize_AGENT_Representation+0x40>
 8010bb6:	4640      	mov	r0, r8
 8010bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bbc:	68f9      	ldr	r1, [r7, #12]
 8010bbe:	4628      	mov	r0, r5
 8010bc0:	f7fc fc3a 	bl	800d438 <ucdr_serialize_uint32_t>
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	b303      	cbz	r3, 8010c0a <uxr_serialize_AGENT_Representation+0x8e>
 8010bc8:	b1d0      	cbz	r0, 8010c00 <uxr_serialize_AGENT_Representation+0x84>
 8010bca:	463e      	mov	r6, r7
 8010bcc:	f04f 0900 	mov.w	r9, #0
 8010bd0:	e001      	b.n	8010bd6 <uxr_serialize_AGENT_Representation+0x5a>
 8010bd2:	3608      	adds	r6, #8
 8010bd4:	b1a4      	cbz	r4, 8010c00 <uxr_serialize_AGENT_Representation+0x84>
 8010bd6:	6931      	ldr	r1, [r6, #16]
 8010bd8:	4628      	mov	r0, r5
 8010bda:	f005 f9eb 	bl	8015fb4 <ucdr_serialize_string>
 8010bde:	6971      	ldr	r1, [r6, #20]
 8010be0:	4604      	mov	r4, r0
 8010be2:	4628      	mov	r0, r5
 8010be4:	f005 f9e6 	bl	8015fb4 <ucdr_serialize_string>
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	f109 0901 	add.w	r9, r9, #1
 8010bee:	4004      	ands	r4, r0
 8010bf0:	4599      	cmp	r9, r3
 8010bf2:	b2e4      	uxtb	r4, r4
 8010bf4:	d3ed      	bcc.n	8010bd2 <uxr_serialize_AGENT_Representation+0x56>
 8010bf6:	ea08 0804 	and.w	r8, r8, r4
 8010bfa:	4640      	mov	r0, r8
 8010bfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c00:	f04f 0800 	mov.w	r8, #0
 8010c04:	4640      	mov	r0, r8
 8010c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c0a:	ea08 0800 	and.w	r8, r8, r0
 8010c0e:	e7d2      	b.n	8010bb6 <uxr_serialize_AGENT_Representation+0x3a>

08010c10 <uxr_serialize_DATAWRITER_Representation>:
 8010c10:	b570      	push	{r4, r5, r6, lr}
 8010c12:	460d      	mov	r5, r1
 8010c14:	7809      	ldrb	r1, [r1, #0]
 8010c16:	4606      	mov	r6, r0
 8010c18:	f7fc f9f8 	bl	800d00c <ucdr_serialize_uint8_t>
 8010c1c:	4604      	mov	r4, r0
 8010c1e:	b130      	cbz	r0, 8010c2e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010c20:	782b      	ldrb	r3, [r5, #0]
 8010c22:	2b02      	cmp	r3, #2
 8010c24:	d00c      	beq.n	8010c40 <uxr_serialize_DATAWRITER_Representation+0x30>
 8010c26:	2b03      	cmp	r3, #3
 8010c28:	d010      	beq.n	8010c4c <uxr_serialize_DATAWRITER_Representation+0x3c>
 8010c2a:	2b01      	cmp	r3, #1
 8010c2c:	d008      	beq.n	8010c40 <uxr_serialize_DATAWRITER_Representation+0x30>
 8010c2e:	2202      	movs	r2, #2
 8010c30:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8010c34:	4630      	mov	r0, r6
 8010c36:	f005 f89d 	bl	8015d74 <ucdr_serialize_array_uint8_t>
 8010c3a:	4020      	ands	r0, r4
 8010c3c:	b2c0      	uxtb	r0, r0
 8010c3e:	bd70      	pop	{r4, r5, r6, pc}
 8010c40:	6869      	ldr	r1, [r5, #4]
 8010c42:	4630      	mov	r0, r6
 8010c44:	f005 f9b6 	bl	8015fb4 <ucdr_serialize_string>
 8010c48:	4604      	mov	r4, r0
 8010c4a:	e7f0      	b.n	8010c2e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010c4c:	4629      	mov	r1, r5
 8010c4e:	4630      	mov	r0, r6
 8010c50:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8010c54:	3104      	adds	r1, #4
 8010c56:	f005 f981 	bl	8015f5c <ucdr_serialize_sequence_uint8_t>
 8010c5a:	4604      	mov	r4, r0
 8010c5c:	e7e7      	b.n	8010c2e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010c5e:	bf00      	nop

08010c60 <uxr_serialize_ObjectVariant.part.0>:
 8010c60:	b570      	push	{r4, r5, r6, lr}
 8010c62:	780b      	ldrb	r3, [r1, #0]
 8010c64:	3b01      	subs	r3, #1
 8010c66:	460c      	mov	r4, r1
 8010c68:	4605      	mov	r5, r0
 8010c6a:	2b0d      	cmp	r3, #13
 8010c6c:	d854      	bhi.n	8010d18 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8010c6e:	e8df f003 	tbb	[pc, r3]
 8010c72:	0730      	.short	0x0730
 8010c74:	07071b1b 	.word	0x07071b1b
 8010c78:	0c530707 	.word	0x0c530707
 8010c7c:	494e0c0c 	.word	0x494e0c0c
 8010c80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010c84:	3104      	adds	r1, #4
 8010c86:	f7ff bfc3 	b.w	8010c10 <uxr_serialize_DATAWRITER_Representation>
 8010c8a:	7909      	ldrb	r1, [r1, #4]
 8010c8c:	f7fc f9be 	bl	800d00c <ucdr_serialize_uint8_t>
 8010c90:	b1e8      	cbz	r0, 8010cce <uxr_serialize_ObjectVariant.part.0+0x6e>
 8010c92:	7923      	ldrb	r3, [r4, #4]
 8010c94:	2b01      	cmp	r3, #1
 8010c96:	d001      	beq.n	8010c9c <uxr_serialize_ObjectVariant.part.0+0x3c>
 8010c98:	2b02      	cmp	r3, #2
 8010c9a:	d13d      	bne.n	8010d18 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8010c9c:	68a1      	ldr	r1, [r4, #8]
 8010c9e:	4628      	mov	r0, r5
 8010ca0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010ca4:	f005 b986 	b.w	8015fb4 <ucdr_serialize_string>
 8010ca8:	7909      	ldrb	r1, [r1, #4]
 8010caa:	f7fc f9af 	bl	800d00c <ucdr_serialize_uint8_t>
 8010cae:	4606      	mov	r6, r0
 8010cb0:	b120      	cbz	r0, 8010cbc <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010cb2:	7923      	ldrb	r3, [r4, #4]
 8010cb4:	2b02      	cmp	r3, #2
 8010cb6:	d039      	beq.n	8010d2c <uxr_serialize_ObjectVariant.part.0+0xcc>
 8010cb8:	2b03      	cmp	r3, #3
 8010cba:	d02f      	beq.n	8010d1c <uxr_serialize_ObjectVariant.part.0+0xbc>
 8010cbc:	2202      	movs	r2, #2
 8010cbe:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8010cc2:	4628      	mov	r0, r5
 8010cc4:	f005 f856 	bl	8015d74 <ucdr_serialize_array_uint8_t>
 8010cc8:	4030      	ands	r0, r6
 8010cca:	b2c0      	uxtb	r0, r0
 8010ccc:	bd70      	pop	{r4, r5, r6, pc}
 8010cce:	2000      	movs	r0, #0
 8010cd0:	bd70      	pop	{r4, r5, r6, pc}
 8010cd2:	7909      	ldrb	r1, [r1, #4]
 8010cd4:	f7fc f99a 	bl	800d00c <ucdr_serialize_uint8_t>
 8010cd8:	4606      	mov	r6, r0
 8010cda:	b158      	cbz	r0, 8010cf4 <uxr_serialize_ObjectVariant.part.0+0x94>
 8010cdc:	7923      	ldrb	r3, [r4, #4]
 8010cde:	2b02      	cmp	r3, #2
 8010ce0:	d003      	beq.n	8010cea <uxr_serialize_ObjectVariant.part.0+0x8a>
 8010ce2:	2b03      	cmp	r3, #3
 8010ce4:	d028      	beq.n	8010d38 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8010ce6:	2b01      	cmp	r3, #1
 8010ce8:	d104      	bne.n	8010cf4 <uxr_serialize_ObjectVariant.part.0+0x94>
 8010cea:	68a1      	ldr	r1, [r4, #8]
 8010cec:	4628      	mov	r0, r5
 8010cee:	f005 f961 	bl	8015fb4 <ucdr_serialize_string>
 8010cf2:	4606      	mov	r6, r0
 8010cf4:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8010cf8:	4628      	mov	r0, r5
 8010cfa:	f7fc fec3 	bl	800da84 <ucdr_serialize_int16_t>
 8010cfe:	4030      	ands	r0, r6
 8010d00:	b2c0      	uxtb	r0, r0
 8010d02:	bd70      	pop	{r4, r5, r6, pc}
 8010d04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010d08:	3104      	adds	r1, #4
 8010d0a:	f7ff be7b 	b.w	8010a04 <uxr_serialize_CLIENT_Representation>
 8010d0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010d12:	3104      	adds	r1, #4
 8010d14:	f7ff bf32 	b.w	8010b7c <uxr_serialize_AGENT_Representation>
 8010d18:	2001      	movs	r0, #1
 8010d1a:	bd70      	pop	{r4, r5, r6, pc}
 8010d1c:	68a2      	ldr	r2, [r4, #8]
 8010d1e:	f104 010c 	add.w	r1, r4, #12
 8010d22:	4628      	mov	r0, r5
 8010d24:	f005 f91a 	bl	8015f5c <ucdr_serialize_sequence_uint8_t>
 8010d28:	4606      	mov	r6, r0
 8010d2a:	e7c7      	b.n	8010cbc <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010d2c:	68a1      	ldr	r1, [r4, #8]
 8010d2e:	4628      	mov	r0, r5
 8010d30:	f005 f940 	bl	8015fb4 <ucdr_serialize_string>
 8010d34:	4606      	mov	r6, r0
 8010d36:	e7c1      	b.n	8010cbc <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010d38:	68a2      	ldr	r2, [r4, #8]
 8010d3a:	f104 010c 	add.w	r1, r4, #12
 8010d3e:	4628      	mov	r0, r5
 8010d40:	f005 f90c 	bl	8015f5c <ucdr_serialize_sequence_uint8_t>
 8010d44:	4606      	mov	r6, r0
 8010d46:	e7d5      	b.n	8010cf4 <uxr_serialize_ObjectVariant.part.0+0x94>

08010d48 <uxr_deserialize_DATAWRITER_Representation>:
 8010d48:	b570      	push	{r4, r5, r6, lr}
 8010d4a:	4606      	mov	r6, r0
 8010d4c:	460d      	mov	r5, r1
 8010d4e:	f7fc f973 	bl	800d038 <ucdr_deserialize_uint8_t>
 8010d52:	4604      	mov	r4, r0
 8010d54:	b130      	cbz	r0, 8010d64 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8010d56:	782b      	ldrb	r3, [r5, #0]
 8010d58:	2b02      	cmp	r3, #2
 8010d5a:	d00c      	beq.n	8010d76 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8010d5c:	2b03      	cmp	r3, #3
 8010d5e:	d012      	beq.n	8010d86 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8010d60:	2b01      	cmp	r3, #1
 8010d62:	d008      	beq.n	8010d76 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8010d64:	2202      	movs	r2, #2
 8010d66:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8010d6a:	4630      	mov	r0, r6
 8010d6c:	f005 f866 	bl	8015e3c <ucdr_deserialize_array_uint8_t>
 8010d70:	4020      	ands	r0, r4
 8010d72:	b2c0      	uxtb	r0, r0
 8010d74:	bd70      	pop	{r4, r5, r6, pc}
 8010d76:	6869      	ldr	r1, [r5, #4]
 8010d78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010d7c:	4630      	mov	r0, r6
 8010d7e:	f005 f929 	bl	8015fd4 <ucdr_deserialize_string>
 8010d82:	4604      	mov	r4, r0
 8010d84:	e7ee      	b.n	8010d64 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8010d86:	1d2b      	adds	r3, r5, #4
 8010d88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010d8c:	f105 0108 	add.w	r1, r5, #8
 8010d90:	4630      	mov	r0, r6
 8010d92:	f005 f8f5 	bl	8015f80 <ucdr_deserialize_sequence_uint8_t>
 8010d96:	4604      	mov	r4, r0
 8010d98:	e7e4      	b.n	8010d64 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8010d9a:	bf00      	nop

08010d9c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8010d9c:	b570      	push	{r4, r5, r6, lr}
 8010d9e:	460d      	mov	r5, r1
 8010da0:	7809      	ldrb	r1, [r1, #0]
 8010da2:	4606      	mov	r6, r0
 8010da4:	f7fc f904 	bl	800cfb0 <ucdr_serialize_bool>
 8010da8:	782b      	ldrb	r3, [r5, #0]
 8010daa:	4604      	mov	r4, r0
 8010dac:	b94b      	cbnz	r3, 8010dc2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8010dae:	7a29      	ldrb	r1, [r5, #8]
 8010db0:	4630      	mov	r0, r6
 8010db2:	f7fc f8fd 	bl	800cfb0 <ucdr_serialize_bool>
 8010db6:	7a2b      	ldrb	r3, [r5, #8]
 8010db8:	4004      	ands	r4, r0
 8010dba:	b2e4      	uxtb	r4, r4
 8010dbc:	b943      	cbnz	r3, 8010dd0 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8010dbe:	4620      	mov	r0, r4
 8010dc0:	bd70      	pop	{r4, r5, r6, pc}
 8010dc2:	6869      	ldr	r1, [r5, #4]
 8010dc4:	4630      	mov	r0, r6
 8010dc6:	f005 f8f5 	bl	8015fb4 <ucdr_serialize_string>
 8010dca:	4004      	ands	r4, r0
 8010dcc:	b2e4      	uxtb	r4, r4
 8010dce:	e7ee      	b.n	8010dae <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8010dd0:	68e9      	ldr	r1, [r5, #12]
 8010dd2:	4630      	mov	r0, r6
 8010dd4:	f005 f8ee 	bl	8015fb4 <ucdr_serialize_string>
 8010dd8:	4004      	ands	r4, r0
 8010dda:	4620      	mov	r0, r4
 8010ddc:	bd70      	pop	{r4, r5, r6, pc}
 8010dde:	bf00      	nop

08010de0 <uxr_serialize_OBJK_Topic_Binary>:
 8010de0:	b570      	push	{r4, r5, r6, lr}
 8010de2:	460d      	mov	r5, r1
 8010de4:	6809      	ldr	r1, [r1, #0]
 8010de6:	4606      	mov	r6, r0
 8010de8:	f005 f8e4 	bl	8015fb4 <ucdr_serialize_string>
 8010dec:	7929      	ldrb	r1, [r5, #4]
 8010dee:	4604      	mov	r4, r0
 8010df0:	4630      	mov	r0, r6
 8010df2:	f7fc f8dd 	bl	800cfb0 <ucdr_serialize_bool>
 8010df6:	792b      	ldrb	r3, [r5, #4]
 8010df8:	4004      	ands	r4, r0
 8010dfa:	b2e4      	uxtb	r4, r4
 8010dfc:	b943      	cbnz	r3, 8010e10 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8010dfe:	7b29      	ldrb	r1, [r5, #12]
 8010e00:	4630      	mov	r0, r6
 8010e02:	f7fc f8d5 	bl	800cfb0 <ucdr_serialize_bool>
 8010e06:	7b2b      	ldrb	r3, [r5, #12]
 8010e08:	4004      	ands	r4, r0
 8010e0a:	b93b      	cbnz	r3, 8010e1c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8010e0c:	4620      	mov	r0, r4
 8010e0e:	bd70      	pop	{r4, r5, r6, pc}
 8010e10:	68a9      	ldr	r1, [r5, #8]
 8010e12:	4630      	mov	r0, r6
 8010e14:	f005 f8ce 	bl	8015fb4 <ucdr_serialize_string>
 8010e18:	4004      	ands	r4, r0
 8010e1a:	e7f0      	b.n	8010dfe <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8010e1c:	6929      	ldr	r1, [r5, #16]
 8010e1e:	4630      	mov	r0, r6
 8010e20:	f005 f8c8 	bl	8015fb4 <ucdr_serialize_string>
 8010e24:	4004      	ands	r4, r0
 8010e26:	b2e4      	uxtb	r4, r4
 8010e28:	4620      	mov	r0, r4
 8010e2a:	bd70      	pop	{r4, r5, r6, pc}

08010e2c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8010e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e30:	460c      	mov	r4, r1
 8010e32:	7809      	ldrb	r1, [r1, #0]
 8010e34:	4606      	mov	r6, r0
 8010e36:	f7fc f8bb 	bl	800cfb0 <ucdr_serialize_bool>
 8010e3a:	7823      	ldrb	r3, [r4, #0]
 8010e3c:	4605      	mov	r5, r0
 8010e3e:	b96b      	cbnz	r3, 8010e5c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8010e40:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8010e44:	4630      	mov	r0, r6
 8010e46:	f7fc f8b3 	bl	800cfb0 <ucdr_serialize_bool>
 8010e4a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8010e4e:	4005      	ands	r5, r0
 8010e50:	b2ed      	uxtb	r5, r5
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d169      	bne.n	8010f2a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8010e56:	4628      	mov	r0, r5
 8010e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e5c:	6861      	ldr	r1, [r4, #4]
 8010e5e:	4630      	mov	r0, r6
 8010e60:	f7fc faea 	bl	800d438 <ucdr_serialize_uint32_t>
 8010e64:	6863      	ldr	r3, [r4, #4]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d06b      	beq.n	8010f42 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8010e6a:	2800      	cmp	r0, #0
 8010e6c:	d067      	beq.n	8010f3e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010e6e:	68a1      	ldr	r1, [r4, #8]
 8010e70:	4630      	mov	r0, r6
 8010e72:	f005 f89f 	bl	8015fb4 <ucdr_serialize_string>
 8010e76:	6863      	ldr	r3, [r4, #4]
 8010e78:	2b01      	cmp	r3, #1
 8010e7a:	d953      	bls.n	8010f24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010e7c:	2800      	cmp	r0, #0
 8010e7e:	d05e      	beq.n	8010f3e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010e80:	68e1      	ldr	r1, [r4, #12]
 8010e82:	4630      	mov	r0, r6
 8010e84:	f005 f896 	bl	8015fb4 <ucdr_serialize_string>
 8010e88:	6863      	ldr	r3, [r4, #4]
 8010e8a:	2b02      	cmp	r3, #2
 8010e8c:	d94a      	bls.n	8010f24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010e8e:	2800      	cmp	r0, #0
 8010e90:	d055      	beq.n	8010f3e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010e92:	6921      	ldr	r1, [r4, #16]
 8010e94:	4630      	mov	r0, r6
 8010e96:	f005 f88d 	bl	8015fb4 <ucdr_serialize_string>
 8010e9a:	6863      	ldr	r3, [r4, #4]
 8010e9c:	2b03      	cmp	r3, #3
 8010e9e:	d941      	bls.n	8010f24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010ea0:	2800      	cmp	r0, #0
 8010ea2:	d04c      	beq.n	8010f3e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010ea4:	6961      	ldr	r1, [r4, #20]
 8010ea6:	4630      	mov	r0, r6
 8010ea8:	f005 f884 	bl	8015fb4 <ucdr_serialize_string>
 8010eac:	6863      	ldr	r3, [r4, #4]
 8010eae:	2b04      	cmp	r3, #4
 8010eb0:	d938      	bls.n	8010f24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010eb2:	2800      	cmp	r0, #0
 8010eb4:	d043      	beq.n	8010f3e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010eb6:	69a1      	ldr	r1, [r4, #24]
 8010eb8:	4630      	mov	r0, r6
 8010eba:	f005 f87b 	bl	8015fb4 <ucdr_serialize_string>
 8010ebe:	6863      	ldr	r3, [r4, #4]
 8010ec0:	2b05      	cmp	r3, #5
 8010ec2:	d92f      	bls.n	8010f24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010ec4:	2800      	cmp	r0, #0
 8010ec6:	d03a      	beq.n	8010f3e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010ec8:	69e1      	ldr	r1, [r4, #28]
 8010eca:	4630      	mov	r0, r6
 8010ecc:	f005 f872 	bl	8015fb4 <ucdr_serialize_string>
 8010ed0:	6863      	ldr	r3, [r4, #4]
 8010ed2:	2b06      	cmp	r3, #6
 8010ed4:	d926      	bls.n	8010f24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010ed6:	b390      	cbz	r0, 8010f3e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010ed8:	6a21      	ldr	r1, [r4, #32]
 8010eda:	4630      	mov	r0, r6
 8010edc:	f005 f86a 	bl	8015fb4 <ucdr_serialize_string>
 8010ee0:	6863      	ldr	r3, [r4, #4]
 8010ee2:	2b07      	cmp	r3, #7
 8010ee4:	d91e      	bls.n	8010f24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010ee6:	b350      	cbz	r0, 8010f3e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010ee8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8010eea:	4630      	mov	r0, r6
 8010eec:	f005 f862 	bl	8015fb4 <ucdr_serialize_string>
 8010ef0:	6863      	ldr	r3, [r4, #4]
 8010ef2:	2b08      	cmp	r3, #8
 8010ef4:	d916      	bls.n	8010f24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010ef6:	b310      	cbz	r0, 8010f3e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010ef8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8010efa:	4630      	mov	r0, r6
 8010efc:	f005 f85a 	bl	8015fb4 <ucdr_serialize_string>
 8010f00:	6863      	ldr	r3, [r4, #4]
 8010f02:	2b09      	cmp	r3, #9
 8010f04:	d90e      	bls.n	8010f24 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8010f06:	b1d0      	cbz	r0, 8010f3e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010f08:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8010f0c:	2709      	movs	r7, #9
 8010f0e:	e000      	b.n	8010f12 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8010f10:	b1a8      	cbz	r0, 8010f3e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8010f12:	f858 1b04 	ldr.w	r1, [r8], #4
 8010f16:	4630      	mov	r0, r6
 8010f18:	f005 f84c 	bl	8015fb4 <ucdr_serialize_string>
 8010f1c:	6862      	ldr	r2, [r4, #4]
 8010f1e:	3701      	adds	r7, #1
 8010f20:	4297      	cmp	r7, r2
 8010f22:	d3f5      	bcc.n	8010f10 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8010f24:	4005      	ands	r5, r0
 8010f26:	b2ed      	uxtb	r5, r5
 8010f28:	e78a      	b.n	8010e40 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8010f2a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010f2c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8010f30:	4630      	mov	r0, r6
 8010f32:	f005 f813 	bl	8015f5c <ucdr_serialize_sequence_uint8_t>
 8010f36:	4005      	ands	r5, r0
 8010f38:	4628      	mov	r0, r5
 8010f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f3e:	2500      	movs	r5, #0
 8010f40:	e77e      	b.n	8010e40 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8010f42:	4028      	ands	r0, r5
 8010f44:	b2c5      	uxtb	r5, r0
 8010f46:	e77b      	b.n	8010e40 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08010f48 <uxr_serialize_OBJK_Publisher_Binary>:
 8010f48:	b570      	push	{r4, r5, r6, lr}
 8010f4a:	460d      	mov	r5, r1
 8010f4c:	7809      	ldrb	r1, [r1, #0]
 8010f4e:	4606      	mov	r6, r0
 8010f50:	f7fc f82e 	bl	800cfb0 <ucdr_serialize_bool>
 8010f54:	782b      	ldrb	r3, [r5, #0]
 8010f56:	4604      	mov	r4, r0
 8010f58:	b94b      	cbnz	r3, 8010f6e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8010f5a:	7a29      	ldrb	r1, [r5, #8]
 8010f5c:	4630      	mov	r0, r6
 8010f5e:	f7fc f827 	bl	800cfb0 <ucdr_serialize_bool>
 8010f62:	7a2b      	ldrb	r3, [r5, #8]
 8010f64:	4004      	ands	r4, r0
 8010f66:	b2e4      	uxtb	r4, r4
 8010f68:	b943      	cbnz	r3, 8010f7c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8010f6a:	4620      	mov	r0, r4
 8010f6c:	bd70      	pop	{r4, r5, r6, pc}
 8010f6e:	6869      	ldr	r1, [r5, #4]
 8010f70:	4630      	mov	r0, r6
 8010f72:	f005 f81f 	bl	8015fb4 <ucdr_serialize_string>
 8010f76:	4004      	ands	r4, r0
 8010f78:	b2e4      	uxtb	r4, r4
 8010f7a:	e7ee      	b.n	8010f5a <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8010f7c:	f105 010c 	add.w	r1, r5, #12
 8010f80:	4630      	mov	r0, r6
 8010f82:	f7ff ff53 	bl	8010e2c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8010f86:	4004      	ands	r4, r0
 8010f88:	4620      	mov	r0, r4
 8010f8a:	bd70      	pop	{r4, r5, r6, pc}

08010f8c <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8010f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f90:	460c      	mov	r4, r1
 8010f92:	7809      	ldrb	r1, [r1, #0]
 8010f94:	4606      	mov	r6, r0
 8010f96:	f7fc f80b 	bl	800cfb0 <ucdr_serialize_bool>
 8010f9a:	7823      	ldrb	r3, [r4, #0]
 8010f9c:	4605      	mov	r5, r0
 8010f9e:	b96b      	cbnz	r3, 8010fbc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8010fa0:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8010fa4:	4630      	mov	r0, r6
 8010fa6:	f7fc f803 	bl	800cfb0 <ucdr_serialize_bool>
 8010faa:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8010fae:	4005      	ands	r5, r0
 8010fb0:	b2ed      	uxtb	r5, r5
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d169      	bne.n	801108a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8010fb6:	4628      	mov	r0, r5
 8010fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fbc:	6861      	ldr	r1, [r4, #4]
 8010fbe:	4630      	mov	r0, r6
 8010fc0:	f7fc fa3a 	bl	800d438 <ucdr_serialize_uint32_t>
 8010fc4:	6863      	ldr	r3, [r4, #4]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d06b      	beq.n	80110a2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8010fca:	2800      	cmp	r0, #0
 8010fcc:	d067      	beq.n	801109e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010fce:	68a1      	ldr	r1, [r4, #8]
 8010fd0:	4630      	mov	r0, r6
 8010fd2:	f004 ffef 	bl	8015fb4 <ucdr_serialize_string>
 8010fd6:	6863      	ldr	r3, [r4, #4]
 8010fd8:	2b01      	cmp	r3, #1
 8010fda:	d953      	bls.n	8011084 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010fdc:	2800      	cmp	r0, #0
 8010fde:	d05e      	beq.n	801109e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010fe0:	68e1      	ldr	r1, [r4, #12]
 8010fe2:	4630      	mov	r0, r6
 8010fe4:	f004 ffe6 	bl	8015fb4 <ucdr_serialize_string>
 8010fe8:	6863      	ldr	r3, [r4, #4]
 8010fea:	2b02      	cmp	r3, #2
 8010fec:	d94a      	bls.n	8011084 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010fee:	2800      	cmp	r0, #0
 8010ff0:	d055      	beq.n	801109e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010ff2:	6921      	ldr	r1, [r4, #16]
 8010ff4:	4630      	mov	r0, r6
 8010ff6:	f004 ffdd 	bl	8015fb4 <ucdr_serialize_string>
 8010ffa:	6863      	ldr	r3, [r4, #4]
 8010ffc:	2b03      	cmp	r3, #3
 8010ffe:	d941      	bls.n	8011084 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011000:	2800      	cmp	r0, #0
 8011002:	d04c      	beq.n	801109e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011004:	6961      	ldr	r1, [r4, #20]
 8011006:	4630      	mov	r0, r6
 8011008:	f004 ffd4 	bl	8015fb4 <ucdr_serialize_string>
 801100c:	6863      	ldr	r3, [r4, #4]
 801100e:	2b04      	cmp	r3, #4
 8011010:	d938      	bls.n	8011084 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011012:	2800      	cmp	r0, #0
 8011014:	d043      	beq.n	801109e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011016:	69a1      	ldr	r1, [r4, #24]
 8011018:	4630      	mov	r0, r6
 801101a:	f004 ffcb 	bl	8015fb4 <ucdr_serialize_string>
 801101e:	6863      	ldr	r3, [r4, #4]
 8011020:	2b05      	cmp	r3, #5
 8011022:	d92f      	bls.n	8011084 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011024:	2800      	cmp	r0, #0
 8011026:	d03a      	beq.n	801109e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011028:	69e1      	ldr	r1, [r4, #28]
 801102a:	4630      	mov	r0, r6
 801102c:	f004 ffc2 	bl	8015fb4 <ucdr_serialize_string>
 8011030:	6863      	ldr	r3, [r4, #4]
 8011032:	2b06      	cmp	r3, #6
 8011034:	d926      	bls.n	8011084 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011036:	b390      	cbz	r0, 801109e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011038:	6a21      	ldr	r1, [r4, #32]
 801103a:	4630      	mov	r0, r6
 801103c:	f004 ffba 	bl	8015fb4 <ucdr_serialize_string>
 8011040:	6863      	ldr	r3, [r4, #4]
 8011042:	2b07      	cmp	r3, #7
 8011044:	d91e      	bls.n	8011084 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011046:	b350      	cbz	r0, 801109e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011048:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801104a:	4630      	mov	r0, r6
 801104c:	f004 ffb2 	bl	8015fb4 <ucdr_serialize_string>
 8011050:	6863      	ldr	r3, [r4, #4]
 8011052:	2b08      	cmp	r3, #8
 8011054:	d916      	bls.n	8011084 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011056:	b310      	cbz	r0, 801109e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011058:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801105a:	4630      	mov	r0, r6
 801105c:	f004 ffaa 	bl	8015fb4 <ucdr_serialize_string>
 8011060:	6863      	ldr	r3, [r4, #4]
 8011062:	2b09      	cmp	r3, #9
 8011064:	d90e      	bls.n	8011084 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011066:	b1d0      	cbz	r0, 801109e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011068:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 801106c:	2709      	movs	r7, #9
 801106e:	e000      	b.n	8011072 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8011070:	b1a8      	cbz	r0, 801109e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011072:	f858 1b04 	ldr.w	r1, [r8], #4
 8011076:	4630      	mov	r0, r6
 8011078:	f004 ff9c 	bl	8015fb4 <ucdr_serialize_string>
 801107c:	6862      	ldr	r2, [r4, #4]
 801107e:	3701      	adds	r7, #1
 8011080:	4297      	cmp	r7, r2
 8011082:	d3f5      	bcc.n	8011070 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8011084:	4005      	ands	r5, r0
 8011086:	b2ed      	uxtb	r5, r5
 8011088:	e78a      	b.n	8010fa0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801108a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801108c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8011090:	4630      	mov	r0, r6
 8011092:	f004 ff63 	bl	8015f5c <ucdr_serialize_sequence_uint8_t>
 8011096:	4005      	ands	r5, r0
 8011098:	4628      	mov	r0, r5
 801109a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801109e:	2500      	movs	r5, #0
 80110a0:	e77e      	b.n	8010fa0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80110a2:	4028      	ands	r0, r5
 80110a4:	b2c5      	uxtb	r5, r0
 80110a6:	e77b      	b.n	8010fa0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

080110a8 <uxr_serialize_OBJK_Subscriber_Binary>:
 80110a8:	b570      	push	{r4, r5, r6, lr}
 80110aa:	460d      	mov	r5, r1
 80110ac:	7809      	ldrb	r1, [r1, #0]
 80110ae:	4606      	mov	r6, r0
 80110b0:	f7fb ff7e 	bl	800cfb0 <ucdr_serialize_bool>
 80110b4:	782b      	ldrb	r3, [r5, #0]
 80110b6:	4604      	mov	r4, r0
 80110b8:	b94b      	cbnz	r3, 80110ce <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 80110ba:	7a29      	ldrb	r1, [r5, #8]
 80110bc:	4630      	mov	r0, r6
 80110be:	f7fb ff77 	bl	800cfb0 <ucdr_serialize_bool>
 80110c2:	7a2b      	ldrb	r3, [r5, #8]
 80110c4:	4004      	ands	r4, r0
 80110c6:	b2e4      	uxtb	r4, r4
 80110c8:	b943      	cbnz	r3, 80110dc <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 80110ca:	4620      	mov	r0, r4
 80110cc:	bd70      	pop	{r4, r5, r6, pc}
 80110ce:	6869      	ldr	r1, [r5, #4]
 80110d0:	4630      	mov	r0, r6
 80110d2:	f004 ff6f 	bl	8015fb4 <ucdr_serialize_string>
 80110d6:	4004      	ands	r4, r0
 80110d8:	b2e4      	uxtb	r4, r4
 80110da:	e7ee      	b.n	80110ba <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 80110dc:	f105 010c 	add.w	r1, r5, #12
 80110e0:	4630      	mov	r0, r6
 80110e2:	f7ff ff53 	bl	8010f8c <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 80110e6:	4004      	ands	r4, r0
 80110e8:	4620      	mov	r0, r4
 80110ea:	bd70      	pop	{r4, r5, r6, pc}

080110ec <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80110ec:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80110f0:	4688      	mov	r8, r1
 80110f2:	8809      	ldrh	r1, [r1, #0]
 80110f4:	4681      	mov	r9, r0
 80110f6:	f7fb ffb5 	bl	800d064 <ucdr_serialize_uint16_t>
 80110fa:	f898 1002 	ldrb.w	r1, [r8, #2]
 80110fe:	4606      	mov	r6, r0
 8011100:	4648      	mov	r0, r9
 8011102:	f7fb ff55 	bl	800cfb0 <ucdr_serialize_bool>
 8011106:	f898 3002 	ldrb.w	r3, [r8, #2]
 801110a:	4006      	ands	r6, r0
 801110c:	b2f5      	uxtb	r5, r6
 801110e:	b9eb      	cbnz	r3, 801114c <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8011110:	f898 1006 	ldrb.w	r1, [r8, #6]
 8011114:	4648      	mov	r0, r9
 8011116:	f7fb ff4b 	bl	800cfb0 <ucdr_serialize_bool>
 801111a:	f898 3006 	ldrb.w	r3, [r8, #6]
 801111e:	4005      	ands	r5, r0
 8011120:	bb7b      	cbnz	r3, 8011182 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8011122:	f898 100c 	ldrb.w	r1, [r8, #12]
 8011126:	4648      	mov	r0, r9
 8011128:	f7fb ff42 	bl	800cfb0 <ucdr_serialize_bool>
 801112c:	f898 300c 	ldrb.w	r3, [r8, #12]
 8011130:	4005      	ands	r5, r0
 8011132:	b9f3      	cbnz	r3, 8011172 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8011134:	f898 1014 	ldrb.w	r1, [r8, #20]
 8011138:	4648      	mov	r0, r9
 801113a:	f7fb ff39 	bl	800cfb0 <ucdr_serialize_bool>
 801113e:	f898 3014 	ldrb.w	r3, [r8, #20]
 8011142:	4005      	ands	r5, r0
 8011144:	b94b      	cbnz	r3, 801115a <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8011146:	4628      	mov	r0, r5
 8011148:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801114c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8011150:	4648      	mov	r0, r9
 8011152:	f7fb ff87 	bl	800d064 <ucdr_serialize_uint16_t>
 8011156:	4005      	ands	r5, r0
 8011158:	e7da      	b.n	8011110 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801115a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801115e:	f108 011c 	add.w	r1, r8, #28
 8011162:	4648      	mov	r0, r9
 8011164:	f004 fefa 	bl	8015f5c <ucdr_serialize_sequence_uint8_t>
 8011168:	4028      	ands	r0, r5
 801116a:	b2c5      	uxtb	r5, r0
 801116c:	4628      	mov	r0, r5
 801116e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8011172:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011176:	4648      	mov	r0, r9
 8011178:	f7fc f95e 	bl	800d438 <ucdr_serialize_uint32_t>
 801117c:	4028      	ands	r0, r5
 801117e:	b2c5      	uxtb	r5, r0
 8011180:	e7d8      	b.n	8011134 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8011182:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8011186:	4648      	mov	r0, r9
 8011188:	f7fc f956 	bl	800d438 <ucdr_serialize_uint32_t>
 801118c:	4028      	ands	r0, r5
 801118e:	b2c5      	uxtb	r5, r0
 8011190:	e7c7      	b.n	8011122 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8011192:	bf00      	nop

08011194 <uxr_serialize_OBJK_DataReader_Binary>:
 8011194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011196:	2202      	movs	r2, #2
 8011198:	460c      	mov	r4, r1
 801119a:	4606      	mov	r6, r0
 801119c:	f004 fdea 	bl	8015d74 <ucdr_serialize_array_uint8_t>
 80111a0:	78a1      	ldrb	r1, [r4, #2]
 80111a2:	4605      	mov	r5, r0
 80111a4:	4630      	mov	r0, r6
 80111a6:	f7fb ff03 	bl	800cfb0 <ucdr_serialize_bool>
 80111aa:	78a3      	ldrb	r3, [r4, #2]
 80111ac:	4005      	ands	r5, r0
 80111ae:	b2ed      	uxtb	r5, r5
 80111b0:	b90b      	cbnz	r3, 80111b6 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 80111b2:	4628      	mov	r0, r5
 80111b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111b6:	f104 0108 	add.w	r1, r4, #8
 80111ba:	4630      	mov	r0, r6
 80111bc:	f7ff ff96 	bl	80110ec <uxr_serialize_OBJK_Endpoint_QosBinary>
 80111c0:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80111c4:	4607      	mov	r7, r0
 80111c6:	4630      	mov	r0, r6
 80111c8:	f7fb fef2 	bl	800cfb0 <ucdr_serialize_bool>
 80111cc:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80111d0:	4038      	ands	r0, r7
 80111d2:	b2c7      	uxtb	r7, r0
 80111d4:	b95b      	cbnz	r3, 80111ee <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 80111d6:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 80111da:	4630      	mov	r0, r6
 80111dc:	f7fb fee8 	bl	800cfb0 <ucdr_serialize_bool>
 80111e0:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80111e4:	4007      	ands	r7, r0
 80111e6:	b94b      	cbnz	r3, 80111fc <uxr_serialize_OBJK_DataReader_Binary+0x68>
 80111e8:	403d      	ands	r5, r7
 80111ea:	4628      	mov	r0, r5
 80111ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111ee:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 80111f2:	4630      	mov	r0, r6
 80111f4:	f7fc fb76 	bl	800d8e4 <ucdr_serialize_uint64_t>
 80111f8:	4007      	ands	r7, r0
 80111fa:	e7ec      	b.n	80111d6 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 80111fc:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80111fe:	4630      	mov	r0, r6
 8011200:	f004 fed8 	bl	8015fb4 <ucdr_serialize_string>
 8011204:	4007      	ands	r7, r0
 8011206:	b2ff      	uxtb	r7, r7
 8011208:	e7ee      	b.n	80111e8 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801120a:	bf00      	nop

0801120c <uxr_serialize_OBJK_DataWriter_Binary>:
 801120c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801120e:	2202      	movs	r2, #2
 8011210:	460d      	mov	r5, r1
 8011212:	4606      	mov	r6, r0
 8011214:	f004 fdae 	bl	8015d74 <ucdr_serialize_array_uint8_t>
 8011218:	78a9      	ldrb	r1, [r5, #2]
 801121a:	4604      	mov	r4, r0
 801121c:	4630      	mov	r0, r6
 801121e:	f7fb fec7 	bl	800cfb0 <ucdr_serialize_bool>
 8011222:	78ab      	ldrb	r3, [r5, #2]
 8011224:	4004      	ands	r4, r0
 8011226:	b2e4      	uxtb	r4, r4
 8011228:	b90b      	cbnz	r3, 801122e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801122a:	4620      	mov	r0, r4
 801122c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801122e:	f105 0108 	add.w	r1, r5, #8
 8011232:	4630      	mov	r0, r6
 8011234:	f7ff ff5a 	bl	80110ec <uxr_serialize_OBJK_Endpoint_QosBinary>
 8011238:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 801123c:	4607      	mov	r7, r0
 801123e:	4630      	mov	r0, r6
 8011240:	f7fb feb6 	bl	800cfb0 <ucdr_serialize_bool>
 8011244:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8011248:	4038      	ands	r0, r7
 801124a:	b2c7      	uxtb	r7, r0
 801124c:	b913      	cbnz	r3, 8011254 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801124e:	403c      	ands	r4, r7
 8011250:	4620      	mov	r0, r4
 8011252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011254:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8011258:	4630      	mov	r0, r6
 801125a:	f7fc fb43 	bl	800d8e4 <ucdr_serialize_uint64_t>
 801125e:	4007      	ands	r7, r0
 8011260:	e7f5      	b.n	801124e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8011262:	bf00      	nop

08011264 <uxr_deserialize_ObjectVariant>:
 8011264:	b570      	push	{r4, r5, r6, lr}
 8011266:	4605      	mov	r5, r0
 8011268:	460e      	mov	r6, r1
 801126a:	f7fb fee5 	bl	800d038 <ucdr_deserialize_uint8_t>
 801126e:	b168      	cbz	r0, 801128c <uxr_deserialize_ObjectVariant+0x28>
 8011270:	7833      	ldrb	r3, [r6, #0]
 8011272:	3b01      	subs	r3, #1
 8011274:	4604      	mov	r4, r0
 8011276:	2b0d      	cmp	r3, #13
 8011278:	d809      	bhi.n	801128e <uxr_deserialize_ObjectVariant+0x2a>
 801127a:	e8df f003 	tbb	[pc, r3]
 801127e:	0a41      	.short	0x0a41
 8011280:	0a0a2323 	.word	0x0a0a2323
 8011284:	10080a0a 	.word	0x10080a0a
 8011288:	565c1010 	.word	0x565c1010
 801128c:	2400      	movs	r4, #0
 801128e:	4620      	mov	r0, r4
 8011290:	bd70      	pop	{r4, r5, r6, pc}
 8011292:	1d31      	adds	r1, r6, #4
 8011294:	4628      	mov	r0, r5
 8011296:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801129a:	f7ff bd55 	b.w	8010d48 <uxr_deserialize_DATAWRITER_Representation>
 801129e:	1d31      	adds	r1, r6, #4
 80112a0:	4628      	mov	r0, r5
 80112a2:	f7fb fec9 	bl	800d038 <ucdr_deserialize_uint8_t>
 80112a6:	2800      	cmp	r0, #0
 80112a8:	d0f0      	beq.n	801128c <uxr_deserialize_ObjectVariant+0x28>
 80112aa:	7933      	ldrb	r3, [r6, #4]
 80112ac:	2b01      	cmp	r3, #1
 80112ae:	d001      	beq.n	80112b4 <uxr_deserialize_ObjectVariant+0x50>
 80112b0:	2b02      	cmp	r3, #2
 80112b2:	d1ec      	bne.n	801128e <uxr_deserialize_ObjectVariant+0x2a>
 80112b4:	68b1      	ldr	r1, [r6, #8]
 80112b6:	4628      	mov	r0, r5
 80112b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80112bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80112c0:	f004 be88 	b.w	8015fd4 <ucdr_deserialize_string>
 80112c4:	1d31      	adds	r1, r6, #4
 80112c6:	4628      	mov	r0, r5
 80112c8:	f7fb feb6 	bl	800d038 <ucdr_deserialize_uint8_t>
 80112cc:	4604      	mov	r4, r0
 80112ce:	b170      	cbz	r0, 80112ee <uxr_deserialize_ObjectVariant+0x8a>
 80112d0:	7933      	ldrb	r3, [r6, #4]
 80112d2:	2b02      	cmp	r3, #2
 80112d4:	d04c      	beq.n	8011370 <uxr_deserialize_ObjectVariant+0x10c>
 80112d6:	2b03      	cmp	r3, #3
 80112d8:	d109      	bne.n	80112ee <uxr_deserialize_ObjectVariant+0x8a>
 80112da:	f106 0308 	add.w	r3, r6, #8
 80112de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80112e2:	f106 010c 	add.w	r1, r6, #12
 80112e6:	4628      	mov	r0, r5
 80112e8:	f004 fe4a 	bl	8015f80 <ucdr_deserialize_sequence_uint8_t>
 80112ec:	4604      	mov	r4, r0
 80112ee:	2202      	movs	r2, #2
 80112f0:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80112f4:	4628      	mov	r0, r5
 80112f6:	f004 fda1 	bl	8015e3c <ucdr_deserialize_array_uint8_t>
 80112fa:	4020      	ands	r0, r4
 80112fc:	b2c4      	uxtb	r4, r0
 80112fe:	e7c6      	b.n	801128e <uxr_deserialize_ObjectVariant+0x2a>
 8011300:	1d31      	adds	r1, r6, #4
 8011302:	4628      	mov	r0, r5
 8011304:	f7fb fe98 	bl	800d038 <ucdr_deserialize_uint8_t>
 8011308:	4604      	mov	r4, r0
 801130a:	b130      	cbz	r0, 801131a <uxr_deserialize_ObjectVariant+0xb6>
 801130c:	7933      	ldrb	r3, [r6, #4]
 801130e:	2b02      	cmp	r3, #2
 8011310:	d036      	beq.n	8011380 <uxr_deserialize_ObjectVariant+0x11c>
 8011312:	2b03      	cmp	r3, #3
 8011314:	d03c      	beq.n	8011390 <uxr_deserialize_ObjectVariant+0x12c>
 8011316:	2b01      	cmp	r3, #1
 8011318:	d032      	beq.n	8011380 <uxr_deserialize_ObjectVariant+0x11c>
 801131a:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801131e:	4628      	mov	r0, r5
 8011320:	f7fc fc30 	bl	800db84 <ucdr_deserialize_int16_t>
 8011324:	4020      	ands	r0, r4
 8011326:	b2c4      	uxtb	r4, r0
 8011328:	e7b1      	b.n	801128e <uxr_deserialize_ObjectVariant+0x2a>
 801132a:	1d31      	adds	r1, r6, #4
 801132c:	4628      	mov	r0, r5
 801132e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011332:	f7ff bbbf 	b.w	8010ab4 <uxr_deserialize_CLIENT_Representation>
 8011336:	2204      	movs	r2, #4
 8011338:	18b1      	adds	r1, r6, r2
 801133a:	4628      	mov	r0, r5
 801133c:	f004 fd7e 	bl	8015e3c <ucdr_deserialize_array_uint8_t>
 8011340:	2202      	movs	r2, #2
 8011342:	f106 0108 	add.w	r1, r6, #8
 8011346:	4604      	mov	r4, r0
 8011348:	4628      	mov	r0, r5
 801134a:	f004 fd77 	bl	8015e3c <ucdr_deserialize_array_uint8_t>
 801134e:	2202      	movs	r2, #2
 8011350:	4004      	ands	r4, r0
 8011352:	f106 010a 	add.w	r1, r6, #10
 8011356:	4628      	mov	r0, r5
 8011358:	f004 fd70 	bl	8015e3c <ucdr_deserialize_array_uint8_t>
 801135c:	b2e4      	uxtb	r4, r4
 801135e:	4603      	mov	r3, r0
 8011360:	f106 010c 	add.w	r1, r6, #12
 8011364:	4628      	mov	r0, r5
 8011366:	401c      	ands	r4, r3
 8011368:	f7fb fe38 	bl	800cfdc <ucdr_deserialize_bool>
 801136c:	4004      	ands	r4, r0
 801136e:	e78e      	b.n	801128e <uxr_deserialize_ObjectVariant+0x2a>
 8011370:	68b1      	ldr	r1, [r6, #8]
 8011372:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011376:	4628      	mov	r0, r5
 8011378:	f004 fe2c 	bl	8015fd4 <ucdr_deserialize_string>
 801137c:	4604      	mov	r4, r0
 801137e:	e7b6      	b.n	80112ee <uxr_deserialize_ObjectVariant+0x8a>
 8011380:	68b1      	ldr	r1, [r6, #8]
 8011382:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011386:	4628      	mov	r0, r5
 8011388:	f004 fe24 	bl	8015fd4 <ucdr_deserialize_string>
 801138c:	4604      	mov	r4, r0
 801138e:	e7c4      	b.n	801131a <uxr_deserialize_ObjectVariant+0xb6>
 8011390:	f106 0308 	add.w	r3, r6, #8
 8011394:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011398:	f106 010c 	add.w	r1, r6, #12
 801139c:	4628      	mov	r0, r5
 801139e:	f004 fdef 	bl	8015f80 <ucdr_deserialize_sequence_uint8_t>
 80113a2:	4604      	mov	r4, r0
 80113a4:	e7b9      	b.n	801131a <uxr_deserialize_ObjectVariant+0xb6>
 80113a6:	bf00      	nop

080113a8 <uxr_deserialize_BaseObjectRequest>:
 80113a8:	b570      	push	{r4, r5, r6, lr}
 80113aa:	2202      	movs	r2, #2
 80113ac:	4605      	mov	r5, r0
 80113ae:	460e      	mov	r6, r1
 80113b0:	f004 fd44 	bl	8015e3c <ucdr_deserialize_array_uint8_t>
 80113b4:	2202      	movs	r2, #2
 80113b6:	4604      	mov	r4, r0
 80113b8:	18b1      	adds	r1, r6, r2
 80113ba:	4628      	mov	r0, r5
 80113bc:	f004 fd3e 	bl	8015e3c <ucdr_deserialize_array_uint8_t>
 80113c0:	4020      	ands	r0, r4
 80113c2:	b2c0      	uxtb	r0, r0
 80113c4:	bd70      	pop	{r4, r5, r6, pc}
 80113c6:	bf00      	nop

080113c8 <uxr_serialize_ActivityInfoVariant>:
 80113c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113cc:	460d      	mov	r5, r1
 80113ce:	7809      	ldrb	r1, [r1, #0]
 80113d0:	4607      	mov	r7, r0
 80113d2:	f7fb fe1b 	bl	800d00c <ucdr_serialize_uint8_t>
 80113d6:	4681      	mov	r9, r0
 80113d8:	b138      	cbz	r0, 80113ea <uxr_serialize_ActivityInfoVariant+0x22>
 80113da:	782b      	ldrb	r3, [r5, #0]
 80113dc:	2b06      	cmp	r3, #6
 80113de:	f000 8082 	beq.w	80114e6 <uxr_serialize_ActivityInfoVariant+0x11e>
 80113e2:	2b0d      	cmp	r3, #13
 80113e4:	d016      	beq.n	8011414 <uxr_serialize_ActivityInfoVariant+0x4c>
 80113e6:	2b05      	cmp	r3, #5
 80113e8:	d002      	beq.n	80113f0 <uxr_serialize_ActivityInfoVariant+0x28>
 80113ea:	4648      	mov	r0, r9
 80113ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113f0:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80113f4:	4638      	mov	r0, r7
 80113f6:	f7fc fb45 	bl	800da84 <ucdr_serialize_int16_t>
 80113fa:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80113fe:	4681      	mov	r9, r0
 8011400:	4638      	mov	r0, r7
 8011402:	f7fc fa6f 	bl	800d8e4 <ucdr_serialize_uint64_t>
 8011406:	ea09 0000 	and.w	r0, r9, r0
 801140a:	fa5f f980 	uxtb.w	r9, r0
 801140e:	4648      	mov	r0, r9
 8011410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011414:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011418:	4638      	mov	r0, r7
 801141a:	f7fc fb33 	bl	800da84 <ucdr_serialize_int16_t>
 801141e:	68e9      	ldr	r1, [r5, #12]
 8011420:	4681      	mov	r9, r0
 8011422:	4638      	mov	r0, r7
 8011424:	f7fc f808 	bl	800d438 <ucdr_serialize_uint32_t>
 8011428:	68eb      	ldr	r3, [r5, #12]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d0eb      	beq.n	8011406 <uxr_serialize_ActivityInfoVariant+0x3e>
 801142e:	b320      	cbz	r0, 801147a <uxr_serialize_ActivityInfoVariant+0xb2>
 8011430:	f105 080c 	add.w	r8, r5, #12
 8011434:	2600      	movs	r6, #0
 8011436:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 801143a:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 801143e:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8011442:	4638      	mov	r0, r7
 8011444:	f7fb fde2 	bl	800d00c <ucdr_serialize_uint8_t>
 8011448:	2800      	cmp	r0, #0
 801144a:	d053      	beq.n	80114f4 <uxr_serialize_ActivityInfoVariant+0x12c>
 801144c:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8011450:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8011454:	0074      	lsls	r4, r6, #1
 8011456:	00c9      	lsls	r1, r1, #3
 8011458:	2b03      	cmp	r3, #3
 801145a:	d854      	bhi.n	8011506 <uxr_serialize_ActivityInfoVariant+0x13e>
 801145c:	e8df f003 	tbb	[pc, r3]
 8011460:	02102132 	.word	0x02102132
 8011464:	4441      	add	r1, r8
 8011466:	4638      	mov	r0, r7
 8011468:	6889      	ldr	r1, [r1, #8]
 801146a:	f004 fda3 	bl	8015fb4 <ucdr_serialize_string>
 801146e:	68ea      	ldr	r2, [r5, #12]
 8011470:	3601      	adds	r6, #1
 8011472:	4296      	cmp	r6, r2
 8011474:	d242      	bcs.n	80114fc <uxr_serialize_ActivityInfoVariant+0x134>
 8011476:	2800      	cmp	r0, #0
 8011478:	d1dd      	bne.n	8011436 <uxr_serialize_ActivityInfoVariant+0x6e>
 801147a:	f04f 0900 	mov.w	r9, #0
 801147e:	e7b4      	b.n	80113ea <uxr_serialize_ActivityInfoVariant+0x22>
 8011480:	3108      	adds	r1, #8
 8011482:	4441      	add	r1, r8
 8011484:	2210      	movs	r2, #16
 8011486:	4638      	mov	r0, r7
 8011488:	f004 fc74 	bl	8015d74 <ucdr_serialize_array_uint8_t>
 801148c:	4434      	add	r4, r6
 801148e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8011492:	4604      	mov	r4, r0
 8011494:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011496:	4638      	mov	r0, r7
 8011498:	f7fb ffce 	bl	800d438 <ucdr_serialize_uint32_t>
 801149c:	4020      	ands	r0, r4
 801149e:	b2c0      	uxtb	r0, r0
 80114a0:	e7e5      	b.n	801146e <uxr_serialize_ActivityInfoVariant+0xa6>
 80114a2:	3108      	adds	r1, #8
 80114a4:	4441      	add	r1, r8
 80114a6:	2204      	movs	r2, #4
 80114a8:	4638      	mov	r0, r7
 80114aa:	f004 fc63 	bl	8015d74 <ucdr_serialize_array_uint8_t>
 80114ae:	4434      	add	r4, r6
 80114b0:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80114b4:	4604      	mov	r4, r0
 80114b6:	8b19      	ldrh	r1, [r3, #24]
 80114b8:	4638      	mov	r0, r7
 80114ba:	f7fb fdd3 	bl	800d064 <ucdr_serialize_uint16_t>
 80114be:	4020      	ands	r0, r4
 80114c0:	b2c0      	uxtb	r0, r0
 80114c2:	e7d4      	b.n	801146e <uxr_serialize_ActivityInfoVariant+0xa6>
 80114c4:	3108      	adds	r1, #8
 80114c6:	4441      	add	r1, r8
 80114c8:	2202      	movs	r2, #2
 80114ca:	4638      	mov	r0, r7
 80114cc:	f004 fc52 	bl	8015d74 <ucdr_serialize_array_uint8_t>
 80114d0:	4434      	add	r4, r6
 80114d2:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80114d6:	4604      	mov	r4, r0
 80114d8:	7d99      	ldrb	r1, [r3, #22]
 80114da:	4638      	mov	r0, r7
 80114dc:	f7fb fd96 	bl	800d00c <ucdr_serialize_uint8_t>
 80114e0:	4020      	ands	r0, r4
 80114e2:	b2c0      	uxtb	r0, r0
 80114e4:	e7c3      	b.n	801146e <uxr_serialize_ActivityInfoVariant+0xa6>
 80114e6:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80114ea:	4638      	mov	r0, r7
 80114ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114f0:	f7fc bac8 	b.w	800da84 <ucdr_serialize_int16_t>
 80114f4:	68ea      	ldr	r2, [r5, #12]
 80114f6:	3601      	adds	r6, #1
 80114f8:	42b2      	cmp	r2, r6
 80114fa:	d8be      	bhi.n	801147a <uxr_serialize_ActivityInfoVariant+0xb2>
 80114fc:	ea09 0900 	and.w	r9, r9, r0
 8011500:	fa5f f989 	uxtb.w	r9, r9
 8011504:	e771      	b.n	80113ea <uxr_serialize_ActivityInfoVariant+0x22>
 8011506:	68eb      	ldr	r3, [r5, #12]
 8011508:	3601      	adds	r6, #1
 801150a:	429e      	cmp	r6, r3
 801150c:	f10a 0a18 	add.w	sl, sl, #24
 8011510:	d395      	bcc.n	801143e <uxr_serialize_ActivityInfoVariant+0x76>
 8011512:	e76a      	b.n	80113ea <uxr_serialize_ActivityInfoVariant+0x22>

08011514 <uxr_deserialize_BaseObjectReply>:
 8011514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011518:	2202      	movs	r2, #2
 801151a:	4606      	mov	r6, r0
 801151c:	460f      	mov	r7, r1
 801151e:	f004 fc8d 	bl	8015e3c <ucdr_deserialize_array_uint8_t>
 8011522:	2202      	movs	r2, #2
 8011524:	18b9      	adds	r1, r7, r2
 8011526:	4605      	mov	r5, r0
 8011528:	4630      	mov	r0, r6
 801152a:	f004 fc87 	bl	8015e3c <ucdr_deserialize_array_uint8_t>
 801152e:	1d39      	adds	r1, r7, #4
 8011530:	4680      	mov	r8, r0
 8011532:	4630      	mov	r0, r6
 8011534:	f7fb fd80 	bl	800d038 <ucdr_deserialize_uint8_t>
 8011538:	1d79      	adds	r1, r7, #5
 801153a:	4604      	mov	r4, r0
 801153c:	4630      	mov	r0, r6
 801153e:	f7fb fd7b 	bl	800d038 <ucdr_deserialize_uint8_t>
 8011542:	ea05 0508 	and.w	r5, r5, r8
 8011546:	402c      	ands	r4, r5
 8011548:	4020      	ands	r0, r4
 801154a:	b2c0      	uxtb	r0, r0
 801154c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011550 <uxr_serialize_ReadSpecification>:
 8011550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011554:	460e      	mov	r6, r1
 8011556:	7809      	ldrb	r1, [r1, #0]
 8011558:	4607      	mov	r7, r0
 801155a:	f7fb fd57 	bl	800d00c <ucdr_serialize_uint8_t>
 801155e:	7871      	ldrb	r1, [r6, #1]
 8011560:	4604      	mov	r4, r0
 8011562:	4638      	mov	r0, r7
 8011564:	f7fb fd52 	bl	800d00c <ucdr_serialize_uint8_t>
 8011568:	78b1      	ldrb	r1, [r6, #2]
 801156a:	4004      	ands	r4, r0
 801156c:	4638      	mov	r0, r7
 801156e:	f7fb fd1f 	bl	800cfb0 <ucdr_serialize_bool>
 8011572:	78b3      	ldrb	r3, [r6, #2]
 8011574:	b2e4      	uxtb	r4, r4
 8011576:	4004      	ands	r4, r0
 8011578:	b94b      	cbnz	r3, 801158e <uxr_serialize_ReadSpecification+0x3e>
 801157a:	7a31      	ldrb	r1, [r6, #8]
 801157c:	4638      	mov	r0, r7
 801157e:	f7fb fd17 	bl	800cfb0 <ucdr_serialize_bool>
 8011582:	7a33      	ldrb	r3, [r6, #8]
 8011584:	4004      	ands	r4, r0
 8011586:	b943      	cbnz	r3, 801159a <uxr_serialize_ReadSpecification+0x4a>
 8011588:	4620      	mov	r0, r4
 801158a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801158e:	6871      	ldr	r1, [r6, #4]
 8011590:	4638      	mov	r0, r7
 8011592:	f004 fd0f 	bl	8015fb4 <ucdr_serialize_string>
 8011596:	4004      	ands	r4, r0
 8011598:	e7ef      	b.n	801157a <uxr_serialize_ReadSpecification+0x2a>
 801159a:	8971      	ldrh	r1, [r6, #10]
 801159c:	4638      	mov	r0, r7
 801159e:	f7fb fd61 	bl	800d064 <ucdr_serialize_uint16_t>
 80115a2:	89b1      	ldrh	r1, [r6, #12]
 80115a4:	4605      	mov	r5, r0
 80115a6:	4638      	mov	r0, r7
 80115a8:	f7fb fd5c 	bl	800d064 <ucdr_serialize_uint16_t>
 80115ac:	89f1      	ldrh	r1, [r6, #14]
 80115ae:	4005      	ands	r5, r0
 80115b0:	4638      	mov	r0, r7
 80115b2:	f7fb fd57 	bl	800d064 <ucdr_serialize_uint16_t>
 80115b6:	8a31      	ldrh	r1, [r6, #16]
 80115b8:	4680      	mov	r8, r0
 80115ba:	4638      	mov	r0, r7
 80115bc:	f7fb fd52 	bl	800d064 <ucdr_serialize_uint16_t>
 80115c0:	b2ed      	uxtb	r5, r5
 80115c2:	4025      	ands	r5, r4
 80115c4:	ea08 0505 	and.w	r5, r8, r5
 80115c8:	ea00 0405 	and.w	r4, r0, r5
 80115cc:	4620      	mov	r0, r4
 80115ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115d2:	bf00      	nop

080115d4 <uxr_serialize_CREATE_CLIENT_Payload>:
 80115d4:	f7ff ba16 	b.w	8010a04 <uxr_serialize_CLIENT_Representation>

080115d8 <uxr_serialize_CREATE_Payload>:
 80115d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115da:	2202      	movs	r2, #2
 80115dc:	4607      	mov	r7, r0
 80115de:	460e      	mov	r6, r1
 80115e0:	f004 fbc8 	bl	8015d74 <ucdr_serialize_array_uint8_t>
 80115e4:	2202      	movs	r2, #2
 80115e6:	18b1      	adds	r1, r6, r2
 80115e8:	4605      	mov	r5, r0
 80115ea:	4638      	mov	r0, r7
 80115ec:	f004 fbc2 	bl	8015d74 <ucdr_serialize_array_uint8_t>
 80115f0:	7931      	ldrb	r1, [r6, #4]
 80115f2:	4604      	mov	r4, r0
 80115f4:	4638      	mov	r0, r7
 80115f6:	f7fb fd09 	bl	800d00c <ucdr_serialize_uint8_t>
 80115fa:	b170      	cbz	r0, 801161a <uxr_serialize_CREATE_Payload+0x42>
 80115fc:	7933      	ldrb	r3, [r6, #4]
 80115fe:	402c      	ands	r4, r5
 8011600:	3b01      	subs	r3, #1
 8011602:	b2e4      	uxtb	r4, r4
 8011604:	2b0d      	cmp	r3, #13
 8011606:	d809      	bhi.n	801161c <uxr_serialize_CREATE_Payload+0x44>
 8011608:	e8df f003 	tbb	[pc, r3]
 801160c:	23230a4c 	.word	0x23230a4c
 8011610:	0a0a0a0a 	.word	0x0a0a0a0a
 8011614:	12121208 	.word	0x12121208
 8011618:	3e45      	.short	0x3e45
 801161a:	2400      	movs	r4, #0
 801161c:	4620      	mov	r0, r4
 801161e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011620:	f106 0108 	add.w	r1, r6, #8
 8011624:	4638      	mov	r0, r7
 8011626:	f7ff faf3 	bl	8010c10 <uxr_serialize_DATAWRITER_Representation>
 801162a:	4004      	ands	r4, r0
 801162c:	4620      	mov	r0, r4
 801162e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011630:	7a31      	ldrb	r1, [r6, #8]
 8011632:	4638      	mov	r0, r7
 8011634:	f7fb fcea 	bl	800d00c <ucdr_serialize_uint8_t>
 8011638:	2800      	cmp	r0, #0
 801163a:	d0ee      	beq.n	801161a <uxr_serialize_CREATE_Payload+0x42>
 801163c:	7a33      	ldrb	r3, [r6, #8]
 801163e:	2b01      	cmp	r3, #1
 8011640:	d001      	beq.n	8011646 <uxr_serialize_CREATE_Payload+0x6e>
 8011642:	2b02      	cmp	r3, #2
 8011644:	d1ea      	bne.n	801161c <uxr_serialize_CREATE_Payload+0x44>
 8011646:	68f1      	ldr	r1, [r6, #12]
 8011648:	4638      	mov	r0, r7
 801164a:	f004 fcb3 	bl	8015fb4 <ucdr_serialize_string>
 801164e:	4004      	ands	r4, r0
 8011650:	e7e4      	b.n	801161c <uxr_serialize_CREATE_Payload+0x44>
 8011652:	7a31      	ldrb	r1, [r6, #8]
 8011654:	4638      	mov	r0, r7
 8011656:	f7fb fcd9 	bl	800d00c <ucdr_serialize_uint8_t>
 801165a:	4605      	mov	r5, r0
 801165c:	b158      	cbz	r0, 8011676 <uxr_serialize_CREATE_Payload+0x9e>
 801165e:	7a33      	ldrb	r3, [r6, #8]
 8011660:	2b02      	cmp	r3, #2
 8011662:	d034      	beq.n	80116ce <uxr_serialize_CREATE_Payload+0xf6>
 8011664:	2b03      	cmp	r3, #3
 8011666:	d106      	bne.n	8011676 <uxr_serialize_CREATE_Payload+0x9e>
 8011668:	68f2      	ldr	r2, [r6, #12]
 801166a:	f106 0110 	add.w	r1, r6, #16
 801166e:	4638      	mov	r0, r7
 8011670:	f004 fc74 	bl	8015f5c <ucdr_serialize_sequence_uint8_t>
 8011674:	4605      	mov	r5, r0
 8011676:	2202      	movs	r2, #2
 8011678:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 801167c:	4638      	mov	r0, r7
 801167e:	f004 fb79 	bl	8015d74 <ucdr_serialize_array_uint8_t>
 8011682:	4028      	ands	r0, r5
 8011684:	4004      	ands	r4, r0
 8011686:	e7c9      	b.n	801161c <uxr_serialize_CREATE_Payload+0x44>
 8011688:	f106 0108 	add.w	r1, r6, #8
 801168c:	4638      	mov	r0, r7
 801168e:	f7ff f9b9 	bl	8010a04 <uxr_serialize_CLIENT_Representation>
 8011692:	4004      	ands	r4, r0
 8011694:	e7c2      	b.n	801161c <uxr_serialize_CREATE_Payload+0x44>
 8011696:	f106 0108 	add.w	r1, r6, #8
 801169a:	4638      	mov	r0, r7
 801169c:	f7ff fa6e 	bl	8010b7c <uxr_serialize_AGENT_Representation>
 80116a0:	4004      	ands	r4, r0
 80116a2:	e7bb      	b.n	801161c <uxr_serialize_CREATE_Payload+0x44>
 80116a4:	7a31      	ldrb	r1, [r6, #8]
 80116a6:	4638      	mov	r0, r7
 80116a8:	f7fb fcb0 	bl	800d00c <ucdr_serialize_uint8_t>
 80116ac:	4605      	mov	r5, r0
 80116ae:	b130      	cbz	r0, 80116be <uxr_serialize_CREATE_Payload+0xe6>
 80116b0:	7a33      	ldrb	r3, [r6, #8]
 80116b2:	2b02      	cmp	r3, #2
 80116b4:	d011      	beq.n	80116da <uxr_serialize_CREATE_Payload+0x102>
 80116b6:	2b03      	cmp	r3, #3
 80116b8:	d015      	beq.n	80116e6 <uxr_serialize_CREATE_Payload+0x10e>
 80116ba:	2b01      	cmp	r3, #1
 80116bc:	d00d      	beq.n	80116da <uxr_serialize_CREATE_Payload+0x102>
 80116be:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 80116c2:	4638      	mov	r0, r7
 80116c4:	f7fc f9de 	bl	800da84 <ucdr_serialize_int16_t>
 80116c8:	4028      	ands	r0, r5
 80116ca:	4004      	ands	r4, r0
 80116cc:	e7a6      	b.n	801161c <uxr_serialize_CREATE_Payload+0x44>
 80116ce:	68f1      	ldr	r1, [r6, #12]
 80116d0:	4638      	mov	r0, r7
 80116d2:	f004 fc6f 	bl	8015fb4 <ucdr_serialize_string>
 80116d6:	4605      	mov	r5, r0
 80116d8:	e7cd      	b.n	8011676 <uxr_serialize_CREATE_Payload+0x9e>
 80116da:	68f1      	ldr	r1, [r6, #12]
 80116dc:	4638      	mov	r0, r7
 80116de:	f004 fc69 	bl	8015fb4 <ucdr_serialize_string>
 80116e2:	4605      	mov	r5, r0
 80116e4:	e7eb      	b.n	80116be <uxr_serialize_CREATE_Payload+0xe6>
 80116e6:	68f2      	ldr	r2, [r6, #12]
 80116e8:	f106 0110 	add.w	r1, r6, #16
 80116ec:	4638      	mov	r0, r7
 80116ee:	f004 fc35 	bl	8015f5c <ucdr_serialize_sequence_uint8_t>
 80116f2:	4605      	mov	r5, r0
 80116f4:	e7e3      	b.n	80116be <uxr_serialize_CREATE_Payload+0xe6>
 80116f6:	bf00      	nop

080116f8 <uxr_deserialize_GET_INFO_Payload>:
 80116f8:	b570      	push	{r4, r5, r6, lr}
 80116fa:	2202      	movs	r2, #2
 80116fc:	4605      	mov	r5, r0
 80116fe:	460e      	mov	r6, r1
 8011700:	f004 fb9c 	bl	8015e3c <ucdr_deserialize_array_uint8_t>
 8011704:	2202      	movs	r2, #2
 8011706:	18b1      	adds	r1, r6, r2
 8011708:	4604      	mov	r4, r0
 801170a:	4628      	mov	r0, r5
 801170c:	f004 fb96 	bl	8015e3c <ucdr_deserialize_array_uint8_t>
 8011710:	1d31      	adds	r1, r6, #4
 8011712:	4004      	ands	r4, r0
 8011714:	4628      	mov	r0, r5
 8011716:	f7fb ffbf 	bl	800d698 <ucdr_deserialize_uint32_t>
 801171a:	b2e4      	uxtb	r4, r4
 801171c:	4020      	ands	r0, r4
 801171e:	bd70      	pop	{r4, r5, r6, pc}

08011720 <uxr_serialize_DELETE_Payload>:
 8011720:	b570      	push	{r4, r5, r6, lr}
 8011722:	2202      	movs	r2, #2
 8011724:	4605      	mov	r5, r0
 8011726:	460e      	mov	r6, r1
 8011728:	f004 fb24 	bl	8015d74 <ucdr_serialize_array_uint8_t>
 801172c:	2202      	movs	r2, #2
 801172e:	4604      	mov	r4, r0
 8011730:	18b1      	adds	r1, r6, r2
 8011732:	4628      	mov	r0, r5
 8011734:	f004 fb1e 	bl	8015d74 <ucdr_serialize_array_uint8_t>
 8011738:	4020      	ands	r0, r4
 801173a:	b2c0      	uxtb	r0, r0
 801173c:	bd70      	pop	{r4, r5, r6, pc}
 801173e:	bf00      	nop

08011740 <uxr_deserialize_STATUS_AGENT_Payload>:
 8011740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011744:	4605      	mov	r5, r0
 8011746:	460e      	mov	r6, r1
 8011748:	f7fb fc76 	bl	800d038 <ucdr_deserialize_uint8_t>
 801174c:	1c71      	adds	r1, r6, #1
 801174e:	4604      	mov	r4, r0
 8011750:	4628      	mov	r0, r5
 8011752:	f7fb fc71 	bl	800d038 <ucdr_deserialize_uint8_t>
 8011756:	2204      	movs	r2, #4
 8011758:	18b1      	adds	r1, r6, r2
 801175a:	4680      	mov	r8, r0
 801175c:	4628      	mov	r0, r5
 801175e:	f004 fb6d 	bl	8015e3c <ucdr_deserialize_array_uint8_t>
 8011762:	f106 0108 	add.w	r1, r6, #8
 8011766:	4607      	mov	r7, r0
 8011768:	2202      	movs	r2, #2
 801176a:	4628      	mov	r0, r5
 801176c:	f004 fb66 	bl	8015e3c <ucdr_deserialize_array_uint8_t>
 8011770:	ea04 0308 	and.w	r3, r4, r8
 8011774:	b2db      	uxtb	r3, r3
 8011776:	ea03 0407 	and.w	r4, r3, r7
 801177a:	2202      	movs	r2, #2
 801177c:	4607      	mov	r7, r0
 801177e:	f106 010a 	add.w	r1, r6, #10
 8011782:	4628      	mov	r0, r5
 8011784:	f004 fb5a 	bl	8015e3c <ucdr_deserialize_array_uint8_t>
 8011788:	f106 010c 	add.w	r1, r6, #12
 801178c:	4603      	mov	r3, r0
 801178e:	4628      	mov	r0, r5
 8011790:	461d      	mov	r5, r3
 8011792:	f7fb fc23 	bl	800cfdc <ucdr_deserialize_bool>
 8011796:	403c      	ands	r4, r7
 8011798:	4025      	ands	r5, r4
 801179a:	4028      	ands	r0, r5
 801179c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080117a0 <uxr_deserialize_STATUS_Payload>:
 80117a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117a4:	2202      	movs	r2, #2
 80117a6:	4606      	mov	r6, r0
 80117a8:	460f      	mov	r7, r1
 80117aa:	f004 fb47 	bl	8015e3c <ucdr_deserialize_array_uint8_t>
 80117ae:	2202      	movs	r2, #2
 80117b0:	18b9      	adds	r1, r7, r2
 80117b2:	4605      	mov	r5, r0
 80117b4:	4630      	mov	r0, r6
 80117b6:	f004 fb41 	bl	8015e3c <ucdr_deserialize_array_uint8_t>
 80117ba:	1d39      	adds	r1, r7, #4
 80117bc:	4680      	mov	r8, r0
 80117be:	4630      	mov	r0, r6
 80117c0:	f7fb fc3a 	bl	800d038 <ucdr_deserialize_uint8_t>
 80117c4:	1d79      	adds	r1, r7, #5
 80117c6:	4604      	mov	r4, r0
 80117c8:	4630      	mov	r0, r6
 80117ca:	f7fb fc35 	bl	800d038 <ucdr_deserialize_uint8_t>
 80117ce:	ea05 0508 	and.w	r5, r5, r8
 80117d2:	402c      	ands	r4, r5
 80117d4:	4020      	ands	r0, r4
 80117d6:	b2c0      	uxtb	r0, r0
 80117d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080117dc <uxr_serialize_INFO_Payload>:
 80117dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117e0:	2202      	movs	r2, #2
 80117e2:	460c      	mov	r4, r1
 80117e4:	4605      	mov	r5, r0
 80117e6:	f004 fac5 	bl	8015d74 <ucdr_serialize_array_uint8_t>
 80117ea:	2202      	movs	r2, #2
 80117ec:	18a1      	adds	r1, r4, r2
 80117ee:	4680      	mov	r8, r0
 80117f0:	4628      	mov	r0, r5
 80117f2:	f004 fabf 	bl	8015d74 <ucdr_serialize_array_uint8_t>
 80117f6:	7921      	ldrb	r1, [r4, #4]
 80117f8:	4607      	mov	r7, r0
 80117fa:	4628      	mov	r0, r5
 80117fc:	f7fb fc06 	bl	800d00c <ucdr_serialize_uint8_t>
 8011800:	7961      	ldrb	r1, [r4, #5]
 8011802:	4606      	mov	r6, r0
 8011804:	4628      	mov	r0, r5
 8011806:	f7fb fc01 	bl	800d00c <ucdr_serialize_uint8_t>
 801180a:	ea08 0807 	and.w	r8, r8, r7
 801180e:	ea06 0608 	and.w	r6, r6, r8
 8011812:	4006      	ands	r6, r0
 8011814:	7a21      	ldrb	r1, [r4, #8]
 8011816:	4628      	mov	r0, r5
 8011818:	f7fb fbca 	bl	800cfb0 <ucdr_serialize_bool>
 801181c:	7a23      	ldrb	r3, [r4, #8]
 801181e:	b2f7      	uxtb	r7, r6
 8011820:	4606      	mov	r6, r0
 8011822:	b96b      	cbnz	r3, 8011840 <uxr_serialize_INFO_Payload+0x64>
 8011824:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8011828:	4628      	mov	r0, r5
 801182a:	f7fb fbc1 	bl	800cfb0 <ucdr_serialize_bool>
 801182e:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8011832:	4030      	ands	r0, r6
 8011834:	b2c6      	uxtb	r6, r0
 8011836:	b983      	cbnz	r3, 801185a <uxr_serialize_INFO_Payload+0x7e>
 8011838:	ea06 0007 	and.w	r0, r6, r7
 801183c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011840:	7b21      	ldrb	r1, [r4, #12]
 8011842:	4628      	mov	r0, r5
 8011844:	f7fb fbe2 	bl	800d00c <ucdr_serialize_uint8_t>
 8011848:	b188      	cbz	r0, 801186e <uxr_serialize_INFO_Payload+0x92>
 801184a:	f104 010c 	add.w	r1, r4, #12
 801184e:	4628      	mov	r0, r5
 8011850:	f7ff fa06 	bl	8010c60 <uxr_serialize_ObjectVariant.part.0>
 8011854:	4030      	ands	r0, r6
 8011856:	b2c6      	uxtb	r6, r0
 8011858:	e7e4      	b.n	8011824 <uxr_serialize_INFO_Payload+0x48>
 801185a:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 801185e:	4628      	mov	r0, r5
 8011860:	f7ff fdb2 	bl	80113c8 <uxr_serialize_ActivityInfoVariant>
 8011864:	4006      	ands	r6, r0
 8011866:	ea06 0007 	and.w	r0, r6, r7
 801186a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801186e:	4606      	mov	r6, r0
 8011870:	e7d8      	b.n	8011824 <uxr_serialize_INFO_Payload+0x48>
 8011872:	bf00      	nop

08011874 <uxr_serialize_READ_DATA_Payload>:
 8011874:	b570      	push	{r4, r5, r6, lr}
 8011876:	2202      	movs	r2, #2
 8011878:	4605      	mov	r5, r0
 801187a:	460e      	mov	r6, r1
 801187c:	f004 fa7a 	bl	8015d74 <ucdr_serialize_array_uint8_t>
 8011880:	2202      	movs	r2, #2
 8011882:	18b1      	adds	r1, r6, r2
 8011884:	4604      	mov	r4, r0
 8011886:	4628      	mov	r0, r5
 8011888:	f004 fa74 	bl	8015d74 <ucdr_serialize_array_uint8_t>
 801188c:	1d31      	adds	r1, r6, #4
 801188e:	4004      	ands	r4, r0
 8011890:	4628      	mov	r0, r5
 8011892:	f7ff fe5d 	bl	8011550 <uxr_serialize_ReadSpecification>
 8011896:	b2e4      	uxtb	r4, r4
 8011898:	4020      	ands	r0, r4
 801189a:	bd70      	pop	{r4, r5, r6, pc}

0801189c <uxr_serialize_WRITE_DATA_Payload_Data>:
 801189c:	b570      	push	{r4, r5, r6, lr}
 801189e:	2202      	movs	r2, #2
 80118a0:	4605      	mov	r5, r0
 80118a2:	460e      	mov	r6, r1
 80118a4:	f004 fa66 	bl	8015d74 <ucdr_serialize_array_uint8_t>
 80118a8:	2202      	movs	r2, #2
 80118aa:	4604      	mov	r4, r0
 80118ac:	18b1      	adds	r1, r6, r2
 80118ae:	4628      	mov	r0, r5
 80118b0:	f004 fa60 	bl	8015d74 <ucdr_serialize_array_uint8_t>
 80118b4:	4020      	ands	r0, r4
 80118b6:	b2c0      	uxtb	r0, r0
 80118b8:	bd70      	pop	{r4, r5, r6, pc}
 80118ba:	bf00      	nop

080118bc <uxr_serialize_ACKNACK_Payload>:
 80118bc:	b570      	push	{r4, r5, r6, lr}
 80118be:	460c      	mov	r4, r1
 80118c0:	460e      	mov	r6, r1
 80118c2:	f834 1b02 	ldrh.w	r1, [r4], #2
 80118c6:	4605      	mov	r5, r0
 80118c8:	f7fb fbcc 	bl	800d064 <ucdr_serialize_uint16_t>
 80118cc:	2202      	movs	r2, #2
 80118ce:	4621      	mov	r1, r4
 80118d0:	4604      	mov	r4, r0
 80118d2:	4628      	mov	r0, r5
 80118d4:	f004 fa4e 	bl	8015d74 <ucdr_serialize_array_uint8_t>
 80118d8:	7931      	ldrb	r1, [r6, #4]
 80118da:	4004      	ands	r4, r0
 80118dc:	4628      	mov	r0, r5
 80118de:	f7fb fb95 	bl	800d00c <ucdr_serialize_uint8_t>
 80118e2:	b2e4      	uxtb	r4, r4
 80118e4:	4020      	ands	r0, r4
 80118e6:	bd70      	pop	{r4, r5, r6, pc}

080118e8 <uxr_deserialize_ACKNACK_Payload>:
 80118e8:	b570      	push	{r4, r5, r6, lr}
 80118ea:	4605      	mov	r5, r0
 80118ec:	460e      	mov	r6, r1
 80118ee:	f7fb fcb9 	bl	800d264 <ucdr_deserialize_uint16_t>
 80118f2:	2202      	movs	r2, #2
 80118f4:	18b1      	adds	r1, r6, r2
 80118f6:	4604      	mov	r4, r0
 80118f8:	4628      	mov	r0, r5
 80118fa:	f004 fa9f 	bl	8015e3c <ucdr_deserialize_array_uint8_t>
 80118fe:	1d31      	adds	r1, r6, #4
 8011900:	4004      	ands	r4, r0
 8011902:	4628      	mov	r0, r5
 8011904:	f7fb fb98 	bl	800d038 <ucdr_deserialize_uint8_t>
 8011908:	b2e4      	uxtb	r4, r4
 801190a:	4020      	ands	r0, r4
 801190c:	bd70      	pop	{r4, r5, r6, pc}
 801190e:	bf00      	nop

08011910 <uxr_serialize_HEARTBEAT_Payload>:
 8011910:	b570      	push	{r4, r5, r6, lr}
 8011912:	460d      	mov	r5, r1
 8011914:	8809      	ldrh	r1, [r1, #0]
 8011916:	4606      	mov	r6, r0
 8011918:	f7fb fba4 	bl	800d064 <ucdr_serialize_uint16_t>
 801191c:	8869      	ldrh	r1, [r5, #2]
 801191e:	4604      	mov	r4, r0
 8011920:	4630      	mov	r0, r6
 8011922:	f7fb fb9f 	bl	800d064 <ucdr_serialize_uint16_t>
 8011926:	7929      	ldrb	r1, [r5, #4]
 8011928:	4004      	ands	r4, r0
 801192a:	4630      	mov	r0, r6
 801192c:	f7fb fb6e 	bl	800d00c <ucdr_serialize_uint8_t>
 8011930:	b2e4      	uxtb	r4, r4
 8011932:	4020      	ands	r0, r4
 8011934:	bd70      	pop	{r4, r5, r6, pc}
 8011936:	bf00      	nop

08011938 <uxr_deserialize_HEARTBEAT_Payload>:
 8011938:	b570      	push	{r4, r5, r6, lr}
 801193a:	4605      	mov	r5, r0
 801193c:	460e      	mov	r6, r1
 801193e:	f7fb fc91 	bl	800d264 <ucdr_deserialize_uint16_t>
 8011942:	1cb1      	adds	r1, r6, #2
 8011944:	4604      	mov	r4, r0
 8011946:	4628      	mov	r0, r5
 8011948:	f7fb fc8c 	bl	800d264 <ucdr_deserialize_uint16_t>
 801194c:	1d31      	adds	r1, r6, #4
 801194e:	4004      	ands	r4, r0
 8011950:	4628      	mov	r0, r5
 8011952:	f7fb fb71 	bl	800d038 <ucdr_deserialize_uint8_t>
 8011956:	b2e4      	uxtb	r4, r4
 8011958:	4020      	ands	r0, r4
 801195a:	bd70      	pop	{r4, r5, r6, pc}

0801195c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801195c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011960:	4605      	mov	r5, r0
 8011962:	460e      	mov	r6, r1
 8011964:	f7fc fa1a 	bl	800dd9c <ucdr_deserialize_int32_t>
 8011968:	1d31      	adds	r1, r6, #4
 801196a:	4607      	mov	r7, r0
 801196c:	4628      	mov	r0, r5
 801196e:	f7fb fe93 	bl	800d698 <ucdr_deserialize_uint32_t>
 8011972:	f106 0108 	add.w	r1, r6, #8
 8011976:	4680      	mov	r8, r0
 8011978:	4628      	mov	r0, r5
 801197a:	f7fc fa0f 	bl	800dd9c <ucdr_deserialize_int32_t>
 801197e:	f106 010c 	add.w	r1, r6, #12
 8011982:	4604      	mov	r4, r0
 8011984:	4628      	mov	r0, r5
 8011986:	f7fb fe87 	bl	800d698 <ucdr_deserialize_uint32_t>
 801198a:	ea07 0708 	and.w	r7, r7, r8
 801198e:	403c      	ands	r4, r7
 8011990:	f106 0110 	add.w	r1, r6, #16
 8011994:	4004      	ands	r4, r0
 8011996:	4628      	mov	r0, r5
 8011998:	f7fc fa00 	bl	800dd9c <ucdr_deserialize_int32_t>
 801199c:	f106 0114 	add.w	r1, r6, #20
 80119a0:	4607      	mov	r7, r0
 80119a2:	4628      	mov	r0, r5
 80119a4:	f7fb fe78 	bl	800d698 <ucdr_deserialize_uint32_t>
 80119a8:	b2e4      	uxtb	r4, r4
 80119aa:	403c      	ands	r4, r7
 80119ac:	4020      	ands	r0, r4
 80119ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119b2:	bf00      	nop

080119b4 <uxr_serialize_SampleIdentity>:
 80119b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119b8:	220c      	movs	r2, #12
 80119ba:	4604      	mov	r4, r0
 80119bc:	460d      	mov	r5, r1
 80119be:	f004 f9d9 	bl	8015d74 <ucdr_serialize_array_uint8_t>
 80119c2:	2203      	movs	r2, #3
 80119c4:	f105 010c 	add.w	r1, r5, #12
 80119c8:	4607      	mov	r7, r0
 80119ca:	4620      	mov	r0, r4
 80119cc:	f004 f9d2 	bl	8015d74 <ucdr_serialize_array_uint8_t>
 80119d0:	7be9      	ldrb	r1, [r5, #15]
 80119d2:	4680      	mov	r8, r0
 80119d4:	4620      	mov	r0, r4
 80119d6:	f7fb fb19 	bl	800d00c <ucdr_serialize_uint8_t>
 80119da:	6929      	ldr	r1, [r5, #16]
 80119dc:	4606      	mov	r6, r0
 80119de:	4620      	mov	r0, r4
 80119e0:	f7fc f944 	bl	800dc6c <ucdr_serialize_int32_t>
 80119e4:	6969      	ldr	r1, [r5, #20]
 80119e6:	4603      	mov	r3, r0
 80119e8:	4620      	mov	r0, r4
 80119ea:	ea07 0708 	and.w	r7, r7, r8
 80119ee:	461c      	mov	r4, r3
 80119f0:	f7fb fd22 	bl	800d438 <ucdr_serialize_uint32_t>
 80119f4:	403e      	ands	r6, r7
 80119f6:	4034      	ands	r4, r6
 80119f8:	4020      	ands	r0, r4
 80119fa:	b2c0      	uxtb	r0, r0
 80119fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011a00 <uxr_deserialize_SampleIdentity>:
 8011a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a04:	220c      	movs	r2, #12
 8011a06:	4604      	mov	r4, r0
 8011a08:	460d      	mov	r5, r1
 8011a0a:	f004 fa17 	bl	8015e3c <ucdr_deserialize_array_uint8_t>
 8011a0e:	2203      	movs	r2, #3
 8011a10:	f105 010c 	add.w	r1, r5, #12
 8011a14:	4607      	mov	r7, r0
 8011a16:	4620      	mov	r0, r4
 8011a18:	f004 fa10 	bl	8015e3c <ucdr_deserialize_array_uint8_t>
 8011a1c:	f105 010f 	add.w	r1, r5, #15
 8011a20:	4680      	mov	r8, r0
 8011a22:	4620      	mov	r0, r4
 8011a24:	f7fb fb08 	bl	800d038 <ucdr_deserialize_uint8_t>
 8011a28:	f105 0110 	add.w	r1, r5, #16
 8011a2c:	4606      	mov	r6, r0
 8011a2e:	4620      	mov	r0, r4
 8011a30:	f7fc f9b4 	bl	800dd9c <ucdr_deserialize_int32_t>
 8011a34:	f105 0114 	add.w	r1, r5, #20
 8011a38:	4603      	mov	r3, r0
 8011a3a:	4620      	mov	r0, r4
 8011a3c:	ea07 0708 	and.w	r7, r7, r8
 8011a40:	461c      	mov	r4, r3
 8011a42:	f7fb fe29 	bl	800d698 <ucdr_deserialize_uint32_t>
 8011a46:	403e      	ands	r6, r7
 8011a48:	4034      	ands	r4, r6
 8011a4a:	4020      	ands	r0, r4
 8011a4c:	b2c0      	uxtb	r0, r0
 8011a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a52:	bf00      	nop

08011a54 <rcl_client_get_rmw_handle>:
 8011a54:	b118      	cbz	r0, 8011a5e <rcl_client_get_rmw_handle+0xa>
 8011a56:	6800      	ldr	r0, [r0, #0]
 8011a58:	b108      	cbz	r0, 8011a5e <rcl_client_get_rmw_handle+0xa>
 8011a5a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011a5e:	4770      	bx	lr

08011a60 <rcl_send_request>:
 8011a60:	b570      	push	{r4, r5, r6, lr}
 8011a62:	b082      	sub	sp, #8
 8011a64:	b1e8      	cbz	r0, 8011aa2 <rcl_send_request+0x42>
 8011a66:	4604      	mov	r4, r0
 8011a68:	6800      	ldr	r0, [r0, #0]
 8011a6a:	b1d0      	cbz	r0, 8011aa2 <rcl_send_request+0x42>
 8011a6c:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8011a70:	b1bb      	cbz	r3, 8011aa2 <rcl_send_request+0x42>
 8011a72:	460e      	mov	r6, r1
 8011a74:	b1d1      	cbz	r1, 8011aac <rcl_send_request+0x4c>
 8011a76:	4615      	mov	r5, r2
 8011a78:	b1c2      	cbz	r2, 8011aac <rcl_send_request+0x4c>
 8011a7a:	2105      	movs	r1, #5
 8011a7c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8011a80:	f002 fe82 	bl	8014788 <__atomic_load_8>
 8011a84:	6823      	ldr	r3, [r4, #0]
 8011a86:	e9c5 0100 	strd	r0, r1, [r5]
 8011a8a:	462a      	mov	r2, r5
 8011a8c:	4631      	mov	r1, r6
 8011a8e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011a92:	f003 fd8d 	bl	80155b0 <rmw_send_request>
 8011a96:	4606      	mov	r6, r0
 8011a98:	b160      	cbz	r0, 8011ab4 <rcl_send_request+0x54>
 8011a9a:	2601      	movs	r6, #1
 8011a9c:	4630      	mov	r0, r6
 8011a9e:	b002      	add	sp, #8
 8011aa0:	bd70      	pop	{r4, r5, r6, pc}
 8011aa2:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8011aa6:	4630      	mov	r0, r6
 8011aa8:	b002      	add	sp, #8
 8011aaa:	bd70      	pop	{r4, r5, r6, pc}
 8011aac:	260b      	movs	r6, #11
 8011aae:	4630      	mov	r0, r6
 8011ab0:	b002      	add	sp, #8
 8011ab2:	bd70      	pop	{r4, r5, r6, pc}
 8011ab4:	6820      	ldr	r0, [r4, #0]
 8011ab6:	2105      	movs	r1, #5
 8011ab8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011abc:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8011ac0:	9100      	str	r1, [sp, #0]
 8011ac2:	f002 fecd 	bl	8014860 <__atomic_exchange_8>
 8011ac6:	4630      	mov	r0, r6
 8011ac8:	b002      	add	sp, #8
 8011aca:	bd70      	pop	{r4, r5, r6, pc}
 8011acc:	0000      	movs	r0, r0
	...

08011ad0 <rcl_take_response>:
 8011ad0:	b570      	push	{r4, r5, r6, lr}
 8011ad2:	468e      	mov	lr, r1
 8011ad4:	460c      	mov	r4, r1
 8011ad6:	4616      	mov	r6, r2
 8011ad8:	4605      	mov	r5, r0
 8011ada:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011ade:	b08c      	sub	sp, #48	@ 0x30
 8011ae0:	f10d 0c18 	add.w	ip, sp, #24
 8011ae4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011ae8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011aec:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011af0:	b35d      	cbz	r5, 8011b4a <rcl_take_response+0x7a>
 8011af2:	682b      	ldr	r3, [r5, #0]
 8011af4:	b34b      	cbz	r3, 8011b4a <rcl_take_response+0x7a>
 8011af6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011afa:	b330      	cbz	r0, 8011b4a <rcl_take_response+0x7a>
 8011afc:	b346      	cbz	r6, 8011b50 <rcl_take_response+0x80>
 8011afe:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8011b58 <rcl_take_response+0x88>
 8011b02:	2300      	movs	r3, #0
 8011b04:	f88d 3007 	strb.w	r3, [sp, #7]
 8011b08:	4632      	mov	r2, r6
 8011b0a:	f10d 0307 	add.w	r3, sp, #7
 8011b0e:	a902      	add	r1, sp, #8
 8011b10:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011b14:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011b18:	f003 fe52 	bl	80157c0 <rmw_take_response>
 8011b1c:	4605      	mov	r5, r0
 8011b1e:	b9c8      	cbnz	r0, 8011b54 <rcl_take_response+0x84>
 8011b20:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011b24:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8011b28:	2a00      	cmp	r2, #0
 8011b2a:	bf08      	it	eq
 8011b2c:	461d      	moveq	r5, r3
 8011b2e:	f10d 0e18 	add.w	lr, sp, #24
 8011b32:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011b36:	46a4      	mov	ip, r4
 8011b38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011b3c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011b40:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011b44:	4628      	mov	r0, r5
 8011b46:	b00c      	add	sp, #48	@ 0x30
 8011b48:	bd70      	pop	{r4, r5, r6, pc}
 8011b4a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8011b4e:	e7ee      	b.n	8011b2e <rcl_take_response+0x5e>
 8011b50:	250b      	movs	r5, #11
 8011b52:	e7ec      	b.n	8011b2e <rcl_take_response+0x5e>
 8011b54:	2501      	movs	r5, #1
 8011b56:	e7ea      	b.n	8011b2e <rcl_take_response+0x5e>
	...

08011b60 <rcl_client_is_valid>:
 8011b60:	b130      	cbz	r0, 8011b70 <rcl_client_is_valid+0x10>
 8011b62:	6800      	ldr	r0, [r0, #0]
 8011b64:	b120      	cbz	r0, 8011b70 <rcl_client_is_valid+0x10>
 8011b66:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011b6a:	3800      	subs	r0, #0
 8011b6c:	bf18      	it	ne
 8011b6e:	2001      	movne	r0, #1
 8011b70:	4770      	bx	lr
 8011b72:	bf00      	nop

08011b74 <rcl_convert_rmw_ret_to_rcl_ret>:
 8011b74:	280b      	cmp	r0, #11
 8011b76:	dc0d      	bgt.n	8011b94 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8011b78:	2800      	cmp	r0, #0
 8011b7a:	db09      	blt.n	8011b90 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8011b7c:	280b      	cmp	r0, #11
 8011b7e:	d807      	bhi.n	8011b90 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8011b80:	e8df f000 	tbb	[pc, r0]
 8011b84:	07060607 	.word	0x07060607
 8011b88:	06060606 	.word	0x06060606
 8011b8c:	07070606 	.word	0x07070606
 8011b90:	2001      	movs	r0, #1
 8011b92:	4770      	bx	lr
 8011b94:	28cb      	cmp	r0, #203	@ 0xcb
 8011b96:	bf18      	it	ne
 8011b98:	2001      	movne	r0, #1
 8011b9a:	4770      	bx	lr

08011b9c <rcl_get_zero_initialized_context>:
 8011b9c:	4a03      	ldr	r2, [pc, #12]	@ (8011bac <rcl_get_zero_initialized_context+0x10>)
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ba4:	e883 0003 	stmia.w	r3, {r0, r1}
 8011ba8:	4618      	mov	r0, r3
 8011baa:	4770      	bx	lr
 8011bac:	08018ff0 	.word	0x08018ff0

08011bb0 <rcl_context_is_valid>:
 8011bb0:	b118      	cbz	r0, 8011bba <rcl_context_is_valid+0xa>
 8011bb2:	6840      	ldr	r0, [r0, #4]
 8011bb4:	3800      	subs	r0, #0
 8011bb6:	bf18      	it	ne
 8011bb8:	2001      	movne	r0, #1
 8011bba:	4770      	bx	lr

08011bbc <__cleanup_context>:
 8011bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bc0:	4606      	mov	r6, r0
 8011bc2:	6800      	ldr	r0, [r0, #0]
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	6073      	str	r3, [r6, #4]
 8011bc8:	2800      	cmp	r0, #0
 8011bca:	d049      	beq.n	8011c60 <__cleanup_context+0xa4>
 8011bcc:	6947      	ldr	r7, [r0, #20]
 8011bce:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8011bd2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8011bd6:	b137      	cbz	r7, 8011be6 <__cleanup_context+0x2a>
 8011bd8:	3014      	adds	r0, #20
 8011bda:	f7f8 fd55 	bl	800a688 <rcl_init_options_fini>
 8011bde:	4607      	mov	r7, r0
 8011be0:	2800      	cmp	r0, #0
 8011be2:	d144      	bne.n	8011c6e <__cleanup_context+0xb2>
 8011be4:	6830      	ldr	r0, [r6, #0]
 8011be6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011be8:	b143      	cbz	r3, 8011bfc <__cleanup_context+0x40>
 8011bea:	3028      	adds	r0, #40	@ 0x28
 8011bec:	f7fa f980 	bl	800bef0 <rmw_context_fini>
 8011bf0:	b118      	cbz	r0, 8011bfa <__cleanup_context+0x3e>
 8011bf2:	2f00      	cmp	r7, #0
 8011bf4:	d03e      	beq.n	8011c74 <__cleanup_context+0xb8>
 8011bf6:	f7f9 feb3 	bl	800b960 <rcutils_reset_error>
 8011bfa:	6830      	ldr	r0, [r6, #0]
 8011bfc:	6a03      	ldr	r3, [r0, #32]
 8011bfe:	b1db      	cbz	r3, 8011c38 <__cleanup_context+0x7c>
 8011c00:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8011c04:	2a01      	cmp	r2, #1
 8011c06:	f17c 0100 	sbcs.w	r1, ip, #0
 8011c0a:	db11      	blt.n	8011c30 <__cleanup_context+0x74>
 8011c0c:	2400      	movs	r4, #0
 8011c0e:	4625      	mov	r5, r4
 8011c10:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011c14:	4649      	mov	r1, r9
 8011c16:	b1b8      	cbz	r0, 8011c48 <__cleanup_context+0x8c>
 8011c18:	47c0      	blx	r8
 8011c1a:	6833      	ldr	r3, [r6, #0]
 8011c1c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8011c20:	3401      	adds	r4, #1
 8011c22:	f145 0500 	adc.w	r5, r5, #0
 8011c26:	4294      	cmp	r4, r2
 8011c28:	eb75 010c 	sbcs.w	r1, r5, ip
 8011c2c:	6a1b      	ldr	r3, [r3, #32]
 8011c2e:	dbef      	blt.n	8011c10 <__cleanup_context+0x54>
 8011c30:	4618      	mov	r0, r3
 8011c32:	4649      	mov	r1, r9
 8011c34:	47c0      	blx	r8
 8011c36:	6830      	ldr	r0, [r6, #0]
 8011c38:	4649      	mov	r1, r9
 8011c3a:	47c0      	blx	r8
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	e9c6 3300 	strd	r3, r3, [r6]
 8011c42:	4638      	mov	r0, r7
 8011c44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c48:	3401      	adds	r4, #1
 8011c4a:	f145 0500 	adc.w	r5, r5, #0
 8011c4e:	4294      	cmp	r4, r2
 8011c50:	eb75 010c 	sbcs.w	r1, r5, ip
 8011c54:	dbdc      	blt.n	8011c10 <__cleanup_context+0x54>
 8011c56:	4618      	mov	r0, r3
 8011c58:	4649      	mov	r1, r9
 8011c5a:	47c0      	blx	r8
 8011c5c:	6830      	ldr	r0, [r6, #0]
 8011c5e:	e7eb      	b.n	8011c38 <__cleanup_context+0x7c>
 8011c60:	4607      	mov	r7, r0
 8011c62:	2300      	movs	r3, #0
 8011c64:	e9c6 3300 	strd	r3, r3, [r6]
 8011c68:	4638      	mov	r0, r7
 8011c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c6e:	f7f9 fe77 	bl	800b960 <rcutils_reset_error>
 8011c72:	e7b7      	b.n	8011be4 <__cleanup_context+0x28>
 8011c74:	f7ff ff7e 	bl	8011b74 <rcl_convert_rmw_ret_to_rcl_ret>
 8011c78:	4607      	mov	r7, r0
 8011c7a:	e7bc      	b.n	8011bf6 <__cleanup_context+0x3a>

08011c7c <rcl_init>:
 8011c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c80:	1e05      	subs	r5, r0, #0
 8011c82:	b09e      	sub	sp, #120	@ 0x78
 8011c84:	460e      	mov	r6, r1
 8011c86:	4690      	mov	r8, r2
 8011c88:	461f      	mov	r7, r3
 8011c8a:	f340 809c 	ble.w	8011dc6 <rcl_init+0x14a>
 8011c8e:	2900      	cmp	r1, #0
 8011c90:	f000 809c 	beq.w	8011dcc <rcl_init+0x150>
 8011c94:	f1a1 0e04 	sub.w	lr, r1, #4
 8011c98:	f04f 0c00 	mov.w	ip, #0
 8011c9c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8011ca0:	f10c 0c01 	add.w	ip, ip, #1
 8011ca4:	2c00      	cmp	r4, #0
 8011ca6:	f000 8091 	beq.w	8011dcc <rcl_init+0x150>
 8011caa:	4565      	cmp	r5, ip
 8011cac:	d1f6      	bne.n	8011c9c <rcl_init+0x20>
 8011cae:	f1b8 0f00 	cmp.w	r8, #0
 8011cb2:	f000 808b 	beq.w	8011dcc <rcl_init+0x150>
 8011cb6:	f8d8 4000 	ldr.w	r4, [r8]
 8011cba:	2c00      	cmp	r4, #0
 8011cbc:	f000 8086 	beq.w	8011dcc <rcl_init+0x150>
 8011cc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011cc2:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8011cc6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011cca:	6823      	ldr	r3, [r4, #0]
 8011ccc:	f8cc 3000 	str.w	r3, [ip]
 8011cd0:	a819      	add	r0, sp, #100	@ 0x64
 8011cd2:	f7f9 fe1f 	bl	800b914 <rcutils_allocator_is_valid>
 8011cd6:	2800      	cmp	r0, #0
 8011cd8:	d078      	beq.n	8011dcc <rcl_init+0x150>
 8011cda:	2f00      	cmp	r7, #0
 8011cdc:	d076      	beq.n	8011dcc <rcl_init+0x150>
 8011cde:	683b      	ldr	r3, [r7, #0]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d178      	bne.n	8011dd6 <rcl_init+0x15a>
 8011ce4:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8011ce8:	2178      	movs	r1, #120	@ 0x78
 8011cea:	2001      	movs	r0, #1
 8011cec:	4798      	blx	r3
 8011cee:	4604      	mov	r4, r0
 8011cf0:	6038      	str	r0, [r7, #0]
 8011cf2:	2800      	cmp	r0, #0
 8011cf4:	f000 80b6 	beq.w	8011e64 <rcl_init+0x1e8>
 8011cf8:	a802      	add	r0, sp, #8
 8011cfa:	f003 f895 	bl	8014e28 <rmw_get_zero_initialized_context>
 8011cfe:	a902      	add	r1, sp, #8
 8011d00:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8011d04:	2250      	movs	r2, #80	@ 0x50
 8011d06:	ac19      	add	r4, sp, #100	@ 0x64
 8011d08:	f005 ff5f 	bl	8017bca <memcpy>
 8011d0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011d0e:	f8d7 e000 	ldr.w	lr, [r7]
 8011d12:	46f4      	mov	ip, lr
 8011d14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011d18:	6823      	ldr	r3, [r4, #0]
 8011d1a:	f8cc 3000 	str.w	r3, [ip]
 8011d1e:	f10e 0114 	add.w	r1, lr, #20
 8011d22:	4640      	mov	r0, r8
 8011d24:	f7f8 fcda 	bl	800a6dc <rcl_init_options_copy>
 8011d28:	4604      	mov	r4, r0
 8011d2a:	2800      	cmp	r0, #0
 8011d2c:	d144      	bne.n	8011db8 <rcl_init+0x13c>
 8011d2e:	f8d7 9000 	ldr.w	r9, [r7]
 8011d32:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8011d36:	f8c9 0020 	str.w	r0, [r9, #32]
 8011d3a:	f8c9 5018 	str.w	r5, [r9, #24]
 8011d3e:	f8c9 801c 	str.w	r8, [r9, #28]
 8011d42:	2d00      	cmp	r5, #0
 8011d44:	d04e      	beq.n	8011de4 <rcl_init+0x168>
 8011d46:	2e00      	cmp	r6, #0
 8011d48:	d04c      	beq.n	8011de4 <rcl_init+0x168>
 8011d4a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8011d4e:	2104      	movs	r1, #4
 8011d50:	4628      	mov	r0, r5
 8011d52:	4798      	blx	r3
 8011d54:	f8c9 0020 	str.w	r0, [r9, #32]
 8011d58:	f8d7 9000 	ldr.w	r9, [r7]
 8011d5c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8011d60:	46ca      	mov	sl, r9
 8011d62:	b343      	cbz	r3, 8011db6 <rcl_init+0x13a>
 8011d64:	2d01      	cmp	r5, #1
 8011d66:	f178 0300 	sbcs.w	r3, r8, #0
 8011d6a:	db3b      	blt.n	8011de4 <rcl_init+0x168>
 8011d6c:	2400      	movs	r4, #0
 8011d6e:	3e04      	subs	r6, #4
 8011d70:	46a1      	mov	r9, r4
 8011d72:	e00b      	b.n	8011d8c <rcl_init+0x110>
 8011d74:	6831      	ldr	r1, [r6, #0]
 8011d76:	f005 ff28 	bl	8017bca <memcpy>
 8011d7a:	3401      	adds	r4, #1
 8011d7c:	f149 0900 	adc.w	r9, r9, #0
 8011d80:	45c8      	cmp	r8, r9
 8011d82:	bf08      	it	eq
 8011d84:	42a5      	cmpeq	r5, r4
 8011d86:	d02b      	beq.n	8011de0 <rcl_init+0x164>
 8011d88:	f8d7 a000 	ldr.w	sl, [r7]
 8011d8c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8011d90:	f7ee fa50 	bl	8000234 <strlen>
 8011d94:	1c42      	adds	r2, r0, #1
 8011d96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011d98:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8011d9a:	f8da a020 	ldr.w	sl, [sl, #32]
 8011d9e:	9201      	str	r2, [sp, #4]
 8011da0:	4610      	mov	r0, r2
 8011da2:	4798      	blx	r3
 8011da4:	683b      	ldr	r3, [r7, #0]
 8011da6:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8011daa:	6a1b      	ldr	r3, [r3, #32]
 8011dac:	9a01      	ldr	r2, [sp, #4]
 8011dae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011db2:	2800      	cmp	r0, #0
 8011db4:	d1de      	bne.n	8011d74 <rcl_init+0xf8>
 8011db6:	240a      	movs	r4, #10
 8011db8:	4638      	mov	r0, r7
 8011dba:	f7ff feff 	bl	8011bbc <__cleanup_context>
 8011dbe:	4620      	mov	r0, r4
 8011dc0:	b01e      	add	sp, #120	@ 0x78
 8011dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011dc6:	2900      	cmp	r1, #0
 8011dc8:	f43f af71 	beq.w	8011cae <rcl_init+0x32>
 8011dcc:	240b      	movs	r4, #11
 8011dce:	4620      	mov	r0, r4
 8011dd0:	b01e      	add	sp, #120	@ 0x78
 8011dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011dd6:	2464      	movs	r4, #100	@ 0x64
 8011dd8:	4620      	mov	r0, r4
 8011dda:	b01e      	add	sp, #120	@ 0x78
 8011ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011de0:	f8d7 9000 	ldr.w	r9, [r7]
 8011de4:	4926      	ldr	r1, [pc, #152]	@ (8011e80 <rcl_init+0x204>)
 8011de6:	680b      	ldr	r3, [r1, #0]
 8011de8:	3301      	adds	r3, #1
 8011dea:	d036      	beq.n	8011e5a <rcl_init+0x1de>
 8011dec:	600b      	str	r3, [r1, #0]
 8011dee:	461a      	mov	r2, r3
 8011df0:	2400      	movs	r4, #0
 8011df2:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8011df6:	607b      	str	r3, [r7, #4]
 8011df8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8011dfa:	3301      	adds	r3, #1
 8011dfc:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8011e00:	d034      	beq.n	8011e6c <rcl_init+0x1f0>
 8011e02:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8011e06:	b93b      	cbnz	r3, 8011e18 <rcl_init+0x19c>
 8011e08:	3030      	adds	r0, #48	@ 0x30
 8011e0a:	f000 f83b 	bl	8011e84 <rcl_get_localhost_only>
 8011e0e:	4604      	mov	r4, r0
 8011e10:	2800      	cmp	r0, #0
 8011e12:	d1d1      	bne.n	8011db8 <rcl_init+0x13c>
 8011e14:	683b      	ldr	r3, [r7, #0]
 8011e16:	6958      	ldr	r0, [r3, #20]
 8011e18:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8011e1a:	aa18      	add	r2, sp, #96	@ 0x60
 8011e1c:	a917      	add	r1, sp, #92	@ 0x5c
 8011e1e:	f001 f94d 	bl	80130bc <rcl_validate_enclave_name>
 8011e22:	4604      	mov	r4, r0
 8011e24:	2800      	cmp	r0, #0
 8011e26:	d1c7      	bne.n	8011db8 <rcl_init+0x13c>
 8011e28:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011e2a:	b9eb      	cbnz	r3, 8011e68 <rcl_init+0x1ec>
 8011e2c:	6839      	ldr	r1, [r7, #0]
 8011e2e:	694b      	ldr	r3, [r1, #20]
 8011e30:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8011e32:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8011e36:	f000 fb3f 	bl	80124b8 <rcl_get_security_options_from_environment>
 8011e3a:	4604      	mov	r4, r0
 8011e3c:	2800      	cmp	r0, #0
 8011e3e:	d1bb      	bne.n	8011db8 <rcl_init+0x13c>
 8011e40:	6839      	ldr	r1, [r7, #0]
 8011e42:	6948      	ldr	r0, [r1, #20]
 8011e44:	3128      	adds	r1, #40	@ 0x28
 8011e46:	3018      	adds	r0, #24
 8011e48:	f7f9 ff1c 	bl	800bc84 <rmw_init>
 8011e4c:	4604      	mov	r4, r0
 8011e4e:	2800      	cmp	r0, #0
 8011e50:	d0bd      	beq.n	8011dce <rcl_init+0x152>
 8011e52:	f7ff fe8f 	bl	8011b74 <rcl_convert_rmw_ret_to_rcl_ret>
 8011e56:	4604      	mov	r4, r0
 8011e58:	e7ae      	b.n	8011db8 <rcl_init+0x13c>
 8011e5a:	2201      	movs	r2, #1
 8011e5c:	461c      	mov	r4, r3
 8011e5e:	600a      	str	r2, [r1, #0]
 8011e60:	4613      	mov	r3, r2
 8011e62:	e7c6      	b.n	8011df2 <rcl_init+0x176>
 8011e64:	240a      	movs	r4, #10
 8011e66:	e7b2      	b.n	8011dce <rcl_init+0x152>
 8011e68:	2401      	movs	r4, #1
 8011e6a:	e7a5      	b.n	8011db8 <rcl_init+0x13c>
 8011e6c:	3024      	adds	r0, #36	@ 0x24
 8011e6e:	f004 fe21 	bl	8016ab4 <rcl_get_default_domain_id>
 8011e72:	4604      	mov	r4, r0
 8011e74:	2800      	cmp	r0, #0
 8011e76:	d19f      	bne.n	8011db8 <rcl_init+0x13c>
 8011e78:	683b      	ldr	r3, [r7, #0]
 8011e7a:	6958      	ldr	r0, [r3, #20]
 8011e7c:	e7c1      	b.n	8011e02 <rcl_init+0x186>
 8011e7e:	bf00      	nop
 8011e80:	2000aba8 	.word	0x2000aba8

08011e84 <rcl_get_localhost_only>:
 8011e84:	b510      	push	{r4, lr}
 8011e86:	b082      	sub	sp, #8
 8011e88:	2300      	movs	r3, #0
 8011e8a:	9301      	str	r3, [sp, #4]
 8011e8c:	b1b8      	cbz	r0, 8011ebe <rcl_get_localhost_only+0x3a>
 8011e8e:	4604      	mov	r4, r0
 8011e90:	a901      	add	r1, sp, #4
 8011e92:	480c      	ldr	r0, [pc, #48]	@ (8011ec4 <rcl_get_localhost_only+0x40>)
 8011e94:	f002 fd1c 	bl	80148d0 <rcutils_get_env>
 8011e98:	b110      	cbz	r0, 8011ea0 <rcl_get_localhost_only+0x1c>
 8011e9a:	2001      	movs	r0, #1
 8011e9c:	b002      	add	sp, #8
 8011e9e:	bd10      	pop	{r4, pc}
 8011ea0:	9b01      	ldr	r3, [sp, #4]
 8011ea2:	b113      	cbz	r3, 8011eaa <rcl_get_localhost_only+0x26>
 8011ea4:	781a      	ldrb	r2, [r3, #0]
 8011ea6:	2a31      	cmp	r2, #49	@ 0x31
 8011ea8:	d004      	beq.n	8011eb4 <rcl_get_localhost_only+0x30>
 8011eaa:	2302      	movs	r3, #2
 8011eac:	2000      	movs	r0, #0
 8011eae:	7023      	strb	r3, [r4, #0]
 8011eb0:	b002      	add	sp, #8
 8011eb2:	bd10      	pop	{r4, pc}
 8011eb4:	785b      	ldrb	r3, [r3, #1]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d1f7      	bne.n	8011eaa <rcl_get_localhost_only+0x26>
 8011eba:	2301      	movs	r3, #1
 8011ebc:	e7f6      	b.n	8011eac <rcl_get_localhost_only+0x28>
 8011ebe:	200b      	movs	r0, #11
 8011ec0:	b002      	add	sp, #8
 8011ec2:	bd10      	pop	{r4, pc}
 8011ec4:	08018ff8 	.word	0x08018ff8

08011ec8 <rcl_get_zero_initialized_node>:
 8011ec8:	4a03      	ldr	r2, [pc, #12]	@ (8011ed8 <rcl_get_zero_initialized_node+0x10>)
 8011eca:	4603      	mov	r3, r0
 8011ecc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ed0:	e883 0003 	stmia.w	r3, {r0, r1}
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	4770      	bx	lr
 8011ed8:	08019014 	.word	0x08019014

08011edc <rcl_node_init>:
 8011edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ee0:	b0a9      	sub	sp, #164	@ 0xa4
 8011ee2:	4604      	mov	r4, r0
 8011ee4:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8011ee8:	a823      	add	r0, sp, #140	@ 0x8c
 8011eea:	460e      	mov	r6, r1
 8011eec:	4615      	mov	r5, r2
 8011eee:	461f      	mov	r7, r3
 8011ef0:	f005 f854 	bl	8016f9c <rcl_guard_condition_get_default_options>
 8011ef4:	f1b8 0f00 	cmp.w	r8, #0
 8011ef8:	f000 80e6 	beq.w	80120c8 <rcl_node_init+0x1ec>
 8011efc:	4640      	mov	r0, r8
 8011efe:	f7f9 fd09 	bl	800b914 <rcutils_allocator_is_valid>
 8011f02:	2800      	cmp	r0, #0
 8011f04:	f000 80e0 	beq.w	80120c8 <rcl_node_init+0x1ec>
 8011f08:	2e00      	cmp	r6, #0
 8011f0a:	f000 80dd 	beq.w	80120c8 <rcl_node_init+0x1ec>
 8011f0e:	2d00      	cmp	r5, #0
 8011f10:	f000 80da 	beq.w	80120c8 <rcl_node_init+0x1ec>
 8011f14:	2c00      	cmp	r4, #0
 8011f16:	f000 80d7 	beq.w	80120c8 <rcl_node_init+0x1ec>
 8011f1a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011f1e:	f1b9 0f00 	cmp.w	r9, #0
 8011f22:	f040 80fd 	bne.w	8012120 <rcl_node_init+0x244>
 8011f26:	2f00      	cmp	r7, #0
 8011f28:	f000 80ce 	beq.w	80120c8 <rcl_node_init+0x1ec>
 8011f2c:	4638      	mov	r0, r7
 8011f2e:	f7ff fe3f 	bl	8011bb0 <rcl_context_is_valid>
 8011f32:	4682      	mov	sl, r0
 8011f34:	2800      	cmp	r0, #0
 8011f36:	f000 80cd 	beq.w	80120d4 <rcl_node_init+0x1f8>
 8011f3a:	464a      	mov	r2, r9
 8011f3c:	a922      	add	r1, sp, #136	@ 0x88
 8011f3e:	4630      	mov	r0, r6
 8011f40:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8011f44:	f003 f90e 	bl	8015164 <rmw_validate_node_name>
 8011f48:	4681      	mov	r9, r0
 8011f4a:	2800      	cmp	r0, #0
 8011f4c:	f040 80be 	bne.w	80120cc <rcl_node_init+0x1f0>
 8011f50:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8011f52:	2800      	cmp	r0, #0
 8011f54:	f040 80f0 	bne.w	8012138 <rcl_node_init+0x25c>
 8011f58:	4628      	mov	r0, r5
 8011f5a:	f7ee f96b 	bl	8000234 <strlen>
 8011f5e:	2800      	cmp	r0, #0
 8011f60:	f040 80bb 	bne.w	80120da <rcl_node_init+0x1fe>
 8011f64:	4d7c      	ldr	r5, [pc, #496]	@ (8012158 <rcl_node_init+0x27c>)
 8011f66:	a922      	add	r1, sp, #136	@ 0x88
 8011f68:	2200      	movs	r2, #0
 8011f6a:	4628      	mov	r0, r5
 8011f6c:	f003 f8dc 	bl	8015128 <rmw_validate_namespace>
 8011f70:	4681      	mov	r9, r0
 8011f72:	2800      	cmp	r0, #0
 8011f74:	f040 80aa 	bne.w	80120cc <rcl_node_init+0x1f0>
 8011f78:	4682      	mov	sl, r0
 8011f7a:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8011f7c:	2800      	cmp	r0, #0
 8011f7e:	f040 80e0 	bne.w	8012142 <rcl_node_init+0x266>
 8011f82:	f8d8 3000 	ldr.w	r3, [r8]
 8011f86:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011f8a:	2078      	movs	r0, #120	@ 0x78
 8011f8c:	4798      	blx	r3
 8011f8e:	4681      	mov	r9, r0
 8011f90:	6060      	str	r0, [r4, #4]
 8011f92:	2800      	cmp	r0, #0
 8011f94:	f000 80ca 	beq.w	801212c <rcl_node_init+0x250>
 8011f98:	2200      	movs	r2, #0
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8011fa0:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8011fa4:	a808      	add	r0, sp, #32
 8011fa6:	f000 f907 	bl	80121b8 <rcl_node_get_default_options>
 8011faa:	a908      	add	r1, sp, #32
 8011fac:	4648      	mov	r0, r9
 8011fae:	2268      	movs	r2, #104	@ 0x68
 8011fb0:	f005 fe0b 	bl	8017bca <memcpy>
 8011fb4:	6861      	ldr	r1, [r4, #4]
 8011fb6:	6027      	str	r7, [r4, #0]
 8011fb8:	4640      	mov	r0, r8
 8011fba:	f000 f90b 	bl	80121d4 <rcl_node_options_copy>
 8011fbe:	2800      	cmp	r0, #0
 8011fc0:	d158      	bne.n	8012074 <rcl_node_init+0x198>
 8011fc2:	4628      	mov	r0, r5
 8011fc4:	f7ee f936 	bl	8000234 <strlen>
 8011fc8:	4428      	add	r0, r5
 8011fca:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8011fce:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8011fd2:	2b2f      	cmp	r3, #47	@ 0x2f
 8011fd4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011fd8:	9300      	str	r3, [sp, #0]
 8011fda:	bf0c      	ite	eq
 8011fdc:	4b5f      	ldreq	r3, [pc, #380]	@ (801215c <rcl_node_init+0x280>)
 8011fde:	4b60      	ldrne	r3, [pc, #384]	@ (8012160 <rcl_node_init+0x284>)
 8011fe0:	9302      	str	r3, [sp, #8]
 8011fe2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011fe6:	9301      	str	r3, [sp, #4]
 8011fe8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8011fec:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011ff0:	f002 fc96 	bl	8014920 <rcutils_format_string_limit>
 8011ff4:	6823      	ldr	r3, [r4, #0]
 8011ff6:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 8011ffa:	6818      	ldr	r0, [r3, #0]
 8011ffc:	4631      	mov	r1, r6
 8011ffe:	3028      	adds	r0, #40	@ 0x28
 8012000:	462a      	mov	r2, r5
 8012002:	6866      	ldr	r6, [r4, #4]
 8012004:	f7fa f820 	bl	800c048 <rmw_create_node>
 8012008:	6863      	ldr	r3, [r4, #4]
 801200a:	66b0      	str	r0, [r6, #104]	@ 0x68
 801200c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801200e:	2800      	cmp	r0, #0
 8012010:	d032      	beq.n	8012078 <rcl_node_init+0x19c>
 8012012:	f7fa f8ad 	bl	800c170 <rmw_node_get_graph_guard_condition>
 8012016:	4681      	mov	r9, r0
 8012018:	b360      	cbz	r0, 8012074 <rcl_node_init+0x198>
 801201a:	f8d8 3000 	ldr.w	r3, [r8]
 801201e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012022:	6866      	ldr	r6, [r4, #4]
 8012024:	2008      	movs	r0, #8
 8012026:	4798      	blx	r3
 8012028:	6863      	ldr	r3, [r4, #4]
 801202a:	66f0      	str	r0, [r6, #108]	@ 0x6c
 801202c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8012030:	f1bb 0f00 	cmp.w	fp, #0
 8012034:	d020      	beq.n	8012078 <rcl_node_init+0x19c>
 8012036:	a806      	add	r0, sp, #24
 8012038:	f004 fed4 	bl	8016de4 <rcl_get_zero_initialized_guard_condition>
 801203c:	a806      	add	r0, sp, #24
 801203e:	c803      	ldmia	r0, {r0, r1}
 8012040:	6863      	ldr	r3, [r4, #4]
 8012042:	46c4      	mov	ip, r8
 8012044:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8012048:	e88b 0003 	stmia.w	fp, {r0, r1}
 801204c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012050:	ae23      	add	r6, sp, #140	@ 0x8c
 8012052:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012054:	f8dc 3000 	ldr.w	r3, [ip]
 8012058:	6033      	str	r3, [r6, #0]
 801205a:	ab28      	add	r3, sp, #160	@ 0xa0
 801205c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8012060:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8012064:	4649      	mov	r1, r9
 8012066:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012068:	463a      	mov	r2, r7
 801206a:	4670      	mov	r0, lr
 801206c:	f004 ff10 	bl	8016e90 <rcl_guard_condition_init_from_rmw>
 8012070:	4681      	mov	r9, r0
 8012072:	b328      	cbz	r0, 80120c0 <rcl_node_init+0x1e4>
 8012074:	6863      	ldr	r3, [r4, #4]
 8012076:	b1f3      	cbz	r3, 80120b6 <rcl_node_init+0x1da>
 8012078:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801207a:	b128      	cbz	r0, 8012088 <rcl_node_init+0x1ac>
 801207c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012080:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012084:	4798      	blx	r3
 8012086:	6863      	ldr	r3, [r4, #4]
 8012088:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801208a:	b110      	cbz	r0, 8012092 <rcl_node_init+0x1b6>
 801208c:	f7f9 fff4 	bl	800c078 <rmw_destroy_node>
 8012090:	6863      	ldr	r3, [r4, #4]
 8012092:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8012094:	b148      	cbz	r0, 80120aa <rcl_node_init+0x1ce>
 8012096:	f004 ff5b 	bl	8016f50 <rcl_guard_condition_fini>
 801209a:	6863      	ldr	r3, [r4, #4]
 801209c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80120a0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80120a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80120a6:	4798      	blx	r3
 80120a8:	6863      	ldr	r3, [r4, #4]
 80120aa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80120ae:	4618      	mov	r0, r3
 80120b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80120b4:	4798      	blx	r3
 80120b6:	2300      	movs	r3, #0
 80120b8:	e9c4 3300 	strd	r3, r3, [r4]
 80120bc:	f04f 0901 	mov.w	r9, #1
 80120c0:	f1ba 0f00 	cmp.w	sl, #0
 80120c4:	d125      	bne.n	8012112 <rcl_node_init+0x236>
 80120c6:	e001      	b.n	80120cc <rcl_node_init+0x1f0>
 80120c8:	f04f 090b 	mov.w	r9, #11
 80120cc:	4648      	mov	r0, r9
 80120ce:	b029      	add	sp, #164	@ 0xa4
 80120d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120d4:	f04f 0965 	mov.w	r9, #101	@ 0x65
 80120d8:	e7f8      	b.n	80120cc <rcl_node_init+0x1f0>
 80120da:	782b      	ldrb	r3, [r5, #0]
 80120dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80120de:	f43f af42 	beq.w	8011f66 <rcl_node_init+0x8a>
 80120e2:	9503      	str	r5, [sp, #12]
 80120e4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80120e8:	9300      	str	r3, [sp, #0]
 80120ea:	4b1e      	ldr	r3, [pc, #120]	@ (8012164 <rcl_node_init+0x288>)
 80120ec:	9302      	str	r3, [sp, #8]
 80120ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80120f2:	9301      	str	r3, [sp, #4]
 80120f4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80120f8:	f002 fc12 	bl	8014920 <rcutils_format_string_limit>
 80120fc:	4605      	mov	r5, r0
 80120fe:	b340      	cbz	r0, 8012152 <rcl_node_init+0x276>
 8012100:	2200      	movs	r2, #0
 8012102:	a922      	add	r1, sp, #136	@ 0x88
 8012104:	9222      	str	r2, [sp, #136]	@ 0x88
 8012106:	f003 f80f 	bl	8015128 <rmw_validate_namespace>
 801210a:	4681      	mov	r9, r0
 801210c:	2800      	cmp	r0, #0
 801210e:	f43f af34 	beq.w	8011f7a <rcl_node_init+0x9e>
 8012112:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012116:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801211a:	4628      	mov	r0, r5
 801211c:	4798      	blx	r3
 801211e:	e7d5      	b.n	80120cc <rcl_node_init+0x1f0>
 8012120:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8012124:	4648      	mov	r0, r9
 8012126:	b029      	add	sp, #164	@ 0xa4
 8012128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801212c:	f04f 090a 	mov.w	r9, #10
 8012130:	f1ba 0f00 	cmp.w	sl, #0
 8012134:	d1ed      	bne.n	8012112 <rcl_node_init+0x236>
 8012136:	e7c9      	b.n	80120cc <rcl_node_init+0x1f0>
 8012138:	f003 f866 	bl	8015208 <rmw_node_name_validation_result_string>
 801213c:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8012140:	e7c4      	b.n	80120cc <rcl_node_init+0x1f0>
 8012142:	f003 f803 	bl	801514c <rmw_namespace_validation_result_string>
 8012146:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 801214a:	f1ba 0f00 	cmp.w	sl, #0
 801214e:	d1e0      	bne.n	8012112 <rcl_node_init+0x236>
 8012150:	e7bc      	b.n	80120cc <rcl_node_init+0x1f0>
 8012152:	f04f 090a 	mov.w	r9, #10
 8012156:	e7b9      	b.n	80120cc <rcl_node_init+0x1f0>
 8012158:	08018c48 	.word	0x08018c48
 801215c:	08018c94 	.word	0x08018c94
 8012160:	08018c4c 	.word	0x08018c4c
 8012164:	08019010 	.word	0x08019010

08012168 <rcl_node_is_valid>:
 8012168:	b130      	cbz	r0, 8012178 <rcl_node_is_valid+0x10>
 801216a:	6843      	ldr	r3, [r0, #4]
 801216c:	b123      	cbz	r3, 8012178 <rcl_node_is_valid+0x10>
 801216e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012170:	b113      	cbz	r3, 8012178 <rcl_node_is_valid+0x10>
 8012172:	6800      	ldr	r0, [r0, #0]
 8012174:	f7ff bd1c 	b.w	8011bb0 <rcl_context_is_valid>
 8012178:	2000      	movs	r0, #0
 801217a:	4770      	bx	lr

0801217c <rcl_node_get_name>:
 801217c:	b120      	cbz	r0, 8012188 <rcl_node_get_name+0xc>
 801217e:	6840      	ldr	r0, [r0, #4]
 8012180:	b110      	cbz	r0, 8012188 <rcl_node_get_name+0xc>
 8012182:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8012184:	b100      	cbz	r0, 8012188 <rcl_node_get_name+0xc>
 8012186:	6880      	ldr	r0, [r0, #8]
 8012188:	4770      	bx	lr
 801218a:	bf00      	nop

0801218c <rcl_node_get_namespace>:
 801218c:	b120      	cbz	r0, 8012198 <rcl_node_get_namespace+0xc>
 801218e:	6840      	ldr	r0, [r0, #4]
 8012190:	b110      	cbz	r0, 8012198 <rcl_node_get_namespace+0xc>
 8012192:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8012194:	b100      	cbz	r0, 8012198 <rcl_node_get_namespace+0xc>
 8012196:	68c0      	ldr	r0, [r0, #12]
 8012198:	4770      	bx	lr
 801219a:	bf00      	nop

0801219c <rcl_node_get_options>:
 801219c:	b128      	cbz	r0, 80121aa <rcl_node_get_options+0xe>
 801219e:	6840      	ldr	r0, [r0, #4]
 80121a0:	b118      	cbz	r0, 80121aa <rcl_node_get_options+0xe>
 80121a2:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	bf08      	it	eq
 80121a8:	2000      	moveq	r0, #0
 80121aa:	4770      	bx	lr

080121ac <rcl_node_get_rmw_handle>:
 80121ac:	b110      	cbz	r0, 80121b4 <rcl_node_get_rmw_handle+0x8>
 80121ae:	6840      	ldr	r0, [r0, #4]
 80121b0:	b100      	cbz	r0, 80121b4 <rcl_node_get_rmw_handle+0x8>
 80121b2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80121b4:	4770      	bx	lr
 80121b6:	bf00      	nop

080121b8 <rcl_node_get_default_options>:
 80121b8:	b510      	push	{r4, lr}
 80121ba:	2268      	movs	r2, #104	@ 0x68
 80121bc:	4604      	mov	r4, r0
 80121be:	2100      	movs	r1, #0
 80121c0:	f005 fc3a 	bl	8017a38 <memset>
 80121c4:	4620      	mov	r0, r4
 80121c6:	f7f9 fb97 	bl	800b8f8 <rcutils_get_default_allocator>
 80121ca:	2301      	movs	r3, #1
 80121cc:	7523      	strb	r3, [r4, #20]
 80121ce:	4620      	mov	r0, r4
 80121d0:	bd10      	pop	{r4, pc}
 80121d2:	bf00      	nop

080121d4 <rcl_node_options_copy>:
 80121d4:	b1d0      	cbz	r0, 801220c <rcl_node_options_copy+0x38>
 80121d6:	b570      	push	{r4, r5, r6, lr}
 80121d8:	460c      	mov	r4, r1
 80121da:	b1a9      	cbz	r1, 8012208 <rcl_node_options_copy+0x34>
 80121dc:	4288      	cmp	r0, r1
 80121de:	4684      	mov	ip, r0
 80121e0:	d012      	beq.n	8012208 <rcl_node_options_copy+0x34>
 80121e2:	4605      	mov	r5, r0
 80121e4:	8a86      	ldrh	r6, [r0, #20]
 80121e6:	468e      	mov	lr, r1
 80121e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80121ea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80121ee:	682b      	ldr	r3, [r5, #0]
 80121f0:	f8ce 3000 	str.w	r3, [lr]
 80121f4:	f10c 0118 	add.w	r1, ip, #24
 80121f8:	2250      	movs	r2, #80	@ 0x50
 80121fa:	82a6      	strh	r6, [r4, #20]
 80121fc:	f104 0018 	add.w	r0, r4, #24
 8012200:	f005 fce3 	bl	8017bca <memcpy>
 8012204:	2000      	movs	r0, #0
 8012206:	bd70      	pop	{r4, r5, r6, pc}
 8012208:	200b      	movs	r0, #11
 801220a:	bd70      	pop	{r4, r5, r6, pc}
 801220c:	200b      	movs	r0, #11
 801220e:	4770      	bx	lr

08012210 <rcl_node_resolve_name>:
 8012210:	b082      	sub	sp, #8
 8012212:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012216:	b091      	sub	sp, #68	@ 0x44
 8012218:	ac1a      	add	r4, sp, #104	@ 0x68
 801221a:	e884 000c 	stmia.w	r4, {r2, r3}
 801221e:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8012222:	2800      	cmp	r0, #0
 8012224:	d03b      	beq.n	801229e <rcl_node_resolve_name+0x8e>
 8012226:	460c      	mov	r4, r1
 8012228:	4605      	mov	r5, r0
 801222a:	f7ff ffb7 	bl	801219c <rcl_node_get_options>
 801222e:	2800      	cmp	r0, #0
 8012230:	d037      	beq.n	80122a2 <rcl_node_resolve_name+0x92>
 8012232:	4628      	mov	r0, r5
 8012234:	f7ff ffa2 	bl	801217c <rcl_node_get_name>
 8012238:	4606      	mov	r6, r0
 801223a:	4628      	mov	r0, r5
 801223c:	f7ff ffa6 	bl	801218c <rcl_node_get_namespace>
 8012240:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8012244:	4681      	mov	r9, r0
 8012246:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801224a:	ad0b      	add	r5, sp, #44	@ 0x2c
 801224c:	46ac      	mov	ip, r5
 801224e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012252:	f8de 3000 	ldr.w	r3, [lr]
 8012256:	f8cc 3000 	str.w	r3, [ip]
 801225a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801225c:	b1fb      	cbz	r3, 801229e <rcl_node_resolve_name+0x8e>
 801225e:	468a      	mov	sl, r1
 8012260:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8012264:	f002 fcb4 	bl	8014bd0 <rcutils_get_zero_initialized_string_map>
 8012268:	ab10      	add	r3, sp, #64	@ 0x40
 801226a:	9008      	str	r0, [sp, #32]
 801226c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8012270:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012274:	2100      	movs	r1, #0
 8012276:	e895 000c 	ldmia.w	r5, {r2, r3}
 801227a:	a808      	add	r0, sp, #32
 801227c:	f002 fd20 	bl	8014cc0 <rcutils_string_map_init>
 8012280:	4607      	mov	r7, r0
 8012282:	b180      	cbz	r0, 80122a6 <rcl_node_resolve_name+0x96>
 8012284:	f7f9 fb54 	bl	800b930 <rcutils_get_error_string>
 8012288:	f7f9 fb6a 	bl	800b960 <rcutils_reset_error>
 801228c:	2f0a      	cmp	r7, #10
 801228e:	bf18      	it	ne
 8012290:	2701      	movne	r7, #1
 8012292:	4638      	mov	r0, r7
 8012294:	b011      	add	sp, #68	@ 0x44
 8012296:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801229a:	b002      	add	sp, #8
 801229c:	4770      	bx	lr
 801229e:	270b      	movs	r7, #11
 80122a0:	e7f7      	b.n	8012292 <rcl_node_resolve_name+0x82>
 80122a2:	2701      	movs	r7, #1
 80122a4:	e7f5      	b.n	8012292 <rcl_node_resolve_name+0x82>
 80122a6:	9009      	str	r0, [sp, #36]	@ 0x24
 80122a8:	9007      	str	r0, [sp, #28]
 80122aa:	a808      	add	r0, sp, #32
 80122ac:	f004 fd94 	bl	8016dd8 <rcl_get_default_topic_name_substitutions>
 80122b0:	4607      	mov	r7, r0
 80122b2:	b1a8      	cbz	r0, 80122e0 <rcl_node_resolve_name+0xd0>
 80122b4:	280a      	cmp	r0, #10
 80122b6:	9c07      	ldr	r4, [sp, #28]
 80122b8:	d000      	beq.n	80122bc <rcl_node_resolve_name+0xac>
 80122ba:	2701      	movs	r7, #1
 80122bc:	a808      	add	r0, sp, #32
 80122be:	f002 fd3f 	bl	8014d40 <rcutils_string_map_fini>
 80122c2:	2800      	cmp	r0, #0
 80122c4:	d13d      	bne.n	8012342 <rcl_node_resolve_name+0x132>
 80122c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80122c8:	4659      	mov	r1, fp
 80122ca:	47d0      	blx	sl
 80122cc:	4659      	mov	r1, fp
 80122ce:	4620      	mov	r0, r4
 80122d0:	47d0      	blx	sl
 80122d2:	f1b8 0f00 	cmp.w	r8, #0
 80122d6:	d0dc      	beq.n	8012292 <rcl_node_resolve_name+0x82>
 80122d8:	2f67      	cmp	r7, #103	@ 0x67
 80122da:	bf08      	it	eq
 80122dc:	2768      	moveq	r7, #104	@ 0x68
 80122de:	e7d8      	b.n	8012292 <rcl_node_resolve_name+0x82>
 80122e0:	ab09      	add	r3, sp, #36	@ 0x24
 80122e2:	9305      	str	r3, [sp, #20]
 80122e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80122e6:	46ec      	mov	ip, sp
 80122e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80122ec:	682b      	ldr	r3, [r5, #0]
 80122ee:	f8cc 3000 	str.w	r3, [ip]
 80122f2:	464a      	mov	r2, r9
 80122f4:	4631      	mov	r1, r6
 80122f6:	4620      	mov	r0, r4
 80122f8:	ab08      	add	r3, sp, #32
 80122fa:	f004 fc0f 	bl	8016b1c <rcl_expand_topic_name>
 80122fe:	4607      	mov	r7, r0
 8012300:	b9b8      	cbnz	r0, 8012332 <rcl_node_resolve_name+0x122>
 8012302:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8012304:	9009      	str	r0, [sp, #36]	@ 0x24
 8012306:	4602      	mov	r2, r0
 8012308:	a90a      	add	r1, sp, #40	@ 0x28
 801230a:	4620      	mov	r0, r4
 801230c:	f002 fe48 	bl	8014fa0 <rmw_validate_full_topic_name>
 8012310:	b988      	cbnz	r0, 8012336 <rcl_node_resolve_name+0x126>
 8012312:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8012314:	b9d5      	cbnz	r5, 801234c <rcl_node_resolve_name+0x13c>
 8012316:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012318:	a808      	add	r0, sp, #32
 801231a:	601c      	str	r4, [r3, #0]
 801231c:	f002 fd10 	bl	8014d40 <rcutils_string_map_fini>
 8012320:	4607      	mov	r7, r0
 8012322:	b1a8      	cbz	r0, 8012350 <rcl_node_resolve_name+0x140>
 8012324:	f7f9 fb04 	bl	800b930 <rcutils_get_error_string>
 8012328:	462c      	mov	r4, r5
 801232a:	f7f9 fb19 	bl	800b960 <rcutils_reset_error>
 801232e:	2701      	movs	r7, #1
 8012330:	e7c9      	b.n	80122c6 <rcl_node_resolve_name+0xb6>
 8012332:	9c07      	ldr	r4, [sp, #28]
 8012334:	e7c2      	b.n	80122bc <rcl_node_resolve_name+0xac>
 8012336:	f7f9 fafb 	bl	800b930 <rcutils_get_error_string>
 801233a:	2701      	movs	r7, #1
 801233c:	f7f9 fb10 	bl	800b960 <rcutils_reset_error>
 8012340:	e7bc      	b.n	80122bc <rcl_node_resolve_name+0xac>
 8012342:	f7f9 faf5 	bl	800b930 <rcutils_get_error_string>
 8012346:	f7f9 fb0b 	bl	800b960 <rcutils_reset_error>
 801234a:	e7bc      	b.n	80122c6 <rcl_node_resolve_name+0xb6>
 801234c:	2767      	movs	r7, #103	@ 0x67
 801234e:	e7b5      	b.n	80122bc <rcl_node_resolve_name+0xac>
 8012350:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012352:	4659      	mov	r1, fp
 8012354:	47d0      	blx	sl
 8012356:	4659      	mov	r1, fp
 8012358:	4638      	mov	r0, r7
 801235a:	47d0      	blx	sl
 801235c:	e799      	b.n	8012292 <rcl_node_resolve_name+0x82>
 801235e:	bf00      	nop

08012360 <exact_match_lookup>:
 8012360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012362:	f102 0708 	add.w	r7, r2, #8
 8012366:	460b      	mov	r3, r1
 8012368:	4614      	mov	r4, r2
 801236a:	4606      	mov	r6, r0
 801236c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8012370:	b085      	sub	sp, #20
 8012372:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012376:	4618      	mov	r0, r3
 8012378:	4919      	ldr	r1, [pc, #100]	@ (80123e0 <exact_match_lookup+0x80>)
 801237a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801237e:	f002 fac1 	bl	8014904 <rcutils_join_path>
 8012382:	7833      	ldrb	r3, [r6, #0]
 8012384:	2b2f      	cmp	r3, #47	@ 0x2f
 8012386:	4605      	mov	r5, r0
 8012388:	d023      	beq.n	80123d2 <exact_match_lookup+0x72>
 801238a:	f104 030c 	add.w	r3, r4, #12
 801238e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012392:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012396:	1c70      	adds	r0, r6, #1
 8012398:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801239c:	f002 fab8 	bl	8014910 <rcutils_to_native_path>
 80123a0:	4606      	mov	r6, r0
 80123a2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80123a6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80123aa:	4631      	mov	r1, r6
 80123ac:	e894 000c 	ldmia.w	r4, {r2, r3}
 80123b0:	4628      	mov	r0, r5
 80123b2:	f002 faa7 	bl	8014904 <rcutils_join_path>
 80123b6:	6862      	ldr	r2, [r4, #4]
 80123b8:	6921      	ldr	r1, [r4, #16]
 80123ba:	4603      	mov	r3, r0
 80123bc:	4630      	mov	r0, r6
 80123be:	461e      	mov	r6, r3
 80123c0:	4790      	blx	r2
 80123c2:	4628      	mov	r0, r5
 80123c4:	6863      	ldr	r3, [r4, #4]
 80123c6:	6921      	ldr	r1, [r4, #16]
 80123c8:	4798      	blx	r3
 80123ca:	4635      	mov	r5, r6
 80123cc:	4628      	mov	r0, r5
 80123ce:	b005      	add	sp, #20
 80123d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123d2:	7873      	ldrb	r3, [r6, #1]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d1d8      	bne.n	801238a <exact_match_lookup+0x2a>
 80123d8:	4628      	mov	r0, r5
 80123da:	b005      	add	sp, #20
 80123dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123de:	bf00      	nop
 80123e0:	08019058 	.word	0x08019058

080123e4 <rcl_get_secure_root>:
 80123e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80123e8:	b085      	sub	sp, #20
 80123ea:	b168      	cbz	r0, 8012408 <rcl_get_secure_root+0x24>
 80123ec:	4607      	mov	r7, r0
 80123ee:	4608      	mov	r0, r1
 80123f0:	460c      	mov	r4, r1
 80123f2:	f7f9 fa8f 	bl	800b914 <rcutils_allocator_is_valid>
 80123f6:	b138      	cbz	r0, 8012408 <rcl_get_secure_root+0x24>
 80123f8:	2300      	movs	r3, #0
 80123fa:	482d      	ldr	r0, [pc, #180]	@ (80124b0 <rcl_get_secure_root+0xcc>)
 80123fc:	9303      	str	r3, [sp, #12]
 80123fe:	a903      	add	r1, sp, #12
 8012400:	f002 fa66 	bl	80148d0 <rcutils_get_env>
 8012404:	4605      	mov	r5, r0
 8012406:	b120      	cbz	r0, 8012412 <rcl_get_secure_root+0x2e>
 8012408:	2500      	movs	r5, #0
 801240a:	4628      	mov	r0, r5
 801240c:	b005      	add	sp, #20
 801240e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012412:	9b03      	ldr	r3, [sp, #12]
 8012414:	781a      	ldrb	r2, [r3, #0]
 8012416:	2a00      	cmp	r2, #0
 8012418:	d0f6      	beq.n	8012408 <rcl_get_secure_root+0x24>
 801241a:	f104 090c 	add.w	r9, r4, #12
 801241e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012422:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012426:	4618      	mov	r0, r3
 8012428:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801242c:	f002 fb92 	bl	8014b54 <rcutils_strdup>
 8012430:	4680      	mov	r8, r0
 8012432:	2800      	cmp	r0, #0
 8012434:	d0e8      	beq.n	8012408 <rcl_get_secure_root+0x24>
 8012436:	481f      	ldr	r0, [pc, #124]	@ (80124b4 <rcl_get_secure_root+0xd0>)
 8012438:	9503      	str	r5, [sp, #12]
 801243a:	a903      	add	r1, sp, #12
 801243c:	f002 fa48 	bl	80148d0 <rcutils_get_env>
 8012440:	b160      	cbz	r0, 801245c <rcl_get_secure_root+0x78>
 8012442:	2600      	movs	r6, #0
 8012444:	6863      	ldr	r3, [r4, #4]
 8012446:	6921      	ldr	r1, [r4, #16]
 8012448:	4630      	mov	r0, r6
 801244a:	4798      	blx	r3
 801244c:	4640      	mov	r0, r8
 801244e:	6863      	ldr	r3, [r4, #4]
 8012450:	6921      	ldr	r1, [r4, #16]
 8012452:	4798      	blx	r3
 8012454:	4628      	mov	r0, r5
 8012456:	b005      	add	sp, #20
 8012458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801245c:	9b03      	ldr	r3, [sp, #12]
 801245e:	781e      	ldrb	r6, [r3, #0]
 8012460:	b1f6      	cbz	r6, 80124a0 <rcl_get_secure_root+0xbc>
 8012462:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012466:	e88d 0003 	stmia.w	sp, {r0, r1}
 801246a:	4618      	mov	r0, r3
 801246c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012470:	f002 fb70 	bl	8014b54 <rcutils_strdup>
 8012474:	4606      	mov	r6, r0
 8012476:	2800      	cmp	r0, #0
 8012478:	d0e3      	beq.n	8012442 <rcl_get_secure_root+0x5e>
 801247a:	4622      	mov	r2, r4
 801247c:	4641      	mov	r1, r8
 801247e:	f7ff ff6f 	bl	8012360 <exact_match_lookup>
 8012482:	4605      	mov	r5, r0
 8012484:	2d00      	cmp	r5, #0
 8012486:	d0dd      	beq.n	8012444 <rcl_get_secure_root+0x60>
 8012488:	4628      	mov	r0, r5
 801248a:	f002 fa39 	bl	8014900 <rcutils_is_directory>
 801248e:	4603      	mov	r3, r0
 8012490:	2800      	cmp	r0, #0
 8012492:	d1d7      	bne.n	8012444 <rcl_get_secure_root+0x60>
 8012494:	4628      	mov	r0, r5
 8012496:	6921      	ldr	r1, [r4, #16]
 8012498:	461d      	mov	r5, r3
 801249a:	6863      	ldr	r3, [r4, #4]
 801249c:	4798      	blx	r3
 801249e:	e7d1      	b.n	8012444 <rcl_get_secure_root+0x60>
 80124a0:	4622      	mov	r2, r4
 80124a2:	4638      	mov	r0, r7
 80124a4:	4641      	mov	r1, r8
 80124a6:	f7ff ff5b 	bl	8012360 <exact_match_lookup>
 80124aa:	4605      	mov	r5, r0
 80124ac:	e7ea      	b.n	8012484 <rcl_get_secure_root+0xa0>
 80124ae:	bf00      	nop
 80124b0:	08019064 	.word	0x08019064
 80124b4:	0801907c 	.word	0x0801907c

080124b8 <rcl_get_security_options_from_environment>:
 80124b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124bc:	b082      	sub	sp, #8
 80124be:	2300      	movs	r3, #0
 80124c0:	4606      	mov	r6, r0
 80124c2:	460f      	mov	r7, r1
 80124c4:	4820      	ldr	r0, [pc, #128]	@ (8012548 <rcl_get_security_options_from_environment+0x90>)
 80124c6:	9301      	str	r3, [sp, #4]
 80124c8:	a901      	add	r1, sp, #4
 80124ca:	4690      	mov	r8, r2
 80124cc:	f002 fa00 	bl	80148d0 <rcutils_get_env>
 80124d0:	b120      	cbz	r0, 80124dc <rcl_get_security_options_from_environment+0x24>
 80124d2:	2501      	movs	r5, #1
 80124d4:	4628      	mov	r0, r5
 80124d6:	b002      	add	sp, #8
 80124d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124dc:	491b      	ldr	r1, [pc, #108]	@ (801254c <rcl_get_security_options_from_environment+0x94>)
 80124de:	4604      	mov	r4, r0
 80124e0:	9801      	ldr	r0, [sp, #4]
 80124e2:	f7ed fe9d 	bl	8000220 <strcmp>
 80124e6:	4605      	mov	r5, r0
 80124e8:	b9e8      	cbnz	r0, 8012526 <rcl_get_security_options_from_environment+0x6e>
 80124ea:	9001      	str	r0, [sp, #4]
 80124ec:	f1b8 0f00 	cmp.w	r8, #0
 80124f0:	d020      	beq.n	8012534 <rcl_get_security_options_from_environment+0x7c>
 80124f2:	4817      	ldr	r0, [pc, #92]	@ (8012550 <rcl_get_security_options_from_environment+0x98>)
 80124f4:	a901      	add	r1, sp, #4
 80124f6:	f002 f9eb 	bl	80148d0 <rcutils_get_env>
 80124fa:	2800      	cmp	r0, #0
 80124fc:	d1e9      	bne.n	80124d2 <rcl_get_security_options_from_environment+0x1a>
 80124fe:	4915      	ldr	r1, [pc, #84]	@ (8012554 <rcl_get_security_options_from_environment+0x9c>)
 8012500:	9801      	ldr	r0, [sp, #4]
 8012502:	f7ed fe8d 	bl	8000220 <strcmp>
 8012506:	fab0 f080 	clz	r0, r0
 801250a:	0940      	lsrs	r0, r0, #5
 801250c:	f888 0000 	strb.w	r0, [r8]
 8012510:	4639      	mov	r1, r7
 8012512:	4630      	mov	r0, r6
 8012514:	f7ff ff66 	bl	80123e4 <rcl_get_secure_root>
 8012518:	b170      	cbz	r0, 8012538 <rcl_get_security_options_from_environment+0x80>
 801251a:	f8c8 0004 	str.w	r0, [r8, #4]
 801251e:	4628      	mov	r0, r5
 8012520:	b002      	add	sp, #8
 8012522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012526:	4625      	mov	r5, r4
 8012528:	4628      	mov	r0, r5
 801252a:	f888 4000 	strb.w	r4, [r8]
 801252e:	b002      	add	sp, #8
 8012530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012534:	250b      	movs	r5, #11
 8012536:	e7cd      	b.n	80124d4 <rcl_get_security_options_from_environment+0x1c>
 8012538:	f898 5000 	ldrb.w	r5, [r8]
 801253c:	f1a5 0501 	sub.w	r5, r5, #1
 8012540:	fab5 f585 	clz	r5, r5
 8012544:	096d      	lsrs	r5, r5, #5
 8012546:	e7c5      	b.n	80124d4 <rcl_get_security_options_from_environment+0x1c>
 8012548:	0801901c 	.word	0x0801901c
 801254c:	08019030 	.word	0x08019030
 8012550:	08019038 	.word	0x08019038
 8012554:	08019050 	.word	0x08019050

08012558 <rcl_service_get_rmw_handle>:
 8012558:	b118      	cbz	r0, 8012562 <rcl_service_get_rmw_handle+0xa>
 801255a:	6800      	ldr	r0, [r0, #0]
 801255c:	b108      	cbz	r0, 8012562 <rcl_service_get_rmw_handle+0xa>
 801255e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012562:	4770      	bx	lr

08012564 <rcl_take_request>:
 8012564:	b570      	push	{r4, r5, r6, lr}
 8012566:	468e      	mov	lr, r1
 8012568:	460c      	mov	r4, r1
 801256a:	4616      	mov	r6, r2
 801256c:	4605      	mov	r5, r0
 801256e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012572:	b08c      	sub	sp, #48	@ 0x30
 8012574:	f10d 0c18 	add.w	ip, sp, #24
 8012578:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801257c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012580:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012584:	b30d      	cbz	r5, 80125ca <rcl_take_request+0x66>
 8012586:	682b      	ldr	r3, [r5, #0]
 8012588:	b1fb      	cbz	r3, 80125ca <rcl_take_request+0x66>
 801258a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801258e:	b1e0      	cbz	r0, 80125ca <rcl_take_request+0x66>
 8012590:	b336      	cbz	r6, 80125e0 <rcl_take_request+0x7c>
 8012592:	2300      	movs	r3, #0
 8012594:	f88d 3007 	strb.w	r3, [sp, #7]
 8012598:	4632      	mov	r2, r6
 801259a:	f10d 0307 	add.w	r3, sp, #7
 801259e:	a902      	add	r1, sp, #8
 80125a0:	f003 f854 	bl	801564c <rmw_take_request>
 80125a4:	4605      	mov	r5, r0
 80125a6:	b198      	cbz	r0, 80125d0 <rcl_take_request+0x6c>
 80125a8:	280a      	cmp	r0, #10
 80125aa:	bf18      	it	ne
 80125ac:	2501      	movne	r5, #1
 80125ae:	f10d 0e18 	add.w	lr, sp, #24
 80125b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80125b6:	46a4      	mov	ip, r4
 80125b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80125bc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80125c0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80125c4:	4628      	mov	r0, r5
 80125c6:	b00c      	add	sp, #48	@ 0x30
 80125c8:	bd70      	pop	{r4, r5, r6, pc}
 80125ca:	f44f 7516 	mov.w	r5, #600	@ 0x258
 80125ce:	e7ee      	b.n	80125ae <rcl_take_request+0x4a>
 80125d0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80125d4:	f240 2359 	movw	r3, #601	@ 0x259
 80125d8:	2a00      	cmp	r2, #0
 80125da:	bf08      	it	eq
 80125dc:	461d      	moveq	r5, r3
 80125de:	e7e6      	b.n	80125ae <rcl_take_request+0x4a>
 80125e0:	250b      	movs	r5, #11
 80125e2:	e7e4      	b.n	80125ae <rcl_take_request+0x4a>

080125e4 <rcl_send_response>:
 80125e4:	b170      	cbz	r0, 8012604 <rcl_send_response+0x20>
 80125e6:	6800      	ldr	r0, [r0, #0]
 80125e8:	b160      	cbz	r0, 8012604 <rcl_send_response+0x20>
 80125ea:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80125ee:	b148      	cbz	r0, 8012604 <rcl_send_response+0x20>
 80125f0:	b159      	cbz	r1, 801260a <rcl_send_response+0x26>
 80125f2:	b510      	push	{r4, lr}
 80125f4:	b15a      	cbz	r2, 801260e <rcl_send_response+0x2a>
 80125f6:	f003 f887 	bl	8015708 <rmw_send_response>
 80125fa:	b110      	cbz	r0, 8012602 <rcl_send_response+0x1e>
 80125fc:	2802      	cmp	r0, #2
 80125fe:	bf18      	it	ne
 8012600:	2001      	movne	r0, #1
 8012602:	bd10      	pop	{r4, pc}
 8012604:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8012608:	4770      	bx	lr
 801260a:	200b      	movs	r0, #11
 801260c:	4770      	bx	lr
 801260e:	200b      	movs	r0, #11
 8012610:	bd10      	pop	{r4, pc}
 8012612:	bf00      	nop

08012614 <rcl_service_is_valid>:
 8012614:	b130      	cbz	r0, 8012624 <rcl_service_is_valid+0x10>
 8012616:	6800      	ldr	r0, [r0, #0]
 8012618:	b120      	cbz	r0, 8012624 <rcl_service_is_valid+0x10>
 801261a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801261e:	3800      	subs	r0, #0
 8012620:	bf18      	it	ne
 8012622:	2001      	movne	r0, #1
 8012624:	4770      	bx	lr
 8012626:	bf00      	nop

08012628 <rcl_get_zero_initialized_subscription>:
 8012628:	4b01      	ldr	r3, [pc, #4]	@ (8012630 <rcl_get_zero_initialized_subscription+0x8>)
 801262a:	6818      	ldr	r0, [r3, #0]
 801262c:	4770      	bx	lr
 801262e:	bf00      	nop
 8012630:	0801909c 	.word	0x0801909c

08012634 <rcl_subscription_init>:
 8012634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012638:	b089      	sub	sp, #36	@ 0x24
 801263a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801263c:	b1d6      	cbz	r6, 8012674 <rcl_subscription_init+0x40>
 801263e:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 8012642:	4604      	mov	r4, r0
 8012644:	4648      	mov	r0, r9
 8012646:	460d      	mov	r5, r1
 8012648:	4690      	mov	r8, r2
 801264a:	461f      	mov	r7, r3
 801264c:	f7f9 f962 	bl	800b914 <rcutils_allocator_is_valid>
 8012650:	b180      	cbz	r0, 8012674 <rcl_subscription_init+0x40>
 8012652:	b17c      	cbz	r4, 8012674 <rcl_subscription_init+0x40>
 8012654:	4628      	mov	r0, r5
 8012656:	f7ff fd87 	bl	8012168 <rcl_node_is_valid>
 801265a:	2800      	cmp	r0, #0
 801265c:	d054      	beq.n	8012708 <rcl_subscription_init+0xd4>
 801265e:	f1b8 0f00 	cmp.w	r8, #0
 8012662:	d007      	beq.n	8012674 <rcl_subscription_init+0x40>
 8012664:	b137      	cbz	r7, 8012674 <rcl_subscription_init+0x40>
 8012666:	6823      	ldr	r3, [r4, #0]
 8012668:	b14b      	cbz	r3, 801267e <rcl_subscription_init+0x4a>
 801266a:	2764      	movs	r7, #100	@ 0x64
 801266c:	4638      	mov	r0, r7
 801266e:	b009      	add	sp, #36	@ 0x24
 8012670:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012674:	270b      	movs	r7, #11
 8012676:	4638      	mov	r0, r7
 8012678:	b009      	add	sp, #36	@ 0x24
 801267a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801267e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8012682:	aa07      	add	r2, sp, #28
 8012684:	9205      	str	r2, [sp, #20]
 8012686:	9307      	str	r3, [sp, #28]
 8012688:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 801268c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012690:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012694:	4639      	mov	r1, r7
 8012696:	e899 000c 	ldmia.w	r9, {r2, r3}
 801269a:	4628      	mov	r0, r5
 801269c:	f7ff fdb8 	bl	8012210 <rcl_node_resolve_name>
 80126a0:	4607      	mov	r7, r0
 80126a2:	2800      	cmp	r0, #0
 80126a4:	d15f      	bne.n	8012766 <rcl_subscription_init+0x132>
 80126a6:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 80126aa:	21c8      	movs	r1, #200	@ 0xc8
 80126ac:	2001      	movs	r0, #1
 80126ae:	4798      	blx	r3
 80126b0:	6020      	str	r0, [r4, #0]
 80126b2:	2800      	cmp	r0, #0
 80126b4:	d05d      	beq.n	8012772 <rcl_subscription_init+0x13e>
 80126b6:	4628      	mov	r0, r5
 80126b8:	f7ff fd78 	bl	80121ac <rcl_node_get_rmw_handle>
 80126bc:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 80126c0:	9300      	str	r3, [sp, #0]
 80126c2:	9a07      	ldr	r2, [sp, #28]
 80126c4:	6827      	ldr	r7, [r4, #0]
 80126c6:	4641      	mov	r1, r8
 80126c8:	4633      	mov	r3, r6
 80126ca:	f7f9 ff3f 	bl	800c54c <rmw_create_subscription>
 80126ce:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 80126d2:	6827      	ldr	r7, [r4, #0]
 80126d4:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 80126d8:	b348      	cbz	r0, 801272e <rcl_subscription_init+0xfa>
 80126da:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80126de:	f7fa f817 	bl	800c710 <rmw_subscription_get_actual_qos>
 80126e2:	4607      	mov	r7, r0
 80126e4:	b9a8      	cbnz	r0, 8012712 <rcl_subscription_init+0xde>
 80126e6:	6820      	ldr	r0, [r4, #0]
 80126e8:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 80126ec:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 80126f0:	2270      	movs	r2, #112	@ 0x70
 80126f2:	4631      	mov	r1, r6
 80126f4:	f005 fa69 	bl	8017bca <memcpy>
 80126f8:	9807      	ldr	r0, [sp, #28]
 80126fa:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80126fc:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80126fe:	4798      	blx	r3
 8012700:	4638      	mov	r0, r7
 8012702:	b009      	add	sp, #36	@ 0x24
 8012704:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012708:	27c8      	movs	r7, #200	@ 0xc8
 801270a:	4638      	mov	r0, r7
 801270c:	b009      	add	sp, #36	@ 0x24
 801270e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012712:	6827      	ldr	r7, [r4, #0]
 8012714:	b32f      	cbz	r7, 8012762 <rcl_subscription_init+0x12e>
 8012716:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801271a:	b14b      	cbz	r3, 8012730 <rcl_subscription_init+0xfc>
 801271c:	4628      	mov	r0, r5
 801271e:	f7ff fd45 	bl	80121ac <rcl_node_get_rmw_handle>
 8012722:	6823      	ldr	r3, [r4, #0]
 8012724:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8012728:	f7fa f802 	bl	800c730 <rmw_destroy_subscription>
 801272c:	6827      	ldr	r7, [r4, #0]
 801272e:	b197      	cbz	r7, 8012756 <rcl_subscription_init+0x122>
 8012730:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8012734:	4628      	mov	r0, r5
 8012736:	f7f9 f8ed 	bl	800b914 <rcutils_allocator_is_valid>
 801273a:	b158      	cbz	r0, 8012754 <rcl_subscription_init+0x120>
 801273c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801273e:	b148      	cbz	r0, 8012754 <rcl_subscription_init+0x120>
 8012740:	4629      	mov	r1, r5
 8012742:	f002 fb81 	bl	8014e48 <rmw_subscription_content_filter_options_fini>
 8012746:	4605      	mov	r5, r0
 8012748:	b9b8      	cbnz	r0, 801277a <rcl_subscription_init+0x146>
 801274a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801274c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801274e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8012750:	4798      	blx	r3
 8012752:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8012754:	6827      	ldr	r7, [r4, #0]
 8012756:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8012758:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801275a:	4638      	mov	r0, r7
 801275c:	4798      	blx	r3
 801275e:	2300      	movs	r3, #0
 8012760:	6023      	str	r3, [r4, #0]
 8012762:	2701      	movs	r7, #1
 8012764:	e7c8      	b.n	80126f8 <rcl_subscription_init+0xc4>
 8012766:	2867      	cmp	r0, #103	@ 0x67
 8012768:	d0c6      	beq.n	80126f8 <rcl_subscription_init+0xc4>
 801276a:	2869      	cmp	r0, #105	@ 0x69
 801276c:	d003      	beq.n	8012776 <rcl_subscription_init+0x142>
 801276e:	280a      	cmp	r0, #10
 8012770:	d1f7      	bne.n	8012762 <rcl_subscription_init+0x12e>
 8012772:	270a      	movs	r7, #10
 8012774:	e7c0      	b.n	80126f8 <rcl_subscription_init+0xc4>
 8012776:	2767      	movs	r7, #103	@ 0x67
 8012778:	e7be      	b.n	80126f8 <rcl_subscription_init+0xc4>
 801277a:	f7ff f9fb 	bl	8011b74 <rcl_convert_rmw_ret_to_rcl_ret>
 801277e:	6827      	ldr	r7, [r4, #0]
 8012780:	e7e9      	b.n	8012756 <rcl_subscription_init+0x122>
 8012782:	bf00      	nop

08012784 <rcl_subscription_get_default_options>:
 8012784:	b570      	push	{r4, r5, r6, lr}
 8012786:	4d14      	ldr	r5, [pc, #80]	@ (80127d8 <rcl_subscription_get_default_options+0x54>)
 8012788:	4914      	ldr	r1, [pc, #80]	@ (80127dc <rcl_subscription_get_default_options+0x58>)
 801278a:	b08a      	sub	sp, #40	@ 0x28
 801278c:	4604      	mov	r4, r0
 801278e:	2250      	movs	r2, #80	@ 0x50
 8012790:	4628      	mov	r0, r5
 8012792:	f005 fa1a 	bl	8017bca <memcpy>
 8012796:	a804      	add	r0, sp, #16
 8012798:	f7f9 f8ae 	bl	800b8f8 <rcutils_get_default_allocator>
 801279c:	f10d 0c10 	add.w	ip, sp, #16
 80127a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80127a4:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 80127a8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80127ac:	466e      	mov	r6, sp
 80127ae:	f8dc 3000 	ldr.w	r3, [ip]
 80127b2:	f8ce 3000 	str.w	r3, [lr]
 80127b6:	4630      	mov	r0, r6
 80127b8:	f002 fb60 	bl	8014e7c <rmw_get_default_subscription_options>
 80127bc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80127c0:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80127c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80127c8:	2270      	movs	r2, #112	@ 0x70
 80127ca:	4629      	mov	r1, r5
 80127cc:	4620      	mov	r0, r4
 80127ce:	f005 f9fc 	bl	8017bca <memcpy>
 80127d2:	4620      	mov	r0, r4
 80127d4:	b00a      	add	sp, #40	@ 0x28
 80127d6:	bd70      	pop	{r4, r5, r6, pc}
 80127d8:	2000abb0 	.word	0x2000abb0
 80127dc:	080190a0 	.word	0x080190a0

080127e0 <rcl_take>:
 80127e0:	2800      	cmp	r0, #0
 80127e2:	d04a      	beq.n	801287a <rcl_take+0x9a>
 80127e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127e8:	4604      	mov	r4, r0
 80127ea:	6800      	ldr	r0, [r0, #0]
 80127ec:	b0a4      	sub	sp, #144	@ 0x90
 80127ee:	2800      	cmp	r0, #0
 80127f0:	d03b      	beq.n	801286a <rcl_take+0x8a>
 80127f2:	461f      	mov	r7, r3
 80127f4:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d036      	beq.n	801286a <rcl_take+0x8a>
 80127fc:	460e      	mov	r6, r1
 80127fe:	2900      	cmp	r1, #0
 8012800:	d039      	beq.n	8012876 <rcl_take+0x96>
 8012802:	4615      	mov	r5, r2
 8012804:	2a00      	cmp	r2, #0
 8012806:	d03c      	beq.n	8012882 <rcl_take+0xa2>
 8012808:	a802      	add	r0, sp, #8
 801280a:	f002 fbc1 	bl	8014f90 <rmw_get_zero_initialized_message_info>
 801280e:	f10d 0c08 	add.w	ip, sp, #8
 8012812:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012816:	46ae      	mov	lr, r5
 8012818:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801281c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012820:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012824:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012828:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801282c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8012830:	f04f 0800 	mov.w	r8, #0
 8012834:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8012838:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 801283c:	6822      	ldr	r2, [r4, #0]
 801283e:	462b      	mov	r3, r5
 8012840:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8012844:	9700      	str	r7, [sp, #0]
 8012846:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 801284a:	4631      	mov	r1, r6
 801284c:	f003 f802 	bl	8015854 <rmw_take_with_info>
 8012850:	4603      	mov	r3, r0
 8012852:	b9c0      	cbnz	r0, 8012886 <rcl_take+0xa6>
 8012854:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8012858:	f240 1291 	movw	r2, #401	@ 0x191
 801285c:	2900      	cmp	r1, #0
 801285e:	bf08      	it	eq
 8012860:	4613      	moveq	r3, r2
 8012862:	4618      	mov	r0, r3
 8012864:	b024      	add	sp, #144	@ 0x90
 8012866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801286a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801286e:	4618      	mov	r0, r3
 8012870:	b024      	add	sp, #144	@ 0x90
 8012872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012876:	230b      	movs	r3, #11
 8012878:	e7f3      	b.n	8012862 <rcl_take+0x82>
 801287a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 801287e:	4618      	mov	r0, r3
 8012880:	4770      	bx	lr
 8012882:	ad14      	add	r5, sp, #80	@ 0x50
 8012884:	e7c0      	b.n	8012808 <rcl_take+0x28>
 8012886:	f7ff f975 	bl	8011b74 <rcl_convert_rmw_ret_to_rcl_ret>
 801288a:	4603      	mov	r3, r0
 801288c:	e7e9      	b.n	8012862 <rcl_take+0x82>
 801288e:	bf00      	nop

08012890 <rcl_subscription_get_rmw_handle>:
 8012890:	b118      	cbz	r0, 801289a <rcl_subscription_get_rmw_handle+0xa>
 8012892:	6800      	ldr	r0, [r0, #0]
 8012894:	b108      	cbz	r0, 801289a <rcl_subscription_get_rmw_handle+0xa>
 8012896:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801289a:	4770      	bx	lr

0801289c <rcl_subscription_is_valid>:
 801289c:	b130      	cbz	r0, 80128ac <rcl_subscription_is_valid+0x10>
 801289e:	6800      	ldr	r0, [r0, #0]
 80128a0:	b120      	cbz	r0, 80128ac <rcl_subscription_is_valid+0x10>
 80128a2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 80128a6:	3800      	subs	r0, #0
 80128a8:	bf18      	it	ne
 80128aa:	2001      	movne	r0, #1
 80128ac:	4770      	bx	lr
 80128ae:	bf00      	nop

080128b0 <rcl_get_system_time>:
 80128b0:	4608      	mov	r0, r1
 80128b2:	f7f9 b871 	b.w	800b998 <rcutils_system_time_now>
 80128b6:	bf00      	nop

080128b8 <rcl_get_steady_time>:
 80128b8:	4608      	mov	r0, r1
 80128ba:	f7f9 b895 	b.w	800b9e8 <rcutils_steady_time_now>
 80128be:	bf00      	nop

080128c0 <rcl_get_ros_time>:
 80128c0:	7a03      	ldrb	r3, [r0, #8]
 80128c2:	b510      	push	{r4, lr}
 80128c4:	460c      	mov	r4, r1
 80128c6:	b133      	cbz	r3, 80128d6 <rcl_get_ros_time+0x16>
 80128c8:	2105      	movs	r1, #5
 80128ca:	f001 ff5d 	bl	8014788 <__atomic_load_8>
 80128ce:	e9c4 0100 	strd	r0, r1, [r4]
 80128d2:	2000      	movs	r0, #0
 80128d4:	bd10      	pop	{r4, pc}
 80128d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128da:	4608      	mov	r0, r1
 80128dc:	f7f9 b85c 	b.w	800b998 <rcutils_system_time_now>

080128e0 <rcl_clock_init>:
 80128e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128e2:	4605      	mov	r5, r0
 80128e4:	4610      	mov	r0, r2
 80128e6:	4614      	mov	r4, r2
 80128e8:	460e      	mov	r6, r1
 80128ea:	f7f9 f813 	bl	800b914 <rcutils_allocator_is_valid>
 80128ee:	b128      	cbz	r0, 80128fc <rcl_clock_init+0x1c>
 80128f0:	2d03      	cmp	r5, #3
 80128f2:	d803      	bhi.n	80128fc <rcl_clock_init+0x1c>
 80128f4:	e8df f005 	tbb	[pc, r5]
 80128f8:	06532e1d 	.word	0x06532e1d
 80128fc:	f04f 0c0b 	mov.w	ip, #11
 8012900:	4660      	mov	r0, ip
 8012902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012904:	2e00      	cmp	r6, #0
 8012906:	d0f9      	beq.n	80128fc <rcl_clock_init+0x1c>
 8012908:	2c00      	cmp	r4, #0
 801290a:	d0f7      	beq.n	80128fc <rcl_clock_init+0x1c>
 801290c:	2300      	movs	r3, #0
 801290e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012912:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 80129c8 <rcl_clock_init+0xe8>
 8012916:	6133      	str	r3, [r6, #16]
 8012918:	f106 0514 	add.w	r5, r6, #20
 801291c:	469c      	mov	ip, r3
 801291e:	2703      	movs	r7, #3
 8012920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012922:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012924:	6823      	ldr	r3, [r4, #0]
 8012926:	602b      	str	r3, [r5, #0]
 8012928:	7037      	strb	r7, [r6, #0]
 801292a:	f8c6 e00c 	str.w	lr, [r6, #12]
 801292e:	4660      	mov	r0, ip
 8012930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012932:	2e00      	cmp	r6, #0
 8012934:	d0e2      	beq.n	80128fc <rcl_clock_init+0x1c>
 8012936:	2300      	movs	r3, #0
 8012938:	7033      	strb	r3, [r6, #0]
 801293a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801293e:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8012942:	469c      	mov	ip, r3
 8012944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012946:	f106 0514 	add.w	r5, r6, #20
 801294a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801294c:	6823      	ldr	r3, [r4, #0]
 801294e:	602b      	str	r3, [r5, #0]
 8012950:	4660      	mov	r0, ip
 8012952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012954:	2e00      	cmp	r6, #0
 8012956:	d0d1      	beq.n	80128fc <rcl_clock_init+0x1c>
 8012958:	2c00      	cmp	r4, #0
 801295a:	d0cf      	beq.n	80128fc <rcl_clock_init+0x1c>
 801295c:	2700      	movs	r7, #0
 801295e:	7037      	strb	r7, [r6, #0]
 8012960:	46a4      	mov	ip, r4
 8012962:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012966:	f106 0514 	add.w	r5, r6, #20
 801296a:	e9c6 7701 	strd	r7, r7, [r6, #4]
 801296e:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8012972:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012974:	f8dc 3000 	ldr.w	r3, [ip]
 8012978:	602b      	str	r3, [r5, #0]
 801297a:	6921      	ldr	r1, [r4, #16]
 801297c:	6823      	ldr	r3, [r4, #0]
 801297e:	2010      	movs	r0, #16
 8012980:	4798      	blx	r3
 8012982:	6130      	str	r0, [r6, #16]
 8012984:	b1d0      	cbz	r0, 80129bc <rcl_clock_init+0xdc>
 8012986:	2200      	movs	r2, #0
 8012988:	2300      	movs	r3, #0
 801298a:	e9c0 2300 	strd	r2, r3, [r0]
 801298e:	2301      	movs	r3, #1
 8012990:	7207      	strb	r7, [r0, #8]
 8012992:	4a0c      	ldr	r2, [pc, #48]	@ (80129c4 <rcl_clock_init+0xe4>)
 8012994:	7033      	strb	r3, [r6, #0]
 8012996:	46bc      	mov	ip, r7
 8012998:	60f2      	str	r2, [r6, #12]
 801299a:	4660      	mov	r0, ip
 801299c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801299e:	2e00      	cmp	r6, #0
 80129a0:	d0ac      	beq.n	80128fc <rcl_clock_init+0x1c>
 80129a2:	2c00      	cmp	r4, #0
 80129a4:	d0aa      	beq.n	80128fc <rcl_clock_init+0x1c>
 80129a6:	2300      	movs	r3, #0
 80129a8:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80129ac:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 80129cc <rcl_clock_init+0xec>
 80129b0:	6133      	str	r3, [r6, #16]
 80129b2:	f106 0514 	add.w	r5, r6, #20
 80129b6:	469c      	mov	ip, r3
 80129b8:	2702      	movs	r7, #2
 80129ba:	e7b1      	b.n	8012920 <rcl_clock_init+0x40>
 80129bc:	f04f 0c0a 	mov.w	ip, #10
 80129c0:	e79e      	b.n	8012900 <rcl_clock_init+0x20>
 80129c2:	bf00      	nop
 80129c4:	080128c1 	.word	0x080128c1
 80129c8:	080128b9 	.word	0x080128b9
 80129cc:	080128b1 	.word	0x080128b1

080129d0 <rcl_clock_get_now>:
 80129d0:	b140      	cbz	r0, 80129e4 <rcl_clock_get_now+0x14>
 80129d2:	b139      	cbz	r1, 80129e4 <rcl_clock_get_now+0x14>
 80129d4:	7803      	ldrb	r3, [r0, #0]
 80129d6:	b11b      	cbz	r3, 80129e0 <rcl_clock_get_now+0x10>
 80129d8:	68c3      	ldr	r3, [r0, #12]
 80129da:	b10b      	cbz	r3, 80129e0 <rcl_clock_get_now+0x10>
 80129dc:	6900      	ldr	r0, [r0, #16]
 80129de:	4718      	bx	r3
 80129e0:	2001      	movs	r0, #1
 80129e2:	4770      	bx	lr
 80129e4:	200b      	movs	r0, #11
 80129e6:	4770      	bx	lr

080129e8 <rcl_clock_add_jump_callback>:
 80129e8:	b082      	sub	sp, #8
 80129ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129ee:	a906      	add	r1, sp, #24
 80129f0:	e881 000c 	stmia.w	r1, {r2, r3}
 80129f4:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 80129f8:	b320      	cbz	r0, 8012a44 <rcl_clock_add_jump_callback+0x5c>
 80129fa:	4604      	mov	r4, r0
 80129fc:	3014      	adds	r0, #20
 80129fe:	f7f8 ff89 	bl	800b914 <rcutils_allocator_is_valid>
 8012a02:	b1f8      	cbz	r0, 8012a44 <rcl_clock_add_jump_callback+0x5c>
 8012a04:	b1f6      	cbz	r6, 8012a44 <rcl_clock_add_jump_callback+0x5c>
 8012a06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	db1b      	blt.n	8012a44 <rcl_clock_add_jump_callback+0x5c>
 8012a0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8012a10:	2a01      	cmp	r2, #1
 8012a12:	f173 0300 	sbcs.w	r3, r3, #0
 8012a16:	da15      	bge.n	8012a44 <rcl_clock_add_jump_callback+0x5c>
 8012a18:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8012a1c:	2f00      	cmp	r7, #0
 8012a1e:	d042      	beq.n	8012aa6 <rcl_clock_add_jump_callback+0xbe>
 8012a20:	2300      	movs	r3, #0
 8012a22:	4602      	mov	r2, r0
 8012a24:	e003      	b.n	8012a2e <rcl_clock_add_jump_callback+0x46>
 8012a26:	42bb      	cmp	r3, r7
 8012a28:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8012a2c:	d011      	beq.n	8012a52 <rcl_clock_add_jump_callback+0x6a>
 8012a2e:	6811      	ldr	r1, [r2, #0]
 8012a30:	42b1      	cmp	r1, r6
 8012a32:	f103 0301 	add.w	r3, r3, #1
 8012a36:	d1f6      	bne.n	8012a26 <rcl_clock_add_jump_callback+0x3e>
 8012a38:	6a11      	ldr	r1, [r2, #32]
 8012a3a:	42a9      	cmp	r1, r5
 8012a3c:	d1f3      	bne.n	8012a26 <rcl_clock_add_jump_callback+0x3e>
 8012a3e:	f04f 0e01 	mov.w	lr, #1
 8012a42:	e001      	b.n	8012a48 <rcl_clock_add_jump_callback+0x60>
 8012a44:	f04f 0e0b 	mov.w	lr, #11
 8012a48:	4670      	mov	r0, lr
 8012a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a4e:	b002      	add	sp, #8
 8012a50:	4770      	bx	lr
 8012a52:	3301      	adds	r3, #1
 8012a54:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8012a58:	00d9      	lsls	r1, r3, #3
 8012a5a:	69e3      	ldr	r3, [r4, #28]
 8012a5c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8012a5e:	4798      	blx	r3
 8012a60:	b1f0      	cbz	r0, 8012aa0 <rcl_clock_add_jump_callback+0xb8>
 8012a62:	68a3      	ldr	r3, [r4, #8]
 8012a64:	6060      	str	r0, [r4, #4]
 8012a66:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8012a6a:	f10d 0c18 	add.w	ip, sp, #24
 8012a6e:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8012a72:	f103 0801 	add.w	r8, r3, #1
 8012a76:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8012a7a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012a7e:	f106 0708 	add.w	r7, r6, #8
 8012a82:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012a84:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8012a88:	f04f 0e00 	mov.w	lr, #0
 8012a8c:	e887 0003 	stmia.w	r7, {r0, r1}
 8012a90:	6235      	str	r5, [r6, #32]
 8012a92:	4670      	mov	r0, lr
 8012a94:	f8c4 8008 	str.w	r8, [r4, #8]
 8012a98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a9c:	b002      	add	sp, #8
 8012a9e:	4770      	bx	lr
 8012aa0:	f04f 0e0a 	mov.w	lr, #10
 8012aa4:	e7d0      	b.n	8012a48 <rcl_clock_add_jump_callback+0x60>
 8012aa6:	2128      	movs	r1, #40	@ 0x28
 8012aa8:	e7d7      	b.n	8012a5a <rcl_clock_add_jump_callback+0x72>
 8012aaa:	bf00      	nop

08012aac <rcl_clock_remove_jump_callback>:
 8012aac:	2800      	cmp	r0, #0
 8012aae:	d057      	beq.n	8012b60 <rcl_clock_remove_jump_callback+0xb4>
 8012ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ab4:	4605      	mov	r5, r0
 8012ab6:	3014      	adds	r0, #20
 8012ab8:	4688      	mov	r8, r1
 8012aba:	4692      	mov	sl, r2
 8012abc:	f7f8 ff2a 	bl	800b914 <rcutils_allocator_is_valid>
 8012ac0:	2800      	cmp	r0, #0
 8012ac2:	d03b      	beq.n	8012b3c <rcl_clock_remove_jump_callback+0x90>
 8012ac4:	f1b8 0f00 	cmp.w	r8, #0
 8012ac8:	d038      	beq.n	8012b3c <rcl_clock_remove_jump_callback+0x90>
 8012aca:	68ae      	ldr	r6, [r5, #8]
 8012acc:	b166      	cbz	r6, 8012ae8 <rcl_clock_remove_jump_callback+0x3c>
 8012ace:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8012ad2:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8012ad6:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 8012ada:	464c      	mov	r4, r9
 8012adc:	6823      	ldr	r3, [r4, #0]
 8012ade:	4543      	cmp	r3, r8
 8012ae0:	d005      	beq.n	8012aee <rcl_clock_remove_jump_callback+0x42>
 8012ae2:	3428      	adds	r4, #40	@ 0x28
 8012ae4:	42a7      	cmp	r7, r4
 8012ae6:	d1f9      	bne.n	8012adc <rcl_clock_remove_jump_callback+0x30>
 8012ae8:	2001      	movs	r0, #1
 8012aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012aee:	6a23      	ldr	r3, [r4, #32]
 8012af0:	3428      	adds	r4, #40	@ 0x28
 8012af2:	42bc      	cmp	r4, r7
 8012af4:	d02d      	beq.n	8012b52 <rcl_clock_remove_jump_callback+0xa6>
 8012af6:	4553      	cmp	r3, sl
 8012af8:	d1f0      	bne.n	8012adc <rcl_clock_remove_jump_callback+0x30>
 8012afa:	46a6      	mov	lr, r4
 8012afc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012b00:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8012b04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012b08:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012b0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012b10:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012b14:	3428      	adds	r4, #40	@ 0x28
 8012b16:	42a7      	cmp	r7, r4
 8012b18:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012b1c:	d1ed      	bne.n	8012afa <rcl_clock_remove_jump_callback+0x4e>
 8012b1e:	3e01      	subs	r6, #1
 8012b20:	60ae      	str	r6, [r5, #8]
 8012b22:	b176      	cbz	r6, 8012b42 <rcl_clock_remove_jump_callback+0x96>
 8012b24:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8012b28:	69eb      	ldr	r3, [r5, #28]
 8012b2a:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8012b2c:	00f1      	lsls	r1, r6, #3
 8012b2e:	4648      	mov	r0, r9
 8012b30:	4798      	blx	r3
 8012b32:	b1b8      	cbz	r0, 8012b64 <rcl_clock_remove_jump_callback+0xb8>
 8012b34:	6068      	str	r0, [r5, #4]
 8012b36:	2000      	movs	r0, #0
 8012b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b3c:	200b      	movs	r0, #11
 8012b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b42:	4648      	mov	r0, r9
 8012b44:	69ab      	ldr	r3, [r5, #24]
 8012b46:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8012b48:	4798      	blx	r3
 8012b4a:	606e      	str	r6, [r5, #4]
 8012b4c:	4630      	mov	r0, r6
 8012b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b52:	4553      	cmp	r3, sl
 8012b54:	d1c8      	bne.n	8012ae8 <rcl_clock_remove_jump_callback+0x3c>
 8012b56:	3e01      	subs	r6, #1
 8012b58:	60ae      	str	r6, [r5, #8]
 8012b5a:	2e00      	cmp	r6, #0
 8012b5c:	d1e2      	bne.n	8012b24 <rcl_clock_remove_jump_callback+0x78>
 8012b5e:	e7f0      	b.n	8012b42 <rcl_clock_remove_jump_callback+0x96>
 8012b60:	200b      	movs	r0, #11
 8012b62:	4770      	bx	lr
 8012b64:	200a      	movs	r0, #10
 8012b66:	e7ea      	b.n	8012b3e <rcl_clock_remove_jump_callback+0x92>

08012b68 <_rcl_timer_time_jump>:
 8012b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b6c:	4605      	mov	r5, r0
 8012b6e:	b084      	sub	sp, #16
 8012b70:	4614      	mov	r4, r2
 8012b72:	b131      	cbz	r1, 8012b82 <_rcl_timer_time_jump+0x1a>
 8012b74:	7803      	ldrb	r3, [r0, #0]
 8012b76:	3b02      	subs	r3, #2
 8012b78:	2b01      	cmp	r3, #1
 8012b7a:	d93f      	bls.n	8012bfc <_rcl_timer_time_jump+0x94>
 8012b7c:	b004      	add	sp, #16
 8012b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b82:	6813      	ldr	r3, [r2, #0]
 8012b84:	a902      	add	r1, sp, #8
 8012b86:	6818      	ldr	r0, [r3, #0]
 8012b88:	f7ff ff22 	bl	80129d0 <rcl_clock_get_now>
 8012b8c:	2800      	cmp	r0, #0
 8012b8e:	d1f5      	bne.n	8012b7c <_rcl_timer_time_jump+0x14>
 8012b90:	6820      	ldr	r0, [r4, #0]
 8012b92:	2105      	movs	r1, #5
 8012b94:	3020      	adds	r0, #32
 8012b96:	f001 fdf7 	bl	8014788 <__atomic_load_8>
 8012b9a:	6823      	ldr	r3, [r4, #0]
 8012b9c:	4681      	mov	r9, r0
 8012b9e:	4688      	mov	r8, r1
 8012ba0:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8012ba4:	2105      	movs	r1, #5
 8012ba6:	f001 fdef 	bl	8014788 <__atomic_load_8>
 8012baa:	4607      	mov	r7, r0
 8012bac:	6820      	ldr	r0, [r4, #0]
 8012bae:	460e      	mov	r6, r1
 8012bb0:	3018      	adds	r0, #24
 8012bb2:	2105      	movs	r1, #5
 8012bb4:	f001 fde8 	bl	8014788 <__atomic_load_8>
 8012bb8:	782b      	ldrb	r3, [r5, #0]
 8012bba:	9a02      	ldr	r2, [sp, #8]
 8012bbc:	3b02      	subs	r3, #2
 8012bbe:	2b01      	cmp	r3, #1
 8012bc0:	460d      	mov	r5, r1
 8012bc2:	9b03      	ldr	r3, [sp, #12]
 8012bc4:	4682      	mov	sl, r0
 8012bc6:	d937      	bls.n	8012c38 <_rcl_timer_time_jump+0xd0>
 8012bc8:	42ba      	cmp	r2, r7
 8012bca:	eb73 0106 	sbcs.w	r1, r3, r6
 8012bce:	da5f      	bge.n	8012c90 <_rcl_timer_time_jump+0x128>
 8012bd0:	454a      	cmp	r2, r9
 8012bd2:	eb73 0108 	sbcs.w	r1, r3, r8
 8012bd6:	dad1      	bge.n	8012b7c <_rcl_timer_time_jump+0x14>
 8012bd8:	6820      	ldr	r0, [r4, #0]
 8012bda:	eb1a 0202 	adds.w	r2, sl, r2
 8012bde:	eb43 0305 	adc.w	r3, r3, r5
 8012be2:	2505      	movs	r5, #5
 8012be4:	3028      	adds	r0, #40	@ 0x28
 8012be6:	9500      	str	r5, [sp, #0]
 8012be8:	f001 fe04 	bl	80147f4 <__atomic_store_8>
 8012bec:	6820      	ldr	r0, [r4, #0]
 8012bee:	9500      	str	r5, [sp, #0]
 8012bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012bf4:	3020      	adds	r0, #32
 8012bf6:	f001 fdfd 	bl	80147f4 <__atomic_store_8>
 8012bfa:	e7bf      	b.n	8012b7c <_rcl_timer_time_jump+0x14>
 8012bfc:	6813      	ldr	r3, [r2, #0]
 8012bfe:	a902      	add	r1, sp, #8
 8012c00:	6818      	ldr	r0, [r3, #0]
 8012c02:	f7ff fee5 	bl	80129d0 <rcl_clock_get_now>
 8012c06:	2800      	cmp	r0, #0
 8012c08:	d1b8      	bne.n	8012b7c <_rcl_timer_time_jump+0x14>
 8012c0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012c0e:	4313      	orrs	r3, r2
 8012c10:	d0b4      	beq.n	8012b7c <_rcl_timer_time_jump+0x14>
 8012c12:	6820      	ldr	r0, [r4, #0]
 8012c14:	2105      	movs	r1, #5
 8012c16:	3028      	adds	r0, #40	@ 0x28
 8012c18:	f001 fdb6 	bl	8014788 <__atomic_load_8>
 8012c1c:	9d02      	ldr	r5, [sp, #8]
 8012c1e:	9b03      	ldr	r3, [sp, #12]
 8012c20:	4602      	mov	r2, r0
 8012c22:	6820      	ldr	r0, [r4, #0]
 8012c24:	1b52      	subs	r2, r2, r5
 8012c26:	f04f 0405 	mov.w	r4, #5
 8012c2a:	9400      	str	r4, [sp, #0]
 8012c2c:	eb61 0303 	sbc.w	r3, r1, r3
 8012c30:	3030      	adds	r0, #48	@ 0x30
 8012c32:	f001 fddf 	bl	80147f4 <__atomic_store_8>
 8012c36:	e7a1      	b.n	8012b7c <_rcl_timer_time_jump+0x14>
 8012c38:	4313      	orrs	r3, r2
 8012c3a:	d09f      	beq.n	8012b7c <_rcl_timer_time_jump+0x14>
 8012c3c:	6820      	ldr	r0, [r4, #0]
 8012c3e:	f04f 0805 	mov.w	r8, #5
 8012c42:	2300      	movs	r3, #0
 8012c44:	f8cd 8000 	str.w	r8, [sp]
 8012c48:	3030      	adds	r0, #48	@ 0x30
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	f001 fe08 	bl	8014860 <__atomic_exchange_8>
 8012c50:	ea51 0300 	orrs.w	r3, r1, r0
 8012c54:	4606      	mov	r6, r0
 8012c56:	460f      	mov	r7, r1
 8012c58:	d090      	beq.n	8012b7c <_rcl_timer_time_jump+0x14>
 8012c5a:	9a02      	ldr	r2, [sp, #8]
 8012c5c:	9b03      	ldr	r3, [sp, #12]
 8012c5e:	f8cd 8000 	str.w	r8, [sp]
 8012c62:	1a12      	subs	r2, r2, r0
 8012c64:	6820      	ldr	r0, [r4, #0]
 8012c66:	eb63 0301 	sbc.w	r3, r3, r1
 8012c6a:	eb12 020a 	adds.w	r2, r2, sl
 8012c6e:	eb43 0305 	adc.w	r3, r3, r5
 8012c72:	3028      	adds	r0, #40	@ 0x28
 8012c74:	f001 fdbe 	bl	80147f4 <__atomic_store_8>
 8012c78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012c7c:	f8cd 8000 	str.w	r8, [sp]
 8012c80:	6820      	ldr	r0, [r4, #0]
 8012c82:	1b92      	subs	r2, r2, r6
 8012c84:	eb63 0307 	sbc.w	r3, r3, r7
 8012c88:	3020      	adds	r0, #32
 8012c8a:	f001 fdb3 	bl	80147f4 <__atomic_store_8>
 8012c8e:	e775      	b.n	8012b7c <_rcl_timer_time_jump+0x14>
 8012c90:	6820      	ldr	r0, [r4, #0]
 8012c92:	3008      	adds	r0, #8
 8012c94:	f004 f99e 	bl	8016fd4 <rcl_trigger_guard_condition>
 8012c98:	e770      	b.n	8012b7c <_rcl_timer_time_jump+0x14>
 8012c9a:	bf00      	nop

08012c9c <rcl_get_zero_initialized_timer>:
 8012c9c:	4b01      	ldr	r3, [pc, #4]	@ (8012ca4 <rcl_get_zero_initialized_timer+0x8>)
 8012c9e:	6818      	ldr	r0, [r3, #0]
 8012ca0:	4770      	bx	lr
 8012ca2:	bf00      	nop
 8012ca4:	080190f0 	.word	0x080190f0

08012ca8 <rcl_timer_init>:
 8012ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012cac:	b0aa      	sub	sp, #168	@ 0xa8
 8012cae:	4604      	mov	r4, r0
 8012cb0:	a835      	add	r0, sp, #212	@ 0xd4
 8012cb2:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 8012cb6:	460d      	mov	r5, r1
 8012cb8:	4692      	mov	sl, r2
 8012cba:	f7f8 fe2b 	bl	800b914 <rcutils_allocator_is_valid>
 8012cbe:	2800      	cmp	r0, #0
 8012cc0:	d064      	beq.n	8012d8c <rcl_timer_init+0xe4>
 8012cc2:	2c00      	cmp	r4, #0
 8012cc4:	d062      	beq.n	8012d8c <rcl_timer_init+0xe4>
 8012cc6:	2d00      	cmp	r5, #0
 8012cc8:	d060      	beq.n	8012d8c <rcl_timer_init+0xe4>
 8012cca:	2f00      	cmp	r7, #0
 8012ccc:	db5e      	blt.n	8012d8c <rcl_timer_init+0xe4>
 8012cce:	6823      	ldr	r3, [r4, #0]
 8012cd0:	b123      	cbz	r3, 8012cdc <rcl_timer_init+0x34>
 8012cd2:	2664      	movs	r6, #100	@ 0x64
 8012cd4:	4630      	mov	r0, r6
 8012cd6:	b02a      	add	sp, #168	@ 0xa8
 8012cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cdc:	a908      	add	r1, sp, #32
 8012cde:	4628      	mov	r0, r5
 8012ce0:	f7ff fe76 	bl	80129d0 <rcl_clock_get_now>
 8012ce4:	4606      	mov	r6, r0
 8012ce6:	2800      	cmp	r0, #0
 8012ce8:	d1f4      	bne.n	8012cd4 <rcl_timer_init+0x2c>
 8012cea:	ae06      	add	r6, sp, #24
 8012cec:	4630      	mov	r0, r6
 8012cee:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 8012cf2:	f004 f877 	bl	8016de4 <rcl_get_zero_initialized_guard_condition>
 8012cf6:	e896 0003 	ldmia.w	r6, {r0, r1}
 8012cfa:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 8012cfe:	ae0b      	add	r6, sp, #44	@ 0x2c
 8012d00:	e889 0003 	stmia.w	r9, {r0, r1}
 8012d04:	4630      	mov	r0, r6
 8012d06:	f004 f949 	bl	8016f9c <rcl_guard_condition_get_default_options>
 8012d0a:	ab0d      	add	r3, sp, #52	@ 0x34
 8012d0c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012d10:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012d14:	4651      	mov	r1, sl
 8012d16:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012d1a:	4648      	mov	r0, r9
 8012d1c:	f004 f86c 	bl	8016df8 <rcl_guard_condition_init>
 8012d20:	4606      	mov	r6, r0
 8012d22:	2800      	cmp	r0, #0
 8012d24:	d1d6      	bne.n	8012cd4 <rcl_timer_init+0x2c>
 8012d26:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012d28:	781b      	ldrb	r3, [r3, #0]
 8012d2a:	2b01      	cmp	r3, #1
 8012d2c:	d033      	beq.n	8012d96 <rcl_timer_init+0xee>
 8012d2e:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8012d30:	911a      	str	r1, [sp, #104]	@ 0x68
 8012d32:	4642      	mov	r2, r8
 8012d34:	463b      	mov	r3, r7
 8012d36:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8012d3a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012d3e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8012df0 <rcl_timer_init+0x148>
 8012d42:	eb12 0008 	adds.w	r0, r2, r8
 8012d46:	eb47 0103 	adc.w	r1, r7, r3
 8012d4a:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 8012d4e:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8012d52:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8012d56:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8012d5a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012d5e:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8012d62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012d66:	f8de 3000 	ldr.w	r3, [lr]
 8012d6a:	f8cc 3000 	str.w	r3, [ip]
 8012d6e:	f04f 0a00 	mov.w	sl, #0
 8012d72:	4619      	mov	r1, r3
 8012d74:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8012d78:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8012d7a:	2050      	movs	r0, #80	@ 0x50
 8012d7c:	4798      	blx	r3
 8012d7e:	6020      	str	r0, [r4, #0]
 8012d80:	b358      	cbz	r0, 8012dda <rcl_timer_init+0x132>
 8012d82:	2250      	movs	r2, #80	@ 0x50
 8012d84:	a916      	add	r1, sp, #88	@ 0x58
 8012d86:	f004 ff20 	bl	8017bca <memcpy>
 8012d8a:	e7a3      	b.n	8012cd4 <rcl_timer_init+0x2c>
 8012d8c:	260b      	movs	r6, #11
 8012d8e:	4630      	mov	r0, r6
 8012d90:	b02a      	add	sp, #168	@ 0xa8
 8012d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d96:	2001      	movs	r0, #1
 8012d98:	2100      	movs	r1, #0
 8012d9a:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8012d9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012da2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8012da6:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8012daa:	4a13      	ldr	r2, [pc, #76]	@ (8012df8 <rcl_timer_init+0x150>)
 8012dac:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8012db0:	9405      	str	r4, [sp, #20]
 8012db2:	9204      	str	r2, [sp, #16]
 8012db4:	ab12      	add	r3, sp, #72	@ 0x48
 8012db6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012db8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8012dbc:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8012dc0:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8012dc4:	4628      	mov	r0, r5
 8012dc6:	f7ff fe0f 	bl	80129e8 <rcl_clock_add_jump_callback>
 8012dca:	4682      	mov	sl, r0
 8012dcc:	2800      	cmp	r0, #0
 8012dce:	d0ae      	beq.n	8012d2e <rcl_timer_init+0x86>
 8012dd0:	4648      	mov	r0, r9
 8012dd2:	f004 f8bd 	bl	8016f50 <rcl_guard_condition_fini>
 8012dd6:	4656      	mov	r6, sl
 8012dd8:	e77c      	b.n	8012cd4 <rcl_timer_init+0x2c>
 8012dda:	4648      	mov	r0, r9
 8012ddc:	f004 f8b8 	bl	8016f50 <rcl_guard_condition_fini>
 8012de0:	4905      	ldr	r1, [pc, #20]	@ (8012df8 <rcl_timer_init+0x150>)
 8012de2:	4622      	mov	r2, r4
 8012de4:	4628      	mov	r0, r5
 8012de6:	f7ff fe61 	bl	8012aac <rcl_clock_remove_jump_callback>
 8012dea:	260a      	movs	r6, #10
 8012dec:	e772      	b.n	8012cd4 <rcl_timer_init+0x2c>
 8012dee:	bf00      	nop
	...
 8012df8:	08012b69 	.word	0x08012b69

08012dfc <rcl_timer_call>:
 8012dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e00:	b087      	sub	sp, #28
 8012e02:	2800      	cmp	r0, #0
 8012e04:	d06d      	beq.n	8012ee2 <rcl_timer_call+0xe6>
 8012e06:	6803      	ldr	r3, [r0, #0]
 8012e08:	4604      	mov	r4, r0
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d063      	beq.n	8012ed6 <rcl_timer_call+0xda>
 8012e0e:	f3bf 8f5b 	dmb	ish
 8012e12:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012e16:	f3bf 8f5b 	dmb	ish
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d150      	bne.n	8012ec0 <rcl_timer_call+0xc4>
 8012e1e:	6803      	ldr	r3, [r0, #0]
 8012e20:	a904      	add	r1, sp, #16
 8012e22:	6818      	ldr	r0, [r3, #0]
 8012e24:	f7ff fdd4 	bl	80129d0 <rcl_clock_get_now>
 8012e28:	4605      	mov	r5, r0
 8012e2a:	2800      	cmp	r0, #0
 8012e2c:	d14a      	bne.n	8012ec4 <rcl_timer_call+0xc8>
 8012e2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	db4a      	blt.n	8012ecc <rcl_timer_call+0xd0>
 8012e36:	6820      	ldr	r0, [r4, #0]
 8012e38:	f04f 0a05 	mov.w	sl, #5
 8012e3c:	f8cd a000 	str.w	sl, [sp]
 8012e40:	3020      	adds	r0, #32
 8012e42:	f001 fd0d 	bl	8014860 <__atomic_exchange_8>
 8012e46:	6823      	ldr	r3, [r4, #0]
 8012e48:	f3bf 8f5b 	dmb	ish
 8012e4c:	4680      	mov	r8, r0
 8012e4e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8012e52:	f3bf 8f5b 	dmb	ish
 8012e56:	6820      	ldr	r0, [r4, #0]
 8012e58:	4689      	mov	r9, r1
 8012e5a:	3028      	adds	r0, #40	@ 0x28
 8012e5c:	4651      	mov	r1, sl
 8012e5e:	f001 fc93 	bl	8014788 <__atomic_load_8>
 8012e62:	4606      	mov	r6, r0
 8012e64:	6820      	ldr	r0, [r4, #0]
 8012e66:	460f      	mov	r7, r1
 8012e68:	3018      	adds	r0, #24
 8012e6a:	4651      	mov	r1, sl
 8012e6c:	f001 fc8c 	bl	8014788 <__atomic_load_8>
 8012e70:	1836      	adds	r6, r6, r0
 8012e72:	4602      	mov	r2, r0
 8012e74:	4682      	mov	sl, r0
 8012e76:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8012e7a:	eb47 0701 	adc.w	r7, r7, r1
 8012e7e:	4286      	cmp	r6, r0
 8012e80:	460b      	mov	r3, r1
 8012e82:	eb77 010c 	sbcs.w	r1, r7, ip
 8012e86:	da04      	bge.n	8012e92 <rcl_timer_call+0x96>
 8012e88:	ea53 0102 	orrs.w	r1, r3, r2
 8012e8c:	d12e      	bne.n	8012eec <rcl_timer_call+0xf0>
 8012e8e:	4606      	mov	r6, r0
 8012e90:	4667      	mov	r7, ip
 8012e92:	6820      	ldr	r0, [r4, #0]
 8012e94:	2105      	movs	r1, #5
 8012e96:	4632      	mov	r2, r6
 8012e98:	463b      	mov	r3, r7
 8012e9a:	3028      	adds	r0, #40	@ 0x28
 8012e9c:	9100      	str	r1, [sp, #0]
 8012e9e:	f001 fca9 	bl	80147f4 <__atomic_store_8>
 8012ea2:	f1bb 0f00 	cmp.w	fp, #0
 8012ea6:	d00d      	beq.n	8012ec4 <rcl_timer_call+0xc8>
 8012ea8:	9a04      	ldr	r2, [sp, #16]
 8012eaa:	9b05      	ldr	r3, [sp, #20]
 8012eac:	ebb2 0208 	subs.w	r2, r2, r8
 8012eb0:	4620      	mov	r0, r4
 8012eb2:	eb63 0309 	sbc.w	r3, r3, r9
 8012eb6:	47d8      	blx	fp
 8012eb8:	4628      	mov	r0, r5
 8012eba:	b007      	add	sp, #28
 8012ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ec0:	f240 3521 	movw	r5, #801	@ 0x321
 8012ec4:	4628      	mov	r0, r5
 8012ec6:	b007      	add	sp, #28
 8012ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ecc:	2501      	movs	r5, #1
 8012ece:	4628      	mov	r0, r5
 8012ed0:	b007      	add	sp, #28
 8012ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ed6:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8012eda:	4628      	mov	r0, r5
 8012edc:	b007      	add	sp, #28
 8012ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ee2:	250b      	movs	r5, #11
 8012ee4:	4628      	mov	r0, r5
 8012ee6:	b007      	add	sp, #28
 8012ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012eec:	1b80      	subs	r0, r0, r6
 8012eee:	eb6c 0107 	sbc.w	r1, ip, r7
 8012ef2:	3801      	subs	r0, #1
 8012ef4:	f161 0100 	sbc.w	r1, r1, #0
 8012ef8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8012efc:	f7ed fde6 	bl	8000acc <__aeabi_ldivmod>
 8012f00:	9b02      	ldr	r3, [sp, #8]
 8012f02:	3001      	adds	r0, #1
 8012f04:	f141 0100 	adc.w	r1, r1, #0
 8012f08:	fb00 f303 	mul.w	r3, r0, r3
 8012f0c:	fb01 330a 	mla	r3, r1, sl, r3
 8012f10:	fba0 0a0a 	umull	r0, sl, r0, sl
 8012f14:	1986      	adds	r6, r0, r6
 8012f16:	4453      	add	r3, sl
 8012f18:	eb43 0707 	adc.w	r7, r3, r7
 8012f1c:	e7b9      	b.n	8012e92 <rcl_timer_call+0x96>
 8012f1e:	bf00      	nop

08012f20 <rcl_timer_is_ready>:
 8012f20:	b570      	push	{r4, r5, r6, lr}
 8012f22:	b082      	sub	sp, #8
 8012f24:	b378      	cbz	r0, 8012f86 <rcl_timer_is_ready+0x66>
 8012f26:	6803      	ldr	r3, [r0, #0]
 8012f28:	4604      	mov	r4, r0
 8012f2a:	b383      	cbz	r3, 8012f8e <rcl_timer_is_ready+0x6e>
 8012f2c:	460d      	mov	r5, r1
 8012f2e:	b351      	cbz	r1, 8012f86 <rcl_timer_is_ready+0x66>
 8012f30:	f3bf 8f5b 	dmb	ish
 8012f34:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012f38:	f3bf 8f5b 	dmb	ish
 8012f3c:	b953      	cbnz	r3, 8012f54 <rcl_timer_is_ready+0x34>
 8012f3e:	6803      	ldr	r3, [r0, #0]
 8012f40:	4669      	mov	r1, sp
 8012f42:	6818      	ldr	r0, [r3, #0]
 8012f44:	f7ff fd44 	bl	80129d0 <rcl_clock_get_now>
 8012f48:	4606      	mov	r6, r0
 8012f4a:	b140      	cbz	r0, 8012f5e <rcl_timer_is_ready+0x3e>
 8012f4c:	f240 3321 	movw	r3, #801	@ 0x321
 8012f50:	4298      	cmp	r0, r3
 8012f52:	d101      	bne.n	8012f58 <rcl_timer_is_ready+0x38>
 8012f54:	2600      	movs	r6, #0
 8012f56:	702e      	strb	r6, [r5, #0]
 8012f58:	4630      	mov	r0, r6
 8012f5a:	b002      	add	sp, #8
 8012f5c:	bd70      	pop	{r4, r5, r6, pc}
 8012f5e:	6820      	ldr	r0, [r4, #0]
 8012f60:	2105      	movs	r1, #5
 8012f62:	3028      	adds	r0, #40	@ 0x28
 8012f64:	f001 fc10 	bl	8014788 <__atomic_load_8>
 8012f68:	9b00      	ldr	r3, [sp, #0]
 8012f6a:	1ac0      	subs	r0, r0, r3
 8012f6c:	9b01      	ldr	r3, [sp, #4]
 8012f6e:	eb61 0103 	sbc.w	r1, r1, r3
 8012f72:	2801      	cmp	r0, #1
 8012f74:	f171 0300 	sbcs.w	r3, r1, #0
 8012f78:	bfb4      	ite	lt
 8012f7a:	2301      	movlt	r3, #1
 8012f7c:	2300      	movge	r3, #0
 8012f7e:	4630      	mov	r0, r6
 8012f80:	702b      	strb	r3, [r5, #0]
 8012f82:	b002      	add	sp, #8
 8012f84:	bd70      	pop	{r4, r5, r6, pc}
 8012f86:	260b      	movs	r6, #11
 8012f88:	4630      	mov	r0, r6
 8012f8a:	b002      	add	sp, #8
 8012f8c:	bd70      	pop	{r4, r5, r6, pc}
 8012f8e:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8012f92:	e7e1      	b.n	8012f58 <rcl_timer_is_ready+0x38>

08012f94 <rcl_timer_get_time_until_next_call>:
 8012f94:	b570      	push	{r4, r5, r6, lr}
 8012f96:	b082      	sub	sp, #8
 8012f98:	b330      	cbz	r0, 8012fe8 <rcl_timer_get_time_until_next_call+0x54>
 8012f9a:	6803      	ldr	r3, [r0, #0]
 8012f9c:	4604      	mov	r4, r0
 8012f9e:	b33b      	cbz	r3, 8012ff0 <rcl_timer_get_time_until_next_call+0x5c>
 8012fa0:	460d      	mov	r5, r1
 8012fa2:	b309      	cbz	r1, 8012fe8 <rcl_timer_get_time_until_next_call+0x54>
 8012fa4:	f3bf 8f5b 	dmb	ish
 8012fa8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012fac:	f3bf 8f5b 	dmb	ish
 8012fb0:	b9ab      	cbnz	r3, 8012fde <rcl_timer_get_time_until_next_call+0x4a>
 8012fb2:	6803      	ldr	r3, [r0, #0]
 8012fb4:	4669      	mov	r1, sp
 8012fb6:	6818      	ldr	r0, [r3, #0]
 8012fb8:	f7ff fd0a 	bl	80129d0 <rcl_clock_get_now>
 8012fbc:	4606      	mov	r6, r0
 8012fbe:	b958      	cbnz	r0, 8012fd8 <rcl_timer_get_time_until_next_call+0x44>
 8012fc0:	6820      	ldr	r0, [r4, #0]
 8012fc2:	2105      	movs	r1, #5
 8012fc4:	3028      	adds	r0, #40	@ 0x28
 8012fc6:	f001 fbdf 	bl	8014788 <__atomic_load_8>
 8012fca:	9b00      	ldr	r3, [sp, #0]
 8012fcc:	1ac0      	subs	r0, r0, r3
 8012fce:	9b01      	ldr	r3, [sp, #4]
 8012fd0:	6028      	str	r0, [r5, #0]
 8012fd2:	eb61 0103 	sbc.w	r1, r1, r3
 8012fd6:	6069      	str	r1, [r5, #4]
 8012fd8:	4630      	mov	r0, r6
 8012fda:	b002      	add	sp, #8
 8012fdc:	bd70      	pop	{r4, r5, r6, pc}
 8012fde:	f240 3621 	movw	r6, #801	@ 0x321
 8012fe2:	4630      	mov	r0, r6
 8012fe4:	b002      	add	sp, #8
 8012fe6:	bd70      	pop	{r4, r5, r6, pc}
 8012fe8:	260b      	movs	r6, #11
 8012fea:	4630      	mov	r0, r6
 8012fec:	b002      	add	sp, #8
 8012fee:	bd70      	pop	{r4, r5, r6, pc}
 8012ff0:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8012ff4:	e7f0      	b.n	8012fd8 <rcl_timer_get_time_until_next_call+0x44>
 8012ff6:	bf00      	nop

08012ff8 <rcl_timer_get_guard_condition>:
 8012ff8:	b130      	cbz	r0, 8013008 <rcl_timer_get_guard_condition+0x10>
 8012ffa:	6800      	ldr	r0, [r0, #0]
 8012ffc:	b120      	cbz	r0, 8013008 <rcl_timer_get_guard_condition+0x10>
 8012ffe:	68c3      	ldr	r3, [r0, #12]
 8013000:	b10b      	cbz	r3, 8013006 <rcl_timer_get_guard_condition+0xe>
 8013002:	3008      	adds	r0, #8
 8013004:	4770      	bx	lr
 8013006:	4618      	mov	r0, r3
 8013008:	4770      	bx	lr
 801300a:	bf00      	nop

0801300c <rcl_validate_enclave_name_with_size>:
 801300c:	b378      	cbz	r0, 801306e <rcl_validate_enclave_name_with_size+0x62>
 801300e:	b570      	push	{r4, r5, r6, lr}
 8013010:	4615      	mov	r5, r2
 8013012:	b0c2      	sub	sp, #264	@ 0x108
 8013014:	b302      	cbz	r2, 8013058 <rcl_validate_enclave_name_with_size+0x4c>
 8013016:	461e      	mov	r6, r3
 8013018:	466a      	mov	r2, sp
 801301a:	ab01      	add	r3, sp, #4
 801301c:	460c      	mov	r4, r1
 801301e:	f002 f835 	bl	801508c <rmw_validate_namespace_with_size>
 8013022:	4684      	mov	ip, r0
 8013024:	b9e8      	cbnz	r0, 8013062 <rcl_validate_enclave_name_with_size+0x56>
 8013026:	9b00      	ldr	r3, [sp, #0]
 8013028:	b923      	cbnz	r3, 8013034 <rcl_validate_enclave_name_with_size+0x28>
 801302a:	2300      	movs	r3, #0
 801302c:	602b      	str	r3, [r5, #0]
 801302e:	4660      	mov	r0, ip
 8013030:	b042      	add	sp, #264	@ 0x108
 8013032:	bd70      	pop	{r4, r5, r6, pc}
 8013034:	2b07      	cmp	r3, #7
 8013036:	d007      	beq.n	8013048 <rcl_validate_enclave_name_with_size+0x3c>
 8013038:	1e5a      	subs	r2, r3, #1
 801303a:	2a05      	cmp	r2, #5
 801303c:	d833      	bhi.n	80130a6 <rcl_validate_enclave_name_with_size+0x9a>
 801303e:	e8df f002 	tbb	[pc, r2]
 8013042:	2c2f      	.short	0x2c2f
 8013044:	1a232629 	.word	0x1a232629
 8013048:	2cff      	cmp	r4, #255	@ 0xff
 801304a:	d9ee      	bls.n	801302a <rcl_validate_enclave_name_with_size+0x1e>
 801304c:	602b      	str	r3, [r5, #0]
 801304e:	2e00      	cmp	r6, #0
 8013050:	d0ed      	beq.n	801302e <rcl_validate_enclave_name_with_size+0x22>
 8013052:	23fe      	movs	r3, #254	@ 0xfe
 8013054:	6033      	str	r3, [r6, #0]
 8013056:	e7ea      	b.n	801302e <rcl_validate_enclave_name_with_size+0x22>
 8013058:	f04f 0c0b 	mov.w	ip, #11
 801305c:	4660      	mov	r0, ip
 801305e:	b042      	add	sp, #264	@ 0x108
 8013060:	bd70      	pop	{r4, r5, r6, pc}
 8013062:	f7fe fd87 	bl	8011b74 <rcl_convert_rmw_ret_to_rcl_ret>
 8013066:	4684      	mov	ip, r0
 8013068:	4660      	mov	r0, ip
 801306a:	b042      	add	sp, #264	@ 0x108
 801306c:	bd70      	pop	{r4, r5, r6, pc}
 801306e:	f04f 0c0b 	mov.w	ip, #11
 8013072:	4660      	mov	r0, ip
 8013074:	4770      	bx	lr
 8013076:	2306      	movs	r3, #6
 8013078:	602b      	str	r3, [r5, #0]
 801307a:	2e00      	cmp	r6, #0
 801307c:	d0d7      	beq.n	801302e <rcl_validate_enclave_name_with_size+0x22>
 801307e:	9b01      	ldr	r3, [sp, #4]
 8013080:	6033      	str	r3, [r6, #0]
 8013082:	4660      	mov	r0, ip
 8013084:	b042      	add	sp, #264	@ 0x108
 8013086:	bd70      	pop	{r4, r5, r6, pc}
 8013088:	2305      	movs	r3, #5
 801308a:	602b      	str	r3, [r5, #0]
 801308c:	e7f5      	b.n	801307a <rcl_validate_enclave_name_with_size+0x6e>
 801308e:	2304      	movs	r3, #4
 8013090:	602b      	str	r3, [r5, #0]
 8013092:	e7f2      	b.n	801307a <rcl_validate_enclave_name_with_size+0x6e>
 8013094:	2303      	movs	r3, #3
 8013096:	602b      	str	r3, [r5, #0]
 8013098:	e7ef      	b.n	801307a <rcl_validate_enclave_name_with_size+0x6e>
 801309a:	2302      	movs	r3, #2
 801309c:	602b      	str	r3, [r5, #0]
 801309e:	e7ec      	b.n	801307a <rcl_validate_enclave_name_with_size+0x6e>
 80130a0:	2301      	movs	r3, #1
 80130a2:	602b      	str	r3, [r5, #0]
 80130a4:	e7e9      	b.n	801307a <rcl_validate_enclave_name_with_size+0x6e>
 80130a6:	4a04      	ldr	r2, [pc, #16]	@ (80130b8 <rcl_validate_enclave_name_with_size+0xac>)
 80130a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80130ac:	a802      	add	r0, sp, #8
 80130ae:	f001 fd25 	bl	8014afc <rcutils_snprintf>
 80130b2:	f04f 0c01 	mov.w	ip, #1
 80130b6:	e7ba      	b.n	801302e <rcl_validate_enclave_name_with_size+0x22>
 80130b8:	080190f4 	.word	0x080190f4

080130bc <rcl_validate_enclave_name>:
 80130bc:	b168      	cbz	r0, 80130da <rcl_validate_enclave_name+0x1e>
 80130be:	b570      	push	{r4, r5, r6, lr}
 80130c0:	460d      	mov	r5, r1
 80130c2:	4616      	mov	r6, r2
 80130c4:	4604      	mov	r4, r0
 80130c6:	f7ed f8b5 	bl	8000234 <strlen>
 80130ca:	4633      	mov	r3, r6
 80130cc:	4601      	mov	r1, r0
 80130ce:	462a      	mov	r2, r5
 80130d0:	4620      	mov	r0, r4
 80130d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80130d6:	f7ff bf99 	b.w	801300c <rcl_validate_enclave_name_with_size>
 80130da:	200b      	movs	r0, #11
 80130dc:	4770      	bx	lr
 80130de:	bf00      	nop

080130e0 <rcl_get_zero_initialized_wait_set>:
 80130e0:	b510      	push	{r4, lr}
 80130e2:	4c08      	ldr	r4, [pc, #32]	@ (8013104 <rcl_get_zero_initialized_wait_set+0x24>)
 80130e4:	4686      	mov	lr, r0
 80130e6:	4684      	mov	ip, r0
 80130e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80130ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80130ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80130f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80130f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80130f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80130fa:	6823      	ldr	r3, [r4, #0]
 80130fc:	f8cc 3000 	str.w	r3, [ip]
 8013100:	4670      	mov	r0, lr
 8013102:	bd10      	pop	{r4, pc}
 8013104:	08019154 	.word	0x08019154

08013108 <rcl_wait_set_is_valid>:
 8013108:	b118      	cbz	r0, 8013112 <rcl_wait_set_is_valid+0xa>
 801310a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801310c:	3800      	subs	r0, #0
 801310e:	bf18      	it	ne
 8013110:	2001      	movne	r0, #1
 8013112:	4770      	bx	lr

08013114 <rcl_wait_set_fini>:
 8013114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013118:	b082      	sub	sp, #8
 801311a:	2800      	cmp	r0, #0
 801311c:	f000 8095 	beq.w	801324a <rcl_wait_set_fini+0x136>
 8013120:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8013122:	4604      	mov	r4, r0
 8013124:	2e00      	cmp	r6, #0
 8013126:	f000 808c 	beq.w	8013242 <rcl_wait_set_fini+0x12e>
 801312a:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 801312c:	f002 fd68 	bl	8015c00 <rmw_destroy_wait_set>
 8013130:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013132:	1e06      	subs	r6, r0, #0
 8013134:	bf18      	it	ne
 8013136:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801313a:	2d00      	cmp	r5, #0
 801313c:	f000 8081 	beq.w	8013242 <rcl_wait_set_fini+0x12e>
 8013140:	6820      	ldr	r0, [r4, #0]
 8013142:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8013146:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013148:	2700      	movs	r7, #0
 801314a:	6067      	str	r7, [r4, #4]
 801314c:	602f      	str	r7, [r5, #0]
 801314e:	b120      	cbz	r0, 801315a <rcl_wait_set_fini+0x46>
 8013150:	9101      	str	r1, [sp, #4]
 8013152:	47c0      	blx	r8
 8013154:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013156:	9901      	ldr	r1, [sp, #4]
 8013158:	6027      	str	r7, [r4, #0]
 801315a:	68a8      	ldr	r0, [r5, #8]
 801315c:	b120      	cbz	r0, 8013168 <rcl_wait_set_fini+0x54>
 801315e:	47c0      	blx	r8
 8013160:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013162:	2300      	movs	r3, #0
 8013164:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8013168:	68a0      	ldr	r0, [r4, #8]
 801316a:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801316c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801316e:	f04f 0800 	mov.w	r8, #0
 8013172:	f8c4 800c 	str.w	r8, [r4, #12]
 8013176:	f8c5 800c 	str.w	r8, [r5, #12]
 801317a:	b128      	cbz	r0, 8013188 <rcl_wait_set_fini+0x74>
 801317c:	47b8      	blx	r7
 801317e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013180:	f8c4 8008 	str.w	r8, [r4, #8]
 8013184:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8013186:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013188:	6968      	ldr	r0, [r5, #20]
 801318a:	f04f 0800 	mov.w	r8, #0
 801318e:	f8c5 8010 	str.w	r8, [r5, #16]
 8013192:	b128      	cbz	r0, 80131a0 <rcl_wait_set_fini+0x8c>
 8013194:	47b8      	blx	r7
 8013196:	f8c5 8014 	str.w	r8, [r5, #20]
 801319a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801319c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801319e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80131a0:	6920      	ldr	r0, [r4, #16]
 80131a2:	f04f 0800 	mov.w	r8, #0
 80131a6:	f8c4 8014 	str.w	r8, [r4, #20]
 80131aa:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 80131ae:	b128      	cbz	r0, 80131bc <rcl_wait_set_fini+0xa8>
 80131b0:	47b8      	blx	r7
 80131b2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80131b4:	f8c4 8010 	str.w	r8, [r4, #16]
 80131b8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80131ba:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80131bc:	69a0      	ldr	r0, [r4, #24]
 80131be:	f04f 0800 	mov.w	r8, #0
 80131c2:	f8c4 801c 	str.w	r8, [r4, #28]
 80131c6:	f8c5 8018 	str.w	r8, [r5, #24]
 80131ca:	b128      	cbz	r0, 80131d8 <rcl_wait_set_fini+0xc4>
 80131cc:	9101      	str	r1, [sp, #4]
 80131ce:	47b8      	blx	r7
 80131d0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80131d2:	9901      	ldr	r1, [sp, #4]
 80131d4:	f8c4 8018 	str.w	r8, [r4, #24]
 80131d8:	6a28      	ldr	r0, [r5, #32]
 80131da:	b120      	cbz	r0, 80131e6 <rcl_wait_set_fini+0xd2>
 80131dc:	47b8      	blx	r7
 80131de:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80131e0:	2300      	movs	r3, #0
 80131e2:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80131e6:	6a20      	ldr	r0, [r4, #32]
 80131e8:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80131ec:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80131ee:	2700      	movs	r7, #0
 80131f0:	6267      	str	r7, [r4, #36]	@ 0x24
 80131f2:	626f      	str	r7, [r5, #36]	@ 0x24
 80131f4:	b120      	cbz	r0, 8013200 <rcl_wait_set_fini+0xec>
 80131f6:	9101      	str	r1, [sp, #4]
 80131f8:	47c0      	blx	r8
 80131fa:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80131fc:	9901      	ldr	r1, [sp, #4]
 80131fe:	6227      	str	r7, [r4, #32]
 8013200:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8013202:	b120      	cbz	r0, 801320e <rcl_wait_set_fini+0xfa>
 8013204:	47c0      	blx	r8
 8013206:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013208:	2300      	movs	r3, #0
 801320a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801320e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8013210:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8013214:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013216:	2700      	movs	r7, #0
 8013218:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801321a:	632f      	str	r7, [r5, #48]	@ 0x30
 801321c:	b120      	cbz	r0, 8013228 <rcl_wait_set_fini+0x114>
 801321e:	9101      	str	r1, [sp, #4]
 8013220:	47c0      	blx	r8
 8013222:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013224:	9901      	ldr	r1, [sp, #4]
 8013226:	62a7      	str	r7, [r4, #40]	@ 0x28
 8013228:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801322a:	b120      	cbz	r0, 8013236 <rcl_wait_set_fini+0x122>
 801322c:	47c0      	blx	r8
 801322e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013230:	2300      	movs	r3, #0
 8013232:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8013236:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8013238:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801323a:	4628      	mov	r0, r5
 801323c:	4798      	blx	r3
 801323e:	2300      	movs	r3, #0
 8013240:	6323      	str	r3, [r4, #48]	@ 0x30
 8013242:	4630      	mov	r0, r6
 8013244:	b002      	add	sp, #8
 8013246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801324a:	260b      	movs	r6, #11
 801324c:	4630      	mov	r0, r6
 801324e:	b002      	add	sp, #8
 8013250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013254 <rcl_wait_set_add_subscription>:
 8013254:	b318      	cbz	r0, 801329e <rcl_wait_set_add_subscription+0x4a>
 8013256:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013258:	b570      	push	{r4, r5, r6, lr}
 801325a:	4604      	mov	r4, r0
 801325c:	b30b      	cbz	r3, 80132a2 <rcl_wait_set_add_subscription+0x4e>
 801325e:	b319      	cbz	r1, 80132a8 <rcl_wait_set_add_subscription+0x54>
 8013260:	681d      	ldr	r5, [r3, #0]
 8013262:	6840      	ldr	r0, [r0, #4]
 8013264:	4285      	cmp	r5, r0
 8013266:	d217      	bcs.n	8013298 <rcl_wait_set_add_subscription+0x44>
 8013268:	6820      	ldr	r0, [r4, #0]
 801326a:	1c6e      	adds	r6, r5, #1
 801326c:	601e      	str	r6, [r3, #0]
 801326e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013272:	b102      	cbz	r2, 8013276 <rcl_wait_set_add_subscription+0x22>
 8013274:	6015      	str	r5, [r2, #0]
 8013276:	4608      	mov	r0, r1
 8013278:	f7ff fb0a 	bl	8012890 <rcl_subscription_get_rmw_handle>
 801327c:	b150      	cbz	r0, 8013294 <rcl_wait_set_add_subscription+0x40>
 801327e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013280:	6842      	ldr	r2, [r0, #4]
 8013282:	689b      	ldr	r3, [r3, #8]
 8013284:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013288:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801328a:	6853      	ldr	r3, [r2, #4]
 801328c:	3301      	adds	r3, #1
 801328e:	2000      	movs	r0, #0
 8013290:	6053      	str	r3, [r2, #4]
 8013292:	bd70      	pop	{r4, r5, r6, pc}
 8013294:	2001      	movs	r0, #1
 8013296:	bd70      	pop	{r4, r5, r6, pc}
 8013298:	f240 3086 	movw	r0, #902	@ 0x386
 801329c:	bd70      	pop	{r4, r5, r6, pc}
 801329e:	200b      	movs	r0, #11
 80132a0:	4770      	bx	lr
 80132a2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80132a6:	bd70      	pop	{r4, r5, r6, pc}
 80132a8:	200b      	movs	r0, #11
 80132aa:	bd70      	pop	{r4, r5, r6, pc}

080132ac <rcl_wait_set_clear>:
 80132ac:	2800      	cmp	r0, #0
 80132ae:	d073      	beq.n	8013398 <rcl_wait_set_clear+0xec>
 80132b0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80132b2:	b510      	push	{r4, lr}
 80132b4:	4604      	mov	r4, r0
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d070      	beq.n	801339c <rcl_wait_set_clear+0xf0>
 80132ba:	6800      	ldr	r0, [r0, #0]
 80132bc:	b138      	cbz	r0, 80132ce <rcl_wait_set_clear+0x22>
 80132be:	6862      	ldr	r2, [r4, #4]
 80132c0:	2100      	movs	r1, #0
 80132c2:	0092      	lsls	r2, r2, #2
 80132c4:	f004 fbb8 	bl	8017a38 <memset>
 80132c8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80132ca:	2200      	movs	r2, #0
 80132cc:	601a      	str	r2, [r3, #0]
 80132ce:	68a0      	ldr	r0, [r4, #8]
 80132d0:	b138      	cbz	r0, 80132e2 <rcl_wait_set_clear+0x36>
 80132d2:	68e2      	ldr	r2, [r4, #12]
 80132d4:	2100      	movs	r1, #0
 80132d6:	0092      	lsls	r2, r2, #2
 80132d8:	f004 fbae 	bl	8017a38 <memset>
 80132dc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80132de:	2200      	movs	r2, #0
 80132e0:	60da      	str	r2, [r3, #12]
 80132e2:	69a0      	ldr	r0, [r4, #24]
 80132e4:	b138      	cbz	r0, 80132f6 <rcl_wait_set_clear+0x4a>
 80132e6:	69e2      	ldr	r2, [r4, #28]
 80132e8:	2100      	movs	r1, #0
 80132ea:	0092      	lsls	r2, r2, #2
 80132ec:	f004 fba4 	bl	8017a38 <memset>
 80132f0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80132f2:	2200      	movs	r2, #0
 80132f4:	619a      	str	r2, [r3, #24]
 80132f6:	6a20      	ldr	r0, [r4, #32]
 80132f8:	b138      	cbz	r0, 801330a <rcl_wait_set_clear+0x5e>
 80132fa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80132fc:	2100      	movs	r1, #0
 80132fe:	0092      	lsls	r2, r2, #2
 8013300:	f004 fb9a 	bl	8017a38 <memset>
 8013304:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013306:	2200      	movs	r2, #0
 8013308:	625a      	str	r2, [r3, #36]	@ 0x24
 801330a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801330c:	b138      	cbz	r0, 801331e <rcl_wait_set_clear+0x72>
 801330e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013310:	2100      	movs	r1, #0
 8013312:	0092      	lsls	r2, r2, #2
 8013314:	f004 fb90 	bl	8017a38 <memset>
 8013318:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801331a:	2200      	movs	r2, #0
 801331c:	631a      	str	r2, [r3, #48]	@ 0x30
 801331e:	6920      	ldr	r0, [r4, #16]
 8013320:	b138      	cbz	r0, 8013332 <rcl_wait_set_clear+0x86>
 8013322:	6962      	ldr	r2, [r4, #20]
 8013324:	2100      	movs	r1, #0
 8013326:	0092      	lsls	r2, r2, #2
 8013328:	f004 fb86 	bl	8017a38 <memset>
 801332c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801332e:	2200      	movs	r2, #0
 8013330:	641a      	str	r2, [r3, #64]	@ 0x40
 8013332:	6898      	ldr	r0, [r3, #8]
 8013334:	b138      	cbz	r0, 8013346 <rcl_wait_set_clear+0x9a>
 8013336:	685a      	ldr	r2, [r3, #4]
 8013338:	2100      	movs	r1, #0
 801333a:	0092      	lsls	r2, r2, #2
 801333c:	f004 fb7c 	bl	8017a38 <memset>
 8013340:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013342:	2200      	movs	r2, #0
 8013344:	605a      	str	r2, [r3, #4]
 8013346:	6958      	ldr	r0, [r3, #20]
 8013348:	b138      	cbz	r0, 801335a <rcl_wait_set_clear+0xae>
 801334a:	691a      	ldr	r2, [r3, #16]
 801334c:	2100      	movs	r1, #0
 801334e:	0092      	lsls	r2, r2, #2
 8013350:	f004 fb72 	bl	8017a38 <memset>
 8013354:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013356:	2200      	movs	r2, #0
 8013358:	611a      	str	r2, [r3, #16]
 801335a:	6a18      	ldr	r0, [r3, #32]
 801335c:	b138      	cbz	r0, 801336e <rcl_wait_set_clear+0xc2>
 801335e:	69da      	ldr	r2, [r3, #28]
 8013360:	2100      	movs	r1, #0
 8013362:	0092      	lsls	r2, r2, #2
 8013364:	f004 fb68 	bl	8017a38 <memset>
 8013368:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801336a:	2200      	movs	r2, #0
 801336c:	61da      	str	r2, [r3, #28]
 801336e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8013370:	b138      	cbz	r0, 8013382 <rcl_wait_set_clear+0xd6>
 8013372:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013374:	2100      	movs	r1, #0
 8013376:	0092      	lsls	r2, r2, #2
 8013378:	f004 fb5e 	bl	8017a38 <memset>
 801337c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801337e:	2200      	movs	r2, #0
 8013380:	629a      	str	r2, [r3, #40]	@ 0x28
 8013382:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8013384:	b138      	cbz	r0, 8013396 <rcl_wait_set_clear+0xea>
 8013386:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013388:	2100      	movs	r1, #0
 801338a:	0092      	lsls	r2, r2, #2
 801338c:	f004 fb54 	bl	8017a38 <memset>
 8013390:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013392:	2000      	movs	r0, #0
 8013394:	6358      	str	r0, [r3, #52]	@ 0x34
 8013396:	bd10      	pop	{r4, pc}
 8013398:	200b      	movs	r0, #11
 801339a:	4770      	bx	lr
 801339c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80133a0:	bd10      	pop	{r4, pc}
 80133a2:	bf00      	nop

080133a4 <rcl_wait_set_resize>:
 80133a4:	2800      	cmp	r0, #0
 80133a6:	f000 8185 	beq.w	80136b4 <rcl_wait_set_resize+0x310>
 80133aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133ae:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80133b0:	b083      	sub	sp, #12
 80133b2:	4605      	mov	r5, r0
 80133b4:	2c00      	cmp	r4, #0
 80133b6:	f000 817f 	beq.w	80136b8 <rcl_wait_set_resize+0x314>
 80133ba:	f04f 0900 	mov.w	r9, #0
 80133be:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 80133c2:	461f      	mov	r7, r3
 80133c4:	4688      	mov	r8, r1
 80133c6:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 80133ca:	4616      	mov	r6, r2
 80133cc:	f8c0 9004 	str.w	r9, [r0, #4]
 80133d0:	f8c4 9000 	str.w	r9, [r4]
 80133d4:	2900      	cmp	r1, #0
 80133d6:	f000 80bd 	beq.w	8013554 <rcl_wait_set_resize+0x1b0>
 80133da:	008c      	lsls	r4, r1, #2
 80133dc:	6800      	ldr	r0, [r0, #0]
 80133de:	9301      	str	r3, [sp, #4]
 80133e0:	4652      	mov	r2, sl
 80133e2:	4621      	mov	r1, r4
 80133e4:	4798      	blx	r3
 80133e6:	9b01      	ldr	r3, [sp, #4]
 80133e8:	6028      	str	r0, [r5, #0]
 80133ea:	2800      	cmp	r0, #0
 80133ec:	f000 80cb 	beq.w	8013586 <rcl_wait_set_resize+0x1e2>
 80133f0:	4622      	mov	r2, r4
 80133f2:	4649      	mov	r1, r9
 80133f4:	9301      	str	r3, [sp, #4]
 80133f6:	f004 fb1f 	bl	8017a38 <memset>
 80133fa:	f8c5 8004 	str.w	r8, [r5, #4]
 80133fe:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8013402:	9b01      	ldr	r3, [sp, #4]
 8013404:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8013408:	f8c8 9004 	str.w	r9, [r8, #4]
 801340c:	4652      	mov	r2, sl
 801340e:	4621      	mov	r1, r4
 8013410:	4798      	blx	r3
 8013412:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013414:	f8c8 0008 	str.w	r0, [r8, #8]
 8013418:	689b      	ldr	r3, [r3, #8]
 801341a:	2b00      	cmp	r3, #0
 801341c:	f000 80ac 	beq.w	8013578 <rcl_wait_set_resize+0x1d4>
 8013420:	4622      	mov	r2, r4
 8013422:	4649      	mov	r1, r9
 8013424:	4618      	mov	r0, r3
 8013426:	f004 fb07 	bl	8017a38 <memset>
 801342a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801342c:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013430:	f04f 0800 	mov.w	r8, #0
 8013434:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8013438:	f8c5 800c 	str.w	r8, [r5, #12]
 801343c:	f8c4 800c 	str.w	r8, [r4, #12]
 8013440:	2e00      	cmp	r6, #0
 8013442:	f040 80a4 	bne.w	801358e <rcl_wait_set_resize+0x1ea>
 8013446:	68a8      	ldr	r0, [r5, #8]
 8013448:	b128      	cbz	r0, 8013456 <rcl_wait_set_resize+0xb2>
 801344a:	4649      	mov	r1, r9
 801344c:	4790      	blx	r2
 801344e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013450:	60ae      	str	r6, [r5, #8]
 8013452:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013456:	f04f 0800 	mov.w	r8, #0
 801345a:	19f6      	adds	r6, r6, r7
 801345c:	f8c4 8010 	str.w	r8, [r4, #16]
 8013460:	f040 80ac 	bne.w	80135bc <rcl_wait_set_resize+0x218>
 8013464:	6960      	ldr	r0, [r4, #20]
 8013466:	b130      	cbz	r0, 8013476 <rcl_wait_set_resize+0xd2>
 8013468:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801346a:	4649      	mov	r1, r9
 801346c:	4798      	blx	r3
 801346e:	6166      	str	r6, [r4, #20]
 8013470:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013472:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013476:	2600      	movs	r6, #0
 8013478:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801347c:	616e      	str	r6, [r5, #20]
 801347e:	6426      	str	r6, [r4, #64]	@ 0x40
 8013480:	2f00      	cmp	r7, #0
 8013482:	f040 80ad 	bne.w	80135e0 <rcl_wait_set_resize+0x23c>
 8013486:	6928      	ldr	r0, [r5, #16]
 8013488:	b138      	cbz	r0, 801349a <rcl_wait_set_resize+0xf6>
 801348a:	4649      	mov	r1, r9
 801348c:	47d0      	blx	sl
 801348e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013490:	612f      	str	r7, [r5, #16]
 8013492:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8013496:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801349a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801349c:	2600      	movs	r6, #0
 801349e:	61ee      	str	r6, [r5, #28]
 80134a0:	61a6      	str	r6, [r4, #24]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	f040 80af 	bne.w	8013606 <rcl_wait_set_resize+0x262>
 80134a8:	69a8      	ldr	r0, [r5, #24]
 80134aa:	b120      	cbz	r0, 80134b6 <rcl_wait_set_resize+0x112>
 80134ac:	4649      	mov	r1, r9
 80134ae:	47d0      	blx	sl
 80134b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80134b2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80134b4:	61ab      	str	r3, [r5, #24]
 80134b6:	6a20      	ldr	r0, [r4, #32]
 80134b8:	b128      	cbz	r0, 80134c6 <rcl_wait_set_resize+0x122>
 80134ba:	4649      	mov	r1, r9
 80134bc:	47d0      	blx	sl
 80134be:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80134c0:	2300      	movs	r3, #0
 80134c2:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80134c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80134c8:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80134ca:	2600      	movs	r6, #0
 80134cc:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80134d0:	626e      	str	r6, [r5, #36]	@ 0x24
 80134d2:	6266      	str	r6, [r4, #36]	@ 0x24
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	f000 80b6 	beq.w	8013646 <rcl_wait_set_resize+0x2a2>
 80134da:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80134de:	6a28      	ldr	r0, [r5, #32]
 80134e0:	463a      	mov	r2, r7
 80134e2:	4651      	mov	r1, sl
 80134e4:	47c8      	blx	r9
 80134e6:	6228      	str	r0, [r5, #32]
 80134e8:	2800      	cmp	r0, #0
 80134ea:	d04c      	beq.n	8013586 <rcl_wait_set_resize+0x1e2>
 80134ec:	4652      	mov	r2, sl
 80134ee:	4631      	mov	r1, r6
 80134f0:	f004 faa2 	bl	8017a38 <memset>
 80134f4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80134f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80134f8:	626b      	str	r3, [r5, #36]	@ 0x24
 80134fa:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80134fc:	62a6      	str	r6, [r4, #40]	@ 0x28
 80134fe:	463a      	mov	r2, r7
 8013500:	4651      	mov	r1, sl
 8013502:	47c8      	blx	r9
 8013504:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013506:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8013508:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801350a:	2c00      	cmp	r4, #0
 801350c:	f000 80f0 	beq.w	80136f0 <rcl_wait_set_resize+0x34c>
 8013510:	4620      	mov	r0, r4
 8013512:	4652      	mov	r2, sl
 8013514:	4631      	mov	r1, r6
 8013516:	f004 fa8f 	bl	8017a38 <memset>
 801351a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801351c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801351e:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8013520:	2600      	movs	r6, #0
 8013522:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8013526:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8013528:	6326      	str	r6, [r4, #48]	@ 0x30
 801352a:	2b00      	cmp	r3, #0
 801352c:	f040 809d 	bne.w	801366a <rcl_wait_set_resize+0x2c6>
 8013530:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8013532:	b120      	cbz	r0, 801353e <rcl_wait_set_resize+0x19a>
 8013534:	4639      	mov	r1, r7
 8013536:	47c0      	blx	r8
 8013538:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801353a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801353c:	62ab      	str	r3, [r5, #40]	@ 0x28
 801353e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8013540:	b310      	cbz	r0, 8013588 <rcl_wait_set_resize+0x1e4>
 8013542:	4639      	mov	r1, r7
 8013544:	47c0      	blx	r8
 8013546:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013548:	2000      	movs	r0, #0
 801354a:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 801354e:	b003      	add	sp, #12
 8013550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013554:	6800      	ldr	r0, [r0, #0]
 8013556:	b120      	cbz	r0, 8013562 <rcl_wait_set_resize+0x1be>
 8013558:	4651      	mov	r1, sl
 801355a:	47d8      	blx	fp
 801355c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801355e:	f8c5 8000 	str.w	r8, [r5]
 8013562:	68a0      	ldr	r0, [r4, #8]
 8013564:	2800      	cmp	r0, #0
 8013566:	f43f af61 	beq.w	801342c <rcl_wait_set_resize+0x88>
 801356a:	4651      	mov	r1, sl
 801356c:	47d8      	blx	fp
 801356e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013570:	2300      	movs	r3, #0
 8013572:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8013576:	e759      	b.n	801342c <rcl_wait_set_resize+0x88>
 8013578:	6828      	ldr	r0, [r5, #0]
 801357a:	9301      	str	r3, [sp, #4]
 801357c:	4651      	mov	r1, sl
 801357e:	47d8      	blx	fp
 8013580:	9b01      	ldr	r3, [sp, #4]
 8013582:	e9c5 3300 	strd	r3, r3, [r5]
 8013586:	200a      	movs	r0, #10
 8013588:	b003      	add	sp, #12
 801358a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801358e:	00b4      	lsls	r4, r6, #2
 8013590:	68a8      	ldr	r0, [r5, #8]
 8013592:	464a      	mov	r2, r9
 8013594:	4621      	mov	r1, r4
 8013596:	4798      	blx	r3
 8013598:	60a8      	str	r0, [r5, #8]
 801359a:	2800      	cmp	r0, #0
 801359c:	d0f3      	beq.n	8013586 <rcl_wait_set_resize+0x1e2>
 801359e:	4622      	mov	r2, r4
 80135a0:	4641      	mov	r1, r8
 80135a2:	f004 fa49 	bl	8017a38 <memset>
 80135a6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80135a8:	60ee      	str	r6, [r5, #12]
 80135aa:	f04f 0800 	mov.w	r8, #0
 80135ae:	19f6      	adds	r6, r6, r7
 80135b0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80135b4:	f8c4 8010 	str.w	r8, [r4, #16]
 80135b8:	f43f af54 	beq.w	8013464 <rcl_wait_set_resize+0xc0>
 80135bc:	00b6      	lsls	r6, r6, #2
 80135be:	464a      	mov	r2, r9
 80135c0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80135c2:	6960      	ldr	r0, [r4, #20]
 80135c4:	4631      	mov	r1, r6
 80135c6:	4798      	blx	r3
 80135c8:	4681      	mov	r9, r0
 80135ca:	6160      	str	r0, [r4, #20]
 80135cc:	2800      	cmp	r0, #0
 80135ce:	d076      	beq.n	80136be <rcl_wait_set_resize+0x31a>
 80135d0:	4632      	mov	r2, r6
 80135d2:	4641      	mov	r1, r8
 80135d4:	f004 fa30 	bl	8017a38 <memset>
 80135d8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80135da:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80135de:	e74a      	b.n	8013476 <rcl_wait_set_resize+0xd2>
 80135e0:	00bc      	lsls	r4, r7, #2
 80135e2:	6928      	ldr	r0, [r5, #16]
 80135e4:	464a      	mov	r2, r9
 80135e6:	4621      	mov	r1, r4
 80135e8:	47c0      	blx	r8
 80135ea:	6128      	str	r0, [r5, #16]
 80135ec:	2800      	cmp	r0, #0
 80135ee:	d0ca      	beq.n	8013586 <rcl_wait_set_resize+0x1e2>
 80135f0:	4622      	mov	r2, r4
 80135f2:	4631      	mov	r1, r6
 80135f4:	f004 fa20 	bl	8017a38 <memset>
 80135f8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80135fa:	616f      	str	r7, [r5, #20]
 80135fc:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8013600:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013604:	e749      	b.n	801349a <rcl_wait_set_resize+0xf6>
 8013606:	009c      	lsls	r4, r3, #2
 8013608:	69a8      	ldr	r0, [r5, #24]
 801360a:	464a      	mov	r2, r9
 801360c:	4621      	mov	r1, r4
 801360e:	47c0      	blx	r8
 8013610:	61a8      	str	r0, [r5, #24]
 8013612:	2800      	cmp	r0, #0
 8013614:	d0b7      	beq.n	8013586 <rcl_wait_set_resize+0x1e2>
 8013616:	4622      	mov	r2, r4
 8013618:	4631      	mov	r1, r6
 801361a:	f004 fa0d 	bl	8017a38 <memset>
 801361e:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8013620:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013622:	61eb      	str	r3, [r5, #28]
 8013624:	6a38      	ldr	r0, [r7, #32]
 8013626:	61fe      	str	r6, [r7, #28]
 8013628:	464a      	mov	r2, r9
 801362a:	4621      	mov	r1, r4
 801362c:	47c0      	blx	r8
 801362e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013630:	6238      	str	r0, [r7, #32]
 8013632:	6a1f      	ldr	r7, [r3, #32]
 8013634:	2f00      	cmp	r7, #0
 8013636:	d054      	beq.n	80136e2 <rcl_wait_set_resize+0x33e>
 8013638:	4622      	mov	r2, r4
 801363a:	4631      	mov	r1, r6
 801363c:	4638      	mov	r0, r7
 801363e:	f004 f9fb 	bl	8017a38 <memset>
 8013642:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013644:	e73f      	b.n	80134c6 <rcl_wait_set_resize+0x122>
 8013646:	6a28      	ldr	r0, [r5, #32]
 8013648:	b120      	cbz	r0, 8013654 <rcl_wait_set_resize+0x2b0>
 801364a:	4639      	mov	r1, r7
 801364c:	47c0      	blx	r8
 801364e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013650:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013652:	622b      	str	r3, [r5, #32]
 8013654:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8013656:	2800      	cmp	r0, #0
 8013658:	f43f af60 	beq.w	801351c <rcl_wait_set_resize+0x178>
 801365c:	4639      	mov	r1, r7
 801365e:	47c0      	blx	r8
 8013660:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013662:	2300      	movs	r3, #0
 8013664:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8013668:	e758      	b.n	801351c <rcl_wait_set_resize+0x178>
 801366a:	009c      	lsls	r4, r3, #2
 801366c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801366e:	463a      	mov	r2, r7
 8013670:	4621      	mov	r1, r4
 8013672:	47c8      	blx	r9
 8013674:	62a8      	str	r0, [r5, #40]	@ 0x28
 8013676:	2800      	cmp	r0, #0
 8013678:	d085      	beq.n	8013586 <rcl_wait_set_resize+0x1e2>
 801367a:	4622      	mov	r2, r4
 801367c:	4631      	mov	r1, r6
 801367e:	f004 f9db 	bl	8017a38 <memset>
 8013682:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8013686:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013688:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801368a:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801368e:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8013692:	463a      	mov	r2, r7
 8013694:	4621      	mov	r1, r4
 8013696:	47c8      	blx	r9
 8013698:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801369a:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801369e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80136a0:	b36b      	cbz	r3, 80136fe <rcl_wait_set_resize+0x35a>
 80136a2:	4622      	mov	r2, r4
 80136a4:	4631      	mov	r1, r6
 80136a6:	4618      	mov	r0, r3
 80136a8:	f004 f9c6 	bl	8017a38 <memset>
 80136ac:	4630      	mov	r0, r6
 80136ae:	b003      	add	sp, #12
 80136b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136b4:	200b      	movs	r0, #11
 80136b6:	4770      	bx	lr
 80136b8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80136bc:	e764      	b.n	8013588 <rcl_wait_set_resize+0x1e4>
 80136be:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80136c0:	68a8      	ldr	r0, [r5, #8]
 80136c2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80136c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80136c6:	4798      	blx	r3
 80136c8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80136ca:	6928      	ldr	r0, [r5, #16]
 80136cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80136ce:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80136d0:	f8c5 900c 	str.w	r9, [r5, #12]
 80136d4:	f8c5 9008 	str.w	r9, [r5, #8]
 80136d8:	4790      	blx	r2
 80136da:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80136de:	200a      	movs	r0, #10
 80136e0:	e752      	b.n	8013588 <rcl_wait_set_resize+0x1e4>
 80136e2:	69a8      	ldr	r0, [r5, #24]
 80136e4:	4649      	mov	r1, r9
 80136e6:	47d0      	blx	sl
 80136e8:	e9c5 7706 	strd	r7, r7, [r5, #24]
 80136ec:	200a      	movs	r0, #10
 80136ee:	e74b      	b.n	8013588 <rcl_wait_set_resize+0x1e4>
 80136f0:	6a28      	ldr	r0, [r5, #32]
 80136f2:	4639      	mov	r1, r7
 80136f4:	47c0      	blx	r8
 80136f6:	e9c5 4408 	strd	r4, r4, [r5, #32]
 80136fa:	200a      	movs	r0, #10
 80136fc:	e744      	b.n	8013588 <rcl_wait_set_resize+0x1e4>
 80136fe:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8013700:	9301      	str	r3, [sp, #4]
 8013702:	4639      	mov	r1, r7
 8013704:	47c0      	blx	r8
 8013706:	9b01      	ldr	r3, [sp, #4]
 8013708:	200a      	movs	r0, #10
 801370a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801370e:	e73b      	b.n	8013588 <rcl_wait_set_resize+0x1e4>

08013710 <rcl_wait_set_init>:
 8013710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013714:	b084      	sub	sp, #16
 8013716:	4604      	mov	r4, r0
 8013718:	a810      	add	r0, sp, #64	@ 0x40
 801371a:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 801371e:	460f      	mov	r7, r1
 8013720:	4690      	mov	r8, r2
 8013722:	4699      	mov	r9, r3
 8013724:	f7f8 f8f6 	bl	800b914 <rcutils_allocator_is_valid>
 8013728:	2800      	cmp	r0, #0
 801372a:	d06b      	beq.n	8013804 <rcl_wait_set_init+0xf4>
 801372c:	2c00      	cmp	r4, #0
 801372e:	d069      	beq.n	8013804 <rcl_wait_set_init+0xf4>
 8013730:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013732:	b125      	cbz	r5, 801373e <rcl_wait_set_init+0x2e>
 8013734:	2564      	movs	r5, #100	@ 0x64
 8013736:	4628      	mov	r0, r5
 8013738:	b004      	add	sp, #16
 801373a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801373e:	f1ba 0f00 	cmp.w	sl, #0
 8013742:	d05f      	beq.n	8013804 <rcl_wait_set_init+0xf4>
 8013744:	4650      	mov	r0, sl
 8013746:	f7fe fa33 	bl	8011bb0 <rcl_context_is_valid>
 801374a:	2800      	cmp	r0, #0
 801374c:	d067      	beq.n	801381e <rcl_wait_set_init+0x10e>
 801374e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013750:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8013752:	205c      	movs	r0, #92	@ 0x5c
 8013754:	4798      	blx	r3
 8013756:	6320      	str	r0, [r4, #48]	@ 0x30
 8013758:	2800      	cmp	r0, #0
 801375a:	d062      	beq.n	8013822 <rcl_wait_set_init+0x112>
 801375c:	4629      	mov	r1, r5
 801375e:	225c      	movs	r2, #92	@ 0x5c
 8013760:	f004 f96a 	bl	8017a38 <memset>
 8013764:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8013768:	eb03 0e02 	add.w	lr, r3, r2
 801376c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801376e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8013770:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8013774:	449e      	add	lr, r3
 8013776:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801377a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801377e:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8013782:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8013786:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 801378a:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 801378e:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8013792:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8013796:	f8da a000 	ldr.w	sl, [sl]
 801379a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801379c:	44c6      	add	lr, r8
 801379e:	f8dc 3000 	ldr.w	r3, [ip]
 80137a2:	602b      	str	r3, [r5, #0]
 80137a4:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 80137a8:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 80137ac:	f002 fa1e 	bl	8015bec <rmw_create_wait_set>
 80137b0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80137b2:	63f0      	str	r0, [r6, #60]	@ 0x3c
 80137b4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80137b6:	b350      	cbz	r0, 801380e <rcl_wait_set_init+0xfe>
 80137b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80137ba:	9302      	str	r3, [sp, #8]
 80137bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80137be:	9301      	str	r3, [sp, #4]
 80137c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80137c2:	9300      	str	r3, [sp, #0]
 80137c4:	4642      	mov	r2, r8
 80137c6:	464b      	mov	r3, r9
 80137c8:	4639      	mov	r1, r7
 80137ca:	4620      	mov	r0, r4
 80137cc:	f7ff fdea 	bl	80133a4 <rcl_wait_set_resize>
 80137d0:	4605      	mov	r5, r0
 80137d2:	2800      	cmp	r0, #0
 80137d4:	d0af      	beq.n	8013736 <rcl_wait_set_init+0x26>
 80137d6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80137d8:	bb2b      	cbnz	r3, 8013826 <rcl_wait_set_init+0x116>
 80137da:	2600      	movs	r6, #0
 80137dc:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80137e0:	9600      	str	r6, [sp, #0]
 80137e2:	4633      	mov	r3, r6
 80137e4:	4632      	mov	r2, r6
 80137e6:	4631      	mov	r1, r6
 80137e8:	4620      	mov	r0, r4
 80137ea:	f7ff fddb 	bl	80133a4 <rcl_wait_set_resize>
 80137ee:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80137f0:	2800      	cmp	r0, #0
 80137f2:	d0a0      	beq.n	8013736 <rcl_wait_set_init+0x26>
 80137f4:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80137f6:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80137f8:	4798      	blx	r3
 80137fa:	4628      	mov	r0, r5
 80137fc:	6326      	str	r6, [r4, #48]	@ 0x30
 80137fe:	b004      	add	sp, #16
 8013800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013804:	250b      	movs	r5, #11
 8013806:	4628      	mov	r0, r5
 8013808:	b004      	add	sp, #16
 801380a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801380e:	2501      	movs	r5, #1
 8013810:	f002 f9f6 	bl	8015c00 <rmw_destroy_wait_set>
 8013814:	2800      	cmp	r0, #0
 8013816:	bf18      	it	ne
 8013818:	f44f 7561 	movne.w	r5, #900	@ 0x384
 801381c:	e7dd      	b.n	80137da <rcl_wait_set_init+0xca>
 801381e:	2565      	movs	r5, #101	@ 0x65
 8013820:	e789      	b.n	8013736 <rcl_wait_set_init+0x26>
 8013822:	250a      	movs	r5, #10
 8013824:	e787      	b.n	8013736 <rcl_wait_set_init+0x26>
 8013826:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8013828:	e7f2      	b.n	8013810 <rcl_wait_set_init+0x100>
 801382a:	bf00      	nop

0801382c <rcl_wait_set_add_guard_condition>:
 801382c:	b318      	cbz	r0, 8013876 <rcl_wait_set_add_guard_condition+0x4a>
 801382e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013830:	b570      	push	{r4, r5, r6, lr}
 8013832:	4604      	mov	r4, r0
 8013834:	b30b      	cbz	r3, 801387a <rcl_wait_set_add_guard_condition+0x4e>
 8013836:	b319      	cbz	r1, 8013880 <rcl_wait_set_add_guard_condition+0x54>
 8013838:	68dd      	ldr	r5, [r3, #12]
 801383a:	68c0      	ldr	r0, [r0, #12]
 801383c:	4285      	cmp	r5, r0
 801383e:	d217      	bcs.n	8013870 <rcl_wait_set_add_guard_condition+0x44>
 8013840:	68a0      	ldr	r0, [r4, #8]
 8013842:	1c6e      	adds	r6, r5, #1
 8013844:	60de      	str	r6, [r3, #12]
 8013846:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801384a:	b102      	cbz	r2, 801384e <rcl_wait_set_add_guard_condition+0x22>
 801384c:	6015      	str	r5, [r2, #0]
 801384e:	4608      	mov	r0, r1
 8013850:	f003 fbd0 	bl	8016ff4 <rcl_guard_condition_get_rmw_handle>
 8013854:	b150      	cbz	r0, 801386c <rcl_wait_set_add_guard_condition+0x40>
 8013856:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013858:	6842      	ldr	r2, [r0, #4]
 801385a:	695b      	ldr	r3, [r3, #20]
 801385c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013860:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013862:	6913      	ldr	r3, [r2, #16]
 8013864:	3301      	adds	r3, #1
 8013866:	2000      	movs	r0, #0
 8013868:	6113      	str	r3, [r2, #16]
 801386a:	bd70      	pop	{r4, r5, r6, pc}
 801386c:	2001      	movs	r0, #1
 801386e:	bd70      	pop	{r4, r5, r6, pc}
 8013870:	f240 3086 	movw	r0, #902	@ 0x386
 8013874:	bd70      	pop	{r4, r5, r6, pc}
 8013876:	200b      	movs	r0, #11
 8013878:	4770      	bx	lr
 801387a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801387e:	bd70      	pop	{r4, r5, r6, pc}
 8013880:	200b      	movs	r0, #11
 8013882:	bd70      	pop	{r4, r5, r6, pc}

08013884 <rcl_wait_set_add_timer>:
 8013884:	b328      	cbz	r0, 80138d2 <rcl_wait_set_add_timer+0x4e>
 8013886:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013888:	b570      	push	{r4, r5, r6, lr}
 801388a:	4604      	mov	r4, r0
 801388c:	b31b      	cbz	r3, 80138d6 <rcl_wait_set_add_timer+0x52>
 801388e:	b329      	cbz	r1, 80138dc <rcl_wait_set_add_timer+0x58>
 8013890:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8013892:	6965      	ldr	r5, [r4, #20]
 8013894:	42a8      	cmp	r0, r5
 8013896:	d219      	bcs.n	80138cc <rcl_wait_set_add_timer+0x48>
 8013898:	6925      	ldr	r5, [r4, #16]
 801389a:	1c46      	adds	r6, r0, #1
 801389c:	641e      	str	r6, [r3, #64]	@ 0x40
 801389e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 80138a2:	b102      	cbz	r2, 80138a6 <rcl_wait_set_add_timer+0x22>
 80138a4:	6010      	str	r0, [r2, #0]
 80138a6:	4608      	mov	r0, r1
 80138a8:	f7ff fba6 	bl	8012ff8 <rcl_timer_get_guard_condition>
 80138ac:	b168      	cbz	r0, 80138ca <rcl_wait_set_add_timer+0x46>
 80138ae:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80138b0:	68e3      	ldr	r3, [r4, #12]
 80138b2:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80138b4:	3b01      	subs	r3, #1
 80138b6:	441d      	add	r5, r3
 80138b8:	f003 fb9c 	bl	8016ff4 <rcl_guard_condition_get_rmw_handle>
 80138bc:	b180      	cbz	r0, 80138e0 <rcl_wait_set_add_timer+0x5c>
 80138be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80138c0:	6842      	ldr	r2, [r0, #4]
 80138c2:	695b      	ldr	r3, [r3, #20]
 80138c4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80138c8:	2000      	movs	r0, #0
 80138ca:	bd70      	pop	{r4, r5, r6, pc}
 80138cc:	f240 3086 	movw	r0, #902	@ 0x386
 80138d0:	bd70      	pop	{r4, r5, r6, pc}
 80138d2:	200b      	movs	r0, #11
 80138d4:	4770      	bx	lr
 80138d6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80138da:	bd70      	pop	{r4, r5, r6, pc}
 80138dc:	200b      	movs	r0, #11
 80138de:	bd70      	pop	{r4, r5, r6, pc}
 80138e0:	2001      	movs	r0, #1
 80138e2:	bd70      	pop	{r4, r5, r6, pc}

080138e4 <rcl_wait_set_add_client>:
 80138e4:	b318      	cbz	r0, 801392e <rcl_wait_set_add_client+0x4a>
 80138e6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80138e8:	b570      	push	{r4, r5, r6, lr}
 80138ea:	4604      	mov	r4, r0
 80138ec:	b30b      	cbz	r3, 8013932 <rcl_wait_set_add_client+0x4e>
 80138ee:	b319      	cbz	r1, 8013938 <rcl_wait_set_add_client+0x54>
 80138f0:	699d      	ldr	r5, [r3, #24]
 80138f2:	69c0      	ldr	r0, [r0, #28]
 80138f4:	4285      	cmp	r5, r0
 80138f6:	d217      	bcs.n	8013928 <rcl_wait_set_add_client+0x44>
 80138f8:	69a0      	ldr	r0, [r4, #24]
 80138fa:	1c6e      	adds	r6, r5, #1
 80138fc:	619e      	str	r6, [r3, #24]
 80138fe:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013902:	b102      	cbz	r2, 8013906 <rcl_wait_set_add_client+0x22>
 8013904:	6015      	str	r5, [r2, #0]
 8013906:	4608      	mov	r0, r1
 8013908:	f7fe f8a4 	bl	8011a54 <rcl_client_get_rmw_handle>
 801390c:	b150      	cbz	r0, 8013924 <rcl_wait_set_add_client+0x40>
 801390e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013910:	6842      	ldr	r2, [r0, #4]
 8013912:	6a1b      	ldr	r3, [r3, #32]
 8013914:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013918:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801391a:	69d3      	ldr	r3, [r2, #28]
 801391c:	3301      	adds	r3, #1
 801391e:	2000      	movs	r0, #0
 8013920:	61d3      	str	r3, [r2, #28]
 8013922:	bd70      	pop	{r4, r5, r6, pc}
 8013924:	2001      	movs	r0, #1
 8013926:	bd70      	pop	{r4, r5, r6, pc}
 8013928:	f240 3086 	movw	r0, #902	@ 0x386
 801392c:	bd70      	pop	{r4, r5, r6, pc}
 801392e:	200b      	movs	r0, #11
 8013930:	4770      	bx	lr
 8013932:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013936:	bd70      	pop	{r4, r5, r6, pc}
 8013938:	200b      	movs	r0, #11
 801393a:	bd70      	pop	{r4, r5, r6, pc}

0801393c <rcl_wait_set_add_service>:
 801393c:	b318      	cbz	r0, 8013986 <rcl_wait_set_add_service+0x4a>
 801393e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013940:	b570      	push	{r4, r5, r6, lr}
 8013942:	4604      	mov	r4, r0
 8013944:	b30b      	cbz	r3, 801398a <rcl_wait_set_add_service+0x4e>
 8013946:	b319      	cbz	r1, 8013990 <rcl_wait_set_add_service+0x54>
 8013948:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801394a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801394c:	4285      	cmp	r5, r0
 801394e:	d217      	bcs.n	8013980 <rcl_wait_set_add_service+0x44>
 8013950:	6a20      	ldr	r0, [r4, #32]
 8013952:	1c6e      	adds	r6, r5, #1
 8013954:	625e      	str	r6, [r3, #36]	@ 0x24
 8013956:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801395a:	b102      	cbz	r2, 801395e <rcl_wait_set_add_service+0x22>
 801395c:	6015      	str	r5, [r2, #0]
 801395e:	4608      	mov	r0, r1
 8013960:	f7fe fdfa 	bl	8012558 <rcl_service_get_rmw_handle>
 8013964:	b150      	cbz	r0, 801397c <rcl_wait_set_add_service+0x40>
 8013966:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013968:	6842      	ldr	r2, [r0, #4]
 801396a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801396c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013970:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013972:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8013974:	3301      	adds	r3, #1
 8013976:	2000      	movs	r0, #0
 8013978:	6293      	str	r3, [r2, #40]	@ 0x28
 801397a:	bd70      	pop	{r4, r5, r6, pc}
 801397c:	2001      	movs	r0, #1
 801397e:	bd70      	pop	{r4, r5, r6, pc}
 8013980:	f240 3086 	movw	r0, #902	@ 0x386
 8013984:	bd70      	pop	{r4, r5, r6, pc}
 8013986:	200b      	movs	r0, #11
 8013988:	4770      	bx	lr
 801398a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801398e:	bd70      	pop	{r4, r5, r6, pc}
 8013990:	200b      	movs	r0, #11
 8013992:	bd70      	pop	{r4, r5, r6, pc}
 8013994:	0000      	movs	r0, r0
	...

08013998 <rcl_wait>:
 8013998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801399c:	ed2d 8b02 	vpush	{d8}
 80139a0:	b08d      	sub	sp, #52	@ 0x34
 80139a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80139a6:	2800      	cmp	r0, #0
 80139a8:	f000 8143 	beq.w	8013c32 <rcl_wait+0x29a>
 80139ac:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80139ae:	4605      	mov	r5, r0
 80139b0:	2e00      	cmp	r6, #0
 80139b2:	f000 8112 	beq.w	8013bda <rcl_wait+0x242>
 80139b6:	6843      	ldr	r3, [r0, #4]
 80139b8:	b983      	cbnz	r3, 80139dc <rcl_wait+0x44>
 80139ba:	68eb      	ldr	r3, [r5, #12]
 80139bc:	b973      	cbnz	r3, 80139dc <rcl_wait+0x44>
 80139be:	696b      	ldr	r3, [r5, #20]
 80139c0:	b963      	cbnz	r3, 80139dc <rcl_wait+0x44>
 80139c2:	69eb      	ldr	r3, [r5, #28]
 80139c4:	b953      	cbnz	r3, 80139dc <rcl_wait+0x44>
 80139c6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80139c8:	b943      	cbnz	r3, 80139dc <rcl_wait+0x44>
 80139ca:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80139cc:	b933      	cbnz	r3, 80139dc <rcl_wait+0x44>
 80139ce:	f240 3085 	movw	r0, #901	@ 0x385
 80139d2:	b00d      	add	sp, #52	@ 0x34
 80139d4:	ecbd 8b02 	vpop	{d8}
 80139d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139dc:	9b04      	ldr	r3, [sp, #16]
 80139de:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 80139e0:	2b01      	cmp	r3, #1
 80139e2:	9b05      	ldr	r3, [sp, #20]
 80139e4:	f173 0300 	sbcs.w	r3, r3, #0
 80139e8:	f2c0 80f0 	blt.w	8013bcc <rcl_wait+0x234>
 80139ec:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 80139f0:	4643      	mov	r3, r8
 80139f2:	2a00      	cmp	r2, #0
 80139f4:	f000 8133 	beq.w	8013c5e <rcl_wait+0x2c6>
 80139f8:	2400      	movs	r4, #0
 80139fa:	4613      	mov	r3, r2
 80139fc:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8013c70 <rcl_wait+0x2d8>
 8013a00:	46a2      	mov	sl, r4
 8013a02:	46a3      	mov	fp, r4
 8013a04:	f240 3921 	movw	r9, #801	@ 0x321
 8013a08:	4632      	mov	r2, r6
 8013a0a:	e014      	b.n	8013a36 <rcl_wait+0x9e>
 8013a0c:	2800      	cmp	r0, #0
 8013a0e:	d1e0      	bne.n	80139d2 <rcl_wait+0x3a>
 8013a10:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013a14:	4542      	cmp	r2, r8
 8013a16:	eb73 0107 	sbcs.w	r1, r3, r7
 8013a1a:	da03      	bge.n	8013a24 <rcl_wait+0x8c>
 8013a1c:	4690      	mov	r8, r2
 8013a1e:	461f      	mov	r7, r3
 8013a20:	f04f 0b01 	mov.w	fp, #1
 8013a24:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8013a26:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013a28:	3401      	adds	r4, #1
 8013a2a:	f14a 0a00 	adc.w	sl, sl, #0
 8013a2e:	429c      	cmp	r4, r3
 8013a30:	f17a 0100 	sbcs.w	r1, sl, #0
 8013a34:	d228      	bcs.n	8013a88 <rcl_wait+0xf0>
 8013a36:	6928      	ldr	r0, [r5, #16]
 8013a38:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013a3c:	a908      	add	r1, sp, #32
 8013a3e:	00a6      	lsls	r6, r4, #2
 8013a40:	2800      	cmp	r0, #0
 8013a42:	d0f1      	beq.n	8013a28 <rcl_wait+0x90>
 8013a44:	68eb      	ldr	r3, [r5, #12]
 8013a46:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8013a4a:	4423      	add	r3, r4
 8013a4c:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8013a50:	f1be 0f00 	cmp.w	lr, #0
 8013a54:	d006      	beq.n	8013a64 <rcl_wait+0xcc>
 8013a56:	6913      	ldr	r3, [r2, #16]
 8013a58:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8013a5c:	3301      	adds	r3, #1
 8013a5e:	6113      	str	r3, [r2, #16]
 8013a60:	692b      	ldr	r3, [r5, #16]
 8013a62:	5998      	ldr	r0, [r3, r6]
 8013a64:	ed8d 8b08 	vstr	d8, [sp, #32]
 8013a68:	f7ff fa94 	bl	8012f94 <rcl_timer_get_time_until_next_call>
 8013a6c:	4548      	cmp	r0, r9
 8013a6e:	d1cd      	bne.n	8013a0c <rcl_wait+0x74>
 8013a70:	692b      	ldr	r3, [r5, #16]
 8013a72:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8013a74:	2100      	movs	r1, #0
 8013a76:	5199      	str	r1, [r3, r6]
 8013a78:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013a7a:	3401      	adds	r4, #1
 8013a7c:	f14a 0a00 	adc.w	sl, sl, #0
 8013a80:	429c      	cmp	r4, r3
 8013a82:	f17a 0100 	sbcs.w	r1, sl, #0
 8013a86:	d3d6      	bcc.n	8013a36 <rcl_wait+0x9e>
 8013a88:	4616      	mov	r6, r2
 8013a8a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8013a8e:	4313      	orrs	r3, r2
 8013a90:	46d9      	mov	r9, fp
 8013a92:	f040 80a9 	bne.w	8013be8 <rcl_wait+0x250>
 8013a96:	2300      	movs	r3, #0
 8013a98:	2200      	movs	r2, #0
 8013a9a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013a9e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8013aa2:	ab08      	add	r3, sp, #32
 8013aa4:	9302      	str	r3, [sp, #8]
 8013aa6:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8013aa8:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8013aac:	e9cd 3200 	strd	r3, r2, [sp]
 8013ab0:	f106 0110 	add.w	r1, r6, #16
 8013ab4:	f106 031c 	add.w	r3, r6, #28
 8013ab8:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8013abc:	1d30      	adds	r0, r6, #4
 8013abe:	f001 ff1d 	bl	80158fc <rmw_wait>
 8013ac2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013ac4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013ac6:	4680      	mov	r8, r0
 8013ac8:	b1ca      	cbz	r2, 8013afe <rcl_wait+0x166>
 8013aca:	2400      	movs	r4, #0
 8013acc:	4627      	mov	r7, r4
 8013ace:	692a      	ldr	r2, [r5, #16]
 8013ad0:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8013ad4:	f10d 011f 	add.w	r1, sp, #31
 8013ad8:	00a6      	lsls	r6, r4, #2
 8013ada:	b160      	cbz	r0, 8013af6 <rcl_wait+0x15e>
 8013adc:	f88d 701f 	strb.w	r7, [sp, #31]
 8013ae0:	f7ff fa1e 	bl	8012f20 <rcl_timer_is_ready>
 8013ae4:	2800      	cmp	r0, #0
 8013ae6:	f47f af74 	bne.w	80139d2 <rcl_wait+0x3a>
 8013aea:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8013aee:	b90b      	cbnz	r3, 8013af4 <rcl_wait+0x15c>
 8013af0:	692a      	ldr	r2, [r5, #16]
 8013af2:	5193      	str	r3, [r2, r6]
 8013af4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013af6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013af8:	3401      	adds	r4, #1
 8013afa:	42a2      	cmp	r2, r4
 8013afc:	d8e7      	bhi.n	8013ace <rcl_wait+0x136>
 8013afe:	f038 0002 	bics.w	r0, r8, #2
 8013b02:	f040 8090 	bne.w	8013c26 <rcl_wait+0x28e>
 8013b06:	686e      	ldr	r6, [r5, #4]
 8013b08:	4602      	mov	r2, r0
 8013b0a:	b91e      	cbnz	r6, 8013b14 <rcl_wait+0x17c>
 8013b0c:	e00d      	b.n	8013b2a <rcl_wait+0x192>
 8013b0e:	3201      	adds	r2, #1
 8013b10:	42b2      	cmp	r2, r6
 8013b12:	d00a      	beq.n	8013b2a <rcl_wait+0x192>
 8013b14:	6899      	ldr	r1, [r3, #8]
 8013b16:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013b1a:	2900      	cmp	r1, #0
 8013b1c:	d1f7      	bne.n	8013b0e <rcl_wait+0x176>
 8013b1e:	682c      	ldr	r4, [r5, #0]
 8013b20:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013b24:	3201      	adds	r2, #1
 8013b26:	42b2      	cmp	r2, r6
 8013b28:	d1f4      	bne.n	8013b14 <rcl_wait+0x17c>
 8013b2a:	68ee      	ldr	r6, [r5, #12]
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	b91e      	cbnz	r6, 8013b38 <rcl_wait+0x1a0>
 8013b30:	e00d      	b.n	8013b4e <rcl_wait+0x1b6>
 8013b32:	3201      	adds	r2, #1
 8013b34:	42b2      	cmp	r2, r6
 8013b36:	d00a      	beq.n	8013b4e <rcl_wait+0x1b6>
 8013b38:	6959      	ldr	r1, [r3, #20]
 8013b3a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013b3e:	2900      	cmp	r1, #0
 8013b40:	d1f7      	bne.n	8013b32 <rcl_wait+0x19a>
 8013b42:	68ac      	ldr	r4, [r5, #8]
 8013b44:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013b48:	3201      	adds	r2, #1
 8013b4a:	42b2      	cmp	r2, r6
 8013b4c:	d1f4      	bne.n	8013b38 <rcl_wait+0x1a0>
 8013b4e:	69ee      	ldr	r6, [r5, #28]
 8013b50:	2200      	movs	r2, #0
 8013b52:	b91e      	cbnz	r6, 8013b5c <rcl_wait+0x1c4>
 8013b54:	e00d      	b.n	8013b72 <rcl_wait+0x1da>
 8013b56:	3201      	adds	r2, #1
 8013b58:	42b2      	cmp	r2, r6
 8013b5a:	d00a      	beq.n	8013b72 <rcl_wait+0x1da>
 8013b5c:	6a19      	ldr	r1, [r3, #32]
 8013b5e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013b62:	2900      	cmp	r1, #0
 8013b64:	d1f7      	bne.n	8013b56 <rcl_wait+0x1be>
 8013b66:	69ac      	ldr	r4, [r5, #24]
 8013b68:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013b6c:	3201      	adds	r2, #1
 8013b6e:	42b2      	cmp	r2, r6
 8013b70:	d1f4      	bne.n	8013b5c <rcl_wait+0x1c4>
 8013b72:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8013b74:	2200      	movs	r2, #0
 8013b76:	b91e      	cbnz	r6, 8013b80 <rcl_wait+0x1e8>
 8013b78:	e00d      	b.n	8013b96 <rcl_wait+0x1fe>
 8013b7a:	3201      	adds	r2, #1
 8013b7c:	4296      	cmp	r6, r2
 8013b7e:	d00a      	beq.n	8013b96 <rcl_wait+0x1fe>
 8013b80:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8013b82:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013b86:	2900      	cmp	r1, #0
 8013b88:	d1f7      	bne.n	8013b7a <rcl_wait+0x1e2>
 8013b8a:	6a2c      	ldr	r4, [r5, #32]
 8013b8c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013b90:	3201      	adds	r2, #1
 8013b92:	4296      	cmp	r6, r2
 8013b94:	d1f4      	bne.n	8013b80 <rcl_wait+0x1e8>
 8013b96:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8013b98:	2200      	movs	r2, #0
 8013b9a:	b91e      	cbnz	r6, 8013ba4 <rcl_wait+0x20c>
 8013b9c:	e00d      	b.n	8013bba <rcl_wait+0x222>
 8013b9e:	3201      	adds	r2, #1
 8013ba0:	42b2      	cmp	r2, r6
 8013ba2:	d00a      	beq.n	8013bba <rcl_wait+0x222>
 8013ba4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8013ba6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013baa:	2900      	cmp	r1, #0
 8013bac:	d1f7      	bne.n	8013b9e <rcl_wait+0x206>
 8013bae:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8013bb0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013bb4:	3201      	adds	r2, #1
 8013bb6:	42b2      	cmp	r2, r6
 8013bb8:	d1f4      	bne.n	8013ba4 <rcl_wait+0x20c>
 8013bba:	f1b8 0f02 	cmp.w	r8, #2
 8013bbe:	f47f af08 	bne.w	80139d2 <rcl_wait+0x3a>
 8013bc2:	464b      	mov	r3, r9
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	bf08      	it	eq
 8013bc8:	2002      	moveq	r0, #2
 8013bca:	e702      	b.n	80139d2 <rcl_wait+0x3a>
 8013bcc:	2a00      	cmp	r2, #0
 8013bce:	d03a      	beq.n	8013c46 <rcl_wait+0x2ae>
 8013bd0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8013bd4:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8013bd8:	e70e      	b.n	80139f8 <rcl_wait+0x60>
 8013bda:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013bde:	b00d      	add	sp, #52	@ 0x34
 8013be0:	ecbd 8b02 	vpop	{d8}
 8013be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013be8:	9b04      	ldr	r3, [sp, #16]
 8013bea:	2b01      	cmp	r3, #1
 8013bec:	9b05      	ldr	r3, [sp, #20]
 8013bee:	f173 0300 	sbcs.w	r3, r3, #0
 8013bf2:	db24      	blt.n	8013c3e <rcl_wait+0x2a6>
 8013bf4:	2f00      	cmp	r7, #0
 8013bf6:	bfbc      	itt	lt
 8013bf8:	f04f 0800 	movlt.w	r8, #0
 8013bfc:	4647      	movlt	r7, r8
 8013bfe:	a31e      	add	r3, pc, #120	@ (adr r3, 8013c78 <rcl_wait+0x2e0>)
 8013c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c04:	4640      	mov	r0, r8
 8013c06:	4639      	mov	r1, r7
 8013c08:	f7ec ff60 	bl	8000acc <__aeabi_ldivmod>
 8013c0c:	a31a      	add	r3, pc, #104	@ (adr r3, 8013c78 <rcl_wait+0x2e0>)
 8013c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c12:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013c16:	4640      	mov	r0, r8
 8013c18:	4639      	mov	r1, r7
 8013c1a:	f7ec ff57 	bl	8000acc <__aeabi_ldivmod>
 8013c1e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8013c22:	ab08      	add	r3, sp, #32
 8013c24:	e73e      	b.n	8013aa4 <rcl_wait+0x10c>
 8013c26:	2001      	movs	r0, #1
 8013c28:	b00d      	add	sp, #52	@ 0x34
 8013c2a:	ecbd 8b02 	vpop	{d8}
 8013c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c32:	200b      	movs	r0, #11
 8013c34:	b00d      	add	sp, #52	@ 0x34
 8013c36:	ecbd 8b02 	vpop	{d8}
 8013c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c3e:	465b      	mov	r3, fp
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d1d7      	bne.n	8013bf4 <rcl_wait+0x25c>
 8013c44:	e72e      	b.n	8013aa4 <rcl_wait+0x10c>
 8013c46:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8013c4a:	430b      	orrs	r3, r1
 8013c4c:	bf08      	it	eq
 8013c4e:	4691      	moveq	r9, r2
 8013c50:	f43f af21 	beq.w	8013a96 <rcl_wait+0xfe>
 8013c54:	9b04      	ldr	r3, [sp, #16]
 8013c56:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8013c5a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8013c5e:	2b01      	cmp	r3, #1
 8013c60:	9b05      	ldr	r3, [sp, #20]
 8013c62:	f173 0300 	sbcs.w	r3, r3, #0
 8013c66:	f04f 0300 	mov.w	r3, #0
 8013c6a:	4699      	mov	r9, r3
 8013c6c:	dac2      	bge.n	8013bf4 <rcl_wait+0x25c>
 8013c6e:	e719      	b.n	8013aa4 <rcl_wait+0x10c>
 8013c70:	ffffffff 	.word	0xffffffff
 8013c74:	7fffffff 	.word	0x7fffffff
 8013c78:	3b9aca00 	.word	0x3b9aca00
 8013c7c:	00000000 	.word	0x00000000

08013c80 <rcl_action_take_goal_response>:
 8013c80:	2800      	cmp	r0, #0
 8013c82:	d039      	beq.n	8013cf8 <rcl_action_take_goal_response+0x78>
 8013c84:	b570      	push	{r4, r5, r6, lr}
 8013c86:	4604      	mov	r4, r0
 8013c88:	6800      	ldr	r0, [r0, #0]
 8013c8a:	b380      	cbz	r0, 8013cee <rcl_action_take_goal_response+0x6e>
 8013c8c:	460d      	mov	r5, r1
 8013c8e:	4616      	mov	r6, r2
 8013c90:	f7fd ff66 	bl	8011b60 <rcl_client_is_valid>
 8013c94:	b330      	cbz	r0, 8013ce4 <rcl_action_take_goal_response+0x64>
 8013c96:	6820      	ldr	r0, [r4, #0]
 8013c98:	3004      	adds	r0, #4
 8013c9a:	f7fd ff61 	bl	8011b60 <rcl_client_is_valid>
 8013c9e:	b308      	cbz	r0, 8013ce4 <rcl_action_take_goal_response+0x64>
 8013ca0:	6820      	ldr	r0, [r4, #0]
 8013ca2:	3008      	adds	r0, #8
 8013ca4:	f7fd ff5c 	bl	8011b60 <rcl_client_is_valid>
 8013ca8:	b1e0      	cbz	r0, 8013ce4 <rcl_action_take_goal_response+0x64>
 8013caa:	6820      	ldr	r0, [r4, #0]
 8013cac:	300c      	adds	r0, #12
 8013cae:	f7fe fdf5 	bl	801289c <rcl_subscription_is_valid>
 8013cb2:	b1b8      	cbz	r0, 8013ce4 <rcl_action_take_goal_response+0x64>
 8013cb4:	6820      	ldr	r0, [r4, #0]
 8013cb6:	3010      	adds	r0, #16
 8013cb8:	f7fe fdf0 	bl	801289c <rcl_subscription_is_valid>
 8013cbc:	b190      	cbz	r0, 8013ce4 <rcl_action_take_goal_response+0x64>
 8013cbe:	b1cd      	cbz	r5, 8013cf4 <rcl_action_take_goal_response+0x74>
 8013cc0:	b1c6      	cbz	r6, 8013cf4 <rcl_action_take_goal_response+0x74>
 8013cc2:	6820      	ldr	r0, [r4, #0]
 8013cc4:	4632      	mov	r2, r6
 8013cc6:	4629      	mov	r1, r5
 8013cc8:	f7fd ff02 	bl	8011ad0 <rcl_take_response>
 8013ccc:	b148      	cbz	r0, 8013ce2 <rcl_action_take_goal_response+0x62>
 8013cce:	280a      	cmp	r0, #10
 8013cd0:	d007      	beq.n	8013ce2 <rcl_action_take_goal_response+0x62>
 8013cd2:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013cd6:	f640 0337 	movw	r3, #2103	@ 0x837
 8013cda:	4290      	cmp	r0, r2
 8013cdc:	bf0c      	ite	eq
 8013cde:	4618      	moveq	r0, r3
 8013ce0:	2001      	movne	r0, #1
 8013ce2:	bd70      	pop	{r4, r5, r6, pc}
 8013ce4:	f7f7 fe3c 	bl	800b960 <rcutils_reset_error>
 8013ce8:	f640 0036 	movw	r0, #2102	@ 0x836
 8013cec:	bd70      	pop	{r4, r5, r6, pc}
 8013cee:	f640 0036 	movw	r0, #2102	@ 0x836
 8013cf2:	bd70      	pop	{r4, r5, r6, pc}
 8013cf4:	200b      	movs	r0, #11
 8013cf6:	bd70      	pop	{r4, r5, r6, pc}
 8013cf8:	f640 0036 	movw	r0, #2102	@ 0x836
 8013cfc:	4770      	bx	lr
 8013cfe:	bf00      	nop

08013d00 <rcl_action_send_result_request>:
 8013d00:	b390      	cbz	r0, 8013d68 <rcl_action_send_result_request+0x68>
 8013d02:	b570      	push	{r4, r5, r6, lr}
 8013d04:	4604      	mov	r4, r0
 8013d06:	6800      	ldr	r0, [r0, #0]
 8013d08:	b348      	cbz	r0, 8013d5e <rcl_action_send_result_request+0x5e>
 8013d0a:	460d      	mov	r5, r1
 8013d0c:	4616      	mov	r6, r2
 8013d0e:	f7fd ff27 	bl	8011b60 <rcl_client_is_valid>
 8013d12:	b1f8      	cbz	r0, 8013d54 <rcl_action_send_result_request+0x54>
 8013d14:	6820      	ldr	r0, [r4, #0]
 8013d16:	3004      	adds	r0, #4
 8013d18:	f7fd ff22 	bl	8011b60 <rcl_client_is_valid>
 8013d1c:	b1d0      	cbz	r0, 8013d54 <rcl_action_send_result_request+0x54>
 8013d1e:	6820      	ldr	r0, [r4, #0]
 8013d20:	3008      	adds	r0, #8
 8013d22:	f7fd ff1d 	bl	8011b60 <rcl_client_is_valid>
 8013d26:	b1a8      	cbz	r0, 8013d54 <rcl_action_send_result_request+0x54>
 8013d28:	6820      	ldr	r0, [r4, #0]
 8013d2a:	300c      	adds	r0, #12
 8013d2c:	f7fe fdb6 	bl	801289c <rcl_subscription_is_valid>
 8013d30:	b180      	cbz	r0, 8013d54 <rcl_action_send_result_request+0x54>
 8013d32:	6820      	ldr	r0, [r4, #0]
 8013d34:	3010      	adds	r0, #16
 8013d36:	f7fe fdb1 	bl	801289c <rcl_subscription_is_valid>
 8013d3a:	b158      	cbz	r0, 8013d54 <rcl_action_send_result_request+0x54>
 8013d3c:	b195      	cbz	r5, 8013d64 <rcl_action_send_result_request+0x64>
 8013d3e:	b18e      	cbz	r6, 8013d64 <rcl_action_send_result_request+0x64>
 8013d40:	6820      	ldr	r0, [r4, #0]
 8013d42:	4632      	mov	r2, r6
 8013d44:	4629      	mov	r1, r5
 8013d46:	3008      	adds	r0, #8
 8013d48:	f7fd fe8a 	bl	8011a60 <rcl_send_request>
 8013d4c:	3800      	subs	r0, #0
 8013d4e:	bf18      	it	ne
 8013d50:	2001      	movne	r0, #1
 8013d52:	bd70      	pop	{r4, r5, r6, pc}
 8013d54:	f7f7 fe04 	bl	800b960 <rcutils_reset_error>
 8013d58:	f640 0036 	movw	r0, #2102	@ 0x836
 8013d5c:	bd70      	pop	{r4, r5, r6, pc}
 8013d5e:	f640 0036 	movw	r0, #2102	@ 0x836
 8013d62:	bd70      	pop	{r4, r5, r6, pc}
 8013d64:	200b      	movs	r0, #11
 8013d66:	bd70      	pop	{r4, r5, r6, pc}
 8013d68:	f640 0036 	movw	r0, #2102	@ 0x836
 8013d6c:	4770      	bx	lr
 8013d6e:	bf00      	nop

08013d70 <rcl_action_take_result_response>:
 8013d70:	2800      	cmp	r0, #0
 8013d72:	d03a      	beq.n	8013dea <rcl_action_take_result_response+0x7a>
 8013d74:	b570      	push	{r4, r5, r6, lr}
 8013d76:	4604      	mov	r4, r0
 8013d78:	6800      	ldr	r0, [r0, #0]
 8013d7a:	b388      	cbz	r0, 8013de0 <rcl_action_take_result_response+0x70>
 8013d7c:	460d      	mov	r5, r1
 8013d7e:	4616      	mov	r6, r2
 8013d80:	f7fd feee 	bl	8011b60 <rcl_client_is_valid>
 8013d84:	b338      	cbz	r0, 8013dd6 <rcl_action_take_result_response+0x66>
 8013d86:	6820      	ldr	r0, [r4, #0]
 8013d88:	3004      	adds	r0, #4
 8013d8a:	f7fd fee9 	bl	8011b60 <rcl_client_is_valid>
 8013d8e:	b310      	cbz	r0, 8013dd6 <rcl_action_take_result_response+0x66>
 8013d90:	6820      	ldr	r0, [r4, #0]
 8013d92:	3008      	adds	r0, #8
 8013d94:	f7fd fee4 	bl	8011b60 <rcl_client_is_valid>
 8013d98:	b1e8      	cbz	r0, 8013dd6 <rcl_action_take_result_response+0x66>
 8013d9a:	6820      	ldr	r0, [r4, #0]
 8013d9c:	300c      	adds	r0, #12
 8013d9e:	f7fe fd7d 	bl	801289c <rcl_subscription_is_valid>
 8013da2:	b1c0      	cbz	r0, 8013dd6 <rcl_action_take_result_response+0x66>
 8013da4:	6820      	ldr	r0, [r4, #0]
 8013da6:	3010      	adds	r0, #16
 8013da8:	f7fe fd78 	bl	801289c <rcl_subscription_is_valid>
 8013dac:	b198      	cbz	r0, 8013dd6 <rcl_action_take_result_response+0x66>
 8013dae:	b1d5      	cbz	r5, 8013de6 <rcl_action_take_result_response+0x76>
 8013db0:	b1ce      	cbz	r6, 8013de6 <rcl_action_take_result_response+0x76>
 8013db2:	6820      	ldr	r0, [r4, #0]
 8013db4:	4632      	mov	r2, r6
 8013db6:	4629      	mov	r1, r5
 8013db8:	3008      	adds	r0, #8
 8013dba:	f7fd fe89 	bl	8011ad0 <rcl_take_response>
 8013dbe:	b148      	cbz	r0, 8013dd4 <rcl_action_take_result_response+0x64>
 8013dc0:	280a      	cmp	r0, #10
 8013dc2:	d007      	beq.n	8013dd4 <rcl_action_take_result_response+0x64>
 8013dc4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013dc8:	f640 0337 	movw	r3, #2103	@ 0x837
 8013dcc:	4290      	cmp	r0, r2
 8013dce:	bf0c      	ite	eq
 8013dd0:	4618      	moveq	r0, r3
 8013dd2:	2001      	movne	r0, #1
 8013dd4:	bd70      	pop	{r4, r5, r6, pc}
 8013dd6:	f7f7 fdc3 	bl	800b960 <rcutils_reset_error>
 8013dda:	f640 0036 	movw	r0, #2102	@ 0x836
 8013dde:	bd70      	pop	{r4, r5, r6, pc}
 8013de0:	f640 0036 	movw	r0, #2102	@ 0x836
 8013de4:	bd70      	pop	{r4, r5, r6, pc}
 8013de6:	200b      	movs	r0, #11
 8013de8:	bd70      	pop	{r4, r5, r6, pc}
 8013dea:	f640 0036 	movw	r0, #2102	@ 0x836
 8013dee:	4770      	bx	lr

08013df0 <rcl_action_take_cancel_response>:
 8013df0:	2800      	cmp	r0, #0
 8013df2:	d03a      	beq.n	8013e6a <rcl_action_take_cancel_response+0x7a>
 8013df4:	b570      	push	{r4, r5, r6, lr}
 8013df6:	4604      	mov	r4, r0
 8013df8:	6800      	ldr	r0, [r0, #0]
 8013dfa:	b388      	cbz	r0, 8013e60 <rcl_action_take_cancel_response+0x70>
 8013dfc:	460d      	mov	r5, r1
 8013dfe:	4616      	mov	r6, r2
 8013e00:	f7fd feae 	bl	8011b60 <rcl_client_is_valid>
 8013e04:	b338      	cbz	r0, 8013e56 <rcl_action_take_cancel_response+0x66>
 8013e06:	6820      	ldr	r0, [r4, #0]
 8013e08:	3004      	adds	r0, #4
 8013e0a:	f7fd fea9 	bl	8011b60 <rcl_client_is_valid>
 8013e0e:	b310      	cbz	r0, 8013e56 <rcl_action_take_cancel_response+0x66>
 8013e10:	6820      	ldr	r0, [r4, #0]
 8013e12:	3008      	adds	r0, #8
 8013e14:	f7fd fea4 	bl	8011b60 <rcl_client_is_valid>
 8013e18:	b1e8      	cbz	r0, 8013e56 <rcl_action_take_cancel_response+0x66>
 8013e1a:	6820      	ldr	r0, [r4, #0]
 8013e1c:	300c      	adds	r0, #12
 8013e1e:	f7fe fd3d 	bl	801289c <rcl_subscription_is_valid>
 8013e22:	b1c0      	cbz	r0, 8013e56 <rcl_action_take_cancel_response+0x66>
 8013e24:	6820      	ldr	r0, [r4, #0]
 8013e26:	3010      	adds	r0, #16
 8013e28:	f7fe fd38 	bl	801289c <rcl_subscription_is_valid>
 8013e2c:	b198      	cbz	r0, 8013e56 <rcl_action_take_cancel_response+0x66>
 8013e2e:	b1d5      	cbz	r5, 8013e66 <rcl_action_take_cancel_response+0x76>
 8013e30:	b1ce      	cbz	r6, 8013e66 <rcl_action_take_cancel_response+0x76>
 8013e32:	6820      	ldr	r0, [r4, #0]
 8013e34:	4632      	mov	r2, r6
 8013e36:	4629      	mov	r1, r5
 8013e38:	3004      	adds	r0, #4
 8013e3a:	f7fd fe49 	bl	8011ad0 <rcl_take_response>
 8013e3e:	b148      	cbz	r0, 8013e54 <rcl_action_take_cancel_response+0x64>
 8013e40:	280a      	cmp	r0, #10
 8013e42:	d007      	beq.n	8013e54 <rcl_action_take_cancel_response+0x64>
 8013e44:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013e48:	f640 0337 	movw	r3, #2103	@ 0x837
 8013e4c:	4290      	cmp	r0, r2
 8013e4e:	bf0c      	ite	eq
 8013e50:	4618      	moveq	r0, r3
 8013e52:	2001      	movne	r0, #1
 8013e54:	bd70      	pop	{r4, r5, r6, pc}
 8013e56:	f7f7 fd83 	bl	800b960 <rcutils_reset_error>
 8013e5a:	f640 0036 	movw	r0, #2102	@ 0x836
 8013e5e:	bd70      	pop	{r4, r5, r6, pc}
 8013e60:	f640 0036 	movw	r0, #2102	@ 0x836
 8013e64:	bd70      	pop	{r4, r5, r6, pc}
 8013e66:	200b      	movs	r0, #11
 8013e68:	bd70      	pop	{r4, r5, r6, pc}
 8013e6a:	f640 0036 	movw	r0, #2102	@ 0x836
 8013e6e:	4770      	bx	lr

08013e70 <rcl_action_take_feedback>:
 8013e70:	2800      	cmp	r0, #0
 8013e72:	d038      	beq.n	8013ee6 <rcl_action_take_feedback+0x76>
 8013e74:	b530      	push	{r4, r5, lr}
 8013e76:	4604      	mov	r4, r0
 8013e78:	6800      	ldr	r0, [r0, #0]
 8013e7a:	b091      	sub	sp, #68	@ 0x44
 8013e7c:	b378      	cbz	r0, 8013ede <rcl_action_take_feedback+0x6e>
 8013e7e:	460d      	mov	r5, r1
 8013e80:	f7fd fe6e 	bl	8011b60 <rcl_client_is_valid>
 8013e84:	b328      	cbz	r0, 8013ed2 <rcl_action_take_feedback+0x62>
 8013e86:	6820      	ldr	r0, [r4, #0]
 8013e88:	3004      	adds	r0, #4
 8013e8a:	f7fd fe69 	bl	8011b60 <rcl_client_is_valid>
 8013e8e:	b300      	cbz	r0, 8013ed2 <rcl_action_take_feedback+0x62>
 8013e90:	6820      	ldr	r0, [r4, #0]
 8013e92:	3008      	adds	r0, #8
 8013e94:	f7fd fe64 	bl	8011b60 <rcl_client_is_valid>
 8013e98:	b1d8      	cbz	r0, 8013ed2 <rcl_action_take_feedback+0x62>
 8013e9a:	6820      	ldr	r0, [r4, #0]
 8013e9c:	300c      	adds	r0, #12
 8013e9e:	f7fe fcfd 	bl	801289c <rcl_subscription_is_valid>
 8013ea2:	b1b0      	cbz	r0, 8013ed2 <rcl_action_take_feedback+0x62>
 8013ea4:	6820      	ldr	r0, [r4, #0]
 8013ea6:	3010      	adds	r0, #16
 8013ea8:	f7fe fcf8 	bl	801289c <rcl_subscription_is_valid>
 8013eac:	b188      	cbz	r0, 8013ed2 <rcl_action_take_feedback+0x62>
 8013eae:	b1ed      	cbz	r5, 8013eec <rcl_action_take_feedback+0x7c>
 8013eb0:	6820      	ldr	r0, [r4, #0]
 8013eb2:	2300      	movs	r3, #0
 8013eb4:	466a      	mov	r2, sp
 8013eb6:	4629      	mov	r1, r5
 8013eb8:	300c      	adds	r0, #12
 8013eba:	f7fe fc91 	bl	80127e0 <rcl_take>
 8013ebe:	b160      	cbz	r0, 8013eda <rcl_action_take_feedback+0x6a>
 8013ec0:	f240 1391 	movw	r3, #401	@ 0x191
 8013ec4:	4298      	cmp	r0, r3
 8013ec6:	d014      	beq.n	8013ef2 <rcl_action_take_feedback+0x82>
 8013ec8:	280a      	cmp	r0, #10
 8013eca:	bf18      	it	ne
 8013ecc:	2001      	movne	r0, #1
 8013ece:	b011      	add	sp, #68	@ 0x44
 8013ed0:	bd30      	pop	{r4, r5, pc}
 8013ed2:	f7f7 fd45 	bl	800b960 <rcutils_reset_error>
 8013ed6:	f640 0036 	movw	r0, #2102	@ 0x836
 8013eda:	b011      	add	sp, #68	@ 0x44
 8013edc:	bd30      	pop	{r4, r5, pc}
 8013ede:	f640 0036 	movw	r0, #2102	@ 0x836
 8013ee2:	b011      	add	sp, #68	@ 0x44
 8013ee4:	bd30      	pop	{r4, r5, pc}
 8013ee6:	f640 0036 	movw	r0, #2102	@ 0x836
 8013eea:	4770      	bx	lr
 8013eec:	200b      	movs	r0, #11
 8013eee:	b011      	add	sp, #68	@ 0x44
 8013ef0:	bd30      	pop	{r4, r5, pc}
 8013ef2:	f640 0037 	movw	r0, #2103	@ 0x837
 8013ef6:	e7f0      	b.n	8013eda <rcl_action_take_feedback+0x6a>

08013ef8 <rcl_action_wait_set_add_action_client>:
 8013ef8:	2800      	cmp	r0, #0
 8013efa:	d048      	beq.n	8013f8e <rcl_action_wait_set_add_action_client+0x96>
 8013efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013efe:	460c      	mov	r4, r1
 8013f00:	2900      	cmp	r1, #0
 8013f02:	d03c      	beq.n	8013f7e <rcl_action_wait_set_add_action_client+0x86>
 8013f04:	4605      	mov	r5, r0
 8013f06:	6808      	ldr	r0, [r1, #0]
 8013f08:	2800      	cmp	r0, #0
 8013f0a:	d038      	beq.n	8013f7e <rcl_action_wait_set_add_action_client+0x86>
 8013f0c:	4617      	mov	r7, r2
 8013f0e:	461e      	mov	r6, r3
 8013f10:	f7fd fe26 	bl	8011b60 <rcl_client_is_valid>
 8013f14:	b3b0      	cbz	r0, 8013f84 <rcl_action_wait_set_add_action_client+0x8c>
 8013f16:	6820      	ldr	r0, [r4, #0]
 8013f18:	3004      	adds	r0, #4
 8013f1a:	f7fd fe21 	bl	8011b60 <rcl_client_is_valid>
 8013f1e:	b388      	cbz	r0, 8013f84 <rcl_action_wait_set_add_action_client+0x8c>
 8013f20:	6820      	ldr	r0, [r4, #0]
 8013f22:	3008      	adds	r0, #8
 8013f24:	f7fd fe1c 	bl	8011b60 <rcl_client_is_valid>
 8013f28:	b360      	cbz	r0, 8013f84 <rcl_action_wait_set_add_action_client+0x8c>
 8013f2a:	6820      	ldr	r0, [r4, #0]
 8013f2c:	300c      	adds	r0, #12
 8013f2e:	f7fe fcb5 	bl	801289c <rcl_subscription_is_valid>
 8013f32:	b338      	cbz	r0, 8013f84 <rcl_action_wait_set_add_action_client+0x8c>
 8013f34:	6820      	ldr	r0, [r4, #0]
 8013f36:	3010      	adds	r0, #16
 8013f38:	f7fe fcb0 	bl	801289c <rcl_subscription_is_valid>
 8013f3c:	b310      	cbz	r0, 8013f84 <rcl_action_wait_set_add_action_client+0x8c>
 8013f3e:	6821      	ldr	r1, [r4, #0]
 8013f40:	4628      	mov	r0, r5
 8013f42:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8013f46:	f7ff fccd 	bl	80138e4 <rcl_wait_set_add_client>
 8013f4a:	b9b8      	cbnz	r0, 8013f7c <rcl_action_wait_set_add_action_client+0x84>
 8013f4c:	6821      	ldr	r1, [r4, #0]
 8013f4e:	4628      	mov	r0, r5
 8013f50:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8013f54:	3104      	adds	r1, #4
 8013f56:	f7ff fcc5 	bl	80138e4 <rcl_wait_set_add_client>
 8013f5a:	b978      	cbnz	r0, 8013f7c <rcl_action_wait_set_add_action_client+0x84>
 8013f5c:	6821      	ldr	r1, [r4, #0]
 8013f5e:	4628      	mov	r0, r5
 8013f60:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8013f64:	3108      	adds	r1, #8
 8013f66:	f7ff fcbd 	bl	80138e4 <rcl_wait_set_add_client>
 8013f6a:	b938      	cbnz	r0, 8013f7c <rcl_action_wait_set_add_action_client+0x84>
 8013f6c:	6821      	ldr	r1, [r4, #0]
 8013f6e:	4628      	mov	r0, r5
 8013f70:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8013f74:	310c      	adds	r1, #12
 8013f76:	f7ff f96d 	bl	8013254 <rcl_wait_set_add_subscription>
 8013f7a:	b158      	cbz	r0, 8013f94 <rcl_action_wait_set_add_action_client+0x9c>
 8013f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f7e:	f640 0036 	movw	r0, #2102	@ 0x836
 8013f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f84:	f7f7 fcec 	bl	800b960 <rcutils_reset_error>
 8013f88:	f640 0036 	movw	r0, #2102	@ 0x836
 8013f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f8e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013f92:	4770      	bx	lr
 8013f94:	6821      	ldr	r1, [r4, #0]
 8013f96:	4628      	mov	r0, r5
 8013f98:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8013f9c:	3110      	adds	r1, #16
 8013f9e:	f7ff f959 	bl	8013254 <rcl_wait_set_add_subscription>
 8013fa2:	2800      	cmp	r0, #0
 8013fa4:	d1ea      	bne.n	8013f7c <rcl_action_wait_set_add_action_client+0x84>
 8013fa6:	b11f      	cbz	r7, 8013fb0 <rcl_action_wait_set_add_action_client+0xb8>
 8013fa8:	6823      	ldr	r3, [r4, #0]
 8013faa:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8013fae:	603b      	str	r3, [r7, #0]
 8013fb0:	2e00      	cmp	r6, #0
 8013fb2:	d0e3      	beq.n	8013f7c <rcl_action_wait_set_add_action_client+0x84>
 8013fb4:	6823      	ldr	r3, [r4, #0]
 8013fb6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8013fba:	6033      	str	r3, [r6, #0]
 8013fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013fbe:	bf00      	nop

08013fc0 <rcl_action_client_wait_set_get_entities_ready>:
 8013fc0:	2800      	cmp	r0, #0
 8013fc2:	f000 808d 	beq.w	80140e0 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8013fc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fca:	460c      	mov	r4, r1
 8013fcc:	2900      	cmp	r1, #0
 8013fce:	d077      	beq.n	80140c0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8013fd0:	4605      	mov	r5, r0
 8013fd2:	6808      	ldr	r0, [r1, #0]
 8013fd4:	2800      	cmp	r0, #0
 8013fd6:	d073      	beq.n	80140c0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8013fd8:	4616      	mov	r6, r2
 8013fda:	461f      	mov	r7, r3
 8013fdc:	f7fd fdc0 	bl	8011b60 <rcl_client_is_valid>
 8013fe0:	2800      	cmp	r0, #0
 8013fe2:	d071      	beq.n	80140c8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013fe4:	6820      	ldr	r0, [r4, #0]
 8013fe6:	3004      	adds	r0, #4
 8013fe8:	f7fd fdba 	bl	8011b60 <rcl_client_is_valid>
 8013fec:	2800      	cmp	r0, #0
 8013fee:	d06b      	beq.n	80140c8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013ff0:	6820      	ldr	r0, [r4, #0]
 8013ff2:	3008      	adds	r0, #8
 8013ff4:	f7fd fdb4 	bl	8011b60 <rcl_client_is_valid>
 8013ff8:	2800      	cmp	r0, #0
 8013ffa:	d065      	beq.n	80140c8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013ffc:	6820      	ldr	r0, [r4, #0]
 8013ffe:	300c      	adds	r0, #12
 8014000:	f7fe fc4c 	bl	801289c <rcl_subscription_is_valid>
 8014004:	2800      	cmp	r0, #0
 8014006:	d05f      	beq.n	80140c8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014008:	6820      	ldr	r0, [r4, #0]
 801400a:	3010      	adds	r0, #16
 801400c:	f7fe fc46 	bl	801289c <rcl_subscription_is_valid>
 8014010:	2800      	cmp	r0, #0
 8014012:	d059      	beq.n	80140c8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014014:	2e00      	cmp	r6, #0
 8014016:	d060      	beq.n	80140da <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014018:	2f00      	cmp	r7, #0
 801401a:	d05e      	beq.n	80140da <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801401c:	9b06      	ldr	r3, [sp, #24]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d05b      	beq.n	80140da <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014022:	9b07      	ldr	r3, [sp, #28]
 8014024:	2b00      	cmp	r3, #0
 8014026:	d058      	beq.n	80140da <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014028:	9b08      	ldr	r3, [sp, #32]
 801402a:	2b00      	cmp	r3, #0
 801402c:	d055      	beq.n	80140da <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801402e:	6823      	ldr	r3, [r4, #0]
 8014030:	686a      	ldr	r2, [r5, #4]
 8014032:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 8014036:	428a      	cmp	r2, r1
 8014038:	d94c      	bls.n	80140d4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801403a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 801403e:	4282      	cmp	r2, r0
 8014040:	d948      	bls.n	80140d4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014042:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 8014046:	69ea      	ldr	r2, [r5, #28]
 8014048:	42a2      	cmp	r2, r4
 801404a:	d943      	bls.n	80140d4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801404c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8014050:	4562      	cmp	r2, ip
 8014052:	d93f      	bls.n	80140d4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014054:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8014058:	4572      	cmp	r2, lr
 801405a:	d93b      	bls.n	80140d4 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801405c:	69aa      	ldr	r2, [r5, #24]
 801405e:	682d      	ldr	r5, [r5, #0]
 8014060:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8014064:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8014068:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801406c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8014070:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8014074:	f103 0c0c 	add.w	ip, r3, #12
 8014078:	eba5 050c 	sub.w	r5, r5, ip
 801407c:	fab5 f585 	clz	r5, r5
 8014080:	096d      	lsrs	r5, r5, #5
 8014082:	7035      	strb	r5, [r6, #0]
 8014084:	f103 0510 	add.w	r5, r3, #16
 8014088:	1b64      	subs	r4, r4, r5
 801408a:	fab4 f484 	clz	r4, r4
 801408e:	0964      	lsrs	r4, r4, #5
 8014090:	703c      	strb	r4, [r7, #0]
 8014092:	eba3 0008 	sub.w	r0, r3, r8
 8014096:	1d1c      	adds	r4, r3, #4
 8014098:	3308      	adds	r3, #8
 801409a:	1ad3      	subs	r3, r2, r3
 801409c:	fab0 f080 	clz	r0, r0
 80140a0:	9a06      	ldr	r2, [sp, #24]
 80140a2:	0940      	lsrs	r0, r0, #5
 80140a4:	1b09      	subs	r1, r1, r4
 80140a6:	7010      	strb	r0, [r2, #0]
 80140a8:	fab1 f181 	clz	r1, r1
 80140ac:	9a07      	ldr	r2, [sp, #28]
 80140ae:	0949      	lsrs	r1, r1, #5
 80140b0:	7011      	strb	r1, [r2, #0]
 80140b2:	fab3 f383 	clz	r3, r3
 80140b6:	9a08      	ldr	r2, [sp, #32]
 80140b8:	095b      	lsrs	r3, r3, #5
 80140ba:	2000      	movs	r0, #0
 80140bc:	7013      	strb	r3, [r2, #0]
 80140be:	e001      	b.n	80140c4 <rcl_action_client_wait_set_get_entities_ready+0x104>
 80140c0:	f640 0036 	movw	r0, #2102	@ 0x836
 80140c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140c8:	f7f7 fc4a 	bl	800b960 <rcutils_reset_error>
 80140cc:	f640 0036 	movw	r0, #2102	@ 0x836
 80140d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140d4:	2001      	movs	r0, #1
 80140d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140da:	200b      	movs	r0, #11
 80140dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140e0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80140e4:	4770      	bx	lr
 80140e6:	bf00      	nop

080140e8 <rcl_action_take_goal_request>:
 80140e8:	2800      	cmp	r0, #0
 80140ea:	d039      	beq.n	8014160 <rcl_action_take_goal_request+0x78>
 80140ec:	b570      	push	{r4, r5, r6, lr}
 80140ee:	4604      	mov	r4, r0
 80140f0:	6800      	ldr	r0, [r0, #0]
 80140f2:	b380      	cbz	r0, 8014156 <rcl_action_take_goal_request+0x6e>
 80140f4:	460d      	mov	r5, r1
 80140f6:	4616      	mov	r6, r2
 80140f8:	f7fe fa8c 	bl	8012614 <rcl_service_is_valid>
 80140fc:	b330      	cbz	r0, 801414c <rcl_action_take_goal_request+0x64>
 80140fe:	6820      	ldr	r0, [r4, #0]
 8014100:	3004      	adds	r0, #4
 8014102:	f7fe fa87 	bl	8012614 <rcl_service_is_valid>
 8014106:	b308      	cbz	r0, 801414c <rcl_action_take_goal_request+0x64>
 8014108:	6820      	ldr	r0, [r4, #0]
 801410a:	3008      	adds	r0, #8
 801410c:	f7fe fa82 	bl	8012614 <rcl_service_is_valid>
 8014110:	b1e0      	cbz	r0, 801414c <rcl_action_take_goal_request+0x64>
 8014112:	6820      	ldr	r0, [r4, #0]
 8014114:	300c      	adds	r0, #12
 8014116:	f7f6 fc43 	bl	800a9a0 <rcl_publisher_is_valid>
 801411a:	b1b8      	cbz	r0, 801414c <rcl_action_take_goal_request+0x64>
 801411c:	6820      	ldr	r0, [r4, #0]
 801411e:	3010      	adds	r0, #16
 8014120:	f7f6 fc3e 	bl	800a9a0 <rcl_publisher_is_valid>
 8014124:	b190      	cbz	r0, 801414c <rcl_action_take_goal_request+0x64>
 8014126:	b1cd      	cbz	r5, 801415c <rcl_action_take_goal_request+0x74>
 8014128:	b1c6      	cbz	r6, 801415c <rcl_action_take_goal_request+0x74>
 801412a:	6820      	ldr	r0, [r4, #0]
 801412c:	4632      	mov	r2, r6
 801412e:	4629      	mov	r1, r5
 8014130:	f7fe fa18 	bl	8012564 <rcl_take_request>
 8014134:	b148      	cbz	r0, 801414a <rcl_action_take_goal_request+0x62>
 8014136:	280a      	cmp	r0, #10
 8014138:	d007      	beq.n	801414a <rcl_action_take_goal_request+0x62>
 801413a:	f240 2259 	movw	r2, #601	@ 0x259
 801413e:	f640 0399 	movw	r3, #2201	@ 0x899
 8014142:	4290      	cmp	r0, r2
 8014144:	bf0c      	ite	eq
 8014146:	4618      	moveq	r0, r3
 8014148:	2001      	movne	r0, #1
 801414a:	bd70      	pop	{r4, r5, r6, pc}
 801414c:	f7f7 fc08 	bl	800b960 <rcutils_reset_error>
 8014150:	f640 0098 	movw	r0, #2200	@ 0x898
 8014154:	bd70      	pop	{r4, r5, r6, pc}
 8014156:	f640 0098 	movw	r0, #2200	@ 0x898
 801415a:	bd70      	pop	{r4, r5, r6, pc}
 801415c:	200b      	movs	r0, #11
 801415e:	bd70      	pop	{r4, r5, r6, pc}
 8014160:	f640 0098 	movw	r0, #2200	@ 0x898
 8014164:	4770      	bx	lr
 8014166:	bf00      	nop

08014168 <rcl_action_send_goal_response>:
 8014168:	b390      	cbz	r0, 80141d0 <rcl_action_send_goal_response+0x68>
 801416a:	b570      	push	{r4, r5, r6, lr}
 801416c:	4604      	mov	r4, r0
 801416e:	6800      	ldr	r0, [r0, #0]
 8014170:	b348      	cbz	r0, 80141c6 <rcl_action_send_goal_response+0x5e>
 8014172:	460d      	mov	r5, r1
 8014174:	4616      	mov	r6, r2
 8014176:	f7fe fa4d 	bl	8012614 <rcl_service_is_valid>
 801417a:	b1f8      	cbz	r0, 80141bc <rcl_action_send_goal_response+0x54>
 801417c:	6820      	ldr	r0, [r4, #0]
 801417e:	3004      	adds	r0, #4
 8014180:	f7fe fa48 	bl	8012614 <rcl_service_is_valid>
 8014184:	b1d0      	cbz	r0, 80141bc <rcl_action_send_goal_response+0x54>
 8014186:	6820      	ldr	r0, [r4, #0]
 8014188:	3008      	adds	r0, #8
 801418a:	f7fe fa43 	bl	8012614 <rcl_service_is_valid>
 801418e:	b1a8      	cbz	r0, 80141bc <rcl_action_send_goal_response+0x54>
 8014190:	6820      	ldr	r0, [r4, #0]
 8014192:	300c      	adds	r0, #12
 8014194:	f7f6 fc04 	bl	800a9a0 <rcl_publisher_is_valid>
 8014198:	b180      	cbz	r0, 80141bc <rcl_action_send_goal_response+0x54>
 801419a:	6820      	ldr	r0, [r4, #0]
 801419c:	3010      	adds	r0, #16
 801419e:	f7f6 fbff 	bl	800a9a0 <rcl_publisher_is_valid>
 80141a2:	b158      	cbz	r0, 80141bc <rcl_action_send_goal_response+0x54>
 80141a4:	b195      	cbz	r5, 80141cc <rcl_action_send_goal_response+0x64>
 80141a6:	b18e      	cbz	r6, 80141cc <rcl_action_send_goal_response+0x64>
 80141a8:	6820      	ldr	r0, [r4, #0]
 80141aa:	4632      	mov	r2, r6
 80141ac:	4629      	mov	r1, r5
 80141ae:	f7fe fa19 	bl	80125e4 <rcl_send_response>
 80141b2:	b110      	cbz	r0, 80141ba <rcl_action_send_goal_response+0x52>
 80141b4:	2802      	cmp	r0, #2
 80141b6:	bf18      	it	ne
 80141b8:	2001      	movne	r0, #1
 80141ba:	bd70      	pop	{r4, r5, r6, pc}
 80141bc:	f7f7 fbd0 	bl	800b960 <rcutils_reset_error>
 80141c0:	f640 0098 	movw	r0, #2200	@ 0x898
 80141c4:	bd70      	pop	{r4, r5, r6, pc}
 80141c6:	f640 0098 	movw	r0, #2200	@ 0x898
 80141ca:	bd70      	pop	{r4, r5, r6, pc}
 80141cc:	200b      	movs	r0, #11
 80141ce:	bd70      	pop	{r4, r5, r6, pc}
 80141d0:	f640 0098 	movw	r0, #2200	@ 0x898
 80141d4:	4770      	bx	lr
 80141d6:	bf00      	nop

080141d8 <rcl_action_take_result_request>:
 80141d8:	2800      	cmp	r0, #0
 80141da:	d03a      	beq.n	8014252 <rcl_action_take_result_request+0x7a>
 80141dc:	b570      	push	{r4, r5, r6, lr}
 80141de:	4604      	mov	r4, r0
 80141e0:	6800      	ldr	r0, [r0, #0]
 80141e2:	b388      	cbz	r0, 8014248 <rcl_action_take_result_request+0x70>
 80141e4:	460d      	mov	r5, r1
 80141e6:	4616      	mov	r6, r2
 80141e8:	f7fe fa14 	bl	8012614 <rcl_service_is_valid>
 80141ec:	b338      	cbz	r0, 801423e <rcl_action_take_result_request+0x66>
 80141ee:	6820      	ldr	r0, [r4, #0]
 80141f0:	3004      	adds	r0, #4
 80141f2:	f7fe fa0f 	bl	8012614 <rcl_service_is_valid>
 80141f6:	b310      	cbz	r0, 801423e <rcl_action_take_result_request+0x66>
 80141f8:	6820      	ldr	r0, [r4, #0]
 80141fa:	3008      	adds	r0, #8
 80141fc:	f7fe fa0a 	bl	8012614 <rcl_service_is_valid>
 8014200:	b1e8      	cbz	r0, 801423e <rcl_action_take_result_request+0x66>
 8014202:	6820      	ldr	r0, [r4, #0]
 8014204:	300c      	adds	r0, #12
 8014206:	f7f6 fbcb 	bl	800a9a0 <rcl_publisher_is_valid>
 801420a:	b1c0      	cbz	r0, 801423e <rcl_action_take_result_request+0x66>
 801420c:	6820      	ldr	r0, [r4, #0]
 801420e:	3010      	adds	r0, #16
 8014210:	f7f6 fbc6 	bl	800a9a0 <rcl_publisher_is_valid>
 8014214:	b198      	cbz	r0, 801423e <rcl_action_take_result_request+0x66>
 8014216:	b1d5      	cbz	r5, 801424e <rcl_action_take_result_request+0x76>
 8014218:	b1ce      	cbz	r6, 801424e <rcl_action_take_result_request+0x76>
 801421a:	6820      	ldr	r0, [r4, #0]
 801421c:	4632      	mov	r2, r6
 801421e:	4629      	mov	r1, r5
 8014220:	3008      	adds	r0, #8
 8014222:	f7fe f99f 	bl	8012564 <rcl_take_request>
 8014226:	b148      	cbz	r0, 801423c <rcl_action_take_result_request+0x64>
 8014228:	280a      	cmp	r0, #10
 801422a:	d007      	beq.n	801423c <rcl_action_take_result_request+0x64>
 801422c:	f240 2259 	movw	r2, #601	@ 0x259
 8014230:	f640 0399 	movw	r3, #2201	@ 0x899
 8014234:	4290      	cmp	r0, r2
 8014236:	bf0c      	ite	eq
 8014238:	4618      	moveq	r0, r3
 801423a:	2001      	movne	r0, #1
 801423c:	bd70      	pop	{r4, r5, r6, pc}
 801423e:	f7f7 fb8f 	bl	800b960 <rcutils_reset_error>
 8014242:	f640 0098 	movw	r0, #2200	@ 0x898
 8014246:	bd70      	pop	{r4, r5, r6, pc}
 8014248:	f640 0098 	movw	r0, #2200	@ 0x898
 801424c:	bd70      	pop	{r4, r5, r6, pc}
 801424e:	200b      	movs	r0, #11
 8014250:	bd70      	pop	{r4, r5, r6, pc}
 8014252:	f640 0098 	movw	r0, #2200	@ 0x898
 8014256:	4770      	bx	lr

08014258 <rcl_action_take_cancel_request>:
 8014258:	2800      	cmp	r0, #0
 801425a:	d03a      	beq.n	80142d2 <rcl_action_take_cancel_request+0x7a>
 801425c:	b570      	push	{r4, r5, r6, lr}
 801425e:	4604      	mov	r4, r0
 8014260:	6800      	ldr	r0, [r0, #0]
 8014262:	b388      	cbz	r0, 80142c8 <rcl_action_take_cancel_request+0x70>
 8014264:	460d      	mov	r5, r1
 8014266:	4616      	mov	r6, r2
 8014268:	f7fe f9d4 	bl	8012614 <rcl_service_is_valid>
 801426c:	b338      	cbz	r0, 80142be <rcl_action_take_cancel_request+0x66>
 801426e:	6820      	ldr	r0, [r4, #0]
 8014270:	3004      	adds	r0, #4
 8014272:	f7fe f9cf 	bl	8012614 <rcl_service_is_valid>
 8014276:	b310      	cbz	r0, 80142be <rcl_action_take_cancel_request+0x66>
 8014278:	6820      	ldr	r0, [r4, #0]
 801427a:	3008      	adds	r0, #8
 801427c:	f7fe f9ca 	bl	8012614 <rcl_service_is_valid>
 8014280:	b1e8      	cbz	r0, 80142be <rcl_action_take_cancel_request+0x66>
 8014282:	6820      	ldr	r0, [r4, #0]
 8014284:	300c      	adds	r0, #12
 8014286:	f7f6 fb8b 	bl	800a9a0 <rcl_publisher_is_valid>
 801428a:	b1c0      	cbz	r0, 80142be <rcl_action_take_cancel_request+0x66>
 801428c:	6820      	ldr	r0, [r4, #0]
 801428e:	3010      	adds	r0, #16
 8014290:	f7f6 fb86 	bl	800a9a0 <rcl_publisher_is_valid>
 8014294:	b198      	cbz	r0, 80142be <rcl_action_take_cancel_request+0x66>
 8014296:	b1d5      	cbz	r5, 80142ce <rcl_action_take_cancel_request+0x76>
 8014298:	b1ce      	cbz	r6, 80142ce <rcl_action_take_cancel_request+0x76>
 801429a:	6820      	ldr	r0, [r4, #0]
 801429c:	4632      	mov	r2, r6
 801429e:	4629      	mov	r1, r5
 80142a0:	3004      	adds	r0, #4
 80142a2:	f7fe f95f 	bl	8012564 <rcl_take_request>
 80142a6:	b148      	cbz	r0, 80142bc <rcl_action_take_cancel_request+0x64>
 80142a8:	280a      	cmp	r0, #10
 80142aa:	d007      	beq.n	80142bc <rcl_action_take_cancel_request+0x64>
 80142ac:	f240 2259 	movw	r2, #601	@ 0x259
 80142b0:	f640 0399 	movw	r3, #2201	@ 0x899
 80142b4:	4290      	cmp	r0, r2
 80142b6:	bf0c      	ite	eq
 80142b8:	4618      	moveq	r0, r3
 80142ba:	2001      	movne	r0, #1
 80142bc:	bd70      	pop	{r4, r5, r6, pc}
 80142be:	f7f7 fb4f 	bl	800b960 <rcutils_reset_error>
 80142c2:	f640 0098 	movw	r0, #2200	@ 0x898
 80142c6:	bd70      	pop	{r4, r5, r6, pc}
 80142c8:	f640 0098 	movw	r0, #2200	@ 0x898
 80142cc:	bd70      	pop	{r4, r5, r6, pc}
 80142ce:	200b      	movs	r0, #11
 80142d0:	bd70      	pop	{r4, r5, r6, pc}
 80142d2:	f640 0098 	movw	r0, #2200	@ 0x898
 80142d6:	4770      	bx	lr

080142d8 <rcl_action_send_cancel_response>:
 80142d8:	b398      	cbz	r0, 8014342 <rcl_action_send_cancel_response+0x6a>
 80142da:	b570      	push	{r4, r5, r6, lr}
 80142dc:	4604      	mov	r4, r0
 80142de:	6800      	ldr	r0, [r0, #0]
 80142e0:	b350      	cbz	r0, 8014338 <rcl_action_send_cancel_response+0x60>
 80142e2:	460d      	mov	r5, r1
 80142e4:	4616      	mov	r6, r2
 80142e6:	f7fe f995 	bl	8012614 <rcl_service_is_valid>
 80142ea:	b300      	cbz	r0, 801432e <rcl_action_send_cancel_response+0x56>
 80142ec:	6820      	ldr	r0, [r4, #0]
 80142ee:	3004      	adds	r0, #4
 80142f0:	f7fe f990 	bl	8012614 <rcl_service_is_valid>
 80142f4:	b1d8      	cbz	r0, 801432e <rcl_action_send_cancel_response+0x56>
 80142f6:	6820      	ldr	r0, [r4, #0]
 80142f8:	3008      	adds	r0, #8
 80142fa:	f7fe f98b 	bl	8012614 <rcl_service_is_valid>
 80142fe:	b1b0      	cbz	r0, 801432e <rcl_action_send_cancel_response+0x56>
 8014300:	6820      	ldr	r0, [r4, #0]
 8014302:	300c      	adds	r0, #12
 8014304:	f7f6 fb4c 	bl	800a9a0 <rcl_publisher_is_valid>
 8014308:	b188      	cbz	r0, 801432e <rcl_action_send_cancel_response+0x56>
 801430a:	6820      	ldr	r0, [r4, #0]
 801430c:	3010      	adds	r0, #16
 801430e:	f7f6 fb47 	bl	800a9a0 <rcl_publisher_is_valid>
 8014312:	b160      	cbz	r0, 801432e <rcl_action_send_cancel_response+0x56>
 8014314:	b19d      	cbz	r5, 801433e <rcl_action_send_cancel_response+0x66>
 8014316:	b196      	cbz	r6, 801433e <rcl_action_send_cancel_response+0x66>
 8014318:	6820      	ldr	r0, [r4, #0]
 801431a:	4632      	mov	r2, r6
 801431c:	4629      	mov	r1, r5
 801431e:	3004      	adds	r0, #4
 8014320:	f7fe f960 	bl	80125e4 <rcl_send_response>
 8014324:	b110      	cbz	r0, 801432c <rcl_action_send_cancel_response+0x54>
 8014326:	2802      	cmp	r0, #2
 8014328:	bf18      	it	ne
 801432a:	2001      	movne	r0, #1
 801432c:	bd70      	pop	{r4, r5, r6, pc}
 801432e:	f7f7 fb17 	bl	800b960 <rcutils_reset_error>
 8014332:	f640 0098 	movw	r0, #2200	@ 0x898
 8014336:	bd70      	pop	{r4, r5, r6, pc}
 8014338:	f640 0098 	movw	r0, #2200	@ 0x898
 801433c:	bd70      	pop	{r4, r5, r6, pc}
 801433e:	200b      	movs	r0, #11
 8014340:	bd70      	pop	{r4, r5, r6, pc}
 8014342:	f640 0098 	movw	r0, #2200	@ 0x898
 8014346:	4770      	bx	lr

08014348 <rcl_action_wait_set_add_action_server>:
 8014348:	2800      	cmp	r0, #0
 801434a:	d04d      	beq.n	80143e8 <rcl_action_wait_set_add_action_server+0xa0>
 801434c:	b570      	push	{r4, r5, r6, lr}
 801434e:	460c      	mov	r4, r1
 8014350:	b159      	cbz	r1, 801436a <rcl_action_wait_set_add_action_server+0x22>
 8014352:	4605      	mov	r5, r0
 8014354:	6808      	ldr	r0, [r1, #0]
 8014356:	b140      	cbz	r0, 801436a <rcl_action_wait_set_add_action_server+0x22>
 8014358:	4616      	mov	r6, r2
 801435a:	f7fe f95b 	bl	8012614 <rcl_service_is_valid>
 801435e:	b120      	cbz	r0, 801436a <rcl_action_wait_set_add_action_server+0x22>
 8014360:	6820      	ldr	r0, [r4, #0]
 8014362:	3004      	adds	r0, #4
 8014364:	f7fe f956 	bl	8012614 <rcl_service_is_valid>
 8014368:	b910      	cbnz	r0, 8014370 <rcl_action_wait_set_add_action_server+0x28>
 801436a:	f640 0098 	movw	r0, #2200	@ 0x898
 801436e:	bd70      	pop	{r4, r5, r6, pc}
 8014370:	6820      	ldr	r0, [r4, #0]
 8014372:	3008      	adds	r0, #8
 8014374:	f7fe f94e 	bl	8012614 <rcl_service_is_valid>
 8014378:	2800      	cmp	r0, #0
 801437a:	d0f6      	beq.n	801436a <rcl_action_wait_set_add_action_server+0x22>
 801437c:	6820      	ldr	r0, [r4, #0]
 801437e:	300c      	adds	r0, #12
 8014380:	f7f6 fb26 	bl	800a9d0 <rcl_publisher_is_valid_except_context>
 8014384:	2800      	cmp	r0, #0
 8014386:	d0f0      	beq.n	801436a <rcl_action_wait_set_add_action_server+0x22>
 8014388:	6820      	ldr	r0, [r4, #0]
 801438a:	3010      	adds	r0, #16
 801438c:	f7f6 fb20 	bl	800a9d0 <rcl_publisher_is_valid_except_context>
 8014390:	2800      	cmp	r0, #0
 8014392:	d0ea      	beq.n	801436a <rcl_action_wait_set_add_action_server+0x22>
 8014394:	6821      	ldr	r1, [r4, #0]
 8014396:	4628      	mov	r0, r5
 8014398:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801439c:	f7ff face 	bl	801393c <rcl_wait_set_add_service>
 80143a0:	2800      	cmp	r0, #0
 80143a2:	d1e4      	bne.n	801436e <rcl_action_wait_set_add_action_server+0x26>
 80143a4:	6821      	ldr	r1, [r4, #0]
 80143a6:	4628      	mov	r0, r5
 80143a8:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80143ac:	3104      	adds	r1, #4
 80143ae:	f7ff fac5 	bl	801393c <rcl_wait_set_add_service>
 80143b2:	2800      	cmp	r0, #0
 80143b4:	d1db      	bne.n	801436e <rcl_action_wait_set_add_action_server+0x26>
 80143b6:	6821      	ldr	r1, [r4, #0]
 80143b8:	4628      	mov	r0, r5
 80143ba:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80143be:	3108      	adds	r1, #8
 80143c0:	f7ff fabc 	bl	801393c <rcl_wait_set_add_service>
 80143c4:	2800      	cmp	r0, #0
 80143c6:	d1d2      	bne.n	801436e <rcl_action_wait_set_add_action_server+0x26>
 80143c8:	6821      	ldr	r1, [r4, #0]
 80143ca:	4628      	mov	r0, r5
 80143cc:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80143d0:	3114      	adds	r1, #20
 80143d2:	f7ff fa57 	bl	8013884 <rcl_wait_set_add_timer>
 80143d6:	2800      	cmp	r0, #0
 80143d8:	d1c9      	bne.n	801436e <rcl_action_wait_set_add_action_server+0x26>
 80143da:	2e00      	cmp	r6, #0
 80143dc:	d0c7      	beq.n	801436e <rcl_action_wait_set_add_action_server+0x26>
 80143de:	6823      	ldr	r3, [r4, #0]
 80143e0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 80143e4:	6033      	str	r3, [r6, #0]
 80143e6:	bd70      	pop	{r4, r5, r6, pc}
 80143e8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80143ec:	4770      	bx	lr
 80143ee:	bf00      	nop

080143f0 <rcl_action_server_wait_set_get_entities_ready>:
 80143f0:	2800      	cmp	r0, #0
 80143f2:	d05a      	beq.n	80144aa <rcl_action_server_wait_set_get_entities_ready+0xba>
 80143f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143f6:	460c      	mov	r4, r1
 80143f8:	b161      	cbz	r1, 8014414 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80143fa:	4605      	mov	r5, r0
 80143fc:	6808      	ldr	r0, [r1, #0]
 80143fe:	b148      	cbz	r0, 8014414 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014400:	4616      	mov	r6, r2
 8014402:	461f      	mov	r7, r3
 8014404:	f7fe f906 	bl	8012614 <rcl_service_is_valid>
 8014408:	b120      	cbz	r0, 8014414 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801440a:	6820      	ldr	r0, [r4, #0]
 801440c:	3004      	adds	r0, #4
 801440e:	f7fe f901 	bl	8012614 <rcl_service_is_valid>
 8014412:	b910      	cbnz	r0, 801441a <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8014414:	f640 0098 	movw	r0, #2200	@ 0x898
 8014418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801441a:	6820      	ldr	r0, [r4, #0]
 801441c:	3008      	adds	r0, #8
 801441e:	f7fe f8f9 	bl	8012614 <rcl_service_is_valid>
 8014422:	2800      	cmp	r0, #0
 8014424:	d0f6      	beq.n	8014414 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014426:	6820      	ldr	r0, [r4, #0]
 8014428:	300c      	adds	r0, #12
 801442a:	f7f6 fad1 	bl	800a9d0 <rcl_publisher_is_valid_except_context>
 801442e:	2800      	cmp	r0, #0
 8014430:	d0f0      	beq.n	8014414 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014432:	6820      	ldr	r0, [r4, #0]
 8014434:	3010      	adds	r0, #16
 8014436:	f7f6 facb 	bl	800a9d0 <rcl_publisher_is_valid_except_context>
 801443a:	2800      	cmp	r0, #0
 801443c:	d0ea      	beq.n	8014414 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801443e:	b3be      	cbz	r6, 80144b0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8014440:	b3b7      	cbz	r7, 80144b0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8014442:	9b06      	ldr	r3, [sp, #24]
 8014444:	b3a3      	cbz	r3, 80144b0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8014446:	9b07      	ldr	r3, [sp, #28]
 8014448:	b393      	cbz	r3, 80144b0 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801444a:	6821      	ldr	r1, [r4, #0]
 801444c:	692a      	ldr	r2, [r5, #16]
 801444e:	6a2c      	ldr	r4, [r5, #32]
 8014450:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 8014454:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8014458:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 801445c:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8014460:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8014464:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8014468:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801446c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8014470:	1a64      	subs	r4, r4, r1
 8014472:	fab4 f484 	clz	r4, r4
 8014476:	0964      	lsrs	r4, r4, #5
 8014478:	7034      	strb	r4, [r6, #0]
 801447a:	1d0c      	adds	r4, r1, #4
 801447c:	1b1b      	subs	r3, r3, r4
 801447e:	fab3 f383 	clz	r3, r3
 8014482:	095b      	lsrs	r3, r3, #5
 8014484:	f101 0408 	add.w	r4, r1, #8
 8014488:	703b      	strb	r3, [r7, #0]
 801448a:	f101 0314 	add.w	r3, r1, #20
 801448e:	1b01      	subs	r1, r0, r4
 8014490:	1ad3      	subs	r3, r2, r3
 8014492:	fab1 f181 	clz	r1, r1
 8014496:	9a06      	ldr	r2, [sp, #24]
 8014498:	0949      	lsrs	r1, r1, #5
 801449a:	7011      	strb	r1, [r2, #0]
 801449c:	fab3 f383 	clz	r3, r3
 80144a0:	9a07      	ldr	r2, [sp, #28]
 80144a2:	095b      	lsrs	r3, r3, #5
 80144a4:	2000      	movs	r0, #0
 80144a6:	7013      	strb	r3, [r2, #0]
 80144a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144aa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80144ae:	4770      	bx	lr
 80144b0:	200b      	movs	r0, #11
 80144b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080144b4 <_execute_event_handler>:
 80144b4:	2002      	movs	r0, #2
 80144b6:	4770      	bx	lr

080144b8 <_cancel_goal_event_handler>:
 80144b8:	2003      	movs	r0, #3
 80144ba:	4770      	bx	lr

080144bc <_succeed_event_handler>:
 80144bc:	2004      	movs	r0, #4
 80144be:	4770      	bx	lr

080144c0 <_abort_event_handler>:
 80144c0:	2006      	movs	r0, #6
 80144c2:	4770      	bx	lr

080144c4 <_canceled_event_handler>:
 80144c4:	2005      	movs	r0, #5
 80144c6:	4770      	bx	lr

080144c8 <rcl_action_transition_goal_state>:
 80144c8:	b2c2      	uxtb	r2, r0
 80144ca:	2a06      	cmp	r2, #6
 80144cc:	d80c      	bhi.n	80144e8 <rcl_action_transition_goal_state+0x20>
 80144ce:	2904      	cmp	r1, #4
 80144d0:	d80a      	bhi.n	80144e8 <rcl_action_transition_goal_state+0x20>
 80144d2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80144d6:	b410      	push	{r4}
 80144d8:	1853      	adds	r3, r2, r1
 80144da:	4c06      	ldr	r4, [pc, #24]	@ (80144f4 <rcl_action_transition_goal_state+0x2c>)
 80144dc:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80144e0:	b123      	cbz	r3, 80144ec <rcl_action_transition_goal_state+0x24>
 80144e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80144e6:	4718      	bx	r3
 80144e8:	2000      	movs	r0, #0
 80144ea:	4770      	bx	lr
 80144ec:	2000      	movs	r0, #0
 80144ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80144f2:	4770      	bx	lr
 80144f4:	08019188 	.word	0x08019188

080144f8 <rcl_action_get_zero_initialized_cancel_response>:
 80144f8:	b510      	push	{r4, lr}
 80144fa:	4c07      	ldr	r4, [pc, #28]	@ (8014518 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 80144fc:	4686      	mov	lr, r0
 80144fe:	4684      	mov	ip, r0
 8014500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014502:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014506:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014508:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801450c:	6823      	ldr	r3, [r4, #0]
 801450e:	f8cc 3000 	str.w	r3, [ip]
 8014512:	4670      	mov	r0, lr
 8014514:	bd10      	pop	{r4, pc}
 8014516:	bf00      	nop
 8014518:	08019214 	.word	0x08019214

0801451c <rclc_action_send_result_request>:
 801451c:	b1d0      	cbz	r0, 8014554 <rclc_action_send_result_request+0x38>
 801451e:	b500      	push	{lr}
 8014520:	4684      	mov	ip, r0
 8014522:	b087      	sub	sp, #28
 8014524:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8014528:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801452c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8014530:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8014534:	f10d 0e08 	add.w	lr, sp, #8
 8014538:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801453c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8014540:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8014544:	a902      	add	r1, sp, #8
 8014546:	3010      	adds	r0, #16
 8014548:	f7ff fbda 	bl	8013d00 <rcl_action_send_result_request>
 801454c:	b920      	cbnz	r0, 8014558 <rclc_action_send_result_request+0x3c>
 801454e:	b007      	add	sp, #28
 8014550:	f85d fb04 	ldr.w	pc, [sp], #4
 8014554:	200b      	movs	r0, #11
 8014556:	4770      	bx	lr
 8014558:	9001      	str	r0, [sp, #4]
 801455a:	f7f7 fa01 	bl	800b960 <rcutils_reset_error>
 801455e:	9801      	ldr	r0, [sp, #4]
 8014560:	b007      	add	sp, #28
 8014562:	f85d fb04 	ldr.w	pc, [sp], #4
 8014566:	bf00      	nop

08014568 <rclc_action_take_goal_handle>:
 8014568:	b160      	cbz	r0, 8014584 <rclc_action_take_goal_handle+0x1c>
 801456a:	6883      	ldr	r3, [r0, #8]
 801456c:	b143      	cbz	r3, 8014580 <rclc_action_take_goal_handle+0x18>
 801456e:	6819      	ldr	r1, [r3, #0]
 8014570:	6081      	str	r1, [r0, #8]
 8014572:	2200      	movs	r2, #0
 8014574:	721a      	strb	r2, [r3, #8]
 8014576:	68c1      	ldr	r1, [r0, #12]
 8014578:	6019      	str	r1, [r3, #0]
 801457a:	621a      	str	r2, [r3, #32]
 801457c:	849a      	strh	r2, [r3, #36]	@ 0x24
 801457e:	60c3      	str	r3, [r0, #12]
 8014580:	4618      	mov	r0, r3
 8014582:	4770      	bx	lr
 8014584:	4603      	mov	r3, r0
 8014586:	e7fb      	b.n	8014580 <rclc_action_take_goal_handle+0x18>

08014588 <rclc_action_remove_used_goal_handle>:
 8014588:	b180      	cbz	r0, 80145ac <rclc_action_remove_used_goal_handle+0x24>
 801458a:	b179      	cbz	r1, 80145ac <rclc_action_remove_used_goal_handle+0x24>
 801458c:	68c3      	ldr	r3, [r0, #12]
 801458e:	4299      	cmp	r1, r3
 8014590:	d00d      	beq.n	80145ae <rclc_action_remove_used_goal_handle+0x26>
 8014592:	b12b      	cbz	r3, 80145a0 <rclc_action_remove_used_goal_handle+0x18>
 8014594:	681a      	ldr	r2, [r3, #0]
 8014596:	4291      	cmp	r1, r2
 8014598:	d003      	beq.n	80145a2 <rclc_action_remove_used_goal_handle+0x1a>
 801459a:	4613      	mov	r3, r2
 801459c:	2b00      	cmp	r3, #0
 801459e:	d1f9      	bne.n	8014594 <rclc_action_remove_used_goal_handle+0xc>
 80145a0:	4770      	bx	lr
 80145a2:	680a      	ldr	r2, [r1, #0]
 80145a4:	601a      	str	r2, [r3, #0]
 80145a6:	6883      	ldr	r3, [r0, #8]
 80145a8:	600b      	str	r3, [r1, #0]
 80145aa:	6081      	str	r1, [r0, #8]
 80145ac:	4770      	bx	lr
 80145ae:	680b      	ldr	r3, [r1, #0]
 80145b0:	60c3      	str	r3, [r0, #12]
 80145b2:	e7f8      	b.n	80145a6 <rclc_action_remove_used_goal_handle+0x1e>

080145b4 <rclc_action_find_goal_handle_by_uuid>:
 80145b4:	b538      	push	{r3, r4, r5, lr}
 80145b6:	b180      	cbz	r0, 80145da <rclc_action_find_goal_handle_by_uuid+0x26>
 80145b8:	460d      	mov	r5, r1
 80145ba:	b181      	cbz	r1, 80145de <rclc_action_find_goal_handle_by_uuid+0x2a>
 80145bc:	68c4      	ldr	r4, [r0, #12]
 80145be:	b914      	cbnz	r4, 80145c6 <rclc_action_find_goal_handle_by_uuid+0x12>
 80145c0:	e009      	b.n	80145d6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80145c2:	6824      	ldr	r4, [r4, #0]
 80145c4:	b13c      	cbz	r4, 80145d6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80145c6:	f104 0009 	add.w	r0, r4, #9
 80145ca:	2210      	movs	r2, #16
 80145cc:	4629      	mov	r1, r5
 80145ce:	f003 fa09 	bl	80179e4 <memcmp>
 80145d2:	2800      	cmp	r0, #0
 80145d4:	d1f5      	bne.n	80145c2 <rclc_action_find_goal_handle_by_uuid+0xe>
 80145d6:	4620      	mov	r0, r4
 80145d8:	bd38      	pop	{r3, r4, r5, pc}
 80145da:	4604      	mov	r4, r0
 80145dc:	e7fb      	b.n	80145d6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80145de:	460c      	mov	r4, r1
 80145e0:	e7f9      	b.n	80145d6 <rclc_action_find_goal_handle_by_uuid+0x22>
 80145e2:	bf00      	nop

080145e4 <rclc_action_find_first_handle_by_status>:
 80145e4:	b140      	cbz	r0, 80145f8 <rclc_action_find_first_handle_by_status+0x14>
 80145e6:	68c0      	ldr	r0, [r0, #12]
 80145e8:	b910      	cbnz	r0, 80145f0 <rclc_action_find_first_handle_by_status+0xc>
 80145ea:	e005      	b.n	80145f8 <rclc_action_find_first_handle_by_status+0x14>
 80145ec:	6800      	ldr	r0, [r0, #0]
 80145ee:	b118      	cbz	r0, 80145f8 <rclc_action_find_first_handle_by_status+0x14>
 80145f0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80145f4:	428b      	cmp	r3, r1
 80145f6:	d1f9      	bne.n	80145ec <rclc_action_find_first_handle_by_status+0x8>
 80145f8:	4770      	bx	lr
 80145fa:	bf00      	nop

080145fc <rclc_action_find_first_terminated_handle>:
 80145fc:	b140      	cbz	r0, 8014610 <rclc_action_find_first_terminated_handle+0x14>
 80145fe:	68c0      	ldr	r0, [r0, #12]
 8014600:	b910      	cbnz	r0, 8014608 <rclc_action_find_first_terminated_handle+0xc>
 8014602:	e005      	b.n	8014610 <rclc_action_find_first_terminated_handle+0x14>
 8014604:	6800      	ldr	r0, [r0, #0]
 8014606:	b118      	cbz	r0, 8014610 <rclc_action_find_first_terminated_handle+0x14>
 8014608:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801460c:	2b03      	cmp	r3, #3
 801460e:	ddf9      	ble.n	8014604 <rclc_action_find_first_terminated_handle+0x8>
 8014610:	4770      	bx	lr
 8014612:	bf00      	nop

08014614 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8014614:	b170      	cbz	r0, 8014634 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8014616:	68c0      	ldr	r0, [r0, #12]
 8014618:	b160      	cbz	r0, 8014634 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801461a:	b410      	push	{r4}
 801461c:	e001      	b.n	8014622 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801461e:	6800      	ldr	r0, [r0, #0]
 8014620:	b128      	cbz	r0, 801462e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8014622:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8014626:	4299      	cmp	r1, r3
 8014628:	bf08      	it	eq
 801462a:	4294      	cmpeq	r4, r2
 801462c:	d1f7      	bne.n	801461e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801462e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014632:	4770      	bx	lr
 8014634:	4770      	bx	lr
 8014636:	bf00      	nop

08014638 <rclc_action_find_handle_by_result_request_sequence_number>:
 8014638:	b170      	cbz	r0, 8014658 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801463a:	68c0      	ldr	r0, [r0, #12]
 801463c:	b160      	cbz	r0, 8014658 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801463e:	b410      	push	{r4}
 8014640:	e001      	b.n	8014646 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8014642:	6800      	ldr	r0, [r0, #0]
 8014644:	b128      	cbz	r0, 8014652 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8014646:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801464a:	4299      	cmp	r1, r3
 801464c:	bf08      	it	eq
 801464e:	4294      	cmpeq	r4, r2
 8014650:	d1f7      	bne.n	8014642 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8014652:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014656:	4770      	bx	lr
 8014658:	4770      	bx	lr
 801465a:	bf00      	nop

0801465c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801465c:	b170      	cbz	r0, 801467c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801465e:	68c0      	ldr	r0, [r0, #12]
 8014660:	b160      	cbz	r0, 801467c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8014662:	b410      	push	{r4}
 8014664:	e001      	b.n	801466a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8014666:	6800      	ldr	r0, [r0, #0]
 8014668:	b128      	cbz	r0, 8014676 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801466a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801466e:	4299      	cmp	r1, r3
 8014670:	bf08      	it	eq
 8014672:	4294      	cmpeq	r4, r2
 8014674:	d1f7      	bne.n	8014666 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8014676:	f85d 4b04 	ldr.w	r4, [sp], #4
 801467a:	4770      	bx	lr
 801467c:	4770      	bx	lr
 801467e:	bf00      	nop

08014680 <rclc_action_find_first_handle_with_goal_response>:
 8014680:	b140      	cbz	r0, 8014694 <rclc_action_find_first_handle_with_goal_response+0x14>
 8014682:	68c0      	ldr	r0, [r0, #12]
 8014684:	b910      	cbnz	r0, 801468c <rclc_action_find_first_handle_with_goal_response+0xc>
 8014686:	e005      	b.n	8014694 <rclc_action_find_first_handle_with_goal_response+0x14>
 8014688:	6800      	ldr	r0, [r0, #0]
 801468a:	b118      	cbz	r0, 8014694 <rclc_action_find_first_handle_with_goal_response+0x14>
 801468c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8014690:	2b00      	cmp	r3, #0
 8014692:	d0f9      	beq.n	8014688 <rclc_action_find_first_handle_with_goal_response+0x8>
 8014694:	4770      	bx	lr
 8014696:	bf00      	nop

08014698 <rclc_action_find_first_handle_with_result_response>:
 8014698:	b140      	cbz	r0, 80146ac <rclc_action_find_first_handle_with_result_response+0x14>
 801469a:	68c0      	ldr	r0, [r0, #12]
 801469c:	b910      	cbnz	r0, 80146a4 <rclc_action_find_first_handle_with_result_response+0xc>
 801469e:	e005      	b.n	80146ac <rclc_action_find_first_handle_with_result_response+0x14>
 80146a0:	6800      	ldr	r0, [r0, #0]
 80146a2:	b118      	cbz	r0, 80146ac <rclc_action_find_first_handle_with_result_response+0x14>
 80146a4:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d0f9      	beq.n	80146a0 <rclc_action_find_first_handle_with_result_response+0x8>
 80146ac:	4770      	bx	lr
 80146ae:	bf00      	nop

080146b0 <rclc_action_server_response_goal_request>:
 80146b0:	b198      	cbz	r0, 80146da <rclc_action_server_response_goal_request+0x2a>
 80146b2:	b510      	push	{r4, lr}
 80146b4:	6844      	ldr	r4, [r0, #4]
 80146b6:	b086      	sub	sp, #24
 80146b8:	2200      	movs	r2, #0
 80146ba:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80146be:	460b      	mov	r3, r1
 80146c0:	9205      	str	r2, [sp, #20]
 80146c2:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80146c6:	aa03      	add	r2, sp, #12
 80146c8:	f104 0010 	add.w	r0, r4, #16
 80146cc:	f88d 300c 	strb.w	r3, [sp, #12]
 80146d0:	f7ff fd4a 	bl	8014168 <rcl_action_send_goal_response>
 80146d4:	b918      	cbnz	r0, 80146de <rclc_action_server_response_goal_request+0x2e>
 80146d6:	b006      	add	sp, #24
 80146d8:	bd10      	pop	{r4, pc}
 80146da:	200b      	movs	r0, #11
 80146dc:	4770      	bx	lr
 80146de:	9001      	str	r0, [sp, #4]
 80146e0:	f7f7 f93e 	bl	800b960 <rcutils_reset_error>
 80146e4:	9801      	ldr	r0, [sp, #4]
 80146e6:	b006      	add	sp, #24
 80146e8:	bd10      	pop	{r4, pc}
 80146ea:	bf00      	nop
 80146ec:	0000      	movs	r0, r0
	...

080146f0 <rclc_action_server_goal_cancel_accept>:
 80146f0:	b310      	cbz	r0, 8014738 <rclc_action_server_goal_cancel_accept+0x48>
 80146f2:	b510      	push	{r4, lr}
 80146f4:	b090      	sub	sp, #64	@ 0x40
 80146f6:	4604      	mov	r4, r0
 80146f8:	a806      	add	r0, sp, #24
 80146fa:	f7ff fefd 	bl	80144f8 <rcl_action_get_zero_initialized_cancel_response>
 80146fe:	2300      	movs	r3, #0
 8014700:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8014704:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8014708:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801470c:	f88d 3018 	strb.w	r3, [sp, #24]
 8014710:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8014714:	f8cd d01c 	str.w	sp, [sp, #28]
 8014718:	46ec      	mov	ip, sp
 801471a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801471e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8014740 <rclc_action_server_goal_cancel_accept+0x50>
 8014722:	6860      	ldr	r0, [r4, #4]
 8014724:	aa06      	add	r2, sp, #24
 8014726:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801472a:	3010      	adds	r0, #16
 801472c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014730:	f7ff fdd2 	bl	80142d8 <rcl_action_send_cancel_response>
 8014734:	b010      	add	sp, #64	@ 0x40
 8014736:	bd10      	pop	{r4, pc}
 8014738:	200b      	movs	r0, #11
 801473a:	4770      	bx	lr
 801473c:	f3af 8000 	nop.w
 8014740:	00000001 	.word	0x00000001
 8014744:	00000001 	.word	0x00000001

08014748 <rclc_action_server_goal_cancel_reject>:
 8014748:	b082      	sub	sp, #8
 801474a:	b530      	push	{r4, r5, lr}
 801474c:	b08b      	sub	sp, #44	@ 0x2c
 801474e:	ac0e      	add	r4, sp, #56	@ 0x38
 8014750:	e884 000c 	stmia.w	r4, {r2, r3}
 8014754:	b188      	cbz	r0, 801477a <rclc_action_server_goal_cancel_reject+0x32>
 8014756:	4604      	mov	r4, r0
 8014758:	a801      	add	r0, sp, #4
 801475a:	460d      	mov	r5, r1
 801475c:	f7ff fecc 	bl	80144f8 <rcl_action_get_zero_initialized_cancel_response>
 8014760:	aa01      	add	r2, sp, #4
 8014762:	a90e      	add	r1, sp, #56	@ 0x38
 8014764:	f104 0010 	add.w	r0, r4, #16
 8014768:	f88d 5004 	strb.w	r5, [sp, #4]
 801476c:	f7ff fdb4 	bl	80142d8 <rcl_action_send_cancel_response>
 8014770:	b00b      	add	sp, #44	@ 0x2c
 8014772:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014776:	b002      	add	sp, #8
 8014778:	4770      	bx	lr
 801477a:	200b      	movs	r0, #11
 801477c:	b00b      	add	sp, #44	@ 0x2c
 801477e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014782:	b002      	add	sp, #8
 8014784:	4770      	bx	lr
 8014786:	bf00      	nop

08014788 <__atomic_load_8>:
 8014788:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801478c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8014790:	4a15      	ldr	r2, [pc, #84]	@ (80147e8 <__atomic_load_8+0x60>)
 8014792:	4b16      	ldr	r3, [pc, #88]	@ (80147ec <__atomic_load_8+0x64>)
 8014794:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8014798:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801479c:	fb02 f101 	mul.w	r1, r2, r1
 80147a0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80147a4:	fba3 2301 	umull	r2, r3, r3, r1
 80147a8:	091b      	lsrs	r3, r3, #4
 80147aa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80147ae:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80147b2:	b4d0      	push	{r4, r6, r7}
 80147b4:	4c0e      	ldr	r4, [pc, #56]	@ (80147f0 <__atomic_load_8+0x68>)
 80147b6:	1ac9      	subs	r1, r1, r3
 80147b8:	1862      	adds	r2, r4, r1
 80147ba:	f04f 0c01 	mov.w	ip, #1
 80147be:	e8d2 3f4f 	ldrexb	r3, [r2]
 80147c2:	e8c2 cf46 	strexb	r6, ip, [r2]
 80147c6:	2e00      	cmp	r6, #0
 80147c8:	d1f9      	bne.n	80147be <__atomic_load_8+0x36>
 80147ca:	f3bf 8f5b 	dmb	ish
 80147ce:	b2db      	uxtb	r3, r3
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d1f4      	bne.n	80147be <__atomic_load_8+0x36>
 80147d4:	e9d0 6700 	ldrd	r6, r7, [r0]
 80147d8:	f3bf 8f5b 	dmb	ish
 80147dc:	5463      	strb	r3, [r4, r1]
 80147de:	4630      	mov	r0, r6
 80147e0:	4639      	mov	r1, r7
 80147e2:	bcd0      	pop	{r4, r6, r7}
 80147e4:	4770      	bx	lr
 80147e6:	bf00      	nop
 80147e8:	27d4eb2d 	.word	0x27d4eb2d
 80147ec:	b21642c9 	.word	0xb21642c9
 80147f0:	2000ac20 	.word	0x2000ac20

080147f4 <__atomic_store_8>:
 80147f4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80147f8:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80147fc:	b570      	push	{r4, r5, r6, lr}
 80147fe:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8014802:	4c14      	ldr	r4, [pc, #80]	@ (8014854 <__atomic_store_8+0x60>)
 8014804:	4d14      	ldr	r5, [pc, #80]	@ (8014858 <__atomic_store_8+0x64>)
 8014806:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801480a:	fb04 f101 	mul.w	r1, r4, r1
 801480e:	4c13      	ldr	r4, [pc, #76]	@ (801485c <__atomic_store_8+0x68>)
 8014810:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8014814:	fba4 4e01 	umull	r4, lr, r4, r1
 8014818:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 801481c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8014820:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8014824:	eba1 0e0e 	sub.w	lr, r1, lr
 8014828:	eb05 0c0e 	add.w	ip, r5, lr
 801482c:	f04f 0401 	mov.w	r4, #1
 8014830:	e8dc 1f4f 	ldrexb	r1, [ip]
 8014834:	e8cc 4f46 	strexb	r6, r4, [ip]
 8014838:	2e00      	cmp	r6, #0
 801483a:	d1f9      	bne.n	8014830 <__atomic_store_8+0x3c>
 801483c:	f3bf 8f5b 	dmb	ish
 8014840:	b2c9      	uxtb	r1, r1
 8014842:	2900      	cmp	r1, #0
 8014844:	d1f4      	bne.n	8014830 <__atomic_store_8+0x3c>
 8014846:	e9c0 2300 	strd	r2, r3, [r0]
 801484a:	f3bf 8f5b 	dmb	ish
 801484e:	f805 100e 	strb.w	r1, [r5, lr]
 8014852:	bd70      	pop	{r4, r5, r6, pc}
 8014854:	27d4eb2d 	.word	0x27d4eb2d
 8014858:	2000ac20 	.word	0x2000ac20
 801485c:	b21642c9 	.word	0xb21642c9

08014860 <__atomic_exchange_8>:
 8014860:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8014864:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8014868:	4916      	ldr	r1, [pc, #88]	@ (80148c4 <__atomic_exchange_8+0x64>)
 801486a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801486e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8014872:	fb01 fc0c 	mul.w	ip, r1, ip
 8014876:	4914      	ldr	r1, [pc, #80]	@ (80148c8 <__atomic_exchange_8+0x68>)
 8014878:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801487c:	b570      	push	{r4, r5, r6, lr}
 801487e:	4605      	mov	r5, r0
 8014880:	fba1 010c 	umull	r0, r1, r1, ip
 8014884:	0909      	lsrs	r1, r1, #4
 8014886:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 801488a:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 801488e:	4e0f      	ldr	r6, [pc, #60]	@ (80148cc <__atomic_exchange_8+0x6c>)
 8014890:	ebac 0c01 	sub.w	ip, ip, r1
 8014894:	eb06 010c 	add.w	r1, r6, ip
 8014898:	f04f 0e01 	mov.w	lr, #1
 801489c:	e8d1 4f4f 	ldrexb	r4, [r1]
 80148a0:	e8c1 ef40 	strexb	r0, lr, [r1]
 80148a4:	2800      	cmp	r0, #0
 80148a6:	d1f9      	bne.n	801489c <__atomic_exchange_8+0x3c>
 80148a8:	f3bf 8f5b 	dmb	ish
 80148ac:	b2e4      	uxtb	r4, r4
 80148ae:	2c00      	cmp	r4, #0
 80148b0:	d1f4      	bne.n	801489c <__atomic_exchange_8+0x3c>
 80148b2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80148b6:	e9c5 2300 	strd	r2, r3, [r5]
 80148ba:	f3bf 8f5b 	dmb	ish
 80148be:	f806 400c 	strb.w	r4, [r6, ip]
 80148c2:	bd70      	pop	{r4, r5, r6, pc}
 80148c4:	27d4eb2d 	.word	0x27d4eb2d
 80148c8:	b21642c9 	.word	0xb21642c9
 80148cc:	2000ac20 	.word	0x2000ac20

080148d0 <rcutils_get_env>:
 80148d0:	b168      	cbz	r0, 80148ee <rcutils_get_env+0x1e>
 80148d2:	b510      	push	{r4, lr}
 80148d4:	460c      	mov	r4, r1
 80148d6:	b129      	cbz	r1, 80148e4 <rcutils_get_env+0x14>
 80148d8:	f002 fce0 	bl	801729c <getenv>
 80148dc:	b120      	cbz	r0, 80148e8 <rcutils_get_env+0x18>
 80148de:	6020      	str	r0, [r4, #0]
 80148e0:	2000      	movs	r0, #0
 80148e2:	bd10      	pop	{r4, pc}
 80148e4:	4803      	ldr	r0, [pc, #12]	@ (80148f4 <rcutils_get_env+0x24>)
 80148e6:	bd10      	pop	{r4, pc}
 80148e8:	4b03      	ldr	r3, [pc, #12]	@ (80148f8 <rcutils_get_env+0x28>)
 80148ea:	6023      	str	r3, [r4, #0]
 80148ec:	bd10      	pop	{r4, pc}
 80148ee:	4803      	ldr	r0, [pc, #12]	@ (80148fc <rcutils_get_env+0x2c>)
 80148f0:	4770      	bx	lr
 80148f2:	bf00      	nop
 80148f4:	08019254 	.word	0x08019254
 80148f8:	08019378 	.word	0x08019378
 80148fc:	08019238 	.word	0x08019238

08014900 <rcutils_is_directory>:
 8014900:	2000      	movs	r0, #0
 8014902:	4770      	bx	lr

08014904 <rcutils_join_path>:
 8014904:	b082      	sub	sp, #8
 8014906:	e88d 000c 	stmia.w	sp, {r2, r3}
 801490a:	2000      	movs	r0, #0
 801490c:	b002      	add	sp, #8
 801490e:	4770      	bx	lr

08014910 <rcutils_to_native_path>:
 8014910:	b084      	sub	sp, #16
 8014912:	a801      	add	r0, sp, #4
 8014914:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8014918:	b004      	add	sp, #16
 801491a:	2000      	movs	r0, #0
 801491c:	4770      	bx	lr
 801491e:	bf00      	nop

08014920 <rcutils_format_string_limit>:
 8014920:	b40f      	push	{r0, r1, r2, r3}
 8014922:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014924:	b083      	sub	sp, #12
 8014926:	ac08      	add	r4, sp, #32
 8014928:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801492a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801492e:	b34e      	cbz	r6, 8014984 <rcutils_format_string_limit+0x64>
 8014930:	a808      	add	r0, sp, #32
 8014932:	f7f6 ffef 	bl	800b914 <rcutils_allocator_is_valid>
 8014936:	b328      	cbz	r0, 8014984 <rcutils_format_string_limit+0x64>
 8014938:	2100      	movs	r1, #0
 801493a:	ab0f      	add	r3, sp, #60	@ 0x3c
 801493c:	4632      	mov	r2, r6
 801493e:	4608      	mov	r0, r1
 8014940:	e9cd 3300 	strd	r3, r3, [sp]
 8014944:	f000 f8f4 	bl	8014b30 <rcutils_vsnprintf>
 8014948:	1c43      	adds	r3, r0, #1
 801494a:	4605      	mov	r5, r0
 801494c:	d01a      	beq.n	8014984 <rcutils_format_string_limit+0x64>
 801494e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014950:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014952:	1c47      	adds	r7, r0, #1
 8014954:	429f      	cmp	r7, r3
 8014956:	bf84      	itt	hi
 8014958:	461f      	movhi	r7, r3
 801495a:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 801495e:	4638      	mov	r0, r7
 8014960:	9b08      	ldr	r3, [sp, #32]
 8014962:	4798      	blx	r3
 8014964:	4604      	mov	r4, r0
 8014966:	b168      	cbz	r0, 8014984 <rcutils_format_string_limit+0x64>
 8014968:	9b01      	ldr	r3, [sp, #4]
 801496a:	4632      	mov	r2, r6
 801496c:	4639      	mov	r1, r7
 801496e:	f000 f8df 	bl	8014b30 <rcutils_vsnprintf>
 8014972:	2800      	cmp	r0, #0
 8014974:	db02      	blt.n	801497c <rcutils_format_string_limit+0x5c>
 8014976:	2300      	movs	r3, #0
 8014978:	5563      	strb	r3, [r4, r5]
 801497a:	e004      	b.n	8014986 <rcutils_format_string_limit+0x66>
 801497c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801497e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014980:	4620      	mov	r0, r4
 8014982:	4798      	blx	r3
 8014984:	2400      	movs	r4, #0
 8014986:	4620      	mov	r0, r4
 8014988:	b003      	add	sp, #12
 801498a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801498e:	b004      	add	sp, #16
 8014990:	4770      	bx	lr
 8014992:	bf00      	nop

08014994 <rcutils_repl_str>:
 8014994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014998:	ed2d 8b02 	vpush	{d8}
 801499c:	b087      	sub	sp, #28
 801499e:	4680      	mov	r8, r0
 80149a0:	4608      	mov	r0, r1
 80149a2:	f8cd 8004 	str.w	r8, [sp, #4]
 80149a6:	ee08 2a10 	vmov	s16, r2
 80149aa:	468a      	mov	sl, r1
 80149ac:	4699      	mov	r9, r3
 80149ae:	f7eb fc41 	bl	8000234 <strlen>
 80149b2:	2600      	movs	r6, #0
 80149b4:	4647      	mov	r7, r8
 80149b6:	9002      	str	r0, [sp, #8]
 80149b8:	46b3      	mov	fp, r6
 80149ba:	2510      	movs	r5, #16
 80149bc:	46b0      	mov	r8, r6
 80149be:	e01d      	b.n	80149fc <rcutils_repl_str+0x68>
 80149c0:	f10b 0b01 	add.w	fp, fp, #1
 80149c4:	455e      	cmp	r6, fp
 80149c6:	d211      	bcs.n	80149ec <rcutils_repl_str+0x58>
 80149c8:	442e      	add	r6, r5
 80149ca:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80149ce:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80149d2:	00b1      	lsls	r1, r6, #2
 80149d4:	4798      	blx	r3
 80149d6:	2800      	cmp	r0, #0
 80149d8:	f000 8088 	beq.w	8014aec <rcutils_repl_str+0x158>
 80149dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80149e0:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 80149e4:	4680      	mov	r8, r0
 80149e6:	bf28      	it	cs
 80149e8:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 80149ec:	9a01      	ldr	r2, [sp, #4]
 80149ee:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 80149f2:	1aa2      	subs	r2, r4, r2
 80149f4:	f843 2c04 	str.w	r2, [r3, #-4]
 80149f8:	9b02      	ldr	r3, [sp, #8]
 80149fa:	18e7      	adds	r7, r4, r3
 80149fc:	4651      	mov	r1, sl
 80149fe:	4638      	mov	r0, r7
 8014a00:	f003 f841 	bl	8017a86 <strstr>
 8014a04:	4604      	mov	r4, r0
 8014a06:	4640      	mov	r0, r8
 8014a08:	2c00      	cmp	r4, #0
 8014a0a:	d1d9      	bne.n	80149c0 <rcutils_repl_str+0x2c>
 8014a0c:	46b8      	mov	r8, r7
 8014a0e:	4607      	mov	r7, r0
 8014a10:	4640      	mov	r0, r8
 8014a12:	f7eb fc0f 	bl	8000234 <strlen>
 8014a16:	9b01      	ldr	r3, [sp, #4]
 8014a18:	eba8 0303 	sub.w	r3, r8, r3
 8014a1c:	181c      	adds	r4, r3, r0
 8014a1e:	9404      	str	r4, [sp, #16]
 8014a20:	f1bb 0f00 	cmp.w	fp, #0
 8014a24:	d04a      	beq.n	8014abc <rcutils_repl_str+0x128>
 8014a26:	ee18 0a10 	vmov	r0, s16
 8014a2a:	f7eb fc03 	bl	8000234 <strlen>
 8014a2e:	9b02      	ldr	r3, [sp, #8]
 8014a30:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014a34:	1ac3      	subs	r3, r0, r3
 8014a36:	fb0b 4303 	mla	r3, fp, r3, r4
 8014a3a:	461a      	mov	r2, r3
 8014a3c:	9305      	str	r3, [sp, #20]
 8014a3e:	4606      	mov	r6, r0
 8014a40:	f8d9 3000 	ldr.w	r3, [r9]
 8014a44:	1c50      	adds	r0, r2, #1
 8014a46:	4798      	blx	r3
 8014a48:	9003      	str	r0, [sp, #12]
 8014a4a:	2800      	cmp	r0, #0
 8014a4c:	d04f      	beq.n	8014aee <rcutils_repl_str+0x15a>
 8014a4e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014a52:	683a      	ldr	r2, [r7, #0]
 8014a54:	4641      	mov	r1, r8
 8014a56:	f003 f8b8 	bl	8017bca <memcpy>
 8014a5a:	683d      	ldr	r5, [r7, #0]
 8014a5c:	9b03      	ldr	r3, [sp, #12]
 8014a5e:	9701      	str	r7, [sp, #4]
 8014a60:	46ba      	mov	sl, r7
 8014a62:	441d      	add	r5, r3
 8014a64:	9f02      	ldr	r7, [sp, #8]
 8014a66:	f8cd 9008 	str.w	r9, [sp, #8]
 8014a6a:	2401      	movs	r4, #1
 8014a6c:	46d1      	mov	r9, sl
 8014a6e:	ee18 aa10 	vmov	sl, s16
 8014a72:	e00a      	b.n	8014a8a <rcutils_repl_str+0xf6>
 8014a74:	f8d9 5000 	ldr.w	r5, [r9]
 8014a78:	1aaa      	subs	r2, r5, r2
 8014a7a:	1885      	adds	r5, r0, r2
 8014a7c:	f003 f8a5 	bl	8017bca <memcpy>
 8014a80:	45a3      	cmp	fp, r4
 8014a82:	f104 0201 	add.w	r2, r4, #1
 8014a86:	d935      	bls.n	8014af4 <rcutils_repl_str+0x160>
 8014a88:	4614      	mov	r4, r2
 8014a8a:	4632      	mov	r2, r6
 8014a8c:	4651      	mov	r1, sl
 8014a8e:	4628      	mov	r0, r5
 8014a90:	f003 f89b 	bl	8017bca <memcpy>
 8014a94:	f859 2b04 	ldr.w	r2, [r9], #4
 8014a98:	45a3      	cmp	fp, r4
 8014a9a:	443a      	add	r2, r7
 8014a9c:	eb05 0006 	add.w	r0, r5, r6
 8014aa0:	eb08 0102 	add.w	r1, r8, r2
 8014aa4:	d1e6      	bne.n	8014a74 <rcutils_repl_str+0xe0>
 8014aa6:	9b04      	ldr	r3, [sp, #16]
 8014aa8:	1a9a      	subs	r2, r3, r2
 8014aaa:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8014aae:	f003 f88c 	bl	8017bca <memcpy>
 8014ab2:	9a03      	ldr	r2, [sp, #12]
 8014ab4:	9905      	ldr	r1, [sp, #20]
 8014ab6:	2300      	movs	r3, #0
 8014ab8:	5453      	strb	r3, [r2, r1]
 8014aba:	e00b      	b.n	8014ad4 <rcutils_repl_str+0x140>
 8014abc:	4620      	mov	r0, r4
 8014abe:	f8d9 3000 	ldr.w	r3, [r9]
 8014ac2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014ac6:	3001      	adds	r0, #1
 8014ac8:	4798      	blx	r3
 8014aca:	9003      	str	r0, [sp, #12]
 8014acc:	b110      	cbz	r0, 8014ad4 <rcutils_repl_str+0x140>
 8014ace:	9901      	ldr	r1, [sp, #4]
 8014ad0:	f003 f873 	bl	8017bba <strcpy>
 8014ad4:	4638      	mov	r0, r7
 8014ad6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014ada:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014ade:	4798      	blx	r3
 8014ae0:	9803      	ldr	r0, [sp, #12]
 8014ae2:	b007      	add	sp, #28
 8014ae4:	ecbd 8b02 	vpop	{d8}
 8014ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014aec:	4647      	mov	r7, r8
 8014aee:	2300      	movs	r3, #0
 8014af0:	9303      	str	r3, [sp, #12]
 8014af2:	e7ef      	b.n	8014ad4 <rcutils_repl_str+0x140>
 8014af4:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8014af8:	e7db      	b.n	8014ab2 <rcutils_repl_str+0x11e>
 8014afa:	bf00      	nop

08014afc <rcutils_snprintf>:
 8014afc:	b40c      	push	{r2, r3}
 8014afe:	b530      	push	{r4, r5, lr}
 8014b00:	b083      	sub	sp, #12
 8014b02:	ab06      	add	r3, sp, #24
 8014b04:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b08:	9301      	str	r3, [sp, #4]
 8014b0a:	b152      	cbz	r2, 8014b22 <rcutils_snprintf+0x26>
 8014b0c:	b138      	cbz	r0, 8014b1e <rcutils_snprintf+0x22>
 8014b0e:	b141      	cbz	r1, 8014b22 <rcutils_snprintf+0x26>
 8014b10:	f002 ff5a 	bl	80179c8 <vsniprintf>
 8014b14:	b003      	add	sp, #12
 8014b16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014b1a:	b002      	add	sp, #8
 8014b1c:	4770      	bx	lr
 8014b1e:	2900      	cmp	r1, #0
 8014b20:	d0f6      	beq.n	8014b10 <rcutils_snprintf+0x14>
 8014b22:	f003 f81d 	bl	8017b60 <__errno>
 8014b26:	2316      	movs	r3, #22
 8014b28:	6003      	str	r3, [r0, #0]
 8014b2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014b2e:	e7f1      	b.n	8014b14 <rcutils_snprintf+0x18>

08014b30 <rcutils_vsnprintf>:
 8014b30:	b570      	push	{r4, r5, r6, lr}
 8014b32:	b13a      	cbz	r2, 8014b44 <rcutils_vsnprintf+0x14>
 8014b34:	b120      	cbz	r0, 8014b40 <rcutils_vsnprintf+0x10>
 8014b36:	b129      	cbz	r1, 8014b44 <rcutils_vsnprintf+0x14>
 8014b38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014b3c:	f002 bf44 	b.w	80179c8 <vsniprintf>
 8014b40:	2900      	cmp	r1, #0
 8014b42:	d0f9      	beq.n	8014b38 <rcutils_vsnprintf+0x8>
 8014b44:	f003 f80c 	bl	8017b60 <__errno>
 8014b48:	2316      	movs	r3, #22
 8014b4a:	6003      	str	r3, [r0, #0]
 8014b4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014b50:	bd70      	pop	{r4, r5, r6, pc}
 8014b52:	bf00      	nop

08014b54 <rcutils_strdup>:
 8014b54:	b084      	sub	sp, #16
 8014b56:	b570      	push	{r4, r5, r6, lr}
 8014b58:	b082      	sub	sp, #8
 8014b5a:	ac07      	add	r4, sp, #28
 8014b5c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8014b60:	4605      	mov	r5, r0
 8014b62:	b1b0      	cbz	r0, 8014b92 <rcutils_strdup+0x3e>
 8014b64:	f7eb fb66 	bl	8000234 <strlen>
 8014b68:	1c42      	adds	r2, r0, #1
 8014b6a:	9b07      	ldr	r3, [sp, #28]
 8014b6c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014b6e:	9201      	str	r2, [sp, #4]
 8014b70:	4606      	mov	r6, r0
 8014b72:	4610      	mov	r0, r2
 8014b74:	4798      	blx	r3
 8014b76:	4604      	mov	r4, r0
 8014b78:	b128      	cbz	r0, 8014b86 <rcutils_strdup+0x32>
 8014b7a:	9a01      	ldr	r2, [sp, #4]
 8014b7c:	4629      	mov	r1, r5
 8014b7e:	f003 f824 	bl	8017bca <memcpy>
 8014b82:	2300      	movs	r3, #0
 8014b84:	55a3      	strb	r3, [r4, r6]
 8014b86:	4620      	mov	r0, r4
 8014b88:	b002      	add	sp, #8
 8014b8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014b8e:	b004      	add	sp, #16
 8014b90:	4770      	bx	lr
 8014b92:	4604      	mov	r4, r0
 8014b94:	e7f7      	b.n	8014b86 <rcutils_strdup+0x32>
 8014b96:	bf00      	nop

08014b98 <rcutils_strndup>:
 8014b98:	b082      	sub	sp, #8
 8014b9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b9c:	ac06      	add	r4, sp, #24
 8014b9e:	e884 000c 	stmia.w	r4, {r2, r3}
 8014ba2:	4605      	mov	r5, r0
 8014ba4:	b188      	cbz	r0, 8014bca <rcutils_strndup+0x32>
 8014ba6:	1c4f      	adds	r7, r1, #1
 8014ba8:	460e      	mov	r6, r1
 8014baa:	4638      	mov	r0, r7
 8014bac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8014bae:	4790      	blx	r2
 8014bb0:	4604      	mov	r4, r0
 8014bb2:	b128      	cbz	r0, 8014bc0 <rcutils_strndup+0x28>
 8014bb4:	463a      	mov	r2, r7
 8014bb6:	4629      	mov	r1, r5
 8014bb8:	f003 f807 	bl	8017bca <memcpy>
 8014bbc:	2300      	movs	r3, #0
 8014bbe:	55a3      	strb	r3, [r4, r6]
 8014bc0:	4620      	mov	r0, r4
 8014bc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014bc6:	b002      	add	sp, #8
 8014bc8:	4770      	bx	lr
 8014bca:	4604      	mov	r4, r0
 8014bcc:	e7f8      	b.n	8014bc0 <rcutils_strndup+0x28>
 8014bce:	bf00      	nop

08014bd0 <rcutils_get_zero_initialized_string_map>:
 8014bd0:	4b01      	ldr	r3, [pc, #4]	@ (8014bd8 <rcutils_get_zero_initialized_string_map+0x8>)
 8014bd2:	2000      	movs	r0, #0
 8014bd4:	6018      	str	r0, [r3, #0]
 8014bd6:	4770      	bx	lr
 8014bd8:	2000ac38 	.word	0x2000ac38

08014bdc <rcutils_string_map_reserve>:
 8014bdc:	2800      	cmp	r0, #0
 8014bde:	d05f      	beq.n	8014ca0 <rcutils_string_map_reserve+0xc4>
 8014be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014be4:	460c      	mov	r4, r1
 8014be6:	6801      	ldr	r1, [r0, #0]
 8014be8:	b082      	sub	sp, #8
 8014bea:	4605      	mov	r5, r0
 8014bec:	b129      	cbz	r1, 8014bfa <rcutils_string_map_reserve+0x1e>
 8014bee:	68cb      	ldr	r3, [r1, #12]
 8014bf0:	42a3      	cmp	r3, r4
 8014bf2:	d906      	bls.n	8014c02 <rcutils_string_map_reserve+0x26>
 8014bf4:	461c      	mov	r4, r3
 8014bf6:	2900      	cmp	r1, #0
 8014bf8:	d1f9      	bne.n	8014bee <rcutils_string_map_reserve+0x12>
 8014bfa:	201f      	movs	r0, #31
 8014bfc:	b002      	add	sp, #8
 8014bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c02:	688b      	ldr	r3, [r1, #8]
 8014c04:	42a3      	cmp	r3, r4
 8014c06:	d047      	beq.n	8014c98 <rcutils_string_map_reserve+0xbc>
 8014c08:	6a0e      	ldr	r6, [r1, #32]
 8014c0a:	2c00      	cmp	r4, #0
 8014c0c:	d034      	beq.n	8014c78 <rcutils_string_map_reserve+0x9c>
 8014c0e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8014c12:	d243      	bcs.n	8014c9c <rcutils_string_map_reserve+0xc0>
 8014c14:	00a7      	lsls	r7, r4, #2
 8014c16:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8014c1a:	6808      	ldr	r0, [r1, #0]
 8014c1c:	4632      	mov	r2, r6
 8014c1e:	4639      	mov	r1, r7
 8014c20:	47c0      	blx	r8
 8014c22:	2800      	cmp	r0, #0
 8014c24:	d03a      	beq.n	8014c9c <rcutils_string_map_reserve+0xc0>
 8014c26:	682b      	ldr	r3, [r5, #0]
 8014c28:	4632      	mov	r2, r6
 8014c2a:	6018      	str	r0, [r3, #0]
 8014c2c:	4639      	mov	r1, r7
 8014c2e:	6858      	ldr	r0, [r3, #4]
 8014c30:	47c0      	blx	r8
 8014c32:	2800      	cmp	r0, #0
 8014c34:	d032      	beq.n	8014c9c <rcutils_string_map_reserve+0xc0>
 8014c36:	682d      	ldr	r5, [r5, #0]
 8014c38:	68ab      	ldr	r3, [r5, #8]
 8014c3a:	6068      	str	r0, [r5, #4]
 8014c3c:	42a3      	cmp	r3, r4
 8014c3e:	d226      	bcs.n	8014c8e <rcutils_string_map_reserve+0xb2>
 8014c40:	682a      	ldr	r2, [r5, #0]
 8014c42:	eb00 0c07 	add.w	ip, r0, r7
 8014c46:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8014c4a:	45e6      	cmp	lr, ip
 8014c4c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8014c50:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8014c54:	d203      	bcs.n	8014c5e <rcutils_string_map_reserve+0x82>
 8014c56:	eb02 0c07 	add.w	ip, r2, r7
 8014c5a:	4566      	cmp	r6, ip
 8014c5c:	d322      	bcc.n	8014ca4 <rcutils_string_map_reserve+0xc8>
 8014c5e:	1ae3      	subs	r3, r4, r3
 8014c60:	009a      	lsls	r2, r3, #2
 8014c62:	4670      	mov	r0, lr
 8014c64:	2100      	movs	r1, #0
 8014c66:	9201      	str	r2, [sp, #4]
 8014c68:	f002 fee6 	bl	8017a38 <memset>
 8014c6c:	9a01      	ldr	r2, [sp, #4]
 8014c6e:	2100      	movs	r1, #0
 8014c70:	4630      	mov	r0, r6
 8014c72:	f002 fee1 	bl	8017a38 <memset>
 8014c76:	e00a      	b.n	8014c8e <rcutils_string_map_reserve+0xb2>
 8014c78:	694f      	ldr	r7, [r1, #20]
 8014c7a:	6808      	ldr	r0, [r1, #0]
 8014c7c:	4631      	mov	r1, r6
 8014c7e:	47b8      	blx	r7
 8014c80:	682b      	ldr	r3, [r5, #0]
 8014c82:	4631      	mov	r1, r6
 8014c84:	6858      	ldr	r0, [r3, #4]
 8014c86:	601c      	str	r4, [r3, #0]
 8014c88:	47b8      	blx	r7
 8014c8a:	682d      	ldr	r5, [r5, #0]
 8014c8c:	606c      	str	r4, [r5, #4]
 8014c8e:	2000      	movs	r0, #0
 8014c90:	60ac      	str	r4, [r5, #8]
 8014c92:	b002      	add	sp, #8
 8014c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c98:	2000      	movs	r0, #0
 8014c9a:	e7af      	b.n	8014bfc <rcutils_string_map_reserve+0x20>
 8014c9c:	200a      	movs	r0, #10
 8014c9e:	e7ad      	b.n	8014bfc <rcutils_string_map_reserve+0x20>
 8014ca0:	200b      	movs	r0, #11
 8014ca2:	4770      	bx	lr
 8014ca4:	1f0b      	subs	r3, r1, #4
 8014ca6:	4418      	add	r0, r3
 8014ca8:	4413      	add	r3, r2
 8014caa:	3a04      	subs	r2, #4
 8014cac:	4417      	add	r7, r2
 8014cae:	2200      	movs	r2, #0
 8014cb0:	f843 2f04 	str.w	r2, [r3, #4]!
 8014cb4:	42bb      	cmp	r3, r7
 8014cb6:	f840 2f04 	str.w	r2, [r0, #4]!
 8014cba:	d1f9      	bne.n	8014cb0 <rcutils_string_map_reserve+0xd4>
 8014cbc:	e7e7      	b.n	8014c8e <rcutils_string_map_reserve+0xb2>
 8014cbe:	bf00      	nop

08014cc0 <rcutils_string_map_init>:
 8014cc0:	b082      	sub	sp, #8
 8014cc2:	b570      	push	{r4, r5, r6, lr}
 8014cc4:	ac04      	add	r4, sp, #16
 8014cc6:	e884 000c 	stmia.w	r4, {r2, r3}
 8014cca:	b380      	cbz	r0, 8014d2e <rcutils_string_map_init+0x6e>
 8014ccc:	6806      	ldr	r6, [r0, #0]
 8014cce:	4604      	mov	r4, r0
 8014cd0:	b12e      	cbz	r6, 8014cde <rcutils_string_map_init+0x1e>
 8014cd2:	251e      	movs	r5, #30
 8014cd4:	4628      	mov	r0, r5
 8014cd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014cda:	b002      	add	sp, #8
 8014cdc:	4770      	bx	lr
 8014cde:	a804      	add	r0, sp, #16
 8014ce0:	460d      	mov	r5, r1
 8014ce2:	f7f6 fe17 	bl	800b914 <rcutils_allocator_is_valid>
 8014ce6:	b310      	cbz	r0, 8014d2e <rcutils_string_map_init+0x6e>
 8014ce8:	9b04      	ldr	r3, [sp, #16]
 8014cea:	9908      	ldr	r1, [sp, #32]
 8014cec:	2024      	movs	r0, #36	@ 0x24
 8014cee:	4798      	blx	r3
 8014cf0:	6020      	str	r0, [r4, #0]
 8014cf2:	b310      	cbz	r0, 8014d3a <rcutils_string_map_init+0x7a>
 8014cf4:	f10d 0e10 	add.w	lr, sp, #16
 8014cf8:	e9c0 6600 	strd	r6, r6, [r0]
 8014cfc:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8014d00:	f100 0c10 	add.w	ip, r0, #16
 8014d04:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014d08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014d0c:	f8de 3000 	ldr.w	r3, [lr]
 8014d10:	f8cc 3000 	str.w	r3, [ip]
 8014d14:	4629      	mov	r1, r5
 8014d16:	4620      	mov	r0, r4
 8014d18:	f7ff ff60 	bl	8014bdc <rcutils_string_map_reserve>
 8014d1c:	4605      	mov	r5, r0
 8014d1e:	2800      	cmp	r0, #0
 8014d20:	d0d8      	beq.n	8014cd4 <rcutils_string_map_init+0x14>
 8014d22:	9b05      	ldr	r3, [sp, #20]
 8014d24:	9908      	ldr	r1, [sp, #32]
 8014d26:	6820      	ldr	r0, [r4, #0]
 8014d28:	4798      	blx	r3
 8014d2a:	6026      	str	r6, [r4, #0]
 8014d2c:	e7d2      	b.n	8014cd4 <rcutils_string_map_init+0x14>
 8014d2e:	250b      	movs	r5, #11
 8014d30:	4628      	mov	r0, r5
 8014d32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014d36:	b002      	add	sp, #8
 8014d38:	4770      	bx	lr
 8014d3a:	250a      	movs	r5, #10
 8014d3c:	e7ca      	b.n	8014cd4 <rcutils_string_map_init+0x14>
 8014d3e:	bf00      	nop

08014d40 <rcutils_string_map_fini>:
 8014d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d44:	b082      	sub	sp, #8
 8014d46:	2800      	cmp	r0, #0
 8014d48:	d03a      	beq.n	8014dc0 <rcutils_string_map_fini+0x80>
 8014d4a:	6804      	ldr	r4, [r0, #0]
 8014d4c:	4606      	mov	r6, r0
 8014d4e:	2c00      	cmp	r4, #0
 8014d50:	d032      	beq.n	8014db8 <rcutils_string_map_fini+0x78>
 8014d52:	68a3      	ldr	r3, [r4, #8]
 8014d54:	b32b      	cbz	r3, 8014da2 <rcutils_string_map_fini+0x62>
 8014d56:	2500      	movs	r5, #0
 8014d58:	6822      	ldr	r2, [r4, #0]
 8014d5a:	462f      	mov	r7, r5
 8014d5c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014d60:	b1e0      	cbz	r0, 8014d9c <rcutils_string_map_fini+0x5c>
 8014d62:	6a21      	ldr	r1, [r4, #32]
 8014d64:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8014d68:	9101      	str	r1, [sp, #4]
 8014d6a:	47c0      	blx	r8
 8014d6c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014d70:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8014d74:	9901      	ldr	r1, [sp, #4]
 8014d76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014d7a:	47c0      	blx	r8
 8014d7c:	68e3      	ldr	r3, [r4, #12]
 8014d7e:	6862      	ldr	r2, [r4, #4]
 8014d80:	3b01      	subs	r3, #1
 8014d82:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8014d86:	60e3      	str	r3, [r4, #12]
 8014d88:	6834      	ldr	r4, [r6, #0]
 8014d8a:	68a3      	ldr	r3, [r4, #8]
 8014d8c:	3501      	adds	r5, #1
 8014d8e:	429d      	cmp	r5, r3
 8014d90:	d207      	bcs.n	8014da2 <rcutils_string_map_fini+0x62>
 8014d92:	6822      	ldr	r2, [r4, #0]
 8014d94:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014d98:	2800      	cmp	r0, #0
 8014d9a:	d1e2      	bne.n	8014d62 <rcutils_string_map_fini+0x22>
 8014d9c:	3501      	adds	r5, #1
 8014d9e:	429d      	cmp	r5, r3
 8014da0:	d3dc      	bcc.n	8014d5c <rcutils_string_map_fini+0x1c>
 8014da2:	2100      	movs	r1, #0
 8014da4:	4630      	mov	r0, r6
 8014da6:	f7ff ff19 	bl	8014bdc <rcutils_string_map_reserve>
 8014daa:	4604      	mov	r4, r0
 8014dac:	b920      	cbnz	r0, 8014db8 <rcutils_string_map_fini+0x78>
 8014dae:	6830      	ldr	r0, [r6, #0]
 8014db0:	6943      	ldr	r3, [r0, #20]
 8014db2:	6a01      	ldr	r1, [r0, #32]
 8014db4:	4798      	blx	r3
 8014db6:	6034      	str	r4, [r6, #0]
 8014db8:	4620      	mov	r0, r4
 8014dba:	b002      	add	sp, #8
 8014dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dc0:	240b      	movs	r4, #11
 8014dc2:	4620      	mov	r0, r4
 8014dc4:	b002      	add	sp, #8
 8014dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dca:	bf00      	nop

08014dcc <rcutils_string_map_getn>:
 8014dcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dd0:	b300      	cbz	r0, 8014e14 <rcutils_string_map_getn+0x48>
 8014dd2:	6807      	ldr	r7, [r0, #0]
 8014dd4:	b1ff      	cbz	r7, 8014e16 <rcutils_string_map_getn+0x4a>
 8014dd6:	4688      	mov	r8, r1
 8014dd8:	b1e1      	cbz	r1, 8014e14 <rcutils_string_map_getn+0x48>
 8014dda:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8014dde:	683e      	ldr	r6, [r7, #0]
 8014de0:	f1ba 0f00 	cmp.w	sl, #0
 8014de4:	d016      	beq.n	8014e14 <rcutils_string_map_getn+0x48>
 8014de6:	4691      	mov	r9, r2
 8014de8:	3e04      	subs	r6, #4
 8014dea:	2400      	movs	r4, #0
 8014dec:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8014df0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014df4:	4628      	mov	r0, r5
 8014df6:	3401      	adds	r4, #1
 8014df8:	b155      	cbz	r5, 8014e10 <rcutils_string_map_getn+0x44>
 8014dfa:	f7eb fa1b 	bl	8000234 <strlen>
 8014dfe:	4548      	cmp	r0, r9
 8014e00:	4602      	mov	r2, r0
 8014e02:	4629      	mov	r1, r5
 8014e04:	bf38      	it	cc
 8014e06:	464a      	movcc	r2, r9
 8014e08:	4640      	mov	r0, r8
 8014e0a:	f002 fe2a 	bl	8017a62 <strncmp>
 8014e0e:	b128      	cbz	r0, 8014e1c <rcutils_string_map_getn+0x50>
 8014e10:	45a2      	cmp	sl, r4
 8014e12:	d1eb      	bne.n	8014dec <rcutils_string_map_getn+0x20>
 8014e14:	2700      	movs	r7, #0
 8014e16:	4638      	mov	r0, r7
 8014e18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	f853 700b 	ldr.w	r7, [r3, fp]
 8014e22:	4638      	mov	r0, r7
 8014e24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014e28 <rmw_get_zero_initialized_context>:
 8014e28:	b510      	push	{r4, lr}
 8014e2a:	4604      	mov	r4, r0
 8014e2c:	3010      	adds	r0, #16
 8014e2e:	f7f6 fe03 	bl	800ba38 <rmw_get_zero_initialized_init_options>
 8014e32:	2300      	movs	r3, #0
 8014e34:	2000      	movs	r0, #0
 8014e36:	2100      	movs	r1, #0
 8014e38:	e9c4 0100 	strd	r0, r1, [r4]
 8014e3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8014e40:	60a3      	str	r3, [r4, #8]
 8014e42:	4620      	mov	r0, r4
 8014e44:	bd10      	pop	{r4, pc}
 8014e46:	bf00      	nop

08014e48 <rmw_subscription_content_filter_options_fini>:
 8014e48:	b1b0      	cbz	r0, 8014e78 <rmw_subscription_content_filter_options_fini+0x30>
 8014e4a:	b538      	push	{r3, r4, r5, lr}
 8014e4c:	4604      	mov	r4, r0
 8014e4e:	4608      	mov	r0, r1
 8014e50:	460d      	mov	r5, r1
 8014e52:	f7f6 fd5f 	bl	800b914 <rcutils_allocator_is_valid>
 8014e56:	b168      	cbz	r0, 8014e74 <rmw_subscription_content_filter_options_fini+0x2c>
 8014e58:	6820      	ldr	r0, [r4, #0]
 8014e5a:	b120      	cbz	r0, 8014e66 <rmw_subscription_content_filter_options_fini+0x1e>
 8014e5c:	686b      	ldr	r3, [r5, #4]
 8014e5e:	6929      	ldr	r1, [r5, #16]
 8014e60:	4798      	blx	r3
 8014e62:	2300      	movs	r3, #0
 8014e64:	6023      	str	r3, [r4, #0]
 8014e66:	1d20      	adds	r0, r4, #4
 8014e68:	f002 f99c 	bl	80171a4 <rcutils_string_array_fini>
 8014e6c:	3800      	subs	r0, #0
 8014e6e:	bf18      	it	ne
 8014e70:	2001      	movne	r0, #1
 8014e72:	bd38      	pop	{r3, r4, r5, pc}
 8014e74:	200b      	movs	r0, #11
 8014e76:	bd38      	pop	{r3, r4, r5, pc}
 8014e78:	200b      	movs	r0, #11
 8014e7a:	4770      	bx	lr

08014e7c <rmw_get_default_subscription_options>:
 8014e7c:	2200      	movs	r2, #0
 8014e7e:	e9c0 2200 	strd	r2, r2, [r0]
 8014e82:	6082      	str	r2, [r0, #8]
 8014e84:	4770      	bx	lr
 8014e86:	bf00      	nop

08014e88 <rmw_time_equal>:
 8014e88:	b4f0      	push	{r4, r5, r6, r7}
 8014e8a:	b084      	sub	sp, #16
 8014e8c:	ac04      	add	r4, sp, #16
 8014e8e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8014e92:	4603      	mov	r3, r0
 8014e94:	4924      	ldr	r1, [pc, #144]	@ (8014f28 <rmw_time_equal+0xa0>)
 8014e96:	9e03      	ldr	r6, [sp, #12]
 8014e98:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8014e9c:	2202      	movs	r2, #2
 8014e9e:	4299      	cmp	r1, r3
 8014ea0:	41aa      	sbcs	r2, r5
 8014ea2:	d330      	bcc.n	8014f06 <rmw_time_equal+0x7e>
 8014ea4:	4c21      	ldr	r4, [pc, #132]	@ (8014f2c <rmw_time_equal+0xa4>)
 8014ea6:	fba3 3204 	umull	r3, r2, r3, r4
 8014eaa:	fb04 2205 	mla	r2, r4, r5, r2
 8014eae:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014eb2:	43dd      	mvns	r5, r3
 8014eb4:	1a8c      	subs	r4, r1, r2
 8014eb6:	4285      	cmp	r5, r0
 8014eb8:	41b4      	sbcs	r4, r6
 8014eba:	d332      	bcc.n	8014f22 <rmw_time_equal+0x9a>
 8014ebc:	eb10 0c03 	adds.w	ip, r0, r3
 8014ec0:	eb42 0106 	adc.w	r1, r2, r6
 8014ec4:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8014ec8:	4817      	ldr	r0, [pc, #92]	@ (8014f28 <rmw_time_equal+0xa0>)
 8014eca:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8014ecc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8014ece:	2202      	movs	r2, #2
 8014ed0:	4298      	cmp	r0, r3
 8014ed2:	41b2      	sbcs	r2, r6
 8014ed4:	d31c      	bcc.n	8014f10 <rmw_time_equal+0x88>
 8014ed6:	4c15      	ldr	r4, [pc, #84]	@ (8014f2c <rmw_time_equal+0xa4>)
 8014ed8:	fba3 3204 	umull	r3, r2, r3, r4
 8014edc:	fb04 2206 	mla	r2, r4, r6, r2
 8014ee0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8014ee4:	43de      	mvns	r6, r3
 8014ee6:	1a84      	subs	r4, r0, r2
 8014ee8:	42ae      	cmp	r6, r5
 8014eea:	41bc      	sbcs	r4, r7
 8014eec:	d315      	bcc.n	8014f1a <rmw_time_equal+0x92>
 8014eee:	195b      	adds	r3, r3, r5
 8014ef0:	eb42 0207 	adc.w	r2, r2, r7
 8014ef4:	428a      	cmp	r2, r1
 8014ef6:	bf08      	it	eq
 8014ef8:	4563      	cmpeq	r3, ip
 8014efa:	bf0c      	ite	eq
 8014efc:	2001      	moveq	r0, #1
 8014efe:	2000      	movne	r0, #0
 8014f00:	b004      	add	sp, #16
 8014f02:	bcf0      	pop	{r4, r5, r6, r7}
 8014f04:	4770      	bx	lr
 8014f06:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8014f0a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014f0e:	e7d9      	b.n	8014ec4 <rmw_time_equal+0x3c>
 8014f10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014f14:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8014f18:	e7ec      	b.n	8014ef4 <rmw_time_equal+0x6c>
 8014f1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014f1e:	4602      	mov	r2, r0
 8014f20:	e7e8      	b.n	8014ef4 <rmw_time_equal+0x6c>
 8014f22:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8014f26:	e7cd      	b.n	8014ec4 <rmw_time_equal+0x3c>
 8014f28:	25c17d04 	.word	0x25c17d04
 8014f2c:	3b9aca00 	.word	0x3b9aca00

08014f30 <rmw_time_total_nsec>:
 8014f30:	b470      	push	{r4, r5, r6}
 8014f32:	b085      	sub	sp, #20
 8014f34:	ac04      	add	r4, sp, #16
 8014f36:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8014f3a:	4603      	mov	r3, r0
 8014f3c:	4912      	ldr	r1, [pc, #72]	@ (8014f88 <rmw_time_total_nsec+0x58>)
 8014f3e:	9e03      	ldr	r6, [sp, #12]
 8014f40:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8014f44:	2202      	movs	r2, #2
 8014f46:	4299      	cmp	r1, r3
 8014f48:	41aa      	sbcs	r2, r5
 8014f4a:	d311      	bcc.n	8014f70 <rmw_time_total_nsec+0x40>
 8014f4c:	4c0f      	ldr	r4, [pc, #60]	@ (8014f8c <rmw_time_total_nsec+0x5c>)
 8014f4e:	fba3 3204 	umull	r3, r2, r3, r4
 8014f52:	fb04 2205 	mla	r2, r4, r5, r2
 8014f56:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014f5a:	43dd      	mvns	r5, r3
 8014f5c:	1a8c      	subs	r4, r1, r2
 8014f5e:	4285      	cmp	r5, r0
 8014f60:	41b4      	sbcs	r4, r6
 8014f62:	d30c      	bcc.n	8014f7e <rmw_time_total_nsec+0x4e>
 8014f64:	1818      	adds	r0, r3, r0
 8014f66:	eb42 0106 	adc.w	r1, r2, r6
 8014f6a:	b005      	add	sp, #20
 8014f6c:	bc70      	pop	{r4, r5, r6}
 8014f6e:	4770      	bx	lr
 8014f70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014f74:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014f78:	b005      	add	sp, #20
 8014f7a:	bc70      	pop	{r4, r5, r6}
 8014f7c:	4770      	bx	lr
 8014f7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014f82:	b005      	add	sp, #20
 8014f84:	bc70      	pop	{r4, r5, r6}
 8014f86:	4770      	bx	lr
 8014f88:	25c17d04 	.word	0x25c17d04
 8014f8c:	3b9aca00 	.word	0x3b9aca00

08014f90 <rmw_get_zero_initialized_message_info>:
 8014f90:	b510      	push	{r4, lr}
 8014f92:	2240      	movs	r2, #64	@ 0x40
 8014f94:	4604      	mov	r4, r0
 8014f96:	2100      	movs	r1, #0
 8014f98:	f002 fd4e 	bl	8017a38 <memset>
 8014f9c:	4620      	mov	r0, r4
 8014f9e:	bd10      	pop	{r4, pc}

08014fa0 <rmw_validate_full_topic_name>:
 8014fa0:	2800      	cmp	r0, #0
 8014fa2:	d057      	beq.n	8015054 <rmw_validate_full_topic_name+0xb4>
 8014fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fa8:	460d      	mov	r5, r1
 8014faa:	2900      	cmp	r1, #0
 8014fac:	d054      	beq.n	8015058 <rmw_validate_full_topic_name+0xb8>
 8014fae:	4616      	mov	r6, r2
 8014fb0:	4604      	mov	r4, r0
 8014fb2:	f7eb f93f 	bl	8000234 <strlen>
 8014fb6:	b148      	cbz	r0, 8014fcc <rmw_validate_full_topic_name+0x2c>
 8014fb8:	7823      	ldrb	r3, [r4, #0]
 8014fba:	2b2f      	cmp	r3, #47	@ 0x2f
 8014fbc:	d00d      	beq.n	8014fda <rmw_validate_full_topic_name+0x3a>
 8014fbe:	2302      	movs	r3, #2
 8014fc0:	602b      	str	r3, [r5, #0]
 8014fc2:	b13e      	cbz	r6, 8014fd4 <rmw_validate_full_topic_name+0x34>
 8014fc4:	2000      	movs	r0, #0
 8014fc6:	6030      	str	r0, [r6, #0]
 8014fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fcc:	2301      	movs	r3, #1
 8014fce:	602b      	str	r3, [r5, #0]
 8014fd0:	2e00      	cmp	r6, #0
 8014fd2:	d1f7      	bne.n	8014fc4 <rmw_validate_full_topic_name+0x24>
 8014fd4:	2000      	movs	r0, #0
 8014fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fda:	1e43      	subs	r3, r0, #1
 8014fdc:	5ce2      	ldrb	r2, [r4, r3]
 8014fde:	2a2f      	cmp	r2, #47	@ 0x2f
 8014fe0:	d03c      	beq.n	801505c <rmw_validate_full_topic_name+0xbc>
 8014fe2:	1e63      	subs	r3, r4, #1
 8014fe4:	eb03 0800 	add.w	r8, r3, r0
 8014fe8:	f1c4 0e01 	rsb	lr, r4, #1
 8014fec:	eb0e 0703 	add.w	r7, lr, r3
 8014ff0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8014ff4:	f021 0220 	bic.w	r2, r1, #32
 8014ff8:	3a41      	subs	r2, #65	@ 0x41
 8014ffa:	2a19      	cmp	r2, #25
 8014ffc:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8015000:	d90b      	bls.n	801501a <rmw_validate_full_topic_name+0x7a>
 8015002:	295f      	cmp	r1, #95	@ 0x5f
 8015004:	d009      	beq.n	801501a <rmw_validate_full_topic_name+0x7a>
 8015006:	f1bc 0f0a 	cmp.w	ip, #10
 801500a:	d906      	bls.n	801501a <rmw_validate_full_topic_name+0x7a>
 801500c:	2304      	movs	r3, #4
 801500e:	602b      	str	r3, [r5, #0]
 8015010:	2e00      	cmp	r6, #0
 8015012:	d0df      	beq.n	8014fd4 <rmw_validate_full_topic_name+0x34>
 8015014:	6037      	str	r7, [r6, #0]
 8015016:	2000      	movs	r0, #0
 8015018:	e7d6      	b.n	8014fc8 <rmw_validate_full_topic_name+0x28>
 801501a:	4543      	cmp	r3, r8
 801501c:	d1e6      	bne.n	8014fec <rmw_validate_full_topic_name+0x4c>
 801501e:	4f1a      	ldr	r7, [pc, #104]	@ (8015088 <rmw_validate_full_topic_name+0xe8>)
 8015020:	2301      	movs	r3, #1
 8015022:	e004      	b.n	801502e <rmw_validate_full_topic_name+0x8e>
 8015024:	4298      	cmp	r0, r3
 8015026:	f104 0401 	add.w	r4, r4, #1
 801502a:	d91c      	bls.n	8015066 <rmw_validate_full_topic_name+0xc6>
 801502c:	4613      	mov	r3, r2
 801502e:	4298      	cmp	r0, r3
 8015030:	f103 0201 	add.w	r2, r3, #1
 8015034:	d0f6      	beq.n	8015024 <rmw_validate_full_topic_name+0x84>
 8015036:	7821      	ldrb	r1, [r4, #0]
 8015038:	292f      	cmp	r1, #47	@ 0x2f
 801503a:	d1f3      	bne.n	8015024 <rmw_validate_full_topic_name+0x84>
 801503c:	7861      	ldrb	r1, [r4, #1]
 801503e:	292f      	cmp	r1, #47	@ 0x2f
 8015040:	d01c      	beq.n	801507c <rmw_validate_full_topic_name+0xdc>
 8015042:	5dc9      	ldrb	r1, [r1, r7]
 8015044:	0749      	lsls	r1, r1, #29
 8015046:	d5ed      	bpl.n	8015024 <rmw_validate_full_topic_name+0x84>
 8015048:	2206      	movs	r2, #6
 801504a:	602a      	str	r2, [r5, #0]
 801504c:	2e00      	cmp	r6, #0
 801504e:	d0c1      	beq.n	8014fd4 <rmw_validate_full_topic_name+0x34>
 8015050:	6033      	str	r3, [r6, #0]
 8015052:	e7bf      	b.n	8014fd4 <rmw_validate_full_topic_name+0x34>
 8015054:	200b      	movs	r0, #11
 8015056:	4770      	bx	lr
 8015058:	200b      	movs	r0, #11
 801505a:	e7b5      	b.n	8014fc8 <rmw_validate_full_topic_name+0x28>
 801505c:	2203      	movs	r2, #3
 801505e:	602a      	str	r2, [r5, #0]
 8015060:	2e00      	cmp	r6, #0
 8015062:	d1f5      	bne.n	8015050 <rmw_validate_full_topic_name+0xb0>
 8015064:	e7b6      	b.n	8014fd4 <rmw_validate_full_topic_name+0x34>
 8015066:	28f7      	cmp	r0, #247	@ 0xf7
 8015068:	d802      	bhi.n	8015070 <rmw_validate_full_topic_name+0xd0>
 801506a:	2000      	movs	r0, #0
 801506c:	6028      	str	r0, [r5, #0]
 801506e:	e7ab      	b.n	8014fc8 <rmw_validate_full_topic_name+0x28>
 8015070:	2307      	movs	r3, #7
 8015072:	602b      	str	r3, [r5, #0]
 8015074:	2e00      	cmp	r6, #0
 8015076:	d0ad      	beq.n	8014fd4 <rmw_validate_full_topic_name+0x34>
 8015078:	23f6      	movs	r3, #246	@ 0xf6
 801507a:	e7e9      	b.n	8015050 <rmw_validate_full_topic_name+0xb0>
 801507c:	2205      	movs	r2, #5
 801507e:	602a      	str	r2, [r5, #0]
 8015080:	2e00      	cmp	r6, #0
 8015082:	d1e5      	bne.n	8015050 <rmw_validate_full_topic_name+0xb0>
 8015084:	e7a6      	b.n	8014fd4 <rmw_validate_full_topic_name+0x34>
 8015086:	bf00      	nop
 8015088:	08019668 	.word	0x08019668

0801508c <rmw_validate_namespace_with_size>:
 801508c:	b340      	cbz	r0, 80150e0 <rmw_validate_namespace_with_size+0x54>
 801508e:	b570      	push	{r4, r5, r6, lr}
 8015090:	4614      	mov	r4, r2
 8015092:	b0c2      	sub	sp, #264	@ 0x108
 8015094:	b332      	cbz	r2, 80150e4 <rmw_validate_namespace_with_size+0x58>
 8015096:	2901      	cmp	r1, #1
 8015098:	460d      	mov	r5, r1
 801509a:	461e      	mov	r6, r3
 801509c:	d102      	bne.n	80150a4 <rmw_validate_namespace_with_size+0x18>
 801509e:	7803      	ldrb	r3, [r0, #0]
 80150a0:	2b2f      	cmp	r3, #47	@ 0x2f
 80150a2:	d012      	beq.n	80150ca <rmw_validate_namespace_with_size+0x3e>
 80150a4:	aa01      	add	r2, sp, #4
 80150a6:	4669      	mov	r1, sp
 80150a8:	f7ff ff7a 	bl	8014fa0 <rmw_validate_full_topic_name>
 80150ac:	b978      	cbnz	r0, 80150ce <rmw_validate_namespace_with_size+0x42>
 80150ae:	9b00      	ldr	r3, [sp, #0]
 80150b0:	b14b      	cbz	r3, 80150c6 <rmw_validate_namespace_with_size+0x3a>
 80150b2:	2b07      	cmp	r3, #7
 80150b4:	d007      	beq.n	80150c6 <rmw_validate_namespace_with_size+0x3a>
 80150b6:	1e5a      	subs	r2, r3, #1
 80150b8:	2a05      	cmp	r2, #5
 80150ba:	d82b      	bhi.n	8015114 <rmw_validate_namespace_with_size+0x88>
 80150bc:	e8df f002 	tbb	[pc, r2]
 80150c0:	1e212427 	.word	0x1e212427
 80150c4:	141b      	.short	0x141b
 80150c6:	2df5      	cmp	r5, #245	@ 0xf5
 80150c8:	d803      	bhi.n	80150d2 <rmw_validate_namespace_with_size+0x46>
 80150ca:	2000      	movs	r0, #0
 80150cc:	6020      	str	r0, [r4, #0]
 80150ce:	b042      	add	sp, #264	@ 0x108
 80150d0:	bd70      	pop	{r4, r5, r6, pc}
 80150d2:	2307      	movs	r3, #7
 80150d4:	6023      	str	r3, [r4, #0]
 80150d6:	2e00      	cmp	r6, #0
 80150d8:	d0f9      	beq.n	80150ce <rmw_validate_namespace_with_size+0x42>
 80150da:	23f4      	movs	r3, #244	@ 0xf4
 80150dc:	6033      	str	r3, [r6, #0]
 80150de:	e7f6      	b.n	80150ce <rmw_validate_namespace_with_size+0x42>
 80150e0:	200b      	movs	r0, #11
 80150e2:	4770      	bx	lr
 80150e4:	200b      	movs	r0, #11
 80150e6:	e7f2      	b.n	80150ce <rmw_validate_namespace_with_size+0x42>
 80150e8:	2306      	movs	r3, #6
 80150ea:	6023      	str	r3, [r4, #0]
 80150ec:	2e00      	cmp	r6, #0
 80150ee:	d0ee      	beq.n	80150ce <rmw_validate_namespace_with_size+0x42>
 80150f0:	9b01      	ldr	r3, [sp, #4]
 80150f2:	6033      	str	r3, [r6, #0]
 80150f4:	e7eb      	b.n	80150ce <rmw_validate_namespace_with_size+0x42>
 80150f6:	2305      	movs	r3, #5
 80150f8:	6023      	str	r3, [r4, #0]
 80150fa:	e7f7      	b.n	80150ec <rmw_validate_namespace_with_size+0x60>
 80150fc:	2304      	movs	r3, #4
 80150fe:	6023      	str	r3, [r4, #0]
 8015100:	e7f4      	b.n	80150ec <rmw_validate_namespace_with_size+0x60>
 8015102:	2303      	movs	r3, #3
 8015104:	6023      	str	r3, [r4, #0]
 8015106:	e7f1      	b.n	80150ec <rmw_validate_namespace_with_size+0x60>
 8015108:	2302      	movs	r3, #2
 801510a:	6023      	str	r3, [r4, #0]
 801510c:	e7ee      	b.n	80150ec <rmw_validate_namespace_with_size+0x60>
 801510e:	2301      	movs	r3, #1
 8015110:	6023      	str	r3, [r4, #0]
 8015112:	e7eb      	b.n	80150ec <rmw_validate_namespace_with_size+0x60>
 8015114:	4a03      	ldr	r2, [pc, #12]	@ (8015124 <rmw_validate_namespace_with_size+0x98>)
 8015116:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801511a:	a802      	add	r0, sp, #8
 801511c:	f7ff fcee 	bl	8014afc <rcutils_snprintf>
 8015120:	2001      	movs	r0, #1
 8015122:	e7d4      	b.n	80150ce <rmw_validate_namespace_with_size+0x42>
 8015124:	08019270 	.word	0x08019270

08015128 <rmw_validate_namespace>:
 8015128:	b168      	cbz	r0, 8015146 <rmw_validate_namespace+0x1e>
 801512a:	b570      	push	{r4, r5, r6, lr}
 801512c:	460d      	mov	r5, r1
 801512e:	4616      	mov	r6, r2
 8015130:	4604      	mov	r4, r0
 8015132:	f7eb f87f 	bl	8000234 <strlen>
 8015136:	4633      	mov	r3, r6
 8015138:	4601      	mov	r1, r0
 801513a:	462a      	mov	r2, r5
 801513c:	4620      	mov	r0, r4
 801513e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015142:	f7ff bfa3 	b.w	801508c <rmw_validate_namespace_with_size>
 8015146:	200b      	movs	r0, #11
 8015148:	4770      	bx	lr
 801514a:	bf00      	nop

0801514c <rmw_namespace_validation_result_string>:
 801514c:	2807      	cmp	r0, #7
 801514e:	bf9a      	itte	ls
 8015150:	4b02      	ldrls	r3, [pc, #8]	@ (801515c <rmw_namespace_validation_result_string+0x10>)
 8015152:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8015156:	4802      	ldrhi	r0, [pc, #8]	@ (8015160 <rmw_namespace_validation_result_string+0x14>)
 8015158:	4770      	bx	lr
 801515a:	bf00      	nop
 801515c:	08019468 	.word	0x08019468
 8015160:	080192c0 	.word	0x080192c0

08015164 <rmw_validate_node_name>:
 8015164:	2800      	cmp	r0, #0
 8015166:	d03b      	beq.n	80151e0 <rmw_validate_node_name+0x7c>
 8015168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801516c:	460d      	mov	r5, r1
 801516e:	2900      	cmp	r1, #0
 8015170:	d038      	beq.n	80151e4 <rmw_validate_node_name+0x80>
 8015172:	4616      	mov	r6, r2
 8015174:	4604      	mov	r4, r0
 8015176:	f7eb f85d 	bl	8000234 <strlen>
 801517a:	b1e0      	cbz	r0, 80151b6 <rmw_validate_node_name+0x52>
 801517c:	1e63      	subs	r3, r4, #1
 801517e:	eb03 0800 	add.w	r8, r3, r0
 8015182:	f1c4 0101 	rsb	r1, r4, #1
 8015186:	18cf      	adds	r7, r1, r3
 8015188:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801518c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8015190:	f02e 0c20 	bic.w	ip, lr, #32
 8015194:	2a09      	cmp	r2, #9
 8015196:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801519a:	d914      	bls.n	80151c6 <rmw_validate_node_name+0x62>
 801519c:	f1bc 0f19 	cmp.w	ip, #25
 80151a0:	d911      	bls.n	80151c6 <rmw_validate_node_name+0x62>
 80151a2:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 80151a6:	d00e      	beq.n	80151c6 <rmw_validate_node_name+0x62>
 80151a8:	2302      	movs	r3, #2
 80151aa:	602b      	str	r3, [r5, #0]
 80151ac:	b106      	cbz	r6, 80151b0 <rmw_validate_node_name+0x4c>
 80151ae:	6037      	str	r7, [r6, #0]
 80151b0:	2000      	movs	r0, #0
 80151b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151b6:	2301      	movs	r3, #1
 80151b8:	602b      	str	r3, [r5, #0]
 80151ba:	2e00      	cmp	r6, #0
 80151bc:	d0f8      	beq.n	80151b0 <rmw_validate_node_name+0x4c>
 80151be:	2000      	movs	r0, #0
 80151c0:	6030      	str	r0, [r6, #0]
 80151c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151c6:	4543      	cmp	r3, r8
 80151c8:	d1dd      	bne.n	8015186 <rmw_validate_node_name+0x22>
 80151ca:	7822      	ldrb	r2, [r4, #0]
 80151cc:	4b0d      	ldr	r3, [pc, #52]	@ (8015204 <rmw_validate_node_name+0xa0>)
 80151ce:	5cd3      	ldrb	r3, [r2, r3]
 80151d0:	f013 0304 	ands.w	r3, r3, #4
 80151d4:	d110      	bne.n	80151f8 <rmw_validate_node_name+0x94>
 80151d6:	28ff      	cmp	r0, #255	@ 0xff
 80151d8:	d806      	bhi.n	80151e8 <rmw_validate_node_name+0x84>
 80151da:	602b      	str	r3, [r5, #0]
 80151dc:	4618      	mov	r0, r3
 80151de:	e7e8      	b.n	80151b2 <rmw_validate_node_name+0x4e>
 80151e0:	200b      	movs	r0, #11
 80151e2:	4770      	bx	lr
 80151e4:	200b      	movs	r0, #11
 80151e6:	e7e4      	b.n	80151b2 <rmw_validate_node_name+0x4e>
 80151e8:	2204      	movs	r2, #4
 80151ea:	602a      	str	r2, [r5, #0]
 80151ec:	2e00      	cmp	r6, #0
 80151ee:	d0df      	beq.n	80151b0 <rmw_validate_node_name+0x4c>
 80151f0:	22fe      	movs	r2, #254	@ 0xfe
 80151f2:	6032      	str	r2, [r6, #0]
 80151f4:	4618      	mov	r0, r3
 80151f6:	e7dc      	b.n	80151b2 <rmw_validate_node_name+0x4e>
 80151f8:	2303      	movs	r3, #3
 80151fa:	602b      	str	r3, [r5, #0]
 80151fc:	2e00      	cmp	r6, #0
 80151fe:	d1de      	bne.n	80151be <rmw_validate_node_name+0x5a>
 8015200:	e7d6      	b.n	80151b0 <rmw_validate_node_name+0x4c>
 8015202:	bf00      	nop
 8015204:	08019668 	.word	0x08019668

08015208 <rmw_node_name_validation_result_string>:
 8015208:	2804      	cmp	r0, #4
 801520a:	bf9a      	itte	ls
 801520c:	4b02      	ldrls	r3, [pc, #8]	@ (8015218 <rmw_node_name_validation_result_string+0x10>)
 801520e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8015212:	4802      	ldrhi	r0, [pc, #8]	@ (801521c <rmw_node_name_validation_result_string+0x14>)
 8015214:	4770      	bx	lr
 8015216:	bf00      	nop
 8015218:	08019574 	.word	0x08019574
 801521c:	08019488 	.word	0x08019488

08015220 <on_status>:
 8015220:	b082      	sub	sp, #8
 8015222:	b002      	add	sp, #8
 8015224:	4770      	bx	lr
 8015226:	bf00      	nop

08015228 <on_topic>:
 8015228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801522c:	4a22      	ldr	r2, [pc, #136]	@ (80152b8 <on_topic+0x90>)
 801522e:	b094      	sub	sp, #80	@ 0x50
 8015230:	6812      	ldr	r2, [r2, #0]
 8015232:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8015234:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015238:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 801523c:	b3c2      	cbz	r2, 80152b0 <on_topic+0x88>
 801523e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8015242:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8015246:	e001      	b.n	801524c <on_topic+0x24>
 8015248:	6852      	ldr	r2, [r2, #4]
 801524a:	b38a      	cbz	r2, 80152b0 <on_topic+0x88>
 801524c:	6894      	ldr	r4, [r2, #8]
 801524e:	8aa3      	ldrh	r3, [r4, #20]
 8015250:	428b      	cmp	r3, r1
 8015252:	d1f9      	bne.n	8015248 <on_topic+0x20>
 8015254:	7da3      	ldrb	r3, [r4, #22]
 8015256:	4283      	cmp	r3, r0
 8015258:	d1f6      	bne.n	8015248 <on_topic+0x20>
 801525a:	2248      	movs	r2, #72	@ 0x48
 801525c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8015260:	4668      	mov	r0, sp
 8015262:	f002 fcb2 	bl	8017bca <memcpy>
 8015266:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801526a:	cb0c      	ldmia	r3, {r2, r3}
 801526c:	4620      	mov	r0, r4
 801526e:	f7f7 fcb9 	bl	800cbe4 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015272:	4607      	mov	r7, r0
 8015274:	b1e0      	cbz	r0, 80152b0 <on_topic+0x88>
 8015276:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801527a:	4632      	mov	r2, r6
 801527c:	4628      	mov	r0, r5
 801527e:	f108 0110 	add.w	r1, r8, #16
 8015282:	f000 fddb 	bl	8015e3c <ucdr_deserialize_array_uint8_t>
 8015286:	b930      	cbnz	r0, 8015296 <on_topic+0x6e>
 8015288:	480c      	ldr	r0, [pc, #48]	@ (80152bc <on_topic+0x94>)
 801528a:	4639      	mov	r1, r7
 801528c:	b014      	add	sp, #80	@ 0x50
 801528e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015292:	f000 b8bd 	b.w	8015410 <put_memory>
 8015296:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801529a:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801529e:	f000 fcc3 	bl	8015c28 <rmw_uros_epoch_nanos>
 80152a2:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80152a6:	2305      	movs	r3, #5
 80152a8:	e942 0102 	strd	r0, r1, [r2, #-8]
 80152ac:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80152b0:	b014      	add	sp, #80	@ 0x50
 80152b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152b6:	bf00      	nop
 80152b8:	2000ab74 	.word	0x2000ab74
 80152bc:	2000ab64 	.word	0x2000ab64

080152c0 <on_request>:
 80152c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152c4:	4823      	ldr	r0, [pc, #140]	@ (8015354 <on_request+0x94>)
 80152c6:	b094      	sub	sp, #80	@ 0x50
 80152c8:	6800      	ldr	r0, [r0, #0]
 80152ca:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80152cc:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80152d0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80152d2:	2800      	cmp	r0, #0
 80152d4:	d03b      	beq.n	801534e <on_request+0x8e>
 80152d6:	461d      	mov	r5, r3
 80152d8:	e001      	b.n	80152de <on_request+0x1e>
 80152da:	6840      	ldr	r0, [r0, #4]
 80152dc:	b3b8      	cbz	r0, 801534e <on_request+0x8e>
 80152de:	6884      	ldr	r4, [r0, #8]
 80152e0:	8b21      	ldrh	r1, [r4, #24]
 80152e2:	4291      	cmp	r1, r2
 80152e4:	d1f9      	bne.n	80152da <on_request+0x1a>
 80152e6:	2248      	movs	r2, #72	@ 0x48
 80152e8:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80152ec:	4668      	mov	r0, sp
 80152ee:	f002 fc6c 	bl	8017bca <memcpy>
 80152f2:	f104 0320 	add.w	r3, r4, #32
 80152f6:	cb0c      	ldmia	r3, {r2, r3}
 80152f8:	4620      	mov	r0, r4
 80152fa:	f7f7 fc73 	bl	800cbe4 <rmw_uxrce_get_static_input_buffer_for_entity>
 80152fe:	4680      	mov	r8, r0
 8015300:	b328      	cbz	r0, 801534e <on_request+0x8e>
 8015302:	4638      	mov	r0, r7
 8015304:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8015308:	4632      	mov	r2, r6
 801530a:	f107 0110 	add.w	r1, r7, #16
 801530e:	f000 fd95 	bl	8015e3c <ucdr_deserialize_array_uint8_t>
 8015312:	b930      	cbnz	r0, 8015322 <on_request+0x62>
 8015314:	4810      	ldr	r0, [pc, #64]	@ (8015358 <on_request+0x98>)
 8015316:	4641      	mov	r1, r8
 8015318:	b014      	add	sp, #80	@ 0x50
 801531a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801531e:	f000 b877 	b.w	8015410 <put_memory>
 8015322:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015324:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8015328:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801532c:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8015330:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015334:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015338:	e88c 0003 	stmia.w	ip, {r0, r1}
 801533c:	f000 fc74 	bl	8015c28 <rmw_uros_epoch_nanos>
 8015340:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8015344:	2303      	movs	r3, #3
 8015346:	e942 0102 	strd	r0, r1, [r2, #-8]
 801534a:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801534e:	b014      	add	sp, #80	@ 0x50
 8015350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015354:	2000ab44 	.word	0x2000ab44
 8015358:	2000ab64 	.word	0x2000ab64

0801535c <on_reply>:
 801535c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015360:	4821      	ldr	r0, [pc, #132]	@ (80153e8 <on_reply+0x8c>)
 8015362:	b094      	sub	sp, #80	@ 0x50
 8015364:	6800      	ldr	r0, [r0, #0]
 8015366:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8015368:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801536c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801536e:	b3b8      	cbz	r0, 80153e0 <on_reply+0x84>
 8015370:	461d      	mov	r5, r3
 8015372:	e001      	b.n	8015378 <on_reply+0x1c>
 8015374:	6840      	ldr	r0, [r0, #4]
 8015376:	b398      	cbz	r0, 80153e0 <on_reply+0x84>
 8015378:	6884      	ldr	r4, [r0, #8]
 801537a:	8b21      	ldrh	r1, [r4, #24]
 801537c:	4291      	cmp	r1, r2
 801537e:	d1f9      	bne.n	8015374 <on_reply+0x18>
 8015380:	2248      	movs	r2, #72	@ 0x48
 8015382:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8015386:	4668      	mov	r0, sp
 8015388:	f002 fc1f 	bl	8017bca <memcpy>
 801538c:	f104 0320 	add.w	r3, r4, #32
 8015390:	cb0c      	ldmia	r3, {r2, r3}
 8015392:	4620      	mov	r0, r4
 8015394:	f7f7 fc26 	bl	800cbe4 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015398:	4680      	mov	r8, r0
 801539a:	b308      	cbz	r0, 80153e0 <on_reply+0x84>
 801539c:	4638      	mov	r0, r7
 801539e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80153a2:	4632      	mov	r2, r6
 80153a4:	f107 0110 	add.w	r1, r7, #16
 80153a8:	f000 fd48 	bl	8015e3c <ucdr_deserialize_array_uint8_t>
 80153ac:	b930      	cbnz	r0, 80153bc <on_reply+0x60>
 80153ae:	480f      	ldr	r0, [pc, #60]	@ (80153ec <on_reply+0x90>)
 80153b0:	4641      	mov	r1, r8
 80153b2:	b014      	add	sp, #80	@ 0x50
 80153b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80153b8:	f000 b82a 	b.w	8015410 <put_memory>
 80153bc:	2200      	movs	r2, #0
 80153be:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 80153c2:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80153c6:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80153ca:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 80153ce:	f000 fc2b 	bl	8015c28 <rmw_uros_epoch_nanos>
 80153d2:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80153d6:	2304      	movs	r3, #4
 80153d8:	e942 0102 	strd	r0, r1, [r2, #-8]
 80153dc:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80153e0:	b014      	add	sp, #80	@ 0x50
 80153e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153e6:	bf00      	nop
 80153e8:	20006254 	.word	0x20006254
 80153ec:	2000ab64 	.word	0x2000ab64

080153f0 <get_memory>:
 80153f0:	4603      	mov	r3, r0
 80153f2:	6840      	ldr	r0, [r0, #4]
 80153f4:	b158      	cbz	r0, 801540e <get_memory+0x1e>
 80153f6:	6842      	ldr	r2, [r0, #4]
 80153f8:	605a      	str	r2, [r3, #4]
 80153fa:	b10a      	cbz	r2, 8015400 <get_memory+0x10>
 80153fc:	2100      	movs	r1, #0
 80153fe:	6011      	str	r1, [r2, #0]
 8015400:	681a      	ldr	r2, [r3, #0]
 8015402:	6042      	str	r2, [r0, #4]
 8015404:	b102      	cbz	r2, 8015408 <get_memory+0x18>
 8015406:	6010      	str	r0, [r2, #0]
 8015408:	2200      	movs	r2, #0
 801540a:	6002      	str	r2, [r0, #0]
 801540c:	6018      	str	r0, [r3, #0]
 801540e:	4770      	bx	lr

08015410 <put_memory>:
 8015410:	680b      	ldr	r3, [r1, #0]
 8015412:	b10b      	cbz	r3, 8015418 <put_memory+0x8>
 8015414:	684a      	ldr	r2, [r1, #4]
 8015416:	605a      	str	r2, [r3, #4]
 8015418:	684a      	ldr	r2, [r1, #4]
 801541a:	b102      	cbz	r2, 801541e <put_memory+0xe>
 801541c:	6013      	str	r3, [r2, #0]
 801541e:	6803      	ldr	r3, [r0, #0]
 8015420:	428b      	cmp	r3, r1
 8015422:	6843      	ldr	r3, [r0, #4]
 8015424:	bf08      	it	eq
 8015426:	6002      	streq	r2, [r0, #0]
 8015428:	604b      	str	r3, [r1, #4]
 801542a:	b103      	cbz	r3, 801542e <put_memory+0x1e>
 801542c:	6019      	str	r1, [r3, #0]
 801542e:	2300      	movs	r3, #0
 8015430:	600b      	str	r3, [r1, #0]
 8015432:	6041      	str	r1, [r0, #4]
 8015434:	4770      	bx	lr
 8015436:	bf00      	nop

08015438 <rmw_destroy_client>:
 8015438:	b570      	push	{r4, r5, r6, lr}
 801543a:	b128      	cbz	r0, 8015448 <rmw_destroy_client+0x10>
 801543c:	4604      	mov	r4, r0
 801543e:	6800      	ldr	r0, [r0, #0]
 8015440:	460d      	mov	r5, r1
 8015442:	f7f7 fd43 	bl	800cecc <is_uxrce_rmw_identifier_valid>
 8015446:	b910      	cbnz	r0, 801544e <rmw_destroy_client+0x16>
 8015448:	2401      	movs	r4, #1
 801544a:	4620      	mov	r0, r4
 801544c:	bd70      	pop	{r4, r5, r6, pc}
 801544e:	6863      	ldr	r3, [r4, #4]
 8015450:	2b00      	cmp	r3, #0
 8015452:	d0f9      	beq.n	8015448 <rmw_destroy_client+0x10>
 8015454:	2d00      	cmp	r5, #0
 8015456:	d0f7      	beq.n	8015448 <rmw_destroy_client+0x10>
 8015458:	6828      	ldr	r0, [r5, #0]
 801545a:	f7f7 fd37 	bl	800cecc <is_uxrce_rmw_identifier_valid>
 801545e:	2800      	cmp	r0, #0
 8015460:	d0f2      	beq.n	8015448 <rmw_destroy_client+0x10>
 8015462:	686e      	ldr	r6, [r5, #4]
 8015464:	2e00      	cmp	r6, #0
 8015466:	d0ef      	beq.n	8015448 <rmw_destroy_client+0x10>
 8015468:	6864      	ldr	r4, [r4, #4]
 801546a:	6932      	ldr	r2, [r6, #16]
 801546c:	6920      	ldr	r0, [r4, #16]
 801546e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015472:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015476:	6819      	ldr	r1, [r3, #0]
 8015478:	f7f9 f912 	bl	800e6a0 <uxr_buffer_cancel_data>
 801547c:	4602      	mov	r2, r0
 801547e:	6920      	ldr	r0, [r4, #16]
 8015480:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015484:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015488:	f7f7 fca0 	bl	800cdcc <run_xrce_session>
 801548c:	6920      	ldr	r0, [r4, #16]
 801548e:	6932      	ldr	r2, [r6, #16]
 8015490:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015494:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015498:	6819      	ldr	r1, [r3, #0]
 801549a:	f7f8 fdd3 	bl	800e044 <uxr_buffer_delete_entity>
 801549e:	4602      	mov	r2, r0
 80154a0:	6920      	ldr	r0, [r4, #16]
 80154a2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80154a6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80154aa:	f7f7 fc8f 	bl	800cdcc <run_xrce_session>
 80154ae:	2800      	cmp	r0, #0
 80154b0:	4628      	mov	r0, r5
 80154b2:	bf14      	ite	ne
 80154b4:	2400      	movne	r4, #0
 80154b6:	2402      	moveq	r4, #2
 80154b8:	f7f7 fb72 	bl	800cba0 <rmw_uxrce_fini_client_memory>
 80154bc:	e7c5      	b.n	801544a <rmw_destroy_client+0x12>
 80154be:	bf00      	nop

080154c0 <rmw_get_implementation_identifier>:
 80154c0:	4b01      	ldr	r3, [pc, #4]	@ (80154c8 <rmw_get_implementation_identifier+0x8>)
 80154c2:	6818      	ldr	r0, [r3, #0]
 80154c4:	4770      	bx	lr
 80154c6:	bf00      	nop
 80154c8:	080195a0 	.word	0x080195a0

080154cc <create_topic>:
 80154cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154d0:	4605      	mov	r5, r0
 80154d2:	b084      	sub	sp, #16
 80154d4:	4822      	ldr	r0, [pc, #136]	@ (8015560 <create_topic+0x94>)
 80154d6:	460f      	mov	r7, r1
 80154d8:	4616      	mov	r6, r2
 80154da:	f7ff ff89 	bl	80153f0 <get_memory>
 80154de:	4604      	mov	r4, r0
 80154e0:	2800      	cmp	r0, #0
 80154e2:	d039      	beq.n	8015558 <create_topic+0x8c>
 80154e4:	692b      	ldr	r3, [r5, #16]
 80154e6:	6884      	ldr	r4, [r0, #8]
 80154e8:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8015568 <create_topic+0x9c>
 80154ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80154f0:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80154f4:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 80154f8:	1c42      	adds	r2, r0, #1
 80154fa:	2102      	movs	r1, #2
 80154fc:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8015500:	f7f9 f864 	bl	800e5cc <uxr_object_id>
 8015504:	223c      	movs	r2, #60	@ 0x3c
 8015506:	6120      	str	r0, [r4, #16]
 8015508:	4641      	mov	r1, r8
 801550a:	4638      	mov	r0, r7
 801550c:	f7f7 fcc4 	bl	800ce98 <generate_topic_name>
 8015510:	b1f0      	cbz	r0, 8015550 <create_topic+0x84>
 8015512:	4f14      	ldr	r7, [pc, #80]	@ (8015564 <create_topic+0x98>)
 8015514:	4630      	mov	r0, r6
 8015516:	2264      	movs	r2, #100	@ 0x64
 8015518:	4639      	mov	r1, r7
 801551a:	f7f7 fc8d 	bl	800ce38 <generate_type_name>
 801551e:	b1b8      	cbz	r0, 8015550 <create_topic+0x84>
 8015520:	6928      	ldr	r0, [r5, #16]
 8015522:	2306      	movs	r3, #6
 8015524:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8015528:	f8cd 8000 	str.w	r8, [sp]
 801552c:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8015530:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015534:	6811      	ldr	r1, [r2, #0]
 8015536:	696b      	ldr	r3, [r5, #20]
 8015538:	6922      	ldr	r2, [r4, #16]
 801553a:	f7f8 fe01 	bl	800e140 <uxr_buffer_create_topic_bin>
 801553e:	4602      	mov	r2, r0
 8015540:	6928      	ldr	r0, [r5, #16]
 8015542:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8015546:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801554a:	f7f7 fc3f 	bl	800cdcc <run_xrce_session>
 801554e:	b918      	cbnz	r0, 8015558 <create_topic+0x8c>
 8015550:	4620      	mov	r0, r4
 8015552:	f7f7 fb3b 	bl	800cbcc <rmw_uxrce_fini_topic_memory>
 8015556:	2400      	movs	r4, #0
 8015558:	4620      	mov	r0, r4
 801555a:	b004      	add	sp, #16
 801555c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015560:	2000ab84 	.word	0x2000ab84
 8015564:	2000ac78 	.word	0x2000ac78
 8015568:	2000ac3c 	.word	0x2000ac3c

0801556c <destroy_topic>:
 801556c:	b538      	push	{r3, r4, r5, lr}
 801556e:	6985      	ldr	r5, [r0, #24]
 8015570:	b1d5      	cbz	r5, 80155a8 <destroy_topic+0x3c>
 8015572:	4604      	mov	r4, r0
 8015574:	6928      	ldr	r0, [r5, #16]
 8015576:	6922      	ldr	r2, [r4, #16]
 8015578:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801557c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015580:	6819      	ldr	r1, [r3, #0]
 8015582:	f7f8 fd5f 	bl	800e044 <uxr_buffer_delete_entity>
 8015586:	4602      	mov	r2, r0
 8015588:	6928      	ldr	r0, [r5, #16]
 801558a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801558e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015592:	f7f7 fc1b 	bl	800cdcc <run_xrce_session>
 8015596:	2800      	cmp	r0, #0
 8015598:	4620      	mov	r0, r4
 801559a:	bf14      	ite	ne
 801559c:	2400      	movne	r4, #0
 801559e:	2402      	moveq	r4, #2
 80155a0:	f7f7 fb14 	bl	800cbcc <rmw_uxrce_fini_topic_memory>
 80155a4:	4620      	mov	r0, r4
 80155a6:	bd38      	pop	{r3, r4, r5, pc}
 80155a8:	2401      	movs	r4, #1
 80155aa:	4620      	mov	r0, r4
 80155ac:	bd38      	pop	{r3, r4, r5, pc}
 80155ae:	bf00      	nop

080155b0 <rmw_send_request>:
 80155b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80155b4:	4604      	mov	r4, r0
 80155b6:	6800      	ldr	r0, [r0, #0]
 80155b8:	b08b      	sub	sp, #44	@ 0x2c
 80155ba:	460e      	mov	r6, r1
 80155bc:	4615      	mov	r5, r2
 80155be:	b128      	cbz	r0, 80155cc <rmw_send_request+0x1c>
 80155c0:	4b21      	ldr	r3, [pc, #132]	@ (8015648 <rmw_send_request+0x98>)
 80155c2:	6819      	ldr	r1, [r3, #0]
 80155c4:	f7ea fe2c 	bl	8000220 <strcmp>
 80155c8:	2800      	cmp	r0, #0
 80155ca:	d139      	bne.n	8015640 <rmw_send_request+0x90>
 80155cc:	6864      	ldr	r4, [r4, #4]
 80155ce:	6963      	ldr	r3, [r4, #20]
 80155d0:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 80155d4:	689b      	ldr	r3, [r3, #8]
 80155d6:	4798      	blx	r3
 80155d8:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80155dc:	4630      	mov	r0, r6
 80155de:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80155e2:	4798      	blx	r3
 80155e4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80155e8:	9000      	str	r0, [sp, #0]
 80155ea:	6922      	ldr	r2, [r4, #16]
 80155ec:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80155ee:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80155f2:	ab02      	add	r3, sp, #8
 80155f4:	f7fb f8a6 	bl	8010744 <uxr_prepare_output_stream>
 80155f8:	2700      	movs	r7, #0
 80155fa:	6028      	str	r0, [r5, #0]
 80155fc:	606f      	str	r7, [r5, #4]
 80155fe:	b198      	cbz	r0, 8015628 <rmw_send_request+0x78>
 8015600:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8015604:	a902      	add	r1, sp, #8
 8015606:	4630      	mov	r0, r6
 8015608:	4798      	blx	r3
 801560a:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 801560e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8015612:	2b01      	cmp	r3, #1
 8015614:	d00c      	beq.n	8015630 <rmw_send_request+0x80>
 8015616:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8015618:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801561c:	f7f9 fe14 	bl	800f248 <uxr_run_session_until_confirm_delivery>
 8015620:	4638      	mov	r0, r7
 8015622:	b00b      	add	sp, #44	@ 0x2c
 8015624:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015628:	2001      	movs	r0, #1
 801562a:	b00b      	add	sp, #44	@ 0x2c
 801562c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015630:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015634:	f7f9 fa48 	bl	800eac8 <uxr_flash_output_streams>
 8015638:	4638      	mov	r0, r7
 801563a:	b00b      	add	sp, #44	@ 0x2c
 801563c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015640:	200c      	movs	r0, #12
 8015642:	b00b      	add	sp, #44	@ 0x2c
 8015644:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015648:	080195a0 	.word	0x080195a0

0801564c <rmw_take_request>:
 801564c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015650:	4605      	mov	r5, r0
 8015652:	6800      	ldr	r0, [r0, #0]
 8015654:	b089      	sub	sp, #36	@ 0x24
 8015656:	460c      	mov	r4, r1
 8015658:	4690      	mov	r8, r2
 801565a:	461e      	mov	r6, r3
 801565c:	b128      	cbz	r0, 801566a <rmw_take_request+0x1e>
 801565e:	4b28      	ldr	r3, [pc, #160]	@ (8015700 <rmw_take_request+0xb4>)
 8015660:	6819      	ldr	r1, [r3, #0]
 8015662:	f7ea fddd 	bl	8000220 <strcmp>
 8015666:	2800      	cmp	r0, #0
 8015668:	d146      	bne.n	80156f8 <rmw_take_request+0xac>
 801566a:	b10e      	cbz	r6, 8015670 <rmw_take_request+0x24>
 801566c:	2300      	movs	r3, #0
 801566e:	7033      	strb	r3, [r6, #0]
 8015670:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8015674:	f7f7 fb2c 	bl	800ccd0 <rmw_uxrce_clean_expired_static_input_buffer>
 8015678:	4648      	mov	r0, r9
 801567a:	f7f7 fb03 	bl	800cc84 <rmw_uxrce_find_static_input_buffer_by_owner>
 801567e:	4607      	mov	r7, r0
 8015680:	b3b0      	cbz	r0, 80156f0 <rmw_take_request+0xa4>
 8015682:	6885      	ldr	r5, [r0, #8]
 8015684:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8015688:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 801568c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8015690:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8015694:	7423      	strb	r3, [r4, #16]
 8015696:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 801569a:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 801569e:	74e2      	strb	r2, [r4, #19]
 80156a0:	f8a4 3011 	strh.w	r3, [r4, #17]
 80156a4:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80156a8:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 80156ac:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80156b0:	61e1      	str	r1, [r4, #28]
 80156b2:	6162      	str	r2, [r4, #20]
 80156b4:	61a3      	str	r3, [r4, #24]
 80156b6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80156ba:	689b      	ldr	r3, [r3, #8]
 80156bc:	4798      	blx	r3
 80156be:	6844      	ldr	r4, [r0, #4]
 80156c0:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 80156c4:	f105 0110 	add.w	r1, r5, #16
 80156c8:	4668      	mov	r0, sp
 80156ca:	f7f8 fc4b 	bl	800df64 <ucdr_init_buffer>
 80156ce:	68e3      	ldr	r3, [r4, #12]
 80156d0:	4641      	mov	r1, r8
 80156d2:	4668      	mov	r0, sp
 80156d4:	4798      	blx	r3
 80156d6:	4639      	mov	r1, r7
 80156d8:	4604      	mov	r4, r0
 80156da:	480a      	ldr	r0, [pc, #40]	@ (8015704 <rmw_take_request+0xb8>)
 80156dc:	f7ff fe98 	bl	8015410 <put_memory>
 80156e0:	b106      	cbz	r6, 80156e4 <rmw_take_request+0x98>
 80156e2:	7034      	strb	r4, [r6, #0]
 80156e4:	f084 0001 	eor.w	r0, r4, #1
 80156e8:	b2c0      	uxtb	r0, r0
 80156ea:	b009      	add	sp, #36	@ 0x24
 80156ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80156f0:	2001      	movs	r0, #1
 80156f2:	b009      	add	sp, #36	@ 0x24
 80156f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80156f8:	200c      	movs	r0, #12
 80156fa:	b009      	add	sp, #36	@ 0x24
 80156fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015700:	080195a0 	.word	0x080195a0
 8015704:	2000ab64 	.word	0x2000ab64

08015708 <rmw_send_response>:
 8015708:	b5f0      	push	{r4, r5, r6, r7, lr}
 801570a:	4605      	mov	r5, r0
 801570c:	6800      	ldr	r0, [r0, #0]
 801570e:	b091      	sub	sp, #68	@ 0x44
 8015710:	460c      	mov	r4, r1
 8015712:	4616      	mov	r6, r2
 8015714:	b128      	cbz	r0, 8015722 <rmw_send_response+0x1a>
 8015716:	4b29      	ldr	r3, [pc, #164]	@ (80157bc <rmw_send_response+0xb4>)
 8015718:	6819      	ldr	r1, [r3, #0]
 801571a:	f7ea fd81 	bl	8000220 <strcmp>
 801571e:	2800      	cmp	r0, #0
 8015720:	d141      	bne.n	80157a6 <rmw_send_response+0x9e>
 8015722:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8015726:	9306      	str	r3, [sp, #24]
 8015728:	4623      	mov	r3, r4
 801572a:	9207      	str	r2, [sp, #28]
 801572c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015730:	686d      	ldr	r5, [r5, #4]
 8015732:	789b      	ldrb	r3, [r3, #2]
 8015734:	68a1      	ldr	r1, [r4, #8]
 8015736:	f88d 2017 	strb.w	r2, [sp, #23]
 801573a:	f88d 3016 	strb.w	r3, [sp, #22]
 801573e:	68e2      	ldr	r2, [r4, #12]
 8015740:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8015744:	6860      	ldr	r0, [r4, #4]
 8015746:	f8ad 3014 	strh.w	r3, [sp, #20]
 801574a:	ab02      	add	r3, sp, #8
 801574c:	c307      	stmia	r3!, {r0, r1, r2}
 801574e:	696b      	ldr	r3, [r5, #20]
 8015750:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8015752:	68db      	ldr	r3, [r3, #12]
 8015754:	4798      	blx	r3
 8015756:	6844      	ldr	r4, [r0, #4]
 8015758:	4630      	mov	r0, r6
 801575a:	6923      	ldr	r3, [r4, #16]
 801575c:	4798      	blx	r3
 801575e:	f100 0318 	add.w	r3, r0, #24
 8015762:	6938      	ldr	r0, [r7, #16]
 8015764:	9300      	str	r3, [sp, #0]
 8015766:	692a      	ldr	r2, [r5, #16]
 8015768:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801576a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801576e:	ab08      	add	r3, sp, #32
 8015770:	f7fa ffe8 	bl	8010744 <uxr_prepare_output_stream>
 8015774:	b910      	cbnz	r0, 801577c <rmw_send_response+0x74>
 8015776:	2001      	movs	r0, #1
 8015778:	b011      	add	sp, #68	@ 0x44
 801577a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801577c:	a902      	add	r1, sp, #8
 801577e:	a808      	add	r0, sp, #32
 8015780:	f7fc f918 	bl	80119b4 <uxr_serialize_SampleIdentity>
 8015784:	68a3      	ldr	r3, [r4, #8]
 8015786:	a908      	add	r1, sp, #32
 8015788:	4630      	mov	r0, r6
 801578a:	4798      	blx	r3
 801578c:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8015790:	6938      	ldr	r0, [r7, #16]
 8015792:	2b01      	cmp	r3, #1
 8015794:	d00a      	beq.n	80157ac <rmw_send_response+0xa4>
 8015796:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8015798:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801579c:	f7f9 fd54 	bl	800f248 <uxr_run_session_until_confirm_delivery>
 80157a0:	2000      	movs	r0, #0
 80157a2:	b011      	add	sp, #68	@ 0x44
 80157a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157a6:	200c      	movs	r0, #12
 80157a8:	b011      	add	sp, #68	@ 0x44
 80157aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157ac:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80157b0:	f7f9 f98a 	bl	800eac8 <uxr_flash_output_streams>
 80157b4:	2000      	movs	r0, #0
 80157b6:	b011      	add	sp, #68	@ 0x44
 80157b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157ba:	bf00      	nop
 80157bc:	080195a0 	.word	0x080195a0

080157c0 <rmw_take_response>:
 80157c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157c4:	4604      	mov	r4, r0
 80157c6:	6800      	ldr	r0, [r0, #0]
 80157c8:	b088      	sub	sp, #32
 80157ca:	4688      	mov	r8, r1
 80157cc:	4617      	mov	r7, r2
 80157ce:	461d      	mov	r5, r3
 80157d0:	b120      	cbz	r0, 80157dc <rmw_take_response+0x1c>
 80157d2:	4b1e      	ldr	r3, [pc, #120]	@ (801584c <rmw_take_response+0x8c>)
 80157d4:	6819      	ldr	r1, [r3, #0]
 80157d6:	f7ea fd23 	bl	8000220 <strcmp>
 80157da:	bb78      	cbnz	r0, 801583c <rmw_take_response+0x7c>
 80157dc:	b10d      	cbz	r5, 80157e2 <rmw_take_response+0x22>
 80157de:	2300      	movs	r3, #0
 80157e0:	702b      	strb	r3, [r5, #0]
 80157e2:	6864      	ldr	r4, [r4, #4]
 80157e4:	f7f7 fa74 	bl	800ccd0 <rmw_uxrce_clean_expired_static_input_buffer>
 80157e8:	4620      	mov	r0, r4
 80157ea:	f7f7 fa4b 	bl	800cc84 <rmw_uxrce_find_static_input_buffer_by_owner>
 80157ee:	4606      	mov	r6, r0
 80157f0:	b340      	cbz	r0, 8015844 <rmw_take_response+0x84>
 80157f2:	6963      	ldr	r3, [r4, #20]
 80157f4:	6884      	ldr	r4, [r0, #8]
 80157f6:	68db      	ldr	r3, [r3, #12]
 80157f8:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 80157fc:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8015800:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8015804:	4798      	blx	r3
 8015806:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801580a:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 801580e:	f104 0110 	add.w	r1, r4, #16
 8015812:	4668      	mov	r0, sp
 8015814:	f7f8 fba6 	bl	800df64 <ucdr_init_buffer>
 8015818:	4639      	mov	r1, r7
 801581a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801581e:	4668      	mov	r0, sp
 8015820:	4798      	blx	r3
 8015822:	4631      	mov	r1, r6
 8015824:	4604      	mov	r4, r0
 8015826:	480a      	ldr	r0, [pc, #40]	@ (8015850 <rmw_take_response+0x90>)
 8015828:	f7ff fdf2 	bl	8015410 <put_memory>
 801582c:	b105      	cbz	r5, 8015830 <rmw_take_response+0x70>
 801582e:	702c      	strb	r4, [r5, #0]
 8015830:	f084 0001 	eor.w	r0, r4, #1
 8015834:	b2c0      	uxtb	r0, r0
 8015836:	b008      	add	sp, #32
 8015838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801583c:	200c      	movs	r0, #12
 801583e:	b008      	add	sp, #32
 8015840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015844:	2001      	movs	r0, #1
 8015846:	b008      	add	sp, #32
 8015848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801584c:	080195a0 	.word	0x080195a0
 8015850:	2000ab64 	.word	0x2000ab64

08015854 <rmw_take_with_info>:
 8015854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015856:	4604      	mov	r4, r0
 8015858:	6800      	ldr	r0, [r0, #0]
 801585a:	b089      	sub	sp, #36	@ 0x24
 801585c:	460f      	mov	r7, r1
 801585e:	4615      	mov	r5, r2
 8015860:	b128      	cbz	r0, 801586e <rmw_take_with_info+0x1a>
 8015862:	4b24      	ldr	r3, [pc, #144]	@ (80158f4 <rmw_take_with_info+0xa0>)
 8015864:	6819      	ldr	r1, [r3, #0]
 8015866:	f7ea fcdb 	bl	8000220 <strcmp>
 801586a:	2800      	cmp	r0, #0
 801586c:	d13e      	bne.n	80158ec <rmw_take_with_info+0x98>
 801586e:	b305      	cbz	r5, 80158b2 <rmw_take_with_info+0x5e>
 8015870:	6864      	ldr	r4, [r4, #4]
 8015872:	2300      	movs	r3, #0
 8015874:	702b      	strb	r3, [r5, #0]
 8015876:	f7f7 fa2b 	bl	800ccd0 <rmw_uxrce_clean_expired_static_input_buffer>
 801587a:	4620      	mov	r0, r4
 801587c:	f7f7 fa02 	bl	800cc84 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015880:	4606      	mov	r6, r0
 8015882:	b1f0      	cbz	r0, 80158c2 <rmw_take_with_info+0x6e>
 8015884:	6881      	ldr	r1, [r0, #8]
 8015886:	4668      	mov	r0, sp
 8015888:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801588c:	3110      	adds	r1, #16
 801588e:	f7f8 fb69 	bl	800df64 <ucdr_init_buffer>
 8015892:	69a3      	ldr	r3, [r4, #24]
 8015894:	4639      	mov	r1, r7
 8015896:	68db      	ldr	r3, [r3, #12]
 8015898:	4668      	mov	r0, sp
 801589a:	4798      	blx	r3
 801589c:	4631      	mov	r1, r6
 801589e:	4604      	mov	r4, r0
 80158a0:	4815      	ldr	r0, [pc, #84]	@ (80158f8 <rmw_take_with_info+0xa4>)
 80158a2:	f7ff fdb5 	bl	8015410 <put_memory>
 80158a6:	702c      	strb	r4, [r5, #0]
 80158a8:	f084 0001 	eor.w	r0, r4, #1
 80158ac:	b2c0      	uxtb	r0, r0
 80158ae:	b009      	add	sp, #36	@ 0x24
 80158b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158b2:	6864      	ldr	r4, [r4, #4]
 80158b4:	f7f7 fa0c 	bl	800ccd0 <rmw_uxrce_clean_expired_static_input_buffer>
 80158b8:	4620      	mov	r0, r4
 80158ba:	f7f7 f9e3 	bl	800cc84 <rmw_uxrce_find_static_input_buffer_by_owner>
 80158be:	4605      	mov	r5, r0
 80158c0:	b910      	cbnz	r0, 80158c8 <rmw_take_with_info+0x74>
 80158c2:	2001      	movs	r0, #1
 80158c4:	b009      	add	sp, #36	@ 0x24
 80158c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158c8:	68a9      	ldr	r1, [r5, #8]
 80158ca:	4668      	mov	r0, sp
 80158cc:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80158d0:	3110      	adds	r1, #16
 80158d2:	f7f8 fb47 	bl	800df64 <ucdr_init_buffer>
 80158d6:	69a3      	ldr	r3, [r4, #24]
 80158d8:	4639      	mov	r1, r7
 80158da:	68db      	ldr	r3, [r3, #12]
 80158dc:	4668      	mov	r0, sp
 80158de:	4798      	blx	r3
 80158e0:	4629      	mov	r1, r5
 80158e2:	4604      	mov	r4, r0
 80158e4:	4804      	ldr	r0, [pc, #16]	@ (80158f8 <rmw_take_with_info+0xa4>)
 80158e6:	f7ff fd93 	bl	8015410 <put_memory>
 80158ea:	e7dd      	b.n	80158a8 <rmw_take_with_info+0x54>
 80158ec:	200c      	movs	r0, #12
 80158ee:	b009      	add	sp, #36	@ 0x24
 80158f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158f2:	bf00      	nop
 80158f4:	080195a0 	.word	0x080195a0
 80158f8:	2000ab64 	.word	0x2000ab64

080158fc <rmw_wait>:
 80158fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015900:	b089      	sub	sp, #36	@ 0x24
 8015902:	4605      	mov	r5, r0
 8015904:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8015906:	460e      	mov	r6, r1
 8015908:	4698      	mov	r8, r3
 801590a:	4691      	mov	r9, r2
 801590c:	2a00      	cmp	r2, #0
 801590e:	f000 810a 	beq.w	8015b26 <rmw_wait+0x22a>
 8015912:	b16c      	cbz	r4, 8015930 <rmw_wait+0x34>
 8015914:	4bae      	ldr	r3, [pc, #696]	@ (8015bd0 <rmw_wait+0x2d4>)
 8015916:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015918:	af04      	add	r7, sp, #16
 801591a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801591e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015922:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015926:	f7ff faaf 	bl	8014e88 <rmw_time_equal>
 801592a:	2800      	cmp	r0, #0
 801592c:	f000 8127 	beq.w	8015b7e <rmw_wait+0x282>
 8015930:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8015934:	f7f7 f9cc 	bl	800ccd0 <rmw_uxrce_clean_expired_static_input_buffer>
 8015938:	4ba6      	ldr	r3, [pc, #664]	@ (8015bd4 <rmw_wait+0x2d8>)
 801593a:	681c      	ldr	r4, [r3, #0]
 801593c:	b14c      	cbz	r4, 8015952 <rmw_wait+0x56>
 801593e:	4623      	mov	r3, r4
 8015940:	2100      	movs	r1, #0
 8015942:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8015946:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801594a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801594e:	2b00      	cmp	r3, #0
 8015950:	d1f7      	bne.n	8015942 <rmw_wait+0x46>
 8015952:	f1b9 0f00 	cmp.w	r9, #0
 8015956:	d011      	beq.n	801597c <rmw_wait+0x80>
 8015958:	f8d9 1000 	ldr.w	r1, [r9]
 801595c:	b171      	cbz	r1, 801597c <rmw_wait+0x80>
 801595e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8015962:	2300      	movs	r3, #0
 8015964:	2001      	movs	r0, #1
 8015966:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801596a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801596c:	6912      	ldr	r2, [r2, #16]
 801596e:	3301      	adds	r3, #1
 8015970:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015974:	4299      	cmp	r1, r3
 8015976:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801597a:	d1f4      	bne.n	8015966 <rmw_wait+0x6a>
 801597c:	f1b8 0f00 	cmp.w	r8, #0
 8015980:	d011      	beq.n	80159a6 <rmw_wait+0xaa>
 8015982:	f8d8 1000 	ldr.w	r1, [r8]
 8015986:	b171      	cbz	r1, 80159a6 <rmw_wait+0xaa>
 8015988:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801598c:	2300      	movs	r3, #0
 801598e:	2001      	movs	r0, #1
 8015990:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015994:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8015996:	6912      	ldr	r2, [r2, #16]
 8015998:	3301      	adds	r3, #1
 801599a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801599e:	4299      	cmp	r1, r3
 80159a0:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80159a4:	d1f4      	bne.n	8015990 <rmw_wait+0x94>
 80159a6:	b185      	cbz	r5, 80159ca <rmw_wait+0xce>
 80159a8:	6829      	ldr	r1, [r5, #0]
 80159aa:	b171      	cbz	r1, 80159ca <rmw_wait+0xce>
 80159ac:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80159b0:	2300      	movs	r3, #0
 80159b2:	2001      	movs	r0, #1
 80159b4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80159b8:	6a12      	ldr	r2, [r2, #32]
 80159ba:	6912      	ldr	r2, [r2, #16]
 80159bc:	3301      	adds	r3, #1
 80159be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80159c2:	4299      	cmp	r1, r3
 80159c4:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80159c8:	d1f4      	bne.n	80159b4 <rmw_wait+0xb8>
 80159ca:	b34c      	cbz	r4, 8015a20 <rmw_wait+0x124>
 80159cc:	4622      	mov	r2, r4
 80159ce:	2300      	movs	r3, #0
 80159d0:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80159d4:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 80159d8:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 80159dc:	440b      	add	r3, r1
 80159de:	b2db      	uxtb	r3, r3
 80159e0:	2a00      	cmp	r2, #0
 80159e2:	d1f5      	bne.n	80159d0 <rmw_wait+0xd4>
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	f000 8084 	beq.w	8015af2 <rmw_wait+0x1f6>
 80159ea:	1c7a      	adds	r2, r7, #1
 80159ec:	d00d      	beq.n	8015a0a <rmw_wait+0x10e>
 80159ee:	ee07 7a90 	vmov	s15, r7
 80159f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80159f6:	ee07 3a90 	vmov	s15, r3
 80159fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80159fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015a02:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8015a06:	ee17 7a90 	vmov	r7, s15
 8015a0a:	68a0      	ldr	r0, [r4, #8]
 8015a0c:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8015a10:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	f040 8090 	bne.w	8015b3a <rmw_wait+0x23e>
 8015a1a:	6864      	ldr	r4, [r4, #4]
 8015a1c:	2c00      	cmp	r4, #0
 8015a1e:	d1f4      	bne.n	8015a0a <rmw_wait+0x10e>
 8015a20:	f1b9 0f00 	cmp.w	r9, #0
 8015a24:	f000 80bc 	beq.w	8015ba0 <rmw_wait+0x2a4>
 8015a28:	f8d9 7000 	ldr.w	r7, [r9]
 8015a2c:	2f00      	cmp	r7, #0
 8015a2e:	f000 808e 	beq.w	8015b4e <rmw_wait+0x252>
 8015a32:	2400      	movs	r4, #0
 8015a34:	4627      	mov	r7, r4
 8015a36:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015a3a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015a3e:	f7f7 f921 	bl	800cc84 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015a42:	2800      	cmp	r0, #0
 8015a44:	d05f      	beq.n	8015b06 <rmw_wait+0x20a>
 8015a46:	f8d9 3000 	ldr.w	r3, [r9]
 8015a4a:	3401      	adds	r4, #1
 8015a4c:	42a3      	cmp	r3, r4
 8015a4e:	f04f 0701 	mov.w	r7, #1
 8015a52:	d8f0      	bhi.n	8015a36 <rmw_wait+0x13a>
 8015a54:	f1b8 0f00 	cmp.w	r8, #0
 8015a58:	d012      	beq.n	8015a80 <rmw_wait+0x184>
 8015a5a:	f8d8 3000 	ldr.w	r3, [r8]
 8015a5e:	b17b      	cbz	r3, 8015a80 <rmw_wait+0x184>
 8015a60:	2400      	movs	r4, #0
 8015a62:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015a66:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015a6a:	f7f7 f90b 	bl	800cc84 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015a6e:	2800      	cmp	r0, #0
 8015a70:	d051      	beq.n	8015b16 <rmw_wait+0x21a>
 8015a72:	f8d8 3000 	ldr.w	r3, [r8]
 8015a76:	3401      	adds	r4, #1
 8015a78:	42a3      	cmp	r3, r4
 8015a7a:	f04f 0701 	mov.w	r7, #1
 8015a7e:	d8f0      	bhi.n	8015a62 <rmw_wait+0x166>
 8015a80:	b1dd      	cbz	r5, 8015aba <rmw_wait+0x1be>
 8015a82:	682b      	ldr	r3, [r5, #0]
 8015a84:	b1cb      	cbz	r3, 8015aba <rmw_wait+0x1be>
 8015a86:	2400      	movs	r4, #0
 8015a88:	686b      	ldr	r3, [r5, #4]
 8015a8a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015a8e:	f7f7 f8f9 	bl	800cc84 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015a92:	b158      	cbz	r0, 8015aac <rmw_wait+0x1b0>
 8015a94:	682b      	ldr	r3, [r5, #0]
 8015a96:	3401      	adds	r4, #1
 8015a98:	42a3      	cmp	r3, r4
 8015a9a:	d969      	bls.n	8015b70 <rmw_wait+0x274>
 8015a9c:	686b      	ldr	r3, [r5, #4]
 8015a9e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015aa2:	2701      	movs	r7, #1
 8015aa4:	f7f7 f8ee 	bl	800cc84 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015aa8:	2800      	cmp	r0, #0
 8015aaa:	d1f3      	bne.n	8015a94 <rmw_wait+0x198>
 8015aac:	e9d5 3200 	ldrd	r3, r2, [r5]
 8015ab0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015ab4:	3401      	adds	r4, #1
 8015ab6:	42a3      	cmp	r3, r4
 8015ab8:	d8e6      	bhi.n	8015a88 <rmw_wait+0x18c>
 8015aba:	b1a6      	cbz	r6, 8015ae6 <rmw_wait+0x1ea>
 8015abc:	6834      	ldr	r4, [r6, #0]
 8015abe:	b194      	cbz	r4, 8015ae6 <rmw_wait+0x1ea>
 8015ac0:	2300      	movs	r3, #0
 8015ac2:	461d      	mov	r5, r3
 8015ac4:	e004      	b.n	8015ad0 <rmw_wait+0x1d4>
 8015ac6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8015aca:	3301      	adds	r3, #1
 8015acc:	42a3      	cmp	r3, r4
 8015ace:	d00a      	beq.n	8015ae6 <rmw_wait+0x1ea>
 8015ad0:	6870      	ldr	r0, [r6, #4]
 8015ad2:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8015ad6:	7c0a      	ldrb	r2, [r1, #16]
 8015ad8:	2a00      	cmp	r2, #0
 8015ada:	d0f4      	beq.n	8015ac6 <rmw_wait+0x1ca>
 8015adc:	3301      	adds	r3, #1
 8015ade:	42a3      	cmp	r3, r4
 8015ae0:	740d      	strb	r5, [r1, #16]
 8015ae2:	4617      	mov	r7, r2
 8015ae4:	d1f4      	bne.n	8015ad0 <rmw_wait+0x1d4>
 8015ae6:	2f00      	cmp	r7, #0
 8015ae8:	d03e      	beq.n	8015b68 <rmw_wait+0x26c>
 8015aea:	2000      	movs	r0, #0
 8015aec:	b009      	add	sp, #36	@ 0x24
 8015aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015af2:	68a0      	ldr	r0, [r4, #8]
 8015af4:	2100      	movs	r1, #0
 8015af6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015afa:	f7f9 fb6b 	bl	800f1d4 <uxr_run_session_timeout>
 8015afe:	6864      	ldr	r4, [r4, #4]
 8015b00:	2c00      	cmp	r4, #0
 8015b02:	d1f6      	bne.n	8015af2 <rmw_wait+0x1f6>
 8015b04:	e78c      	b.n	8015a20 <rmw_wait+0x124>
 8015b06:	e9d9 3200 	ldrd	r3, r2, [r9]
 8015b0a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015b0e:	3401      	adds	r4, #1
 8015b10:	42a3      	cmp	r3, r4
 8015b12:	d890      	bhi.n	8015a36 <rmw_wait+0x13a>
 8015b14:	e79e      	b.n	8015a54 <rmw_wait+0x158>
 8015b16:	e9d8 3200 	ldrd	r3, r2, [r8]
 8015b1a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015b1e:	3401      	adds	r4, #1
 8015b20:	429c      	cmp	r4, r3
 8015b22:	d39e      	bcc.n	8015a62 <rmw_wait+0x166>
 8015b24:	e7ac      	b.n	8015a80 <rmw_wait+0x184>
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	f47f aef3 	bne.w	8015912 <rmw_wait+0x16>
 8015b2c:	2800      	cmp	r0, #0
 8015b2e:	f47f aef0 	bne.w	8015912 <rmw_wait+0x16>
 8015b32:	2900      	cmp	r1, #0
 8015b34:	f47f aeed 	bne.w	8015912 <rmw_wait+0x16>
 8015b38:	e7d7      	b.n	8015aea <rmw_wait+0x1ee>
 8015b3a:	4639      	mov	r1, r7
 8015b3c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015b40:	f7f9 fb62 	bl	800f208 <uxr_run_session_until_data>
 8015b44:	6864      	ldr	r4, [r4, #4]
 8015b46:	2c00      	cmp	r4, #0
 8015b48:	f47f af5f 	bne.w	8015a0a <rmw_wait+0x10e>
 8015b4c:	e768      	b.n	8015a20 <rmw_wait+0x124>
 8015b4e:	f1b8 0f00 	cmp.w	r8, #0
 8015b52:	d032      	beq.n	8015bba <rmw_wait+0x2be>
 8015b54:	f8d8 3000 	ldr.w	r3, [r8]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d181      	bne.n	8015a60 <rmw_wait+0x164>
 8015b5c:	461f      	mov	r7, r3
 8015b5e:	2d00      	cmp	r5, #0
 8015b60:	d18f      	bne.n	8015a82 <rmw_wait+0x186>
 8015b62:	462f      	mov	r7, r5
 8015b64:	2e00      	cmp	r6, #0
 8015b66:	d1a9      	bne.n	8015abc <rmw_wait+0x1c0>
 8015b68:	2002      	movs	r0, #2
 8015b6a:	b009      	add	sp, #36	@ 0x24
 8015b6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b70:	2e00      	cmp	r6, #0
 8015b72:	d0ba      	beq.n	8015aea <rmw_wait+0x1ee>
 8015b74:	6834      	ldr	r4, [r6, #0]
 8015b76:	2701      	movs	r7, #1
 8015b78:	2c00      	cmp	r4, #0
 8015b7a:	d1a1      	bne.n	8015ac0 <rmw_wait+0x1c4>
 8015b7c:	e7b5      	b.n	8015aea <rmw_wait+0x1ee>
 8015b7e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015b82:	f7ff f9d5 	bl	8014f30 <rmw_time_total_nsec>
 8015b86:	2300      	movs	r3, #0
 8015b88:	4a13      	ldr	r2, [pc, #76]	@ (8015bd8 <rmw_wait+0x2dc>)
 8015b8a:	f7ea ffef 	bl	8000b6c <__aeabi_uldivmod>
 8015b8e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8015b92:	f171 0300 	sbcs.w	r3, r1, #0
 8015b96:	4607      	mov	r7, r0
 8015b98:	bfa8      	it	ge
 8015b9a:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8015b9e:	e6c9      	b.n	8015934 <rmw_wait+0x38>
 8015ba0:	f1b8 0f00 	cmp.w	r8, #0
 8015ba4:	d009      	beq.n	8015bba <rmw_wait+0x2be>
 8015ba6:	f8d8 3000 	ldr.w	r3, [r8]
 8015baa:	464f      	mov	r7, r9
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	f47f af57 	bne.w	8015a60 <rmw_wait+0x164>
 8015bb2:	2d00      	cmp	r5, #0
 8015bb4:	f47f af65 	bne.w	8015a82 <rmw_wait+0x186>
 8015bb8:	e7d3      	b.n	8015b62 <rmw_wait+0x266>
 8015bba:	b17d      	cbz	r5, 8015bdc <rmw_wait+0x2e0>
 8015bbc:	682b      	ldr	r3, [r5, #0]
 8015bbe:	4647      	mov	r7, r8
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	f47f af60 	bne.w	8015a86 <rmw_wait+0x18a>
 8015bc6:	2e00      	cmp	r6, #0
 8015bc8:	f47f af78 	bne.w	8015abc <rmw_wait+0x1c0>
 8015bcc:	e7cc      	b.n	8015b68 <rmw_wait+0x26c>
 8015bce:	bf00      	nop
 8015bd0:	08018a40 	.word	0x08018a40
 8015bd4:	2000ab54 	.word	0x2000ab54
 8015bd8:	000f4240 	.word	0x000f4240
 8015bdc:	2e00      	cmp	r6, #0
 8015bde:	d0c3      	beq.n	8015b68 <rmw_wait+0x26c>
 8015be0:	6834      	ldr	r4, [r6, #0]
 8015be2:	462f      	mov	r7, r5
 8015be4:	2c00      	cmp	r4, #0
 8015be6:	f47f af6b 	bne.w	8015ac0 <rmw_wait+0x1c4>
 8015bea:	e7bd      	b.n	8015b68 <rmw_wait+0x26c>

08015bec <rmw_create_wait_set>:
 8015bec:	b508      	push	{r3, lr}
 8015bee:	4803      	ldr	r0, [pc, #12]	@ (8015bfc <rmw_create_wait_set+0x10>)
 8015bf0:	f7ff fbfe 	bl	80153f0 <get_memory>
 8015bf4:	b108      	cbz	r0, 8015bfa <rmw_create_wait_set+0xe>
 8015bf6:	6880      	ldr	r0, [r0, #8]
 8015bf8:	3010      	adds	r0, #16
 8015bfa:	bd08      	pop	{r3, pc}
 8015bfc:	2000ab94 	.word	0x2000ab94

08015c00 <rmw_destroy_wait_set>:
 8015c00:	b508      	push	{r3, lr}
 8015c02:	4b08      	ldr	r3, [pc, #32]	@ (8015c24 <rmw_destroy_wait_set+0x24>)
 8015c04:	6819      	ldr	r1, [r3, #0]
 8015c06:	b911      	cbnz	r1, 8015c0e <rmw_destroy_wait_set+0xe>
 8015c08:	e00a      	b.n	8015c20 <rmw_destroy_wait_set+0x20>
 8015c0a:	6849      	ldr	r1, [r1, #4]
 8015c0c:	b141      	cbz	r1, 8015c20 <rmw_destroy_wait_set+0x20>
 8015c0e:	688b      	ldr	r3, [r1, #8]
 8015c10:	3310      	adds	r3, #16
 8015c12:	4298      	cmp	r0, r3
 8015c14:	d1f9      	bne.n	8015c0a <rmw_destroy_wait_set+0xa>
 8015c16:	4803      	ldr	r0, [pc, #12]	@ (8015c24 <rmw_destroy_wait_set+0x24>)
 8015c18:	f7ff fbfa 	bl	8015410 <put_memory>
 8015c1c:	2000      	movs	r0, #0
 8015c1e:	bd08      	pop	{r3, pc}
 8015c20:	2001      	movs	r0, #1
 8015c22:	bd08      	pop	{r3, pc}
 8015c24:	2000ab94 	.word	0x2000ab94

08015c28 <rmw_uros_epoch_nanos>:
 8015c28:	4b05      	ldr	r3, [pc, #20]	@ (8015c40 <rmw_uros_epoch_nanos+0x18>)
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	b123      	cbz	r3, 8015c38 <rmw_uros_epoch_nanos+0x10>
 8015c2e:	6898      	ldr	r0, [r3, #8]
 8015c30:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015c34:	f7f8 bf3e 	b.w	800eab4 <uxr_epoch_nanos>
 8015c38:	2000      	movs	r0, #0
 8015c3a:	2100      	movs	r1, #0
 8015c3c:	4770      	bx	lr
 8015c3e:	bf00      	nop
 8015c40:	2000ab54 	.word	0x2000ab54

08015c44 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8015c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c48:	6805      	ldr	r5, [r0, #0]
 8015c4a:	4604      	mov	r4, r0
 8015c4c:	4628      	mov	r0, r5
 8015c4e:	460e      	mov	r6, r1
 8015c50:	f7ea fae6 	bl	8000220 <strcmp>
 8015c54:	b1c8      	cbz	r0, 8015c8a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8015c56:	4b11      	ldr	r3, [pc, #68]	@ (8015c9c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	429d      	cmp	r5, r3
 8015c5c:	d112      	bne.n	8015c84 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8015c5e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8015c62:	f8d8 4000 	ldr.w	r4, [r8]
 8015c66:	b16c      	cbz	r4, 8015c84 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8015c68:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8015c6c:	2700      	movs	r7, #0
 8015c6e:	3d04      	subs	r5, #4
 8015c70:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8015c74:	4631      	mov	r1, r6
 8015c76:	f7ea fad3 	bl	8000220 <strcmp>
 8015c7a:	00bb      	lsls	r3, r7, #2
 8015c7c:	b140      	cbz	r0, 8015c90 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8015c7e:	3701      	adds	r7, #1
 8015c80:	42bc      	cmp	r4, r7
 8015c82:	d1f5      	bne.n	8015c70 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8015c84:	2000      	movs	r0, #0
 8015c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c8a:	4620      	mov	r0, r4
 8015c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c90:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015c94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015c98:	58d3      	ldr	r3, [r2, r3]
 8015c9a:	4718      	bx	r3
 8015c9c:	200000b4 	.word	0x200000b4

08015ca0 <std_msgs__msg__Int32__init>:
 8015ca0:	3800      	subs	r0, #0
 8015ca2:	bf18      	it	ne
 8015ca4:	2001      	movne	r0, #1
 8015ca6:	4770      	bx	lr

08015ca8 <std_msgs__msg__Int32__fini>:
 8015ca8:	4770      	bx	lr
 8015caa:	bf00      	nop

08015cac <ucdr_serialize_endian_array_char>:
 8015cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cb0:	4619      	mov	r1, r3
 8015cb2:	461f      	mov	r7, r3
 8015cb4:	4605      	mov	r5, r0
 8015cb6:	4690      	mov	r8, r2
 8015cb8:	f7f8 f900 	bl	800debc <ucdr_check_buffer_available_for>
 8015cbc:	b9e0      	cbnz	r0, 8015cf8 <ucdr_serialize_endian_array_char+0x4c>
 8015cbe:	463e      	mov	r6, r7
 8015cc0:	e009      	b.n	8015cd6 <ucdr_serialize_endian_array_char+0x2a>
 8015cc2:	68a8      	ldr	r0, [r5, #8]
 8015cc4:	f001 ff81 	bl	8017bca <memcpy>
 8015cc8:	68ab      	ldr	r3, [r5, #8]
 8015cca:	6928      	ldr	r0, [r5, #16]
 8015ccc:	4423      	add	r3, r4
 8015cce:	4420      	add	r0, r4
 8015cd0:	1b36      	subs	r6, r6, r4
 8015cd2:	60ab      	str	r3, [r5, #8]
 8015cd4:	6128      	str	r0, [r5, #16]
 8015cd6:	4631      	mov	r1, r6
 8015cd8:	2201      	movs	r2, #1
 8015cda:	4628      	mov	r0, r5
 8015cdc:	f7f8 f976 	bl	800dfcc <ucdr_check_final_buffer_behavior_array>
 8015ce0:	1bb9      	subs	r1, r7, r6
 8015ce2:	4441      	add	r1, r8
 8015ce4:	4604      	mov	r4, r0
 8015ce6:	4602      	mov	r2, r0
 8015ce8:	2800      	cmp	r0, #0
 8015cea:	d1ea      	bne.n	8015cc2 <ucdr_serialize_endian_array_char+0x16>
 8015cec:	2301      	movs	r3, #1
 8015cee:	7da8      	ldrb	r0, [r5, #22]
 8015cf0:	756b      	strb	r3, [r5, #21]
 8015cf2:	4058      	eors	r0, r3
 8015cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cf8:	463a      	mov	r2, r7
 8015cfa:	68a8      	ldr	r0, [r5, #8]
 8015cfc:	4641      	mov	r1, r8
 8015cfe:	f001 ff64 	bl	8017bca <memcpy>
 8015d02:	68aa      	ldr	r2, [r5, #8]
 8015d04:	692b      	ldr	r3, [r5, #16]
 8015d06:	443a      	add	r2, r7
 8015d08:	443b      	add	r3, r7
 8015d0a:	60aa      	str	r2, [r5, #8]
 8015d0c:	612b      	str	r3, [r5, #16]
 8015d0e:	e7ed      	b.n	8015cec <ucdr_serialize_endian_array_char+0x40>

08015d10 <ucdr_deserialize_endian_array_char>:
 8015d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d14:	4619      	mov	r1, r3
 8015d16:	461f      	mov	r7, r3
 8015d18:	4605      	mov	r5, r0
 8015d1a:	4690      	mov	r8, r2
 8015d1c:	f7f8 f8ce 	bl	800debc <ucdr_check_buffer_available_for>
 8015d20:	b9e0      	cbnz	r0, 8015d5c <ucdr_deserialize_endian_array_char+0x4c>
 8015d22:	463e      	mov	r6, r7
 8015d24:	e009      	b.n	8015d3a <ucdr_deserialize_endian_array_char+0x2a>
 8015d26:	68a9      	ldr	r1, [r5, #8]
 8015d28:	f001 ff4f 	bl	8017bca <memcpy>
 8015d2c:	68ab      	ldr	r3, [r5, #8]
 8015d2e:	6928      	ldr	r0, [r5, #16]
 8015d30:	4423      	add	r3, r4
 8015d32:	4420      	add	r0, r4
 8015d34:	1b36      	subs	r6, r6, r4
 8015d36:	60ab      	str	r3, [r5, #8]
 8015d38:	6128      	str	r0, [r5, #16]
 8015d3a:	2201      	movs	r2, #1
 8015d3c:	4631      	mov	r1, r6
 8015d3e:	4628      	mov	r0, r5
 8015d40:	f7f8 f944 	bl	800dfcc <ucdr_check_final_buffer_behavior_array>
 8015d44:	4604      	mov	r4, r0
 8015d46:	1bb8      	subs	r0, r7, r6
 8015d48:	4440      	add	r0, r8
 8015d4a:	4622      	mov	r2, r4
 8015d4c:	2c00      	cmp	r4, #0
 8015d4e:	d1ea      	bne.n	8015d26 <ucdr_deserialize_endian_array_char+0x16>
 8015d50:	2301      	movs	r3, #1
 8015d52:	7da8      	ldrb	r0, [r5, #22]
 8015d54:	756b      	strb	r3, [r5, #21]
 8015d56:	4058      	eors	r0, r3
 8015d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d5c:	463a      	mov	r2, r7
 8015d5e:	68a9      	ldr	r1, [r5, #8]
 8015d60:	4640      	mov	r0, r8
 8015d62:	f001 ff32 	bl	8017bca <memcpy>
 8015d66:	68aa      	ldr	r2, [r5, #8]
 8015d68:	692b      	ldr	r3, [r5, #16]
 8015d6a:	443a      	add	r2, r7
 8015d6c:	443b      	add	r3, r7
 8015d6e:	60aa      	str	r2, [r5, #8]
 8015d70:	612b      	str	r3, [r5, #16]
 8015d72:	e7ed      	b.n	8015d50 <ucdr_deserialize_endian_array_char+0x40>

08015d74 <ucdr_serialize_array_uint8_t>:
 8015d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d78:	4688      	mov	r8, r1
 8015d7a:	4611      	mov	r1, r2
 8015d7c:	4617      	mov	r7, r2
 8015d7e:	4605      	mov	r5, r0
 8015d80:	f7f8 f89c 	bl	800debc <ucdr_check_buffer_available_for>
 8015d84:	b9e0      	cbnz	r0, 8015dc0 <ucdr_serialize_array_uint8_t+0x4c>
 8015d86:	463e      	mov	r6, r7
 8015d88:	e009      	b.n	8015d9e <ucdr_serialize_array_uint8_t+0x2a>
 8015d8a:	68a8      	ldr	r0, [r5, #8]
 8015d8c:	f001 ff1d 	bl	8017bca <memcpy>
 8015d90:	68aa      	ldr	r2, [r5, #8]
 8015d92:	692b      	ldr	r3, [r5, #16]
 8015d94:	4422      	add	r2, r4
 8015d96:	4423      	add	r3, r4
 8015d98:	1b36      	subs	r6, r6, r4
 8015d9a:	60aa      	str	r2, [r5, #8]
 8015d9c:	612b      	str	r3, [r5, #16]
 8015d9e:	4631      	mov	r1, r6
 8015da0:	2201      	movs	r2, #1
 8015da2:	4628      	mov	r0, r5
 8015da4:	f7f8 f912 	bl	800dfcc <ucdr_check_final_buffer_behavior_array>
 8015da8:	1bb9      	subs	r1, r7, r6
 8015daa:	4441      	add	r1, r8
 8015dac:	4604      	mov	r4, r0
 8015dae:	4602      	mov	r2, r0
 8015db0:	2800      	cmp	r0, #0
 8015db2:	d1ea      	bne.n	8015d8a <ucdr_serialize_array_uint8_t+0x16>
 8015db4:	2301      	movs	r3, #1
 8015db6:	7da8      	ldrb	r0, [r5, #22]
 8015db8:	756b      	strb	r3, [r5, #21]
 8015dba:	4058      	eors	r0, r3
 8015dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015dc0:	463a      	mov	r2, r7
 8015dc2:	68a8      	ldr	r0, [r5, #8]
 8015dc4:	4641      	mov	r1, r8
 8015dc6:	f001 ff00 	bl	8017bca <memcpy>
 8015dca:	68aa      	ldr	r2, [r5, #8]
 8015dcc:	692b      	ldr	r3, [r5, #16]
 8015dce:	443a      	add	r2, r7
 8015dd0:	443b      	add	r3, r7
 8015dd2:	60aa      	str	r2, [r5, #8]
 8015dd4:	612b      	str	r3, [r5, #16]
 8015dd6:	e7ed      	b.n	8015db4 <ucdr_serialize_array_uint8_t+0x40>

08015dd8 <ucdr_serialize_endian_array_uint8_t>:
 8015dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ddc:	4619      	mov	r1, r3
 8015dde:	461f      	mov	r7, r3
 8015de0:	4605      	mov	r5, r0
 8015de2:	4690      	mov	r8, r2
 8015de4:	f7f8 f86a 	bl	800debc <ucdr_check_buffer_available_for>
 8015de8:	b9e0      	cbnz	r0, 8015e24 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8015dea:	463e      	mov	r6, r7
 8015dec:	e009      	b.n	8015e02 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8015dee:	68a8      	ldr	r0, [r5, #8]
 8015df0:	f001 feeb 	bl	8017bca <memcpy>
 8015df4:	68ab      	ldr	r3, [r5, #8]
 8015df6:	6928      	ldr	r0, [r5, #16]
 8015df8:	4423      	add	r3, r4
 8015dfa:	4420      	add	r0, r4
 8015dfc:	1b36      	subs	r6, r6, r4
 8015dfe:	60ab      	str	r3, [r5, #8]
 8015e00:	6128      	str	r0, [r5, #16]
 8015e02:	4631      	mov	r1, r6
 8015e04:	2201      	movs	r2, #1
 8015e06:	4628      	mov	r0, r5
 8015e08:	f7f8 f8e0 	bl	800dfcc <ucdr_check_final_buffer_behavior_array>
 8015e0c:	1bb9      	subs	r1, r7, r6
 8015e0e:	4441      	add	r1, r8
 8015e10:	4604      	mov	r4, r0
 8015e12:	4602      	mov	r2, r0
 8015e14:	2800      	cmp	r0, #0
 8015e16:	d1ea      	bne.n	8015dee <ucdr_serialize_endian_array_uint8_t+0x16>
 8015e18:	2301      	movs	r3, #1
 8015e1a:	7da8      	ldrb	r0, [r5, #22]
 8015e1c:	756b      	strb	r3, [r5, #21]
 8015e1e:	4058      	eors	r0, r3
 8015e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e24:	463a      	mov	r2, r7
 8015e26:	68a8      	ldr	r0, [r5, #8]
 8015e28:	4641      	mov	r1, r8
 8015e2a:	f001 fece 	bl	8017bca <memcpy>
 8015e2e:	68aa      	ldr	r2, [r5, #8]
 8015e30:	692b      	ldr	r3, [r5, #16]
 8015e32:	443a      	add	r2, r7
 8015e34:	443b      	add	r3, r7
 8015e36:	60aa      	str	r2, [r5, #8]
 8015e38:	612b      	str	r3, [r5, #16]
 8015e3a:	e7ed      	b.n	8015e18 <ucdr_serialize_endian_array_uint8_t+0x40>

08015e3c <ucdr_deserialize_array_uint8_t>:
 8015e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e40:	4688      	mov	r8, r1
 8015e42:	4611      	mov	r1, r2
 8015e44:	4617      	mov	r7, r2
 8015e46:	4605      	mov	r5, r0
 8015e48:	f7f8 f838 	bl	800debc <ucdr_check_buffer_available_for>
 8015e4c:	b9e0      	cbnz	r0, 8015e88 <ucdr_deserialize_array_uint8_t+0x4c>
 8015e4e:	463e      	mov	r6, r7
 8015e50:	e009      	b.n	8015e66 <ucdr_deserialize_array_uint8_t+0x2a>
 8015e52:	68a9      	ldr	r1, [r5, #8]
 8015e54:	f001 feb9 	bl	8017bca <memcpy>
 8015e58:	68aa      	ldr	r2, [r5, #8]
 8015e5a:	692b      	ldr	r3, [r5, #16]
 8015e5c:	4422      	add	r2, r4
 8015e5e:	4423      	add	r3, r4
 8015e60:	1b36      	subs	r6, r6, r4
 8015e62:	60aa      	str	r2, [r5, #8]
 8015e64:	612b      	str	r3, [r5, #16]
 8015e66:	2201      	movs	r2, #1
 8015e68:	4631      	mov	r1, r6
 8015e6a:	4628      	mov	r0, r5
 8015e6c:	f7f8 f8ae 	bl	800dfcc <ucdr_check_final_buffer_behavior_array>
 8015e70:	4604      	mov	r4, r0
 8015e72:	1bb8      	subs	r0, r7, r6
 8015e74:	4440      	add	r0, r8
 8015e76:	4622      	mov	r2, r4
 8015e78:	2c00      	cmp	r4, #0
 8015e7a:	d1ea      	bne.n	8015e52 <ucdr_deserialize_array_uint8_t+0x16>
 8015e7c:	2301      	movs	r3, #1
 8015e7e:	7da8      	ldrb	r0, [r5, #22]
 8015e80:	756b      	strb	r3, [r5, #21]
 8015e82:	4058      	eors	r0, r3
 8015e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e88:	463a      	mov	r2, r7
 8015e8a:	68a9      	ldr	r1, [r5, #8]
 8015e8c:	4640      	mov	r0, r8
 8015e8e:	f001 fe9c 	bl	8017bca <memcpy>
 8015e92:	68aa      	ldr	r2, [r5, #8]
 8015e94:	692b      	ldr	r3, [r5, #16]
 8015e96:	443a      	add	r2, r7
 8015e98:	443b      	add	r3, r7
 8015e9a:	60aa      	str	r2, [r5, #8]
 8015e9c:	612b      	str	r3, [r5, #16]
 8015e9e:	e7ed      	b.n	8015e7c <ucdr_deserialize_array_uint8_t+0x40>

08015ea0 <ucdr_deserialize_endian_array_uint8_t>:
 8015ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ea4:	4619      	mov	r1, r3
 8015ea6:	461f      	mov	r7, r3
 8015ea8:	4605      	mov	r5, r0
 8015eaa:	4690      	mov	r8, r2
 8015eac:	f7f8 f806 	bl	800debc <ucdr_check_buffer_available_for>
 8015eb0:	b9e0      	cbnz	r0, 8015eec <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8015eb2:	463e      	mov	r6, r7
 8015eb4:	e009      	b.n	8015eca <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8015eb6:	68a9      	ldr	r1, [r5, #8]
 8015eb8:	f001 fe87 	bl	8017bca <memcpy>
 8015ebc:	68ab      	ldr	r3, [r5, #8]
 8015ebe:	6928      	ldr	r0, [r5, #16]
 8015ec0:	4423      	add	r3, r4
 8015ec2:	4420      	add	r0, r4
 8015ec4:	1b36      	subs	r6, r6, r4
 8015ec6:	60ab      	str	r3, [r5, #8]
 8015ec8:	6128      	str	r0, [r5, #16]
 8015eca:	2201      	movs	r2, #1
 8015ecc:	4631      	mov	r1, r6
 8015ece:	4628      	mov	r0, r5
 8015ed0:	f7f8 f87c 	bl	800dfcc <ucdr_check_final_buffer_behavior_array>
 8015ed4:	4604      	mov	r4, r0
 8015ed6:	1bb8      	subs	r0, r7, r6
 8015ed8:	4440      	add	r0, r8
 8015eda:	4622      	mov	r2, r4
 8015edc:	2c00      	cmp	r4, #0
 8015ede:	d1ea      	bne.n	8015eb6 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8015ee0:	2301      	movs	r3, #1
 8015ee2:	7da8      	ldrb	r0, [r5, #22]
 8015ee4:	756b      	strb	r3, [r5, #21]
 8015ee6:	4058      	eors	r0, r3
 8015ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015eec:	463a      	mov	r2, r7
 8015eee:	68a9      	ldr	r1, [r5, #8]
 8015ef0:	4640      	mov	r0, r8
 8015ef2:	f001 fe6a 	bl	8017bca <memcpy>
 8015ef6:	68aa      	ldr	r2, [r5, #8]
 8015ef8:	692b      	ldr	r3, [r5, #16]
 8015efa:	443a      	add	r2, r7
 8015efc:	443b      	add	r3, r7
 8015efe:	60aa      	str	r2, [r5, #8]
 8015f00:	612b      	str	r3, [r5, #16]
 8015f02:	e7ed      	b.n	8015ee0 <ucdr_deserialize_endian_array_uint8_t+0x40>

08015f04 <ucdr_serialize_sequence_char>:
 8015f04:	b570      	push	{r4, r5, r6, lr}
 8015f06:	4615      	mov	r5, r2
 8015f08:	460e      	mov	r6, r1
 8015f0a:	7d01      	ldrb	r1, [r0, #20]
 8015f0c:	4604      	mov	r4, r0
 8015f0e:	f7f7 fb2b 	bl	800d568 <ucdr_serialize_endian_uint32_t>
 8015f12:	b90d      	cbnz	r5, 8015f18 <ucdr_serialize_sequence_char+0x14>
 8015f14:	2001      	movs	r0, #1
 8015f16:	bd70      	pop	{r4, r5, r6, pc}
 8015f18:	7d21      	ldrb	r1, [r4, #20]
 8015f1a:	462b      	mov	r3, r5
 8015f1c:	4632      	mov	r2, r6
 8015f1e:	4620      	mov	r0, r4
 8015f20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015f24:	f7ff bec2 	b.w	8015cac <ucdr_serialize_endian_array_char>

08015f28 <ucdr_deserialize_sequence_char>:
 8015f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f2c:	461d      	mov	r5, r3
 8015f2e:	4616      	mov	r6, r2
 8015f30:	460f      	mov	r7, r1
 8015f32:	461a      	mov	r2, r3
 8015f34:	7d01      	ldrb	r1, [r0, #20]
 8015f36:	4604      	mov	r4, r0
 8015f38:	f7f7 fc3e 	bl	800d7b8 <ucdr_deserialize_endian_uint32_t>
 8015f3c:	682b      	ldr	r3, [r5, #0]
 8015f3e:	429e      	cmp	r6, r3
 8015f40:	bf3c      	itt	cc
 8015f42:	2201      	movcc	r2, #1
 8015f44:	75a2      	strbcc	r2, [r4, #22]
 8015f46:	b913      	cbnz	r3, 8015f4e <ucdr_deserialize_sequence_char+0x26>
 8015f48:	2001      	movs	r0, #1
 8015f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f4e:	7d21      	ldrb	r1, [r4, #20]
 8015f50:	463a      	mov	r2, r7
 8015f52:	4620      	mov	r0, r4
 8015f54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015f58:	f7ff beda 	b.w	8015d10 <ucdr_deserialize_endian_array_char>

08015f5c <ucdr_serialize_sequence_uint8_t>:
 8015f5c:	b570      	push	{r4, r5, r6, lr}
 8015f5e:	4615      	mov	r5, r2
 8015f60:	460e      	mov	r6, r1
 8015f62:	7d01      	ldrb	r1, [r0, #20]
 8015f64:	4604      	mov	r4, r0
 8015f66:	f7f7 faff 	bl	800d568 <ucdr_serialize_endian_uint32_t>
 8015f6a:	b90d      	cbnz	r5, 8015f70 <ucdr_serialize_sequence_uint8_t+0x14>
 8015f6c:	2001      	movs	r0, #1
 8015f6e:	bd70      	pop	{r4, r5, r6, pc}
 8015f70:	7d21      	ldrb	r1, [r4, #20]
 8015f72:	462b      	mov	r3, r5
 8015f74:	4632      	mov	r2, r6
 8015f76:	4620      	mov	r0, r4
 8015f78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015f7c:	f7ff bf2c 	b.w	8015dd8 <ucdr_serialize_endian_array_uint8_t>

08015f80 <ucdr_deserialize_sequence_uint8_t>:
 8015f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f84:	461d      	mov	r5, r3
 8015f86:	4616      	mov	r6, r2
 8015f88:	460f      	mov	r7, r1
 8015f8a:	461a      	mov	r2, r3
 8015f8c:	7d01      	ldrb	r1, [r0, #20]
 8015f8e:	4604      	mov	r4, r0
 8015f90:	f7f7 fc12 	bl	800d7b8 <ucdr_deserialize_endian_uint32_t>
 8015f94:	682b      	ldr	r3, [r5, #0]
 8015f96:	429e      	cmp	r6, r3
 8015f98:	bf3c      	itt	cc
 8015f9a:	2201      	movcc	r2, #1
 8015f9c:	75a2      	strbcc	r2, [r4, #22]
 8015f9e:	b913      	cbnz	r3, 8015fa6 <ucdr_deserialize_sequence_uint8_t+0x26>
 8015fa0:	2001      	movs	r0, #1
 8015fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015fa6:	7d21      	ldrb	r1, [r4, #20]
 8015fa8:	463a      	mov	r2, r7
 8015faa:	4620      	mov	r0, r4
 8015fac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015fb0:	f7ff bf76 	b.w	8015ea0 <ucdr_deserialize_endian_array_uint8_t>

08015fb4 <ucdr_serialize_string>:
 8015fb4:	b510      	push	{r4, lr}
 8015fb6:	b082      	sub	sp, #8
 8015fb8:	4604      	mov	r4, r0
 8015fba:	4608      	mov	r0, r1
 8015fbc:	9101      	str	r1, [sp, #4]
 8015fbe:	f7ea f939 	bl	8000234 <strlen>
 8015fc2:	9901      	ldr	r1, [sp, #4]
 8015fc4:	1c42      	adds	r2, r0, #1
 8015fc6:	4620      	mov	r0, r4
 8015fc8:	b002      	add	sp, #8
 8015fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015fce:	f7ff bf99 	b.w	8015f04 <ucdr_serialize_sequence_char>
 8015fd2:	bf00      	nop

08015fd4 <ucdr_deserialize_string>:
 8015fd4:	b500      	push	{lr}
 8015fd6:	b083      	sub	sp, #12
 8015fd8:	ab01      	add	r3, sp, #4
 8015fda:	f7ff ffa5 	bl	8015f28 <ucdr_deserialize_sequence_char>
 8015fde:	b003      	add	sp, #12
 8015fe0:	f85d fb04 	ldr.w	pc, [sp], #4

08015fe4 <uxr_init_input_best_effort_stream>:
 8015fe4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015fe8:	8003      	strh	r3, [r0, #0]
 8015fea:	4770      	bx	lr

08015fec <uxr_reset_input_best_effort_stream>:
 8015fec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015ff0:	8003      	strh	r3, [r0, #0]
 8015ff2:	4770      	bx	lr

08015ff4 <uxr_receive_best_effort_message>:
 8015ff4:	b538      	push	{r3, r4, r5, lr}
 8015ff6:	4604      	mov	r4, r0
 8015ff8:	8800      	ldrh	r0, [r0, #0]
 8015ffa:	460d      	mov	r5, r1
 8015ffc:	f000 fd42 	bl	8016a84 <uxr_seq_num_cmp>
 8016000:	4603      	mov	r3, r0
 8016002:	2b00      	cmp	r3, #0
 8016004:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8016008:	bfb8      	it	lt
 801600a:	8025      	strhlt	r5, [r4, #0]
 801600c:	bd38      	pop	{r3, r4, r5, pc}
 801600e:	bf00      	nop

08016010 <on_full_input_buffer>:
 8016010:	b570      	push	{r4, r5, r6, lr}
 8016012:	4605      	mov	r5, r0
 8016014:	460c      	mov	r4, r1
 8016016:	682b      	ldr	r3, [r5, #0]
 8016018:	6809      	ldr	r1, [r1, #0]
 801601a:	8920      	ldrh	r0, [r4, #8]
 801601c:	6862      	ldr	r2, [r4, #4]
 801601e:	fbb2 f2f0 	udiv	r2, r2, r0
 8016022:	eba3 0c01 	sub.w	ip, r3, r1
 8016026:	fbbc fcf2 	udiv	ip, ip, r2
 801602a:	f10c 0c01 	add.w	ip, ip, #1
 801602e:	fa1f f38c 	uxth.w	r3, ip
 8016032:	fbb3 f6f0 	udiv	r6, r3, r0
 8016036:	fb00 3316 	mls	r3, r0, r6, r3
 801603a:	b29b      	uxth	r3, r3
 801603c:	fb02 f303 	mul.w	r3, r2, r3
 8016040:	1d18      	adds	r0, r3, #4
 8016042:	4408      	add	r0, r1
 8016044:	7d26      	ldrb	r6, [r4, #20]
 8016046:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801604a:	b116      	cbz	r6, 8016052 <on_full_input_buffer+0x42>
 801604c:	2600      	movs	r6, #0
 801604e:	f840 6c04 	str.w	r6, [r0, #-4]
 8016052:	2a03      	cmp	r2, #3
 8016054:	d801      	bhi.n	801605a <on_full_input_buffer+0x4a>
 8016056:	2001      	movs	r0, #1
 8016058:	bd70      	pop	{r4, r5, r6, pc}
 801605a:	3308      	adds	r3, #8
 801605c:	4419      	add	r1, r3
 801605e:	4628      	mov	r0, r5
 8016060:	692b      	ldr	r3, [r5, #16]
 8016062:	3a04      	subs	r2, #4
 8016064:	f7f7 ff76 	bl	800df54 <ucdr_init_buffer_origin>
 8016068:	4628      	mov	r0, r5
 801606a:	4903      	ldr	r1, [pc, #12]	@ (8016078 <on_full_input_buffer+0x68>)
 801606c:	4622      	mov	r2, r4
 801606e:	f7f7 ff4d 	bl	800df0c <ucdr_set_on_full_buffer_callback>
 8016072:	2000      	movs	r0, #0
 8016074:	bd70      	pop	{r4, r5, r6, pc}
 8016076:	bf00      	nop
 8016078:	08016011 	.word	0x08016011

0801607c <uxr_init_input_reliable_stream>:
 801607c:	b500      	push	{lr}
 801607e:	e9c0 1200 	strd	r1, r2, [r0]
 8016082:	f04f 0e00 	mov.w	lr, #0
 8016086:	9a01      	ldr	r2, [sp, #4]
 8016088:	8103      	strh	r3, [r0, #8]
 801608a:	6102      	str	r2, [r0, #16]
 801608c:	f880 e014 	strb.w	lr, [r0, #20]
 8016090:	b1d3      	cbz	r3, 80160c8 <uxr_init_input_reliable_stream+0x4c>
 8016092:	f8c1 e000 	str.w	lr, [r1]
 8016096:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801609a:	f1bc 0f01 	cmp.w	ip, #1
 801609e:	d913      	bls.n	80160c8 <uxr_init_input_reliable_stream+0x4c>
 80160a0:	2301      	movs	r3, #1
 80160a2:	fbb3 f1fc 	udiv	r1, r3, ip
 80160a6:	fb0c 3111 	mls	r1, ip, r1, r3
 80160aa:	b289      	uxth	r1, r1
 80160ac:	6842      	ldr	r2, [r0, #4]
 80160ae:	fbb2 f2fc 	udiv	r2, r2, ip
 80160b2:	fb01 f202 	mul.w	r2, r1, r2
 80160b6:	6801      	ldr	r1, [r0, #0]
 80160b8:	f841 e002 	str.w	lr, [r1, r2]
 80160bc:	3301      	adds	r3, #1
 80160be:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80160c2:	b29b      	uxth	r3, r3
 80160c4:	459c      	cmp	ip, r3
 80160c6:	d8ec      	bhi.n	80160a2 <uxr_init_input_reliable_stream+0x26>
 80160c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80160cc:	60c3      	str	r3, [r0, #12]
 80160ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80160d2:	bf00      	nop

080160d4 <uxr_reset_input_reliable_stream>:
 80160d4:	8901      	ldrh	r1, [r0, #8]
 80160d6:	b1e9      	cbz	r1, 8016114 <uxr_reset_input_reliable_stream+0x40>
 80160d8:	f04f 0c00 	mov.w	ip, #0
 80160dc:	b500      	push	{lr}
 80160de:	4663      	mov	r3, ip
 80160e0:	46e6      	mov	lr, ip
 80160e2:	fbb3 f2f1 	udiv	r2, r3, r1
 80160e6:	fb01 3312 	mls	r3, r1, r2, r3
 80160ea:	b29b      	uxth	r3, r3
 80160ec:	6842      	ldr	r2, [r0, #4]
 80160ee:	fbb2 f2f1 	udiv	r2, r2, r1
 80160f2:	fb02 f303 	mul.w	r3, r2, r3
 80160f6:	6802      	ldr	r2, [r0, #0]
 80160f8:	f842 e003 	str.w	lr, [r2, r3]
 80160fc:	f10c 0c01 	add.w	ip, ip, #1
 8016100:	8901      	ldrh	r1, [r0, #8]
 8016102:	fa1f f38c 	uxth.w	r3, ip
 8016106:	4299      	cmp	r1, r3
 8016108:	d8eb      	bhi.n	80160e2 <uxr_reset_input_reliable_stream+0xe>
 801610a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801610e:	60c3      	str	r3, [r0, #12]
 8016110:	f85d fb04 	ldr.w	pc, [sp], #4
 8016114:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016118:	60c3      	str	r3, [r0, #12]
 801611a:	4770      	bx	lr

0801611c <uxr_receive_reliable_message>:
 801611c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016120:	4604      	mov	r4, r0
 8016122:	460d      	mov	r5, r1
 8016124:	8901      	ldrh	r1, [r0, #8]
 8016126:	8980      	ldrh	r0, [r0, #12]
 8016128:	4690      	mov	r8, r2
 801612a:	461f      	mov	r7, r3
 801612c:	f000 fca2 	bl	8016a74 <uxr_seq_num_add>
 8016130:	4629      	mov	r1, r5
 8016132:	4606      	mov	r6, r0
 8016134:	89a0      	ldrh	r0, [r4, #12]
 8016136:	f000 fca5 	bl	8016a84 <uxr_seq_num_cmp>
 801613a:	2800      	cmp	r0, #0
 801613c:	db0a      	blt.n	8016154 <uxr_receive_reliable_message+0x38>
 801613e:	2600      	movs	r6, #0
 8016140:	89e0      	ldrh	r0, [r4, #14]
 8016142:	4629      	mov	r1, r5
 8016144:	f000 fc9e 	bl	8016a84 <uxr_seq_num_cmp>
 8016148:	2800      	cmp	r0, #0
 801614a:	da00      	bge.n	801614e <uxr_receive_reliable_message+0x32>
 801614c:	81e5      	strh	r5, [r4, #14]
 801614e:	4630      	mov	r0, r6
 8016150:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016154:	4630      	mov	r0, r6
 8016156:	4629      	mov	r1, r5
 8016158:	f000 fc94 	bl	8016a84 <uxr_seq_num_cmp>
 801615c:	2800      	cmp	r0, #0
 801615e:	dbee      	blt.n	801613e <uxr_receive_reliable_message+0x22>
 8016160:	6923      	ldr	r3, [r4, #16]
 8016162:	4640      	mov	r0, r8
 8016164:	4798      	blx	r3
 8016166:	2101      	movs	r1, #1
 8016168:	4681      	mov	r9, r0
 801616a:	89a0      	ldrh	r0, [r4, #12]
 801616c:	f000 fc82 	bl	8016a74 <uxr_seq_num_add>
 8016170:	f1b9 0f00 	cmp.w	r9, #0
 8016174:	d101      	bne.n	801617a <uxr_receive_reliable_message+0x5e>
 8016176:	4285      	cmp	r5, r0
 8016178:	d047      	beq.n	801620a <uxr_receive_reliable_message+0xee>
 801617a:	8922      	ldrh	r2, [r4, #8]
 801617c:	fbb5 f0f2 	udiv	r0, r5, r2
 8016180:	fb02 5010 	mls	r0, r2, r0, r5
 8016184:	b280      	uxth	r0, r0
 8016186:	6863      	ldr	r3, [r4, #4]
 8016188:	fbb3 f3f2 	udiv	r3, r3, r2
 801618c:	fb00 f303 	mul.w	r3, r0, r3
 8016190:	6820      	ldr	r0, [r4, #0]
 8016192:	3304      	adds	r3, #4
 8016194:	4418      	add	r0, r3
 8016196:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801619a:	2b00      	cmp	r3, #0
 801619c:	d1cf      	bne.n	801613e <uxr_receive_reliable_message+0x22>
 801619e:	4641      	mov	r1, r8
 80161a0:	463a      	mov	r2, r7
 80161a2:	f001 fd12 	bl	8017bca <memcpy>
 80161a6:	8921      	ldrh	r1, [r4, #8]
 80161a8:	fbb5 f2f1 	udiv	r2, r5, r1
 80161ac:	fb01 5212 	mls	r2, r1, r2, r5
 80161b0:	b292      	uxth	r2, r2
 80161b2:	6863      	ldr	r3, [r4, #4]
 80161b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80161b8:	fb02 f303 	mul.w	r3, r2, r3
 80161bc:	6822      	ldr	r2, [r4, #0]
 80161be:	50d7      	str	r7, [r2, r3]
 80161c0:	9a08      	ldr	r2, [sp, #32]
 80161c2:	2301      	movs	r3, #1
 80161c4:	7013      	strb	r3, [r2, #0]
 80161c6:	f1b9 0f00 	cmp.w	r9, #0
 80161ca:	d0b8      	beq.n	801613e <uxr_receive_reliable_message+0x22>
 80161cc:	89a6      	ldrh	r6, [r4, #12]
 80161ce:	4630      	mov	r0, r6
 80161d0:	2101      	movs	r1, #1
 80161d2:	f000 fc4f 	bl	8016a74 <uxr_seq_num_add>
 80161d6:	8922      	ldrh	r2, [r4, #8]
 80161d8:	6863      	ldr	r3, [r4, #4]
 80161da:	fbb3 f3f2 	udiv	r3, r3, r2
 80161de:	4606      	mov	r6, r0
 80161e0:	fbb0 f0f2 	udiv	r0, r0, r2
 80161e4:	fb02 6010 	mls	r0, r2, r0, r6
 80161e8:	b280      	uxth	r0, r0
 80161ea:	fb00 f303 	mul.w	r3, r0, r3
 80161ee:	6820      	ldr	r0, [r4, #0]
 80161f0:	3304      	adds	r3, #4
 80161f2:	4418      	add	r0, r3
 80161f4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d0a0      	beq.n	801613e <uxr_receive_reliable_message+0x22>
 80161fc:	6923      	ldr	r3, [r4, #16]
 80161fe:	4798      	blx	r3
 8016200:	2802      	cmp	r0, #2
 8016202:	d008      	beq.n	8016216 <uxr_receive_reliable_message+0xfa>
 8016204:	2801      	cmp	r0, #1
 8016206:	d0e2      	beq.n	80161ce <uxr_receive_reliable_message+0xb2>
 8016208:	e799      	b.n	801613e <uxr_receive_reliable_message+0x22>
 801620a:	9b08      	ldr	r3, [sp, #32]
 801620c:	81a5      	strh	r5, [r4, #12]
 801620e:	2601      	movs	r6, #1
 8016210:	f883 9000 	strb.w	r9, [r3]
 8016214:	e794      	b.n	8016140 <uxr_receive_reliable_message+0x24>
 8016216:	2601      	movs	r6, #1
 8016218:	e792      	b.n	8016140 <uxr_receive_reliable_message+0x24>
 801621a:	bf00      	nop

0801621c <uxr_next_input_reliable_buffer_available>:
 801621c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016220:	4604      	mov	r4, r0
 8016222:	460f      	mov	r7, r1
 8016224:	8980      	ldrh	r0, [r0, #12]
 8016226:	2101      	movs	r1, #1
 8016228:	4690      	mov	r8, r2
 801622a:	f000 fc23 	bl	8016a74 <uxr_seq_num_add>
 801622e:	8922      	ldrh	r2, [r4, #8]
 8016230:	fbb0 f6f2 	udiv	r6, r0, r2
 8016234:	fb02 0616 	mls	r6, r2, r6, r0
 8016238:	b2b6      	uxth	r6, r6
 801623a:	6863      	ldr	r3, [r4, #4]
 801623c:	fbb3 f3f2 	udiv	r3, r3, r2
 8016240:	fb06 f303 	mul.w	r3, r6, r3
 8016244:	6826      	ldr	r6, [r4, #0]
 8016246:	3304      	adds	r3, #4
 8016248:	441e      	add	r6, r3
 801624a:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801624e:	f1b9 0f00 	cmp.w	r9, #0
 8016252:	d023      	beq.n	801629c <uxr_next_input_reliable_buffer_available+0x80>
 8016254:	6923      	ldr	r3, [r4, #16]
 8016256:	4605      	mov	r5, r0
 8016258:	4630      	mov	r0, r6
 801625a:	4798      	blx	r3
 801625c:	4682      	mov	sl, r0
 801625e:	b300      	cbz	r0, 80162a2 <uxr_next_input_reliable_buffer_available+0x86>
 8016260:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8016264:	2101      	movs	r1, #1
 8016266:	4650      	mov	r0, sl
 8016268:	f000 fc04 	bl	8016a74 <uxr_seq_num_add>
 801626c:	8921      	ldrh	r1, [r4, #8]
 801626e:	fbb0 f2f1 	udiv	r2, r0, r1
 8016272:	4682      	mov	sl, r0
 8016274:	fb01 0212 	mls	r2, r1, r2, r0
 8016278:	e9d4 0300 	ldrd	r0, r3, [r4]
 801627c:	b292      	uxth	r2, r2
 801627e:	fbb3 f3f1 	udiv	r3, r3, r1
 8016282:	fb02 f303 	mul.w	r3, r2, r3
 8016286:	3304      	adds	r3, #4
 8016288:	4418      	add	r0, r3
 801628a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801628e:	b12b      	cbz	r3, 801629c <uxr_next_input_reliable_buffer_available+0x80>
 8016290:	6923      	ldr	r3, [r4, #16]
 8016292:	4798      	blx	r3
 8016294:	2802      	cmp	r0, #2
 8016296:	d01b      	beq.n	80162d0 <uxr_next_input_reliable_buffer_available+0xb4>
 8016298:	2801      	cmp	r0, #1
 801629a:	d0e3      	beq.n	8016264 <uxr_next_input_reliable_buffer_available+0x48>
 801629c:	2000      	movs	r0, #0
 801629e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162a2:	464a      	mov	r2, r9
 80162a4:	4631      	mov	r1, r6
 80162a6:	4638      	mov	r0, r7
 80162a8:	f7f7 fe5c 	bl	800df64 <ucdr_init_buffer>
 80162ac:	8921      	ldrh	r1, [r4, #8]
 80162ae:	fbb5 f2f1 	udiv	r2, r5, r1
 80162b2:	fb01 5212 	mls	r2, r1, r2, r5
 80162b6:	b292      	uxth	r2, r2
 80162b8:	6863      	ldr	r3, [r4, #4]
 80162ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80162be:	fb02 f303 	mul.w	r3, r2, r3
 80162c2:	6822      	ldr	r2, [r4, #0]
 80162c4:	f842 a003 	str.w	sl, [r2, r3]
 80162c8:	2001      	movs	r0, #1
 80162ca:	81a5      	strh	r5, [r4, #12]
 80162cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162d0:	8920      	ldrh	r0, [r4, #8]
 80162d2:	fbb5 f3f0 	udiv	r3, r5, r0
 80162d6:	fb00 5513 	mls	r5, r0, r3, r5
 80162da:	b2ad      	uxth	r5, r5
 80162dc:	6863      	ldr	r3, [r4, #4]
 80162de:	fbb3 f3f0 	udiv	r3, r3, r0
 80162e2:	fb03 f505 	mul.w	r5, r3, r5
 80162e6:	6823      	ldr	r3, [r4, #0]
 80162e8:	2000      	movs	r0, #0
 80162ea:	5158      	str	r0, [r3, r5]
 80162ec:	eb06 0108 	add.w	r1, r6, r8
 80162f0:	eba9 0208 	sub.w	r2, r9, r8
 80162f4:	4638      	mov	r0, r7
 80162f6:	f7f7 fe35 	bl	800df64 <ucdr_init_buffer>
 80162fa:	4638      	mov	r0, r7
 80162fc:	4903      	ldr	r1, [pc, #12]	@ (801630c <uxr_next_input_reliable_buffer_available+0xf0>)
 80162fe:	4622      	mov	r2, r4
 8016300:	f7f7 fe04 	bl	800df0c <ucdr_set_on_full_buffer_callback>
 8016304:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8016308:	2001      	movs	r0, #1
 801630a:	e7c8      	b.n	801629e <uxr_next_input_reliable_buffer_available+0x82>
 801630c:	08016011 	.word	0x08016011

08016310 <uxr_process_heartbeat>:
 8016310:	b538      	push	{r3, r4, r5, lr}
 8016312:	4611      	mov	r1, r2
 8016314:	4604      	mov	r4, r0
 8016316:	89c0      	ldrh	r0, [r0, #14]
 8016318:	4615      	mov	r5, r2
 801631a:	f000 fbb3 	bl	8016a84 <uxr_seq_num_cmp>
 801631e:	2800      	cmp	r0, #0
 8016320:	bfb8      	it	lt
 8016322:	81e5      	strhlt	r5, [r4, #14]
 8016324:	bd38      	pop	{r3, r4, r5, pc}
 8016326:	bf00      	nop

08016328 <uxr_compute_acknack>:
 8016328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801632c:	8903      	ldrh	r3, [r0, #8]
 801632e:	8985      	ldrh	r5, [r0, #12]
 8016330:	4604      	mov	r4, r0
 8016332:	460e      	mov	r6, r1
 8016334:	b1d3      	cbz	r3, 801636c <uxr_compute_acknack+0x44>
 8016336:	4628      	mov	r0, r5
 8016338:	2701      	movs	r7, #1
 801633a:	e003      	b.n	8016344 <uxr_compute_acknack+0x1c>
 801633c:	4567      	cmp	r7, ip
 801633e:	d215      	bcs.n	801636c <uxr_compute_acknack+0x44>
 8016340:	89a0      	ldrh	r0, [r4, #12]
 8016342:	3701      	adds	r7, #1
 8016344:	b2b9      	uxth	r1, r7
 8016346:	f000 fb95 	bl	8016a74 <uxr_seq_num_add>
 801634a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801634e:	fbb0 f3fc 	udiv	r3, r0, ip
 8016352:	fb0c 0313 	mls	r3, ip, r3, r0
 8016356:	b29a      	uxth	r2, r3
 8016358:	e9d4 1300 	ldrd	r1, r3, [r4]
 801635c:	fbb3 f3fc 	udiv	r3, r3, ip
 8016360:	fb02 f303 	mul.w	r3, r2, r3
 8016364:	58cb      	ldr	r3, [r1, r3]
 8016366:	2b00      	cmp	r3, #0
 8016368:	d1e8      	bne.n	801633c <uxr_compute_acknack+0x14>
 801636a:	4605      	mov	r5, r0
 801636c:	8035      	strh	r5, [r6, #0]
 801636e:	2101      	movs	r1, #1
 8016370:	4628      	mov	r0, r5
 8016372:	89e7      	ldrh	r7, [r4, #14]
 8016374:	f000 fb82 	bl	8016a7c <uxr_seq_num_sub>
 8016378:	4601      	mov	r1, r0
 801637a:	4638      	mov	r0, r7
 801637c:	f000 fb7e 	bl	8016a7c <uxr_seq_num_sub>
 8016380:	4605      	mov	r5, r0
 8016382:	b318      	cbz	r0, 80163cc <uxr_compute_acknack+0xa4>
 8016384:	f04f 0900 	mov.w	r9, #0
 8016388:	464f      	mov	r7, r9
 801638a:	f04f 0801 	mov.w	r8, #1
 801638e:	fa1f f189 	uxth.w	r1, r9
 8016392:	8830      	ldrh	r0, [r6, #0]
 8016394:	f000 fb6e 	bl	8016a74 <uxr_seq_num_add>
 8016398:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801639c:	fbb0 f3fc 	udiv	r3, r0, ip
 80163a0:	e9d4 1200 	ldrd	r1, r2, [r4]
 80163a4:	fb03 001c 	mls	r0, r3, ip, r0
 80163a8:	b283      	uxth	r3, r0
 80163aa:	fbb2 f2fc 	udiv	r2, r2, ip
 80163ae:	fb02 f303 	mul.w	r3, r2, r3
 80163b2:	fa08 f209 	lsl.w	r2, r8, r9
 80163b6:	58cb      	ldr	r3, [r1, r3]
 80163b8:	f109 0901 	add.w	r9, r9, #1
 80163bc:	b90b      	cbnz	r3, 80163c2 <uxr_compute_acknack+0x9a>
 80163be:	4317      	orrs	r7, r2
 80163c0:	b2bf      	uxth	r7, r7
 80163c2:	454d      	cmp	r5, r9
 80163c4:	d1e3      	bne.n	801638e <uxr_compute_acknack+0x66>
 80163c6:	4638      	mov	r0, r7
 80163c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80163cc:	4607      	mov	r7, r0
 80163ce:	4638      	mov	r0, r7
 80163d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080163d4 <uxr_init_output_best_effort_stream>:
 80163d4:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 80163d8:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80163dc:	6001      	str	r1, [r0, #0]
 80163de:	7303      	strb	r3, [r0, #12]
 80163e0:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80163e4:	4770      	bx	lr
 80163e6:	bf00      	nop

080163e8 <uxr_reset_output_best_effort_stream>:
 80163e8:	7b02      	ldrb	r2, [r0, #12]
 80163ea:	6042      	str	r2, [r0, #4]
 80163ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80163f0:	81c3      	strh	r3, [r0, #14]
 80163f2:	4770      	bx	lr

080163f4 <uxr_prepare_best_effort_buffer_to_write>:
 80163f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163f6:	4604      	mov	r4, r0
 80163f8:	b083      	sub	sp, #12
 80163fa:	6840      	ldr	r0, [r0, #4]
 80163fc:	460d      	mov	r5, r1
 80163fe:	4616      	mov	r6, r2
 8016400:	f7fa f8e0 	bl	80105c4 <uxr_submessage_padding>
 8016404:	6863      	ldr	r3, [r4, #4]
 8016406:	4418      	add	r0, r3
 8016408:	68a3      	ldr	r3, [r4, #8]
 801640a:	1942      	adds	r2, r0, r5
 801640c:	4293      	cmp	r3, r2
 801640e:	bf2c      	ite	cs
 8016410:	2701      	movcs	r7, #1
 8016412:	2700      	movcc	r7, #0
 8016414:	d202      	bcs.n	801641c <uxr_prepare_best_effort_buffer_to_write+0x28>
 8016416:	4638      	mov	r0, r7
 8016418:	b003      	add	sp, #12
 801641a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801641c:	9000      	str	r0, [sp, #0]
 801641e:	6821      	ldr	r1, [r4, #0]
 8016420:	4630      	mov	r0, r6
 8016422:	2300      	movs	r3, #0
 8016424:	f7f7 fd8c 	bl	800df40 <ucdr_init_buffer_origin_offset>
 8016428:	6861      	ldr	r1, [r4, #4]
 801642a:	4638      	mov	r0, r7
 801642c:	4429      	add	r1, r5
 801642e:	6061      	str	r1, [r4, #4]
 8016430:	b003      	add	sp, #12
 8016432:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016434 <uxr_prepare_best_effort_buffer_to_send>:
 8016434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016438:	4604      	mov	r4, r0
 801643a:	461d      	mov	r5, r3
 801643c:	6840      	ldr	r0, [r0, #4]
 801643e:	7b23      	ldrb	r3, [r4, #12]
 8016440:	4298      	cmp	r0, r3
 8016442:	bf8c      	ite	hi
 8016444:	2601      	movhi	r6, #1
 8016446:	2600      	movls	r6, #0
 8016448:	d802      	bhi.n	8016450 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801644a:	4630      	mov	r0, r6
 801644c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016450:	4688      	mov	r8, r1
 8016452:	89e0      	ldrh	r0, [r4, #14]
 8016454:	2101      	movs	r1, #1
 8016456:	4617      	mov	r7, r2
 8016458:	f000 fb0c 	bl	8016a74 <uxr_seq_num_add>
 801645c:	6823      	ldr	r3, [r4, #0]
 801645e:	81e0      	strh	r0, [r4, #14]
 8016460:	8028      	strh	r0, [r5, #0]
 8016462:	f8c8 3000 	str.w	r3, [r8]
 8016466:	6863      	ldr	r3, [r4, #4]
 8016468:	603b      	str	r3, [r7, #0]
 801646a:	7b23      	ldrb	r3, [r4, #12]
 801646c:	6063      	str	r3, [r4, #4]
 801646e:	4630      	mov	r0, r6
 8016470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016474 <on_full_output_buffer>:
 8016474:	b538      	push	{r3, r4, r5, lr}
 8016476:	6802      	ldr	r2, [r0, #0]
 8016478:	460c      	mov	r4, r1
 801647a:	6809      	ldr	r1, [r1, #0]
 801647c:	8923      	ldrh	r3, [r4, #8]
 801647e:	eba2 0c01 	sub.w	ip, r2, r1
 8016482:	6862      	ldr	r2, [r4, #4]
 8016484:	fbb2 f2f3 	udiv	r2, r2, r3
 8016488:	fbbc fcf2 	udiv	ip, ip, r2
 801648c:	f10c 0c01 	add.w	ip, ip, #1
 8016490:	fa1f fc8c 	uxth.w	ip, ip
 8016494:	fbbc fef3 	udiv	lr, ip, r3
 8016498:	fb03 c31e 	mls	r3, r3, lr, ip
 801649c:	b29b      	uxth	r3, r3
 801649e:	fb02 f303 	mul.w	r3, r2, r3
 80164a2:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80164a6:	58ca      	ldr	r2, [r1, r3]
 80164a8:	4463      	add	r3, ip
 80164aa:	eba2 020c 	sub.w	r2, r2, ip
 80164ae:	3308      	adds	r3, #8
 80164b0:	4605      	mov	r5, r0
 80164b2:	4419      	add	r1, r3
 80164b4:	3a04      	subs	r2, #4
 80164b6:	6903      	ldr	r3, [r0, #16]
 80164b8:	f7f7 fd4c 	bl	800df54 <ucdr_init_buffer_origin>
 80164bc:	4628      	mov	r0, r5
 80164be:	4903      	ldr	r1, [pc, #12]	@ (80164cc <on_full_output_buffer+0x58>)
 80164c0:	4622      	mov	r2, r4
 80164c2:	f7f7 fd23 	bl	800df0c <ucdr_set_on_full_buffer_callback>
 80164c6:	2000      	movs	r0, #0
 80164c8:	bd38      	pop	{r3, r4, r5, pc}
 80164ca:	bf00      	nop
 80164cc:	08016475 	.word	0x08016475

080164d0 <uxr_init_output_reliable_stream>:
 80164d0:	b410      	push	{r4}
 80164d2:	f89d c004 	ldrb.w	ip, [sp, #4]
 80164d6:	8103      	strh	r3, [r0, #8]
 80164d8:	e9c0 1200 	strd	r1, r2, [r0]
 80164dc:	f880 c00c 	strb.w	ip, [r0, #12]
 80164e0:	b1d3      	cbz	r3, 8016518 <uxr_init_output_reliable_stream+0x48>
 80164e2:	f8c1 c000 	str.w	ip, [r1]
 80164e6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80164ea:	f1bc 0f01 	cmp.w	ip, #1
 80164ee:	d913      	bls.n	8016518 <uxr_init_output_reliable_stream+0x48>
 80164f0:	2301      	movs	r3, #1
 80164f2:	fbb3 f1fc 	udiv	r1, r3, ip
 80164f6:	fb0c 3111 	mls	r1, ip, r1, r3
 80164fa:	b289      	uxth	r1, r1
 80164fc:	6842      	ldr	r2, [r0, #4]
 80164fe:	6804      	ldr	r4, [r0, #0]
 8016500:	fbb2 f2fc 	udiv	r2, r2, ip
 8016504:	fb01 f202 	mul.w	r2, r1, r2
 8016508:	7b01      	ldrb	r1, [r0, #12]
 801650a:	50a1      	str	r1, [r4, r2]
 801650c:	3301      	adds	r3, #1
 801650e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016512:	b29b      	uxth	r3, r3
 8016514:	459c      	cmp	ip, r3
 8016516:	d8ec      	bhi.n	80164f2 <uxr_init_output_reliable_stream+0x22>
 8016518:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801651c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016520:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8016524:	4905      	ldr	r1, [pc, #20]	@ (801653c <uxr_init_output_reliable_stream+0x6c>)
 8016526:	f85d 4b04 	ldr.w	r4, [sp], #4
 801652a:	f8c0 100e 	str.w	r1, [r0, #14]
 801652e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016532:	2300      	movs	r3, #0
 8016534:	8242      	strh	r2, [r0, #18]
 8016536:	8403      	strh	r3, [r0, #32]
 8016538:	4770      	bx	lr
 801653a:	bf00      	nop
 801653c:	ffff0000 	.word	0xffff0000

08016540 <uxr_reset_output_reliable_stream>:
 8016540:	8901      	ldrh	r1, [r0, #8]
 8016542:	b1b1      	cbz	r1, 8016572 <uxr_reset_output_reliable_stream+0x32>
 8016544:	f04f 0c00 	mov.w	ip, #0
 8016548:	4663      	mov	r3, ip
 801654a:	fbb3 f2f1 	udiv	r2, r3, r1
 801654e:	fb01 3312 	mls	r3, r1, r2, r3
 8016552:	b29b      	uxth	r3, r3
 8016554:	6842      	ldr	r2, [r0, #4]
 8016556:	fbb2 f2f1 	udiv	r2, r2, r1
 801655a:	6801      	ldr	r1, [r0, #0]
 801655c:	fb02 f303 	mul.w	r3, r2, r3
 8016560:	7b02      	ldrb	r2, [r0, #12]
 8016562:	50ca      	str	r2, [r1, r3]
 8016564:	f10c 0c01 	add.w	ip, ip, #1
 8016568:	8901      	ldrh	r1, [r0, #8]
 801656a:	fa1f f38c 	uxth.w	r3, ip
 801656e:	4299      	cmp	r1, r3
 8016570:	d8eb      	bhi.n	801654a <uxr_reset_output_reliable_stream+0xa>
 8016572:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016576:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801657a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801657e:	4904      	ldr	r1, [pc, #16]	@ (8016590 <uxr_reset_output_reliable_stream+0x50>)
 8016580:	f8c0 100e 	str.w	r1, [r0, #14]
 8016584:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016588:	2300      	movs	r3, #0
 801658a:	8242      	strh	r2, [r0, #18]
 801658c:	8403      	strh	r3, [r0, #32]
 801658e:	4770      	bx	lr
 8016590:	ffff0000 	.word	0xffff0000

08016594 <uxr_prepare_reliable_buffer_to_write>:
 8016594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016598:	4604      	mov	r4, r0
 801659a:	b091      	sub	sp, #68	@ 0x44
 801659c:	8900      	ldrh	r0, [r0, #8]
 801659e:	89e6      	ldrh	r6, [r4, #14]
 80165a0:	6823      	ldr	r3, [r4, #0]
 80165a2:	9204      	str	r2, [sp, #16]
 80165a4:	fbb6 f2f0 	udiv	r2, r6, r0
 80165a8:	fb00 6212 	mls	r2, r0, r2, r6
 80165ac:	b292      	uxth	r2, r2
 80165ae:	6865      	ldr	r5, [r4, #4]
 80165b0:	fbb5 f5f0 	udiv	r5, r5, r0
 80165b4:	fb05 3202 	mla	r2, r5, r2, r3
 80165b8:	3204      	adds	r2, #4
 80165ba:	f852 8c04 	ldr.w	r8, [r2, #-4]
 80165be:	f894 900c 	ldrb.w	r9, [r4, #12]
 80165c2:	9203      	str	r2, [sp, #12]
 80165c4:	468b      	mov	fp, r1
 80165c6:	1f2f      	subs	r7, r5, #4
 80165c8:	2800      	cmp	r0, #0
 80165ca:	f000 814c 	beq.w	8016866 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80165ce:	f04f 0c00 	mov.w	ip, #0
 80165d2:	46e2      	mov	sl, ip
 80165d4:	4661      	mov	r1, ip
 80165d6:	fbb1 f2f0 	udiv	r2, r1, r0
 80165da:	fb00 1212 	mls	r2, r0, r2, r1
 80165de:	b292      	uxth	r2, r2
 80165e0:	fb05 f202 	mul.w	r2, r5, r2
 80165e4:	f10c 0c01 	add.w	ip, ip, #1
 80165e8:	589a      	ldr	r2, [r3, r2]
 80165ea:	454a      	cmp	r2, r9
 80165ec:	bf08      	it	eq
 80165ee:	f10a 0a01 	addeq.w	sl, sl, #1
 80165f2:	fa1f f18c 	uxth.w	r1, ip
 80165f6:	bf08      	it	eq
 80165f8:	fa1f fa8a 	uxtheq.w	sl, sl
 80165fc:	4281      	cmp	r1, r0
 80165fe:	d3ea      	bcc.n	80165d6 <uxr_prepare_reliable_buffer_to_write+0x42>
 8016600:	4640      	mov	r0, r8
 8016602:	2104      	movs	r1, #4
 8016604:	f8cd a014 	str.w	sl, [sp, #20]
 8016608:	f7f7 fcb0 	bl	800df6c <ucdr_alignment>
 801660c:	4480      	add	r8, r0
 801660e:	eb08 020b 	add.w	r2, r8, fp
 8016612:	42ba      	cmp	r2, r7
 8016614:	f240 80cd 	bls.w	80167b2 <uxr_prepare_reliable_buffer_to_write+0x21e>
 8016618:	7b22      	ldrb	r2, [r4, #12]
 801661a:	445a      	add	r2, fp
 801661c:	42ba      	cmp	r2, r7
 801661e:	f240 80b5 	bls.w	801678c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8016622:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8016626:	33fc      	adds	r3, #252	@ 0xfc
 8016628:	b2ba      	uxth	r2, r7
 801662a:	4413      	add	r3, r2
 801662c:	b29b      	uxth	r3, r3
 801662e:	fb0a f903 	mul.w	r9, sl, r3
 8016632:	45d9      	cmp	r9, fp
 8016634:	9305      	str	r3, [sp, #20]
 8016636:	9306      	str	r3, [sp, #24]
 8016638:	f0c0 80b7 	bcc.w	80167aa <uxr_prepare_reliable_buffer_to_write+0x216>
 801663c:	f108 0304 	add.w	r3, r8, #4
 8016640:	42bb      	cmp	r3, r7
 8016642:	f080 80db 	bcs.w	80167fc <uxr_prepare_reliable_buffer_to_write+0x268>
 8016646:	f1a2 0904 	sub.w	r9, r2, #4
 801664a:	eba9 0908 	sub.w	r9, r9, r8
 801664e:	9b05      	ldr	r3, [sp, #20]
 8016650:	fa1f f989 	uxth.w	r9, r9
 8016654:	ebab 0b09 	sub.w	fp, fp, r9
 8016658:	fbbb f2f3 	udiv	r2, fp, r3
 801665c:	fb03 b312 	mls	r3, r3, r2, fp
 8016660:	2b00      	cmp	r3, #0
 8016662:	f000 80c8 	beq.w	80167f6 <uxr_prepare_reliable_buffer_to_write+0x262>
 8016666:	3201      	adds	r2, #1
 8016668:	b292      	uxth	r2, r2
 801666a:	9306      	str	r3, [sp, #24]
 801666c:	4552      	cmp	r2, sl
 801666e:	f200 809c 	bhi.w	80167aa <uxr_prepare_reliable_buffer_to_write+0x216>
 8016672:	f10d 0b20 	add.w	fp, sp, #32
 8016676:	2a00      	cmp	r2, #0
 8016678:	d042      	beq.n	8016700 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801667a:	f8cd 801c 	str.w	r8, [sp, #28]
 801667e:	f04f 0a00 	mov.w	sl, #0
 8016682:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8016686:	9505      	str	r5, [sp, #20]
 8016688:	f10d 0b20 	add.w	fp, sp, #32
 801668c:	4615      	mov	r5, r2
 801668e:	e000      	b.n	8016692 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8016690:	46c1      	mov	r9, r8
 8016692:	8920      	ldrh	r0, [r4, #8]
 8016694:	fbb6 f2f0 	udiv	r2, r6, r0
 8016698:	fb00 6112 	mls	r1, r0, r2, r6
 801669c:	b28a      	uxth	r2, r1
 801669e:	6863      	ldr	r3, [r4, #4]
 80166a0:	fbb3 f1f0 	udiv	r1, r3, r0
 80166a4:	6823      	ldr	r3, [r4, #0]
 80166a6:	fb02 f101 	mul.w	r1, r2, r1
 80166aa:	3104      	adds	r1, #4
 80166ac:	4419      	add	r1, r3
 80166ae:	4658      	mov	r0, fp
 80166b0:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80166b4:	9200      	str	r2, [sp, #0]
 80166b6:	2300      	movs	r3, #0
 80166b8:	463a      	mov	r2, r7
 80166ba:	f7f7 fc41 	bl	800df40 <ucdr_init_buffer_origin_offset>
 80166be:	464a      	mov	r2, r9
 80166c0:	2300      	movs	r3, #0
 80166c2:	210d      	movs	r1, #13
 80166c4:	4658      	mov	r0, fp
 80166c6:	f7f9 ff3d 	bl	8010544 <uxr_buffer_submessage_header>
 80166ca:	8921      	ldrh	r1, [r4, #8]
 80166cc:	fbb6 f2f1 	udiv	r2, r6, r1
 80166d0:	fb01 6212 	mls	r2, r1, r2, r6
 80166d4:	b292      	uxth	r2, r2
 80166d6:	6863      	ldr	r3, [r4, #4]
 80166d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80166dc:	fb02 f303 	mul.w	r3, r2, r3
 80166e0:	6822      	ldr	r2, [r4, #0]
 80166e2:	4630      	mov	r0, r6
 80166e4:	50d7      	str	r7, [r2, r3]
 80166e6:	2101      	movs	r1, #1
 80166e8:	f000 f9c4 	bl	8016a74 <uxr_seq_num_add>
 80166ec:	f10a 0a01 	add.w	sl, sl, #1
 80166f0:	fa1f f38a 	uxth.w	r3, sl
 80166f4:	429d      	cmp	r5, r3
 80166f6:	4606      	mov	r6, r0
 80166f8:	d8ca      	bhi.n	8016690 <uxr_prepare_reliable_buffer_to_write+0xfc>
 80166fa:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80166fe:	9d05      	ldr	r5, [sp, #20]
 8016700:	8920      	ldrh	r0, [r4, #8]
 8016702:	fbb6 f3f0 	udiv	r3, r6, r0
 8016706:	fb00 6313 	mls	r3, r0, r3, r6
 801670a:	b299      	uxth	r1, r3
 801670c:	6863      	ldr	r3, [r4, #4]
 801670e:	fbb3 f3f0 	udiv	r3, r3, r0
 8016712:	fb01 f303 	mul.w	r3, r1, r3
 8016716:	6821      	ldr	r1, [r4, #0]
 8016718:	3304      	adds	r3, #4
 801671a:	4419      	add	r1, r3
 801671c:	463a      	mov	r2, r7
 801671e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8016722:	9000      	str	r0, [sp, #0]
 8016724:	2300      	movs	r3, #0
 8016726:	4658      	mov	r0, fp
 8016728:	f7f7 fc0a 	bl	800df40 <ucdr_init_buffer_origin_offset>
 801672c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8016730:	4658      	mov	r0, fp
 8016732:	fa1f f289 	uxth.w	r2, r9
 8016736:	2302      	movs	r3, #2
 8016738:	210d      	movs	r1, #13
 801673a:	f7f9 ff03 	bl	8010544 <uxr_buffer_submessage_header>
 801673e:	9b03      	ldr	r3, [sp, #12]
 8016740:	8927      	ldrh	r7, [r4, #8]
 8016742:	7b20      	ldrb	r0, [r4, #12]
 8016744:	f108 0104 	add.w	r1, r8, #4
 8016748:	440b      	add	r3, r1
 801674a:	4619      	mov	r1, r3
 801674c:	fbb6 f3f7 	udiv	r3, r6, r7
 8016750:	fb07 6313 	mls	r3, r7, r3, r6
 8016754:	f1a5 0208 	sub.w	r2, r5, #8
 8016758:	b29d      	uxth	r5, r3
 801675a:	3004      	adds	r0, #4
 801675c:	6863      	ldr	r3, [r4, #4]
 801675e:	fbb3 f3f7 	udiv	r3, r3, r7
 8016762:	fb05 f303 	mul.w	r3, r5, r3
 8016766:	6825      	ldr	r5, [r4, #0]
 8016768:	4448      	add	r0, r9
 801676a:	50e8      	str	r0, [r5, r3]
 801676c:	9d04      	ldr	r5, [sp, #16]
 801676e:	eba2 0208 	sub.w	r2, r2, r8
 8016772:	4628      	mov	r0, r5
 8016774:	f7f7 fbf6 	bl	800df64 <ucdr_init_buffer>
 8016778:	4628      	mov	r0, r5
 801677a:	493c      	ldr	r1, [pc, #240]	@ (801686c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801677c:	4622      	mov	r2, r4
 801677e:	f7f7 fbc5 	bl	800df0c <ucdr_set_on_full_buffer_callback>
 8016782:	2001      	movs	r0, #1
 8016784:	81e6      	strh	r6, [r4, #14]
 8016786:	b011      	add	sp, #68	@ 0x44
 8016788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801678c:	2101      	movs	r1, #1
 801678e:	89e0      	ldrh	r0, [r4, #14]
 8016790:	f000 f970 	bl	8016a74 <uxr_seq_num_add>
 8016794:	8921      	ldrh	r1, [r4, #8]
 8016796:	4605      	mov	r5, r0
 8016798:	8a60      	ldrh	r0, [r4, #18]
 801679a:	f000 f96b 	bl	8016a74 <uxr_seq_num_add>
 801679e:	4601      	mov	r1, r0
 80167a0:	4628      	mov	r0, r5
 80167a2:	f000 f96f 	bl	8016a84 <uxr_seq_num_cmp>
 80167a6:	2800      	cmp	r0, #0
 80167a8:	dd42      	ble.n	8016830 <uxr_prepare_reliable_buffer_to_write+0x29c>
 80167aa:	2000      	movs	r0, #0
 80167ac:	b011      	add	sp, #68	@ 0x44
 80167ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167b2:	8921      	ldrh	r1, [r4, #8]
 80167b4:	8a60      	ldrh	r0, [r4, #18]
 80167b6:	9205      	str	r2, [sp, #20]
 80167b8:	f000 f95c 	bl	8016a74 <uxr_seq_num_add>
 80167bc:	4601      	mov	r1, r0
 80167be:	4630      	mov	r0, r6
 80167c0:	f000 f960 	bl	8016a84 <uxr_seq_num_cmp>
 80167c4:	2800      	cmp	r0, #0
 80167c6:	9a05      	ldr	r2, [sp, #20]
 80167c8:	dcef      	bgt.n	80167aa <uxr_prepare_reliable_buffer_to_write+0x216>
 80167ca:	8927      	ldrh	r7, [r4, #8]
 80167cc:	fbb6 f3f7 	udiv	r3, r6, r7
 80167d0:	fb07 6313 	mls	r3, r7, r3, r6
 80167d4:	b29d      	uxth	r5, r3
 80167d6:	6863      	ldr	r3, [r4, #4]
 80167d8:	6824      	ldr	r4, [r4, #0]
 80167da:	fbb3 f3f7 	udiv	r3, r3, r7
 80167de:	fb05 f303 	mul.w	r3, r5, r3
 80167e2:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80167e6:	50e2      	str	r2, [r4, r3]
 80167e8:	2300      	movs	r3, #0
 80167ea:	f8cd 8000 	str.w	r8, [sp]
 80167ee:	f7f7 fba7 	bl	800df40 <ucdr_init_buffer_origin_offset>
 80167f2:	2001      	movs	r0, #1
 80167f4:	e7da      	b.n	80167ac <uxr_prepare_reliable_buffer_to_write+0x218>
 80167f6:	b293      	uxth	r3, r2
 80167f8:	461a      	mov	r2, r3
 80167fa:	e737      	b.n	801666c <uxr_prepare_reliable_buffer_to_write+0xd8>
 80167fc:	4630      	mov	r0, r6
 80167fe:	2101      	movs	r1, #1
 8016800:	9207      	str	r2, [sp, #28]
 8016802:	f000 f937 	bl	8016a74 <uxr_seq_num_add>
 8016806:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801680a:	fbb0 f1fc 	udiv	r1, r0, ip
 801680e:	fb0c 0111 	mls	r1, ip, r1, r0
 8016812:	4606      	mov	r6, r0
 8016814:	b288      	uxth	r0, r1
 8016816:	6863      	ldr	r3, [r4, #4]
 8016818:	fbb3 f1fc 	udiv	r1, r3, ip
 801681c:	6823      	ldr	r3, [r4, #0]
 801681e:	9a07      	ldr	r2, [sp, #28]
 8016820:	fb00 f101 	mul.w	r1, r0, r1
 8016824:	3104      	adds	r1, #4
 8016826:	440b      	add	r3, r1
 8016828:	9303      	str	r3, [sp, #12]
 801682a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801682e:	e70a      	b.n	8016646 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8016830:	8921      	ldrh	r1, [r4, #8]
 8016832:	fbb5 f3f1 	udiv	r3, r5, r1
 8016836:	fb01 5313 	mls	r3, r1, r3, r5
 801683a:	b29a      	uxth	r2, r3
 801683c:	6863      	ldr	r3, [r4, #4]
 801683e:	fbb3 f3f1 	udiv	r3, r3, r1
 8016842:	6821      	ldr	r1, [r4, #0]
 8016844:	9804      	ldr	r0, [sp, #16]
 8016846:	fb02 f303 	mul.w	r3, r2, r3
 801684a:	3304      	adds	r3, #4
 801684c:	7b22      	ldrb	r2, [r4, #12]
 801684e:	4419      	add	r1, r3
 8016850:	445a      	add	r2, fp
 8016852:	f841 2c04 	str.w	r2, [r1, #-4]
 8016856:	7b23      	ldrb	r3, [r4, #12]
 8016858:	9300      	str	r3, [sp, #0]
 801685a:	2300      	movs	r3, #0
 801685c:	f7f7 fb70 	bl	800df40 <ucdr_init_buffer_origin_offset>
 8016860:	81e5      	strh	r5, [r4, #14]
 8016862:	2001      	movs	r0, #1
 8016864:	e7a2      	b.n	80167ac <uxr_prepare_reliable_buffer_to_write+0x218>
 8016866:	4682      	mov	sl, r0
 8016868:	e6ca      	b.n	8016600 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801686a:	bf00      	nop
 801686c:	08016475 	.word	0x08016475

08016870 <uxr_prepare_next_reliable_buffer_to_send>:
 8016870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016872:	4604      	mov	r4, r0
 8016874:	460f      	mov	r7, r1
 8016876:	8a00      	ldrh	r0, [r0, #16]
 8016878:	2101      	movs	r1, #1
 801687a:	4616      	mov	r6, r2
 801687c:	461d      	mov	r5, r3
 801687e:	f000 f8f9 	bl	8016a74 <uxr_seq_num_add>
 8016882:	8028      	strh	r0, [r5, #0]
 8016884:	8922      	ldrh	r2, [r4, #8]
 8016886:	fbb0 f3f2 	udiv	r3, r0, r2
 801688a:	fb02 0c13 	mls	ip, r2, r3, r0
 801688e:	fa1f fc8c 	uxth.w	ip, ip
 8016892:	6863      	ldr	r3, [r4, #4]
 8016894:	fbb3 f3f2 	udiv	r3, r3, r2
 8016898:	fb0c fc03 	mul.w	ip, ip, r3
 801689c:	6823      	ldr	r3, [r4, #0]
 801689e:	89e1      	ldrh	r1, [r4, #14]
 80168a0:	f10c 0c04 	add.w	ip, ip, #4
 80168a4:	4463      	add	r3, ip
 80168a6:	603b      	str	r3, [r7, #0]
 80168a8:	6823      	ldr	r3, [r4, #0]
 80168aa:	449c      	add	ip, r3
 80168ac:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 80168b0:	6033      	str	r3, [r6, #0]
 80168b2:	f000 f8e7 	bl	8016a84 <uxr_seq_num_cmp>
 80168b6:	2800      	cmp	r0, #0
 80168b8:	dd01      	ble.n	80168be <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80168ba:	2000      	movs	r0, #0
 80168bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80168be:	7b23      	ldrb	r3, [r4, #12]
 80168c0:	6832      	ldr	r2, [r6, #0]
 80168c2:	429a      	cmp	r2, r3
 80168c4:	d9f9      	bls.n	80168ba <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80168c6:	8a61      	ldrh	r1, [r4, #18]
 80168c8:	8a20      	ldrh	r0, [r4, #16]
 80168ca:	f000 f8d7 	bl	8016a7c <uxr_seq_num_sub>
 80168ce:	8923      	ldrh	r3, [r4, #8]
 80168d0:	4283      	cmp	r3, r0
 80168d2:	d0f2      	beq.n	80168ba <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80168d4:	8828      	ldrh	r0, [r5, #0]
 80168d6:	89e3      	ldrh	r3, [r4, #14]
 80168d8:	8220      	strh	r0, [r4, #16]
 80168da:	4298      	cmp	r0, r3
 80168dc:	d001      	beq.n	80168e2 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80168de:	2001      	movs	r0, #1
 80168e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80168e2:	2101      	movs	r1, #1
 80168e4:	f000 f8c6 	bl	8016a74 <uxr_seq_num_add>
 80168e8:	81e0      	strh	r0, [r4, #14]
 80168ea:	2001      	movs	r0, #1
 80168ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80168ee:	bf00      	nop

080168f0 <uxr_update_output_stream_heartbeat_timestamp>:
 80168f0:	b570      	push	{r4, r5, r6, lr}
 80168f2:	8a01      	ldrh	r1, [r0, #16]
 80168f4:	4604      	mov	r4, r0
 80168f6:	8a40      	ldrh	r0, [r0, #18]
 80168f8:	4615      	mov	r5, r2
 80168fa:	461e      	mov	r6, r3
 80168fc:	f000 f8c2 	bl	8016a84 <uxr_seq_num_cmp>
 8016900:	2800      	cmp	r0, #0
 8016902:	db07      	blt.n	8016914 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8016904:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016908:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801690c:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8016910:	2000      	movs	r0, #0
 8016912:	bd70      	pop	{r4, r5, r6, pc}
 8016914:	f894 0020 	ldrb.w	r0, [r4, #32]
 8016918:	b940      	cbnz	r0, 801692c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801691a:	2301      	movs	r3, #1
 801691c:	f884 3020 	strb.w	r3, [r4, #32]
 8016920:	3564      	adds	r5, #100	@ 0x64
 8016922:	f146 0600 	adc.w	r6, r6, #0
 8016926:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801692a:	bd70      	pop	{r4, r5, r6, pc}
 801692c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8016930:	4295      	cmp	r5, r2
 8016932:	eb76 0303 	sbcs.w	r3, r6, r3
 8016936:	bfa5      	ittet	ge
 8016938:	3001      	addge	r0, #1
 801693a:	f884 0020 	strbge.w	r0, [r4, #32]
 801693e:	2000      	movlt	r0, #0
 8016940:	2001      	movge	r0, #1
 8016942:	e7ed      	b.n	8016920 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08016944 <uxr_begin_output_nack_buffer_it>:
 8016944:	8a40      	ldrh	r0, [r0, #18]
 8016946:	4770      	bx	lr

08016948 <uxr_next_reliable_nack_buffer_to_send>:
 8016948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801694c:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8016950:	b082      	sub	sp, #8
 8016952:	f1b8 0f00 	cmp.w	r8, #0
 8016956:	d011      	beq.n	801697c <uxr_next_reliable_nack_buffer_to_send+0x34>
 8016958:	4604      	mov	r4, r0
 801695a:	8818      	ldrh	r0, [r3, #0]
 801695c:	460e      	mov	r6, r1
 801695e:	4617      	mov	r7, r2
 8016960:	461d      	mov	r5, r3
 8016962:	2101      	movs	r1, #1
 8016964:	f000 f886 	bl	8016a74 <uxr_seq_num_add>
 8016968:	8028      	strh	r0, [r5, #0]
 801696a:	8a21      	ldrh	r1, [r4, #16]
 801696c:	f000 f88a 	bl	8016a84 <uxr_seq_num_cmp>
 8016970:	2800      	cmp	r0, #0
 8016972:	dd07      	ble.n	8016984 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8016974:	f04f 0800 	mov.w	r8, #0
 8016978:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 801697c:	4640      	mov	r0, r8
 801697e:	b002      	add	sp, #8
 8016980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016984:	8921      	ldrh	r1, [r4, #8]
 8016986:	8828      	ldrh	r0, [r5, #0]
 8016988:	6823      	ldr	r3, [r4, #0]
 801698a:	fbb0 f2f1 	udiv	r2, r0, r1
 801698e:	fb01 0c12 	mls	ip, r1, r2, r0
 8016992:	fa1f f28c 	uxth.w	r2, ip
 8016996:	9301      	str	r3, [sp, #4]
 8016998:	6863      	ldr	r3, [r4, #4]
 801699a:	fbb3 fcf1 	udiv	ip, r3, r1
 801699e:	9b01      	ldr	r3, [sp, #4]
 80169a0:	fb02 fc0c 	mul.w	ip, r2, ip
 80169a4:	f10c 0c04 	add.w	ip, ip, #4
 80169a8:	4463      	add	r3, ip
 80169aa:	6033      	str	r3, [r6, #0]
 80169ac:	6823      	ldr	r3, [r4, #0]
 80169ae:	4463      	add	r3, ip
 80169b0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80169b4:	603b      	str	r3, [r7, #0]
 80169b6:	7b22      	ldrb	r2, [r4, #12]
 80169b8:	429a      	cmp	r2, r3
 80169ba:	d0d2      	beq.n	8016962 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 80169bc:	4640      	mov	r0, r8
 80169be:	b002      	add	sp, #8
 80169c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080169c4 <uxr_process_acknack>:
 80169c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169c6:	4604      	mov	r4, r0
 80169c8:	460e      	mov	r6, r1
 80169ca:	4610      	mov	r0, r2
 80169cc:	2101      	movs	r1, #1
 80169ce:	f000 f855 	bl	8016a7c <uxr_seq_num_sub>
 80169d2:	8a61      	ldrh	r1, [r4, #18]
 80169d4:	f000 f852 	bl	8016a7c <uxr_seq_num_sub>
 80169d8:	b1c0      	cbz	r0, 8016a0c <uxr_process_acknack+0x48>
 80169da:	4605      	mov	r5, r0
 80169dc:	2700      	movs	r7, #0
 80169de:	2101      	movs	r1, #1
 80169e0:	8a60      	ldrh	r0, [r4, #18]
 80169e2:	f000 f847 	bl	8016a74 <uxr_seq_num_add>
 80169e6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80169ea:	fbb0 f1fc 	udiv	r1, r0, ip
 80169ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80169f2:	fb0c 0111 	mls	r1, ip, r1, r0
 80169f6:	b289      	uxth	r1, r1
 80169f8:	3701      	adds	r7, #1
 80169fa:	fbb3 f3fc 	udiv	r3, r3, ip
 80169fe:	fb01 f303 	mul.w	r3, r1, r3
 8016a02:	42bd      	cmp	r5, r7
 8016a04:	7b21      	ldrb	r1, [r4, #12]
 8016a06:	8260      	strh	r0, [r4, #18]
 8016a08:	50d1      	str	r1, [r2, r3]
 8016a0a:	d1e8      	bne.n	80169de <uxr_process_acknack+0x1a>
 8016a0c:	3e00      	subs	r6, #0
 8016a0e:	f04f 0300 	mov.w	r3, #0
 8016a12:	bf18      	it	ne
 8016a14:	2601      	movne	r6, #1
 8016a16:	f884 3020 	strb.w	r3, [r4, #32]
 8016a1a:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8016a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016a20 <uxr_is_output_up_to_date>:
 8016a20:	8a01      	ldrh	r1, [r0, #16]
 8016a22:	8a40      	ldrh	r0, [r0, #18]
 8016a24:	b508      	push	{r3, lr}
 8016a26:	f000 f82d 	bl	8016a84 <uxr_seq_num_cmp>
 8016a2a:	fab0 f080 	clz	r0, r0
 8016a2e:	0940      	lsrs	r0, r0, #5
 8016a30:	bd08      	pop	{r3, pc}
 8016a32:	bf00      	nop

08016a34 <get_available_free_slots>:
 8016a34:	8902      	ldrh	r2, [r0, #8]
 8016a36:	b1da      	cbz	r2, 8016a70 <get_available_free_slots+0x3c>
 8016a38:	b530      	push	{r4, r5, lr}
 8016a3a:	2100      	movs	r1, #0
 8016a3c:	6843      	ldr	r3, [r0, #4]
 8016a3e:	6805      	ldr	r5, [r0, #0]
 8016a40:	7b04      	ldrb	r4, [r0, #12]
 8016a42:	fbb3 fef2 	udiv	lr, r3, r2
 8016a46:	4608      	mov	r0, r1
 8016a48:	460b      	mov	r3, r1
 8016a4a:	fbb3 fcf2 	udiv	ip, r3, r2
 8016a4e:	fb02 331c 	mls	r3, r2, ip, r3
 8016a52:	b29b      	uxth	r3, r3
 8016a54:	fb0e f303 	mul.w	r3, lr, r3
 8016a58:	3101      	adds	r1, #1
 8016a5a:	f855 c003 	ldr.w	ip, [r5, r3]
 8016a5e:	4564      	cmp	r4, ip
 8016a60:	bf08      	it	eq
 8016a62:	3001      	addeq	r0, #1
 8016a64:	b28b      	uxth	r3, r1
 8016a66:	bf08      	it	eq
 8016a68:	b280      	uxtheq	r0, r0
 8016a6a:	4293      	cmp	r3, r2
 8016a6c:	d3ed      	bcc.n	8016a4a <get_available_free_slots+0x16>
 8016a6e:	bd30      	pop	{r4, r5, pc}
 8016a70:	4610      	mov	r0, r2
 8016a72:	4770      	bx	lr

08016a74 <uxr_seq_num_add>:
 8016a74:	4408      	add	r0, r1
 8016a76:	b280      	uxth	r0, r0
 8016a78:	4770      	bx	lr
 8016a7a:	bf00      	nop

08016a7c <uxr_seq_num_sub>:
 8016a7c:	1a40      	subs	r0, r0, r1
 8016a7e:	b280      	uxth	r0, r0
 8016a80:	4770      	bx	lr
 8016a82:	bf00      	nop

08016a84 <uxr_seq_num_cmp>:
 8016a84:	4288      	cmp	r0, r1
 8016a86:	d011      	beq.n	8016aac <uxr_seq_num_cmp+0x28>
 8016a88:	d309      	bcc.n	8016a9e <uxr_seq_num_cmp+0x1a>
 8016a8a:	4288      	cmp	r0, r1
 8016a8c:	d910      	bls.n	8016ab0 <uxr_seq_num_cmp+0x2c>
 8016a8e:	1a40      	subs	r0, r0, r1
 8016a90:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8016a94:	bfd4      	ite	le
 8016a96:	2001      	movle	r0, #1
 8016a98:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8016a9c:	4770      	bx	lr
 8016a9e:	1a0b      	subs	r3, r1, r0
 8016aa0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016aa4:	daf1      	bge.n	8016a8a <uxr_seq_num_cmp+0x6>
 8016aa6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016aaa:	4770      	bx	lr
 8016aac:	2000      	movs	r0, #0
 8016aae:	4770      	bx	lr
 8016ab0:	2001      	movs	r0, #1
 8016ab2:	4770      	bx	lr

08016ab4 <rcl_get_default_domain_id>:
 8016ab4:	b530      	push	{r4, r5, lr}
 8016ab6:	b083      	sub	sp, #12
 8016ab8:	2300      	movs	r3, #0
 8016aba:	9300      	str	r3, [sp, #0]
 8016abc:	b1d0      	cbz	r0, 8016af4 <rcl_get_default_domain_id+0x40>
 8016abe:	4604      	mov	r4, r0
 8016ac0:	4669      	mov	r1, sp
 8016ac2:	4815      	ldr	r0, [pc, #84]	@ (8016b18 <rcl_get_default_domain_id+0x64>)
 8016ac4:	f7fd ff04 	bl	80148d0 <rcutils_get_env>
 8016ac8:	4602      	mov	r2, r0
 8016aca:	b110      	cbz	r0, 8016ad2 <rcl_get_default_domain_id+0x1e>
 8016acc:	2001      	movs	r0, #1
 8016ace:	b003      	add	sp, #12
 8016ad0:	bd30      	pop	{r4, r5, pc}
 8016ad2:	9b00      	ldr	r3, [sp, #0]
 8016ad4:	b18b      	cbz	r3, 8016afa <rcl_get_default_domain_id+0x46>
 8016ad6:	7818      	ldrb	r0, [r3, #0]
 8016ad8:	2800      	cmp	r0, #0
 8016ada:	d0f8      	beq.n	8016ace <rcl_get_default_domain_id+0x1a>
 8016adc:	a901      	add	r1, sp, #4
 8016ade:	4618      	mov	r0, r3
 8016ae0:	9201      	str	r2, [sp, #4]
 8016ae2:	f000 fdf1 	bl	80176c8 <strtoul>
 8016ae6:	4605      	mov	r5, r0
 8016ae8:	b150      	cbz	r0, 8016b00 <rcl_get_default_domain_id+0x4c>
 8016aea:	1c43      	adds	r3, r0, #1
 8016aec:	d00d      	beq.n	8016b0a <rcl_get_default_domain_id+0x56>
 8016aee:	6025      	str	r5, [r4, #0]
 8016af0:	2000      	movs	r0, #0
 8016af2:	e7ec      	b.n	8016ace <rcl_get_default_domain_id+0x1a>
 8016af4:	200b      	movs	r0, #11
 8016af6:	b003      	add	sp, #12
 8016af8:	bd30      	pop	{r4, r5, pc}
 8016afa:	4618      	mov	r0, r3
 8016afc:	b003      	add	sp, #12
 8016afe:	bd30      	pop	{r4, r5, pc}
 8016b00:	9b01      	ldr	r3, [sp, #4]
 8016b02:	781b      	ldrb	r3, [r3, #0]
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d0f2      	beq.n	8016aee <rcl_get_default_domain_id+0x3a>
 8016b08:	e7e0      	b.n	8016acc <rcl_get_default_domain_id+0x18>
 8016b0a:	f001 f829 	bl	8017b60 <__errno>
 8016b0e:	6803      	ldr	r3, [r0, #0]
 8016b10:	2b22      	cmp	r3, #34	@ 0x22
 8016b12:	d1ec      	bne.n	8016aee <rcl_get_default_domain_id+0x3a>
 8016b14:	e7da      	b.n	8016acc <rcl_get_default_domain_id+0x18>
 8016b16:	bf00      	nop
 8016b18:	080195bc 	.word	0x080195bc

08016b1c <rcl_expand_topic_name>:
 8016b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b20:	b08b      	sub	sp, #44	@ 0x2c
 8016b22:	9306      	str	r3, [sp, #24]
 8016b24:	2800      	cmp	r0, #0
 8016b26:	f000 80ad 	beq.w	8016c84 <rcl_expand_topic_name+0x168>
 8016b2a:	460e      	mov	r6, r1
 8016b2c:	2900      	cmp	r1, #0
 8016b2e:	f000 80a9 	beq.w	8016c84 <rcl_expand_topic_name+0x168>
 8016b32:	4617      	mov	r7, r2
 8016b34:	2a00      	cmp	r2, #0
 8016b36:	f000 80a5 	beq.w	8016c84 <rcl_expand_topic_name+0x168>
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	f000 80a2 	beq.w	8016c84 <rcl_expand_topic_name+0x168>
 8016b40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	f000 809e 	beq.w	8016c84 <rcl_expand_topic_name+0x168>
 8016b48:	2200      	movs	r2, #0
 8016b4a:	a909      	add	r1, sp, #36	@ 0x24
 8016b4c:	4680      	mov	r8, r0
 8016b4e:	f000 fa57 	bl	8017000 <rcl_validate_topic_name>
 8016b52:	4604      	mov	r4, r0
 8016b54:	2800      	cmp	r0, #0
 8016b56:	f040 8096 	bne.w	8016c86 <rcl_expand_topic_name+0x16a>
 8016b5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	f040 809a 	bne.w	8016c96 <rcl_expand_topic_name+0x17a>
 8016b62:	4602      	mov	r2, r0
 8016b64:	a909      	add	r1, sp, #36	@ 0x24
 8016b66:	4630      	mov	r0, r6
 8016b68:	f7fe fafc 	bl	8015164 <rmw_validate_node_name>
 8016b6c:	2800      	cmp	r0, #0
 8016b6e:	f040 808e 	bne.w	8016c8e <rcl_expand_topic_name+0x172>
 8016b72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016b74:	2a00      	cmp	r2, #0
 8016b76:	f040 8093 	bne.w	8016ca0 <rcl_expand_topic_name+0x184>
 8016b7a:	a909      	add	r1, sp, #36	@ 0x24
 8016b7c:	4638      	mov	r0, r7
 8016b7e:	f7fe fad3 	bl	8015128 <rmw_validate_namespace>
 8016b82:	2800      	cmp	r0, #0
 8016b84:	f040 8083 	bne.w	8016c8e <rcl_expand_topic_name+0x172>
 8016b88:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8016b8a:	2c00      	cmp	r4, #0
 8016b8c:	f040 80ed 	bne.w	8016d6a <rcl_expand_topic_name+0x24e>
 8016b90:	217b      	movs	r1, #123	@ 0x7b
 8016b92:	4640      	mov	r0, r8
 8016b94:	f000 ff58 	bl	8017a48 <strchr>
 8016b98:	f898 3000 	ldrb.w	r3, [r8]
 8016b9c:	2b2f      	cmp	r3, #47	@ 0x2f
 8016b9e:	4605      	mov	r5, r0
 8016ba0:	f000 809e 	beq.w	8016ce0 <rcl_expand_topic_name+0x1c4>
 8016ba4:	2b7e      	cmp	r3, #126	@ 0x7e
 8016ba6:	f040 80a2 	bne.w	8016cee <rcl_expand_topic_name+0x1d2>
 8016baa:	4638      	mov	r0, r7
 8016bac:	f7e9 fb42 	bl	8000234 <strlen>
 8016bb0:	4a82      	ldr	r2, [pc, #520]	@ (8016dbc <rcl_expand_topic_name+0x2a0>)
 8016bb2:	4b83      	ldr	r3, [pc, #524]	@ (8016dc0 <rcl_expand_topic_name+0x2a4>)
 8016bb4:	2801      	cmp	r0, #1
 8016bb6:	bf18      	it	ne
 8016bb8:	4613      	movne	r3, r2
 8016bba:	9302      	str	r3, [sp, #8]
 8016bbc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8016bbe:	9300      	str	r3, [sp, #0]
 8016bc0:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8016bc4:	f108 0301 	add.w	r3, r8, #1
 8016bc8:	9305      	str	r3, [sp, #20]
 8016bca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016bce:	9301      	str	r3, [sp, #4]
 8016bd0:	ab14      	add	r3, sp, #80	@ 0x50
 8016bd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016bd4:	f7fd fea4 	bl	8014920 <rcutils_format_string_limit>
 8016bd8:	4682      	mov	sl, r0
 8016bda:	2800      	cmp	r0, #0
 8016bdc:	f000 80c7 	beq.w	8016d6e <rcl_expand_topic_name+0x252>
 8016be0:	2d00      	cmp	r5, #0
 8016be2:	f000 80a2 	beq.w	8016d2a <rcl_expand_topic_name+0x20e>
 8016be6:	217b      	movs	r1, #123	@ 0x7b
 8016be8:	f000 ff2e 	bl	8017a48 <strchr>
 8016bec:	46d1      	mov	r9, sl
 8016bee:	4605      	mov	r5, r0
 8016bf0:	9407      	str	r4, [sp, #28]
 8016bf2:	46d3      	mov	fp, sl
 8016bf4:	464c      	mov	r4, r9
 8016bf6:	2d00      	cmp	r5, #0
 8016bf8:	f000 80be 	beq.w	8016d78 <rcl_expand_topic_name+0x25c>
 8016bfc:	217d      	movs	r1, #125	@ 0x7d
 8016bfe:	4620      	mov	r0, r4
 8016c00:	f000 ff22 	bl	8017a48 <strchr>
 8016c04:	eba0 0905 	sub.w	r9, r0, r5
 8016c08:	f109 0a01 	add.w	sl, r9, #1
 8016c0c:	486d      	ldr	r0, [pc, #436]	@ (8016dc4 <rcl_expand_topic_name+0x2a8>)
 8016c0e:	4652      	mov	r2, sl
 8016c10:	4629      	mov	r1, r5
 8016c12:	f000 ff26 	bl	8017a62 <strncmp>
 8016c16:	2800      	cmp	r0, #0
 8016c18:	d067      	beq.n	8016cea <rcl_expand_topic_name+0x1ce>
 8016c1a:	486b      	ldr	r0, [pc, #428]	@ (8016dc8 <rcl_expand_topic_name+0x2ac>)
 8016c1c:	4652      	mov	r2, sl
 8016c1e:	4629      	mov	r1, r5
 8016c20:	f000 ff1f 	bl	8017a62 <strncmp>
 8016c24:	b130      	cbz	r0, 8016c34 <rcl_expand_topic_name+0x118>
 8016c26:	4869      	ldr	r0, [pc, #420]	@ (8016dcc <rcl_expand_topic_name+0x2b0>)
 8016c28:	4652      	mov	r2, sl
 8016c2a:	4629      	mov	r1, r5
 8016c2c:	f000 ff19 	bl	8017a62 <strncmp>
 8016c30:	2800      	cmp	r0, #0
 8016c32:	d137      	bne.n	8016ca4 <rcl_expand_topic_name+0x188>
 8016c34:	46b9      	mov	r9, r7
 8016c36:	ab16      	add	r3, sp, #88	@ 0x58
 8016c38:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016c3c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016c40:	ab14      	add	r3, sp, #80	@ 0x50
 8016c42:	4628      	mov	r0, r5
 8016c44:	cb0c      	ldmia	r3, {r2, r3}
 8016c46:	4651      	mov	r1, sl
 8016c48:	f7fd ffa6 	bl	8014b98 <rcutils_strndup>
 8016c4c:	4605      	mov	r5, r0
 8016c4e:	2800      	cmp	r0, #0
 8016c50:	f000 809c 	beq.w	8016d8c <rcl_expand_topic_name+0x270>
 8016c54:	464a      	mov	r2, r9
 8016c56:	4620      	mov	r0, r4
 8016c58:	ab14      	add	r3, sp, #80	@ 0x50
 8016c5a:	4629      	mov	r1, r5
 8016c5c:	f7fd fe9a 	bl	8014994 <rcutils_repl_str>
 8016c60:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016c62:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016c64:	4604      	mov	r4, r0
 8016c66:	4628      	mov	r0, r5
 8016c68:	4798      	blx	r3
 8016c6a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016c6c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016c6e:	4658      	mov	r0, fp
 8016c70:	4798      	blx	r3
 8016c72:	2c00      	cmp	r4, #0
 8016c74:	d07b      	beq.n	8016d6e <rcl_expand_topic_name+0x252>
 8016c76:	217b      	movs	r1, #123	@ 0x7b
 8016c78:	4620      	mov	r0, r4
 8016c7a:	f000 fee5 	bl	8017a48 <strchr>
 8016c7e:	46a3      	mov	fp, r4
 8016c80:	4605      	mov	r5, r0
 8016c82:	e7b8      	b.n	8016bf6 <rcl_expand_topic_name+0xda>
 8016c84:	240b      	movs	r4, #11
 8016c86:	4620      	mov	r0, r4
 8016c88:	b00b      	add	sp, #44	@ 0x2c
 8016c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c8e:	f7fa ff71 	bl	8011b74 <rcl_convert_rmw_ret_to_rcl_ret>
 8016c92:	4604      	mov	r4, r0
 8016c94:	e7f7      	b.n	8016c86 <rcl_expand_topic_name+0x16a>
 8016c96:	2467      	movs	r4, #103	@ 0x67
 8016c98:	4620      	mov	r0, r4
 8016c9a:	b00b      	add	sp, #44	@ 0x2c
 8016c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ca0:	24c9      	movs	r4, #201	@ 0xc9
 8016ca2:	e7f0      	b.n	8016c86 <rcl_expand_topic_name+0x16a>
 8016ca4:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8016ca8:	9806      	ldr	r0, [sp, #24]
 8016caa:	1c69      	adds	r1, r5, #1
 8016cac:	f7fe f88e 	bl	8014dcc <rcutils_string_map_getn>
 8016cb0:	4681      	mov	r9, r0
 8016cb2:	2800      	cmp	r0, #0
 8016cb4:	d1bf      	bne.n	8016c36 <rcl_expand_topic_name+0x11a>
 8016cb6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016cb8:	aa16      	add	r2, sp, #88	@ 0x58
 8016cba:	6018      	str	r0, [r3, #0]
 8016cbc:	ca07      	ldmia	r2, {r0, r1, r2}
 8016cbe:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016cc2:	ab14      	add	r3, sp, #80	@ 0x50
 8016cc4:	cb0c      	ldmia	r3, {r2, r3}
 8016cc6:	4651      	mov	r1, sl
 8016cc8:	4628      	mov	r0, r5
 8016cca:	f7fd ff65 	bl	8014b98 <rcutils_strndup>
 8016cce:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016cd0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016cd2:	4798      	blx	r3
 8016cd4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016cd6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016cd8:	4658      	mov	r0, fp
 8016cda:	2469      	movs	r4, #105	@ 0x69
 8016cdc:	4798      	blx	r3
 8016cde:	e7d2      	b.n	8016c86 <rcl_expand_topic_name+0x16a>
 8016ce0:	2800      	cmp	r0, #0
 8016ce2:	d05b      	beq.n	8016d9c <rcl_expand_topic_name+0x280>
 8016ce4:	46c1      	mov	r9, r8
 8016ce6:	46a2      	mov	sl, r4
 8016ce8:	e782      	b.n	8016bf0 <rcl_expand_topic_name+0xd4>
 8016cea:	46b1      	mov	r9, r6
 8016cec:	e7a3      	b.n	8016c36 <rcl_expand_topic_name+0x11a>
 8016cee:	2800      	cmp	r0, #0
 8016cf0:	d1f8      	bne.n	8016ce4 <rcl_expand_topic_name+0x1c8>
 8016cf2:	4638      	mov	r0, r7
 8016cf4:	f7e9 fa9e 	bl	8000234 <strlen>
 8016cf8:	4a35      	ldr	r2, [pc, #212]	@ (8016dd0 <rcl_expand_topic_name+0x2b4>)
 8016cfa:	4b36      	ldr	r3, [pc, #216]	@ (8016dd4 <rcl_expand_topic_name+0x2b8>)
 8016cfc:	f8cd 8010 	str.w	r8, [sp, #16]
 8016d00:	2801      	cmp	r0, #1
 8016d02:	bf18      	it	ne
 8016d04:	4613      	movne	r3, r2
 8016d06:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8016d0a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8016d0e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016d10:	9703      	str	r7, [sp, #12]
 8016d12:	9200      	str	r2, [sp, #0]
 8016d14:	ab14      	add	r3, sp, #80	@ 0x50
 8016d16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016d18:	f7fd fe02 	bl	8014920 <rcutils_format_string_limit>
 8016d1c:	4682      	mov	sl, r0
 8016d1e:	4653      	mov	r3, sl
 8016d20:	b32b      	cbz	r3, 8016d6e <rcl_expand_topic_name+0x252>
 8016d22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016d24:	f8c3 a000 	str.w	sl, [r3]
 8016d28:	e7ad      	b.n	8016c86 <rcl_expand_topic_name+0x16a>
 8016d2a:	f89a 3000 	ldrb.w	r3, [sl]
 8016d2e:	2b2f      	cmp	r3, #47	@ 0x2f
 8016d30:	d0f7      	beq.n	8016d22 <rcl_expand_topic_name+0x206>
 8016d32:	4638      	mov	r0, r7
 8016d34:	f7e9 fa7e 	bl	8000234 <strlen>
 8016d38:	4a25      	ldr	r2, [pc, #148]	@ (8016dd0 <rcl_expand_topic_name+0x2b4>)
 8016d3a:	4b26      	ldr	r3, [pc, #152]	@ (8016dd4 <rcl_expand_topic_name+0x2b8>)
 8016d3c:	f8cd a010 	str.w	sl, [sp, #16]
 8016d40:	2801      	cmp	r0, #1
 8016d42:	bf18      	it	ne
 8016d44:	4613      	movne	r3, r2
 8016d46:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8016d4a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8016d4e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016d50:	9703      	str	r7, [sp, #12]
 8016d52:	9200      	str	r2, [sp, #0]
 8016d54:	ab14      	add	r3, sp, #80	@ 0x50
 8016d56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016d58:	f7fd fde2 	bl	8014920 <rcutils_format_string_limit>
 8016d5c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016d5e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016d60:	4605      	mov	r5, r0
 8016d62:	4650      	mov	r0, sl
 8016d64:	4798      	blx	r3
 8016d66:	46aa      	mov	sl, r5
 8016d68:	e7d9      	b.n	8016d1e <rcl_expand_topic_name+0x202>
 8016d6a:	24ca      	movs	r4, #202	@ 0xca
 8016d6c:	e78b      	b.n	8016c86 <rcl_expand_topic_name+0x16a>
 8016d6e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016d70:	2300      	movs	r3, #0
 8016d72:	6013      	str	r3, [r2, #0]
 8016d74:	240a      	movs	r4, #10
 8016d76:	e786      	b.n	8016c86 <rcl_expand_topic_name+0x16a>
 8016d78:	465b      	mov	r3, fp
 8016d7a:	9c07      	ldr	r4, [sp, #28]
 8016d7c:	46da      	mov	sl, fp
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d1d3      	bne.n	8016d2a <rcl_expand_topic_name+0x20e>
 8016d82:	f898 3000 	ldrb.w	r3, [r8]
 8016d86:	2b2f      	cmp	r3, #47	@ 0x2f
 8016d88:	d0cb      	beq.n	8016d22 <rcl_expand_topic_name+0x206>
 8016d8a:	e7b2      	b.n	8016cf2 <rcl_expand_topic_name+0x1d6>
 8016d8c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8016d90:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016d92:	6015      	str	r5, [r2, #0]
 8016d94:	4658      	mov	r0, fp
 8016d96:	4798      	blx	r3
 8016d98:	240a      	movs	r4, #10
 8016d9a:	e774      	b.n	8016c86 <rcl_expand_topic_name+0x16a>
 8016d9c:	ab17      	add	r3, sp, #92	@ 0x5c
 8016d9e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016da2:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016da6:	ab14      	add	r3, sp, #80	@ 0x50
 8016da8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016daa:	4640      	mov	r0, r8
 8016dac:	f7fd fed2 	bl	8014b54 <rcutils_strdup>
 8016db0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016db2:	2800      	cmp	r0, #0
 8016db4:	6018      	str	r0, [r3, #0]
 8016db6:	bf08      	it	eq
 8016db8:	240a      	moveq	r4, #10
 8016dba:	e764      	b.n	8016c86 <rcl_expand_topic_name+0x16a>
 8016dbc:	080195cc 	.word	0x080195cc
 8016dc0:	08018c84 	.word	0x08018c84
 8016dc4:	080195d4 	.word	0x080195d4
 8016dc8:	080195dc 	.word	0x080195dc
 8016dcc:	080195e4 	.word	0x080195e4
 8016dd0:	08018c4c 	.word	0x08018c4c
 8016dd4:	08018c94 	.word	0x08018c94

08016dd8 <rcl_get_default_topic_name_substitutions>:
 8016dd8:	2800      	cmp	r0, #0
 8016dda:	bf0c      	ite	eq
 8016ddc:	200b      	moveq	r0, #11
 8016dde:	2000      	movne	r0, #0
 8016de0:	4770      	bx	lr
 8016de2:	bf00      	nop

08016de4 <rcl_get_zero_initialized_guard_condition>:
 8016de4:	4a03      	ldr	r2, [pc, #12]	@ (8016df4 <rcl_get_zero_initialized_guard_condition+0x10>)
 8016de6:	4603      	mov	r3, r0
 8016de8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016dec:	e883 0003 	stmia.w	r3, {r0, r1}
 8016df0:	4618      	mov	r0, r3
 8016df2:	4770      	bx	lr
 8016df4:	080195f0 	.word	0x080195f0

08016df8 <rcl_guard_condition_init>:
 8016df8:	b082      	sub	sp, #8
 8016dfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016dfc:	b087      	sub	sp, #28
 8016dfe:	ac0c      	add	r4, sp, #48	@ 0x30
 8016e00:	e884 000c 	stmia.w	r4, {r2, r3}
 8016e04:	46a6      	mov	lr, r4
 8016e06:	460d      	mov	r5, r1
 8016e08:	4604      	mov	r4, r0
 8016e0a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016e0e:	f10d 0c04 	add.w	ip, sp, #4
 8016e12:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016e16:	f8de 3000 	ldr.w	r3, [lr]
 8016e1a:	f8cc 3000 	str.w	r3, [ip]
 8016e1e:	a801      	add	r0, sp, #4
 8016e20:	f7f4 fd78 	bl	800b914 <rcutils_allocator_is_valid>
 8016e24:	b338      	cbz	r0, 8016e76 <rcl_guard_condition_init+0x7e>
 8016e26:	b334      	cbz	r4, 8016e76 <rcl_guard_condition_init+0x7e>
 8016e28:	6866      	ldr	r6, [r4, #4]
 8016e2a:	b9ee      	cbnz	r6, 8016e68 <rcl_guard_condition_init+0x70>
 8016e2c:	b31d      	cbz	r5, 8016e76 <rcl_guard_condition_init+0x7e>
 8016e2e:	4628      	mov	r0, r5
 8016e30:	f7fa febe 	bl	8011bb0 <rcl_context_is_valid>
 8016e34:	b308      	cbz	r0, 8016e7a <rcl_guard_condition_init+0x82>
 8016e36:	9b01      	ldr	r3, [sp, #4]
 8016e38:	9905      	ldr	r1, [sp, #20]
 8016e3a:	201c      	movs	r0, #28
 8016e3c:	4798      	blx	r3
 8016e3e:	4607      	mov	r7, r0
 8016e40:	6060      	str	r0, [r4, #4]
 8016e42:	b310      	cbz	r0, 8016e8a <rcl_guard_condition_init+0x92>
 8016e44:	6828      	ldr	r0, [r5, #0]
 8016e46:	3028      	adds	r0, #40	@ 0x28
 8016e48:	f000 f9d4 	bl	80171f4 <rmw_create_guard_condition>
 8016e4c:	6038      	str	r0, [r7, #0]
 8016e4e:	6860      	ldr	r0, [r4, #4]
 8016e50:	6805      	ldr	r5, [r0, #0]
 8016e52:	b1a5      	cbz	r5, 8016e7e <rcl_guard_condition_init+0x86>
 8016e54:	2301      	movs	r3, #1
 8016e56:	ac01      	add	r4, sp, #4
 8016e58:	7103      	strb	r3, [r0, #4]
 8016e5a:	f100 0708 	add.w	r7, r0, #8
 8016e5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016e60:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016e62:	6823      	ldr	r3, [r4, #0]
 8016e64:	603b      	str	r3, [r7, #0]
 8016e66:	e000      	b.n	8016e6a <rcl_guard_condition_init+0x72>
 8016e68:	2664      	movs	r6, #100	@ 0x64
 8016e6a:	4630      	mov	r0, r6
 8016e6c:	b007      	add	sp, #28
 8016e6e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016e72:	b002      	add	sp, #8
 8016e74:	4770      	bx	lr
 8016e76:	260b      	movs	r6, #11
 8016e78:	e7f7      	b.n	8016e6a <rcl_guard_condition_init+0x72>
 8016e7a:	2665      	movs	r6, #101	@ 0x65
 8016e7c:	e7f5      	b.n	8016e6a <rcl_guard_condition_init+0x72>
 8016e7e:	9b02      	ldr	r3, [sp, #8]
 8016e80:	9905      	ldr	r1, [sp, #20]
 8016e82:	4798      	blx	r3
 8016e84:	2601      	movs	r6, #1
 8016e86:	6065      	str	r5, [r4, #4]
 8016e88:	e7ef      	b.n	8016e6a <rcl_guard_condition_init+0x72>
 8016e8a:	260a      	movs	r6, #10
 8016e8c:	e7ed      	b.n	8016e6a <rcl_guard_condition_init+0x72>
 8016e8e:	bf00      	nop

08016e90 <rcl_guard_condition_init_from_rmw>:
 8016e90:	b082      	sub	sp, #8
 8016e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e96:	b086      	sub	sp, #24
 8016e98:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8016e9c:	4604      	mov	r4, r0
 8016e9e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8016ea2:	460e      	mov	r6, r1
 8016ea4:	4617      	mov	r7, r2
 8016ea6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016eaa:	f10d 0e04 	add.w	lr, sp, #4
 8016eae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016eb2:	f8dc 3000 	ldr.w	r3, [ip]
 8016eb6:	f8ce 3000 	str.w	r3, [lr]
 8016eba:	a801      	add	r0, sp, #4
 8016ebc:	f7f4 fd2a 	bl	800b914 <rcutils_allocator_is_valid>
 8016ec0:	b350      	cbz	r0, 8016f18 <rcl_guard_condition_init_from_rmw+0x88>
 8016ec2:	b34c      	cbz	r4, 8016f18 <rcl_guard_condition_init_from_rmw+0x88>
 8016ec4:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8016ec8:	f1b8 0f00 	cmp.w	r8, #0
 8016ecc:	d11e      	bne.n	8016f0c <rcl_guard_condition_init_from_rmw+0x7c>
 8016ece:	b31f      	cbz	r7, 8016f18 <rcl_guard_condition_init_from_rmw+0x88>
 8016ed0:	4638      	mov	r0, r7
 8016ed2:	f7fa fe6d 	bl	8011bb0 <rcl_context_is_valid>
 8016ed6:	b328      	cbz	r0, 8016f24 <rcl_guard_condition_init_from_rmw+0x94>
 8016ed8:	9b01      	ldr	r3, [sp, #4]
 8016eda:	9905      	ldr	r1, [sp, #20]
 8016edc:	201c      	movs	r0, #28
 8016ede:	4798      	blx	r3
 8016ee0:	4605      	mov	r5, r0
 8016ee2:	6060      	str	r0, [r4, #4]
 8016ee4:	b358      	cbz	r0, 8016f3e <rcl_guard_condition_init_from_rmw+0xae>
 8016ee6:	b1fe      	cbz	r6, 8016f28 <rcl_guard_condition_init_from_rmw+0x98>
 8016ee8:	6006      	str	r6, [r0, #0]
 8016eea:	f880 8004 	strb.w	r8, [r0, #4]
 8016eee:	ac01      	add	r4, sp, #4
 8016ef0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016ef2:	f105 0c08 	add.w	ip, r5, #8
 8016ef6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016efa:	6823      	ldr	r3, [r4, #0]
 8016efc:	f8cc 3000 	str.w	r3, [ip]
 8016f00:	2000      	movs	r0, #0
 8016f02:	b006      	add	sp, #24
 8016f04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f08:	b002      	add	sp, #8
 8016f0a:	4770      	bx	lr
 8016f0c:	2064      	movs	r0, #100	@ 0x64
 8016f0e:	b006      	add	sp, #24
 8016f10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f14:	b002      	add	sp, #8
 8016f16:	4770      	bx	lr
 8016f18:	200b      	movs	r0, #11
 8016f1a:	b006      	add	sp, #24
 8016f1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f20:	b002      	add	sp, #8
 8016f22:	4770      	bx	lr
 8016f24:	2065      	movs	r0, #101	@ 0x65
 8016f26:	e7f2      	b.n	8016f0e <rcl_guard_condition_init_from_rmw+0x7e>
 8016f28:	6838      	ldr	r0, [r7, #0]
 8016f2a:	3028      	adds	r0, #40	@ 0x28
 8016f2c:	f000 f962 	bl	80171f4 <rmw_create_guard_condition>
 8016f30:	6028      	str	r0, [r5, #0]
 8016f32:	6865      	ldr	r5, [r4, #4]
 8016f34:	682e      	ldr	r6, [r5, #0]
 8016f36:	b126      	cbz	r6, 8016f42 <rcl_guard_condition_init_from_rmw+0xb2>
 8016f38:	2301      	movs	r3, #1
 8016f3a:	712b      	strb	r3, [r5, #4]
 8016f3c:	e7d7      	b.n	8016eee <rcl_guard_condition_init_from_rmw+0x5e>
 8016f3e:	200a      	movs	r0, #10
 8016f40:	e7e5      	b.n	8016f0e <rcl_guard_condition_init_from_rmw+0x7e>
 8016f42:	4628      	mov	r0, r5
 8016f44:	9b02      	ldr	r3, [sp, #8]
 8016f46:	9905      	ldr	r1, [sp, #20]
 8016f48:	4798      	blx	r3
 8016f4a:	6066      	str	r6, [r4, #4]
 8016f4c:	2001      	movs	r0, #1
 8016f4e:	e7de      	b.n	8016f0e <rcl_guard_condition_init_from_rmw+0x7e>

08016f50 <rcl_guard_condition_fini>:
 8016f50:	b570      	push	{r4, r5, r6, lr}
 8016f52:	b082      	sub	sp, #8
 8016f54:	b1f0      	cbz	r0, 8016f94 <rcl_guard_condition_fini+0x44>
 8016f56:	6843      	ldr	r3, [r0, #4]
 8016f58:	4604      	mov	r4, r0
 8016f5a:	b163      	cbz	r3, 8016f76 <rcl_guard_condition_fini+0x26>
 8016f5c:	6818      	ldr	r0, [r3, #0]
 8016f5e:	68de      	ldr	r6, [r3, #12]
 8016f60:	6999      	ldr	r1, [r3, #24]
 8016f62:	b160      	cbz	r0, 8016f7e <rcl_guard_condition_fini+0x2e>
 8016f64:	791d      	ldrb	r5, [r3, #4]
 8016f66:	b965      	cbnz	r5, 8016f82 <rcl_guard_condition_fini+0x32>
 8016f68:	4618      	mov	r0, r3
 8016f6a:	47b0      	blx	r6
 8016f6c:	2300      	movs	r3, #0
 8016f6e:	4628      	mov	r0, r5
 8016f70:	6063      	str	r3, [r4, #4]
 8016f72:	b002      	add	sp, #8
 8016f74:	bd70      	pop	{r4, r5, r6, pc}
 8016f76:	461d      	mov	r5, r3
 8016f78:	4628      	mov	r0, r5
 8016f7a:	b002      	add	sp, #8
 8016f7c:	bd70      	pop	{r4, r5, r6, pc}
 8016f7e:	4605      	mov	r5, r0
 8016f80:	e7f2      	b.n	8016f68 <rcl_guard_condition_fini+0x18>
 8016f82:	9101      	str	r1, [sp, #4]
 8016f84:	f000 f94a 	bl	801721c <rmw_destroy_guard_condition>
 8016f88:	1e05      	subs	r5, r0, #0
 8016f8a:	6863      	ldr	r3, [r4, #4]
 8016f8c:	9901      	ldr	r1, [sp, #4]
 8016f8e:	bf18      	it	ne
 8016f90:	2501      	movne	r5, #1
 8016f92:	e7e9      	b.n	8016f68 <rcl_guard_condition_fini+0x18>
 8016f94:	250b      	movs	r5, #11
 8016f96:	4628      	mov	r0, r5
 8016f98:	b002      	add	sp, #8
 8016f9a:	bd70      	pop	{r4, r5, r6, pc}

08016f9c <rcl_guard_condition_get_default_options>:
 8016f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f9e:	b087      	sub	sp, #28
 8016fa0:	4606      	mov	r6, r0
 8016fa2:	4668      	mov	r0, sp
 8016fa4:	f7f4 fca8 	bl	800b8f8 <rcutils_get_default_allocator>
 8016fa8:	4b09      	ldr	r3, [pc, #36]	@ (8016fd0 <rcl_guard_condition_get_default_options+0x34>)
 8016faa:	46ee      	mov	lr, sp
 8016fac:	469c      	mov	ip, r3
 8016fae:	461d      	mov	r5, r3
 8016fb0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016fb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016fba:	4634      	mov	r4, r6
 8016fbc:	f8de 7000 	ldr.w	r7, [lr]
 8016fc0:	f8cc 7000 	str.w	r7, [ip]
 8016fc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016fc6:	4630      	mov	r0, r6
 8016fc8:	6027      	str	r7, [r4, #0]
 8016fca:	b007      	add	sp, #28
 8016fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016fce:	bf00      	nop
 8016fd0:	2000acdc 	.word	0x2000acdc

08016fd4 <rcl_trigger_guard_condition>:
 8016fd4:	b148      	cbz	r0, 8016fea <rcl_trigger_guard_condition+0x16>
 8016fd6:	b508      	push	{r3, lr}
 8016fd8:	6843      	ldr	r3, [r0, #4]
 8016fda:	b143      	cbz	r3, 8016fee <rcl_trigger_guard_condition+0x1a>
 8016fdc:	6818      	ldr	r0, [r3, #0]
 8016fde:	f000 f931 	bl	8017244 <rmw_trigger_guard_condition>
 8016fe2:	3800      	subs	r0, #0
 8016fe4:	bf18      	it	ne
 8016fe6:	2001      	movne	r0, #1
 8016fe8:	bd08      	pop	{r3, pc}
 8016fea:	200b      	movs	r0, #11
 8016fec:	4770      	bx	lr
 8016fee:	200b      	movs	r0, #11
 8016ff0:	bd08      	pop	{r3, pc}
 8016ff2:	bf00      	nop

08016ff4 <rcl_guard_condition_get_rmw_handle>:
 8016ff4:	b110      	cbz	r0, 8016ffc <rcl_guard_condition_get_rmw_handle+0x8>
 8016ff6:	6840      	ldr	r0, [r0, #4]
 8016ff8:	b100      	cbz	r0, 8016ffc <rcl_guard_condition_get_rmw_handle+0x8>
 8016ffa:	6800      	ldr	r0, [r0, #0]
 8016ffc:	4770      	bx	lr
 8016ffe:	bf00      	nop

08017000 <rcl_validate_topic_name>:
 8017000:	2800      	cmp	r0, #0
 8017002:	d07a      	beq.n	80170fa <rcl_validate_topic_name+0xfa>
 8017004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017008:	460e      	mov	r6, r1
 801700a:	2900      	cmp	r1, #0
 801700c:	d07c      	beq.n	8017108 <rcl_validate_topic_name+0x108>
 801700e:	4617      	mov	r7, r2
 8017010:	4605      	mov	r5, r0
 8017012:	f7e9 f90f 	bl	8000234 <strlen>
 8017016:	b1b0      	cbz	r0, 8017046 <rcl_validate_topic_name+0x46>
 8017018:	f895 9000 	ldrb.w	r9, [r5]
 801701c:	f8df c180 	ldr.w	ip, [pc, #384]	@ 80171a0 <rcl_validate_topic_name+0x1a0>
 8017020:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8017024:	f013 0304 	ands.w	r3, r3, #4
 8017028:	d169      	bne.n	80170fe <rcl_validate_topic_name+0xfe>
 801702a:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801702e:	f815 2008 	ldrb.w	r2, [r5, r8]
 8017032:	2a2f      	cmp	r2, #47	@ 0x2f
 8017034:	d10e      	bne.n	8017054 <rcl_validate_topic_name+0x54>
 8017036:	2202      	movs	r2, #2
 8017038:	6032      	str	r2, [r6, #0]
 801703a:	b36f      	cbz	r7, 8017098 <rcl_validate_topic_name+0x98>
 801703c:	f8c7 8000 	str.w	r8, [r7]
 8017040:	4618      	mov	r0, r3
 8017042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017046:	2301      	movs	r3, #1
 8017048:	6033      	str	r3, [r6, #0]
 801704a:	b32f      	cbz	r7, 8017098 <rcl_validate_topic_name+0x98>
 801704c:	2000      	movs	r0, #0
 801704e:	6038      	str	r0, [r7, #0]
 8017050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017054:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8017058:	461c      	mov	r4, r3
 801705a:	4619      	mov	r1, r3
 801705c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8017060:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8017064:	f1be 0f09 	cmp.w	lr, #9
 8017068:	d919      	bls.n	801709e <rcl_validate_topic_name+0x9e>
 801706a:	f022 0e20 	bic.w	lr, r2, #32
 801706e:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8017072:	f1be 0f19 	cmp.w	lr, #25
 8017076:	d912      	bls.n	801709e <rcl_validate_topic_name+0x9e>
 8017078:	2a5f      	cmp	r2, #95	@ 0x5f
 801707a:	d019      	beq.n	80170b0 <rcl_validate_topic_name+0xb0>
 801707c:	2a2f      	cmp	r2, #47	@ 0x2f
 801707e:	d051      	beq.n	8017124 <rcl_validate_topic_name+0x124>
 8017080:	2a7e      	cmp	r2, #126	@ 0x7e
 8017082:	d048      	beq.n	8017116 <rcl_validate_topic_name+0x116>
 8017084:	2a7b      	cmp	r2, #123	@ 0x7b
 8017086:	d054      	beq.n	8017132 <rcl_validate_topic_name+0x132>
 8017088:	2a7d      	cmp	r2, #125	@ 0x7d
 801708a:	d161      	bne.n	8017150 <rcl_validate_topic_name+0x150>
 801708c:	2c00      	cmp	r4, #0
 801708e:	d155      	bne.n	801713c <rcl_validate_topic_name+0x13c>
 8017090:	2305      	movs	r3, #5
 8017092:	6033      	str	r3, [r6, #0]
 8017094:	b107      	cbz	r7, 8017098 <rcl_validate_topic_name+0x98>
 8017096:	6039      	str	r1, [r7, #0]
 8017098:	2000      	movs	r0, #0
 801709a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801709e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80170a2:	0752      	lsls	r2, r2, #29
 80170a4:	d504      	bpl.n	80170b0 <rcl_validate_topic_name+0xb0>
 80170a6:	b11c      	cbz	r4, 80170b0 <rcl_validate_topic_name+0xb0>
 80170a8:	b111      	cbz	r1, 80170b0 <rcl_validate_topic_name+0xb0>
 80170aa:	1e4a      	subs	r2, r1, #1
 80170ac:	429a      	cmp	r2, r3
 80170ae:	d02d      	beq.n	801710c <rcl_validate_topic_name+0x10c>
 80170b0:	3101      	adds	r1, #1
 80170b2:	4288      	cmp	r0, r1
 80170b4:	d1d2      	bne.n	801705c <rcl_validate_topic_name+0x5c>
 80170b6:	2c00      	cmp	r4, #0
 80170b8:	d145      	bne.n	8017146 <rcl_validate_topic_name+0x146>
 80170ba:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 80170be:	d04f      	beq.n	8017160 <rcl_validate_topic_name+0x160>
 80170c0:	4620      	mov	r0, r4
 80170c2:	2301      	movs	r3, #1
 80170c4:	e006      	b.n	80170d4 <rcl_validate_topic_name+0xd4>
 80170c6:	428b      	cmp	r3, r1
 80170c8:	f105 0501 	add.w	r5, r5, #1
 80170cc:	f103 0201 	add.w	r2, r3, #1
 80170d0:	d236      	bcs.n	8017140 <rcl_validate_topic_name+0x140>
 80170d2:	4613      	mov	r3, r2
 80170d4:	4580      	cmp	r8, r0
 80170d6:	f100 0001 	add.w	r0, r0, #1
 80170da:	d0f4      	beq.n	80170c6 <rcl_validate_topic_name+0xc6>
 80170dc:	782a      	ldrb	r2, [r5, #0]
 80170de:	2a2f      	cmp	r2, #47	@ 0x2f
 80170e0:	d1f1      	bne.n	80170c6 <rcl_validate_topic_name+0xc6>
 80170e2:	786a      	ldrb	r2, [r5, #1]
 80170e4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80170e8:	0754      	lsls	r4, r2, #29
 80170ea:	d5ec      	bpl.n	80170c6 <rcl_validate_topic_name+0xc6>
 80170ec:	2204      	movs	r2, #4
 80170ee:	6032      	str	r2, [r6, #0]
 80170f0:	2f00      	cmp	r7, #0
 80170f2:	d0d1      	beq.n	8017098 <rcl_validate_topic_name+0x98>
 80170f4:	603b      	str	r3, [r7, #0]
 80170f6:	2000      	movs	r0, #0
 80170f8:	e7aa      	b.n	8017050 <rcl_validate_topic_name+0x50>
 80170fa:	200b      	movs	r0, #11
 80170fc:	4770      	bx	lr
 80170fe:	2304      	movs	r3, #4
 8017100:	6033      	str	r3, [r6, #0]
 8017102:	2f00      	cmp	r7, #0
 8017104:	d1a2      	bne.n	801704c <rcl_validate_topic_name+0x4c>
 8017106:	e7c7      	b.n	8017098 <rcl_validate_topic_name+0x98>
 8017108:	200b      	movs	r0, #11
 801710a:	e7a1      	b.n	8017050 <rcl_validate_topic_name+0x50>
 801710c:	2309      	movs	r3, #9
 801710e:	6033      	str	r3, [r6, #0]
 8017110:	2f00      	cmp	r7, #0
 8017112:	d1c0      	bne.n	8017096 <rcl_validate_topic_name+0x96>
 8017114:	e7c0      	b.n	8017098 <rcl_validate_topic_name+0x98>
 8017116:	2900      	cmp	r1, #0
 8017118:	d0ca      	beq.n	80170b0 <rcl_validate_topic_name+0xb0>
 801711a:	2306      	movs	r3, #6
 801711c:	6033      	str	r3, [r6, #0]
 801711e:	2f00      	cmp	r7, #0
 8017120:	d1b9      	bne.n	8017096 <rcl_validate_topic_name+0x96>
 8017122:	e7b9      	b.n	8017098 <rcl_validate_topic_name+0x98>
 8017124:	2c00      	cmp	r4, #0
 8017126:	d0c3      	beq.n	80170b0 <rcl_validate_topic_name+0xb0>
 8017128:	2308      	movs	r3, #8
 801712a:	6033      	str	r3, [r6, #0]
 801712c:	2f00      	cmp	r7, #0
 801712e:	d1b2      	bne.n	8017096 <rcl_validate_topic_name+0x96>
 8017130:	e7b2      	b.n	8017098 <rcl_validate_topic_name+0x98>
 8017132:	2c00      	cmp	r4, #0
 8017134:	d1f8      	bne.n	8017128 <rcl_validate_topic_name+0x128>
 8017136:	460b      	mov	r3, r1
 8017138:	2401      	movs	r4, #1
 801713a:	e7b9      	b.n	80170b0 <rcl_validate_topic_name+0xb0>
 801713c:	2400      	movs	r4, #0
 801713e:	e7b7      	b.n	80170b0 <rcl_validate_topic_name+0xb0>
 8017140:	2000      	movs	r0, #0
 8017142:	6030      	str	r0, [r6, #0]
 8017144:	e784      	b.n	8017050 <rcl_validate_topic_name+0x50>
 8017146:	2205      	movs	r2, #5
 8017148:	6032      	str	r2, [r6, #0]
 801714a:	2f00      	cmp	r7, #0
 801714c:	d1d2      	bne.n	80170f4 <rcl_validate_topic_name+0xf4>
 801714e:	e7a3      	b.n	8017098 <rcl_validate_topic_name+0x98>
 8017150:	2c00      	cmp	r4, #0
 8017152:	bf14      	ite	ne
 8017154:	2308      	movne	r3, #8
 8017156:	2303      	moveq	r3, #3
 8017158:	6033      	str	r3, [r6, #0]
 801715a:	2f00      	cmp	r7, #0
 801715c:	d19b      	bne.n	8017096 <rcl_validate_topic_name+0x96>
 801715e:	e79b      	b.n	8017098 <rcl_validate_topic_name+0x98>
 8017160:	2301      	movs	r3, #1
 8017162:	e00a      	b.n	801717a <rcl_validate_topic_name+0x17a>
 8017164:	2c01      	cmp	r4, #1
 8017166:	d013      	beq.n	8017190 <rcl_validate_topic_name+0x190>
 8017168:	4299      	cmp	r1, r3
 801716a:	f104 0401 	add.w	r4, r4, #1
 801716e:	f105 0501 	add.w	r5, r5, #1
 8017172:	f103 0201 	add.w	r2, r3, #1
 8017176:	d9e3      	bls.n	8017140 <rcl_validate_topic_name+0x140>
 8017178:	4613      	mov	r3, r2
 801717a:	45a0      	cmp	r8, r4
 801717c:	d0f4      	beq.n	8017168 <rcl_validate_topic_name+0x168>
 801717e:	782a      	ldrb	r2, [r5, #0]
 8017180:	2a2f      	cmp	r2, #47	@ 0x2f
 8017182:	d1ef      	bne.n	8017164 <rcl_validate_topic_name+0x164>
 8017184:	786a      	ldrb	r2, [r5, #1]
 8017186:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801718a:	0752      	lsls	r2, r2, #29
 801718c:	d5ec      	bpl.n	8017168 <rcl_validate_topic_name+0x168>
 801718e:	e7ad      	b.n	80170ec <rcl_validate_topic_name+0xec>
 8017190:	2307      	movs	r3, #7
 8017192:	6033      	str	r3, [r6, #0]
 8017194:	2f00      	cmp	r7, #0
 8017196:	f43f af7f 	beq.w	8017098 <rcl_validate_topic_name+0x98>
 801719a:	603c      	str	r4, [r7, #0]
 801719c:	2000      	movs	r0, #0
 801719e:	e757      	b.n	8017050 <rcl_validate_topic_name+0x50>
 80171a0:	08019668 	.word	0x08019668

080171a4 <rcutils_string_array_fini>:
 80171a4:	b320      	cbz	r0, 80171f0 <rcutils_string_array_fini+0x4c>
 80171a6:	b570      	push	{r4, r5, r6, lr}
 80171a8:	4604      	mov	r4, r0
 80171aa:	6840      	ldr	r0, [r0, #4]
 80171ac:	b1d8      	cbz	r0, 80171e6 <rcutils_string_array_fini+0x42>
 80171ae:	f104 0008 	add.w	r0, r4, #8
 80171b2:	f7f4 fbaf 	bl	800b914 <rcutils_allocator_is_valid>
 80171b6:	b1b8      	cbz	r0, 80171e8 <rcutils_string_array_fini+0x44>
 80171b8:	6823      	ldr	r3, [r4, #0]
 80171ba:	b1bb      	cbz	r3, 80171ec <rcutils_string_array_fini+0x48>
 80171bc:	2500      	movs	r5, #0
 80171be:	6860      	ldr	r0, [r4, #4]
 80171c0:	462e      	mov	r6, r5
 80171c2:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 80171c6:	68e3      	ldr	r3, [r4, #12]
 80171c8:	69a1      	ldr	r1, [r4, #24]
 80171ca:	4798      	blx	r3
 80171cc:	e9d4 3000 	ldrd	r3, r0, [r4]
 80171d0:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 80171d4:	3501      	adds	r5, #1
 80171d6:	429d      	cmp	r5, r3
 80171d8:	d3f3      	bcc.n	80171c2 <rcutils_string_array_fini+0x1e>
 80171da:	68e3      	ldr	r3, [r4, #12]
 80171dc:	69a1      	ldr	r1, [r4, #24]
 80171de:	4798      	blx	r3
 80171e0:	2000      	movs	r0, #0
 80171e2:	e9c4 0000 	strd	r0, r0, [r4]
 80171e6:	bd70      	pop	{r4, r5, r6, pc}
 80171e8:	200b      	movs	r0, #11
 80171ea:	bd70      	pop	{r4, r5, r6, pc}
 80171ec:	6860      	ldr	r0, [r4, #4]
 80171ee:	e7f4      	b.n	80171da <rcutils_string_array_fini+0x36>
 80171f0:	200b      	movs	r0, #11
 80171f2:	4770      	bx	lr

080171f4 <rmw_create_guard_condition>:
 80171f4:	b538      	push	{r3, r4, r5, lr}
 80171f6:	4605      	mov	r5, r0
 80171f8:	4807      	ldr	r0, [pc, #28]	@ (8017218 <rmw_create_guard_condition+0x24>)
 80171fa:	f7fe f8f9 	bl	80153f0 <get_memory>
 80171fe:	b148      	cbz	r0, 8017214 <rmw_create_guard_condition+0x20>
 8017200:	6884      	ldr	r4, [r0, #8]
 8017202:	2300      	movs	r3, #0
 8017204:	7423      	strb	r3, [r4, #16]
 8017206:	61e5      	str	r5, [r4, #28]
 8017208:	f7fe f95a 	bl	80154c0 <rmw_get_implementation_identifier>
 801720c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8017210:	f104 0014 	add.w	r0, r4, #20
 8017214:	bd38      	pop	{r3, r4, r5, pc}
 8017216:	bf00      	nop
 8017218:	2000ab04 	.word	0x2000ab04

0801721c <rmw_destroy_guard_condition>:
 801721c:	b508      	push	{r3, lr}
 801721e:	4b08      	ldr	r3, [pc, #32]	@ (8017240 <rmw_destroy_guard_condition+0x24>)
 8017220:	6819      	ldr	r1, [r3, #0]
 8017222:	b911      	cbnz	r1, 801722a <rmw_destroy_guard_condition+0xe>
 8017224:	e00a      	b.n	801723c <rmw_destroy_guard_condition+0x20>
 8017226:	6849      	ldr	r1, [r1, #4]
 8017228:	b141      	cbz	r1, 801723c <rmw_destroy_guard_condition+0x20>
 801722a:	688b      	ldr	r3, [r1, #8]
 801722c:	3314      	adds	r3, #20
 801722e:	4298      	cmp	r0, r3
 8017230:	d1f9      	bne.n	8017226 <rmw_destroy_guard_condition+0xa>
 8017232:	4803      	ldr	r0, [pc, #12]	@ (8017240 <rmw_destroy_guard_condition+0x24>)
 8017234:	f7fe f8ec 	bl	8015410 <put_memory>
 8017238:	2000      	movs	r0, #0
 801723a:	bd08      	pop	{r3, pc}
 801723c:	2001      	movs	r0, #1
 801723e:	bd08      	pop	{r3, pc}
 8017240:	2000ab04 	.word	0x2000ab04

08017244 <rmw_trigger_guard_condition>:
 8017244:	b160      	cbz	r0, 8017260 <rmw_trigger_guard_condition+0x1c>
 8017246:	b510      	push	{r4, lr}
 8017248:	4604      	mov	r4, r0
 801724a:	6800      	ldr	r0, [r0, #0]
 801724c:	f7f5 fe3e 	bl	800cecc <is_uxrce_rmw_identifier_valid>
 8017250:	b908      	cbnz	r0, 8017256 <rmw_trigger_guard_condition+0x12>
 8017252:	2001      	movs	r0, #1
 8017254:	bd10      	pop	{r4, pc}
 8017256:	6863      	ldr	r3, [r4, #4]
 8017258:	2201      	movs	r2, #1
 801725a:	741a      	strb	r2, [r3, #16]
 801725c:	2000      	movs	r0, #0
 801725e:	bd10      	pop	{r4, pc}
 8017260:	2001      	movs	r0, #1
 8017262:	4770      	bx	lr

08017264 <calloc>:
 8017264:	4b02      	ldr	r3, [pc, #8]	@ (8017270 <calloc+0xc>)
 8017266:	460a      	mov	r2, r1
 8017268:	4601      	mov	r1, r0
 801726a:	6818      	ldr	r0, [r3, #0]
 801726c:	f000 b802 	b.w	8017274 <_calloc_r>
 8017270:	200000c8 	.word	0x200000c8

08017274 <_calloc_r>:
 8017274:	b570      	push	{r4, r5, r6, lr}
 8017276:	fba1 5402 	umull	r5, r4, r1, r2
 801727a:	b93c      	cbnz	r4, 801728c <_calloc_r+0x18>
 801727c:	4629      	mov	r1, r5
 801727e:	f000 f887 	bl	8017390 <_malloc_r>
 8017282:	4606      	mov	r6, r0
 8017284:	b928      	cbnz	r0, 8017292 <_calloc_r+0x1e>
 8017286:	2600      	movs	r6, #0
 8017288:	4630      	mov	r0, r6
 801728a:	bd70      	pop	{r4, r5, r6, pc}
 801728c:	220c      	movs	r2, #12
 801728e:	6002      	str	r2, [r0, #0]
 8017290:	e7f9      	b.n	8017286 <_calloc_r+0x12>
 8017292:	462a      	mov	r2, r5
 8017294:	4621      	mov	r1, r4
 8017296:	f000 fbcf 	bl	8017a38 <memset>
 801729a:	e7f5      	b.n	8017288 <_calloc_r+0x14>

0801729c <getenv>:
 801729c:	b507      	push	{r0, r1, r2, lr}
 801729e:	4b04      	ldr	r3, [pc, #16]	@ (80172b0 <getenv+0x14>)
 80172a0:	4601      	mov	r1, r0
 80172a2:	aa01      	add	r2, sp, #4
 80172a4:	6818      	ldr	r0, [r3, #0]
 80172a6:	f000 f805 	bl	80172b4 <_findenv_r>
 80172aa:	b003      	add	sp, #12
 80172ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80172b0:	200000c8 	.word	0x200000c8

080172b4 <_findenv_r>:
 80172b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172b8:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8017328 <_findenv_r+0x74>
 80172bc:	4606      	mov	r6, r0
 80172be:	4689      	mov	r9, r1
 80172c0:	4617      	mov	r7, r2
 80172c2:	f000 fcaf 	bl	8017c24 <__env_lock>
 80172c6:	f8da 4000 	ldr.w	r4, [sl]
 80172ca:	b134      	cbz	r4, 80172da <_findenv_r+0x26>
 80172cc:	464b      	mov	r3, r9
 80172ce:	4698      	mov	r8, r3
 80172d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80172d4:	b13a      	cbz	r2, 80172e6 <_findenv_r+0x32>
 80172d6:	2a3d      	cmp	r2, #61	@ 0x3d
 80172d8:	d1f9      	bne.n	80172ce <_findenv_r+0x1a>
 80172da:	4630      	mov	r0, r6
 80172dc:	f000 fca8 	bl	8017c30 <__env_unlock>
 80172e0:	2000      	movs	r0, #0
 80172e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172e6:	eba8 0809 	sub.w	r8, r8, r9
 80172ea:	46a3      	mov	fp, r4
 80172ec:	f854 0b04 	ldr.w	r0, [r4], #4
 80172f0:	2800      	cmp	r0, #0
 80172f2:	d0f2      	beq.n	80172da <_findenv_r+0x26>
 80172f4:	4642      	mov	r2, r8
 80172f6:	4649      	mov	r1, r9
 80172f8:	f000 fbb3 	bl	8017a62 <strncmp>
 80172fc:	2800      	cmp	r0, #0
 80172fe:	d1f4      	bne.n	80172ea <_findenv_r+0x36>
 8017300:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017304:	eb03 0508 	add.w	r5, r3, r8
 8017308:	f813 3008 	ldrb.w	r3, [r3, r8]
 801730c:	2b3d      	cmp	r3, #61	@ 0x3d
 801730e:	d1ec      	bne.n	80172ea <_findenv_r+0x36>
 8017310:	f8da 3000 	ldr.w	r3, [sl]
 8017314:	ebab 0303 	sub.w	r3, fp, r3
 8017318:	109b      	asrs	r3, r3, #2
 801731a:	4630      	mov	r0, r6
 801731c:	603b      	str	r3, [r7, #0]
 801731e:	f000 fc87 	bl	8017c30 <__env_unlock>
 8017322:	1c68      	adds	r0, r5, #1
 8017324:	e7dd      	b.n	80172e2 <_findenv_r+0x2e>
 8017326:	bf00      	nop
 8017328:	20000008 	.word	0x20000008

0801732c <malloc>:
 801732c:	4b02      	ldr	r3, [pc, #8]	@ (8017338 <malloc+0xc>)
 801732e:	4601      	mov	r1, r0
 8017330:	6818      	ldr	r0, [r3, #0]
 8017332:	f000 b82d 	b.w	8017390 <_malloc_r>
 8017336:	bf00      	nop
 8017338:	200000c8 	.word	0x200000c8

0801733c <free>:
 801733c:	4b02      	ldr	r3, [pc, #8]	@ (8017348 <free+0xc>)
 801733e:	4601      	mov	r1, r0
 8017340:	6818      	ldr	r0, [r3, #0]
 8017342:	f000 bc7b 	b.w	8017c3c <_free_r>
 8017346:	bf00      	nop
 8017348:	200000c8 	.word	0x200000c8

0801734c <sbrk_aligned>:
 801734c:	b570      	push	{r4, r5, r6, lr}
 801734e:	4e0f      	ldr	r6, [pc, #60]	@ (801738c <sbrk_aligned+0x40>)
 8017350:	460c      	mov	r4, r1
 8017352:	6831      	ldr	r1, [r6, #0]
 8017354:	4605      	mov	r5, r0
 8017356:	b911      	cbnz	r1, 801735e <sbrk_aligned+0x12>
 8017358:	f000 fbe0 	bl	8017b1c <_sbrk_r>
 801735c:	6030      	str	r0, [r6, #0]
 801735e:	4621      	mov	r1, r4
 8017360:	4628      	mov	r0, r5
 8017362:	f000 fbdb 	bl	8017b1c <_sbrk_r>
 8017366:	1c43      	adds	r3, r0, #1
 8017368:	d103      	bne.n	8017372 <sbrk_aligned+0x26>
 801736a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801736e:	4620      	mov	r0, r4
 8017370:	bd70      	pop	{r4, r5, r6, pc}
 8017372:	1cc4      	adds	r4, r0, #3
 8017374:	f024 0403 	bic.w	r4, r4, #3
 8017378:	42a0      	cmp	r0, r4
 801737a:	d0f8      	beq.n	801736e <sbrk_aligned+0x22>
 801737c:	1a21      	subs	r1, r4, r0
 801737e:	4628      	mov	r0, r5
 8017380:	f000 fbcc 	bl	8017b1c <_sbrk_r>
 8017384:	3001      	adds	r0, #1
 8017386:	d1f2      	bne.n	801736e <sbrk_aligned+0x22>
 8017388:	e7ef      	b.n	801736a <sbrk_aligned+0x1e>
 801738a:	bf00      	nop
 801738c:	2000acf0 	.word	0x2000acf0

08017390 <_malloc_r>:
 8017390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017394:	1ccd      	adds	r5, r1, #3
 8017396:	f025 0503 	bic.w	r5, r5, #3
 801739a:	3508      	adds	r5, #8
 801739c:	2d0c      	cmp	r5, #12
 801739e:	bf38      	it	cc
 80173a0:	250c      	movcc	r5, #12
 80173a2:	2d00      	cmp	r5, #0
 80173a4:	4606      	mov	r6, r0
 80173a6:	db01      	blt.n	80173ac <_malloc_r+0x1c>
 80173a8:	42a9      	cmp	r1, r5
 80173aa:	d904      	bls.n	80173b6 <_malloc_r+0x26>
 80173ac:	230c      	movs	r3, #12
 80173ae:	6033      	str	r3, [r6, #0]
 80173b0:	2000      	movs	r0, #0
 80173b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80173b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801748c <_malloc_r+0xfc>
 80173ba:	f000 f869 	bl	8017490 <__malloc_lock>
 80173be:	f8d8 3000 	ldr.w	r3, [r8]
 80173c2:	461c      	mov	r4, r3
 80173c4:	bb44      	cbnz	r4, 8017418 <_malloc_r+0x88>
 80173c6:	4629      	mov	r1, r5
 80173c8:	4630      	mov	r0, r6
 80173ca:	f7ff ffbf 	bl	801734c <sbrk_aligned>
 80173ce:	1c43      	adds	r3, r0, #1
 80173d0:	4604      	mov	r4, r0
 80173d2:	d158      	bne.n	8017486 <_malloc_r+0xf6>
 80173d4:	f8d8 4000 	ldr.w	r4, [r8]
 80173d8:	4627      	mov	r7, r4
 80173da:	2f00      	cmp	r7, #0
 80173dc:	d143      	bne.n	8017466 <_malloc_r+0xd6>
 80173de:	2c00      	cmp	r4, #0
 80173e0:	d04b      	beq.n	801747a <_malloc_r+0xea>
 80173e2:	6823      	ldr	r3, [r4, #0]
 80173e4:	4639      	mov	r1, r7
 80173e6:	4630      	mov	r0, r6
 80173e8:	eb04 0903 	add.w	r9, r4, r3
 80173ec:	f000 fb96 	bl	8017b1c <_sbrk_r>
 80173f0:	4581      	cmp	r9, r0
 80173f2:	d142      	bne.n	801747a <_malloc_r+0xea>
 80173f4:	6821      	ldr	r1, [r4, #0]
 80173f6:	1a6d      	subs	r5, r5, r1
 80173f8:	4629      	mov	r1, r5
 80173fa:	4630      	mov	r0, r6
 80173fc:	f7ff ffa6 	bl	801734c <sbrk_aligned>
 8017400:	3001      	adds	r0, #1
 8017402:	d03a      	beq.n	801747a <_malloc_r+0xea>
 8017404:	6823      	ldr	r3, [r4, #0]
 8017406:	442b      	add	r3, r5
 8017408:	6023      	str	r3, [r4, #0]
 801740a:	f8d8 3000 	ldr.w	r3, [r8]
 801740e:	685a      	ldr	r2, [r3, #4]
 8017410:	bb62      	cbnz	r2, 801746c <_malloc_r+0xdc>
 8017412:	f8c8 7000 	str.w	r7, [r8]
 8017416:	e00f      	b.n	8017438 <_malloc_r+0xa8>
 8017418:	6822      	ldr	r2, [r4, #0]
 801741a:	1b52      	subs	r2, r2, r5
 801741c:	d420      	bmi.n	8017460 <_malloc_r+0xd0>
 801741e:	2a0b      	cmp	r2, #11
 8017420:	d917      	bls.n	8017452 <_malloc_r+0xc2>
 8017422:	1961      	adds	r1, r4, r5
 8017424:	42a3      	cmp	r3, r4
 8017426:	6025      	str	r5, [r4, #0]
 8017428:	bf18      	it	ne
 801742a:	6059      	strne	r1, [r3, #4]
 801742c:	6863      	ldr	r3, [r4, #4]
 801742e:	bf08      	it	eq
 8017430:	f8c8 1000 	streq.w	r1, [r8]
 8017434:	5162      	str	r2, [r4, r5]
 8017436:	604b      	str	r3, [r1, #4]
 8017438:	4630      	mov	r0, r6
 801743a:	f000 f82f 	bl	801749c <__malloc_unlock>
 801743e:	f104 000b 	add.w	r0, r4, #11
 8017442:	1d23      	adds	r3, r4, #4
 8017444:	f020 0007 	bic.w	r0, r0, #7
 8017448:	1ac2      	subs	r2, r0, r3
 801744a:	bf1c      	itt	ne
 801744c:	1a1b      	subne	r3, r3, r0
 801744e:	50a3      	strne	r3, [r4, r2]
 8017450:	e7af      	b.n	80173b2 <_malloc_r+0x22>
 8017452:	6862      	ldr	r2, [r4, #4]
 8017454:	42a3      	cmp	r3, r4
 8017456:	bf0c      	ite	eq
 8017458:	f8c8 2000 	streq.w	r2, [r8]
 801745c:	605a      	strne	r2, [r3, #4]
 801745e:	e7eb      	b.n	8017438 <_malloc_r+0xa8>
 8017460:	4623      	mov	r3, r4
 8017462:	6864      	ldr	r4, [r4, #4]
 8017464:	e7ae      	b.n	80173c4 <_malloc_r+0x34>
 8017466:	463c      	mov	r4, r7
 8017468:	687f      	ldr	r7, [r7, #4]
 801746a:	e7b6      	b.n	80173da <_malloc_r+0x4a>
 801746c:	461a      	mov	r2, r3
 801746e:	685b      	ldr	r3, [r3, #4]
 8017470:	42a3      	cmp	r3, r4
 8017472:	d1fb      	bne.n	801746c <_malloc_r+0xdc>
 8017474:	2300      	movs	r3, #0
 8017476:	6053      	str	r3, [r2, #4]
 8017478:	e7de      	b.n	8017438 <_malloc_r+0xa8>
 801747a:	230c      	movs	r3, #12
 801747c:	6033      	str	r3, [r6, #0]
 801747e:	4630      	mov	r0, r6
 8017480:	f000 f80c 	bl	801749c <__malloc_unlock>
 8017484:	e794      	b.n	80173b0 <_malloc_r+0x20>
 8017486:	6005      	str	r5, [r0, #0]
 8017488:	e7d6      	b.n	8017438 <_malloc_r+0xa8>
 801748a:	bf00      	nop
 801748c:	2000acf4 	.word	0x2000acf4

08017490 <__malloc_lock>:
 8017490:	4801      	ldr	r0, [pc, #4]	@ (8017498 <__malloc_lock+0x8>)
 8017492:	f000 bb90 	b.w	8017bb6 <__retarget_lock_acquire_recursive>
 8017496:	bf00      	nop
 8017498:	2000ae39 	.word	0x2000ae39

0801749c <__malloc_unlock>:
 801749c:	4801      	ldr	r0, [pc, #4]	@ (80174a4 <__malloc_unlock+0x8>)
 801749e:	f000 bb8b 	b.w	8017bb8 <__retarget_lock_release_recursive>
 80174a2:	bf00      	nop
 80174a4:	2000ae39 	.word	0x2000ae39

080174a8 <srand>:
 80174a8:	b538      	push	{r3, r4, r5, lr}
 80174aa:	4b10      	ldr	r3, [pc, #64]	@ (80174ec <srand+0x44>)
 80174ac:	681d      	ldr	r5, [r3, #0]
 80174ae:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80174b0:	4604      	mov	r4, r0
 80174b2:	b9b3      	cbnz	r3, 80174e2 <srand+0x3a>
 80174b4:	2018      	movs	r0, #24
 80174b6:	f7ff ff39 	bl	801732c <malloc>
 80174ba:	4602      	mov	r2, r0
 80174bc:	6328      	str	r0, [r5, #48]	@ 0x30
 80174be:	b920      	cbnz	r0, 80174ca <srand+0x22>
 80174c0:	4b0b      	ldr	r3, [pc, #44]	@ (80174f0 <srand+0x48>)
 80174c2:	480c      	ldr	r0, [pc, #48]	@ (80174f4 <srand+0x4c>)
 80174c4:	2146      	movs	r1, #70	@ 0x46
 80174c6:	f000 fb8f 	bl	8017be8 <__assert_func>
 80174ca:	490b      	ldr	r1, [pc, #44]	@ (80174f8 <srand+0x50>)
 80174cc:	4b0b      	ldr	r3, [pc, #44]	@ (80174fc <srand+0x54>)
 80174ce:	e9c0 1300 	strd	r1, r3, [r0]
 80174d2:	4b0b      	ldr	r3, [pc, #44]	@ (8017500 <srand+0x58>)
 80174d4:	6083      	str	r3, [r0, #8]
 80174d6:	230b      	movs	r3, #11
 80174d8:	8183      	strh	r3, [r0, #12]
 80174da:	2100      	movs	r1, #0
 80174dc:	2001      	movs	r0, #1
 80174de:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80174e2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80174e4:	2200      	movs	r2, #0
 80174e6:	611c      	str	r4, [r3, #16]
 80174e8:	615a      	str	r2, [r3, #20]
 80174ea:	bd38      	pop	{r3, r4, r5, pc}
 80174ec:	200000c8 	.word	0x200000c8
 80174f0:	080195f8 	.word	0x080195f8
 80174f4:	0801960f 	.word	0x0801960f
 80174f8:	abcd330e 	.word	0xabcd330e
 80174fc:	e66d1234 	.word	0xe66d1234
 8017500:	0005deec 	.word	0x0005deec

08017504 <rand>:
 8017504:	4b16      	ldr	r3, [pc, #88]	@ (8017560 <rand+0x5c>)
 8017506:	b510      	push	{r4, lr}
 8017508:	681c      	ldr	r4, [r3, #0]
 801750a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801750c:	b9b3      	cbnz	r3, 801753c <rand+0x38>
 801750e:	2018      	movs	r0, #24
 8017510:	f7ff ff0c 	bl	801732c <malloc>
 8017514:	4602      	mov	r2, r0
 8017516:	6320      	str	r0, [r4, #48]	@ 0x30
 8017518:	b920      	cbnz	r0, 8017524 <rand+0x20>
 801751a:	4b12      	ldr	r3, [pc, #72]	@ (8017564 <rand+0x60>)
 801751c:	4812      	ldr	r0, [pc, #72]	@ (8017568 <rand+0x64>)
 801751e:	2152      	movs	r1, #82	@ 0x52
 8017520:	f000 fb62 	bl	8017be8 <__assert_func>
 8017524:	4911      	ldr	r1, [pc, #68]	@ (801756c <rand+0x68>)
 8017526:	4b12      	ldr	r3, [pc, #72]	@ (8017570 <rand+0x6c>)
 8017528:	e9c0 1300 	strd	r1, r3, [r0]
 801752c:	4b11      	ldr	r3, [pc, #68]	@ (8017574 <rand+0x70>)
 801752e:	6083      	str	r3, [r0, #8]
 8017530:	230b      	movs	r3, #11
 8017532:	8183      	strh	r3, [r0, #12]
 8017534:	2100      	movs	r1, #0
 8017536:	2001      	movs	r0, #1
 8017538:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801753c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801753e:	480e      	ldr	r0, [pc, #56]	@ (8017578 <rand+0x74>)
 8017540:	690b      	ldr	r3, [r1, #16]
 8017542:	694c      	ldr	r4, [r1, #20]
 8017544:	4a0d      	ldr	r2, [pc, #52]	@ (801757c <rand+0x78>)
 8017546:	4358      	muls	r0, r3
 8017548:	fb02 0004 	mla	r0, r2, r4, r0
 801754c:	fba3 3202 	umull	r3, r2, r3, r2
 8017550:	3301      	adds	r3, #1
 8017552:	eb40 0002 	adc.w	r0, r0, r2
 8017556:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801755a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801755e:	bd10      	pop	{r4, pc}
 8017560:	200000c8 	.word	0x200000c8
 8017564:	080195f8 	.word	0x080195f8
 8017568:	0801960f 	.word	0x0801960f
 801756c:	abcd330e 	.word	0xabcd330e
 8017570:	e66d1234 	.word	0xe66d1234
 8017574:	0005deec 	.word	0x0005deec
 8017578:	5851f42d 	.word	0x5851f42d
 801757c:	4c957f2d 	.word	0x4c957f2d

08017580 <realloc>:
 8017580:	4b02      	ldr	r3, [pc, #8]	@ (801758c <realloc+0xc>)
 8017582:	460a      	mov	r2, r1
 8017584:	4601      	mov	r1, r0
 8017586:	6818      	ldr	r0, [r3, #0]
 8017588:	f000 b802 	b.w	8017590 <_realloc_r>
 801758c:	200000c8 	.word	0x200000c8

08017590 <_realloc_r>:
 8017590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017594:	4680      	mov	r8, r0
 8017596:	4615      	mov	r5, r2
 8017598:	460c      	mov	r4, r1
 801759a:	b921      	cbnz	r1, 80175a6 <_realloc_r+0x16>
 801759c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80175a0:	4611      	mov	r1, r2
 80175a2:	f7ff bef5 	b.w	8017390 <_malloc_r>
 80175a6:	b92a      	cbnz	r2, 80175b4 <_realloc_r+0x24>
 80175a8:	f000 fb48 	bl	8017c3c <_free_r>
 80175ac:	2400      	movs	r4, #0
 80175ae:	4620      	mov	r0, r4
 80175b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175b4:	f000 fb8c 	bl	8017cd0 <_malloc_usable_size_r>
 80175b8:	4285      	cmp	r5, r0
 80175ba:	4606      	mov	r6, r0
 80175bc:	d802      	bhi.n	80175c4 <_realloc_r+0x34>
 80175be:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80175c2:	d8f4      	bhi.n	80175ae <_realloc_r+0x1e>
 80175c4:	4629      	mov	r1, r5
 80175c6:	4640      	mov	r0, r8
 80175c8:	f7ff fee2 	bl	8017390 <_malloc_r>
 80175cc:	4607      	mov	r7, r0
 80175ce:	2800      	cmp	r0, #0
 80175d0:	d0ec      	beq.n	80175ac <_realloc_r+0x1c>
 80175d2:	42b5      	cmp	r5, r6
 80175d4:	462a      	mov	r2, r5
 80175d6:	4621      	mov	r1, r4
 80175d8:	bf28      	it	cs
 80175da:	4632      	movcs	r2, r6
 80175dc:	f000 faf5 	bl	8017bca <memcpy>
 80175e0:	4621      	mov	r1, r4
 80175e2:	4640      	mov	r0, r8
 80175e4:	f000 fb2a 	bl	8017c3c <_free_r>
 80175e8:	463c      	mov	r4, r7
 80175ea:	e7e0      	b.n	80175ae <_realloc_r+0x1e>

080175ec <_strtoul_l.constprop.0>:
 80175ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80175f0:	4e34      	ldr	r6, [pc, #208]	@ (80176c4 <_strtoul_l.constprop.0+0xd8>)
 80175f2:	4686      	mov	lr, r0
 80175f4:	460d      	mov	r5, r1
 80175f6:	4628      	mov	r0, r5
 80175f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80175fc:	5d37      	ldrb	r7, [r6, r4]
 80175fe:	f017 0708 	ands.w	r7, r7, #8
 8017602:	d1f8      	bne.n	80175f6 <_strtoul_l.constprop.0+0xa>
 8017604:	2c2d      	cmp	r4, #45	@ 0x2d
 8017606:	d12f      	bne.n	8017668 <_strtoul_l.constprop.0+0x7c>
 8017608:	782c      	ldrb	r4, [r5, #0]
 801760a:	2701      	movs	r7, #1
 801760c:	1c85      	adds	r5, r0, #2
 801760e:	f033 0010 	bics.w	r0, r3, #16
 8017612:	d109      	bne.n	8017628 <_strtoul_l.constprop.0+0x3c>
 8017614:	2c30      	cmp	r4, #48	@ 0x30
 8017616:	d12c      	bne.n	8017672 <_strtoul_l.constprop.0+0x86>
 8017618:	7828      	ldrb	r0, [r5, #0]
 801761a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801761e:	2858      	cmp	r0, #88	@ 0x58
 8017620:	d127      	bne.n	8017672 <_strtoul_l.constprop.0+0x86>
 8017622:	786c      	ldrb	r4, [r5, #1]
 8017624:	2310      	movs	r3, #16
 8017626:	3502      	adds	r5, #2
 8017628:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801762c:	2600      	movs	r6, #0
 801762e:	fbb8 f8f3 	udiv	r8, r8, r3
 8017632:	fb03 f908 	mul.w	r9, r3, r8
 8017636:	ea6f 0909 	mvn.w	r9, r9
 801763a:	4630      	mov	r0, r6
 801763c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8017640:	f1bc 0f09 	cmp.w	ip, #9
 8017644:	d81c      	bhi.n	8017680 <_strtoul_l.constprop.0+0x94>
 8017646:	4664      	mov	r4, ip
 8017648:	42a3      	cmp	r3, r4
 801764a:	dd2a      	ble.n	80176a2 <_strtoul_l.constprop.0+0xb6>
 801764c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8017650:	d007      	beq.n	8017662 <_strtoul_l.constprop.0+0x76>
 8017652:	4580      	cmp	r8, r0
 8017654:	d322      	bcc.n	801769c <_strtoul_l.constprop.0+0xb0>
 8017656:	d101      	bne.n	801765c <_strtoul_l.constprop.0+0x70>
 8017658:	45a1      	cmp	r9, r4
 801765a:	db1f      	blt.n	801769c <_strtoul_l.constprop.0+0xb0>
 801765c:	fb00 4003 	mla	r0, r0, r3, r4
 8017660:	2601      	movs	r6, #1
 8017662:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017666:	e7e9      	b.n	801763c <_strtoul_l.constprop.0+0x50>
 8017668:	2c2b      	cmp	r4, #43	@ 0x2b
 801766a:	bf04      	itt	eq
 801766c:	782c      	ldrbeq	r4, [r5, #0]
 801766e:	1c85      	addeq	r5, r0, #2
 8017670:	e7cd      	b.n	801760e <_strtoul_l.constprop.0+0x22>
 8017672:	2b00      	cmp	r3, #0
 8017674:	d1d8      	bne.n	8017628 <_strtoul_l.constprop.0+0x3c>
 8017676:	2c30      	cmp	r4, #48	@ 0x30
 8017678:	bf0c      	ite	eq
 801767a:	2308      	moveq	r3, #8
 801767c:	230a      	movne	r3, #10
 801767e:	e7d3      	b.n	8017628 <_strtoul_l.constprop.0+0x3c>
 8017680:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8017684:	f1bc 0f19 	cmp.w	ip, #25
 8017688:	d801      	bhi.n	801768e <_strtoul_l.constprop.0+0xa2>
 801768a:	3c37      	subs	r4, #55	@ 0x37
 801768c:	e7dc      	b.n	8017648 <_strtoul_l.constprop.0+0x5c>
 801768e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8017692:	f1bc 0f19 	cmp.w	ip, #25
 8017696:	d804      	bhi.n	80176a2 <_strtoul_l.constprop.0+0xb6>
 8017698:	3c57      	subs	r4, #87	@ 0x57
 801769a:	e7d5      	b.n	8017648 <_strtoul_l.constprop.0+0x5c>
 801769c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80176a0:	e7df      	b.n	8017662 <_strtoul_l.constprop.0+0x76>
 80176a2:	1c73      	adds	r3, r6, #1
 80176a4:	d106      	bne.n	80176b4 <_strtoul_l.constprop.0+0xc8>
 80176a6:	2322      	movs	r3, #34	@ 0x22
 80176a8:	f8ce 3000 	str.w	r3, [lr]
 80176ac:	4630      	mov	r0, r6
 80176ae:	b932      	cbnz	r2, 80176be <_strtoul_l.constprop.0+0xd2>
 80176b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80176b4:	b107      	cbz	r7, 80176b8 <_strtoul_l.constprop.0+0xcc>
 80176b6:	4240      	negs	r0, r0
 80176b8:	2a00      	cmp	r2, #0
 80176ba:	d0f9      	beq.n	80176b0 <_strtoul_l.constprop.0+0xc4>
 80176bc:	b106      	cbz	r6, 80176c0 <_strtoul_l.constprop.0+0xd4>
 80176be:	1e69      	subs	r1, r5, #1
 80176c0:	6011      	str	r1, [r2, #0]
 80176c2:	e7f5      	b.n	80176b0 <_strtoul_l.constprop.0+0xc4>
 80176c4:	08019668 	.word	0x08019668

080176c8 <strtoul>:
 80176c8:	4613      	mov	r3, r2
 80176ca:	460a      	mov	r2, r1
 80176cc:	4601      	mov	r1, r0
 80176ce:	4802      	ldr	r0, [pc, #8]	@ (80176d8 <strtoul+0x10>)
 80176d0:	6800      	ldr	r0, [r0, #0]
 80176d2:	f7ff bf8b 	b.w	80175ec <_strtoul_l.constprop.0>
 80176d6:	bf00      	nop
 80176d8:	200000c8 	.word	0x200000c8

080176dc <std>:
 80176dc:	2300      	movs	r3, #0
 80176de:	b510      	push	{r4, lr}
 80176e0:	4604      	mov	r4, r0
 80176e2:	e9c0 3300 	strd	r3, r3, [r0]
 80176e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80176ea:	6083      	str	r3, [r0, #8]
 80176ec:	8181      	strh	r1, [r0, #12]
 80176ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80176f0:	81c2      	strh	r2, [r0, #14]
 80176f2:	6183      	str	r3, [r0, #24]
 80176f4:	4619      	mov	r1, r3
 80176f6:	2208      	movs	r2, #8
 80176f8:	305c      	adds	r0, #92	@ 0x5c
 80176fa:	f000 f99d 	bl	8017a38 <memset>
 80176fe:	4b0d      	ldr	r3, [pc, #52]	@ (8017734 <std+0x58>)
 8017700:	6263      	str	r3, [r4, #36]	@ 0x24
 8017702:	4b0d      	ldr	r3, [pc, #52]	@ (8017738 <std+0x5c>)
 8017704:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017706:	4b0d      	ldr	r3, [pc, #52]	@ (801773c <std+0x60>)
 8017708:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801770a:	4b0d      	ldr	r3, [pc, #52]	@ (8017740 <std+0x64>)
 801770c:	6323      	str	r3, [r4, #48]	@ 0x30
 801770e:	4b0d      	ldr	r3, [pc, #52]	@ (8017744 <std+0x68>)
 8017710:	6224      	str	r4, [r4, #32]
 8017712:	429c      	cmp	r4, r3
 8017714:	d006      	beq.n	8017724 <std+0x48>
 8017716:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801771a:	4294      	cmp	r4, r2
 801771c:	d002      	beq.n	8017724 <std+0x48>
 801771e:	33d0      	adds	r3, #208	@ 0xd0
 8017720:	429c      	cmp	r4, r3
 8017722:	d105      	bne.n	8017730 <std+0x54>
 8017724:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801772c:	f000 ba42 	b.w	8017bb4 <__retarget_lock_init_recursive>
 8017730:	bd10      	pop	{r4, pc}
 8017732:	bf00      	nop
 8017734:	080178ed 	.word	0x080178ed
 8017738:	0801790f 	.word	0x0801790f
 801773c:	08017947 	.word	0x08017947
 8017740:	0801796b 	.word	0x0801796b
 8017744:	2000acf8 	.word	0x2000acf8

08017748 <stdio_exit_handler>:
 8017748:	4a02      	ldr	r2, [pc, #8]	@ (8017754 <stdio_exit_handler+0xc>)
 801774a:	4903      	ldr	r1, [pc, #12]	@ (8017758 <stdio_exit_handler+0x10>)
 801774c:	4803      	ldr	r0, [pc, #12]	@ (801775c <stdio_exit_handler+0x14>)
 801774e:	f000 b869 	b.w	8017824 <_fwalk_sglue>
 8017752:	bf00      	nop
 8017754:	200000bc 	.word	0x200000bc
 8017758:	08018639 	.word	0x08018639
 801775c:	200000cc 	.word	0x200000cc

08017760 <cleanup_stdio>:
 8017760:	6841      	ldr	r1, [r0, #4]
 8017762:	4b0c      	ldr	r3, [pc, #48]	@ (8017794 <cleanup_stdio+0x34>)
 8017764:	4299      	cmp	r1, r3
 8017766:	b510      	push	{r4, lr}
 8017768:	4604      	mov	r4, r0
 801776a:	d001      	beq.n	8017770 <cleanup_stdio+0x10>
 801776c:	f000 ff64 	bl	8018638 <_fflush_r>
 8017770:	68a1      	ldr	r1, [r4, #8]
 8017772:	4b09      	ldr	r3, [pc, #36]	@ (8017798 <cleanup_stdio+0x38>)
 8017774:	4299      	cmp	r1, r3
 8017776:	d002      	beq.n	801777e <cleanup_stdio+0x1e>
 8017778:	4620      	mov	r0, r4
 801777a:	f000 ff5d 	bl	8018638 <_fflush_r>
 801777e:	68e1      	ldr	r1, [r4, #12]
 8017780:	4b06      	ldr	r3, [pc, #24]	@ (801779c <cleanup_stdio+0x3c>)
 8017782:	4299      	cmp	r1, r3
 8017784:	d004      	beq.n	8017790 <cleanup_stdio+0x30>
 8017786:	4620      	mov	r0, r4
 8017788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801778c:	f000 bf54 	b.w	8018638 <_fflush_r>
 8017790:	bd10      	pop	{r4, pc}
 8017792:	bf00      	nop
 8017794:	2000acf8 	.word	0x2000acf8
 8017798:	2000ad60 	.word	0x2000ad60
 801779c:	2000adc8 	.word	0x2000adc8

080177a0 <global_stdio_init.part.0>:
 80177a0:	b510      	push	{r4, lr}
 80177a2:	4b0b      	ldr	r3, [pc, #44]	@ (80177d0 <global_stdio_init.part.0+0x30>)
 80177a4:	4c0b      	ldr	r4, [pc, #44]	@ (80177d4 <global_stdio_init.part.0+0x34>)
 80177a6:	4a0c      	ldr	r2, [pc, #48]	@ (80177d8 <global_stdio_init.part.0+0x38>)
 80177a8:	601a      	str	r2, [r3, #0]
 80177aa:	4620      	mov	r0, r4
 80177ac:	2200      	movs	r2, #0
 80177ae:	2104      	movs	r1, #4
 80177b0:	f7ff ff94 	bl	80176dc <std>
 80177b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80177b8:	2201      	movs	r2, #1
 80177ba:	2109      	movs	r1, #9
 80177bc:	f7ff ff8e 	bl	80176dc <std>
 80177c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80177c4:	2202      	movs	r2, #2
 80177c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80177ca:	2112      	movs	r1, #18
 80177cc:	f7ff bf86 	b.w	80176dc <std>
 80177d0:	2000ae30 	.word	0x2000ae30
 80177d4:	2000acf8 	.word	0x2000acf8
 80177d8:	08017749 	.word	0x08017749

080177dc <__sfp_lock_acquire>:
 80177dc:	4801      	ldr	r0, [pc, #4]	@ (80177e4 <__sfp_lock_acquire+0x8>)
 80177de:	f000 b9ea 	b.w	8017bb6 <__retarget_lock_acquire_recursive>
 80177e2:	bf00      	nop
 80177e4:	2000ae3a 	.word	0x2000ae3a

080177e8 <__sfp_lock_release>:
 80177e8:	4801      	ldr	r0, [pc, #4]	@ (80177f0 <__sfp_lock_release+0x8>)
 80177ea:	f000 b9e5 	b.w	8017bb8 <__retarget_lock_release_recursive>
 80177ee:	bf00      	nop
 80177f0:	2000ae3a 	.word	0x2000ae3a

080177f4 <__sinit>:
 80177f4:	b510      	push	{r4, lr}
 80177f6:	4604      	mov	r4, r0
 80177f8:	f7ff fff0 	bl	80177dc <__sfp_lock_acquire>
 80177fc:	6a23      	ldr	r3, [r4, #32]
 80177fe:	b11b      	cbz	r3, 8017808 <__sinit+0x14>
 8017800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017804:	f7ff bff0 	b.w	80177e8 <__sfp_lock_release>
 8017808:	4b04      	ldr	r3, [pc, #16]	@ (801781c <__sinit+0x28>)
 801780a:	6223      	str	r3, [r4, #32]
 801780c:	4b04      	ldr	r3, [pc, #16]	@ (8017820 <__sinit+0x2c>)
 801780e:	681b      	ldr	r3, [r3, #0]
 8017810:	2b00      	cmp	r3, #0
 8017812:	d1f5      	bne.n	8017800 <__sinit+0xc>
 8017814:	f7ff ffc4 	bl	80177a0 <global_stdio_init.part.0>
 8017818:	e7f2      	b.n	8017800 <__sinit+0xc>
 801781a:	bf00      	nop
 801781c:	08017761 	.word	0x08017761
 8017820:	2000ae30 	.word	0x2000ae30

08017824 <_fwalk_sglue>:
 8017824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017828:	4607      	mov	r7, r0
 801782a:	4688      	mov	r8, r1
 801782c:	4614      	mov	r4, r2
 801782e:	2600      	movs	r6, #0
 8017830:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017834:	f1b9 0901 	subs.w	r9, r9, #1
 8017838:	d505      	bpl.n	8017846 <_fwalk_sglue+0x22>
 801783a:	6824      	ldr	r4, [r4, #0]
 801783c:	2c00      	cmp	r4, #0
 801783e:	d1f7      	bne.n	8017830 <_fwalk_sglue+0xc>
 8017840:	4630      	mov	r0, r6
 8017842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017846:	89ab      	ldrh	r3, [r5, #12]
 8017848:	2b01      	cmp	r3, #1
 801784a:	d907      	bls.n	801785c <_fwalk_sglue+0x38>
 801784c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017850:	3301      	adds	r3, #1
 8017852:	d003      	beq.n	801785c <_fwalk_sglue+0x38>
 8017854:	4629      	mov	r1, r5
 8017856:	4638      	mov	r0, r7
 8017858:	47c0      	blx	r8
 801785a:	4306      	orrs	r6, r0
 801785c:	3568      	adds	r5, #104	@ 0x68
 801785e:	e7e9      	b.n	8017834 <_fwalk_sglue+0x10>

08017860 <iprintf>:
 8017860:	b40f      	push	{r0, r1, r2, r3}
 8017862:	b507      	push	{r0, r1, r2, lr}
 8017864:	4906      	ldr	r1, [pc, #24]	@ (8017880 <iprintf+0x20>)
 8017866:	ab04      	add	r3, sp, #16
 8017868:	6808      	ldr	r0, [r1, #0]
 801786a:	f853 2b04 	ldr.w	r2, [r3], #4
 801786e:	6881      	ldr	r1, [r0, #8]
 8017870:	9301      	str	r3, [sp, #4]
 8017872:	f000 fbb7 	bl	8017fe4 <_vfiprintf_r>
 8017876:	b003      	add	sp, #12
 8017878:	f85d eb04 	ldr.w	lr, [sp], #4
 801787c:	b004      	add	sp, #16
 801787e:	4770      	bx	lr
 8017880:	200000c8 	.word	0x200000c8

08017884 <sniprintf>:
 8017884:	b40c      	push	{r2, r3}
 8017886:	b530      	push	{r4, r5, lr}
 8017888:	4b17      	ldr	r3, [pc, #92]	@ (80178e8 <sniprintf+0x64>)
 801788a:	1e0c      	subs	r4, r1, #0
 801788c:	681d      	ldr	r5, [r3, #0]
 801788e:	b09d      	sub	sp, #116	@ 0x74
 8017890:	da08      	bge.n	80178a4 <sniprintf+0x20>
 8017892:	238b      	movs	r3, #139	@ 0x8b
 8017894:	602b      	str	r3, [r5, #0]
 8017896:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801789a:	b01d      	add	sp, #116	@ 0x74
 801789c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80178a0:	b002      	add	sp, #8
 80178a2:	4770      	bx	lr
 80178a4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80178a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80178ac:	bf14      	ite	ne
 80178ae:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80178b2:	4623      	moveq	r3, r4
 80178b4:	9304      	str	r3, [sp, #16]
 80178b6:	9307      	str	r3, [sp, #28]
 80178b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80178bc:	9002      	str	r0, [sp, #8]
 80178be:	9006      	str	r0, [sp, #24]
 80178c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80178c4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80178c6:	ab21      	add	r3, sp, #132	@ 0x84
 80178c8:	a902      	add	r1, sp, #8
 80178ca:	4628      	mov	r0, r5
 80178cc:	9301      	str	r3, [sp, #4]
 80178ce:	f000 fa63 	bl	8017d98 <_svfiprintf_r>
 80178d2:	1c43      	adds	r3, r0, #1
 80178d4:	bfbc      	itt	lt
 80178d6:	238b      	movlt	r3, #139	@ 0x8b
 80178d8:	602b      	strlt	r3, [r5, #0]
 80178da:	2c00      	cmp	r4, #0
 80178dc:	d0dd      	beq.n	801789a <sniprintf+0x16>
 80178de:	9b02      	ldr	r3, [sp, #8]
 80178e0:	2200      	movs	r2, #0
 80178e2:	701a      	strb	r2, [r3, #0]
 80178e4:	e7d9      	b.n	801789a <sniprintf+0x16>
 80178e6:	bf00      	nop
 80178e8:	200000c8 	.word	0x200000c8

080178ec <__sread>:
 80178ec:	b510      	push	{r4, lr}
 80178ee:	460c      	mov	r4, r1
 80178f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80178f4:	f000 f900 	bl	8017af8 <_read_r>
 80178f8:	2800      	cmp	r0, #0
 80178fa:	bfab      	itete	ge
 80178fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80178fe:	89a3      	ldrhlt	r3, [r4, #12]
 8017900:	181b      	addge	r3, r3, r0
 8017902:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017906:	bfac      	ite	ge
 8017908:	6563      	strge	r3, [r4, #84]	@ 0x54
 801790a:	81a3      	strhlt	r3, [r4, #12]
 801790c:	bd10      	pop	{r4, pc}

0801790e <__swrite>:
 801790e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017912:	461f      	mov	r7, r3
 8017914:	898b      	ldrh	r3, [r1, #12]
 8017916:	05db      	lsls	r3, r3, #23
 8017918:	4605      	mov	r5, r0
 801791a:	460c      	mov	r4, r1
 801791c:	4616      	mov	r6, r2
 801791e:	d505      	bpl.n	801792c <__swrite+0x1e>
 8017920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017924:	2302      	movs	r3, #2
 8017926:	2200      	movs	r2, #0
 8017928:	f000 f8d4 	bl	8017ad4 <_lseek_r>
 801792c:	89a3      	ldrh	r3, [r4, #12]
 801792e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017932:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017936:	81a3      	strh	r3, [r4, #12]
 8017938:	4632      	mov	r2, r6
 801793a:	463b      	mov	r3, r7
 801793c:	4628      	mov	r0, r5
 801793e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017942:	f000 b8fb 	b.w	8017b3c <_write_r>

08017946 <__sseek>:
 8017946:	b510      	push	{r4, lr}
 8017948:	460c      	mov	r4, r1
 801794a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801794e:	f000 f8c1 	bl	8017ad4 <_lseek_r>
 8017952:	1c43      	adds	r3, r0, #1
 8017954:	89a3      	ldrh	r3, [r4, #12]
 8017956:	bf15      	itete	ne
 8017958:	6560      	strne	r0, [r4, #84]	@ 0x54
 801795a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801795e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017962:	81a3      	strheq	r3, [r4, #12]
 8017964:	bf18      	it	ne
 8017966:	81a3      	strhne	r3, [r4, #12]
 8017968:	bd10      	pop	{r4, pc}

0801796a <__sclose>:
 801796a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801796e:	f000 b8a1 	b.w	8017ab4 <_close_r>

08017972 <_vsniprintf_r>:
 8017972:	b530      	push	{r4, r5, lr}
 8017974:	4614      	mov	r4, r2
 8017976:	2c00      	cmp	r4, #0
 8017978:	b09b      	sub	sp, #108	@ 0x6c
 801797a:	4605      	mov	r5, r0
 801797c:	461a      	mov	r2, r3
 801797e:	da05      	bge.n	801798c <_vsniprintf_r+0x1a>
 8017980:	238b      	movs	r3, #139	@ 0x8b
 8017982:	6003      	str	r3, [r0, #0]
 8017984:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017988:	b01b      	add	sp, #108	@ 0x6c
 801798a:	bd30      	pop	{r4, r5, pc}
 801798c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017990:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017994:	bf14      	ite	ne
 8017996:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801799a:	4623      	moveq	r3, r4
 801799c:	9302      	str	r3, [sp, #8]
 801799e:	9305      	str	r3, [sp, #20]
 80179a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80179a4:	9100      	str	r1, [sp, #0]
 80179a6:	9104      	str	r1, [sp, #16]
 80179a8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80179ac:	4669      	mov	r1, sp
 80179ae:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80179b0:	f000 f9f2 	bl	8017d98 <_svfiprintf_r>
 80179b4:	1c43      	adds	r3, r0, #1
 80179b6:	bfbc      	itt	lt
 80179b8:	238b      	movlt	r3, #139	@ 0x8b
 80179ba:	602b      	strlt	r3, [r5, #0]
 80179bc:	2c00      	cmp	r4, #0
 80179be:	d0e3      	beq.n	8017988 <_vsniprintf_r+0x16>
 80179c0:	9b00      	ldr	r3, [sp, #0]
 80179c2:	2200      	movs	r2, #0
 80179c4:	701a      	strb	r2, [r3, #0]
 80179c6:	e7df      	b.n	8017988 <_vsniprintf_r+0x16>

080179c8 <vsniprintf>:
 80179c8:	b507      	push	{r0, r1, r2, lr}
 80179ca:	9300      	str	r3, [sp, #0]
 80179cc:	4613      	mov	r3, r2
 80179ce:	460a      	mov	r2, r1
 80179d0:	4601      	mov	r1, r0
 80179d2:	4803      	ldr	r0, [pc, #12]	@ (80179e0 <vsniprintf+0x18>)
 80179d4:	6800      	ldr	r0, [r0, #0]
 80179d6:	f7ff ffcc 	bl	8017972 <_vsniprintf_r>
 80179da:	b003      	add	sp, #12
 80179dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80179e0:	200000c8 	.word	0x200000c8

080179e4 <memcmp>:
 80179e4:	b510      	push	{r4, lr}
 80179e6:	3901      	subs	r1, #1
 80179e8:	4402      	add	r2, r0
 80179ea:	4290      	cmp	r0, r2
 80179ec:	d101      	bne.n	80179f2 <memcmp+0xe>
 80179ee:	2000      	movs	r0, #0
 80179f0:	e005      	b.n	80179fe <memcmp+0x1a>
 80179f2:	7803      	ldrb	r3, [r0, #0]
 80179f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80179f8:	42a3      	cmp	r3, r4
 80179fa:	d001      	beq.n	8017a00 <memcmp+0x1c>
 80179fc:	1b18      	subs	r0, r3, r4
 80179fe:	bd10      	pop	{r4, pc}
 8017a00:	3001      	adds	r0, #1
 8017a02:	e7f2      	b.n	80179ea <memcmp+0x6>

08017a04 <memmove>:
 8017a04:	4288      	cmp	r0, r1
 8017a06:	b510      	push	{r4, lr}
 8017a08:	eb01 0402 	add.w	r4, r1, r2
 8017a0c:	d902      	bls.n	8017a14 <memmove+0x10>
 8017a0e:	4284      	cmp	r4, r0
 8017a10:	4623      	mov	r3, r4
 8017a12:	d807      	bhi.n	8017a24 <memmove+0x20>
 8017a14:	1e43      	subs	r3, r0, #1
 8017a16:	42a1      	cmp	r1, r4
 8017a18:	d008      	beq.n	8017a2c <memmove+0x28>
 8017a1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017a1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017a22:	e7f8      	b.n	8017a16 <memmove+0x12>
 8017a24:	4402      	add	r2, r0
 8017a26:	4601      	mov	r1, r0
 8017a28:	428a      	cmp	r2, r1
 8017a2a:	d100      	bne.n	8017a2e <memmove+0x2a>
 8017a2c:	bd10      	pop	{r4, pc}
 8017a2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017a32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017a36:	e7f7      	b.n	8017a28 <memmove+0x24>

08017a38 <memset>:
 8017a38:	4402      	add	r2, r0
 8017a3a:	4603      	mov	r3, r0
 8017a3c:	4293      	cmp	r3, r2
 8017a3e:	d100      	bne.n	8017a42 <memset+0xa>
 8017a40:	4770      	bx	lr
 8017a42:	f803 1b01 	strb.w	r1, [r3], #1
 8017a46:	e7f9      	b.n	8017a3c <memset+0x4>

08017a48 <strchr>:
 8017a48:	b2c9      	uxtb	r1, r1
 8017a4a:	4603      	mov	r3, r0
 8017a4c:	4618      	mov	r0, r3
 8017a4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017a52:	b112      	cbz	r2, 8017a5a <strchr+0x12>
 8017a54:	428a      	cmp	r2, r1
 8017a56:	d1f9      	bne.n	8017a4c <strchr+0x4>
 8017a58:	4770      	bx	lr
 8017a5a:	2900      	cmp	r1, #0
 8017a5c:	bf18      	it	ne
 8017a5e:	2000      	movne	r0, #0
 8017a60:	4770      	bx	lr

08017a62 <strncmp>:
 8017a62:	b510      	push	{r4, lr}
 8017a64:	b16a      	cbz	r2, 8017a82 <strncmp+0x20>
 8017a66:	3901      	subs	r1, #1
 8017a68:	1884      	adds	r4, r0, r2
 8017a6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017a6e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017a72:	429a      	cmp	r2, r3
 8017a74:	d103      	bne.n	8017a7e <strncmp+0x1c>
 8017a76:	42a0      	cmp	r0, r4
 8017a78:	d001      	beq.n	8017a7e <strncmp+0x1c>
 8017a7a:	2a00      	cmp	r2, #0
 8017a7c:	d1f5      	bne.n	8017a6a <strncmp+0x8>
 8017a7e:	1ad0      	subs	r0, r2, r3
 8017a80:	bd10      	pop	{r4, pc}
 8017a82:	4610      	mov	r0, r2
 8017a84:	e7fc      	b.n	8017a80 <strncmp+0x1e>

08017a86 <strstr>:
 8017a86:	780a      	ldrb	r2, [r1, #0]
 8017a88:	b570      	push	{r4, r5, r6, lr}
 8017a8a:	b96a      	cbnz	r2, 8017aa8 <strstr+0x22>
 8017a8c:	bd70      	pop	{r4, r5, r6, pc}
 8017a8e:	429a      	cmp	r2, r3
 8017a90:	d109      	bne.n	8017aa6 <strstr+0x20>
 8017a92:	460c      	mov	r4, r1
 8017a94:	4605      	mov	r5, r0
 8017a96:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d0f6      	beq.n	8017a8c <strstr+0x6>
 8017a9e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8017aa2:	429e      	cmp	r6, r3
 8017aa4:	d0f7      	beq.n	8017a96 <strstr+0x10>
 8017aa6:	3001      	adds	r0, #1
 8017aa8:	7803      	ldrb	r3, [r0, #0]
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d1ef      	bne.n	8017a8e <strstr+0x8>
 8017aae:	4618      	mov	r0, r3
 8017ab0:	e7ec      	b.n	8017a8c <strstr+0x6>
	...

08017ab4 <_close_r>:
 8017ab4:	b538      	push	{r3, r4, r5, lr}
 8017ab6:	4d06      	ldr	r5, [pc, #24]	@ (8017ad0 <_close_r+0x1c>)
 8017ab8:	2300      	movs	r3, #0
 8017aba:	4604      	mov	r4, r0
 8017abc:	4608      	mov	r0, r1
 8017abe:	602b      	str	r3, [r5, #0]
 8017ac0:	f7ea fa5a 	bl	8001f78 <_close>
 8017ac4:	1c43      	adds	r3, r0, #1
 8017ac6:	d102      	bne.n	8017ace <_close_r+0x1a>
 8017ac8:	682b      	ldr	r3, [r5, #0]
 8017aca:	b103      	cbz	r3, 8017ace <_close_r+0x1a>
 8017acc:	6023      	str	r3, [r4, #0]
 8017ace:	bd38      	pop	{r3, r4, r5, pc}
 8017ad0:	2000ae34 	.word	0x2000ae34

08017ad4 <_lseek_r>:
 8017ad4:	b538      	push	{r3, r4, r5, lr}
 8017ad6:	4d07      	ldr	r5, [pc, #28]	@ (8017af4 <_lseek_r+0x20>)
 8017ad8:	4604      	mov	r4, r0
 8017ada:	4608      	mov	r0, r1
 8017adc:	4611      	mov	r1, r2
 8017ade:	2200      	movs	r2, #0
 8017ae0:	602a      	str	r2, [r5, #0]
 8017ae2:	461a      	mov	r2, r3
 8017ae4:	f7ea fa6f 	bl	8001fc6 <_lseek>
 8017ae8:	1c43      	adds	r3, r0, #1
 8017aea:	d102      	bne.n	8017af2 <_lseek_r+0x1e>
 8017aec:	682b      	ldr	r3, [r5, #0]
 8017aee:	b103      	cbz	r3, 8017af2 <_lseek_r+0x1e>
 8017af0:	6023      	str	r3, [r4, #0]
 8017af2:	bd38      	pop	{r3, r4, r5, pc}
 8017af4:	2000ae34 	.word	0x2000ae34

08017af8 <_read_r>:
 8017af8:	b538      	push	{r3, r4, r5, lr}
 8017afa:	4d07      	ldr	r5, [pc, #28]	@ (8017b18 <_read_r+0x20>)
 8017afc:	4604      	mov	r4, r0
 8017afe:	4608      	mov	r0, r1
 8017b00:	4611      	mov	r1, r2
 8017b02:	2200      	movs	r2, #0
 8017b04:	602a      	str	r2, [r5, #0]
 8017b06:	461a      	mov	r2, r3
 8017b08:	f7ea f9fd 	bl	8001f06 <_read>
 8017b0c:	1c43      	adds	r3, r0, #1
 8017b0e:	d102      	bne.n	8017b16 <_read_r+0x1e>
 8017b10:	682b      	ldr	r3, [r5, #0]
 8017b12:	b103      	cbz	r3, 8017b16 <_read_r+0x1e>
 8017b14:	6023      	str	r3, [r4, #0]
 8017b16:	bd38      	pop	{r3, r4, r5, pc}
 8017b18:	2000ae34 	.word	0x2000ae34

08017b1c <_sbrk_r>:
 8017b1c:	b538      	push	{r3, r4, r5, lr}
 8017b1e:	4d06      	ldr	r5, [pc, #24]	@ (8017b38 <_sbrk_r+0x1c>)
 8017b20:	2300      	movs	r3, #0
 8017b22:	4604      	mov	r4, r0
 8017b24:	4608      	mov	r0, r1
 8017b26:	602b      	str	r3, [r5, #0]
 8017b28:	f7ea fa5a 	bl	8001fe0 <_sbrk>
 8017b2c:	1c43      	adds	r3, r0, #1
 8017b2e:	d102      	bne.n	8017b36 <_sbrk_r+0x1a>
 8017b30:	682b      	ldr	r3, [r5, #0]
 8017b32:	b103      	cbz	r3, 8017b36 <_sbrk_r+0x1a>
 8017b34:	6023      	str	r3, [r4, #0]
 8017b36:	bd38      	pop	{r3, r4, r5, pc}
 8017b38:	2000ae34 	.word	0x2000ae34

08017b3c <_write_r>:
 8017b3c:	b538      	push	{r3, r4, r5, lr}
 8017b3e:	4d07      	ldr	r5, [pc, #28]	@ (8017b5c <_write_r+0x20>)
 8017b40:	4604      	mov	r4, r0
 8017b42:	4608      	mov	r0, r1
 8017b44:	4611      	mov	r1, r2
 8017b46:	2200      	movs	r2, #0
 8017b48:	602a      	str	r2, [r5, #0]
 8017b4a:	461a      	mov	r2, r3
 8017b4c:	f7ea f9f8 	bl	8001f40 <_write>
 8017b50:	1c43      	adds	r3, r0, #1
 8017b52:	d102      	bne.n	8017b5a <_write_r+0x1e>
 8017b54:	682b      	ldr	r3, [r5, #0]
 8017b56:	b103      	cbz	r3, 8017b5a <_write_r+0x1e>
 8017b58:	6023      	str	r3, [r4, #0]
 8017b5a:	bd38      	pop	{r3, r4, r5, pc}
 8017b5c:	2000ae34 	.word	0x2000ae34

08017b60 <__errno>:
 8017b60:	4b01      	ldr	r3, [pc, #4]	@ (8017b68 <__errno+0x8>)
 8017b62:	6818      	ldr	r0, [r3, #0]
 8017b64:	4770      	bx	lr
 8017b66:	bf00      	nop
 8017b68:	200000c8 	.word	0x200000c8

08017b6c <__libc_init_array>:
 8017b6c:	b570      	push	{r4, r5, r6, lr}
 8017b6e:	4d0d      	ldr	r5, [pc, #52]	@ (8017ba4 <__libc_init_array+0x38>)
 8017b70:	4c0d      	ldr	r4, [pc, #52]	@ (8017ba8 <__libc_init_array+0x3c>)
 8017b72:	1b64      	subs	r4, r4, r5
 8017b74:	10a4      	asrs	r4, r4, #2
 8017b76:	2600      	movs	r6, #0
 8017b78:	42a6      	cmp	r6, r4
 8017b7a:	d109      	bne.n	8017b90 <__libc_init_array+0x24>
 8017b7c:	4d0b      	ldr	r5, [pc, #44]	@ (8017bac <__libc_init_array+0x40>)
 8017b7e:	4c0c      	ldr	r4, [pc, #48]	@ (8017bb0 <__libc_init_array+0x44>)
 8017b80:	f000 fef8 	bl	8018974 <_init>
 8017b84:	1b64      	subs	r4, r4, r5
 8017b86:	10a4      	asrs	r4, r4, #2
 8017b88:	2600      	movs	r6, #0
 8017b8a:	42a6      	cmp	r6, r4
 8017b8c:	d105      	bne.n	8017b9a <__libc_init_array+0x2e>
 8017b8e:	bd70      	pop	{r4, r5, r6, pc}
 8017b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8017b94:	4798      	blx	r3
 8017b96:	3601      	adds	r6, #1
 8017b98:	e7ee      	b.n	8017b78 <__libc_init_array+0xc>
 8017b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8017b9e:	4798      	blx	r3
 8017ba0:	3601      	adds	r6, #1
 8017ba2:	e7f2      	b.n	8017b8a <__libc_init_array+0x1e>
 8017ba4:	080197e0 	.word	0x080197e0
 8017ba8:	080197e0 	.word	0x080197e0
 8017bac:	080197e0 	.word	0x080197e0
 8017bb0:	080197e8 	.word	0x080197e8

08017bb4 <__retarget_lock_init_recursive>:
 8017bb4:	4770      	bx	lr

08017bb6 <__retarget_lock_acquire_recursive>:
 8017bb6:	4770      	bx	lr

08017bb8 <__retarget_lock_release_recursive>:
 8017bb8:	4770      	bx	lr

08017bba <strcpy>:
 8017bba:	4603      	mov	r3, r0
 8017bbc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017bc0:	f803 2b01 	strb.w	r2, [r3], #1
 8017bc4:	2a00      	cmp	r2, #0
 8017bc6:	d1f9      	bne.n	8017bbc <strcpy+0x2>
 8017bc8:	4770      	bx	lr

08017bca <memcpy>:
 8017bca:	440a      	add	r2, r1
 8017bcc:	4291      	cmp	r1, r2
 8017bce:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8017bd2:	d100      	bne.n	8017bd6 <memcpy+0xc>
 8017bd4:	4770      	bx	lr
 8017bd6:	b510      	push	{r4, lr}
 8017bd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017bdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017be0:	4291      	cmp	r1, r2
 8017be2:	d1f9      	bne.n	8017bd8 <memcpy+0xe>
 8017be4:	bd10      	pop	{r4, pc}
	...

08017be8 <__assert_func>:
 8017be8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017bea:	4614      	mov	r4, r2
 8017bec:	461a      	mov	r2, r3
 8017bee:	4b09      	ldr	r3, [pc, #36]	@ (8017c14 <__assert_func+0x2c>)
 8017bf0:	681b      	ldr	r3, [r3, #0]
 8017bf2:	4605      	mov	r5, r0
 8017bf4:	68d8      	ldr	r0, [r3, #12]
 8017bf6:	b954      	cbnz	r4, 8017c0e <__assert_func+0x26>
 8017bf8:	4b07      	ldr	r3, [pc, #28]	@ (8017c18 <__assert_func+0x30>)
 8017bfa:	461c      	mov	r4, r3
 8017bfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017c00:	9100      	str	r1, [sp, #0]
 8017c02:	462b      	mov	r3, r5
 8017c04:	4905      	ldr	r1, [pc, #20]	@ (8017c1c <__assert_func+0x34>)
 8017c06:	f000 fd3f 	bl	8018688 <fiprintf>
 8017c0a:	f000 fde3 	bl	80187d4 <abort>
 8017c0e:	4b04      	ldr	r3, [pc, #16]	@ (8017c20 <__assert_func+0x38>)
 8017c10:	e7f4      	b.n	8017bfc <__assert_func+0x14>
 8017c12:	bf00      	nop
 8017c14:	200000c8 	.word	0x200000c8
 8017c18:	080197a3 	.word	0x080197a3
 8017c1c:	08019775 	.word	0x08019775
 8017c20:	08019768 	.word	0x08019768

08017c24 <__env_lock>:
 8017c24:	4801      	ldr	r0, [pc, #4]	@ (8017c2c <__env_lock+0x8>)
 8017c26:	f7ff bfc6 	b.w	8017bb6 <__retarget_lock_acquire_recursive>
 8017c2a:	bf00      	nop
 8017c2c:	2000ae38 	.word	0x2000ae38

08017c30 <__env_unlock>:
 8017c30:	4801      	ldr	r0, [pc, #4]	@ (8017c38 <__env_unlock+0x8>)
 8017c32:	f7ff bfc1 	b.w	8017bb8 <__retarget_lock_release_recursive>
 8017c36:	bf00      	nop
 8017c38:	2000ae38 	.word	0x2000ae38

08017c3c <_free_r>:
 8017c3c:	b538      	push	{r3, r4, r5, lr}
 8017c3e:	4605      	mov	r5, r0
 8017c40:	2900      	cmp	r1, #0
 8017c42:	d041      	beq.n	8017cc8 <_free_r+0x8c>
 8017c44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017c48:	1f0c      	subs	r4, r1, #4
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	bfb8      	it	lt
 8017c4e:	18e4      	addlt	r4, r4, r3
 8017c50:	f7ff fc1e 	bl	8017490 <__malloc_lock>
 8017c54:	4a1d      	ldr	r2, [pc, #116]	@ (8017ccc <_free_r+0x90>)
 8017c56:	6813      	ldr	r3, [r2, #0]
 8017c58:	b933      	cbnz	r3, 8017c68 <_free_r+0x2c>
 8017c5a:	6063      	str	r3, [r4, #4]
 8017c5c:	6014      	str	r4, [r2, #0]
 8017c5e:	4628      	mov	r0, r5
 8017c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017c64:	f7ff bc1a 	b.w	801749c <__malloc_unlock>
 8017c68:	42a3      	cmp	r3, r4
 8017c6a:	d908      	bls.n	8017c7e <_free_r+0x42>
 8017c6c:	6820      	ldr	r0, [r4, #0]
 8017c6e:	1821      	adds	r1, r4, r0
 8017c70:	428b      	cmp	r3, r1
 8017c72:	bf01      	itttt	eq
 8017c74:	6819      	ldreq	r1, [r3, #0]
 8017c76:	685b      	ldreq	r3, [r3, #4]
 8017c78:	1809      	addeq	r1, r1, r0
 8017c7a:	6021      	streq	r1, [r4, #0]
 8017c7c:	e7ed      	b.n	8017c5a <_free_r+0x1e>
 8017c7e:	461a      	mov	r2, r3
 8017c80:	685b      	ldr	r3, [r3, #4]
 8017c82:	b10b      	cbz	r3, 8017c88 <_free_r+0x4c>
 8017c84:	42a3      	cmp	r3, r4
 8017c86:	d9fa      	bls.n	8017c7e <_free_r+0x42>
 8017c88:	6811      	ldr	r1, [r2, #0]
 8017c8a:	1850      	adds	r0, r2, r1
 8017c8c:	42a0      	cmp	r0, r4
 8017c8e:	d10b      	bne.n	8017ca8 <_free_r+0x6c>
 8017c90:	6820      	ldr	r0, [r4, #0]
 8017c92:	4401      	add	r1, r0
 8017c94:	1850      	adds	r0, r2, r1
 8017c96:	4283      	cmp	r3, r0
 8017c98:	6011      	str	r1, [r2, #0]
 8017c9a:	d1e0      	bne.n	8017c5e <_free_r+0x22>
 8017c9c:	6818      	ldr	r0, [r3, #0]
 8017c9e:	685b      	ldr	r3, [r3, #4]
 8017ca0:	6053      	str	r3, [r2, #4]
 8017ca2:	4408      	add	r0, r1
 8017ca4:	6010      	str	r0, [r2, #0]
 8017ca6:	e7da      	b.n	8017c5e <_free_r+0x22>
 8017ca8:	d902      	bls.n	8017cb0 <_free_r+0x74>
 8017caa:	230c      	movs	r3, #12
 8017cac:	602b      	str	r3, [r5, #0]
 8017cae:	e7d6      	b.n	8017c5e <_free_r+0x22>
 8017cb0:	6820      	ldr	r0, [r4, #0]
 8017cb2:	1821      	adds	r1, r4, r0
 8017cb4:	428b      	cmp	r3, r1
 8017cb6:	bf04      	itt	eq
 8017cb8:	6819      	ldreq	r1, [r3, #0]
 8017cba:	685b      	ldreq	r3, [r3, #4]
 8017cbc:	6063      	str	r3, [r4, #4]
 8017cbe:	bf04      	itt	eq
 8017cc0:	1809      	addeq	r1, r1, r0
 8017cc2:	6021      	streq	r1, [r4, #0]
 8017cc4:	6054      	str	r4, [r2, #4]
 8017cc6:	e7ca      	b.n	8017c5e <_free_r+0x22>
 8017cc8:	bd38      	pop	{r3, r4, r5, pc}
 8017cca:	bf00      	nop
 8017ccc:	2000acf4 	.word	0x2000acf4

08017cd0 <_malloc_usable_size_r>:
 8017cd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017cd4:	1f18      	subs	r0, r3, #4
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	bfbc      	itt	lt
 8017cda:	580b      	ldrlt	r3, [r1, r0]
 8017cdc:	18c0      	addlt	r0, r0, r3
 8017cde:	4770      	bx	lr

08017ce0 <__ssputs_r>:
 8017ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ce4:	688e      	ldr	r6, [r1, #8]
 8017ce6:	461f      	mov	r7, r3
 8017ce8:	42be      	cmp	r6, r7
 8017cea:	680b      	ldr	r3, [r1, #0]
 8017cec:	4682      	mov	sl, r0
 8017cee:	460c      	mov	r4, r1
 8017cf0:	4690      	mov	r8, r2
 8017cf2:	d82d      	bhi.n	8017d50 <__ssputs_r+0x70>
 8017cf4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017cf8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017cfc:	d026      	beq.n	8017d4c <__ssputs_r+0x6c>
 8017cfe:	6965      	ldr	r5, [r4, #20]
 8017d00:	6909      	ldr	r1, [r1, #16]
 8017d02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017d06:	eba3 0901 	sub.w	r9, r3, r1
 8017d0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017d0e:	1c7b      	adds	r3, r7, #1
 8017d10:	444b      	add	r3, r9
 8017d12:	106d      	asrs	r5, r5, #1
 8017d14:	429d      	cmp	r5, r3
 8017d16:	bf38      	it	cc
 8017d18:	461d      	movcc	r5, r3
 8017d1a:	0553      	lsls	r3, r2, #21
 8017d1c:	d527      	bpl.n	8017d6e <__ssputs_r+0x8e>
 8017d1e:	4629      	mov	r1, r5
 8017d20:	f7ff fb36 	bl	8017390 <_malloc_r>
 8017d24:	4606      	mov	r6, r0
 8017d26:	b360      	cbz	r0, 8017d82 <__ssputs_r+0xa2>
 8017d28:	6921      	ldr	r1, [r4, #16]
 8017d2a:	464a      	mov	r2, r9
 8017d2c:	f7ff ff4d 	bl	8017bca <memcpy>
 8017d30:	89a3      	ldrh	r3, [r4, #12]
 8017d32:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017d36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017d3a:	81a3      	strh	r3, [r4, #12]
 8017d3c:	6126      	str	r6, [r4, #16]
 8017d3e:	6165      	str	r5, [r4, #20]
 8017d40:	444e      	add	r6, r9
 8017d42:	eba5 0509 	sub.w	r5, r5, r9
 8017d46:	6026      	str	r6, [r4, #0]
 8017d48:	60a5      	str	r5, [r4, #8]
 8017d4a:	463e      	mov	r6, r7
 8017d4c:	42be      	cmp	r6, r7
 8017d4e:	d900      	bls.n	8017d52 <__ssputs_r+0x72>
 8017d50:	463e      	mov	r6, r7
 8017d52:	6820      	ldr	r0, [r4, #0]
 8017d54:	4632      	mov	r2, r6
 8017d56:	4641      	mov	r1, r8
 8017d58:	f7ff fe54 	bl	8017a04 <memmove>
 8017d5c:	68a3      	ldr	r3, [r4, #8]
 8017d5e:	1b9b      	subs	r3, r3, r6
 8017d60:	60a3      	str	r3, [r4, #8]
 8017d62:	6823      	ldr	r3, [r4, #0]
 8017d64:	4433      	add	r3, r6
 8017d66:	6023      	str	r3, [r4, #0]
 8017d68:	2000      	movs	r0, #0
 8017d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d6e:	462a      	mov	r2, r5
 8017d70:	f7ff fc0e 	bl	8017590 <_realloc_r>
 8017d74:	4606      	mov	r6, r0
 8017d76:	2800      	cmp	r0, #0
 8017d78:	d1e0      	bne.n	8017d3c <__ssputs_r+0x5c>
 8017d7a:	6921      	ldr	r1, [r4, #16]
 8017d7c:	4650      	mov	r0, sl
 8017d7e:	f7ff ff5d 	bl	8017c3c <_free_r>
 8017d82:	230c      	movs	r3, #12
 8017d84:	f8ca 3000 	str.w	r3, [sl]
 8017d88:	89a3      	ldrh	r3, [r4, #12]
 8017d8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017d8e:	81a3      	strh	r3, [r4, #12]
 8017d90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017d94:	e7e9      	b.n	8017d6a <__ssputs_r+0x8a>
	...

08017d98 <_svfiprintf_r>:
 8017d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d9c:	4698      	mov	r8, r3
 8017d9e:	898b      	ldrh	r3, [r1, #12]
 8017da0:	061b      	lsls	r3, r3, #24
 8017da2:	b09d      	sub	sp, #116	@ 0x74
 8017da4:	4607      	mov	r7, r0
 8017da6:	460d      	mov	r5, r1
 8017da8:	4614      	mov	r4, r2
 8017daa:	d510      	bpl.n	8017dce <_svfiprintf_r+0x36>
 8017dac:	690b      	ldr	r3, [r1, #16]
 8017dae:	b973      	cbnz	r3, 8017dce <_svfiprintf_r+0x36>
 8017db0:	2140      	movs	r1, #64	@ 0x40
 8017db2:	f7ff faed 	bl	8017390 <_malloc_r>
 8017db6:	6028      	str	r0, [r5, #0]
 8017db8:	6128      	str	r0, [r5, #16]
 8017dba:	b930      	cbnz	r0, 8017dca <_svfiprintf_r+0x32>
 8017dbc:	230c      	movs	r3, #12
 8017dbe:	603b      	str	r3, [r7, #0]
 8017dc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017dc4:	b01d      	add	sp, #116	@ 0x74
 8017dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dca:	2340      	movs	r3, #64	@ 0x40
 8017dcc:	616b      	str	r3, [r5, #20]
 8017dce:	2300      	movs	r3, #0
 8017dd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8017dd2:	2320      	movs	r3, #32
 8017dd4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017dd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8017ddc:	2330      	movs	r3, #48	@ 0x30
 8017dde:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017f7c <_svfiprintf_r+0x1e4>
 8017de2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017de6:	f04f 0901 	mov.w	r9, #1
 8017dea:	4623      	mov	r3, r4
 8017dec:	469a      	mov	sl, r3
 8017dee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017df2:	b10a      	cbz	r2, 8017df8 <_svfiprintf_r+0x60>
 8017df4:	2a25      	cmp	r2, #37	@ 0x25
 8017df6:	d1f9      	bne.n	8017dec <_svfiprintf_r+0x54>
 8017df8:	ebba 0b04 	subs.w	fp, sl, r4
 8017dfc:	d00b      	beq.n	8017e16 <_svfiprintf_r+0x7e>
 8017dfe:	465b      	mov	r3, fp
 8017e00:	4622      	mov	r2, r4
 8017e02:	4629      	mov	r1, r5
 8017e04:	4638      	mov	r0, r7
 8017e06:	f7ff ff6b 	bl	8017ce0 <__ssputs_r>
 8017e0a:	3001      	adds	r0, #1
 8017e0c:	f000 80a7 	beq.w	8017f5e <_svfiprintf_r+0x1c6>
 8017e10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017e12:	445a      	add	r2, fp
 8017e14:	9209      	str	r2, [sp, #36]	@ 0x24
 8017e16:	f89a 3000 	ldrb.w	r3, [sl]
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	f000 809f 	beq.w	8017f5e <_svfiprintf_r+0x1c6>
 8017e20:	2300      	movs	r3, #0
 8017e22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017e26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017e2a:	f10a 0a01 	add.w	sl, sl, #1
 8017e2e:	9304      	str	r3, [sp, #16]
 8017e30:	9307      	str	r3, [sp, #28]
 8017e32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017e36:	931a      	str	r3, [sp, #104]	@ 0x68
 8017e38:	4654      	mov	r4, sl
 8017e3a:	2205      	movs	r2, #5
 8017e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e40:	484e      	ldr	r0, [pc, #312]	@ (8017f7c <_svfiprintf_r+0x1e4>)
 8017e42:	f7e8 fa05 	bl	8000250 <memchr>
 8017e46:	9a04      	ldr	r2, [sp, #16]
 8017e48:	b9d8      	cbnz	r0, 8017e82 <_svfiprintf_r+0xea>
 8017e4a:	06d0      	lsls	r0, r2, #27
 8017e4c:	bf44      	itt	mi
 8017e4e:	2320      	movmi	r3, #32
 8017e50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017e54:	0711      	lsls	r1, r2, #28
 8017e56:	bf44      	itt	mi
 8017e58:	232b      	movmi	r3, #43	@ 0x2b
 8017e5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017e5e:	f89a 3000 	ldrb.w	r3, [sl]
 8017e62:	2b2a      	cmp	r3, #42	@ 0x2a
 8017e64:	d015      	beq.n	8017e92 <_svfiprintf_r+0xfa>
 8017e66:	9a07      	ldr	r2, [sp, #28]
 8017e68:	4654      	mov	r4, sl
 8017e6a:	2000      	movs	r0, #0
 8017e6c:	f04f 0c0a 	mov.w	ip, #10
 8017e70:	4621      	mov	r1, r4
 8017e72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017e76:	3b30      	subs	r3, #48	@ 0x30
 8017e78:	2b09      	cmp	r3, #9
 8017e7a:	d94b      	bls.n	8017f14 <_svfiprintf_r+0x17c>
 8017e7c:	b1b0      	cbz	r0, 8017eac <_svfiprintf_r+0x114>
 8017e7e:	9207      	str	r2, [sp, #28]
 8017e80:	e014      	b.n	8017eac <_svfiprintf_r+0x114>
 8017e82:	eba0 0308 	sub.w	r3, r0, r8
 8017e86:	fa09 f303 	lsl.w	r3, r9, r3
 8017e8a:	4313      	orrs	r3, r2
 8017e8c:	9304      	str	r3, [sp, #16]
 8017e8e:	46a2      	mov	sl, r4
 8017e90:	e7d2      	b.n	8017e38 <_svfiprintf_r+0xa0>
 8017e92:	9b03      	ldr	r3, [sp, #12]
 8017e94:	1d19      	adds	r1, r3, #4
 8017e96:	681b      	ldr	r3, [r3, #0]
 8017e98:	9103      	str	r1, [sp, #12]
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	bfbb      	ittet	lt
 8017e9e:	425b      	neglt	r3, r3
 8017ea0:	f042 0202 	orrlt.w	r2, r2, #2
 8017ea4:	9307      	strge	r3, [sp, #28]
 8017ea6:	9307      	strlt	r3, [sp, #28]
 8017ea8:	bfb8      	it	lt
 8017eaa:	9204      	strlt	r2, [sp, #16]
 8017eac:	7823      	ldrb	r3, [r4, #0]
 8017eae:	2b2e      	cmp	r3, #46	@ 0x2e
 8017eb0:	d10a      	bne.n	8017ec8 <_svfiprintf_r+0x130>
 8017eb2:	7863      	ldrb	r3, [r4, #1]
 8017eb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8017eb6:	d132      	bne.n	8017f1e <_svfiprintf_r+0x186>
 8017eb8:	9b03      	ldr	r3, [sp, #12]
 8017eba:	1d1a      	adds	r2, r3, #4
 8017ebc:	681b      	ldr	r3, [r3, #0]
 8017ebe:	9203      	str	r2, [sp, #12]
 8017ec0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017ec4:	3402      	adds	r4, #2
 8017ec6:	9305      	str	r3, [sp, #20]
 8017ec8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017f8c <_svfiprintf_r+0x1f4>
 8017ecc:	7821      	ldrb	r1, [r4, #0]
 8017ece:	2203      	movs	r2, #3
 8017ed0:	4650      	mov	r0, sl
 8017ed2:	f7e8 f9bd 	bl	8000250 <memchr>
 8017ed6:	b138      	cbz	r0, 8017ee8 <_svfiprintf_r+0x150>
 8017ed8:	9b04      	ldr	r3, [sp, #16]
 8017eda:	eba0 000a 	sub.w	r0, r0, sl
 8017ede:	2240      	movs	r2, #64	@ 0x40
 8017ee0:	4082      	lsls	r2, r0
 8017ee2:	4313      	orrs	r3, r2
 8017ee4:	3401      	adds	r4, #1
 8017ee6:	9304      	str	r3, [sp, #16]
 8017ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017eec:	4824      	ldr	r0, [pc, #144]	@ (8017f80 <_svfiprintf_r+0x1e8>)
 8017eee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017ef2:	2206      	movs	r2, #6
 8017ef4:	f7e8 f9ac 	bl	8000250 <memchr>
 8017ef8:	2800      	cmp	r0, #0
 8017efa:	d036      	beq.n	8017f6a <_svfiprintf_r+0x1d2>
 8017efc:	4b21      	ldr	r3, [pc, #132]	@ (8017f84 <_svfiprintf_r+0x1ec>)
 8017efe:	bb1b      	cbnz	r3, 8017f48 <_svfiprintf_r+0x1b0>
 8017f00:	9b03      	ldr	r3, [sp, #12]
 8017f02:	3307      	adds	r3, #7
 8017f04:	f023 0307 	bic.w	r3, r3, #7
 8017f08:	3308      	adds	r3, #8
 8017f0a:	9303      	str	r3, [sp, #12]
 8017f0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017f0e:	4433      	add	r3, r6
 8017f10:	9309      	str	r3, [sp, #36]	@ 0x24
 8017f12:	e76a      	b.n	8017dea <_svfiprintf_r+0x52>
 8017f14:	fb0c 3202 	mla	r2, ip, r2, r3
 8017f18:	460c      	mov	r4, r1
 8017f1a:	2001      	movs	r0, #1
 8017f1c:	e7a8      	b.n	8017e70 <_svfiprintf_r+0xd8>
 8017f1e:	2300      	movs	r3, #0
 8017f20:	3401      	adds	r4, #1
 8017f22:	9305      	str	r3, [sp, #20]
 8017f24:	4619      	mov	r1, r3
 8017f26:	f04f 0c0a 	mov.w	ip, #10
 8017f2a:	4620      	mov	r0, r4
 8017f2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017f30:	3a30      	subs	r2, #48	@ 0x30
 8017f32:	2a09      	cmp	r2, #9
 8017f34:	d903      	bls.n	8017f3e <_svfiprintf_r+0x1a6>
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	d0c6      	beq.n	8017ec8 <_svfiprintf_r+0x130>
 8017f3a:	9105      	str	r1, [sp, #20]
 8017f3c:	e7c4      	b.n	8017ec8 <_svfiprintf_r+0x130>
 8017f3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017f42:	4604      	mov	r4, r0
 8017f44:	2301      	movs	r3, #1
 8017f46:	e7f0      	b.n	8017f2a <_svfiprintf_r+0x192>
 8017f48:	ab03      	add	r3, sp, #12
 8017f4a:	9300      	str	r3, [sp, #0]
 8017f4c:	462a      	mov	r2, r5
 8017f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8017f88 <_svfiprintf_r+0x1f0>)
 8017f50:	a904      	add	r1, sp, #16
 8017f52:	4638      	mov	r0, r7
 8017f54:	f3af 8000 	nop.w
 8017f58:	1c42      	adds	r2, r0, #1
 8017f5a:	4606      	mov	r6, r0
 8017f5c:	d1d6      	bne.n	8017f0c <_svfiprintf_r+0x174>
 8017f5e:	89ab      	ldrh	r3, [r5, #12]
 8017f60:	065b      	lsls	r3, r3, #25
 8017f62:	f53f af2d 	bmi.w	8017dc0 <_svfiprintf_r+0x28>
 8017f66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017f68:	e72c      	b.n	8017dc4 <_svfiprintf_r+0x2c>
 8017f6a:	ab03      	add	r3, sp, #12
 8017f6c:	9300      	str	r3, [sp, #0]
 8017f6e:	462a      	mov	r2, r5
 8017f70:	4b05      	ldr	r3, [pc, #20]	@ (8017f88 <_svfiprintf_r+0x1f0>)
 8017f72:	a904      	add	r1, sp, #16
 8017f74:	4638      	mov	r0, r7
 8017f76:	f000 f9bb 	bl	80182f0 <_printf_i>
 8017f7a:	e7ed      	b.n	8017f58 <_svfiprintf_r+0x1c0>
 8017f7c:	080197a4 	.word	0x080197a4
 8017f80:	080197ae 	.word	0x080197ae
 8017f84:	00000000 	.word	0x00000000
 8017f88:	08017ce1 	.word	0x08017ce1
 8017f8c:	080197aa 	.word	0x080197aa

08017f90 <__sfputc_r>:
 8017f90:	6893      	ldr	r3, [r2, #8]
 8017f92:	3b01      	subs	r3, #1
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	b410      	push	{r4}
 8017f98:	6093      	str	r3, [r2, #8]
 8017f9a:	da08      	bge.n	8017fae <__sfputc_r+0x1e>
 8017f9c:	6994      	ldr	r4, [r2, #24]
 8017f9e:	42a3      	cmp	r3, r4
 8017fa0:	db01      	blt.n	8017fa6 <__sfputc_r+0x16>
 8017fa2:	290a      	cmp	r1, #10
 8017fa4:	d103      	bne.n	8017fae <__sfputc_r+0x1e>
 8017fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017faa:	f000 bb7f 	b.w	80186ac <__swbuf_r>
 8017fae:	6813      	ldr	r3, [r2, #0]
 8017fb0:	1c58      	adds	r0, r3, #1
 8017fb2:	6010      	str	r0, [r2, #0]
 8017fb4:	7019      	strb	r1, [r3, #0]
 8017fb6:	4608      	mov	r0, r1
 8017fb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017fbc:	4770      	bx	lr

08017fbe <__sfputs_r>:
 8017fbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fc0:	4606      	mov	r6, r0
 8017fc2:	460f      	mov	r7, r1
 8017fc4:	4614      	mov	r4, r2
 8017fc6:	18d5      	adds	r5, r2, r3
 8017fc8:	42ac      	cmp	r4, r5
 8017fca:	d101      	bne.n	8017fd0 <__sfputs_r+0x12>
 8017fcc:	2000      	movs	r0, #0
 8017fce:	e007      	b.n	8017fe0 <__sfputs_r+0x22>
 8017fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017fd4:	463a      	mov	r2, r7
 8017fd6:	4630      	mov	r0, r6
 8017fd8:	f7ff ffda 	bl	8017f90 <__sfputc_r>
 8017fdc:	1c43      	adds	r3, r0, #1
 8017fde:	d1f3      	bne.n	8017fc8 <__sfputs_r+0xa>
 8017fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017fe4 <_vfiprintf_r>:
 8017fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fe8:	460d      	mov	r5, r1
 8017fea:	b09d      	sub	sp, #116	@ 0x74
 8017fec:	4614      	mov	r4, r2
 8017fee:	4698      	mov	r8, r3
 8017ff0:	4606      	mov	r6, r0
 8017ff2:	b118      	cbz	r0, 8017ffc <_vfiprintf_r+0x18>
 8017ff4:	6a03      	ldr	r3, [r0, #32]
 8017ff6:	b90b      	cbnz	r3, 8017ffc <_vfiprintf_r+0x18>
 8017ff8:	f7ff fbfc 	bl	80177f4 <__sinit>
 8017ffc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017ffe:	07d9      	lsls	r1, r3, #31
 8018000:	d405      	bmi.n	801800e <_vfiprintf_r+0x2a>
 8018002:	89ab      	ldrh	r3, [r5, #12]
 8018004:	059a      	lsls	r2, r3, #22
 8018006:	d402      	bmi.n	801800e <_vfiprintf_r+0x2a>
 8018008:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801800a:	f7ff fdd4 	bl	8017bb6 <__retarget_lock_acquire_recursive>
 801800e:	89ab      	ldrh	r3, [r5, #12]
 8018010:	071b      	lsls	r3, r3, #28
 8018012:	d501      	bpl.n	8018018 <_vfiprintf_r+0x34>
 8018014:	692b      	ldr	r3, [r5, #16]
 8018016:	b99b      	cbnz	r3, 8018040 <_vfiprintf_r+0x5c>
 8018018:	4629      	mov	r1, r5
 801801a:	4630      	mov	r0, r6
 801801c:	f000 fb84 	bl	8018728 <__swsetup_r>
 8018020:	b170      	cbz	r0, 8018040 <_vfiprintf_r+0x5c>
 8018022:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018024:	07dc      	lsls	r4, r3, #31
 8018026:	d504      	bpl.n	8018032 <_vfiprintf_r+0x4e>
 8018028:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801802c:	b01d      	add	sp, #116	@ 0x74
 801802e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018032:	89ab      	ldrh	r3, [r5, #12]
 8018034:	0598      	lsls	r0, r3, #22
 8018036:	d4f7      	bmi.n	8018028 <_vfiprintf_r+0x44>
 8018038:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801803a:	f7ff fdbd 	bl	8017bb8 <__retarget_lock_release_recursive>
 801803e:	e7f3      	b.n	8018028 <_vfiprintf_r+0x44>
 8018040:	2300      	movs	r3, #0
 8018042:	9309      	str	r3, [sp, #36]	@ 0x24
 8018044:	2320      	movs	r3, #32
 8018046:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801804a:	f8cd 800c 	str.w	r8, [sp, #12]
 801804e:	2330      	movs	r3, #48	@ 0x30
 8018050:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018200 <_vfiprintf_r+0x21c>
 8018054:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018058:	f04f 0901 	mov.w	r9, #1
 801805c:	4623      	mov	r3, r4
 801805e:	469a      	mov	sl, r3
 8018060:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018064:	b10a      	cbz	r2, 801806a <_vfiprintf_r+0x86>
 8018066:	2a25      	cmp	r2, #37	@ 0x25
 8018068:	d1f9      	bne.n	801805e <_vfiprintf_r+0x7a>
 801806a:	ebba 0b04 	subs.w	fp, sl, r4
 801806e:	d00b      	beq.n	8018088 <_vfiprintf_r+0xa4>
 8018070:	465b      	mov	r3, fp
 8018072:	4622      	mov	r2, r4
 8018074:	4629      	mov	r1, r5
 8018076:	4630      	mov	r0, r6
 8018078:	f7ff ffa1 	bl	8017fbe <__sfputs_r>
 801807c:	3001      	adds	r0, #1
 801807e:	f000 80a7 	beq.w	80181d0 <_vfiprintf_r+0x1ec>
 8018082:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018084:	445a      	add	r2, fp
 8018086:	9209      	str	r2, [sp, #36]	@ 0x24
 8018088:	f89a 3000 	ldrb.w	r3, [sl]
 801808c:	2b00      	cmp	r3, #0
 801808e:	f000 809f 	beq.w	80181d0 <_vfiprintf_r+0x1ec>
 8018092:	2300      	movs	r3, #0
 8018094:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018098:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801809c:	f10a 0a01 	add.w	sl, sl, #1
 80180a0:	9304      	str	r3, [sp, #16]
 80180a2:	9307      	str	r3, [sp, #28]
 80180a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80180a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80180aa:	4654      	mov	r4, sl
 80180ac:	2205      	movs	r2, #5
 80180ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80180b2:	4853      	ldr	r0, [pc, #332]	@ (8018200 <_vfiprintf_r+0x21c>)
 80180b4:	f7e8 f8cc 	bl	8000250 <memchr>
 80180b8:	9a04      	ldr	r2, [sp, #16]
 80180ba:	b9d8      	cbnz	r0, 80180f4 <_vfiprintf_r+0x110>
 80180bc:	06d1      	lsls	r1, r2, #27
 80180be:	bf44      	itt	mi
 80180c0:	2320      	movmi	r3, #32
 80180c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80180c6:	0713      	lsls	r3, r2, #28
 80180c8:	bf44      	itt	mi
 80180ca:	232b      	movmi	r3, #43	@ 0x2b
 80180cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80180d0:	f89a 3000 	ldrb.w	r3, [sl]
 80180d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80180d6:	d015      	beq.n	8018104 <_vfiprintf_r+0x120>
 80180d8:	9a07      	ldr	r2, [sp, #28]
 80180da:	4654      	mov	r4, sl
 80180dc:	2000      	movs	r0, #0
 80180de:	f04f 0c0a 	mov.w	ip, #10
 80180e2:	4621      	mov	r1, r4
 80180e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80180e8:	3b30      	subs	r3, #48	@ 0x30
 80180ea:	2b09      	cmp	r3, #9
 80180ec:	d94b      	bls.n	8018186 <_vfiprintf_r+0x1a2>
 80180ee:	b1b0      	cbz	r0, 801811e <_vfiprintf_r+0x13a>
 80180f0:	9207      	str	r2, [sp, #28]
 80180f2:	e014      	b.n	801811e <_vfiprintf_r+0x13a>
 80180f4:	eba0 0308 	sub.w	r3, r0, r8
 80180f8:	fa09 f303 	lsl.w	r3, r9, r3
 80180fc:	4313      	orrs	r3, r2
 80180fe:	9304      	str	r3, [sp, #16]
 8018100:	46a2      	mov	sl, r4
 8018102:	e7d2      	b.n	80180aa <_vfiprintf_r+0xc6>
 8018104:	9b03      	ldr	r3, [sp, #12]
 8018106:	1d19      	adds	r1, r3, #4
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	9103      	str	r1, [sp, #12]
 801810c:	2b00      	cmp	r3, #0
 801810e:	bfbb      	ittet	lt
 8018110:	425b      	neglt	r3, r3
 8018112:	f042 0202 	orrlt.w	r2, r2, #2
 8018116:	9307      	strge	r3, [sp, #28]
 8018118:	9307      	strlt	r3, [sp, #28]
 801811a:	bfb8      	it	lt
 801811c:	9204      	strlt	r2, [sp, #16]
 801811e:	7823      	ldrb	r3, [r4, #0]
 8018120:	2b2e      	cmp	r3, #46	@ 0x2e
 8018122:	d10a      	bne.n	801813a <_vfiprintf_r+0x156>
 8018124:	7863      	ldrb	r3, [r4, #1]
 8018126:	2b2a      	cmp	r3, #42	@ 0x2a
 8018128:	d132      	bne.n	8018190 <_vfiprintf_r+0x1ac>
 801812a:	9b03      	ldr	r3, [sp, #12]
 801812c:	1d1a      	adds	r2, r3, #4
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	9203      	str	r2, [sp, #12]
 8018132:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018136:	3402      	adds	r4, #2
 8018138:	9305      	str	r3, [sp, #20]
 801813a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018210 <_vfiprintf_r+0x22c>
 801813e:	7821      	ldrb	r1, [r4, #0]
 8018140:	2203      	movs	r2, #3
 8018142:	4650      	mov	r0, sl
 8018144:	f7e8 f884 	bl	8000250 <memchr>
 8018148:	b138      	cbz	r0, 801815a <_vfiprintf_r+0x176>
 801814a:	9b04      	ldr	r3, [sp, #16]
 801814c:	eba0 000a 	sub.w	r0, r0, sl
 8018150:	2240      	movs	r2, #64	@ 0x40
 8018152:	4082      	lsls	r2, r0
 8018154:	4313      	orrs	r3, r2
 8018156:	3401      	adds	r4, #1
 8018158:	9304      	str	r3, [sp, #16]
 801815a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801815e:	4829      	ldr	r0, [pc, #164]	@ (8018204 <_vfiprintf_r+0x220>)
 8018160:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018164:	2206      	movs	r2, #6
 8018166:	f7e8 f873 	bl	8000250 <memchr>
 801816a:	2800      	cmp	r0, #0
 801816c:	d03f      	beq.n	80181ee <_vfiprintf_r+0x20a>
 801816e:	4b26      	ldr	r3, [pc, #152]	@ (8018208 <_vfiprintf_r+0x224>)
 8018170:	bb1b      	cbnz	r3, 80181ba <_vfiprintf_r+0x1d6>
 8018172:	9b03      	ldr	r3, [sp, #12]
 8018174:	3307      	adds	r3, #7
 8018176:	f023 0307 	bic.w	r3, r3, #7
 801817a:	3308      	adds	r3, #8
 801817c:	9303      	str	r3, [sp, #12]
 801817e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018180:	443b      	add	r3, r7
 8018182:	9309      	str	r3, [sp, #36]	@ 0x24
 8018184:	e76a      	b.n	801805c <_vfiprintf_r+0x78>
 8018186:	fb0c 3202 	mla	r2, ip, r2, r3
 801818a:	460c      	mov	r4, r1
 801818c:	2001      	movs	r0, #1
 801818e:	e7a8      	b.n	80180e2 <_vfiprintf_r+0xfe>
 8018190:	2300      	movs	r3, #0
 8018192:	3401      	adds	r4, #1
 8018194:	9305      	str	r3, [sp, #20]
 8018196:	4619      	mov	r1, r3
 8018198:	f04f 0c0a 	mov.w	ip, #10
 801819c:	4620      	mov	r0, r4
 801819e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80181a2:	3a30      	subs	r2, #48	@ 0x30
 80181a4:	2a09      	cmp	r2, #9
 80181a6:	d903      	bls.n	80181b0 <_vfiprintf_r+0x1cc>
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d0c6      	beq.n	801813a <_vfiprintf_r+0x156>
 80181ac:	9105      	str	r1, [sp, #20]
 80181ae:	e7c4      	b.n	801813a <_vfiprintf_r+0x156>
 80181b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80181b4:	4604      	mov	r4, r0
 80181b6:	2301      	movs	r3, #1
 80181b8:	e7f0      	b.n	801819c <_vfiprintf_r+0x1b8>
 80181ba:	ab03      	add	r3, sp, #12
 80181bc:	9300      	str	r3, [sp, #0]
 80181be:	462a      	mov	r2, r5
 80181c0:	4b12      	ldr	r3, [pc, #72]	@ (801820c <_vfiprintf_r+0x228>)
 80181c2:	a904      	add	r1, sp, #16
 80181c4:	4630      	mov	r0, r6
 80181c6:	f3af 8000 	nop.w
 80181ca:	4607      	mov	r7, r0
 80181cc:	1c78      	adds	r0, r7, #1
 80181ce:	d1d6      	bne.n	801817e <_vfiprintf_r+0x19a>
 80181d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80181d2:	07d9      	lsls	r1, r3, #31
 80181d4:	d405      	bmi.n	80181e2 <_vfiprintf_r+0x1fe>
 80181d6:	89ab      	ldrh	r3, [r5, #12]
 80181d8:	059a      	lsls	r2, r3, #22
 80181da:	d402      	bmi.n	80181e2 <_vfiprintf_r+0x1fe>
 80181dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80181de:	f7ff fceb 	bl	8017bb8 <__retarget_lock_release_recursive>
 80181e2:	89ab      	ldrh	r3, [r5, #12]
 80181e4:	065b      	lsls	r3, r3, #25
 80181e6:	f53f af1f 	bmi.w	8018028 <_vfiprintf_r+0x44>
 80181ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80181ec:	e71e      	b.n	801802c <_vfiprintf_r+0x48>
 80181ee:	ab03      	add	r3, sp, #12
 80181f0:	9300      	str	r3, [sp, #0]
 80181f2:	462a      	mov	r2, r5
 80181f4:	4b05      	ldr	r3, [pc, #20]	@ (801820c <_vfiprintf_r+0x228>)
 80181f6:	a904      	add	r1, sp, #16
 80181f8:	4630      	mov	r0, r6
 80181fa:	f000 f879 	bl	80182f0 <_printf_i>
 80181fe:	e7e4      	b.n	80181ca <_vfiprintf_r+0x1e6>
 8018200:	080197a4 	.word	0x080197a4
 8018204:	080197ae 	.word	0x080197ae
 8018208:	00000000 	.word	0x00000000
 801820c:	08017fbf 	.word	0x08017fbf
 8018210:	080197aa 	.word	0x080197aa

08018214 <_printf_common>:
 8018214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018218:	4616      	mov	r6, r2
 801821a:	4698      	mov	r8, r3
 801821c:	688a      	ldr	r2, [r1, #8]
 801821e:	690b      	ldr	r3, [r1, #16]
 8018220:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018224:	4293      	cmp	r3, r2
 8018226:	bfb8      	it	lt
 8018228:	4613      	movlt	r3, r2
 801822a:	6033      	str	r3, [r6, #0]
 801822c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018230:	4607      	mov	r7, r0
 8018232:	460c      	mov	r4, r1
 8018234:	b10a      	cbz	r2, 801823a <_printf_common+0x26>
 8018236:	3301      	adds	r3, #1
 8018238:	6033      	str	r3, [r6, #0]
 801823a:	6823      	ldr	r3, [r4, #0]
 801823c:	0699      	lsls	r1, r3, #26
 801823e:	bf42      	ittt	mi
 8018240:	6833      	ldrmi	r3, [r6, #0]
 8018242:	3302      	addmi	r3, #2
 8018244:	6033      	strmi	r3, [r6, #0]
 8018246:	6825      	ldr	r5, [r4, #0]
 8018248:	f015 0506 	ands.w	r5, r5, #6
 801824c:	d106      	bne.n	801825c <_printf_common+0x48>
 801824e:	f104 0a19 	add.w	sl, r4, #25
 8018252:	68e3      	ldr	r3, [r4, #12]
 8018254:	6832      	ldr	r2, [r6, #0]
 8018256:	1a9b      	subs	r3, r3, r2
 8018258:	42ab      	cmp	r3, r5
 801825a:	dc26      	bgt.n	80182aa <_printf_common+0x96>
 801825c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018260:	6822      	ldr	r2, [r4, #0]
 8018262:	3b00      	subs	r3, #0
 8018264:	bf18      	it	ne
 8018266:	2301      	movne	r3, #1
 8018268:	0692      	lsls	r2, r2, #26
 801826a:	d42b      	bmi.n	80182c4 <_printf_common+0xb0>
 801826c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018270:	4641      	mov	r1, r8
 8018272:	4638      	mov	r0, r7
 8018274:	47c8      	blx	r9
 8018276:	3001      	adds	r0, #1
 8018278:	d01e      	beq.n	80182b8 <_printf_common+0xa4>
 801827a:	6823      	ldr	r3, [r4, #0]
 801827c:	6922      	ldr	r2, [r4, #16]
 801827e:	f003 0306 	and.w	r3, r3, #6
 8018282:	2b04      	cmp	r3, #4
 8018284:	bf02      	ittt	eq
 8018286:	68e5      	ldreq	r5, [r4, #12]
 8018288:	6833      	ldreq	r3, [r6, #0]
 801828a:	1aed      	subeq	r5, r5, r3
 801828c:	68a3      	ldr	r3, [r4, #8]
 801828e:	bf0c      	ite	eq
 8018290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018294:	2500      	movne	r5, #0
 8018296:	4293      	cmp	r3, r2
 8018298:	bfc4      	itt	gt
 801829a:	1a9b      	subgt	r3, r3, r2
 801829c:	18ed      	addgt	r5, r5, r3
 801829e:	2600      	movs	r6, #0
 80182a0:	341a      	adds	r4, #26
 80182a2:	42b5      	cmp	r5, r6
 80182a4:	d11a      	bne.n	80182dc <_printf_common+0xc8>
 80182a6:	2000      	movs	r0, #0
 80182a8:	e008      	b.n	80182bc <_printf_common+0xa8>
 80182aa:	2301      	movs	r3, #1
 80182ac:	4652      	mov	r2, sl
 80182ae:	4641      	mov	r1, r8
 80182b0:	4638      	mov	r0, r7
 80182b2:	47c8      	blx	r9
 80182b4:	3001      	adds	r0, #1
 80182b6:	d103      	bne.n	80182c0 <_printf_common+0xac>
 80182b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80182bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182c0:	3501      	adds	r5, #1
 80182c2:	e7c6      	b.n	8018252 <_printf_common+0x3e>
 80182c4:	18e1      	adds	r1, r4, r3
 80182c6:	1c5a      	adds	r2, r3, #1
 80182c8:	2030      	movs	r0, #48	@ 0x30
 80182ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80182ce:	4422      	add	r2, r4
 80182d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80182d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80182d8:	3302      	adds	r3, #2
 80182da:	e7c7      	b.n	801826c <_printf_common+0x58>
 80182dc:	2301      	movs	r3, #1
 80182de:	4622      	mov	r2, r4
 80182e0:	4641      	mov	r1, r8
 80182e2:	4638      	mov	r0, r7
 80182e4:	47c8      	blx	r9
 80182e6:	3001      	adds	r0, #1
 80182e8:	d0e6      	beq.n	80182b8 <_printf_common+0xa4>
 80182ea:	3601      	adds	r6, #1
 80182ec:	e7d9      	b.n	80182a2 <_printf_common+0x8e>
	...

080182f0 <_printf_i>:
 80182f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80182f4:	7e0f      	ldrb	r7, [r1, #24]
 80182f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80182f8:	2f78      	cmp	r7, #120	@ 0x78
 80182fa:	4691      	mov	r9, r2
 80182fc:	4680      	mov	r8, r0
 80182fe:	460c      	mov	r4, r1
 8018300:	469a      	mov	sl, r3
 8018302:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018306:	d807      	bhi.n	8018318 <_printf_i+0x28>
 8018308:	2f62      	cmp	r7, #98	@ 0x62
 801830a:	d80a      	bhi.n	8018322 <_printf_i+0x32>
 801830c:	2f00      	cmp	r7, #0
 801830e:	f000 80d2 	beq.w	80184b6 <_printf_i+0x1c6>
 8018312:	2f58      	cmp	r7, #88	@ 0x58
 8018314:	f000 80b9 	beq.w	801848a <_printf_i+0x19a>
 8018318:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801831c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018320:	e03a      	b.n	8018398 <_printf_i+0xa8>
 8018322:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018326:	2b15      	cmp	r3, #21
 8018328:	d8f6      	bhi.n	8018318 <_printf_i+0x28>
 801832a:	a101      	add	r1, pc, #4	@ (adr r1, 8018330 <_printf_i+0x40>)
 801832c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018330:	08018389 	.word	0x08018389
 8018334:	0801839d 	.word	0x0801839d
 8018338:	08018319 	.word	0x08018319
 801833c:	08018319 	.word	0x08018319
 8018340:	08018319 	.word	0x08018319
 8018344:	08018319 	.word	0x08018319
 8018348:	0801839d 	.word	0x0801839d
 801834c:	08018319 	.word	0x08018319
 8018350:	08018319 	.word	0x08018319
 8018354:	08018319 	.word	0x08018319
 8018358:	08018319 	.word	0x08018319
 801835c:	0801849d 	.word	0x0801849d
 8018360:	080183c7 	.word	0x080183c7
 8018364:	08018457 	.word	0x08018457
 8018368:	08018319 	.word	0x08018319
 801836c:	08018319 	.word	0x08018319
 8018370:	080184bf 	.word	0x080184bf
 8018374:	08018319 	.word	0x08018319
 8018378:	080183c7 	.word	0x080183c7
 801837c:	08018319 	.word	0x08018319
 8018380:	08018319 	.word	0x08018319
 8018384:	0801845f 	.word	0x0801845f
 8018388:	6833      	ldr	r3, [r6, #0]
 801838a:	1d1a      	adds	r2, r3, #4
 801838c:	681b      	ldr	r3, [r3, #0]
 801838e:	6032      	str	r2, [r6, #0]
 8018390:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018394:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018398:	2301      	movs	r3, #1
 801839a:	e09d      	b.n	80184d8 <_printf_i+0x1e8>
 801839c:	6833      	ldr	r3, [r6, #0]
 801839e:	6820      	ldr	r0, [r4, #0]
 80183a0:	1d19      	adds	r1, r3, #4
 80183a2:	6031      	str	r1, [r6, #0]
 80183a4:	0606      	lsls	r6, r0, #24
 80183a6:	d501      	bpl.n	80183ac <_printf_i+0xbc>
 80183a8:	681d      	ldr	r5, [r3, #0]
 80183aa:	e003      	b.n	80183b4 <_printf_i+0xc4>
 80183ac:	0645      	lsls	r5, r0, #25
 80183ae:	d5fb      	bpl.n	80183a8 <_printf_i+0xb8>
 80183b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80183b4:	2d00      	cmp	r5, #0
 80183b6:	da03      	bge.n	80183c0 <_printf_i+0xd0>
 80183b8:	232d      	movs	r3, #45	@ 0x2d
 80183ba:	426d      	negs	r5, r5
 80183bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80183c0:	4859      	ldr	r0, [pc, #356]	@ (8018528 <_printf_i+0x238>)
 80183c2:	230a      	movs	r3, #10
 80183c4:	e011      	b.n	80183ea <_printf_i+0xfa>
 80183c6:	6821      	ldr	r1, [r4, #0]
 80183c8:	6833      	ldr	r3, [r6, #0]
 80183ca:	0608      	lsls	r0, r1, #24
 80183cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80183d0:	d402      	bmi.n	80183d8 <_printf_i+0xe8>
 80183d2:	0649      	lsls	r1, r1, #25
 80183d4:	bf48      	it	mi
 80183d6:	b2ad      	uxthmi	r5, r5
 80183d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80183da:	4853      	ldr	r0, [pc, #332]	@ (8018528 <_printf_i+0x238>)
 80183dc:	6033      	str	r3, [r6, #0]
 80183de:	bf14      	ite	ne
 80183e0:	230a      	movne	r3, #10
 80183e2:	2308      	moveq	r3, #8
 80183e4:	2100      	movs	r1, #0
 80183e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80183ea:	6866      	ldr	r6, [r4, #4]
 80183ec:	60a6      	str	r6, [r4, #8]
 80183ee:	2e00      	cmp	r6, #0
 80183f0:	bfa2      	ittt	ge
 80183f2:	6821      	ldrge	r1, [r4, #0]
 80183f4:	f021 0104 	bicge.w	r1, r1, #4
 80183f8:	6021      	strge	r1, [r4, #0]
 80183fa:	b90d      	cbnz	r5, 8018400 <_printf_i+0x110>
 80183fc:	2e00      	cmp	r6, #0
 80183fe:	d04b      	beq.n	8018498 <_printf_i+0x1a8>
 8018400:	4616      	mov	r6, r2
 8018402:	fbb5 f1f3 	udiv	r1, r5, r3
 8018406:	fb03 5711 	mls	r7, r3, r1, r5
 801840a:	5dc7      	ldrb	r7, [r0, r7]
 801840c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018410:	462f      	mov	r7, r5
 8018412:	42bb      	cmp	r3, r7
 8018414:	460d      	mov	r5, r1
 8018416:	d9f4      	bls.n	8018402 <_printf_i+0x112>
 8018418:	2b08      	cmp	r3, #8
 801841a:	d10b      	bne.n	8018434 <_printf_i+0x144>
 801841c:	6823      	ldr	r3, [r4, #0]
 801841e:	07df      	lsls	r7, r3, #31
 8018420:	d508      	bpl.n	8018434 <_printf_i+0x144>
 8018422:	6923      	ldr	r3, [r4, #16]
 8018424:	6861      	ldr	r1, [r4, #4]
 8018426:	4299      	cmp	r1, r3
 8018428:	bfde      	ittt	le
 801842a:	2330      	movle	r3, #48	@ 0x30
 801842c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018430:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8018434:	1b92      	subs	r2, r2, r6
 8018436:	6122      	str	r2, [r4, #16]
 8018438:	f8cd a000 	str.w	sl, [sp]
 801843c:	464b      	mov	r3, r9
 801843e:	aa03      	add	r2, sp, #12
 8018440:	4621      	mov	r1, r4
 8018442:	4640      	mov	r0, r8
 8018444:	f7ff fee6 	bl	8018214 <_printf_common>
 8018448:	3001      	adds	r0, #1
 801844a:	d14a      	bne.n	80184e2 <_printf_i+0x1f2>
 801844c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018450:	b004      	add	sp, #16
 8018452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018456:	6823      	ldr	r3, [r4, #0]
 8018458:	f043 0320 	orr.w	r3, r3, #32
 801845c:	6023      	str	r3, [r4, #0]
 801845e:	4833      	ldr	r0, [pc, #204]	@ (801852c <_printf_i+0x23c>)
 8018460:	2778      	movs	r7, #120	@ 0x78
 8018462:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018466:	6823      	ldr	r3, [r4, #0]
 8018468:	6831      	ldr	r1, [r6, #0]
 801846a:	061f      	lsls	r7, r3, #24
 801846c:	f851 5b04 	ldr.w	r5, [r1], #4
 8018470:	d402      	bmi.n	8018478 <_printf_i+0x188>
 8018472:	065f      	lsls	r7, r3, #25
 8018474:	bf48      	it	mi
 8018476:	b2ad      	uxthmi	r5, r5
 8018478:	6031      	str	r1, [r6, #0]
 801847a:	07d9      	lsls	r1, r3, #31
 801847c:	bf44      	itt	mi
 801847e:	f043 0320 	orrmi.w	r3, r3, #32
 8018482:	6023      	strmi	r3, [r4, #0]
 8018484:	b11d      	cbz	r5, 801848e <_printf_i+0x19e>
 8018486:	2310      	movs	r3, #16
 8018488:	e7ac      	b.n	80183e4 <_printf_i+0xf4>
 801848a:	4827      	ldr	r0, [pc, #156]	@ (8018528 <_printf_i+0x238>)
 801848c:	e7e9      	b.n	8018462 <_printf_i+0x172>
 801848e:	6823      	ldr	r3, [r4, #0]
 8018490:	f023 0320 	bic.w	r3, r3, #32
 8018494:	6023      	str	r3, [r4, #0]
 8018496:	e7f6      	b.n	8018486 <_printf_i+0x196>
 8018498:	4616      	mov	r6, r2
 801849a:	e7bd      	b.n	8018418 <_printf_i+0x128>
 801849c:	6833      	ldr	r3, [r6, #0]
 801849e:	6825      	ldr	r5, [r4, #0]
 80184a0:	6961      	ldr	r1, [r4, #20]
 80184a2:	1d18      	adds	r0, r3, #4
 80184a4:	6030      	str	r0, [r6, #0]
 80184a6:	062e      	lsls	r6, r5, #24
 80184a8:	681b      	ldr	r3, [r3, #0]
 80184aa:	d501      	bpl.n	80184b0 <_printf_i+0x1c0>
 80184ac:	6019      	str	r1, [r3, #0]
 80184ae:	e002      	b.n	80184b6 <_printf_i+0x1c6>
 80184b0:	0668      	lsls	r0, r5, #25
 80184b2:	d5fb      	bpl.n	80184ac <_printf_i+0x1bc>
 80184b4:	8019      	strh	r1, [r3, #0]
 80184b6:	2300      	movs	r3, #0
 80184b8:	6123      	str	r3, [r4, #16]
 80184ba:	4616      	mov	r6, r2
 80184bc:	e7bc      	b.n	8018438 <_printf_i+0x148>
 80184be:	6833      	ldr	r3, [r6, #0]
 80184c0:	1d1a      	adds	r2, r3, #4
 80184c2:	6032      	str	r2, [r6, #0]
 80184c4:	681e      	ldr	r6, [r3, #0]
 80184c6:	6862      	ldr	r2, [r4, #4]
 80184c8:	2100      	movs	r1, #0
 80184ca:	4630      	mov	r0, r6
 80184cc:	f7e7 fec0 	bl	8000250 <memchr>
 80184d0:	b108      	cbz	r0, 80184d6 <_printf_i+0x1e6>
 80184d2:	1b80      	subs	r0, r0, r6
 80184d4:	6060      	str	r0, [r4, #4]
 80184d6:	6863      	ldr	r3, [r4, #4]
 80184d8:	6123      	str	r3, [r4, #16]
 80184da:	2300      	movs	r3, #0
 80184dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80184e0:	e7aa      	b.n	8018438 <_printf_i+0x148>
 80184e2:	6923      	ldr	r3, [r4, #16]
 80184e4:	4632      	mov	r2, r6
 80184e6:	4649      	mov	r1, r9
 80184e8:	4640      	mov	r0, r8
 80184ea:	47d0      	blx	sl
 80184ec:	3001      	adds	r0, #1
 80184ee:	d0ad      	beq.n	801844c <_printf_i+0x15c>
 80184f0:	6823      	ldr	r3, [r4, #0]
 80184f2:	079b      	lsls	r3, r3, #30
 80184f4:	d413      	bmi.n	801851e <_printf_i+0x22e>
 80184f6:	68e0      	ldr	r0, [r4, #12]
 80184f8:	9b03      	ldr	r3, [sp, #12]
 80184fa:	4298      	cmp	r0, r3
 80184fc:	bfb8      	it	lt
 80184fe:	4618      	movlt	r0, r3
 8018500:	e7a6      	b.n	8018450 <_printf_i+0x160>
 8018502:	2301      	movs	r3, #1
 8018504:	4632      	mov	r2, r6
 8018506:	4649      	mov	r1, r9
 8018508:	4640      	mov	r0, r8
 801850a:	47d0      	blx	sl
 801850c:	3001      	adds	r0, #1
 801850e:	d09d      	beq.n	801844c <_printf_i+0x15c>
 8018510:	3501      	adds	r5, #1
 8018512:	68e3      	ldr	r3, [r4, #12]
 8018514:	9903      	ldr	r1, [sp, #12]
 8018516:	1a5b      	subs	r3, r3, r1
 8018518:	42ab      	cmp	r3, r5
 801851a:	dcf2      	bgt.n	8018502 <_printf_i+0x212>
 801851c:	e7eb      	b.n	80184f6 <_printf_i+0x206>
 801851e:	2500      	movs	r5, #0
 8018520:	f104 0619 	add.w	r6, r4, #25
 8018524:	e7f5      	b.n	8018512 <_printf_i+0x222>
 8018526:	bf00      	nop
 8018528:	080197b5 	.word	0x080197b5
 801852c:	080197c6 	.word	0x080197c6

08018530 <__sflush_r>:
 8018530:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018538:	0716      	lsls	r6, r2, #28
 801853a:	4605      	mov	r5, r0
 801853c:	460c      	mov	r4, r1
 801853e:	d454      	bmi.n	80185ea <__sflush_r+0xba>
 8018540:	684b      	ldr	r3, [r1, #4]
 8018542:	2b00      	cmp	r3, #0
 8018544:	dc02      	bgt.n	801854c <__sflush_r+0x1c>
 8018546:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018548:	2b00      	cmp	r3, #0
 801854a:	dd48      	ble.n	80185de <__sflush_r+0xae>
 801854c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801854e:	2e00      	cmp	r6, #0
 8018550:	d045      	beq.n	80185de <__sflush_r+0xae>
 8018552:	2300      	movs	r3, #0
 8018554:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018558:	682f      	ldr	r7, [r5, #0]
 801855a:	6a21      	ldr	r1, [r4, #32]
 801855c:	602b      	str	r3, [r5, #0]
 801855e:	d030      	beq.n	80185c2 <__sflush_r+0x92>
 8018560:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018562:	89a3      	ldrh	r3, [r4, #12]
 8018564:	0759      	lsls	r1, r3, #29
 8018566:	d505      	bpl.n	8018574 <__sflush_r+0x44>
 8018568:	6863      	ldr	r3, [r4, #4]
 801856a:	1ad2      	subs	r2, r2, r3
 801856c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801856e:	b10b      	cbz	r3, 8018574 <__sflush_r+0x44>
 8018570:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018572:	1ad2      	subs	r2, r2, r3
 8018574:	2300      	movs	r3, #0
 8018576:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018578:	6a21      	ldr	r1, [r4, #32]
 801857a:	4628      	mov	r0, r5
 801857c:	47b0      	blx	r6
 801857e:	1c43      	adds	r3, r0, #1
 8018580:	89a3      	ldrh	r3, [r4, #12]
 8018582:	d106      	bne.n	8018592 <__sflush_r+0x62>
 8018584:	6829      	ldr	r1, [r5, #0]
 8018586:	291d      	cmp	r1, #29
 8018588:	d82b      	bhi.n	80185e2 <__sflush_r+0xb2>
 801858a:	4a2a      	ldr	r2, [pc, #168]	@ (8018634 <__sflush_r+0x104>)
 801858c:	410a      	asrs	r2, r1
 801858e:	07d6      	lsls	r6, r2, #31
 8018590:	d427      	bmi.n	80185e2 <__sflush_r+0xb2>
 8018592:	2200      	movs	r2, #0
 8018594:	6062      	str	r2, [r4, #4]
 8018596:	04d9      	lsls	r1, r3, #19
 8018598:	6922      	ldr	r2, [r4, #16]
 801859a:	6022      	str	r2, [r4, #0]
 801859c:	d504      	bpl.n	80185a8 <__sflush_r+0x78>
 801859e:	1c42      	adds	r2, r0, #1
 80185a0:	d101      	bne.n	80185a6 <__sflush_r+0x76>
 80185a2:	682b      	ldr	r3, [r5, #0]
 80185a4:	b903      	cbnz	r3, 80185a8 <__sflush_r+0x78>
 80185a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80185a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80185aa:	602f      	str	r7, [r5, #0]
 80185ac:	b1b9      	cbz	r1, 80185de <__sflush_r+0xae>
 80185ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80185b2:	4299      	cmp	r1, r3
 80185b4:	d002      	beq.n	80185bc <__sflush_r+0x8c>
 80185b6:	4628      	mov	r0, r5
 80185b8:	f7ff fb40 	bl	8017c3c <_free_r>
 80185bc:	2300      	movs	r3, #0
 80185be:	6363      	str	r3, [r4, #52]	@ 0x34
 80185c0:	e00d      	b.n	80185de <__sflush_r+0xae>
 80185c2:	2301      	movs	r3, #1
 80185c4:	4628      	mov	r0, r5
 80185c6:	47b0      	blx	r6
 80185c8:	4602      	mov	r2, r0
 80185ca:	1c50      	adds	r0, r2, #1
 80185cc:	d1c9      	bne.n	8018562 <__sflush_r+0x32>
 80185ce:	682b      	ldr	r3, [r5, #0]
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	d0c6      	beq.n	8018562 <__sflush_r+0x32>
 80185d4:	2b1d      	cmp	r3, #29
 80185d6:	d001      	beq.n	80185dc <__sflush_r+0xac>
 80185d8:	2b16      	cmp	r3, #22
 80185da:	d11e      	bne.n	801861a <__sflush_r+0xea>
 80185dc:	602f      	str	r7, [r5, #0]
 80185de:	2000      	movs	r0, #0
 80185e0:	e022      	b.n	8018628 <__sflush_r+0xf8>
 80185e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80185e6:	b21b      	sxth	r3, r3
 80185e8:	e01b      	b.n	8018622 <__sflush_r+0xf2>
 80185ea:	690f      	ldr	r7, [r1, #16]
 80185ec:	2f00      	cmp	r7, #0
 80185ee:	d0f6      	beq.n	80185de <__sflush_r+0xae>
 80185f0:	0793      	lsls	r3, r2, #30
 80185f2:	680e      	ldr	r6, [r1, #0]
 80185f4:	bf08      	it	eq
 80185f6:	694b      	ldreq	r3, [r1, #20]
 80185f8:	600f      	str	r7, [r1, #0]
 80185fa:	bf18      	it	ne
 80185fc:	2300      	movne	r3, #0
 80185fe:	eba6 0807 	sub.w	r8, r6, r7
 8018602:	608b      	str	r3, [r1, #8]
 8018604:	f1b8 0f00 	cmp.w	r8, #0
 8018608:	dde9      	ble.n	80185de <__sflush_r+0xae>
 801860a:	6a21      	ldr	r1, [r4, #32]
 801860c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801860e:	4643      	mov	r3, r8
 8018610:	463a      	mov	r2, r7
 8018612:	4628      	mov	r0, r5
 8018614:	47b0      	blx	r6
 8018616:	2800      	cmp	r0, #0
 8018618:	dc08      	bgt.n	801862c <__sflush_r+0xfc>
 801861a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801861e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018622:	81a3      	strh	r3, [r4, #12]
 8018624:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801862c:	4407      	add	r7, r0
 801862e:	eba8 0800 	sub.w	r8, r8, r0
 8018632:	e7e7      	b.n	8018604 <__sflush_r+0xd4>
 8018634:	dfbffffe 	.word	0xdfbffffe

08018638 <_fflush_r>:
 8018638:	b538      	push	{r3, r4, r5, lr}
 801863a:	690b      	ldr	r3, [r1, #16]
 801863c:	4605      	mov	r5, r0
 801863e:	460c      	mov	r4, r1
 8018640:	b913      	cbnz	r3, 8018648 <_fflush_r+0x10>
 8018642:	2500      	movs	r5, #0
 8018644:	4628      	mov	r0, r5
 8018646:	bd38      	pop	{r3, r4, r5, pc}
 8018648:	b118      	cbz	r0, 8018652 <_fflush_r+0x1a>
 801864a:	6a03      	ldr	r3, [r0, #32]
 801864c:	b90b      	cbnz	r3, 8018652 <_fflush_r+0x1a>
 801864e:	f7ff f8d1 	bl	80177f4 <__sinit>
 8018652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018656:	2b00      	cmp	r3, #0
 8018658:	d0f3      	beq.n	8018642 <_fflush_r+0xa>
 801865a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801865c:	07d0      	lsls	r0, r2, #31
 801865e:	d404      	bmi.n	801866a <_fflush_r+0x32>
 8018660:	0599      	lsls	r1, r3, #22
 8018662:	d402      	bmi.n	801866a <_fflush_r+0x32>
 8018664:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018666:	f7ff faa6 	bl	8017bb6 <__retarget_lock_acquire_recursive>
 801866a:	4628      	mov	r0, r5
 801866c:	4621      	mov	r1, r4
 801866e:	f7ff ff5f 	bl	8018530 <__sflush_r>
 8018672:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018674:	07da      	lsls	r2, r3, #31
 8018676:	4605      	mov	r5, r0
 8018678:	d4e4      	bmi.n	8018644 <_fflush_r+0xc>
 801867a:	89a3      	ldrh	r3, [r4, #12]
 801867c:	059b      	lsls	r3, r3, #22
 801867e:	d4e1      	bmi.n	8018644 <_fflush_r+0xc>
 8018680:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018682:	f7ff fa99 	bl	8017bb8 <__retarget_lock_release_recursive>
 8018686:	e7dd      	b.n	8018644 <_fflush_r+0xc>

08018688 <fiprintf>:
 8018688:	b40e      	push	{r1, r2, r3}
 801868a:	b503      	push	{r0, r1, lr}
 801868c:	4601      	mov	r1, r0
 801868e:	ab03      	add	r3, sp, #12
 8018690:	4805      	ldr	r0, [pc, #20]	@ (80186a8 <fiprintf+0x20>)
 8018692:	f853 2b04 	ldr.w	r2, [r3], #4
 8018696:	6800      	ldr	r0, [r0, #0]
 8018698:	9301      	str	r3, [sp, #4]
 801869a:	f7ff fca3 	bl	8017fe4 <_vfiprintf_r>
 801869e:	b002      	add	sp, #8
 80186a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80186a4:	b003      	add	sp, #12
 80186a6:	4770      	bx	lr
 80186a8:	200000c8 	.word	0x200000c8

080186ac <__swbuf_r>:
 80186ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186ae:	460e      	mov	r6, r1
 80186b0:	4614      	mov	r4, r2
 80186b2:	4605      	mov	r5, r0
 80186b4:	b118      	cbz	r0, 80186be <__swbuf_r+0x12>
 80186b6:	6a03      	ldr	r3, [r0, #32]
 80186b8:	b90b      	cbnz	r3, 80186be <__swbuf_r+0x12>
 80186ba:	f7ff f89b 	bl	80177f4 <__sinit>
 80186be:	69a3      	ldr	r3, [r4, #24]
 80186c0:	60a3      	str	r3, [r4, #8]
 80186c2:	89a3      	ldrh	r3, [r4, #12]
 80186c4:	071a      	lsls	r2, r3, #28
 80186c6:	d501      	bpl.n	80186cc <__swbuf_r+0x20>
 80186c8:	6923      	ldr	r3, [r4, #16]
 80186ca:	b943      	cbnz	r3, 80186de <__swbuf_r+0x32>
 80186cc:	4621      	mov	r1, r4
 80186ce:	4628      	mov	r0, r5
 80186d0:	f000 f82a 	bl	8018728 <__swsetup_r>
 80186d4:	b118      	cbz	r0, 80186de <__swbuf_r+0x32>
 80186d6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80186da:	4638      	mov	r0, r7
 80186dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80186de:	6823      	ldr	r3, [r4, #0]
 80186e0:	6922      	ldr	r2, [r4, #16]
 80186e2:	1a98      	subs	r0, r3, r2
 80186e4:	6963      	ldr	r3, [r4, #20]
 80186e6:	b2f6      	uxtb	r6, r6
 80186e8:	4283      	cmp	r3, r0
 80186ea:	4637      	mov	r7, r6
 80186ec:	dc05      	bgt.n	80186fa <__swbuf_r+0x4e>
 80186ee:	4621      	mov	r1, r4
 80186f0:	4628      	mov	r0, r5
 80186f2:	f7ff ffa1 	bl	8018638 <_fflush_r>
 80186f6:	2800      	cmp	r0, #0
 80186f8:	d1ed      	bne.n	80186d6 <__swbuf_r+0x2a>
 80186fa:	68a3      	ldr	r3, [r4, #8]
 80186fc:	3b01      	subs	r3, #1
 80186fe:	60a3      	str	r3, [r4, #8]
 8018700:	6823      	ldr	r3, [r4, #0]
 8018702:	1c5a      	adds	r2, r3, #1
 8018704:	6022      	str	r2, [r4, #0]
 8018706:	701e      	strb	r6, [r3, #0]
 8018708:	6962      	ldr	r2, [r4, #20]
 801870a:	1c43      	adds	r3, r0, #1
 801870c:	429a      	cmp	r2, r3
 801870e:	d004      	beq.n	801871a <__swbuf_r+0x6e>
 8018710:	89a3      	ldrh	r3, [r4, #12]
 8018712:	07db      	lsls	r3, r3, #31
 8018714:	d5e1      	bpl.n	80186da <__swbuf_r+0x2e>
 8018716:	2e0a      	cmp	r6, #10
 8018718:	d1df      	bne.n	80186da <__swbuf_r+0x2e>
 801871a:	4621      	mov	r1, r4
 801871c:	4628      	mov	r0, r5
 801871e:	f7ff ff8b 	bl	8018638 <_fflush_r>
 8018722:	2800      	cmp	r0, #0
 8018724:	d0d9      	beq.n	80186da <__swbuf_r+0x2e>
 8018726:	e7d6      	b.n	80186d6 <__swbuf_r+0x2a>

08018728 <__swsetup_r>:
 8018728:	b538      	push	{r3, r4, r5, lr}
 801872a:	4b29      	ldr	r3, [pc, #164]	@ (80187d0 <__swsetup_r+0xa8>)
 801872c:	4605      	mov	r5, r0
 801872e:	6818      	ldr	r0, [r3, #0]
 8018730:	460c      	mov	r4, r1
 8018732:	b118      	cbz	r0, 801873c <__swsetup_r+0x14>
 8018734:	6a03      	ldr	r3, [r0, #32]
 8018736:	b90b      	cbnz	r3, 801873c <__swsetup_r+0x14>
 8018738:	f7ff f85c 	bl	80177f4 <__sinit>
 801873c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018740:	0719      	lsls	r1, r3, #28
 8018742:	d422      	bmi.n	801878a <__swsetup_r+0x62>
 8018744:	06da      	lsls	r2, r3, #27
 8018746:	d407      	bmi.n	8018758 <__swsetup_r+0x30>
 8018748:	2209      	movs	r2, #9
 801874a:	602a      	str	r2, [r5, #0]
 801874c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018750:	81a3      	strh	r3, [r4, #12]
 8018752:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018756:	e033      	b.n	80187c0 <__swsetup_r+0x98>
 8018758:	0758      	lsls	r0, r3, #29
 801875a:	d512      	bpl.n	8018782 <__swsetup_r+0x5a>
 801875c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801875e:	b141      	cbz	r1, 8018772 <__swsetup_r+0x4a>
 8018760:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018764:	4299      	cmp	r1, r3
 8018766:	d002      	beq.n	801876e <__swsetup_r+0x46>
 8018768:	4628      	mov	r0, r5
 801876a:	f7ff fa67 	bl	8017c3c <_free_r>
 801876e:	2300      	movs	r3, #0
 8018770:	6363      	str	r3, [r4, #52]	@ 0x34
 8018772:	89a3      	ldrh	r3, [r4, #12]
 8018774:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018778:	81a3      	strh	r3, [r4, #12]
 801877a:	2300      	movs	r3, #0
 801877c:	6063      	str	r3, [r4, #4]
 801877e:	6923      	ldr	r3, [r4, #16]
 8018780:	6023      	str	r3, [r4, #0]
 8018782:	89a3      	ldrh	r3, [r4, #12]
 8018784:	f043 0308 	orr.w	r3, r3, #8
 8018788:	81a3      	strh	r3, [r4, #12]
 801878a:	6923      	ldr	r3, [r4, #16]
 801878c:	b94b      	cbnz	r3, 80187a2 <__swsetup_r+0x7a>
 801878e:	89a3      	ldrh	r3, [r4, #12]
 8018790:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018794:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018798:	d003      	beq.n	80187a2 <__swsetup_r+0x7a>
 801879a:	4621      	mov	r1, r4
 801879c:	4628      	mov	r0, r5
 801879e:	f000 f846 	bl	801882e <__smakebuf_r>
 80187a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80187a6:	f013 0201 	ands.w	r2, r3, #1
 80187aa:	d00a      	beq.n	80187c2 <__swsetup_r+0x9a>
 80187ac:	2200      	movs	r2, #0
 80187ae:	60a2      	str	r2, [r4, #8]
 80187b0:	6962      	ldr	r2, [r4, #20]
 80187b2:	4252      	negs	r2, r2
 80187b4:	61a2      	str	r2, [r4, #24]
 80187b6:	6922      	ldr	r2, [r4, #16]
 80187b8:	b942      	cbnz	r2, 80187cc <__swsetup_r+0xa4>
 80187ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80187be:	d1c5      	bne.n	801874c <__swsetup_r+0x24>
 80187c0:	bd38      	pop	{r3, r4, r5, pc}
 80187c2:	0799      	lsls	r1, r3, #30
 80187c4:	bf58      	it	pl
 80187c6:	6962      	ldrpl	r2, [r4, #20]
 80187c8:	60a2      	str	r2, [r4, #8]
 80187ca:	e7f4      	b.n	80187b6 <__swsetup_r+0x8e>
 80187cc:	2000      	movs	r0, #0
 80187ce:	e7f7      	b.n	80187c0 <__swsetup_r+0x98>
 80187d0:	200000c8 	.word	0x200000c8

080187d4 <abort>:
 80187d4:	b508      	push	{r3, lr}
 80187d6:	2006      	movs	r0, #6
 80187d8:	f000 f88e 	bl	80188f8 <raise>
 80187dc:	2001      	movs	r0, #1
 80187de:	f7e9 fb87 	bl	8001ef0 <_exit>

080187e2 <__swhatbuf_r>:
 80187e2:	b570      	push	{r4, r5, r6, lr}
 80187e4:	460c      	mov	r4, r1
 80187e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80187ea:	2900      	cmp	r1, #0
 80187ec:	b096      	sub	sp, #88	@ 0x58
 80187ee:	4615      	mov	r5, r2
 80187f0:	461e      	mov	r6, r3
 80187f2:	da0d      	bge.n	8018810 <__swhatbuf_r+0x2e>
 80187f4:	89a3      	ldrh	r3, [r4, #12]
 80187f6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80187fa:	f04f 0100 	mov.w	r1, #0
 80187fe:	bf14      	ite	ne
 8018800:	2340      	movne	r3, #64	@ 0x40
 8018802:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018806:	2000      	movs	r0, #0
 8018808:	6031      	str	r1, [r6, #0]
 801880a:	602b      	str	r3, [r5, #0]
 801880c:	b016      	add	sp, #88	@ 0x58
 801880e:	bd70      	pop	{r4, r5, r6, pc}
 8018810:	466a      	mov	r2, sp
 8018812:	f000 f879 	bl	8018908 <_fstat_r>
 8018816:	2800      	cmp	r0, #0
 8018818:	dbec      	blt.n	80187f4 <__swhatbuf_r+0x12>
 801881a:	9901      	ldr	r1, [sp, #4]
 801881c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018820:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018824:	4259      	negs	r1, r3
 8018826:	4159      	adcs	r1, r3
 8018828:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801882c:	e7eb      	b.n	8018806 <__swhatbuf_r+0x24>

0801882e <__smakebuf_r>:
 801882e:	898b      	ldrh	r3, [r1, #12]
 8018830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018832:	079d      	lsls	r5, r3, #30
 8018834:	4606      	mov	r6, r0
 8018836:	460c      	mov	r4, r1
 8018838:	d507      	bpl.n	801884a <__smakebuf_r+0x1c>
 801883a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801883e:	6023      	str	r3, [r4, #0]
 8018840:	6123      	str	r3, [r4, #16]
 8018842:	2301      	movs	r3, #1
 8018844:	6163      	str	r3, [r4, #20]
 8018846:	b003      	add	sp, #12
 8018848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801884a:	ab01      	add	r3, sp, #4
 801884c:	466a      	mov	r2, sp
 801884e:	f7ff ffc8 	bl	80187e2 <__swhatbuf_r>
 8018852:	9f00      	ldr	r7, [sp, #0]
 8018854:	4605      	mov	r5, r0
 8018856:	4639      	mov	r1, r7
 8018858:	4630      	mov	r0, r6
 801885a:	f7fe fd99 	bl	8017390 <_malloc_r>
 801885e:	b948      	cbnz	r0, 8018874 <__smakebuf_r+0x46>
 8018860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018864:	059a      	lsls	r2, r3, #22
 8018866:	d4ee      	bmi.n	8018846 <__smakebuf_r+0x18>
 8018868:	f023 0303 	bic.w	r3, r3, #3
 801886c:	f043 0302 	orr.w	r3, r3, #2
 8018870:	81a3      	strh	r3, [r4, #12]
 8018872:	e7e2      	b.n	801883a <__smakebuf_r+0xc>
 8018874:	89a3      	ldrh	r3, [r4, #12]
 8018876:	6020      	str	r0, [r4, #0]
 8018878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801887c:	81a3      	strh	r3, [r4, #12]
 801887e:	9b01      	ldr	r3, [sp, #4]
 8018880:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018884:	b15b      	cbz	r3, 801889e <__smakebuf_r+0x70>
 8018886:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801888a:	4630      	mov	r0, r6
 801888c:	f000 f84e 	bl	801892c <_isatty_r>
 8018890:	b128      	cbz	r0, 801889e <__smakebuf_r+0x70>
 8018892:	89a3      	ldrh	r3, [r4, #12]
 8018894:	f023 0303 	bic.w	r3, r3, #3
 8018898:	f043 0301 	orr.w	r3, r3, #1
 801889c:	81a3      	strh	r3, [r4, #12]
 801889e:	89a3      	ldrh	r3, [r4, #12]
 80188a0:	431d      	orrs	r5, r3
 80188a2:	81a5      	strh	r5, [r4, #12]
 80188a4:	e7cf      	b.n	8018846 <__smakebuf_r+0x18>

080188a6 <_raise_r>:
 80188a6:	291f      	cmp	r1, #31
 80188a8:	b538      	push	{r3, r4, r5, lr}
 80188aa:	4605      	mov	r5, r0
 80188ac:	460c      	mov	r4, r1
 80188ae:	d904      	bls.n	80188ba <_raise_r+0x14>
 80188b0:	2316      	movs	r3, #22
 80188b2:	6003      	str	r3, [r0, #0]
 80188b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80188b8:	bd38      	pop	{r3, r4, r5, pc}
 80188ba:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80188bc:	b112      	cbz	r2, 80188c4 <_raise_r+0x1e>
 80188be:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80188c2:	b94b      	cbnz	r3, 80188d8 <_raise_r+0x32>
 80188c4:	4628      	mov	r0, r5
 80188c6:	f000 f853 	bl	8018970 <_getpid_r>
 80188ca:	4622      	mov	r2, r4
 80188cc:	4601      	mov	r1, r0
 80188ce:	4628      	mov	r0, r5
 80188d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80188d4:	f000 b83a 	b.w	801894c <_kill_r>
 80188d8:	2b01      	cmp	r3, #1
 80188da:	d00a      	beq.n	80188f2 <_raise_r+0x4c>
 80188dc:	1c59      	adds	r1, r3, #1
 80188de:	d103      	bne.n	80188e8 <_raise_r+0x42>
 80188e0:	2316      	movs	r3, #22
 80188e2:	6003      	str	r3, [r0, #0]
 80188e4:	2001      	movs	r0, #1
 80188e6:	e7e7      	b.n	80188b8 <_raise_r+0x12>
 80188e8:	2100      	movs	r1, #0
 80188ea:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80188ee:	4620      	mov	r0, r4
 80188f0:	4798      	blx	r3
 80188f2:	2000      	movs	r0, #0
 80188f4:	e7e0      	b.n	80188b8 <_raise_r+0x12>
	...

080188f8 <raise>:
 80188f8:	4b02      	ldr	r3, [pc, #8]	@ (8018904 <raise+0xc>)
 80188fa:	4601      	mov	r1, r0
 80188fc:	6818      	ldr	r0, [r3, #0]
 80188fe:	f7ff bfd2 	b.w	80188a6 <_raise_r>
 8018902:	bf00      	nop
 8018904:	200000c8 	.word	0x200000c8

08018908 <_fstat_r>:
 8018908:	b538      	push	{r3, r4, r5, lr}
 801890a:	4d07      	ldr	r5, [pc, #28]	@ (8018928 <_fstat_r+0x20>)
 801890c:	2300      	movs	r3, #0
 801890e:	4604      	mov	r4, r0
 8018910:	4608      	mov	r0, r1
 8018912:	4611      	mov	r1, r2
 8018914:	602b      	str	r3, [r5, #0]
 8018916:	f7e9 fb3b 	bl	8001f90 <_fstat>
 801891a:	1c43      	adds	r3, r0, #1
 801891c:	d102      	bne.n	8018924 <_fstat_r+0x1c>
 801891e:	682b      	ldr	r3, [r5, #0]
 8018920:	b103      	cbz	r3, 8018924 <_fstat_r+0x1c>
 8018922:	6023      	str	r3, [r4, #0]
 8018924:	bd38      	pop	{r3, r4, r5, pc}
 8018926:	bf00      	nop
 8018928:	2000ae34 	.word	0x2000ae34

0801892c <_isatty_r>:
 801892c:	b538      	push	{r3, r4, r5, lr}
 801892e:	4d06      	ldr	r5, [pc, #24]	@ (8018948 <_isatty_r+0x1c>)
 8018930:	2300      	movs	r3, #0
 8018932:	4604      	mov	r4, r0
 8018934:	4608      	mov	r0, r1
 8018936:	602b      	str	r3, [r5, #0]
 8018938:	f7e9 fb3a 	bl	8001fb0 <_isatty>
 801893c:	1c43      	adds	r3, r0, #1
 801893e:	d102      	bne.n	8018946 <_isatty_r+0x1a>
 8018940:	682b      	ldr	r3, [r5, #0]
 8018942:	b103      	cbz	r3, 8018946 <_isatty_r+0x1a>
 8018944:	6023      	str	r3, [r4, #0]
 8018946:	bd38      	pop	{r3, r4, r5, pc}
 8018948:	2000ae34 	.word	0x2000ae34

0801894c <_kill_r>:
 801894c:	b538      	push	{r3, r4, r5, lr}
 801894e:	4d07      	ldr	r5, [pc, #28]	@ (801896c <_kill_r+0x20>)
 8018950:	2300      	movs	r3, #0
 8018952:	4604      	mov	r4, r0
 8018954:	4608      	mov	r0, r1
 8018956:	4611      	mov	r1, r2
 8018958:	602b      	str	r3, [r5, #0]
 801895a:	f7e9 fab9 	bl	8001ed0 <_kill>
 801895e:	1c43      	adds	r3, r0, #1
 8018960:	d102      	bne.n	8018968 <_kill_r+0x1c>
 8018962:	682b      	ldr	r3, [r5, #0]
 8018964:	b103      	cbz	r3, 8018968 <_kill_r+0x1c>
 8018966:	6023      	str	r3, [r4, #0]
 8018968:	bd38      	pop	{r3, r4, r5, pc}
 801896a:	bf00      	nop
 801896c:	2000ae34 	.word	0x2000ae34

08018970 <_getpid_r>:
 8018970:	f7e9 baa6 	b.w	8001ec0 <_getpid>

08018974 <_init>:
 8018974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018976:	bf00      	nop
 8018978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801897a:	bc08      	pop	{r3}
 801897c:	469e      	mov	lr, r3
 801897e:	4770      	bx	lr

08018980 <_fini>:
 8018980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018982:	bf00      	nop
 8018984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018986:	bc08      	pop	{r3}
 8018988:	469e      	mov	lr, r3
 801898a:	4770      	bx	lr
