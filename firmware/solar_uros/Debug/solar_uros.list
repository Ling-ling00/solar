
solar_uros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017d78  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d90  08017f58  08017f58  00018f58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018ce8  08018ce8  0001a118  2**0
                  CONTENTS
  4 .ARM          00000008  08018ce8  08018ce8  00019ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018cf0  08018cf0  0001a118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08018cf0  08018cf0  00019cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018cf8  08018cf8  00019cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000118  20000000  08018cfc  0001a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000acbc  20000118  08018e14  0001a118  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000add4  08018e14  0001add4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a118  2**0
                  CONTENTS, READONLY
 12 .debug_info   000221ef  00000000  00000000  0001a148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004946  00000000  00000000  0003c337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b00  00000000  00000000  00040c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014db  00000000  00000000  00042780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002baf7  00000000  00000000  00043c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020802  00000000  00000000  0006f752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112cd9  00000000  00000000  0008ff54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001a2c2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008028  00000000  00000000  001a2ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001aaccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000118 	.word	0x20000118
 80001fc:	00000000 	.word	0x00000000
 8000200:	08017f40 	.word	0x08017f40

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000011c 	.word	0x2000011c
 800021c:	08017f40 	.word	0x08017f40

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__aeabi_d2uiz>:
 8000a8c:	004a      	lsls	r2, r1, #1
 8000a8e:	d211      	bcs.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a94:	d211      	bcs.n	8000aba <__aeabi_d2uiz+0x2e>
 8000a96:	d50d      	bpl.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a98:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d40e      	bmi.n	8000ac0 <__aeabi_d2uiz+0x34>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d102      	bne.n	8000ac6 <__aeabi_d2uiz+0x3a>
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac4:	4770      	bx	lr
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	4770      	bx	lr

08000acc <__aeabi_ldivmod>:
 8000acc:	b97b      	cbnz	r3, 8000aee <__aeabi_ldivmod+0x22>
 8000ace:	b972      	cbnz	r2, 8000aee <__aeabi_ldivmod+0x22>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bfbe      	ittt	lt
 8000ad4:	2000      	movlt	r0, #0
 8000ad6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ada:	e006      	blt.n	8000aea <__aeabi_ldivmod+0x1e>
 8000adc:	bf08      	it	eq
 8000ade:	2800      	cmpeq	r0, #0
 8000ae0:	bf1c      	itt	ne
 8000ae2:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ae6:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000aea:	f000 b9b5 	b.w	8000e58 <__aeabi_idiv0>
 8000aee:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000af6:	2900      	cmp	r1, #0
 8000af8:	db09      	blt.n	8000b0e <__aeabi_ldivmod+0x42>
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	db1a      	blt.n	8000b34 <__aeabi_ldivmod+0x68>
 8000afe:	f000 f84d 	bl	8000b9c <__udivmoddi4>
 8000b02:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b0a:	b004      	add	sp, #16
 8000b0c:	4770      	bx	lr
 8000b0e:	4240      	negs	r0, r0
 8000b10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	db1b      	blt.n	8000b50 <__aeabi_ldivmod+0x84>
 8000b18:	f000 f840 	bl	8000b9c <__udivmoddi4>
 8000b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b24:	b004      	add	sp, #16
 8000b26:	4240      	negs	r0, r0
 8000b28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b2c:	4252      	negs	r2, r2
 8000b2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b32:	4770      	bx	lr
 8000b34:	4252      	negs	r2, r2
 8000b36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b3a:	f000 f82f 	bl	8000b9c <__udivmoddi4>
 8000b3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b46:	b004      	add	sp, #16
 8000b48:	4240      	negs	r0, r0
 8000b4a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b4e:	4770      	bx	lr
 8000b50:	4252      	negs	r2, r2
 8000b52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b56:	f000 f821 	bl	8000b9c <__udivmoddi4>
 8000b5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b62:	b004      	add	sp, #16
 8000b64:	4252      	negs	r2, r2
 8000b66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b80:	f000 b96a 	b.w	8000e58 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	460c      	mov	r4, r1
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d14e      	bne.n	8000c46 <__udivmoddi4+0xaa>
 8000ba8:	4694      	mov	ip, r2
 8000baa:	458c      	cmp	ip, r1
 8000bac:	4686      	mov	lr, r0
 8000bae:	fab2 f282 	clz	r2, r2
 8000bb2:	d962      	bls.n	8000c7a <__udivmoddi4+0xde>
 8000bb4:	b14a      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb6:	f1c2 0320 	rsb	r3, r2, #32
 8000bba:	4091      	lsls	r1, r2
 8000bbc:	fa20 f303 	lsr.w	r3, r0, r3
 8000bc0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc4:	4319      	orrs	r1, r3
 8000bc6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bce:	fa1f f68c 	uxth.w	r6, ip
 8000bd2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bd6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bda:	fb07 1114 	mls	r1, r7, r4, r1
 8000bde:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be2:	fb04 f106 	mul.w	r1, r4, r6
 8000be6:	4299      	cmp	r1, r3
 8000be8:	d90a      	bls.n	8000c00 <__udivmoddi4+0x64>
 8000bea:	eb1c 0303 	adds.w	r3, ip, r3
 8000bee:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000bf2:	f080 8112 	bcs.w	8000e1a <__udivmoddi4+0x27e>
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	f240 810f 	bls.w	8000e1a <__udivmoddi4+0x27e>
 8000bfc:	3c02      	subs	r4, #2
 8000bfe:	4463      	add	r3, ip
 8000c00:	1a59      	subs	r1, r3, r1
 8000c02:	fa1f f38e 	uxth.w	r3, lr
 8000c06:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c0a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c12:	fb00 f606 	mul.w	r6, r0, r6
 8000c16:	429e      	cmp	r6, r3
 8000c18:	d90a      	bls.n	8000c30 <__udivmoddi4+0x94>
 8000c1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c22:	f080 80fc 	bcs.w	8000e1e <__udivmoddi4+0x282>
 8000c26:	429e      	cmp	r6, r3
 8000c28:	f240 80f9 	bls.w	8000e1e <__udivmoddi4+0x282>
 8000c2c:	4463      	add	r3, ip
 8000c2e:	3802      	subs	r0, #2
 8000c30:	1b9b      	subs	r3, r3, r6
 8000c32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c36:	2100      	movs	r1, #0
 8000c38:	b11d      	cbz	r5, 8000c42 <__udivmoddi4+0xa6>
 8000c3a:	40d3      	lsrs	r3, r2
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d905      	bls.n	8000c56 <__udivmoddi4+0xba>
 8000c4a:	b10d      	cbz	r5, 8000c50 <__udivmoddi4+0xb4>
 8000c4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c50:	2100      	movs	r1, #0
 8000c52:	4608      	mov	r0, r1
 8000c54:	e7f5      	b.n	8000c42 <__udivmoddi4+0xa6>
 8000c56:	fab3 f183 	clz	r1, r3
 8000c5a:	2900      	cmp	r1, #0
 8000c5c:	d146      	bne.n	8000cec <__udivmoddi4+0x150>
 8000c5e:	42a3      	cmp	r3, r4
 8000c60:	d302      	bcc.n	8000c68 <__udivmoddi4+0xcc>
 8000c62:	4290      	cmp	r0, r2
 8000c64:	f0c0 80f0 	bcc.w	8000e48 <__udivmoddi4+0x2ac>
 8000c68:	1a86      	subs	r6, r0, r2
 8000c6a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c6e:	2001      	movs	r0, #1
 8000c70:	2d00      	cmp	r5, #0
 8000c72:	d0e6      	beq.n	8000c42 <__udivmoddi4+0xa6>
 8000c74:	e9c5 6300 	strd	r6, r3, [r5]
 8000c78:	e7e3      	b.n	8000c42 <__udivmoddi4+0xa6>
 8000c7a:	2a00      	cmp	r2, #0
 8000c7c:	f040 8090 	bne.w	8000da0 <__udivmoddi4+0x204>
 8000c80:	eba1 040c 	sub.w	r4, r1, ip
 8000c84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c88:	fa1f f78c 	uxth.w	r7, ip
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c96:	fb08 4416 	mls	r4, r8, r6, r4
 8000c9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c9e:	fb07 f006 	mul.w	r0, r7, r6
 8000ca2:	4298      	cmp	r0, r3
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x11c>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x11a>
 8000cb0:	4298      	cmp	r0, r3
 8000cb2:	f200 80cd 	bhi.w	8000e50 <__udivmoddi4+0x2b4>
 8000cb6:	4626      	mov	r6, r4
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	fa1f f38e 	uxth.w	r3, lr
 8000cbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cc2:	fb08 4410 	mls	r4, r8, r0, r4
 8000cc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cca:	fb00 f707 	mul.w	r7, r0, r7
 8000cce:	429f      	cmp	r7, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x148>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x146>
 8000cdc:	429f      	cmp	r7, r3
 8000cde:	f200 80b0 	bhi.w	8000e42 <__udivmoddi4+0x2a6>
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	1bdb      	subs	r3, r3, r7
 8000ce6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cea:	e7a5      	b.n	8000c38 <__udivmoddi4+0x9c>
 8000cec:	f1c1 0620 	rsb	r6, r1, #32
 8000cf0:	408b      	lsls	r3, r1
 8000cf2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cf6:	431f      	orrs	r7, r3
 8000cf8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cfc:	fa04 f301 	lsl.w	r3, r4, r1
 8000d00:	ea43 030c 	orr.w	r3, r3, ip
 8000d04:	40f4      	lsrs	r4, r6
 8000d06:	fa00 f801 	lsl.w	r8, r0, r1
 8000d0a:	0c38      	lsrs	r0, r7, #16
 8000d0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d10:	fbb4 fef0 	udiv	lr, r4, r0
 8000d14:	fa1f fc87 	uxth.w	ip, r7
 8000d18:	fb00 441e 	mls	r4, r0, lr, r4
 8000d1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d20:	fb0e f90c 	mul.w	r9, lr, ip
 8000d24:	45a1      	cmp	r9, r4
 8000d26:	fa02 f201 	lsl.w	r2, r2, r1
 8000d2a:	d90a      	bls.n	8000d42 <__udivmoddi4+0x1a6>
 8000d2c:	193c      	adds	r4, r7, r4
 8000d2e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d32:	f080 8084 	bcs.w	8000e3e <__udivmoddi4+0x2a2>
 8000d36:	45a1      	cmp	r9, r4
 8000d38:	f240 8081 	bls.w	8000e3e <__udivmoddi4+0x2a2>
 8000d3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d40:	443c      	add	r4, r7
 8000d42:	eba4 0409 	sub.w	r4, r4, r9
 8000d46:	fa1f f983 	uxth.w	r9, r3
 8000d4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	d907      	bls.n	8000d6e <__udivmoddi4+0x1d2>
 8000d5e:	193c      	adds	r4, r7, r4
 8000d60:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d64:	d267      	bcs.n	8000e36 <__udivmoddi4+0x29a>
 8000d66:	45a4      	cmp	ip, r4
 8000d68:	d965      	bls.n	8000e36 <__udivmoddi4+0x29a>
 8000d6a:	3b02      	subs	r3, #2
 8000d6c:	443c      	add	r4, r7
 8000d6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d72:	fba0 9302 	umull	r9, r3, r0, r2
 8000d76:	eba4 040c 	sub.w	r4, r4, ip
 8000d7a:	429c      	cmp	r4, r3
 8000d7c:	46ce      	mov	lr, r9
 8000d7e:	469c      	mov	ip, r3
 8000d80:	d351      	bcc.n	8000e26 <__udivmoddi4+0x28a>
 8000d82:	d04e      	beq.n	8000e22 <__udivmoddi4+0x286>
 8000d84:	b155      	cbz	r5, 8000d9c <__udivmoddi4+0x200>
 8000d86:	ebb8 030e 	subs.w	r3, r8, lr
 8000d8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d92:	40cb      	lsrs	r3, r1
 8000d94:	431e      	orrs	r6, r3
 8000d96:	40cc      	lsrs	r4, r1
 8000d98:	e9c5 6400 	strd	r6, r4, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	e750      	b.n	8000c42 <__udivmoddi4+0xa6>
 8000da0:	f1c2 0320 	rsb	r3, r2, #32
 8000da4:	fa20 f103 	lsr.w	r1, r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	fa24 f303 	lsr.w	r3, r4, r3
 8000db0:	4094      	lsls	r4, r2
 8000db2:	430c      	orrs	r4, r1
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dbc:	fa1f f78c 	uxth.w	r7, ip
 8000dc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc4:	fb08 3110 	mls	r1, r8, r0, r3
 8000dc8:	0c23      	lsrs	r3, r4, #16
 8000dca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dce:	fb00 f107 	mul.w	r1, r0, r7
 8000dd2:	4299      	cmp	r1, r3
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x24c>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000dde:	d22c      	bcs.n	8000e3a <__udivmoddi4+0x29e>
 8000de0:	4299      	cmp	r1, r3
 8000de2:	d92a      	bls.n	8000e3a <__udivmoddi4+0x29e>
 8000de4:	3802      	subs	r0, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000df0:	fb08 3311 	mls	r3, r8, r1, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb01 f307 	mul.w	r3, r1, r7
 8000dfc:	42a3      	cmp	r3, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x276>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e08:	d213      	bcs.n	8000e32 <__udivmoddi4+0x296>
 8000e0a:	42a3      	cmp	r3, r4
 8000e0c:	d911      	bls.n	8000e32 <__udivmoddi4+0x296>
 8000e0e:	3902      	subs	r1, #2
 8000e10:	4464      	add	r4, ip
 8000e12:	1ae4      	subs	r4, r4, r3
 8000e14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e18:	e739      	b.n	8000c8e <__udivmoddi4+0xf2>
 8000e1a:	4604      	mov	r4, r0
 8000e1c:	e6f0      	b.n	8000c00 <__udivmoddi4+0x64>
 8000e1e:	4608      	mov	r0, r1
 8000e20:	e706      	b.n	8000c30 <__udivmoddi4+0x94>
 8000e22:	45c8      	cmp	r8, r9
 8000e24:	d2ae      	bcs.n	8000d84 <__udivmoddi4+0x1e8>
 8000e26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e2e:	3801      	subs	r0, #1
 8000e30:	e7a8      	b.n	8000d84 <__udivmoddi4+0x1e8>
 8000e32:	4631      	mov	r1, r6
 8000e34:	e7ed      	b.n	8000e12 <__udivmoddi4+0x276>
 8000e36:	4603      	mov	r3, r0
 8000e38:	e799      	b.n	8000d6e <__udivmoddi4+0x1d2>
 8000e3a:	4630      	mov	r0, r6
 8000e3c:	e7d4      	b.n	8000de8 <__udivmoddi4+0x24c>
 8000e3e:	46d6      	mov	lr, sl
 8000e40:	e77f      	b.n	8000d42 <__udivmoddi4+0x1a6>
 8000e42:	4463      	add	r3, ip
 8000e44:	3802      	subs	r0, #2
 8000e46:	e74d      	b.n	8000ce4 <__udivmoddi4+0x148>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	4623      	mov	r3, r4
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	e70f      	b.n	8000c70 <__udivmoddi4+0xd4>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	e730      	b.n	8000cb8 <__udivmoddi4+0x11c>
 8000e56:	bf00      	nop

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	4613      	mov	r3, r2
 8000e68:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e9c <PWM_init+0x40>)
 8000e6e:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	88fa      	ldrh	r2, [r7, #6]
 8000e7a:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 8000e82:	68b8      	ldr	r0, [r7, #8]
 8000e84:	f003 fca0 	bl	80047c8 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8000e88:	88fb      	ldrh	r3, [r7, #6]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	68b8      	ldr	r0, [r7, #8]
 8000e8e:	f003 fde5 	bl	8004a5c <HAL_TIM_PWM_Start>
}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	0a21fe80 	.word	0x0a21fe80

08000ea0 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 8000ea0:	b5b0      	push	{r4, r5, r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	ed87 0a02 	vstr	s0, [r7, #8]
 8000eac:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8000eb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000eb4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ebc:	d137      	bne.n	8000f2e <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	889b      	ldrh	r3, [r3, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d105      	bne.n	8000ed2 <PWM_write_duty+0x32>
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8000ed0:	e0e1      	b.n	8001096 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	889b      	ldrh	r3, [r3, #4]
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	d105      	bne.n	8000ee6 <PWM_write_duty+0x46>
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	6393      	str	r3, [r2, #56]	@ 0x38
 8000ee4:	e0d7      	b.n	8001096 <PWM_write_duty+0x1f6>
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	889b      	ldrh	r3, [r3, #4]
 8000eea:	2b08      	cmp	r3, #8
 8000eec:	d105      	bne.n	8000efa <PWM_write_duty+0x5a>
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000ef8:	e0cd      	b.n	8001096 <PWM_write_duty+0x1f6>
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	889b      	ldrh	r3, [r3, #4]
 8000efe:	2b0c      	cmp	r3, #12
 8000f00:	d105      	bne.n	8000f0e <PWM_write_duty+0x6e>
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	2300      	movs	r3, #0
 8000f0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f0c:	e0c3      	b.n	8001096 <PWM_write_duty+0x1f6>
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	889b      	ldrh	r3, [r3, #4]
 8000f12:	2b10      	cmp	r3, #16
 8000f14:	d105      	bne.n	8000f22 <PWM_write_duty+0x82>
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f20:	e0b9      	b.n	8001096 <PWM_write_duty+0x1f6>
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	2300      	movs	r3, #0
 8000f2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000f2c:	e0b3      	b.n	8001096 <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	691b      	ldr	r3, [r3, #16]
 8000f32:	ee07 3a90 	vmov	s15, r3
 8000f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000f3a:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f46:	ee17 2a90 	vmov	r2, s15
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000f56:	33fe      	adds	r3, #254	@ 0xfe
 8000f58:	4a51      	ldr	r2, [pc, #324]	@ (80010a0 <PWM_write_duty+0x200>)
 8000f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5e:	0bdb      	lsrs	r3, r3, #15
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	3b01      	subs	r3, #1
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	ee07 3a90 	vmov	s15, r3
 8000f72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	899b      	ldrh	r3, [r3, #12]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000f88:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f9c:	ee17 3a90 	vmov	r3, s15
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	89db      	ldrh	r3, [r3, #14]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff faf2 	bl	8000594 <__aeabi_i2d>
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	460d      	mov	r5, r1
 8000fb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fb8:	eef0 7ae7 	vabs.f32	s15, s15
 8000fbc:	ee17 0a90 	vmov	r0, s15
 8000fc0:	f7ff fafa 	bl	80005b8 <__aeabi_f2d>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4620      	mov	r0, r4
 8000fca:	4629      	mov	r1, r5
 8000fcc:	f7ff fb4c 	bl	8000668 <__aeabi_dmul>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	4610      	mov	r0, r2
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f04f 0200 	mov.w	r2, #0
 8000fdc:	4b31      	ldr	r3, [pc, #196]	@ (80010a4 <PWM_write_duty+0x204>)
 8000fde:	f7ff fc6d 	bl	80008bc <__aeabi_ddiv>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f7ff fd4f 	bl	8000a8c <__aeabi_d2uiz>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	899a      	ldrh	r2, [r3, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	89da      	ldrh	r2, [r3, #14]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	89da      	ldrh	r2, [r3, #14]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	889b      	ldrh	r3, [r3, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d106      	bne.n	8001030 <PWM_write_duty+0x190>
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	68fa      	ldr	r2, [r7, #12]
 800102a:	6952      	ldr	r2, [r2, #20]
 800102c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800102e:	e032      	b.n	8001096 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	889b      	ldrh	r3, [r3, #4]
 8001034:	2b04      	cmp	r3, #4
 8001036:	d106      	bne.n	8001046 <PWM_write_duty+0x1a6>
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001044:	e027      	b.n	8001096 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	889b      	ldrh	r3, [r3, #4]
 800104a:	2b08      	cmp	r3, #8
 800104c:	d106      	bne.n	800105c <PWM_write_duty+0x1bc>
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800105a:	e01c      	b.n	8001096 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	889b      	ldrh	r3, [r3, #4]
 8001060:	2b0c      	cmp	r3, #12
 8001062:	d106      	bne.n	8001072 <PWM_write_duty+0x1d2>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001070:	e011      	b.n	8001096 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	889b      	ldrh	r3, [r3, #4]
 8001076:	2b10      	cmp	r3, #16
 8001078:	d106      	bne.n	8001088 <PWM_write_duty+0x1e8>
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8001086:	e006      	b.n	8001096 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001094:	e7ff      	b.n	8001096 <PWM_write_duty+0x1f6>
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bdb0      	pop	{r4, r5, r7, pc}
 800109e:	bf00      	nop
 80010a0:	80008001 	.word	0x80008001
 80010a4:	40590000 	.word	0x40590000

080010a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ac:	f001 fc61 	bl	8002972 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b0:	f000 f83a 	bl	8001128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b4:	f000 fa18 	bl	80014e8 <MX_GPIO_Init>
  MX_DMA_Init();
 80010b8:	f000 f9e4 	bl	8001484 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80010bc:	f000 f8a0 	bl	8001200 <MX_LPUART1_UART_Init>
  MX_IWDG_Init();
 80010c0:	f000 f880 	bl	80011c4 <MX_IWDG_Init>
  MX_TIM2_Init();
 80010c4:	f000 f8e6 	bl	8001294 <MX_TIM2_Init>
  MX_TIM3_Init();
 80010c8:	f000 f95a 	bl	8001380 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  PWM_init(&BrushMTR, &htim2, TIM_CHANNEL_1);
 80010cc:	2200      	movs	r2, #0
 80010ce:	490f      	ldr	r1, [pc, #60]	@ (800110c <main+0x64>)
 80010d0:	480f      	ldr	r0, [pc, #60]	@ (8001110 <main+0x68>)
 80010d2:	f7ff fec3 	bl	8000e5c <PWM_init>
  PWM_init(&BrushUD, &htim3, TIM_CHANNEL_1);
 80010d6:	2200      	movs	r2, #0
 80010d8:	490e      	ldr	r1, [pc, #56]	@ (8001114 <main+0x6c>)
 80010da:	480f      	ldr	r0, [pc, #60]	@ (8001118 <main+0x70>)
 80010dc:	f7ff febe 	bl	8000e5c <PWM_init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80010e0:	2100      	movs	r1, #0
 80010e2:	480a      	ldr	r0, [pc, #40]	@ (800110c <main+0x64>)
 80010e4:	f003 fcba 	bl	8004a5c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010e8:	2100      	movs	r1, #0
 80010ea:	480a      	ldr	r0, [pc, #40]	@ (8001114 <main+0x6c>)
 80010ec:	f003 fcb6 	bl	8004a5c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010f0:	f006 fd0c 	bl	8007b0c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80010f4:	4a09      	ldr	r2, [pc, #36]	@ (800111c <main+0x74>)
 80010f6:	2100      	movs	r1, #0
 80010f8:	4809      	ldr	r0, [pc, #36]	@ (8001120 <main+0x78>)
 80010fa:	f006 fd51 	bl	8007ba0 <osThreadNew>
 80010fe:	4603      	mov	r3, r0
 8001100:	4a08      	ldr	r2, [pc, #32]	@ (8001124 <main+0x7c>)
 8001102:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001104:	f006 fd26 	bl	8007b54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <main+0x60>
 800110c:	20000298 	.word	0x20000298
 8001110:	20003370 	.word	0x20003370
 8001114:	200002e4 	.word	0x200002e4
 8001118:	20003388 	.word	0x20003388
 800111c:	08018000 	.word	0x08018000
 8001120:	08001829 	.word	0x08001829
 8001124:	20000330 	.word	0x20000330

08001128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b094      	sub	sp, #80	@ 0x50
 800112c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112e:	f107 0318 	add.w	r3, r7, #24
 8001132:	2238      	movs	r2, #56	@ 0x38
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f015 ff64 	bl	8017004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800114a:	2000      	movs	r0, #0
 800114c:	f002 fa82 	bl	8003654 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001150:	230a      	movs	r3, #10
 8001152:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001154:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001158:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800115a:	2340      	movs	r3, #64	@ 0x40
 800115c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800115e:	2301      	movs	r3, #1
 8001160:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001162:	2302      	movs	r3, #2
 8001164:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001166:	2302      	movs	r3, #2
 8001168:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800116a:	2304      	movs	r3, #4
 800116c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800116e:	2355      	movs	r3, #85	@ 0x55
 8001170:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001172:	2302      	movs	r3, #2
 8001174:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001176:	2302      	movs	r3, #2
 8001178:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800117a:	2302      	movs	r3, #2
 800117c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117e:	f107 0318 	add.w	r3, r7, #24
 8001182:	4618      	mov	r0, r3
 8001184:	f002 fb1a 	bl	80037bc <HAL_RCC_OscConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800118e:	f000 fc3f 	bl	8001a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001192:	230f      	movs	r3, #15
 8001194:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001196:	2303      	movs	r3, #3
 8001198:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	2104      	movs	r1, #4
 80011aa:	4618      	mov	r0, r3
 80011ac:	f002 fe18 	bl	8003de0 <HAL_RCC_ClockConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <SystemClock_Config+0x92>
  {
    Error_Handler();
 80011b6:	f000 fc2b 	bl	8001a10 <Error_Handler>
  }
}
 80011ba:	bf00      	nop
 80011bc:	3750      	adds	r7, #80	@ 0x50
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80011c8:	4b0b      	ldr	r3, [pc, #44]	@ (80011f8 <MX_IWDG_Init+0x34>)
 80011ca:	4a0c      	ldr	r2, [pc, #48]	@ (80011fc <MX_IWDG_Init+0x38>)
 80011cc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80011ce:	4b0a      	ldr	r3, [pc, #40]	@ (80011f8 <MX_IWDG_Init+0x34>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80011d4:	4b08      	ldr	r3, [pc, #32]	@ (80011f8 <MX_IWDG_Init+0x34>)
 80011d6:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80011da:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 80011dc:	4b06      	ldr	r3, [pc, #24]	@ (80011f8 <MX_IWDG_Init+0x34>)
 80011de:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80011e2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80011e4:	4804      	ldr	r0, [pc, #16]	@ (80011f8 <MX_IWDG_Init+0x34>)
 80011e6:	f002 f9d6 	bl	8003596 <HAL_IWDG_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80011f0:	f000 fc0e 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000134 	.word	0x20000134
 80011fc:	40003000 	.word	0x40003000

08001200 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001204:	4b21      	ldr	r3, [pc, #132]	@ (800128c <MX_LPUART1_UART_Init+0x8c>)
 8001206:	4a22      	ldr	r2, [pc, #136]	@ (8001290 <MX_LPUART1_UART_Init+0x90>)
 8001208:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800120a:	4b20      	ldr	r3, [pc, #128]	@ (800128c <MX_LPUART1_UART_Init+0x8c>)
 800120c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001210:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001212:	4b1e      	ldr	r3, [pc, #120]	@ (800128c <MX_LPUART1_UART_Init+0x8c>)
 8001214:	2200      	movs	r2, #0
 8001216:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001218:	4b1c      	ldr	r3, [pc, #112]	@ (800128c <MX_LPUART1_UART_Init+0x8c>)
 800121a:	2200      	movs	r2, #0
 800121c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800121e:	4b1b      	ldr	r3, [pc, #108]	@ (800128c <MX_LPUART1_UART_Init+0x8c>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001224:	4b19      	ldr	r3, [pc, #100]	@ (800128c <MX_LPUART1_UART_Init+0x8c>)
 8001226:	220c      	movs	r2, #12
 8001228:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800122a:	4b18      	ldr	r3, [pc, #96]	@ (800128c <MX_LPUART1_UART_Init+0x8c>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001230:	4b16      	ldr	r3, [pc, #88]	@ (800128c <MX_LPUART1_UART_Init+0x8c>)
 8001232:	2200      	movs	r2, #0
 8001234:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001236:	4b15      	ldr	r3, [pc, #84]	@ (800128c <MX_LPUART1_UART_Init+0x8c>)
 8001238:	2200      	movs	r2, #0
 800123a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800123c:	4b13      	ldr	r3, [pc, #76]	@ (800128c <MX_LPUART1_UART_Init+0x8c>)
 800123e:	2200      	movs	r2, #0
 8001240:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001242:	4812      	ldr	r0, [pc, #72]	@ (800128c <MX_LPUART1_UART_Init+0x8c>)
 8001244:	f004 fe3a 	bl	8005ebc <HAL_UART_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800124e:	f000 fbdf 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001252:	2100      	movs	r1, #0
 8001254:	480d      	ldr	r0, [pc, #52]	@ (800128c <MX_LPUART1_UART_Init+0x8c>)
 8001256:	f006 fb4a 	bl	80078ee <HAL_UARTEx_SetTxFifoThreshold>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001260:	f000 fbd6 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001264:	2100      	movs	r1, #0
 8001266:	4809      	ldr	r0, [pc, #36]	@ (800128c <MX_LPUART1_UART_Init+0x8c>)
 8001268:	f006 fb7f 	bl	800796a <HAL_UARTEx_SetRxFifoThreshold>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001272:	f000 fbcd 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001276:	4805      	ldr	r0, [pc, #20]	@ (800128c <MX_LPUART1_UART_Init+0x8c>)
 8001278:	f006 fb00 	bl	800787c <HAL_UARTEx_DisableFifoMode>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001282:	f000 fbc5 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000144 	.word	0x20000144
 8001290:	40008000 	.word	0x40008000

08001294 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08e      	sub	sp, #56	@ 0x38
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800129a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012b4:	463b      	mov	r3, r7
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]
 80012c2:	615a      	str	r2, [r3, #20]
 80012c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012c6:	4b2d      	ldr	r3, [pc, #180]	@ (800137c <MX_TIM2_Init+0xe8>)
 80012c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80012ce:	4b2b      	ldr	r3, [pc, #172]	@ (800137c <MX_TIM2_Init+0xe8>)
 80012d0:	22a9      	movs	r2, #169	@ 0xa9
 80012d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d4:	4b29      	ldr	r3, [pc, #164]	@ (800137c <MX_TIM2_Init+0xe8>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80012da:	4b28      	ldr	r3, [pc, #160]	@ (800137c <MX_TIM2_Init+0xe8>)
 80012dc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e2:	4b26      	ldr	r3, [pc, #152]	@ (800137c <MX_TIM2_Init+0xe8>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e8:	4b24      	ldr	r3, [pc, #144]	@ (800137c <MX_TIM2_Init+0xe8>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012ee:	4823      	ldr	r0, [pc, #140]	@ (800137c <MX_TIM2_Init+0xe8>)
 80012f0:	f003 fa12 	bl	8004718 <HAL_TIM_Base_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80012fa:	f000 fb89 	bl	8001a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001302:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001304:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001308:	4619      	mov	r1, r3
 800130a:	481c      	ldr	r0, [pc, #112]	@ (800137c <MX_TIM2_Init+0xe8>)
 800130c:	f003 ff1c 	bl	8005148 <HAL_TIM_ConfigClockSource>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001316:	f000 fb7b 	bl	8001a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800131a:	4818      	ldr	r0, [pc, #96]	@ (800137c <MX_TIM2_Init+0xe8>)
 800131c:	f003 fb3c 	bl	8004998 <HAL_TIM_PWM_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001326:	f000 fb73 	bl	8001a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132e:	2300      	movs	r3, #0
 8001330:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001332:	f107 031c 	add.w	r3, r7, #28
 8001336:	4619      	mov	r1, r3
 8001338:	4810      	ldr	r0, [pc, #64]	@ (800137c <MX_TIM2_Init+0xe8>)
 800133a:	f004 fce3 	bl	8005d04 <HAL_TIMEx_MasterConfigSynchronization>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001344:	f000 fb64 	bl	8001a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001348:	2360      	movs	r3, #96	@ 0x60
 800134a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001350:	2300      	movs	r3, #0
 8001352:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001354:	2300      	movs	r3, #0
 8001356:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001358:	463b      	mov	r3, r7
 800135a:	2200      	movs	r2, #0
 800135c:	4619      	mov	r1, r3
 800135e:	4807      	ldr	r0, [pc, #28]	@ (800137c <MX_TIM2_Init+0xe8>)
 8001360:	f003 fdde 	bl	8004f20 <HAL_TIM_PWM_ConfigChannel>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800136a:	f000 fb51 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800136e:	4803      	ldr	r0, [pc, #12]	@ (800137c <MX_TIM2_Init+0xe8>)
 8001370:	f000 fc6e 	bl	8001c50 <HAL_TIM_MspPostInit>

}
 8001374:	bf00      	nop
 8001376:	3738      	adds	r7, #56	@ 0x38
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000298 	.word	0x20000298

08001380 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08e      	sub	sp, #56	@ 0x38
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001386:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013a0:	463b      	mov	r3, r7
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]
 80013ae:	615a      	str	r2, [r3, #20]
 80013b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013b2:	4b32      	ldr	r3, [pc, #200]	@ (800147c <MX_TIM3_Init+0xfc>)
 80013b4:	4a32      	ldr	r2, [pc, #200]	@ (8001480 <MX_TIM3_Init+0x100>)
 80013b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 80013b8:	4b30      	ldr	r3, [pc, #192]	@ (800147c <MX_TIM3_Init+0xfc>)
 80013ba:	22a9      	movs	r2, #169	@ 0xa9
 80013bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013be:	4b2f      	ldr	r3, [pc, #188]	@ (800147c <MX_TIM3_Init+0xfc>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80013c4:	4b2d      	ldr	r3, [pc, #180]	@ (800147c <MX_TIM3_Init+0xfc>)
 80013c6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013cc:	4b2b      	ldr	r3, [pc, #172]	@ (800147c <MX_TIM3_Init+0xfc>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d2:	4b2a      	ldr	r3, [pc, #168]	@ (800147c <MX_TIM3_Init+0xfc>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013d8:	4828      	ldr	r0, [pc, #160]	@ (800147c <MX_TIM3_Init+0xfc>)
 80013da:	f003 f99d 	bl	8004718 <HAL_TIM_Base_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80013e4:	f000 fb14 	bl	8001a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013f2:	4619      	mov	r1, r3
 80013f4:	4821      	ldr	r0, [pc, #132]	@ (800147c <MX_TIM3_Init+0xfc>)
 80013f6:	f003 fea7 	bl	8005148 <HAL_TIM_ConfigClockSource>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001400:	f000 fb06 	bl	8001a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001404:	481d      	ldr	r0, [pc, #116]	@ (800147c <MX_TIM3_Init+0xfc>)
 8001406:	f003 fac7 	bl	8004998 <HAL_TIM_PWM_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001410:	f000 fafe 	bl	8001a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800141c:	f107 031c 	add.w	r3, r7, #28
 8001420:	4619      	mov	r1, r3
 8001422:	4816      	ldr	r0, [pc, #88]	@ (800147c <MX_TIM3_Init+0xfc>)
 8001424:	f004 fc6e 	bl	8005d04 <HAL_TIMEx_MasterConfigSynchronization>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800142e:	f000 faef 	bl	8001a10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001432:	2360      	movs	r3, #96	@ 0x60
 8001434:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001442:	463b      	mov	r3, r7
 8001444:	2200      	movs	r2, #0
 8001446:	4619      	mov	r1, r3
 8001448:	480c      	ldr	r0, [pc, #48]	@ (800147c <MX_TIM3_Init+0xfc>)
 800144a:	f003 fd69 	bl	8004f20 <HAL_TIM_PWM_ConfigChannel>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001454:	f000 fadc 	bl	8001a10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001458:	463b      	mov	r3, r7
 800145a:	2204      	movs	r2, #4
 800145c:	4619      	mov	r1, r3
 800145e:	4807      	ldr	r0, [pc, #28]	@ (800147c <MX_TIM3_Init+0xfc>)
 8001460:	f003 fd5e 	bl	8004f20 <HAL_TIM_PWM_ConfigChannel>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800146a:	f000 fad1 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800146e:	4803      	ldr	r0, [pc, #12]	@ (800147c <MX_TIM3_Init+0xfc>)
 8001470:	f000 fbee 	bl	8001c50 <HAL_TIM_MspPostInit>

}
 8001474:	bf00      	nop
 8001476:	3738      	adds	r7, #56	@ 0x38
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	200002e4 	.word	0x200002e4
 8001480:	40000400 	.word	0x40000400

08001484 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800148a:	4b16      	ldr	r3, [pc, #88]	@ (80014e4 <MX_DMA_Init+0x60>)
 800148c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800148e:	4a15      	ldr	r2, [pc, #84]	@ (80014e4 <MX_DMA_Init+0x60>)
 8001490:	f043 0304 	orr.w	r3, r3, #4
 8001494:	6493      	str	r3, [r2, #72]	@ 0x48
 8001496:	4b13      	ldr	r3, [pc, #76]	@ (80014e4 <MX_DMA_Init+0x60>)
 8001498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014a2:	4b10      	ldr	r3, [pc, #64]	@ (80014e4 <MX_DMA_Init+0x60>)
 80014a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014a6:	4a0f      	ldr	r2, [pc, #60]	@ (80014e4 <MX_DMA_Init+0x60>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6493      	str	r3, [r2, #72]	@ 0x48
 80014ae:	4b0d      	ldr	r3, [pc, #52]	@ (80014e4 <MX_DMA_Init+0x60>)
 80014b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2105      	movs	r1, #5
 80014be:	200b      	movs	r0, #11
 80014c0:	f001 fb46 	bl	8002b50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014c4:	200b      	movs	r0, #11
 80014c6:	f001 fb5d 	bl	8002b84 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2105      	movs	r1, #5
 80014ce:	200c      	movs	r0, #12
 80014d0:	f001 fb3e 	bl	8002b50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80014d4:	200c      	movs	r0, #12
 80014d6:	f001 fb55 	bl	8002b84 <HAL_NVIC_EnableIRQ>

}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40021000 	.word	0x40021000

080014e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	@ 0x28
 80014ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
 80014fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fe:	4b41      	ldr	r3, [pc, #260]	@ (8001604 <MX_GPIO_Init+0x11c>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001502:	4a40      	ldr	r2, [pc, #256]	@ (8001604 <MX_GPIO_Init+0x11c>)
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800150a:	4b3e      	ldr	r3, [pc, #248]	@ (8001604 <MX_GPIO_Init+0x11c>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001516:	4b3b      	ldr	r3, [pc, #236]	@ (8001604 <MX_GPIO_Init+0x11c>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151a:	4a3a      	ldr	r2, [pc, #232]	@ (8001604 <MX_GPIO_Init+0x11c>)
 800151c:	f043 0320 	orr.w	r3, r3, #32
 8001520:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001522:	4b38      	ldr	r3, [pc, #224]	@ (8001604 <MX_GPIO_Init+0x11c>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001526:	f003 0320 	and.w	r3, r3, #32
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	4b35      	ldr	r3, [pc, #212]	@ (8001604 <MX_GPIO_Init+0x11c>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001532:	4a34      	ldr	r2, [pc, #208]	@ (8001604 <MX_GPIO_Init+0x11c>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800153a:	4b32      	ldr	r3, [pc, #200]	@ (8001604 <MX_GPIO_Init+0x11c>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	4b2f      	ldr	r3, [pc, #188]	@ (8001604 <MX_GPIO_Init+0x11c>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154a:	4a2e      	ldr	r2, [pc, #184]	@ (8001604 <MX_GPIO_Init+0x11c>)
 800154c:	f043 0302 	orr.w	r3, r3, #2
 8001550:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001552:	4b2c      	ldr	r3, [pc, #176]	@ (8001604 <MX_GPIO_Init+0x11c>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8001564:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001568:	f001 ffda 	bl	8003520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800156c:	2200      	movs	r2, #0
 800156e:	2140      	movs	r1, #64	@ 0x40
 8001570:	4825      	ldr	r0, [pc, #148]	@ (8001608 <MX_GPIO_Init+0x120>)
 8001572:	f001 ffd5 	bl	8003520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001576:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800157a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800157c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	481f      	ldr	r0, [pc, #124]	@ (800160c <MX_GPIO_Init+0x124>)
 800158e:	f001 fe45 	bl	800321c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001592:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001598:	2301      	movs	r3, #1
 800159a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	2300      	movs	r3, #0
 80015a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4619      	mov	r1, r3
 80015aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ae:	f001 fe35 	bl	800321c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4619      	mov	r1, r3
 80015c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ca:	f001 fe27 	bl	800321c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015ce:	2340      	movs	r3, #64	@ 0x40
 80015d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d2:	2301      	movs	r3, #1
 80015d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	4619      	mov	r1, r3
 80015e4:	4808      	ldr	r0, [pc, #32]	@ (8001608 <MX_GPIO_Init+0x120>)
 80015e6:	f001 fe19 	bl	800321c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2105      	movs	r1, #5
 80015ee:	2028      	movs	r0, #40	@ 0x28
 80015f0:	f001 faae 	bl	8002b50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015f4:	2028      	movs	r0, #40	@ 0x28
 80015f6:	f001 fac5 	bl	8002b84 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015fa:	bf00      	nop
 80015fc:	3728      	adds	r7, #40	@ 0x28
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40021000 	.word	0x40021000
 8001608:	48000400 	.word	0x48000400
 800160c:	48000800 	.word	0x48000800

08001610 <timer_callback>:
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d008      	beq.n	8001634 <timer_callback+0x24>
		HAL_IWDG_Refresh(&hiwdg);
 8001622:	4806      	ldr	r0, [pc, #24]	@ (800163c <timer_callback+0x2c>)
 8001624:	f002 f806 	bl	8003634 <HAL_IWDG_Refresh>
		BrusheMotorControlled();
 8001628:	f000 f80a 	bl	8001640 <BrusheMotorControlled>
		BrushUpDownControlled();
 800162c:	f000 f830 	bl	8001690 <BrushUpDownControlled>
		BrushUpDownMode();
 8001630:	f000 f868 	bl	8001704 <BrushUpDownMode>
	}
}
 8001634:	bf00      	nop
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000134 	.word	0x20000134

08001640 <BrusheMotorControlled>:

void BrusheMotorControlled()
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
	if (Brush)
 8001644:	4b0d      	ldr	r3, [pc, #52]	@ (800167c <BrusheMotorControlled+0x3c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00e      	beq.n	800166a <BrusheMotorControlled+0x2a>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001652:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001656:	f001 ff63 	bl	8003520 <HAL_GPIO_WritePin>
		PWM_write_duty(&BrushMTR, 2000, 100);
 800165a:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8001680 <BrusheMotorControlled+0x40>
 800165e:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8001684 <BrusheMotorControlled+0x44>
 8001662:	4809      	ldr	r0, [pc, #36]	@ (8001688 <BrusheMotorControlled+0x48>)
 8001664:	f7ff fc1c 	bl	8000ea0 <PWM_write_duty>
	}
	else
	{
		PWM_write_duty(&BrushMTR, 2000, 0);
	}
}
 8001668:	e006      	b.n	8001678 <BrusheMotorControlled+0x38>
		PWM_write_duty(&BrushMTR, 2000, 0);
 800166a:	eddf 0a08 	vldr	s1, [pc, #32]	@ 800168c <BrusheMotorControlled+0x4c>
 800166e:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8001684 <BrusheMotorControlled+0x44>
 8001672:	4805      	ldr	r0, [pc, #20]	@ (8001688 <BrusheMotorControlled+0x48>)
 8001674:	f7ff fc14 	bl	8000ea0 <PWM_write_duty>
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20003360 	.word	0x20003360
 8001680:	42c80000 	.word	0x42c80000
 8001684:	44fa0000 	.word	0x44fa0000
 8001688:	20003370 	.word	0x20003370
 800168c:	00000000 	.word	0x00000000

08001690 <BrushUpDownControlled>:
void BrushUpDownControlled()
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
	if (BrushUD_mode == 1)
 8001694:	4b16      	ldr	r3, [pc, #88]	@ (80016f0 <BrushUpDownControlled+0x60>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d10d      	bne.n	80016b8 <BrushUpDownControlled+0x28>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, RESET);
 800169c:	2200      	movs	r2, #0
 800169e:	2180      	movs	r1, #128	@ 0x80
 80016a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016a4:	f001 ff3c 	bl	8003520 <HAL_GPIO_WritePin>
		PWM_write_duty(&BrushUD, 2000, 100);
 80016a8:	eddf 0a12 	vldr	s1, [pc, #72]	@ 80016f4 <BrushUpDownControlled+0x64>
 80016ac:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 80016f8 <BrushUpDownControlled+0x68>
 80016b0:	4812      	ldr	r0, [pc, #72]	@ (80016fc <BrushUpDownControlled+0x6c>)
 80016b2:	f7ff fbf5 	bl	8000ea0 <PWM_write_duty>
	}
	else
	{
		PWM_write_duty(&BrushUD, 2000, 0);
	}
}
 80016b6:	e018      	b.n	80016ea <BrushUpDownControlled+0x5a>
	else if (BrushUD_mode == 2)
 80016b8:	4b0d      	ldr	r3, [pc, #52]	@ (80016f0 <BrushUpDownControlled+0x60>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d10d      	bne.n	80016dc <BrushUpDownControlled+0x4c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 80016c0:	2201      	movs	r2, #1
 80016c2:	2180      	movs	r1, #128	@ 0x80
 80016c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016c8:	f001 ff2a 	bl	8003520 <HAL_GPIO_WritePin>
		PWM_write_duty(&BrushUD, 2000, 100);
 80016cc:	eddf 0a09 	vldr	s1, [pc, #36]	@ 80016f4 <BrushUpDownControlled+0x64>
 80016d0:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 80016f8 <BrushUpDownControlled+0x68>
 80016d4:	4809      	ldr	r0, [pc, #36]	@ (80016fc <BrushUpDownControlled+0x6c>)
 80016d6:	f7ff fbe3 	bl	8000ea0 <PWM_write_duty>
}
 80016da:	e006      	b.n	80016ea <BrushUpDownControlled+0x5a>
		PWM_write_duty(&BrushUD, 2000, 0);
 80016dc:	eddf 0a08 	vldr	s1, [pc, #32]	@ 8001700 <BrushUpDownControlled+0x70>
 80016e0:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 80016f8 <BrushUpDownControlled+0x68>
 80016e4:	4805      	ldr	r0, [pc, #20]	@ (80016fc <BrushUpDownControlled+0x6c>)
 80016e6:	f7ff fbdb 	bl	8000ea0 <PWM_write_duty>
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20003368 	.word	0x20003368
 80016f4:	42c80000 	.word	0x42c80000
 80016f8:	44fa0000 	.word	0x44fa0000
 80016fc:	20003388 	.word	0x20003388
 8001700:	00000000 	.word	0x00000000

08001704 <BrushUpDownMode>:
void BrushUpDownMode()
{
 8001704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001708:	b084      	sub	sp, #16
 800170a:	af00      	add	r7, sp, #0
	static uint64_t brush_timestamp = 0;
	static uint64_t time_period = 500;
	if (Servo_switch && Servo_switch != prev_Servo){
 800170c:	4b2e      	ldr	r3, [pc, #184]	@ (80017c8 <BrushUpDownMode+0xc4>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d014      	beq.n	800173e <BrushUpDownMode+0x3a>
 8001714:	4b2c      	ldr	r3, [pc, #176]	@ (80017c8 <BrushUpDownMode+0xc4>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b2c      	ldr	r3, [pc, #176]	@ (80017cc <BrushUpDownMode+0xc8>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	d00e      	beq.n	800173e <BrushUpDownMode+0x3a>
		BrushUD_mode = 1;
 8001720:	4b2b      	ldr	r3, [pc, #172]	@ (80017d0 <BrushUpDownMode+0xcc>)
 8001722:	2201      	movs	r2, #1
 8001724:	601a      	str	r2, [r3, #0]
		brush_timestamp = HAL_GetTick();
 8001726:	f001 f94f 	bl	80029c8 <HAL_GetTick>
 800172a:	4603      	mov	r3, r0
 800172c:	2200      	movs	r2, #0
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	60fa      	str	r2, [r7, #12]
 8001732:	4b28      	ldr	r3, [pc, #160]	@ (80017d4 <BrushUpDownMode+0xd0>)
 8001734:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001738:	e9c3 1200 	strd	r1, r2, [r3]
 800173c:	e03b      	b.n	80017b6 <BrushUpDownMode+0xb2>
	}
	else if (Servo_switch != prev_Servo){
 800173e:	4b22      	ldr	r3, [pc, #136]	@ (80017c8 <BrushUpDownMode+0xc4>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	4b22      	ldr	r3, [pc, #136]	@ (80017cc <BrushUpDownMode+0xc8>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d00e      	beq.n	8001768 <BrushUpDownMode+0x64>
		BrushUD_mode = 2;
 800174a:	4b21      	ldr	r3, [pc, #132]	@ (80017d0 <BrushUpDownMode+0xcc>)
 800174c:	2202      	movs	r2, #2
 800174e:	601a      	str	r2, [r3, #0]
		brush_timestamp = HAL_GetTick();
 8001750:	f001 f93a 	bl	80029c8 <HAL_GetTick>
 8001754:	4603      	mov	r3, r0
 8001756:	2200      	movs	r2, #0
 8001758:	603b      	str	r3, [r7, #0]
 800175a:	607a      	str	r2, [r7, #4]
 800175c:	4b1d      	ldr	r3, [pc, #116]	@ (80017d4 <BrushUpDownMode+0xd0>)
 800175e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001762:	e9c3 1200 	strd	r1, r2, [r3]
 8001766:	e026      	b.n	80017b6 <BrushUpDownMode+0xb2>
	}
	else if ((BrushUD_mode == 1 || BrushUD_mode == 2) && HAL_GetTick() - brush_timestamp > time_period){
 8001768:	4b19      	ldr	r3, [pc, #100]	@ (80017d0 <BrushUpDownMode+0xcc>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d003      	beq.n	8001778 <BrushUpDownMode+0x74>
 8001770:	4b17      	ldr	r3, [pc, #92]	@ (80017d0 <BrushUpDownMode+0xcc>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d11e      	bne.n	80017b6 <BrushUpDownMode+0xb2>
 8001778:	f001 f926 	bl	80029c8 <HAL_GetTick>
 800177c:	4603      	mov	r3, r0
 800177e:	2200      	movs	r2, #0
 8001780:	4698      	mov	r8, r3
 8001782:	4691      	mov	r9, r2
 8001784:	4b13      	ldr	r3, [pc, #76]	@ (80017d4 <BrushUpDownMode+0xd0>)
 8001786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178a:	ebb8 0402 	subs.w	r4, r8, r2
 800178e:	eb69 0503 	sbc.w	r5, r9, r3
 8001792:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <BrushUpDownMode+0xd4>)
 8001794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001798:	42a2      	cmp	r2, r4
 800179a:	41ab      	sbcs	r3, r5
 800179c:	d20b      	bcs.n	80017b6 <BrushUpDownMode+0xb2>
		BrushUD_mode = 0;
 800179e:	4b0c      	ldr	r3, [pc, #48]	@ (80017d0 <BrushUpDownMode+0xcc>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
		brush_timestamp = HAL_GetTick();
 80017a4:	f001 f910 	bl	80029c8 <HAL_GetTick>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2200      	movs	r2, #0
 80017ac:	469a      	mov	sl, r3
 80017ae:	4693      	mov	fp, r2
 80017b0:	4b08      	ldr	r3, [pc, #32]	@ (80017d4 <BrushUpDownMode+0xd0>)
 80017b2:	e9c3 ab00 	strd	sl, fp, [r3]
	}

	prev_Servo = Servo_switch;
 80017b6:	4b04      	ldr	r3, [pc, #16]	@ (80017c8 <BrushUpDownMode+0xc4>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a04      	ldr	r2, [pc, #16]	@ (80017cc <BrushUpDownMode+0xc8>)
 80017bc:	6013      	str	r3, [r2, #0]

}
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017c8:	20003364 	.word	0x20003364
 80017cc:	2000336c 	.word	0x2000336c
 80017d0:	20003368 	.word	0x20003368
 80017d4:	200033a0 	.word	0x200033a0
 80017d8:	20000000 	.word	0x20000000

080017dc <subscription_callback_servo>:

void subscription_callback_servo(const void * msgin)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32 *)msgin;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	60fb      	str	r3, [r7, #12]
	Servo_switch = msg->data;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a03      	ldr	r2, [pc, #12]	@ (80017fc <subscription_callback_servo+0x20>)
 80017ee:	6013      	str	r3, [r2, #0]

}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	20003364 	.word	0x20003364

08001800 <subscription_callback_Brush>:

void subscription_callback_Brush(const void * msgin)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32 *)msgin;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	60fb      	str	r3, [r7, #12]
	Brush = msg->data;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a03      	ldr	r2, [pc, #12]	@ (8001820 <subscription_callback_Brush+0x20>)
 8001812:	6013      	str	r3, [r2, #0]

}
 8001814:	bf00      	nop
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	20003360 	.word	0x20003360
 8001824:	00000000 	.word	0x00000000

08001828 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001828:	b5b0      	push	{r4, r5, r7, lr}
 800182a:	b0b2      	sub	sp, #200	@ 0xc8
 800182c:	af02      	add	r7, sp, #8
 800182e:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
  /* USER CODE BEGIN 5 */
		rmw_uros_set_custom_transport(
 8001832:	4b53      	ldr	r3, [pc, #332]	@ (8001980 <StartDefaultTask+0x158>)
 8001834:	9301      	str	r3, [sp, #4]
 8001836:	4b53      	ldr	r3, [pc, #332]	@ (8001984 <StartDefaultTask+0x15c>)
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	4b53      	ldr	r3, [pc, #332]	@ (8001988 <StartDefaultTask+0x160>)
 800183c:	4a53      	ldr	r2, [pc, #332]	@ (800198c <StartDefaultTask+0x164>)
 800183e:	4954      	ldr	r1, [pc, #336]	@ (8001990 <StartDefaultTask+0x168>)
 8001840:	2001      	movs	r0, #1
 8001842:	f00a f819 	bl	800b878 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

		rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001846:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800184a:	4618      	mov	r0, r3
 800184c:	f009 ff34 	bl	800b6b8 <rcutils_get_zero_initialized_allocator>
		freeRTOS_allocator.allocate = microros_allocate;
 8001850:	4b50      	ldr	r3, [pc, #320]	@ (8001994 <StartDefaultTask+0x16c>)
 8001852:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		freeRTOS_allocator.deallocate = microros_deallocate;
 8001856:	4b50      	ldr	r3, [pc, #320]	@ (8001998 <StartDefaultTask+0x170>)
 8001858:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		freeRTOS_allocator.reallocate = microros_reallocate;
 800185c:	4b4f      	ldr	r3, [pc, #316]	@ (800199c <StartDefaultTask+0x174>)
 800185e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
		freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 8001862:	4b4f      	ldr	r3, [pc, #316]	@ (80019a0 <StartDefaultTask+0x178>)
 8001864:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

		if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001868:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800186c:	4618      	mov	r0, r3
 800186e:	f009 ff31 	bl	800b6d4 <rcutils_set_default_allocator>
 8001872:	4603      	mov	r3, r0
 8001874:	f083 0301 	eor.w	r3, r3, #1
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d004      	beq.n	8001888 <StartDefaultTask+0x60>
		  printf("Error on default allocators (line %d)\n", __LINE__);
 800187e:	f240 2186 	movw	r1, #646	@ 0x286
 8001882:	4848      	ldr	r0, [pc, #288]	@ (80019a4 <StartDefaultTask+0x17c>)
 8001884:	f015 fad2 	bl	8016e2c <iprintf>
		}

		// micro-ROS app
		allocator = rcl_get_default_allocator();
 8001888:	4c47      	ldr	r4, [pc, #284]	@ (80019a8 <StartDefaultTask+0x180>)
 800188a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800188e:	4618      	mov	r0, r3
 8001890:	f009 ff3e 	bl	800b710 <rcutils_get_default_allocator>
 8001894:	4625      	mov	r5, r4
 8001896:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 800189a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800189c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800189e:	6823      	ldr	r3, [r4, #0]
 80018a0:	602b      	str	r3, [r5, #0]

		init_options = rcl_get_zero_initialized_init_options();
 80018a2:	f008 fed9 	bl	800a658 <rcl_get_zero_initialized_init_options>
 80018a6:	4603      	mov	r3, r0
 80018a8:	4a40      	ldr	r2, [pc, #256]	@ (80019ac <StartDefaultTask+0x184>)
 80018aa:	6013      	str	r3, [r2, #0]
		rcl_init_options_init(&init_options, allocator);
 80018ac:	4b3e      	ldr	r3, [pc, #248]	@ (80019a8 <StartDefaultTask+0x180>)
 80018ae:	466c      	mov	r4, sp
 80018b0:	f103 020c 	add.w	r2, r3, #12
 80018b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018b8:	e884 0003 	stmia.w	r4, {r0, r1}
 80018bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018be:	483b      	ldr	r0, [pc, #236]	@ (80019ac <StartDefaultTask+0x184>)
 80018c0:	f008 fecc 	bl	800a65c <rcl_init_options_init>
		rcl_init_options_set_domain_id(&init_options, 1);
 80018c4:	2101      	movs	r1, #1
 80018c6:	4839      	ldr	r0, [pc, #228]	@ (80019ac <StartDefaultTask+0x184>)
 80018c8:	f008 ffc4 	bl	800a854 <rcl_init_options_set_domain_id>

		// Initialize rclc support object with custom options
		rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 80018cc:	4b36      	ldr	r3, [pc, #216]	@ (80019a8 <StartDefaultTask+0x180>)
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	4b36      	ldr	r3, [pc, #216]	@ (80019ac <StartDefaultTask+0x184>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	2100      	movs	r1, #0
 80018d6:	4836      	ldr	r0, [pc, #216]	@ (80019b0 <StartDefaultTask+0x188>)
 80018d8:	f009 fe12 	bl	800b500 <rclc_support_init_with_options>

		// Create node
		rclc_node_init_default(&node, "cubemx_node", "", &support);
 80018dc:	4b34      	ldr	r3, [pc, #208]	@ (80019b0 <StartDefaultTask+0x188>)
 80018de:	4a35      	ldr	r2, [pc, #212]	@ (80019b4 <StartDefaultTask+0x18c>)
 80018e0:	4935      	ldr	r1, [pc, #212]	@ (80019b8 <StartDefaultTask+0x190>)
 80018e2:	4836      	ldr	r0, [pc, #216]	@ (80019bc <StartDefaultTask+0x194>)
 80018e4:	f009 fe40 	bl	800b568 <rclc_node_init_default>

		// Create timer
		rclc_timer_init_default(&timer, &support, RCL_MS_TO_NS(100), timer_callback);
 80018e8:	4b35      	ldr	r3, [pc, #212]	@ (80019c0 <StartDefaultTask+0x198>)
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	a322      	add	r3, pc, #136	@ (adr r3, 8001978 <StartDefaultTask+0x150>)
 80018ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f2:	492f      	ldr	r1, [pc, #188]	@ (80019b0 <StartDefaultTask+0x188>)
 80018f4:	4833      	ldr	r0, [pc, #204]	@ (80019c4 <StartDefaultTask+0x19c>)
 80018f6:	f009 fea7 	bl	800b648 <rclc_timer_init_default>

		// Create subscriber
		rclc_subscription_init_default(
 80018fa:	f00b f8b9 	bl	800ca70 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80018fe:	4602      	mov	r2, r0
 8001900:	4b31      	ldr	r3, [pc, #196]	@ (80019c8 <StartDefaultTask+0x1a0>)
 8001902:	492e      	ldr	r1, [pc, #184]	@ (80019bc <StartDefaultTask+0x194>)
 8001904:	4831      	ldr	r0, [pc, #196]	@ (80019cc <StartDefaultTask+0x1a4>)
 8001906:	f009 fe6b 	bl	800b5e0 <rclc_subscription_init_default>
			&subscriber_servo,
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			"cubemx_publisher_servo");

		rclc_subscription_init_default(
 800190a:	f00b f8b1 	bl	800ca70 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 800190e:	4602      	mov	r2, r0
 8001910:	4b2f      	ldr	r3, [pc, #188]	@ (80019d0 <StartDefaultTask+0x1a8>)
 8001912:	492a      	ldr	r1, [pc, #168]	@ (80019bc <StartDefaultTask+0x194>)
 8001914:	482f      	ldr	r0, [pc, #188]	@ (80019d4 <StartDefaultTask+0x1ac>)
 8001916:	f009 fe63 	bl	800b5e0 <rclc_subscription_init_default>
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			"cubemx_publisher_Brush");

		// Initialize the executor
		executor = rclc_executor_get_zero_initialized_executor();
 800191a:	4c2f      	ldr	r4, [pc, #188]	@ (80019d8 <StartDefaultTask+0x1b0>)
 800191c:	463b      	mov	r3, r7
 800191e:	4618      	mov	r0, r3
 8001920:	f009 fae8 	bl	800aef4 <rclc_executor_get_zero_initialized_executor>
 8001924:	4620      	mov	r0, r4
 8001926:	463b      	mov	r3, r7
 8001928:	2288      	movs	r2, #136	@ 0x88
 800192a:	4619      	mov	r1, r3
 800192c:	f015 fc33 	bl	8017196 <memcpy>
		rclc_executor_init(&executor, &support.context, 3, &allocator);
 8001930:	4b1d      	ldr	r3, [pc, #116]	@ (80019a8 <StartDefaultTask+0x180>)
 8001932:	2203      	movs	r2, #3
 8001934:	491e      	ldr	r1, [pc, #120]	@ (80019b0 <StartDefaultTask+0x188>)
 8001936:	4828      	ldr	r0, [pc, #160]	@ (80019d8 <StartDefaultTask+0x1b0>)
 8001938:	f009 fae6 	bl	800af08 <rclc_executor_init>
		rclc_executor_add_timer(&executor, &timer);
 800193c:	4921      	ldr	r1, [pc, #132]	@ (80019c4 <StartDefaultTask+0x19c>)
 800193e:	4826      	ldr	r0, [pc, #152]	@ (80019d8 <StartDefaultTask+0x1b0>)
 8001940:	f009 fb86 	bl	800b050 <rclc_executor_add_timer>
		rclc_executor_add_subscription(&executor, &subscriber_servo, &msg_servo, subscription_callback_servo, ON_NEW_DATA);
 8001944:	2300      	movs	r3, #0
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	4b24      	ldr	r3, [pc, #144]	@ (80019dc <StartDefaultTask+0x1b4>)
 800194a:	4a25      	ldr	r2, [pc, #148]	@ (80019e0 <StartDefaultTask+0x1b8>)
 800194c:	491f      	ldr	r1, [pc, #124]	@ (80019cc <StartDefaultTask+0x1a4>)
 800194e:	4822      	ldr	r0, [pc, #136]	@ (80019d8 <StartDefaultTask+0x1b0>)
 8001950:	f009 fb4a 	bl	800afe8 <rclc_executor_add_subscription>
		rclc_executor_add_subscription(&executor, &subscriber_Brush, &msg_Brush, subscription_callback_Brush, ON_NEW_DATA);
 8001954:	2300      	movs	r3, #0
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	4b22      	ldr	r3, [pc, #136]	@ (80019e4 <StartDefaultTask+0x1bc>)
 800195a:	4a23      	ldr	r2, [pc, #140]	@ (80019e8 <StartDefaultTask+0x1c0>)
 800195c:	491d      	ldr	r1, [pc, #116]	@ (80019d4 <StartDefaultTask+0x1ac>)
 800195e:	481e      	ldr	r0, [pc, #120]	@ (80019d8 <StartDefaultTask+0x1b0>)
 8001960:	f009 fb42 	bl	800afe8 <rclc_executor_add_subscription>
		rclc_executor_spin(&executor);
 8001964:	481c      	ldr	r0, [pc, #112]	@ (80019d8 <StartDefaultTask+0x1b0>)
 8001966:	f009 fd89 	bl	800b47c <rclc_executor_spin>

		for(;;)
		{
			osDelay(10);
 800196a:	200a      	movs	r0, #10
 800196c:	f006 f9aa 	bl	8007cc4 <osDelay>
 8001970:	e7fb      	b.n	800196a <StartDefaultTask+0x142>
 8001972:	bf00      	nop
 8001974:	f3af 8000 	nop.w
 8001978:	05f5e100 	.word	0x05f5e100
 800197c:	00000000 	.word	0x00000000
 8001980:	08002879 	.word	0x08002879
 8001984:	08002815 	.word	0x08002815
 8001988:	080027f5 	.word	0x080027f5
 800198c:	080027c9 	.word	0x080027c9
 8001990:	20000144 	.word	0x20000144
 8001994:	08002501 	.word	0x08002501
 8001998:	08002545 	.word	0x08002545
 800199c:	0800257d 	.word	0x0800257d
 80019a0:	080025e9 	.word	0x080025e9
 80019a4:	08017f64 	.word	0x08017f64
 80019a8:	200032b8 	.word	0x200032b8
 80019ac:	200032d4 	.word	0x200032d4
 80019b0:	20003284 	.word	0x20003284
 80019b4:	08017f8c 	.word	0x08017f8c
 80019b8:	08017f90 	.word	0x08017f90
 80019bc:	200032cc 	.word	0x200032cc
 80019c0:	08001611 	.word	0x08001611
 80019c4:	20003280 	.word	0x20003280
 80019c8:	08017f9c 	.word	0x08017f9c
 80019cc:	20003270 	.word	0x20003270
 80019d0:	08017fb4 	.word	0x08017fb4
 80019d4:	20003278 	.word	0x20003278
 80019d8:	200032d8 	.word	0x200032d8
 80019dc:	080017dd 	.word	0x080017dd
 80019e0:	20003274 	.word	0x20003274
 80019e4:	08001801 	.word	0x08001801
 80019e8:	2000327c 	.word	0x2000327c

080019ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a04      	ldr	r2, [pc, #16]	@ (8001a0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d101      	bne.n	8001a02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019fe:	f000 ffd1 	bl	80029a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40012c00 	.word	0x40012c00

08001a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a14:	b672      	cpsid	i
}
 8001a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <Error_Handler+0x8>

08001a1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a22:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <HAL_MspInit+0x50>)
 8001a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a26:	4a11      	ldr	r2, [pc, #68]	@ (8001a6c <HAL_MspInit+0x50>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a6c <HAL_MspInit+0x50>)
 8001a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	607b      	str	r3, [r7, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a6c <HAL_MspInit+0x50>)
 8001a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a3e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a6c <HAL_MspInit+0x50>)
 8001a40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a44:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a46:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <HAL_MspInit+0x50>)
 8001a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a4e:	603b      	str	r3, [r7, #0]
 8001a50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	210f      	movs	r1, #15
 8001a56:	f06f 0001 	mvn.w	r0, #1
 8001a5a:	f001 f879 	bl	8002b50 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a5e:	f001 fe9d 	bl	800379c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40021000 	.word	0x40021000

08001a70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b09e      	sub	sp, #120	@ 0x78
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a88:	f107 0310 	add.w	r3, r7, #16
 8001a8c:	2254      	movs	r2, #84	@ 0x54
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4618      	mov	r0, r3
 8001a92:	f015 fab7 	bl	8017004 <memset>
  if(huart->Instance==LPUART1)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a4e      	ldr	r2, [pc, #312]	@ (8001bd4 <HAL_UART_MspInit+0x164>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	f040 8094 	bne.w	8001bca <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001aa2:	2320      	movs	r3, #32
 8001aa4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aaa:	f107 0310 	add.w	r3, r7, #16
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f002 fbe4 	bl	800427c <HAL_RCCEx_PeriphCLKConfig>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001aba:	f7ff ffa9 	bl	8001a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001abe:	4b46      	ldr	r3, [pc, #280]	@ (8001bd8 <HAL_UART_MspInit+0x168>)
 8001ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac2:	4a45      	ldr	r2, [pc, #276]	@ (8001bd8 <HAL_UART_MspInit+0x168>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001aca:	4b43      	ldr	r3, [pc, #268]	@ (8001bd8 <HAL_UART_MspInit+0x168>)
 8001acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	4b40      	ldr	r3, [pc, #256]	@ (8001bd8 <HAL_UART_MspInit+0x168>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ada:	4a3f      	ldr	r2, [pc, #252]	@ (8001bd8 <HAL_UART_MspInit+0x168>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ae2:	4b3d      	ldr	r3, [pc, #244]	@ (8001bd8 <HAL_UART_MspInit+0x168>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001aee:	230c      	movs	r3, #12
 8001af0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	2300      	movs	r3, #0
 8001afc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001afe:	230c      	movs	r3, #12
 8001b00:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b02:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b06:	4619      	mov	r1, r3
 8001b08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b0c:	f001 fb86 	bl	800321c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 8001b10:	4b32      	ldr	r3, [pc, #200]	@ (8001bdc <HAL_UART_MspInit+0x16c>)
 8001b12:	4a33      	ldr	r2, [pc, #204]	@ (8001be0 <HAL_UART_MspInit+0x170>)
 8001b14:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001b16:	4b31      	ldr	r3, [pc, #196]	@ (8001bdc <HAL_UART_MspInit+0x16c>)
 8001b18:	2223      	movs	r2, #35	@ 0x23
 8001b1a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b1c:	4b2f      	ldr	r3, [pc, #188]	@ (8001bdc <HAL_UART_MspInit+0x16c>)
 8001b1e:	2210      	movs	r2, #16
 8001b20:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b22:	4b2e      	ldr	r3, [pc, #184]	@ (8001bdc <HAL_UART_MspInit+0x16c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b28:	4b2c      	ldr	r3, [pc, #176]	@ (8001bdc <HAL_UART_MspInit+0x16c>)
 8001b2a:	2280      	movs	r2, #128	@ 0x80
 8001b2c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b2e:	4b2b      	ldr	r3, [pc, #172]	@ (8001bdc <HAL_UART_MspInit+0x16c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b34:	4b29      	ldr	r3, [pc, #164]	@ (8001bdc <HAL_UART_MspInit+0x16c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001b3a:	4b28      	ldr	r3, [pc, #160]	@ (8001bdc <HAL_UART_MspInit+0x16c>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001b40:	4b26      	ldr	r3, [pc, #152]	@ (8001bdc <HAL_UART_MspInit+0x16c>)
 8001b42:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001b46:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001b48:	4824      	ldr	r0, [pc, #144]	@ (8001bdc <HAL_UART_MspInit+0x16c>)
 8001b4a:	f001 f829 	bl	8002ba0 <HAL_DMA_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8001b54:	f7ff ff5c 	bl	8001a10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a20      	ldr	r2, [pc, #128]	@ (8001bdc <HAL_UART_MspInit+0x16c>)
 8001b5c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001b5e:	4a1f      	ldr	r2, [pc, #124]	@ (8001bdc <HAL_UART_MspInit+0x16c>)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8001b64:	4b1f      	ldr	r3, [pc, #124]	@ (8001be4 <HAL_UART_MspInit+0x174>)
 8001b66:	4a20      	ldr	r2, [pc, #128]	@ (8001be8 <HAL_UART_MspInit+0x178>)
 8001b68:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001be4 <HAL_UART_MspInit+0x174>)
 8001b6c:	2222      	movs	r2, #34	@ 0x22
 8001b6e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b70:	4b1c      	ldr	r3, [pc, #112]	@ (8001be4 <HAL_UART_MspInit+0x174>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b76:	4b1b      	ldr	r3, [pc, #108]	@ (8001be4 <HAL_UART_MspInit+0x174>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b7c:	4b19      	ldr	r3, [pc, #100]	@ (8001be4 <HAL_UART_MspInit+0x174>)
 8001b7e:	2280      	movs	r2, #128	@ 0x80
 8001b80:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b82:	4b18      	ldr	r3, [pc, #96]	@ (8001be4 <HAL_UART_MspInit+0x174>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b88:	4b16      	ldr	r3, [pc, #88]	@ (8001be4 <HAL_UART_MspInit+0x174>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8001b8e:	4b15      	ldr	r3, [pc, #84]	@ (8001be4 <HAL_UART_MspInit+0x174>)
 8001b90:	2220      	movs	r2, #32
 8001b92:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001b94:	4b13      	ldr	r3, [pc, #76]	@ (8001be4 <HAL_UART_MspInit+0x174>)
 8001b96:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001b9a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001b9c:	4811      	ldr	r0, [pc, #68]	@ (8001be4 <HAL_UART_MspInit+0x174>)
 8001b9e:	f000 ffff 	bl	8002ba0 <HAL_DMA_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8001ba8:	f7ff ff32 	bl	8001a10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a0d      	ldr	r2, [pc, #52]	@ (8001be4 <HAL_UART_MspInit+0x174>)
 8001bb0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001bb4:	4a0b      	ldr	r2, [pc, #44]	@ (8001be4 <HAL_UART_MspInit+0x174>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2105      	movs	r1, #5
 8001bbe:	205b      	movs	r0, #91	@ 0x5b
 8001bc0:	f000 ffc6 	bl	8002b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001bc4:	205b      	movs	r0, #91	@ 0x5b
 8001bc6:	f000 ffdd 	bl	8002b84 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8001bca:	bf00      	nop
 8001bcc:	3778      	adds	r7, #120	@ 0x78
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40008000 	.word	0x40008000
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	200001d8 	.word	0x200001d8
 8001be0:	40020008 	.word	0x40020008
 8001be4:	20000238 	.word	0x20000238
 8001be8:	4002001c 	.word	0x4002001c

08001bec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bfc:	d10c      	bne.n	8001c18 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bfe:	4b12      	ldr	r3, [pc, #72]	@ (8001c48 <HAL_TIM_Base_MspInit+0x5c>)
 8001c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c02:	4a11      	ldr	r2, [pc, #68]	@ (8001c48 <HAL_TIM_Base_MspInit+0x5c>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c48 <HAL_TIM_Base_MspInit+0x5c>)
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c16:	e010      	b.n	8001c3a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a0b      	ldr	r2, [pc, #44]	@ (8001c4c <HAL_TIM_Base_MspInit+0x60>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d10b      	bne.n	8001c3a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c22:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <HAL_TIM_Base_MspInit+0x5c>)
 8001c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c26:	4a08      	ldr	r2, [pc, #32]	@ (8001c48 <HAL_TIM_Base_MspInit+0x5c>)
 8001c28:	f043 0302 	orr.w	r3, r3, #2
 8001c2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c2e:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <HAL_TIM_Base_MspInit+0x5c>)
 8001c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]
}
 8001c3a:	bf00      	nop
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40000400 	.word	0x40000400

08001c50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	@ 0x28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c70:	d11d      	bne.n	8001cae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c72:	4b30      	ldr	r3, [pc, #192]	@ (8001d34 <HAL_TIM_MspPostInit+0xe4>)
 8001c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c76:	4a2f      	ldr	r2, [pc, #188]	@ (8001d34 <HAL_TIM_MspPostInit+0xe4>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001d34 <HAL_TIM_MspPostInit+0xe4>)
 8001c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c8a:	2320      	movs	r3, #32
 8001c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c96:	2300      	movs	r3, #0
 8001c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9e:	f107 0314 	add.w	r3, r7, #20
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ca8:	f001 fab8 	bl	800321c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001cac:	e03d      	b.n	8001d2a <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM3)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a21      	ldr	r2, [pc, #132]	@ (8001d38 <HAL_TIM_MspPostInit+0xe8>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d138      	bne.n	8001d2a <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d34 <HAL_TIM_MspPostInit+0xe4>)
 8001cba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cbc:	4a1d      	ldr	r2, [pc, #116]	@ (8001d34 <HAL_TIM_MspPostInit+0xe4>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d34 <HAL_TIM_MspPostInit+0xe4>)
 8001cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd0:	4b18      	ldr	r3, [pc, #96]	@ (8001d34 <HAL_TIM_MspPostInit+0xe4>)
 8001cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd4:	4a17      	ldr	r2, [pc, #92]	@ (8001d34 <HAL_TIM_MspPostInit+0xe4>)
 8001cd6:	f043 0304 	orr.w	r3, r3, #4
 8001cda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cdc:	4b15      	ldr	r3, [pc, #84]	@ (8001d34 <HAL_TIM_MspPostInit+0xe4>)
 8001cde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ce8:	2340      	movs	r3, #64	@ 0x40
 8001cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfc:	f107 0314 	add.w	r3, r7, #20
 8001d00:	4619      	mov	r1, r3
 8001d02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d06:	f001 fa89 	bl	800321c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d0a:	2380      	movs	r3, #128	@ 0x80
 8001d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d16:	2300      	movs	r3, #0
 8001d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d1e:	f107 0314 	add.w	r3, r7, #20
 8001d22:	4619      	mov	r1, r3
 8001d24:	4805      	ldr	r0, [pc, #20]	@ (8001d3c <HAL_TIM_MspPostInit+0xec>)
 8001d26:	f001 fa79 	bl	800321c <HAL_GPIO_Init>
}
 8001d2a:	bf00      	nop
 8001d2c:	3728      	adds	r7, #40	@ 0x28
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40000400 	.word	0x40000400
 8001d3c:	48000800 	.word	0x48000800

08001d40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08c      	sub	sp, #48	@ 0x30
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d50:	4b2c      	ldr	r3, [pc, #176]	@ (8001e04 <HAL_InitTick+0xc4>)
 8001d52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d54:	4a2b      	ldr	r2, [pc, #172]	@ (8001e04 <HAL_InitTick+0xc4>)
 8001d56:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d5a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d5c:	4b29      	ldr	r3, [pc, #164]	@ (8001e04 <HAL_InitTick+0xc4>)
 8001d5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d68:	f107 020c 	add.w	r2, r7, #12
 8001d6c:	f107 0310 	add.w	r3, r7, #16
 8001d70:	4611      	mov	r1, r2
 8001d72:	4618      	mov	r0, r3
 8001d74:	f002 fa0a 	bl	800418c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001d78:	f002 f9f2 	bl	8004160 <HAL_RCC_GetPCLK2Freq>
 8001d7c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d80:	4a21      	ldr	r2, [pc, #132]	@ (8001e08 <HAL_InitTick+0xc8>)
 8001d82:	fba2 2303 	umull	r2, r3, r2, r3
 8001d86:	0c9b      	lsrs	r3, r3, #18
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d8c:	4b1f      	ldr	r3, [pc, #124]	@ (8001e0c <HAL_InitTick+0xcc>)
 8001d8e:	4a20      	ldr	r2, [pc, #128]	@ (8001e10 <HAL_InitTick+0xd0>)
 8001d90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d92:	4b1e      	ldr	r3, [pc, #120]	@ (8001e0c <HAL_InitTick+0xcc>)
 8001d94:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d98:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d9a:	4a1c      	ldr	r2, [pc, #112]	@ (8001e0c <HAL_InitTick+0xcc>)
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001da0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e0c <HAL_InitTick+0xcc>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da6:	4b19      	ldr	r3, [pc, #100]	@ (8001e0c <HAL_InitTick+0xcc>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001dac:	4817      	ldr	r0, [pc, #92]	@ (8001e0c <HAL_InitTick+0xcc>)
 8001dae:	f002 fcb3 	bl	8004718 <HAL_TIM_Base_Init>
 8001db2:	4603      	mov	r3, r0
 8001db4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001db8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d11b      	bne.n	8001df8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001dc0:	4812      	ldr	r0, [pc, #72]	@ (8001e0c <HAL_InitTick+0xcc>)
 8001dc2:	f002 fd71 	bl	80048a8 <HAL_TIM_Base_Start_IT>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001dcc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d111      	bne.n	8001df8 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001dd4:	2019      	movs	r0, #25
 8001dd6:	f000 fed5 	bl	8002b84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b0f      	cmp	r3, #15
 8001dde:	d808      	bhi.n	8001df2 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001de0:	2200      	movs	r2, #0
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	2019      	movs	r0, #25
 8001de6:	f000 feb3 	bl	8002b50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dea:	4a0a      	ldr	r2, [pc, #40]	@ (8001e14 <HAL_InitTick+0xd4>)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	e002      	b.n	8001df8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001df8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3730      	adds	r7, #48	@ 0x30
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40021000 	.word	0x40021000
 8001e08:	431bde83 	.word	0x431bde83
 8001e0c:	200033a8 	.word	0x200033a8
 8001e10:	40012c00 	.word	0x40012c00
 8001e14:	20000010 	.word	0x20000010

08001e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e1c:	bf00      	nop
 8001e1e:	e7fd      	b.n	8001e1c <NMI_Handler+0x4>

08001e20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e24:	bf00      	nop
 8001e26:	e7fd      	b.n	8001e24 <HardFault_Handler+0x4>

08001e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e2c:	bf00      	nop
 8001e2e:	e7fd      	b.n	8001e2c <MemManage_Handler+0x4>

08001e30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e34:	bf00      	nop
 8001e36:	e7fd      	b.n	8001e34 <BusFault_Handler+0x4>

08001e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e3c:	bf00      	nop
 8001e3e:	e7fd      	b.n	8001e3c <UsageFault_Handler+0x4>

08001e40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e44:	bf00      	nop
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001e54:	4802      	ldr	r0, [pc, #8]	@ (8001e60 <DMA1_Channel1_IRQHandler+0x10>)
 8001e56:	f001 f886 	bl	8002f66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	200001d8 	.word	0x200001d8

08001e64 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001e68:	4802      	ldr	r0, [pc, #8]	@ (8001e74 <DMA1_Channel2_IRQHandler+0x10>)
 8001e6a:	f001 f87c 	bl	8002f66 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000238 	.word	0x20000238

08001e78 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e7c:	4802      	ldr	r0, [pc, #8]	@ (8001e88 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001e7e:	f002 feff 	bl	8004c80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	200033a8 	.word	0x200033a8

08001e8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001e90:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001e94:	f001 fb5c 	bl	8003550 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e98:	bf00      	nop
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001ea0:	4802      	ldr	r0, [pc, #8]	@ (8001eac <LPUART1_IRQHandler+0x10>)
 8001ea2:	f004 f9bd 	bl	8006220 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000144 	.word	0x20000144

08001eb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return 1;
 8001eb4:	2301      	movs	r3, #1
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <_kill>:

int _kill(int pid, int sig)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001eca:	f015 f92f 	bl	801712c <__errno>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2216      	movs	r2, #22
 8001ed2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ed4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <_exit>:

void _exit (int status)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ee8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff ffe7 	bl	8001ec0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ef2:	bf00      	nop
 8001ef4:	e7fd      	b.n	8001ef2 <_exit+0x12>

08001ef6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b086      	sub	sp, #24
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	60f8      	str	r0, [r7, #12]
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	e00a      	b.n	8001f1e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f08:	f3af 8000 	nop.w
 8001f0c:	4601      	mov	r1, r0
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	1c5a      	adds	r2, r3, #1
 8001f12:	60ba      	str	r2, [r7, #8]
 8001f14:	b2ca      	uxtb	r2, r1
 8001f16:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	dbf0      	blt.n	8001f08 <_read+0x12>
  }

  return len;
 8001f26:	687b      	ldr	r3, [r7, #4]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	e009      	b.n	8001f56 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	1c5a      	adds	r2, r3, #1
 8001f46:	60ba      	str	r2, [r7, #8]
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	3301      	adds	r3, #1
 8001f54:	617b      	str	r3, [r7, #20]
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	dbf1      	blt.n	8001f42 <_write+0x12>
  }
  return len;
 8001f5e:	687b      	ldr	r3, [r7, #4]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <_close>:

int _close(int file)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f90:	605a      	str	r2, [r3, #4]
  return 0;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <_isatty>:

int _isatty(int file)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fa8:	2301      	movs	r3, #1
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b085      	sub	sp, #20
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fd8:	4a14      	ldr	r2, [pc, #80]	@ (800202c <_sbrk+0x5c>)
 8001fda:	4b15      	ldr	r3, [pc, #84]	@ (8002030 <_sbrk+0x60>)
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fe4:	4b13      	ldr	r3, [pc, #76]	@ (8002034 <_sbrk+0x64>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d102      	bne.n	8001ff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fec:	4b11      	ldr	r3, [pc, #68]	@ (8002034 <_sbrk+0x64>)
 8001fee:	4a12      	ldr	r2, [pc, #72]	@ (8002038 <_sbrk+0x68>)
 8001ff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ff2:	4b10      	ldr	r3, [pc, #64]	@ (8002034 <_sbrk+0x64>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d207      	bcs.n	8002010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002000:	f015 f894 	bl	801712c <__errno>
 8002004:	4603      	mov	r3, r0
 8002006:	220c      	movs	r2, #12
 8002008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800200a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800200e:	e009      	b.n	8002024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002010:	4b08      	ldr	r3, [pc, #32]	@ (8002034 <_sbrk+0x64>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002016:	4b07      	ldr	r3, [pc, #28]	@ (8002034 <_sbrk+0x64>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	4a05      	ldr	r2, [pc, #20]	@ (8002034 <_sbrk+0x64>)
 8002020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002022:	68fb      	ldr	r3, [r7, #12]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20020000 	.word	0x20020000
 8002030:	00000400 	.word	0x00000400
 8002034:	200033f8 	.word	0x200033f8
 8002038:	2000add8 	.word	0x2000add8

0800203c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002040:	4b06      	ldr	r3, [pc, #24]	@ (800205c <SystemInit+0x20>)
 8002042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002046:	4a05      	ldr	r2, [pc, #20]	@ (800205c <SystemInit+0x20>)
 8002048:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800204c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08a      	sub	sp, #40	@ 0x28
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002068:	2300      	movs	r3, #0
 800206a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800206c:	f006 fe6c 	bl	8008d48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002070:	4b5a      	ldr	r3, [pc, #360]	@ (80021dc <pvPortMallocMicroROS+0x17c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8002078:	f000 f986 	bl	8002388 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800207c:	4b58      	ldr	r3, [pc, #352]	@ (80021e0 <pvPortMallocMicroROS+0x180>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4013      	ands	r3, r2
 8002084:	2b00      	cmp	r3, #0
 8002086:	f040 8090 	bne.w	80021aa <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d01e      	beq.n	80020ce <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8002090:	2208      	movs	r2, #8
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d015      	beq.n	80020ce <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f023 0307 	bic.w	r3, r3, #7
 80020a8:	3308      	adds	r3, #8
 80020aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00b      	beq.n	80020ce <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80020b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020ba:	f383 8811 	msr	BASEPRI, r3
 80020be:	f3bf 8f6f 	isb	sy
 80020c2:	f3bf 8f4f 	dsb	sy
 80020c6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80020c8:	bf00      	nop
 80020ca:	bf00      	nop
 80020cc:	e7fd      	b.n	80020ca <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d06a      	beq.n	80021aa <pvPortMallocMicroROS+0x14a>
 80020d4:	4b43      	ldr	r3, [pc, #268]	@ (80021e4 <pvPortMallocMicroROS+0x184>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d865      	bhi.n	80021aa <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80020de:	4b42      	ldr	r3, [pc, #264]	@ (80021e8 <pvPortMallocMicroROS+0x188>)
 80020e0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80020e2:	4b41      	ldr	r3, [pc, #260]	@ (80021e8 <pvPortMallocMicroROS+0x188>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80020e8:	e004      	b.n	80020f4 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 80020ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80020ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80020f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d903      	bls.n	8002106 <pvPortMallocMicroROS+0xa6>
 80020fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f1      	bne.n	80020ea <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002106:	4b35      	ldr	r3, [pc, #212]	@ (80021dc <pvPortMallocMicroROS+0x17c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800210c:	429a      	cmp	r2, r3
 800210e:	d04c      	beq.n	80021aa <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2208      	movs	r2, #8
 8002116:	4413      	add	r3, r2
 8002118:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800211a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	6a3b      	ldr	r3, [r7, #32]
 8002120:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	1ad2      	subs	r2, r2, r3
 800212a:	2308      	movs	r3, #8
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	429a      	cmp	r2, r3
 8002130:	d920      	bls.n	8002174 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4413      	add	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00b      	beq.n	800215c <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8002144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002148:	f383 8811 	msr	BASEPRI, r3
 800214c:	f3bf 8f6f 	isb	sy
 8002150:	f3bf 8f4f 	dsb	sy
 8002154:	613b      	str	r3, [r7, #16]
}
 8002156:	bf00      	nop
 8002158:	bf00      	nop
 800215a:	e7fd      	b.n	8002158 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800215c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	1ad2      	subs	r2, r2, r3
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800216e:	69b8      	ldr	r0, [r7, #24]
 8002170:	f000 f96c 	bl	800244c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002174:	4b1b      	ldr	r3, [pc, #108]	@ (80021e4 <pvPortMallocMicroROS+0x184>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	4a19      	ldr	r2, [pc, #100]	@ (80021e4 <pvPortMallocMicroROS+0x184>)
 8002180:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002182:	4b18      	ldr	r3, [pc, #96]	@ (80021e4 <pvPortMallocMicroROS+0x184>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	4b19      	ldr	r3, [pc, #100]	@ (80021ec <pvPortMallocMicroROS+0x18c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d203      	bcs.n	8002196 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800218e:	4b15      	ldr	r3, [pc, #84]	@ (80021e4 <pvPortMallocMicroROS+0x184>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a16      	ldr	r2, [pc, #88]	@ (80021ec <pvPortMallocMicroROS+0x18c>)
 8002194:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	4b11      	ldr	r3, [pc, #68]	@ (80021e0 <pvPortMallocMicroROS+0x180>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	431a      	orrs	r2, r3
 80021a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80021a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80021aa:	f006 fddb 	bl	8008d64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d00b      	beq.n	80021d0 <pvPortMallocMicroROS+0x170>
	__asm volatile
 80021b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021bc:	f383 8811 	msr	BASEPRI, r3
 80021c0:	f3bf 8f6f 	isb	sy
 80021c4:	f3bf 8f4f 	dsb	sy
 80021c8:	60fb      	str	r3, [r7, #12]
}
 80021ca:	bf00      	nop
 80021cc:	bf00      	nop
 80021ce:	e7fd      	b.n	80021cc <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80021d0:	69fb      	ldr	r3, [r7, #28]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3728      	adds	r7, #40	@ 0x28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20004004 	.word	0x20004004
 80021e0:	20004010 	.word	0x20004010
 80021e4:	20004008 	.word	0x20004008
 80021e8:	20003ffc 	.word	0x20003ffc
 80021ec:	2000400c 	.word	0x2000400c

080021f0 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d04a      	beq.n	8002298 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002202:	2308      	movs	r3, #8
 8002204:	425b      	negs	r3, r3
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	4413      	add	r3, r2
 800220a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	4b22      	ldr	r3, [pc, #136]	@ (80022a0 <vPortFreeMicroROS+0xb0>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4013      	ands	r3, r2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10b      	bne.n	8002236 <vPortFreeMicroROS+0x46>
	__asm volatile
 800221e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002222:	f383 8811 	msr	BASEPRI, r3
 8002226:	f3bf 8f6f 	isb	sy
 800222a:	f3bf 8f4f 	dsb	sy
 800222e:	60fb      	str	r3, [r7, #12]
}
 8002230:	bf00      	nop
 8002232:	bf00      	nop
 8002234:	e7fd      	b.n	8002232 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00b      	beq.n	8002256 <vPortFreeMicroROS+0x66>
	__asm volatile
 800223e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002242:	f383 8811 	msr	BASEPRI, r3
 8002246:	f3bf 8f6f 	isb	sy
 800224a:	f3bf 8f4f 	dsb	sy
 800224e:	60bb      	str	r3, [r7, #8]
}
 8002250:	bf00      	nop
 8002252:	bf00      	nop
 8002254:	e7fd      	b.n	8002252 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	4b11      	ldr	r3, [pc, #68]	@ (80022a0 <vPortFreeMicroROS+0xb0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4013      	ands	r3, r2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d019      	beq.n	8002298 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d115      	bne.n	8002298 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	4b0b      	ldr	r3, [pc, #44]	@ (80022a0 <vPortFreeMicroROS+0xb0>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	43db      	mvns	r3, r3
 8002276:	401a      	ands	r2, r3
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800227c:	f006 fd64 	bl	8008d48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	4b07      	ldr	r3, [pc, #28]	@ (80022a4 <vPortFreeMicroROS+0xb4>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4413      	add	r3, r2
 800228a:	4a06      	ldr	r2, [pc, #24]	@ (80022a4 <vPortFreeMicroROS+0xb4>)
 800228c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800228e:	6938      	ldr	r0, [r7, #16]
 8002290:	f000 f8dc 	bl	800244c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002294:	f006 fd66 	bl	8008d64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002298:	bf00      	nop
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20004010 	.word	0x20004010
 80022a4:	20004008 	.word	0x20004008

080022a8 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80022a8:	b480      	push	{r7}
 80022aa:	b087      	sub	sp, #28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80022b4:	2308      	movs	r3, #8
 80022b6:	425b      	negs	r3, r3
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	4413      	add	r3, r2
 80022bc:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	4b06      	ldr	r3, [pc, #24]	@ (80022e0 <getBlockSize+0x38>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	43db      	mvns	r3, r3
 80022cc:	4013      	ands	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]

	return count;
 80022d0:	68fb      	ldr	r3, [r7, #12]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	371c      	adds	r7, #28
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	20004010 	.word	0x20004010

080022e4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80022ee:	f006 fd2b 	bl	8008d48 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80022f2:	6838      	ldr	r0, [r7, #0]
 80022f4:	f7ff feb4 	bl	8002060 <pvPortMallocMicroROS>
 80022f8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d017      	beq.n	8002330 <pvPortReallocMicroROS+0x4c>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d014      	beq.n	8002330 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff ffce 	bl	80022a8 <getBlockSize>
 800230c:	4603      	mov	r3, r0
 800230e:	2208      	movs	r2, #8
 8002310:	1a9b      	subs	r3, r3, r2
 8002312:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	429a      	cmp	r2, r3
 800231a:	d201      	bcs.n	8002320 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	68b8      	ldr	r0, [r7, #8]
 8002326:	f014 ff36 	bl	8017196 <memcpy>

		vPortFreeMicroROS(pv);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff ff60 	bl	80021f0 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8002330:	f006 fd18 	bl	8008d64 <xTaskResumeAll>

	return newmem;
 8002334:	68bb      	ldr	r3, [r7, #8]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b086      	sub	sp, #24
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8002348:	f006 fcfe 	bl	8008d48 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	fb02 f303 	mul.w	r3, r2, r3
 8002354:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8002356:	6978      	ldr	r0, [r7, #20]
 8002358:	f7ff fe82 	bl	8002060 <pvPortMallocMicroROS>
 800235c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	613b      	str	r3, [r7, #16]

  	while(count--)
 8002362:	e004      	b.n	800236e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	613a      	str	r2, [r7, #16]
 800236a:	2200      	movs	r2, #0
 800236c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	1e5a      	subs	r2, r3, #1
 8002372:	617a      	str	r2, [r7, #20]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f5      	bne.n	8002364 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8002378:	f006 fcf4 	bl	8008d64 <xTaskResumeAll>
  	return mem;
 800237c:	68fb      	ldr	r3, [r7, #12]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800238e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002392:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002394:	4b27      	ldr	r3, [pc, #156]	@ (8002434 <prvHeapInit+0xac>)
 8002396:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00c      	beq.n	80023bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	3307      	adds	r3, #7
 80023a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f023 0307 	bic.w	r3, r3, #7
 80023ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002434 <prvHeapInit+0xac>)
 80023b8:	4413      	add	r3, r2
 80023ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80023c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002438 <prvHeapInit+0xb0>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80023c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002438 <prvHeapInit+0xb0>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	4413      	add	r3, r2
 80023d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80023d4:	2208      	movs	r2, #8
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1a9b      	subs	r3, r3, r2
 80023da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f023 0307 	bic.w	r3, r3, #7
 80023e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4a15      	ldr	r2, [pc, #84]	@ (800243c <prvHeapInit+0xb4>)
 80023e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80023ea:	4b14      	ldr	r3, [pc, #80]	@ (800243c <prvHeapInit+0xb4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2200      	movs	r2, #0
 80023f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80023f2:	4b12      	ldr	r3, [pc, #72]	@ (800243c <prvHeapInit+0xb4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	1ad2      	subs	r2, r2, r3
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002408:	4b0c      	ldr	r3, [pc, #48]	@ (800243c <prvHeapInit+0xb4>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	4a0a      	ldr	r2, [pc, #40]	@ (8002440 <prvHeapInit+0xb8>)
 8002416:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	4a09      	ldr	r2, [pc, #36]	@ (8002444 <prvHeapInit+0xbc>)
 800241e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002420:	4b09      	ldr	r3, [pc, #36]	@ (8002448 <prvHeapInit+0xc0>)
 8002422:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002426:	601a      	str	r2, [r3, #0]
}
 8002428:	bf00      	nop
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	200033fc 	.word	0x200033fc
 8002438:	20003ffc 	.word	0x20003ffc
 800243c:	20004004 	.word	0x20004004
 8002440:	2000400c 	.word	0x2000400c
 8002444:	20004008 	.word	0x20004008
 8002448:	20004010 	.word	0x20004010

0800244c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002454:	4b28      	ldr	r3, [pc, #160]	@ (80024f8 <prvInsertBlockIntoFreeList+0xac>)
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	e002      	b.n	8002460 <prvInsertBlockIntoFreeList+0x14>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	429a      	cmp	r2, r3
 8002468:	d8f7      	bhi.n	800245a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	4413      	add	r3, r2
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	429a      	cmp	r2, r3
 800247a:	d108      	bne.n	800248e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	441a      	add	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	441a      	add	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d118      	bne.n	80024d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	4b15      	ldr	r3, [pc, #84]	@ (80024fc <prvInsertBlockIntoFreeList+0xb0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d00d      	beq.n	80024ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	441a      	add	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	e008      	b.n	80024dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80024ca:	4b0c      	ldr	r3, [pc, #48]	@ (80024fc <prvInsertBlockIntoFreeList+0xb0>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	e003      	b.n	80024dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d002      	beq.n	80024ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80024ea:	bf00      	nop
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	20003ffc 	.word	0x20003ffc
 80024fc:	20004004 	.word	0x20004004

08002500 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800250a:	4b0c      	ldr	r3, [pc, #48]	@ (800253c <microros_allocate+0x3c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	461a      	mov	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4413      	add	r3, r2
 8002514:	461a      	mov	r2, r3
 8002516:	4b09      	ldr	r3, [pc, #36]	@ (800253c <microros_allocate+0x3c>)
 8002518:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800251a:	4b09      	ldr	r3, [pc, #36]	@ (8002540 <microros_allocate+0x40>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	461a      	mov	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4413      	add	r3, r2
 8002524:	461a      	mov	r2, r3
 8002526:	4b06      	ldr	r3, [pc, #24]	@ (8002540 <microros_allocate+0x40>)
 8002528:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff fd98 	bl	8002060 <pvPortMallocMicroROS>
 8002530:	4603      	mov	r3, r0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20004014 	.word	0x20004014
 8002540:	20004018 	.word	0x20004018

08002544 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00c      	beq.n	800256e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff fea7 	bl	80022a8 <getBlockSize>
 800255a:	4603      	mov	r3, r0
 800255c:	4a06      	ldr	r2, [pc, #24]	@ (8002578 <microros_deallocate+0x34>)
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	461a      	mov	r2, r3
 8002564:	4b04      	ldr	r3, [pc, #16]	@ (8002578 <microros_deallocate+0x34>)
 8002566:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff fe41 	bl	80021f0 <vPortFreeMicroROS>
  }
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20004018 	.word	0x20004018

0800257c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002588:	4b15      	ldr	r3, [pc, #84]	@ (80025e0 <microros_reallocate+0x64>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	461a      	mov	r2, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	4413      	add	r3, r2
 8002592:	461a      	mov	r2, r3
 8002594:	4b12      	ldr	r3, [pc, #72]	@ (80025e0 <microros_reallocate+0x64>)
 8002596:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002598:	4b12      	ldr	r3, [pc, #72]	@ (80025e4 <microros_reallocate+0x68>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	461a      	mov	r2, r3
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	4413      	add	r3, r2
 80025a2:	461a      	mov	r2, r3
 80025a4:	4b0f      	ldr	r3, [pc, #60]	@ (80025e4 <microros_reallocate+0x68>)
 80025a6:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d104      	bne.n	80025b8 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80025ae:	68b8      	ldr	r0, [r7, #8]
 80025b0:	f7ff fd56 	bl	8002060 <pvPortMallocMicroROS>
 80025b4:	4603      	mov	r3, r0
 80025b6:	e00e      	b.n	80025d6 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f7ff fe75 	bl	80022a8 <getBlockSize>
 80025be:	4603      	mov	r3, r0
 80025c0:	4a08      	ldr	r2, [pc, #32]	@ (80025e4 <microros_reallocate+0x68>)
 80025c2:	6812      	ldr	r2, [r2, #0]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	461a      	mov	r2, r3
 80025c8:	4b06      	ldr	r3, [pc, #24]	@ (80025e4 <microros_reallocate+0x68>)
 80025ca:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f7ff fe88 	bl	80022e4 <pvPortReallocMicroROS>
 80025d4:	4603      	mov	r3, r0
  }
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20004014 	.word	0x20004014
 80025e4:	20004018 	.word	0x20004018

080025e8 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	fb02 f303 	mul.w	r3, r2, r3
 80025fc:	4a0c      	ldr	r2, [pc, #48]	@ (8002630 <microros_zero_allocate+0x48>)
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	4413      	add	r3, r2
 8002602:	461a      	mov	r2, r3
 8002604:	4b0a      	ldr	r3, [pc, #40]	@ (8002630 <microros_zero_allocate+0x48>)
 8002606:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	fb02 f303 	mul.w	r3, r2, r3
 8002610:	4a08      	ldr	r2, [pc, #32]	@ (8002634 <microros_zero_allocate+0x4c>)
 8002612:	6812      	ldr	r2, [r2, #0]
 8002614:	4413      	add	r3, r2
 8002616:	461a      	mov	r2, r3
 8002618:	4b06      	ldr	r3, [pc, #24]	@ (8002634 <microros_zero_allocate+0x4c>)
 800261a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f7ff fe8d 	bl	800233e <pvPortCallocMicroROS>
 8002624:	4603      	mov	r3, r0
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	20004014 	.word	0x20004014
 8002634:	20004018 	.word	0x20004018

08002638 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002638:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800263c:	b086      	sub	sp, #24
 800263e:	af00      	add	r7, sp, #0
 8002640:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002644:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800264a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800264e:	a320      	add	r3, pc, #128	@ (adr r3, 80026d0 <UTILS_NanosecondsToTimespec+0x98>)
 8002650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002654:	f7fe fa3a 	bl	8000acc <__aeabi_ldivmod>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002662:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002666:	a31a      	add	r3, pc, #104	@ (adr r3, 80026d0 <UTILS_NanosecondsToTimespec+0x98>)
 8002668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266c:	f7fe fa2e 	bl	8000acc <__aeabi_ldivmod>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	da20      	bge.n	80026be <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	4a11      	ldr	r2, [pc, #68]	@ (80026c8 <UTILS_NanosecondsToTimespec+0x90>)
 8002682:	fb82 1203 	smull	r1, r2, r2, r3
 8002686:	1712      	asrs	r2, r2, #28
 8002688:	17db      	asrs	r3, r3, #31
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	3301      	adds	r3, #1
 800268e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002696:	6979      	ldr	r1, [r7, #20]
 8002698:	17c8      	asrs	r0, r1, #31
 800269a:	460c      	mov	r4, r1
 800269c:	4605      	mov	r5, r0
 800269e:	ebb2 0804 	subs.w	r8, r2, r4
 80026a2:	eb63 0905 	sbc.w	r9, r3, r5
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	4906      	ldr	r1, [pc, #24]	@ (80026cc <UTILS_NanosecondsToTimespec+0x94>)
 80026b4:	fb01 f303 	mul.w	r3, r1, r3
 80026b8:	441a      	add	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	609a      	str	r2, [r3, #8]
    }
}
 80026be:	bf00      	nop
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80026c8:	44b82fa1 	.word	0x44b82fa1
 80026cc:	3b9aca00 	.word	0x3b9aca00
 80026d0:	3b9aca00 	.word	0x3b9aca00
 80026d4:	00000000 	.word	0x00000000

080026d8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80026d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026dc:	b08e      	sub	sp, #56	@ 0x38
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80026e2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80026e4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80026e8:	2300      	movs	r3, #0
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80026fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80026fe:	4618      	mov	r0, r3
 8002700:	f006 fdac 	bl	800925c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002706:	17da      	asrs	r2, r3, #31
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	61fa      	str	r2, [r7, #28]
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	f04f 0300 	mov.w	r3, #0
 8002714:	69b9      	ldr	r1, [r7, #24]
 8002716:	000b      	movs	r3, r1
 8002718:	2200      	movs	r2, #0
 800271a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800271e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002720:	2200      	movs	r2, #0
 8002722:	461c      	mov	r4, r3
 8002724:	4615      	mov	r5, r2
 8002726:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800272a:	1911      	adds	r1, r2, r4
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	416b      	adcs	r3, r5
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002736:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800273a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	f04f 0400 	mov.w	r4, #0
 8002746:	f04f 0500 	mov.w	r5, #0
 800274a:	015d      	lsls	r5, r3, #5
 800274c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002750:	0154      	lsls	r4, r2, #5
 8002752:	4622      	mov	r2, r4
 8002754:	462b      	mov	r3, r5
 8002756:	ebb2 0800 	subs.w	r8, r2, r0
 800275a:	eb63 0901 	sbc.w	r9, r3, r1
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	f04f 0300 	mov.w	r3, #0
 8002766:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800276a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800276e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002772:	4690      	mov	r8, r2
 8002774:	4699      	mov	r9, r3
 8002776:	eb18 0a00 	adds.w	sl, r8, r0
 800277a:	eb49 0b01 	adc.w	fp, r9, r1
 800277e:	f04f 0200 	mov.w	r2, #0
 8002782:	f04f 0300 	mov.w	r3, #0
 8002786:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800278a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800278e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002792:	ebb2 040a 	subs.w	r4, r2, sl
 8002796:	603c      	str	r4, [r7, #0]
 8002798:	eb63 030b 	sbc.w	r3, r3, fp
 800279c:	607b      	str	r3, [r7, #4]
 800279e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027a2:	4623      	mov	r3, r4
 80027a4:	181b      	adds	r3, r3, r0
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	462b      	mov	r3, r5
 80027aa:	eb41 0303 	adc.w	r3, r1, r3
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	6a3a      	ldr	r2, [r7, #32]
 80027b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80027b6:	f7ff ff3f 	bl	8002638 <UTILS_NanosecondsToTimespec>

    return 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	4618      	mov	r0, r3
 80027be:	3738      	adds	r7, #56	@ 0x38
 80027c0:	46bd      	mov	sp, r7
 80027c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080027c8 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80027d6:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80027d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027dc:	4904      	ldr	r1, [pc, #16]	@ (80027f0 <cubemx_transport_open+0x28>)
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f003 fc3c 	bl	800605c <HAL_UART_Receive_DMA>
    return true;
 80027e4:	2301      	movs	r3, #1
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	2000401c 	.word	0x2000401c

080027f4 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002802:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f003 fc75 	bl	80060f4 <HAL_UART_DMAStop>
    return true;
 800280a:	2301      	movs	r3, #1
}
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
 8002820:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002828:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002830:	2b20      	cmp	r3, #32
 8002832:	d11b      	bne.n	800286c <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	b29b      	uxth	r3, r3
 8002838:	461a      	mov	r2, r3
 800283a:	68b9      	ldr	r1, [r7, #8]
 800283c:	6978      	ldr	r0, [r7, #20]
 800283e:	f003 fb8d 	bl	8005f5c <HAL_UART_Transmit_DMA>
 8002842:	4603      	mov	r3, r0
 8002844:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002846:	e002      	b.n	800284e <cubemx_transport_write+0x3a>
            osDelay(1);
 8002848:	2001      	movs	r0, #1
 800284a:	f005 fa3b 	bl	8007cc4 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800284e:	7cfb      	ldrb	r3, [r7, #19]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d104      	bne.n	800285e <cubemx_transport_write+0x4a>
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285a:	2b20      	cmp	r3, #32
 800285c:	d1f4      	bne.n	8002848 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 800285e:	7cfb      	ldrb	r3, [r7, #19]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <cubemx_transport_write+0x54>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	e002      	b.n	800286e <cubemx_transport_write+0x5a>
 8002868:	2300      	movs	r3, #0
 800286a:	e000      	b.n	800286e <cubemx_transport_write+0x5a>
    }else{
        return 0;
 800286c:	2300      	movs	r3, #0
    }
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002878:	b580      	push	{r7, lr}
 800287a:	b088      	sub	sp, #32
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
 8002884:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800288c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800288e:	2300      	movs	r3, #0
 8002890:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8002892:	b672      	cpsid	i
}
 8002894:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80028a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002914 <cubemx_transport_read+0x9c>)
 80028a6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80028a8:	b662      	cpsie	i
}
 80028aa:	bf00      	nop
        __enable_irq();
        ms_used++;
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	3301      	adds	r3, #1
 80028b0:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80028b2:	2001      	movs	r0, #1
 80028b4:	f005 fa06 	bl	8007cc4 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80028b8:	4b17      	ldr	r3, [pc, #92]	@ (8002918 <cubemx_transport_read+0xa0>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	4b15      	ldr	r3, [pc, #84]	@ (8002914 <cubemx_transport_read+0x9c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d103      	bne.n	80028cc <cubemx_transport_read+0x54>
 80028c4:	69fa      	ldr	r2, [r7, #28]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	dbe2      	blt.n	8002892 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80028d0:	e011      	b.n	80028f6 <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 80028d2:	4b11      	ldr	r3, [pc, #68]	@ (8002918 <cubemx_transport_read+0xa0>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68b9      	ldr	r1, [r7, #8]
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	440b      	add	r3, r1
 80028dc:	490f      	ldr	r1, [pc, #60]	@ (800291c <cubemx_transport_read+0xa4>)
 80028de:	5c8a      	ldrb	r2, [r1, r2]
 80028e0:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80028e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002918 <cubemx_transport_read+0xa0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	3301      	adds	r3, #1
 80028e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002918 <cubemx_transport_read+0xa0>)
 80028ee:	6013      	str	r3, [r2, #0]
        wrote++;
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	3301      	adds	r3, #1
 80028f4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80028f6:	4b08      	ldr	r3, [pc, #32]	@ (8002918 <cubemx_transport_read+0xa0>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	4b06      	ldr	r3, [pc, #24]	@ (8002914 <cubemx_transport_read+0x9c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d003      	beq.n	800290a <cubemx_transport_read+0x92>
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	429a      	cmp	r2, r3
 8002908:	d3e3      	bcc.n	80028d2 <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 800290a:	69bb      	ldr	r3, [r7, #24]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3720      	adds	r7, #32
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20004820 	.word	0x20004820
 8002918:	2000481c 	.word	0x2000481c
 800291c:	2000401c 	.word	0x2000401c

08002920 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002920:	480d      	ldr	r0, [pc, #52]	@ (8002958 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002922:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002924:	f7ff fb8a 	bl	800203c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002928:	480c      	ldr	r0, [pc, #48]	@ (800295c <LoopForever+0x6>)
  ldr r1, =_edata
 800292a:	490d      	ldr	r1, [pc, #52]	@ (8002960 <LoopForever+0xa>)
  ldr r2, =_sidata
 800292c:	4a0d      	ldr	r2, [pc, #52]	@ (8002964 <LoopForever+0xe>)
  movs r3, #0
 800292e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002930:	e002      	b.n	8002938 <LoopCopyDataInit>

08002932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002936:	3304      	adds	r3, #4

08002938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800293a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800293c:	d3f9      	bcc.n	8002932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800293e:	4a0a      	ldr	r2, [pc, #40]	@ (8002968 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002940:	4c0a      	ldr	r4, [pc, #40]	@ (800296c <LoopForever+0x16>)
  movs r3, #0
 8002942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002944:	e001      	b.n	800294a <LoopFillZerobss>

08002946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002948:	3204      	adds	r2, #4

0800294a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800294a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800294c:	d3fb      	bcc.n	8002946 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800294e:	f014 fbf3 	bl	8017138 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002952:	f7fe fba9 	bl	80010a8 <main>

08002956 <LoopForever>:

LoopForever:
    b LoopForever
 8002956:	e7fe      	b.n	8002956 <LoopForever>
  ldr   r0, =_estack
 8002958:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800295c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002960:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8002964:	08018cfc 	.word	0x08018cfc
  ldr r2, =_sbss
 8002968:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 800296c:	2000add4 	.word	0x2000add4

08002970 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002970:	e7fe      	b.n	8002970 <ADC1_2_IRQHandler>

08002972 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002978:	2300      	movs	r3, #0
 800297a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800297c:	2003      	movs	r0, #3
 800297e:	f000 f8dc 	bl	8002b3a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002982:	200f      	movs	r0, #15
 8002984:	f7ff f9dc 	bl	8001d40 <HAL_InitTick>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d002      	beq.n	8002994 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	71fb      	strb	r3, [r7, #7]
 8002992:	e001      	b.n	8002998 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002994:	f7ff f842 	bl	8001a1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002998:	79fb      	ldrb	r3, [r7, #7]

}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029a8:	4b05      	ldr	r3, [pc, #20]	@ (80029c0 <HAL_IncTick+0x1c>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	4b05      	ldr	r3, [pc, #20]	@ (80029c4 <HAL_IncTick+0x20>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4413      	add	r3, r2
 80029b2:	4a03      	ldr	r2, [pc, #12]	@ (80029c0 <HAL_IncTick+0x1c>)
 80029b4:	6013      	str	r3, [r2, #0]
}
 80029b6:	bf00      	nop
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	20004824 	.word	0x20004824
 80029c4:	20000014 	.word	0x20000014

080029c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return uwTick;
 80029cc:	4b03      	ldr	r3, [pc, #12]	@ (80029dc <HAL_GetTick+0x14>)
 80029ce:	681b      	ldr	r3, [r3, #0]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	20004824 	.word	0x20004824

080029e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002a24 <__NVIC_SetPriorityGrouping+0x44>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029fc:	4013      	ands	r3, r2
 80029fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a12:	4a04      	ldr	r2, [pc, #16]	@ (8002a24 <__NVIC_SetPriorityGrouping+0x44>)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	60d3      	str	r3, [r2, #12]
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	e000ed00 	.word	0xe000ed00

08002a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a2c:	4b04      	ldr	r3, [pc, #16]	@ (8002a40 <__NVIC_GetPriorityGrouping+0x18>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	0a1b      	lsrs	r3, r3, #8
 8002a32:	f003 0307 	and.w	r3, r3, #7
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	db0b      	blt.n	8002a6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a56:	79fb      	ldrb	r3, [r7, #7]
 8002a58:	f003 021f 	and.w	r2, r3, #31
 8002a5c:	4907      	ldr	r1, [pc, #28]	@ (8002a7c <__NVIC_EnableIRQ+0x38>)
 8002a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a62:	095b      	lsrs	r3, r3, #5
 8002a64:	2001      	movs	r0, #1
 8002a66:	fa00 f202 	lsl.w	r2, r0, r2
 8002a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	e000e100 	.word	0xe000e100

08002a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	6039      	str	r1, [r7, #0]
 8002a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	db0a      	blt.n	8002aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	490c      	ldr	r1, [pc, #48]	@ (8002acc <__NVIC_SetPriority+0x4c>)
 8002a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9e:	0112      	lsls	r2, r2, #4
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aa8:	e00a      	b.n	8002ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	4908      	ldr	r1, [pc, #32]	@ (8002ad0 <__NVIC_SetPriority+0x50>)
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	3b04      	subs	r3, #4
 8002ab8:	0112      	lsls	r2, r2, #4
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	440b      	add	r3, r1
 8002abe:	761a      	strb	r2, [r3, #24]
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	e000e100 	.word	0xe000e100
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b089      	sub	sp, #36	@ 0x24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f1c3 0307 	rsb	r3, r3, #7
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	bf28      	it	cs
 8002af2:	2304      	movcs	r3, #4
 8002af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	3304      	adds	r3, #4
 8002afa:	2b06      	cmp	r3, #6
 8002afc:	d902      	bls.n	8002b04 <NVIC_EncodePriority+0x30>
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	3b03      	subs	r3, #3
 8002b02:	e000      	b.n	8002b06 <NVIC_EncodePriority+0x32>
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	43da      	mvns	r2, r3
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	401a      	ands	r2, r3
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b1c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	fa01 f303 	lsl.w	r3, r1, r3
 8002b26:	43d9      	mvns	r1, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b2c:	4313      	orrs	r3, r2
         );
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3724      	adds	r7, #36	@ 0x24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7ff ff4c 	bl	80029e0 <__NVIC_SetPriorityGrouping>
}
 8002b48:	bf00      	nop
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
 8002b5c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b5e:	f7ff ff63 	bl	8002a28 <__NVIC_GetPriorityGrouping>
 8002b62:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	68b9      	ldr	r1, [r7, #8]
 8002b68:	6978      	ldr	r0, [r7, #20]
 8002b6a:	f7ff ffb3 	bl	8002ad4 <NVIC_EncodePriority>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b74:	4611      	mov	r1, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff ff82 	bl	8002a80 <__NVIC_SetPriority>
}
 8002b7c:	bf00      	nop
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff ff56 	bl	8002a44 <__NVIC_EnableIRQ>
}
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e08d      	b.n	8002cce <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	4b47      	ldr	r3, [pc, #284]	@ (8002cd8 <HAL_DMA_Init+0x138>)
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d80f      	bhi.n	8002bde <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4b45      	ldr	r3, [pc, #276]	@ (8002cdc <HAL_DMA_Init+0x13c>)
 8002bc6:	4413      	add	r3, r2
 8002bc8:	4a45      	ldr	r2, [pc, #276]	@ (8002ce0 <HAL_DMA_Init+0x140>)
 8002bca:	fba2 2303 	umull	r2, r3, r2, r3
 8002bce:	091b      	lsrs	r3, r3, #4
 8002bd0:	009a      	lsls	r2, r3, #2
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a42      	ldr	r2, [pc, #264]	@ (8002ce4 <HAL_DMA_Init+0x144>)
 8002bda:	641a      	str	r2, [r3, #64]	@ 0x40
 8002bdc:	e00e      	b.n	8002bfc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	461a      	mov	r2, r3
 8002be4:	4b40      	ldr	r3, [pc, #256]	@ (8002ce8 <HAL_DMA_Init+0x148>)
 8002be6:	4413      	add	r3, r2
 8002be8:	4a3d      	ldr	r2, [pc, #244]	@ (8002ce0 <HAL_DMA_Init+0x140>)
 8002bea:	fba2 2303 	umull	r2, r3, r2, r3
 8002bee:	091b      	lsrs	r3, r3, #4
 8002bf0:	009a      	lsls	r2, r3, #2
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a3c      	ldr	r2, [pc, #240]	@ (8002cec <HAL_DMA_Init+0x14c>)
 8002bfa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002c20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 fa82 	bl	8003158 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c5c:	d102      	bne.n	8002c64 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c78:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d010      	beq.n	8002ca4 <HAL_DMA_Init+0x104>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d80c      	bhi.n	8002ca4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 faa2 	bl	80031d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	e008      	b.n	8002cb6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40020407 	.word	0x40020407
 8002cdc:	bffdfff8 	.word	0xbffdfff8
 8002ce0:	cccccccd 	.word	0xcccccccd
 8002ce4:	40020000 	.word	0x40020000
 8002ce8:	bffdfbf8 	.word	0xbffdfbf8
 8002cec:	40020400 	.word	0x40020400

08002cf0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <HAL_DMA_Start_IT+0x20>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e066      	b.n	8002dde <HAL_DMA_Start_IT+0xee>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d155      	bne.n	8002dd0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0201 	bic.w	r2, r2, #1
 8002d40:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	68b9      	ldr	r1, [r7, #8]
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 f9c7 	bl	80030dc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d008      	beq.n	8002d68 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f042 020e 	orr.w	r2, r2, #14
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	e00f      	b.n	8002d88 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0204 	bic.w	r2, r2, #4
 8002d76:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 020a 	orr.w	r2, r2, #10
 8002d86:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d007      	beq.n	8002da6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002da0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002da4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d007      	beq.n	8002dbe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dbc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f042 0201 	orr.w	r2, r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	e005      	b.n	8002ddc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b085      	sub	sp, #20
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d005      	beq.n	8002e0a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2204      	movs	r2, #4
 8002e02:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	73fb      	strb	r3, [r7, #15]
 8002e08:	e037      	b.n	8002e7a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 020e 	bic.w	r2, r2, #14
 8002e18:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e28:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0201 	bic.w	r2, r2, #1
 8002e38:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3e:	f003 021f 	and.w	r2, r3, #31
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e46:	2101      	movs	r1, #1
 8002e48:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e56:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00c      	beq.n	8002e7a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e6a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e6e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002e78:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d00d      	beq.n	8002ecc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2204      	movs	r2, #4
 8002eb4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	73fb      	strb	r3, [r7, #15]
 8002eca:	e047      	b.n	8002f5c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 020e 	bic.w	r2, r2, #14
 8002eda:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0201 	bic.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ef6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002efa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f00:	f003 021f 	and.w	r2, r3, #31
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f08:	2101      	movs	r1, #1
 8002f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f18:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00c      	beq.n	8002f3c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f30:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002f3a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	4798      	blx	r3
    }
  }
  return status;
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b084      	sub	sp, #16
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f82:	f003 031f 	and.w	r3, r3, #31
 8002f86:	2204      	movs	r2, #4
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d026      	beq.n	8002fe0 <HAL_DMA_IRQHandler+0x7a>
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d021      	beq.n	8002fe0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0320 	and.w	r3, r3, #32
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d107      	bne.n	8002fba <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0204 	bic.w	r2, r2, #4
 8002fb8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fbe:	f003 021f 	and.w	r2, r3, #31
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc6:	2104      	movs	r1, #4
 8002fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fcc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d071      	beq.n	80030ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002fde:	e06c      	b.n	80030ba <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe4:	f003 031f 	and.w	r3, r3, #31
 8002fe8:	2202      	movs	r2, #2
 8002fea:	409a      	lsls	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d02e      	beq.n	8003052 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d029      	beq.n	8003052 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0320 	and.w	r3, r3, #32
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10b      	bne.n	8003024 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 020a 	bic.w	r2, r2, #10
 800301a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003028:	f003 021f 	and.w	r2, r3, #31
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003030:	2102      	movs	r1, #2
 8003032:	fa01 f202 	lsl.w	r2, r1, r2
 8003036:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003044:	2b00      	cmp	r3, #0
 8003046:	d038      	beq.n	80030ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003050:	e033      	b.n	80030ba <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003056:	f003 031f 	and.w	r3, r3, #31
 800305a:	2208      	movs	r2, #8
 800305c:	409a      	lsls	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4013      	ands	r3, r2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d02a      	beq.n	80030bc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b00      	cmp	r3, #0
 800306e:	d025      	beq.n	80030bc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 020e 	bic.w	r2, r2, #14
 800307e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003084:	f003 021f 	and.w	r2, r3, #31
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308c:	2101      	movs	r1, #1
 800308e:	fa01 f202 	lsl.w	r2, r1, r2
 8003092:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d004      	beq.n	80030bc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80030ba:	bf00      	nop
 80030bc:	bf00      	nop
}
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
 80030e8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80030f2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d004      	beq.n	8003106 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003104:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310a:	f003 021f 	and.w	r2, r3, #31
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003112:	2101      	movs	r1, #1
 8003114:	fa01 f202 	lsl.w	r2, r1, r2
 8003118:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	2b10      	cmp	r3, #16
 8003128:	d108      	bne.n	800313c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800313a:	e007      	b.n	800314c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	60da      	str	r2, [r3, #12]
}
 800314c:	bf00      	nop
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003158:	b480      	push	{r7}
 800315a:	b087      	sub	sp, #28
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	461a      	mov	r2, r3
 8003166:	4b16      	ldr	r3, [pc, #88]	@ (80031c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003168:	429a      	cmp	r2, r3
 800316a:	d802      	bhi.n	8003172 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800316c:	4b15      	ldr	r3, [pc, #84]	@ (80031c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	e001      	b.n	8003176 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003172:	4b15      	ldr	r3, [pc, #84]	@ (80031c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003174:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	b2db      	uxtb	r3, r3
 8003180:	3b08      	subs	r3, #8
 8003182:	4a12      	ldr	r2, [pc, #72]	@ (80031cc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003184:	fba2 2303 	umull	r2, r3, r2, r3
 8003188:	091b      	lsrs	r3, r3, #4
 800318a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003190:	089b      	lsrs	r3, r3, #2
 8003192:	009a      	lsls	r2, r3, #2
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	4413      	add	r3, r2
 8003198:	461a      	mov	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a0b      	ldr	r2, [pc, #44]	@ (80031d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80031a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f003 031f 	and.w	r3, r3, #31
 80031aa:	2201      	movs	r2, #1
 80031ac:	409a      	lsls	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80031b2:	bf00      	nop
 80031b4:	371c      	adds	r7, #28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	40020407 	.word	0x40020407
 80031c4:	40020800 	.word	0x40020800
 80031c8:	40020820 	.word	0x40020820
 80031cc:	cccccccd 	.word	0xcccccccd
 80031d0:	40020880 	.word	0x40020880

080031d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80031e8:	4413      	add	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	461a      	mov	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a08      	ldr	r2, [pc, #32]	@ (8003218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80031f6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	f003 031f 	and.w	r3, r3, #31
 8003200:	2201      	movs	r2, #1
 8003202:	409a      	lsls	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003208:	bf00      	nop
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	1000823f 	.word	0x1000823f
 8003218:	40020940 	.word	0x40020940

0800321c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800322a:	e15a      	b.n	80034e2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	2101      	movs	r1, #1
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	fa01 f303 	lsl.w	r3, r1, r3
 8003238:	4013      	ands	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2b00      	cmp	r3, #0
 8003240:	f000 814c 	beq.w	80034dc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 0303 	and.w	r3, r3, #3
 800324c:	2b01      	cmp	r3, #1
 800324e:	d005      	beq.n	800325c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003258:	2b02      	cmp	r3, #2
 800325a:	d130      	bne.n	80032be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	2203      	movs	r2, #3
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	43db      	mvns	r3, r3
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4013      	ands	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	68da      	ldr	r2, [r3, #12]
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4313      	orrs	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003292:	2201      	movs	r2, #1
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43db      	mvns	r3, r3
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	4013      	ands	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	091b      	lsrs	r3, r3, #4
 80032a8:	f003 0201 	and.w	r2, r3, #1
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d017      	beq.n	80032fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	2203      	movs	r2, #3
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	4013      	ands	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d123      	bne.n	800334e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	08da      	lsrs	r2, r3, #3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3208      	adds	r2, #8
 800330e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003312:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	220f      	movs	r2, #15
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	43db      	mvns	r3, r3
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	4013      	ands	r3, r2
 8003328:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	691a      	ldr	r2, [r3, #16]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	4313      	orrs	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	08da      	lsrs	r2, r3, #3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3208      	adds	r2, #8
 8003348:	6939      	ldr	r1, [r7, #16]
 800334a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	2203      	movs	r2, #3
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43db      	mvns	r3, r3
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	4013      	ands	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f003 0203 	and.w	r2, r3, #3
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	4313      	orrs	r3, r2
 800337a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 80a6 	beq.w	80034dc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003390:	4b5b      	ldr	r3, [pc, #364]	@ (8003500 <HAL_GPIO_Init+0x2e4>)
 8003392:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003394:	4a5a      	ldr	r2, [pc, #360]	@ (8003500 <HAL_GPIO_Init+0x2e4>)
 8003396:	f043 0301 	orr.w	r3, r3, #1
 800339a:	6613      	str	r3, [r2, #96]	@ 0x60
 800339c:	4b58      	ldr	r3, [pc, #352]	@ (8003500 <HAL_GPIO_Init+0x2e4>)
 800339e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	60bb      	str	r3, [r7, #8]
 80033a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033a8:	4a56      	ldr	r2, [pc, #344]	@ (8003504 <HAL_GPIO_Init+0x2e8>)
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	089b      	lsrs	r3, r3, #2
 80033ae:	3302      	adds	r3, #2
 80033b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f003 0303 	and.w	r3, r3, #3
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	220f      	movs	r2, #15
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	43db      	mvns	r3, r3
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	4013      	ands	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80033d2:	d01f      	beq.n	8003414 <HAL_GPIO_Init+0x1f8>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a4c      	ldr	r2, [pc, #304]	@ (8003508 <HAL_GPIO_Init+0x2ec>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d019      	beq.n	8003410 <HAL_GPIO_Init+0x1f4>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a4b      	ldr	r2, [pc, #300]	@ (800350c <HAL_GPIO_Init+0x2f0>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d013      	beq.n	800340c <HAL_GPIO_Init+0x1f0>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a4a      	ldr	r2, [pc, #296]	@ (8003510 <HAL_GPIO_Init+0x2f4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d00d      	beq.n	8003408 <HAL_GPIO_Init+0x1ec>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a49      	ldr	r2, [pc, #292]	@ (8003514 <HAL_GPIO_Init+0x2f8>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d007      	beq.n	8003404 <HAL_GPIO_Init+0x1e8>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a48      	ldr	r2, [pc, #288]	@ (8003518 <HAL_GPIO_Init+0x2fc>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d101      	bne.n	8003400 <HAL_GPIO_Init+0x1e4>
 80033fc:	2305      	movs	r3, #5
 80033fe:	e00a      	b.n	8003416 <HAL_GPIO_Init+0x1fa>
 8003400:	2306      	movs	r3, #6
 8003402:	e008      	b.n	8003416 <HAL_GPIO_Init+0x1fa>
 8003404:	2304      	movs	r3, #4
 8003406:	e006      	b.n	8003416 <HAL_GPIO_Init+0x1fa>
 8003408:	2303      	movs	r3, #3
 800340a:	e004      	b.n	8003416 <HAL_GPIO_Init+0x1fa>
 800340c:	2302      	movs	r3, #2
 800340e:	e002      	b.n	8003416 <HAL_GPIO_Init+0x1fa>
 8003410:	2301      	movs	r3, #1
 8003412:	e000      	b.n	8003416 <HAL_GPIO_Init+0x1fa>
 8003414:	2300      	movs	r3, #0
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	f002 0203 	and.w	r2, r2, #3
 800341c:	0092      	lsls	r2, r2, #2
 800341e:	4093      	lsls	r3, r2
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003426:	4937      	ldr	r1, [pc, #220]	@ (8003504 <HAL_GPIO_Init+0x2e8>)
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	089b      	lsrs	r3, r3, #2
 800342c:	3302      	adds	r3, #2
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003434:	4b39      	ldr	r3, [pc, #228]	@ (800351c <HAL_GPIO_Init+0x300>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	43db      	mvns	r3, r3
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4013      	ands	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003458:	4a30      	ldr	r2, [pc, #192]	@ (800351c <HAL_GPIO_Init+0x300>)
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800345e:	4b2f      	ldr	r3, [pc, #188]	@ (800351c <HAL_GPIO_Init+0x300>)
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	43db      	mvns	r3, r3
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4013      	ands	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4313      	orrs	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003482:	4a26      	ldr	r2, [pc, #152]	@ (800351c <HAL_GPIO_Init+0x300>)
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003488:	4b24      	ldr	r3, [pc, #144]	@ (800351c <HAL_GPIO_Init+0x300>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	43db      	mvns	r3, r3
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4013      	ands	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034ac:	4a1b      	ldr	r2, [pc, #108]	@ (800351c <HAL_GPIO_Init+0x300>)
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80034b2:	4b1a      	ldr	r3, [pc, #104]	@ (800351c <HAL_GPIO_Init+0x300>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	43db      	mvns	r3, r3
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4013      	ands	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034d6:	4a11      	ldr	r2, [pc, #68]	@ (800351c <HAL_GPIO_Init+0x300>)
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	3301      	adds	r3, #1
 80034e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	fa22 f303 	lsr.w	r3, r2, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f47f ae9d 	bne.w	800322c <HAL_GPIO_Init+0x10>
  }
}
 80034f2:	bf00      	nop
 80034f4:	bf00      	nop
 80034f6:	371c      	adds	r7, #28
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	40021000 	.word	0x40021000
 8003504:	40010000 	.word	0x40010000
 8003508:	48000400 	.word	0x48000400
 800350c:	48000800 	.word	0x48000800
 8003510:	48000c00 	.word	0x48000c00
 8003514:	48001000 	.word	0x48001000
 8003518:	48001400 	.word	0x48001400
 800351c:	40010400 	.word	0x40010400

08003520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	807b      	strh	r3, [r7, #2]
 800352c:	4613      	mov	r3, r2
 800352e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003530:	787b      	ldrb	r3, [r7, #1]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003536:	887a      	ldrh	r2, [r7, #2]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800353c:	e002      	b.n	8003544 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800353e:	887a      	ldrh	r2, [r7, #2]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800355a:	4b08      	ldr	r3, [pc, #32]	@ (800357c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800355c:	695a      	ldr	r2, [r3, #20]
 800355e:	88fb      	ldrh	r3, [r7, #6]
 8003560:	4013      	ands	r3, r2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d006      	beq.n	8003574 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003566:	4a05      	ldr	r2, [pc, #20]	@ (800357c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003568:	88fb      	ldrh	r3, [r7, #6]
 800356a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800356c:	88fb      	ldrh	r3, [r7, #6]
 800356e:	4618      	mov	r0, r3
 8003570:	f000 f806 	bl	8003580 <HAL_GPIO_EXTI_Callback>
  }
}
 8003574:	bf00      	nop
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40010400 	.word	0x40010400

08003580 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	4603      	mov	r3, r0
 8003588:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b084      	sub	sp, #16
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e041      	b.n	800362c <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80035b0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f245 5255 	movw	r2, #21845	@ 0x5555
 80035ba:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6852      	ldr	r2, [r2, #4]
 80035c4:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6892      	ldr	r2, [r2, #8]
 80035ce:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80035d0:	f7ff f9fa 	bl	80029c8 <HAL_GetTick>
 80035d4:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80035d6:	e00f      	b.n	80035f8 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80035d8:	f7ff f9f6 	bl	80029c8 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b31      	cmp	r3, #49	@ 0x31
 80035e4:	d908      	bls.n	80035f8 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e019      	b.n	800362c <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1e8      	bne.n	80035d8 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	429a      	cmp	r2, r3
 8003612:	d005      	beq.n	8003620 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	68d2      	ldr	r2, [r2, #12]
 800361c:	611a      	str	r2, [r3, #16]
 800361e:	e004      	b.n	800362a <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8003628:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8003644:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d141      	bne.n	80036e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003662:	4b4b      	ldr	r3, [pc, #300]	@ (8003790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800366a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800366e:	d131      	bne.n	80036d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003670:	4b47      	ldr	r3, [pc, #284]	@ (8003790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003672:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003676:	4a46      	ldr	r2, [pc, #280]	@ (8003790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003678:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800367c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003680:	4b43      	ldr	r3, [pc, #268]	@ (8003790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003688:	4a41      	ldr	r2, [pc, #260]	@ (8003790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800368a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800368e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003690:	4b40      	ldr	r3, [pc, #256]	@ (8003794 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2232      	movs	r2, #50	@ 0x32
 8003696:	fb02 f303 	mul.w	r3, r2, r3
 800369a:	4a3f      	ldr	r2, [pc, #252]	@ (8003798 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800369c:	fba2 2303 	umull	r2, r3, r2, r3
 80036a0:	0c9b      	lsrs	r3, r3, #18
 80036a2:	3301      	adds	r3, #1
 80036a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036a6:	e002      	b.n	80036ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036ae:	4b38      	ldr	r3, [pc, #224]	@ (8003790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ba:	d102      	bne.n	80036c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f2      	bne.n	80036a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036c2:	4b33      	ldr	r3, [pc, #204]	@ (8003790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ce:	d158      	bne.n	8003782 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e057      	b.n	8003784 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036d4:	4b2e      	ldr	r3, [pc, #184]	@ (8003790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036da:	4a2d      	ldr	r2, [pc, #180]	@ (8003790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80036e4:	e04d      	b.n	8003782 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036ec:	d141      	bne.n	8003772 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036ee:	4b28      	ldr	r3, [pc, #160]	@ (8003790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80036f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036fa:	d131      	bne.n	8003760 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036fc:	4b24      	ldr	r3, [pc, #144]	@ (8003790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003702:	4a23      	ldr	r2, [pc, #140]	@ (8003790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003704:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003708:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800370c:	4b20      	ldr	r3, [pc, #128]	@ (8003790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003714:	4a1e      	ldr	r2, [pc, #120]	@ (8003790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003716:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800371a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800371c:	4b1d      	ldr	r3, [pc, #116]	@ (8003794 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2232      	movs	r2, #50	@ 0x32
 8003722:	fb02 f303 	mul.w	r3, r2, r3
 8003726:	4a1c      	ldr	r2, [pc, #112]	@ (8003798 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003728:	fba2 2303 	umull	r2, r3, r2, r3
 800372c:	0c9b      	lsrs	r3, r3, #18
 800372e:	3301      	adds	r3, #1
 8003730:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003732:	e002      	b.n	800373a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	3b01      	subs	r3, #1
 8003738:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800373a:	4b15      	ldr	r3, [pc, #84]	@ (8003790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003742:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003746:	d102      	bne.n	800374e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f2      	bne.n	8003734 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800374e:	4b10      	ldr	r3, [pc, #64]	@ (8003790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003756:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800375a:	d112      	bne.n	8003782 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e011      	b.n	8003784 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003760:	4b0b      	ldr	r3, [pc, #44]	@ (8003790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003762:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003766:	4a0a      	ldr	r2, [pc, #40]	@ (8003790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003768:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800376c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003770:	e007      	b.n	8003782 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003772:	4b07      	ldr	r3, [pc, #28]	@ (8003790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800377a:	4a05      	ldr	r2, [pc, #20]	@ (8003790 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800377c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003780:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	40007000 	.word	0x40007000
 8003794:	2000000c 	.word	0x2000000c
 8003798:	431bde83 	.word	0x431bde83

0800379c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80037a0:	4b05      	ldr	r3, [pc, #20]	@ (80037b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	4a04      	ldr	r2, [pc, #16]	@ (80037b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80037a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037aa:	6093      	str	r3, [r2, #8]
}
 80037ac:	bf00      	nop
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40007000 	.word	0x40007000

080037bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b088      	sub	sp, #32
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e2fe      	b.n	8003dcc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d075      	beq.n	80038c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037da:	4b97      	ldr	r3, [pc, #604]	@ (8003a38 <HAL_RCC_OscConfig+0x27c>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 030c 	and.w	r3, r3, #12
 80037e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037e4:	4b94      	ldr	r3, [pc, #592]	@ (8003a38 <HAL_RCC_OscConfig+0x27c>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f003 0303 	and.w	r3, r3, #3
 80037ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	2b0c      	cmp	r3, #12
 80037f2:	d102      	bne.n	80037fa <HAL_RCC_OscConfig+0x3e>
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	2b03      	cmp	r3, #3
 80037f8:	d002      	beq.n	8003800 <HAL_RCC_OscConfig+0x44>
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d10b      	bne.n	8003818 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003800:	4b8d      	ldr	r3, [pc, #564]	@ (8003a38 <HAL_RCC_OscConfig+0x27c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d05b      	beq.n	80038c4 <HAL_RCC_OscConfig+0x108>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d157      	bne.n	80038c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e2d9      	b.n	8003dcc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003820:	d106      	bne.n	8003830 <HAL_RCC_OscConfig+0x74>
 8003822:	4b85      	ldr	r3, [pc, #532]	@ (8003a38 <HAL_RCC_OscConfig+0x27c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a84      	ldr	r2, [pc, #528]	@ (8003a38 <HAL_RCC_OscConfig+0x27c>)
 8003828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	e01d      	b.n	800386c <HAL_RCC_OscConfig+0xb0>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003838:	d10c      	bne.n	8003854 <HAL_RCC_OscConfig+0x98>
 800383a:	4b7f      	ldr	r3, [pc, #508]	@ (8003a38 <HAL_RCC_OscConfig+0x27c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a7e      	ldr	r2, [pc, #504]	@ (8003a38 <HAL_RCC_OscConfig+0x27c>)
 8003840:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	4b7c      	ldr	r3, [pc, #496]	@ (8003a38 <HAL_RCC_OscConfig+0x27c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a7b      	ldr	r2, [pc, #492]	@ (8003a38 <HAL_RCC_OscConfig+0x27c>)
 800384c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	e00b      	b.n	800386c <HAL_RCC_OscConfig+0xb0>
 8003854:	4b78      	ldr	r3, [pc, #480]	@ (8003a38 <HAL_RCC_OscConfig+0x27c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a77      	ldr	r2, [pc, #476]	@ (8003a38 <HAL_RCC_OscConfig+0x27c>)
 800385a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800385e:	6013      	str	r3, [r2, #0]
 8003860:	4b75      	ldr	r3, [pc, #468]	@ (8003a38 <HAL_RCC_OscConfig+0x27c>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a74      	ldr	r2, [pc, #464]	@ (8003a38 <HAL_RCC_OscConfig+0x27c>)
 8003866:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800386a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d013      	beq.n	800389c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003874:	f7ff f8a8 	bl	80029c8 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800387c:	f7ff f8a4 	bl	80029c8 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b64      	cmp	r3, #100	@ 0x64
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e29e      	b.n	8003dcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800388e:	4b6a      	ldr	r3, [pc, #424]	@ (8003a38 <HAL_RCC_OscConfig+0x27c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f0      	beq.n	800387c <HAL_RCC_OscConfig+0xc0>
 800389a:	e014      	b.n	80038c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389c:	f7ff f894 	bl	80029c8 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038a4:	f7ff f890 	bl	80029c8 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b64      	cmp	r3, #100	@ 0x64
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e28a      	b.n	8003dcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038b6:	4b60      	ldr	r3, [pc, #384]	@ (8003a38 <HAL_RCC_OscConfig+0x27c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f0      	bne.n	80038a4 <HAL_RCC_OscConfig+0xe8>
 80038c2:	e000      	b.n	80038c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d075      	beq.n	80039be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038d2:	4b59      	ldr	r3, [pc, #356]	@ (8003a38 <HAL_RCC_OscConfig+0x27c>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 030c 	and.w	r3, r3, #12
 80038da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038dc:	4b56      	ldr	r3, [pc, #344]	@ (8003a38 <HAL_RCC_OscConfig+0x27c>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f003 0303 	and.w	r3, r3, #3
 80038e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	2b0c      	cmp	r3, #12
 80038ea:	d102      	bne.n	80038f2 <HAL_RCC_OscConfig+0x136>
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d002      	beq.n	80038f8 <HAL_RCC_OscConfig+0x13c>
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d11f      	bne.n	8003938 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038f8:	4b4f      	ldr	r3, [pc, #316]	@ (8003a38 <HAL_RCC_OscConfig+0x27c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <HAL_RCC_OscConfig+0x154>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e25d      	b.n	8003dcc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003910:	4b49      	ldr	r3, [pc, #292]	@ (8003a38 <HAL_RCC_OscConfig+0x27c>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	061b      	lsls	r3, r3, #24
 800391e:	4946      	ldr	r1, [pc, #280]	@ (8003a38 <HAL_RCC_OscConfig+0x27c>)
 8003920:	4313      	orrs	r3, r2
 8003922:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003924:	4b45      	ldr	r3, [pc, #276]	@ (8003a3c <HAL_RCC_OscConfig+0x280>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f7fe fa09 	bl	8001d40 <HAL_InitTick>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d043      	beq.n	80039bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e249      	b.n	8003dcc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d023      	beq.n	8003988 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003940:	4b3d      	ldr	r3, [pc, #244]	@ (8003a38 <HAL_RCC_OscConfig+0x27c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a3c      	ldr	r2, [pc, #240]	@ (8003a38 <HAL_RCC_OscConfig+0x27c>)
 8003946:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800394a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394c:	f7ff f83c 	bl	80029c8 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003954:	f7ff f838 	bl	80029c8 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e232      	b.n	8003dcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003966:	4b34      	ldr	r3, [pc, #208]	@ (8003a38 <HAL_RCC_OscConfig+0x27c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0f0      	beq.n	8003954 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003972:	4b31      	ldr	r3, [pc, #196]	@ (8003a38 <HAL_RCC_OscConfig+0x27c>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	061b      	lsls	r3, r3, #24
 8003980:	492d      	ldr	r1, [pc, #180]	@ (8003a38 <HAL_RCC_OscConfig+0x27c>)
 8003982:	4313      	orrs	r3, r2
 8003984:	604b      	str	r3, [r1, #4]
 8003986:	e01a      	b.n	80039be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003988:	4b2b      	ldr	r3, [pc, #172]	@ (8003a38 <HAL_RCC_OscConfig+0x27c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a2a      	ldr	r2, [pc, #168]	@ (8003a38 <HAL_RCC_OscConfig+0x27c>)
 800398e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003994:	f7ff f818 	bl	80029c8 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800399c:	f7ff f814 	bl	80029c8 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e20e      	b.n	8003dcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039ae:	4b22      	ldr	r3, [pc, #136]	@ (8003a38 <HAL_RCC_OscConfig+0x27c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f0      	bne.n	800399c <HAL_RCC_OscConfig+0x1e0>
 80039ba:	e000      	b.n	80039be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d041      	beq.n	8003a4e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d01c      	beq.n	8003a0c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039d2:	4b19      	ldr	r3, [pc, #100]	@ (8003a38 <HAL_RCC_OscConfig+0x27c>)
 80039d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039d8:	4a17      	ldr	r2, [pc, #92]	@ (8003a38 <HAL_RCC_OscConfig+0x27c>)
 80039da:	f043 0301 	orr.w	r3, r3, #1
 80039de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e2:	f7fe fff1 	bl	80029c8 <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039e8:	e008      	b.n	80039fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ea:	f7fe ffed 	bl	80029c8 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e1e7      	b.n	8003dcc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003a38 <HAL_RCC_OscConfig+0x27c>)
 80039fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0ef      	beq.n	80039ea <HAL_RCC_OscConfig+0x22e>
 8003a0a:	e020      	b.n	8003a4e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a38 <HAL_RCC_OscConfig+0x27c>)
 8003a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a12:	4a09      	ldr	r2, [pc, #36]	@ (8003a38 <HAL_RCC_OscConfig+0x27c>)
 8003a14:	f023 0301 	bic.w	r3, r3, #1
 8003a18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a1c:	f7fe ffd4 	bl	80029c8 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a22:	e00d      	b.n	8003a40 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a24:	f7fe ffd0 	bl	80029c8 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d906      	bls.n	8003a40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e1ca      	b.n	8003dcc <HAL_RCC_OscConfig+0x610>
 8003a36:	bf00      	nop
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a40:	4b8c      	ldr	r3, [pc, #560]	@ (8003c74 <HAL_RCC_OscConfig+0x4b8>)
 8003a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1ea      	bne.n	8003a24 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 80a6 	beq.w	8003ba8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a60:	4b84      	ldr	r3, [pc, #528]	@ (8003c74 <HAL_RCC_OscConfig+0x4b8>)
 8003a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <HAL_RCC_OscConfig+0x2b4>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e000      	b.n	8003a72 <HAL_RCC_OscConfig+0x2b6>
 8003a70:	2300      	movs	r3, #0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00d      	beq.n	8003a92 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a76:	4b7f      	ldr	r3, [pc, #508]	@ (8003c74 <HAL_RCC_OscConfig+0x4b8>)
 8003a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a7a:	4a7e      	ldr	r2, [pc, #504]	@ (8003c74 <HAL_RCC_OscConfig+0x4b8>)
 8003a7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a80:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a82:	4b7c      	ldr	r3, [pc, #496]	@ (8003c74 <HAL_RCC_OscConfig+0x4b8>)
 8003a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a92:	4b79      	ldr	r3, [pc, #484]	@ (8003c78 <HAL_RCC_OscConfig+0x4bc>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d118      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a9e:	4b76      	ldr	r3, [pc, #472]	@ (8003c78 <HAL_RCC_OscConfig+0x4bc>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a75      	ldr	r2, [pc, #468]	@ (8003c78 <HAL_RCC_OscConfig+0x4bc>)
 8003aa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aaa:	f7fe ff8d 	bl	80029c8 <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab2:	f7fe ff89 	bl	80029c8 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e183      	b.n	8003dcc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ac4:	4b6c      	ldr	r3, [pc, #432]	@ (8003c78 <HAL_RCC_OscConfig+0x4bc>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0f0      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d108      	bne.n	8003aea <HAL_RCC_OscConfig+0x32e>
 8003ad8:	4b66      	ldr	r3, [pc, #408]	@ (8003c74 <HAL_RCC_OscConfig+0x4b8>)
 8003ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ade:	4a65      	ldr	r2, [pc, #404]	@ (8003c74 <HAL_RCC_OscConfig+0x4b8>)
 8003ae0:	f043 0301 	orr.w	r3, r3, #1
 8003ae4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ae8:	e024      	b.n	8003b34 <HAL_RCC_OscConfig+0x378>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b05      	cmp	r3, #5
 8003af0:	d110      	bne.n	8003b14 <HAL_RCC_OscConfig+0x358>
 8003af2:	4b60      	ldr	r3, [pc, #384]	@ (8003c74 <HAL_RCC_OscConfig+0x4b8>)
 8003af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003af8:	4a5e      	ldr	r2, [pc, #376]	@ (8003c74 <HAL_RCC_OscConfig+0x4b8>)
 8003afa:	f043 0304 	orr.w	r3, r3, #4
 8003afe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b02:	4b5c      	ldr	r3, [pc, #368]	@ (8003c74 <HAL_RCC_OscConfig+0x4b8>)
 8003b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b08:	4a5a      	ldr	r2, [pc, #360]	@ (8003c74 <HAL_RCC_OscConfig+0x4b8>)
 8003b0a:	f043 0301 	orr.w	r3, r3, #1
 8003b0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b12:	e00f      	b.n	8003b34 <HAL_RCC_OscConfig+0x378>
 8003b14:	4b57      	ldr	r3, [pc, #348]	@ (8003c74 <HAL_RCC_OscConfig+0x4b8>)
 8003b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b1a:	4a56      	ldr	r2, [pc, #344]	@ (8003c74 <HAL_RCC_OscConfig+0x4b8>)
 8003b1c:	f023 0301 	bic.w	r3, r3, #1
 8003b20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b24:	4b53      	ldr	r3, [pc, #332]	@ (8003c74 <HAL_RCC_OscConfig+0x4b8>)
 8003b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b2a:	4a52      	ldr	r2, [pc, #328]	@ (8003c74 <HAL_RCC_OscConfig+0x4b8>)
 8003b2c:	f023 0304 	bic.w	r3, r3, #4
 8003b30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d016      	beq.n	8003b6a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3c:	f7fe ff44 	bl	80029c8 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b42:	e00a      	b.n	8003b5a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b44:	f7fe ff40 	bl	80029c8 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e138      	b.n	8003dcc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b5a:	4b46      	ldr	r3, [pc, #280]	@ (8003c74 <HAL_RCC_OscConfig+0x4b8>)
 8003b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0ed      	beq.n	8003b44 <HAL_RCC_OscConfig+0x388>
 8003b68:	e015      	b.n	8003b96 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6a:	f7fe ff2d 	bl	80029c8 <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b70:	e00a      	b.n	8003b88 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b72:	f7fe ff29 	bl	80029c8 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e121      	b.n	8003dcc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b88:	4b3a      	ldr	r3, [pc, #232]	@ (8003c74 <HAL_RCC_OscConfig+0x4b8>)
 8003b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1ed      	bne.n	8003b72 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b96:	7ffb      	ldrb	r3, [r7, #31]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d105      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b9c:	4b35      	ldr	r3, [pc, #212]	@ (8003c74 <HAL_RCC_OscConfig+0x4b8>)
 8003b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ba0:	4a34      	ldr	r2, [pc, #208]	@ (8003c74 <HAL_RCC_OscConfig+0x4b8>)
 8003ba2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ba6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0320 	and.w	r3, r3, #32
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d03c      	beq.n	8003c2e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d01c      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8003c74 <HAL_RCC_OscConfig+0x4b8>)
 8003bbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bc2:	4a2c      	ldr	r2, [pc, #176]	@ (8003c74 <HAL_RCC_OscConfig+0x4b8>)
 8003bc4:	f043 0301 	orr.w	r3, r3, #1
 8003bc8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bcc:	f7fe fefc 	bl	80029c8 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bd4:	f7fe fef8 	bl	80029c8 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e0f2      	b.n	8003dcc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003be6:	4b23      	ldr	r3, [pc, #140]	@ (8003c74 <HAL_RCC_OscConfig+0x4b8>)
 8003be8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0ef      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x418>
 8003bf4:	e01b      	b.n	8003c2e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8003c74 <HAL_RCC_OscConfig+0x4b8>)
 8003bf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8003c74 <HAL_RCC_OscConfig+0x4b8>)
 8003bfe:	f023 0301 	bic.w	r3, r3, #1
 8003c02:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c06:	f7fe fedf 	bl	80029c8 <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c0c:	e008      	b.n	8003c20 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c0e:	f7fe fedb 	bl	80029c8 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e0d5      	b.n	8003dcc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c20:	4b14      	ldr	r3, [pc, #80]	@ (8003c74 <HAL_RCC_OscConfig+0x4b8>)
 8003c22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1ef      	bne.n	8003c0e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 80c9 	beq.w	8003dca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c38:	4b0e      	ldr	r3, [pc, #56]	@ (8003c74 <HAL_RCC_OscConfig+0x4b8>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f003 030c 	and.w	r3, r3, #12
 8003c40:	2b0c      	cmp	r3, #12
 8003c42:	f000 8083 	beq.w	8003d4c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d15e      	bne.n	8003d0c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c4e:	4b09      	ldr	r3, [pc, #36]	@ (8003c74 <HAL_RCC_OscConfig+0x4b8>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a08      	ldr	r2, [pc, #32]	@ (8003c74 <HAL_RCC_OscConfig+0x4b8>)
 8003c54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5a:	f7fe feb5 	bl	80029c8 <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c60:	e00c      	b.n	8003c7c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c62:	f7fe feb1 	bl	80029c8 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d905      	bls.n	8003c7c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e0ab      	b.n	8003dcc <HAL_RCC_OscConfig+0x610>
 8003c74:	40021000 	.word	0x40021000
 8003c78:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c7c:	4b55      	ldr	r3, [pc, #340]	@ (8003dd4 <HAL_RCC_OscConfig+0x618>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1ec      	bne.n	8003c62 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c88:	4b52      	ldr	r3, [pc, #328]	@ (8003dd4 <HAL_RCC_OscConfig+0x618>)
 8003c8a:	68da      	ldr	r2, [r3, #12]
 8003c8c:	4b52      	ldr	r3, [pc, #328]	@ (8003dd8 <HAL_RCC_OscConfig+0x61c>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6a11      	ldr	r1, [r2, #32]
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c98:	3a01      	subs	r2, #1
 8003c9a:	0112      	lsls	r2, r2, #4
 8003c9c:	4311      	orrs	r1, r2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003ca2:	0212      	lsls	r2, r2, #8
 8003ca4:	4311      	orrs	r1, r2
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003caa:	0852      	lsrs	r2, r2, #1
 8003cac:	3a01      	subs	r2, #1
 8003cae:	0552      	lsls	r2, r2, #21
 8003cb0:	4311      	orrs	r1, r2
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003cb6:	0852      	lsrs	r2, r2, #1
 8003cb8:	3a01      	subs	r2, #1
 8003cba:	0652      	lsls	r2, r2, #25
 8003cbc:	4311      	orrs	r1, r2
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003cc2:	06d2      	lsls	r2, r2, #27
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	4943      	ldr	r1, [pc, #268]	@ (8003dd4 <HAL_RCC_OscConfig+0x618>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ccc:	4b41      	ldr	r3, [pc, #260]	@ (8003dd4 <HAL_RCC_OscConfig+0x618>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a40      	ldr	r2, [pc, #256]	@ (8003dd4 <HAL_RCC_OscConfig+0x618>)
 8003cd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cd6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cd8:	4b3e      	ldr	r3, [pc, #248]	@ (8003dd4 <HAL_RCC_OscConfig+0x618>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	4a3d      	ldr	r2, [pc, #244]	@ (8003dd4 <HAL_RCC_OscConfig+0x618>)
 8003cde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ce2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce4:	f7fe fe70 	bl	80029c8 <HAL_GetTick>
 8003ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cea:	e008      	b.n	8003cfe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cec:	f7fe fe6c 	bl	80029c8 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e066      	b.n	8003dcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cfe:	4b35      	ldr	r3, [pc, #212]	@ (8003dd4 <HAL_RCC_OscConfig+0x618>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0f0      	beq.n	8003cec <HAL_RCC_OscConfig+0x530>
 8003d0a:	e05e      	b.n	8003dca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d0c:	4b31      	ldr	r3, [pc, #196]	@ (8003dd4 <HAL_RCC_OscConfig+0x618>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a30      	ldr	r2, [pc, #192]	@ (8003dd4 <HAL_RCC_OscConfig+0x618>)
 8003d12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d18:	f7fe fe56 	bl	80029c8 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d20:	f7fe fe52 	bl	80029c8 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e04c      	b.n	8003dcc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d32:	4b28      	ldr	r3, [pc, #160]	@ (8003dd4 <HAL_RCC_OscConfig+0x618>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f0      	bne.n	8003d20 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003d3e:	4b25      	ldr	r3, [pc, #148]	@ (8003dd4 <HAL_RCC_OscConfig+0x618>)
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	4924      	ldr	r1, [pc, #144]	@ (8003dd4 <HAL_RCC_OscConfig+0x618>)
 8003d44:	4b25      	ldr	r3, [pc, #148]	@ (8003ddc <HAL_RCC_OscConfig+0x620>)
 8003d46:	4013      	ands	r3, r2
 8003d48:	60cb      	str	r3, [r1, #12]
 8003d4a:	e03e      	b.n	8003dca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d101      	bne.n	8003d58 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e039      	b.n	8003dcc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003d58:	4b1e      	ldr	r3, [pc, #120]	@ (8003dd4 <HAL_RCC_OscConfig+0x618>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f003 0203 	and.w	r2, r3, #3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d12c      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d76:	3b01      	subs	r3, #1
 8003d78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d123      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d88:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d11b      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d98:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d113      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da8:	085b      	lsrs	r3, r3, #1
 8003daa:	3b01      	subs	r3, #1
 8003dac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d109      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dbc:	085b      	lsrs	r3, r3, #1
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d001      	beq.n	8003dca <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e000      	b.n	8003dcc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3720      	adds	r7, #32
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	019f800c 	.word	0x019f800c
 8003ddc:	feeefffc 	.word	0xfeeefffc

08003de0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003dea:	2300      	movs	r3, #0
 8003dec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e11e      	b.n	8004036 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003df8:	4b91      	ldr	r3, [pc, #580]	@ (8004040 <HAL_RCC_ClockConfig+0x260>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 030f 	and.w	r3, r3, #15
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d910      	bls.n	8003e28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e06:	4b8e      	ldr	r3, [pc, #568]	@ (8004040 <HAL_RCC_ClockConfig+0x260>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f023 020f 	bic.w	r2, r3, #15
 8003e0e:	498c      	ldr	r1, [pc, #560]	@ (8004040 <HAL_RCC_ClockConfig+0x260>)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e16:	4b8a      	ldr	r3, [pc, #552]	@ (8004040 <HAL_RCC_ClockConfig+0x260>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d001      	beq.n	8003e28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e106      	b.n	8004036 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d073      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2b03      	cmp	r3, #3
 8003e3a:	d129      	bne.n	8003e90 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e3c:	4b81      	ldr	r3, [pc, #516]	@ (8004044 <HAL_RCC_ClockConfig+0x264>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e0f4      	b.n	8004036 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003e4c:	f000 f9d0 	bl	80041f0 <RCC_GetSysClockFreqFromPLLSource>
 8003e50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	4a7c      	ldr	r2, [pc, #496]	@ (8004048 <HAL_RCC_ClockConfig+0x268>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d93f      	bls.n	8003eda <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e5a:	4b7a      	ldr	r3, [pc, #488]	@ (8004044 <HAL_RCC_ClockConfig+0x264>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d009      	beq.n	8003e7a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d033      	beq.n	8003eda <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d12f      	bne.n	8003eda <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e7a:	4b72      	ldr	r3, [pc, #456]	@ (8004044 <HAL_RCC_ClockConfig+0x264>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e82:	4a70      	ldr	r2, [pc, #448]	@ (8004044 <HAL_RCC_ClockConfig+0x264>)
 8003e84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e88:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e8a:	2380      	movs	r3, #128	@ 0x80
 8003e8c:	617b      	str	r3, [r7, #20]
 8003e8e:	e024      	b.n	8003eda <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d107      	bne.n	8003ea8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e98:	4b6a      	ldr	r3, [pc, #424]	@ (8004044 <HAL_RCC_ClockConfig+0x264>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d109      	bne.n	8003eb8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e0c6      	b.n	8004036 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ea8:	4b66      	ldr	r3, [pc, #408]	@ (8004044 <HAL_RCC_ClockConfig+0x264>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e0be      	b.n	8004036 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003eb8:	f000 f8ce 	bl	8004058 <HAL_RCC_GetSysClockFreq>
 8003ebc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	4a61      	ldr	r2, [pc, #388]	@ (8004048 <HAL_RCC_ClockConfig+0x268>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d909      	bls.n	8003eda <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ec6:	4b5f      	ldr	r3, [pc, #380]	@ (8004044 <HAL_RCC_ClockConfig+0x264>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ece:	4a5d      	ldr	r2, [pc, #372]	@ (8004044 <HAL_RCC_ClockConfig+0x264>)
 8003ed0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ed4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003ed6:	2380      	movs	r3, #128	@ 0x80
 8003ed8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003eda:	4b5a      	ldr	r3, [pc, #360]	@ (8004044 <HAL_RCC_ClockConfig+0x264>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f023 0203 	bic.w	r2, r3, #3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	4957      	ldr	r1, [pc, #348]	@ (8004044 <HAL_RCC_ClockConfig+0x264>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eec:	f7fe fd6c 	bl	80029c8 <HAL_GetTick>
 8003ef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef2:	e00a      	b.n	8003f0a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ef4:	f7fe fd68 	bl	80029c8 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e095      	b.n	8004036 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f0a:	4b4e      	ldr	r3, [pc, #312]	@ (8004044 <HAL_RCC_ClockConfig+0x264>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 020c 	and.w	r2, r3, #12
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d1eb      	bne.n	8003ef4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d023      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d005      	beq.n	8003f40 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f34:	4b43      	ldr	r3, [pc, #268]	@ (8004044 <HAL_RCC_ClockConfig+0x264>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	4a42      	ldr	r2, [pc, #264]	@ (8004044 <HAL_RCC_ClockConfig+0x264>)
 8003f3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f3e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0308 	and.w	r3, r3, #8
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d007      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003f4c:	4b3d      	ldr	r3, [pc, #244]	@ (8004044 <HAL_RCC_ClockConfig+0x264>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003f54:	4a3b      	ldr	r2, [pc, #236]	@ (8004044 <HAL_RCC_ClockConfig+0x264>)
 8003f56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003f5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f5c:	4b39      	ldr	r3, [pc, #228]	@ (8004044 <HAL_RCC_ClockConfig+0x264>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	4936      	ldr	r1, [pc, #216]	@ (8004044 <HAL_RCC_ClockConfig+0x264>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	608b      	str	r3, [r1, #8]
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2b80      	cmp	r3, #128	@ 0x80
 8003f74:	d105      	bne.n	8003f82 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f76:	4b33      	ldr	r3, [pc, #204]	@ (8004044 <HAL_RCC_ClockConfig+0x264>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	4a32      	ldr	r2, [pc, #200]	@ (8004044 <HAL_RCC_ClockConfig+0x264>)
 8003f7c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f80:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f82:	4b2f      	ldr	r3, [pc, #188]	@ (8004040 <HAL_RCC_ClockConfig+0x260>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 030f 	and.w	r3, r3, #15
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d21d      	bcs.n	8003fcc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f90:	4b2b      	ldr	r3, [pc, #172]	@ (8004040 <HAL_RCC_ClockConfig+0x260>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f023 020f 	bic.w	r2, r3, #15
 8003f98:	4929      	ldr	r1, [pc, #164]	@ (8004040 <HAL_RCC_ClockConfig+0x260>)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003fa0:	f7fe fd12 	bl	80029c8 <HAL_GetTick>
 8003fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa6:	e00a      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fa8:	f7fe fd0e 	bl	80029c8 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e03b      	b.n	8004036 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fbe:	4b20      	ldr	r3, [pc, #128]	@ (8004040 <HAL_RCC_ClockConfig+0x260>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d1ed      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d008      	beq.n	8003fea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8004044 <HAL_RCC_ClockConfig+0x264>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	4917      	ldr	r1, [pc, #92]	@ (8004044 <HAL_RCC_ClockConfig+0x264>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d009      	beq.n	800400a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ff6:	4b13      	ldr	r3, [pc, #76]	@ (8004044 <HAL_RCC_ClockConfig+0x264>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	490f      	ldr	r1, [pc, #60]	@ (8004044 <HAL_RCC_ClockConfig+0x264>)
 8004006:	4313      	orrs	r3, r2
 8004008:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800400a:	f000 f825 	bl	8004058 <HAL_RCC_GetSysClockFreq>
 800400e:	4602      	mov	r2, r0
 8004010:	4b0c      	ldr	r3, [pc, #48]	@ (8004044 <HAL_RCC_ClockConfig+0x264>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	091b      	lsrs	r3, r3, #4
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	490c      	ldr	r1, [pc, #48]	@ (800404c <HAL_RCC_ClockConfig+0x26c>)
 800401c:	5ccb      	ldrb	r3, [r1, r3]
 800401e:	f003 031f 	and.w	r3, r3, #31
 8004022:	fa22 f303 	lsr.w	r3, r2, r3
 8004026:	4a0a      	ldr	r2, [pc, #40]	@ (8004050 <HAL_RCC_ClockConfig+0x270>)
 8004028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800402a:	4b0a      	ldr	r3, [pc, #40]	@ (8004054 <HAL_RCC_ClockConfig+0x274>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f7fd fe86 	bl	8001d40 <HAL_InitTick>
 8004034:	4603      	mov	r3, r0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3718      	adds	r7, #24
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	40022000 	.word	0x40022000
 8004044:	40021000 	.word	0x40021000
 8004048:	04c4b400 	.word	0x04c4b400
 800404c:	08018024 	.word	0x08018024
 8004050:	2000000c 	.word	0x2000000c
 8004054:	20000010 	.word	0x20000010

08004058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800405e:	4b2c      	ldr	r3, [pc, #176]	@ (8004110 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 030c 	and.w	r3, r3, #12
 8004066:	2b04      	cmp	r3, #4
 8004068:	d102      	bne.n	8004070 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800406a:	4b2a      	ldr	r3, [pc, #168]	@ (8004114 <HAL_RCC_GetSysClockFreq+0xbc>)
 800406c:	613b      	str	r3, [r7, #16]
 800406e:	e047      	b.n	8004100 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004070:	4b27      	ldr	r3, [pc, #156]	@ (8004110 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f003 030c 	and.w	r3, r3, #12
 8004078:	2b08      	cmp	r3, #8
 800407a:	d102      	bne.n	8004082 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800407c:	4b26      	ldr	r3, [pc, #152]	@ (8004118 <HAL_RCC_GetSysClockFreq+0xc0>)
 800407e:	613b      	str	r3, [r7, #16]
 8004080:	e03e      	b.n	8004100 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004082:	4b23      	ldr	r3, [pc, #140]	@ (8004110 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 030c 	and.w	r3, r3, #12
 800408a:	2b0c      	cmp	r3, #12
 800408c:	d136      	bne.n	80040fc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800408e:	4b20      	ldr	r3, [pc, #128]	@ (8004110 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004098:	4b1d      	ldr	r3, [pc, #116]	@ (8004110 <HAL_RCC_GetSysClockFreq+0xb8>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	091b      	lsrs	r3, r3, #4
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	3301      	adds	r3, #1
 80040a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2b03      	cmp	r3, #3
 80040aa:	d10c      	bne.n	80040c6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040ac:	4a1a      	ldr	r2, [pc, #104]	@ (8004118 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b4:	4a16      	ldr	r2, [pc, #88]	@ (8004110 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040b6:	68d2      	ldr	r2, [r2, #12]
 80040b8:	0a12      	lsrs	r2, r2, #8
 80040ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80040be:	fb02 f303 	mul.w	r3, r2, r3
 80040c2:	617b      	str	r3, [r7, #20]
      break;
 80040c4:	e00c      	b.n	80040e0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040c6:	4a13      	ldr	r2, [pc, #76]	@ (8004114 <HAL_RCC_GetSysClockFreq+0xbc>)
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ce:	4a10      	ldr	r2, [pc, #64]	@ (8004110 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040d0:	68d2      	ldr	r2, [r2, #12]
 80040d2:	0a12      	lsrs	r2, r2, #8
 80040d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80040d8:	fb02 f303 	mul.w	r3, r2, r3
 80040dc:	617b      	str	r3, [r7, #20]
      break;
 80040de:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004110 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	0e5b      	lsrs	r3, r3, #25
 80040e6:	f003 0303 	and.w	r3, r3, #3
 80040ea:	3301      	adds	r3, #1
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	e001      	b.n	8004100 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004100:	693b      	ldr	r3, [r7, #16]
}
 8004102:	4618      	mov	r0, r3
 8004104:	371c      	adds	r7, #28
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	40021000 	.word	0x40021000
 8004114:	00f42400 	.word	0x00f42400
 8004118:	016e3600 	.word	0x016e3600

0800411c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004120:	4b03      	ldr	r3, [pc, #12]	@ (8004130 <HAL_RCC_GetHCLKFreq+0x14>)
 8004122:	681b      	ldr	r3, [r3, #0]
}
 8004124:	4618      	mov	r0, r3
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	2000000c 	.word	0x2000000c

08004134 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004138:	f7ff fff0 	bl	800411c <HAL_RCC_GetHCLKFreq>
 800413c:	4602      	mov	r2, r0
 800413e:	4b06      	ldr	r3, [pc, #24]	@ (8004158 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	0a1b      	lsrs	r3, r3, #8
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	4904      	ldr	r1, [pc, #16]	@ (800415c <HAL_RCC_GetPCLK1Freq+0x28>)
 800414a:	5ccb      	ldrb	r3, [r1, r3]
 800414c:	f003 031f 	and.w	r3, r3, #31
 8004150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004154:	4618      	mov	r0, r3
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40021000 	.word	0x40021000
 800415c:	08018034 	.word	0x08018034

08004160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004164:	f7ff ffda 	bl	800411c <HAL_RCC_GetHCLKFreq>
 8004168:	4602      	mov	r2, r0
 800416a:	4b06      	ldr	r3, [pc, #24]	@ (8004184 <HAL_RCC_GetPCLK2Freq+0x24>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	0adb      	lsrs	r3, r3, #11
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	4904      	ldr	r1, [pc, #16]	@ (8004188 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004176:	5ccb      	ldrb	r3, [r1, r3]
 8004178:	f003 031f 	and.w	r3, r3, #31
 800417c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004180:	4618      	mov	r0, r3
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40021000 	.word	0x40021000
 8004188:	08018034 	.word	0x08018034

0800418c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	220f      	movs	r2, #15
 800419a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800419c:	4b12      	ldr	r3, [pc, #72]	@ (80041e8 <HAL_RCC_GetClockConfig+0x5c>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 0203 	and.w	r2, r3, #3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80041a8:	4b0f      	ldr	r3, [pc, #60]	@ (80041e8 <HAL_RCC_GetClockConfig+0x5c>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80041b4:	4b0c      	ldr	r3, [pc, #48]	@ (80041e8 <HAL_RCC_GetClockConfig+0x5c>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80041c0:	4b09      	ldr	r3, [pc, #36]	@ (80041e8 <HAL_RCC_GetClockConfig+0x5c>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	08db      	lsrs	r3, r3, #3
 80041c6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80041ce:	4b07      	ldr	r3, [pc, #28]	@ (80041ec <HAL_RCC_GetClockConfig+0x60>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 020f 	and.w	r2, r3, #15
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	601a      	str	r2, [r3, #0]
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	40021000 	.word	0x40021000
 80041ec:	40022000 	.word	0x40022000

080041f0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b087      	sub	sp, #28
 80041f4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004270 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004200:	4b1b      	ldr	r3, [pc, #108]	@ (8004270 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	091b      	lsrs	r3, r3, #4
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	3301      	adds	r3, #1
 800420c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	2b03      	cmp	r3, #3
 8004212:	d10c      	bne.n	800422e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004214:	4a17      	ldr	r2, [pc, #92]	@ (8004274 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	fbb2 f3f3 	udiv	r3, r2, r3
 800421c:	4a14      	ldr	r2, [pc, #80]	@ (8004270 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800421e:	68d2      	ldr	r2, [r2, #12]
 8004220:	0a12      	lsrs	r2, r2, #8
 8004222:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004226:	fb02 f303 	mul.w	r3, r2, r3
 800422a:	617b      	str	r3, [r7, #20]
    break;
 800422c:	e00c      	b.n	8004248 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800422e:	4a12      	ldr	r2, [pc, #72]	@ (8004278 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	fbb2 f3f3 	udiv	r3, r2, r3
 8004236:	4a0e      	ldr	r2, [pc, #56]	@ (8004270 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004238:	68d2      	ldr	r2, [r2, #12]
 800423a:	0a12      	lsrs	r2, r2, #8
 800423c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004240:	fb02 f303 	mul.w	r3, r2, r3
 8004244:	617b      	str	r3, [r7, #20]
    break;
 8004246:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004248:	4b09      	ldr	r3, [pc, #36]	@ (8004270 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	0e5b      	lsrs	r3, r3, #25
 800424e:	f003 0303 	and.w	r3, r3, #3
 8004252:	3301      	adds	r3, #1
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004260:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004262:	687b      	ldr	r3, [r7, #4]
}
 8004264:	4618      	mov	r0, r3
 8004266:	371c      	adds	r7, #28
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	40021000 	.word	0x40021000
 8004274:	016e3600 	.word	0x016e3600
 8004278:	00f42400 	.word	0x00f42400

0800427c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004284:	2300      	movs	r3, #0
 8004286:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004288:	2300      	movs	r3, #0
 800428a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 8098 	beq.w	80043ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800429a:	2300      	movs	r3, #0
 800429c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800429e:	4b43      	ldr	r3, [pc, #268]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10d      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042aa:	4b40      	ldr	r3, [pc, #256]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ae:	4a3f      	ldr	r2, [pc, #252]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80042b6:	4b3d      	ldr	r3, [pc, #244]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042be:	60bb      	str	r3, [r7, #8]
 80042c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042c2:	2301      	movs	r3, #1
 80042c4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042c6:	4b3a      	ldr	r3, [pc, #232]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a39      	ldr	r2, [pc, #228]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80042cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042d2:	f7fe fb79 	bl	80029c8 <HAL_GetTick>
 80042d6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042d8:	e009      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042da:	f7fe fb75 	bl	80029c8 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d902      	bls.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	74fb      	strb	r3, [r7, #19]
        break;
 80042ec:	e005      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042ee:	4b30      	ldr	r3, [pc, #192]	@ (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0ef      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80042fa:	7cfb      	ldrb	r3, [r7, #19]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d159      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004300:	4b2a      	ldr	r3, [pc, #168]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004306:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800430a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d01e      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	429a      	cmp	r2, r3
 800431a:	d019      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800431c:	4b23      	ldr	r3, [pc, #140]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800431e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004322:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004326:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004328:	4b20      	ldr	r3, [pc, #128]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800432a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800432e:	4a1f      	ldr	r2, [pc, #124]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004334:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004338:	4b1c      	ldr	r3, [pc, #112]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800433a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800433e:	4a1b      	ldr	r2, [pc, #108]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004340:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004344:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004348:	4a18      	ldr	r2, [pc, #96]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d016      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435a:	f7fe fb35 	bl	80029c8 <HAL_GetTick>
 800435e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004360:	e00b      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004362:	f7fe fb31 	bl	80029c8 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004370:	4293      	cmp	r3, r2
 8004372:	d902      	bls.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	74fb      	strb	r3, [r7, #19]
            break;
 8004378:	e006      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800437a:	4b0c      	ldr	r3, [pc, #48]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800437c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0ec      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004388:	7cfb      	ldrb	r3, [r7, #19]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10b      	bne.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800438e:	4b07      	ldr	r3, [pc, #28]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004394:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800439c:	4903      	ldr	r1, [pc, #12]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80043a4:	e008      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043a6:	7cfb      	ldrb	r3, [r7, #19]
 80043a8:	74bb      	strb	r3, [r7, #18]
 80043aa:	e005      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80043ac:	40021000 	.word	0x40021000
 80043b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b4:	7cfb      	ldrb	r3, [r7, #19]
 80043b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043b8:	7c7b      	ldrb	r3, [r7, #17]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d105      	bne.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043be:	4ba7      	ldr	r3, [pc, #668]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043c2:	4aa6      	ldr	r2, [pc, #664]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043d6:	4ba1      	ldr	r3, [pc, #644]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043dc:	f023 0203 	bic.w	r2, r3, #3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	499d      	ldr	r1, [pc, #628]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043f8:	4b98      	ldr	r3, [pc, #608]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043fe:	f023 020c 	bic.w	r2, r3, #12
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	4995      	ldr	r1, [pc, #596]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004408:	4313      	orrs	r3, r2
 800440a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0304 	and.w	r3, r3, #4
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800441a:	4b90      	ldr	r3, [pc, #576]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800441c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004420:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	498c      	ldr	r1, [pc, #560]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800442a:	4313      	orrs	r3, r2
 800442c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00a      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800443c:	4b87      	ldr	r3, [pc, #540]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800443e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004442:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	4984      	ldr	r1, [pc, #528]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0310 	and.w	r3, r3, #16
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00a      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800445e:	4b7f      	ldr	r3, [pc, #508]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004464:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	497b      	ldr	r1, [pc, #492]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800446e:	4313      	orrs	r3, r2
 8004470:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0320 	and.w	r3, r3, #32
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00a      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004480:	4b76      	ldr	r3, [pc, #472]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004486:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	4973      	ldr	r1, [pc, #460]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004490:	4313      	orrs	r3, r2
 8004492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00a      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044a2:	4b6e      	ldr	r3, [pc, #440]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	496a      	ldr	r1, [pc, #424]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00a      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044c4:	4b65      	ldr	r3, [pc, #404]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	4962      	ldr	r1, [pc, #392]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044e6:	4b5d      	ldr	r3, [pc, #372]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f4:	4959      	ldr	r1, [pc, #356]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00a      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004508:	4b54      	ldr	r3, [pc, #336]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800450a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800450e:	f023 0203 	bic.w	r2, r3, #3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004516:	4951      	ldr	r1, [pc, #324]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004518:	4313      	orrs	r3, r2
 800451a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800452a:	4b4c      	ldr	r3, [pc, #304]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800452c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004530:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004538:	4948      	ldr	r1, [pc, #288]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800453a:	4313      	orrs	r3, r2
 800453c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004548:	2b00      	cmp	r3, #0
 800454a:	d015      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800454c:	4b43      	ldr	r3, [pc, #268]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800454e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004552:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455a:	4940      	ldr	r1, [pc, #256]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800455c:	4313      	orrs	r3, r2
 800455e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004566:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800456a:	d105      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800456c:	4b3b      	ldr	r3, [pc, #236]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	4a3a      	ldr	r2, [pc, #232]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004572:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004576:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004580:	2b00      	cmp	r3, #0
 8004582:	d015      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004584:	4b35      	ldr	r3, [pc, #212]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800458a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004592:	4932      	ldr	r1, [pc, #200]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004594:	4313      	orrs	r3, r2
 8004596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800459e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045a2:	d105      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045a4:	4b2d      	ldr	r3, [pc, #180]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	4a2c      	ldr	r2, [pc, #176]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045ae:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d015      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80045bc:	4b27      	ldr	r3, [pc, #156]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ca:	4924      	ldr	r1, [pc, #144]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045da:	d105      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045dc:	4b1f      	ldr	r3, [pc, #124]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	4a1e      	ldr	r2, [pc, #120]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045e6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d015      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045f4:	4b19      	ldr	r3, [pc, #100]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004602:	4916      	ldr	r1, [pc, #88]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800460e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004612:	d105      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004614:	4b11      	ldr	r3, [pc, #68]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	4a10      	ldr	r2, [pc, #64]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800461a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800461e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d019      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800462c:	4b0b      	ldr	r3, [pc, #44]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800462e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004632:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463a:	4908      	ldr	r1, [pc, #32]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800463c:	4313      	orrs	r3, r2
 800463e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004646:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800464a:	d109      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800464c:	4b03      	ldr	r3, [pc, #12]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	4a02      	ldr	r2, [pc, #8]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004652:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004656:	60d3      	str	r3, [r2, #12]
 8004658:	e002      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800465a:	bf00      	nop
 800465c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d015      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800466c:	4b29      	ldr	r3, [pc, #164]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004672:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800467a:	4926      	ldr	r1, [pc, #152]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004686:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800468a:	d105      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800468c:	4b21      	ldr	r3, [pc, #132]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	4a20      	ldr	r2, [pc, #128]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004692:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004696:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d015      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80046a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046aa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046b2:	4918      	ldr	r1, [pc, #96]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046c2:	d105      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80046c4:	4b13      	ldr	r3, [pc, #76]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	4a12      	ldr	r2, [pc, #72]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046ce:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d015      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80046dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ea:	490a      	ldr	r1, [pc, #40]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046fa:	d105      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046fc:	4b05      	ldr	r3, [pc, #20]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	4a04      	ldr	r2, [pc, #16]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004702:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004706:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004708:	7cbb      	ldrb	r3, [r7, #18]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	40021000 	.word	0x40021000

08004718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e049      	b.n	80047be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d106      	bne.n	8004744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7fd fa54 	bl	8001bec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3304      	adds	r3, #4
 8004754:	4619      	mov	r1, r3
 8004756:	4610      	mov	r0, r2
 8004758:	f000 fe34 	bl	80053c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
	...

080047c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d001      	beq.n	80047e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e04c      	b.n	800487a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a26      	ldr	r2, [pc, #152]	@ (8004888 <HAL_TIM_Base_Start+0xc0>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d022      	beq.n	8004838 <HAL_TIM_Base_Start+0x70>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047fa:	d01d      	beq.n	8004838 <HAL_TIM_Base_Start+0x70>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a22      	ldr	r2, [pc, #136]	@ (800488c <HAL_TIM_Base_Start+0xc4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d018      	beq.n	8004838 <HAL_TIM_Base_Start+0x70>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a21      	ldr	r2, [pc, #132]	@ (8004890 <HAL_TIM_Base_Start+0xc8>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d013      	beq.n	8004838 <HAL_TIM_Base_Start+0x70>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a1f      	ldr	r2, [pc, #124]	@ (8004894 <HAL_TIM_Base_Start+0xcc>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d00e      	beq.n	8004838 <HAL_TIM_Base_Start+0x70>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a1e      	ldr	r2, [pc, #120]	@ (8004898 <HAL_TIM_Base_Start+0xd0>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d009      	beq.n	8004838 <HAL_TIM_Base_Start+0x70>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a1c      	ldr	r2, [pc, #112]	@ (800489c <HAL_TIM_Base_Start+0xd4>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d004      	beq.n	8004838 <HAL_TIM_Base_Start+0x70>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a1b      	ldr	r2, [pc, #108]	@ (80048a0 <HAL_TIM_Base_Start+0xd8>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d115      	bne.n	8004864 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689a      	ldr	r2, [r3, #8]
 800483e:	4b19      	ldr	r3, [pc, #100]	@ (80048a4 <HAL_TIM_Base_Start+0xdc>)
 8004840:	4013      	ands	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2b06      	cmp	r3, #6
 8004848:	d015      	beq.n	8004876 <HAL_TIM_Base_Start+0xae>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004850:	d011      	beq.n	8004876 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f042 0201 	orr.w	r2, r2, #1
 8004860:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004862:	e008      	b.n	8004876 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0201 	orr.w	r2, r2, #1
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	e000      	b.n	8004878 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004876:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40012c00 	.word	0x40012c00
 800488c:	40000400 	.word	0x40000400
 8004890:	40000800 	.word	0x40000800
 8004894:	40000c00 	.word	0x40000c00
 8004898:	40013400 	.word	0x40013400
 800489c:	40014000 	.word	0x40014000
 80048a0:	40015000 	.word	0x40015000
 80048a4:	00010007 	.word	0x00010007

080048a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d001      	beq.n	80048c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e054      	b.n	800496a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0201 	orr.w	r2, r2, #1
 80048d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a26      	ldr	r2, [pc, #152]	@ (8004978 <HAL_TIM_Base_Start_IT+0xd0>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d022      	beq.n	8004928 <HAL_TIM_Base_Start_IT+0x80>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048ea:	d01d      	beq.n	8004928 <HAL_TIM_Base_Start_IT+0x80>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a22      	ldr	r2, [pc, #136]	@ (800497c <HAL_TIM_Base_Start_IT+0xd4>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d018      	beq.n	8004928 <HAL_TIM_Base_Start_IT+0x80>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a21      	ldr	r2, [pc, #132]	@ (8004980 <HAL_TIM_Base_Start_IT+0xd8>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d013      	beq.n	8004928 <HAL_TIM_Base_Start_IT+0x80>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a1f      	ldr	r2, [pc, #124]	@ (8004984 <HAL_TIM_Base_Start_IT+0xdc>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d00e      	beq.n	8004928 <HAL_TIM_Base_Start_IT+0x80>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a1e      	ldr	r2, [pc, #120]	@ (8004988 <HAL_TIM_Base_Start_IT+0xe0>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d009      	beq.n	8004928 <HAL_TIM_Base_Start_IT+0x80>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a1c      	ldr	r2, [pc, #112]	@ (800498c <HAL_TIM_Base_Start_IT+0xe4>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d004      	beq.n	8004928 <HAL_TIM_Base_Start_IT+0x80>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a1b      	ldr	r2, [pc, #108]	@ (8004990 <HAL_TIM_Base_Start_IT+0xe8>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d115      	bne.n	8004954 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689a      	ldr	r2, [r3, #8]
 800492e:	4b19      	ldr	r3, [pc, #100]	@ (8004994 <HAL_TIM_Base_Start_IT+0xec>)
 8004930:	4013      	ands	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2b06      	cmp	r3, #6
 8004938:	d015      	beq.n	8004966 <HAL_TIM_Base_Start_IT+0xbe>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004940:	d011      	beq.n	8004966 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f042 0201 	orr.w	r2, r2, #1
 8004950:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004952:	e008      	b.n	8004966 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0201 	orr.w	r2, r2, #1
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	e000      	b.n	8004968 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004966:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	40012c00 	.word	0x40012c00
 800497c:	40000400 	.word	0x40000400
 8004980:	40000800 	.word	0x40000800
 8004984:	40000c00 	.word	0x40000c00
 8004988:	40013400 	.word	0x40013400
 800498c:	40014000 	.word	0x40014000
 8004990:	40015000 	.word	0x40015000
 8004994:	00010007 	.word	0x00010007

08004998 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e049      	b.n	8004a3e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d106      	bne.n	80049c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f841 	bl	8004a46 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	3304      	adds	r3, #4
 80049d4:	4619      	mov	r1, r3
 80049d6:	4610      	mov	r0, r2
 80049d8:	f000 fcf4 	bl	80053c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
	...

08004a5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d109      	bne.n	8004a80 <HAL_TIM_PWM_Start+0x24>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	bf14      	ite	ne
 8004a78:	2301      	movne	r3, #1
 8004a7a:	2300      	moveq	r3, #0
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	e03c      	b.n	8004afa <HAL_TIM_PWM_Start+0x9e>
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d109      	bne.n	8004a9a <HAL_TIM_PWM_Start+0x3e>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	bf14      	ite	ne
 8004a92:	2301      	movne	r3, #1
 8004a94:	2300      	moveq	r3, #0
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	e02f      	b.n	8004afa <HAL_TIM_PWM_Start+0x9e>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d109      	bne.n	8004ab4 <HAL_TIM_PWM_Start+0x58>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	bf14      	ite	ne
 8004aac:	2301      	movne	r3, #1
 8004aae:	2300      	moveq	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	e022      	b.n	8004afa <HAL_TIM_PWM_Start+0x9e>
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2b0c      	cmp	r3, #12
 8004ab8:	d109      	bne.n	8004ace <HAL_TIM_PWM_Start+0x72>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	bf14      	ite	ne
 8004ac6:	2301      	movne	r3, #1
 8004ac8:	2300      	moveq	r3, #0
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	e015      	b.n	8004afa <HAL_TIM_PWM_Start+0x9e>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b10      	cmp	r3, #16
 8004ad2:	d109      	bne.n	8004ae8 <HAL_TIM_PWM_Start+0x8c>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	bf14      	ite	ne
 8004ae0:	2301      	movne	r3, #1
 8004ae2:	2300      	moveq	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	e008      	b.n	8004afa <HAL_TIM_PWM_Start+0x9e>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	bf14      	ite	ne
 8004af4:	2301      	movne	r3, #1
 8004af6:	2300      	moveq	r3, #0
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e0a6      	b.n	8004c50 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d104      	bne.n	8004b12 <HAL_TIM_PWM_Start+0xb6>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b10:	e023      	b.n	8004b5a <HAL_TIM_PWM_Start+0xfe>
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d104      	bne.n	8004b22 <HAL_TIM_PWM_Start+0xc6>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b20:	e01b      	b.n	8004b5a <HAL_TIM_PWM_Start+0xfe>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2b08      	cmp	r3, #8
 8004b26:	d104      	bne.n	8004b32 <HAL_TIM_PWM_Start+0xd6>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b30:	e013      	b.n	8004b5a <HAL_TIM_PWM_Start+0xfe>
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b0c      	cmp	r3, #12
 8004b36:	d104      	bne.n	8004b42 <HAL_TIM_PWM_Start+0xe6>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b40:	e00b      	b.n	8004b5a <HAL_TIM_PWM_Start+0xfe>
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2b10      	cmp	r3, #16
 8004b46:	d104      	bne.n	8004b52 <HAL_TIM_PWM_Start+0xf6>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b50:	e003      	b.n	8004b5a <HAL_TIM_PWM_Start+0xfe>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2202      	movs	r2, #2
 8004b56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	6839      	ldr	r1, [r7, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f001 f8a8 	bl	8005cb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a3a      	ldr	r2, [pc, #232]	@ (8004c58 <HAL_TIM_PWM_Start+0x1fc>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d018      	beq.n	8004ba4 <HAL_TIM_PWM_Start+0x148>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a39      	ldr	r2, [pc, #228]	@ (8004c5c <HAL_TIM_PWM_Start+0x200>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d013      	beq.n	8004ba4 <HAL_TIM_PWM_Start+0x148>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a37      	ldr	r2, [pc, #220]	@ (8004c60 <HAL_TIM_PWM_Start+0x204>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d00e      	beq.n	8004ba4 <HAL_TIM_PWM_Start+0x148>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a36      	ldr	r2, [pc, #216]	@ (8004c64 <HAL_TIM_PWM_Start+0x208>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d009      	beq.n	8004ba4 <HAL_TIM_PWM_Start+0x148>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a34      	ldr	r2, [pc, #208]	@ (8004c68 <HAL_TIM_PWM_Start+0x20c>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d004      	beq.n	8004ba4 <HAL_TIM_PWM_Start+0x148>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a33      	ldr	r2, [pc, #204]	@ (8004c6c <HAL_TIM_PWM_Start+0x210>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d101      	bne.n	8004ba8 <HAL_TIM_PWM_Start+0x14c>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e000      	b.n	8004baa <HAL_TIM_PWM_Start+0x14e>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d007      	beq.n	8004bbe <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004bbc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a25      	ldr	r2, [pc, #148]	@ (8004c58 <HAL_TIM_PWM_Start+0x1fc>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d022      	beq.n	8004c0e <HAL_TIM_PWM_Start+0x1b2>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bd0:	d01d      	beq.n	8004c0e <HAL_TIM_PWM_Start+0x1b2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a26      	ldr	r2, [pc, #152]	@ (8004c70 <HAL_TIM_PWM_Start+0x214>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d018      	beq.n	8004c0e <HAL_TIM_PWM_Start+0x1b2>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a24      	ldr	r2, [pc, #144]	@ (8004c74 <HAL_TIM_PWM_Start+0x218>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d013      	beq.n	8004c0e <HAL_TIM_PWM_Start+0x1b2>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a23      	ldr	r2, [pc, #140]	@ (8004c78 <HAL_TIM_PWM_Start+0x21c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d00e      	beq.n	8004c0e <HAL_TIM_PWM_Start+0x1b2>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a19      	ldr	r2, [pc, #100]	@ (8004c5c <HAL_TIM_PWM_Start+0x200>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d009      	beq.n	8004c0e <HAL_TIM_PWM_Start+0x1b2>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a18      	ldr	r2, [pc, #96]	@ (8004c60 <HAL_TIM_PWM_Start+0x204>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d004      	beq.n	8004c0e <HAL_TIM_PWM_Start+0x1b2>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a18      	ldr	r2, [pc, #96]	@ (8004c6c <HAL_TIM_PWM_Start+0x210>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d115      	bne.n	8004c3a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	4b19      	ldr	r3, [pc, #100]	@ (8004c7c <HAL_TIM_PWM_Start+0x220>)
 8004c16:	4013      	ands	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b06      	cmp	r3, #6
 8004c1e:	d015      	beq.n	8004c4c <HAL_TIM_PWM_Start+0x1f0>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c26:	d011      	beq.n	8004c4c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f042 0201 	orr.w	r2, r2, #1
 8004c36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c38:	e008      	b.n	8004c4c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f042 0201 	orr.w	r2, r2, #1
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	e000      	b.n	8004c4e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	40012c00 	.word	0x40012c00
 8004c5c:	40013400 	.word	0x40013400
 8004c60:	40014000 	.word	0x40014000
 8004c64:	40014400 	.word	0x40014400
 8004c68:	40014800 	.word	0x40014800
 8004c6c:	40015000 	.word	0x40015000
 8004c70:	40000400 	.word	0x40000400
 8004c74:	40000800 	.word	0x40000800
 8004c78:	40000c00 	.word	0x40000c00
 8004c7c:	00010007 	.word	0x00010007

08004c80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d020      	beq.n	8004ce4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d01b      	beq.n	8004ce4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f06f 0202 	mvn.w	r2, #2
 8004cb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	f003 0303 	and.w	r3, r3, #3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 fb5c 	bl	8005388 <HAL_TIM_IC_CaptureCallback>
 8004cd0:	e005      	b.n	8004cde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 fb4e 	bl	8005374 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 fb5f 	bl	800539c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f003 0304 	and.w	r3, r3, #4
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d020      	beq.n	8004d30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d01b      	beq.n	8004d30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f06f 0204 	mvn.w	r2, #4
 8004d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2202      	movs	r2, #2
 8004d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 fb36 	bl	8005388 <HAL_TIM_IC_CaptureCallback>
 8004d1c:	e005      	b.n	8004d2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fb28 	bl	8005374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 fb39 	bl	800539c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d020      	beq.n	8004d7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f003 0308 	and.w	r3, r3, #8
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d01b      	beq.n	8004d7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0208 	mvn.w	r2, #8
 8004d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2204      	movs	r2, #4
 8004d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fb10 	bl	8005388 <HAL_TIM_IC_CaptureCallback>
 8004d68:	e005      	b.n	8004d76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fb02 	bl	8005374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 fb13 	bl	800539c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f003 0310 	and.w	r3, r3, #16
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d020      	beq.n	8004dc8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f003 0310 	and.w	r3, r3, #16
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d01b      	beq.n	8004dc8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f06f 0210 	mvn.w	r2, #16
 8004d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2208      	movs	r2, #8
 8004d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 faea 	bl	8005388 <HAL_TIM_IC_CaptureCallback>
 8004db4:	e005      	b.n	8004dc2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 fadc 	bl	8005374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 faed 	bl	800539c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00c      	beq.n	8004dec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d007      	beq.n	8004dec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f06f 0201 	mvn.w	r2, #1
 8004de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7fc fe00 	bl	80019ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d104      	bne.n	8004e00 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00c      	beq.n	8004e1a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d007      	beq.n	8004e1a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f001 f815 	bl	8005e44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00c      	beq.n	8004e3e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d007      	beq.n	8004e3e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f001 f80d 	bl	8005e58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00c      	beq.n	8004e62 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d007      	beq.n	8004e62 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 faa7 	bl	80053b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	f003 0320 	and.w	r3, r3, #32
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00c      	beq.n	8004e86 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f003 0320 	and.w	r3, r3, #32
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d007      	beq.n	8004e86 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f06f 0220 	mvn.w	r2, #32
 8004e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 ffd5 	bl	8005e30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00c      	beq.n	8004eaa <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d007      	beq.n	8004eaa <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 ffe1 	bl	8005e6c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00c      	beq.n	8004ece <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d007      	beq.n	8004ece <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 ffd9 	bl	8005e80 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00c      	beq.n	8004ef2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d007      	beq.n	8004ef2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 ffd1 	bl	8005e94 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00c      	beq.n	8004f16 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d007      	beq.n	8004f16 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 ffc9 	bl	8005ea8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f16:	bf00      	nop
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
	...

08004f20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d101      	bne.n	8004f3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	e0ff      	b.n	800513e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b14      	cmp	r3, #20
 8004f4a:	f200 80f0 	bhi.w	800512e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f54:	08004fa9 	.word	0x08004fa9
 8004f58:	0800512f 	.word	0x0800512f
 8004f5c:	0800512f 	.word	0x0800512f
 8004f60:	0800512f 	.word	0x0800512f
 8004f64:	08004fe9 	.word	0x08004fe9
 8004f68:	0800512f 	.word	0x0800512f
 8004f6c:	0800512f 	.word	0x0800512f
 8004f70:	0800512f 	.word	0x0800512f
 8004f74:	0800502b 	.word	0x0800502b
 8004f78:	0800512f 	.word	0x0800512f
 8004f7c:	0800512f 	.word	0x0800512f
 8004f80:	0800512f 	.word	0x0800512f
 8004f84:	0800506b 	.word	0x0800506b
 8004f88:	0800512f 	.word	0x0800512f
 8004f8c:	0800512f 	.word	0x0800512f
 8004f90:	0800512f 	.word	0x0800512f
 8004f94:	080050ad 	.word	0x080050ad
 8004f98:	0800512f 	.word	0x0800512f
 8004f9c:	0800512f 	.word	0x0800512f
 8004fa0:	0800512f 	.word	0x0800512f
 8004fa4:	080050ed 	.word	0x080050ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68b9      	ldr	r1, [r7, #8]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 fabc 	bl	800552c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	699a      	ldr	r2, [r3, #24]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0208 	orr.w	r2, r2, #8
 8004fc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699a      	ldr	r2, [r3, #24]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0204 	bic.w	r2, r2, #4
 8004fd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6999      	ldr	r1, [r3, #24]
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	691a      	ldr	r2, [r3, #16]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	619a      	str	r2, [r3, #24]
      break;
 8004fe6:	e0a5      	b.n	8005134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68b9      	ldr	r1, [r7, #8]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 fb36 	bl	8005660 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	699a      	ldr	r2, [r3, #24]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005002:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	699a      	ldr	r2, [r3, #24]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005012:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6999      	ldr	r1, [r3, #24]
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	021a      	lsls	r2, r3, #8
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	619a      	str	r2, [r3, #24]
      break;
 8005028:	e084      	b.n	8005134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68b9      	ldr	r1, [r7, #8]
 8005030:	4618      	mov	r0, r3
 8005032:	f000 fba9 	bl	8005788 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	69da      	ldr	r2, [r3, #28]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f042 0208 	orr.w	r2, r2, #8
 8005044:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	69da      	ldr	r2, [r3, #28]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0204 	bic.w	r2, r2, #4
 8005054:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	69d9      	ldr	r1, [r3, #28]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	691a      	ldr	r2, [r3, #16]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	430a      	orrs	r2, r1
 8005066:	61da      	str	r2, [r3, #28]
      break;
 8005068:	e064      	b.n	8005134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68b9      	ldr	r1, [r7, #8]
 8005070:	4618      	mov	r0, r3
 8005072:	f000 fc1b 	bl	80058ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69da      	ldr	r2, [r3, #28]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005084:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	69da      	ldr	r2, [r3, #28]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005094:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	69d9      	ldr	r1, [r3, #28]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	021a      	lsls	r2, r3, #8
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	61da      	str	r2, [r3, #28]
      break;
 80050aa:	e043      	b.n	8005134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68b9      	ldr	r1, [r7, #8]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 fc8e 	bl	80059d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0208 	orr.w	r2, r2, #8
 80050c6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0204 	bic.w	r2, r2, #4
 80050d6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	691a      	ldr	r2, [r3, #16]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80050ea:	e023      	b.n	8005134 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68b9      	ldr	r1, [r7, #8]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 fcd8 	bl	8005aa8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005106:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005116:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	021a      	lsls	r2, r3, #8
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800512c:	e002      	b.n	8005134 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	75fb      	strb	r3, [r7, #23]
      break;
 8005132:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800513c:	7dfb      	ldrb	r3, [r7, #23]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop

08005148 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005152:	2300      	movs	r3, #0
 8005154:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800515c:	2b01      	cmp	r3, #1
 800515e:	d101      	bne.n	8005164 <HAL_TIM_ConfigClockSource+0x1c>
 8005160:	2302      	movs	r3, #2
 8005162:	e0f6      	b.n	8005352 <HAL_TIM_ConfigClockSource+0x20a>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005182:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005186:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800518e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a6f      	ldr	r2, [pc, #444]	@ (800535c <HAL_TIM_ConfigClockSource+0x214>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	f000 80c1 	beq.w	8005326 <HAL_TIM_ConfigClockSource+0x1de>
 80051a4:	4a6d      	ldr	r2, [pc, #436]	@ (800535c <HAL_TIM_ConfigClockSource+0x214>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	f200 80c6 	bhi.w	8005338 <HAL_TIM_ConfigClockSource+0x1f0>
 80051ac:	4a6c      	ldr	r2, [pc, #432]	@ (8005360 <HAL_TIM_ConfigClockSource+0x218>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	f000 80b9 	beq.w	8005326 <HAL_TIM_ConfigClockSource+0x1de>
 80051b4:	4a6a      	ldr	r2, [pc, #424]	@ (8005360 <HAL_TIM_ConfigClockSource+0x218>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	f200 80be 	bhi.w	8005338 <HAL_TIM_ConfigClockSource+0x1f0>
 80051bc:	4a69      	ldr	r2, [pc, #420]	@ (8005364 <HAL_TIM_ConfigClockSource+0x21c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	f000 80b1 	beq.w	8005326 <HAL_TIM_ConfigClockSource+0x1de>
 80051c4:	4a67      	ldr	r2, [pc, #412]	@ (8005364 <HAL_TIM_ConfigClockSource+0x21c>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	f200 80b6 	bhi.w	8005338 <HAL_TIM_ConfigClockSource+0x1f0>
 80051cc:	4a66      	ldr	r2, [pc, #408]	@ (8005368 <HAL_TIM_ConfigClockSource+0x220>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	f000 80a9 	beq.w	8005326 <HAL_TIM_ConfigClockSource+0x1de>
 80051d4:	4a64      	ldr	r2, [pc, #400]	@ (8005368 <HAL_TIM_ConfigClockSource+0x220>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	f200 80ae 	bhi.w	8005338 <HAL_TIM_ConfigClockSource+0x1f0>
 80051dc:	4a63      	ldr	r2, [pc, #396]	@ (800536c <HAL_TIM_ConfigClockSource+0x224>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	f000 80a1 	beq.w	8005326 <HAL_TIM_ConfigClockSource+0x1de>
 80051e4:	4a61      	ldr	r2, [pc, #388]	@ (800536c <HAL_TIM_ConfigClockSource+0x224>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	f200 80a6 	bhi.w	8005338 <HAL_TIM_ConfigClockSource+0x1f0>
 80051ec:	4a60      	ldr	r2, [pc, #384]	@ (8005370 <HAL_TIM_ConfigClockSource+0x228>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	f000 8099 	beq.w	8005326 <HAL_TIM_ConfigClockSource+0x1de>
 80051f4:	4a5e      	ldr	r2, [pc, #376]	@ (8005370 <HAL_TIM_ConfigClockSource+0x228>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	f200 809e 	bhi.w	8005338 <HAL_TIM_ConfigClockSource+0x1f0>
 80051fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005200:	f000 8091 	beq.w	8005326 <HAL_TIM_ConfigClockSource+0x1de>
 8005204:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005208:	f200 8096 	bhi.w	8005338 <HAL_TIM_ConfigClockSource+0x1f0>
 800520c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005210:	f000 8089 	beq.w	8005326 <HAL_TIM_ConfigClockSource+0x1de>
 8005214:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005218:	f200 808e 	bhi.w	8005338 <HAL_TIM_ConfigClockSource+0x1f0>
 800521c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005220:	d03e      	beq.n	80052a0 <HAL_TIM_ConfigClockSource+0x158>
 8005222:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005226:	f200 8087 	bhi.w	8005338 <HAL_TIM_ConfigClockSource+0x1f0>
 800522a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800522e:	f000 8086 	beq.w	800533e <HAL_TIM_ConfigClockSource+0x1f6>
 8005232:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005236:	d87f      	bhi.n	8005338 <HAL_TIM_ConfigClockSource+0x1f0>
 8005238:	2b70      	cmp	r3, #112	@ 0x70
 800523a:	d01a      	beq.n	8005272 <HAL_TIM_ConfigClockSource+0x12a>
 800523c:	2b70      	cmp	r3, #112	@ 0x70
 800523e:	d87b      	bhi.n	8005338 <HAL_TIM_ConfigClockSource+0x1f0>
 8005240:	2b60      	cmp	r3, #96	@ 0x60
 8005242:	d050      	beq.n	80052e6 <HAL_TIM_ConfigClockSource+0x19e>
 8005244:	2b60      	cmp	r3, #96	@ 0x60
 8005246:	d877      	bhi.n	8005338 <HAL_TIM_ConfigClockSource+0x1f0>
 8005248:	2b50      	cmp	r3, #80	@ 0x50
 800524a:	d03c      	beq.n	80052c6 <HAL_TIM_ConfigClockSource+0x17e>
 800524c:	2b50      	cmp	r3, #80	@ 0x50
 800524e:	d873      	bhi.n	8005338 <HAL_TIM_ConfigClockSource+0x1f0>
 8005250:	2b40      	cmp	r3, #64	@ 0x40
 8005252:	d058      	beq.n	8005306 <HAL_TIM_ConfigClockSource+0x1be>
 8005254:	2b40      	cmp	r3, #64	@ 0x40
 8005256:	d86f      	bhi.n	8005338 <HAL_TIM_ConfigClockSource+0x1f0>
 8005258:	2b30      	cmp	r3, #48	@ 0x30
 800525a:	d064      	beq.n	8005326 <HAL_TIM_ConfigClockSource+0x1de>
 800525c:	2b30      	cmp	r3, #48	@ 0x30
 800525e:	d86b      	bhi.n	8005338 <HAL_TIM_ConfigClockSource+0x1f0>
 8005260:	2b20      	cmp	r3, #32
 8005262:	d060      	beq.n	8005326 <HAL_TIM_ConfigClockSource+0x1de>
 8005264:	2b20      	cmp	r3, #32
 8005266:	d867      	bhi.n	8005338 <HAL_TIM_ConfigClockSource+0x1f0>
 8005268:	2b00      	cmp	r3, #0
 800526a:	d05c      	beq.n	8005326 <HAL_TIM_ConfigClockSource+0x1de>
 800526c:	2b10      	cmp	r3, #16
 800526e:	d05a      	beq.n	8005326 <HAL_TIM_ConfigClockSource+0x1de>
 8005270:	e062      	b.n	8005338 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005282:	f000 fcf9 	bl	8005c78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005294:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	609a      	str	r2, [r3, #8]
      break;
 800529e:	e04f      	b.n	8005340 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052b0:	f000 fce2 	bl	8005c78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689a      	ldr	r2, [r3, #8]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052c2:	609a      	str	r2, [r3, #8]
      break;
 80052c4:	e03c      	b.n	8005340 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052d2:	461a      	mov	r2, r3
 80052d4:	f000 fc54 	bl	8005b80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2150      	movs	r1, #80	@ 0x50
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 fcad 	bl	8005c3e <TIM_ITRx_SetConfig>
      break;
 80052e4:	e02c      	b.n	8005340 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052f2:	461a      	mov	r2, r3
 80052f4:	f000 fc73 	bl	8005bde <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2160      	movs	r1, #96	@ 0x60
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 fc9d 	bl	8005c3e <TIM_ITRx_SetConfig>
      break;
 8005304:	e01c      	b.n	8005340 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005312:	461a      	mov	r2, r3
 8005314:	f000 fc34 	bl	8005b80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2140      	movs	r1, #64	@ 0x40
 800531e:	4618      	mov	r0, r3
 8005320:	f000 fc8d 	bl	8005c3e <TIM_ITRx_SetConfig>
      break;
 8005324:	e00c      	b.n	8005340 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4619      	mov	r1, r3
 8005330:	4610      	mov	r0, r2
 8005332:	f000 fc84 	bl	8005c3e <TIM_ITRx_SetConfig>
      break;
 8005336:	e003      	b.n	8005340 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	73fb      	strb	r3, [r7, #15]
      break;
 800533c:	e000      	b.n	8005340 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800533e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005350:	7bfb      	ldrb	r3, [r7, #15]
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	00100070 	.word	0x00100070
 8005360:	00100060 	.word	0x00100060
 8005364:	00100050 	.word	0x00100050
 8005368:	00100040 	.word	0x00100040
 800536c:	00100030 	.word	0x00100030
 8005370:	00100020 	.word	0x00100020

08005374 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a4c      	ldr	r2, [pc, #304]	@ (8005508 <TIM_Base_SetConfig+0x144>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d017      	beq.n	800540c <TIM_Base_SetConfig+0x48>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053e2:	d013      	beq.n	800540c <TIM_Base_SetConfig+0x48>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a49      	ldr	r2, [pc, #292]	@ (800550c <TIM_Base_SetConfig+0x148>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00f      	beq.n	800540c <TIM_Base_SetConfig+0x48>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a48      	ldr	r2, [pc, #288]	@ (8005510 <TIM_Base_SetConfig+0x14c>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d00b      	beq.n	800540c <TIM_Base_SetConfig+0x48>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a47      	ldr	r2, [pc, #284]	@ (8005514 <TIM_Base_SetConfig+0x150>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d007      	beq.n	800540c <TIM_Base_SetConfig+0x48>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a46      	ldr	r2, [pc, #280]	@ (8005518 <TIM_Base_SetConfig+0x154>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d003      	beq.n	800540c <TIM_Base_SetConfig+0x48>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a45      	ldr	r2, [pc, #276]	@ (800551c <TIM_Base_SetConfig+0x158>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d108      	bne.n	800541e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005412:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	4313      	orrs	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a39      	ldr	r2, [pc, #228]	@ (8005508 <TIM_Base_SetConfig+0x144>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d023      	beq.n	800546e <TIM_Base_SetConfig+0xaa>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800542c:	d01f      	beq.n	800546e <TIM_Base_SetConfig+0xaa>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a36      	ldr	r2, [pc, #216]	@ (800550c <TIM_Base_SetConfig+0x148>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d01b      	beq.n	800546e <TIM_Base_SetConfig+0xaa>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a35      	ldr	r2, [pc, #212]	@ (8005510 <TIM_Base_SetConfig+0x14c>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d017      	beq.n	800546e <TIM_Base_SetConfig+0xaa>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a34      	ldr	r2, [pc, #208]	@ (8005514 <TIM_Base_SetConfig+0x150>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d013      	beq.n	800546e <TIM_Base_SetConfig+0xaa>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a33      	ldr	r2, [pc, #204]	@ (8005518 <TIM_Base_SetConfig+0x154>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d00f      	beq.n	800546e <TIM_Base_SetConfig+0xaa>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a33      	ldr	r2, [pc, #204]	@ (8005520 <TIM_Base_SetConfig+0x15c>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d00b      	beq.n	800546e <TIM_Base_SetConfig+0xaa>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a32      	ldr	r2, [pc, #200]	@ (8005524 <TIM_Base_SetConfig+0x160>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d007      	beq.n	800546e <TIM_Base_SetConfig+0xaa>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a31      	ldr	r2, [pc, #196]	@ (8005528 <TIM_Base_SetConfig+0x164>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d003      	beq.n	800546e <TIM_Base_SetConfig+0xaa>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a2c      	ldr	r2, [pc, #176]	@ (800551c <TIM_Base_SetConfig+0x158>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d108      	bne.n	8005480 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4313      	orrs	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a18      	ldr	r2, [pc, #96]	@ (8005508 <TIM_Base_SetConfig+0x144>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d013      	beq.n	80054d4 <TIM_Base_SetConfig+0x110>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a1a      	ldr	r2, [pc, #104]	@ (8005518 <TIM_Base_SetConfig+0x154>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d00f      	beq.n	80054d4 <TIM_Base_SetConfig+0x110>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a1a      	ldr	r2, [pc, #104]	@ (8005520 <TIM_Base_SetConfig+0x15c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d00b      	beq.n	80054d4 <TIM_Base_SetConfig+0x110>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a19      	ldr	r2, [pc, #100]	@ (8005524 <TIM_Base_SetConfig+0x160>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d007      	beq.n	80054d4 <TIM_Base_SetConfig+0x110>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a18      	ldr	r2, [pc, #96]	@ (8005528 <TIM_Base_SetConfig+0x164>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d003      	beq.n	80054d4 <TIM_Base_SetConfig+0x110>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a13      	ldr	r2, [pc, #76]	@ (800551c <TIM_Base_SetConfig+0x158>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d103      	bne.n	80054dc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	691a      	ldr	r2, [r3, #16]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d105      	bne.n	80054fa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	f023 0201 	bic.w	r2, r3, #1
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	611a      	str	r2, [r3, #16]
  }
}
 80054fa:	bf00      	nop
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	40012c00 	.word	0x40012c00
 800550c:	40000400 	.word	0x40000400
 8005510:	40000800 	.word	0x40000800
 8005514:	40000c00 	.word	0x40000c00
 8005518:	40013400 	.word	0x40013400
 800551c:	40015000 	.word	0x40015000
 8005520:	40014000 	.word	0x40014000
 8005524:	40014400 	.word	0x40014400
 8005528:	40014800 	.word	0x40014800

0800552c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800552c:	b480      	push	{r7}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	f023 0201 	bic.w	r2, r3, #1
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800555a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800555e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f023 0303 	bic.w	r3, r3, #3
 8005566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f023 0302 	bic.w	r3, r3, #2
 8005578:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	4313      	orrs	r3, r2
 8005582:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a30      	ldr	r2, [pc, #192]	@ (8005648 <TIM_OC1_SetConfig+0x11c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d013      	beq.n	80055b4 <TIM_OC1_SetConfig+0x88>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a2f      	ldr	r2, [pc, #188]	@ (800564c <TIM_OC1_SetConfig+0x120>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d00f      	beq.n	80055b4 <TIM_OC1_SetConfig+0x88>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a2e      	ldr	r2, [pc, #184]	@ (8005650 <TIM_OC1_SetConfig+0x124>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d00b      	beq.n	80055b4 <TIM_OC1_SetConfig+0x88>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a2d      	ldr	r2, [pc, #180]	@ (8005654 <TIM_OC1_SetConfig+0x128>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d007      	beq.n	80055b4 <TIM_OC1_SetConfig+0x88>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a2c      	ldr	r2, [pc, #176]	@ (8005658 <TIM_OC1_SetConfig+0x12c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d003      	beq.n	80055b4 <TIM_OC1_SetConfig+0x88>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a2b      	ldr	r2, [pc, #172]	@ (800565c <TIM_OC1_SetConfig+0x130>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d10c      	bne.n	80055ce <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	f023 0308 	bic.w	r3, r3, #8
 80055ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f023 0304 	bic.w	r3, r3, #4
 80055cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a1d      	ldr	r2, [pc, #116]	@ (8005648 <TIM_OC1_SetConfig+0x11c>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d013      	beq.n	80055fe <TIM_OC1_SetConfig+0xd2>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a1c      	ldr	r2, [pc, #112]	@ (800564c <TIM_OC1_SetConfig+0x120>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d00f      	beq.n	80055fe <TIM_OC1_SetConfig+0xd2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a1b      	ldr	r2, [pc, #108]	@ (8005650 <TIM_OC1_SetConfig+0x124>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00b      	beq.n	80055fe <TIM_OC1_SetConfig+0xd2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a1a      	ldr	r2, [pc, #104]	@ (8005654 <TIM_OC1_SetConfig+0x128>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d007      	beq.n	80055fe <TIM_OC1_SetConfig+0xd2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a19      	ldr	r2, [pc, #100]	@ (8005658 <TIM_OC1_SetConfig+0x12c>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d003      	beq.n	80055fe <TIM_OC1_SetConfig+0xd2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a18      	ldr	r2, [pc, #96]	@ (800565c <TIM_OC1_SetConfig+0x130>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d111      	bne.n	8005622 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005604:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800560c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	4313      	orrs	r3, r2
 8005616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	4313      	orrs	r3, r2
 8005620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	621a      	str	r2, [r3, #32]
}
 800563c:	bf00      	nop
 800563e:	371c      	adds	r7, #28
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	40012c00 	.word	0x40012c00
 800564c:	40013400 	.word	0x40013400
 8005650:	40014000 	.word	0x40014000
 8005654:	40014400 	.word	0x40014400
 8005658:	40014800 	.word	0x40014800
 800565c:	40015000 	.word	0x40015000

08005660 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	f023 0210 	bic.w	r2, r3, #16
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800568e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800569a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	021b      	lsls	r3, r3, #8
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f023 0320 	bic.w	r3, r3, #32
 80056ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a2c      	ldr	r2, [pc, #176]	@ (8005770 <TIM_OC2_SetConfig+0x110>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d007      	beq.n	80056d4 <TIM_OC2_SetConfig+0x74>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a2b      	ldr	r2, [pc, #172]	@ (8005774 <TIM_OC2_SetConfig+0x114>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d003      	beq.n	80056d4 <TIM_OC2_SetConfig+0x74>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a2a      	ldr	r2, [pc, #168]	@ (8005778 <TIM_OC2_SetConfig+0x118>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d10d      	bne.n	80056f0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	011b      	lsls	r3, r3, #4
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a1f      	ldr	r2, [pc, #124]	@ (8005770 <TIM_OC2_SetConfig+0x110>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d013      	beq.n	8005720 <TIM_OC2_SetConfig+0xc0>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a1e      	ldr	r2, [pc, #120]	@ (8005774 <TIM_OC2_SetConfig+0x114>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d00f      	beq.n	8005720 <TIM_OC2_SetConfig+0xc0>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a1e      	ldr	r2, [pc, #120]	@ (800577c <TIM_OC2_SetConfig+0x11c>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d00b      	beq.n	8005720 <TIM_OC2_SetConfig+0xc0>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a1d      	ldr	r2, [pc, #116]	@ (8005780 <TIM_OC2_SetConfig+0x120>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d007      	beq.n	8005720 <TIM_OC2_SetConfig+0xc0>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a1c      	ldr	r2, [pc, #112]	@ (8005784 <TIM_OC2_SetConfig+0x124>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d003      	beq.n	8005720 <TIM_OC2_SetConfig+0xc0>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a17      	ldr	r2, [pc, #92]	@ (8005778 <TIM_OC2_SetConfig+0x118>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d113      	bne.n	8005748 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005726:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800572e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	4313      	orrs	r3, r2
 800573a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	4313      	orrs	r3, r2
 8005746:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	621a      	str	r2, [r3, #32]
}
 8005762:	bf00      	nop
 8005764:	371c      	adds	r7, #28
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	40012c00 	.word	0x40012c00
 8005774:	40013400 	.word	0x40013400
 8005778:	40015000 	.word	0x40015000
 800577c:	40014000 	.word	0x40014000
 8005780:	40014400 	.word	0x40014400
 8005784:	40014800 	.word	0x40014800

08005788 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005788:	b480      	push	{r7}
 800578a:	b087      	sub	sp, #28
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 0303 	bic.w	r3, r3, #3
 80057c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	021b      	lsls	r3, r3, #8
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	4313      	orrs	r3, r2
 80057e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a2b      	ldr	r2, [pc, #172]	@ (8005894 <TIM_OC3_SetConfig+0x10c>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d007      	beq.n	80057fa <TIM_OC3_SetConfig+0x72>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a2a      	ldr	r2, [pc, #168]	@ (8005898 <TIM_OC3_SetConfig+0x110>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d003      	beq.n	80057fa <TIM_OC3_SetConfig+0x72>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a29      	ldr	r2, [pc, #164]	@ (800589c <TIM_OC3_SetConfig+0x114>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d10d      	bne.n	8005816 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005800:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	021b      	lsls	r3, r3, #8
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	4313      	orrs	r3, r2
 800580c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005814:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a1e      	ldr	r2, [pc, #120]	@ (8005894 <TIM_OC3_SetConfig+0x10c>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d013      	beq.n	8005846 <TIM_OC3_SetConfig+0xbe>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a1d      	ldr	r2, [pc, #116]	@ (8005898 <TIM_OC3_SetConfig+0x110>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d00f      	beq.n	8005846 <TIM_OC3_SetConfig+0xbe>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a1d      	ldr	r2, [pc, #116]	@ (80058a0 <TIM_OC3_SetConfig+0x118>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d00b      	beq.n	8005846 <TIM_OC3_SetConfig+0xbe>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a1c      	ldr	r2, [pc, #112]	@ (80058a4 <TIM_OC3_SetConfig+0x11c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d007      	beq.n	8005846 <TIM_OC3_SetConfig+0xbe>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a1b      	ldr	r2, [pc, #108]	@ (80058a8 <TIM_OC3_SetConfig+0x120>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d003      	beq.n	8005846 <TIM_OC3_SetConfig+0xbe>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a16      	ldr	r2, [pc, #88]	@ (800589c <TIM_OC3_SetConfig+0x114>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d113      	bne.n	800586e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800584c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005854:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	011b      	lsls	r3, r3, #4
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	4313      	orrs	r3, r2
 8005860:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	011b      	lsls	r3, r3, #4
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	4313      	orrs	r3, r2
 800586c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	621a      	str	r2, [r3, #32]
}
 8005888:	bf00      	nop
 800588a:	371c      	adds	r7, #28
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr
 8005894:	40012c00 	.word	0x40012c00
 8005898:	40013400 	.word	0x40013400
 800589c:	40015000 	.word	0x40015000
 80058a0:	40014000 	.word	0x40014000
 80058a4:	40014400 	.word	0x40014400
 80058a8:	40014800 	.word	0x40014800

080058ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	021b      	lsls	r3, r3, #8
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	031b      	lsls	r3, r3, #12
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	4313      	orrs	r3, r2
 8005906:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a2c      	ldr	r2, [pc, #176]	@ (80059bc <TIM_OC4_SetConfig+0x110>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d007      	beq.n	8005920 <TIM_OC4_SetConfig+0x74>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a2b      	ldr	r2, [pc, #172]	@ (80059c0 <TIM_OC4_SetConfig+0x114>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d003      	beq.n	8005920 <TIM_OC4_SetConfig+0x74>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a2a      	ldr	r2, [pc, #168]	@ (80059c4 <TIM_OC4_SetConfig+0x118>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d10d      	bne.n	800593c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	031b      	lsls	r3, r3, #12
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	4313      	orrs	r3, r2
 8005932:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800593a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a1f      	ldr	r2, [pc, #124]	@ (80059bc <TIM_OC4_SetConfig+0x110>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d013      	beq.n	800596c <TIM_OC4_SetConfig+0xc0>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a1e      	ldr	r2, [pc, #120]	@ (80059c0 <TIM_OC4_SetConfig+0x114>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d00f      	beq.n	800596c <TIM_OC4_SetConfig+0xc0>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a1e      	ldr	r2, [pc, #120]	@ (80059c8 <TIM_OC4_SetConfig+0x11c>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d00b      	beq.n	800596c <TIM_OC4_SetConfig+0xc0>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a1d      	ldr	r2, [pc, #116]	@ (80059cc <TIM_OC4_SetConfig+0x120>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d007      	beq.n	800596c <TIM_OC4_SetConfig+0xc0>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a1c      	ldr	r2, [pc, #112]	@ (80059d0 <TIM_OC4_SetConfig+0x124>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d003      	beq.n	800596c <TIM_OC4_SetConfig+0xc0>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a17      	ldr	r2, [pc, #92]	@ (80059c4 <TIM_OC4_SetConfig+0x118>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d113      	bne.n	8005994 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005972:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800597a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	695b      	ldr	r3, [r3, #20]
 8005980:	019b      	lsls	r3, r3, #6
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	4313      	orrs	r3, r2
 8005986:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	699b      	ldr	r3, [r3, #24]
 800598c:	019b      	lsls	r3, r3, #6
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	4313      	orrs	r3, r2
 8005992:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	685a      	ldr	r2, [r3, #4]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	621a      	str	r2, [r3, #32]
}
 80059ae:	bf00      	nop
 80059b0:	371c      	adds	r7, #28
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	40012c00 	.word	0x40012c00
 80059c0:	40013400 	.word	0x40013400
 80059c4:	40015000 	.word	0x40015000
 80059c8:	40014000 	.word	0x40014000
 80059cc:	40014400 	.word	0x40014400
 80059d0:	40014800 	.word	0x40014800

080059d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b087      	sub	sp, #28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a1b      	ldr	r3, [r3, #32]
 80059e8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005a18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	041b      	lsls	r3, r3, #16
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a19      	ldr	r2, [pc, #100]	@ (8005a90 <TIM_OC5_SetConfig+0xbc>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d013      	beq.n	8005a56 <TIM_OC5_SetConfig+0x82>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a18      	ldr	r2, [pc, #96]	@ (8005a94 <TIM_OC5_SetConfig+0xc0>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00f      	beq.n	8005a56 <TIM_OC5_SetConfig+0x82>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a17      	ldr	r2, [pc, #92]	@ (8005a98 <TIM_OC5_SetConfig+0xc4>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00b      	beq.n	8005a56 <TIM_OC5_SetConfig+0x82>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a16      	ldr	r2, [pc, #88]	@ (8005a9c <TIM_OC5_SetConfig+0xc8>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d007      	beq.n	8005a56 <TIM_OC5_SetConfig+0x82>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a15      	ldr	r2, [pc, #84]	@ (8005aa0 <TIM_OC5_SetConfig+0xcc>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d003      	beq.n	8005a56 <TIM_OC5_SetConfig+0x82>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a14      	ldr	r2, [pc, #80]	@ (8005aa4 <TIM_OC5_SetConfig+0xd0>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d109      	bne.n	8005a6a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	021b      	lsls	r3, r3, #8
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	621a      	str	r2, [r3, #32]
}
 8005a84:	bf00      	nop
 8005a86:	371c      	adds	r7, #28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	40012c00 	.word	0x40012c00
 8005a94:	40013400 	.word	0x40013400
 8005a98:	40014000 	.word	0x40014000
 8005a9c:	40014400 	.word	0x40014400
 8005aa0:	40014800 	.word	0x40014800
 8005aa4:	40015000 	.word	0x40015000

08005aa8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ad6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	021b      	lsls	r3, r3, #8
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005aee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	051b      	lsls	r3, r3, #20
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a1a      	ldr	r2, [pc, #104]	@ (8005b68 <TIM_OC6_SetConfig+0xc0>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d013      	beq.n	8005b2c <TIM_OC6_SetConfig+0x84>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a19      	ldr	r2, [pc, #100]	@ (8005b6c <TIM_OC6_SetConfig+0xc4>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d00f      	beq.n	8005b2c <TIM_OC6_SetConfig+0x84>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a18      	ldr	r2, [pc, #96]	@ (8005b70 <TIM_OC6_SetConfig+0xc8>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d00b      	beq.n	8005b2c <TIM_OC6_SetConfig+0x84>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a17      	ldr	r2, [pc, #92]	@ (8005b74 <TIM_OC6_SetConfig+0xcc>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d007      	beq.n	8005b2c <TIM_OC6_SetConfig+0x84>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a16      	ldr	r2, [pc, #88]	@ (8005b78 <TIM_OC6_SetConfig+0xd0>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d003      	beq.n	8005b2c <TIM_OC6_SetConfig+0x84>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a15      	ldr	r2, [pc, #84]	@ (8005b7c <TIM_OC6_SetConfig+0xd4>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d109      	bne.n	8005b40 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	029b      	lsls	r3, r3, #10
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	621a      	str	r2, [r3, #32]
}
 8005b5a:	bf00      	nop
 8005b5c:	371c      	adds	r7, #28
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	40012c00 	.word	0x40012c00
 8005b6c:	40013400 	.word	0x40013400
 8005b70:	40014000 	.word	0x40014000
 8005b74:	40014400 	.word	0x40014400
 8005b78:	40014800 	.word	0x40014800
 8005b7c:	40015000 	.word	0x40015000

08005b80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	f023 0201 	bic.w	r2, r3, #1
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005baa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	011b      	lsls	r3, r3, #4
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f023 030a 	bic.w	r3, r3, #10
 8005bbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	621a      	str	r2, [r3, #32]
}
 8005bd2:	bf00      	nop
 8005bd4:	371c      	adds	r7, #28
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bde:	b480      	push	{r7}
 8005be0:	b087      	sub	sp, #28
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	60f8      	str	r0, [r7, #12]
 8005be6:	60b9      	str	r1, [r7, #8]
 8005be8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	f023 0210 	bic.w	r2, r3, #16
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	031b      	lsls	r3, r3, #12
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c1a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	011b      	lsls	r3, r3, #4
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	621a      	str	r2, [r3, #32]
}
 8005c32:	bf00      	nop
 8005c34:	371c      	adds	r7, #28
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b085      	sub	sp, #20
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
 8005c46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005c54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	f043 0307 	orr.w	r3, r3, #7
 8005c64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	609a      	str	r2, [r3, #8]
}
 8005c6c:	bf00      	nop
 8005c6e:	3714      	adds	r7, #20
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
 8005c84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	021a      	lsls	r2, r3, #8
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	609a      	str	r2, [r3, #8]
}
 8005cac:	bf00      	nop
 8005cae:	371c      	adds	r7, #28
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b087      	sub	sp, #28
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	f003 031f 	and.w	r3, r3, #31
 8005cca:	2201      	movs	r2, #1
 8005ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6a1a      	ldr	r2, [r3, #32]
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	43db      	mvns	r3, r3
 8005cda:	401a      	ands	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6a1a      	ldr	r2, [r3, #32]
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	f003 031f 	and.w	r3, r3, #31
 8005cea:	6879      	ldr	r1, [r7, #4]
 8005cec:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf0:	431a      	orrs	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	621a      	str	r2, [r3, #32]
}
 8005cf6:	bf00      	nop
 8005cf8:	371c      	adds	r7, #28
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
	...

08005d04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d101      	bne.n	8005d1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d18:	2302      	movs	r3, #2
 8005d1a:	e074      	b.n	8005e06 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2202      	movs	r2, #2
 8005d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a34      	ldr	r2, [pc, #208]	@ (8005e14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d009      	beq.n	8005d5a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a33      	ldr	r2, [pc, #204]	@ (8005e18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d004      	beq.n	8005d5a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a31      	ldr	r2, [pc, #196]	@ (8005e1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d108      	bne.n	8005d6c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005d60:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a21      	ldr	r2, [pc, #132]	@ (8005e14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d022      	beq.n	8005dda <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d9c:	d01d      	beq.n	8005dda <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a1f      	ldr	r2, [pc, #124]	@ (8005e20 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d018      	beq.n	8005dda <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a1d      	ldr	r2, [pc, #116]	@ (8005e24 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d013      	beq.n	8005dda <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a1c      	ldr	r2, [pc, #112]	@ (8005e28 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d00e      	beq.n	8005dda <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a15      	ldr	r2, [pc, #84]	@ (8005e18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d009      	beq.n	8005dda <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a18      	ldr	r2, [pc, #96]	@ (8005e2c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d004      	beq.n	8005dda <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a11      	ldr	r2, [pc, #68]	@ (8005e1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d10c      	bne.n	8005df4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005de0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	40012c00 	.word	0x40012c00
 8005e18:	40013400 	.word	0x40013400
 8005e1c:	40015000 	.word	0x40015000
 8005e20:	40000400 	.word	0x40000400
 8005e24:	40000800 	.word	0x40000800
 8005e28:	40000c00 	.word	0x40000c00
 8005e2c:	40014000 	.word	0x40014000

08005e30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e042      	b.n	8005f54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d106      	bne.n	8005ee6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f7fb fdc5 	bl	8001a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2224      	movs	r2, #36	@ 0x24
 8005eea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 0201 	bic.w	r2, r2, #1
 8005efc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d002      	beq.n	8005f0c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f001 f806 	bl	8006f18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fd07 	bl	8006920 <UART_SetConfig>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d101      	bne.n	8005f1c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e01b      	b.n	8005f54 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689a      	ldr	r2, [r3, #8]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0201 	orr.w	r2, r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f001 f885 	bl	800705c <UART_CheckIdleState>
 8005f52:	4603      	mov	r3, r0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b08a      	sub	sp, #40	@ 0x28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	4613      	mov	r3, r2
 8005f68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f70:	2b20      	cmp	r3, #32
 8005f72:	d167      	bne.n	8006044 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d002      	beq.n	8005f80 <HAL_UART_Transmit_DMA+0x24>
 8005f7a:	88fb      	ldrh	r3, [r7, #6]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d101      	bne.n	8005f84 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e060      	b.n	8006046 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	68ba      	ldr	r2, [r7, #8]
 8005f88:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	88fa      	ldrh	r2, [r7, #6]
 8005f8e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	88fa      	ldrh	r2, [r7, #6]
 8005f96:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2221      	movs	r2, #33	@ 0x21
 8005fa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d028      	beq.n	8006004 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005fb6:	4a26      	ldr	r2, [pc, #152]	@ (8006050 <HAL_UART_Transmit_DMA+0xf4>)
 8005fb8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005fbe:	4a25      	ldr	r2, [pc, #148]	@ (8006054 <HAL_UART_Transmit_DMA+0xf8>)
 8005fc0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005fc6:	4a24      	ldr	r2, [pc, #144]	@ (8006058 <HAL_UART_Transmit_DMA+0xfc>)
 8005fc8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005fce:	2200      	movs	r2, #0
 8005fd0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fda:	4619      	mov	r1, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3328      	adds	r3, #40	@ 0x28
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	88fb      	ldrh	r3, [r7, #6]
 8005fe6:	f7fc fe83 	bl	8002cf0 <HAL_DMA_Start_IT>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d009      	beq.n	8006004 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2210      	movs	r2, #16
 8005ff4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e020      	b.n	8006046 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2240      	movs	r2, #64	@ 0x40
 800600a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	3308      	adds	r3, #8
 8006012:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	e853 3f00 	ldrex	r3, [r3]
 800601a:	613b      	str	r3, [r7, #16]
   return(result);
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006022:	627b      	str	r3, [r7, #36]	@ 0x24
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	3308      	adds	r3, #8
 800602a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800602c:	623a      	str	r2, [r7, #32]
 800602e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006030:	69f9      	ldr	r1, [r7, #28]
 8006032:	6a3a      	ldr	r2, [r7, #32]
 8006034:	e841 2300 	strex	r3, r2, [r1]
 8006038:	61bb      	str	r3, [r7, #24]
   return(result);
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1e5      	bne.n	800600c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006040:	2300      	movs	r3, #0
 8006042:	e000      	b.n	8006046 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006044:	2302      	movs	r3, #2
  }
}
 8006046:	4618      	mov	r0, r3
 8006048:	3728      	adds	r7, #40	@ 0x28
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	08007527 	.word	0x08007527
 8006054:	080075c1 	.word	0x080075c1
 8006058:	08007747 	.word	0x08007747

0800605c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b08a      	sub	sp, #40	@ 0x28
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	4613      	mov	r3, r2
 8006068:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006070:	2b20      	cmp	r3, #32
 8006072:	d137      	bne.n	80060e4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d002      	beq.n	8006080 <HAL_UART_Receive_DMA+0x24>
 800607a:	88fb      	ldrh	r3, [r7, #6]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d101      	bne.n	8006084 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e030      	b.n	80060e6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a18      	ldr	r2, [pc, #96]	@ (80060f0 <HAL_UART_Receive_DMA+0x94>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d01f      	beq.n	80060d4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d018      	beq.n	80060d4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	e853 3f00 	ldrex	r3, [r3]
 80060ae:	613b      	str	r3, [r7, #16]
   return(result);
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80060b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	461a      	mov	r2, r3
 80060be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c0:	623b      	str	r3, [r7, #32]
 80060c2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c4:	69f9      	ldr	r1, [r7, #28]
 80060c6:	6a3a      	ldr	r2, [r7, #32]
 80060c8:	e841 2300 	strex	r3, r2, [r1]
 80060cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1e6      	bne.n	80060a2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80060d4:	88fb      	ldrh	r3, [r7, #6]
 80060d6:	461a      	mov	r2, r3
 80060d8:	68b9      	ldr	r1, [r7, #8]
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f001 f8d6 	bl	800728c <UART_Start_Receive_DMA>
 80060e0:	4603      	mov	r3, r0
 80060e2:	e000      	b.n	80060e6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80060e4:	2302      	movs	r3, #2
  }
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3728      	adds	r7, #40	@ 0x28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	40008000 	.word	0x40008000

080060f4 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b090      	sub	sp, #64	@ 0x40
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006102:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800610a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006116:	2b80      	cmp	r3, #128	@ 0x80
 8006118:	d139      	bne.n	800618e <HAL_UART_DMAStop+0x9a>
 800611a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800611c:	2b21      	cmp	r3, #33	@ 0x21
 800611e:	d136      	bne.n	800618e <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	3308      	adds	r3, #8
 8006126:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006128:	6a3b      	ldr	r3, [r7, #32]
 800612a:	e853 3f00 	ldrex	r3, [r3]
 800612e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006136:	637b      	str	r3, [r7, #52]	@ 0x34
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	3308      	adds	r3, #8
 800613e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006140:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006142:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006144:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006146:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006148:	e841 2300 	strex	r3, r2, [r1]
 800614c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800614e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1e5      	bne.n	8006120 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006158:	2b00      	cmp	r3, #0
 800615a:	d015      	beq.n	8006188 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006160:	4618      	mov	r0, r3
 8006162:	f7fc fe40 	bl	8002de6 <HAL_DMA_Abort>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00d      	beq.n	8006188 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006170:	4618      	mov	r0, r3
 8006172:	f7fc ffa7 	bl	80030c4 <HAL_DMA_GetError>
 8006176:	4603      	mov	r3, r0
 8006178:	2b20      	cmp	r3, #32
 800617a:	d105      	bne.n	8006188 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2210      	movs	r2, #16
 8006180:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e047      	b.n	8006218 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f001 f925 	bl	80073d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006198:	2b40      	cmp	r3, #64	@ 0x40
 800619a:	d13c      	bne.n	8006216 <HAL_UART_DMAStop+0x122>
 800619c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800619e:	2b22      	cmp	r3, #34	@ 0x22
 80061a0:	d139      	bne.n	8006216 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3308      	adds	r3, #8
 80061a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	e853 3f00 	ldrex	r3, [r3]
 80061b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	3308      	adds	r3, #8
 80061c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061c2:	61ba      	str	r2, [r7, #24]
 80061c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c6:	6979      	ldr	r1, [r7, #20]
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	e841 2300 	strex	r3, r2, [r1]
 80061ce:	613b      	str	r3, [r7, #16]
   return(result);
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1e5      	bne.n	80061a2 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d017      	beq.n	8006210 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7fc fdfd 	bl	8002de6 <HAL_DMA_Abort>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00e      	beq.n	8006210 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7fc ff63 	bl	80030c4 <HAL_DMA_GetError>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b20      	cmp	r3, #32
 8006202:	d105      	bne.n	8006210 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2210      	movs	r2, #16
 8006208:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e003      	b.n	8006218 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f001 f922 	bl	800745a <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3740      	adds	r7, #64	@ 0x40
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b0ba      	sub	sp, #232	@ 0xe8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006246:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800624a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800624e:	4013      	ands	r3, r2
 8006250:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006254:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006258:	2b00      	cmp	r3, #0
 800625a:	d11b      	bne.n	8006294 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800625c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006260:	f003 0320 	and.w	r3, r3, #32
 8006264:	2b00      	cmp	r3, #0
 8006266:	d015      	beq.n	8006294 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800626c:	f003 0320 	and.w	r3, r3, #32
 8006270:	2b00      	cmp	r3, #0
 8006272:	d105      	bne.n	8006280 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006278:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d009      	beq.n	8006294 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 8300 	beq.w	800688a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	4798      	blx	r3
      }
      return;
 8006292:	e2fa      	b.n	800688a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006294:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 8123 	beq.w	80064e4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800629e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80062a2:	4b8d      	ldr	r3, [pc, #564]	@ (80064d8 <HAL_UART_IRQHandler+0x2b8>)
 80062a4:	4013      	ands	r3, r2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d106      	bne.n	80062b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80062aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80062ae:	4b8b      	ldr	r3, [pc, #556]	@ (80064dc <HAL_UART_IRQHandler+0x2bc>)
 80062b0:	4013      	ands	r3, r2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 8116 	beq.w	80064e4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80062b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d011      	beq.n	80062e8 <HAL_UART_IRQHandler+0xc8>
 80062c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00b      	beq.n	80062e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2201      	movs	r2, #1
 80062d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062de:	f043 0201 	orr.w	r2, r3, #1
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80062e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d011      	beq.n	8006318 <HAL_UART_IRQHandler+0xf8>
 80062f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062f8:	f003 0301 	and.w	r3, r3, #1
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00b      	beq.n	8006318 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2202      	movs	r2, #2
 8006306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800630e:	f043 0204 	orr.w	r2, r3, #4
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800631c:	f003 0304 	and.w	r3, r3, #4
 8006320:	2b00      	cmp	r3, #0
 8006322:	d011      	beq.n	8006348 <HAL_UART_IRQHandler+0x128>
 8006324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00b      	beq.n	8006348 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2204      	movs	r2, #4
 8006336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800633e:	f043 0202 	orr.w	r2, r3, #2
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800634c:	f003 0308 	and.w	r3, r3, #8
 8006350:	2b00      	cmp	r3, #0
 8006352:	d017      	beq.n	8006384 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006358:	f003 0320 	and.w	r3, r3, #32
 800635c:	2b00      	cmp	r3, #0
 800635e:	d105      	bne.n	800636c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006360:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006364:	4b5c      	ldr	r3, [pc, #368]	@ (80064d8 <HAL_UART_IRQHandler+0x2b8>)
 8006366:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00b      	beq.n	8006384 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2208      	movs	r2, #8
 8006372:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800637a:	f043 0208 	orr.w	r2, r3, #8
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006388:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800638c:	2b00      	cmp	r3, #0
 800638e:	d012      	beq.n	80063b6 <HAL_UART_IRQHandler+0x196>
 8006390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006394:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00c      	beq.n	80063b6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80063a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ac:	f043 0220 	orr.w	r2, r3, #32
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f000 8266 	beq.w	800688e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80063c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063c6:	f003 0320 	and.w	r3, r3, #32
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d013      	beq.n	80063f6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80063ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063d2:	f003 0320 	and.w	r3, r3, #32
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d105      	bne.n	80063e6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80063da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d007      	beq.n	80063f6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800640a:	2b40      	cmp	r3, #64	@ 0x40
 800640c:	d005      	beq.n	800641a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800640e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006412:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006416:	2b00      	cmp	r3, #0
 8006418:	d054      	beq.n	80064c4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f001 f81d 	bl	800745a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800642a:	2b40      	cmp	r3, #64	@ 0x40
 800642c:	d146      	bne.n	80064bc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3308      	adds	r3, #8
 8006434:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006438:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800643c:	e853 3f00 	ldrex	r3, [r3]
 8006440:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006444:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006448:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800644c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3308      	adds	r3, #8
 8006456:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800645a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800645e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006462:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006466:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800646a:	e841 2300 	strex	r3, r2, [r1]
 800646e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1d9      	bne.n	800642e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006480:	2b00      	cmp	r3, #0
 8006482:	d017      	beq.n	80064b4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800648a:	4a15      	ldr	r2, [pc, #84]	@ (80064e0 <HAL_UART_IRQHandler+0x2c0>)
 800648c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006494:	4618      	mov	r0, r3
 8006496:	f7fc fcff 	bl	8002e98 <HAL_DMA_Abort_IT>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d019      	beq.n	80064d4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80064ae:	4610      	mov	r0, r2
 80064b0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b2:	e00f      	b.n	80064d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fa1d 	bl	80068f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064ba:	e00b      	b.n	80064d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 fa19 	bl	80068f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064c2:	e007      	b.n	80064d4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fa15 	bl	80068f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80064d2:	e1dc      	b.n	800688e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064d4:	bf00      	nop
    return;
 80064d6:	e1da      	b.n	800688e <HAL_UART_IRQHandler+0x66e>
 80064d8:	10000001 	.word	0x10000001
 80064dc:	04000120 	.word	0x04000120
 80064e0:	080077c7 	.word	0x080077c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	f040 8170 	bne.w	80067ce <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80064ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064f2:	f003 0310 	and.w	r3, r3, #16
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f000 8169 	beq.w	80067ce <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80064fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006500:	f003 0310 	and.w	r3, r3, #16
 8006504:	2b00      	cmp	r3, #0
 8006506:	f000 8162 	beq.w	80067ce <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2210      	movs	r2, #16
 8006510:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800651c:	2b40      	cmp	r3, #64	@ 0x40
 800651e:	f040 80d8 	bne.w	80066d2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006530:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 80af 	beq.w	8006698 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006540:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006544:	429a      	cmp	r2, r3
 8006546:	f080 80a7 	bcs.w	8006698 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006550:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0320 	and.w	r3, r3, #32
 8006562:	2b00      	cmp	r3, #0
 8006564:	f040 8087 	bne.w	8006676 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006570:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006574:	e853 3f00 	ldrex	r3, [r3]
 8006578:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800657c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006580:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006584:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	461a      	mov	r2, r3
 800658e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006592:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006596:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800659e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80065a2:	e841 2300 	strex	r3, r2, [r1]
 80065a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80065aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1da      	bne.n	8006568 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	3308      	adds	r3, #8
 80065b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80065bc:	e853 3f00 	ldrex	r3, [r3]
 80065c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80065c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065c4:	f023 0301 	bic.w	r3, r3, #1
 80065c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	3308      	adds	r3, #8
 80065d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80065d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80065da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80065de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80065e2:	e841 2300 	strex	r3, r2, [r1]
 80065e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80065e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1e1      	bne.n	80065b2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	3308      	adds	r3, #8
 80065f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80065f8:	e853 3f00 	ldrex	r3, [r3]
 80065fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80065fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006600:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006604:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3308      	adds	r3, #8
 800660e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006612:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006614:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006616:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006618:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800661a:	e841 2300 	strex	r3, r2, [r1]
 800661e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006620:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1e3      	bne.n	80065ee <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2220      	movs	r2, #32
 800662a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800663c:	e853 3f00 	ldrex	r3, [r3]
 8006640:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006642:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006644:	f023 0310 	bic.w	r3, r3, #16
 8006648:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	461a      	mov	r2, r3
 8006652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006656:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006658:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800665c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800665e:	e841 2300 	strex	r3, r2, [r1]
 8006662:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006664:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1e4      	bne.n	8006634 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006670:	4618      	mov	r0, r3
 8006672:	f7fc fbb8 	bl	8002de6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2202      	movs	r2, #2
 800667a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006688:	b29b      	uxth	r3, r3
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	b29b      	uxth	r3, r3
 800668e:	4619      	mov	r1, r3
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 f939 	bl	8006908 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006696:	e0fc      	b.n	8006892 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800669e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066a2:	429a      	cmp	r2, r3
 80066a4:	f040 80f5 	bne.w	8006892 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0320 	and.w	r3, r3, #32
 80066b6:	2b20      	cmp	r3, #32
 80066b8:	f040 80eb 	bne.w	8006892 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2202      	movs	r2, #2
 80066c0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80066c8:	4619      	mov	r1, r3
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f91c 	bl	8006908 <HAL_UARTEx_RxEventCallback>
      return;
 80066d0:	e0df      	b.n	8006892 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80066de:	b29b      	uxth	r3, r3
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f000 80d1 	beq.w	8006896 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80066f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 80cc 	beq.w	8006896 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006706:	e853 3f00 	ldrex	r3, [r3]
 800670a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800670c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800670e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006712:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	461a      	mov	r2, r3
 800671c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006720:	647b      	str	r3, [r7, #68]	@ 0x44
 8006722:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006724:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006726:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006728:	e841 2300 	strex	r3, r2, [r1]
 800672c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800672e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1e4      	bne.n	80066fe <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	3308      	adds	r3, #8
 800673a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673e:	e853 3f00 	ldrex	r3, [r3]
 8006742:	623b      	str	r3, [r7, #32]
   return(result);
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800674a:	f023 0301 	bic.w	r3, r3, #1
 800674e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3308      	adds	r3, #8
 8006758:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800675c:	633a      	str	r2, [r7, #48]	@ 0x30
 800675e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006760:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006762:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006764:	e841 2300 	strex	r3, r2, [r1]
 8006768:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800676a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1e1      	bne.n	8006734 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2220      	movs	r2, #32
 8006774:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	e853 3f00 	ldrex	r3, [r3]
 8006790:	60fb      	str	r3, [r7, #12]
   return(result);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f023 0310 	bic.w	r3, r3, #16
 8006798:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	461a      	mov	r2, r3
 80067a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80067a6:	61fb      	str	r3, [r7, #28]
 80067a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067aa:	69b9      	ldr	r1, [r7, #24]
 80067ac:	69fa      	ldr	r2, [r7, #28]
 80067ae:	e841 2300 	strex	r3, r2, [r1]
 80067b2:	617b      	str	r3, [r7, #20]
   return(result);
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1e4      	bne.n	8006784 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2202      	movs	r2, #2
 80067be:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067c4:	4619      	mov	r1, r3
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 f89e 	bl	8006908 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067cc:	e063      	b.n	8006896 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80067ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00e      	beq.n	80067f8 <HAL_UART_IRQHandler+0x5d8>
 80067da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d008      	beq.n	80067f8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80067ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f001 f825 	bl	8007840 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067f6:	e051      	b.n	800689c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80067f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006800:	2b00      	cmp	r3, #0
 8006802:	d014      	beq.n	800682e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006808:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800680c:	2b00      	cmp	r3, #0
 800680e:	d105      	bne.n	800681c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006810:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006814:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d008      	beq.n	800682e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006820:	2b00      	cmp	r3, #0
 8006822:	d03a      	beq.n	800689a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	4798      	blx	r3
    }
    return;
 800682c:	e035      	b.n	800689a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800682e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006836:	2b00      	cmp	r3, #0
 8006838:	d009      	beq.n	800684e <HAL_UART_IRQHandler+0x62e>
 800683a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800683e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 ffcf 	bl	80077ea <UART_EndTransmit_IT>
    return;
 800684c:	e026      	b.n	800689c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800684e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006852:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d009      	beq.n	800686e <HAL_UART_IRQHandler+0x64e>
 800685a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800685e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d003      	beq.n	800686e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fffe 	bl	8007868 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800686c:	e016      	b.n	800689c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800686e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006872:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d010      	beq.n	800689c <HAL_UART_IRQHandler+0x67c>
 800687a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800687e:	2b00      	cmp	r3, #0
 8006880:	da0c      	bge.n	800689c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 ffe6 	bl	8007854 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006888:	e008      	b.n	800689c <HAL_UART_IRQHandler+0x67c>
      return;
 800688a:	bf00      	nop
 800688c:	e006      	b.n	800689c <HAL_UART_IRQHandler+0x67c>
    return;
 800688e:	bf00      	nop
 8006890:	e004      	b.n	800689c <HAL_UART_IRQHandler+0x67c>
      return;
 8006892:	bf00      	nop
 8006894:	e002      	b.n	800689c <HAL_UART_IRQHandler+0x67c>
      return;
 8006896:	bf00      	nop
 8006898:	e000      	b.n	800689c <HAL_UART_IRQHandler+0x67c>
    return;
 800689a:	bf00      	nop
  }
}
 800689c:	37e8      	adds	r7, #232	@ 0xe8
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop

080068a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	460b      	mov	r3, r1
 8006912:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006924:	b08c      	sub	sp, #48	@ 0x30
 8006926:	af00      	add	r7, sp, #0
 8006928:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800692a:	2300      	movs	r3, #0
 800692c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	689a      	ldr	r2, [r3, #8]
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	431a      	orrs	r2, r3
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	695b      	ldr	r3, [r3, #20]
 800693e:	431a      	orrs	r2, r3
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	69db      	ldr	r3, [r3, #28]
 8006944:	4313      	orrs	r3, r2
 8006946:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	4baa      	ldr	r3, [pc, #680]	@ (8006bf8 <UART_SetConfig+0x2d8>)
 8006950:	4013      	ands	r3, r2
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	6812      	ldr	r2, [r2, #0]
 8006956:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006958:	430b      	orrs	r3, r1
 800695a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	68da      	ldr	r2, [r3, #12]
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a9f      	ldr	r2, [pc, #636]	@ (8006bfc <UART_SetConfig+0x2dc>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d004      	beq.n	800698c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006988:	4313      	orrs	r3, r2
 800698a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006996:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	6812      	ldr	r2, [r2, #0]
 800699e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069a0:	430b      	orrs	r3, r1
 80069a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069aa:	f023 010f 	bic.w	r1, r3, #15
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a90      	ldr	r2, [pc, #576]	@ (8006c00 <UART_SetConfig+0x2e0>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d125      	bne.n	8006a10 <UART_SetConfig+0xf0>
 80069c4:	4b8f      	ldr	r3, [pc, #572]	@ (8006c04 <UART_SetConfig+0x2e4>)
 80069c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069ca:	f003 0303 	and.w	r3, r3, #3
 80069ce:	2b03      	cmp	r3, #3
 80069d0:	d81a      	bhi.n	8006a08 <UART_SetConfig+0xe8>
 80069d2:	a201      	add	r2, pc, #4	@ (adr r2, 80069d8 <UART_SetConfig+0xb8>)
 80069d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d8:	080069e9 	.word	0x080069e9
 80069dc:	080069f9 	.word	0x080069f9
 80069e0:	080069f1 	.word	0x080069f1
 80069e4:	08006a01 	.word	0x08006a01
 80069e8:	2301      	movs	r3, #1
 80069ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ee:	e116      	b.n	8006c1e <UART_SetConfig+0x2fe>
 80069f0:	2302      	movs	r3, #2
 80069f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069f6:	e112      	b.n	8006c1e <UART_SetConfig+0x2fe>
 80069f8:	2304      	movs	r3, #4
 80069fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069fe:	e10e      	b.n	8006c1e <UART_SetConfig+0x2fe>
 8006a00:	2308      	movs	r3, #8
 8006a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a06:	e10a      	b.n	8006c1e <UART_SetConfig+0x2fe>
 8006a08:	2310      	movs	r3, #16
 8006a0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a0e:	e106      	b.n	8006c1e <UART_SetConfig+0x2fe>
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a7c      	ldr	r2, [pc, #496]	@ (8006c08 <UART_SetConfig+0x2e8>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d138      	bne.n	8006a8c <UART_SetConfig+0x16c>
 8006a1a:	4b7a      	ldr	r3, [pc, #488]	@ (8006c04 <UART_SetConfig+0x2e4>)
 8006a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a20:	f003 030c 	and.w	r3, r3, #12
 8006a24:	2b0c      	cmp	r3, #12
 8006a26:	d82d      	bhi.n	8006a84 <UART_SetConfig+0x164>
 8006a28:	a201      	add	r2, pc, #4	@ (adr r2, 8006a30 <UART_SetConfig+0x110>)
 8006a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2e:	bf00      	nop
 8006a30:	08006a65 	.word	0x08006a65
 8006a34:	08006a85 	.word	0x08006a85
 8006a38:	08006a85 	.word	0x08006a85
 8006a3c:	08006a85 	.word	0x08006a85
 8006a40:	08006a75 	.word	0x08006a75
 8006a44:	08006a85 	.word	0x08006a85
 8006a48:	08006a85 	.word	0x08006a85
 8006a4c:	08006a85 	.word	0x08006a85
 8006a50:	08006a6d 	.word	0x08006a6d
 8006a54:	08006a85 	.word	0x08006a85
 8006a58:	08006a85 	.word	0x08006a85
 8006a5c:	08006a85 	.word	0x08006a85
 8006a60:	08006a7d 	.word	0x08006a7d
 8006a64:	2300      	movs	r3, #0
 8006a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a6a:	e0d8      	b.n	8006c1e <UART_SetConfig+0x2fe>
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a72:	e0d4      	b.n	8006c1e <UART_SetConfig+0x2fe>
 8006a74:	2304      	movs	r3, #4
 8006a76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a7a:	e0d0      	b.n	8006c1e <UART_SetConfig+0x2fe>
 8006a7c:	2308      	movs	r3, #8
 8006a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a82:	e0cc      	b.n	8006c1e <UART_SetConfig+0x2fe>
 8006a84:	2310      	movs	r3, #16
 8006a86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a8a:	e0c8      	b.n	8006c1e <UART_SetConfig+0x2fe>
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a5e      	ldr	r2, [pc, #376]	@ (8006c0c <UART_SetConfig+0x2ec>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d125      	bne.n	8006ae2 <UART_SetConfig+0x1c2>
 8006a96:	4b5b      	ldr	r3, [pc, #364]	@ (8006c04 <UART_SetConfig+0x2e4>)
 8006a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a9c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006aa0:	2b30      	cmp	r3, #48	@ 0x30
 8006aa2:	d016      	beq.n	8006ad2 <UART_SetConfig+0x1b2>
 8006aa4:	2b30      	cmp	r3, #48	@ 0x30
 8006aa6:	d818      	bhi.n	8006ada <UART_SetConfig+0x1ba>
 8006aa8:	2b20      	cmp	r3, #32
 8006aaa:	d00a      	beq.n	8006ac2 <UART_SetConfig+0x1a2>
 8006aac:	2b20      	cmp	r3, #32
 8006aae:	d814      	bhi.n	8006ada <UART_SetConfig+0x1ba>
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d002      	beq.n	8006aba <UART_SetConfig+0x19a>
 8006ab4:	2b10      	cmp	r3, #16
 8006ab6:	d008      	beq.n	8006aca <UART_SetConfig+0x1aa>
 8006ab8:	e00f      	b.n	8006ada <UART_SetConfig+0x1ba>
 8006aba:	2300      	movs	r3, #0
 8006abc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ac0:	e0ad      	b.n	8006c1e <UART_SetConfig+0x2fe>
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ac8:	e0a9      	b.n	8006c1e <UART_SetConfig+0x2fe>
 8006aca:	2304      	movs	r3, #4
 8006acc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ad0:	e0a5      	b.n	8006c1e <UART_SetConfig+0x2fe>
 8006ad2:	2308      	movs	r3, #8
 8006ad4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ad8:	e0a1      	b.n	8006c1e <UART_SetConfig+0x2fe>
 8006ada:	2310      	movs	r3, #16
 8006adc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ae0:	e09d      	b.n	8006c1e <UART_SetConfig+0x2fe>
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a4a      	ldr	r2, [pc, #296]	@ (8006c10 <UART_SetConfig+0x2f0>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d125      	bne.n	8006b38 <UART_SetConfig+0x218>
 8006aec:	4b45      	ldr	r3, [pc, #276]	@ (8006c04 <UART_SetConfig+0x2e4>)
 8006aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006af2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006af6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006af8:	d016      	beq.n	8006b28 <UART_SetConfig+0x208>
 8006afa:	2bc0      	cmp	r3, #192	@ 0xc0
 8006afc:	d818      	bhi.n	8006b30 <UART_SetConfig+0x210>
 8006afe:	2b80      	cmp	r3, #128	@ 0x80
 8006b00:	d00a      	beq.n	8006b18 <UART_SetConfig+0x1f8>
 8006b02:	2b80      	cmp	r3, #128	@ 0x80
 8006b04:	d814      	bhi.n	8006b30 <UART_SetConfig+0x210>
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d002      	beq.n	8006b10 <UART_SetConfig+0x1f0>
 8006b0a:	2b40      	cmp	r3, #64	@ 0x40
 8006b0c:	d008      	beq.n	8006b20 <UART_SetConfig+0x200>
 8006b0e:	e00f      	b.n	8006b30 <UART_SetConfig+0x210>
 8006b10:	2300      	movs	r3, #0
 8006b12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b16:	e082      	b.n	8006c1e <UART_SetConfig+0x2fe>
 8006b18:	2302      	movs	r3, #2
 8006b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b1e:	e07e      	b.n	8006c1e <UART_SetConfig+0x2fe>
 8006b20:	2304      	movs	r3, #4
 8006b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b26:	e07a      	b.n	8006c1e <UART_SetConfig+0x2fe>
 8006b28:	2308      	movs	r3, #8
 8006b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b2e:	e076      	b.n	8006c1e <UART_SetConfig+0x2fe>
 8006b30:	2310      	movs	r3, #16
 8006b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b36:	e072      	b.n	8006c1e <UART_SetConfig+0x2fe>
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a35      	ldr	r2, [pc, #212]	@ (8006c14 <UART_SetConfig+0x2f4>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d12a      	bne.n	8006b98 <UART_SetConfig+0x278>
 8006b42:	4b30      	ldr	r3, [pc, #192]	@ (8006c04 <UART_SetConfig+0x2e4>)
 8006b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b50:	d01a      	beq.n	8006b88 <UART_SetConfig+0x268>
 8006b52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b56:	d81b      	bhi.n	8006b90 <UART_SetConfig+0x270>
 8006b58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b5c:	d00c      	beq.n	8006b78 <UART_SetConfig+0x258>
 8006b5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b62:	d815      	bhi.n	8006b90 <UART_SetConfig+0x270>
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d003      	beq.n	8006b70 <UART_SetConfig+0x250>
 8006b68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b6c:	d008      	beq.n	8006b80 <UART_SetConfig+0x260>
 8006b6e:	e00f      	b.n	8006b90 <UART_SetConfig+0x270>
 8006b70:	2300      	movs	r3, #0
 8006b72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b76:	e052      	b.n	8006c1e <UART_SetConfig+0x2fe>
 8006b78:	2302      	movs	r3, #2
 8006b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b7e:	e04e      	b.n	8006c1e <UART_SetConfig+0x2fe>
 8006b80:	2304      	movs	r3, #4
 8006b82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b86:	e04a      	b.n	8006c1e <UART_SetConfig+0x2fe>
 8006b88:	2308      	movs	r3, #8
 8006b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b8e:	e046      	b.n	8006c1e <UART_SetConfig+0x2fe>
 8006b90:	2310      	movs	r3, #16
 8006b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b96:	e042      	b.n	8006c1e <UART_SetConfig+0x2fe>
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a17      	ldr	r2, [pc, #92]	@ (8006bfc <UART_SetConfig+0x2dc>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d13a      	bne.n	8006c18 <UART_SetConfig+0x2f8>
 8006ba2:	4b18      	ldr	r3, [pc, #96]	@ (8006c04 <UART_SetConfig+0x2e4>)
 8006ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ba8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006bac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006bb0:	d01a      	beq.n	8006be8 <UART_SetConfig+0x2c8>
 8006bb2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006bb6:	d81b      	bhi.n	8006bf0 <UART_SetConfig+0x2d0>
 8006bb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bbc:	d00c      	beq.n	8006bd8 <UART_SetConfig+0x2b8>
 8006bbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bc2:	d815      	bhi.n	8006bf0 <UART_SetConfig+0x2d0>
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d003      	beq.n	8006bd0 <UART_SetConfig+0x2b0>
 8006bc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bcc:	d008      	beq.n	8006be0 <UART_SetConfig+0x2c0>
 8006bce:	e00f      	b.n	8006bf0 <UART_SetConfig+0x2d0>
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bd6:	e022      	b.n	8006c1e <UART_SetConfig+0x2fe>
 8006bd8:	2302      	movs	r3, #2
 8006bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bde:	e01e      	b.n	8006c1e <UART_SetConfig+0x2fe>
 8006be0:	2304      	movs	r3, #4
 8006be2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006be6:	e01a      	b.n	8006c1e <UART_SetConfig+0x2fe>
 8006be8:	2308      	movs	r3, #8
 8006bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bee:	e016      	b.n	8006c1e <UART_SetConfig+0x2fe>
 8006bf0:	2310      	movs	r3, #16
 8006bf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bf6:	e012      	b.n	8006c1e <UART_SetConfig+0x2fe>
 8006bf8:	cfff69f3 	.word	0xcfff69f3
 8006bfc:	40008000 	.word	0x40008000
 8006c00:	40013800 	.word	0x40013800
 8006c04:	40021000 	.word	0x40021000
 8006c08:	40004400 	.word	0x40004400
 8006c0c:	40004800 	.word	0x40004800
 8006c10:	40004c00 	.word	0x40004c00
 8006c14:	40005000 	.word	0x40005000
 8006c18:	2310      	movs	r3, #16
 8006c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4aae      	ldr	r2, [pc, #696]	@ (8006edc <UART_SetConfig+0x5bc>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	f040 8097 	bne.w	8006d58 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c2a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c2e:	2b08      	cmp	r3, #8
 8006c30:	d823      	bhi.n	8006c7a <UART_SetConfig+0x35a>
 8006c32:	a201      	add	r2, pc, #4	@ (adr r2, 8006c38 <UART_SetConfig+0x318>)
 8006c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c38:	08006c5d 	.word	0x08006c5d
 8006c3c:	08006c7b 	.word	0x08006c7b
 8006c40:	08006c65 	.word	0x08006c65
 8006c44:	08006c7b 	.word	0x08006c7b
 8006c48:	08006c6b 	.word	0x08006c6b
 8006c4c:	08006c7b 	.word	0x08006c7b
 8006c50:	08006c7b 	.word	0x08006c7b
 8006c54:	08006c7b 	.word	0x08006c7b
 8006c58:	08006c73 	.word	0x08006c73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c5c:	f7fd fa6a 	bl	8004134 <HAL_RCC_GetPCLK1Freq>
 8006c60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c62:	e010      	b.n	8006c86 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c64:	4b9e      	ldr	r3, [pc, #632]	@ (8006ee0 <UART_SetConfig+0x5c0>)
 8006c66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c68:	e00d      	b.n	8006c86 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c6a:	f7fd f9f5 	bl	8004058 <HAL_RCC_GetSysClockFreq>
 8006c6e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c70:	e009      	b.n	8006c86 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c78:	e005      	b.n	8006c86 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006c84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 8130 	beq.w	8006eee <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c92:	4a94      	ldr	r2, [pc, #592]	@ (8006ee4 <UART_SetConfig+0x5c4>)
 8006c94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c98:	461a      	mov	r2, r3
 8006c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ca0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	685a      	ldr	r2, [r3, #4]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	4413      	add	r3, r2
 8006cac:	69ba      	ldr	r2, [r7, #24]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d305      	bcc.n	8006cbe <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cb8:	69ba      	ldr	r2, [r7, #24]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d903      	bls.n	8006cc6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006cc4:	e113      	b.n	8006eee <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc8:	2200      	movs	r2, #0
 8006cca:	60bb      	str	r3, [r7, #8]
 8006ccc:	60fa      	str	r2, [r7, #12]
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd2:	4a84      	ldr	r2, [pc, #528]	@ (8006ee4 <UART_SetConfig+0x5c4>)
 8006cd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	2200      	movs	r2, #0
 8006cdc:	603b      	str	r3, [r7, #0]
 8006cde:	607a      	str	r2, [r7, #4]
 8006ce0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ce4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ce8:	f7f9 ff40 	bl	8000b6c <__aeabi_uldivmod>
 8006cec:	4602      	mov	r2, r0
 8006cee:	460b      	mov	r3, r1
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	f04f 0200 	mov.w	r2, #0
 8006cf8:	f04f 0300 	mov.w	r3, #0
 8006cfc:	020b      	lsls	r3, r1, #8
 8006cfe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d02:	0202      	lsls	r2, r0, #8
 8006d04:	6979      	ldr	r1, [r7, #20]
 8006d06:	6849      	ldr	r1, [r1, #4]
 8006d08:	0849      	lsrs	r1, r1, #1
 8006d0a:	2000      	movs	r0, #0
 8006d0c:	460c      	mov	r4, r1
 8006d0e:	4605      	mov	r5, r0
 8006d10:	eb12 0804 	adds.w	r8, r2, r4
 8006d14:	eb43 0905 	adc.w	r9, r3, r5
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	469a      	mov	sl, r3
 8006d20:	4693      	mov	fp, r2
 8006d22:	4652      	mov	r2, sl
 8006d24:	465b      	mov	r3, fp
 8006d26:	4640      	mov	r0, r8
 8006d28:	4649      	mov	r1, r9
 8006d2a:	f7f9 ff1f 	bl	8000b6c <__aeabi_uldivmod>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	460b      	mov	r3, r1
 8006d32:	4613      	mov	r3, r2
 8006d34:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d3c:	d308      	bcc.n	8006d50 <UART_SetConfig+0x430>
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d44:	d204      	bcs.n	8006d50 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6a3a      	ldr	r2, [r7, #32]
 8006d4c:	60da      	str	r2, [r3, #12]
 8006d4e:	e0ce      	b.n	8006eee <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d56:	e0ca      	b.n	8006eee <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	69db      	ldr	r3, [r3, #28]
 8006d5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d60:	d166      	bne.n	8006e30 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006d62:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d66:	2b08      	cmp	r3, #8
 8006d68:	d827      	bhi.n	8006dba <UART_SetConfig+0x49a>
 8006d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8006d70 <UART_SetConfig+0x450>)
 8006d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d70:	08006d95 	.word	0x08006d95
 8006d74:	08006d9d 	.word	0x08006d9d
 8006d78:	08006da5 	.word	0x08006da5
 8006d7c:	08006dbb 	.word	0x08006dbb
 8006d80:	08006dab 	.word	0x08006dab
 8006d84:	08006dbb 	.word	0x08006dbb
 8006d88:	08006dbb 	.word	0x08006dbb
 8006d8c:	08006dbb 	.word	0x08006dbb
 8006d90:	08006db3 	.word	0x08006db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d94:	f7fd f9ce 	bl	8004134 <HAL_RCC_GetPCLK1Freq>
 8006d98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d9a:	e014      	b.n	8006dc6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d9c:	f7fd f9e0 	bl	8004160 <HAL_RCC_GetPCLK2Freq>
 8006da0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006da2:	e010      	b.n	8006dc6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006da4:	4b4e      	ldr	r3, [pc, #312]	@ (8006ee0 <UART_SetConfig+0x5c0>)
 8006da6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006da8:	e00d      	b.n	8006dc6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006daa:	f7fd f955 	bl	8004058 <HAL_RCC_GetSysClockFreq>
 8006dae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006db0:	e009      	b.n	8006dc6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006db2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006db6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006db8:	e005      	b.n	8006dc6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006dc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 8090 	beq.w	8006eee <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd2:	4a44      	ldr	r2, [pc, #272]	@ (8006ee4 <UART_SetConfig+0x5c4>)
 8006dd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dd8:	461a      	mov	r2, r3
 8006dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ddc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006de0:	005a      	lsls	r2, r3, #1
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	085b      	lsrs	r3, r3, #1
 8006de8:	441a      	add	r2, r3
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006df4:	6a3b      	ldr	r3, [r7, #32]
 8006df6:	2b0f      	cmp	r3, #15
 8006df8:	d916      	bls.n	8006e28 <UART_SetConfig+0x508>
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e00:	d212      	bcs.n	8006e28 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e02:	6a3b      	ldr	r3, [r7, #32]
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	f023 030f 	bic.w	r3, r3, #15
 8006e0a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	085b      	lsrs	r3, r3, #1
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	f003 0307 	and.w	r3, r3, #7
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	8bfb      	ldrh	r3, [r7, #30]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	8bfa      	ldrh	r2, [r7, #30]
 8006e24:	60da      	str	r2, [r3, #12]
 8006e26:	e062      	b.n	8006eee <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006e2e:	e05e      	b.n	8006eee <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e30:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006e34:	2b08      	cmp	r3, #8
 8006e36:	d828      	bhi.n	8006e8a <UART_SetConfig+0x56a>
 8006e38:	a201      	add	r2, pc, #4	@ (adr r2, 8006e40 <UART_SetConfig+0x520>)
 8006e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3e:	bf00      	nop
 8006e40:	08006e65 	.word	0x08006e65
 8006e44:	08006e6d 	.word	0x08006e6d
 8006e48:	08006e75 	.word	0x08006e75
 8006e4c:	08006e8b 	.word	0x08006e8b
 8006e50:	08006e7b 	.word	0x08006e7b
 8006e54:	08006e8b 	.word	0x08006e8b
 8006e58:	08006e8b 	.word	0x08006e8b
 8006e5c:	08006e8b 	.word	0x08006e8b
 8006e60:	08006e83 	.word	0x08006e83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e64:	f7fd f966 	bl	8004134 <HAL_RCC_GetPCLK1Freq>
 8006e68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e6a:	e014      	b.n	8006e96 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e6c:	f7fd f978 	bl	8004160 <HAL_RCC_GetPCLK2Freq>
 8006e70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e72:	e010      	b.n	8006e96 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e74:	4b1a      	ldr	r3, [pc, #104]	@ (8006ee0 <UART_SetConfig+0x5c0>)
 8006e76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e78:	e00d      	b.n	8006e96 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e7a:	f7fd f8ed 	bl	8004058 <HAL_RCC_GetSysClockFreq>
 8006e7e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e80:	e009      	b.n	8006e96 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e88:	e005      	b.n	8006e96 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006e94:	bf00      	nop
    }

    if (pclk != 0U)
 8006e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d028      	beq.n	8006eee <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea0:	4a10      	ldr	r2, [pc, #64]	@ (8006ee4 <UART_SetConfig+0x5c4>)
 8006ea2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eaa:	fbb3 f2f2 	udiv	r2, r3, r2
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	085b      	lsrs	r3, r3, #1
 8006eb4:	441a      	add	r2, r3
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ebe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	2b0f      	cmp	r3, #15
 8006ec4:	d910      	bls.n	8006ee8 <UART_SetConfig+0x5c8>
 8006ec6:	6a3b      	ldr	r3, [r7, #32]
 8006ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ecc:	d20c      	bcs.n	8006ee8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ece:	6a3b      	ldr	r3, [r7, #32]
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	60da      	str	r2, [r3, #12]
 8006ed8:	e009      	b.n	8006eee <UART_SetConfig+0x5ce>
 8006eda:	bf00      	nop
 8006edc:	40008000 	.word	0x40008000
 8006ee0:	00f42400 	.word	0x00f42400
 8006ee4:	0801803c 	.word	0x0801803c
      }
      else
      {
        ret = HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	2200      	movs	r2, #0
 8006f02:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	2200      	movs	r2, #0
 8006f08:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006f0a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3730      	adds	r7, #48	@ 0x30
 8006f12:	46bd      	mov	sp, r7
 8006f14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006f18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f24:	f003 0308 	and.w	r3, r3, #8
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00a      	beq.n	8006f42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	430a      	orrs	r2, r1
 8006f40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f46:	f003 0301 	and.w	r3, r3, #1
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00a      	beq.n	8006f64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	430a      	orrs	r2, r1
 8006f62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f68:	f003 0302 	and.w	r3, r3, #2
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00a      	beq.n	8006f86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	430a      	orrs	r2, r1
 8006f84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f8a:	f003 0304 	and.w	r3, r3, #4
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00a      	beq.n	8006fa8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	430a      	orrs	r2, r1
 8006fa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fac:	f003 0310 	and.w	r3, r3, #16
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00a      	beq.n	8006fca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	430a      	orrs	r2, r1
 8006fc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fce:	f003 0320 	and.w	r3, r3, #32
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00a      	beq.n	8006fec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	430a      	orrs	r2, r1
 8006fea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d01a      	beq.n	800702e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	430a      	orrs	r2, r1
 800700c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007012:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007016:	d10a      	bne.n	800702e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	430a      	orrs	r2, r1
 800702c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00a      	beq.n	8007050 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	430a      	orrs	r2, r1
 800704e:	605a      	str	r2, [r3, #4]
  }
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b098      	sub	sp, #96	@ 0x60
 8007060:	af02      	add	r7, sp, #8
 8007062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800706c:	f7fb fcac 	bl	80029c8 <HAL_GetTick>
 8007070:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0308 	and.w	r3, r3, #8
 800707c:	2b08      	cmp	r3, #8
 800707e:	d12f      	bne.n	80070e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007080:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007088:	2200      	movs	r2, #0
 800708a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f88e 	bl	80071b0 <UART_WaitOnFlagUntilTimeout>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d022      	beq.n	80070e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a2:	e853 3f00 	ldrex	r3, [r3]
 80070a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80070a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	461a      	mov	r2, r3
 80070b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80070ba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80070be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070c0:	e841 2300 	strex	r3, r2, [r1]
 80070c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1e6      	bne.n	800709a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2220      	movs	r2, #32
 80070d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e063      	b.n	80071a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0304 	and.w	r3, r3, #4
 80070ea:	2b04      	cmp	r3, #4
 80070ec:	d149      	bne.n	8007182 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80070f2:	9300      	str	r3, [sp, #0]
 80070f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070f6:	2200      	movs	r2, #0
 80070f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f857 	bl	80071b0 <UART_WaitOnFlagUntilTimeout>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d03c      	beq.n	8007182 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007110:	e853 3f00 	ldrex	r3, [r3]
 8007114:	623b      	str	r3, [r7, #32]
   return(result);
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800711c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	461a      	mov	r2, r3
 8007124:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007126:	633b      	str	r3, [r7, #48]	@ 0x30
 8007128:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800712c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800712e:	e841 2300 	strex	r3, r2, [r1]
 8007132:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1e6      	bne.n	8007108 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	3308      	adds	r3, #8
 8007140:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	e853 3f00 	ldrex	r3, [r3]
 8007148:	60fb      	str	r3, [r7, #12]
   return(result);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f023 0301 	bic.w	r3, r3, #1
 8007150:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	3308      	adds	r3, #8
 8007158:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800715a:	61fa      	str	r2, [r7, #28]
 800715c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715e:	69b9      	ldr	r1, [r7, #24]
 8007160:	69fa      	ldr	r2, [r7, #28]
 8007162:	e841 2300 	strex	r3, r2, [r1]
 8007166:	617b      	str	r3, [r7, #20]
   return(result);
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1e5      	bne.n	800713a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2220      	movs	r2, #32
 8007172:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e012      	b.n	80071a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2220      	movs	r2, #32
 8007186:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2220      	movs	r2, #32
 800718e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3758      	adds	r7, #88	@ 0x58
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	603b      	str	r3, [r7, #0]
 80071bc:	4613      	mov	r3, r2
 80071be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071c0:	e04f      	b.n	8007262 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071c8:	d04b      	beq.n	8007262 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071ca:	f7fb fbfd 	bl	80029c8 <HAL_GetTick>
 80071ce:	4602      	mov	r2, r0
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	1ad3      	subs	r3, r2, r3
 80071d4:	69ba      	ldr	r2, [r7, #24]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d302      	bcc.n	80071e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d101      	bne.n	80071e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80071e0:	2303      	movs	r3, #3
 80071e2:	e04e      	b.n	8007282 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 0304 	and.w	r3, r3, #4
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d037      	beq.n	8007262 <UART_WaitOnFlagUntilTimeout+0xb2>
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	2b80      	cmp	r3, #128	@ 0x80
 80071f6:	d034      	beq.n	8007262 <UART_WaitOnFlagUntilTimeout+0xb2>
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	2b40      	cmp	r3, #64	@ 0x40
 80071fc:	d031      	beq.n	8007262 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	69db      	ldr	r3, [r3, #28]
 8007204:	f003 0308 	and.w	r3, r3, #8
 8007208:	2b08      	cmp	r3, #8
 800720a:	d110      	bne.n	800722e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2208      	movs	r2, #8
 8007212:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007214:	68f8      	ldr	r0, [r7, #12]
 8007216:	f000 f920 	bl	800745a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2208      	movs	r2, #8
 800721e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e029      	b.n	8007282 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	69db      	ldr	r3, [r3, #28]
 8007234:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007238:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800723c:	d111      	bne.n	8007262 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007246:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f000 f906 	bl	800745a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2220      	movs	r2, #32
 8007252:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e00f      	b.n	8007282 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	69da      	ldr	r2, [r3, #28]
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	4013      	ands	r3, r2
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	429a      	cmp	r2, r3
 8007270:	bf0c      	ite	eq
 8007272:	2301      	moveq	r3, #1
 8007274:	2300      	movne	r3, #0
 8007276:	b2db      	uxtb	r3, r3
 8007278:	461a      	mov	r2, r3
 800727a:	79fb      	ldrb	r3, [r7, #7]
 800727c:	429a      	cmp	r2, r3
 800727e:	d0a0      	beq.n	80071c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
	...

0800728c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b096      	sub	sp, #88	@ 0x58
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	4613      	mov	r3, r2
 8007298:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	88fa      	ldrh	r2, [r7, #6]
 80072a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2222      	movs	r2, #34	@ 0x22
 80072b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d02d      	beq.n	800731e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072c8:	4a40      	ldr	r2, [pc, #256]	@ (80073cc <UART_Start_Receive_DMA+0x140>)
 80072ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072d2:	4a3f      	ldr	r2, [pc, #252]	@ (80073d0 <UART_Start_Receive_DMA+0x144>)
 80072d4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072dc:	4a3d      	ldr	r2, [pc, #244]	@ (80073d4 <UART_Start_Receive_DMA+0x148>)
 80072de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072e6:	2200      	movs	r2, #0
 80072e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	3324      	adds	r3, #36	@ 0x24
 80072f6:	4619      	mov	r1, r3
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072fc:	461a      	mov	r2, r3
 80072fe:	88fb      	ldrh	r3, [r7, #6]
 8007300:	f7fb fcf6 	bl	8002cf0 <HAL_DMA_Start_IT>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d009      	beq.n	800731e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2210      	movs	r2, #16
 800730e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2220      	movs	r2, #32
 8007316:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e051      	b.n	80073c2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d018      	beq.n	8007358 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800732e:	e853 3f00 	ldrex	r3, [r3]
 8007332:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007336:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800733a:	657b      	str	r3, [r7, #84]	@ 0x54
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	461a      	mov	r2, r3
 8007342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007344:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007346:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007348:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800734a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800734c:	e841 2300 	strex	r3, r2, [r1]
 8007350:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007352:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1e6      	bne.n	8007326 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	3308      	adds	r3, #8
 800735e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007362:	e853 3f00 	ldrex	r3, [r3]
 8007366:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736a:	f043 0301 	orr.w	r3, r3, #1
 800736e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	3308      	adds	r3, #8
 8007376:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007378:	637a      	str	r2, [r7, #52]	@ 0x34
 800737a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800737e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007380:	e841 2300 	strex	r3, r2, [r1]
 8007384:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1e5      	bne.n	8007358 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3308      	adds	r3, #8
 8007392:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	e853 3f00 	ldrex	r3, [r3]
 800739a:	613b      	str	r3, [r7, #16]
   return(result);
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	3308      	adds	r3, #8
 80073aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80073ac:	623a      	str	r2, [r7, #32]
 80073ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b0:	69f9      	ldr	r1, [r7, #28]
 80073b2:	6a3a      	ldr	r2, [r7, #32]
 80073b4:	e841 2300 	strex	r3, r2, [r1]
 80073b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1e5      	bne.n	800738c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3758      	adds	r7, #88	@ 0x58
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	080075dd 	.word	0x080075dd
 80073d0:	08007709 	.word	0x08007709
 80073d4:	08007747 	.word	0x08007747

080073d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80073d8:	b480      	push	{r7}
 80073da:	b08f      	sub	sp, #60	@ 0x3c
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e6:	6a3b      	ldr	r3, [r7, #32]
 80073e8:	e853 3f00 	ldrex	r3, [r3]
 80073ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80073f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	461a      	mov	r2, r3
 80073fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007400:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007402:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007404:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007406:	e841 2300 	strex	r3, r2, [r1]
 800740a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800740c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1e6      	bne.n	80073e0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	3308      	adds	r3, #8
 8007418:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	e853 3f00 	ldrex	r3, [r3]
 8007420:	60bb      	str	r3, [r7, #8]
   return(result);
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007428:	633b      	str	r3, [r7, #48]	@ 0x30
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	3308      	adds	r3, #8
 8007430:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007432:	61ba      	str	r2, [r7, #24]
 8007434:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007436:	6979      	ldr	r1, [r7, #20]
 8007438:	69ba      	ldr	r2, [r7, #24]
 800743a:	e841 2300 	strex	r3, r2, [r1]
 800743e:	613b      	str	r3, [r7, #16]
   return(result);
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1e5      	bne.n	8007412 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2220      	movs	r2, #32
 800744a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800744e:	bf00      	nop
 8007450:	373c      	adds	r7, #60	@ 0x3c
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800745a:	b480      	push	{r7}
 800745c:	b095      	sub	sp, #84	@ 0x54
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800746a:	e853 3f00 	ldrex	r3, [r3]
 800746e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007472:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007476:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	461a      	mov	r2, r3
 800747e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007480:	643b      	str	r3, [r7, #64]	@ 0x40
 8007482:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007484:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007486:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007488:	e841 2300 	strex	r3, r2, [r1]
 800748c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800748e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007490:	2b00      	cmp	r3, #0
 8007492:	d1e6      	bne.n	8007462 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	3308      	adds	r3, #8
 800749a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749c:	6a3b      	ldr	r3, [r7, #32]
 800749e:	e853 3f00 	ldrex	r3, [r3]
 80074a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074aa:	f023 0301 	bic.w	r3, r3, #1
 80074ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	3308      	adds	r3, #8
 80074b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80074ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074c0:	e841 2300 	strex	r3, r2, [r1]
 80074c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80074c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1e3      	bne.n	8007494 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d118      	bne.n	8007506 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	e853 3f00 	ldrex	r3, [r3]
 80074e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	f023 0310 	bic.w	r3, r3, #16
 80074e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074f2:	61bb      	str	r3, [r7, #24]
 80074f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f6:	6979      	ldr	r1, [r7, #20]
 80074f8:	69ba      	ldr	r2, [r7, #24]
 80074fa:	e841 2300 	strex	r3, r2, [r1]
 80074fe:	613b      	str	r3, [r7, #16]
   return(result);
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1e6      	bne.n	80074d4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2220      	movs	r2, #32
 800750a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800751a:	bf00      	nop
 800751c:	3754      	adds	r7, #84	@ 0x54
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr

08007526 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b090      	sub	sp, #64	@ 0x40
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007532:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0320 	and.w	r3, r3, #32
 800753e:	2b00      	cmp	r3, #0
 8007540:	d137      	bne.n	80075b2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007544:	2200      	movs	r2, #0
 8007546:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800754a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	3308      	adds	r3, #8
 8007550:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007554:	e853 3f00 	ldrex	r3, [r3]
 8007558:	623b      	str	r3, [r7, #32]
   return(result);
 800755a:	6a3b      	ldr	r3, [r7, #32]
 800755c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007560:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	3308      	adds	r3, #8
 8007568:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800756a:	633a      	str	r2, [r7, #48]	@ 0x30
 800756c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007570:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007572:	e841 2300 	strex	r3, r2, [r1]
 8007576:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1e5      	bne.n	800754a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800757e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	e853 3f00 	ldrex	r3, [r3]
 800758a:	60fb      	str	r3, [r7, #12]
   return(result);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007592:	637b      	str	r3, [r7, #52]	@ 0x34
 8007594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	461a      	mov	r2, r3
 800759a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800759c:	61fb      	str	r3, [r7, #28]
 800759e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a0:	69b9      	ldr	r1, [r7, #24]
 80075a2:	69fa      	ldr	r2, [r7, #28]
 80075a4:	e841 2300 	strex	r3, r2, [r1]
 80075a8:	617b      	str	r3, [r7, #20]
   return(result);
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1e6      	bne.n	800757e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80075b0:	e002      	b.n	80075b8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80075b2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80075b4:	f7ff f976 	bl	80068a4 <HAL_UART_TxCpltCallback>
}
 80075b8:	bf00      	nop
 80075ba:	3740      	adds	r7, #64	@ 0x40
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075cc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f7ff f972 	bl	80068b8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075d4:	bf00      	nop
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b09c      	sub	sp, #112	@ 0x70
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 0320 	and.w	r3, r3, #32
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d171      	bne.n	80076dc <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80075f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80075fa:	2200      	movs	r2, #0
 80075fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007600:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007606:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007608:	e853 3f00 	ldrex	r3, [r3]
 800760c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800760e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007610:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007614:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007616:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	461a      	mov	r2, r3
 800761c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800761e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007620:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007622:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007624:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007626:	e841 2300 	strex	r3, r2, [r1]
 800762a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800762c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1e6      	bne.n	8007600 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007632:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	3308      	adds	r3, #8
 8007638:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800763c:	e853 3f00 	ldrex	r3, [r3]
 8007640:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007644:	f023 0301 	bic.w	r3, r3, #1
 8007648:	667b      	str	r3, [r7, #100]	@ 0x64
 800764a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	3308      	adds	r3, #8
 8007650:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007652:	647a      	str	r2, [r7, #68]	@ 0x44
 8007654:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007656:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007658:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800765a:	e841 2300 	strex	r3, r2, [r1]
 800765e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1e5      	bne.n	8007632 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007666:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	3308      	adds	r3, #8
 800766c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007670:	e853 3f00 	ldrex	r3, [r3]
 8007674:	623b      	str	r3, [r7, #32]
   return(result);
 8007676:	6a3b      	ldr	r3, [r7, #32]
 8007678:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800767c:	663b      	str	r3, [r7, #96]	@ 0x60
 800767e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	3308      	adds	r3, #8
 8007684:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007686:	633a      	str	r2, [r7, #48]	@ 0x30
 8007688:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800768c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800768e:	e841 2300 	strex	r3, r2, [r1]
 8007692:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1e5      	bne.n	8007666 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800769a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800769c:	2220      	movs	r2, #32
 800769e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d118      	bne.n	80076dc <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	e853 3f00 	ldrex	r3, [r3]
 80076b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f023 0310 	bic.w	r3, r3, #16
 80076be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	461a      	mov	r2, r3
 80076c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076c8:	61fb      	str	r3, [r7, #28]
 80076ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076cc:	69b9      	ldr	r1, [r7, #24]
 80076ce:	69fa      	ldr	r2, [r7, #28]
 80076d0:	e841 2300 	strex	r3, r2, [r1]
 80076d4:	617b      	str	r3, [r7, #20]
   return(result);
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d1e6      	bne.n	80076aa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076de:	2200      	movs	r2, #0
 80076e0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d107      	bne.n	80076fa <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80076f0:	4619      	mov	r1, r3
 80076f2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80076f4:	f7ff f908 	bl	8006908 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80076f8:	e002      	b.n	8007700 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80076fa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80076fc:	f7ff f8e6 	bl	80068cc <HAL_UART_RxCpltCallback>
}
 8007700:	bf00      	nop
 8007702:	3770      	adds	r7, #112	@ 0x70
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007714:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2201      	movs	r2, #1
 800771a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007720:	2b01      	cmp	r3, #1
 8007722:	d109      	bne.n	8007738 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800772a:	085b      	lsrs	r3, r3, #1
 800772c:	b29b      	uxth	r3, r3
 800772e:	4619      	mov	r1, r3
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f7ff f8e9 	bl	8006908 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007736:	e002      	b.n	800773e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f7ff f8d1 	bl	80068e0 <HAL_UART_RxHalfCpltCallback>
}
 800773e:	bf00      	nop
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b086      	sub	sp, #24
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007752:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800775a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007762:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800776e:	2b80      	cmp	r3, #128	@ 0x80
 8007770:	d109      	bne.n	8007786 <UART_DMAError+0x40>
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	2b21      	cmp	r3, #33	@ 0x21
 8007776:	d106      	bne.n	8007786 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	2200      	movs	r2, #0
 800777c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007780:	6978      	ldr	r0, [r7, #20]
 8007782:	f7ff fe29 	bl	80073d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007790:	2b40      	cmp	r3, #64	@ 0x40
 8007792:	d109      	bne.n	80077a8 <UART_DMAError+0x62>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2b22      	cmp	r3, #34	@ 0x22
 8007798:	d106      	bne.n	80077a8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	2200      	movs	r2, #0
 800779e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80077a2:	6978      	ldr	r0, [r7, #20]
 80077a4:	f7ff fe59 	bl	800745a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077ae:	f043 0210 	orr.w	r2, r3, #16
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077b8:	6978      	ldr	r0, [r7, #20]
 80077ba:	f7ff f89b 	bl	80068f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077be:	bf00      	nop
 80077c0:	3718      	adds	r7, #24
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b084      	sub	sp, #16
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077dc:	68f8      	ldr	r0, [r7, #12]
 80077de:	f7ff f889 	bl	80068f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077e2:	bf00      	nop
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b088      	sub	sp, #32
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	e853 3f00 	ldrex	r3, [r3]
 80077fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007806:	61fb      	str	r3, [r7, #28]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	461a      	mov	r2, r3
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	61bb      	str	r3, [r7, #24]
 8007812:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007814:	6979      	ldr	r1, [r7, #20]
 8007816:	69ba      	ldr	r2, [r7, #24]
 8007818:	e841 2300 	strex	r3, r2, [r1]
 800781c:	613b      	str	r3, [r7, #16]
   return(result);
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1e6      	bne.n	80077f2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2220      	movs	r2, #32
 8007828:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f7ff f836 	bl	80068a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007838:	bf00      	nop
 800783a:	3720      	adds	r7, #32
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007848:	bf00      	nop
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800788a:	2b01      	cmp	r3, #1
 800788c:	d101      	bne.n	8007892 <HAL_UARTEx_DisableFifoMode+0x16>
 800788e:	2302      	movs	r3, #2
 8007890:	e027      	b.n	80078e2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2201      	movs	r2, #1
 8007896:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2224      	movs	r2, #36	@ 0x24
 800789e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f022 0201 	bic.w	r2, r2, #1
 80078b8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80078c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2220      	movs	r2, #32
 80078d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3714      	adds	r7, #20
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr

080078ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b084      	sub	sp, #16
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d101      	bne.n	8007906 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007902:	2302      	movs	r3, #2
 8007904:	e02d      	b.n	8007962 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2201      	movs	r2, #1
 800790a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2224      	movs	r2, #36	@ 0x24
 8007912:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f022 0201 	bic.w	r2, r2, #1
 800792c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	683a      	ldr	r2, [r7, #0]
 800793e:	430a      	orrs	r2, r1
 8007940:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f850 	bl	80079e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2220      	movs	r2, #32
 8007954:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b084      	sub	sp, #16
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800797a:	2b01      	cmp	r3, #1
 800797c:	d101      	bne.n	8007982 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800797e:	2302      	movs	r3, #2
 8007980:	e02d      	b.n	80079de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2201      	movs	r2, #1
 8007986:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2224      	movs	r2, #36	@ 0x24
 800798e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f022 0201 	bic.w	r2, r2, #1
 80079a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	683a      	ldr	r2, [r7, #0]
 80079ba:	430a      	orrs	r2, r1
 80079bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f812 	bl	80079e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2220      	movs	r2, #32
 80079d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
	...

080079e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d108      	bne.n	8007a0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a08:	e031      	b.n	8007a6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a0a:	2308      	movs	r3, #8
 8007a0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a0e:	2308      	movs	r3, #8
 8007a10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	0e5b      	lsrs	r3, r3, #25
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	f003 0307 	and.w	r3, r3, #7
 8007a20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	0f5b      	lsrs	r3, r3, #29
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	f003 0307 	and.w	r3, r3, #7
 8007a30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a32:	7bbb      	ldrb	r3, [r7, #14]
 8007a34:	7b3a      	ldrb	r2, [r7, #12]
 8007a36:	4911      	ldr	r1, [pc, #68]	@ (8007a7c <UARTEx_SetNbDataToProcess+0x94>)
 8007a38:	5c8a      	ldrb	r2, [r1, r2]
 8007a3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a3e:	7b3a      	ldrb	r2, [r7, #12]
 8007a40:	490f      	ldr	r1, [pc, #60]	@ (8007a80 <UARTEx_SetNbDataToProcess+0x98>)
 8007a42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a44:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a50:	7bfb      	ldrb	r3, [r7, #15]
 8007a52:	7b7a      	ldrb	r2, [r7, #13]
 8007a54:	4909      	ldr	r1, [pc, #36]	@ (8007a7c <UARTEx_SetNbDataToProcess+0x94>)
 8007a56:	5c8a      	ldrb	r2, [r1, r2]
 8007a58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a5c:	7b7a      	ldrb	r2, [r7, #13]
 8007a5e:	4908      	ldr	r1, [pc, #32]	@ (8007a80 <UARTEx_SetNbDataToProcess+0x98>)
 8007a60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a62:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007a6e:	bf00      	nop
 8007a70:	3714      	adds	r7, #20
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	08018054 	.word	0x08018054
 8007a80:	0801805c 	.word	0x0801805c

08007a84 <__NVIC_SetPriority>:
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	6039      	str	r1, [r7, #0]
 8007a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	db0a      	blt.n	8007aae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	b2da      	uxtb	r2, r3
 8007a9c:	490c      	ldr	r1, [pc, #48]	@ (8007ad0 <__NVIC_SetPriority+0x4c>)
 8007a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007aa2:	0112      	lsls	r2, r2, #4
 8007aa4:	b2d2      	uxtb	r2, r2
 8007aa6:	440b      	add	r3, r1
 8007aa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007aac:	e00a      	b.n	8007ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	b2da      	uxtb	r2, r3
 8007ab2:	4908      	ldr	r1, [pc, #32]	@ (8007ad4 <__NVIC_SetPriority+0x50>)
 8007ab4:	79fb      	ldrb	r3, [r7, #7]
 8007ab6:	f003 030f 	and.w	r3, r3, #15
 8007aba:	3b04      	subs	r3, #4
 8007abc:	0112      	lsls	r2, r2, #4
 8007abe:	b2d2      	uxtb	r2, r2
 8007ac0:	440b      	add	r3, r1
 8007ac2:	761a      	strb	r2, [r3, #24]
}
 8007ac4:	bf00      	nop
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr
 8007ad0:	e000e100 	.word	0xe000e100
 8007ad4:	e000ed00 	.word	0xe000ed00

08007ad8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007adc:	4b05      	ldr	r3, [pc, #20]	@ (8007af4 <SysTick_Handler+0x1c>)
 8007ade:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007ae0:	f001 fd40 	bl	8009564 <xTaskGetSchedulerState>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d001      	beq.n	8007aee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007aea:	f002 fb35 	bl	800a158 <xPortSysTickHandler>
  }
}
 8007aee:	bf00      	nop
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	e000e010 	.word	0xe000e010

08007af8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007af8:	b580      	push	{r7, lr}
 8007afa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007afc:	2100      	movs	r1, #0
 8007afe:	f06f 0004 	mvn.w	r0, #4
 8007b02:	f7ff ffbf 	bl	8007a84 <__NVIC_SetPriority>
#endif
}
 8007b06:	bf00      	nop
 8007b08:	bd80      	pop	{r7, pc}
	...

08007b0c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b12:	f3ef 8305 	mrs	r3, IPSR
 8007b16:	603b      	str	r3, [r7, #0]
  return(result);
 8007b18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d003      	beq.n	8007b26 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007b1e:	f06f 0305 	mvn.w	r3, #5
 8007b22:	607b      	str	r3, [r7, #4]
 8007b24:	e00c      	b.n	8007b40 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007b26:	4b0a      	ldr	r3, [pc, #40]	@ (8007b50 <osKernelInitialize+0x44>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d105      	bne.n	8007b3a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007b2e:	4b08      	ldr	r3, [pc, #32]	@ (8007b50 <osKernelInitialize+0x44>)
 8007b30:	2201      	movs	r2, #1
 8007b32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007b34:	2300      	movs	r3, #0
 8007b36:	607b      	str	r3, [r7, #4]
 8007b38:	e002      	b.n	8007b40 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007b3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007b40:	687b      	ldr	r3, [r7, #4]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	20004828 	.word	0x20004828

08007b54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b5a:	f3ef 8305 	mrs	r3, IPSR
 8007b5e:	603b      	str	r3, [r7, #0]
  return(result);
 8007b60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d003      	beq.n	8007b6e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007b66:	f06f 0305 	mvn.w	r3, #5
 8007b6a:	607b      	str	r3, [r7, #4]
 8007b6c:	e010      	b.n	8007b90 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8007b9c <osKernelStart+0x48>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d109      	bne.n	8007b8a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007b76:	f7ff ffbf 	bl	8007af8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007b7a:	4b08      	ldr	r3, [pc, #32]	@ (8007b9c <osKernelStart+0x48>)
 8007b7c:	2202      	movs	r2, #2
 8007b7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007b80:	f001 f87a 	bl	8008c78 <vTaskStartScheduler>
      stat = osOK;
 8007b84:	2300      	movs	r3, #0
 8007b86:	607b      	str	r3, [r7, #4]
 8007b88:	e002      	b.n	8007b90 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007b8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007b90:	687b      	ldr	r3, [r7, #4]
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3708      	adds	r7, #8
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	20004828 	.word	0x20004828

08007ba0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b08e      	sub	sp, #56	@ 0x38
 8007ba4:	af04      	add	r7, sp, #16
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007bac:	2300      	movs	r3, #0
 8007bae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bb0:	f3ef 8305 	mrs	r3, IPSR
 8007bb4:	617b      	str	r3, [r7, #20]
  return(result);
 8007bb6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d17e      	bne.n	8007cba <osThreadNew+0x11a>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d07b      	beq.n	8007cba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007bc2:	2380      	movs	r3, #128	@ 0x80
 8007bc4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007bc6:	2318      	movs	r3, #24
 8007bc8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007bce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007bd2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d045      	beq.n	8007c66 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d002      	beq.n	8007be8 <osThreadNew+0x48>
        name = attr->name;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d002      	beq.n	8007bf6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	699b      	ldr	r3, [r3, #24]
 8007bf4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d008      	beq.n	8007c0e <osThreadNew+0x6e>
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	2b38      	cmp	r3, #56	@ 0x38
 8007c00:	d805      	bhi.n	8007c0e <osThreadNew+0x6e>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	f003 0301 	and.w	r3, r3, #1
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d001      	beq.n	8007c12 <osThreadNew+0x72>
        return (NULL);
 8007c0e:	2300      	movs	r3, #0
 8007c10:	e054      	b.n	8007cbc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	695b      	ldr	r3, [r3, #20]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d003      	beq.n	8007c22 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	695b      	ldr	r3, [r3, #20]
 8007c1e:	089b      	lsrs	r3, r3, #2
 8007c20:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00e      	beq.n	8007c48 <osThreadNew+0xa8>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	2b5b      	cmp	r3, #91	@ 0x5b
 8007c30:	d90a      	bls.n	8007c48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d006      	beq.n	8007c48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d002      	beq.n	8007c48 <osThreadNew+0xa8>
        mem = 1;
 8007c42:	2301      	movs	r3, #1
 8007c44:	61bb      	str	r3, [r7, #24]
 8007c46:	e010      	b.n	8007c6a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d10c      	bne.n	8007c6a <osThreadNew+0xca>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d108      	bne.n	8007c6a <osThreadNew+0xca>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d104      	bne.n	8007c6a <osThreadNew+0xca>
          mem = 0;
 8007c60:	2300      	movs	r3, #0
 8007c62:	61bb      	str	r3, [r7, #24]
 8007c64:	e001      	b.n	8007c6a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007c66:	2300      	movs	r3, #0
 8007c68:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d110      	bne.n	8007c92 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007c78:	9202      	str	r2, [sp, #8]
 8007c7a:	9301      	str	r3, [sp, #4]
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	6a3a      	ldr	r2, [r7, #32]
 8007c84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f000 fe1a 	bl	80088c0 <xTaskCreateStatic>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	613b      	str	r3, [r7, #16]
 8007c90:	e013      	b.n	8007cba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d110      	bne.n	8007cba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	f107 0310 	add.w	r3, r7, #16
 8007ca0:	9301      	str	r3, [sp, #4]
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	9300      	str	r3, [sp, #0]
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f000 fe68 	bl	8008980 <xTaskCreate>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d001      	beq.n	8007cba <osThreadNew+0x11a>
            hTask = NULL;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007cba:	693b      	ldr	r3, [r7, #16]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3728      	adds	r7, #40	@ 0x28
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ccc:	f3ef 8305 	mrs	r3, IPSR
 8007cd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8007cd2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d003      	beq.n	8007ce0 <osDelay+0x1c>
    stat = osErrorISR;
 8007cd8:	f06f 0305 	mvn.w	r3, #5
 8007cdc:	60fb      	str	r3, [r7, #12]
 8007cde:	e007      	b.n	8007cf0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d002      	beq.n	8007cf0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 ff8e 	bl	8008c0c <vTaskDelay>
    }
  }

  return (stat);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
	...

08007cfc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	4a07      	ldr	r2, [pc, #28]	@ (8007d28 <vApplicationGetIdleTaskMemory+0x2c>)
 8007d0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	4a06      	ldr	r2, [pc, #24]	@ (8007d2c <vApplicationGetIdleTaskMemory+0x30>)
 8007d12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2280      	movs	r2, #128	@ 0x80
 8007d18:	601a      	str	r2, [r3, #0]
}
 8007d1a:	bf00      	nop
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	2000482c 	.word	0x2000482c
 8007d2c:	20004888 	.word	0x20004888

08007d30 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	4a07      	ldr	r2, [pc, #28]	@ (8007d5c <vApplicationGetTimerTaskMemory+0x2c>)
 8007d40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	4a06      	ldr	r2, [pc, #24]	@ (8007d60 <vApplicationGetTimerTaskMemory+0x30>)
 8007d46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007d4e:	601a      	str	r2, [r3, #0]
}
 8007d50:	bf00      	nop
 8007d52:	3714      	adds	r7, #20
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr
 8007d5c:	20004a88 	.word	0x20004a88
 8007d60:	20004ae4 	.word	0x20004ae4

08007d64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f103 0208 	add.w	r2, r3, #8
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f103 0208 	add.w	r2, r3, #8
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f103 0208 	add.w	r2, r3, #8
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007d98:	bf00      	nop
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007db2:	bf00      	nop
 8007db4:	370c      	adds	r7, #12
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007dbe:	b480      	push	{r7}
 8007dc0:	b085      	sub	sp, #20
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	689a      	ldr	r2, [r3, #8]
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	683a      	ldr	r2, [r7, #0]
 8007de8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	1c5a      	adds	r2, r3, #1
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	601a      	str	r2, [r3, #0]
}
 8007dfa:	bf00      	nop
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e06:	b480      	push	{r7}
 8007e08:	b085      	sub	sp, #20
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e1c:	d103      	bne.n	8007e26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	60fb      	str	r3, [r7, #12]
 8007e24:	e00c      	b.n	8007e40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	3308      	adds	r3, #8
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	e002      	b.n	8007e34 <vListInsert+0x2e>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	60fb      	str	r3, [r7, #12]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68ba      	ldr	r2, [r7, #8]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d2f6      	bcs.n	8007e2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	685a      	ldr	r2, [r3, #4]
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	683a      	ldr	r2, [r7, #0]
 8007e4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	683a      	ldr	r2, [r7, #0]
 8007e5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	1c5a      	adds	r2, r3, #1
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	601a      	str	r2, [r3, #0]
}
 8007e6c:	bf00      	nop
 8007e6e:	3714      	adds	r7, #20
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	6892      	ldr	r2, [r2, #8]
 8007e8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	6852      	ldr	r2, [r2, #4]
 8007e98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d103      	bne.n	8007eac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	689a      	ldr	r2, [r3, #8]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	1e5a      	subs	r2, r3, #1
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3714      	adds	r7, #20
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d10b      	bne.n	8007ef8 <xQueueGenericReset+0x2c>
	__asm volatile
 8007ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	60bb      	str	r3, [r7, #8]
}
 8007ef2:	bf00      	nop
 8007ef4:	bf00      	nop
 8007ef6:	e7fd      	b.n	8007ef4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007ef8:	f002 f89e 	bl	800a038 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f04:	68f9      	ldr	r1, [r7, #12]
 8007f06:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007f08:	fb01 f303 	mul.w	r3, r1, r3
 8007f0c:	441a      	add	r2, r3
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2200      	movs	r2, #0
 8007f16:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	68f9      	ldr	r1, [r7, #12]
 8007f2c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007f2e:	fb01 f303 	mul.w	r3, r1, r3
 8007f32:	441a      	add	r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	22ff      	movs	r2, #255	@ 0xff
 8007f3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	22ff      	movs	r2, #255	@ 0xff
 8007f44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d114      	bne.n	8007f78 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d01a      	beq.n	8007f8c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	3310      	adds	r3, #16
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f001 f91a 	bl	8009194 <xTaskRemoveFromEventList>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d012      	beq.n	8007f8c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007f66:	4b0d      	ldr	r3, [pc, #52]	@ (8007f9c <xQueueGenericReset+0xd0>)
 8007f68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f6c:	601a      	str	r2, [r3, #0]
 8007f6e:	f3bf 8f4f 	dsb	sy
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	e009      	b.n	8007f8c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	3310      	adds	r3, #16
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7ff fef1 	bl	8007d64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	3324      	adds	r3, #36	@ 0x24
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7ff feec 	bl	8007d64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007f8c:	f002 f886 	bl	800a09c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007f90:	2301      	movs	r3, #1
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	e000ed04 	.word	0xe000ed04

08007fa0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b08e      	sub	sp, #56	@ 0x38
 8007fa4:	af02      	add	r7, sp, #8
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
 8007fac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d10b      	bne.n	8007fcc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb8:	f383 8811 	msr	BASEPRI, r3
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007fc6:	bf00      	nop
 8007fc8:	bf00      	nop
 8007fca:	e7fd      	b.n	8007fc8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10b      	bne.n	8007fea <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd6:	f383 8811 	msr	BASEPRI, r3
 8007fda:	f3bf 8f6f 	isb	sy
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007fe4:	bf00      	nop
 8007fe6:	bf00      	nop
 8007fe8:	e7fd      	b.n	8007fe6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d002      	beq.n	8007ff6 <xQueueGenericCreateStatic+0x56>
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d001      	beq.n	8007ffa <xQueueGenericCreateStatic+0x5a>
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e000      	b.n	8007ffc <xQueueGenericCreateStatic+0x5c>
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d10b      	bne.n	8008018 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008004:	f383 8811 	msr	BASEPRI, r3
 8008008:	f3bf 8f6f 	isb	sy
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	623b      	str	r3, [r7, #32]
}
 8008012:	bf00      	nop
 8008014:	bf00      	nop
 8008016:	e7fd      	b.n	8008014 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d102      	bne.n	8008024 <xQueueGenericCreateStatic+0x84>
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d101      	bne.n	8008028 <xQueueGenericCreateStatic+0x88>
 8008024:	2301      	movs	r3, #1
 8008026:	e000      	b.n	800802a <xQueueGenericCreateStatic+0x8a>
 8008028:	2300      	movs	r3, #0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d10b      	bne.n	8008046 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800802e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008032:	f383 8811 	msr	BASEPRI, r3
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	61fb      	str	r3, [r7, #28]
}
 8008040:	bf00      	nop
 8008042:	bf00      	nop
 8008044:	e7fd      	b.n	8008042 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008046:	2350      	movs	r3, #80	@ 0x50
 8008048:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	2b50      	cmp	r3, #80	@ 0x50
 800804e:	d00b      	beq.n	8008068 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	61bb      	str	r3, [r7, #24]
}
 8008062:	bf00      	nop
 8008064:	bf00      	nop
 8008066:	e7fd      	b.n	8008064 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008068:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800806e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00d      	beq.n	8008090 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008076:	2201      	movs	r2, #1
 8008078:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800807c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	4613      	mov	r3, r2
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	68b9      	ldr	r1, [r7, #8]
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	f000 f805 	bl	800809a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008092:	4618      	mov	r0, r3
 8008094:	3730      	adds	r7, #48	@ 0x30
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b084      	sub	sp, #16
 800809e:	af00      	add	r7, sp, #0
 80080a0:	60f8      	str	r0, [r7, #12]
 80080a2:	60b9      	str	r1, [r7, #8]
 80080a4:	607a      	str	r2, [r7, #4]
 80080a6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d103      	bne.n	80080b6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	69ba      	ldr	r2, [r7, #24]
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	e002      	b.n	80080bc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	68fa      	ldr	r2, [r7, #12]
 80080c0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	68ba      	ldr	r2, [r7, #8]
 80080c6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80080c8:	2101      	movs	r1, #1
 80080ca:	69b8      	ldr	r0, [r7, #24]
 80080cc:	f7ff fefe 	bl	8007ecc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	78fa      	ldrb	r2, [r7, #3]
 80080d4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80080d8:	bf00      	nop
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b08e      	sub	sp, #56	@ 0x38
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
 80080ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80080ee:	2300      	movs	r3, #0
 80080f0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80080f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d10b      	bne.n	8008114 <xQueueGenericSend+0x34>
	__asm volatile
 80080fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008100:	f383 8811 	msr	BASEPRI, r3
 8008104:	f3bf 8f6f 	isb	sy
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800810e:	bf00      	nop
 8008110:	bf00      	nop
 8008112:	e7fd      	b.n	8008110 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d103      	bne.n	8008122 <xQueueGenericSend+0x42>
 800811a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <xQueueGenericSend+0x46>
 8008122:	2301      	movs	r3, #1
 8008124:	e000      	b.n	8008128 <xQueueGenericSend+0x48>
 8008126:	2300      	movs	r3, #0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10b      	bne.n	8008144 <xQueueGenericSend+0x64>
	__asm volatile
 800812c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008130:	f383 8811 	msr	BASEPRI, r3
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800813e:	bf00      	nop
 8008140:	bf00      	nop
 8008142:	e7fd      	b.n	8008140 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	2b02      	cmp	r3, #2
 8008148:	d103      	bne.n	8008152 <xQueueGenericSend+0x72>
 800814a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800814c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800814e:	2b01      	cmp	r3, #1
 8008150:	d101      	bne.n	8008156 <xQueueGenericSend+0x76>
 8008152:	2301      	movs	r3, #1
 8008154:	e000      	b.n	8008158 <xQueueGenericSend+0x78>
 8008156:	2300      	movs	r3, #0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d10b      	bne.n	8008174 <xQueueGenericSend+0x94>
	__asm volatile
 800815c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	623b      	str	r3, [r7, #32]
}
 800816e:	bf00      	nop
 8008170:	bf00      	nop
 8008172:	e7fd      	b.n	8008170 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008174:	f001 f9f6 	bl	8009564 <xTaskGetSchedulerState>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d102      	bne.n	8008184 <xQueueGenericSend+0xa4>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d101      	bne.n	8008188 <xQueueGenericSend+0xa8>
 8008184:	2301      	movs	r3, #1
 8008186:	e000      	b.n	800818a <xQueueGenericSend+0xaa>
 8008188:	2300      	movs	r3, #0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10b      	bne.n	80081a6 <xQueueGenericSend+0xc6>
	__asm volatile
 800818e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	61fb      	str	r3, [r7, #28]
}
 80081a0:	bf00      	nop
 80081a2:	bf00      	nop
 80081a4:	e7fd      	b.n	80081a2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80081a6:	f001 ff47 	bl	800a038 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d302      	bcc.n	80081bc <xQueueGenericSend+0xdc>
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	d129      	bne.n	8008210 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081bc:	683a      	ldr	r2, [r7, #0]
 80081be:	68b9      	ldr	r1, [r7, #8]
 80081c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80081c2:	f000 fa0f 	bl	80085e4 <prvCopyDataToQueue>
 80081c6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d010      	beq.n	80081f2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d2:	3324      	adds	r3, #36	@ 0x24
 80081d4:	4618      	mov	r0, r3
 80081d6:	f000 ffdd 	bl	8009194 <xTaskRemoveFromEventList>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d013      	beq.n	8008208 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80081e0:	4b3f      	ldr	r3, [pc, #252]	@ (80082e0 <xQueueGenericSend+0x200>)
 80081e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	e00a      	b.n	8008208 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80081f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d007      	beq.n	8008208 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80081f8:	4b39      	ldr	r3, [pc, #228]	@ (80082e0 <xQueueGenericSend+0x200>)
 80081fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081fe:	601a      	str	r2, [r3, #0]
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008208:	f001 ff48 	bl	800a09c <vPortExitCritical>
				return pdPASS;
 800820c:	2301      	movs	r3, #1
 800820e:	e063      	b.n	80082d8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d103      	bne.n	800821e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008216:	f001 ff41 	bl	800a09c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800821a:	2300      	movs	r3, #0
 800821c:	e05c      	b.n	80082d8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800821e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008220:	2b00      	cmp	r3, #0
 8008222:	d106      	bne.n	8008232 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008224:	f107 0314 	add.w	r3, r7, #20
 8008228:	4618      	mov	r0, r3
 800822a:	f001 f83f 	bl	80092ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800822e:	2301      	movs	r3, #1
 8008230:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008232:	f001 ff33 	bl	800a09c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008236:	f000 fd87 	bl	8008d48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800823a:	f001 fefd 	bl	800a038 <vPortEnterCritical>
 800823e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008240:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008244:	b25b      	sxtb	r3, r3
 8008246:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800824a:	d103      	bne.n	8008254 <xQueueGenericSend+0x174>
 800824c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800824e:	2200      	movs	r2, #0
 8008250:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008256:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800825a:	b25b      	sxtb	r3, r3
 800825c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008260:	d103      	bne.n	800826a <xQueueGenericSend+0x18a>
 8008262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008264:	2200      	movs	r2, #0
 8008266:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800826a:	f001 ff17 	bl	800a09c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800826e:	1d3a      	adds	r2, r7, #4
 8008270:	f107 0314 	add.w	r3, r7, #20
 8008274:	4611      	mov	r1, r2
 8008276:	4618      	mov	r0, r3
 8008278:	f001 f82e 	bl	80092d8 <xTaskCheckForTimeOut>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d124      	bne.n	80082cc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008282:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008284:	f000 faa6 	bl	80087d4 <prvIsQueueFull>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d018      	beq.n	80082c0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800828e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008290:	3310      	adds	r3, #16
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	4611      	mov	r1, r2
 8008296:	4618      	mov	r0, r3
 8008298:	f000 ff2a 	bl	80090f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800829c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800829e:	f000 fa31 	bl	8008704 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80082a2:	f000 fd5f 	bl	8008d64 <xTaskResumeAll>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f47f af7c 	bne.w	80081a6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80082ae:	4b0c      	ldr	r3, [pc, #48]	@ (80082e0 <xQueueGenericSend+0x200>)
 80082b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082b4:	601a      	str	r2, [r3, #0]
 80082b6:	f3bf 8f4f 	dsb	sy
 80082ba:	f3bf 8f6f 	isb	sy
 80082be:	e772      	b.n	80081a6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80082c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082c2:	f000 fa1f 	bl	8008704 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082c6:	f000 fd4d 	bl	8008d64 <xTaskResumeAll>
 80082ca:	e76c      	b.n	80081a6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80082cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082ce:	f000 fa19 	bl	8008704 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082d2:	f000 fd47 	bl	8008d64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80082d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3738      	adds	r7, #56	@ 0x38
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	e000ed04 	.word	0xe000ed04

080082e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b090      	sub	sp, #64	@ 0x40
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	607a      	str	r2, [r7, #4]
 80082f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80082f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d10b      	bne.n	8008314 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80082fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008300:	f383 8811 	msr	BASEPRI, r3
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	f3bf 8f4f 	dsb	sy
 800830c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800830e:	bf00      	nop
 8008310:	bf00      	nop
 8008312:	e7fd      	b.n	8008310 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d103      	bne.n	8008322 <xQueueGenericSendFromISR+0x3e>
 800831a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800831c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <xQueueGenericSendFromISR+0x42>
 8008322:	2301      	movs	r3, #1
 8008324:	e000      	b.n	8008328 <xQueueGenericSendFromISR+0x44>
 8008326:	2300      	movs	r3, #0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d10b      	bne.n	8008344 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800832c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008330:	f383 8811 	msr	BASEPRI, r3
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800833e:	bf00      	nop
 8008340:	bf00      	nop
 8008342:	e7fd      	b.n	8008340 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	2b02      	cmp	r3, #2
 8008348:	d103      	bne.n	8008352 <xQueueGenericSendFromISR+0x6e>
 800834a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800834c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800834e:	2b01      	cmp	r3, #1
 8008350:	d101      	bne.n	8008356 <xQueueGenericSendFromISR+0x72>
 8008352:	2301      	movs	r3, #1
 8008354:	e000      	b.n	8008358 <xQueueGenericSendFromISR+0x74>
 8008356:	2300      	movs	r3, #0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10b      	bne.n	8008374 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800835c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008360:	f383 8811 	msr	BASEPRI, r3
 8008364:	f3bf 8f6f 	isb	sy
 8008368:	f3bf 8f4f 	dsb	sy
 800836c:	623b      	str	r3, [r7, #32]
}
 800836e:	bf00      	nop
 8008370:	bf00      	nop
 8008372:	e7fd      	b.n	8008370 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008374:	f001 ff40 	bl	800a1f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008378:	f3ef 8211 	mrs	r2, BASEPRI
 800837c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008380:	f383 8811 	msr	BASEPRI, r3
 8008384:	f3bf 8f6f 	isb	sy
 8008388:	f3bf 8f4f 	dsb	sy
 800838c:	61fa      	str	r2, [r7, #28]
 800838e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008390:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008392:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008396:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800839a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800839c:	429a      	cmp	r2, r3
 800839e:	d302      	bcc.n	80083a6 <xQueueGenericSendFromISR+0xc2>
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	d12f      	bne.n	8008406 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80083a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80083ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083b6:	683a      	ldr	r2, [r7, #0]
 80083b8:	68b9      	ldr	r1, [r7, #8]
 80083ba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80083bc:	f000 f912 	bl	80085e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80083c0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80083c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80083c8:	d112      	bne.n	80083f0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d016      	beq.n	8008400 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083d4:	3324      	adds	r3, #36	@ 0x24
 80083d6:	4618      	mov	r0, r3
 80083d8:	f000 fedc 	bl	8009194 <xTaskRemoveFromEventList>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00e      	beq.n	8008400 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00b      	beq.n	8008400 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	601a      	str	r2, [r3, #0]
 80083ee:	e007      	b.n	8008400 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80083f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80083f4:	3301      	adds	r3, #1
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	b25a      	sxtb	r2, r3
 80083fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008400:	2301      	movs	r3, #1
 8008402:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008404:	e001      	b.n	800840a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008406:	2300      	movs	r3, #0
 8008408:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800840a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800840c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008414:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008418:	4618      	mov	r0, r3
 800841a:	3740      	adds	r7, #64	@ 0x40
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b08c      	sub	sp, #48	@ 0x30
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800842c:	2300      	movs	r3, #0
 800842e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008436:	2b00      	cmp	r3, #0
 8008438:	d10b      	bne.n	8008452 <xQueueReceive+0x32>
	__asm volatile
 800843a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800843e:	f383 8811 	msr	BASEPRI, r3
 8008442:	f3bf 8f6f 	isb	sy
 8008446:	f3bf 8f4f 	dsb	sy
 800844a:	623b      	str	r3, [r7, #32]
}
 800844c:	bf00      	nop
 800844e:	bf00      	nop
 8008450:	e7fd      	b.n	800844e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d103      	bne.n	8008460 <xQueueReceive+0x40>
 8008458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800845a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800845c:	2b00      	cmp	r3, #0
 800845e:	d101      	bne.n	8008464 <xQueueReceive+0x44>
 8008460:	2301      	movs	r3, #1
 8008462:	e000      	b.n	8008466 <xQueueReceive+0x46>
 8008464:	2300      	movs	r3, #0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d10b      	bne.n	8008482 <xQueueReceive+0x62>
	__asm volatile
 800846a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800846e:	f383 8811 	msr	BASEPRI, r3
 8008472:	f3bf 8f6f 	isb	sy
 8008476:	f3bf 8f4f 	dsb	sy
 800847a:	61fb      	str	r3, [r7, #28]
}
 800847c:	bf00      	nop
 800847e:	bf00      	nop
 8008480:	e7fd      	b.n	800847e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008482:	f001 f86f 	bl	8009564 <xTaskGetSchedulerState>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d102      	bne.n	8008492 <xQueueReceive+0x72>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d101      	bne.n	8008496 <xQueueReceive+0x76>
 8008492:	2301      	movs	r3, #1
 8008494:	e000      	b.n	8008498 <xQueueReceive+0x78>
 8008496:	2300      	movs	r3, #0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d10b      	bne.n	80084b4 <xQueueReceive+0x94>
	__asm volatile
 800849c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a0:	f383 8811 	msr	BASEPRI, r3
 80084a4:	f3bf 8f6f 	isb	sy
 80084a8:	f3bf 8f4f 	dsb	sy
 80084ac:	61bb      	str	r3, [r7, #24]
}
 80084ae:	bf00      	nop
 80084b0:	bf00      	nop
 80084b2:	e7fd      	b.n	80084b0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80084b4:	f001 fdc0 	bl	800a038 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084bc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d01f      	beq.n	8008504 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80084c4:	68b9      	ldr	r1, [r7, #8]
 80084c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084c8:	f000 f8f6 	bl	80086b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80084cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ce:	1e5a      	subs	r2, r3, #1
 80084d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00f      	beq.n	80084fc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084de:	3310      	adds	r3, #16
 80084e0:	4618      	mov	r0, r3
 80084e2:	f000 fe57 	bl	8009194 <xTaskRemoveFromEventList>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d007      	beq.n	80084fc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80084ec:	4b3c      	ldr	r3, [pc, #240]	@ (80085e0 <xQueueReceive+0x1c0>)
 80084ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084f2:	601a      	str	r2, [r3, #0]
 80084f4:	f3bf 8f4f 	dsb	sy
 80084f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80084fc:	f001 fdce 	bl	800a09c <vPortExitCritical>
				return pdPASS;
 8008500:	2301      	movs	r3, #1
 8008502:	e069      	b.n	80085d8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d103      	bne.n	8008512 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800850a:	f001 fdc7 	bl	800a09c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800850e:	2300      	movs	r3, #0
 8008510:	e062      	b.n	80085d8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008514:	2b00      	cmp	r3, #0
 8008516:	d106      	bne.n	8008526 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008518:	f107 0310 	add.w	r3, r7, #16
 800851c:	4618      	mov	r0, r3
 800851e:	f000 fec5 	bl	80092ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008522:	2301      	movs	r3, #1
 8008524:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008526:	f001 fdb9 	bl	800a09c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800852a:	f000 fc0d 	bl	8008d48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800852e:	f001 fd83 	bl	800a038 <vPortEnterCritical>
 8008532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008534:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008538:	b25b      	sxtb	r3, r3
 800853a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800853e:	d103      	bne.n	8008548 <xQueueReceive+0x128>
 8008540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008542:	2200      	movs	r2, #0
 8008544:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800854a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800854e:	b25b      	sxtb	r3, r3
 8008550:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008554:	d103      	bne.n	800855e <xQueueReceive+0x13e>
 8008556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008558:	2200      	movs	r2, #0
 800855a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800855e:	f001 fd9d 	bl	800a09c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008562:	1d3a      	adds	r2, r7, #4
 8008564:	f107 0310 	add.w	r3, r7, #16
 8008568:	4611      	mov	r1, r2
 800856a:	4618      	mov	r0, r3
 800856c:	f000 feb4 	bl	80092d8 <xTaskCheckForTimeOut>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	d123      	bne.n	80085be <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008576:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008578:	f000 f916 	bl	80087a8 <prvIsQueueEmpty>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d017      	beq.n	80085b2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008584:	3324      	adds	r3, #36	@ 0x24
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	4611      	mov	r1, r2
 800858a:	4618      	mov	r0, r3
 800858c:	f000 fdb0 	bl	80090f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008590:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008592:	f000 f8b7 	bl	8008704 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008596:	f000 fbe5 	bl	8008d64 <xTaskResumeAll>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d189      	bne.n	80084b4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80085a0:	4b0f      	ldr	r3, [pc, #60]	@ (80085e0 <xQueueReceive+0x1c0>)
 80085a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085a6:	601a      	str	r2, [r3, #0]
 80085a8:	f3bf 8f4f 	dsb	sy
 80085ac:	f3bf 8f6f 	isb	sy
 80085b0:	e780      	b.n	80084b4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80085b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085b4:	f000 f8a6 	bl	8008704 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085b8:	f000 fbd4 	bl	8008d64 <xTaskResumeAll>
 80085bc:	e77a      	b.n	80084b4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80085be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085c0:	f000 f8a0 	bl	8008704 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085c4:	f000 fbce 	bl	8008d64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085ca:	f000 f8ed 	bl	80087a8 <prvIsQueueEmpty>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f43f af6f 	beq.w	80084b4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80085d6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3730      	adds	r7, #48	@ 0x30
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	e000ed04 	.word	0xe000ed04

080085e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b086      	sub	sp, #24
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80085f0:	2300      	movs	r3, #0
 80085f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d10d      	bne.n	800861e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d14d      	bne.n	80086a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	4618      	mov	r0, r3
 8008610:	f000 ffc6 	bl	80095a0 <xTaskPriorityDisinherit>
 8008614:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2200      	movs	r2, #0
 800861a:	609a      	str	r2, [r3, #8]
 800861c:	e043      	b.n	80086a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d119      	bne.n	8008658 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6858      	ldr	r0, [r3, #4]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800862c:	461a      	mov	r2, r3
 800862e:	68b9      	ldr	r1, [r7, #8]
 8008630:	f00e fdb1 	bl	8017196 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	685a      	ldr	r2, [r3, #4]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800863c:	441a      	add	r2, r3
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	685a      	ldr	r2, [r3, #4]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	429a      	cmp	r2, r3
 800864c:	d32b      	bcc.n	80086a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	605a      	str	r2, [r3, #4]
 8008656:	e026      	b.n	80086a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	68d8      	ldr	r0, [r3, #12]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008660:	461a      	mov	r2, r3
 8008662:	68b9      	ldr	r1, [r7, #8]
 8008664:	f00e fd97 	bl	8017196 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	68da      	ldr	r2, [r3, #12]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008670:	425b      	negs	r3, r3
 8008672:	441a      	add	r2, r3
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	68da      	ldr	r2, [r3, #12]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	429a      	cmp	r2, r3
 8008682:	d207      	bcs.n	8008694 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	689a      	ldr	r2, [r3, #8]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800868c:	425b      	negs	r3, r3
 800868e:	441a      	add	r2, r3
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2b02      	cmp	r3, #2
 8008698:	d105      	bne.n	80086a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d002      	beq.n	80086a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	3b01      	subs	r3, #1
 80086a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	1c5a      	adds	r2, r3, #1
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80086ae:	697b      	ldr	r3, [r7, #20]
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3718      	adds	r7, #24
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d018      	beq.n	80086fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	68da      	ldr	r2, [r3, #12]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086d2:	441a      	add	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	68da      	ldr	r2, [r3, #12]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d303      	bcc.n	80086ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	68d9      	ldr	r1, [r3, #12]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086f4:	461a      	mov	r2, r3
 80086f6:	6838      	ldr	r0, [r7, #0]
 80086f8:	f00e fd4d 	bl	8017196 <memcpy>
	}
}
 80086fc:	bf00      	nop
 80086fe:	3708      	adds	r7, #8
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800870c:	f001 fc94 	bl	800a038 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008716:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008718:	e011      	b.n	800873e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800871e:	2b00      	cmp	r3, #0
 8008720:	d012      	beq.n	8008748 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	3324      	adds	r3, #36	@ 0x24
 8008726:	4618      	mov	r0, r3
 8008728:	f000 fd34 	bl	8009194 <xTaskRemoveFromEventList>
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d001      	beq.n	8008736 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008732:	f000 fe35 	bl	80093a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008736:	7bfb      	ldrb	r3, [r7, #15]
 8008738:	3b01      	subs	r3, #1
 800873a:	b2db      	uxtb	r3, r3
 800873c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800873e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008742:	2b00      	cmp	r3, #0
 8008744:	dce9      	bgt.n	800871a <prvUnlockQueue+0x16>
 8008746:	e000      	b.n	800874a <prvUnlockQueue+0x46>
					break;
 8008748:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	22ff      	movs	r2, #255	@ 0xff
 800874e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008752:	f001 fca3 	bl	800a09c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008756:	f001 fc6f 	bl	800a038 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008760:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008762:	e011      	b.n	8008788 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d012      	beq.n	8008792 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	3310      	adds	r3, #16
 8008770:	4618      	mov	r0, r3
 8008772:	f000 fd0f 	bl	8009194 <xTaskRemoveFromEventList>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d001      	beq.n	8008780 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800877c:	f000 fe10 	bl	80093a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008780:	7bbb      	ldrb	r3, [r7, #14]
 8008782:	3b01      	subs	r3, #1
 8008784:	b2db      	uxtb	r3, r3
 8008786:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008788:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800878c:	2b00      	cmp	r3, #0
 800878e:	dce9      	bgt.n	8008764 <prvUnlockQueue+0x60>
 8008790:	e000      	b.n	8008794 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008792:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	22ff      	movs	r2, #255	@ 0xff
 8008798:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800879c:	f001 fc7e 	bl	800a09c <vPortExitCritical>
}
 80087a0:	bf00      	nop
 80087a2:	3710      	adds	r7, #16
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b084      	sub	sp, #16
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087b0:	f001 fc42 	bl	800a038 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d102      	bne.n	80087c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80087bc:	2301      	movs	r3, #1
 80087be:	60fb      	str	r3, [r7, #12]
 80087c0:	e001      	b.n	80087c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80087c2:	2300      	movs	r3, #0
 80087c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80087c6:	f001 fc69 	bl	800a09c <vPortExitCritical>

	return xReturn;
 80087ca:	68fb      	ldr	r3, [r7, #12]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3710      	adds	r7, #16
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087dc:	f001 fc2c 	bl	800a038 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d102      	bne.n	80087f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80087ec:	2301      	movs	r3, #1
 80087ee:	60fb      	str	r3, [r7, #12]
 80087f0:	e001      	b.n	80087f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80087f2:	2300      	movs	r3, #0
 80087f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80087f6:	f001 fc51 	bl	800a09c <vPortExitCritical>

	return xReturn;
 80087fa:	68fb      	ldr	r3, [r7, #12]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008804:	b480      	push	{r7}
 8008806:	b085      	sub	sp, #20
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800880e:	2300      	movs	r3, #0
 8008810:	60fb      	str	r3, [r7, #12]
 8008812:	e014      	b.n	800883e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008814:	4a0f      	ldr	r2, [pc, #60]	@ (8008854 <vQueueAddToRegistry+0x50>)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d10b      	bne.n	8008838 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008820:	490c      	ldr	r1, [pc, #48]	@ (8008854 <vQueueAddToRegistry+0x50>)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	683a      	ldr	r2, [r7, #0]
 8008826:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800882a:	4a0a      	ldr	r2, [pc, #40]	@ (8008854 <vQueueAddToRegistry+0x50>)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	00db      	lsls	r3, r3, #3
 8008830:	4413      	add	r3, r2
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008836:	e006      	b.n	8008846 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	3301      	adds	r3, #1
 800883c:	60fb      	str	r3, [r7, #12]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2b07      	cmp	r3, #7
 8008842:	d9e7      	bls.n	8008814 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008844:	bf00      	nop
 8008846:	bf00      	nop
 8008848:	3714      	adds	r7, #20
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	20004ee4 	.word	0x20004ee4

08008858 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008858:	b580      	push	{r7, lr}
 800885a:	b086      	sub	sp, #24
 800885c:	af00      	add	r7, sp, #0
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008868:	f001 fbe6 	bl	800a038 <vPortEnterCritical>
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008872:	b25b      	sxtb	r3, r3
 8008874:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008878:	d103      	bne.n	8008882 <vQueueWaitForMessageRestricted+0x2a>
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	2200      	movs	r2, #0
 800887e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008888:	b25b      	sxtb	r3, r3
 800888a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800888e:	d103      	bne.n	8008898 <vQueueWaitForMessageRestricted+0x40>
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	2200      	movs	r2, #0
 8008894:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008898:	f001 fc00 	bl	800a09c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d106      	bne.n	80088b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	3324      	adds	r3, #36	@ 0x24
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	68b9      	ldr	r1, [r7, #8]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f000 fc45 	bl	800913c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80088b2:	6978      	ldr	r0, [r7, #20]
 80088b4:	f7ff ff26 	bl	8008704 <prvUnlockQueue>
	}
 80088b8:	bf00      	nop
 80088ba:	3718      	adds	r7, #24
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b08e      	sub	sp, #56	@ 0x38
 80088c4:	af04      	add	r7, sp, #16
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	607a      	str	r2, [r7, #4]
 80088cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80088ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d10b      	bne.n	80088ec <xTaskCreateStatic+0x2c>
	__asm volatile
 80088d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d8:	f383 8811 	msr	BASEPRI, r3
 80088dc:	f3bf 8f6f 	isb	sy
 80088e0:	f3bf 8f4f 	dsb	sy
 80088e4:	623b      	str	r3, [r7, #32]
}
 80088e6:	bf00      	nop
 80088e8:	bf00      	nop
 80088ea:	e7fd      	b.n	80088e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80088ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d10b      	bne.n	800890a <xTaskCreateStatic+0x4a>
	__asm volatile
 80088f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f6:	f383 8811 	msr	BASEPRI, r3
 80088fa:	f3bf 8f6f 	isb	sy
 80088fe:	f3bf 8f4f 	dsb	sy
 8008902:	61fb      	str	r3, [r7, #28]
}
 8008904:	bf00      	nop
 8008906:	bf00      	nop
 8008908:	e7fd      	b.n	8008906 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800890a:	235c      	movs	r3, #92	@ 0x5c
 800890c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	2b5c      	cmp	r3, #92	@ 0x5c
 8008912:	d00b      	beq.n	800892c <xTaskCreateStatic+0x6c>
	__asm volatile
 8008914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008918:	f383 8811 	msr	BASEPRI, r3
 800891c:	f3bf 8f6f 	isb	sy
 8008920:	f3bf 8f4f 	dsb	sy
 8008924:	61bb      	str	r3, [r7, #24]
}
 8008926:	bf00      	nop
 8008928:	bf00      	nop
 800892a:	e7fd      	b.n	8008928 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800892c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800892e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008930:	2b00      	cmp	r3, #0
 8008932:	d01e      	beq.n	8008972 <xTaskCreateStatic+0xb2>
 8008934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008936:	2b00      	cmp	r3, #0
 8008938:	d01b      	beq.n	8008972 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800893a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800893c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800893e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008940:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008942:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008946:	2202      	movs	r2, #2
 8008948:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800894c:	2300      	movs	r3, #0
 800894e:	9303      	str	r3, [sp, #12]
 8008950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008952:	9302      	str	r3, [sp, #8]
 8008954:	f107 0314 	add.w	r3, r7, #20
 8008958:	9301      	str	r3, [sp, #4]
 800895a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800895c:	9300      	str	r3, [sp, #0]
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	68b9      	ldr	r1, [r7, #8]
 8008964:	68f8      	ldr	r0, [r7, #12]
 8008966:	f000 f850 	bl	8008a0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800896a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800896c:	f000 f8de 	bl	8008b2c <prvAddNewTaskToReadyList>
 8008970:	e001      	b.n	8008976 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008972:	2300      	movs	r3, #0
 8008974:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008976:	697b      	ldr	r3, [r7, #20]
	}
 8008978:	4618      	mov	r0, r3
 800897a:	3728      	adds	r7, #40	@ 0x28
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008980:	b580      	push	{r7, lr}
 8008982:	b08c      	sub	sp, #48	@ 0x30
 8008984:	af04      	add	r7, sp, #16
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	603b      	str	r3, [r7, #0]
 800898c:	4613      	mov	r3, r2
 800898e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008990:	88fb      	ldrh	r3, [r7, #6]
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	4618      	mov	r0, r3
 8008996:	f001 fc71 	bl	800a27c <pvPortMalloc>
 800899a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00e      	beq.n	80089c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80089a2:	205c      	movs	r0, #92	@ 0x5c
 80089a4:	f001 fc6a 	bl	800a27c <pvPortMalloc>
 80089a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d003      	beq.n	80089b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	697a      	ldr	r2, [r7, #20]
 80089b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80089b6:	e005      	b.n	80089c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80089b8:	6978      	ldr	r0, [r7, #20]
 80089ba:	f001 fd2d 	bl	800a418 <vPortFree>
 80089be:	e001      	b.n	80089c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80089c0:	2300      	movs	r3, #0
 80089c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d017      	beq.n	80089fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80089d2:	88fa      	ldrh	r2, [r7, #6]
 80089d4:	2300      	movs	r3, #0
 80089d6:	9303      	str	r3, [sp, #12]
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	9302      	str	r3, [sp, #8]
 80089dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089de:	9301      	str	r3, [sp, #4]
 80089e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	68b9      	ldr	r1, [r7, #8]
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f000 f80e 	bl	8008a0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089ee:	69f8      	ldr	r0, [r7, #28]
 80089f0:	f000 f89c 	bl	8008b2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80089f4:	2301      	movs	r3, #1
 80089f6:	61bb      	str	r3, [r7, #24]
 80089f8:	e002      	b.n	8008a00 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80089fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80089fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a00:	69bb      	ldr	r3, [r7, #24]
	}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3720      	adds	r7, #32
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b088      	sub	sp, #32
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	60f8      	str	r0, [r7, #12]
 8008a12:	60b9      	str	r1, [r7, #8]
 8008a14:	607a      	str	r2, [r7, #4]
 8008a16:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a1a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	461a      	mov	r2, r3
 8008a22:	21a5      	movs	r1, #165	@ 0xa5
 8008a24:	f00e faee 	bl	8017004 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008a32:	3b01      	subs	r3, #1
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	4413      	add	r3, r2
 8008a38:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	f023 0307 	bic.w	r3, r3, #7
 8008a40:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	f003 0307 	and.w	r3, r3, #7
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00b      	beq.n	8008a64 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a50:	f383 8811 	msr	BASEPRI, r3
 8008a54:	f3bf 8f6f 	isb	sy
 8008a58:	f3bf 8f4f 	dsb	sy
 8008a5c:	617b      	str	r3, [r7, #20]
}
 8008a5e:	bf00      	nop
 8008a60:	bf00      	nop
 8008a62:	e7fd      	b.n	8008a60 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d01f      	beq.n	8008aaa <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	61fb      	str	r3, [r7, #28]
 8008a6e:	e012      	b.n	8008a96 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a70:	68ba      	ldr	r2, [r7, #8]
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	4413      	add	r3, r2
 8008a76:	7819      	ldrb	r1, [r3, #0]
 8008a78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	3334      	adds	r3, #52	@ 0x34
 8008a80:	460a      	mov	r2, r1
 8008a82:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	4413      	add	r3, r2
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d006      	beq.n	8008a9e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a90:	69fb      	ldr	r3, [r7, #28]
 8008a92:	3301      	adds	r3, #1
 8008a94:	61fb      	str	r3, [r7, #28]
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	2b0f      	cmp	r3, #15
 8008a9a:	d9e9      	bls.n	8008a70 <prvInitialiseNewTask+0x66>
 8008a9c:	e000      	b.n	8008aa0 <prvInitialiseNewTask+0x96>
			{
				break;
 8008a9e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008aa8:	e003      	b.n	8008ab2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aac:	2200      	movs	r2, #0
 8008aae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ab4:	2b37      	cmp	r3, #55	@ 0x37
 8008ab6:	d901      	bls.n	8008abc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ab8:	2337      	movs	r3, #55	@ 0x37
 8008aba:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008abe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ac0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ac6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aca:	2200      	movs	r2, #0
 8008acc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad0:	3304      	adds	r3, #4
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7ff f966 	bl	8007da4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ada:	3318      	adds	r3, #24
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7ff f961 	bl	8007da4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ae6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aea:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008af6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afa:	2200      	movs	r2, #0
 8008afc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b00:	2200      	movs	r2, #0
 8008b02:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b06:	683a      	ldr	r2, [r7, #0]
 8008b08:	68f9      	ldr	r1, [r7, #12]
 8008b0a:	69b8      	ldr	r0, [r7, #24]
 8008b0c:	f001 f966 	bl	8009ddc <pxPortInitialiseStack>
 8008b10:	4602      	mov	r2, r0
 8008b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b14:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d002      	beq.n	8008b22 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b22:	bf00      	nop
 8008b24:	3720      	adds	r7, #32
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
	...

08008b2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008b34:	f001 fa80 	bl	800a038 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008b38:	4b2d      	ldr	r3, [pc, #180]	@ (8008bf0 <prvAddNewTaskToReadyList+0xc4>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	4a2c      	ldr	r2, [pc, #176]	@ (8008bf0 <prvAddNewTaskToReadyList+0xc4>)
 8008b40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008b42:	4b2c      	ldr	r3, [pc, #176]	@ (8008bf4 <prvAddNewTaskToReadyList+0xc8>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d109      	bne.n	8008b5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008b4a:	4a2a      	ldr	r2, [pc, #168]	@ (8008bf4 <prvAddNewTaskToReadyList+0xc8>)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008b50:	4b27      	ldr	r3, [pc, #156]	@ (8008bf0 <prvAddNewTaskToReadyList+0xc4>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d110      	bne.n	8008b7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008b58:	f000 fc46 	bl	80093e8 <prvInitialiseTaskLists>
 8008b5c:	e00d      	b.n	8008b7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008b5e:	4b26      	ldr	r3, [pc, #152]	@ (8008bf8 <prvAddNewTaskToReadyList+0xcc>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d109      	bne.n	8008b7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008b66:	4b23      	ldr	r3, [pc, #140]	@ (8008bf4 <prvAddNewTaskToReadyList+0xc8>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d802      	bhi.n	8008b7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008b74:	4a1f      	ldr	r2, [pc, #124]	@ (8008bf4 <prvAddNewTaskToReadyList+0xc8>)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008b7a:	4b20      	ldr	r3, [pc, #128]	@ (8008bfc <prvAddNewTaskToReadyList+0xd0>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	4a1e      	ldr	r2, [pc, #120]	@ (8008bfc <prvAddNewTaskToReadyList+0xd0>)
 8008b82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008b84:	4b1d      	ldr	r3, [pc, #116]	@ (8008bfc <prvAddNewTaskToReadyList+0xd0>)
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b90:	4b1b      	ldr	r3, [pc, #108]	@ (8008c00 <prvAddNewTaskToReadyList+0xd4>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d903      	bls.n	8008ba0 <prvAddNewTaskToReadyList+0x74>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b9c:	4a18      	ldr	r2, [pc, #96]	@ (8008c00 <prvAddNewTaskToReadyList+0xd4>)
 8008b9e:	6013      	str	r3, [r2, #0]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	4413      	add	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4a15      	ldr	r2, [pc, #84]	@ (8008c04 <prvAddNewTaskToReadyList+0xd8>)
 8008bae:	441a      	add	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	3304      	adds	r3, #4
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	4610      	mov	r0, r2
 8008bb8:	f7ff f901 	bl	8007dbe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008bbc:	f001 fa6e 	bl	800a09c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8008bf8 <prvAddNewTaskToReadyList+0xcc>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d00e      	beq.n	8008be6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8008bf4 <prvAddNewTaskToReadyList+0xc8>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d207      	bcs.n	8008be6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8008c08 <prvAddNewTaskToReadyList+0xdc>)
 8008bd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bdc:	601a      	str	r2, [r3, #0]
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008be6:	bf00      	nop
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	200053f8 	.word	0x200053f8
 8008bf4:	20004f24 	.word	0x20004f24
 8008bf8:	20005404 	.word	0x20005404
 8008bfc:	20005414 	.word	0x20005414
 8008c00:	20005400 	.word	0x20005400
 8008c04:	20004f28 	.word	0x20004f28
 8008c08:	e000ed04 	.word	0xe000ed04

08008c0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008c14:	2300      	movs	r3, #0
 8008c16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d018      	beq.n	8008c50 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008c1e:	4b14      	ldr	r3, [pc, #80]	@ (8008c70 <vTaskDelay+0x64>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00b      	beq.n	8008c3e <vTaskDelay+0x32>
	__asm volatile
 8008c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c2a:	f383 8811 	msr	BASEPRI, r3
 8008c2e:	f3bf 8f6f 	isb	sy
 8008c32:	f3bf 8f4f 	dsb	sy
 8008c36:	60bb      	str	r3, [r7, #8]
}
 8008c38:	bf00      	nop
 8008c3a:	bf00      	nop
 8008c3c:	e7fd      	b.n	8008c3a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008c3e:	f000 f883 	bl	8008d48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008c42:	2100      	movs	r1, #0
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f000 fd1b 	bl	8009680 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008c4a:	f000 f88b 	bl	8008d64 <xTaskResumeAll>
 8008c4e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d107      	bne.n	8008c66 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008c56:	4b07      	ldr	r3, [pc, #28]	@ (8008c74 <vTaskDelay+0x68>)
 8008c58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c5c:	601a      	str	r2, [r3, #0]
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c66:	bf00      	nop
 8008c68:	3710      	adds	r7, #16
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	bf00      	nop
 8008c70:	20005420 	.word	0x20005420
 8008c74:	e000ed04 	.word	0xe000ed04

08008c78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b08a      	sub	sp, #40	@ 0x28
 8008c7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008c82:	2300      	movs	r3, #0
 8008c84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008c86:	463a      	mov	r2, r7
 8008c88:	1d39      	adds	r1, r7, #4
 8008c8a:	f107 0308 	add.w	r3, r7, #8
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f7ff f834 	bl	8007cfc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008c94:	6839      	ldr	r1, [r7, #0]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	9202      	str	r2, [sp, #8]
 8008c9c:	9301      	str	r3, [sp, #4]
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	9300      	str	r3, [sp, #0]
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	460a      	mov	r2, r1
 8008ca6:	4922      	ldr	r1, [pc, #136]	@ (8008d30 <vTaskStartScheduler+0xb8>)
 8008ca8:	4822      	ldr	r0, [pc, #136]	@ (8008d34 <vTaskStartScheduler+0xbc>)
 8008caa:	f7ff fe09 	bl	80088c0 <xTaskCreateStatic>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	4a21      	ldr	r2, [pc, #132]	@ (8008d38 <vTaskStartScheduler+0xc0>)
 8008cb2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008cb4:	4b20      	ldr	r3, [pc, #128]	@ (8008d38 <vTaskStartScheduler+0xc0>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d002      	beq.n	8008cc2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	617b      	str	r3, [r7, #20]
 8008cc0:	e001      	b.n	8008cc6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d102      	bne.n	8008cd2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008ccc:	f000 fd2c 	bl	8009728 <xTimerCreateTimerTask>
 8008cd0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d116      	bne.n	8008d06 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cdc:	f383 8811 	msr	BASEPRI, r3
 8008ce0:	f3bf 8f6f 	isb	sy
 8008ce4:	f3bf 8f4f 	dsb	sy
 8008ce8:	613b      	str	r3, [r7, #16]
}
 8008cea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008cec:	4b13      	ldr	r3, [pc, #76]	@ (8008d3c <vTaskStartScheduler+0xc4>)
 8008cee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008cf2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008cf4:	4b12      	ldr	r3, [pc, #72]	@ (8008d40 <vTaskStartScheduler+0xc8>)
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008cfa:	4b12      	ldr	r3, [pc, #72]	@ (8008d44 <vTaskStartScheduler+0xcc>)
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d00:	f001 f8f6 	bl	8009ef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d04:	e00f      	b.n	8008d26 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008d0c:	d10b      	bne.n	8008d26 <vTaskStartScheduler+0xae>
	__asm volatile
 8008d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d12:	f383 8811 	msr	BASEPRI, r3
 8008d16:	f3bf 8f6f 	isb	sy
 8008d1a:	f3bf 8f4f 	dsb	sy
 8008d1e:	60fb      	str	r3, [r7, #12]
}
 8008d20:	bf00      	nop
 8008d22:	bf00      	nop
 8008d24:	e7fd      	b.n	8008d22 <vTaskStartScheduler+0xaa>
}
 8008d26:	bf00      	nop
 8008d28:	3718      	adds	r7, #24
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	08017fcc 	.word	0x08017fcc
 8008d34:	080093b9 	.word	0x080093b9
 8008d38:	2000541c 	.word	0x2000541c
 8008d3c:	20005418 	.word	0x20005418
 8008d40:	20005404 	.word	0x20005404
 8008d44:	200053fc 	.word	0x200053fc

08008d48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008d48:	b480      	push	{r7}
 8008d4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008d4c:	4b04      	ldr	r3, [pc, #16]	@ (8008d60 <vTaskSuspendAll+0x18>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	3301      	adds	r3, #1
 8008d52:	4a03      	ldr	r2, [pc, #12]	@ (8008d60 <vTaskSuspendAll+0x18>)
 8008d54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008d56:	bf00      	nop
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr
 8008d60:	20005420 	.word	0x20005420

08008d64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008d72:	4b42      	ldr	r3, [pc, #264]	@ (8008e7c <xTaskResumeAll+0x118>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d10b      	bne.n	8008d92 <xTaskResumeAll+0x2e>
	__asm volatile
 8008d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d7e:	f383 8811 	msr	BASEPRI, r3
 8008d82:	f3bf 8f6f 	isb	sy
 8008d86:	f3bf 8f4f 	dsb	sy
 8008d8a:	603b      	str	r3, [r7, #0]
}
 8008d8c:	bf00      	nop
 8008d8e:	bf00      	nop
 8008d90:	e7fd      	b.n	8008d8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008d92:	f001 f951 	bl	800a038 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008d96:	4b39      	ldr	r3, [pc, #228]	@ (8008e7c <xTaskResumeAll+0x118>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	4a37      	ldr	r2, [pc, #220]	@ (8008e7c <xTaskResumeAll+0x118>)
 8008d9e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008da0:	4b36      	ldr	r3, [pc, #216]	@ (8008e7c <xTaskResumeAll+0x118>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d162      	bne.n	8008e6e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008da8:	4b35      	ldr	r3, [pc, #212]	@ (8008e80 <xTaskResumeAll+0x11c>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d05e      	beq.n	8008e6e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008db0:	e02f      	b.n	8008e12 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008db2:	4b34      	ldr	r3, [pc, #208]	@ (8008e84 <xTaskResumeAll+0x120>)
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	3318      	adds	r3, #24
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7ff f85a 	bl	8007e78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	3304      	adds	r3, #4
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7ff f855 	bl	8007e78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dd2:	4b2d      	ldr	r3, [pc, #180]	@ (8008e88 <xTaskResumeAll+0x124>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d903      	bls.n	8008de2 <xTaskResumeAll+0x7e>
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dde:	4a2a      	ldr	r2, [pc, #168]	@ (8008e88 <xTaskResumeAll+0x124>)
 8008de0:	6013      	str	r3, [r2, #0]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008de6:	4613      	mov	r3, r2
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	4413      	add	r3, r2
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	4a27      	ldr	r2, [pc, #156]	@ (8008e8c <xTaskResumeAll+0x128>)
 8008df0:	441a      	add	r2, r3
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	3304      	adds	r3, #4
 8008df6:	4619      	mov	r1, r3
 8008df8:	4610      	mov	r0, r2
 8008dfa:	f7fe ffe0 	bl	8007dbe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e02:	4b23      	ldr	r3, [pc, #140]	@ (8008e90 <xTaskResumeAll+0x12c>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d302      	bcc.n	8008e12 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008e0c:	4b21      	ldr	r3, [pc, #132]	@ (8008e94 <xTaskResumeAll+0x130>)
 8008e0e:	2201      	movs	r2, #1
 8008e10:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e12:	4b1c      	ldr	r3, [pc, #112]	@ (8008e84 <xTaskResumeAll+0x120>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d1cb      	bne.n	8008db2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d001      	beq.n	8008e24 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008e20:	f000 fb80 	bl	8009524 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008e24:	4b1c      	ldr	r3, [pc, #112]	@ (8008e98 <xTaskResumeAll+0x134>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d010      	beq.n	8008e52 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008e30:	f000 f846 	bl	8008ec0 <xTaskIncrementTick>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d002      	beq.n	8008e40 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008e3a:	4b16      	ldr	r3, [pc, #88]	@ (8008e94 <xTaskResumeAll+0x130>)
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	3b01      	subs	r3, #1
 8008e44:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d1f1      	bne.n	8008e30 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008e4c:	4b12      	ldr	r3, [pc, #72]	@ (8008e98 <xTaskResumeAll+0x134>)
 8008e4e:	2200      	movs	r2, #0
 8008e50:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008e52:	4b10      	ldr	r3, [pc, #64]	@ (8008e94 <xTaskResumeAll+0x130>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d009      	beq.n	8008e6e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8008e9c <xTaskResumeAll+0x138>)
 8008e60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e64:	601a      	str	r2, [r3, #0]
 8008e66:	f3bf 8f4f 	dsb	sy
 8008e6a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e6e:	f001 f915 	bl	800a09c <vPortExitCritical>

	return xAlreadyYielded;
 8008e72:	68bb      	ldr	r3, [r7, #8]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3710      	adds	r7, #16
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}
 8008e7c:	20005420 	.word	0x20005420
 8008e80:	200053f8 	.word	0x200053f8
 8008e84:	200053b8 	.word	0x200053b8
 8008e88:	20005400 	.word	0x20005400
 8008e8c:	20004f28 	.word	0x20004f28
 8008e90:	20004f24 	.word	0x20004f24
 8008e94:	2000540c 	.word	0x2000540c
 8008e98:	20005408 	.word	0x20005408
 8008e9c:	e000ed04 	.word	0xe000ed04

08008ea0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008ea6:	4b05      	ldr	r3, [pc, #20]	@ (8008ebc <xTaskGetTickCount+0x1c>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008eac:	687b      	ldr	r3, [r7, #4]
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	370c      	adds	r7, #12
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	200053fc 	.word	0x200053fc

08008ec0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b086      	sub	sp, #24
 8008ec4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008eca:	4b4f      	ldr	r3, [pc, #316]	@ (8009008 <xTaskIncrementTick+0x148>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	f040 8090 	bne.w	8008ff4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ed4:	4b4d      	ldr	r3, [pc, #308]	@ (800900c <xTaskIncrementTick+0x14c>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008edc:	4a4b      	ldr	r2, [pc, #300]	@ (800900c <xTaskIncrementTick+0x14c>)
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d121      	bne.n	8008f2c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ee8:	4b49      	ldr	r3, [pc, #292]	@ (8009010 <xTaskIncrementTick+0x150>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00b      	beq.n	8008f0a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ef6:	f383 8811 	msr	BASEPRI, r3
 8008efa:	f3bf 8f6f 	isb	sy
 8008efe:	f3bf 8f4f 	dsb	sy
 8008f02:	603b      	str	r3, [r7, #0]
}
 8008f04:	bf00      	nop
 8008f06:	bf00      	nop
 8008f08:	e7fd      	b.n	8008f06 <xTaskIncrementTick+0x46>
 8008f0a:	4b41      	ldr	r3, [pc, #260]	@ (8009010 <xTaskIncrementTick+0x150>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	60fb      	str	r3, [r7, #12]
 8008f10:	4b40      	ldr	r3, [pc, #256]	@ (8009014 <xTaskIncrementTick+0x154>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a3e      	ldr	r2, [pc, #248]	@ (8009010 <xTaskIncrementTick+0x150>)
 8008f16:	6013      	str	r3, [r2, #0]
 8008f18:	4a3e      	ldr	r2, [pc, #248]	@ (8009014 <xTaskIncrementTick+0x154>)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6013      	str	r3, [r2, #0]
 8008f1e:	4b3e      	ldr	r3, [pc, #248]	@ (8009018 <xTaskIncrementTick+0x158>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	3301      	adds	r3, #1
 8008f24:	4a3c      	ldr	r2, [pc, #240]	@ (8009018 <xTaskIncrementTick+0x158>)
 8008f26:	6013      	str	r3, [r2, #0]
 8008f28:	f000 fafc 	bl	8009524 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f2c:	4b3b      	ldr	r3, [pc, #236]	@ (800901c <xTaskIncrementTick+0x15c>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	693a      	ldr	r2, [r7, #16]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d349      	bcc.n	8008fca <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f36:	4b36      	ldr	r3, [pc, #216]	@ (8009010 <xTaskIncrementTick+0x150>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d104      	bne.n	8008f4a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f40:	4b36      	ldr	r3, [pc, #216]	@ (800901c <xTaskIncrementTick+0x15c>)
 8008f42:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f46:	601a      	str	r2, [r3, #0]
					break;
 8008f48:	e03f      	b.n	8008fca <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f4a:	4b31      	ldr	r3, [pc, #196]	@ (8009010 <xTaskIncrementTick+0x150>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008f5a:	693a      	ldr	r2, [r7, #16]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d203      	bcs.n	8008f6a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008f62:	4a2e      	ldr	r2, [pc, #184]	@ (800901c <xTaskIncrementTick+0x15c>)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008f68:	e02f      	b.n	8008fca <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	3304      	adds	r3, #4
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7fe ff82 	bl	8007e78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d004      	beq.n	8008f86 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	3318      	adds	r3, #24
 8008f80:	4618      	mov	r0, r3
 8008f82:	f7fe ff79 	bl	8007e78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f8a:	4b25      	ldr	r3, [pc, #148]	@ (8009020 <xTaskIncrementTick+0x160>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d903      	bls.n	8008f9a <xTaskIncrementTick+0xda>
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f96:	4a22      	ldr	r2, [pc, #136]	@ (8009020 <xTaskIncrementTick+0x160>)
 8008f98:	6013      	str	r3, [r2, #0]
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	4413      	add	r3, r2
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	4a1f      	ldr	r2, [pc, #124]	@ (8009024 <xTaskIncrementTick+0x164>)
 8008fa8:	441a      	add	r2, r3
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	3304      	adds	r3, #4
 8008fae:	4619      	mov	r1, r3
 8008fb0:	4610      	mov	r0, r2
 8008fb2:	f7fe ff04 	bl	8007dbe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fba:	4b1b      	ldr	r3, [pc, #108]	@ (8009028 <xTaskIncrementTick+0x168>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d3b8      	bcc.n	8008f36 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fc8:	e7b5      	b.n	8008f36 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008fca:	4b17      	ldr	r3, [pc, #92]	@ (8009028 <xTaskIncrementTick+0x168>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fd0:	4914      	ldr	r1, [pc, #80]	@ (8009024 <xTaskIncrementTick+0x164>)
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	4413      	add	r3, r2
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	440b      	add	r3, r1
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d901      	bls.n	8008fe6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008fe6:	4b11      	ldr	r3, [pc, #68]	@ (800902c <xTaskIncrementTick+0x16c>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d007      	beq.n	8008ffe <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	617b      	str	r3, [r7, #20]
 8008ff2:	e004      	b.n	8008ffe <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8009030 <xTaskIncrementTick+0x170>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	4a0d      	ldr	r2, [pc, #52]	@ (8009030 <xTaskIncrementTick+0x170>)
 8008ffc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008ffe:	697b      	ldr	r3, [r7, #20]
}
 8009000:	4618      	mov	r0, r3
 8009002:	3718      	adds	r7, #24
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	20005420 	.word	0x20005420
 800900c:	200053fc 	.word	0x200053fc
 8009010:	200053b0 	.word	0x200053b0
 8009014:	200053b4 	.word	0x200053b4
 8009018:	20005410 	.word	0x20005410
 800901c:	20005418 	.word	0x20005418
 8009020:	20005400 	.word	0x20005400
 8009024:	20004f28 	.word	0x20004f28
 8009028:	20004f24 	.word	0x20004f24
 800902c:	2000540c 	.word	0x2000540c
 8009030:	20005408 	.word	0x20005408

08009034 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009034:	b480      	push	{r7}
 8009036:	b085      	sub	sp, #20
 8009038:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800903a:	4b28      	ldr	r3, [pc, #160]	@ (80090dc <vTaskSwitchContext+0xa8>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d003      	beq.n	800904a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009042:	4b27      	ldr	r3, [pc, #156]	@ (80090e0 <vTaskSwitchContext+0xac>)
 8009044:	2201      	movs	r2, #1
 8009046:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009048:	e042      	b.n	80090d0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800904a:	4b25      	ldr	r3, [pc, #148]	@ (80090e0 <vTaskSwitchContext+0xac>)
 800904c:	2200      	movs	r2, #0
 800904e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009050:	4b24      	ldr	r3, [pc, #144]	@ (80090e4 <vTaskSwitchContext+0xb0>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	60fb      	str	r3, [r7, #12]
 8009056:	e011      	b.n	800907c <vTaskSwitchContext+0x48>
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d10b      	bne.n	8009076 <vTaskSwitchContext+0x42>
	__asm volatile
 800905e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009062:	f383 8811 	msr	BASEPRI, r3
 8009066:	f3bf 8f6f 	isb	sy
 800906a:	f3bf 8f4f 	dsb	sy
 800906e:	607b      	str	r3, [r7, #4]
}
 8009070:	bf00      	nop
 8009072:	bf00      	nop
 8009074:	e7fd      	b.n	8009072 <vTaskSwitchContext+0x3e>
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	3b01      	subs	r3, #1
 800907a:	60fb      	str	r3, [r7, #12]
 800907c:	491a      	ldr	r1, [pc, #104]	@ (80090e8 <vTaskSwitchContext+0xb4>)
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	4613      	mov	r3, r2
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	4413      	add	r3, r2
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	440b      	add	r3, r1
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d0e3      	beq.n	8009058 <vTaskSwitchContext+0x24>
 8009090:	68fa      	ldr	r2, [r7, #12]
 8009092:	4613      	mov	r3, r2
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	4413      	add	r3, r2
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	4a13      	ldr	r2, [pc, #76]	@ (80090e8 <vTaskSwitchContext+0xb4>)
 800909c:	4413      	add	r3, r2
 800909e:	60bb      	str	r3, [r7, #8]
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	685a      	ldr	r2, [r3, #4]
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	605a      	str	r2, [r3, #4]
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	685a      	ldr	r2, [r3, #4]
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	3308      	adds	r3, #8
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d104      	bne.n	80090c0 <vTaskSwitchContext+0x8c>
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	685a      	ldr	r2, [r3, #4]
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	605a      	str	r2, [r3, #4]
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	68db      	ldr	r3, [r3, #12]
 80090c6:	4a09      	ldr	r2, [pc, #36]	@ (80090ec <vTaskSwitchContext+0xb8>)
 80090c8:	6013      	str	r3, [r2, #0]
 80090ca:	4a06      	ldr	r2, [pc, #24]	@ (80090e4 <vTaskSwitchContext+0xb0>)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6013      	str	r3, [r2, #0]
}
 80090d0:	bf00      	nop
 80090d2:	3714      	adds	r7, #20
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr
 80090dc:	20005420 	.word	0x20005420
 80090e0:	2000540c 	.word	0x2000540c
 80090e4:	20005400 	.word	0x20005400
 80090e8:	20004f28 	.word	0x20004f28
 80090ec:	20004f24 	.word	0x20004f24

080090f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d10b      	bne.n	8009118 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009104:	f383 8811 	msr	BASEPRI, r3
 8009108:	f3bf 8f6f 	isb	sy
 800910c:	f3bf 8f4f 	dsb	sy
 8009110:	60fb      	str	r3, [r7, #12]
}
 8009112:	bf00      	nop
 8009114:	bf00      	nop
 8009116:	e7fd      	b.n	8009114 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009118:	4b07      	ldr	r3, [pc, #28]	@ (8009138 <vTaskPlaceOnEventList+0x48>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	3318      	adds	r3, #24
 800911e:	4619      	mov	r1, r3
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f7fe fe70 	bl	8007e06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009126:	2101      	movs	r1, #1
 8009128:	6838      	ldr	r0, [r7, #0]
 800912a:	f000 faa9 	bl	8009680 <prvAddCurrentTaskToDelayedList>
}
 800912e:	bf00      	nop
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	20004f24 	.word	0x20004f24

0800913c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800913c:	b580      	push	{r7, lr}
 800913e:	b086      	sub	sp, #24
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d10b      	bne.n	8009166 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800914e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009152:	f383 8811 	msr	BASEPRI, r3
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	617b      	str	r3, [r7, #20]
}
 8009160:	bf00      	nop
 8009162:	bf00      	nop
 8009164:	e7fd      	b.n	8009162 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009166:	4b0a      	ldr	r3, [pc, #40]	@ (8009190 <vTaskPlaceOnEventListRestricted+0x54>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	3318      	adds	r3, #24
 800916c:	4619      	mov	r1, r3
 800916e:	68f8      	ldr	r0, [r7, #12]
 8009170:	f7fe fe25 	bl	8007dbe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d002      	beq.n	8009180 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800917a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800917e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009180:	6879      	ldr	r1, [r7, #4]
 8009182:	68b8      	ldr	r0, [r7, #8]
 8009184:	f000 fa7c 	bl	8009680 <prvAddCurrentTaskToDelayedList>
	}
 8009188:	bf00      	nop
 800918a:	3718      	adds	r7, #24
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}
 8009190:	20004f24 	.word	0x20004f24

08009194 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b086      	sub	sp, #24
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d10b      	bne.n	80091c2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80091aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ae:	f383 8811 	msr	BASEPRI, r3
 80091b2:	f3bf 8f6f 	isb	sy
 80091b6:	f3bf 8f4f 	dsb	sy
 80091ba:	60fb      	str	r3, [r7, #12]
}
 80091bc:	bf00      	nop
 80091be:	bf00      	nop
 80091c0:	e7fd      	b.n	80091be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	3318      	adds	r3, #24
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7fe fe56 	bl	8007e78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091cc:	4b1d      	ldr	r3, [pc, #116]	@ (8009244 <xTaskRemoveFromEventList+0xb0>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d11d      	bne.n	8009210 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	3304      	adds	r3, #4
 80091d8:	4618      	mov	r0, r3
 80091da:	f7fe fe4d 	bl	8007e78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091e2:	4b19      	ldr	r3, [pc, #100]	@ (8009248 <xTaskRemoveFromEventList+0xb4>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d903      	bls.n	80091f2 <xTaskRemoveFromEventList+0x5e>
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ee:	4a16      	ldr	r2, [pc, #88]	@ (8009248 <xTaskRemoveFromEventList+0xb4>)
 80091f0:	6013      	str	r3, [r2, #0]
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091f6:	4613      	mov	r3, r2
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	4413      	add	r3, r2
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	4a13      	ldr	r2, [pc, #76]	@ (800924c <xTaskRemoveFromEventList+0xb8>)
 8009200:	441a      	add	r2, r3
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	3304      	adds	r3, #4
 8009206:	4619      	mov	r1, r3
 8009208:	4610      	mov	r0, r2
 800920a:	f7fe fdd8 	bl	8007dbe <vListInsertEnd>
 800920e:	e005      	b.n	800921c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	3318      	adds	r3, #24
 8009214:	4619      	mov	r1, r3
 8009216:	480e      	ldr	r0, [pc, #56]	@ (8009250 <xTaskRemoveFromEventList+0xbc>)
 8009218:	f7fe fdd1 	bl	8007dbe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009220:	4b0c      	ldr	r3, [pc, #48]	@ (8009254 <xTaskRemoveFromEventList+0xc0>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009226:	429a      	cmp	r2, r3
 8009228:	d905      	bls.n	8009236 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800922a:	2301      	movs	r3, #1
 800922c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800922e:	4b0a      	ldr	r3, [pc, #40]	@ (8009258 <xTaskRemoveFromEventList+0xc4>)
 8009230:	2201      	movs	r2, #1
 8009232:	601a      	str	r2, [r3, #0]
 8009234:	e001      	b.n	800923a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009236:	2300      	movs	r3, #0
 8009238:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800923a:	697b      	ldr	r3, [r7, #20]
}
 800923c:	4618      	mov	r0, r3
 800923e:	3718      	adds	r7, #24
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}
 8009244:	20005420 	.word	0x20005420
 8009248:	20005400 	.word	0x20005400
 800924c:	20004f28 	.word	0x20004f28
 8009250:	200053b8 	.word	0x200053b8
 8009254:	20004f24 	.word	0x20004f24
 8009258:	2000540c 	.word	0x2000540c

0800925c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d10b      	bne.n	8009282 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800926a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800926e:	f383 8811 	msr	BASEPRI, r3
 8009272:	f3bf 8f6f 	isb	sy
 8009276:	f3bf 8f4f 	dsb	sy
 800927a:	60fb      	str	r3, [r7, #12]
}
 800927c:	bf00      	nop
 800927e:	bf00      	nop
 8009280:	e7fd      	b.n	800927e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8009282:	f000 fed9 	bl	800a038 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009286:	4b07      	ldr	r3, [pc, #28]	@ (80092a4 <vTaskSetTimeOutState+0x48>)
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800928e:	4b06      	ldr	r3, [pc, #24]	@ (80092a8 <vTaskSetTimeOutState+0x4c>)
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8009296:	f000 ff01 	bl	800a09c <vPortExitCritical>
}
 800929a:	bf00      	nop
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	20005410 	.word	0x20005410
 80092a8:	200053fc 	.word	0x200053fc

080092ac <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80092b4:	4b06      	ldr	r3, [pc, #24]	@ (80092d0 <vTaskInternalSetTimeOutState+0x24>)
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80092bc:	4b05      	ldr	r3, [pc, #20]	@ (80092d4 <vTaskInternalSetTimeOutState+0x28>)
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	605a      	str	r2, [r3, #4]
}
 80092c4:	bf00      	nop
 80092c6:	370c      	adds	r7, #12
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr
 80092d0:	20005410 	.word	0x20005410
 80092d4:	200053fc 	.word	0x200053fc

080092d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b088      	sub	sp, #32
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d10b      	bne.n	8009300 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80092e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ec:	f383 8811 	msr	BASEPRI, r3
 80092f0:	f3bf 8f6f 	isb	sy
 80092f4:	f3bf 8f4f 	dsb	sy
 80092f8:	613b      	str	r3, [r7, #16]
}
 80092fa:	bf00      	nop
 80092fc:	bf00      	nop
 80092fe:	e7fd      	b.n	80092fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d10b      	bne.n	800931e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800930a:	f383 8811 	msr	BASEPRI, r3
 800930e:	f3bf 8f6f 	isb	sy
 8009312:	f3bf 8f4f 	dsb	sy
 8009316:	60fb      	str	r3, [r7, #12]
}
 8009318:	bf00      	nop
 800931a:	bf00      	nop
 800931c:	e7fd      	b.n	800931a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800931e:	f000 fe8b 	bl	800a038 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009322:	4b1d      	ldr	r3, [pc, #116]	@ (8009398 <xTaskCheckForTimeOut+0xc0>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	69ba      	ldr	r2, [r7, #24]
 800932e:	1ad3      	subs	r3, r2, r3
 8009330:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800933a:	d102      	bne.n	8009342 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800933c:	2300      	movs	r3, #0
 800933e:	61fb      	str	r3, [r7, #28]
 8009340:	e023      	b.n	800938a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	4b15      	ldr	r3, [pc, #84]	@ (800939c <xTaskCheckForTimeOut+0xc4>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	429a      	cmp	r2, r3
 800934c:	d007      	beq.n	800935e <xTaskCheckForTimeOut+0x86>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	69ba      	ldr	r2, [r7, #24]
 8009354:	429a      	cmp	r2, r3
 8009356:	d302      	bcc.n	800935e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009358:	2301      	movs	r3, #1
 800935a:	61fb      	str	r3, [r7, #28]
 800935c:	e015      	b.n	800938a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	697a      	ldr	r2, [r7, #20]
 8009364:	429a      	cmp	r2, r3
 8009366:	d20b      	bcs.n	8009380 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	1ad2      	subs	r2, r2, r3
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f7ff ff99 	bl	80092ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800937a:	2300      	movs	r3, #0
 800937c:	61fb      	str	r3, [r7, #28]
 800937e:	e004      	b.n	800938a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	2200      	movs	r2, #0
 8009384:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009386:	2301      	movs	r3, #1
 8009388:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800938a:	f000 fe87 	bl	800a09c <vPortExitCritical>

	return xReturn;
 800938e:	69fb      	ldr	r3, [r7, #28]
}
 8009390:	4618      	mov	r0, r3
 8009392:	3720      	adds	r7, #32
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	200053fc 	.word	0x200053fc
 800939c:	20005410 	.word	0x20005410

080093a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80093a0:	b480      	push	{r7}
 80093a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80093a4:	4b03      	ldr	r3, [pc, #12]	@ (80093b4 <vTaskMissedYield+0x14>)
 80093a6:	2201      	movs	r2, #1
 80093a8:	601a      	str	r2, [r3, #0]
}
 80093aa:	bf00      	nop
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr
 80093b4:	2000540c 	.word	0x2000540c

080093b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80093c0:	f000 f852 	bl	8009468 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80093c4:	4b06      	ldr	r3, [pc, #24]	@ (80093e0 <prvIdleTask+0x28>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d9f9      	bls.n	80093c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80093cc:	4b05      	ldr	r3, [pc, #20]	@ (80093e4 <prvIdleTask+0x2c>)
 80093ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093d2:	601a      	str	r2, [r3, #0]
 80093d4:	f3bf 8f4f 	dsb	sy
 80093d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80093dc:	e7f0      	b.n	80093c0 <prvIdleTask+0x8>
 80093de:	bf00      	nop
 80093e0:	20004f28 	.word	0x20004f28
 80093e4:	e000ed04 	.word	0xe000ed04

080093e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80093ee:	2300      	movs	r3, #0
 80093f0:	607b      	str	r3, [r7, #4]
 80093f2:	e00c      	b.n	800940e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	4613      	mov	r3, r2
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	4413      	add	r3, r2
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	4a12      	ldr	r2, [pc, #72]	@ (8009448 <prvInitialiseTaskLists+0x60>)
 8009400:	4413      	add	r3, r2
 8009402:	4618      	mov	r0, r3
 8009404:	f7fe fcae 	bl	8007d64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	3301      	adds	r3, #1
 800940c:	607b      	str	r3, [r7, #4]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2b37      	cmp	r3, #55	@ 0x37
 8009412:	d9ef      	bls.n	80093f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009414:	480d      	ldr	r0, [pc, #52]	@ (800944c <prvInitialiseTaskLists+0x64>)
 8009416:	f7fe fca5 	bl	8007d64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800941a:	480d      	ldr	r0, [pc, #52]	@ (8009450 <prvInitialiseTaskLists+0x68>)
 800941c:	f7fe fca2 	bl	8007d64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009420:	480c      	ldr	r0, [pc, #48]	@ (8009454 <prvInitialiseTaskLists+0x6c>)
 8009422:	f7fe fc9f 	bl	8007d64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009426:	480c      	ldr	r0, [pc, #48]	@ (8009458 <prvInitialiseTaskLists+0x70>)
 8009428:	f7fe fc9c 	bl	8007d64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800942c:	480b      	ldr	r0, [pc, #44]	@ (800945c <prvInitialiseTaskLists+0x74>)
 800942e:	f7fe fc99 	bl	8007d64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009432:	4b0b      	ldr	r3, [pc, #44]	@ (8009460 <prvInitialiseTaskLists+0x78>)
 8009434:	4a05      	ldr	r2, [pc, #20]	@ (800944c <prvInitialiseTaskLists+0x64>)
 8009436:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009438:	4b0a      	ldr	r3, [pc, #40]	@ (8009464 <prvInitialiseTaskLists+0x7c>)
 800943a:	4a05      	ldr	r2, [pc, #20]	@ (8009450 <prvInitialiseTaskLists+0x68>)
 800943c:	601a      	str	r2, [r3, #0]
}
 800943e:	bf00      	nop
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	20004f28 	.word	0x20004f28
 800944c:	20005388 	.word	0x20005388
 8009450:	2000539c 	.word	0x2000539c
 8009454:	200053b8 	.word	0x200053b8
 8009458:	200053cc 	.word	0x200053cc
 800945c:	200053e4 	.word	0x200053e4
 8009460:	200053b0 	.word	0x200053b0
 8009464:	200053b4 	.word	0x200053b4

08009468 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800946e:	e019      	b.n	80094a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009470:	f000 fde2 	bl	800a038 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009474:	4b10      	ldr	r3, [pc, #64]	@ (80094b8 <prvCheckTasksWaitingTermination+0x50>)
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	3304      	adds	r3, #4
 8009480:	4618      	mov	r0, r3
 8009482:	f7fe fcf9 	bl	8007e78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009486:	4b0d      	ldr	r3, [pc, #52]	@ (80094bc <prvCheckTasksWaitingTermination+0x54>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	3b01      	subs	r3, #1
 800948c:	4a0b      	ldr	r2, [pc, #44]	@ (80094bc <prvCheckTasksWaitingTermination+0x54>)
 800948e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009490:	4b0b      	ldr	r3, [pc, #44]	@ (80094c0 <prvCheckTasksWaitingTermination+0x58>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	3b01      	subs	r3, #1
 8009496:	4a0a      	ldr	r2, [pc, #40]	@ (80094c0 <prvCheckTasksWaitingTermination+0x58>)
 8009498:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800949a:	f000 fdff 	bl	800a09c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 f810 	bl	80094c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094a4:	4b06      	ldr	r3, [pc, #24]	@ (80094c0 <prvCheckTasksWaitingTermination+0x58>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d1e1      	bne.n	8009470 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80094ac:	bf00      	nop
 80094ae:	bf00      	nop
 80094b0:	3708      	adds	r7, #8
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	200053cc 	.word	0x200053cc
 80094bc:	200053f8 	.word	0x200053f8
 80094c0:	200053e0 	.word	0x200053e0

080094c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d108      	bne.n	80094e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094da:	4618      	mov	r0, r3
 80094dc:	f000 ff9c 	bl	800a418 <vPortFree>
				vPortFree( pxTCB );
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 ff99 	bl	800a418 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80094e6:	e019      	b.n	800951c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d103      	bne.n	80094fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 ff90 	bl	800a418 <vPortFree>
	}
 80094f8:	e010      	b.n	800951c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009500:	2b02      	cmp	r3, #2
 8009502:	d00b      	beq.n	800951c <prvDeleteTCB+0x58>
	__asm volatile
 8009504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009508:	f383 8811 	msr	BASEPRI, r3
 800950c:	f3bf 8f6f 	isb	sy
 8009510:	f3bf 8f4f 	dsb	sy
 8009514:	60fb      	str	r3, [r7, #12]
}
 8009516:	bf00      	nop
 8009518:	bf00      	nop
 800951a:	e7fd      	b.n	8009518 <prvDeleteTCB+0x54>
	}
 800951c:	bf00      	nop
 800951e:	3710      	adds	r7, #16
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800952a:	4b0c      	ldr	r3, [pc, #48]	@ (800955c <prvResetNextTaskUnblockTime+0x38>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d104      	bne.n	800953e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009534:	4b0a      	ldr	r3, [pc, #40]	@ (8009560 <prvResetNextTaskUnblockTime+0x3c>)
 8009536:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800953a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800953c:	e008      	b.n	8009550 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800953e:	4b07      	ldr	r3, [pc, #28]	@ (800955c <prvResetNextTaskUnblockTime+0x38>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	4a04      	ldr	r2, [pc, #16]	@ (8009560 <prvResetNextTaskUnblockTime+0x3c>)
 800954e:	6013      	str	r3, [r2, #0]
}
 8009550:	bf00      	nop
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr
 800955c:	200053b0 	.word	0x200053b0
 8009560:	20005418 	.word	0x20005418

08009564 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800956a:	4b0b      	ldr	r3, [pc, #44]	@ (8009598 <xTaskGetSchedulerState+0x34>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d102      	bne.n	8009578 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009572:	2301      	movs	r3, #1
 8009574:	607b      	str	r3, [r7, #4]
 8009576:	e008      	b.n	800958a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009578:	4b08      	ldr	r3, [pc, #32]	@ (800959c <xTaskGetSchedulerState+0x38>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d102      	bne.n	8009586 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009580:	2302      	movs	r3, #2
 8009582:	607b      	str	r3, [r7, #4]
 8009584:	e001      	b.n	800958a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009586:	2300      	movs	r3, #0
 8009588:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800958a:	687b      	ldr	r3, [r7, #4]
	}
 800958c:	4618      	mov	r0, r3
 800958e:	370c      	adds	r7, #12
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr
 8009598:	20005404 	.word	0x20005404
 800959c:	20005420 	.word	0x20005420

080095a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b086      	sub	sp, #24
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80095ac:	2300      	movs	r3, #0
 80095ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d058      	beq.n	8009668 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80095b6:	4b2f      	ldr	r3, [pc, #188]	@ (8009674 <xTaskPriorityDisinherit+0xd4>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	693a      	ldr	r2, [r7, #16]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d00b      	beq.n	80095d8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80095c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095c4:	f383 8811 	msr	BASEPRI, r3
 80095c8:	f3bf 8f6f 	isb	sy
 80095cc:	f3bf 8f4f 	dsb	sy
 80095d0:	60fb      	str	r3, [r7, #12]
}
 80095d2:	bf00      	nop
 80095d4:	bf00      	nop
 80095d6:	e7fd      	b.n	80095d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d10b      	bne.n	80095f8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80095e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095e4:	f383 8811 	msr	BASEPRI, r3
 80095e8:	f3bf 8f6f 	isb	sy
 80095ec:	f3bf 8f4f 	dsb	sy
 80095f0:	60bb      	str	r3, [r7, #8]
}
 80095f2:	bf00      	nop
 80095f4:	bf00      	nop
 80095f6:	e7fd      	b.n	80095f4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095fc:	1e5a      	subs	r2, r3, #1
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800960a:	429a      	cmp	r2, r3
 800960c:	d02c      	beq.n	8009668 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009612:	2b00      	cmp	r3, #0
 8009614:	d128      	bne.n	8009668 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	3304      	adds	r3, #4
 800961a:	4618      	mov	r0, r3
 800961c:	f7fe fc2c 	bl	8007e78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800962c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009638:	4b0f      	ldr	r3, [pc, #60]	@ (8009678 <xTaskPriorityDisinherit+0xd8>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	429a      	cmp	r2, r3
 800963e:	d903      	bls.n	8009648 <xTaskPriorityDisinherit+0xa8>
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009644:	4a0c      	ldr	r2, [pc, #48]	@ (8009678 <xTaskPriorityDisinherit+0xd8>)
 8009646:	6013      	str	r3, [r2, #0]
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800964c:	4613      	mov	r3, r2
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	4413      	add	r3, r2
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	4a09      	ldr	r2, [pc, #36]	@ (800967c <xTaskPriorityDisinherit+0xdc>)
 8009656:	441a      	add	r2, r3
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	3304      	adds	r3, #4
 800965c:	4619      	mov	r1, r3
 800965e:	4610      	mov	r0, r2
 8009660:	f7fe fbad 	bl	8007dbe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009664:	2301      	movs	r3, #1
 8009666:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009668:	697b      	ldr	r3, [r7, #20]
	}
 800966a:	4618      	mov	r0, r3
 800966c:	3718      	adds	r7, #24
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	20004f24 	.word	0x20004f24
 8009678:	20005400 	.word	0x20005400
 800967c:	20004f28 	.word	0x20004f28

08009680 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800968a:	4b21      	ldr	r3, [pc, #132]	@ (8009710 <prvAddCurrentTaskToDelayedList+0x90>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009690:	4b20      	ldr	r3, [pc, #128]	@ (8009714 <prvAddCurrentTaskToDelayedList+0x94>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	3304      	adds	r3, #4
 8009696:	4618      	mov	r0, r3
 8009698:	f7fe fbee 	bl	8007e78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096a2:	d10a      	bne.n	80096ba <prvAddCurrentTaskToDelayedList+0x3a>
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d007      	beq.n	80096ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096aa:	4b1a      	ldr	r3, [pc, #104]	@ (8009714 <prvAddCurrentTaskToDelayedList+0x94>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	3304      	adds	r3, #4
 80096b0:	4619      	mov	r1, r3
 80096b2:	4819      	ldr	r0, [pc, #100]	@ (8009718 <prvAddCurrentTaskToDelayedList+0x98>)
 80096b4:	f7fe fb83 	bl	8007dbe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80096b8:	e026      	b.n	8009708 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80096ba:	68fa      	ldr	r2, [r7, #12]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4413      	add	r3, r2
 80096c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80096c2:	4b14      	ldr	r3, [pc, #80]	@ (8009714 <prvAddCurrentTaskToDelayedList+0x94>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	68ba      	ldr	r2, [r7, #8]
 80096c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80096ca:	68ba      	ldr	r2, [r7, #8]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d209      	bcs.n	80096e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096d2:	4b12      	ldr	r3, [pc, #72]	@ (800971c <prvAddCurrentTaskToDelayedList+0x9c>)
 80096d4:	681a      	ldr	r2, [r3, #0]
 80096d6:	4b0f      	ldr	r3, [pc, #60]	@ (8009714 <prvAddCurrentTaskToDelayedList+0x94>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	3304      	adds	r3, #4
 80096dc:	4619      	mov	r1, r3
 80096de:	4610      	mov	r0, r2
 80096e0:	f7fe fb91 	bl	8007e06 <vListInsert>
}
 80096e4:	e010      	b.n	8009708 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096e6:	4b0e      	ldr	r3, [pc, #56]	@ (8009720 <prvAddCurrentTaskToDelayedList+0xa0>)
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	4b0a      	ldr	r3, [pc, #40]	@ (8009714 <prvAddCurrentTaskToDelayedList+0x94>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	3304      	adds	r3, #4
 80096f0:	4619      	mov	r1, r3
 80096f2:	4610      	mov	r0, r2
 80096f4:	f7fe fb87 	bl	8007e06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80096f8:	4b0a      	ldr	r3, [pc, #40]	@ (8009724 <prvAddCurrentTaskToDelayedList+0xa4>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	68ba      	ldr	r2, [r7, #8]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d202      	bcs.n	8009708 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009702:	4a08      	ldr	r2, [pc, #32]	@ (8009724 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	6013      	str	r3, [r2, #0]
}
 8009708:	bf00      	nop
 800970a:	3710      	adds	r7, #16
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}
 8009710:	200053fc 	.word	0x200053fc
 8009714:	20004f24 	.word	0x20004f24
 8009718:	200053e4 	.word	0x200053e4
 800971c:	200053b4 	.word	0x200053b4
 8009720:	200053b0 	.word	0x200053b0
 8009724:	20005418 	.word	0x20005418

08009728 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b08a      	sub	sp, #40	@ 0x28
 800972c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800972e:	2300      	movs	r3, #0
 8009730:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009732:	f000 fb13 	bl	8009d5c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009736:	4b1d      	ldr	r3, [pc, #116]	@ (80097ac <xTimerCreateTimerTask+0x84>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d021      	beq.n	8009782 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800973e:	2300      	movs	r3, #0
 8009740:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009742:	2300      	movs	r3, #0
 8009744:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009746:	1d3a      	adds	r2, r7, #4
 8009748:	f107 0108 	add.w	r1, r7, #8
 800974c:	f107 030c 	add.w	r3, r7, #12
 8009750:	4618      	mov	r0, r3
 8009752:	f7fe faed 	bl	8007d30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009756:	6879      	ldr	r1, [r7, #4]
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	68fa      	ldr	r2, [r7, #12]
 800975c:	9202      	str	r2, [sp, #8]
 800975e:	9301      	str	r3, [sp, #4]
 8009760:	2302      	movs	r3, #2
 8009762:	9300      	str	r3, [sp, #0]
 8009764:	2300      	movs	r3, #0
 8009766:	460a      	mov	r2, r1
 8009768:	4911      	ldr	r1, [pc, #68]	@ (80097b0 <xTimerCreateTimerTask+0x88>)
 800976a:	4812      	ldr	r0, [pc, #72]	@ (80097b4 <xTimerCreateTimerTask+0x8c>)
 800976c:	f7ff f8a8 	bl	80088c0 <xTaskCreateStatic>
 8009770:	4603      	mov	r3, r0
 8009772:	4a11      	ldr	r2, [pc, #68]	@ (80097b8 <xTimerCreateTimerTask+0x90>)
 8009774:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009776:	4b10      	ldr	r3, [pc, #64]	@ (80097b8 <xTimerCreateTimerTask+0x90>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d001      	beq.n	8009782 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800977e:	2301      	movs	r3, #1
 8009780:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d10b      	bne.n	80097a0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800978c:	f383 8811 	msr	BASEPRI, r3
 8009790:	f3bf 8f6f 	isb	sy
 8009794:	f3bf 8f4f 	dsb	sy
 8009798:	613b      	str	r3, [r7, #16]
}
 800979a:	bf00      	nop
 800979c:	bf00      	nop
 800979e:	e7fd      	b.n	800979c <xTimerCreateTimerTask+0x74>
	return xReturn;
 80097a0:	697b      	ldr	r3, [r7, #20]
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3718      	adds	r7, #24
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	20005454 	.word	0x20005454
 80097b0:	08017fd4 	.word	0x08017fd4
 80097b4:	080098f5 	.word	0x080098f5
 80097b8:	20005458 	.word	0x20005458

080097bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b08a      	sub	sp, #40	@ 0x28
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	60b9      	str	r1, [r7, #8]
 80097c6:	607a      	str	r2, [r7, #4]
 80097c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80097ca:	2300      	movs	r3, #0
 80097cc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10b      	bne.n	80097ec <xTimerGenericCommand+0x30>
	__asm volatile
 80097d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d8:	f383 8811 	msr	BASEPRI, r3
 80097dc:	f3bf 8f6f 	isb	sy
 80097e0:	f3bf 8f4f 	dsb	sy
 80097e4:	623b      	str	r3, [r7, #32]
}
 80097e6:	bf00      	nop
 80097e8:	bf00      	nop
 80097ea:	e7fd      	b.n	80097e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80097ec:	4b19      	ldr	r3, [pc, #100]	@ (8009854 <xTimerGenericCommand+0x98>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d02a      	beq.n	800984a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	2b05      	cmp	r3, #5
 8009804:	dc18      	bgt.n	8009838 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009806:	f7ff fead 	bl	8009564 <xTaskGetSchedulerState>
 800980a:	4603      	mov	r3, r0
 800980c:	2b02      	cmp	r3, #2
 800980e:	d109      	bne.n	8009824 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009810:	4b10      	ldr	r3, [pc, #64]	@ (8009854 <xTimerGenericCommand+0x98>)
 8009812:	6818      	ldr	r0, [r3, #0]
 8009814:	f107 0110 	add.w	r1, r7, #16
 8009818:	2300      	movs	r3, #0
 800981a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800981c:	f7fe fc60 	bl	80080e0 <xQueueGenericSend>
 8009820:	6278      	str	r0, [r7, #36]	@ 0x24
 8009822:	e012      	b.n	800984a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009824:	4b0b      	ldr	r3, [pc, #44]	@ (8009854 <xTimerGenericCommand+0x98>)
 8009826:	6818      	ldr	r0, [r3, #0]
 8009828:	f107 0110 	add.w	r1, r7, #16
 800982c:	2300      	movs	r3, #0
 800982e:	2200      	movs	r2, #0
 8009830:	f7fe fc56 	bl	80080e0 <xQueueGenericSend>
 8009834:	6278      	str	r0, [r7, #36]	@ 0x24
 8009836:	e008      	b.n	800984a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009838:	4b06      	ldr	r3, [pc, #24]	@ (8009854 <xTimerGenericCommand+0x98>)
 800983a:	6818      	ldr	r0, [r3, #0]
 800983c:	f107 0110 	add.w	r1, r7, #16
 8009840:	2300      	movs	r3, #0
 8009842:	683a      	ldr	r2, [r7, #0]
 8009844:	f7fe fd4e 	bl	80082e4 <xQueueGenericSendFromISR>
 8009848:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800984a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800984c:	4618      	mov	r0, r3
 800984e:	3728      	adds	r7, #40	@ 0x28
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	20005454 	.word	0x20005454

08009858 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b088      	sub	sp, #32
 800985c:	af02      	add	r7, sp, #8
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009862:	4b23      	ldr	r3, [pc, #140]	@ (80098f0 <prvProcessExpiredTimer+0x98>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	68db      	ldr	r3, [r3, #12]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	3304      	adds	r3, #4
 8009870:	4618      	mov	r0, r3
 8009872:	f7fe fb01 	bl	8007e78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800987c:	f003 0304 	and.w	r3, r3, #4
 8009880:	2b00      	cmp	r3, #0
 8009882:	d023      	beq.n	80098cc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	699a      	ldr	r2, [r3, #24]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	18d1      	adds	r1, r2, r3
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	683a      	ldr	r2, [r7, #0]
 8009890:	6978      	ldr	r0, [r7, #20]
 8009892:	f000 f8d5 	bl	8009a40 <prvInsertTimerInActiveList>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d020      	beq.n	80098de <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800989c:	2300      	movs	r3, #0
 800989e:	9300      	str	r3, [sp, #0]
 80098a0:	2300      	movs	r3, #0
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	2100      	movs	r1, #0
 80098a6:	6978      	ldr	r0, [r7, #20]
 80098a8:	f7ff ff88 	bl	80097bc <xTimerGenericCommand>
 80098ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d114      	bne.n	80098de <prvProcessExpiredTimer+0x86>
	__asm volatile
 80098b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098b8:	f383 8811 	msr	BASEPRI, r3
 80098bc:	f3bf 8f6f 	isb	sy
 80098c0:	f3bf 8f4f 	dsb	sy
 80098c4:	60fb      	str	r3, [r7, #12]
}
 80098c6:	bf00      	nop
 80098c8:	bf00      	nop
 80098ca:	e7fd      	b.n	80098c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098d2:	f023 0301 	bic.w	r3, r3, #1
 80098d6:	b2da      	uxtb	r2, r3
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	6a1b      	ldr	r3, [r3, #32]
 80098e2:	6978      	ldr	r0, [r7, #20]
 80098e4:	4798      	blx	r3
}
 80098e6:	bf00      	nop
 80098e8:	3718      	adds	r7, #24
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	2000544c 	.word	0x2000544c

080098f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80098fc:	f107 0308 	add.w	r3, r7, #8
 8009900:	4618      	mov	r0, r3
 8009902:	f000 f859 	bl	80099b8 <prvGetNextExpireTime>
 8009906:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	4619      	mov	r1, r3
 800990c:	68f8      	ldr	r0, [r7, #12]
 800990e:	f000 f805 	bl	800991c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009912:	f000 f8d7 	bl	8009ac4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009916:	bf00      	nop
 8009918:	e7f0      	b.n	80098fc <prvTimerTask+0x8>
	...

0800991c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009926:	f7ff fa0f 	bl	8008d48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800992a:	f107 0308 	add.w	r3, r7, #8
 800992e:	4618      	mov	r0, r3
 8009930:	f000 f866 	bl	8009a00 <prvSampleTimeNow>
 8009934:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d130      	bne.n	800999e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d10a      	bne.n	8009958 <prvProcessTimerOrBlockTask+0x3c>
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	429a      	cmp	r2, r3
 8009948:	d806      	bhi.n	8009958 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800994a:	f7ff fa0b 	bl	8008d64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800994e:	68f9      	ldr	r1, [r7, #12]
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f7ff ff81 	bl	8009858 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009956:	e024      	b.n	80099a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d008      	beq.n	8009970 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800995e:	4b13      	ldr	r3, [pc, #76]	@ (80099ac <prvProcessTimerOrBlockTask+0x90>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d101      	bne.n	800996c <prvProcessTimerOrBlockTask+0x50>
 8009968:	2301      	movs	r3, #1
 800996a:	e000      	b.n	800996e <prvProcessTimerOrBlockTask+0x52>
 800996c:	2300      	movs	r3, #0
 800996e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009970:	4b0f      	ldr	r3, [pc, #60]	@ (80099b0 <prvProcessTimerOrBlockTask+0x94>)
 8009972:	6818      	ldr	r0, [r3, #0]
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	1ad3      	subs	r3, r2, r3
 800997a:	683a      	ldr	r2, [r7, #0]
 800997c:	4619      	mov	r1, r3
 800997e:	f7fe ff6b 	bl	8008858 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009982:	f7ff f9ef 	bl	8008d64 <xTaskResumeAll>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d10a      	bne.n	80099a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800998c:	4b09      	ldr	r3, [pc, #36]	@ (80099b4 <prvProcessTimerOrBlockTask+0x98>)
 800998e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009992:	601a      	str	r2, [r3, #0]
 8009994:	f3bf 8f4f 	dsb	sy
 8009998:	f3bf 8f6f 	isb	sy
}
 800999c:	e001      	b.n	80099a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800999e:	f7ff f9e1 	bl	8008d64 <xTaskResumeAll>
}
 80099a2:	bf00      	nop
 80099a4:	3710      	adds	r7, #16
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	20005450 	.word	0x20005450
 80099b0:	20005454 	.word	0x20005454
 80099b4:	e000ed04 	.word	0xe000ed04

080099b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80099b8:	b480      	push	{r7}
 80099ba:	b085      	sub	sp, #20
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80099c0:	4b0e      	ldr	r3, [pc, #56]	@ (80099fc <prvGetNextExpireTime+0x44>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d101      	bne.n	80099ce <prvGetNextExpireTime+0x16>
 80099ca:	2201      	movs	r2, #1
 80099cc:	e000      	b.n	80099d0 <prvGetNextExpireTime+0x18>
 80099ce:	2200      	movs	r2, #0
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d105      	bne.n	80099e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099dc:	4b07      	ldr	r3, [pc, #28]	@ (80099fc <prvGetNextExpireTime+0x44>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	60fb      	str	r3, [r7, #12]
 80099e6:	e001      	b.n	80099ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80099e8:	2300      	movs	r3, #0
 80099ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80099ec:	68fb      	ldr	r3, [r7, #12]
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3714      	adds	r7, #20
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr
 80099fa:	bf00      	nop
 80099fc:	2000544c 	.word	0x2000544c

08009a00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009a08:	f7ff fa4a 	bl	8008ea0 <xTaskGetTickCount>
 8009a0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8009a3c <prvSampleTimeNow+0x3c>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68fa      	ldr	r2, [r7, #12]
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d205      	bcs.n	8009a24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009a18:	f000 f93a 	bl	8009c90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	601a      	str	r2, [r3, #0]
 8009a22:	e002      	b.n	8009a2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009a2a:	4a04      	ldr	r2, [pc, #16]	@ (8009a3c <prvSampleTimeNow+0x3c>)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009a30:	68fb      	ldr	r3, [r7, #12]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	2000545c 	.word	0x2000545c

08009a40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b086      	sub	sp, #24
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	607a      	str	r2, [r7, #4]
 8009a4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	68ba      	ldr	r2, [r7, #8]
 8009a56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	68fa      	ldr	r2, [r7, #12]
 8009a5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009a5e:	68ba      	ldr	r2, [r7, #8]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d812      	bhi.n	8009a8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	1ad2      	subs	r2, r2, r3
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	699b      	ldr	r3, [r3, #24]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d302      	bcc.n	8009a7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009a74:	2301      	movs	r3, #1
 8009a76:	617b      	str	r3, [r7, #20]
 8009a78:	e01b      	b.n	8009ab2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009a7a:	4b10      	ldr	r3, [pc, #64]	@ (8009abc <prvInsertTimerInActiveList+0x7c>)
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	3304      	adds	r3, #4
 8009a82:	4619      	mov	r1, r3
 8009a84:	4610      	mov	r0, r2
 8009a86:	f7fe f9be 	bl	8007e06 <vListInsert>
 8009a8a:	e012      	b.n	8009ab2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d206      	bcs.n	8009aa2 <prvInsertTimerInActiveList+0x62>
 8009a94:	68ba      	ldr	r2, [r7, #8]
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d302      	bcc.n	8009aa2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	617b      	str	r3, [r7, #20]
 8009aa0:	e007      	b.n	8009ab2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009aa2:	4b07      	ldr	r3, [pc, #28]	@ (8009ac0 <prvInsertTimerInActiveList+0x80>)
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	3304      	adds	r3, #4
 8009aaa:	4619      	mov	r1, r3
 8009aac:	4610      	mov	r0, r2
 8009aae:	f7fe f9aa 	bl	8007e06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009ab2:	697b      	ldr	r3, [r7, #20]
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3718      	adds	r7, #24
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	20005450 	.word	0x20005450
 8009ac0:	2000544c 	.word	0x2000544c

08009ac4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b08e      	sub	sp, #56	@ 0x38
 8009ac8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009aca:	e0ce      	b.n	8009c6a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	da19      	bge.n	8009b06 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009ad2:	1d3b      	adds	r3, r7, #4
 8009ad4:	3304      	adds	r3, #4
 8009ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d10b      	bne.n	8009af6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ae2:	f383 8811 	msr	BASEPRI, r3
 8009ae6:	f3bf 8f6f 	isb	sy
 8009aea:	f3bf 8f4f 	dsb	sy
 8009aee:	61fb      	str	r3, [r7, #28]
}
 8009af0:	bf00      	nop
 8009af2:	bf00      	nop
 8009af4:	e7fd      	b.n	8009af2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009afc:	6850      	ldr	r0, [r2, #4]
 8009afe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b00:	6892      	ldr	r2, [r2, #8]
 8009b02:	4611      	mov	r1, r2
 8009b04:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	f2c0 80ae 	blt.w	8009c6a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b14:	695b      	ldr	r3, [r3, #20]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d004      	beq.n	8009b24 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b1c:	3304      	adds	r3, #4
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7fe f9aa 	bl	8007e78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b24:	463b      	mov	r3, r7
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7ff ff6a 	bl	8009a00 <prvSampleTimeNow>
 8009b2c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2b09      	cmp	r3, #9
 8009b32:	f200 8097 	bhi.w	8009c64 <prvProcessReceivedCommands+0x1a0>
 8009b36:	a201      	add	r2, pc, #4	@ (adr r2, 8009b3c <prvProcessReceivedCommands+0x78>)
 8009b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b3c:	08009b65 	.word	0x08009b65
 8009b40:	08009b65 	.word	0x08009b65
 8009b44:	08009b65 	.word	0x08009b65
 8009b48:	08009bdb 	.word	0x08009bdb
 8009b4c:	08009bef 	.word	0x08009bef
 8009b50:	08009c3b 	.word	0x08009c3b
 8009b54:	08009b65 	.word	0x08009b65
 8009b58:	08009b65 	.word	0x08009b65
 8009b5c:	08009bdb 	.word	0x08009bdb
 8009b60:	08009bef 	.word	0x08009bef
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b6a:	f043 0301 	orr.w	r3, r3, #1
 8009b6e:	b2da      	uxtb	r2, r3
 8009b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009b76:	68ba      	ldr	r2, [r7, #8]
 8009b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b7a:	699b      	ldr	r3, [r3, #24]
 8009b7c:	18d1      	adds	r1, r2, r3
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b84:	f7ff ff5c 	bl	8009a40 <prvInsertTimerInActiveList>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d06c      	beq.n	8009c68 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b90:	6a1b      	ldr	r3, [r3, #32]
 8009b92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b94:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b9c:	f003 0304 	and.w	r3, r3, #4
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d061      	beq.n	8009c68 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009ba4:	68ba      	ldr	r2, [r7, #8]
 8009ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba8:	699b      	ldr	r3, [r3, #24]
 8009baa:	441a      	add	r2, r3
 8009bac:	2300      	movs	r3, #0
 8009bae:	9300      	str	r3, [sp, #0]
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bb6:	f7ff fe01 	bl	80097bc <xTimerGenericCommand>
 8009bba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009bbc:	6a3b      	ldr	r3, [r7, #32]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d152      	bne.n	8009c68 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc6:	f383 8811 	msr	BASEPRI, r3
 8009bca:	f3bf 8f6f 	isb	sy
 8009bce:	f3bf 8f4f 	dsb	sy
 8009bd2:	61bb      	str	r3, [r7, #24]
}
 8009bd4:	bf00      	nop
 8009bd6:	bf00      	nop
 8009bd8:	e7fd      	b.n	8009bd6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009be0:	f023 0301 	bic.w	r3, r3, #1
 8009be4:	b2da      	uxtb	r2, r3
 8009be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009bec:	e03d      	b.n	8009c6a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bf4:	f043 0301 	orr.w	r3, r3, #1
 8009bf8:	b2da      	uxtb	r2, r3
 8009bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bfc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009c00:	68ba      	ldr	r2, [r7, #8]
 8009c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c04:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c08:	699b      	ldr	r3, [r3, #24]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d10b      	bne.n	8009c26 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c12:	f383 8811 	msr	BASEPRI, r3
 8009c16:	f3bf 8f6f 	isb	sy
 8009c1a:	f3bf 8f4f 	dsb	sy
 8009c1e:	617b      	str	r3, [r7, #20]
}
 8009c20:	bf00      	nop
 8009c22:	bf00      	nop
 8009c24:	e7fd      	b.n	8009c22 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c28:	699a      	ldr	r2, [r3, #24]
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c2c:	18d1      	adds	r1, r2, r3
 8009c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c34:	f7ff ff04 	bl	8009a40 <prvInsertTimerInActiveList>
					break;
 8009c38:	e017      	b.n	8009c6a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c40:	f003 0302 	and.w	r3, r3, #2
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d103      	bne.n	8009c50 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009c48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c4a:	f000 fbe5 	bl	800a418 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009c4e:	e00c      	b.n	8009c6a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c56:	f023 0301 	bic.w	r3, r3, #1
 8009c5a:	b2da      	uxtb	r2, r3
 8009c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009c62:	e002      	b.n	8009c6a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009c64:	bf00      	nop
 8009c66:	e000      	b.n	8009c6a <prvProcessReceivedCommands+0x1a6>
					break;
 8009c68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c6a:	4b08      	ldr	r3, [pc, #32]	@ (8009c8c <prvProcessReceivedCommands+0x1c8>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	1d39      	adds	r1, r7, #4
 8009c70:	2200      	movs	r2, #0
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7fe fbd4 	bl	8008420 <xQueueReceive>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	f47f af26 	bne.w	8009acc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009c80:	bf00      	nop
 8009c82:	bf00      	nop
 8009c84:	3730      	adds	r7, #48	@ 0x30
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	20005454 	.word	0x20005454

08009c90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b088      	sub	sp, #32
 8009c94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c96:	e049      	b.n	8009d2c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c98:	4b2e      	ldr	r3, [pc, #184]	@ (8009d54 <prvSwitchTimerLists+0xc4>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	68db      	ldr	r3, [r3, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ca2:	4b2c      	ldr	r3, [pc, #176]	@ (8009d54 <prvSwitchTimerLists+0xc4>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	3304      	adds	r3, #4
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f7fe f8e1 	bl	8007e78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	6a1b      	ldr	r3, [r3, #32]
 8009cba:	68f8      	ldr	r0, [r7, #12]
 8009cbc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009cc4:	f003 0304 	and.w	r3, r3, #4
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d02f      	beq.n	8009d2c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	699b      	ldr	r3, [r3, #24]
 8009cd0:	693a      	ldr	r2, [r7, #16]
 8009cd2:	4413      	add	r3, r2
 8009cd4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009cd6:	68ba      	ldr	r2, [r7, #8]
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d90e      	bls.n	8009cfc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	68ba      	ldr	r2, [r7, #8]
 8009ce2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	68fa      	ldr	r2, [r7, #12]
 8009ce8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009cea:	4b1a      	ldr	r3, [pc, #104]	@ (8009d54 <prvSwitchTimerLists+0xc4>)
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	3304      	adds	r3, #4
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	4610      	mov	r0, r2
 8009cf6:	f7fe f886 	bl	8007e06 <vListInsert>
 8009cfa:	e017      	b.n	8009d2c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	9300      	str	r3, [sp, #0]
 8009d00:	2300      	movs	r3, #0
 8009d02:	693a      	ldr	r2, [r7, #16]
 8009d04:	2100      	movs	r1, #0
 8009d06:	68f8      	ldr	r0, [r7, #12]
 8009d08:	f7ff fd58 	bl	80097bc <xTimerGenericCommand>
 8009d0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d10b      	bne.n	8009d2c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d18:	f383 8811 	msr	BASEPRI, r3
 8009d1c:	f3bf 8f6f 	isb	sy
 8009d20:	f3bf 8f4f 	dsb	sy
 8009d24:	603b      	str	r3, [r7, #0]
}
 8009d26:	bf00      	nop
 8009d28:	bf00      	nop
 8009d2a:	e7fd      	b.n	8009d28 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d2c:	4b09      	ldr	r3, [pc, #36]	@ (8009d54 <prvSwitchTimerLists+0xc4>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d1b0      	bne.n	8009c98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009d36:	4b07      	ldr	r3, [pc, #28]	@ (8009d54 <prvSwitchTimerLists+0xc4>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009d3c:	4b06      	ldr	r3, [pc, #24]	@ (8009d58 <prvSwitchTimerLists+0xc8>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a04      	ldr	r2, [pc, #16]	@ (8009d54 <prvSwitchTimerLists+0xc4>)
 8009d42:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009d44:	4a04      	ldr	r2, [pc, #16]	@ (8009d58 <prvSwitchTimerLists+0xc8>)
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	6013      	str	r3, [r2, #0]
}
 8009d4a:	bf00      	nop
 8009d4c:	3718      	adds	r7, #24
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	2000544c 	.word	0x2000544c
 8009d58:	20005450 	.word	0x20005450

08009d5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009d62:	f000 f969 	bl	800a038 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009d66:	4b15      	ldr	r3, [pc, #84]	@ (8009dbc <prvCheckForValidListAndQueue+0x60>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d120      	bne.n	8009db0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009d6e:	4814      	ldr	r0, [pc, #80]	@ (8009dc0 <prvCheckForValidListAndQueue+0x64>)
 8009d70:	f7fd fff8 	bl	8007d64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009d74:	4813      	ldr	r0, [pc, #76]	@ (8009dc4 <prvCheckForValidListAndQueue+0x68>)
 8009d76:	f7fd fff5 	bl	8007d64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009d7a:	4b13      	ldr	r3, [pc, #76]	@ (8009dc8 <prvCheckForValidListAndQueue+0x6c>)
 8009d7c:	4a10      	ldr	r2, [pc, #64]	@ (8009dc0 <prvCheckForValidListAndQueue+0x64>)
 8009d7e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009d80:	4b12      	ldr	r3, [pc, #72]	@ (8009dcc <prvCheckForValidListAndQueue+0x70>)
 8009d82:	4a10      	ldr	r2, [pc, #64]	@ (8009dc4 <prvCheckForValidListAndQueue+0x68>)
 8009d84:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009d86:	2300      	movs	r3, #0
 8009d88:	9300      	str	r3, [sp, #0]
 8009d8a:	4b11      	ldr	r3, [pc, #68]	@ (8009dd0 <prvCheckForValidListAndQueue+0x74>)
 8009d8c:	4a11      	ldr	r2, [pc, #68]	@ (8009dd4 <prvCheckForValidListAndQueue+0x78>)
 8009d8e:	2110      	movs	r1, #16
 8009d90:	200a      	movs	r0, #10
 8009d92:	f7fe f905 	bl	8007fa0 <xQueueGenericCreateStatic>
 8009d96:	4603      	mov	r3, r0
 8009d98:	4a08      	ldr	r2, [pc, #32]	@ (8009dbc <prvCheckForValidListAndQueue+0x60>)
 8009d9a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009d9c:	4b07      	ldr	r3, [pc, #28]	@ (8009dbc <prvCheckForValidListAndQueue+0x60>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d005      	beq.n	8009db0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009da4:	4b05      	ldr	r3, [pc, #20]	@ (8009dbc <prvCheckForValidListAndQueue+0x60>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	490b      	ldr	r1, [pc, #44]	@ (8009dd8 <prvCheckForValidListAndQueue+0x7c>)
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7fe fd2a 	bl	8008804 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009db0:	f000 f974 	bl	800a09c <vPortExitCritical>
}
 8009db4:	bf00      	nop
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	20005454 	.word	0x20005454
 8009dc0:	20005424 	.word	0x20005424
 8009dc4:	20005438 	.word	0x20005438
 8009dc8:	2000544c 	.word	0x2000544c
 8009dcc:	20005450 	.word	0x20005450
 8009dd0:	20005500 	.word	0x20005500
 8009dd4:	20005460 	.word	0x20005460
 8009dd8:	08017fdc 	.word	0x08017fdc

08009ddc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b085      	sub	sp, #20
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	60b9      	str	r1, [r7, #8]
 8009de6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	3b04      	subs	r3, #4
 8009dec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009df4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	3b04      	subs	r3, #4
 8009dfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	f023 0201 	bic.w	r2, r3, #1
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	3b04      	subs	r3, #4
 8009e0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009e0c:	4a0c      	ldr	r2, [pc, #48]	@ (8009e40 <pxPortInitialiseStack+0x64>)
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	3b14      	subs	r3, #20
 8009e16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	3b04      	subs	r3, #4
 8009e22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f06f 0202 	mvn.w	r2, #2
 8009e2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	3b20      	subs	r3, #32
 8009e30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009e32:	68fb      	ldr	r3, [r7, #12]
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3714      	adds	r7, #20
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr
 8009e40:	08009e45 	.word	0x08009e45

08009e44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009e44:	b480      	push	{r7}
 8009e46:	b085      	sub	sp, #20
 8009e48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009e4e:	4b13      	ldr	r3, [pc, #76]	@ (8009e9c <prvTaskExitError+0x58>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e56:	d00b      	beq.n	8009e70 <prvTaskExitError+0x2c>
	__asm volatile
 8009e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e5c:	f383 8811 	msr	BASEPRI, r3
 8009e60:	f3bf 8f6f 	isb	sy
 8009e64:	f3bf 8f4f 	dsb	sy
 8009e68:	60fb      	str	r3, [r7, #12]
}
 8009e6a:	bf00      	nop
 8009e6c:	bf00      	nop
 8009e6e:	e7fd      	b.n	8009e6c <prvTaskExitError+0x28>
	__asm volatile
 8009e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e74:	f383 8811 	msr	BASEPRI, r3
 8009e78:	f3bf 8f6f 	isb	sy
 8009e7c:	f3bf 8f4f 	dsb	sy
 8009e80:	60bb      	str	r3, [r7, #8]
}
 8009e82:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009e84:	bf00      	nop
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d0fc      	beq.n	8009e86 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009e8c:	bf00      	nop
 8009e8e:	bf00      	nop
 8009e90:	3714      	adds	r7, #20
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr
 8009e9a:	bf00      	nop
 8009e9c:	20000018 	.word	0x20000018

08009ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009ea0:	4b07      	ldr	r3, [pc, #28]	@ (8009ec0 <pxCurrentTCBConst2>)
 8009ea2:	6819      	ldr	r1, [r3, #0]
 8009ea4:	6808      	ldr	r0, [r1, #0]
 8009ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eaa:	f380 8809 	msr	PSP, r0
 8009eae:	f3bf 8f6f 	isb	sy
 8009eb2:	f04f 0000 	mov.w	r0, #0
 8009eb6:	f380 8811 	msr	BASEPRI, r0
 8009eba:	4770      	bx	lr
 8009ebc:	f3af 8000 	nop.w

08009ec0 <pxCurrentTCBConst2>:
 8009ec0:	20004f24 	.word	0x20004f24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009ec4:	bf00      	nop
 8009ec6:	bf00      	nop

08009ec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009ec8:	4808      	ldr	r0, [pc, #32]	@ (8009eec <prvPortStartFirstTask+0x24>)
 8009eca:	6800      	ldr	r0, [r0, #0]
 8009ecc:	6800      	ldr	r0, [r0, #0]
 8009ece:	f380 8808 	msr	MSP, r0
 8009ed2:	f04f 0000 	mov.w	r0, #0
 8009ed6:	f380 8814 	msr	CONTROL, r0
 8009eda:	b662      	cpsie	i
 8009edc:	b661      	cpsie	f
 8009ede:	f3bf 8f4f 	dsb	sy
 8009ee2:	f3bf 8f6f 	isb	sy
 8009ee6:	df00      	svc	0
 8009ee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009eea:	bf00      	nop
 8009eec:	e000ed08 	.word	0xe000ed08

08009ef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b086      	sub	sp, #24
 8009ef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009ef6:	4b47      	ldr	r3, [pc, #284]	@ (800a014 <xPortStartScheduler+0x124>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a47      	ldr	r2, [pc, #284]	@ (800a018 <xPortStartScheduler+0x128>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d10b      	bne.n	8009f18 <xPortStartScheduler+0x28>
	__asm volatile
 8009f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f04:	f383 8811 	msr	BASEPRI, r3
 8009f08:	f3bf 8f6f 	isb	sy
 8009f0c:	f3bf 8f4f 	dsb	sy
 8009f10:	613b      	str	r3, [r7, #16]
}
 8009f12:	bf00      	nop
 8009f14:	bf00      	nop
 8009f16:	e7fd      	b.n	8009f14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009f18:	4b3e      	ldr	r3, [pc, #248]	@ (800a014 <xPortStartScheduler+0x124>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a3f      	ldr	r2, [pc, #252]	@ (800a01c <xPortStartScheduler+0x12c>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d10b      	bne.n	8009f3a <xPortStartScheduler+0x4a>
	__asm volatile
 8009f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f26:	f383 8811 	msr	BASEPRI, r3
 8009f2a:	f3bf 8f6f 	isb	sy
 8009f2e:	f3bf 8f4f 	dsb	sy
 8009f32:	60fb      	str	r3, [r7, #12]
}
 8009f34:	bf00      	nop
 8009f36:	bf00      	nop
 8009f38:	e7fd      	b.n	8009f36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009f3a:	4b39      	ldr	r3, [pc, #228]	@ (800a020 <xPortStartScheduler+0x130>)
 8009f3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	22ff      	movs	r2, #255	@ 0xff
 8009f4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f54:	78fb      	ldrb	r3, [r7, #3]
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009f5c:	b2da      	uxtb	r2, r3
 8009f5e:	4b31      	ldr	r3, [pc, #196]	@ (800a024 <xPortStartScheduler+0x134>)
 8009f60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009f62:	4b31      	ldr	r3, [pc, #196]	@ (800a028 <xPortStartScheduler+0x138>)
 8009f64:	2207      	movs	r2, #7
 8009f66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f68:	e009      	b.n	8009f7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009f6a:	4b2f      	ldr	r3, [pc, #188]	@ (800a028 <xPortStartScheduler+0x138>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	4a2d      	ldr	r2, [pc, #180]	@ (800a028 <xPortStartScheduler+0x138>)
 8009f72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009f74:	78fb      	ldrb	r3, [r7, #3]
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	005b      	lsls	r3, r3, #1
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f7e:	78fb      	ldrb	r3, [r7, #3]
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f86:	2b80      	cmp	r3, #128	@ 0x80
 8009f88:	d0ef      	beq.n	8009f6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009f8a:	4b27      	ldr	r3, [pc, #156]	@ (800a028 <xPortStartScheduler+0x138>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f1c3 0307 	rsb	r3, r3, #7
 8009f92:	2b04      	cmp	r3, #4
 8009f94:	d00b      	beq.n	8009fae <xPortStartScheduler+0xbe>
	__asm volatile
 8009f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f9a:	f383 8811 	msr	BASEPRI, r3
 8009f9e:	f3bf 8f6f 	isb	sy
 8009fa2:	f3bf 8f4f 	dsb	sy
 8009fa6:	60bb      	str	r3, [r7, #8]
}
 8009fa8:	bf00      	nop
 8009faa:	bf00      	nop
 8009fac:	e7fd      	b.n	8009faa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009fae:	4b1e      	ldr	r3, [pc, #120]	@ (800a028 <xPortStartScheduler+0x138>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	021b      	lsls	r3, r3, #8
 8009fb4:	4a1c      	ldr	r2, [pc, #112]	@ (800a028 <xPortStartScheduler+0x138>)
 8009fb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009fb8:	4b1b      	ldr	r3, [pc, #108]	@ (800a028 <xPortStartScheduler+0x138>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009fc0:	4a19      	ldr	r2, [pc, #100]	@ (800a028 <xPortStartScheduler+0x138>)
 8009fc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	b2da      	uxtb	r2, r3
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009fcc:	4b17      	ldr	r3, [pc, #92]	@ (800a02c <xPortStartScheduler+0x13c>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a16      	ldr	r2, [pc, #88]	@ (800a02c <xPortStartScheduler+0x13c>)
 8009fd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009fd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009fd8:	4b14      	ldr	r3, [pc, #80]	@ (800a02c <xPortStartScheduler+0x13c>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a13      	ldr	r2, [pc, #76]	@ (800a02c <xPortStartScheduler+0x13c>)
 8009fde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009fe2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009fe4:	f000 f8da 	bl	800a19c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009fe8:	4b11      	ldr	r3, [pc, #68]	@ (800a030 <xPortStartScheduler+0x140>)
 8009fea:	2200      	movs	r2, #0
 8009fec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009fee:	f000 f8f9 	bl	800a1e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009ff2:	4b10      	ldr	r3, [pc, #64]	@ (800a034 <xPortStartScheduler+0x144>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a0f      	ldr	r2, [pc, #60]	@ (800a034 <xPortStartScheduler+0x144>)
 8009ff8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009ffc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009ffe:	f7ff ff63 	bl	8009ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a002:	f7ff f817 	bl	8009034 <vTaskSwitchContext>
	prvTaskExitError();
 800a006:	f7ff ff1d 	bl	8009e44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a00a:	2300      	movs	r3, #0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3718      	adds	r7, #24
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}
 800a014:	e000ed00 	.word	0xe000ed00
 800a018:	410fc271 	.word	0x410fc271
 800a01c:	410fc270 	.word	0x410fc270
 800a020:	e000e400 	.word	0xe000e400
 800a024:	20005550 	.word	0x20005550
 800a028:	20005554 	.word	0x20005554
 800a02c:	e000ed20 	.word	0xe000ed20
 800a030:	20000018 	.word	0x20000018
 800a034:	e000ef34 	.word	0xe000ef34

0800a038 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
	__asm volatile
 800a03e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a042:	f383 8811 	msr	BASEPRI, r3
 800a046:	f3bf 8f6f 	isb	sy
 800a04a:	f3bf 8f4f 	dsb	sy
 800a04e:	607b      	str	r3, [r7, #4]
}
 800a050:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a052:	4b10      	ldr	r3, [pc, #64]	@ (800a094 <vPortEnterCritical+0x5c>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	3301      	adds	r3, #1
 800a058:	4a0e      	ldr	r2, [pc, #56]	@ (800a094 <vPortEnterCritical+0x5c>)
 800a05a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a05c:	4b0d      	ldr	r3, [pc, #52]	@ (800a094 <vPortEnterCritical+0x5c>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2b01      	cmp	r3, #1
 800a062:	d110      	bne.n	800a086 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a064:	4b0c      	ldr	r3, [pc, #48]	@ (800a098 <vPortEnterCritical+0x60>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00b      	beq.n	800a086 <vPortEnterCritical+0x4e>
	__asm volatile
 800a06e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a072:	f383 8811 	msr	BASEPRI, r3
 800a076:	f3bf 8f6f 	isb	sy
 800a07a:	f3bf 8f4f 	dsb	sy
 800a07e:	603b      	str	r3, [r7, #0]
}
 800a080:	bf00      	nop
 800a082:	bf00      	nop
 800a084:	e7fd      	b.n	800a082 <vPortEnterCritical+0x4a>
	}
}
 800a086:	bf00      	nop
 800a088:	370c      	adds	r7, #12
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	20000018 	.word	0x20000018
 800a098:	e000ed04 	.word	0xe000ed04

0800a09c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a09c:	b480      	push	{r7}
 800a09e:	b083      	sub	sp, #12
 800a0a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a0a2:	4b12      	ldr	r3, [pc, #72]	@ (800a0ec <vPortExitCritical+0x50>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d10b      	bne.n	800a0c2 <vPortExitCritical+0x26>
	__asm volatile
 800a0aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ae:	f383 8811 	msr	BASEPRI, r3
 800a0b2:	f3bf 8f6f 	isb	sy
 800a0b6:	f3bf 8f4f 	dsb	sy
 800a0ba:	607b      	str	r3, [r7, #4]
}
 800a0bc:	bf00      	nop
 800a0be:	bf00      	nop
 800a0c0:	e7fd      	b.n	800a0be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a0c2:	4b0a      	ldr	r3, [pc, #40]	@ (800a0ec <vPortExitCritical+0x50>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	3b01      	subs	r3, #1
 800a0c8:	4a08      	ldr	r2, [pc, #32]	@ (800a0ec <vPortExitCritical+0x50>)
 800a0ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a0cc:	4b07      	ldr	r3, [pc, #28]	@ (800a0ec <vPortExitCritical+0x50>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d105      	bne.n	800a0e0 <vPortExitCritical+0x44>
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	f383 8811 	msr	BASEPRI, r3
}
 800a0de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a0e0:	bf00      	nop
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr
 800a0ec:	20000018 	.word	0x20000018

0800a0f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a0f0:	f3ef 8009 	mrs	r0, PSP
 800a0f4:	f3bf 8f6f 	isb	sy
 800a0f8:	4b15      	ldr	r3, [pc, #84]	@ (800a150 <pxCurrentTCBConst>)
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	f01e 0f10 	tst.w	lr, #16
 800a100:	bf08      	it	eq
 800a102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a10a:	6010      	str	r0, [r2, #0]
 800a10c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a110:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a114:	f380 8811 	msr	BASEPRI, r0
 800a118:	f3bf 8f4f 	dsb	sy
 800a11c:	f3bf 8f6f 	isb	sy
 800a120:	f7fe ff88 	bl	8009034 <vTaskSwitchContext>
 800a124:	f04f 0000 	mov.w	r0, #0
 800a128:	f380 8811 	msr	BASEPRI, r0
 800a12c:	bc09      	pop	{r0, r3}
 800a12e:	6819      	ldr	r1, [r3, #0]
 800a130:	6808      	ldr	r0, [r1, #0]
 800a132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a136:	f01e 0f10 	tst.w	lr, #16
 800a13a:	bf08      	it	eq
 800a13c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a140:	f380 8809 	msr	PSP, r0
 800a144:	f3bf 8f6f 	isb	sy
 800a148:	4770      	bx	lr
 800a14a:	bf00      	nop
 800a14c:	f3af 8000 	nop.w

0800a150 <pxCurrentTCBConst>:
 800a150:	20004f24 	.word	0x20004f24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a154:	bf00      	nop
 800a156:	bf00      	nop

0800a158 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
	__asm volatile
 800a15e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a162:	f383 8811 	msr	BASEPRI, r3
 800a166:	f3bf 8f6f 	isb	sy
 800a16a:	f3bf 8f4f 	dsb	sy
 800a16e:	607b      	str	r3, [r7, #4]
}
 800a170:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a172:	f7fe fea5 	bl	8008ec0 <xTaskIncrementTick>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d003      	beq.n	800a184 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a17c:	4b06      	ldr	r3, [pc, #24]	@ (800a198 <xPortSysTickHandler+0x40>)
 800a17e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a182:	601a      	str	r2, [r3, #0]
 800a184:	2300      	movs	r3, #0
 800a186:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	f383 8811 	msr	BASEPRI, r3
}
 800a18e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a190:	bf00      	nop
 800a192:	3708      	adds	r7, #8
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}
 800a198:	e000ed04 	.word	0xe000ed04

0800a19c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a19c:	b480      	push	{r7}
 800a19e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a1a0:	4b0b      	ldr	r3, [pc, #44]	@ (800a1d0 <vPortSetupTimerInterrupt+0x34>)
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a1a6:	4b0b      	ldr	r3, [pc, #44]	@ (800a1d4 <vPortSetupTimerInterrupt+0x38>)
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a1ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a1d8 <vPortSetupTimerInterrupt+0x3c>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a0a      	ldr	r2, [pc, #40]	@ (800a1dc <vPortSetupTimerInterrupt+0x40>)
 800a1b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1b6:	099b      	lsrs	r3, r3, #6
 800a1b8:	4a09      	ldr	r2, [pc, #36]	@ (800a1e0 <vPortSetupTimerInterrupt+0x44>)
 800a1ba:	3b01      	subs	r3, #1
 800a1bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a1be:	4b04      	ldr	r3, [pc, #16]	@ (800a1d0 <vPortSetupTimerInterrupt+0x34>)
 800a1c0:	2207      	movs	r2, #7
 800a1c2:	601a      	str	r2, [r3, #0]
}
 800a1c4:	bf00      	nop
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	e000e010 	.word	0xe000e010
 800a1d4:	e000e018 	.word	0xe000e018
 800a1d8:	2000000c 	.word	0x2000000c
 800a1dc:	10624dd3 	.word	0x10624dd3
 800a1e0:	e000e014 	.word	0xe000e014

0800a1e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a1e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a1f4 <vPortEnableVFP+0x10>
 800a1e8:	6801      	ldr	r1, [r0, #0]
 800a1ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a1ee:	6001      	str	r1, [r0, #0]
 800a1f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a1f2:	bf00      	nop
 800a1f4:	e000ed88 	.word	0xe000ed88

0800a1f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b085      	sub	sp, #20
 800a1fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a1fe:	f3ef 8305 	mrs	r3, IPSR
 800a202:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2b0f      	cmp	r3, #15
 800a208:	d915      	bls.n	800a236 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a20a:	4a18      	ldr	r2, [pc, #96]	@ (800a26c <vPortValidateInterruptPriority+0x74>)
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	4413      	add	r3, r2
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a214:	4b16      	ldr	r3, [pc, #88]	@ (800a270 <vPortValidateInterruptPriority+0x78>)
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	7afa      	ldrb	r2, [r7, #11]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d20b      	bcs.n	800a236 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a21e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a222:	f383 8811 	msr	BASEPRI, r3
 800a226:	f3bf 8f6f 	isb	sy
 800a22a:	f3bf 8f4f 	dsb	sy
 800a22e:	607b      	str	r3, [r7, #4]
}
 800a230:	bf00      	nop
 800a232:	bf00      	nop
 800a234:	e7fd      	b.n	800a232 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a236:	4b0f      	ldr	r3, [pc, #60]	@ (800a274 <vPortValidateInterruptPriority+0x7c>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a23e:	4b0e      	ldr	r3, [pc, #56]	@ (800a278 <vPortValidateInterruptPriority+0x80>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	429a      	cmp	r2, r3
 800a244:	d90b      	bls.n	800a25e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a24a:	f383 8811 	msr	BASEPRI, r3
 800a24e:	f3bf 8f6f 	isb	sy
 800a252:	f3bf 8f4f 	dsb	sy
 800a256:	603b      	str	r3, [r7, #0]
}
 800a258:	bf00      	nop
 800a25a:	bf00      	nop
 800a25c:	e7fd      	b.n	800a25a <vPortValidateInterruptPriority+0x62>
	}
 800a25e:	bf00      	nop
 800a260:	3714      	adds	r7, #20
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr
 800a26a:	bf00      	nop
 800a26c:	e000e3f0 	.word	0xe000e3f0
 800a270:	20005550 	.word	0x20005550
 800a274:	e000ed0c 	.word	0xe000ed0c
 800a278:	20005554 	.word	0x20005554

0800a27c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b08a      	sub	sp, #40	@ 0x28
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a284:	2300      	movs	r3, #0
 800a286:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a288:	f7fe fd5e 	bl	8008d48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a28c:	4b5c      	ldr	r3, [pc, #368]	@ (800a400 <pvPortMalloc+0x184>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d101      	bne.n	800a298 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a294:	f000 f924 	bl	800a4e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a298:	4b5a      	ldr	r3, [pc, #360]	@ (800a404 <pvPortMalloc+0x188>)
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	4013      	ands	r3, r2
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	f040 8095 	bne.w	800a3d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d01e      	beq.n	800a2ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a2ac:	2208      	movs	r2, #8
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	4413      	add	r3, r2
 800a2b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f003 0307 	and.w	r3, r3, #7
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d015      	beq.n	800a2ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f023 0307 	bic.w	r3, r3, #7
 800a2c4:	3308      	adds	r3, #8
 800a2c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f003 0307 	and.w	r3, r3, #7
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00b      	beq.n	800a2ea <pvPortMalloc+0x6e>
	__asm volatile
 800a2d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d6:	f383 8811 	msr	BASEPRI, r3
 800a2da:	f3bf 8f6f 	isb	sy
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	617b      	str	r3, [r7, #20]
}
 800a2e4:	bf00      	nop
 800a2e6:	bf00      	nop
 800a2e8:	e7fd      	b.n	800a2e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d06f      	beq.n	800a3d0 <pvPortMalloc+0x154>
 800a2f0:	4b45      	ldr	r3, [pc, #276]	@ (800a408 <pvPortMalloc+0x18c>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d86a      	bhi.n	800a3d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a2fa:	4b44      	ldr	r3, [pc, #272]	@ (800a40c <pvPortMalloc+0x190>)
 800a2fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a2fe:	4b43      	ldr	r3, [pc, #268]	@ (800a40c <pvPortMalloc+0x190>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a304:	e004      	b.n	800a310 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a308:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	429a      	cmp	r2, r3
 800a318:	d903      	bls.n	800a322 <pvPortMalloc+0xa6>
 800a31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d1f1      	bne.n	800a306 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a322:	4b37      	ldr	r3, [pc, #220]	@ (800a400 <pvPortMalloc+0x184>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a328:	429a      	cmp	r2, r3
 800a32a:	d051      	beq.n	800a3d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a32c:	6a3b      	ldr	r3, [r7, #32]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2208      	movs	r2, #8
 800a332:	4413      	add	r3, r2
 800a334:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	6a3b      	ldr	r3, [r7, #32]
 800a33c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a340:	685a      	ldr	r2, [r3, #4]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	1ad2      	subs	r2, r2, r3
 800a346:	2308      	movs	r3, #8
 800a348:	005b      	lsls	r3, r3, #1
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d920      	bls.n	800a390 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a34e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	4413      	add	r3, r2
 800a354:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	f003 0307 	and.w	r3, r3, #7
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d00b      	beq.n	800a378 <pvPortMalloc+0xfc>
	__asm volatile
 800a360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a364:	f383 8811 	msr	BASEPRI, r3
 800a368:	f3bf 8f6f 	isb	sy
 800a36c:	f3bf 8f4f 	dsb	sy
 800a370:	613b      	str	r3, [r7, #16]
}
 800a372:	bf00      	nop
 800a374:	bf00      	nop
 800a376:	e7fd      	b.n	800a374 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a37a:	685a      	ldr	r2, [r3, #4]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	1ad2      	subs	r2, r2, r3
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a38a:	69b8      	ldr	r0, [r7, #24]
 800a38c:	f000 f90a 	bl	800a5a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a390:	4b1d      	ldr	r3, [pc, #116]	@ (800a408 <pvPortMalloc+0x18c>)
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	1ad3      	subs	r3, r2, r3
 800a39a:	4a1b      	ldr	r2, [pc, #108]	@ (800a408 <pvPortMalloc+0x18c>)
 800a39c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a39e:	4b1a      	ldr	r3, [pc, #104]	@ (800a408 <pvPortMalloc+0x18c>)
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	4b1b      	ldr	r3, [pc, #108]	@ (800a410 <pvPortMalloc+0x194>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d203      	bcs.n	800a3b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a3aa:	4b17      	ldr	r3, [pc, #92]	@ (800a408 <pvPortMalloc+0x18c>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a18      	ldr	r2, [pc, #96]	@ (800a410 <pvPortMalloc+0x194>)
 800a3b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3b4:	685a      	ldr	r2, [r3, #4]
 800a3b6:	4b13      	ldr	r3, [pc, #76]	@ (800a404 <pvPortMalloc+0x188>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	431a      	orrs	r2, r3
 800a3bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a3c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a3c6:	4b13      	ldr	r3, [pc, #76]	@ (800a414 <pvPortMalloc+0x198>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	4a11      	ldr	r2, [pc, #68]	@ (800a414 <pvPortMalloc+0x198>)
 800a3ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a3d0:	f7fe fcc8 	bl	8008d64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3d4:	69fb      	ldr	r3, [r7, #28]
 800a3d6:	f003 0307 	and.w	r3, r3, #7
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d00b      	beq.n	800a3f6 <pvPortMalloc+0x17a>
	__asm volatile
 800a3de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3e2:	f383 8811 	msr	BASEPRI, r3
 800a3e6:	f3bf 8f6f 	isb	sy
 800a3ea:	f3bf 8f4f 	dsb	sy
 800a3ee:	60fb      	str	r3, [r7, #12]
}
 800a3f0:	bf00      	nop
 800a3f2:	bf00      	nop
 800a3f4:	e7fd      	b.n	800a3f2 <pvPortMalloc+0x176>
	return pvReturn;
 800a3f6:	69fb      	ldr	r3, [r7, #28]
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3728      	adds	r7, #40	@ 0x28
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}
 800a400:	20006160 	.word	0x20006160
 800a404:	20006174 	.word	0x20006174
 800a408:	20006164 	.word	0x20006164
 800a40c:	20006158 	.word	0x20006158
 800a410:	20006168 	.word	0x20006168
 800a414:	2000616c 	.word	0x2000616c

0800a418 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b086      	sub	sp, #24
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d04f      	beq.n	800a4ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a42a:	2308      	movs	r3, #8
 800a42c:	425b      	negs	r3, r3
 800a42e:	697a      	ldr	r2, [r7, #20]
 800a430:	4413      	add	r3, r2
 800a432:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	685a      	ldr	r2, [r3, #4]
 800a43c:	4b25      	ldr	r3, [pc, #148]	@ (800a4d4 <vPortFree+0xbc>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4013      	ands	r3, r2
 800a442:	2b00      	cmp	r3, #0
 800a444:	d10b      	bne.n	800a45e <vPortFree+0x46>
	__asm volatile
 800a446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a44a:	f383 8811 	msr	BASEPRI, r3
 800a44e:	f3bf 8f6f 	isb	sy
 800a452:	f3bf 8f4f 	dsb	sy
 800a456:	60fb      	str	r3, [r7, #12]
}
 800a458:	bf00      	nop
 800a45a:	bf00      	nop
 800a45c:	e7fd      	b.n	800a45a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00b      	beq.n	800a47e <vPortFree+0x66>
	__asm volatile
 800a466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a46a:	f383 8811 	msr	BASEPRI, r3
 800a46e:	f3bf 8f6f 	isb	sy
 800a472:	f3bf 8f4f 	dsb	sy
 800a476:	60bb      	str	r3, [r7, #8]
}
 800a478:	bf00      	nop
 800a47a:	bf00      	nop
 800a47c:	e7fd      	b.n	800a47a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	685a      	ldr	r2, [r3, #4]
 800a482:	4b14      	ldr	r3, [pc, #80]	@ (800a4d4 <vPortFree+0xbc>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4013      	ands	r3, r2
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d01e      	beq.n	800a4ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d11a      	bne.n	800a4ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	685a      	ldr	r2, [r3, #4]
 800a498:	4b0e      	ldr	r3, [pc, #56]	@ (800a4d4 <vPortFree+0xbc>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	43db      	mvns	r3, r3
 800a49e:	401a      	ands	r2, r3
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a4a4:	f7fe fc50 	bl	8008d48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	685a      	ldr	r2, [r3, #4]
 800a4ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a4d8 <vPortFree+0xc0>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4413      	add	r3, r2
 800a4b2:	4a09      	ldr	r2, [pc, #36]	@ (800a4d8 <vPortFree+0xc0>)
 800a4b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a4b6:	6938      	ldr	r0, [r7, #16]
 800a4b8:	f000 f874 	bl	800a5a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a4bc:	4b07      	ldr	r3, [pc, #28]	@ (800a4dc <vPortFree+0xc4>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	4a06      	ldr	r2, [pc, #24]	@ (800a4dc <vPortFree+0xc4>)
 800a4c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a4c6:	f7fe fc4d 	bl	8008d64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a4ca:	bf00      	nop
 800a4cc:	3718      	adds	r7, #24
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	20006174 	.word	0x20006174
 800a4d8:	20006164 	.word	0x20006164
 800a4dc:	20006170 	.word	0x20006170

0800a4e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a4e6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a4ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a4ec:	4b27      	ldr	r3, [pc, #156]	@ (800a58c <prvHeapInit+0xac>)
 800a4ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f003 0307 	and.w	r3, r3, #7
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d00c      	beq.n	800a514 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	3307      	adds	r3, #7
 800a4fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f023 0307 	bic.w	r3, r3, #7
 800a506:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a508:	68ba      	ldr	r2, [r7, #8]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	1ad3      	subs	r3, r2, r3
 800a50e:	4a1f      	ldr	r2, [pc, #124]	@ (800a58c <prvHeapInit+0xac>)
 800a510:	4413      	add	r3, r2
 800a512:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a518:	4a1d      	ldr	r2, [pc, #116]	@ (800a590 <prvHeapInit+0xb0>)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a51e:	4b1c      	ldr	r3, [pc, #112]	@ (800a590 <prvHeapInit+0xb0>)
 800a520:	2200      	movs	r2, #0
 800a522:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	68ba      	ldr	r2, [r7, #8]
 800a528:	4413      	add	r3, r2
 800a52a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a52c:	2208      	movs	r2, #8
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	1a9b      	subs	r3, r3, r2
 800a532:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f023 0307 	bic.w	r3, r3, #7
 800a53a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	4a15      	ldr	r2, [pc, #84]	@ (800a594 <prvHeapInit+0xb4>)
 800a540:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a542:	4b14      	ldr	r3, [pc, #80]	@ (800a594 <prvHeapInit+0xb4>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	2200      	movs	r2, #0
 800a548:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a54a:	4b12      	ldr	r3, [pc, #72]	@ (800a594 <prvHeapInit+0xb4>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	2200      	movs	r2, #0
 800a550:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	68fa      	ldr	r2, [r7, #12]
 800a55a:	1ad2      	subs	r2, r2, r3
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a560:	4b0c      	ldr	r3, [pc, #48]	@ (800a594 <prvHeapInit+0xb4>)
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	4a0a      	ldr	r2, [pc, #40]	@ (800a598 <prvHeapInit+0xb8>)
 800a56e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	4a09      	ldr	r2, [pc, #36]	@ (800a59c <prvHeapInit+0xbc>)
 800a576:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a578:	4b09      	ldr	r3, [pc, #36]	@ (800a5a0 <prvHeapInit+0xc0>)
 800a57a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a57e:	601a      	str	r2, [r3, #0]
}
 800a580:	bf00      	nop
 800a582:	3714      	adds	r7, #20
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr
 800a58c:	20005558 	.word	0x20005558
 800a590:	20006158 	.word	0x20006158
 800a594:	20006160 	.word	0x20006160
 800a598:	20006168 	.word	0x20006168
 800a59c:	20006164 	.word	0x20006164
 800a5a0:	20006174 	.word	0x20006174

0800a5a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b085      	sub	sp, #20
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a5ac:	4b28      	ldr	r3, [pc, #160]	@ (800a650 <prvInsertBlockIntoFreeList+0xac>)
 800a5ae:	60fb      	str	r3, [r7, #12]
 800a5b0:	e002      	b.n	800a5b8 <prvInsertBlockIntoFreeList+0x14>
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	60fb      	str	r3, [r7, #12]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d8f7      	bhi.n	800a5b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	68ba      	ldr	r2, [r7, #8]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d108      	bne.n	800a5e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	685a      	ldr	r2, [r3, #4]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	441a      	add	r2, r3
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	68ba      	ldr	r2, [r7, #8]
 800a5f0:	441a      	add	r2, r3
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d118      	bne.n	800a62c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	4b15      	ldr	r3, [pc, #84]	@ (800a654 <prvInsertBlockIntoFreeList+0xb0>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	429a      	cmp	r2, r3
 800a604:	d00d      	beq.n	800a622 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	685a      	ldr	r2, [r3, #4]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	441a      	add	r2, r3
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	601a      	str	r2, [r3, #0]
 800a620:	e008      	b.n	800a634 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a622:	4b0c      	ldr	r3, [pc, #48]	@ (800a654 <prvInsertBlockIntoFreeList+0xb0>)
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	601a      	str	r2, [r3, #0]
 800a62a:	e003      	b.n	800a634 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681a      	ldr	r2, [r3, #0]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a634:	68fa      	ldr	r2, [r7, #12]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	429a      	cmp	r2, r3
 800a63a:	d002      	beq.n	800a642 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a642:	bf00      	nop
 800a644:	3714      	adds	r7, #20
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr
 800a64e:	bf00      	nop
 800a650:	20006158 	.word	0x20006158
 800a654:	20006160 	.word	0x20006160

0800a658 <rcl_get_zero_initialized_init_options>:
 800a658:	2000      	movs	r0, #0
 800a65a:	4770      	bx	lr

0800a65c <rcl_init_options_init>:
 800a65c:	b084      	sub	sp, #16
 800a65e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a660:	b097      	sub	sp, #92	@ 0x5c
 800a662:	ae1d      	add	r6, sp, #116	@ 0x74
 800a664:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800a668:	2800      	cmp	r0, #0
 800a66a:	d058      	beq.n	800a71e <rcl_init_options_init+0xc2>
 800a66c:	6803      	ldr	r3, [r0, #0]
 800a66e:	4605      	mov	r5, r0
 800a670:	b133      	cbz	r3, 800a680 <rcl_init_options_init+0x24>
 800a672:	2464      	movs	r4, #100	@ 0x64
 800a674:	4620      	mov	r0, r4
 800a676:	b017      	add	sp, #92	@ 0x5c
 800a678:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a67c:	b004      	add	sp, #16
 800a67e:	4770      	bx	lr
 800a680:	4630      	mov	r0, r6
 800a682:	f001 f853 	bl	800b72c <rcutils_allocator_is_valid>
 800a686:	2800      	cmp	r0, #0
 800a688:	d049      	beq.n	800a71e <rcl_init_options_init+0xc2>
 800a68a:	46b4      	mov	ip, r6
 800a68c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a690:	ac11      	add	r4, sp, #68	@ 0x44
 800a692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a694:	f8dc 3000 	ldr.w	r3, [ip]
 800a698:	6023      	str	r3, [r4, #0]
 800a69a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800a69c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a69e:	2050      	movs	r0, #80	@ 0x50
 800a6a0:	4798      	blx	r3
 800a6a2:	4604      	mov	r4, r0
 800a6a4:	6028      	str	r0, [r5, #0]
 800a6a6:	2800      	cmp	r0, #0
 800a6a8:	d03b      	beq.n	800a722 <rcl_init_options_init+0xc6>
 800a6aa:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800a6ae:	4686      	mov	lr, r0
 800a6b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a6b4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a6b8:	f8dc 3000 	ldr.w	r3, [ip]
 800a6bc:	f8ce 3000 	str.w	r3, [lr]
 800a6c0:	a802      	add	r0, sp, #8
 800a6c2:	f001 f8c5 	bl	800b850 <rmw_get_zero_initialized_init_options>
 800a6c6:	f10d 0e08 	add.w	lr, sp, #8
 800a6ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a6ce:	f104 0c18 	add.w	ip, r4, #24
 800a6d2:	682f      	ldr	r7, [r5, #0]
 800a6d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a6d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a6dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a6e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a6e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a6e8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800a6ec:	ac20      	add	r4, sp, #128	@ 0x80
 800a6ee:	e88c 0003 	stmia.w	ip, {r0, r1}
 800a6f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a6f6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a6fa:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800a6fe:	f107 0018 	add.w	r0, r7, #24
 800a702:	f001 f8cf 	bl	800b8a4 <rmw_init_options_init>
 800a706:	4604      	mov	r4, r0
 800a708:	2800      	cmp	r0, #0
 800a70a:	d0b3      	beq.n	800a674 <rcl_init_options_init+0x18>
 800a70c:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800a70e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a710:	6828      	ldr	r0, [r5, #0]
 800a712:	4798      	blx	r3
 800a714:	4620      	mov	r0, r4
 800a716:	f006 fce1 	bl	80110dc <rcl_convert_rmw_ret_to_rcl_ret>
 800a71a:	4604      	mov	r4, r0
 800a71c:	e7aa      	b.n	800a674 <rcl_init_options_init+0x18>
 800a71e:	240b      	movs	r4, #11
 800a720:	e7a8      	b.n	800a674 <rcl_init_options_init+0x18>
 800a722:	240a      	movs	r4, #10
 800a724:	e7a6      	b.n	800a674 <rcl_init_options_init+0x18>
 800a726:	bf00      	nop

0800a728 <rcl_init_options_fini>:
 800a728:	b530      	push	{r4, r5, lr}
 800a72a:	b087      	sub	sp, #28
 800a72c:	b1f0      	cbz	r0, 800a76c <rcl_init_options_fini+0x44>
 800a72e:	6803      	ldr	r3, [r0, #0]
 800a730:	4604      	mov	r4, r0
 800a732:	b1db      	cbz	r3, 800a76c <rcl_init_options_fini+0x44>
 800a734:	469c      	mov	ip, r3
 800a736:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a73a:	f10d 0e04 	add.w	lr, sp, #4
 800a73e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a742:	f8dc 3000 	ldr.w	r3, [ip]
 800a746:	f8ce 3000 	str.w	r3, [lr]
 800a74a:	a801      	add	r0, sp, #4
 800a74c:	f000 ffee 	bl	800b72c <rcutils_allocator_is_valid>
 800a750:	b160      	cbz	r0, 800a76c <rcl_init_options_fini+0x44>
 800a752:	6820      	ldr	r0, [r4, #0]
 800a754:	3018      	adds	r0, #24
 800a756:	f001 f955 	bl	800ba04 <rmw_init_options_fini>
 800a75a:	4605      	mov	r5, r0
 800a75c:	b950      	cbnz	r0, 800a774 <rcl_init_options_fini+0x4c>
 800a75e:	6820      	ldr	r0, [r4, #0]
 800a760:	9b02      	ldr	r3, [sp, #8]
 800a762:	9905      	ldr	r1, [sp, #20]
 800a764:	4798      	blx	r3
 800a766:	4628      	mov	r0, r5
 800a768:	b007      	add	sp, #28
 800a76a:	bd30      	pop	{r4, r5, pc}
 800a76c:	250b      	movs	r5, #11
 800a76e:	4628      	mov	r0, r5
 800a770:	b007      	add	sp, #28
 800a772:	bd30      	pop	{r4, r5, pc}
 800a774:	f006 fcb2 	bl	80110dc <rcl_convert_rmw_ret_to_rcl_ret>
 800a778:	4605      	mov	r5, r0
 800a77a:	e7f8      	b.n	800a76e <rcl_init_options_fini+0x46>

0800a77c <rcl_init_options_copy>:
 800a77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a780:	b094      	sub	sp, #80	@ 0x50
 800a782:	2800      	cmp	r0, #0
 800a784:	d058      	beq.n	800a838 <rcl_init_options_copy+0xbc>
 800a786:	4604      	mov	r4, r0
 800a788:	6800      	ldr	r0, [r0, #0]
 800a78a:	2800      	cmp	r0, #0
 800a78c:	d054      	beq.n	800a838 <rcl_init_options_copy+0xbc>
 800a78e:	460e      	mov	r6, r1
 800a790:	f000 ffcc 	bl	800b72c <rcutils_allocator_is_valid>
 800a794:	2800      	cmp	r0, #0
 800a796:	d04f      	beq.n	800a838 <rcl_init_options_copy+0xbc>
 800a798:	2e00      	cmp	r6, #0
 800a79a:	d04d      	beq.n	800a838 <rcl_init_options_copy+0xbc>
 800a79c:	6833      	ldr	r3, [r6, #0]
 800a79e:	b123      	cbz	r3, 800a7aa <rcl_init_options_copy+0x2e>
 800a7a0:	2464      	movs	r4, #100	@ 0x64
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	b014      	add	sp, #80	@ 0x50
 800a7a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7aa:	6827      	ldr	r7, [r4, #0]
 800a7ac:	46bc      	mov	ip, r7
 800a7ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a7b2:	ad0f      	add	r5, sp, #60	@ 0x3c
 800a7b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a7b6:	f8dc 3000 	ldr.w	r3, [ip]
 800a7ba:	f8d7 8000 	ldr.w	r8, [r7]
 800a7be:	602b      	str	r3, [r5, #0]
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	2050      	movs	r0, #80	@ 0x50
 800a7c4:	47c0      	blx	r8
 800a7c6:	4605      	mov	r5, r0
 800a7c8:	6030      	str	r0, [r6, #0]
 800a7ca:	b3d0      	cbz	r0, 800a842 <rcl_init_options_copy+0xc6>
 800a7cc:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800a7d0:	4686      	mov	lr, r0
 800a7d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a7d6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a7da:	f8dc 3000 	ldr.w	r3, [ip]
 800a7de:	f8ce 3000 	str.w	r3, [lr]
 800a7e2:	4668      	mov	r0, sp
 800a7e4:	f001 f834 	bl	800b850 <rmw_get_zero_initialized_init_options>
 800a7e8:	46ee      	mov	lr, sp
 800a7ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a7ee:	f105 0c18 	add.w	ip, r5, #24
 800a7f2:	6824      	ldr	r4, [r4, #0]
 800a7f4:	6835      	ldr	r5, [r6, #0]
 800a7f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a7fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a7fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a802:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a806:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a80a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800a80e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800a812:	f104 0018 	add.w	r0, r4, #24
 800a816:	f105 0118 	add.w	r1, r5, #24
 800a81a:	f001 f8ab 	bl	800b974 <rmw_init_options_copy>
 800a81e:	4604      	mov	r4, r0
 800a820:	2800      	cmp	r0, #0
 800a822:	d0be      	beq.n	800a7a2 <rcl_init_options_copy+0x26>
 800a824:	f000 ff90 	bl	800b748 <rcutils_get_error_string>
 800a828:	f000 ffa6 	bl	800b778 <rcutils_reset_error>
 800a82c:	4630      	mov	r0, r6
 800a82e:	f7ff ff7b 	bl	800a728 <rcl_init_options_fini>
 800a832:	b140      	cbz	r0, 800a846 <rcl_init_options_copy+0xca>
 800a834:	4604      	mov	r4, r0
 800a836:	e7b4      	b.n	800a7a2 <rcl_init_options_copy+0x26>
 800a838:	240b      	movs	r4, #11
 800a83a:	4620      	mov	r0, r4
 800a83c:	b014      	add	sp, #80	@ 0x50
 800a83e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a842:	240a      	movs	r4, #10
 800a844:	e7ad      	b.n	800a7a2 <rcl_init_options_copy+0x26>
 800a846:	4620      	mov	r0, r4
 800a848:	b014      	add	sp, #80	@ 0x50
 800a84a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a84e:	f006 bc45 	b.w	80110dc <rcl_convert_rmw_ret_to_rcl_ret>
 800a852:	bf00      	nop

0800a854 <rcl_init_options_set_domain_id>:
 800a854:	b120      	cbz	r0, 800a860 <rcl_init_options_set_domain_id+0xc>
 800a856:	6803      	ldr	r3, [r0, #0]
 800a858:	b113      	cbz	r3, 800a860 <rcl_init_options_set_domain_id+0xc>
 800a85a:	6259      	str	r1, [r3, #36]	@ 0x24
 800a85c:	2000      	movs	r0, #0
 800a85e:	4770      	bx	lr
 800a860:	200b      	movs	r0, #11
 800a862:	4770      	bx	lr

0800a864 <_rclc_check_for_new_data>:
 800a864:	2800      	cmp	r0, #0
 800a866:	d046      	beq.n	800a8f6 <_rclc_check_for_new_data+0x92>
 800a868:	b510      	push	{r4, lr}
 800a86a:	7802      	ldrb	r2, [r0, #0]
 800a86c:	b084      	sub	sp, #16
 800a86e:	4603      	mov	r3, r0
 800a870:	2a0a      	cmp	r2, #10
 800a872:	d842      	bhi.n	800a8fa <_rclc_check_for_new_data+0x96>
 800a874:	e8df f002 	tbb	[pc, r2]
 800a878:	14181212 	.word	0x14181212
 800a87c:	06060614 	.word	0x06060614
 800a880:	2e1a      	.short	0x2e1a
 800a882:	16          	.byte	0x16
 800a883:	00          	.byte	0x00
 800a884:	6a0a      	ldr	r2, [r1, #32]
 800a886:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a888:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a88c:	2000      	movs	r0, #0
 800a88e:	1a12      	subs	r2, r2, r0
 800a890:	bf18      	it	ne
 800a892:	2201      	movne	r2, #1
 800a894:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800a898:	b004      	add	sp, #16
 800a89a:	bd10      	pop	{r4, pc}
 800a89c:	680a      	ldr	r2, [r1, #0]
 800a89e:	e7f2      	b.n	800a886 <_rclc_check_for_new_data+0x22>
 800a8a0:	698a      	ldr	r2, [r1, #24]
 800a8a2:	e7f0      	b.n	800a886 <_rclc_check_for_new_data+0x22>
 800a8a4:	688a      	ldr	r2, [r1, #8]
 800a8a6:	e7ee      	b.n	800a886 <_rclc_check_for_new_data+0x22>
 800a8a8:	690a      	ldr	r2, [r1, #16]
 800a8aa:	e7ec      	b.n	800a886 <_rclc_check_for_new_data+0x22>
 800a8ac:	685c      	ldr	r4, [r3, #4]
 800a8ae:	4608      	mov	r0, r1
 800a8b0:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800a8b4:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800a8b8:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800a8bc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800a8c0:	9300      	str	r3, [sp, #0]
 800a8c2:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800a8c6:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800a8ca:	f104 0110 	add.w	r1, r4, #16
 800a8ce:	f008 fe2b 	bl	8013528 <rcl_action_client_wait_set_get_entities_ready>
 800a8d2:	e7e1      	b.n	800a898 <_rclc_check_for_new_data+0x34>
 800a8d4:	685c      	ldr	r4, [r3, #4]
 800a8d6:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800a8da:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800a8de:	e9cd 3200 	strd	r3, r2, [sp]
 800a8e2:	4608      	mov	r0, r1
 800a8e4:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800a8e8:	f104 0220 	add.w	r2, r4, #32
 800a8ec:	f104 0110 	add.w	r1, r4, #16
 800a8f0:	f009 f832 	bl	8013958 <rcl_action_server_wait_set_get_entities_ready>
 800a8f4:	e7d0      	b.n	800a898 <_rclc_check_for_new_data+0x34>
 800a8f6:	200b      	movs	r0, #11
 800a8f8:	4770      	bx	lr
 800a8fa:	2001      	movs	r0, #1
 800a8fc:	e7cc      	b.n	800a898 <_rclc_check_for_new_data+0x34>
 800a8fe:	bf00      	nop

0800a900 <_rclc_take_new_data>:
 800a900:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a902:	b09b      	sub	sp, #108	@ 0x6c
 800a904:	2800      	cmp	r0, #0
 800a906:	f000 8088 	beq.w	800aa1a <_rclc_take_new_data+0x11a>
 800a90a:	7803      	ldrb	r3, [r0, #0]
 800a90c:	4604      	mov	r4, r0
 800a90e:	2b0a      	cmp	r3, #10
 800a910:	f200 8167 	bhi.w	800abe2 <_rclc_take_new_data+0x2e2>
 800a914:	e8df f003 	tbb	[pc, r3]
 800a918:	44152d2d 	.word	0x44152d2d
 800a91c:	19191944 	.word	0x19191944
 800a920:	065a      	.short	0x065a
 800a922:	15          	.byte	0x15
 800a923:	00          	.byte	0x00
 800a924:	6840      	ldr	r0, [r0, #4]
 800a926:	f890 3020 	ldrb.w	r3, [r0, #32]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	f040 80b2 	bne.w	800aa94 <_rclc_take_new_data+0x194>
 800a930:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800a934:	2b00      	cmp	r3, #0
 800a936:	f040 80e4 	bne.w	800ab02 <_rclc_take_new_data+0x202>
 800a93a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d16f      	bne.n	800aa22 <_rclc_take_new_data+0x122>
 800a942:	2500      	movs	r5, #0
 800a944:	4628      	mov	r0, r5
 800a946:	b01b      	add	sp, #108	@ 0x6c
 800a948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a94a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a94c:	6a0b      	ldr	r3, [r1, #32]
 800a94e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d0f5      	beq.n	800a942 <_rclc_take_new_data+0x42>
 800a956:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a95a:	f104 0110 	add.w	r1, r4, #16
 800a95e:	f007 f8b5 	bl	8011acc <rcl_take_request>
 800a962:	4605      	mov	r5, r0
 800a964:	2800      	cmp	r0, #0
 800a966:	d0ec      	beq.n	800a942 <_rclc_take_new_data+0x42>
 800a968:	f240 2359 	movw	r3, #601	@ 0x259
 800a96c:	4298      	cmp	r0, r3
 800a96e:	d013      	beq.n	800a998 <_rclc_take_new_data+0x98>
 800a970:	e029      	b.n	800a9c6 <_rclc_take_new_data+0xc6>
 800a972:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a974:	680b      	ldr	r3, [r1, #0]
 800a976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d0e1      	beq.n	800a942 <_rclc_take_new_data+0x42>
 800a97e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800a982:	2300      	movs	r3, #0
 800a984:	aa0a      	add	r2, sp, #40	@ 0x28
 800a986:	f007 f9df 	bl	8011d48 <rcl_take>
 800a98a:	4605      	mov	r5, r0
 800a98c:	2800      	cmp	r0, #0
 800a98e:	d0d9      	beq.n	800a944 <_rclc_take_new_data+0x44>
 800a990:	f240 1391 	movw	r3, #401	@ 0x191
 800a994:	4298      	cmp	r0, r3
 800a996:	d116      	bne.n	800a9c6 <_rclc_take_new_data+0xc6>
 800a998:	2300      	movs	r3, #0
 800a99a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800a99e:	e7d1      	b.n	800a944 <_rclc_take_new_data+0x44>
 800a9a0:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800a9a2:	698b      	ldr	r3, [r1, #24]
 800a9a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d0ca      	beq.n	800a942 <_rclc_take_new_data+0x42>
 800a9ac:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800a9b0:	f104 0110 	add.w	r1, r4, #16
 800a9b4:	f006 fb40 	bl	8011038 <rcl_take_response>
 800a9b8:	4605      	mov	r5, r0
 800a9ba:	2800      	cmp	r0, #0
 800a9bc:	d0c1      	beq.n	800a942 <_rclc_take_new_data+0x42>
 800a9be:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800a9c2:	4298      	cmp	r0, r3
 800a9c4:	d0be      	beq.n	800a944 <_rclc_take_new_data+0x44>
 800a9c6:	f000 fed7 	bl	800b778 <rcutils_reset_error>
 800a9ca:	e7bb      	b.n	800a944 <_rclc_take_new_data+0x44>
 800a9cc:	6840      	ldr	r0, [r0, #4]
 800a9ce:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d17d      	bne.n	800aad2 <_rclc_take_new_data+0x1d2>
 800a9d6:	69c3      	ldr	r3, [r0, #28]
 800a9d8:	b11b      	cbz	r3, 800a9e2 <_rclc_take_new_data+0xe2>
 800a9da:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d144      	bne.n	800aa6c <_rclc_take_new_data+0x16c>
 800a9e2:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	f040 80ac 	bne.w	800ab44 <_rclc_take_new_data+0x244>
 800a9ec:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d0a6      	beq.n	800a942 <_rclc_take_new_data+0x42>
 800a9f4:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800a9f6:	a90a      	add	r1, sp, #40	@ 0x28
 800a9f8:	3010      	adds	r0, #16
 800a9fa:	f008 fc6d 	bl	80132d8 <rcl_action_take_result_response>
 800a9fe:	4605      	mov	r5, r0
 800aa00:	2800      	cmp	r0, #0
 800aa02:	d1e0      	bne.n	800a9c6 <_rclc_take_new_data+0xc6>
 800aa04:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aa08:	6860      	ldr	r0, [r4, #4]
 800aa0a:	f009 f8c9 	bl	8013ba0 <rclc_action_find_handle_by_result_request_sequence_number>
 800aa0e:	2800      	cmp	r0, #0
 800aa10:	d098      	beq.n	800a944 <_rclc_take_new_data+0x44>
 800aa12:	2301      	movs	r3, #1
 800aa14:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800aa18:	e794      	b.n	800a944 <_rclc_take_new_data+0x44>
 800aa1a:	250b      	movs	r5, #11
 800aa1c:	4628      	mov	r0, r5
 800aa1e:	b01b      	add	sp, #108	@ 0x6c
 800aa20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa22:	ae04      	add	r6, sp, #16
 800aa24:	aa0a      	add	r2, sp, #40	@ 0x28
 800aa26:	3010      	adds	r0, #16
 800aa28:	4631      	mov	r1, r6
 800aa2a:	f008 fec9 	bl	80137c0 <rcl_action_take_cancel_request>
 800aa2e:	4605      	mov	r5, r0
 800aa30:	2800      	cmp	r0, #0
 800aa32:	d1c8      	bne.n	800a9c6 <_rclc_take_new_data+0xc6>
 800aa34:	6860      	ldr	r0, [r4, #4]
 800aa36:	a90a      	add	r1, sp, #40	@ 0x28
 800aa38:	f009 f870 	bl	8013b1c <rclc_action_find_goal_handle_by_uuid>
 800aa3c:	4607      	mov	r7, r0
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	f000 80bb 	beq.w	800abba <_rclc_take_new_data+0x2ba>
 800aa44:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800aa48:	2101      	movs	r1, #1
 800aa4a:	f008 fff1 	bl	8013a30 <rcl_action_transition_goal_state>
 800aa4e:	2803      	cmp	r0, #3
 800aa50:	4684      	mov	ip, r0
 800aa52:	f040 80a7 	bne.w	800aba4 <_rclc_take_new_data+0x2a4>
 800aa56:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800aa58:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800aa5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa5e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800aa62:	e884 0003 	stmia.w	r4, {r0, r1}
 800aa66:	f887 c008 	strb.w	ip, [r7, #8]
 800aa6a:	e76b      	b.n	800a944 <_rclc_take_new_data+0x44>
 800aa6c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800aa6e:	3010      	adds	r0, #16
 800aa70:	f008 fcb2 	bl	80133d8 <rcl_action_take_feedback>
 800aa74:	4605      	mov	r5, r0
 800aa76:	2800      	cmp	r0, #0
 800aa78:	d1a5      	bne.n	800a9c6 <_rclc_take_new_data+0xc6>
 800aa7a:	6860      	ldr	r0, [r4, #4]
 800aa7c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800aa7e:	f009 f84d 	bl	8013b1c <rclc_action_find_goal_handle_by_uuid>
 800aa82:	4603      	mov	r3, r0
 800aa84:	2800      	cmp	r0, #0
 800aa86:	f000 80a3 	beq.w	800abd0 <_rclc_take_new_data+0x2d0>
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	6860      	ldr	r0, [r4, #4]
 800aa8e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800aa92:	e7a6      	b.n	800a9e2 <_rclc_take_new_data+0xe2>
 800aa94:	f009 f81c 	bl	8013ad0 <rclc_action_take_goal_handle>
 800aa98:	4606      	mov	r6, r0
 800aa9a:	6860      	ldr	r0, [r4, #4]
 800aa9c:	2e00      	cmp	r6, #0
 800aa9e:	f43f af47 	beq.w	800a930 <_rclc_take_new_data+0x30>
 800aaa2:	6070      	str	r0, [r6, #4]
 800aaa4:	69f2      	ldr	r2, [r6, #28]
 800aaa6:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800aaaa:	3010      	adds	r0, #16
 800aaac:	f008 fdd0 	bl	8013650 <rcl_action_take_goal_request>
 800aab0:	4605      	mov	r5, r0
 800aab2:	2800      	cmp	r0, #0
 800aab4:	f040 808e 	bne.w	800abd4 <_rclc_take_new_data+0x2d4>
 800aab8:	69f7      	ldr	r7, [r6, #28]
 800aaba:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800aabc:	7235      	strb	r5, [r6, #8]
 800aabe:	f8c6 0009 	str.w	r0, [r6, #9]
 800aac2:	f8c6 100d 	str.w	r1, [r6, #13]
 800aac6:	6860      	ldr	r0, [r4, #4]
 800aac8:	f8c6 2011 	str.w	r2, [r6, #17]
 800aacc:	f8c6 3015 	str.w	r3, [r6, #21]
 800aad0:	e72e      	b.n	800a930 <_rclc_take_new_data+0x30>
 800aad2:	aa04      	add	r2, sp, #16
 800aad4:	a90a      	add	r1, sp, #40	@ 0x28
 800aad6:	3010      	adds	r0, #16
 800aad8:	f008 fb86 	bl	80131e8 <rcl_action_take_goal_response>
 800aadc:	4605      	mov	r5, r0
 800aade:	2800      	cmp	r0, #0
 800aae0:	f47f af71 	bne.w	800a9c6 <_rclc_take_new_data+0xc6>
 800aae4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aae8:	6860      	ldr	r0, [r4, #4]
 800aaea:	f009 f847 	bl	8013b7c <rclc_action_find_handle_by_goal_request_sequence_number>
 800aaee:	b130      	cbz	r0, 800aafe <_rclc_take_new_data+0x1fe>
 800aaf0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800aaf4:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800aaf8:	2201      	movs	r2, #1
 800aafa:	f880 2020 	strb.w	r2, [r0, #32]
 800aafe:	6860      	ldr	r0, [r4, #4]
 800ab00:	e769      	b.n	800a9d6 <_rclc_take_new_data+0xd6>
 800ab02:	aa04      	add	r2, sp, #16
 800ab04:	3010      	adds	r0, #16
 800ab06:	a90a      	add	r1, sp, #40	@ 0x28
 800ab08:	f008 fe1a 	bl	8013740 <rcl_action_take_result_request>
 800ab0c:	4605      	mov	r5, r0
 800ab0e:	2800      	cmp	r0, #0
 800ab10:	f47f af59 	bne.w	800a9c6 <_rclc_take_new_data+0xc6>
 800ab14:	6860      	ldr	r0, [r4, #4]
 800ab16:	a904      	add	r1, sp, #16
 800ab18:	f009 f800 	bl	8013b1c <rclc_action_find_goal_handle_by_uuid>
 800ab1c:	4607      	mov	r7, r0
 800ab1e:	b160      	cbz	r0, 800ab3a <_rclc_take_new_data+0x23a>
 800ab20:	ad0a      	add	r5, sp, #40	@ 0x28
 800ab22:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800ab26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab28:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ab2a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ab2e:	f04f 0c02 	mov.w	ip, #2
 800ab32:	e886 0003 	stmia.w	r6, {r0, r1}
 800ab36:	f887 c008 	strb.w	ip, [r7, #8]
 800ab3a:	6860      	ldr	r0, [r4, #4]
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800ab42:	e6fa      	b.n	800a93a <_rclc_take_new_data+0x3a>
 800ab44:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800ab48:	a90a      	add	r1, sp, #40	@ 0x28
 800ab4a:	3010      	adds	r0, #16
 800ab4c:	f008 fc04 	bl	8013358 <rcl_action_take_cancel_response>
 800ab50:	4605      	mov	r5, r0
 800ab52:	2800      	cmp	r0, #0
 800ab54:	f47f af37 	bne.w	800a9c6 <_rclc_take_new_data+0xc6>
 800ab58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ab5c:	6860      	ldr	r0, [r4, #4]
 800ab5e:	f009 f831 	bl	8013bc4 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800ab62:	4606      	mov	r6, r0
 800ab64:	6860      	ldr	r0, [r4, #4]
 800ab66:	2e00      	cmp	r6, #0
 800ab68:	f43f af40 	beq.w	800a9ec <_rclc_take_new_data+0xec>
 800ab6c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ab6e:	2701      	movs	r7, #1
 800ab70:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	f43f af3a 	beq.w	800a9ec <_rclc_take_new_data+0xec>
 800ab78:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ab7a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800ab7e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800ab82:	f008 ffcb 	bl	8013b1c <rclc_action_find_goal_handle_by_uuid>
 800ab86:	b138      	cbz	r0, 800ab98 <_rclc_take_new_data+0x298>
 800ab88:	6860      	ldr	r0, [r4, #4]
 800ab8a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ab8c:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800ab90:	3501      	adds	r5, #1
 800ab92:	42ab      	cmp	r3, r5
 800ab94:	d8f0      	bhi.n	800ab78 <_rclc_take_new_data+0x278>
 800ab96:	e729      	b.n	800a9ec <_rclc_take_new_data+0xec>
 800ab98:	6860      	ldr	r0, [r4, #4]
 800ab9a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ab9c:	3501      	adds	r5, #1
 800ab9e:	42ab      	cmp	r3, r5
 800aba0:	d8ea      	bhi.n	800ab78 <_rclc_take_new_data+0x278>
 800aba2:	e723      	b.n	800a9ec <_rclc_take_new_data+0xec>
 800aba4:	ab06      	add	r3, sp, #24
 800aba6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aba8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800abac:	2103      	movs	r1, #3
 800abae:	e896 000c 	ldmia.w	r6, {r2, r3}
 800abb2:	6860      	ldr	r0, [r4, #4]
 800abb4:	f009 f87c 	bl	8013cb0 <rclc_action_server_goal_cancel_reject>
 800abb8:	e6c4      	b.n	800a944 <_rclc_take_new_data+0x44>
 800abba:	ab06      	add	r3, sp, #24
 800abbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800abbe:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800abc2:	2102      	movs	r1, #2
 800abc4:	e896 000c 	ldmia.w	r6, {r2, r3}
 800abc8:	6860      	ldr	r0, [r4, #4]
 800abca:	f009 f871 	bl	8013cb0 <rclc_action_server_goal_cancel_reject>
 800abce:	e6b9      	b.n	800a944 <_rclc_take_new_data+0x44>
 800abd0:	6860      	ldr	r0, [r4, #4]
 800abd2:	e706      	b.n	800a9e2 <_rclc_take_new_data+0xe2>
 800abd4:	6860      	ldr	r0, [r4, #4]
 800abd6:	4631      	mov	r1, r6
 800abd8:	f008 ff8a 	bl	8013af0 <rclc_action_remove_used_goal_handle>
 800abdc:	f000 fdcc 	bl	800b778 <rcutils_reset_error>
 800abe0:	e6b0      	b.n	800a944 <_rclc_take_new_data+0x44>
 800abe2:	2501      	movs	r5, #1
 800abe4:	e6ae      	b.n	800a944 <_rclc_take_new_data+0x44>
 800abe6:	bf00      	nop

0800abe8 <_rclc_execute.part.0>:
 800abe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abea:	7803      	ldrb	r3, [r0, #0]
 800abec:	b087      	sub	sp, #28
 800abee:	4604      	mov	r4, r0
 800abf0:	2b0a      	cmp	r3, #10
 800abf2:	f200 8136 	bhi.w	800ae62 <_rclc_execute.part.0+0x27a>
 800abf6:	e8df f003 	tbb	[pc, r3]
 800abfa:	435e      	.short	0x435e
 800abfc:	06a1664f 	.word	0x06a1664f
 800ac00:	6c1e0606 	.word	0x6c1e0606
 800ac04:	59          	.byte	0x59
 800ac05:	00          	.byte	0x00
 800ac06:	2b06      	cmp	r3, #6
 800ac08:	f000 8122 	beq.w	800ae50 <_rclc_execute.part.0+0x268>
 800ac0c:	2b07      	cmp	r3, #7
 800ac0e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ac10:	f040 8118 	bne.w	800ae44 <_rclc_execute.part.0+0x25c>
 800ac14:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800ac18:	6880      	ldr	r0, [r0, #8]
 800ac1a:	4798      	blx	r3
 800ac1c:	f104 0110 	add.w	r1, r4, #16
 800ac20:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800ac22:	6860      	ldr	r0, [r4, #4]
 800ac24:	f006 ff92 	bl	8011b4c <rcl_send_response>
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	d033      	beq.n	800ac94 <_rclc_execute.part.0+0xac>
 800ac2c:	9005      	str	r0, [sp, #20]
 800ac2e:	f000 fda3 	bl	800b778 <rcutils_reset_error>
 800ac32:	9805      	ldr	r0, [sp, #20]
 800ac34:	e02e      	b.n	800ac94 <_rclc_execute.part.0+0xac>
 800ac36:	6840      	ldr	r0, [r0, #4]
 800ac38:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f000 8086 	beq.w	800ad4e <_rclc_execute.part.0+0x166>
 800ac42:	2600      	movs	r6, #0
 800ac44:	2701      	movs	r7, #1
 800ac46:	e004      	b.n	800ac52 <_rclc_execute.part.0+0x6a>
 800ac48:	f008 ff1c 	bl	8013a84 <rclc_action_send_result_request>
 800ac4c:	b998      	cbnz	r0, 800ac76 <_rclc_execute.part.0+0x8e>
 800ac4e:	722f      	strb	r7, [r5, #8]
 800ac50:	6860      	ldr	r0, [r4, #4]
 800ac52:	f008 ffc9 	bl	8013be8 <rclc_action_find_first_handle_with_goal_response>
 800ac56:	4605      	mov	r5, r0
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	d077      	beq.n	800ad4c <_rclc_execute.part.0+0x164>
 800ac5c:	6863      	ldr	r3, [r4, #4]
 800ac5e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ac60:	699b      	ldr	r3, [r3, #24]
 800ac62:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800ac66:	f885 6020 	strb.w	r6, [r5, #32]
 800ac6a:	4798      	blx	r3
 800ac6c:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800ac70:	4628      	mov	r0, r5
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d1e8      	bne.n	800ac48 <_rclc_execute.part.0+0x60>
 800ac76:	6860      	ldr	r0, [r4, #4]
 800ac78:	4629      	mov	r1, r5
 800ac7a:	f008 ff39 	bl	8013af0 <rclc_action_remove_used_goal_handle>
 800ac7e:	e7e7      	b.n	800ac50 <_rclc_execute.part.0+0x68>
 800ac80:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800ac84:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800ac88:	2d00      	cmp	r5, #0
 800ac8a:	f000 80c9 	beq.w	800ae20 <_rclc_execute.part.0+0x238>
 800ac8e:	6880      	ldr	r0, [r0, #8]
 800ac90:	4798      	blx	r3
 800ac92:	2000      	movs	r0, #0
 800ac94:	b007      	add	sp, #28
 800ac96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac98:	6840      	ldr	r0, [r0, #4]
 800ac9a:	f007 fb63 	bl	8012364 <rcl_timer_call>
 800ac9e:	f240 3321 	movw	r3, #801	@ 0x321
 800aca2:	4298      	cmp	r0, r3
 800aca4:	d004      	beq.n	800acb0 <_rclc_execute.part.0+0xc8>
 800aca6:	2800      	cmp	r0, #0
 800aca8:	d0f4      	beq.n	800ac94 <_rclc_execute.part.0+0xac>
 800acaa:	e7bf      	b.n	800ac2c <_rclc_execute.part.0+0x44>
 800acac:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800acae:	4798      	blx	r3
 800acb0:	2000      	movs	r0, #0
 800acb2:	b007      	add	sp, #28
 800acb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acb6:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800acba:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800acbc:	b925      	cbnz	r5, 800acc8 <_rclc_execute.part.0+0xe0>
 800acbe:	4628      	mov	r0, r5
 800acc0:	4798      	blx	r3
 800acc2:	4628      	mov	r0, r5
 800acc4:	e7e6      	b.n	800ac94 <_rclc_execute.part.0+0xac>
 800acc6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800acc8:	68a0      	ldr	r0, [r4, #8]
 800acca:	4798      	blx	r3
 800accc:	2000      	movs	r0, #0
 800acce:	b007      	add	sp, #28
 800acd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acd2:	6840      	ldr	r0, [r0, #4]
 800acd4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800acd8:	bb3b      	cbnz	r3, 800ad2a <_rclc_execute.part.0+0x142>
 800acda:	f890 3020 	ldrb.w	r3, [r0, #32]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d07b      	beq.n	800adda <_rclc_execute.part.0+0x1f2>
 800ace2:	f640 0634 	movw	r6, #2100	@ 0x834
 800ace6:	2701      	movs	r7, #1
 800ace8:	e007      	b.n	800acfa <_rclc_execute.part.0+0x112>
 800acea:	4628      	mov	r0, r5
 800acec:	f008 ff94 	bl	8013c18 <rclc_action_server_response_goal_request>
 800acf0:	6860      	ldr	r0, [r4, #4]
 800acf2:	4629      	mov	r1, r5
 800acf4:	f008 fefc 	bl	8013af0 <rclc_action_remove_used_goal_handle>
 800acf8:	6860      	ldr	r0, [r4, #4]
 800acfa:	2100      	movs	r1, #0
 800acfc:	f008 ff26 	bl	8013b4c <rclc_action_find_first_handle_by_status>
 800ad00:	4605      	mov	r5, r0
 800ad02:	2800      	cmp	r0, #0
 800ad04:	d066      	beq.n	800add4 <_rclc_execute.part.0+0x1ec>
 800ad06:	6863      	ldr	r3, [r4, #4]
 800ad08:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ad0a:	699b      	ldr	r3, [r3, #24]
 800ad0c:	4798      	blx	r3
 800ad0e:	42b0      	cmp	r0, r6
 800ad10:	f04f 0100 	mov.w	r1, #0
 800ad14:	d1e9      	bne.n	800acea <_rclc_execute.part.0+0x102>
 800ad16:	2101      	movs	r1, #1
 800ad18:	4628      	mov	r0, r5
 800ad1a:	f008 ff7d 	bl	8013c18 <rclc_action_server_response_goal_request>
 800ad1e:	722f      	strb	r7, [r5, #8]
 800ad20:	e7ea      	b.n	800acf8 <_rclc_execute.part.0+0x110>
 800ad22:	6848      	ldr	r0, [r1, #4]
 800ad24:	f008 fee4 	bl	8013af0 <rclc_action_remove_used_goal_handle>
 800ad28:	6860      	ldr	r0, [r4, #4]
 800ad2a:	f008 ff1b 	bl	8013b64 <rclc_action_find_first_terminated_handle>
 800ad2e:	4601      	mov	r1, r0
 800ad30:	2800      	cmp	r0, #0
 800ad32:	d1f6      	bne.n	800ad22 <_rclc_execute.part.0+0x13a>
 800ad34:	6860      	ldr	r0, [r4, #4]
 800ad36:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800ad3a:	e7ce      	b.n	800acda <_rclc_execute.part.0+0xf2>
 800ad3c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ad3e:	6880      	ldr	r0, [r0, #8]
 800ad40:	f104 0110 	add.w	r1, r4, #16
 800ad44:	4798      	blx	r3
 800ad46:	2000      	movs	r0, #0
 800ad48:	b007      	add	sp, #28
 800ad4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad4c:	6860      	ldr	r0, [r4, #4]
 800ad4e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ad52:	b18b      	cbz	r3, 800ad78 <_rclc_execute.part.0+0x190>
 800ad54:	68c5      	ldr	r5, [r0, #12]
 800ad56:	b32d      	cbz	r5, 800ada4 <_rclc_execute.part.0+0x1bc>
 800ad58:	2600      	movs	r6, #0
 800ad5a:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800ad5e:	b143      	cbz	r3, 800ad72 <_rclc_execute.part.0+0x18a>
 800ad60:	69c3      	ldr	r3, [r0, #28]
 800ad62:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800ad66:	b123      	cbz	r3, 800ad72 <_rclc_execute.part.0+0x18a>
 800ad68:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ad6a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ad6c:	4628      	mov	r0, r5
 800ad6e:	4798      	blx	r3
 800ad70:	6860      	ldr	r0, [r4, #4]
 800ad72:	682d      	ldr	r5, [r5, #0]
 800ad74:	2d00      	cmp	r5, #0
 800ad76:	d1f0      	bne.n	800ad5a <_rclc_execute.part.0+0x172>
 800ad78:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800ad7c:	b193      	cbz	r3, 800ada4 <_rclc_execute.part.0+0x1bc>
 800ad7e:	68c5      	ldr	r5, [r0, #12]
 800ad80:	b185      	cbz	r5, 800ada4 <_rclc_execute.part.0+0x1bc>
 800ad82:	2600      	movs	r6, #0
 800ad84:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800ad88:	b14b      	cbz	r3, 800ad9e <_rclc_execute.part.0+0x1b6>
 800ad8a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800ad8c:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800ad90:	b12b      	cbz	r3, 800ad9e <_rclc_execute.part.0+0x1b6>
 800ad92:	4628      	mov	r0, r5
 800ad94:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800ad98:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ad9a:	4798      	blx	r3
 800ad9c:	6860      	ldr	r0, [r4, #4]
 800ad9e:	682d      	ldr	r5, [r5, #0]
 800ada0:	2d00      	cmp	r5, #0
 800ada2:	d1ef      	bne.n	800ad84 <_rclc_execute.part.0+0x19c>
 800ada4:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d081      	beq.n	800acb0 <_rclc_execute.part.0+0xc8>
 800adac:	2700      	movs	r7, #0
 800adae:	e00b      	b.n	800adc8 <_rclc_execute.part.0+0x1e0>
 800adb0:	6863      	ldr	r3, [r4, #4]
 800adb2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800adb4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800adb6:	6a1e      	ldr	r6, [r3, #32]
 800adb8:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800adbc:	47b0      	blx	r6
 800adbe:	6860      	ldr	r0, [r4, #4]
 800adc0:	4629      	mov	r1, r5
 800adc2:	f008 fe95 	bl	8013af0 <rclc_action_remove_used_goal_handle>
 800adc6:	6860      	ldr	r0, [r4, #4]
 800adc8:	f008 ff1a 	bl	8013c00 <rclc_action_find_first_handle_with_result_response>
 800adcc:	4605      	mov	r5, r0
 800adce:	2800      	cmp	r0, #0
 800add0:	d1ee      	bne.n	800adb0 <_rclc_execute.part.0+0x1c8>
 800add2:	e76d      	b.n	800acb0 <_rclc_execute.part.0+0xc8>
 800add4:	6860      	ldr	r0, [r4, #4]
 800add6:	f880 5020 	strb.w	r5, [r0, #32]
 800adda:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800adde:	2b00      	cmp	r3, #0
 800ade0:	f43f af66 	beq.w	800acb0 <_rclc_execute.part.0+0xc8>
 800ade4:	68c5      	ldr	r5, [r0, #12]
 800ade6:	b1b5      	cbz	r5, 800ae16 <_rclc_execute.part.0+0x22e>
 800ade8:	2602      	movs	r6, #2
 800adea:	e001      	b.n	800adf0 <_rclc_execute.part.0+0x208>
 800adec:	682d      	ldr	r5, [r5, #0]
 800adee:	b195      	cbz	r5, 800ae16 <_rclc_execute.part.0+0x22e>
 800adf0:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800adf4:	2b03      	cmp	r3, #3
 800adf6:	d1f9      	bne.n	800adec <_rclc_execute.part.0+0x204>
 800adf8:	69c3      	ldr	r3, [r0, #28]
 800adfa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800adfc:	4628      	mov	r0, r5
 800adfe:	4798      	blx	r3
 800ae00:	4603      	mov	r3, r0
 800ae02:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800ae06:	4628      	mov	r0, r5
 800ae08:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800ae0c:	b163      	cbz	r3, 800ae28 <_rclc_execute.part.0+0x240>
 800ae0e:	f008 ff23 	bl	8013c58 <rclc_action_server_goal_cancel_accept>
 800ae12:	6860      	ldr	r0, [r4, #4]
 800ae14:	e7ea      	b.n	800adec <_rclc_execute.part.0+0x204>
 800ae16:	2300      	movs	r3, #0
 800ae18:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	e739      	b.n	800ac94 <_rclc_execute.part.0+0xac>
 800ae20:	4628      	mov	r0, r5
 800ae22:	4798      	blx	r3
 800ae24:	4628      	mov	r0, r5
 800ae26:	e735      	b.n	800ac94 <_rclc_execute.part.0+0xac>
 800ae28:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800ae2a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ae2e:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800ae32:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae36:	6860      	ldr	r0, [r4, #4]
 800ae38:	2101      	movs	r1, #1
 800ae3a:	f008 ff39 	bl	8013cb0 <rclc_action_server_goal_cancel_reject>
 800ae3e:	722e      	strb	r6, [r5, #8]
 800ae40:	6860      	ldr	r0, [r4, #4]
 800ae42:	e7d3      	b.n	800adec <_rclc_execute.part.0+0x204>
 800ae44:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ae46:	6880      	ldr	r0, [r0, #8]
 800ae48:	4798      	blx	r3
 800ae4a:	f104 0110 	add.w	r1, r4, #16
 800ae4e:	e6e7      	b.n	800ac20 <_rclc_execute.part.0+0x38>
 800ae50:	f100 0110 	add.w	r1, r0, #16
 800ae54:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ae56:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800ae58:	6880      	ldr	r0, [r0, #8]
 800ae5a:	9105      	str	r1, [sp, #20]
 800ae5c:	4798      	blx	r3
 800ae5e:	9905      	ldr	r1, [sp, #20]
 800ae60:	e6de      	b.n	800ac20 <_rclc_execute.part.0+0x38>
 800ae62:	2001      	movs	r0, #1
 800ae64:	e716      	b.n	800ac94 <_rclc_execute.part.0+0xac>
 800ae66:	bf00      	nop

0800ae68 <rclc_executor_trigger_any>:
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	d03f      	beq.n	800aeec <rclc_executor_trigger_any+0x84>
 800ae6c:	2900      	cmp	r1, #0
 800ae6e:	d03e      	beq.n	800aeee <rclc_executor_trigger_any+0x86>
 800ae70:	4603      	mov	r3, r0
 800ae72:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800ae76:	2200      	movs	r2, #0
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	d037      	beq.n	800aeec <rclc_executor_trigger_any+0x84>
 800ae7c:	b430      	push	{r4, r5}
 800ae7e:	f893 c000 	ldrb.w	ip, [r3]
 800ae82:	f1bc 0f08 	cmp.w	ip, #8
 800ae86:	d11e      	bne.n	800aec6 <rclc_executor_trigger_any+0x5e>
 800ae88:	685c      	ldr	r4, [r3, #4]
 800ae8a:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800ae8c:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800ae90:	d105      	bne.n	800ae9e <rclc_executor_trigger_any+0x36>
 800ae92:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800ae96:	b910      	cbnz	r0, 800ae9e <rclc_executor_trigger_any+0x36>
 800ae98:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800ae9c:	b128      	cbz	r0, 800aeaa <rclc_executor_trigger_any+0x42>
 800ae9e:	bc30      	pop	{r4, r5}
 800aea0:	4770      	bx	lr
 800aea2:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800aea6:	2800      	cmp	r0, #0
 800aea8:	d1f9      	bne.n	800ae9e <rclc_executor_trigger_any+0x36>
 800aeaa:	3201      	adds	r2, #1
 800aeac:	4291      	cmp	r1, r2
 800aeae:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800aeb2:	d018      	beq.n	800aee6 <rclc_executor_trigger_any+0x7e>
 800aeb4:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800aeb8:	2800      	cmp	r0, #0
 800aeba:	d0f0      	beq.n	800ae9e <rclc_executor_trigger_any+0x36>
 800aebc:	f893 c000 	ldrb.w	ip, [r3]
 800aec0:	f1bc 0f08 	cmp.w	ip, #8
 800aec4:	d0e0      	beq.n	800ae88 <rclc_executor_trigger_any+0x20>
 800aec6:	f1bc 0f09 	cmp.w	ip, #9
 800aeca:	d1ea      	bne.n	800aea2 <rclc_executor_trigger_any+0x3a>
 800aecc:	685c      	ldr	r4, [r3, #4]
 800aece:	6a25      	ldr	r5, [r4, #32]
 800aed0:	2d00      	cmp	r5, #0
 800aed2:	d1e4      	bne.n	800ae9e <rclc_executor_trigger_any+0x36>
 800aed4:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800aed8:	2800      	cmp	r0, #0
 800aeda:	d1e0      	bne.n	800ae9e <rclc_executor_trigger_any+0x36>
 800aedc:	3201      	adds	r2, #1
 800aede:	4291      	cmp	r1, r2
 800aee0:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800aee4:	d1e6      	bne.n	800aeb4 <rclc_executor_trigger_any+0x4c>
 800aee6:	2000      	movs	r0, #0
 800aee8:	bc30      	pop	{r4, r5}
 800aeea:	4770      	bx	lr
 800aeec:	4770      	bx	lr
 800aeee:	4608      	mov	r0, r1
 800aef0:	4770      	bx	lr
 800aef2:	bf00      	nop

0800aef4 <rclc_executor_get_zero_initialized_executor>:
 800aef4:	b510      	push	{r4, lr}
 800aef6:	4903      	ldr	r1, [pc, #12]	@ (800af04 <rclc_executor_get_zero_initialized_executor+0x10>)
 800aef8:	4604      	mov	r4, r0
 800aefa:	2288      	movs	r2, #136	@ 0x88
 800aefc:	f00c f94b 	bl	8017196 <memcpy>
 800af00:	4620      	mov	r0, r4
 800af02:	bd10      	pop	{r4, pc}
 800af04:	08018068 	.word	0x08018068

0800af08 <rclc_executor_init>:
 800af08:	2800      	cmp	r0, #0
 800af0a:	d05f      	beq.n	800afcc <rclc_executor_init+0xc4>
 800af0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af10:	460c      	mov	r4, r1
 800af12:	b0b0      	sub	sp, #192	@ 0xc0
 800af14:	2900      	cmp	r1, #0
 800af16:	d051      	beq.n	800afbc <rclc_executor_init+0xb4>
 800af18:	4605      	mov	r5, r0
 800af1a:	4618      	mov	r0, r3
 800af1c:	4616      	mov	r6, r2
 800af1e:	461f      	mov	r7, r3
 800af20:	f000 fc04 	bl	800b72c <rcutils_allocator_is_valid>
 800af24:	2800      	cmp	r0, #0
 800af26:	d049      	beq.n	800afbc <rclc_executor_init+0xb4>
 800af28:	2e00      	cmp	r6, #0
 800af2a:	d047      	beq.n	800afbc <rclc_executor_init+0xb4>
 800af2c:	492c      	ldr	r1, [pc, #176]	@ (800afe0 <rclc_executor_init+0xd8>)
 800af2e:	2288      	movs	r2, #136	@ 0x88
 800af30:	a80e      	add	r0, sp, #56	@ 0x38
 800af32:	f00c f930 	bl	8017196 <memcpy>
 800af36:	a90e      	add	r1, sp, #56	@ 0x38
 800af38:	2288      	movs	r2, #136	@ 0x88
 800af3a:	4628      	mov	r0, r5
 800af3c:	f00c f92b 	bl	8017196 <memcpy>
 800af40:	602c      	str	r4, [r5, #0]
 800af42:	4668      	mov	r0, sp
 800af44:	60ae      	str	r6, [r5, #8]
 800af46:	466c      	mov	r4, sp
 800af48:	f007 fb7e 	bl	8012648 <rcl_get_zero_initialized_wait_set>
 800af4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800af4e:	f105 0c14 	add.w	ip, r5, #20
 800af52:	f8d7 8000 	ldr.w	r8, [r7]
 800af56:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800af5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800af5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800af60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800af62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800af66:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800afd8 <rclc_executor_init+0xd0>
 800af6a:	6823      	ldr	r3, [r4, #0]
 800af6c:	f8cc 3000 	str.w	r3, [ip]
 800af70:	6939      	ldr	r1, [r7, #16]
 800af72:	612f      	str	r7, [r5, #16]
 800af74:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800af78:	01b0      	lsls	r0, r6, #6
 800af7a:	47c0      	blx	r8
 800af7c:	6068      	str	r0, [r5, #4]
 800af7e:	b338      	cbz	r0, 800afd0 <rclc_executor_init+0xc8>
 800af80:	2400      	movs	r4, #0
 800af82:	e000      	b.n	800af86 <rclc_executor_init+0x7e>
 800af84:	6868      	ldr	r0, [r5, #4]
 800af86:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800af8a:	4631      	mov	r1, r6
 800af8c:	3401      	adds	r4, #1
 800af8e:	f000 fa9f 	bl	800b4d0 <rclc_executor_handle_init>
 800af92:	42a6      	cmp	r6, r4
 800af94:	d1f6      	bne.n	800af84 <rclc_executor_init+0x7c>
 800af96:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800af9a:	f000 fa8d 	bl	800b4b8 <rclc_executor_handle_counters_zero_init>
 800af9e:	4a11      	ldr	r2, [pc, #68]	@ (800afe4 <rclc_executor_init+0xdc>)
 800afa0:	686b      	ldr	r3, [r5, #4]
 800afa2:	2000      	movs	r0, #0
 800afa4:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800afa8:	b163      	cbz	r3, 800afc4 <rclc_executor_init+0xbc>
 800afaa:	692b      	ldr	r3, [r5, #16]
 800afac:	b153      	cbz	r3, 800afc4 <rclc_executor_init+0xbc>
 800afae:	68ab      	ldr	r3, [r5, #8]
 800afb0:	b143      	cbz	r3, 800afc4 <rclc_executor_init+0xbc>
 800afb2:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800afb6:	b030      	add	sp, #192	@ 0xc0
 800afb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afbc:	200b      	movs	r0, #11
 800afbe:	b030      	add	sp, #192	@ 0xc0
 800afc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afc4:	4618      	mov	r0, r3
 800afc6:	b030      	add	sp, #192	@ 0xc0
 800afc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afcc:	200b      	movs	r0, #11
 800afce:	4770      	bx	lr
 800afd0:	200a      	movs	r0, #10
 800afd2:	e7f4      	b.n	800afbe <rclc_executor_init+0xb6>
 800afd4:	f3af 8000 	nop.w
 800afd8:	3b9aca00 	.word	0x3b9aca00
 800afdc:	00000000 	.word	0x00000000
 800afe0:	08018068 	.word	0x08018068
 800afe4:	0800ae69 	.word	0x0800ae69

0800afe8 <rclc_executor_add_subscription>:
 800afe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afea:	f89d e018 	ldrb.w	lr, [sp, #24]
 800afee:	b338      	cbz	r0, 800b040 <rclc_executor_add_subscription+0x58>
 800aff0:	b331      	cbz	r1, 800b040 <rclc_executor_add_subscription+0x58>
 800aff2:	b32a      	cbz	r2, 800b040 <rclc_executor_add_subscription+0x58>
 800aff4:	b323      	cbz	r3, 800b040 <rclc_executor_add_subscription+0x58>
 800aff6:	4604      	mov	r4, r0
 800aff8:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800affc:	42a8      	cmp	r0, r5
 800affe:	d301      	bcc.n	800b004 <rclc_executor_add_subscription+0x1c>
 800b000:	2001      	movs	r0, #1
 800b002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b004:	6866      	ldr	r6, [r4, #4]
 800b006:	0187      	lsls	r7, r0, #6
 800b008:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800b00c:	2500      	movs	r5, #0
 800b00e:	55f5      	strb	r5, [r6, r7]
 800b010:	3001      	adds	r0, #1
 800b012:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800b016:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800b01a:	2301      	movs	r3, #1
 800b01c:	f104 0514 	add.w	r5, r4, #20
 800b020:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800b024:	f88c e001 	strb.w	lr, [ip, #1]
 800b028:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800b02c:	60e0      	str	r0, [r4, #12]
 800b02e:	4628      	mov	r0, r5
 800b030:	f007 fb1e 	bl	8012670 <rcl_wait_set_is_valid>
 800b034:	b930      	cbnz	r0, 800b044 <rclc_executor_add_subscription+0x5c>
 800b036:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800b038:	3301      	adds	r3, #1
 800b03a:	2000      	movs	r0, #0
 800b03c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800b03e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b040:	200b      	movs	r0, #11
 800b042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b044:	4628      	mov	r0, r5
 800b046:	f007 fb19 	bl	801267c <rcl_wait_set_fini>
 800b04a:	2800      	cmp	r0, #0
 800b04c:	d0f3      	beq.n	800b036 <rclc_executor_add_subscription+0x4e>
 800b04e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b050 <rclc_executor_add_timer>:
 800b050:	b300      	cbz	r0, 800b094 <rclc_executor_add_timer+0x44>
 800b052:	b1f9      	cbz	r1, 800b094 <rclc_executor_add_timer+0x44>
 800b054:	b538      	push	{r3, r4, r5, lr}
 800b056:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800b05a:	4293      	cmp	r3, r2
 800b05c:	4604      	mov	r4, r0
 800b05e:	d301      	bcc.n	800b064 <rclc_executor_add_timer+0x14>
 800b060:	2001      	movs	r0, #1
 800b062:	bd38      	pop	{r3, r4, r5, pc}
 800b064:	6840      	ldr	r0, [r0, #4]
 800b066:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800b06a:	019d      	lsls	r5, r3, #6
 800b06c:	6051      	str	r1, [r2, #4]
 800b06e:	2102      	movs	r1, #2
 800b070:	5341      	strh	r1, [r0, r5]
 800b072:	3301      	adds	r3, #1
 800b074:	2000      	movs	r0, #0
 800b076:	2101      	movs	r1, #1
 800b078:	f104 0514 	add.w	r5, r4, #20
 800b07c:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800b07e:	8711      	strh	r1, [r2, #56]	@ 0x38
 800b080:	4628      	mov	r0, r5
 800b082:	60e3      	str	r3, [r4, #12]
 800b084:	f007 faf4 	bl	8012670 <rcl_wait_set_is_valid>
 800b088:	b930      	cbnz	r0, 800b098 <rclc_executor_add_timer+0x48>
 800b08a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800b08c:	3301      	adds	r3, #1
 800b08e:	2000      	movs	r0, #0
 800b090:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800b092:	bd38      	pop	{r3, r4, r5, pc}
 800b094:	200b      	movs	r0, #11
 800b096:	4770      	bx	lr
 800b098:	4628      	mov	r0, r5
 800b09a:	f007 faef 	bl	801267c <rcl_wait_set_fini>
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	d0f3      	beq.n	800b08a <rclc_executor_add_timer+0x3a>
 800b0a2:	bd38      	pop	{r3, r4, r5, pc}

0800b0a4 <rclc_executor_prepare>:
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	d044      	beq.n	800b132 <rclc_executor_prepare+0x8e>
 800b0a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0aa:	f100 0514 	add.w	r5, r0, #20
 800b0ae:	b09b      	sub	sp, #108	@ 0x6c
 800b0b0:	4604      	mov	r4, r0
 800b0b2:	4628      	mov	r0, r5
 800b0b4:	f007 fadc 	bl	8012670 <rcl_wait_set_is_valid>
 800b0b8:	b110      	cbz	r0, 800b0c0 <rclc_executor_prepare+0x1c>
 800b0ba:	2000      	movs	r0, #0
 800b0bc:	b01b      	add	sp, #108	@ 0x6c
 800b0be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0c0:	4628      	mov	r0, r5
 800b0c2:	f007 fadb 	bl	801267c <rcl_wait_set_fini>
 800b0c6:	2800      	cmp	r0, #0
 800b0c8:	d130      	bne.n	800b12c <rclc_executor_prepare+0x88>
 800b0ca:	a80c      	add	r0, sp, #48	@ 0x30
 800b0cc:	f007 fabc 	bl	8012648 <rcl_get_zero_initialized_wait_set>
 800b0d0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800b0d4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b0d8:	46ae      	mov	lr, r5
 800b0da:	6927      	ldr	r7, [r4, #16]
 800b0dc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b0e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b0e4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b0e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b0ec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b0f0:	f8dc 3000 	ldr.w	r3, [ip]
 800b0f4:	f8ce 3000 	str.w	r3, [lr]
 800b0f8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b0fa:	ae04      	add	r6, sp, #16
 800b0fc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	6822      	ldr	r2, [r4, #0]
 800b102:	6033      	str	r3, [r6, #0]
 800b104:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b106:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800b108:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800b10c:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800b110:	e9cd 2100 	strd	r2, r1, [sp]
 800b114:	4628      	mov	r0, r5
 800b116:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800b118:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b11a:	f007 fdad 	bl	8012c78 <rcl_wait_set_init>
 800b11e:	2800      	cmp	r0, #0
 800b120:	d0cc      	beq.n	800b0bc <rclc_executor_prepare+0x18>
 800b122:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b124:	f000 fb28 	bl	800b778 <rcutils_reset_error>
 800b128:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b12a:	e7c7      	b.n	800b0bc <rclc_executor_prepare+0x18>
 800b12c:	f000 fb24 	bl	800b778 <rcutils_reset_error>
 800b130:	e7cb      	b.n	800b0ca <rclc_executor_prepare+0x26>
 800b132:	200b      	movs	r0, #11
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop

0800b138 <rclc_executor_spin_some.part.0>:
 800b138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b13c:	f100 0614 	add.w	r6, r0, #20
 800b140:	b083      	sub	sp, #12
 800b142:	4691      	mov	r9, r2
 800b144:	4698      	mov	r8, r3
 800b146:	4605      	mov	r5, r0
 800b148:	f7ff ffac 	bl	800b0a4 <rclc_executor_prepare>
 800b14c:	4630      	mov	r0, r6
 800b14e:	f007 fb61 	bl	8012814 <rcl_wait_set_clear>
 800b152:	4607      	mov	r7, r0
 800b154:	2800      	cmp	r0, #0
 800b156:	f040 80ed 	bne.w	800b334 <rclc_executor_spin_some.part.0+0x1fc>
 800b15a:	68ab      	ldr	r3, [r5, #8]
 800b15c:	4604      	mov	r4, r0
 800b15e:	b303      	cbz	r3, 800b1a2 <rclc_executor_spin_some.part.0+0x6a>
 800b160:	6869      	ldr	r1, [r5, #4]
 800b162:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800b166:	01a2      	lsls	r2, r4, #6
 800b168:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800b16c:	b1cb      	cbz	r3, 800b1a2 <rclc_executor_spin_some.part.0+0x6a>
 800b16e:	5c8b      	ldrb	r3, [r1, r2]
 800b170:	2b0a      	cmp	r3, #10
 800b172:	f200 80d8 	bhi.w	800b326 <rclc_executor_spin_some.part.0+0x1ee>
 800b176:	e8df f003 	tbb	[pc, r3]
 800b17a:	9c9c      	.short	0x9c9c
 800b17c:	068c8ca7 	.word	0x068c8ca7
 800b180:	bdc90606 	.word	0xbdc90606
 800b184:	b2          	.byte	0xb2
 800b185:	00          	.byte	0x00
 800b186:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b18a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b18e:	4630      	mov	r0, r6
 800b190:	f007 fe88 	bl	8012ea4 <rcl_wait_set_add_service>
 800b194:	2800      	cmp	r0, #0
 800b196:	f040 8086 	bne.w	800b2a6 <rclc_executor_spin_some.part.0+0x16e>
 800b19a:	68ab      	ldr	r3, [r5, #8]
 800b19c:	3401      	adds	r4, #1
 800b19e:	429c      	cmp	r4, r3
 800b1a0:	d3de      	bcc.n	800b160 <rclc_executor_spin_some.part.0+0x28>
 800b1a2:	4643      	mov	r3, r8
 800b1a4:	464a      	mov	r2, r9
 800b1a6:	4630      	mov	r0, r6
 800b1a8:	f007 feaa 	bl	8012f00 <rcl_wait>
 800b1ac:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	f000 80c7 	beq.w	800b344 <rclc_executor_spin_some.part.0+0x20c>
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	f040 80b5 	bne.w	800b326 <rclc_executor_spin_some.part.0+0x1ee>
 800b1bc:	68ab      	ldr	r3, [r5, #8]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	f000 8159 	beq.w	800b476 <rclc_executor_spin_some.part.0+0x33e>
 800b1c4:	2400      	movs	r4, #0
 800b1c6:	46a0      	mov	r8, r4
 800b1c8:	f240 1991 	movw	r9, #401	@ 0x191
 800b1cc:	e00a      	b.n	800b1e4 <rclc_executor_spin_some.part.0+0xac>
 800b1ce:	f7ff fb49 	bl	800a864 <_rclc_check_for_new_data>
 800b1d2:	4604      	mov	r4, r0
 800b1d4:	b110      	cbz	r0, 800b1dc <rclc_executor_spin_some.part.0+0xa4>
 800b1d6:	4548      	cmp	r0, r9
 800b1d8:	f040 80b2 	bne.w	800b340 <rclc_executor_spin_some.part.0+0x208>
 800b1dc:	68ab      	ldr	r3, [r5, #8]
 800b1de:	4598      	cmp	r8, r3
 800b1e0:	f080 8126 	bcs.w	800b430 <rclc_executor_spin_some.part.0+0x2f8>
 800b1e4:	686a      	ldr	r2, [r5, #4]
 800b1e6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800b1ea:	4631      	mov	r1, r6
 800b1ec:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800b1f0:	f108 0801 	add.w	r8, r8, #1
 800b1f4:	f1bc 0f00 	cmp.w	ip, #0
 800b1f8:	d1e9      	bne.n	800b1ce <rclc_executor_spin_some.part.0+0x96>
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	4610      	mov	r0, r2
 800b1fe:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800b202:	4798      	blx	r3
 800b204:	2800      	cmp	r0, #0
 800b206:	f000 809b 	beq.w	800b340 <rclc_executor_spin_some.part.0+0x208>
 800b20a:	68ab      	ldr	r3, [r5, #8]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	f000 8097 	beq.w	800b340 <rclc_executor_spin_some.part.0+0x208>
 800b212:	f04f 0800 	mov.w	r8, #0
 800b216:	f240 1991 	movw	r9, #401	@ 0x191
 800b21a:	e009      	b.n	800b230 <rclc_executor_spin_some.part.0+0xf8>
 800b21c:	f7ff fb70 	bl	800a900 <_rclc_take_new_data>
 800b220:	4604      	mov	r4, r0
 800b222:	b110      	cbz	r0, 800b22a <rclc_executor_spin_some.part.0+0xf2>
 800b224:	4548      	cmp	r0, r9
 800b226:	f040 808b 	bne.w	800b340 <rclc_executor_spin_some.part.0+0x208>
 800b22a:	68ab      	ldr	r3, [r5, #8]
 800b22c:	4598      	cmp	r8, r3
 800b22e:	d209      	bcs.n	800b244 <rclc_executor_spin_some.part.0+0x10c>
 800b230:	6868      	ldr	r0, [r5, #4]
 800b232:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800b236:	4631      	mov	r1, r6
 800b238:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800b23c:	f108 0801 	add.w	r8, r8, #1
 800b240:	2a00      	cmp	r2, #0
 800b242:	d1eb      	bne.n	800b21c <rclc_executor_spin_some.part.0+0xe4>
 800b244:	2600      	movs	r6, #0
 800b246:	b97b      	cbnz	r3, 800b268 <rclc_executor_spin_some.part.0+0x130>
 800b248:	e07a      	b.n	800b340 <rclc_executor_spin_some.part.0+0x208>
 800b24a:	f812 200c 	ldrb.w	r2, [r2, ip]
 800b24e:	2a08      	cmp	r2, #8
 800b250:	f000 80fd 	beq.w	800b44e <rclc_executor_spin_some.part.0+0x316>
 800b254:	2a09      	cmp	r2, #9
 800b256:	f000 80ef 	beq.w	800b438 <rclc_executor_spin_some.part.0+0x300>
 800b25a:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800b25e:	b98a      	cbnz	r2, 800b284 <rclc_executor_spin_some.part.0+0x14c>
 800b260:	3601      	adds	r6, #1
 800b262:	429e      	cmp	r6, r3
 800b264:	d262      	bcs.n	800b32c <rclc_executor_spin_some.part.0+0x1f4>
 800b266:	2400      	movs	r4, #0
 800b268:	686a      	ldr	r2, [r5, #4]
 800b26a:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800b26e:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800b272:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800b276:	2900      	cmp	r1, #0
 800b278:	d062      	beq.n	800b340 <rclc_executor_spin_some.part.0+0x208>
 800b27a:	7841      	ldrb	r1, [r0, #1]
 800b27c:	2900      	cmp	r1, #0
 800b27e:	d0e4      	beq.n	800b24a <rclc_executor_spin_some.part.0+0x112>
 800b280:	2901      	cmp	r1, #1
 800b282:	d1ed      	bne.n	800b260 <rclc_executor_spin_some.part.0+0x128>
 800b284:	f7ff fcb0 	bl	800abe8 <_rclc_execute.part.0>
 800b288:	2800      	cmp	r0, #0
 800b28a:	f040 80b6 	bne.w	800b3fa <rclc_executor_spin_some.part.0+0x2c2>
 800b28e:	68ab      	ldr	r3, [r5, #8]
 800b290:	e7e6      	b.n	800b260 <rclc_executor_spin_some.part.0+0x128>
 800b292:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b296:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b29a:	4630      	mov	r0, r6
 800b29c:	f007 fdd6 	bl	8012e4c <rcl_wait_set_add_client>
 800b2a0:	2800      	cmp	r0, #0
 800b2a2:	f43f af7a 	beq.w	800b19a <rclc_executor_spin_some.part.0+0x62>
 800b2a6:	9001      	str	r0, [sp, #4]
 800b2a8:	f000 fa66 	bl	800b778 <rcutils_reset_error>
 800b2ac:	9801      	ldr	r0, [sp, #4]
 800b2ae:	4607      	mov	r7, r0
 800b2b0:	e03c      	b.n	800b32c <rclc_executor_spin_some.part.0+0x1f4>
 800b2b2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b2b6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b2ba:	4630      	mov	r0, r6
 800b2bc:	f007 fa7e 	bl	80127bc <rcl_wait_set_add_subscription>
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	f43f af6a 	beq.w	800b19a <rclc_executor_spin_some.part.0+0x62>
 800b2c6:	e7ee      	b.n	800b2a6 <rclc_executor_spin_some.part.0+0x16e>
 800b2c8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b2cc:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b2d0:	4630      	mov	r0, r6
 800b2d2:	f007 fd8b 	bl	8012dec <rcl_wait_set_add_timer>
 800b2d6:	2800      	cmp	r0, #0
 800b2d8:	f43f af5f 	beq.w	800b19a <rclc_executor_spin_some.part.0+0x62>
 800b2dc:	e7e3      	b.n	800b2a6 <rclc_executor_spin_some.part.0+0x16e>
 800b2de:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b2e2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b2e6:	4630      	mov	r0, r6
 800b2e8:	f007 fd54 	bl	8012d94 <rcl_wait_set_add_guard_condition>
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	f43f af54 	beq.w	800b19a <rclc_executor_spin_some.part.0+0x62>
 800b2f2:	e7d8      	b.n	800b2a6 <rclc_executor_spin_some.part.0+0x16e>
 800b2f4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b2f8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b2fc:	3110      	adds	r1, #16
 800b2fe:	4630      	mov	r0, r6
 800b300:	f008 fad6 	bl	80138b0 <rcl_action_wait_set_add_action_server>
 800b304:	2800      	cmp	r0, #0
 800b306:	f43f af48 	beq.w	800b19a <rclc_executor_spin_some.part.0+0x62>
 800b30a:	e7cc      	b.n	800b2a6 <rclc_executor_spin_some.part.0+0x16e>
 800b30c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b310:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b314:	3110      	adds	r1, #16
 800b316:	2300      	movs	r3, #0
 800b318:	4630      	mov	r0, r6
 800b31a:	f008 f8a1 	bl	8013460 <rcl_action_wait_set_add_action_client>
 800b31e:	2800      	cmp	r0, #0
 800b320:	f43f af3b 	beq.w	800b19a <rclc_executor_spin_some.part.0+0x62>
 800b324:	e7bf      	b.n	800b2a6 <rclc_executor_spin_some.part.0+0x16e>
 800b326:	f000 fa27 	bl	800b778 <rcutils_reset_error>
 800b32a:	2701      	movs	r7, #1
 800b32c:	4638      	mov	r0, r7
 800b32e:	b003      	add	sp, #12
 800b330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b334:	f000 fa20 	bl	800b778 <rcutils_reset_error>
 800b338:	4638      	mov	r0, r7
 800b33a:	b003      	add	sp, #12
 800b33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b340:	4627      	mov	r7, r4
 800b342:	e7f3      	b.n	800b32c <rclc_executor_spin_some.part.0+0x1f4>
 800b344:	68ab      	ldr	r3, [r5, #8]
 800b346:	2b00      	cmp	r3, #0
 800b348:	f000 8092 	beq.w	800b470 <rclc_executor_spin_some.part.0+0x338>
 800b34c:	2400      	movs	r4, #0
 800b34e:	46a0      	mov	r8, r4
 800b350:	f240 1991 	movw	r9, #401	@ 0x191
 800b354:	e008      	b.n	800b368 <rclc_executor_spin_some.part.0+0x230>
 800b356:	f7ff fa85 	bl	800a864 <_rclc_check_for_new_data>
 800b35a:	4604      	mov	r4, r0
 800b35c:	b108      	cbz	r0, 800b362 <rclc_executor_spin_some.part.0+0x22a>
 800b35e:	4548      	cmp	r0, r9
 800b360:	d1ee      	bne.n	800b340 <rclc_executor_spin_some.part.0+0x208>
 800b362:	68ab      	ldr	r3, [r5, #8]
 800b364:	4598      	cmp	r8, r3
 800b366:	d265      	bcs.n	800b434 <rclc_executor_spin_some.part.0+0x2fc>
 800b368:	686a      	ldr	r2, [r5, #4]
 800b36a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800b36e:	4631      	mov	r1, r6
 800b370:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800b374:	f108 0801 	add.w	r8, r8, #1
 800b378:	f1bc 0f00 	cmp.w	ip, #0
 800b37c:	d1eb      	bne.n	800b356 <rclc_executor_spin_some.part.0+0x21e>
 800b37e:	4619      	mov	r1, r3
 800b380:	4610      	mov	r0, r2
 800b382:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800b386:	4798      	blx	r3
 800b388:	2800      	cmp	r0, #0
 800b38a:	d0d9      	beq.n	800b340 <rclc_executor_spin_some.part.0+0x208>
 800b38c:	68ab      	ldr	r3, [r5, #8]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d0d6      	beq.n	800b340 <rclc_executor_spin_some.part.0+0x208>
 800b392:	f04f 0800 	mov.w	r8, #0
 800b396:	f240 1991 	movw	r9, #401	@ 0x191
 800b39a:	f240 2a59 	movw	sl, #601	@ 0x259
 800b39e:	e00e      	b.n	800b3be <rclc_executor_spin_some.part.0+0x286>
 800b3a0:	f813 300b 	ldrb.w	r3, [r3, fp]
 800b3a4:	2b08      	cmp	r3, #8
 800b3a6:	d033      	beq.n	800b410 <rclc_executor_spin_some.part.0+0x2d8>
 800b3a8:	2b09      	cmp	r3, #9
 800b3aa:	d028      	beq.n	800b3fe <rclc_executor_spin_some.part.0+0x2c6>
 800b3ac:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800b3b0:	b9fb      	cbnz	r3, 800b3f2 <rclc_executor_spin_some.part.0+0x2ba>
 800b3b2:	68ab      	ldr	r3, [r5, #8]
 800b3b4:	f108 0801 	add.w	r8, r8, #1
 800b3b8:	4598      	cmp	r8, r3
 800b3ba:	d2b7      	bcs.n	800b32c <rclc_executor_spin_some.part.0+0x1f4>
 800b3bc:	2400      	movs	r4, #0
 800b3be:	6868      	ldr	r0, [r5, #4]
 800b3c0:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800b3c4:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800b3c8:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d0b7      	beq.n	800b340 <rclc_executor_spin_some.part.0+0x208>
 800b3d0:	4631      	mov	r1, r6
 800b3d2:	f7ff fa95 	bl	800a900 <_rclc_take_new_data>
 800b3d6:	b118      	cbz	r0, 800b3e0 <rclc_executor_spin_some.part.0+0x2a8>
 800b3d8:	4548      	cmp	r0, r9
 800b3da:	d001      	beq.n	800b3e0 <rclc_executor_spin_some.part.0+0x2a8>
 800b3dc:	4550      	cmp	r0, sl
 800b3de:	d10c      	bne.n	800b3fa <rclc_executor_spin_some.part.0+0x2c2>
 800b3e0:	686b      	ldr	r3, [r5, #4]
 800b3e2:	eb13 000b 	adds.w	r0, r3, fp
 800b3e6:	d021      	beq.n	800b42c <rclc_executor_spin_some.part.0+0x2f4>
 800b3e8:	7842      	ldrb	r2, [r0, #1]
 800b3ea:	2a00      	cmp	r2, #0
 800b3ec:	d0d8      	beq.n	800b3a0 <rclc_executor_spin_some.part.0+0x268>
 800b3ee:	2a01      	cmp	r2, #1
 800b3f0:	d1df      	bne.n	800b3b2 <rclc_executor_spin_some.part.0+0x27a>
 800b3f2:	f7ff fbf9 	bl	800abe8 <_rclc_execute.part.0>
 800b3f6:	2800      	cmp	r0, #0
 800b3f8:	d0db      	beq.n	800b3b2 <rclc_executor_spin_some.part.0+0x27a>
 800b3fa:	4607      	mov	r7, r0
 800b3fc:	e796      	b.n	800b32c <rclc_executor_spin_some.part.0+0x1f4>
 800b3fe:	6843      	ldr	r3, [r0, #4]
 800b400:	6a1a      	ldr	r2, [r3, #32]
 800b402:	2a00      	cmp	r2, #0
 800b404:	d1f5      	bne.n	800b3f2 <rclc_executor_spin_some.part.0+0x2ba>
 800b406:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d0d1      	beq.n	800b3b2 <rclc_executor_spin_some.part.0+0x27a>
 800b40e:	e7f0      	b.n	800b3f2 <rclc_executor_spin_some.part.0+0x2ba>
 800b410:	6843      	ldr	r3, [r0, #4]
 800b412:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b414:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800b418:	d1eb      	bne.n	800b3f2 <rclc_executor_spin_some.part.0+0x2ba>
 800b41a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800b41e:	2a00      	cmp	r2, #0
 800b420:	d1e7      	bne.n	800b3f2 <rclc_executor_spin_some.part.0+0x2ba>
 800b422:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b426:	2b00      	cmp	r3, #0
 800b428:	d0c3      	beq.n	800b3b2 <rclc_executor_spin_some.part.0+0x27a>
 800b42a:	e7e2      	b.n	800b3f2 <rclc_executor_spin_some.part.0+0x2ba>
 800b42c:	270b      	movs	r7, #11
 800b42e:	e77d      	b.n	800b32c <rclc_executor_spin_some.part.0+0x1f4>
 800b430:	686a      	ldr	r2, [r5, #4]
 800b432:	e6e2      	b.n	800b1fa <rclc_executor_spin_some.part.0+0xc2>
 800b434:	686a      	ldr	r2, [r5, #4]
 800b436:	e7a2      	b.n	800b37e <rclc_executor_spin_some.part.0+0x246>
 800b438:	6842      	ldr	r2, [r0, #4]
 800b43a:	6a11      	ldr	r1, [r2, #32]
 800b43c:	2900      	cmp	r1, #0
 800b43e:	f47f af21 	bne.w	800b284 <rclc_executor_spin_some.part.0+0x14c>
 800b442:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800b446:	2a00      	cmp	r2, #0
 800b448:	f43f af0a 	beq.w	800b260 <rclc_executor_spin_some.part.0+0x128>
 800b44c:	e71a      	b.n	800b284 <rclc_executor_spin_some.part.0+0x14c>
 800b44e:	6842      	ldr	r2, [r0, #4]
 800b450:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800b452:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800b456:	f47f af15 	bne.w	800b284 <rclc_executor_spin_some.part.0+0x14c>
 800b45a:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800b45e:	2900      	cmp	r1, #0
 800b460:	f47f af10 	bne.w	800b284 <rclc_executor_spin_some.part.0+0x14c>
 800b464:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800b468:	2a00      	cmp	r2, #0
 800b46a:	f43f aef9 	beq.w	800b260 <rclc_executor_spin_some.part.0+0x128>
 800b46e:	e709      	b.n	800b284 <rclc_executor_spin_some.part.0+0x14c>
 800b470:	686a      	ldr	r2, [r5, #4]
 800b472:	461c      	mov	r4, r3
 800b474:	e783      	b.n	800b37e <rclc_executor_spin_some.part.0+0x246>
 800b476:	686a      	ldr	r2, [r5, #4]
 800b478:	461c      	mov	r4, r3
 800b47a:	e6be      	b.n	800b1fa <rclc_executor_spin_some.part.0+0xc2>

0800b47c <rclc_executor_spin>:
 800b47c:	b1d0      	cbz	r0, 800b4b4 <rclc_executor_spin+0x38>
 800b47e:	b510      	push	{r4, lr}
 800b480:	4604      	mov	r4, r0
 800b482:	b082      	sub	sp, #8
 800b484:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800b488:	6820      	ldr	r0, [r4, #0]
 800b48a:	e9cd 2300 	strd	r2, r3, [sp]
 800b48e:	f005 fe43 	bl	8011118 <rcl_context_is_valid>
 800b492:	4601      	mov	r1, r0
 800b494:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b498:	4620      	mov	r0, r4
 800b49a:	b131      	cbz	r1, 800b4aa <rclc_executor_spin+0x2e>
 800b49c:	f7ff fe4c 	bl	800b138 <rclc_executor_spin_some.part.0>
 800b4a0:	f030 0302 	bics.w	r3, r0, #2
 800b4a4:	d0ee      	beq.n	800b484 <rclc_executor_spin+0x8>
 800b4a6:	b002      	add	sp, #8
 800b4a8:	bd10      	pop	{r4, pc}
 800b4aa:	f000 f965 	bl	800b778 <rcutils_reset_error>
 800b4ae:	2001      	movs	r0, #1
 800b4b0:	b002      	add	sp, #8
 800b4b2:	bd10      	pop	{r4, pc}
 800b4b4:	200b      	movs	r0, #11
 800b4b6:	4770      	bx	lr

0800b4b8 <rclc_executor_handle_counters_zero_init>:
 800b4b8:	b130      	cbz	r0, 800b4c8 <rclc_executor_handle_counters_zero_init+0x10>
 800b4ba:	b508      	push	{r3, lr}
 800b4bc:	2220      	movs	r2, #32
 800b4be:	2100      	movs	r1, #0
 800b4c0:	f00b fda0 	bl	8017004 <memset>
 800b4c4:	2000      	movs	r0, #0
 800b4c6:	bd08      	pop	{r3, pc}
 800b4c8:	200b      	movs	r0, #11
 800b4ca:	4770      	bx	lr
 800b4cc:	0000      	movs	r0, r0
	...

0800b4d0 <rclc_executor_handle_init>:
 800b4d0:	b168      	cbz	r0, 800b4ee <rclc_executor_handle_init+0x1e>
 800b4d2:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800b4f8 <rclc_executor_handle_init+0x28>
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	220b      	movs	r2, #11
 800b4da:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800b4de:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800b4e2:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800b4e6:	8002      	strh	r2, [r0, #0]
 800b4e8:	8703      	strh	r3, [r0, #56]	@ 0x38
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	4770      	bx	lr
 800b4ee:	200b      	movs	r0, #11
 800b4f0:	4770      	bx	lr
 800b4f2:	bf00      	nop
 800b4f4:	f3af 8000 	nop.w
	...

0800b500 <rclc_support_init_with_options>:
 800b500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b504:	b083      	sub	sp, #12
 800b506:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b508:	b340      	cbz	r0, 800b55c <rclc_support_init_with_options+0x5c>
 800b50a:	461d      	mov	r5, r3
 800b50c:	b333      	cbz	r3, 800b55c <rclc_support_init_with_options+0x5c>
 800b50e:	b32e      	cbz	r6, 800b55c <rclc_support_init_with_options+0x5c>
 800b510:	46e9      	mov	r9, sp
 800b512:	4604      	mov	r4, r0
 800b514:	4648      	mov	r0, r9
 800b516:	460f      	mov	r7, r1
 800b518:	4690      	mov	r8, r2
 800b51a:	f005 fdf3 	bl	8011104 <rcl_get_zero_initialized_context>
 800b51e:	e899 0003 	ldmia.w	r9, {r0, r1}
 800b522:	462a      	mov	r2, r5
 800b524:	e884 0003 	stmia.w	r4, {r0, r1}
 800b528:	4623      	mov	r3, r4
 800b52a:	4641      	mov	r1, r8
 800b52c:	4638      	mov	r0, r7
 800b52e:	f005 fe59 	bl	80111e4 <rcl_init>
 800b532:	4605      	mov	r5, r0
 800b534:	b960      	cbnz	r0, 800b550 <rclc_support_init_with_options+0x50>
 800b536:	60a6      	str	r6, [r4, #8]
 800b538:	4632      	mov	r2, r6
 800b53a:	f104 010c 	add.w	r1, r4, #12
 800b53e:	2003      	movs	r0, #3
 800b540:	f006 fc82 	bl	8011e48 <rcl_clock_init>
 800b544:	4605      	mov	r5, r0
 800b546:	b918      	cbnz	r0, 800b550 <rclc_support_init_with_options+0x50>
 800b548:	4628      	mov	r0, r5
 800b54a:	b003      	add	sp, #12
 800b54c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b550:	f000 f912 	bl	800b778 <rcutils_reset_error>
 800b554:	4628      	mov	r0, r5
 800b556:	b003      	add	sp, #12
 800b558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b55c:	250b      	movs	r5, #11
 800b55e:	4628      	mov	r0, r5
 800b560:	b003      	add	sp, #12
 800b562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b566:	bf00      	nop

0800b568 <rclc_node_init_default>:
 800b568:	b3b8      	cbz	r0, 800b5da <rclc_node_init_default+0x72>
 800b56a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b56e:	460d      	mov	r5, r1
 800b570:	b0a1      	sub	sp, #132	@ 0x84
 800b572:	b329      	cbz	r1, 800b5c0 <rclc_node_init_default+0x58>
 800b574:	4616      	mov	r6, r2
 800b576:	b31a      	cbz	r2, 800b5c0 <rclc_node_init_default+0x58>
 800b578:	461f      	mov	r7, r3
 800b57a:	b30b      	cbz	r3, 800b5c0 <rclc_node_init_default+0x58>
 800b57c:	f10d 0810 	add.w	r8, sp, #16
 800b580:	4604      	mov	r4, r0
 800b582:	4640      	mov	r0, r8
 800b584:	f005 ff54 	bl	8011430 <rcl_get_zero_initialized_node>
 800b588:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b58c:	f10d 0918 	add.w	r9, sp, #24
 800b590:	e884 0003 	stmia.w	r4, {r0, r1}
 800b594:	4648      	mov	r0, r9
 800b596:	f006 f8c3 	bl	8011720 <rcl_node_get_default_options>
 800b59a:	4640      	mov	r0, r8
 800b59c:	f005 ff48 	bl	8011430 <rcl_get_zero_initialized_node>
 800b5a0:	f8cd 9000 	str.w	r9, [sp]
 800b5a4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b5a8:	463b      	mov	r3, r7
 800b5aa:	e884 0003 	stmia.w	r4, {r0, r1}
 800b5ae:	4632      	mov	r2, r6
 800b5b0:	4629      	mov	r1, r5
 800b5b2:	4620      	mov	r0, r4
 800b5b4:	f005 ff46 	bl	8011444 <rcl_node_init>
 800b5b8:	b930      	cbnz	r0, 800b5c8 <rclc_node_init_default+0x60>
 800b5ba:	b021      	add	sp, #132	@ 0x84
 800b5bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5c0:	200b      	movs	r0, #11
 800b5c2:	b021      	add	sp, #132	@ 0x84
 800b5c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5c8:	9003      	str	r0, [sp, #12]
 800b5ca:	f000 f8d5 	bl	800b778 <rcutils_reset_error>
 800b5ce:	f000 f8d3 	bl	800b778 <rcutils_reset_error>
 800b5d2:	9803      	ldr	r0, [sp, #12]
 800b5d4:	b021      	add	sp, #132	@ 0x84
 800b5d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5da:	200b      	movs	r0, #11
 800b5dc:	4770      	bx	lr
 800b5de:	bf00      	nop

0800b5e0 <rclc_subscription_init_default>:
 800b5e0:	b368      	cbz	r0, 800b63e <rclc_subscription_init_default+0x5e>
 800b5e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e6:	460d      	mov	r5, r1
 800b5e8:	b0a0      	sub	sp, #128	@ 0x80
 800b5ea:	b321      	cbz	r1, 800b636 <rclc_subscription_init_default+0x56>
 800b5ec:	4616      	mov	r6, r2
 800b5ee:	b312      	cbz	r2, 800b636 <rclc_subscription_init_default+0x56>
 800b5f0:	461f      	mov	r7, r3
 800b5f2:	b303      	cbz	r3, 800b636 <rclc_subscription_init_default+0x56>
 800b5f4:	4604      	mov	r4, r0
 800b5f6:	f006 facb 	bl	8011b90 <rcl_get_zero_initialized_subscription>
 800b5fa:	f10d 0810 	add.w	r8, sp, #16
 800b5fe:	6020      	str	r0, [r4, #0]
 800b600:	4640      	mov	r0, r8
 800b602:	f006 fb73 	bl	8011cec <rcl_subscription_get_default_options>
 800b606:	490f      	ldr	r1, [pc, #60]	@ (800b644 <rclc_subscription_init_default+0x64>)
 800b608:	2250      	movs	r2, #80	@ 0x50
 800b60a:	4640      	mov	r0, r8
 800b60c:	f00b fdc3 	bl	8017196 <memcpy>
 800b610:	f8cd 8000 	str.w	r8, [sp]
 800b614:	463b      	mov	r3, r7
 800b616:	4632      	mov	r2, r6
 800b618:	4629      	mov	r1, r5
 800b61a:	4620      	mov	r0, r4
 800b61c:	f006 fabe 	bl	8011b9c <rcl_subscription_init>
 800b620:	b910      	cbnz	r0, 800b628 <rclc_subscription_init_default+0x48>
 800b622:	b020      	add	sp, #128	@ 0x80
 800b624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b628:	9003      	str	r0, [sp, #12]
 800b62a:	f000 f8a5 	bl	800b778 <rcutils_reset_error>
 800b62e:	9803      	ldr	r0, [sp, #12]
 800b630:	b020      	add	sp, #128	@ 0x80
 800b632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b636:	200b      	movs	r0, #11
 800b638:	b020      	add	sp, #128	@ 0x80
 800b63a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b63e:	200b      	movs	r0, #11
 800b640:	4770      	bx	lr
 800b642:	bf00      	nop
 800b644:	080180f0 	.word	0x080180f0

0800b648 <rclc_timer_init_default>:
 800b648:	b360      	cbz	r0, 800b6a4 <rclc_timer_init_default+0x5c>
 800b64a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b64e:	460e      	mov	r6, r1
 800b650:	b08a      	sub	sp, #40	@ 0x28
 800b652:	b319      	cbz	r1, 800b69c <rclc_timer_init_default+0x54>
 800b654:	4690      	mov	r8, r2
 800b656:	461f      	mov	r7, r3
 800b658:	4605      	mov	r5, r0
 800b65a:	f006 fdd3 	bl	8012204 <rcl_get_zero_initialized_timer>
 800b65e:	68b4      	ldr	r4, [r6, #8]
 800b660:	6028      	str	r0, [r5, #0]
 800b662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b664:	f10d 0c0c 	add.w	ip, sp, #12
 800b668:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b66c:	6823      	ldr	r3, [r4, #0]
 800b66e:	f8cc 3000 	str.w	r3, [ip]
 800b672:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b674:	9302      	str	r3, [sp, #8]
 800b676:	e9cd 8700 	strd	r8, r7, [sp]
 800b67a:	4628      	mov	r0, r5
 800b67c:	4632      	mov	r2, r6
 800b67e:	f106 010c 	add.w	r1, r6, #12
 800b682:	f006 fdc5 	bl	8012210 <rcl_timer_init>
 800b686:	b910      	cbnz	r0, 800b68e <rclc_timer_init_default+0x46>
 800b688:	b00a      	add	sp, #40	@ 0x28
 800b68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b68e:	9009      	str	r0, [sp, #36]	@ 0x24
 800b690:	f000 f872 	bl	800b778 <rcutils_reset_error>
 800b694:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b696:	b00a      	add	sp, #40	@ 0x28
 800b698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b69c:	200b      	movs	r0, #11
 800b69e:	b00a      	add	sp, #40	@ 0x28
 800b6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6a4:	200b      	movs	r0, #11
 800b6a6:	4770      	bx	lr

0800b6a8 <__default_zero_allocate>:
 800b6a8:	f00b b8c2 	b.w	8016830 <calloc>

0800b6ac <__default_reallocate>:
 800b6ac:	f00b ba4e 	b.w	8016b4c <realloc>

0800b6b0 <__default_deallocate>:
 800b6b0:	f00b b92a 	b.w	8016908 <free>

0800b6b4 <__default_allocate>:
 800b6b4:	f00b b920 	b.w	80168f8 <malloc>

0800b6b8 <rcutils_get_zero_initialized_allocator>:
 800b6b8:	b510      	push	{r4, lr}
 800b6ba:	4c05      	ldr	r4, [pc, #20]	@ (800b6d0 <rcutils_get_zero_initialized_allocator+0x18>)
 800b6bc:	4686      	mov	lr, r0
 800b6be:	4684      	mov	ip, r0
 800b6c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b6c2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b6c6:	6823      	ldr	r3, [r4, #0]
 800b6c8:	f8cc 3000 	str.w	r3, [ip]
 800b6cc:	4670      	mov	r0, lr
 800b6ce:	bd10      	pop	{r4, pc}
 800b6d0:	08018140 	.word	0x08018140

0800b6d4 <rcutils_set_default_allocator>:
 800b6d4:	b1a8      	cbz	r0, 800b702 <rcutils_set_default_allocator+0x2e>
 800b6d6:	6802      	ldr	r2, [r0, #0]
 800b6d8:	b1a2      	cbz	r2, 800b704 <rcutils_set_default_allocator+0x30>
 800b6da:	6841      	ldr	r1, [r0, #4]
 800b6dc:	b1a1      	cbz	r1, 800b708 <rcutils_set_default_allocator+0x34>
 800b6de:	b410      	push	{r4}
 800b6e0:	68c4      	ldr	r4, [r0, #12]
 800b6e2:	b164      	cbz	r4, 800b6fe <rcutils_set_default_allocator+0x2a>
 800b6e4:	6880      	ldr	r0, [r0, #8]
 800b6e6:	b138      	cbz	r0, 800b6f8 <rcutils_set_default_allocator+0x24>
 800b6e8:	4b08      	ldr	r3, [pc, #32]	@ (800b70c <rcutils_set_default_allocator+0x38>)
 800b6ea:	601a      	str	r2, [r3, #0]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800b6f2:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800b6f6:	2001      	movs	r0, #1
 800b6f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6fc:	4770      	bx	lr
 800b6fe:	4620      	mov	r0, r4
 800b700:	e7fa      	b.n	800b6f8 <rcutils_set_default_allocator+0x24>
 800b702:	4770      	bx	lr
 800b704:	4610      	mov	r0, r2
 800b706:	4770      	bx	lr
 800b708:	4608      	mov	r0, r1
 800b70a:	4770      	bx	lr
 800b70c:	2000001c 	.word	0x2000001c

0800b710 <rcutils_get_default_allocator>:
 800b710:	b510      	push	{r4, lr}
 800b712:	4c05      	ldr	r4, [pc, #20]	@ (800b728 <rcutils_get_default_allocator+0x18>)
 800b714:	4686      	mov	lr, r0
 800b716:	4684      	mov	ip, r0
 800b718:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b71a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b71e:	6823      	ldr	r3, [r4, #0]
 800b720:	f8cc 3000 	str.w	r3, [ip]
 800b724:	4670      	mov	r0, lr
 800b726:	bd10      	pop	{r4, pc}
 800b728:	2000001c 	.word	0x2000001c

0800b72c <rcutils_allocator_is_valid>:
 800b72c:	b158      	cbz	r0, 800b746 <rcutils_allocator_is_valid+0x1a>
 800b72e:	6803      	ldr	r3, [r0, #0]
 800b730:	b143      	cbz	r3, 800b744 <rcutils_allocator_is_valid+0x18>
 800b732:	6843      	ldr	r3, [r0, #4]
 800b734:	b133      	cbz	r3, 800b744 <rcutils_allocator_is_valid+0x18>
 800b736:	68c3      	ldr	r3, [r0, #12]
 800b738:	b123      	cbz	r3, 800b744 <rcutils_allocator_is_valid+0x18>
 800b73a:	6880      	ldr	r0, [r0, #8]
 800b73c:	3800      	subs	r0, #0
 800b73e:	bf18      	it	ne
 800b740:	2001      	movne	r0, #1
 800b742:	4770      	bx	lr
 800b744:	4618      	mov	r0, r3
 800b746:	4770      	bx	lr

0800b748 <rcutils_get_error_string>:
 800b748:	4b06      	ldr	r3, [pc, #24]	@ (800b764 <rcutils_get_error_string+0x1c>)
 800b74a:	781b      	ldrb	r3, [r3, #0]
 800b74c:	b13b      	cbz	r3, 800b75e <rcutils_get_error_string+0x16>
 800b74e:	4b06      	ldr	r3, [pc, #24]	@ (800b768 <rcutils_get_error_string+0x20>)
 800b750:	781a      	ldrb	r2, [r3, #0]
 800b752:	b90a      	cbnz	r2, 800b758 <rcutils_get_error_string+0x10>
 800b754:	2201      	movs	r2, #1
 800b756:	701a      	strb	r2, [r3, #0]
 800b758:	4b04      	ldr	r3, [pc, #16]	@ (800b76c <rcutils_get_error_string+0x24>)
 800b75a:	7818      	ldrb	r0, [r3, #0]
 800b75c:	4770      	bx	lr
 800b75e:	4b04      	ldr	r3, [pc, #16]	@ (800b770 <rcutils_get_error_string+0x28>)
 800b760:	7818      	ldrb	r0, [r3, #0]
 800b762:	4770      	bx	lr
 800b764:	20006178 	.word	0x20006178
 800b768:	20006191 	.word	0x20006191
 800b76c:	20006190 	.word	0x20006190
 800b770:	08018154 	.word	0x08018154
 800b774:	00000000 	.word	0x00000000

0800b778 <rcutils_reset_error>:
 800b778:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800b798 <rcutils_reset_error+0x20>
 800b77c:	4a08      	ldr	r2, [pc, #32]	@ (800b7a0 <rcutils_reset_error+0x28>)
 800b77e:	4809      	ldr	r0, [pc, #36]	@ (800b7a4 <rcutils_reset_error+0x2c>)
 800b780:	4909      	ldr	r1, [pc, #36]	@ (800b7a8 <rcutils_reset_error+0x30>)
 800b782:	2300      	movs	r3, #0
 800b784:	8013      	strh	r3, [r2, #0]
 800b786:	ed82 7b02 	vstr	d7, [r2, #8]
 800b78a:	4a08      	ldr	r2, [pc, #32]	@ (800b7ac <rcutils_reset_error+0x34>)
 800b78c:	7003      	strb	r3, [r0, #0]
 800b78e:	700b      	strb	r3, [r1, #0]
 800b790:	7013      	strb	r3, [r2, #0]
 800b792:	4770      	bx	lr
 800b794:	f3af 8000 	nop.w
	...
 800b7a0:	20006180 	.word	0x20006180
 800b7a4:	20006191 	.word	0x20006191
 800b7a8:	20006190 	.word	0x20006190
 800b7ac:	20006178 	.word	0x20006178

0800b7b0 <rcutils_system_time_now>:
 800b7b0:	b308      	cbz	r0, 800b7f6 <rcutils_system_time_now+0x46>
 800b7b2:	b570      	push	{r4, r5, r6, lr}
 800b7b4:	b084      	sub	sp, #16
 800b7b6:	4604      	mov	r4, r0
 800b7b8:	4669      	mov	r1, sp
 800b7ba:	2001      	movs	r0, #1
 800b7bc:	f7f6 ff8c 	bl	80026d8 <clock_gettime>
 800b7c0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b7c4:	2d00      	cmp	r5, #0
 800b7c6:	db13      	blt.n	800b7f0 <rcutils_system_time_now+0x40>
 800b7c8:	9902      	ldr	r1, [sp, #8]
 800b7ca:	2900      	cmp	r1, #0
 800b7cc:	db0d      	blt.n	800b7ea <rcutils_system_time_now+0x3a>
 800b7ce:	4e0b      	ldr	r6, [pc, #44]	@ (800b7fc <rcutils_system_time_now+0x4c>)
 800b7d0:	fba3 3206 	umull	r3, r2, r3, r6
 800b7d4:	185b      	adds	r3, r3, r1
 800b7d6:	fb06 2205 	mla	r2, r6, r5, r2
 800b7da:	f04f 0000 	mov.w	r0, #0
 800b7de:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800b7e2:	e9c4 3200 	strd	r3, r2, [r4]
 800b7e6:	b004      	add	sp, #16
 800b7e8:	bd70      	pop	{r4, r5, r6, pc}
 800b7ea:	ea53 0205 	orrs.w	r2, r3, r5
 800b7ee:	d1ee      	bne.n	800b7ce <rcutils_system_time_now+0x1e>
 800b7f0:	2002      	movs	r0, #2
 800b7f2:	b004      	add	sp, #16
 800b7f4:	bd70      	pop	{r4, r5, r6, pc}
 800b7f6:	200b      	movs	r0, #11
 800b7f8:	4770      	bx	lr
 800b7fa:	bf00      	nop
 800b7fc:	3b9aca00 	.word	0x3b9aca00

0800b800 <rcutils_steady_time_now>:
 800b800:	b308      	cbz	r0, 800b846 <rcutils_steady_time_now+0x46>
 800b802:	b570      	push	{r4, r5, r6, lr}
 800b804:	b084      	sub	sp, #16
 800b806:	4604      	mov	r4, r0
 800b808:	4669      	mov	r1, sp
 800b80a:	2000      	movs	r0, #0
 800b80c:	f7f6 ff64 	bl	80026d8 <clock_gettime>
 800b810:	e9dd 3500 	ldrd	r3, r5, [sp]
 800b814:	2d00      	cmp	r5, #0
 800b816:	db13      	blt.n	800b840 <rcutils_steady_time_now+0x40>
 800b818:	9902      	ldr	r1, [sp, #8]
 800b81a:	2900      	cmp	r1, #0
 800b81c:	db0d      	blt.n	800b83a <rcutils_steady_time_now+0x3a>
 800b81e:	4e0b      	ldr	r6, [pc, #44]	@ (800b84c <rcutils_steady_time_now+0x4c>)
 800b820:	fba3 3206 	umull	r3, r2, r3, r6
 800b824:	185b      	adds	r3, r3, r1
 800b826:	fb06 2205 	mla	r2, r6, r5, r2
 800b82a:	f04f 0000 	mov.w	r0, #0
 800b82e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800b832:	e9c4 3200 	strd	r3, r2, [r4]
 800b836:	b004      	add	sp, #16
 800b838:	bd70      	pop	{r4, r5, r6, pc}
 800b83a:	ea53 0205 	orrs.w	r2, r3, r5
 800b83e:	d1ee      	bne.n	800b81e <rcutils_steady_time_now+0x1e>
 800b840:	2002      	movs	r0, #2
 800b842:	b004      	add	sp, #16
 800b844:	bd70      	pop	{r4, r5, r6, pc}
 800b846:	200b      	movs	r0, #11
 800b848:	4770      	bx	lr
 800b84a:	bf00      	nop
 800b84c:	3b9aca00 	.word	0x3b9aca00

0800b850 <rmw_get_zero_initialized_init_options>:
 800b850:	b510      	push	{r4, lr}
 800b852:	2238      	movs	r2, #56	@ 0x38
 800b854:	4604      	mov	r4, r0
 800b856:	2100      	movs	r1, #0
 800b858:	f00b fbd4 	bl	8017004 <memset>
 800b85c:	f104 0010 	add.w	r0, r4, #16
 800b860:	f000 f806 	bl	800b870 <rmw_get_default_security_options>
 800b864:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b868:	60e3      	str	r3, [r4, #12]
 800b86a:	4620      	mov	r0, r4
 800b86c:	bd10      	pop	{r4, pc}
 800b86e:	bf00      	nop

0800b870 <rmw_get_default_security_options>:
 800b870:	2200      	movs	r2, #0
 800b872:	7002      	strb	r2, [r0, #0]
 800b874:	6042      	str	r2, [r0, #4]
 800b876:	4770      	bx	lr

0800b878 <rmw_uros_set_custom_transport>:
 800b878:	b470      	push	{r4, r5, r6}
 800b87a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800b87e:	b162      	cbz	r2, 800b89a <rmw_uros_set_custom_transport+0x22>
 800b880:	b15b      	cbz	r3, 800b89a <rmw_uros_set_custom_transport+0x22>
 800b882:	b155      	cbz	r5, 800b89a <rmw_uros_set_custom_transport+0x22>
 800b884:	b14e      	cbz	r6, 800b89a <rmw_uros_set_custom_transport+0x22>
 800b886:	4c06      	ldr	r4, [pc, #24]	@ (800b8a0 <rmw_uros_set_custom_transport+0x28>)
 800b888:	7020      	strb	r0, [r4, #0]
 800b88a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800b88e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800b892:	6166      	str	r6, [r4, #20]
 800b894:	2000      	movs	r0, #0
 800b896:	bc70      	pop	{r4, r5, r6}
 800b898:	4770      	bx	lr
 800b89a:	200b      	movs	r0, #11
 800b89c:	bc70      	pop	{r4, r5, r6}
 800b89e:	4770      	bx	lr
 800b8a0:	20006194 	.word	0x20006194

0800b8a4 <rmw_init_options_init>:
 800b8a4:	b084      	sub	sp, #16
 800b8a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8a8:	b083      	sub	sp, #12
 800b8aa:	ad09      	add	r5, sp, #36	@ 0x24
 800b8ac:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800b8b0:	b130      	cbz	r0, 800b8c0 <rmw_init_options_init+0x1c>
 800b8b2:	4604      	mov	r4, r0
 800b8b4:	4628      	mov	r0, r5
 800b8b6:	f7ff ff39 	bl	800b72c <rcutils_allocator_is_valid>
 800b8ba:	b108      	cbz	r0, 800b8c0 <rmw_init_options_init+0x1c>
 800b8bc:	68a6      	ldr	r6, [r4, #8]
 800b8be:	b12e      	cbz	r6, 800b8cc <rmw_init_options_init+0x28>
 800b8c0:	200b      	movs	r0, #11
 800b8c2:	b003      	add	sp, #12
 800b8c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b8c8:	b004      	add	sp, #16
 800b8ca:	4770      	bx	lr
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	e9c4 2300 	strd	r2, r3, [r4]
 800b8d4:	4b22      	ldr	r3, [pc, #136]	@ (800b960 <rmw_init_options_init+0xbc>)
 800b8d6:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800b970 <rmw_init_options_init+0xcc>
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	60a3      	str	r3, [r4, #8]
 800b8de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b8e0:	f104 0c20 	add.w	ip, r4, #32
 800b8e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b8e8:	466f      	mov	r7, sp
 800b8ea:	682b      	ldr	r3, [r5, #0]
 800b8ec:	f8cc 3000 	str.w	r3, [ip]
 800b8f0:	4638      	mov	r0, r7
 800b8f2:	f8c4 e01c 	str.w	lr, [r4, #28]
 800b8f6:	60e6      	str	r6, [r4, #12]
 800b8f8:	f7ff ffba 	bl	800b870 <rmw_get_default_security_options>
 800b8fc:	e897 0003 	ldmia.w	r7, {r0, r1}
 800b900:	f104 0310 	add.w	r3, r4, #16
 800b904:	e883 0003 	stmia.w	r3, {r0, r1}
 800b908:	2203      	movs	r2, #3
 800b90a:	4816      	ldr	r0, [pc, #88]	@ (800b964 <rmw_init_options_init+0xc0>)
 800b90c:	4916      	ldr	r1, [pc, #88]	@ (800b968 <rmw_init_options_init+0xc4>)
 800b90e:	7626      	strb	r6, [r4, #24]
 800b910:	f000 fe3c 	bl	800c58c <rmw_uxrce_init_init_options_impl_memory>
 800b914:	4813      	ldr	r0, [pc, #76]	@ (800b964 <rmw_init_options_init+0xc0>)
 800b916:	f009 f81f 	bl	8014958 <get_memory>
 800b91a:	b1f0      	cbz	r0, 800b95a <rmw_init_options_init+0xb6>
 800b91c:	4a13      	ldr	r2, [pc, #76]	@ (800b96c <rmw_init_options_init+0xc8>)
 800b91e:	6883      	ldr	r3, [r0, #8]
 800b920:	6851      	ldr	r1, [r2, #4]
 800b922:	7810      	ldrb	r0, [r2, #0]
 800b924:	6363      	str	r3, [r4, #52]	@ 0x34
 800b926:	7418      	strb	r0, [r3, #16]
 800b928:	6159      	str	r1, [r3, #20]
 800b92a:	68d1      	ldr	r1, [r2, #12]
 800b92c:	61d9      	str	r1, [r3, #28]
 800b92e:	6911      	ldr	r1, [r2, #16]
 800b930:	6219      	str	r1, [r3, #32]
 800b932:	6951      	ldr	r1, [r2, #20]
 800b934:	6892      	ldr	r2, [r2, #8]
 800b936:	619a      	str	r2, [r3, #24]
 800b938:	6259      	str	r1, [r3, #36]	@ 0x24
 800b93a:	f004 fb77 	bl	801002c <uxr_nanos>
 800b93e:	f00b f899 	bl	8016a74 <srand>
 800b942:	f00b f8c5 	bl	8016ad0 <rand>
 800b946:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b948:	6298      	str	r0, [r3, #40]	@ 0x28
 800b94a:	2800      	cmp	r0, #0
 800b94c:	d0f9      	beq.n	800b942 <rmw_init_options_init+0x9e>
 800b94e:	2000      	movs	r0, #0
 800b950:	b003      	add	sp, #12
 800b952:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b956:	b004      	add	sp, #16
 800b958:	4770      	bx	lr
 800b95a:	2001      	movs	r0, #1
 800b95c:	e7b1      	b.n	800b8c2 <rmw_init_options_init+0x1e>
 800b95e:	bf00      	nop
 800b960:	08018ab0 	.word	0x08018ab0
 800b964:	2000aaac 	.word	0x2000aaac
 800b968:	20006348 	.word	0x20006348
 800b96c:	20006194 	.word	0x20006194
 800b970:	08018158 	.word	0x08018158

0800b974 <rmw_init_options_copy>:
 800b974:	b570      	push	{r4, r5, r6, lr}
 800b976:	b158      	cbz	r0, 800b990 <rmw_init_options_copy+0x1c>
 800b978:	460d      	mov	r5, r1
 800b97a:	b149      	cbz	r1, 800b990 <rmw_init_options_copy+0x1c>
 800b97c:	4604      	mov	r4, r0
 800b97e:	6880      	ldr	r0, [r0, #8]
 800b980:	b120      	cbz	r0, 800b98c <rmw_init_options_copy+0x18>
 800b982:	4b1e      	ldr	r3, [pc, #120]	@ (800b9fc <rmw_init_options_copy+0x88>)
 800b984:	6819      	ldr	r1, [r3, #0]
 800b986:	f7f4 fc4b 	bl	8000220 <strcmp>
 800b98a:	bb90      	cbnz	r0, 800b9f2 <rmw_init_options_copy+0x7e>
 800b98c:	68ab      	ldr	r3, [r5, #8]
 800b98e:	b113      	cbz	r3, 800b996 <rmw_init_options_copy+0x22>
 800b990:	250b      	movs	r5, #11
 800b992:	4628      	mov	r0, r5
 800b994:	bd70      	pop	{r4, r5, r6, pc}
 800b996:	4623      	mov	r3, r4
 800b998:	462a      	mov	r2, r5
 800b99a:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800b99e:	f8d3 c000 	ldr.w	ip, [r3]
 800b9a2:	6858      	ldr	r0, [r3, #4]
 800b9a4:	6899      	ldr	r1, [r3, #8]
 800b9a6:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800b9aa:	f8c2 e00c 	str.w	lr, [r2, #12]
 800b9ae:	3310      	adds	r3, #16
 800b9b0:	42b3      	cmp	r3, r6
 800b9b2:	f8c2 c000 	str.w	ip, [r2]
 800b9b6:	6050      	str	r0, [r2, #4]
 800b9b8:	6091      	str	r1, [r2, #8]
 800b9ba:	f102 0210 	add.w	r2, r2, #16
 800b9be:	d1ee      	bne.n	800b99e <rmw_init_options_copy+0x2a>
 800b9c0:	6819      	ldr	r1, [r3, #0]
 800b9c2:	685b      	ldr	r3, [r3, #4]
 800b9c4:	480e      	ldr	r0, [pc, #56]	@ (800ba00 <rmw_init_options_copy+0x8c>)
 800b9c6:	6053      	str	r3, [r2, #4]
 800b9c8:	6011      	str	r1, [r2, #0]
 800b9ca:	f008 ffc5 	bl	8014958 <get_memory>
 800b9ce:	b198      	cbz	r0, 800b9f8 <rmw_init_options_copy+0x84>
 800b9d0:	6883      	ldr	r3, [r0, #8]
 800b9d2:	636b      	str	r3, [r5, #52]	@ 0x34
 800b9d4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800b9d6:	f102 0c10 	add.w	ip, r2, #16
 800b9da:	f103 0410 	add.w	r4, r3, #16
 800b9de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b9e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b9e4:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800b9e8:	2500      	movs	r5, #0
 800b9ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b9ee:	4628      	mov	r0, r5
 800b9f0:	bd70      	pop	{r4, r5, r6, pc}
 800b9f2:	250c      	movs	r5, #12
 800b9f4:	4628      	mov	r0, r5
 800b9f6:	bd70      	pop	{r4, r5, r6, pc}
 800b9f8:	2501      	movs	r5, #1
 800b9fa:	e7ca      	b.n	800b992 <rmw_init_options_copy+0x1e>
 800b9fc:	08018ab0 	.word	0x08018ab0
 800ba00:	2000aaac 	.word	0x2000aaac

0800ba04 <rmw_init_options_fini>:
 800ba04:	2800      	cmp	r0, #0
 800ba06:	d03d      	beq.n	800ba84 <rmw_init_options_fini+0x80>
 800ba08:	b510      	push	{r4, lr}
 800ba0a:	4604      	mov	r4, r0
 800ba0c:	b08e      	sub	sp, #56	@ 0x38
 800ba0e:	3020      	adds	r0, #32
 800ba10:	f7ff fe8c 	bl	800b72c <rcutils_allocator_is_valid>
 800ba14:	b360      	cbz	r0, 800ba70 <rmw_init_options_fini+0x6c>
 800ba16:	68a0      	ldr	r0, [r4, #8]
 800ba18:	b120      	cbz	r0, 800ba24 <rmw_init_options_fini+0x20>
 800ba1a:	4b1c      	ldr	r3, [pc, #112]	@ (800ba8c <rmw_init_options_fini+0x88>)
 800ba1c:	6819      	ldr	r1, [r3, #0]
 800ba1e:	f7f4 fbff 	bl	8000220 <strcmp>
 800ba22:	bb68      	cbnz	r0, 800ba80 <rmw_init_options_fini+0x7c>
 800ba24:	4b1a      	ldr	r3, [pc, #104]	@ (800ba90 <rmw_init_options_fini+0x8c>)
 800ba26:	6819      	ldr	r1, [r3, #0]
 800ba28:	b331      	cbz	r1, 800ba78 <rmw_init_options_fini+0x74>
 800ba2a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800ba2c:	e001      	b.n	800ba32 <rmw_init_options_fini+0x2e>
 800ba2e:	6849      	ldr	r1, [r1, #4]
 800ba30:	b311      	cbz	r1, 800ba78 <rmw_init_options_fini+0x74>
 800ba32:	688b      	ldr	r3, [r1, #8]
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d1fa      	bne.n	800ba2e <rmw_init_options_fini+0x2a>
 800ba38:	4815      	ldr	r0, [pc, #84]	@ (800ba90 <rmw_init_options_fini+0x8c>)
 800ba3a:	f008 ff9d 	bl	8014978 <put_memory>
 800ba3e:	4668      	mov	r0, sp
 800ba40:	f7ff ff06 	bl	800b850 <rmw_get_zero_initialized_init_options>
 800ba44:	46ee      	mov	lr, sp
 800ba46:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ba4a:	46a4      	mov	ip, r4
 800ba4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ba50:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ba54:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ba58:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ba5c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ba60:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ba64:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ba68:	2300      	movs	r3, #0
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	b00e      	add	sp, #56	@ 0x38
 800ba6e:	bd10      	pop	{r4, pc}
 800ba70:	230b      	movs	r3, #11
 800ba72:	4618      	mov	r0, r3
 800ba74:	b00e      	add	sp, #56	@ 0x38
 800ba76:	bd10      	pop	{r4, pc}
 800ba78:	2301      	movs	r3, #1
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	b00e      	add	sp, #56	@ 0x38
 800ba7e:	bd10      	pop	{r4, pc}
 800ba80:	230c      	movs	r3, #12
 800ba82:	e7f2      	b.n	800ba6a <rmw_init_options_fini+0x66>
 800ba84:	230b      	movs	r3, #11
 800ba86:	4618      	mov	r0, r3
 800ba88:	4770      	bx	lr
 800ba8a:	bf00      	nop
 800ba8c:	08018ab0 	.word	0x08018ab0
 800ba90:	2000aaac 	.word	0x2000aaac

0800ba94 <rmw_init>:
 800ba94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba98:	b083      	sub	sp, #12
 800ba9a:	2800      	cmp	r0, #0
 800ba9c:	f000 80d3 	beq.w	800bc46 <rmw_init+0x1b2>
 800baa0:	460e      	mov	r6, r1
 800baa2:	2900      	cmp	r1, #0
 800baa4:	f000 80cf 	beq.w	800bc46 <rmw_init+0x1b2>
 800baa8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800baaa:	4605      	mov	r5, r0
 800baac:	2b00      	cmp	r3, #0
 800baae:	f000 80ca 	beq.w	800bc46 <rmw_init+0x1b2>
 800bab2:	4b78      	ldr	r3, [pc, #480]	@ (800bc94 <rmw_init+0x200>)
 800bab4:	6880      	ldr	r0, [r0, #8]
 800bab6:	681f      	ldr	r7, [r3, #0]
 800bab8:	b128      	cbz	r0, 800bac6 <rmw_init+0x32>
 800baba:	4639      	mov	r1, r7
 800babc:	f7f4 fbb0 	bl	8000220 <strcmp>
 800bac0:	2800      	cmp	r0, #0
 800bac2:	f040 80ca 	bne.w	800bc5a <rmw_init+0x1c6>
 800bac6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800baca:	4c73      	ldr	r4, [pc, #460]	@ (800bc98 <rmw_init+0x204>)
 800bacc:	4973      	ldr	r1, [pc, #460]	@ (800bc9c <rmw_init+0x208>)
 800bace:	4874      	ldr	r0, [pc, #464]	@ (800bca0 <rmw_init+0x20c>)
 800bad0:	60b7      	str	r7, [r6, #8]
 800bad2:	e9c6 2300 	strd	r2, r3, [r6]
 800bad6:	68eb      	ldr	r3, [r5, #12]
 800bad8:	64b3      	str	r3, [r6, #72]	@ 0x48
 800bada:	2201      	movs	r2, #1
 800badc:	f000 fcf6 	bl	800c4cc <rmw_uxrce_init_session_memory>
 800bae0:	4620      	mov	r0, r4
 800bae2:	4970      	ldr	r1, [pc, #448]	@ (800bca4 <rmw_init+0x210>)
 800bae4:	2204      	movs	r2, #4
 800bae6:	f000 fd31 	bl	800c54c <rmw_uxrce_init_static_input_buffer_memory>
 800baea:	f04f 0800 	mov.w	r8, #0
 800baee:	486c      	ldr	r0, [pc, #432]	@ (800bca0 <rmw_init+0x20c>)
 800baf0:	f884 800d 	strb.w	r8, [r4, #13]
 800baf4:	f008 ff30 	bl	8014958 <get_memory>
 800baf8:	2800      	cmp	r0, #0
 800bafa:	f000 80a9 	beq.w	800bc50 <rmw_init+0x1bc>
 800bafe:	6884      	ldr	r4, [r0, #8]
 800bb00:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800bb02:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800bb04:	f890 c010 	ldrb.w	ip, [r0, #16]
 800bb08:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800bb0c:	9101      	str	r1, [sp, #4]
 800bb0e:	6a00      	ldr	r0, [r0, #32]
 800bb10:	9000      	str	r0, [sp, #0]
 800bb12:	f104 0910 	add.w	r9, r4, #16
 800bb16:	4661      	mov	r1, ip
 800bb18:	4648      	mov	r0, r9
 800bb1a:	f002 fa23 	bl	800df64 <uxr_set_custom_transport_callbacks>
 800bb1e:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800bb22:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800bb26:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800bb2a:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800bb2e:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800bb32:	495d      	ldr	r1, [pc, #372]	@ (800bca8 <rmw_init+0x214>)
 800bb34:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800bb38:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800bb3c:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800bb40:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800bb44:	4859      	ldr	r0, [pc, #356]	@ (800bcac <rmw_init+0x218>)
 800bb46:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800bb4e:	f000 fc9d 	bl	800c48c <rmw_uxrce_init_node_memory>
 800bb52:	4957      	ldr	r1, [pc, #348]	@ (800bcb0 <rmw_init+0x21c>)
 800bb54:	4857      	ldr	r0, [pc, #348]	@ (800bcb4 <rmw_init+0x220>)
 800bb56:	2205      	movs	r2, #5
 800bb58:	f000 fc78 	bl	800c44c <rmw_uxrce_init_subscription_memory>
 800bb5c:	4956      	ldr	r1, [pc, #344]	@ (800bcb8 <rmw_init+0x224>)
 800bb5e:	4857      	ldr	r0, [pc, #348]	@ (800bcbc <rmw_init+0x228>)
 800bb60:	220a      	movs	r2, #10
 800bb62:	f000 fc53 	bl	800c40c <rmw_uxrce_init_publisher_memory>
 800bb66:	4956      	ldr	r1, [pc, #344]	@ (800bcc0 <rmw_init+0x22c>)
 800bb68:	4856      	ldr	r0, [pc, #344]	@ (800bcc4 <rmw_init+0x230>)
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	f000 fc0e 	bl	800c38c <rmw_uxrce_init_service_memory>
 800bb70:	4955      	ldr	r1, [pc, #340]	@ (800bcc8 <rmw_init+0x234>)
 800bb72:	4856      	ldr	r0, [pc, #344]	@ (800bccc <rmw_init+0x238>)
 800bb74:	2201      	movs	r2, #1
 800bb76:	f000 fc29 	bl	800c3cc <rmw_uxrce_init_client_memory>
 800bb7a:	4955      	ldr	r1, [pc, #340]	@ (800bcd0 <rmw_init+0x23c>)
 800bb7c:	4855      	ldr	r0, [pc, #340]	@ (800bcd4 <rmw_init+0x240>)
 800bb7e:	220f      	movs	r2, #15
 800bb80:	f000 fcc4 	bl	800c50c <rmw_uxrce_init_topic_memory>
 800bb84:	4954      	ldr	r1, [pc, #336]	@ (800bcd8 <rmw_init+0x244>)
 800bb86:	4855      	ldr	r0, [pc, #340]	@ (800bcdc <rmw_init+0x248>)
 800bb88:	2203      	movs	r2, #3
 800bb8a:	f000 fcff 	bl	800c58c <rmw_uxrce_init_init_options_impl_memory>
 800bb8e:	4954      	ldr	r1, [pc, #336]	@ (800bce0 <rmw_init+0x24c>)
 800bb90:	4854      	ldr	r0, [pc, #336]	@ (800bce4 <rmw_init+0x250>)
 800bb92:	2204      	movs	r2, #4
 800bb94:	f000 fd1a 	bl	800c5cc <rmw_uxrce_init_wait_set_memory>
 800bb98:	4953      	ldr	r1, [pc, #332]	@ (800bce8 <rmw_init+0x254>)
 800bb9a:	4854      	ldr	r0, [pc, #336]	@ (800bcec <rmw_init+0x258>)
 800bb9c:	2204      	movs	r2, #4
 800bb9e:	f000 fd35 	bl	800c60c <rmw_uxrce_init_guard_condition_memory>
 800bba2:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800bba4:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800bba6:	4642      	mov	r2, r8
 800bba8:	f000 fbd8 	bl	800c35c <rmw_uxrce_transport_init>
 800bbac:	4607      	mov	r7, r0
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	d158      	bne.n	800bc64 <rmw_init+0x1d0>
 800bbb2:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800bbb4:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800bbb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bbba:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800bbbe:	4628      	mov	r0, r5
 800bbc0:	f002 fc06 	bl	800e3d0 <uxr_init_session>
 800bbc4:	494a      	ldr	r1, [pc, #296]	@ (800bcf0 <rmw_init+0x25c>)
 800bbc6:	4622      	mov	r2, r4
 800bbc8:	4628      	mov	r0, r5
 800bbca:	f002 fc25 	bl	800e418 <uxr_set_topic_callback>
 800bbce:	4949      	ldr	r1, [pc, #292]	@ (800bcf4 <rmw_init+0x260>)
 800bbd0:	463a      	mov	r2, r7
 800bbd2:	4628      	mov	r0, r5
 800bbd4:	f002 fc1c 	bl	800e410 <uxr_set_status_callback>
 800bbd8:	4947      	ldr	r1, [pc, #284]	@ (800bcf8 <rmw_init+0x264>)
 800bbda:	463a      	mov	r2, r7
 800bbdc:	4628      	mov	r0, r5
 800bbde:	f002 fc1f 	bl	800e420 <uxr_set_request_callback>
 800bbe2:	4946      	ldr	r1, [pc, #280]	@ (800bcfc <rmw_init+0x268>)
 800bbe4:	463a      	mov	r2, r7
 800bbe6:	4628      	mov	r0, r5
 800bbe8:	f002 fc1e 	bl	800e428 <uxr_set_reply_callback>
 800bbec:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800bbf0:	2304      	movs	r3, #4
 800bbf2:	0092      	lsls	r2, r2, #2
 800bbf4:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800bbf8:	4628      	mov	r0, r5
 800bbfa:	f002 fc53 	bl	800e4a4 <uxr_create_input_reliable_stream>
 800bbfe:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800bc02:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800bc06:	0092      	lsls	r2, r2, #2
 800bc08:	2304      	movs	r3, #4
 800bc0a:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800bc0e:	4628      	mov	r0, r5
 800bc10:	f002 fc20 	bl	800e454 <uxr_create_output_reliable_stream>
 800bc14:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800bc18:	4628      	mov	r0, r5
 800bc1a:	f002 fc3d 	bl	800e498 <uxr_create_input_best_effort_stream>
 800bc1e:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800bc22:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800bc26:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800bc2a:	3114      	adds	r1, #20
 800bc2c:	4628      	mov	r0, r5
 800bc2e:	f002 fbff 	bl	800e430 <uxr_create_output_best_effort_stream>
 800bc32:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800bc36:	4628      	mov	r0, r5
 800bc38:	f003 f98a 	bl	800ef50 <uxr_create_session>
 800bc3c:	b1f8      	cbz	r0, 800bc7e <rmw_init+0x1ea>
 800bc3e:	4638      	mov	r0, r7
 800bc40:	b003      	add	sp, #12
 800bc42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc46:	270b      	movs	r7, #11
 800bc48:	4638      	mov	r0, r7
 800bc4a:	b003      	add	sp, #12
 800bc4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc50:	2701      	movs	r7, #1
 800bc52:	4638      	mov	r0, r7
 800bc54:	b003      	add	sp, #12
 800bc56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc5a:	270c      	movs	r7, #12
 800bc5c:	4638      	mov	r0, r7
 800bc5e:	b003      	add	sp, #12
 800bc60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc64:	4648      	mov	r0, r9
 800bc66:	f002 f9bf 	bl	800dfe8 <uxr_close_custom_transport>
 800bc6a:	480d      	ldr	r0, [pc, #52]	@ (800bca0 <rmw_init+0x20c>)
 800bc6c:	4621      	mov	r1, r4
 800bc6e:	f008 fe83 	bl	8014978 <put_memory>
 800bc72:	4638      	mov	r0, r7
 800bc74:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800bc78:	b003      	add	sp, #12
 800bc7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc7e:	4648      	mov	r0, r9
 800bc80:	f002 f9b2 	bl	800dfe8 <uxr_close_custom_transport>
 800bc84:	4806      	ldr	r0, [pc, #24]	@ (800bca0 <rmw_init+0x20c>)
 800bc86:	4621      	mov	r1, r4
 800bc88:	f008 fe76 	bl	8014978 <put_memory>
 800bc8c:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800bc8e:	2701      	movs	r7, #1
 800bc90:	e7d5      	b.n	800bc3e <rmw_init+0x1aa>
 800bc92:	bf00      	nop
 800bc94:	08018ab0 	.word	0x08018ab0
 800bc98:	2000aafc 	.word	0x2000aafc
 800bc9c:	20006da8 	.word	0x20006da8
 800bca0:	2000aaec 	.word	0x2000aaec
 800bca4:	20008350 	.word	0x20008350
 800bca8:	200063cc 	.word	0x200063cc
 800bcac:	2000aabc 	.word	0x2000aabc
 800bcb0:	2000a450 	.word	0x2000a450
 800bcb4:	2000ab0c 	.word	0x2000ab0c
 800bcb8:	20006470 	.word	0x20006470
 800bcbc:	2000aacc 	.word	0x2000aacc
 800bcc0:	20006ce0 	.word	0x20006ce0
 800bcc4:	2000aadc 	.word	0x2000aadc
 800bcc8:	20006200 	.word	0x20006200
 800bccc:	200061ec 	.word	0x200061ec
 800bcd0:	2000a888 	.word	0x2000a888
 800bcd4:	2000ab1c 	.word	0x2000ab1c
 800bcd8:	20006348 	.word	0x20006348
 800bcdc:	2000aaac 	.word	0x2000aaac
 800bce0:	2000aa2c 	.word	0x2000aa2c
 800bce4:	2000ab2c 	.word	0x2000ab2c
 800bce8:	200062c8 	.word	0x200062c8
 800bcec:	2000aa9c 	.word	0x2000aa9c
 800bcf0:	08014791 	.word	0x08014791
 800bcf4:	08014789 	.word	0x08014789
 800bcf8:	08014829 	.word	0x08014829
 800bcfc:	080148c5 	.word	0x080148c5

0800bd00 <rmw_context_fini>:
 800bd00:	4b17      	ldr	r3, [pc, #92]	@ (800bd60 <rmw_context_fini+0x60>)
 800bd02:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800bd04:	b570      	push	{r4, r5, r6, lr}
 800bd06:	681c      	ldr	r4, [r3, #0]
 800bd08:	4605      	mov	r5, r0
 800bd0a:	b334      	cbz	r4, 800bd5a <rmw_context_fini+0x5a>
 800bd0c:	2600      	movs	r6, #0
 800bd0e:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800bd12:	6902      	ldr	r2, [r0, #16]
 800bd14:	428a      	cmp	r2, r1
 800bd16:	d018      	beq.n	800bd4a <rmw_context_fini+0x4a>
 800bd18:	2c00      	cmp	r4, #0
 800bd1a:	d1f8      	bne.n	800bd0e <rmw_context_fini+0xe>
 800bd1c:	b189      	cbz	r1, 800bd42 <rmw_context_fini+0x42>
 800bd1e:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800bd22:	789b      	ldrb	r3, [r3, #2]
 800bd24:	2b01      	cmp	r3, #1
 800bd26:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800bd2a:	bf14      	ite	ne
 800bd2c:	210a      	movne	r1, #10
 800bd2e:	2100      	moveq	r1, #0
 800bd30:	f003 f8e6 	bl	800ef00 <uxr_delete_session_retries>
 800bd34:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800bd36:	f000 fc89 	bl	800c64c <rmw_uxrce_fini_session_memory>
 800bd3a:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800bd3c:	3010      	adds	r0, #16
 800bd3e:	f002 f953 	bl	800dfe8 <uxr_close_custom_transport>
 800bd42:	2300      	movs	r3, #0
 800bd44:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800bd46:	4630      	mov	r0, r6
 800bd48:	bd70      	pop	{r4, r5, r6, pc}
 800bd4a:	3018      	adds	r0, #24
 800bd4c:	f000 f89c 	bl	800be88 <rmw_destroy_node>
 800bd50:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800bd52:	4606      	mov	r6, r0
 800bd54:	2c00      	cmp	r4, #0
 800bd56:	d1da      	bne.n	800bd0e <rmw_context_fini+0xe>
 800bd58:	e7e0      	b.n	800bd1c <rmw_context_fini+0x1c>
 800bd5a:	4626      	mov	r6, r4
 800bd5c:	e7de      	b.n	800bd1c <rmw_context_fini+0x1c>
 800bd5e:	bf00      	nop
 800bd60:	2000aabc 	.word	0x2000aabc

0800bd64 <create_node>:
 800bd64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd68:	b083      	sub	sp, #12
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d05f      	beq.n	800be2e <create_node+0xca>
 800bd6e:	4606      	mov	r6, r0
 800bd70:	4835      	ldr	r0, [pc, #212]	@ (800be48 <create_node+0xe4>)
 800bd72:	460f      	mov	r7, r1
 800bd74:	4690      	mov	r8, r2
 800bd76:	461d      	mov	r5, r3
 800bd78:	f008 fdee 	bl	8014958 <get_memory>
 800bd7c:	2800      	cmp	r0, #0
 800bd7e:	d056      	beq.n	800be2e <create_node+0xca>
 800bd80:	6884      	ldr	r4, [r0, #8]
 800bd82:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800bd84:	6123      	str	r3, [r4, #16]
 800bd86:	f008 fe4f 	bl	8014a28 <rmw_get_implementation_identifier>
 800bd8a:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800bd8e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800bd92:	f8c4 9020 	str.w	r9, [r4, #32]
 800bd96:	4630      	mov	r0, r6
 800bd98:	f7f4 fa4c 	bl	8000234 <strlen>
 800bd9c:	1c42      	adds	r2, r0, #1
 800bd9e:	2a3c      	cmp	r2, #60	@ 0x3c
 800bda0:	f104 0518 	add.w	r5, r4, #24
 800bda4:	d840      	bhi.n	800be28 <create_node+0xc4>
 800bda6:	4648      	mov	r0, r9
 800bda8:	4631      	mov	r1, r6
 800bdaa:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800bdae:	f00b f9f2 	bl	8017196 <memcpy>
 800bdb2:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800bdb6:	4638      	mov	r0, r7
 800bdb8:	f7f4 fa3c 	bl	8000234 <strlen>
 800bdbc:	1c42      	adds	r2, r0, #1
 800bdbe:	2a3c      	cmp	r2, #60	@ 0x3c
 800bdc0:	d832      	bhi.n	800be28 <create_node+0xc4>
 800bdc2:	4639      	mov	r1, r7
 800bdc4:	4648      	mov	r0, r9
 800bdc6:	f00b f9e6 	bl	8017196 <memcpy>
 800bdca:	6923      	ldr	r3, [r4, #16]
 800bdcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bdd0:	2101      	movs	r1, #1
 800bdd2:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800bdd6:	1842      	adds	r2, r0, r1
 800bdd8:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800bddc:	f002 f908 	bl	800dff0 <uxr_object_id>
 800bde0:	6160      	str	r0, [r4, #20]
 800bde2:	783b      	ldrb	r3, [r7, #0]
 800bde4:	2b2f      	cmp	r3, #47	@ 0x2f
 800bde6:	d127      	bne.n	800be38 <create_node+0xd4>
 800bde8:	787b      	ldrb	r3, [r7, #1]
 800bdea:	bb2b      	cbnz	r3, 800be38 <create_node+0xd4>
 800bdec:	4a17      	ldr	r2, [pc, #92]	@ (800be4c <create_node+0xe8>)
 800bdee:	4818      	ldr	r0, [pc, #96]	@ (800be50 <create_node+0xec>)
 800bdf0:	4633      	mov	r3, r6
 800bdf2:	213c      	movs	r1, #60	@ 0x3c
 800bdf4:	f00b f82c 	bl	8016e50 <sniprintf>
 800bdf8:	6920      	ldr	r0, [r4, #16]
 800bdfa:	4915      	ldr	r1, [pc, #84]	@ (800be50 <create_node+0xec>)
 800bdfc:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800be00:	9100      	str	r1, [sp, #0]
 800be02:	2106      	movs	r1, #6
 800be04:	9101      	str	r1, [sp, #4]
 800be06:	6811      	ldr	r1, [r2, #0]
 800be08:	6962      	ldr	r2, [r4, #20]
 800be0a:	fa1f f388 	uxth.w	r3, r8
 800be0e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800be12:	f001 ff1b 	bl	800dc4c <uxr_buffer_create_participant_bin>
 800be16:	4602      	mov	r2, r0
 800be18:	6920      	ldr	r0, [r4, #16]
 800be1a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800be1e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800be22:	f000 fd8b 	bl	800c93c <run_xrce_session>
 800be26:	b918      	cbnz	r0, 800be30 <create_node+0xcc>
 800be28:	4628      	mov	r0, r5
 800be2a:	f000 fc15 	bl	800c658 <rmw_uxrce_fini_node_memory>
 800be2e:	2500      	movs	r5, #0
 800be30:	4628      	mov	r0, r5
 800be32:	b003      	add	sp, #12
 800be34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be38:	4a06      	ldr	r2, [pc, #24]	@ (800be54 <create_node+0xf0>)
 800be3a:	9600      	str	r6, [sp, #0]
 800be3c:	463b      	mov	r3, r7
 800be3e:	213c      	movs	r1, #60	@ 0x3c
 800be40:	4803      	ldr	r0, [pc, #12]	@ (800be50 <create_node+0xec>)
 800be42:	f00b f805 	bl	8016e50 <sniprintf>
 800be46:	e7d7      	b.n	800bdf8 <create_node+0x94>
 800be48:	2000aabc 	.word	0x2000aabc
 800be4c:	08018198 	.word	0x08018198
 800be50:	200061b0 	.word	0x200061b0
 800be54:	0801815c 	.word	0x0801815c

0800be58 <rmw_create_node>:
 800be58:	b199      	cbz	r1, 800be82 <rmw_create_node+0x2a>
 800be5a:	780b      	ldrb	r3, [r1, #0]
 800be5c:	468c      	mov	ip, r1
 800be5e:	b183      	cbz	r3, 800be82 <rmw_create_node+0x2a>
 800be60:	b410      	push	{r4}
 800be62:	4614      	mov	r4, r2
 800be64:	b14a      	cbz	r2, 800be7a <rmw_create_node+0x22>
 800be66:	7813      	ldrb	r3, [r2, #0]
 800be68:	b13b      	cbz	r3, 800be7a <rmw_create_node+0x22>
 800be6a:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800be6c:	4603      	mov	r3, r0
 800be6e:	4621      	mov	r1, r4
 800be70:	4660      	mov	r0, ip
 800be72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be76:	f7ff bf75 	b.w	800bd64 <create_node>
 800be7a:	2000      	movs	r0, #0
 800be7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be80:	4770      	bx	lr
 800be82:	2000      	movs	r0, #0
 800be84:	4770      	bx	lr
 800be86:	bf00      	nop

0800be88 <rmw_destroy_node>:
 800be88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be8a:	b328      	cbz	r0, 800bed8 <rmw_destroy_node+0x50>
 800be8c:	4607      	mov	r7, r0
 800be8e:	6800      	ldr	r0, [r0, #0]
 800be90:	b120      	cbz	r0, 800be9c <rmw_destroy_node+0x14>
 800be92:	4b36      	ldr	r3, [pc, #216]	@ (800bf6c <rmw_destroy_node+0xe4>)
 800be94:	6819      	ldr	r1, [r3, #0]
 800be96:	f7f4 f9c3 	bl	8000220 <strcmp>
 800be9a:	b9e8      	cbnz	r0, 800bed8 <rmw_destroy_node+0x50>
 800be9c:	687d      	ldr	r5, [r7, #4]
 800be9e:	b1dd      	cbz	r5, 800bed8 <rmw_destroy_node+0x50>
 800bea0:	4b33      	ldr	r3, [pc, #204]	@ (800bf70 <rmw_destroy_node+0xe8>)
 800bea2:	681c      	ldr	r4, [r3, #0]
 800bea4:	2c00      	cmp	r4, #0
 800bea6:	d05f      	beq.n	800bf68 <rmw_destroy_node+0xe0>
 800bea8:	2600      	movs	r6, #0
 800beaa:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800beae:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800beb2:	429d      	cmp	r5, r3
 800beb4:	d013      	beq.n	800bede <rmw_destroy_node+0x56>
 800beb6:	2c00      	cmp	r4, #0
 800beb8:	d1f7      	bne.n	800beaa <rmw_destroy_node+0x22>
 800beba:	4b2e      	ldr	r3, [pc, #184]	@ (800bf74 <rmw_destroy_node+0xec>)
 800bebc:	681c      	ldr	r4, [r3, #0]
 800bebe:	b1c4      	cbz	r4, 800bef2 <rmw_destroy_node+0x6a>
 800bec0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800bec4:	6a0b      	ldr	r3, [r1, #32]
 800bec6:	429d      	cmp	r5, r3
 800bec8:	d1f9      	bne.n	800bebe <rmw_destroy_node+0x36>
 800beca:	317c      	adds	r1, #124	@ 0x7c
 800becc:	4638      	mov	r0, r7
 800bece:	f000 f9e5 	bl	800c29c <rmw_destroy_subscription>
 800bed2:	2801      	cmp	r0, #1
 800bed4:	4606      	mov	r6, r0
 800bed6:	d1f2      	bne.n	800bebe <rmw_destroy_node+0x36>
 800bed8:	2601      	movs	r6, #1
 800beda:	4630      	mov	r0, r6
 800bedc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bede:	3184      	adds	r1, #132	@ 0x84
 800bee0:	4638      	mov	r0, r7
 800bee2:	f000 f853 	bl	800bf8c <rmw_destroy_publisher>
 800bee6:	2801      	cmp	r0, #1
 800bee8:	4606      	mov	r6, r0
 800beea:	d0f5      	beq.n	800bed8 <rmw_destroy_node+0x50>
 800beec:	2c00      	cmp	r4, #0
 800beee:	d1dc      	bne.n	800beaa <rmw_destroy_node+0x22>
 800bef0:	e7e3      	b.n	800beba <rmw_destroy_node+0x32>
 800bef2:	4b21      	ldr	r3, [pc, #132]	@ (800bf78 <rmw_destroy_node+0xf0>)
 800bef4:	681c      	ldr	r4, [r3, #0]
 800bef6:	b16c      	cbz	r4, 800bf14 <rmw_destroy_node+0x8c>
 800bef8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800befc:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800befe:	429d      	cmp	r5, r3
 800bf00:	d1f9      	bne.n	800bef6 <rmw_destroy_node+0x6e>
 800bf02:	317c      	adds	r1, #124	@ 0x7c
 800bf04:	4638      	mov	r0, r7
 800bf06:	f000 f893 	bl	800c030 <rmw_destroy_service>
 800bf0a:	2801      	cmp	r0, #1
 800bf0c:	4606      	mov	r6, r0
 800bf0e:	d0e3      	beq.n	800bed8 <rmw_destroy_node+0x50>
 800bf10:	2c00      	cmp	r4, #0
 800bf12:	d1f1      	bne.n	800bef8 <rmw_destroy_node+0x70>
 800bf14:	4b19      	ldr	r3, [pc, #100]	@ (800bf7c <rmw_destroy_node+0xf4>)
 800bf16:	681c      	ldr	r4, [r3, #0]
 800bf18:	b16c      	cbz	r4, 800bf36 <rmw_destroy_node+0xae>
 800bf1a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800bf1e:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800bf20:	429d      	cmp	r5, r3
 800bf22:	d1f9      	bne.n	800bf18 <rmw_destroy_node+0x90>
 800bf24:	317c      	adds	r1, #124	@ 0x7c
 800bf26:	4638      	mov	r0, r7
 800bf28:	f008 fd3a 	bl	80149a0 <rmw_destroy_client>
 800bf2c:	2801      	cmp	r0, #1
 800bf2e:	4606      	mov	r6, r0
 800bf30:	d0d2      	beq.n	800bed8 <rmw_destroy_node+0x50>
 800bf32:	2c00      	cmp	r4, #0
 800bf34:	d1f1      	bne.n	800bf1a <rmw_destroy_node+0x92>
 800bf36:	6928      	ldr	r0, [r5, #16]
 800bf38:	696a      	ldr	r2, [r5, #20]
 800bf3a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800bf3e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bf42:	6819      	ldr	r1, [r3, #0]
 800bf44:	f001 fe36 	bl	800dbb4 <uxr_buffer_delete_entity>
 800bf48:	4602      	mov	r2, r0
 800bf4a:	6928      	ldr	r0, [r5, #16]
 800bf4c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800bf50:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800bf54:	f000 fcf2 	bl	800c93c <run_xrce_session>
 800bf58:	2800      	cmp	r0, #0
 800bf5a:	bf08      	it	eq
 800bf5c:	2602      	moveq	r6, #2
 800bf5e:	4638      	mov	r0, r7
 800bf60:	f000 fb7a 	bl	800c658 <rmw_uxrce_fini_node_memory>
 800bf64:	4630      	mov	r0, r6
 800bf66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf68:	4626      	mov	r6, r4
 800bf6a:	e7a6      	b.n	800beba <rmw_destroy_node+0x32>
 800bf6c:	08018ab0 	.word	0x08018ab0
 800bf70:	2000aacc 	.word	0x2000aacc
 800bf74:	2000ab0c 	.word	0x2000ab0c
 800bf78:	2000aadc 	.word	0x2000aadc
 800bf7c:	200061ec 	.word	0x200061ec

0800bf80 <rmw_node_get_graph_guard_condition>:
 800bf80:	6843      	ldr	r3, [r0, #4]
 800bf82:	6918      	ldr	r0, [r3, #16]
 800bf84:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800bf88:	4770      	bx	lr
 800bf8a:	bf00      	nop

0800bf8c <rmw_destroy_publisher>:
 800bf8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf8e:	b128      	cbz	r0, 800bf9c <rmw_destroy_publisher+0x10>
 800bf90:	4604      	mov	r4, r0
 800bf92:	6800      	ldr	r0, [r0, #0]
 800bf94:	460d      	mov	r5, r1
 800bf96:	f000 fd51 	bl	800ca3c <is_uxrce_rmw_identifier_valid>
 800bf9a:	b910      	cbnz	r0, 800bfa2 <rmw_destroy_publisher+0x16>
 800bf9c:	2401      	movs	r4, #1
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfa2:	6863      	ldr	r3, [r4, #4]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d0f9      	beq.n	800bf9c <rmw_destroy_publisher+0x10>
 800bfa8:	2d00      	cmp	r5, #0
 800bfaa:	d0f7      	beq.n	800bf9c <rmw_destroy_publisher+0x10>
 800bfac:	6828      	ldr	r0, [r5, #0]
 800bfae:	f000 fd45 	bl	800ca3c <is_uxrce_rmw_identifier_valid>
 800bfb2:	2800      	cmp	r0, #0
 800bfb4:	d0f2      	beq.n	800bf9c <rmw_destroy_publisher+0x10>
 800bfb6:	686c      	ldr	r4, [r5, #4]
 800bfb8:	2c00      	cmp	r4, #0
 800bfba:	d0ef      	beq.n	800bf9c <rmw_destroy_publisher+0x10>
 800bfbc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800bfbe:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800bfc2:	f008 fd87 	bl	8014ad4 <destroy_topic>
 800bfc6:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800bfca:	6962      	ldr	r2, [r4, #20]
 800bfcc:	6918      	ldr	r0, [r3, #16]
 800bfce:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800bfd2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800bfd6:	6819      	ldr	r1, [r3, #0]
 800bfd8:	f001 fdec 	bl	800dbb4 <uxr_buffer_delete_entity>
 800bfdc:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800bfe0:	6922      	ldr	r2, [r4, #16]
 800bfe2:	691b      	ldr	r3, [r3, #16]
 800bfe4:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800bfe8:	4604      	mov	r4, r0
 800bfea:	6809      	ldr	r1, [r1, #0]
 800bfec:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800bff0:	f001 fde0 	bl	800dbb4 <uxr_buffer_delete_entity>
 800bff4:	693e      	ldr	r6, [r7, #16]
 800bff6:	4622      	mov	r2, r4
 800bff8:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800bffc:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800c000:	4604      	mov	r4, r0
 800c002:	4630      	mov	r0, r6
 800c004:	f000 fc9a 	bl	800c93c <run_xrce_session>
 800c008:	693e      	ldr	r6, [r7, #16]
 800c00a:	4622      	mov	r2, r4
 800c00c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800c010:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800c014:	4604      	mov	r4, r0
 800c016:	4630      	mov	r0, r6
 800c018:	f000 fc90 	bl	800c93c <run_xrce_session>
 800c01c:	b12c      	cbz	r4, 800c02a <rmw_destroy_publisher+0x9e>
 800c01e:	b120      	cbz	r0, 800c02a <rmw_destroy_publisher+0x9e>
 800c020:	2400      	movs	r4, #0
 800c022:	4628      	mov	r0, r5
 800c024:	f000 fb30 	bl	800c688 <rmw_uxrce_fini_publisher_memory>
 800c028:	e7b9      	b.n	800bf9e <rmw_destroy_publisher+0x12>
 800c02a:	2402      	movs	r4, #2
 800c02c:	e7f9      	b.n	800c022 <rmw_destroy_publisher+0x96>
 800c02e:	bf00      	nop

0800c030 <rmw_destroy_service>:
 800c030:	b570      	push	{r4, r5, r6, lr}
 800c032:	b128      	cbz	r0, 800c040 <rmw_destroy_service+0x10>
 800c034:	4604      	mov	r4, r0
 800c036:	6800      	ldr	r0, [r0, #0]
 800c038:	460d      	mov	r5, r1
 800c03a:	f000 fcff 	bl	800ca3c <is_uxrce_rmw_identifier_valid>
 800c03e:	b910      	cbnz	r0, 800c046 <rmw_destroy_service+0x16>
 800c040:	2401      	movs	r4, #1
 800c042:	4620      	mov	r0, r4
 800c044:	bd70      	pop	{r4, r5, r6, pc}
 800c046:	6863      	ldr	r3, [r4, #4]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d0f9      	beq.n	800c040 <rmw_destroy_service+0x10>
 800c04c:	2d00      	cmp	r5, #0
 800c04e:	d0f7      	beq.n	800c040 <rmw_destroy_service+0x10>
 800c050:	6828      	ldr	r0, [r5, #0]
 800c052:	f000 fcf3 	bl	800ca3c <is_uxrce_rmw_identifier_valid>
 800c056:	2800      	cmp	r0, #0
 800c058:	d0f2      	beq.n	800c040 <rmw_destroy_service+0x10>
 800c05a:	686e      	ldr	r6, [r5, #4]
 800c05c:	2e00      	cmp	r6, #0
 800c05e:	d0ef      	beq.n	800c040 <rmw_destroy_service+0x10>
 800c060:	6864      	ldr	r4, [r4, #4]
 800c062:	6932      	ldr	r2, [r6, #16]
 800c064:	6920      	ldr	r0, [r4, #16]
 800c066:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c06a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c06e:	6819      	ldr	r1, [r3, #0]
 800c070:	f002 f828 	bl	800e0c4 <uxr_buffer_cancel_data>
 800c074:	4602      	mov	r2, r0
 800c076:	6920      	ldr	r0, [r4, #16]
 800c078:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c07c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c080:	f000 fc5c 	bl	800c93c <run_xrce_session>
 800c084:	6920      	ldr	r0, [r4, #16]
 800c086:	6932      	ldr	r2, [r6, #16]
 800c088:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c08c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c090:	6819      	ldr	r1, [r3, #0]
 800c092:	f001 fd8f 	bl	800dbb4 <uxr_buffer_delete_entity>
 800c096:	4602      	mov	r2, r0
 800c098:	6920      	ldr	r0, [r4, #16]
 800c09a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c09e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c0a2:	f000 fc4b 	bl	800c93c <run_xrce_session>
 800c0a6:	2800      	cmp	r0, #0
 800c0a8:	4628      	mov	r0, r5
 800c0aa:	bf14      	ite	ne
 800c0ac:	2400      	movne	r4, #0
 800c0ae:	2402      	moveq	r4, #2
 800c0b0:	f000 fb16 	bl	800c6e0 <rmw_uxrce_fini_service_memory>
 800c0b4:	e7c5      	b.n	800c042 <rmw_destroy_service+0x12>
 800c0b6:	bf00      	nop

0800c0b8 <rmw_create_subscription>:
 800c0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0bc:	b08d      	sub	sp, #52	@ 0x34
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	f000 80d1 	beq.w	800c266 <rmw_create_subscription+0x1ae>
 800c0c4:	460e      	mov	r6, r1
 800c0c6:	2900      	cmp	r1, #0
 800c0c8:	f000 80cd 	beq.w	800c266 <rmw_create_subscription+0x1ae>
 800c0cc:	4604      	mov	r4, r0
 800c0ce:	6800      	ldr	r0, [r0, #0]
 800c0d0:	4615      	mov	r5, r2
 800c0d2:	4698      	mov	r8, r3
 800c0d4:	f000 fcb2 	bl	800ca3c <is_uxrce_rmw_identifier_valid>
 800c0d8:	2800      	cmp	r0, #0
 800c0da:	f000 80c4 	beq.w	800c266 <rmw_create_subscription+0x1ae>
 800c0de:	2d00      	cmp	r5, #0
 800c0e0:	f000 80c1 	beq.w	800c266 <rmw_create_subscription+0x1ae>
 800c0e4:	782b      	ldrb	r3, [r5, #0]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	f000 80bd 	beq.w	800c266 <rmw_create_subscription+0x1ae>
 800c0ec:	f1b8 0f00 	cmp.w	r8, #0
 800c0f0:	f000 80b9 	beq.w	800c266 <rmw_create_subscription+0x1ae>
 800c0f4:	485e      	ldr	r0, [pc, #376]	@ (800c270 <rmw_create_subscription+0x1b8>)
 800c0f6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c0fa:	f008 fc2d 	bl	8014958 <get_memory>
 800c0fe:	4604      	mov	r4, r0
 800c100:	2800      	cmp	r0, #0
 800c102:	f000 80b1 	beq.w	800c268 <rmw_create_subscription+0x1b0>
 800c106:	6887      	ldr	r7, [r0, #8]
 800c108:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800c10c:	f008 fc8c 	bl	8014a28 <rmw_get_implementation_identifier>
 800c110:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 800c114:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800c116:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800c11a:	4628      	mov	r0, r5
 800c11c:	f7f4 f88a 	bl	8000234 <strlen>
 800c120:	3001      	adds	r0, #1
 800c122:	283c      	cmp	r0, #60	@ 0x3c
 800c124:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800c128:	f200 8096 	bhi.w	800c258 <rmw_create_subscription+0x1a0>
 800c12c:	4a51      	ldr	r2, [pc, #324]	@ (800c274 <rmw_create_subscription+0x1bc>)
 800c12e:	462b      	mov	r3, r5
 800c130:	213c      	movs	r1, #60	@ 0x3c
 800c132:	4650      	mov	r0, sl
 800c134:	f00a fe8c 	bl	8016e50 <sniprintf>
 800c138:	4641      	mov	r1, r8
 800c13a:	f8c7 9020 	str.w	r9, [r7, #32]
 800c13e:	2250      	movs	r2, #80	@ 0x50
 800c140:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800c144:	f00b f827 	bl	8017196 <memcpy>
 800c148:	494b      	ldr	r1, [pc, #300]	@ (800c278 <rmw_create_subscription+0x1c0>)
 800c14a:	4630      	mov	r0, r6
 800c14c:	f000 fc84 	bl	800ca58 <get_message_typesupport_handle>
 800c150:	2800      	cmp	r0, #0
 800c152:	f000 8081 	beq.w	800c258 <rmw_create_subscription+0x1a0>
 800c156:	6842      	ldr	r2, [r0, #4]
 800c158:	61ba      	str	r2, [r7, #24]
 800c15a:	2a00      	cmp	r2, #0
 800c15c:	d07c      	beq.n	800c258 <rmw_create_subscription+0x1a0>
 800c15e:	4629      	mov	r1, r5
 800c160:	4643      	mov	r3, r8
 800c162:	4648      	mov	r0, r9
 800c164:	f008 fc66 	bl	8014a34 <create_topic>
 800c168:	61f8      	str	r0, [r7, #28]
 800c16a:	2800      	cmp	r0, #0
 800c16c:	d078      	beq.n	800c260 <rmw_create_subscription+0x1a8>
 800c16e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c172:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c176:	2104      	movs	r1, #4
 800c178:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 800c17c:	1c42      	adds	r2, r0, #1
 800c17e:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 800c182:	f001 ff35 	bl	800dff0 <uxr_object_id>
 800c186:	6138      	str	r0, [r7, #16]
 800c188:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c18c:	2506      	movs	r5, #6
 800c18e:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 800c192:	9500      	str	r5, [sp, #0]
 800c194:	6819      	ldr	r1, [r3, #0]
 800c196:	693a      	ldr	r2, [r7, #16]
 800c198:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c19c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c1a0:	f001 fdbc 	bl	800dd1c <uxr_buffer_create_subscriber_bin>
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c1aa:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c1ae:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c1b2:	f000 fbc3 	bl	800c93c <run_xrce_session>
 800c1b6:	2800      	cmp	r0, #0
 800c1b8:	d04e      	beq.n	800c258 <rmw_create_subscription+0x1a0>
 800c1ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c1be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c1c2:	4629      	mov	r1, r5
 800c1c4:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 800c1c8:	1c42      	adds	r2, r0, #1
 800c1ca:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 800c1ce:	f001 ff0f 	bl	800dff0 <uxr_object_id>
 800c1d2:	ae08      	add	r6, sp, #32
 800c1d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c1d8:	69fb      	ldr	r3, [r7, #28]
 800c1da:	6178      	str	r0, [r7, #20]
 800c1dc:	4641      	mov	r1, r8
 800c1de:	4630      	mov	r0, r6
 800c1e0:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800c1e4:	9305      	str	r3, [sp, #20]
 800c1e6:	f000 fbc5 	bl	800c974 <convert_qos_profile>
 800c1ea:	9503      	str	r5, [sp, #12]
 800c1ec:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c1f0:	9b05      	ldr	r3, [sp, #20]
 800c1f2:	9001      	str	r0, [sp, #4]
 800c1f4:	f8ad 1008 	strh.w	r1, [sp, #8]
 800c1f8:	691b      	ldr	r3, [r3, #16]
 800c1fa:	9300      	str	r3, [sp, #0]
 800c1fc:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800c200:	f8db 1000 	ldr.w	r1, [fp]
 800c204:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800c208:	f001 fdb8 	bl	800dd7c <uxr_buffer_create_datareader_bin>
 800c20c:	4602      	mov	r2, r0
 800c20e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c212:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c216:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c21a:	f000 fb8f 	bl	800c93c <run_xrce_session>
 800c21e:	b1d8      	cbz	r0, 800c258 <rmw_create_subscription+0x1a0>
 800c220:	f898 3008 	ldrb.w	r3, [r8, #8]
 800c224:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c228:	2b02      	cmp	r3, #2
 800c22a:	bf0c      	ite	eq
 800c22c:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800c230:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800c234:	9307      	str	r3, [sp, #28]
 800c236:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800c23a:	2200      	movs	r2, #0
 800c23c:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800c240:	ab0a      	add	r3, sp, #40	@ 0x28
 800c242:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c246:	9300      	str	r3, [sp, #0]
 800c248:	697a      	ldr	r2, [r7, #20]
 800c24a:	9b07      	ldr	r3, [sp, #28]
 800c24c:	6809      	ldr	r1, [r1, #0]
 800c24e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c252:	f001 fefd 	bl	800e050 <uxr_buffer_request_data>
 800c256:	e007      	b.n	800c268 <rmw_create_subscription+0x1b0>
 800c258:	69f8      	ldr	r0, [r7, #28]
 800c25a:	b108      	cbz	r0, 800c260 <rmw_create_subscription+0x1a8>
 800c25c:	f000 fa6c 	bl	800c738 <rmw_uxrce_fini_topic_memory>
 800c260:	4620      	mov	r0, r4
 800c262:	f000 fa27 	bl	800c6b4 <rmw_uxrce_fini_subscription_memory>
 800c266:	2400      	movs	r4, #0
 800c268:	4620      	mov	r0, r4
 800c26a:	b00d      	add	sp, #52	@ 0x34
 800c26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c270:	2000ab0c 	.word	0x2000ab0c
 800c274:	08018198 	.word	0x08018198
 800c278:	08018164 	.word	0x08018164

0800c27c <rmw_subscription_get_actual_qos>:
 800c27c:	b150      	cbz	r0, 800c294 <rmw_subscription_get_actual_qos+0x18>
 800c27e:	b508      	push	{r3, lr}
 800c280:	460b      	mov	r3, r1
 800c282:	b149      	cbz	r1, 800c298 <rmw_subscription_get_actual_qos+0x1c>
 800c284:	6841      	ldr	r1, [r0, #4]
 800c286:	2250      	movs	r2, #80	@ 0x50
 800c288:	3128      	adds	r1, #40	@ 0x28
 800c28a:	4618      	mov	r0, r3
 800c28c:	f00a ff83 	bl	8017196 <memcpy>
 800c290:	2000      	movs	r0, #0
 800c292:	bd08      	pop	{r3, pc}
 800c294:	200b      	movs	r0, #11
 800c296:	4770      	bx	lr
 800c298:	200b      	movs	r0, #11
 800c29a:	bd08      	pop	{r3, pc}

0800c29c <rmw_destroy_subscription>:
 800c29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c29e:	b128      	cbz	r0, 800c2ac <rmw_destroy_subscription+0x10>
 800c2a0:	4604      	mov	r4, r0
 800c2a2:	6800      	ldr	r0, [r0, #0]
 800c2a4:	460d      	mov	r5, r1
 800c2a6:	f000 fbc9 	bl	800ca3c <is_uxrce_rmw_identifier_valid>
 800c2aa:	b910      	cbnz	r0, 800c2b2 <rmw_destroy_subscription+0x16>
 800c2ac:	2401      	movs	r4, #1
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2b2:	6863      	ldr	r3, [r4, #4]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d0f9      	beq.n	800c2ac <rmw_destroy_subscription+0x10>
 800c2b8:	2d00      	cmp	r5, #0
 800c2ba:	d0f7      	beq.n	800c2ac <rmw_destroy_subscription+0x10>
 800c2bc:	6828      	ldr	r0, [r5, #0]
 800c2be:	f000 fbbd 	bl	800ca3c <is_uxrce_rmw_identifier_valid>
 800c2c2:	2800      	cmp	r0, #0
 800c2c4:	d0f2      	beq.n	800c2ac <rmw_destroy_subscription+0x10>
 800c2c6:	686c      	ldr	r4, [r5, #4]
 800c2c8:	2c00      	cmp	r4, #0
 800c2ca:	d0ef      	beq.n	800c2ac <rmw_destroy_subscription+0x10>
 800c2cc:	6a26      	ldr	r6, [r4, #32]
 800c2ce:	6962      	ldr	r2, [r4, #20]
 800c2d0:	6930      	ldr	r0, [r6, #16]
 800c2d2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c2d6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c2da:	6819      	ldr	r1, [r3, #0]
 800c2dc:	f001 fef2 	bl	800e0c4 <uxr_buffer_cancel_data>
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	6930      	ldr	r0, [r6, #16]
 800c2e4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c2e8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c2ec:	f000 fb26 	bl	800c93c <run_xrce_session>
 800c2f0:	69e0      	ldr	r0, [r4, #28]
 800c2f2:	f008 fbef 	bl	8014ad4 <destroy_topic>
 800c2f6:	6a23      	ldr	r3, [r4, #32]
 800c2f8:	6962      	ldr	r2, [r4, #20]
 800c2fa:	6918      	ldr	r0, [r3, #16]
 800c2fc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c300:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c304:	6819      	ldr	r1, [r3, #0]
 800c306:	f001 fc55 	bl	800dbb4 <uxr_buffer_delete_entity>
 800c30a:	6a23      	ldr	r3, [r4, #32]
 800c30c:	6922      	ldr	r2, [r4, #16]
 800c30e:	691b      	ldr	r3, [r3, #16]
 800c310:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800c314:	4604      	mov	r4, r0
 800c316:	6809      	ldr	r1, [r1, #0]
 800c318:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800c31c:	f001 fc4a 	bl	800dbb4 <uxr_buffer_delete_entity>
 800c320:	6937      	ldr	r7, [r6, #16]
 800c322:	4622      	mov	r2, r4
 800c324:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800c328:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800c32c:	4604      	mov	r4, r0
 800c32e:	4638      	mov	r0, r7
 800c330:	f000 fb04 	bl	800c93c <run_xrce_session>
 800c334:	6936      	ldr	r6, [r6, #16]
 800c336:	4622      	mov	r2, r4
 800c338:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800c33c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800c340:	4604      	mov	r4, r0
 800c342:	4630      	mov	r0, r6
 800c344:	f000 fafa 	bl	800c93c <run_xrce_session>
 800c348:	b12c      	cbz	r4, 800c356 <rmw_destroy_subscription+0xba>
 800c34a:	b120      	cbz	r0, 800c356 <rmw_destroy_subscription+0xba>
 800c34c:	2400      	movs	r4, #0
 800c34e:	4628      	mov	r0, r5
 800c350:	f000 f9b0 	bl	800c6b4 <rmw_uxrce_fini_subscription_memory>
 800c354:	e7ab      	b.n	800c2ae <rmw_destroy_subscription+0x12>
 800c356:	2402      	movs	r4, #2
 800c358:	e7f9      	b.n	800c34e <rmw_destroy_subscription+0xb2>
 800c35a:	bf00      	nop

0800c35c <rmw_uxrce_transport_init>:
 800c35c:	b508      	push	{r3, lr}
 800c35e:	b108      	cbz	r0, 800c364 <rmw_uxrce_transport_init+0x8>
 800c360:	f100 0210 	add.w	r2, r0, #16
 800c364:	b139      	cbz	r1, 800c376 <rmw_uxrce_transport_init+0x1a>
 800c366:	6949      	ldr	r1, [r1, #20]
 800c368:	4610      	mov	r0, r2
 800c36a:	f001 fe09 	bl	800df80 <uxr_init_custom_transport>
 800c36e:	f080 0001 	eor.w	r0, r0, #1
 800c372:	b2c0      	uxtb	r0, r0
 800c374:	bd08      	pop	{r3, pc}
 800c376:	4b04      	ldr	r3, [pc, #16]	@ (800c388 <rmw_uxrce_transport_init+0x2c>)
 800c378:	4610      	mov	r0, r2
 800c37a:	6859      	ldr	r1, [r3, #4]
 800c37c:	f001 fe00 	bl	800df80 <uxr_init_custom_transport>
 800c380:	f080 0001 	eor.w	r0, r0, #1
 800c384:	b2c0      	uxtb	r0, r0
 800c386:	bd08      	pop	{r3, pc}
 800c388:	20006194 	.word	0x20006194

0800c38c <rmw_uxrce_init_service_memory>:
 800c38c:	b1e2      	cbz	r2, 800c3c8 <rmw_uxrce_init_service_memory+0x3c>
 800c38e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c392:	7b05      	ldrb	r5, [r0, #12]
 800c394:	4606      	mov	r6, r0
 800c396:	b9ad      	cbnz	r5, 800c3c4 <rmw_uxrce_init_service_memory+0x38>
 800c398:	23c8      	movs	r3, #200	@ 0xc8
 800c39a:	e9c0 5500 	strd	r5, r5, [r0]
 800c39e:	6083      	str	r3, [r0, #8]
 800c3a0:	f240 1301 	movw	r3, #257	@ 0x101
 800c3a4:	4617      	mov	r7, r2
 800c3a6:	8183      	strh	r3, [r0, #12]
 800c3a8:	460c      	mov	r4, r1
 800c3aa:	46a8      	mov	r8, r5
 800c3ac:	4621      	mov	r1, r4
 800c3ae:	4630      	mov	r0, r6
 800c3b0:	3501      	adds	r5, #1
 800c3b2:	f008 fae1 	bl	8014978 <put_memory>
 800c3b6:	42af      	cmp	r7, r5
 800c3b8:	60a4      	str	r4, [r4, #8]
 800c3ba:	f884 800c 	strb.w	r8, [r4, #12]
 800c3be:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800c3c2:	d1f3      	bne.n	800c3ac <rmw_uxrce_init_service_memory+0x20>
 800c3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3c8:	4770      	bx	lr
 800c3ca:	bf00      	nop

0800c3cc <rmw_uxrce_init_client_memory>:
 800c3cc:	b1e2      	cbz	r2, 800c408 <rmw_uxrce_init_client_memory+0x3c>
 800c3ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3d2:	7b05      	ldrb	r5, [r0, #12]
 800c3d4:	4606      	mov	r6, r0
 800c3d6:	b9ad      	cbnz	r5, 800c404 <rmw_uxrce_init_client_memory+0x38>
 800c3d8:	23c8      	movs	r3, #200	@ 0xc8
 800c3da:	e9c0 5500 	strd	r5, r5, [r0]
 800c3de:	6083      	str	r3, [r0, #8]
 800c3e0:	f240 1301 	movw	r3, #257	@ 0x101
 800c3e4:	4617      	mov	r7, r2
 800c3e6:	8183      	strh	r3, [r0, #12]
 800c3e8:	460c      	mov	r4, r1
 800c3ea:	46a8      	mov	r8, r5
 800c3ec:	4621      	mov	r1, r4
 800c3ee:	4630      	mov	r0, r6
 800c3f0:	3501      	adds	r5, #1
 800c3f2:	f008 fac1 	bl	8014978 <put_memory>
 800c3f6:	42af      	cmp	r7, r5
 800c3f8:	60a4      	str	r4, [r4, #8]
 800c3fa:	f884 800c 	strb.w	r8, [r4, #12]
 800c3fe:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800c402:	d1f3      	bne.n	800c3ec <rmw_uxrce_init_client_memory+0x20>
 800c404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c408:	4770      	bx	lr
 800c40a:	bf00      	nop

0800c40c <rmw_uxrce_init_publisher_memory>:
 800c40c:	b1e2      	cbz	r2, 800c448 <rmw_uxrce_init_publisher_memory+0x3c>
 800c40e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c412:	7b05      	ldrb	r5, [r0, #12]
 800c414:	4606      	mov	r6, r0
 800c416:	b9ad      	cbnz	r5, 800c444 <rmw_uxrce_init_publisher_memory+0x38>
 800c418:	23d8      	movs	r3, #216	@ 0xd8
 800c41a:	e9c0 5500 	strd	r5, r5, [r0]
 800c41e:	6083      	str	r3, [r0, #8]
 800c420:	f240 1301 	movw	r3, #257	@ 0x101
 800c424:	4617      	mov	r7, r2
 800c426:	8183      	strh	r3, [r0, #12]
 800c428:	460c      	mov	r4, r1
 800c42a:	46a8      	mov	r8, r5
 800c42c:	4621      	mov	r1, r4
 800c42e:	4630      	mov	r0, r6
 800c430:	3501      	adds	r5, #1
 800c432:	f008 faa1 	bl	8014978 <put_memory>
 800c436:	42af      	cmp	r7, r5
 800c438:	60a4      	str	r4, [r4, #8]
 800c43a:	f884 800c 	strb.w	r8, [r4, #12]
 800c43e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800c442:	d1f3      	bne.n	800c42c <rmw_uxrce_init_publisher_memory+0x20>
 800c444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c448:	4770      	bx	lr
 800c44a:	bf00      	nop

0800c44c <rmw_uxrce_init_subscription_memory>:
 800c44c:	b1e2      	cbz	r2, 800c488 <rmw_uxrce_init_subscription_memory+0x3c>
 800c44e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c452:	7b05      	ldrb	r5, [r0, #12]
 800c454:	4606      	mov	r6, r0
 800c456:	b9ad      	cbnz	r5, 800c484 <rmw_uxrce_init_subscription_memory+0x38>
 800c458:	23d8      	movs	r3, #216	@ 0xd8
 800c45a:	e9c0 5500 	strd	r5, r5, [r0]
 800c45e:	6083      	str	r3, [r0, #8]
 800c460:	f240 1301 	movw	r3, #257	@ 0x101
 800c464:	4617      	mov	r7, r2
 800c466:	8183      	strh	r3, [r0, #12]
 800c468:	460c      	mov	r4, r1
 800c46a:	46a8      	mov	r8, r5
 800c46c:	4621      	mov	r1, r4
 800c46e:	4630      	mov	r0, r6
 800c470:	3501      	adds	r5, #1
 800c472:	f008 fa81 	bl	8014978 <put_memory>
 800c476:	42af      	cmp	r7, r5
 800c478:	60a4      	str	r4, [r4, #8]
 800c47a:	f884 800c 	strb.w	r8, [r4, #12]
 800c47e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800c482:	d1f3      	bne.n	800c46c <rmw_uxrce_init_subscription_memory+0x20>
 800c484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c488:	4770      	bx	lr
 800c48a:	bf00      	nop

0800c48c <rmw_uxrce_init_node_memory>:
 800c48c:	b1e2      	cbz	r2, 800c4c8 <rmw_uxrce_init_node_memory+0x3c>
 800c48e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c492:	7b05      	ldrb	r5, [r0, #12]
 800c494:	4606      	mov	r6, r0
 800c496:	b9ad      	cbnz	r5, 800c4c4 <rmw_uxrce_init_node_memory+0x38>
 800c498:	23a4      	movs	r3, #164	@ 0xa4
 800c49a:	e9c0 5500 	strd	r5, r5, [r0]
 800c49e:	6083      	str	r3, [r0, #8]
 800c4a0:	f240 1301 	movw	r3, #257	@ 0x101
 800c4a4:	4617      	mov	r7, r2
 800c4a6:	8183      	strh	r3, [r0, #12]
 800c4a8:	460c      	mov	r4, r1
 800c4aa:	46a8      	mov	r8, r5
 800c4ac:	4621      	mov	r1, r4
 800c4ae:	4630      	mov	r0, r6
 800c4b0:	3501      	adds	r5, #1
 800c4b2:	f008 fa61 	bl	8014978 <put_memory>
 800c4b6:	42af      	cmp	r7, r5
 800c4b8:	60a4      	str	r4, [r4, #8]
 800c4ba:	f884 800c 	strb.w	r8, [r4, #12]
 800c4be:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800c4c2:	d1f3      	bne.n	800c4ac <rmw_uxrce_init_node_memory+0x20>
 800c4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4c8:	4770      	bx	lr
 800c4ca:	bf00      	nop

0800c4cc <rmw_uxrce_init_session_memory>:
 800c4cc:	b1ea      	cbz	r2, 800c50a <rmw_uxrce_init_session_memory+0x3e>
 800c4ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4d2:	7b05      	ldrb	r5, [r0, #12]
 800c4d4:	4606      	mov	r6, r0
 800c4d6:	b9b5      	cbnz	r5, 800c506 <rmw_uxrce_init_session_memory+0x3a>
 800c4d8:	e9c0 5500 	strd	r5, r5, [r0]
 800c4dc:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800c4e0:	f240 1301 	movw	r3, #257	@ 0x101
 800c4e4:	4617      	mov	r7, r2
 800c4e6:	f8c0 8008 	str.w	r8, [r0, #8]
 800c4ea:	460c      	mov	r4, r1
 800c4ec:	8183      	strh	r3, [r0, #12]
 800c4ee:	46a9      	mov	r9, r5
 800c4f0:	4621      	mov	r1, r4
 800c4f2:	4630      	mov	r0, r6
 800c4f4:	3501      	adds	r5, #1
 800c4f6:	f008 fa3f 	bl	8014978 <put_memory>
 800c4fa:	42af      	cmp	r7, r5
 800c4fc:	60a4      	str	r4, [r4, #8]
 800c4fe:	f884 900c 	strb.w	r9, [r4, #12]
 800c502:	4444      	add	r4, r8
 800c504:	d1f4      	bne.n	800c4f0 <rmw_uxrce_init_session_memory+0x24>
 800c506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c50a:	4770      	bx	lr

0800c50c <rmw_uxrce_init_topic_memory>:
 800c50c:	b1e2      	cbz	r2, 800c548 <rmw_uxrce_init_topic_memory+0x3c>
 800c50e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c512:	7b05      	ldrb	r5, [r0, #12]
 800c514:	4606      	mov	r6, r0
 800c516:	b9ad      	cbnz	r5, 800c544 <rmw_uxrce_init_topic_memory+0x38>
 800c518:	231c      	movs	r3, #28
 800c51a:	e9c0 5500 	strd	r5, r5, [r0]
 800c51e:	6083      	str	r3, [r0, #8]
 800c520:	f240 1301 	movw	r3, #257	@ 0x101
 800c524:	4617      	mov	r7, r2
 800c526:	8183      	strh	r3, [r0, #12]
 800c528:	460c      	mov	r4, r1
 800c52a:	46a8      	mov	r8, r5
 800c52c:	4621      	mov	r1, r4
 800c52e:	4630      	mov	r0, r6
 800c530:	3501      	adds	r5, #1
 800c532:	f008 fa21 	bl	8014978 <put_memory>
 800c536:	42af      	cmp	r7, r5
 800c538:	60a4      	str	r4, [r4, #8]
 800c53a:	f884 800c 	strb.w	r8, [r4, #12]
 800c53e:	f104 041c 	add.w	r4, r4, #28
 800c542:	d1f3      	bne.n	800c52c <rmw_uxrce_init_topic_memory+0x20>
 800c544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c548:	4770      	bx	lr
 800c54a:	bf00      	nop

0800c54c <rmw_uxrce_init_static_input_buffer_memory>:
 800c54c:	b1ea      	cbz	r2, 800c58a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800c54e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c552:	7b05      	ldrb	r5, [r0, #12]
 800c554:	4606      	mov	r6, r0
 800c556:	b9b5      	cbnz	r5, 800c586 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800c558:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800c55c:	e9c0 5500 	strd	r5, r5, [r0]
 800c560:	6083      	str	r3, [r0, #8]
 800c562:	f240 1301 	movw	r3, #257	@ 0x101
 800c566:	4617      	mov	r7, r2
 800c568:	8183      	strh	r3, [r0, #12]
 800c56a:	460c      	mov	r4, r1
 800c56c:	46a8      	mov	r8, r5
 800c56e:	4621      	mov	r1, r4
 800c570:	4630      	mov	r0, r6
 800c572:	3501      	adds	r5, #1
 800c574:	f008 fa00 	bl	8014978 <put_memory>
 800c578:	42af      	cmp	r7, r5
 800c57a:	60a4      	str	r4, [r4, #8]
 800c57c:	f884 800c 	strb.w	r8, [r4, #12]
 800c580:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800c584:	d1f3      	bne.n	800c56e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800c586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c58a:	4770      	bx	lr

0800c58c <rmw_uxrce_init_init_options_impl_memory>:
 800c58c:	b1e2      	cbz	r2, 800c5c8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800c58e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c592:	7b05      	ldrb	r5, [r0, #12]
 800c594:	4606      	mov	r6, r0
 800c596:	b9ad      	cbnz	r5, 800c5c4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800c598:	232c      	movs	r3, #44	@ 0x2c
 800c59a:	e9c0 5500 	strd	r5, r5, [r0]
 800c59e:	6083      	str	r3, [r0, #8]
 800c5a0:	f240 1301 	movw	r3, #257	@ 0x101
 800c5a4:	4617      	mov	r7, r2
 800c5a6:	8183      	strh	r3, [r0, #12]
 800c5a8:	460c      	mov	r4, r1
 800c5aa:	46a8      	mov	r8, r5
 800c5ac:	4621      	mov	r1, r4
 800c5ae:	4630      	mov	r0, r6
 800c5b0:	3501      	adds	r5, #1
 800c5b2:	f008 f9e1 	bl	8014978 <put_memory>
 800c5b6:	42af      	cmp	r7, r5
 800c5b8:	60a4      	str	r4, [r4, #8]
 800c5ba:	f884 800c 	strb.w	r8, [r4, #12]
 800c5be:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800c5c2:	d1f3      	bne.n	800c5ac <rmw_uxrce_init_init_options_impl_memory+0x20>
 800c5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5c8:	4770      	bx	lr
 800c5ca:	bf00      	nop

0800c5cc <rmw_uxrce_init_wait_set_memory>:
 800c5cc:	b1e2      	cbz	r2, 800c608 <rmw_uxrce_init_wait_set_memory+0x3c>
 800c5ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5d2:	7b05      	ldrb	r5, [r0, #12]
 800c5d4:	4606      	mov	r6, r0
 800c5d6:	b9ad      	cbnz	r5, 800c604 <rmw_uxrce_init_wait_set_memory+0x38>
 800c5d8:	231c      	movs	r3, #28
 800c5da:	e9c0 5500 	strd	r5, r5, [r0]
 800c5de:	6083      	str	r3, [r0, #8]
 800c5e0:	f240 1301 	movw	r3, #257	@ 0x101
 800c5e4:	4617      	mov	r7, r2
 800c5e6:	8183      	strh	r3, [r0, #12]
 800c5e8:	460c      	mov	r4, r1
 800c5ea:	46a8      	mov	r8, r5
 800c5ec:	4621      	mov	r1, r4
 800c5ee:	4630      	mov	r0, r6
 800c5f0:	3501      	adds	r5, #1
 800c5f2:	f008 f9c1 	bl	8014978 <put_memory>
 800c5f6:	42af      	cmp	r7, r5
 800c5f8:	60a4      	str	r4, [r4, #8]
 800c5fa:	f884 800c 	strb.w	r8, [r4, #12]
 800c5fe:	f104 041c 	add.w	r4, r4, #28
 800c602:	d1f3      	bne.n	800c5ec <rmw_uxrce_init_wait_set_memory+0x20>
 800c604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c608:	4770      	bx	lr
 800c60a:	bf00      	nop

0800c60c <rmw_uxrce_init_guard_condition_memory>:
 800c60c:	b1e2      	cbz	r2, 800c648 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800c60e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c612:	7b05      	ldrb	r5, [r0, #12]
 800c614:	4606      	mov	r6, r0
 800c616:	b9ad      	cbnz	r5, 800c644 <rmw_uxrce_init_guard_condition_memory+0x38>
 800c618:	2320      	movs	r3, #32
 800c61a:	e9c0 5500 	strd	r5, r5, [r0]
 800c61e:	6083      	str	r3, [r0, #8]
 800c620:	f240 1301 	movw	r3, #257	@ 0x101
 800c624:	4617      	mov	r7, r2
 800c626:	8183      	strh	r3, [r0, #12]
 800c628:	460c      	mov	r4, r1
 800c62a:	46a8      	mov	r8, r5
 800c62c:	4621      	mov	r1, r4
 800c62e:	4630      	mov	r0, r6
 800c630:	3501      	adds	r5, #1
 800c632:	f008 f9a1 	bl	8014978 <put_memory>
 800c636:	42af      	cmp	r7, r5
 800c638:	60a4      	str	r4, [r4, #8]
 800c63a:	f884 800c 	strb.w	r8, [r4, #12]
 800c63e:	f104 0420 	add.w	r4, r4, #32
 800c642:	d1f3      	bne.n	800c62c <rmw_uxrce_init_guard_condition_memory+0x20>
 800c644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c648:	4770      	bx	lr
 800c64a:	bf00      	nop

0800c64c <rmw_uxrce_fini_session_memory>:
 800c64c:	4601      	mov	r1, r0
 800c64e:	4801      	ldr	r0, [pc, #4]	@ (800c654 <rmw_uxrce_fini_session_memory+0x8>)
 800c650:	f008 b992 	b.w	8014978 <put_memory>
 800c654:	2000aaec 	.word	0x2000aaec

0800c658 <rmw_uxrce_fini_node_memory>:
 800c658:	b538      	push	{r3, r4, r5, lr}
 800c65a:	4604      	mov	r4, r0
 800c65c:	6800      	ldr	r0, [r0, #0]
 800c65e:	b128      	cbz	r0, 800c66c <rmw_uxrce_fini_node_memory+0x14>
 800c660:	4b07      	ldr	r3, [pc, #28]	@ (800c680 <rmw_uxrce_fini_node_memory+0x28>)
 800c662:	6819      	ldr	r1, [r3, #0]
 800c664:	f7f3 fddc 	bl	8000220 <strcmp>
 800c668:	b940      	cbnz	r0, 800c67c <rmw_uxrce_fini_node_memory+0x24>
 800c66a:	6020      	str	r0, [r4, #0]
 800c66c:	6861      	ldr	r1, [r4, #4]
 800c66e:	b129      	cbz	r1, 800c67c <rmw_uxrce_fini_node_memory+0x24>
 800c670:	2500      	movs	r5, #0
 800c672:	4804      	ldr	r0, [pc, #16]	@ (800c684 <rmw_uxrce_fini_node_memory+0x2c>)
 800c674:	610d      	str	r5, [r1, #16]
 800c676:	f008 f97f 	bl	8014978 <put_memory>
 800c67a:	6065      	str	r5, [r4, #4]
 800c67c:	bd38      	pop	{r3, r4, r5, pc}
 800c67e:	bf00      	nop
 800c680:	08018ab0 	.word	0x08018ab0
 800c684:	2000aabc 	.word	0x2000aabc

0800c688 <rmw_uxrce_fini_publisher_memory>:
 800c688:	b510      	push	{r4, lr}
 800c68a:	4604      	mov	r4, r0
 800c68c:	6800      	ldr	r0, [r0, #0]
 800c68e:	b128      	cbz	r0, 800c69c <rmw_uxrce_fini_publisher_memory+0x14>
 800c690:	4b06      	ldr	r3, [pc, #24]	@ (800c6ac <rmw_uxrce_fini_publisher_memory+0x24>)
 800c692:	6819      	ldr	r1, [r3, #0]
 800c694:	f7f3 fdc4 	bl	8000220 <strcmp>
 800c698:	b938      	cbnz	r0, 800c6aa <rmw_uxrce_fini_publisher_memory+0x22>
 800c69a:	6020      	str	r0, [r4, #0]
 800c69c:	6861      	ldr	r1, [r4, #4]
 800c69e:	b121      	cbz	r1, 800c6aa <rmw_uxrce_fini_publisher_memory+0x22>
 800c6a0:	4803      	ldr	r0, [pc, #12]	@ (800c6b0 <rmw_uxrce_fini_publisher_memory+0x28>)
 800c6a2:	f008 f969 	bl	8014978 <put_memory>
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	6063      	str	r3, [r4, #4]
 800c6aa:	bd10      	pop	{r4, pc}
 800c6ac:	08018ab0 	.word	0x08018ab0
 800c6b0:	2000aacc 	.word	0x2000aacc

0800c6b4 <rmw_uxrce_fini_subscription_memory>:
 800c6b4:	b510      	push	{r4, lr}
 800c6b6:	4604      	mov	r4, r0
 800c6b8:	6800      	ldr	r0, [r0, #0]
 800c6ba:	b128      	cbz	r0, 800c6c8 <rmw_uxrce_fini_subscription_memory+0x14>
 800c6bc:	4b06      	ldr	r3, [pc, #24]	@ (800c6d8 <rmw_uxrce_fini_subscription_memory+0x24>)
 800c6be:	6819      	ldr	r1, [r3, #0]
 800c6c0:	f7f3 fdae 	bl	8000220 <strcmp>
 800c6c4:	b938      	cbnz	r0, 800c6d6 <rmw_uxrce_fini_subscription_memory+0x22>
 800c6c6:	6020      	str	r0, [r4, #0]
 800c6c8:	6861      	ldr	r1, [r4, #4]
 800c6ca:	b121      	cbz	r1, 800c6d6 <rmw_uxrce_fini_subscription_memory+0x22>
 800c6cc:	4803      	ldr	r0, [pc, #12]	@ (800c6dc <rmw_uxrce_fini_subscription_memory+0x28>)
 800c6ce:	f008 f953 	bl	8014978 <put_memory>
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	6063      	str	r3, [r4, #4]
 800c6d6:	bd10      	pop	{r4, pc}
 800c6d8:	08018ab0 	.word	0x08018ab0
 800c6dc:	2000ab0c 	.word	0x2000ab0c

0800c6e0 <rmw_uxrce_fini_service_memory>:
 800c6e0:	b510      	push	{r4, lr}
 800c6e2:	4604      	mov	r4, r0
 800c6e4:	6800      	ldr	r0, [r0, #0]
 800c6e6:	b128      	cbz	r0, 800c6f4 <rmw_uxrce_fini_service_memory+0x14>
 800c6e8:	4b06      	ldr	r3, [pc, #24]	@ (800c704 <rmw_uxrce_fini_service_memory+0x24>)
 800c6ea:	6819      	ldr	r1, [r3, #0]
 800c6ec:	f7f3 fd98 	bl	8000220 <strcmp>
 800c6f0:	b938      	cbnz	r0, 800c702 <rmw_uxrce_fini_service_memory+0x22>
 800c6f2:	6020      	str	r0, [r4, #0]
 800c6f4:	6861      	ldr	r1, [r4, #4]
 800c6f6:	b121      	cbz	r1, 800c702 <rmw_uxrce_fini_service_memory+0x22>
 800c6f8:	4803      	ldr	r0, [pc, #12]	@ (800c708 <rmw_uxrce_fini_service_memory+0x28>)
 800c6fa:	f008 f93d 	bl	8014978 <put_memory>
 800c6fe:	2300      	movs	r3, #0
 800c700:	6063      	str	r3, [r4, #4]
 800c702:	bd10      	pop	{r4, pc}
 800c704:	08018ab0 	.word	0x08018ab0
 800c708:	2000aadc 	.word	0x2000aadc

0800c70c <rmw_uxrce_fini_client_memory>:
 800c70c:	b510      	push	{r4, lr}
 800c70e:	4604      	mov	r4, r0
 800c710:	6800      	ldr	r0, [r0, #0]
 800c712:	b128      	cbz	r0, 800c720 <rmw_uxrce_fini_client_memory+0x14>
 800c714:	4b06      	ldr	r3, [pc, #24]	@ (800c730 <rmw_uxrce_fini_client_memory+0x24>)
 800c716:	6819      	ldr	r1, [r3, #0]
 800c718:	f7f3 fd82 	bl	8000220 <strcmp>
 800c71c:	b938      	cbnz	r0, 800c72e <rmw_uxrce_fini_client_memory+0x22>
 800c71e:	6020      	str	r0, [r4, #0]
 800c720:	6861      	ldr	r1, [r4, #4]
 800c722:	b121      	cbz	r1, 800c72e <rmw_uxrce_fini_client_memory+0x22>
 800c724:	4803      	ldr	r0, [pc, #12]	@ (800c734 <rmw_uxrce_fini_client_memory+0x28>)
 800c726:	f008 f927 	bl	8014978 <put_memory>
 800c72a:	2300      	movs	r3, #0
 800c72c:	6063      	str	r3, [r4, #4]
 800c72e:	bd10      	pop	{r4, pc}
 800c730:	08018ab0 	.word	0x08018ab0
 800c734:	200061ec 	.word	0x200061ec

0800c738 <rmw_uxrce_fini_topic_memory>:
 800c738:	b510      	push	{r4, lr}
 800c73a:	4604      	mov	r4, r0
 800c73c:	4621      	mov	r1, r4
 800c73e:	4803      	ldr	r0, [pc, #12]	@ (800c74c <rmw_uxrce_fini_topic_memory+0x14>)
 800c740:	f008 f91a 	bl	8014978 <put_memory>
 800c744:	2300      	movs	r3, #0
 800c746:	61a3      	str	r3, [r4, #24]
 800c748:	bd10      	pop	{r4, pc}
 800c74a:	bf00      	nop
 800c74c:	2000ab1c 	.word	0x2000ab1c

0800c750 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800c750:	b082      	sub	sp, #8
 800c752:	b530      	push	{r4, r5, lr}
 800c754:	4925      	ldr	r1, [pc, #148]	@ (800c7ec <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800c756:	680d      	ldr	r5, [r1, #0]
 800c758:	ac03      	add	r4, sp, #12
 800c75a:	e884 000c 	stmia.w	r4, {r2, r3}
 800c75e:	461c      	mov	r4, r3
 800c760:	2d00      	cmp	r5, #0
 800c762:	d041      	beq.n	800c7e8 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800c764:	462b      	mov	r3, r5
 800c766:	2100      	movs	r1, #0
 800c768:	689a      	ldr	r2, [r3, #8]
 800c76a:	685b      	ldr	r3, [r3, #4]
 800c76c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800c770:	4290      	cmp	r0, r2
 800c772:	bf08      	it	eq
 800c774:	3101      	addeq	r1, #1
 800c776:	2b00      	cmp	r3, #0
 800c778:	d1f6      	bne.n	800c768 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800c77a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800c77e:	2b02      	cmp	r3, #2
 800c780:	d029      	beq.n	800c7d6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800c782:	d907      	bls.n	800c794 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800c784:	2b03      	cmp	r3, #3
 800c786:	d005      	beq.n	800c794 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800c788:	2100      	movs	r1, #0
 800c78a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c78e:	4608      	mov	r0, r1
 800c790:	b002      	add	sp, #8
 800c792:	4770      	bx	lr
 800c794:	b314      	cbz	r4, 800c7dc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800c796:	428c      	cmp	r4, r1
 800c798:	d820      	bhi.n	800c7dc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800c79a:	2d00      	cmp	r5, #0
 800c79c:	d0f4      	beq.n	800c788 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800c79e:	2100      	movs	r1, #0
 800c7a0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800c7a4:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800c7a8:	e002      	b.n	800c7b0 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800c7aa:	686d      	ldr	r5, [r5, #4]
 800c7ac:	2d00      	cmp	r5, #0
 800c7ae:	d0ec      	beq.n	800c78a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800c7b0:	68ab      	ldr	r3, [r5, #8]
 800c7b2:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800c7b6:	4290      	cmp	r0, r2
 800c7b8:	d1f7      	bne.n	800c7aa <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c7ba:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800c7be:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800c7c2:	4562      	cmp	r2, ip
 800c7c4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800c7c8:	eb73 0e04 	sbcs.w	lr, r3, r4
 800c7cc:	daed      	bge.n	800c7aa <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c7ce:	4694      	mov	ip, r2
 800c7d0:	461c      	mov	r4, r3
 800c7d2:	4629      	mov	r1, r5
 800c7d4:	e7e9      	b.n	800c7aa <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800c7d6:	b10c      	cbz	r4, 800c7dc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800c7d8:	428c      	cmp	r4, r1
 800c7da:	d9d5      	bls.n	800c788 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800c7dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c7e0:	4802      	ldr	r0, [pc, #8]	@ (800c7ec <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800c7e2:	b002      	add	sp, #8
 800c7e4:	f008 b8b8 	b.w	8014958 <get_memory>
 800c7e8:	4629      	mov	r1, r5
 800c7ea:	e7c6      	b.n	800c77a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800c7ec:	2000aafc 	.word	0x2000aafc

0800c7f0 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800c7f0:	4b11      	ldr	r3, [pc, #68]	@ (800c838 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	b530      	push	{r4, r5, lr}
 800c7f6:	b1e3      	cbz	r3, 800c832 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800c7f8:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800c7fc:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800c800:	2400      	movs	r4, #0
 800c802:	e001      	b.n	800c808 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	b193      	cbz	r3, 800c82e <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800c808:	689a      	ldr	r2, [r3, #8]
 800c80a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800c80e:	4288      	cmp	r0, r1
 800c810:	d1f8      	bne.n	800c804 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800c812:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800c816:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800c81a:	4571      	cmp	r1, lr
 800c81c:	eb72 050c 	sbcs.w	r5, r2, ip
 800c820:	daf0      	bge.n	800c804 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800c822:	461c      	mov	r4, r3
 800c824:	685b      	ldr	r3, [r3, #4]
 800c826:	468e      	mov	lr, r1
 800c828:	4694      	mov	ip, r2
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d1ec      	bne.n	800c808 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800c82e:	4620      	mov	r0, r4
 800c830:	bd30      	pop	{r4, r5, pc}
 800c832:	461c      	mov	r4, r3
 800c834:	4620      	mov	r0, r4
 800c836:	bd30      	pop	{r4, r5, pc}
 800c838:	2000aafc 	.word	0x2000aafc
 800c83c:	00000000 	.word	0x00000000

0800c840 <rmw_uxrce_clean_expired_static_input_buffer>:
 800c840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c844:	4b3c      	ldr	r3, [pc, #240]	@ (800c938 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800c846:	ed2d 8b06 	vpush	{d8-d10}
 800c84a:	681f      	ldr	r7, [r3, #0]
 800c84c:	b08d      	sub	sp, #52	@ 0x34
 800c84e:	f008 fc9f 	bl	8015190 <rmw_uros_epoch_nanos>
 800c852:	2f00      	cmp	r7, #0
 800c854:	d05d      	beq.n	800c912 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800c856:	46b8      	mov	r8, r7
 800c858:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800c920 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800c85c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c860:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800c864:	2b04      	cmp	r3, #4
 800c866:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800c928 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800c86a:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800c930 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800c86e:	4681      	mov	r9, r0
 800c870:	468a      	mov	sl, r1
 800c872:	ac04      	add	r4, sp, #16
 800c874:	d03f      	beq.n	800c8f6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800c876:	2b05      	cmp	r3, #5
 800c878:	d044      	beq.n	800c904 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800c87a:	2b03      	cmp	r3, #3
 800c87c:	d03b      	beq.n	800c8f6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800c87e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c882:	ed8d ab06 	vstr	d10, [sp, #24]
 800c886:	ed8d 8b08 	vstr	d8, [sp, #32]
 800c88a:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800c88e:	ab08      	add	r3, sp, #32
 800c890:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c892:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c896:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c89a:	f007 fda9 	bl	80143f0 <rmw_time_equal>
 800c89e:	b118      	cbz	r0, 800c8a8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800c8a0:	ed8d 9b04 	vstr	d9, [sp, #16]
 800c8a4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800c8a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c8ac:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800c8b0:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800c8b4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800c8b8:	f007 fdee 	bl	8014498 <rmw_time_total_nsec>
 800c8bc:	1830      	adds	r0, r6, r0
 800c8be:	eb47 0101 	adc.w	r1, r7, r1
 800c8c2:	4548      	cmp	r0, r9
 800c8c4:	eb71 030a 	sbcs.w	r3, r1, sl
 800c8c8:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800c8cc:	db05      	blt.n	800c8da <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800c8ce:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800c8d2:	4591      	cmp	r9, r2
 800c8d4:	eb7a 0303 	sbcs.w	r3, sl, r3
 800c8d8:	da03      	bge.n	800c8e2 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800c8da:	4817      	ldr	r0, [pc, #92]	@ (800c938 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800c8dc:	4641      	mov	r1, r8
 800c8de:	f008 f84b 	bl	8014978 <put_memory>
 800c8e2:	f1bb 0f00 	cmp.w	fp, #0
 800c8e6:	d014      	beq.n	800c912 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800c8e8:	46d8      	mov	r8, fp
 800c8ea:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800c8ee:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800c8f2:	2b04      	cmp	r3, #4
 800c8f4:	d1bf      	bne.n	800c876 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800c8f6:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800c8fa:	3340      	adds	r3, #64	@ 0x40
 800c8fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c8fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c902:	e7c0      	b.n	800c886 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800c904:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800c908:	3348      	adds	r3, #72	@ 0x48
 800c90a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c90c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c910:	e7b9      	b.n	800c886 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800c912:	b00d      	add	sp, #52	@ 0x34
 800c914:	ecbd 8b06 	vpop	{d8-d10}
 800c918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c91c:	f3af 8000 	nop.w
	...
 800c928:	00000001 	.word	0x00000001
 800c92c:	00000000 	.word	0x00000000
 800c930:	0000001e 	.word	0x0000001e
 800c934:	00000000 	.word	0x00000000
 800c938:	2000aafc 	.word	0x2000aafc

0800c93c <run_xrce_session>:
 800c93c:	b510      	push	{r4, lr}
 800c93e:	788c      	ldrb	r4, [r1, #2]
 800c940:	b086      	sub	sp, #24
 800c942:	2c01      	cmp	r4, #1
 800c944:	f8ad 200e 	strh.w	r2, [sp, #14]
 800c948:	d00c      	beq.n	800c964 <run_xrce_session+0x28>
 800c94a:	4619      	mov	r1, r3
 800c94c:	2301      	movs	r3, #1
 800c94e:	9300      	str	r3, [sp, #0]
 800c950:	f10d 020e 	add.w	r2, sp, #14
 800c954:	f10d 0317 	add.w	r3, sp, #23
 800c958:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c95c:	f002 f9ae 	bl	800ecbc <uxr_run_session_until_all_status>
 800c960:	b006      	add	sp, #24
 800c962:	bd10      	pop	{r4, pc}
 800c964:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c968:	f001 fdc2 	bl	800e4f0 <uxr_flash_output_streams>
 800c96c:	4620      	mov	r0, r4
 800c96e:	b006      	add	sp, #24
 800c970:	bd10      	pop	{r4, pc}
 800c972:	bf00      	nop

0800c974 <convert_qos_profile>:
 800c974:	7a4a      	ldrb	r2, [r1, #9]
 800c976:	f891 c008 	ldrb.w	ip, [r1, #8]
 800c97a:	2a02      	cmp	r2, #2
 800c97c:	bf18      	it	ne
 800c97e:	2200      	movne	r2, #0
 800c980:	7002      	strb	r2, [r0, #0]
 800c982:	780a      	ldrb	r2, [r1, #0]
 800c984:	8889      	ldrh	r1, [r1, #4]
 800c986:	8081      	strh	r1, [r0, #4]
 800c988:	f1ac 0c02 	sub.w	ip, ip, #2
 800c98c:	f1a2 0202 	sub.w	r2, r2, #2
 800c990:	fabc fc8c 	clz	ip, ip
 800c994:	fab2 f282 	clz	r2, r2
 800c998:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800c99c:	0952      	lsrs	r2, r2, #5
 800c99e:	f880 c001 	strb.w	ip, [r0, #1]
 800c9a2:	7082      	strb	r2, [r0, #2]
 800c9a4:	4770      	bx	lr
 800c9a6:	bf00      	nop

0800c9a8 <generate_type_name>:
 800c9a8:	b530      	push	{r4, r5, lr}
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	700b      	strb	r3, [r1, #0]
 800c9ae:	6803      	ldr	r3, [r0, #0]
 800c9b0:	b087      	sub	sp, #28
 800c9b2:	4614      	mov	r4, r2
 800c9b4:	b1d3      	cbz	r3, 800c9ec <generate_type_name+0x44>
 800c9b6:	4a0f      	ldr	r2, [pc, #60]	@ (800c9f4 <generate_type_name+0x4c>)
 800c9b8:	4615      	mov	r5, r2
 800c9ba:	9203      	str	r2, [sp, #12]
 800c9bc:	9500      	str	r5, [sp, #0]
 800c9be:	6842      	ldr	r2, [r0, #4]
 800c9c0:	480d      	ldr	r0, [pc, #52]	@ (800c9f8 <generate_type_name+0x50>)
 800c9c2:	9001      	str	r0, [sp, #4]
 800c9c4:	4608      	mov	r0, r1
 800c9c6:	490d      	ldr	r1, [pc, #52]	@ (800c9fc <generate_type_name+0x54>)
 800c9c8:	9204      	str	r2, [sp, #16]
 800c9ca:	9105      	str	r1, [sp, #20]
 800c9cc:	9102      	str	r1, [sp, #8]
 800c9ce:	4a0c      	ldr	r2, [pc, #48]	@ (800ca00 <generate_type_name+0x58>)
 800c9d0:	4621      	mov	r1, r4
 800c9d2:	f00a fa3d 	bl	8016e50 <sniprintf>
 800c9d6:	2800      	cmp	r0, #0
 800c9d8:	db05      	blt.n	800c9e6 <generate_type_name+0x3e>
 800c9da:	4284      	cmp	r4, r0
 800c9dc:	bfd4      	ite	le
 800c9de:	2000      	movle	r0, #0
 800c9e0:	2001      	movgt	r0, #1
 800c9e2:	b007      	add	sp, #28
 800c9e4:	bd30      	pop	{r4, r5, pc}
 800c9e6:	2000      	movs	r0, #0
 800c9e8:	b007      	add	sp, #28
 800c9ea:	bd30      	pop	{r4, r5, pc}
 800c9ec:	4b05      	ldr	r3, [pc, #20]	@ (800ca04 <generate_type_name+0x5c>)
 800c9ee:	4a01      	ldr	r2, [pc, #4]	@ (800c9f4 <generate_type_name+0x4c>)
 800c9f0:	461d      	mov	r5, r3
 800c9f2:	e7e2      	b.n	800c9ba <generate_type_name+0x12>
 800c9f4:	08018188 	.word	0x08018188
 800c9f8:	080181a0 	.word	0x080181a0
 800c9fc:	0801819c 	.word	0x0801819c
 800ca00:	0801818c 	.word	0x0801818c
 800ca04:	08018888 	.word	0x08018888

0800ca08 <generate_topic_name>:
 800ca08:	b510      	push	{r4, lr}
 800ca0a:	b082      	sub	sp, #8
 800ca0c:	4614      	mov	r4, r2
 800ca0e:	9000      	str	r0, [sp, #0]
 800ca10:	4b08      	ldr	r3, [pc, #32]	@ (800ca34 <generate_topic_name+0x2c>)
 800ca12:	4a09      	ldr	r2, [pc, #36]	@ (800ca38 <generate_topic_name+0x30>)
 800ca14:	4608      	mov	r0, r1
 800ca16:	4621      	mov	r1, r4
 800ca18:	f00a fa1a 	bl	8016e50 <sniprintf>
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	db05      	blt.n	800ca2c <generate_topic_name+0x24>
 800ca20:	4284      	cmp	r4, r0
 800ca22:	bfd4      	ite	le
 800ca24:	2000      	movle	r0, #0
 800ca26:	2001      	movgt	r0, #1
 800ca28:	b002      	add	sp, #8
 800ca2a:	bd10      	pop	{r4, pc}
 800ca2c:	2000      	movs	r0, #0
 800ca2e:	b002      	add	sp, #8
 800ca30:	bd10      	pop	{r4, pc}
 800ca32:	bf00      	nop
 800ca34:	080181ac 	.word	0x080181ac
 800ca38:	080181a4 	.word	0x080181a4

0800ca3c <is_uxrce_rmw_identifier_valid>:
 800ca3c:	b510      	push	{r4, lr}
 800ca3e:	4604      	mov	r4, r0
 800ca40:	b140      	cbz	r0, 800ca54 <is_uxrce_rmw_identifier_valid+0x18>
 800ca42:	f007 fff1 	bl	8014a28 <rmw_get_implementation_identifier>
 800ca46:	4601      	mov	r1, r0
 800ca48:	4620      	mov	r0, r4
 800ca4a:	f7f3 fbe9 	bl	8000220 <strcmp>
 800ca4e:	fab0 f080 	clz	r0, r0
 800ca52:	0940      	lsrs	r0, r0, #5
 800ca54:	bd10      	pop	{r4, pc}
 800ca56:	bf00      	nop

0800ca58 <get_message_typesupport_handle>:
 800ca58:	6883      	ldr	r3, [r0, #8]
 800ca5a:	4718      	bx	r3

0800ca5c <get_message_typesupport_handle_function>:
 800ca5c:	b510      	push	{r4, lr}
 800ca5e:	4604      	mov	r4, r0
 800ca60:	6800      	ldr	r0, [r0, #0]
 800ca62:	f7f3 fbdd 	bl	8000220 <strcmp>
 800ca66:	2800      	cmp	r0, #0
 800ca68:	bf0c      	ite	eq
 800ca6a:	4620      	moveq	r0, r4
 800ca6c:	2000      	movne	r0, #0
 800ca6e:	bd10      	pop	{r4, pc}

0800ca70 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800ca70:	4b04      	ldr	r3, [pc, #16]	@ (800ca84 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800ca72:	681a      	ldr	r2, [r3, #0]
 800ca74:	b10a      	cbz	r2, 800ca7a <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800ca76:	4803      	ldr	r0, [pc, #12]	@ (800ca84 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800ca78:	4770      	bx	lr
 800ca7a:	4a03      	ldr	r2, [pc, #12]	@ (800ca88 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800ca7c:	4801      	ldr	r0, [pc, #4]	@ (800ca84 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800ca7e:	6812      	ldr	r2, [r2, #0]
 800ca80:	601a      	str	r2, [r3, #0]
 800ca82:	4770      	bx	lr
 800ca84:	20000038 	.word	0x20000038
 800ca88:	200000b4 	.word	0x200000b4

0800ca8c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800ca8c:	4a02      	ldr	r2, [pc, #8]	@ (800ca98 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800ca8e:	4b03      	ldr	r3, [pc, #12]	@ (800ca9c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800ca90:	6812      	ldr	r2, [r2, #0]
 800ca92:	601a      	str	r2, [r3, #0]
 800ca94:	4770      	bx	lr
 800ca96:	bf00      	nop
 800ca98:	200000b4 	.word	0x200000b4
 800ca9c:	20000038 	.word	0x20000038

0800caa0 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800caa0:	f008 bbb2 	b.w	8015208 <std_msgs__msg__Int32__init>

0800caa4 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800caa4:	f008 bbb4 	b.w	8015210 <std_msgs__msg__Int32__fini>

0800caa8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800caa8:	4b04      	ldr	r3, [pc, #16]	@ (800cabc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800caaa:	681a      	ldr	r2, [r3, #0]
 800caac:	b10a      	cbz	r2, 800cab2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800caae:	4803      	ldr	r0, [pc, #12]	@ (800cabc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800cab0:	4770      	bx	lr
 800cab2:	4a03      	ldr	r2, [pc, #12]	@ (800cac0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800cab4:	4801      	ldr	r0, [pc, #4]	@ (800cabc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800cab6:	6812      	ldr	r2, [r2, #0]
 800cab8:	601a      	str	r2, [r3, #0]
 800caba:	4770      	bx	lr
 800cabc:	20000080 	.word	0x20000080
 800cac0:	200000b8 	.word	0x200000b8

0800cac4 <_Int32__max_serialized_size>:
 800cac4:	b508      	push	{r3, lr}
 800cac6:	2104      	movs	r1, #4
 800cac8:	2000      	movs	r0, #0
 800caca:	f001 f807 	bl	800dadc <ucdr_alignment>
 800cace:	3004      	adds	r0, #4
 800cad0:	bd08      	pop	{r3, pc}
 800cad2:	bf00      	nop

0800cad4 <_Int32__cdr_deserialize>:
 800cad4:	b109      	cbz	r1, 800cada <_Int32__cdr_deserialize+0x6>
 800cad6:	f000 bf19 	b.w	800d90c <ucdr_deserialize_int32_t>
 800cada:	4608      	mov	r0, r1
 800cadc:	4770      	bx	lr
 800cade:	bf00      	nop

0800cae0 <get_serialized_size_std_msgs__msg__Int32>:
 800cae0:	b138      	cbz	r0, 800caf2 <get_serialized_size_std_msgs__msg__Int32+0x12>
 800cae2:	b508      	push	{r3, lr}
 800cae4:	460b      	mov	r3, r1
 800cae6:	4618      	mov	r0, r3
 800cae8:	2104      	movs	r1, #4
 800caea:	f000 fff7 	bl	800dadc <ucdr_alignment>
 800caee:	3004      	adds	r0, #4
 800caf0:	bd08      	pop	{r3, pc}
 800caf2:	4770      	bx	lr

0800caf4 <_Int32__cdr_serialize>:
 800caf4:	460a      	mov	r2, r1
 800caf6:	b118      	cbz	r0, 800cb00 <_Int32__cdr_serialize+0xc>
 800caf8:	6801      	ldr	r1, [r0, #0]
 800cafa:	4610      	mov	r0, r2
 800cafc:	f000 be6e 	b.w	800d7dc <ucdr_serialize_int32_t>
 800cb00:	4770      	bx	lr
 800cb02:	bf00      	nop

0800cb04 <_Int32__get_serialized_size>:
 800cb04:	b130      	cbz	r0, 800cb14 <_Int32__get_serialized_size+0x10>
 800cb06:	b508      	push	{r3, lr}
 800cb08:	2104      	movs	r1, #4
 800cb0a:	2000      	movs	r0, #0
 800cb0c:	f000 ffe6 	bl	800dadc <ucdr_alignment>
 800cb10:	3004      	adds	r0, #4
 800cb12:	bd08      	pop	{r3, pc}
 800cb14:	4770      	bx	lr
 800cb16:	bf00      	nop

0800cb18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800cb18:	4800      	ldr	r0, [pc, #0]	@ (800cb1c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800cb1a:	4770      	bx	lr
 800cb1c:	2000008c 	.word	0x2000008c

0800cb20 <ucdr_serialize_bool>:
 800cb20:	b538      	push	{r3, r4, r5, lr}
 800cb22:	460d      	mov	r5, r1
 800cb24:	2101      	movs	r1, #1
 800cb26:	4604      	mov	r4, r0
 800cb28:	f000 ff8c 	bl	800da44 <ucdr_check_final_buffer_behavior>
 800cb2c:	b148      	cbz	r0, 800cb42 <ucdr_serialize_bool+0x22>
 800cb2e:	68a3      	ldr	r3, [r4, #8]
 800cb30:	701d      	strb	r5, [r3, #0]
 800cb32:	68a2      	ldr	r2, [r4, #8]
 800cb34:	6923      	ldr	r3, [r4, #16]
 800cb36:	2101      	movs	r1, #1
 800cb38:	440a      	add	r2, r1
 800cb3a:	440b      	add	r3, r1
 800cb3c:	60a2      	str	r2, [r4, #8]
 800cb3e:	6123      	str	r3, [r4, #16]
 800cb40:	7561      	strb	r1, [r4, #21]
 800cb42:	7da0      	ldrb	r0, [r4, #22]
 800cb44:	f080 0001 	eor.w	r0, r0, #1
 800cb48:	bd38      	pop	{r3, r4, r5, pc}
 800cb4a:	bf00      	nop

0800cb4c <ucdr_deserialize_bool>:
 800cb4c:	b538      	push	{r3, r4, r5, lr}
 800cb4e:	460d      	mov	r5, r1
 800cb50:	2101      	movs	r1, #1
 800cb52:	4604      	mov	r4, r0
 800cb54:	f000 ff76 	bl	800da44 <ucdr_check_final_buffer_behavior>
 800cb58:	b160      	cbz	r0, 800cb74 <ucdr_deserialize_bool+0x28>
 800cb5a:	68a2      	ldr	r2, [r4, #8]
 800cb5c:	6923      	ldr	r3, [r4, #16]
 800cb5e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800cb62:	3900      	subs	r1, #0
 800cb64:	bf18      	it	ne
 800cb66:	2101      	movne	r1, #1
 800cb68:	7029      	strb	r1, [r5, #0]
 800cb6a:	3301      	adds	r3, #1
 800cb6c:	2101      	movs	r1, #1
 800cb6e:	60a2      	str	r2, [r4, #8]
 800cb70:	6123      	str	r3, [r4, #16]
 800cb72:	7561      	strb	r1, [r4, #21]
 800cb74:	7da0      	ldrb	r0, [r4, #22]
 800cb76:	f080 0001 	eor.w	r0, r0, #1
 800cb7a:	bd38      	pop	{r3, r4, r5, pc}

0800cb7c <ucdr_serialize_uint8_t>:
 800cb7c:	b538      	push	{r3, r4, r5, lr}
 800cb7e:	460d      	mov	r5, r1
 800cb80:	2101      	movs	r1, #1
 800cb82:	4604      	mov	r4, r0
 800cb84:	f000 ff5e 	bl	800da44 <ucdr_check_final_buffer_behavior>
 800cb88:	b148      	cbz	r0, 800cb9e <ucdr_serialize_uint8_t+0x22>
 800cb8a:	68a3      	ldr	r3, [r4, #8]
 800cb8c:	701d      	strb	r5, [r3, #0]
 800cb8e:	68a2      	ldr	r2, [r4, #8]
 800cb90:	6923      	ldr	r3, [r4, #16]
 800cb92:	2101      	movs	r1, #1
 800cb94:	440a      	add	r2, r1
 800cb96:	440b      	add	r3, r1
 800cb98:	60a2      	str	r2, [r4, #8]
 800cb9a:	6123      	str	r3, [r4, #16]
 800cb9c:	7561      	strb	r1, [r4, #21]
 800cb9e:	7da0      	ldrb	r0, [r4, #22]
 800cba0:	f080 0001 	eor.w	r0, r0, #1
 800cba4:	bd38      	pop	{r3, r4, r5, pc}
 800cba6:	bf00      	nop

0800cba8 <ucdr_deserialize_uint8_t>:
 800cba8:	b538      	push	{r3, r4, r5, lr}
 800cbaa:	460d      	mov	r5, r1
 800cbac:	2101      	movs	r1, #1
 800cbae:	4604      	mov	r4, r0
 800cbb0:	f000 ff48 	bl	800da44 <ucdr_check_final_buffer_behavior>
 800cbb4:	b150      	cbz	r0, 800cbcc <ucdr_deserialize_uint8_t+0x24>
 800cbb6:	68a3      	ldr	r3, [r4, #8]
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	702b      	strb	r3, [r5, #0]
 800cbbc:	68a2      	ldr	r2, [r4, #8]
 800cbbe:	6923      	ldr	r3, [r4, #16]
 800cbc0:	2101      	movs	r1, #1
 800cbc2:	440a      	add	r2, r1
 800cbc4:	440b      	add	r3, r1
 800cbc6:	60a2      	str	r2, [r4, #8]
 800cbc8:	6123      	str	r3, [r4, #16]
 800cbca:	7561      	strb	r1, [r4, #21]
 800cbcc:	7da0      	ldrb	r0, [r4, #22]
 800cbce:	f080 0001 	eor.w	r0, r0, #1
 800cbd2:	bd38      	pop	{r3, r4, r5, pc}

0800cbd4 <ucdr_serialize_uint16_t>:
 800cbd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbd8:	b082      	sub	sp, #8
 800cbda:	460b      	mov	r3, r1
 800cbdc:	2102      	movs	r1, #2
 800cbde:	4604      	mov	r4, r0
 800cbe0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800cbe4:	f000 ff82 	bl	800daec <ucdr_buffer_alignment>
 800cbe8:	4601      	mov	r1, r0
 800cbea:	4620      	mov	r0, r4
 800cbec:	7d67      	ldrb	r7, [r4, #21]
 800cbee:	f000 ffc1 	bl	800db74 <ucdr_advance_buffer>
 800cbf2:	2102      	movs	r1, #2
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	f000 ff19 	bl	800da2c <ucdr_check_buffer_available_for>
 800cbfa:	bb78      	cbnz	r0, 800cc5c <ucdr_serialize_uint16_t+0x88>
 800cbfc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800cc00:	42ab      	cmp	r3, r5
 800cc02:	d926      	bls.n	800cc52 <ucdr_serialize_uint16_t+0x7e>
 800cc04:	1b5e      	subs	r6, r3, r5
 800cc06:	60a3      	str	r3, [r4, #8]
 800cc08:	6923      	ldr	r3, [r4, #16]
 800cc0a:	f1c6 0802 	rsb	r8, r6, #2
 800cc0e:	4433      	add	r3, r6
 800cc10:	6123      	str	r3, [r4, #16]
 800cc12:	4641      	mov	r1, r8
 800cc14:	4620      	mov	r0, r4
 800cc16:	f000 ff15 	bl	800da44 <ucdr_check_final_buffer_behavior>
 800cc1a:	2800      	cmp	r0, #0
 800cc1c:	d03b      	beq.n	800cc96 <ucdr_serialize_uint16_t+0xc2>
 800cc1e:	7d23      	ldrb	r3, [r4, #20]
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	d04a      	beq.n	800ccba <ucdr_serialize_uint16_t+0xe6>
 800cc24:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cc28:	702b      	strb	r3, [r5, #0]
 800cc2a:	2e00      	cmp	r6, #0
 800cc2c:	d040      	beq.n	800ccb0 <ucdr_serialize_uint16_t+0xdc>
 800cc2e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cc32:	706b      	strb	r3, [r5, #1]
 800cc34:	6923      	ldr	r3, [r4, #16]
 800cc36:	68a2      	ldr	r2, [r4, #8]
 800cc38:	7da0      	ldrb	r0, [r4, #22]
 800cc3a:	3302      	adds	r3, #2
 800cc3c:	1b9e      	subs	r6, r3, r6
 800cc3e:	4442      	add	r2, r8
 800cc40:	2302      	movs	r3, #2
 800cc42:	f080 0001 	eor.w	r0, r0, #1
 800cc46:	60a2      	str	r2, [r4, #8]
 800cc48:	6126      	str	r6, [r4, #16]
 800cc4a:	7563      	strb	r3, [r4, #21]
 800cc4c:	b002      	add	sp, #8
 800cc4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc52:	2102      	movs	r1, #2
 800cc54:	4620      	mov	r0, r4
 800cc56:	f000 fef5 	bl	800da44 <ucdr_check_final_buffer_behavior>
 800cc5a:	b190      	cbz	r0, 800cc82 <ucdr_serialize_uint16_t+0xae>
 800cc5c:	7d23      	ldrb	r3, [r4, #20]
 800cc5e:	2b01      	cmp	r3, #1
 800cc60:	68a3      	ldr	r3, [r4, #8]
 800cc62:	d014      	beq.n	800cc8e <ucdr_serialize_uint16_t+0xba>
 800cc64:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cc68:	701a      	strb	r2, [r3, #0]
 800cc6a:	68a3      	ldr	r3, [r4, #8]
 800cc6c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cc70:	705a      	strb	r2, [r3, #1]
 800cc72:	68a2      	ldr	r2, [r4, #8]
 800cc74:	6923      	ldr	r3, [r4, #16]
 800cc76:	3202      	adds	r2, #2
 800cc78:	3302      	adds	r3, #2
 800cc7a:	2102      	movs	r1, #2
 800cc7c:	60a2      	str	r2, [r4, #8]
 800cc7e:	6123      	str	r3, [r4, #16]
 800cc80:	7561      	strb	r1, [r4, #21]
 800cc82:	7da0      	ldrb	r0, [r4, #22]
 800cc84:	f080 0001 	eor.w	r0, r0, #1
 800cc88:	b002      	add	sp, #8
 800cc8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc8e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cc92:	801a      	strh	r2, [r3, #0]
 800cc94:	e7ed      	b.n	800cc72 <ucdr_serialize_uint16_t+0x9e>
 800cc96:	68a2      	ldr	r2, [r4, #8]
 800cc98:	6923      	ldr	r3, [r4, #16]
 800cc9a:	7da0      	ldrb	r0, [r4, #22]
 800cc9c:	7567      	strb	r7, [r4, #21]
 800cc9e:	1b92      	subs	r2, r2, r6
 800cca0:	1b9b      	subs	r3, r3, r6
 800cca2:	f080 0001 	eor.w	r0, r0, #1
 800cca6:	60a2      	str	r2, [r4, #8]
 800cca8:	6123      	str	r3, [r4, #16]
 800ccaa:	b002      	add	sp, #8
 800ccac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccb0:	68a3      	ldr	r3, [r4, #8]
 800ccb2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ccb6:	701a      	strb	r2, [r3, #0]
 800ccb8:	e7bc      	b.n	800cc34 <ucdr_serialize_uint16_t+0x60>
 800ccba:	4628      	mov	r0, r5
 800ccbc:	f10d 0506 	add.w	r5, sp, #6
 800ccc0:	4629      	mov	r1, r5
 800ccc2:	4632      	mov	r2, r6
 800ccc4:	f00a fa67 	bl	8017196 <memcpy>
 800ccc8:	68a0      	ldr	r0, [r4, #8]
 800ccca:	4642      	mov	r2, r8
 800cccc:	19a9      	adds	r1, r5, r6
 800ccce:	f00a fa62 	bl	8017196 <memcpy>
 800ccd2:	e7af      	b.n	800cc34 <ucdr_serialize_uint16_t+0x60>

0800ccd4 <ucdr_serialize_endian_uint16_t>:
 800ccd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ccd8:	b083      	sub	sp, #12
 800ccda:	460d      	mov	r5, r1
 800ccdc:	2102      	movs	r1, #2
 800ccde:	4604      	mov	r4, r0
 800cce0:	f8ad 2006 	strh.w	r2, [sp, #6]
 800cce4:	f000 ff02 	bl	800daec <ucdr_buffer_alignment>
 800cce8:	4601      	mov	r1, r0
 800ccea:	4620      	mov	r0, r4
 800ccec:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ccf0:	f000 ff40 	bl	800db74 <ucdr_advance_buffer>
 800ccf4:	2102      	movs	r1, #2
 800ccf6:	4620      	mov	r0, r4
 800ccf8:	f000 fe98 	bl	800da2c <ucdr_check_buffer_available_for>
 800ccfc:	bb70      	cbnz	r0, 800cd5c <ucdr_serialize_endian_uint16_t+0x88>
 800ccfe:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800cd02:	42be      	cmp	r6, r7
 800cd04:	d925      	bls.n	800cd52 <ucdr_serialize_endian_uint16_t+0x7e>
 800cd06:	6923      	ldr	r3, [r4, #16]
 800cd08:	60a6      	str	r6, [r4, #8]
 800cd0a:	1bf6      	subs	r6, r6, r7
 800cd0c:	4433      	add	r3, r6
 800cd0e:	f1c6 0902 	rsb	r9, r6, #2
 800cd12:	6123      	str	r3, [r4, #16]
 800cd14:	4649      	mov	r1, r9
 800cd16:	4620      	mov	r0, r4
 800cd18:	f000 fe94 	bl	800da44 <ucdr_check_final_buffer_behavior>
 800cd1c:	2800      	cmp	r0, #0
 800cd1e:	d039      	beq.n	800cd94 <ucdr_serialize_endian_uint16_t+0xc0>
 800cd20:	2d01      	cmp	r5, #1
 800cd22:	d04a      	beq.n	800cdba <ucdr_serialize_endian_uint16_t+0xe6>
 800cd24:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cd28:	703b      	strb	r3, [r7, #0]
 800cd2a:	2e00      	cmp	r6, #0
 800cd2c:	d040      	beq.n	800cdb0 <ucdr_serialize_endian_uint16_t+0xdc>
 800cd2e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cd32:	707b      	strb	r3, [r7, #1]
 800cd34:	6923      	ldr	r3, [r4, #16]
 800cd36:	68a2      	ldr	r2, [r4, #8]
 800cd38:	7da0      	ldrb	r0, [r4, #22]
 800cd3a:	3302      	adds	r3, #2
 800cd3c:	444a      	add	r2, r9
 800cd3e:	1b9b      	subs	r3, r3, r6
 800cd40:	2102      	movs	r1, #2
 800cd42:	f080 0001 	eor.w	r0, r0, #1
 800cd46:	60a2      	str	r2, [r4, #8]
 800cd48:	6123      	str	r3, [r4, #16]
 800cd4a:	7561      	strb	r1, [r4, #21]
 800cd4c:	b003      	add	sp, #12
 800cd4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd52:	2102      	movs	r1, #2
 800cd54:	4620      	mov	r0, r4
 800cd56:	f000 fe75 	bl	800da44 <ucdr_check_final_buffer_behavior>
 800cd5a:	b188      	cbz	r0, 800cd80 <ucdr_serialize_endian_uint16_t+0xac>
 800cd5c:	2d01      	cmp	r5, #1
 800cd5e:	68a3      	ldr	r3, [r4, #8]
 800cd60:	d014      	beq.n	800cd8c <ucdr_serialize_endian_uint16_t+0xb8>
 800cd62:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800cd66:	701a      	strb	r2, [r3, #0]
 800cd68:	68a3      	ldr	r3, [r4, #8]
 800cd6a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cd6e:	705a      	strb	r2, [r3, #1]
 800cd70:	68a2      	ldr	r2, [r4, #8]
 800cd72:	6923      	ldr	r3, [r4, #16]
 800cd74:	3202      	adds	r2, #2
 800cd76:	3302      	adds	r3, #2
 800cd78:	2102      	movs	r1, #2
 800cd7a:	60a2      	str	r2, [r4, #8]
 800cd7c:	6123      	str	r3, [r4, #16]
 800cd7e:	7561      	strb	r1, [r4, #21]
 800cd80:	7da0      	ldrb	r0, [r4, #22]
 800cd82:	f080 0001 	eor.w	r0, r0, #1
 800cd86:	b003      	add	sp, #12
 800cd88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd8c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800cd90:	801a      	strh	r2, [r3, #0]
 800cd92:	e7ed      	b.n	800cd70 <ucdr_serialize_endian_uint16_t+0x9c>
 800cd94:	68a2      	ldr	r2, [r4, #8]
 800cd96:	6923      	ldr	r3, [r4, #16]
 800cd98:	7da0      	ldrb	r0, [r4, #22]
 800cd9a:	f884 8015 	strb.w	r8, [r4, #21]
 800cd9e:	1b92      	subs	r2, r2, r6
 800cda0:	1b9b      	subs	r3, r3, r6
 800cda2:	f080 0001 	eor.w	r0, r0, #1
 800cda6:	60a2      	str	r2, [r4, #8]
 800cda8:	6123      	str	r3, [r4, #16]
 800cdaa:	b003      	add	sp, #12
 800cdac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdb0:	68a3      	ldr	r3, [r4, #8]
 800cdb2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800cdb6:	701a      	strb	r2, [r3, #0]
 800cdb8:	e7bc      	b.n	800cd34 <ucdr_serialize_endian_uint16_t+0x60>
 800cdba:	f10d 0506 	add.w	r5, sp, #6
 800cdbe:	4629      	mov	r1, r5
 800cdc0:	4632      	mov	r2, r6
 800cdc2:	4638      	mov	r0, r7
 800cdc4:	f00a f9e7 	bl	8017196 <memcpy>
 800cdc8:	68a0      	ldr	r0, [r4, #8]
 800cdca:	464a      	mov	r2, r9
 800cdcc:	19a9      	adds	r1, r5, r6
 800cdce:	f00a f9e2 	bl	8017196 <memcpy>
 800cdd2:	e7af      	b.n	800cd34 <ucdr_serialize_endian_uint16_t+0x60>

0800cdd4 <ucdr_deserialize_uint16_t>:
 800cdd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdd8:	460d      	mov	r5, r1
 800cdda:	2102      	movs	r1, #2
 800cddc:	4604      	mov	r4, r0
 800cdde:	f000 fe85 	bl	800daec <ucdr_buffer_alignment>
 800cde2:	4601      	mov	r1, r0
 800cde4:	4620      	mov	r0, r4
 800cde6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800cdea:	f000 fec3 	bl	800db74 <ucdr_advance_buffer>
 800cdee:	2102      	movs	r1, #2
 800cdf0:	4620      	mov	r0, r4
 800cdf2:	f000 fe1b 	bl	800da2c <ucdr_check_buffer_available_for>
 800cdf6:	bb60      	cbnz	r0, 800ce52 <ucdr_deserialize_uint16_t+0x7e>
 800cdf8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800cdfc:	42be      	cmp	r6, r7
 800cdfe:	d923      	bls.n	800ce48 <ucdr_deserialize_uint16_t+0x74>
 800ce00:	6923      	ldr	r3, [r4, #16]
 800ce02:	60a6      	str	r6, [r4, #8]
 800ce04:	1bf6      	subs	r6, r6, r7
 800ce06:	4433      	add	r3, r6
 800ce08:	f1c6 0902 	rsb	r9, r6, #2
 800ce0c:	6123      	str	r3, [r4, #16]
 800ce0e:	4649      	mov	r1, r9
 800ce10:	4620      	mov	r0, r4
 800ce12:	f000 fe17 	bl	800da44 <ucdr_check_final_buffer_behavior>
 800ce16:	2800      	cmp	r0, #0
 800ce18:	d034      	beq.n	800ce84 <ucdr_deserialize_uint16_t+0xb0>
 800ce1a:	7d23      	ldrb	r3, [r4, #20]
 800ce1c:	2b01      	cmp	r3, #1
 800ce1e:	d042      	beq.n	800cea6 <ucdr_deserialize_uint16_t+0xd2>
 800ce20:	787b      	ldrb	r3, [r7, #1]
 800ce22:	702b      	strb	r3, [r5, #0]
 800ce24:	2e00      	cmp	r6, #0
 800ce26:	d03a      	beq.n	800ce9e <ucdr_deserialize_uint16_t+0xca>
 800ce28:	783b      	ldrb	r3, [r7, #0]
 800ce2a:	706b      	strb	r3, [r5, #1]
 800ce2c:	6923      	ldr	r3, [r4, #16]
 800ce2e:	68a2      	ldr	r2, [r4, #8]
 800ce30:	7da0      	ldrb	r0, [r4, #22]
 800ce32:	2102      	movs	r1, #2
 800ce34:	3302      	adds	r3, #2
 800ce36:	444a      	add	r2, r9
 800ce38:	1b9b      	subs	r3, r3, r6
 800ce3a:	7561      	strb	r1, [r4, #21]
 800ce3c:	60a2      	str	r2, [r4, #8]
 800ce3e:	6123      	str	r3, [r4, #16]
 800ce40:	f080 0001 	eor.w	r0, r0, #1
 800ce44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce48:	2102      	movs	r1, #2
 800ce4a:	4620      	mov	r0, r4
 800ce4c:	f000 fdfa 	bl	800da44 <ucdr_check_final_buffer_behavior>
 800ce50:	b180      	cbz	r0, 800ce74 <ucdr_deserialize_uint16_t+0xa0>
 800ce52:	7d23      	ldrb	r3, [r4, #20]
 800ce54:	2b01      	cmp	r3, #1
 800ce56:	68a3      	ldr	r3, [r4, #8]
 800ce58:	d011      	beq.n	800ce7e <ucdr_deserialize_uint16_t+0xaa>
 800ce5a:	785b      	ldrb	r3, [r3, #1]
 800ce5c:	702b      	strb	r3, [r5, #0]
 800ce5e:	68a3      	ldr	r3, [r4, #8]
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	706b      	strb	r3, [r5, #1]
 800ce64:	68a2      	ldr	r2, [r4, #8]
 800ce66:	6923      	ldr	r3, [r4, #16]
 800ce68:	3202      	adds	r2, #2
 800ce6a:	3302      	adds	r3, #2
 800ce6c:	2102      	movs	r1, #2
 800ce6e:	60a2      	str	r2, [r4, #8]
 800ce70:	6123      	str	r3, [r4, #16]
 800ce72:	7561      	strb	r1, [r4, #21]
 800ce74:	7da0      	ldrb	r0, [r4, #22]
 800ce76:	f080 0001 	eor.w	r0, r0, #1
 800ce7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce7e:	881b      	ldrh	r3, [r3, #0]
 800ce80:	802b      	strh	r3, [r5, #0]
 800ce82:	e7ef      	b.n	800ce64 <ucdr_deserialize_uint16_t+0x90>
 800ce84:	68a2      	ldr	r2, [r4, #8]
 800ce86:	6923      	ldr	r3, [r4, #16]
 800ce88:	7da0      	ldrb	r0, [r4, #22]
 800ce8a:	f884 8015 	strb.w	r8, [r4, #21]
 800ce8e:	1b92      	subs	r2, r2, r6
 800ce90:	1b9b      	subs	r3, r3, r6
 800ce92:	60a2      	str	r2, [r4, #8]
 800ce94:	6123      	str	r3, [r4, #16]
 800ce96:	f080 0001 	eor.w	r0, r0, #1
 800ce9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce9e:	68a3      	ldr	r3, [r4, #8]
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	706b      	strb	r3, [r5, #1]
 800cea4:	e7c2      	b.n	800ce2c <ucdr_deserialize_uint16_t+0x58>
 800cea6:	4639      	mov	r1, r7
 800cea8:	4632      	mov	r2, r6
 800ceaa:	4628      	mov	r0, r5
 800ceac:	f00a f973 	bl	8017196 <memcpy>
 800ceb0:	68a1      	ldr	r1, [r4, #8]
 800ceb2:	464a      	mov	r2, r9
 800ceb4:	19a8      	adds	r0, r5, r6
 800ceb6:	f00a f96e 	bl	8017196 <memcpy>
 800ceba:	e7b7      	b.n	800ce2c <ucdr_deserialize_uint16_t+0x58>

0800cebc <ucdr_deserialize_endian_uint16_t>:
 800cebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cec0:	460e      	mov	r6, r1
 800cec2:	2102      	movs	r1, #2
 800cec4:	4604      	mov	r4, r0
 800cec6:	4615      	mov	r5, r2
 800cec8:	f000 fe10 	bl	800daec <ucdr_buffer_alignment>
 800cecc:	4601      	mov	r1, r0
 800cece:	4620      	mov	r0, r4
 800ced0:	f894 9015 	ldrb.w	r9, [r4, #21]
 800ced4:	f000 fe4e 	bl	800db74 <ucdr_advance_buffer>
 800ced8:	2102      	movs	r1, #2
 800ceda:	4620      	mov	r0, r4
 800cedc:	f000 fda6 	bl	800da2c <ucdr_check_buffer_available_for>
 800cee0:	bb70      	cbnz	r0, 800cf40 <ucdr_deserialize_endian_uint16_t+0x84>
 800cee2:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800cee6:	4547      	cmp	r7, r8
 800cee8:	d925      	bls.n	800cf36 <ucdr_deserialize_endian_uint16_t+0x7a>
 800ceea:	6923      	ldr	r3, [r4, #16]
 800ceec:	60a7      	str	r7, [r4, #8]
 800ceee:	eba7 0708 	sub.w	r7, r7, r8
 800cef2:	443b      	add	r3, r7
 800cef4:	f1c7 0a02 	rsb	sl, r7, #2
 800cef8:	6123      	str	r3, [r4, #16]
 800cefa:	4651      	mov	r1, sl
 800cefc:	4620      	mov	r0, r4
 800cefe:	f000 fda1 	bl	800da44 <ucdr_check_final_buffer_behavior>
 800cf02:	2800      	cmp	r0, #0
 800cf04:	d034      	beq.n	800cf70 <ucdr_deserialize_endian_uint16_t+0xb4>
 800cf06:	2e01      	cmp	r6, #1
 800cf08:	d043      	beq.n	800cf92 <ucdr_deserialize_endian_uint16_t+0xd6>
 800cf0a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800cf0e:	702b      	strb	r3, [r5, #0]
 800cf10:	2f00      	cmp	r7, #0
 800cf12:	d03a      	beq.n	800cf8a <ucdr_deserialize_endian_uint16_t+0xce>
 800cf14:	f898 3000 	ldrb.w	r3, [r8]
 800cf18:	706b      	strb	r3, [r5, #1]
 800cf1a:	6923      	ldr	r3, [r4, #16]
 800cf1c:	68a2      	ldr	r2, [r4, #8]
 800cf1e:	7da0      	ldrb	r0, [r4, #22]
 800cf20:	2102      	movs	r1, #2
 800cf22:	3302      	adds	r3, #2
 800cf24:	4452      	add	r2, sl
 800cf26:	1bdb      	subs	r3, r3, r7
 800cf28:	7561      	strb	r1, [r4, #21]
 800cf2a:	60a2      	str	r2, [r4, #8]
 800cf2c:	6123      	str	r3, [r4, #16]
 800cf2e:	f080 0001 	eor.w	r0, r0, #1
 800cf32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf36:	2102      	movs	r1, #2
 800cf38:	4620      	mov	r0, r4
 800cf3a:	f000 fd83 	bl	800da44 <ucdr_check_final_buffer_behavior>
 800cf3e:	b178      	cbz	r0, 800cf60 <ucdr_deserialize_endian_uint16_t+0xa4>
 800cf40:	2e01      	cmp	r6, #1
 800cf42:	68a3      	ldr	r3, [r4, #8]
 800cf44:	d011      	beq.n	800cf6a <ucdr_deserialize_endian_uint16_t+0xae>
 800cf46:	785b      	ldrb	r3, [r3, #1]
 800cf48:	702b      	strb	r3, [r5, #0]
 800cf4a:	68a3      	ldr	r3, [r4, #8]
 800cf4c:	781b      	ldrb	r3, [r3, #0]
 800cf4e:	706b      	strb	r3, [r5, #1]
 800cf50:	68a2      	ldr	r2, [r4, #8]
 800cf52:	6923      	ldr	r3, [r4, #16]
 800cf54:	3202      	adds	r2, #2
 800cf56:	3302      	adds	r3, #2
 800cf58:	2102      	movs	r1, #2
 800cf5a:	60a2      	str	r2, [r4, #8]
 800cf5c:	6123      	str	r3, [r4, #16]
 800cf5e:	7561      	strb	r1, [r4, #21]
 800cf60:	7da0      	ldrb	r0, [r4, #22]
 800cf62:	f080 0001 	eor.w	r0, r0, #1
 800cf66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf6a:	881b      	ldrh	r3, [r3, #0]
 800cf6c:	802b      	strh	r3, [r5, #0]
 800cf6e:	e7ef      	b.n	800cf50 <ucdr_deserialize_endian_uint16_t+0x94>
 800cf70:	68a2      	ldr	r2, [r4, #8]
 800cf72:	6923      	ldr	r3, [r4, #16]
 800cf74:	7da0      	ldrb	r0, [r4, #22]
 800cf76:	f884 9015 	strb.w	r9, [r4, #21]
 800cf7a:	1bd2      	subs	r2, r2, r7
 800cf7c:	1bdb      	subs	r3, r3, r7
 800cf7e:	60a2      	str	r2, [r4, #8]
 800cf80:	6123      	str	r3, [r4, #16]
 800cf82:	f080 0001 	eor.w	r0, r0, #1
 800cf86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf8a:	68a3      	ldr	r3, [r4, #8]
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	706b      	strb	r3, [r5, #1]
 800cf90:	e7c3      	b.n	800cf1a <ucdr_deserialize_endian_uint16_t+0x5e>
 800cf92:	4641      	mov	r1, r8
 800cf94:	463a      	mov	r2, r7
 800cf96:	4628      	mov	r0, r5
 800cf98:	f00a f8fd 	bl	8017196 <memcpy>
 800cf9c:	68a1      	ldr	r1, [r4, #8]
 800cf9e:	4652      	mov	r2, sl
 800cfa0:	19e8      	adds	r0, r5, r7
 800cfa2:	f00a f8f8 	bl	8017196 <memcpy>
 800cfa6:	e7b8      	b.n	800cf1a <ucdr_deserialize_endian_uint16_t+0x5e>

0800cfa8 <ucdr_serialize_uint32_t>:
 800cfa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfac:	b082      	sub	sp, #8
 800cfae:	4604      	mov	r4, r0
 800cfb0:	9101      	str	r1, [sp, #4]
 800cfb2:	2104      	movs	r1, #4
 800cfb4:	f000 fd9a 	bl	800daec <ucdr_buffer_alignment>
 800cfb8:	4601      	mov	r1, r0
 800cfba:	4620      	mov	r0, r4
 800cfbc:	7d67      	ldrb	r7, [r4, #21]
 800cfbe:	f000 fdd9 	bl	800db74 <ucdr_advance_buffer>
 800cfc2:	2104      	movs	r1, #4
 800cfc4:	4620      	mov	r0, r4
 800cfc6:	f000 fd31 	bl	800da2c <ucdr_check_buffer_available_for>
 800cfca:	2800      	cmp	r0, #0
 800cfcc:	d139      	bne.n	800d042 <ucdr_serialize_uint32_t+0x9a>
 800cfce:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800cfd2:	42ab      	cmp	r3, r5
 800cfd4:	d930      	bls.n	800d038 <ucdr_serialize_uint32_t+0x90>
 800cfd6:	1b5e      	subs	r6, r3, r5
 800cfd8:	60a3      	str	r3, [r4, #8]
 800cfda:	6923      	ldr	r3, [r4, #16]
 800cfdc:	f1c6 0804 	rsb	r8, r6, #4
 800cfe0:	4433      	add	r3, r6
 800cfe2:	6123      	str	r3, [r4, #16]
 800cfe4:	4641      	mov	r1, r8
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	f000 fd2c 	bl	800da44 <ucdr_check_final_buffer_behavior>
 800cfec:	2800      	cmp	r0, #0
 800cfee:	d04c      	beq.n	800d08a <ucdr_serialize_uint32_t+0xe2>
 800cff0:	7d23      	ldrb	r3, [r4, #20]
 800cff2:	2b01      	cmp	r3, #1
 800cff4:	d063      	beq.n	800d0be <ucdr_serialize_uint32_t+0x116>
 800cff6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cffa:	702b      	strb	r3, [r5, #0]
 800cffc:	2e00      	cmp	r6, #0
 800cffe:	d051      	beq.n	800d0a4 <ucdr_serialize_uint32_t+0xfc>
 800d000:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d004:	706b      	strb	r3, [r5, #1]
 800d006:	2e01      	cmp	r6, #1
 800d008:	d050      	beq.n	800d0ac <ucdr_serialize_uint32_t+0x104>
 800d00a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d00e:	70ab      	strb	r3, [r5, #2]
 800d010:	2e02      	cmp	r6, #2
 800d012:	d04f      	beq.n	800d0b4 <ucdr_serialize_uint32_t+0x10c>
 800d014:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d018:	70eb      	strb	r3, [r5, #3]
 800d01a:	6923      	ldr	r3, [r4, #16]
 800d01c:	68a2      	ldr	r2, [r4, #8]
 800d01e:	7da0      	ldrb	r0, [r4, #22]
 800d020:	3304      	adds	r3, #4
 800d022:	1b9e      	subs	r6, r3, r6
 800d024:	4442      	add	r2, r8
 800d026:	2304      	movs	r3, #4
 800d028:	f080 0001 	eor.w	r0, r0, #1
 800d02c:	60a2      	str	r2, [r4, #8]
 800d02e:	6126      	str	r6, [r4, #16]
 800d030:	7563      	strb	r3, [r4, #21]
 800d032:	b002      	add	sp, #8
 800d034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d038:	2104      	movs	r1, #4
 800d03a:	4620      	mov	r0, r4
 800d03c:	f000 fd02 	bl	800da44 <ucdr_check_final_buffer_behavior>
 800d040:	b1d0      	cbz	r0, 800d078 <ucdr_serialize_uint32_t+0xd0>
 800d042:	7d23      	ldrb	r3, [r4, #20]
 800d044:	2b01      	cmp	r3, #1
 800d046:	68a3      	ldr	r3, [r4, #8]
 800d048:	d01c      	beq.n	800d084 <ucdr_serialize_uint32_t+0xdc>
 800d04a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d04e:	701a      	strb	r2, [r3, #0]
 800d050:	68a3      	ldr	r3, [r4, #8]
 800d052:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d056:	705a      	strb	r2, [r3, #1]
 800d058:	68a3      	ldr	r3, [r4, #8]
 800d05a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d05e:	709a      	strb	r2, [r3, #2]
 800d060:	68a3      	ldr	r3, [r4, #8]
 800d062:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d066:	70da      	strb	r2, [r3, #3]
 800d068:	68a2      	ldr	r2, [r4, #8]
 800d06a:	6923      	ldr	r3, [r4, #16]
 800d06c:	3204      	adds	r2, #4
 800d06e:	3304      	adds	r3, #4
 800d070:	2104      	movs	r1, #4
 800d072:	60a2      	str	r2, [r4, #8]
 800d074:	6123      	str	r3, [r4, #16]
 800d076:	7561      	strb	r1, [r4, #21]
 800d078:	7da0      	ldrb	r0, [r4, #22]
 800d07a:	f080 0001 	eor.w	r0, r0, #1
 800d07e:	b002      	add	sp, #8
 800d080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d084:	9a01      	ldr	r2, [sp, #4]
 800d086:	601a      	str	r2, [r3, #0]
 800d088:	e7ee      	b.n	800d068 <ucdr_serialize_uint32_t+0xc0>
 800d08a:	68a2      	ldr	r2, [r4, #8]
 800d08c:	6923      	ldr	r3, [r4, #16]
 800d08e:	7da0      	ldrb	r0, [r4, #22]
 800d090:	7567      	strb	r7, [r4, #21]
 800d092:	1b92      	subs	r2, r2, r6
 800d094:	1b9b      	subs	r3, r3, r6
 800d096:	f080 0001 	eor.w	r0, r0, #1
 800d09a:	60a2      	str	r2, [r4, #8]
 800d09c:	6123      	str	r3, [r4, #16]
 800d09e:	b002      	add	sp, #8
 800d0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0a4:	68a3      	ldr	r3, [r4, #8]
 800d0a6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d0aa:	701a      	strb	r2, [r3, #0]
 800d0ac:	68a3      	ldr	r3, [r4, #8]
 800d0ae:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d0b2:	701a      	strb	r2, [r3, #0]
 800d0b4:	68a3      	ldr	r3, [r4, #8]
 800d0b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d0ba:	701a      	strb	r2, [r3, #0]
 800d0bc:	e7ad      	b.n	800d01a <ucdr_serialize_uint32_t+0x72>
 800d0be:	4628      	mov	r0, r5
 800d0c0:	ad01      	add	r5, sp, #4
 800d0c2:	4629      	mov	r1, r5
 800d0c4:	4632      	mov	r2, r6
 800d0c6:	f00a f866 	bl	8017196 <memcpy>
 800d0ca:	68a0      	ldr	r0, [r4, #8]
 800d0cc:	4642      	mov	r2, r8
 800d0ce:	19a9      	adds	r1, r5, r6
 800d0d0:	f00a f861 	bl	8017196 <memcpy>
 800d0d4:	e7a1      	b.n	800d01a <ucdr_serialize_uint32_t+0x72>
 800d0d6:	bf00      	nop

0800d0d8 <ucdr_serialize_endian_uint32_t>:
 800d0d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0dc:	b083      	sub	sp, #12
 800d0de:	460d      	mov	r5, r1
 800d0e0:	2104      	movs	r1, #4
 800d0e2:	4604      	mov	r4, r0
 800d0e4:	9201      	str	r2, [sp, #4]
 800d0e6:	f000 fd01 	bl	800daec <ucdr_buffer_alignment>
 800d0ea:	4601      	mov	r1, r0
 800d0ec:	4620      	mov	r0, r4
 800d0ee:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d0f2:	f000 fd3f 	bl	800db74 <ucdr_advance_buffer>
 800d0f6:	2104      	movs	r1, #4
 800d0f8:	4620      	mov	r0, r4
 800d0fa:	f000 fc97 	bl	800da2c <ucdr_check_buffer_available_for>
 800d0fe:	2800      	cmp	r0, #0
 800d100:	d138      	bne.n	800d174 <ucdr_serialize_endian_uint32_t+0x9c>
 800d102:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d106:	42b7      	cmp	r7, r6
 800d108:	d92f      	bls.n	800d16a <ucdr_serialize_endian_uint32_t+0x92>
 800d10a:	6923      	ldr	r3, [r4, #16]
 800d10c:	60a7      	str	r7, [r4, #8]
 800d10e:	1bbf      	subs	r7, r7, r6
 800d110:	443b      	add	r3, r7
 800d112:	f1c7 0904 	rsb	r9, r7, #4
 800d116:	6123      	str	r3, [r4, #16]
 800d118:	4649      	mov	r1, r9
 800d11a:	4620      	mov	r0, r4
 800d11c:	f000 fc92 	bl	800da44 <ucdr_check_final_buffer_behavior>
 800d120:	2800      	cmp	r0, #0
 800d122:	d04a      	beq.n	800d1ba <ucdr_serialize_endian_uint32_t+0xe2>
 800d124:	2d01      	cmp	r5, #1
 800d126:	d063      	beq.n	800d1f0 <ucdr_serialize_endian_uint32_t+0x118>
 800d128:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d12c:	7033      	strb	r3, [r6, #0]
 800d12e:	2f00      	cmp	r7, #0
 800d130:	d051      	beq.n	800d1d6 <ucdr_serialize_endian_uint32_t+0xfe>
 800d132:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d136:	7073      	strb	r3, [r6, #1]
 800d138:	2f01      	cmp	r7, #1
 800d13a:	d050      	beq.n	800d1de <ucdr_serialize_endian_uint32_t+0x106>
 800d13c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d140:	70b3      	strb	r3, [r6, #2]
 800d142:	2f02      	cmp	r7, #2
 800d144:	d04f      	beq.n	800d1e6 <ucdr_serialize_endian_uint32_t+0x10e>
 800d146:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d14a:	70f3      	strb	r3, [r6, #3]
 800d14c:	6923      	ldr	r3, [r4, #16]
 800d14e:	68a2      	ldr	r2, [r4, #8]
 800d150:	7da0      	ldrb	r0, [r4, #22]
 800d152:	3304      	adds	r3, #4
 800d154:	444a      	add	r2, r9
 800d156:	1bdb      	subs	r3, r3, r7
 800d158:	2104      	movs	r1, #4
 800d15a:	f080 0001 	eor.w	r0, r0, #1
 800d15e:	60a2      	str	r2, [r4, #8]
 800d160:	6123      	str	r3, [r4, #16]
 800d162:	7561      	strb	r1, [r4, #21]
 800d164:	b003      	add	sp, #12
 800d166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d16a:	2104      	movs	r1, #4
 800d16c:	4620      	mov	r0, r4
 800d16e:	f000 fc69 	bl	800da44 <ucdr_check_final_buffer_behavior>
 800d172:	b1c8      	cbz	r0, 800d1a8 <ucdr_serialize_endian_uint32_t+0xd0>
 800d174:	2d01      	cmp	r5, #1
 800d176:	68a3      	ldr	r3, [r4, #8]
 800d178:	d01c      	beq.n	800d1b4 <ucdr_serialize_endian_uint32_t+0xdc>
 800d17a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d17e:	701a      	strb	r2, [r3, #0]
 800d180:	68a3      	ldr	r3, [r4, #8]
 800d182:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d186:	705a      	strb	r2, [r3, #1]
 800d188:	68a3      	ldr	r3, [r4, #8]
 800d18a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d18e:	709a      	strb	r2, [r3, #2]
 800d190:	68a3      	ldr	r3, [r4, #8]
 800d192:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d196:	70da      	strb	r2, [r3, #3]
 800d198:	68a2      	ldr	r2, [r4, #8]
 800d19a:	6923      	ldr	r3, [r4, #16]
 800d19c:	3204      	adds	r2, #4
 800d19e:	3304      	adds	r3, #4
 800d1a0:	2104      	movs	r1, #4
 800d1a2:	60a2      	str	r2, [r4, #8]
 800d1a4:	6123      	str	r3, [r4, #16]
 800d1a6:	7561      	strb	r1, [r4, #21]
 800d1a8:	7da0      	ldrb	r0, [r4, #22]
 800d1aa:	f080 0001 	eor.w	r0, r0, #1
 800d1ae:	b003      	add	sp, #12
 800d1b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1b4:	9a01      	ldr	r2, [sp, #4]
 800d1b6:	601a      	str	r2, [r3, #0]
 800d1b8:	e7ee      	b.n	800d198 <ucdr_serialize_endian_uint32_t+0xc0>
 800d1ba:	68a2      	ldr	r2, [r4, #8]
 800d1bc:	6923      	ldr	r3, [r4, #16]
 800d1be:	7da0      	ldrb	r0, [r4, #22]
 800d1c0:	f884 8015 	strb.w	r8, [r4, #21]
 800d1c4:	1bd2      	subs	r2, r2, r7
 800d1c6:	1bdb      	subs	r3, r3, r7
 800d1c8:	f080 0001 	eor.w	r0, r0, #1
 800d1cc:	60a2      	str	r2, [r4, #8]
 800d1ce:	6123      	str	r3, [r4, #16]
 800d1d0:	b003      	add	sp, #12
 800d1d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1d6:	68a3      	ldr	r3, [r4, #8]
 800d1d8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d1dc:	701a      	strb	r2, [r3, #0]
 800d1de:	68a3      	ldr	r3, [r4, #8]
 800d1e0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d1e4:	701a      	strb	r2, [r3, #0]
 800d1e6:	68a3      	ldr	r3, [r4, #8]
 800d1e8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d1ec:	701a      	strb	r2, [r3, #0]
 800d1ee:	e7ad      	b.n	800d14c <ucdr_serialize_endian_uint32_t+0x74>
 800d1f0:	ad01      	add	r5, sp, #4
 800d1f2:	4629      	mov	r1, r5
 800d1f4:	463a      	mov	r2, r7
 800d1f6:	4630      	mov	r0, r6
 800d1f8:	f009 ffcd 	bl	8017196 <memcpy>
 800d1fc:	68a0      	ldr	r0, [r4, #8]
 800d1fe:	464a      	mov	r2, r9
 800d200:	19e9      	adds	r1, r5, r7
 800d202:	f009 ffc8 	bl	8017196 <memcpy>
 800d206:	e7a1      	b.n	800d14c <ucdr_serialize_endian_uint32_t+0x74>

0800d208 <ucdr_deserialize_uint32_t>:
 800d208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d20c:	460d      	mov	r5, r1
 800d20e:	2104      	movs	r1, #4
 800d210:	4604      	mov	r4, r0
 800d212:	f000 fc6b 	bl	800daec <ucdr_buffer_alignment>
 800d216:	4601      	mov	r1, r0
 800d218:	4620      	mov	r0, r4
 800d21a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d21e:	f000 fca9 	bl	800db74 <ucdr_advance_buffer>
 800d222:	2104      	movs	r1, #4
 800d224:	4620      	mov	r0, r4
 800d226:	f000 fc01 	bl	800da2c <ucdr_check_buffer_available_for>
 800d22a:	2800      	cmp	r0, #0
 800d22c:	d138      	bne.n	800d2a0 <ucdr_deserialize_uint32_t+0x98>
 800d22e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d232:	42b7      	cmp	r7, r6
 800d234:	d92f      	bls.n	800d296 <ucdr_deserialize_uint32_t+0x8e>
 800d236:	6923      	ldr	r3, [r4, #16]
 800d238:	60a7      	str	r7, [r4, #8]
 800d23a:	1bbf      	subs	r7, r7, r6
 800d23c:	443b      	add	r3, r7
 800d23e:	f1c7 0904 	rsb	r9, r7, #4
 800d242:	6123      	str	r3, [r4, #16]
 800d244:	4649      	mov	r1, r9
 800d246:	4620      	mov	r0, r4
 800d248:	f000 fbfc 	bl	800da44 <ucdr_check_final_buffer_behavior>
 800d24c:	2800      	cmp	r0, #0
 800d24e:	d046      	beq.n	800d2de <ucdr_deserialize_uint32_t+0xd6>
 800d250:	7d23      	ldrb	r3, [r4, #20]
 800d252:	2b01      	cmp	r3, #1
 800d254:	d05c      	beq.n	800d310 <ucdr_deserialize_uint32_t+0x108>
 800d256:	78f3      	ldrb	r3, [r6, #3]
 800d258:	702b      	strb	r3, [r5, #0]
 800d25a:	2f00      	cmp	r7, #0
 800d25c:	d04c      	beq.n	800d2f8 <ucdr_deserialize_uint32_t+0xf0>
 800d25e:	78b3      	ldrb	r3, [r6, #2]
 800d260:	706b      	strb	r3, [r5, #1]
 800d262:	2f01      	cmp	r7, #1
 800d264:	f105 0302 	add.w	r3, r5, #2
 800d268:	d04a      	beq.n	800d300 <ucdr_deserialize_uint32_t+0xf8>
 800d26a:	7873      	ldrb	r3, [r6, #1]
 800d26c:	70ab      	strb	r3, [r5, #2]
 800d26e:	2f02      	cmp	r7, #2
 800d270:	f105 0303 	add.w	r3, r5, #3
 800d274:	d048      	beq.n	800d308 <ucdr_deserialize_uint32_t+0x100>
 800d276:	7833      	ldrb	r3, [r6, #0]
 800d278:	70eb      	strb	r3, [r5, #3]
 800d27a:	6923      	ldr	r3, [r4, #16]
 800d27c:	68a2      	ldr	r2, [r4, #8]
 800d27e:	7da0      	ldrb	r0, [r4, #22]
 800d280:	2104      	movs	r1, #4
 800d282:	3304      	adds	r3, #4
 800d284:	444a      	add	r2, r9
 800d286:	1bdb      	subs	r3, r3, r7
 800d288:	7561      	strb	r1, [r4, #21]
 800d28a:	60a2      	str	r2, [r4, #8]
 800d28c:	6123      	str	r3, [r4, #16]
 800d28e:	f080 0001 	eor.w	r0, r0, #1
 800d292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d296:	2104      	movs	r1, #4
 800d298:	4620      	mov	r0, r4
 800d29a:	f000 fbd3 	bl	800da44 <ucdr_check_final_buffer_behavior>
 800d29e:	b1b0      	cbz	r0, 800d2ce <ucdr_deserialize_uint32_t+0xc6>
 800d2a0:	7d23      	ldrb	r3, [r4, #20]
 800d2a2:	2b01      	cmp	r3, #1
 800d2a4:	68a3      	ldr	r3, [r4, #8]
 800d2a6:	d017      	beq.n	800d2d8 <ucdr_deserialize_uint32_t+0xd0>
 800d2a8:	78db      	ldrb	r3, [r3, #3]
 800d2aa:	702b      	strb	r3, [r5, #0]
 800d2ac:	68a3      	ldr	r3, [r4, #8]
 800d2ae:	789b      	ldrb	r3, [r3, #2]
 800d2b0:	706b      	strb	r3, [r5, #1]
 800d2b2:	68a3      	ldr	r3, [r4, #8]
 800d2b4:	785b      	ldrb	r3, [r3, #1]
 800d2b6:	70ab      	strb	r3, [r5, #2]
 800d2b8:	68a3      	ldr	r3, [r4, #8]
 800d2ba:	781b      	ldrb	r3, [r3, #0]
 800d2bc:	70eb      	strb	r3, [r5, #3]
 800d2be:	68a2      	ldr	r2, [r4, #8]
 800d2c0:	6923      	ldr	r3, [r4, #16]
 800d2c2:	3204      	adds	r2, #4
 800d2c4:	3304      	adds	r3, #4
 800d2c6:	2104      	movs	r1, #4
 800d2c8:	60a2      	str	r2, [r4, #8]
 800d2ca:	6123      	str	r3, [r4, #16]
 800d2cc:	7561      	strb	r1, [r4, #21]
 800d2ce:	7da0      	ldrb	r0, [r4, #22]
 800d2d0:	f080 0001 	eor.w	r0, r0, #1
 800d2d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	602b      	str	r3, [r5, #0]
 800d2dc:	e7ef      	b.n	800d2be <ucdr_deserialize_uint32_t+0xb6>
 800d2de:	68a2      	ldr	r2, [r4, #8]
 800d2e0:	6923      	ldr	r3, [r4, #16]
 800d2e2:	7da0      	ldrb	r0, [r4, #22]
 800d2e4:	f884 8015 	strb.w	r8, [r4, #21]
 800d2e8:	1bd2      	subs	r2, r2, r7
 800d2ea:	1bdb      	subs	r3, r3, r7
 800d2ec:	60a2      	str	r2, [r4, #8]
 800d2ee:	6123      	str	r3, [r4, #16]
 800d2f0:	f080 0001 	eor.w	r0, r0, #1
 800d2f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d2f8:	68a3      	ldr	r3, [r4, #8]
 800d2fa:	789b      	ldrb	r3, [r3, #2]
 800d2fc:	706b      	strb	r3, [r5, #1]
 800d2fe:	1cab      	adds	r3, r5, #2
 800d300:	68a2      	ldr	r2, [r4, #8]
 800d302:	7852      	ldrb	r2, [r2, #1]
 800d304:	f803 2b01 	strb.w	r2, [r3], #1
 800d308:	68a2      	ldr	r2, [r4, #8]
 800d30a:	7812      	ldrb	r2, [r2, #0]
 800d30c:	701a      	strb	r2, [r3, #0]
 800d30e:	e7b4      	b.n	800d27a <ucdr_deserialize_uint32_t+0x72>
 800d310:	4631      	mov	r1, r6
 800d312:	463a      	mov	r2, r7
 800d314:	4628      	mov	r0, r5
 800d316:	f009 ff3e 	bl	8017196 <memcpy>
 800d31a:	68a1      	ldr	r1, [r4, #8]
 800d31c:	464a      	mov	r2, r9
 800d31e:	19e8      	adds	r0, r5, r7
 800d320:	f009 ff39 	bl	8017196 <memcpy>
 800d324:	e7a9      	b.n	800d27a <ucdr_deserialize_uint32_t+0x72>
 800d326:	bf00      	nop

0800d328 <ucdr_deserialize_endian_uint32_t>:
 800d328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d32c:	460e      	mov	r6, r1
 800d32e:	2104      	movs	r1, #4
 800d330:	4604      	mov	r4, r0
 800d332:	4615      	mov	r5, r2
 800d334:	f000 fbda 	bl	800daec <ucdr_buffer_alignment>
 800d338:	4601      	mov	r1, r0
 800d33a:	4620      	mov	r0, r4
 800d33c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800d340:	f000 fc18 	bl	800db74 <ucdr_advance_buffer>
 800d344:	2104      	movs	r1, #4
 800d346:	4620      	mov	r0, r4
 800d348:	f000 fb70 	bl	800da2c <ucdr_check_buffer_available_for>
 800d34c:	2800      	cmp	r0, #0
 800d34e:	d13c      	bne.n	800d3ca <ucdr_deserialize_endian_uint32_t+0xa2>
 800d350:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800d354:	42bb      	cmp	r3, r7
 800d356:	d933      	bls.n	800d3c0 <ucdr_deserialize_endian_uint32_t+0x98>
 800d358:	eba3 0807 	sub.w	r8, r3, r7
 800d35c:	60a3      	str	r3, [r4, #8]
 800d35e:	6923      	ldr	r3, [r4, #16]
 800d360:	f1c8 0a04 	rsb	sl, r8, #4
 800d364:	4443      	add	r3, r8
 800d366:	6123      	str	r3, [r4, #16]
 800d368:	4651      	mov	r1, sl
 800d36a:	4620      	mov	r0, r4
 800d36c:	f000 fb6a 	bl	800da44 <ucdr_check_final_buffer_behavior>
 800d370:	2800      	cmp	r0, #0
 800d372:	d048      	beq.n	800d406 <ucdr_deserialize_endian_uint32_t+0xde>
 800d374:	2e01      	cmp	r6, #1
 800d376:	d061      	beq.n	800d43c <ucdr_deserialize_endian_uint32_t+0x114>
 800d378:	78fb      	ldrb	r3, [r7, #3]
 800d37a:	702b      	strb	r3, [r5, #0]
 800d37c:	f1b8 0f00 	cmp.w	r8, #0
 800d380:	d050      	beq.n	800d424 <ucdr_deserialize_endian_uint32_t+0xfc>
 800d382:	78bb      	ldrb	r3, [r7, #2]
 800d384:	706b      	strb	r3, [r5, #1]
 800d386:	f1b8 0f01 	cmp.w	r8, #1
 800d38a:	f105 0302 	add.w	r3, r5, #2
 800d38e:	d04d      	beq.n	800d42c <ucdr_deserialize_endian_uint32_t+0x104>
 800d390:	787b      	ldrb	r3, [r7, #1]
 800d392:	70ab      	strb	r3, [r5, #2]
 800d394:	f1b8 0f02 	cmp.w	r8, #2
 800d398:	f105 0303 	add.w	r3, r5, #3
 800d39c:	d04a      	beq.n	800d434 <ucdr_deserialize_endian_uint32_t+0x10c>
 800d39e:	783b      	ldrb	r3, [r7, #0]
 800d3a0:	70eb      	strb	r3, [r5, #3]
 800d3a2:	6923      	ldr	r3, [r4, #16]
 800d3a4:	68a2      	ldr	r2, [r4, #8]
 800d3a6:	7da0      	ldrb	r0, [r4, #22]
 800d3a8:	2104      	movs	r1, #4
 800d3aa:	3304      	adds	r3, #4
 800d3ac:	4452      	add	r2, sl
 800d3ae:	eba3 0308 	sub.w	r3, r3, r8
 800d3b2:	7561      	strb	r1, [r4, #21]
 800d3b4:	60a2      	str	r2, [r4, #8]
 800d3b6:	6123      	str	r3, [r4, #16]
 800d3b8:	f080 0001 	eor.w	r0, r0, #1
 800d3bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3c0:	2104      	movs	r1, #4
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	f000 fb3e 	bl	800da44 <ucdr_check_final_buffer_behavior>
 800d3c8:	b1a8      	cbz	r0, 800d3f6 <ucdr_deserialize_endian_uint32_t+0xce>
 800d3ca:	2e01      	cmp	r6, #1
 800d3cc:	68a3      	ldr	r3, [r4, #8]
 800d3ce:	d017      	beq.n	800d400 <ucdr_deserialize_endian_uint32_t+0xd8>
 800d3d0:	78db      	ldrb	r3, [r3, #3]
 800d3d2:	702b      	strb	r3, [r5, #0]
 800d3d4:	68a3      	ldr	r3, [r4, #8]
 800d3d6:	789b      	ldrb	r3, [r3, #2]
 800d3d8:	706b      	strb	r3, [r5, #1]
 800d3da:	68a3      	ldr	r3, [r4, #8]
 800d3dc:	785b      	ldrb	r3, [r3, #1]
 800d3de:	70ab      	strb	r3, [r5, #2]
 800d3e0:	68a3      	ldr	r3, [r4, #8]
 800d3e2:	781b      	ldrb	r3, [r3, #0]
 800d3e4:	70eb      	strb	r3, [r5, #3]
 800d3e6:	68a2      	ldr	r2, [r4, #8]
 800d3e8:	6923      	ldr	r3, [r4, #16]
 800d3ea:	3204      	adds	r2, #4
 800d3ec:	3304      	adds	r3, #4
 800d3ee:	2104      	movs	r1, #4
 800d3f0:	60a2      	str	r2, [r4, #8]
 800d3f2:	6123      	str	r3, [r4, #16]
 800d3f4:	7561      	strb	r1, [r4, #21]
 800d3f6:	7da0      	ldrb	r0, [r4, #22]
 800d3f8:	f080 0001 	eor.w	r0, r0, #1
 800d3fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	602b      	str	r3, [r5, #0]
 800d404:	e7ef      	b.n	800d3e6 <ucdr_deserialize_endian_uint32_t+0xbe>
 800d406:	68a2      	ldr	r2, [r4, #8]
 800d408:	6923      	ldr	r3, [r4, #16]
 800d40a:	7da0      	ldrb	r0, [r4, #22]
 800d40c:	f884 9015 	strb.w	r9, [r4, #21]
 800d410:	eba2 0208 	sub.w	r2, r2, r8
 800d414:	eba3 0308 	sub.w	r3, r3, r8
 800d418:	60a2      	str	r2, [r4, #8]
 800d41a:	6123      	str	r3, [r4, #16]
 800d41c:	f080 0001 	eor.w	r0, r0, #1
 800d420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d424:	68a3      	ldr	r3, [r4, #8]
 800d426:	789b      	ldrb	r3, [r3, #2]
 800d428:	706b      	strb	r3, [r5, #1]
 800d42a:	1cab      	adds	r3, r5, #2
 800d42c:	68a2      	ldr	r2, [r4, #8]
 800d42e:	7852      	ldrb	r2, [r2, #1]
 800d430:	f803 2b01 	strb.w	r2, [r3], #1
 800d434:	68a2      	ldr	r2, [r4, #8]
 800d436:	7812      	ldrb	r2, [r2, #0]
 800d438:	701a      	strb	r2, [r3, #0]
 800d43a:	e7b2      	b.n	800d3a2 <ucdr_deserialize_endian_uint32_t+0x7a>
 800d43c:	4639      	mov	r1, r7
 800d43e:	4642      	mov	r2, r8
 800d440:	4628      	mov	r0, r5
 800d442:	f009 fea8 	bl	8017196 <memcpy>
 800d446:	68a1      	ldr	r1, [r4, #8]
 800d448:	4652      	mov	r2, sl
 800d44a:	eb05 0008 	add.w	r0, r5, r8
 800d44e:	f009 fea2 	bl	8017196 <memcpy>
 800d452:	e7a6      	b.n	800d3a2 <ucdr_deserialize_endian_uint32_t+0x7a>

0800d454 <ucdr_serialize_uint64_t>:
 800d454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d458:	2108      	movs	r1, #8
 800d45a:	b082      	sub	sp, #8
 800d45c:	4604      	mov	r4, r0
 800d45e:	e9cd 2300 	strd	r2, r3, [sp]
 800d462:	f000 fb43 	bl	800daec <ucdr_buffer_alignment>
 800d466:	4601      	mov	r1, r0
 800d468:	4620      	mov	r0, r4
 800d46a:	7d67      	ldrb	r7, [r4, #21]
 800d46c:	f000 fb82 	bl	800db74 <ucdr_advance_buffer>
 800d470:	2108      	movs	r1, #8
 800d472:	4620      	mov	r0, r4
 800d474:	f000 fada 	bl	800da2c <ucdr_check_buffer_available_for>
 800d478:	2800      	cmp	r0, #0
 800d47a:	d14e      	bne.n	800d51a <ucdr_serialize_uint64_t+0xc6>
 800d47c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d480:	42ab      	cmp	r3, r5
 800d482:	d945      	bls.n	800d510 <ucdr_serialize_uint64_t+0xbc>
 800d484:	1b5e      	subs	r6, r3, r5
 800d486:	60a3      	str	r3, [r4, #8]
 800d488:	6923      	ldr	r3, [r4, #16]
 800d48a:	f1c6 0808 	rsb	r8, r6, #8
 800d48e:	4433      	add	r3, r6
 800d490:	6123      	str	r3, [r4, #16]
 800d492:	4641      	mov	r1, r8
 800d494:	4620      	mov	r0, r4
 800d496:	f000 fad5 	bl	800da44 <ucdr_check_final_buffer_behavior>
 800d49a:	2800      	cmp	r0, #0
 800d49c:	d074      	beq.n	800d588 <ucdr_serialize_uint64_t+0x134>
 800d49e:	7d23      	ldrb	r3, [r4, #20]
 800d4a0:	2b01      	cmp	r3, #1
 800d4a2:	f000 809b 	beq.w	800d5dc <ucdr_serialize_uint64_t+0x188>
 800d4a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d4aa:	702b      	strb	r3, [r5, #0]
 800d4ac:	2e00      	cmp	r6, #0
 800d4ae:	d078      	beq.n	800d5a2 <ucdr_serialize_uint64_t+0x14e>
 800d4b0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d4b4:	706b      	strb	r3, [r5, #1]
 800d4b6:	2e01      	cmp	r6, #1
 800d4b8:	d077      	beq.n	800d5aa <ucdr_serialize_uint64_t+0x156>
 800d4ba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d4be:	70ab      	strb	r3, [r5, #2]
 800d4c0:	2e02      	cmp	r6, #2
 800d4c2:	d076      	beq.n	800d5b2 <ucdr_serialize_uint64_t+0x15e>
 800d4c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d4c8:	70eb      	strb	r3, [r5, #3]
 800d4ca:	2e03      	cmp	r6, #3
 800d4cc:	d075      	beq.n	800d5ba <ucdr_serialize_uint64_t+0x166>
 800d4ce:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d4d2:	712b      	strb	r3, [r5, #4]
 800d4d4:	2e04      	cmp	r6, #4
 800d4d6:	d074      	beq.n	800d5c2 <ucdr_serialize_uint64_t+0x16e>
 800d4d8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800d4dc:	716b      	strb	r3, [r5, #5]
 800d4de:	2e05      	cmp	r6, #5
 800d4e0:	d073      	beq.n	800d5ca <ucdr_serialize_uint64_t+0x176>
 800d4e2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800d4e6:	71ab      	strb	r3, [r5, #6]
 800d4e8:	2e06      	cmp	r6, #6
 800d4ea:	d072      	beq.n	800d5d2 <ucdr_serialize_uint64_t+0x17e>
 800d4ec:	f89d 3000 	ldrb.w	r3, [sp]
 800d4f0:	71eb      	strb	r3, [r5, #7]
 800d4f2:	6923      	ldr	r3, [r4, #16]
 800d4f4:	68a2      	ldr	r2, [r4, #8]
 800d4f6:	7da0      	ldrb	r0, [r4, #22]
 800d4f8:	3308      	adds	r3, #8
 800d4fa:	1b9e      	subs	r6, r3, r6
 800d4fc:	4442      	add	r2, r8
 800d4fe:	2308      	movs	r3, #8
 800d500:	f080 0001 	eor.w	r0, r0, #1
 800d504:	60a2      	str	r2, [r4, #8]
 800d506:	6126      	str	r6, [r4, #16]
 800d508:	7563      	strb	r3, [r4, #21]
 800d50a:	b002      	add	sp, #8
 800d50c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d510:	2108      	movs	r1, #8
 800d512:	4620      	mov	r0, r4
 800d514:	f000 fa96 	bl	800da44 <ucdr_check_final_buffer_behavior>
 800d518:	b350      	cbz	r0, 800d570 <ucdr_serialize_uint64_t+0x11c>
 800d51a:	7d23      	ldrb	r3, [r4, #20]
 800d51c:	2b01      	cmp	r3, #1
 800d51e:	d02d      	beq.n	800d57c <ucdr_serialize_uint64_t+0x128>
 800d520:	68a3      	ldr	r3, [r4, #8]
 800d522:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d526:	701a      	strb	r2, [r3, #0]
 800d528:	68a3      	ldr	r3, [r4, #8]
 800d52a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d52e:	705a      	strb	r2, [r3, #1]
 800d530:	68a3      	ldr	r3, [r4, #8]
 800d532:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d536:	709a      	strb	r2, [r3, #2]
 800d538:	68a3      	ldr	r3, [r4, #8]
 800d53a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d53e:	70da      	strb	r2, [r3, #3]
 800d540:	68a3      	ldr	r3, [r4, #8]
 800d542:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d546:	711a      	strb	r2, [r3, #4]
 800d548:	68a3      	ldr	r3, [r4, #8]
 800d54a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d54e:	715a      	strb	r2, [r3, #5]
 800d550:	68a3      	ldr	r3, [r4, #8]
 800d552:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d556:	719a      	strb	r2, [r3, #6]
 800d558:	68a3      	ldr	r3, [r4, #8]
 800d55a:	f89d 2000 	ldrb.w	r2, [sp]
 800d55e:	71da      	strb	r2, [r3, #7]
 800d560:	68a2      	ldr	r2, [r4, #8]
 800d562:	6923      	ldr	r3, [r4, #16]
 800d564:	3208      	adds	r2, #8
 800d566:	3308      	adds	r3, #8
 800d568:	2108      	movs	r1, #8
 800d56a:	60a2      	str	r2, [r4, #8]
 800d56c:	6123      	str	r3, [r4, #16]
 800d56e:	7561      	strb	r1, [r4, #21]
 800d570:	7da0      	ldrb	r0, [r4, #22]
 800d572:	f080 0001 	eor.w	r0, r0, #1
 800d576:	b002      	add	sp, #8
 800d578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d57c:	466b      	mov	r3, sp
 800d57e:	cb03      	ldmia	r3!, {r0, r1}
 800d580:	68a3      	ldr	r3, [r4, #8]
 800d582:	6018      	str	r0, [r3, #0]
 800d584:	6059      	str	r1, [r3, #4]
 800d586:	e7eb      	b.n	800d560 <ucdr_serialize_uint64_t+0x10c>
 800d588:	68a2      	ldr	r2, [r4, #8]
 800d58a:	6923      	ldr	r3, [r4, #16]
 800d58c:	7da0      	ldrb	r0, [r4, #22]
 800d58e:	7567      	strb	r7, [r4, #21]
 800d590:	1b92      	subs	r2, r2, r6
 800d592:	1b9b      	subs	r3, r3, r6
 800d594:	f080 0001 	eor.w	r0, r0, #1
 800d598:	60a2      	str	r2, [r4, #8]
 800d59a:	6123      	str	r3, [r4, #16]
 800d59c:	b002      	add	sp, #8
 800d59e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5a2:	68a3      	ldr	r3, [r4, #8]
 800d5a4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d5a8:	701a      	strb	r2, [r3, #0]
 800d5aa:	68a3      	ldr	r3, [r4, #8]
 800d5ac:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d5b0:	701a      	strb	r2, [r3, #0]
 800d5b2:	68a3      	ldr	r3, [r4, #8]
 800d5b4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d5b8:	701a      	strb	r2, [r3, #0]
 800d5ba:	68a3      	ldr	r3, [r4, #8]
 800d5bc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800d5c0:	701a      	strb	r2, [r3, #0]
 800d5c2:	68a3      	ldr	r3, [r4, #8]
 800d5c4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800d5c8:	701a      	strb	r2, [r3, #0]
 800d5ca:	68a3      	ldr	r3, [r4, #8]
 800d5cc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800d5d0:	701a      	strb	r2, [r3, #0]
 800d5d2:	68a3      	ldr	r3, [r4, #8]
 800d5d4:	f89d 2000 	ldrb.w	r2, [sp]
 800d5d8:	701a      	strb	r2, [r3, #0]
 800d5da:	e78a      	b.n	800d4f2 <ucdr_serialize_uint64_t+0x9e>
 800d5dc:	4628      	mov	r0, r5
 800d5de:	466d      	mov	r5, sp
 800d5e0:	4629      	mov	r1, r5
 800d5e2:	4632      	mov	r2, r6
 800d5e4:	f009 fdd7 	bl	8017196 <memcpy>
 800d5e8:	68a0      	ldr	r0, [r4, #8]
 800d5ea:	4642      	mov	r2, r8
 800d5ec:	19a9      	adds	r1, r5, r6
 800d5ee:	f009 fdd2 	bl	8017196 <memcpy>
 800d5f2:	e77e      	b.n	800d4f2 <ucdr_serialize_uint64_t+0x9e>

0800d5f4 <ucdr_serialize_int16_t>:
 800d5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5f8:	b082      	sub	sp, #8
 800d5fa:	460b      	mov	r3, r1
 800d5fc:	2102      	movs	r1, #2
 800d5fe:	4604      	mov	r4, r0
 800d600:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d604:	f000 fa72 	bl	800daec <ucdr_buffer_alignment>
 800d608:	4601      	mov	r1, r0
 800d60a:	4620      	mov	r0, r4
 800d60c:	7d67      	ldrb	r7, [r4, #21]
 800d60e:	f000 fab1 	bl	800db74 <ucdr_advance_buffer>
 800d612:	2102      	movs	r1, #2
 800d614:	4620      	mov	r0, r4
 800d616:	f000 fa09 	bl	800da2c <ucdr_check_buffer_available_for>
 800d61a:	bb78      	cbnz	r0, 800d67c <ucdr_serialize_int16_t+0x88>
 800d61c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d620:	42ab      	cmp	r3, r5
 800d622:	d926      	bls.n	800d672 <ucdr_serialize_int16_t+0x7e>
 800d624:	1b5e      	subs	r6, r3, r5
 800d626:	60a3      	str	r3, [r4, #8]
 800d628:	6923      	ldr	r3, [r4, #16]
 800d62a:	f1c6 0802 	rsb	r8, r6, #2
 800d62e:	4433      	add	r3, r6
 800d630:	6123      	str	r3, [r4, #16]
 800d632:	4641      	mov	r1, r8
 800d634:	4620      	mov	r0, r4
 800d636:	f000 fa05 	bl	800da44 <ucdr_check_final_buffer_behavior>
 800d63a:	2800      	cmp	r0, #0
 800d63c:	d03b      	beq.n	800d6b6 <ucdr_serialize_int16_t+0xc2>
 800d63e:	7d23      	ldrb	r3, [r4, #20]
 800d640:	2b01      	cmp	r3, #1
 800d642:	d04a      	beq.n	800d6da <ucdr_serialize_int16_t+0xe6>
 800d644:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d648:	702b      	strb	r3, [r5, #0]
 800d64a:	2e00      	cmp	r6, #0
 800d64c:	d040      	beq.n	800d6d0 <ucdr_serialize_int16_t+0xdc>
 800d64e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d652:	706b      	strb	r3, [r5, #1]
 800d654:	6923      	ldr	r3, [r4, #16]
 800d656:	68a2      	ldr	r2, [r4, #8]
 800d658:	7da0      	ldrb	r0, [r4, #22]
 800d65a:	3302      	adds	r3, #2
 800d65c:	1b9e      	subs	r6, r3, r6
 800d65e:	4442      	add	r2, r8
 800d660:	2302      	movs	r3, #2
 800d662:	f080 0001 	eor.w	r0, r0, #1
 800d666:	60a2      	str	r2, [r4, #8]
 800d668:	6126      	str	r6, [r4, #16]
 800d66a:	7563      	strb	r3, [r4, #21]
 800d66c:	b002      	add	sp, #8
 800d66e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d672:	2102      	movs	r1, #2
 800d674:	4620      	mov	r0, r4
 800d676:	f000 f9e5 	bl	800da44 <ucdr_check_final_buffer_behavior>
 800d67a:	b190      	cbz	r0, 800d6a2 <ucdr_serialize_int16_t+0xae>
 800d67c:	7d23      	ldrb	r3, [r4, #20]
 800d67e:	2b01      	cmp	r3, #1
 800d680:	68a3      	ldr	r3, [r4, #8]
 800d682:	d014      	beq.n	800d6ae <ucdr_serialize_int16_t+0xba>
 800d684:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d688:	701a      	strb	r2, [r3, #0]
 800d68a:	68a3      	ldr	r3, [r4, #8]
 800d68c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d690:	705a      	strb	r2, [r3, #1]
 800d692:	68a2      	ldr	r2, [r4, #8]
 800d694:	6923      	ldr	r3, [r4, #16]
 800d696:	3202      	adds	r2, #2
 800d698:	3302      	adds	r3, #2
 800d69a:	2102      	movs	r1, #2
 800d69c:	60a2      	str	r2, [r4, #8]
 800d69e:	6123      	str	r3, [r4, #16]
 800d6a0:	7561      	strb	r1, [r4, #21]
 800d6a2:	7da0      	ldrb	r0, [r4, #22]
 800d6a4:	f080 0001 	eor.w	r0, r0, #1
 800d6a8:	b002      	add	sp, #8
 800d6aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6ae:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d6b2:	801a      	strh	r2, [r3, #0]
 800d6b4:	e7ed      	b.n	800d692 <ucdr_serialize_int16_t+0x9e>
 800d6b6:	68a2      	ldr	r2, [r4, #8]
 800d6b8:	6923      	ldr	r3, [r4, #16]
 800d6ba:	7da0      	ldrb	r0, [r4, #22]
 800d6bc:	7567      	strb	r7, [r4, #21]
 800d6be:	1b92      	subs	r2, r2, r6
 800d6c0:	1b9b      	subs	r3, r3, r6
 800d6c2:	f080 0001 	eor.w	r0, r0, #1
 800d6c6:	60a2      	str	r2, [r4, #8]
 800d6c8:	6123      	str	r3, [r4, #16]
 800d6ca:	b002      	add	sp, #8
 800d6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6d0:	68a3      	ldr	r3, [r4, #8]
 800d6d2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d6d6:	701a      	strb	r2, [r3, #0]
 800d6d8:	e7bc      	b.n	800d654 <ucdr_serialize_int16_t+0x60>
 800d6da:	4628      	mov	r0, r5
 800d6dc:	f10d 0506 	add.w	r5, sp, #6
 800d6e0:	4629      	mov	r1, r5
 800d6e2:	4632      	mov	r2, r6
 800d6e4:	f009 fd57 	bl	8017196 <memcpy>
 800d6e8:	68a0      	ldr	r0, [r4, #8]
 800d6ea:	4642      	mov	r2, r8
 800d6ec:	19a9      	adds	r1, r5, r6
 800d6ee:	f009 fd52 	bl	8017196 <memcpy>
 800d6f2:	e7af      	b.n	800d654 <ucdr_serialize_int16_t+0x60>

0800d6f4 <ucdr_deserialize_int16_t>:
 800d6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6f8:	460d      	mov	r5, r1
 800d6fa:	2102      	movs	r1, #2
 800d6fc:	4604      	mov	r4, r0
 800d6fe:	f000 f9f5 	bl	800daec <ucdr_buffer_alignment>
 800d702:	4601      	mov	r1, r0
 800d704:	4620      	mov	r0, r4
 800d706:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d70a:	f000 fa33 	bl	800db74 <ucdr_advance_buffer>
 800d70e:	2102      	movs	r1, #2
 800d710:	4620      	mov	r0, r4
 800d712:	f000 f98b 	bl	800da2c <ucdr_check_buffer_available_for>
 800d716:	bb60      	cbnz	r0, 800d772 <ucdr_deserialize_int16_t+0x7e>
 800d718:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d71c:	42be      	cmp	r6, r7
 800d71e:	d923      	bls.n	800d768 <ucdr_deserialize_int16_t+0x74>
 800d720:	6923      	ldr	r3, [r4, #16]
 800d722:	60a6      	str	r6, [r4, #8]
 800d724:	1bf6      	subs	r6, r6, r7
 800d726:	4433      	add	r3, r6
 800d728:	f1c6 0902 	rsb	r9, r6, #2
 800d72c:	6123      	str	r3, [r4, #16]
 800d72e:	4649      	mov	r1, r9
 800d730:	4620      	mov	r0, r4
 800d732:	f000 f987 	bl	800da44 <ucdr_check_final_buffer_behavior>
 800d736:	2800      	cmp	r0, #0
 800d738:	d034      	beq.n	800d7a4 <ucdr_deserialize_int16_t+0xb0>
 800d73a:	7d23      	ldrb	r3, [r4, #20]
 800d73c:	2b01      	cmp	r3, #1
 800d73e:	d042      	beq.n	800d7c6 <ucdr_deserialize_int16_t+0xd2>
 800d740:	787b      	ldrb	r3, [r7, #1]
 800d742:	702b      	strb	r3, [r5, #0]
 800d744:	2e00      	cmp	r6, #0
 800d746:	d03a      	beq.n	800d7be <ucdr_deserialize_int16_t+0xca>
 800d748:	783b      	ldrb	r3, [r7, #0]
 800d74a:	706b      	strb	r3, [r5, #1]
 800d74c:	6923      	ldr	r3, [r4, #16]
 800d74e:	68a2      	ldr	r2, [r4, #8]
 800d750:	7da0      	ldrb	r0, [r4, #22]
 800d752:	2102      	movs	r1, #2
 800d754:	3302      	adds	r3, #2
 800d756:	444a      	add	r2, r9
 800d758:	1b9b      	subs	r3, r3, r6
 800d75a:	7561      	strb	r1, [r4, #21]
 800d75c:	60a2      	str	r2, [r4, #8]
 800d75e:	6123      	str	r3, [r4, #16]
 800d760:	f080 0001 	eor.w	r0, r0, #1
 800d764:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d768:	2102      	movs	r1, #2
 800d76a:	4620      	mov	r0, r4
 800d76c:	f000 f96a 	bl	800da44 <ucdr_check_final_buffer_behavior>
 800d770:	b180      	cbz	r0, 800d794 <ucdr_deserialize_int16_t+0xa0>
 800d772:	7d23      	ldrb	r3, [r4, #20]
 800d774:	2b01      	cmp	r3, #1
 800d776:	68a3      	ldr	r3, [r4, #8]
 800d778:	d011      	beq.n	800d79e <ucdr_deserialize_int16_t+0xaa>
 800d77a:	785b      	ldrb	r3, [r3, #1]
 800d77c:	702b      	strb	r3, [r5, #0]
 800d77e:	68a3      	ldr	r3, [r4, #8]
 800d780:	781b      	ldrb	r3, [r3, #0]
 800d782:	706b      	strb	r3, [r5, #1]
 800d784:	68a2      	ldr	r2, [r4, #8]
 800d786:	6923      	ldr	r3, [r4, #16]
 800d788:	3202      	adds	r2, #2
 800d78a:	3302      	adds	r3, #2
 800d78c:	2102      	movs	r1, #2
 800d78e:	60a2      	str	r2, [r4, #8]
 800d790:	6123      	str	r3, [r4, #16]
 800d792:	7561      	strb	r1, [r4, #21]
 800d794:	7da0      	ldrb	r0, [r4, #22]
 800d796:	f080 0001 	eor.w	r0, r0, #1
 800d79a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d79e:	881b      	ldrh	r3, [r3, #0]
 800d7a0:	802b      	strh	r3, [r5, #0]
 800d7a2:	e7ef      	b.n	800d784 <ucdr_deserialize_int16_t+0x90>
 800d7a4:	68a2      	ldr	r2, [r4, #8]
 800d7a6:	6923      	ldr	r3, [r4, #16]
 800d7a8:	7da0      	ldrb	r0, [r4, #22]
 800d7aa:	f884 8015 	strb.w	r8, [r4, #21]
 800d7ae:	1b92      	subs	r2, r2, r6
 800d7b0:	1b9b      	subs	r3, r3, r6
 800d7b2:	60a2      	str	r2, [r4, #8]
 800d7b4:	6123      	str	r3, [r4, #16]
 800d7b6:	f080 0001 	eor.w	r0, r0, #1
 800d7ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7be:	68a3      	ldr	r3, [r4, #8]
 800d7c0:	781b      	ldrb	r3, [r3, #0]
 800d7c2:	706b      	strb	r3, [r5, #1]
 800d7c4:	e7c2      	b.n	800d74c <ucdr_deserialize_int16_t+0x58>
 800d7c6:	4639      	mov	r1, r7
 800d7c8:	4632      	mov	r2, r6
 800d7ca:	4628      	mov	r0, r5
 800d7cc:	f009 fce3 	bl	8017196 <memcpy>
 800d7d0:	68a1      	ldr	r1, [r4, #8]
 800d7d2:	464a      	mov	r2, r9
 800d7d4:	19a8      	adds	r0, r5, r6
 800d7d6:	f009 fcde 	bl	8017196 <memcpy>
 800d7da:	e7b7      	b.n	800d74c <ucdr_deserialize_int16_t+0x58>

0800d7dc <ucdr_serialize_int32_t>:
 800d7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7e0:	b082      	sub	sp, #8
 800d7e2:	4604      	mov	r4, r0
 800d7e4:	9101      	str	r1, [sp, #4]
 800d7e6:	2104      	movs	r1, #4
 800d7e8:	f000 f980 	bl	800daec <ucdr_buffer_alignment>
 800d7ec:	4601      	mov	r1, r0
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	7d67      	ldrb	r7, [r4, #21]
 800d7f2:	f000 f9bf 	bl	800db74 <ucdr_advance_buffer>
 800d7f6:	2104      	movs	r1, #4
 800d7f8:	4620      	mov	r0, r4
 800d7fa:	f000 f917 	bl	800da2c <ucdr_check_buffer_available_for>
 800d7fe:	2800      	cmp	r0, #0
 800d800:	d139      	bne.n	800d876 <ucdr_serialize_int32_t+0x9a>
 800d802:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d806:	42ab      	cmp	r3, r5
 800d808:	d930      	bls.n	800d86c <ucdr_serialize_int32_t+0x90>
 800d80a:	1b5e      	subs	r6, r3, r5
 800d80c:	60a3      	str	r3, [r4, #8]
 800d80e:	6923      	ldr	r3, [r4, #16]
 800d810:	f1c6 0804 	rsb	r8, r6, #4
 800d814:	4433      	add	r3, r6
 800d816:	6123      	str	r3, [r4, #16]
 800d818:	4641      	mov	r1, r8
 800d81a:	4620      	mov	r0, r4
 800d81c:	f000 f912 	bl	800da44 <ucdr_check_final_buffer_behavior>
 800d820:	2800      	cmp	r0, #0
 800d822:	d04c      	beq.n	800d8be <ucdr_serialize_int32_t+0xe2>
 800d824:	7d23      	ldrb	r3, [r4, #20]
 800d826:	2b01      	cmp	r3, #1
 800d828:	d063      	beq.n	800d8f2 <ucdr_serialize_int32_t+0x116>
 800d82a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d82e:	702b      	strb	r3, [r5, #0]
 800d830:	2e00      	cmp	r6, #0
 800d832:	d051      	beq.n	800d8d8 <ucdr_serialize_int32_t+0xfc>
 800d834:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d838:	706b      	strb	r3, [r5, #1]
 800d83a:	2e01      	cmp	r6, #1
 800d83c:	d050      	beq.n	800d8e0 <ucdr_serialize_int32_t+0x104>
 800d83e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d842:	70ab      	strb	r3, [r5, #2]
 800d844:	2e02      	cmp	r6, #2
 800d846:	d04f      	beq.n	800d8e8 <ucdr_serialize_int32_t+0x10c>
 800d848:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d84c:	70eb      	strb	r3, [r5, #3]
 800d84e:	6923      	ldr	r3, [r4, #16]
 800d850:	68a2      	ldr	r2, [r4, #8]
 800d852:	7da0      	ldrb	r0, [r4, #22]
 800d854:	3304      	adds	r3, #4
 800d856:	1b9e      	subs	r6, r3, r6
 800d858:	4442      	add	r2, r8
 800d85a:	2304      	movs	r3, #4
 800d85c:	f080 0001 	eor.w	r0, r0, #1
 800d860:	60a2      	str	r2, [r4, #8]
 800d862:	6126      	str	r6, [r4, #16]
 800d864:	7563      	strb	r3, [r4, #21]
 800d866:	b002      	add	sp, #8
 800d868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d86c:	2104      	movs	r1, #4
 800d86e:	4620      	mov	r0, r4
 800d870:	f000 f8e8 	bl	800da44 <ucdr_check_final_buffer_behavior>
 800d874:	b1d0      	cbz	r0, 800d8ac <ucdr_serialize_int32_t+0xd0>
 800d876:	7d23      	ldrb	r3, [r4, #20]
 800d878:	2b01      	cmp	r3, #1
 800d87a:	68a3      	ldr	r3, [r4, #8]
 800d87c:	d01c      	beq.n	800d8b8 <ucdr_serialize_int32_t+0xdc>
 800d87e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d882:	701a      	strb	r2, [r3, #0]
 800d884:	68a3      	ldr	r3, [r4, #8]
 800d886:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d88a:	705a      	strb	r2, [r3, #1]
 800d88c:	68a3      	ldr	r3, [r4, #8]
 800d88e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d892:	709a      	strb	r2, [r3, #2]
 800d894:	68a3      	ldr	r3, [r4, #8]
 800d896:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d89a:	70da      	strb	r2, [r3, #3]
 800d89c:	68a2      	ldr	r2, [r4, #8]
 800d89e:	6923      	ldr	r3, [r4, #16]
 800d8a0:	3204      	adds	r2, #4
 800d8a2:	3304      	adds	r3, #4
 800d8a4:	2104      	movs	r1, #4
 800d8a6:	60a2      	str	r2, [r4, #8]
 800d8a8:	6123      	str	r3, [r4, #16]
 800d8aa:	7561      	strb	r1, [r4, #21]
 800d8ac:	7da0      	ldrb	r0, [r4, #22]
 800d8ae:	f080 0001 	eor.w	r0, r0, #1
 800d8b2:	b002      	add	sp, #8
 800d8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8b8:	9a01      	ldr	r2, [sp, #4]
 800d8ba:	601a      	str	r2, [r3, #0]
 800d8bc:	e7ee      	b.n	800d89c <ucdr_serialize_int32_t+0xc0>
 800d8be:	68a2      	ldr	r2, [r4, #8]
 800d8c0:	6923      	ldr	r3, [r4, #16]
 800d8c2:	7da0      	ldrb	r0, [r4, #22]
 800d8c4:	7567      	strb	r7, [r4, #21]
 800d8c6:	1b92      	subs	r2, r2, r6
 800d8c8:	1b9b      	subs	r3, r3, r6
 800d8ca:	f080 0001 	eor.w	r0, r0, #1
 800d8ce:	60a2      	str	r2, [r4, #8]
 800d8d0:	6123      	str	r3, [r4, #16]
 800d8d2:	b002      	add	sp, #8
 800d8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8d8:	68a3      	ldr	r3, [r4, #8]
 800d8da:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d8de:	701a      	strb	r2, [r3, #0]
 800d8e0:	68a3      	ldr	r3, [r4, #8]
 800d8e2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d8e6:	701a      	strb	r2, [r3, #0]
 800d8e8:	68a3      	ldr	r3, [r4, #8]
 800d8ea:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d8ee:	701a      	strb	r2, [r3, #0]
 800d8f0:	e7ad      	b.n	800d84e <ucdr_serialize_int32_t+0x72>
 800d8f2:	4628      	mov	r0, r5
 800d8f4:	ad01      	add	r5, sp, #4
 800d8f6:	4629      	mov	r1, r5
 800d8f8:	4632      	mov	r2, r6
 800d8fa:	f009 fc4c 	bl	8017196 <memcpy>
 800d8fe:	68a0      	ldr	r0, [r4, #8]
 800d900:	4642      	mov	r2, r8
 800d902:	19a9      	adds	r1, r5, r6
 800d904:	f009 fc47 	bl	8017196 <memcpy>
 800d908:	e7a1      	b.n	800d84e <ucdr_serialize_int32_t+0x72>
 800d90a:	bf00      	nop

0800d90c <ucdr_deserialize_int32_t>:
 800d90c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d910:	460d      	mov	r5, r1
 800d912:	2104      	movs	r1, #4
 800d914:	4604      	mov	r4, r0
 800d916:	f000 f8e9 	bl	800daec <ucdr_buffer_alignment>
 800d91a:	4601      	mov	r1, r0
 800d91c:	4620      	mov	r0, r4
 800d91e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d922:	f000 f927 	bl	800db74 <ucdr_advance_buffer>
 800d926:	2104      	movs	r1, #4
 800d928:	4620      	mov	r0, r4
 800d92a:	f000 f87f 	bl	800da2c <ucdr_check_buffer_available_for>
 800d92e:	2800      	cmp	r0, #0
 800d930:	d138      	bne.n	800d9a4 <ucdr_deserialize_int32_t+0x98>
 800d932:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d936:	42b7      	cmp	r7, r6
 800d938:	d92f      	bls.n	800d99a <ucdr_deserialize_int32_t+0x8e>
 800d93a:	6923      	ldr	r3, [r4, #16]
 800d93c:	60a7      	str	r7, [r4, #8]
 800d93e:	1bbf      	subs	r7, r7, r6
 800d940:	443b      	add	r3, r7
 800d942:	f1c7 0904 	rsb	r9, r7, #4
 800d946:	6123      	str	r3, [r4, #16]
 800d948:	4649      	mov	r1, r9
 800d94a:	4620      	mov	r0, r4
 800d94c:	f000 f87a 	bl	800da44 <ucdr_check_final_buffer_behavior>
 800d950:	2800      	cmp	r0, #0
 800d952:	d046      	beq.n	800d9e2 <ucdr_deserialize_int32_t+0xd6>
 800d954:	7d23      	ldrb	r3, [r4, #20]
 800d956:	2b01      	cmp	r3, #1
 800d958:	d05c      	beq.n	800da14 <ucdr_deserialize_int32_t+0x108>
 800d95a:	78f3      	ldrb	r3, [r6, #3]
 800d95c:	702b      	strb	r3, [r5, #0]
 800d95e:	2f00      	cmp	r7, #0
 800d960:	d04c      	beq.n	800d9fc <ucdr_deserialize_int32_t+0xf0>
 800d962:	78b3      	ldrb	r3, [r6, #2]
 800d964:	706b      	strb	r3, [r5, #1]
 800d966:	2f01      	cmp	r7, #1
 800d968:	f105 0302 	add.w	r3, r5, #2
 800d96c:	d04a      	beq.n	800da04 <ucdr_deserialize_int32_t+0xf8>
 800d96e:	7873      	ldrb	r3, [r6, #1]
 800d970:	70ab      	strb	r3, [r5, #2]
 800d972:	2f02      	cmp	r7, #2
 800d974:	f105 0303 	add.w	r3, r5, #3
 800d978:	d048      	beq.n	800da0c <ucdr_deserialize_int32_t+0x100>
 800d97a:	7833      	ldrb	r3, [r6, #0]
 800d97c:	70eb      	strb	r3, [r5, #3]
 800d97e:	6923      	ldr	r3, [r4, #16]
 800d980:	68a2      	ldr	r2, [r4, #8]
 800d982:	7da0      	ldrb	r0, [r4, #22]
 800d984:	2104      	movs	r1, #4
 800d986:	3304      	adds	r3, #4
 800d988:	444a      	add	r2, r9
 800d98a:	1bdb      	subs	r3, r3, r7
 800d98c:	7561      	strb	r1, [r4, #21]
 800d98e:	60a2      	str	r2, [r4, #8]
 800d990:	6123      	str	r3, [r4, #16]
 800d992:	f080 0001 	eor.w	r0, r0, #1
 800d996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d99a:	2104      	movs	r1, #4
 800d99c:	4620      	mov	r0, r4
 800d99e:	f000 f851 	bl	800da44 <ucdr_check_final_buffer_behavior>
 800d9a2:	b1b0      	cbz	r0, 800d9d2 <ucdr_deserialize_int32_t+0xc6>
 800d9a4:	7d23      	ldrb	r3, [r4, #20]
 800d9a6:	2b01      	cmp	r3, #1
 800d9a8:	68a3      	ldr	r3, [r4, #8]
 800d9aa:	d017      	beq.n	800d9dc <ucdr_deserialize_int32_t+0xd0>
 800d9ac:	78db      	ldrb	r3, [r3, #3]
 800d9ae:	702b      	strb	r3, [r5, #0]
 800d9b0:	68a3      	ldr	r3, [r4, #8]
 800d9b2:	789b      	ldrb	r3, [r3, #2]
 800d9b4:	706b      	strb	r3, [r5, #1]
 800d9b6:	68a3      	ldr	r3, [r4, #8]
 800d9b8:	785b      	ldrb	r3, [r3, #1]
 800d9ba:	70ab      	strb	r3, [r5, #2]
 800d9bc:	68a3      	ldr	r3, [r4, #8]
 800d9be:	781b      	ldrb	r3, [r3, #0]
 800d9c0:	70eb      	strb	r3, [r5, #3]
 800d9c2:	68a2      	ldr	r2, [r4, #8]
 800d9c4:	6923      	ldr	r3, [r4, #16]
 800d9c6:	3204      	adds	r2, #4
 800d9c8:	3304      	adds	r3, #4
 800d9ca:	2104      	movs	r1, #4
 800d9cc:	60a2      	str	r2, [r4, #8]
 800d9ce:	6123      	str	r3, [r4, #16]
 800d9d0:	7561      	strb	r1, [r4, #21]
 800d9d2:	7da0      	ldrb	r0, [r4, #22]
 800d9d4:	f080 0001 	eor.w	r0, r0, #1
 800d9d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	602b      	str	r3, [r5, #0]
 800d9e0:	e7ef      	b.n	800d9c2 <ucdr_deserialize_int32_t+0xb6>
 800d9e2:	68a2      	ldr	r2, [r4, #8]
 800d9e4:	6923      	ldr	r3, [r4, #16]
 800d9e6:	7da0      	ldrb	r0, [r4, #22]
 800d9e8:	f884 8015 	strb.w	r8, [r4, #21]
 800d9ec:	1bd2      	subs	r2, r2, r7
 800d9ee:	1bdb      	subs	r3, r3, r7
 800d9f0:	60a2      	str	r2, [r4, #8]
 800d9f2:	6123      	str	r3, [r4, #16]
 800d9f4:	f080 0001 	eor.w	r0, r0, #1
 800d9f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9fc:	68a3      	ldr	r3, [r4, #8]
 800d9fe:	789b      	ldrb	r3, [r3, #2]
 800da00:	706b      	strb	r3, [r5, #1]
 800da02:	1cab      	adds	r3, r5, #2
 800da04:	68a2      	ldr	r2, [r4, #8]
 800da06:	7852      	ldrb	r2, [r2, #1]
 800da08:	f803 2b01 	strb.w	r2, [r3], #1
 800da0c:	68a2      	ldr	r2, [r4, #8]
 800da0e:	7812      	ldrb	r2, [r2, #0]
 800da10:	701a      	strb	r2, [r3, #0]
 800da12:	e7b4      	b.n	800d97e <ucdr_deserialize_int32_t+0x72>
 800da14:	4631      	mov	r1, r6
 800da16:	463a      	mov	r2, r7
 800da18:	4628      	mov	r0, r5
 800da1a:	f009 fbbc 	bl	8017196 <memcpy>
 800da1e:	68a1      	ldr	r1, [r4, #8]
 800da20:	464a      	mov	r2, r9
 800da22:	19e8      	adds	r0, r5, r7
 800da24:	f009 fbb7 	bl	8017196 <memcpy>
 800da28:	e7a9      	b.n	800d97e <ucdr_deserialize_int32_t+0x72>
 800da2a:	bf00      	nop

0800da2c <ucdr_check_buffer_available_for>:
 800da2c:	7d83      	ldrb	r3, [r0, #22]
 800da2e:	b93b      	cbnz	r3, 800da40 <ucdr_check_buffer_available_for+0x14>
 800da30:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800da34:	4419      	add	r1, r3
 800da36:	4288      	cmp	r0, r1
 800da38:	bf34      	ite	cc
 800da3a:	2000      	movcc	r0, #0
 800da3c:	2001      	movcs	r0, #1
 800da3e:	4770      	bx	lr
 800da40:	2000      	movs	r0, #0
 800da42:	4770      	bx	lr

0800da44 <ucdr_check_final_buffer_behavior>:
 800da44:	7d83      	ldrb	r3, [r0, #22]
 800da46:	b943      	cbnz	r3, 800da5a <ucdr_check_final_buffer_behavior+0x16>
 800da48:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800da4c:	4291      	cmp	r1, r2
 800da4e:	b510      	push	{r4, lr}
 800da50:	4604      	mov	r4, r0
 800da52:	d205      	bcs.n	800da60 <ucdr_check_final_buffer_behavior+0x1c>
 800da54:	2301      	movs	r3, #1
 800da56:	4618      	mov	r0, r3
 800da58:	bd10      	pop	{r4, pc}
 800da5a:	2300      	movs	r3, #0
 800da5c:	4618      	mov	r0, r3
 800da5e:	4770      	bx	lr
 800da60:	6982      	ldr	r2, [r0, #24]
 800da62:	b13a      	cbz	r2, 800da74 <ucdr_check_final_buffer_behavior+0x30>
 800da64:	69c1      	ldr	r1, [r0, #28]
 800da66:	4790      	blx	r2
 800da68:	f080 0301 	eor.w	r3, r0, #1
 800da6c:	b2db      	uxtb	r3, r3
 800da6e:	75a0      	strb	r0, [r4, #22]
 800da70:	4618      	mov	r0, r3
 800da72:	bd10      	pop	{r4, pc}
 800da74:	2001      	movs	r0, #1
 800da76:	75a0      	strb	r0, [r4, #22]
 800da78:	e7fa      	b.n	800da70 <ucdr_check_final_buffer_behavior+0x2c>
 800da7a:	bf00      	nop

0800da7c <ucdr_set_on_full_buffer_callback>:
 800da7c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800da80:	4770      	bx	lr
 800da82:	bf00      	nop

0800da84 <ucdr_init_buffer_origin_offset_endian>:
 800da84:	b410      	push	{r4}
 800da86:	9c01      	ldr	r4, [sp, #4]
 800da88:	6001      	str	r1, [r0, #0]
 800da8a:	440a      	add	r2, r1
 800da8c:	6042      	str	r2, [r0, #4]
 800da8e:	190a      	adds	r2, r1, r4
 800da90:	441c      	add	r4, r3
 800da92:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800da96:	6082      	str	r2, [r0, #8]
 800da98:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800da9c:	7503      	strb	r3, [r0, #20]
 800da9e:	2200      	movs	r2, #0
 800daa0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800daa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800daa8:	7542      	strb	r2, [r0, #21]
 800daaa:	7582      	strb	r2, [r0, #22]
 800daac:	4770      	bx	lr
 800daae:	bf00      	nop

0800dab0 <ucdr_init_buffer_origin_offset>:
 800dab0:	b510      	push	{r4, lr}
 800dab2:	b082      	sub	sp, #8
 800dab4:	9c04      	ldr	r4, [sp, #16]
 800dab6:	9400      	str	r4, [sp, #0]
 800dab8:	2401      	movs	r4, #1
 800daba:	9401      	str	r4, [sp, #4]
 800dabc:	f7ff ffe2 	bl	800da84 <ucdr_init_buffer_origin_offset_endian>
 800dac0:	b002      	add	sp, #8
 800dac2:	bd10      	pop	{r4, pc}

0800dac4 <ucdr_init_buffer_origin>:
 800dac4:	b510      	push	{r4, lr}
 800dac6:	b082      	sub	sp, #8
 800dac8:	2400      	movs	r4, #0
 800daca:	9400      	str	r4, [sp, #0]
 800dacc:	f7ff fff0 	bl	800dab0 <ucdr_init_buffer_origin_offset>
 800dad0:	b002      	add	sp, #8
 800dad2:	bd10      	pop	{r4, pc}

0800dad4 <ucdr_init_buffer>:
 800dad4:	2300      	movs	r3, #0
 800dad6:	f7ff bff5 	b.w	800dac4 <ucdr_init_buffer_origin>
 800dada:	bf00      	nop

0800dadc <ucdr_alignment>:
 800dadc:	fbb0 f3f1 	udiv	r3, r0, r1
 800dae0:	fb03 0011 	mls	r0, r3, r1, r0
 800dae4:	1a08      	subs	r0, r1, r0
 800dae6:	3901      	subs	r1, #1
 800dae8:	4008      	ands	r0, r1
 800daea:	4770      	bx	lr

0800daec <ucdr_buffer_alignment>:
 800daec:	7d43      	ldrb	r3, [r0, #21]
 800daee:	428b      	cmp	r3, r1
 800daf0:	d208      	bcs.n	800db04 <ucdr_buffer_alignment+0x18>
 800daf2:	6900      	ldr	r0, [r0, #16]
 800daf4:	fbb0 f3f1 	udiv	r3, r0, r1
 800daf8:	fb01 0013 	mls	r0, r1, r3, r0
 800dafc:	1a08      	subs	r0, r1, r0
 800dafe:	3901      	subs	r1, #1
 800db00:	4008      	ands	r0, r1
 800db02:	4770      	bx	lr
 800db04:	2000      	movs	r0, #0
 800db06:	4770      	bx	lr

0800db08 <ucdr_align_to>:
 800db08:	b538      	push	{r3, r4, r5, lr}
 800db0a:	4604      	mov	r4, r0
 800db0c:	460d      	mov	r5, r1
 800db0e:	f7ff ffed 	bl	800daec <ucdr_buffer_alignment>
 800db12:	68a3      	ldr	r3, [r4, #8]
 800db14:	6921      	ldr	r1, [r4, #16]
 800db16:	7565      	strb	r5, [r4, #21]
 800db18:	181a      	adds	r2, r3, r0
 800db1a:	6863      	ldr	r3, [r4, #4]
 800db1c:	4293      	cmp	r3, r2
 800db1e:	4408      	add	r0, r1
 800db20:	bf28      	it	cs
 800db22:	4613      	movcs	r3, r2
 800db24:	6120      	str	r0, [r4, #16]
 800db26:	60a3      	str	r3, [r4, #8]
 800db28:	bd38      	pop	{r3, r4, r5, pc}
 800db2a:	bf00      	nop

0800db2c <ucdr_buffer_length>:
 800db2c:	6882      	ldr	r2, [r0, #8]
 800db2e:	6800      	ldr	r0, [r0, #0]
 800db30:	1a10      	subs	r0, r2, r0
 800db32:	4770      	bx	lr

0800db34 <ucdr_buffer_remaining>:
 800db34:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800db38:	1a10      	subs	r0, r2, r0
 800db3a:	4770      	bx	lr

0800db3c <ucdr_check_final_buffer_behavior_array>:
 800db3c:	b538      	push	{r3, r4, r5, lr}
 800db3e:	7d83      	ldrb	r3, [r0, #22]
 800db40:	b963      	cbnz	r3, 800db5c <ucdr_check_final_buffer_behavior_array+0x20>
 800db42:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800db46:	429a      	cmp	r2, r3
 800db48:	4604      	mov	r4, r0
 800db4a:	460d      	mov	r5, r1
 800db4c:	d308      	bcc.n	800db60 <ucdr_check_final_buffer_behavior_array+0x24>
 800db4e:	b139      	cbz	r1, 800db60 <ucdr_check_final_buffer_behavior_array+0x24>
 800db50:	6983      	ldr	r3, [r0, #24]
 800db52:	b163      	cbz	r3, 800db6e <ucdr_check_final_buffer_behavior_array+0x32>
 800db54:	69c1      	ldr	r1, [r0, #28]
 800db56:	4798      	blx	r3
 800db58:	75a0      	strb	r0, [r4, #22]
 800db5a:	b108      	cbz	r0, 800db60 <ucdr_check_final_buffer_behavior_array+0x24>
 800db5c:	2000      	movs	r0, #0
 800db5e:	bd38      	pop	{r3, r4, r5, pc}
 800db60:	4620      	mov	r0, r4
 800db62:	f7ff ffe7 	bl	800db34 <ucdr_buffer_remaining>
 800db66:	42a8      	cmp	r0, r5
 800db68:	bf28      	it	cs
 800db6a:	4628      	movcs	r0, r5
 800db6c:	bd38      	pop	{r3, r4, r5, pc}
 800db6e:	2301      	movs	r3, #1
 800db70:	7583      	strb	r3, [r0, #22]
 800db72:	e7f3      	b.n	800db5c <ucdr_check_final_buffer_behavior_array+0x20>

0800db74 <ucdr_advance_buffer>:
 800db74:	b538      	push	{r3, r4, r5, lr}
 800db76:	4604      	mov	r4, r0
 800db78:	460d      	mov	r5, r1
 800db7a:	f7ff ff57 	bl	800da2c <ucdr_check_buffer_available_for>
 800db7e:	b178      	cbz	r0, 800dba0 <ucdr_advance_buffer+0x2c>
 800db80:	6923      	ldr	r3, [r4, #16]
 800db82:	68a2      	ldr	r2, [r4, #8]
 800db84:	442b      	add	r3, r5
 800db86:	6123      	str	r3, [r4, #16]
 800db88:	2301      	movs	r3, #1
 800db8a:	442a      	add	r2, r5
 800db8c:	7563      	strb	r3, [r4, #21]
 800db8e:	60a2      	str	r2, [r4, #8]
 800db90:	bd38      	pop	{r3, r4, r5, pc}
 800db92:	68a2      	ldr	r2, [r4, #8]
 800db94:	6923      	ldr	r3, [r4, #16]
 800db96:	4402      	add	r2, r0
 800db98:	4403      	add	r3, r0
 800db9a:	1a2d      	subs	r5, r5, r0
 800db9c:	60a2      	str	r2, [r4, #8]
 800db9e:	6123      	str	r3, [r4, #16]
 800dba0:	4629      	mov	r1, r5
 800dba2:	2201      	movs	r2, #1
 800dba4:	4620      	mov	r0, r4
 800dba6:	f7ff ffc9 	bl	800db3c <ucdr_check_final_buffer_behavior_array>
 800dbaa:	2800      	cmp	r0, #0
 800dbac:	d1f1      	bne.n	800db92 <ucdr_advance_buffer+0x1e>
 800dbae:	2301      	movs	r3, #1
 800dbb0:	7563      	strb	r3, [r4, #21]
 800dbb2:	bd38      	pop	{r3, r4, r5, pc}

0800dbb4 <uxr_buffer_delete_entity>:
 800dbb4:	b510      	push	{r4, lr}
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	b08e      	sub	sp, #56	@ 0x38
 800dbba:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800dbbe:	2303      	movs	r3, #3
 800dbc0:	9300      	str	r3, [sp, #0]
 800dbc2:	2204      	movs	r2, #4
 800dbc4:	ab06      	add	r3, sp, #24
 800dbc6:	4604      	mov	r4, r0
 800dbc8:	9103      	str	r1, [sp, #12]
 800dbca:	f001 fa9f 	bl	800f10c <uxr_prepare_stream_to_write_submessage>
 800dbce:	b918      	cbnz	r0, 800dbd8 <uxr_buffer_delete_entity+0x24>
 800dbd0:	4604      	mov	r4, r0
 800dbd2:	4620      	mov	r0, r4
 800dbd4:	b00e      	add	sp, #56	@ 0x38
 800dbd6:	bd10      	pop	{r4, pc}
 800dbd8:	9902      	ldr	r1, [sp, #8]
 800dbda:	aa05      	add	r2, sp, #20
 800dbdc:	4620      	mov	r0, r4
 800dbde:	f001 fbcb 	bl	800f378 <uxr_init_base_object_request>
 800dbe2:	a905      	add	r1, sp, #20
 800dbe4:	4604      	mov	r4, r0
 800dbe6:	a806      	add	r0, sp, #24
 800dbe8:	f003 f84e 	bl	8010c88 <uxr_serialize_DELETE_Payload>
 800dbec:	4620      	mov	r0, r4
 800dbee:	b00e      	add	sp, #56	@ 0x38
 800dbf0:	bd10      	pop	{r4, pc}
 800dbf2:	bf00      	nop

0800dbf4 <uxr_common_create_entity>:
 800dbf4:	b510      	push	{r4, lr}
 800dbf6:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800dbfa:	b08c      	sub	sp, #48	@ 0x30
 800dbfc:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800dc00:	f1bc 0f01 	cmp.w	ip, #1
 800dc04:	bf0c      	ite	eq
 800dc06:	f003 0201 	andeq.w	r2, r3, #1
 800dc0a:	2200      	movne	r2, #0
 800dc0c:	330e      	adds	r3, #14
 800dc0e:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800dc12:	9101      	str	r1, [sp, #4]
 800dc14:	441a      	add	r2, r3
 800dc16:	2301      	movs	r3, #1
 800dc18:	9300      	str	r3, [sp, #0]
 800dc1a:	9903      	ldr	r1, [sp, #12]
 800dc1c:	ab04      	add	r3, sp, #16
 800dc1e:	b292      	uxth	r2, r2
 800dc20:	4604      	mov	r4, r0
 800dc22:	f001 fa73 	bl	800f10c <uxr_prepare_stream_to_write_submessage>
 800dc26:	b918      	cbnz	r0, 800dc30 <uxr_common_create_entity+0x3c>
 800dc28:	4604      	mov	r4, r0
 800dc2a:	4620      	mov	r0, r4
 800dc2c:	b00c      	add	sp, #48	@ 0x30
 800dc2e:	bd10      	pop	{r4, pc}
 800dc30:	9902      	ldr	r1, [sp, #8]
 800dc32:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800dc34:	4620      	mov	r0, r4
 800dc36:	f001 fb9f 	bl	800f378 <uxr_init_base_object_request>
 800dc3a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800dc3c:	4604      	mov	r4, r0
 800dc3e:	a804      	add	r0, sp, #16
 800dc40:	f002 ff7e 	bl	8010b40 <uxr_serialize_CREATE_Payload>
 800dc44:	4620      	mov	r0, r4
 800dc46:	b00c      	add	sp, #48	@ 0x30
 800dc48:	bd10      	pop	{r4, pc}
 800dc4a:	bf00      	nop

0800dc4c <uxr_buffer_create_participant_bin>:
 800dc4c:	b570      	push	{r4, r5, r6, lr}
 800dc4e:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800dc52:	ac11      	add	r4, sp, #68	@ 0x44
 800dc54:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800dc58:	2303      	movs	r3, #3
 800dc5a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800dc5e:	7223      	strb	r3, [r4, #8]
 800dc60:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800dc62:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800dc66:	2201      	movs	r2, #1
 800dc68:	2100      	movs	r1, #0
 800dc6a:	4605      	mov	r5, r0
 800dc6c:	7122      	strb	r2, [r4, #4]
 800dc6e:	f88d 1014 	strb.w	r1, [sp, #20]
 800dc72:	b1cb      	cbz	r3, 800dca8 <uxr_buffer_create_participant_bin+0x5c>
 800dc74:	f88d 201c 	strb.w	r2, [sp, #28]
 800dc78:	9308      	str	r3, [sp, #32]
 800dc7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dc7e:	a915      	add	r1, sp, #84	@ 0x54
 800dc80:	a809      	add	r0, sp, #36	@ 0x24
 800dc82:	f7ff ff27 	bl	800dad4 <ucdr_init_buffer>
 800dc86:	a905      	add	r1, sp, #20
 800dc88:	a809      	add	r0, sp, #36	@ 0x24
 800dc8a:	f002 fc17 	bl	80104bc <uxr_serialize_OBJK_DomainParticipant_Binary>
 800dc8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dc90:	9600      	str	r6, [sp, #0]
 800dc92:	9401      	str	r4, [sp, #4]
 800dc94:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800dc98:	60e3      	str	r3, [r4, #12]
 800dc9a:	4628      	mov	r0, r5
 800dc9c:	b29b      	uxth	r3, r3
 800dc9e:	f7ff ffa9 	bl	800dbf4 <uxr_common_create_entity>
 800dca2:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800dca6:	bd70      	pop	{r4, r5, r6, pc}
 800dca8:	f88d 301c 	strb.w	r3, [sp, #28]
 800dcac:	e7e5      	b.n	800dc7a <uxr_buffer_create_participant_bin+0x2e>
 800dcae:	bf00      	nop

0800dcb0 <uxr_buffer_create_topic_bin>:
 800dcb0:	b570      	push	{r4, r5, r6, lr}
 800dcb2:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800dcb6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800dcba:	9105      	str	r1, [sp, #20]
 800dcbc:	4605      	mov	r5, r0
 800dcbe:	a997      	add	r1, sp, #604	@ 0x25c
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	2302      	movs	r3, #2
 800dcc4:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800dcc8:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800dccc:	f000 f9b2 	bl	800e034 <uxr_object_id_to_raw>
 800dcd0:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800dcd2:	9306      	str	r3, [sp, #24]
 800dcd4:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800dcd6:	930a      	str	r3, [sp, #40]	@ 0x28
 800dcd8:	2303      	movs	r3, #3
 800dcda:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800dcde:	2301      	movs	r3, #1
 800dce0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dce4:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800dce8:	a917      	add	r1, sp, #92	@ 0x5c
 800dcea:	2300      	movs	r3, #0
 800dcec:	a80b      	add	r0, sp, #44	@ 0x2c
 800dcee:	f88d 301c 	strb.w	r3, [sp, #28]
 800dcf2:	f7ff feef 	bl	800dad4 <ucdr_init_buffer>
 800dcf6:	a906      	add	r1, sp, #24
 800dcf8:	a80b      	add	r0, sp, #44	@ 0x2c
 800dcfa:	f002 fc01 	bl	8010500 <uxr_serialize_OBJK_Topic_Binary>
 800dcfe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd00:	9316      	str	r3, [sp, #88]	@ 0x58
 800dd02:	ac13      	add	r4, sp, #76	@ 0x4c
 800dd04:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800dd08:	9600      	str	r6, [sp, #0]
 800dd0a:	9401      	str	r4, [sp, #4]
 800dd0c:	b29b      	uxth	r3, r3
 800dd0e:	4628      	mov	r0, r5
 800dd10:	f7ff ff70 	bl	800dbf4 <uxr_common_create_entity>
 800dd14:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800dd18:	bd70      	pop	{r4, r5, r6, pc}
 800dd1a:	bf00      	nop

0800dd1c <uxr_buffer_create_subscriber_bin>:
 800dd1c:	b570      	push	{r4, r5, r6, lr}
 800dd1e:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800dd22:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800dd26:	9105      	str	r1, [sp, #20]
 800dd28:	4605      	mov	r5, r0
 800dd2a:	a992      	add	r1, sp, #584	@ 0x248
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	2304      	movs	r3, #4
 800dd30:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800dd34:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800dd38:	f000 f97c 	bl	800e034 <uxr_object_id_to_raw>
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dd42:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800dd46:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800dd4a:	a912      	add	r1, sp, #72	@ 0x48
 800dd4c:	2303      	movs	r3, #3
 800dd4e:	a806      	add	r0, sp, #24
 800dd50:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800dd54:	f7ff febe 	bl	800dad4 <ucdr_init_buffer>
 800dd58:	a993      	add	r1, sp, #588	@ 0x24c
 800dd5a:	a806      	add	r0, sp, #24
 800dd5c:	f002 fc84 	bl	8010668 <uxr_serialize_OBJK_Subscriber_Binary>
 800dd60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd62:	9311      	str	r3, [sp, #68]	@ 0x44
 800dd64:	ac0e      	add	r4, sp, #56	@ 0x38
 800dd66:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800dd6a:	9600      	str	r6, [sp, #0]
 800dd6c:	9401      	str	r4, [sp, #4]
 800dd6e:	b29b      	uxth	r3, r3
 800dd70:	4628      	mov	r0, r5
 800dd72:	f7ff ff3f 	bl	800dbf4 <uxr_common_create_entity>
 800dd76:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800dd7a:	bd70      	pop	{r4, r5, r6, pc}

0800dd7c <uxr_buffer_create_datareader_bin>:
 800dd7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd80:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800dd84:	ac1f      	add	r4, sp, #124	@ 0x7c
 800dd86:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800dd8a:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800dd8e:	9105      	str	r1, [sp, #20]
 800dd90:	4606      	mov	r6, r0
 800dd92:	a9a3      	add	r1, sp, #652	@ 0x28c
 800dd94:	4618      	mov	r0, r3
 800dd96:	2306      	movs	r3, #6
 800dd98:	7123      	strb	r3, [r4, #4]
 800dd9a:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800dd9e:	2703      	movs	r7, #3
 800dda0:	f000 f948 	bl	800e034 <uxr_object_id_to_raw>
 800dda4:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800dda6:	7227      	strb	r7, [r4, #8]
 800dda8:	a90e      	add	r1, sp, #56	@ 0x38
 800ddaa:	f000 f943 	bl	800e034 <uxr_object_id_to_raw>
 800ddae:	2300      	movs	r3, #0
 800ddb0:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800ddb4:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800ddb8:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800ddbc:	3d00      	subs	r5, #0
 800ddbe:	bf18      	it	ne
 800ddc0:	2501      	movne	r5, #1
 800ddc2:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800ddc6:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800ddca:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800ddce:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800ddd2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800dddc:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800dde0:	bb8a      	cbnz	r2, 800de46 <uxr_buffer_create_datareader_bin+0xca>
 800dde2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800dde6:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800ddea:	f04f 0c13 	mov.w	ip, #19
 800ddee:	250b      	movs	r5, #11
 800ddf0:	2221      	movs	r2, #33	@ 0x21
 800ddf2:	2111      	movs	r1, #17
 800ddf4:	2009      	movs	r0, #9
 800ddf6:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800ddfa:	b923      	cbnz	r3, 800de06 <uxr_buffer_create_datareader_bin+0x8a>
 800ddfc:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800de00:	4672      	mov	r2, lr
 800de02:	4661      	mov	r1, ip
 800de04:	4628      	mov	r0, r5
 800de06:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800de0a:	2b01      	cmp	r3, #1
 800de0c:	d025      	beq.n	800de5a <uxr_buffer_create_datareader_bin+0xde>
 800de0e:	2b03      	cmp	r3, #3
 800de10:	d029      	beq.n	800de66 <uxr_buffer_create_datareader_bin+0xea>
 800de12:	b32b      	cbz	r3, 800de60 <uxr_buffer_create_datareader_bin+0xe4>
 800de14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800de18:	a923      	add	r1, sp, #140	@ 0x8c
 800de1a:	a806      	add	r0, sp, #24
 800de1c:	f7ff fe5a 	bl	800dad4 <ucdr_init_buffer>
 800de20:	a90e      	add	r1, sp, #56	@ 0x38
 800de22:	a806      	add	r0, sp, #24
 800de24:	f002 fc96 	bl	8010754 <uxr_serialize_OBJK_DataReader_Binary>
 800de28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de2a:	f8cd 8000 	str.w	r8, [sp]
 800de2e:	9401      	str	r4, [sp, #4]
 800de30:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800de34:	60e3      	str	r3, [r4, #12]
 800de36:	4630      	mov	r0, r6
 800de38:	b29b      	uxth	r3, r3
 800de3a:	f7ff fedb 	bl	800dbf4 <uxr_common_create_entity>
 800de3e:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800de42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de46:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800de4a:	f04f 0c12 	mov.w	ip, #18
 800de4e:	250a      	movs	r5, #10
 800de50:	2220      	movs	r2, #32
 800de52:	2110      	movs	r1, #16
 800de54:	2008      	movs	r0, #8
 800de56:	2702      	movs	r7, #2
 800de58:	e7cd      	b.n	800ddf6 <uxr_buffer_create_datareader_bin+0x7a>
 800de5a:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800de5e:	e7d9      	b.n	800de14 <uxr_buffer_create_datareader_bin+0x98>
 800de60:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800de64:	e7d6      	b.n	800de14 <uxr_buffer_create_datareader_bin+0x98>
 800de66:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800de6a:	e7d3      	b.n	800de14 <uxr_buffer_create_datareader_bin+0x98>

0800de6c <get_custom_error>:
 800de6c:	4b01      	ldr	r3, [pc, #4]	@ (800de74 <get_custom_error+0x8>)
 800de6e:	7818      	ldrb	r0, [r3, #0]
 800de70:	4770      	bx	lr
 800de72:	bf00      	nop
 800de74:	2000ab3c 	.word	0x2000ab3c

0800de78 <recv_custom_msg>:
 800de78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de7c:	4693      	mov	fp, r2
 800de7e:	b089      	sub	sp, #36	@ 0x24
 800de80:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800de84:	9305      	str	r3, [sp, #20]
 800de86:	468a      	mov	sl, r1
 800de88:	2100      	movs	r1, #0
 800de8a:	4604      	mov	r4, r0
 800de8c:	f88d 101e 	strb.w	r1, [sp, #30]
 800de90:	b322      	cbz	r2, 800dedc <recv_custom_msg+0x64>
 800de92:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800de96:	f10d 081f 	add.w	r8, sp, #31
 800de9a:	af05      	add	r7, sp, #20
 800de9c:	f10d 061e 	add.w	r6, sp, #30
 800dea0:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800dea4:	e002      	b.n	800deac <recv_custom_msg+0x34>
 800dea6:	9b05      	ldr	r3, [sp, #20]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	dd0f      	ble.n	800decc <recv_custom_msg+0x54>
 800deac:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800deb0:	4623      	mov	r3, r4
 800deb2:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800deb6:	e9cd 5600 	strd	r5, r6, [sp]
 800deba:	4622      	mov	r2, r4
 800debc:	4648      	mov	r0, r9
 800debe:	f001 fc89 	bl	800f7d4 <uxr_read_framed_msg>
 800dec2:	2800      	cmp	r0, #0
 800dec4:	d0ef      	beq.n	800dea6 <recv_custom_msg+0x2e>
 800dec6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800deca:	b1b3      	cbz	r3, 800defa <recv_custom_msg+0x82>
 800decc:	4b0f      	ldr	r3, [pc, #60]	@ (800df0c <recv_custom_msg+0x94>)
 800dece:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800ded2:	701a      	strb	r2, [r3, #0]
 800ded4:	2000      	movs	r0, #0
 800ded6:	b009      	add	sp, #36	@ 0x24
 800ded8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dedc:	f10d 021f 	add.w	r2, sp, #31
 800dee0:	9200      	str	r2, [sp, #0]
 800dee2:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800dee6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800deea:	4601      	mov	r1, r0
 800deec:	47a8      	blx	r5
 800deee:	2800      	cmp	r0, #0
 800def0:	d0ec      	beq.n	800decc <recv_custom_msg+0x54>
 800def2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d1e8      	bne.n	800decc <recv_custom_msg+0x54>
 800defa:	f8cb 0000 	str.w	r0, [fp]
 800defe:	2001      	movs	r0, #1
 800df00:	f8ca 4000 	str.w	r4, [sl]
 800df04:	b009      	add	sp, #36	@ 0x24
 800df06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df0a:	bf00      	nop
 800df0c:	2000ab3c 	.word	0x2000ab3c

0800df10 <send_custom_msg>:
 800df10:	b530      	push	{r4, r5, lr}
 800df12:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800df16:	b087      	sub	sp, #28
 800df18:	4615      	mov	r5, r2
 800df1a:	b974      	cbnz	r4, 800df3a <send_custom_msg+0x2a>
 800df1c:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800df20:	f10d 0317 	add.w	r3, sp, #23
 800df24:	47a0      	blx	r4
 800df26:	b108      	cbz	r0, 800df2c <send_custom_msg+0x1c>
 800df28:	42a8      	cmp	r0, r5
 800df2a:	d015      	beq.n	800df58 <send_custom_msg+0x48>
 800df2c:	4b0c      	ldr	r3, [pc, #48]	@ (800df60 <send_custom_msg+0x50>)
 800df2e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800df32:	701a      	strb	r2, [r3, #0]
 800df34:	2000      	movs	r0, #0
 800df36:	b007      	add	sp, #28
 800df38:	bd30      	pop	{r4, r5, pc}
 800df3a:	460b      	mov	r3, r1
 800df3c:	2200      	movs	r2, #0
 800df3e:	f10d 0117 	add.w	r1, sp, #23
 800df42:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800df46:	4602      	mov	r2, r0
 800df48:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800df4c:	9500      	str	r5, [sp, #0]
 800df4e:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800df52:	f001 fa47 	bl	800f3e4 <uxr_write_framed_msg>
 800df56:	e7e6      	b.n	800df26 <send_custom_msg+0x16>
 800df58:	2001      	movs	r0, #1
 800df5a:	b007      	add	sp, #28
 800df5c:	bd30      	pop	{r4, r5, pc}
 800df5e:	bf00      	nop
 800df60:	2000ab3c 	.word	0x2000ab3c

0800df64 <uxr_set_custom_transport_callbacks>:
 800df64:	b410      	push	{r4}
 800df66:	9c01      	ldr	r4, [sp, #4]
 800df68:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800df6c:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800df70:	9b02      	ldr	r3, [sp, #8]
 800df72:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800df76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df7a:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800df7e:	4770      	bx	lr

0800df80 <uxr_init_custom_transport>:
 800df80:	b538      	push	{r3, r4, r5, lr}
 800df82:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800df86:	b303      	cbz	r3, 800dfca <uxr_init_custom_transport+0x4a>
 800df88:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800df8c:	4604      	mov	r4, r0
 800df8e:	b1e2      	cbz	r2, 800dfca <uxr_init_custom_transport+0x4a>
 800df90:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800df94:	b1ca      	cbz	r2, 800dfca <uxr_init_custom_transport+0x4a>
 800df96:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800df9a:	b1b2      	cbz	r2, 800dfca <uxr_init_custom_transport+0x4a>
 800df9c:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800dfa0:	4798      	blx	r3
 800dfa2:	4605      	mov	r5, r0
 800dfa4:	b188      	cbz	r0, 800dfca <uxr_init_custom_transport+0x4a>
 800dfa6:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800dfaa:	b98b      	cbnz	r3, 800dfd0 <uxr_init_custom_transport+0x50>
 800dfac:	490b      	ldr	r1, [pc, #44]	@ (800dfdc <uxr_init_custom_transport+0x5c>)
 800dfae:	4b0c      	ldr	r3, [pc, #48]	@ (800dfe0 <uxr_init_custom_transport+0x60>)
 800dfb0:	4a0c      	ldr	r2, [pc, #48]	@ (800dfe4 <uxr_init_custom_transport+0x64>)
 800dfb2:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800dfb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dfba:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800dfbe:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800dfc2:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800dfc6:	4628      	mov	r0, r5
 800dfc8:	bd38      	pop	{r3, r4, r5, pc}
 800dfca:	2500      	movs	r5, #0
 800dfcc:	4628      	mov	r0, r5
 800dfce:	bd38      	pop	{r3, r4, r5, pc}
 800dfd0:	2100      	movs	r1, #0
 800dfd2:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800dfd6:	f001 f9ff 	bl	800f3d8 <uxr_init_framing_io>
 800dfda:	e7e7      	b.n	800dfac <uxr_init_custom_transport+0x2c>
 800dfdc:	0800df11 	.word	0x0800df11
 800dfe0:	0800de79 	.word	0x0800de79
 800dfe4:	0800de6d 	.word	0x0800de6d

0800dfe8 <uxr_close_custom_transport>:
 800dfe8:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800dfec:	4718      	bx	r3
 800dfee:	bf00      	nop

0800dff0 <uxr_object_id>:
 800dff0:	b082      	sub	sp, #8
 800dff2:	2300      	movs	r3, #0
 800dff4:	f88d 1006 	strb.w	r1, [sp, #6]
 800dff8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800dffc:	f360 030f 	bfi	r3, r0, #0, #16
 800e000:	f362 431f 	bfi	r3, r2, #16, #16
 800e004:	4618      	mov	r0, r3
 800e006:	b002      	add	sp, #8
 800e008:	4770      	bx	lr
 800e00a:	bf00      	nop

0800e00c <uxr_object_id_from_raw>:
 800e00c:	7843      	ldrb	r3, [r0, #1]
 800e00e:	7801      	ldrb	r1, [r0, #0]
 800e010:	b082      	sub	sp, #8
 800e012:	f003 020f 	and.w	r2, r3, #15
 800e016:	f88d 2006 	strb.w	r2, [sp, #6]
 800e01a:	091b      	lsrs	r3, r3, #4
 800e01c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e020:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800e024:	2000      	movs	r0, #0
 800e026:	f363 000f 	bfi	r0, r3, #0, #16
 800e02a:	f362 401f 	bfi	r0, r2, #16, #16
 800e02e:	b002      	add	sp, #8
 800e030:	4770      	bx	lr
 800e032:	bf00      	nop

0800e034 <uxr_object_id_to_raw>:
 800e034:	4602      	mov	r2, r0
 800e036:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800e03a:	b082      	sub	sp, #8
 800e03c:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800e040:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800e044:	f881 c000 	strb.w	ip, [r1]
 800e048:	7048      	strb	r0, [r1, #1]
 800e04a:	b002      	add	sp, #8
 800e04c:	4770      	bx	lr
 800e04e:	bf00      	nop

0800e050 <uxr_buffer_request_data>:
 800e050:	b530      	push	{r4, r5, lr}
 800e052:	b095      	sub	sp, #84	@ 0x54
 800e054:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800e058:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800e05a:	9303      	str	r3, [sp, #12]
 800e05c:	2200      	movs	r2, #0
 800e05e:	2d00      	cmp	r5, #0
 800e060:	bf14      	ite	ne
 800e062:	2101      	movne	r1, #1
 800e064:	4611      	moveq	r1, r2
 800e066:	4604      	mov	r4, r0
 800e068:	f88d 301c 	strb.w	r3, [sp, #28]
 800e06c:	f88d 201d 	strb.w	r2, [sp, #29]
 800e070:	f88d 201e 	strb.w	r2, [sp, #30]
 800e074:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800e078:	d021      	beq.n	800e0be <uxr_buffer_request_data+0x6e>
 800e07a:	682a      	ldr	r2, [r5, #0]
 800e07c:	686b      	ldr	r3, [r5, #4]
 800e07e:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 800e082:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800e086:	2210      	movs	r2, #16
 800e088:	2308      	movs	r3, #8
 800e08a:	2100      	movs	r1, #0
 800e08c:	e9cd 3100 	strd	r3, r1, [sp]
 800e090:	4620      	mov	r0, r4
 800e092:	9905      	ldr	r1, [sp, #20]
 800e094:	ab0c      	add	r3, sp, #48	@ 0x30
 800e096:	f001 f839 	bl	800f10c <uxr_prepare_stream_to_write_submessage>
 800e09a:	b918      	cbnz	r0, 800e0a4 <uxr_buffer_request_data+0x54>
 800e09c:	4604      	mov	r4, r0
 800e09e:	4620      	mov	r0, r4
 800e0a0:	b015      	add	sp, #84	@ 0x54
 800e0a2:	bd30      	pop	{r4, r5, pc}
 800e0a4:	9904      	ldr	r1, [sp, #16]
 800e0a6:	aa06      	add	r2, sp, #24
 800e0a8:	4620      	mov	r0, r4
 800e0aa:	f001 f965 	bl	800f378 <uxr_init_base_object_request>
 800e0ae:	a906      	add	r1, sp, #24
 800e0b0:	4604      	mov	r4, r0
 800e0b2:	a80c      	add	r0, sp, #48	@ 0x30
 800e0b4:	f002 fe92 	bl	8010ddc <uxr_serialize_READ_DATA_Payload>
 800e0b8:	4620      	mov	r0, r4
 800e0ba:	b015      	add	sp, #84	@ 0x54
 800e0bc:	bd30      	pop	{r4, r5, pc}
 800e0be:	2208      	movs	r2, #8
 800e0c0:	e7e2      	b.n	800e088 <uxr_buffer_request_data+0x38>
 800e0c2:	bf00      	nop

0800e0c4 <uxr_buffer_cancel_data>:
 800e0c4:	b510      	push	{r4, lr}
 800e0c6:	b094      	sub	sp, #80	@ 0x50
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	9202      	str	r2, [sp, #8]
 800e0cc:	9205      	str	r2, [sp, #20]
 800e0ce:	9301      	str	r3, [sp, #4]
 800e0d0:	2201      	movs	r2, #1
 800e0d2:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e0d6:	f88d 301e 	strb.w	r3, [sp, #30]
 800e0da:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800e0de:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800e0e2:	2308      	movs	r3, #8
 800e0e4:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800e0e8:	9300      	str	r3, [sp, #0]
 800e0ea:	2210      	movs	r2, #16
 800e0ec:	ab0c      	add	r3, sp, #48	@ 0x30
 800e0ee:	4604      	mov	r4, r0
 800e0f0:	9103      	str	r1, [sp, #12]
 800e0f2:	f001 f80b 	bl	800f10c <uxr_prepare_stream_to_write_submessage>
 800e0f6:	b918      	cbnz	r0, 800e100 <uxr_buffer_cancel_data+0x3c>
 800e0f8:	4604      	mov	r4, r0
 800e0fa:	4620      	mov	r0, r4
 800e0fc:	b014      	add	sp, #80	@ 0x50
 800e0fe:	bd10      	pop	{r4, pc}
 800e100:	9905      	ldr	r1, [sp, #20]
 800e102:	aa06      	add	r2, sp, #24
 800e104:	4620      	mov	r0, r4
 800e106:	f001 f937 	bl	800f378 <uxr_init_base_object_request>
 800e10a:	a906      	add	r1, sp, #24
 800e10c:	4604      	mov	r4, r0
 800e10e:	a80c      	add	r0, sp, #48	@ 0x30
 800e110:	f002 fe64 	bl	8010ddc <uxr_serialize_READ_DATA_Payload>
 800e114:	4620      	mov	r0, r4
 800e116:	b014      	add	sp, #80	@ 0x50
 800e118:	bd10      	pop	{r4, pc}
 800e11a:	bf00      	nop

0800e11c <read_submessage_format>:
 800e11c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e120:	b095      	sub	sp, #84	@ 0x54
 800e122:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800e126:	b113      	cbz	r3, 800e12e <read_submessage_format+0x12>
 800e128:	b015      	add	sp, #84	@ 0x54
 800e12a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e12e:	460c      	mov	r4, r1
 800e130:	4615      	mov	r5, r2
 800e132:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800e136:	4607      	mov	r7, r0
 800e138:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800e13a:	9004      	str	r0, [sp, #16]
 800e13c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800e13e:	9005      	str	r0, [sp, #20]
 800e140:	1a52      	subs	r2, r2, r1
 800e142:	a80c      	add	r0, sp, #48	@ 0x30
 800e144:	4699      	mov	r9, r3
 800e146:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800e14a:	f7ff fcc3 	bl	800dad4 <ucdr_init_buffer>
 800e14e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e152:	a80c      	add	r0, sp, #48	@ 0x30
 800e154:	f7ff fc92 	bl	800da7c <ucdr_set_on_full_buffer_callback>
 800e158:	69e2      	ldr	r2, [r4, #28]
 800e15a:	b19a      	cbz	r2, 800e184 <read_submessage_format+0x68>
 800e15c:	f1b8 0f07 	cmp.w	r8, #7
 800e160:	f882 9014 	strb.w	r9, [r2, #20]
 800e164:	d040      	beq.n	800e1e8 <read_submessage_format+0xcc>
 800e166:	f1b8 0f08 	cmp.w	r8, #8
 800e16a:	d02e      	beq.n	800e1ca <read_submessage_format+0xae>
 800e16c:	f1b8 0f06 	cmp.w	r8, #6
 800e170:	d011      	beq.n	800e196 <read_submessage_format+0x7a>
 800e172:	2301      	movs	r3, #1
 800e174:	7513      	strb	r3, [r2, #20]
 800e176:	4629      	mov	r1, r5
 800e178:	4620      	mov	r0, r4
 800e17a:	f7ff fcfb 	bl	800db74 <ucdr_advance_buffer>
 800e17e:	b015      	add	sp, #84	@ 0x54
 800e180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e184:	f1b8 0f07 	cmp.w	r8, #7
 800e188:	d02e      	beq.n	800e1e8 <read_submessage_format+0xcc>
 800e18a:	f1b8 0f08 	cmp.w	r8, #8
 800e18e:	d01c      	beq.n	800e1ca <read_submessage_format+0xae>
 800e190:	f1b8 0f06 	cmp.w	r8, #6
 800e194:	d1ef      	bne.n	800e176 <read_submessage_format+0x5a>
 800e196:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800e19a:	f1b8 0f00 	cmp.w	r8, #0
 800e19e:	d011      	beq.n	800e1c4 <read_submessage_format+0xa8>
 800e1a0:	ab0c      	add	r3, sp, #48	@ 0x30
 800e1a2:	e9cd 3500 	strd	r3, r5, [sp]
 800e1a6:	2306      	movs	r3, #6
 800e1a8:	f88d 3016 	strb.w	r3, [sp, #22]
 800e1ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e1b0:	9302      	str	r3, [sp, #8]
 800e1b2:	4632      	mov	r2, r6
 800e1b4:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800e1b8:	4638      	mov	r0, r7
 800e1ba:	47c0      	blx	r8
 800e1bc:	2301      	movs	r3, #1
 800e1be:	69e2      	ldr	r2, [r4, #28]
 800e1c0:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800e1c4:	2a00      	cmp	r2, #0
 800e1c6:	d1d4      	bne.n	800e172 <read_submessage_format+0x56>
 800e1c8:	e7d5      	b.n	800e176 <read_submessage_format+0x5a>
 800e1ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d0f8      	beq.n	800e1c4 <read_submessage_format+0xa8>
 800e1d2:	a906      	add	r1, sp, #24
 800e1d4:	a80c      	add	r0, sp, #48	@ 0x30
 800e1d6:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800e1da:	f002 fec5 	bl	8010f68 <uxr_deserialize_SampleIdentity>
 800e1de:	b9a0      	cbnz	r0, 800e20a <read_submessage_format+0xee>
 800e1e0:	69e2      	ldr	r2, [r4, #28]
 800e1e2:	2a00      	cmp	r2, #0
 800e1e4:	d1c5      	bne.n	800e172 <read_submessage_format+0x56>
 800e1e6:	e7c6      	b.n	800e176 <read_submessage_format+0x5a>
 800e1e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e1ec:	b13b      	cbz	r3, 800e1fe <read_submessage_format+0xe2>
 800e1ee:	a906      	add	r1, sp, #24
 800e1f0:	a80c      	add	r0, sp, #48	@ 0x30
 800e1f2:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800e1f6:	f002 fb8b 	bl	8010910 <uxr_deserialize_BaseObjectRequest>
 800e1fa:	bb60      	cbnz	r0, 800e256 <read_submessage_format+0x13a>
 800e1fc:	69e2      	ldr	r2, [r4, #28]
 800e1fe:	68a3      	ldr	r3, [r4, #8]
 800e200:	442b      	add	r3, r5
 800e202:	60a3      	str	r3, [r4, #8]
 800e204:	2a00      	cmp	r2, #0
 800e206:	d1b4      	bne.n	800e172 <read_submessage_format+0x56>
 800e208:	e7b5      	b.n	800e176 <read_submessage_format+0x5a>
 800e20a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800e20e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e210:	1a52      	subs	r2, r2, r1
 800e212:	eba8 0803 	sub.w	r8, r8, r3
 800e216:	a80c      	add	r0, sp, #48	@ 0x30
 800e218:	f7ff fc5c 	bl	800dad4 <ucdr_init_buffer>
 800e21c:	44a8      	add	r8, r5
 800e21e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e222:	a80c      	add	r0, sp, #48	@ 0x30
 800e224:	f7ff fc2a 	bl	800da7c <ucdr_set_on_full_buffer_callback>
 800e228:	fa1f f888 	uxth.w	r8, r8
 800e22c:	ab0c      	add	r3, sp, #48	@ 0x30
 800e22e:	9300      	str	r3, [sp, #0]
 800e230:	f8cd 8004 	str.w	r8, [sp, #4]
 800e234:	2108      	movs	r1, #8
 800e236:	f88d 1016 	strb.w	r1, [sp, #22]
 800e23a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800e23e:	9102      	str	r1, [sp, #8]
 800e240:	ab06      	add	r3, sp, #24
 800e242:	4632      	mov	r2, r6
 800e244:	9905      	ldr	r1, [sp, #20]
 800e246:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800e24a:	4638      	mov	r0, r7
 800e24c:	47b0      	blx	r6
 800e24e:	2301      	movs	r3, #1
 800e250:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800e254:	e7c4      	b.n	800e1e0 <read_submessage_format+0xc4>
 800e256:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800e25a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e25c:	1a52      	subs	r2, r2, r1
 800e25e:	a80c      	add	r0, sp, #48	@ 0x30
 800e260:	eba8 0803 	sub.w	r8, r8, r3
 800e264:	f7ff fc36 	bl	800dad4 <ucdr_init_buffer>
 800e268:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e26c:	a80c      	add	r0, sp, #48	@ 0x30
 800e26e:	f7ff fc05 	bl	800da7c <ucdr_set_on_full_buffer_callback>
 800e272:	ab0c      	add	r3, sp, #48	@ 0x30
 800e274:	9300      	str	r3, [sp, #0]
 800e276:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800e27a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e27e:	44a8      	add	r8, r5
 800e280:	fa1f f888 	uxth.w	r8, r8
 800e284:	f8cd 8004 	str.w	r8, [sp, #4]
 800e288:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800e28c:	2107      	movs	r1, #7
 800e28e:	f88d 1016 	strb.w	r1, [sp, #22]
 800e292:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800e296:	9102      	str	r1, [sp, #8]
 800e298:	4632      	mov	r2, r6
 800e29a:	b29b      	uxth	r3, r3
 800e29c:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800e2a0:	9905      	ldr	r1, [sp, #20]
 800e2a2:	4638      	mov	r0, r7
 800e2a4:	47b0      	blx	r6
 800e2a6:	2301      	movs	r3, #1
 800e2a8:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800e2ac:	e7a6      	b.n	800e1fc <read_submessage_format+0xe0>
 800e2ae:	bf00      	nop

0800e2b0 <on_get_fragmentation_info>:
 800e2b0:	b500      	push	{lr}
 800e2b2:	b08b      	sub	sp, #44	@ 0x2c
 800e2b4:	4601      	mov	r1, r0
 800e2b6:	2204      	movs	r2, #4
 800e2b8:	a802      	add	r0, sp, #8
 800e2ba:	f7ff fc0b 	bl	800dad4 <ucdr_init_buffer>
 800e2be:	f10d 0305 	add.w	r3, sp, #5
 800e2c2:	f10d 0206 	add.w	r2, sp, #6
 800e2c6:	a901      	add	r1, sp, #4
 800e2c8:	a802      	add	r0, sp, #8
 800e2ca:	f001 fe69 	bl	800ffa0 <uxr_read_submessage_header>
 800e2ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e2d2:	2b0d      	cmp	r3, #13
 800e2d4:	d003      	beq.n	800e2de <on_get_fragmentation_info+0x2e>
 800e2d6:	2000      	movs	r0, #0
 800e2d8:	b00b      	add	sp, #44	@ 0x2c
 800e2da:	f85d fb04 	ldr.w	pc, [sp], #4
 800e2de:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e2e2:	f013 0f02 	tst.w	r3, #2
 800e2e6:	bf14      	ite	ne
 800e2e8:	2002      	movne	r0, #2
 800e2ea:	2001      	moveq	r0, #1
 800e2ec:	b00b      	add	sp, #44	@ 0x2c
 800e2ee:	f85d fb04 	ldr.w	pc, [sp], #4
 800e2f2:	bf00      	nop

0800e2f4 <read_submessage_get_info>:
 800e2f4:	b570      	push	{r4, r5, r6, lr}
 800e2f6:	2500      	movs	r5, #0
 800e2f8:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800e2fc:	4604      	mov	r4, r0
 800e2fe:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800e302:	460e      	mov	r6, r1
 800e304:	a810      	add	r0, sp, #64	@ 0x40
 800e306:	4629      	mov	r1, r5
 800e308:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800e30c:	f008 fe7a 	bl	8017004 <memset>
 800e310:	a903      	add	r1, sp, #12
 800e312:	4630      	mov	r0, r6
 800e314:	f002 fca4 	bl	8010c60 <uxr_deserialize_GET_INFO_Payload>
 800e318:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800e31c:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e320:	4620      	mov	r0, r4
 800e322:	f001 f821 	bl	800f368 <uxr_session_header_offset>
 800e326:	462b      	mov	r3, r5
 800e328:	9000      	str	r0, [sp, #0]
 800e32a:	220c      	movs	r2, #12
 800e32c:	a905      	add	r1, sp, #20
 800e32e:	a808      	add	r0, sp, #32
 800e330:	f7ff fbbe 	bl	800dab0 <ucdr_init_buffer_origin_offset>
 800e334:	a910      	add	r1, sp, #64	@ 0x40
 800e336:	a808      	add	r0, sp, #32
 800e338:	f002 fd04 	bl	8010d44 <uxr_serialize_INFO_Payload>
 800e33c:	9b08      	ldr	r3, [sp, #32]
 800e33e:	462a      	mov	r2, r5
 800e340:	4629      	mov	r1, r5
 800e342:	4620      	mov	r0, r4
 800e344:	f000 ffba 	bl	800f2bc <uxr_stamp_session_header>
 800e348:	a808      	add	r0, sp, #32
 800e34a:	f7ff fbef 	bl	800db2c <ucdr_buffer_length>
 800e34e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e350:	4602      	mov	r2, r0
 800e352:	a905      	add	r1, sp, #20
 800e354:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e358:	47a0      	blx	r4
 800e35a:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800e35e:	bd70      	pop	{r4, r5, r6, pc}

0800e360 <write_submessage_acknack.isra.0>:
 800e360:	b570      	push	{r4, r5, r6, lr}
 800e362:	b092      	sub	sp, #72	@ 0x48
 800e364:	4605      	mov	r5, r0
 800e366:	460e      	mov	r6, r1
 800e368:	4614      	mov	r4, r2
 800e36a:	f000 fffd 	bl	800f368 <uxr_session_header_offset>
 800e36e:	a905      	add	r1, sp, #20
 800e370:	9000      	str	r0, [sp, #0]
 800e372:	2300      	movs	r3, #0
 800e374:	a80a      	add	r0, sp, #40	@ 0x28
 800e376:	2211      	movs	r2, #17
 800e378:	f7ff fb9a 	bl	800dab0 <ucdr_init_buffer_origin_offset>
 800e37c:	2218      	movs	r2, #24
 800e37e:	fb02 5404 	mla	r4, r2, r4, r5
 800e382:	2300      	movs	r3, #0
 800e384:	2205      	movs	r2, #5
 800e386:	3450      	adds	r4, #80	@ 0x50
 800e388:	210a      	movs	r1, #10
 800e38a:	a80a      	add	r0, sp, #40	@ 0x28
 800e38c:	f001 fdee 	bl	800ff6c <uxr_buffer_submessage_header>
 800e390:	a903      	add	r1, sp, #12
 800e392:	4620      	mov	r0, r4
 800e394:	f007 fa7c 	bl	8015890 <uxr_compute_acknack>
 800e398:	ba40      	rev16	r0, r0
 800e39a:	f8ad 000e 	strh.w	r0, [sp, #14]
 800e39e:	a903      	add	r1, sp, #12
 800e3a0:	a80a      	add	r0, sp, #40	@ 0x28
 800e3a2:	f88d 6010 	strb.w	r6, [sp, #16]
 800e3a6:	f002 fd3d 	bl	8010e24 <uxr_serialize_ACKNACK_Payload>
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3ae:	4611      	mov	r1, r2
 800e3b0:	4628      	mov	r0, r5
 800e3b2:	f000 ff83 	bl	800f2bc <uxr_stamp_session_header>
 800e3b6:	a80a      	add	r0, sp, #40	@ 0x28
 800e3b8:	f7ff fbb8 	bl	800db2c <ucdr_buffer_length>
 800e3bc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800e3be:	4602      	mov	r2, r0
 800e3c0:	a905      	add	r1, sp, #20
 800e3c2:	e9d3 0400 	ldrd	r0, r4, [r3]
 800e3c6:	47a0      	blx	r4
 800e3c8:	b012      	add	sp, #72	@ 0x48
 800e3ca:	bd70      	pop	{r4, r5, r6, pc}
 800e3cc:	0000      	movs	r0, r0
	...

0800e3d0 <uxr_init_session>:
 800e3d0:	b510      	push	{r4, lr}
 800e3d2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800e408 <uxr_init_session+0x38>
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800e3dc:	4604      	mov	r4, r0
 800e3de:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800e3e2:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800e3e6:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800e3ea:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800e3ee:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800e3f2:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800e3f6:	2181      	movs	r1, #129	@ 0x81
 800e3f8:	f000 fecc 	bl	800f194 <uxr_init_session_info>
 800e3fc:	f104 0008 	add.w	r0, r4, #8
 800e400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e404:	f001 bcce 	b.w	800fda4 <uxr_init_stream_storage>
	...

0800e410 <uxr_set_status_callback>:
 800e410:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800e414:	4770      	bx	lr
 800e416:	bf00      	nop

0800e418 <uxr_set_topic_callback>:
 800e418:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800e41c:	4770      	bx	lr
 800e41e:	bf00      	nop

0800e420 <uxr_set_request_callback>:
 800e420:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800e424:	4770      	bx	lr
 800e426:	bf00      	nop

0800e428 <uxr_set_reply_callback>:
 800e428:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800e42c:	4770      	bx	lr
 800e42e:	bf00      	nop

0800e430 <uxr_create_output_best_effort_stream>:
 800e430:	b510      	push	{r4, lr}
 800e432:	b084      	sub	sp, #16
 800e434:	e9cd 2100 	strd	r2, r1, [sp]
 800e438:	4604      	mov	r4, r0
 800e43a:	f000 ff95 	bl	800f368 <uxr_session_header_offset>
 800e43e:	e9dd 2100 	ldrd	r2, r1, [sp]
 800e442:	4603      	mov	r3, r0
 800e444:	f104 0008 	add.w	r0, r4, #8
 800e448:	b004      	add	sp, #16
 800e44a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e44e:	f001 bcf3 	b.w	800fe38 <uxr_add_output_best_effort_buffer>
 800e452:	bf00      	nop

0800e454 <uxr_create_output_reliable_stream>:
 800e454:	b510      	push	{r4, lr}
 800e456:	b088      	sub	sp, #32
 800e458:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800e45c:	4604      	mov	r4, r0
 800e45e:	9303      	str	r3, [sp, #12]
 800e460:	f000 ff82 	bl	800f368 <uxr_session_header_offset>
 800e464:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800e468:	9000      	str	r0, [sp, #0]
 800e46a:	9905      	ldr	r1, [sp, #20]
 800e46c:	f104 0008 	add.w	r0, r4, #8
 800e470:	f001 fcf6 	bl	800fe60 <uxr_add_output_reliable_buffer>
 800e474:	2200      	movs	r2, #0
 800e476:	b2c3      	uxtb	r3, r0
 800e478:	f363 0207 	bfi	r2, r3, #0, #8
 800e47c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800e480:	f363 220f 	bfi	r2, r3, #8, #8
 800e484:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800e488:	f363 4217 	bfi	r2, r3, #16, #8
 800e48c:	0e03      	lsrs	r3, r0, #24
 800e48e:	f363 621f 	bfi	r2, r3, #24, #8
 800e492:	4610      	mov	r0, r2
 800e494:	b008      	add	sp, #32
 800e496:	bd10      	pop	{r4, pc}

0800e498 <uxr_create_input_best_effort_stream>:
 800e498:	b082      	sub	sp, #8
 800e49a:	3008      	adds	r0, #8
 800e49c:	b002      	add	sp, #8
 800e49e:	f001 bcf9 	b.w	800fe94 <uxr_add_input_best_effort_buffer>
 800e4a2:	bf00      	nop

0800e4a4 <uxr_create_input_reliable_stream>:
 800e4a4:	b510      	push	{r4, lr}
 800e4a6:	b084      	sub	sp, #16
 800e4a8:	4c0b      	ldr	r4, [pc, #44]	@ (800e4d8 <uxr_create_input_reliable_stream+0x34>)
 800e4aa:	9400      	str	r4, [sp, #0]
 800e4ac:	3008      	adds	r0, #8
 800e4ae:	f001 fd07 	bl	800fec0 <uxr_add_input_reliable_buffer>
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	b2c3      	uxtb	r3, r0
 800e4b6:	f363 0207 	bfi	r2, r3, #0, #8
 800e4ba:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800e4be:	f363 220f 	bfi	r2, r3, #8, #8
 800e4c2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800e4c6:	f363 4217 	bfi	r2, r3, #16, #8
 800e4ca:	0e03      	lsrs	r3, r0, #24
 800e4cc:	f363 621f 	bfi	r2, r3, #24, #8
 800e4d0:	4610      	mov	r0, r2
 800e4d2:	b004      	add	sp, #16
 800e4d4:	bd10      	pop	{r4, pc}
 800e4d6:	bf00      	nop
 800e4d8:	0800e2b1 	.word	0x0800e2b1

0800e4dc <uxr_epoch_nanos>:
 800e4dc:	b510      	push	{r4, lr}
 800e4de:	4604      	mov	r4, r0
 800e4e0:	f001 fda4 	bl	801002c <uxr_nanos>
 800e4e4:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800e4e8:	1ac0      	subs	r0, r0, r3
 800e4ea:	eb61 0102 	sbc.w	r1, r1, r2
 800e4ee:	bd10      	pop	{r4, pc}

0800e4f0 <uxr_flash_output_streams>:
 800e4f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4f4:	7e03      	ldrb	r3, [r0, #24]
 800e4f6:	b084      	sub	sp, #16
 800e4f8:	4604      	mov	r4, r0
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d035      	beq.n	800e56a <uxr_flash_output_streams+0x7a>
 800e4fe:	f04f 0900 	mov.w	r9, #0
 800e502:	4648      	mov	r0, r9
 800e504:	f10d 0802 	add.w	r8, sp, #2
 800e508:	af03      	add	r7, sp, #12
 800e50a:	ae02      	add	r6, sp, #8
 800e50c:	e006      	b.n	800e51c <uxr_flash_output_streams+0x2c>
 800e50e:	7e23      	ldrb	r3, [r4, #24]
 800e510:	f109 0901 	add.w	r9, r9, #1
 800e514:	fa5f f089 	uxtb.w	r0, r9
 800e518:	4283      	cmp	r3, r0
 800e51a:	d926      	bls.n	800e56a <uxr_flash_output_streams+0x7a>
 800e51c:	2201      	movs	r2, #1
 800e51e:	4611      	mov	r1, r2
 800e520:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800e524:	f001 fbea 	bl	800fcfc <uxr_stream_id>
 800e528:	3508      	adds	r5, #8
 800e52a:	4684      	mov	ip, r0
 800e52c:	4643      	mov	r3, r8
 800e52e:	463a      	mov	r2, r7
 800e530:	4631      	mov	r1, r6
 800e532:	4628      	mov	r0, r5
 800e534:	f8cd c004 	str.w	ip, [sp, #4]
 800e538:	f007 fa30 	bl	801599c <uxr_prepare_best_effort_buffer_to_send>
 800e53c:	2800      	cmp	r0, #0
 800e53e:	d0e6      	beq.n	800e50e <uxr_flash_output_streams+0x1e>
 800e540:	9b02      	ldr	r3, [sp, #8]
 800e542:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800e546:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800e54a:	4620      	mov	r0, r4
 800e54c:	f000 feb6 	bl	800f2bc <uxr_stamp_session_header>
 800e550:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e552:	9a03      	ldr	r2, [sp, #12]
 800e554:	685d      	ldr	r5, [r3, #4]
 800e556:	6818      	ldr	r0, [r3, #0]
 800e558:	9902      	ldr	r1, [sp, #8]
 800e55a:	47a8      	blx	r5
 800e55c:	f109 0901 	add.w	r9, r9, #1
 800e560:	7e23      	ldrb	r3, [r4, #24]
 800e562:	fa5f f089 	uxtb.w	r0, r9
 800e566:	4283      	cmp	r3, r0
 800e568:	d8d8      	bhi.n	800e51c <uxr_flash_output_streams+0x2c>
 800e56a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800e56e:	b38b      	cbz	r3, 800e5d4 <uxr_flash_output_streams+0xe4>
 800e570:	f04f 0900 	mov.w	r9, #0
 800e574:	f10d 0802 	add.w	r8, sp, #2
 800e578:	af03      	add	r7, sp, #12
 800e57a:	ae02      	add	r6, sp, #8
 800e57c:	4648      	mov	r0, r9
 800e57e:	2201      	movs	r2, #1
 800e580:	2102      	movs	r1, #2
 800e582:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800e586:	f001 fbb9 	bl	800fcfc <uxr_stream_id>
 800e58a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800e58e:	3520      	adds	r5, #32
 800e590:	9001      	str	r0, [sp, #4]
 800e592:	e00d      	b.n	800e5b0 <uxr_flash_output_streams+0xc0>
 800e594:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800e598:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800e59c:	9b02      	ldr	r3, [sp, #8]
 800e59e:	f000 fe8d 	bl	800f2bc <uxr_stamp_session_header>
 800e5a2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e5a4:	9a03      	ldr	r2, [sp, #12]
 800e5a6:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800e5aa:	9902      	ldr	r1, [sp, #8]
 800e5ac:	6818      	ldr	r0, [r3, #0]
 800e5ae:	47d0      	blx	sl
 800e5b0:	4643      	mov	r3, r8
 800e5b2:	463a      	mov	r2, r7
 800e5b4:	4631      	mov	r1, r6
 800e5b6:	4628      	mov	r0, r5
 800e5b8:	f007 fc0e 	bl	8015dd8 <uxr_prepare_next_reliable_buffer_to_send>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	4620      	mov	r0, r4
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d1e7      	bne.n	800e594 <uxr_flash_output_streams+0xa4>
 800e5c4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800e5c8:	f109 0901 	add.w	r9, r9, #1
 800e5cc:	fa5f f089 	uxtb.w	r0, r9
 800e5d0:	4283      	cmp	r3, r0
 800e5d2:	d8d4      	bhi.n	800e57e <uxr_flash_output_streams+0x8e>
 800e5d4:	b004      	add	sp, #16
 800e5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5da:	bf00      	nop

0800e5dc <read_submessage_info>:
 800e5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5e0:	460d      	mov	r5, r1
 800e5e2:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800e5e6:	4669      	mov	r1, sp
 800e5e8:	4607      	mov	r7, r0
 800e5ea:	4628      	mov	r0, r5
 800e5ec:	f002 fa46 	bl	8010a7c <uxr_deserialize_BaseObjectReply>
 800e5f0:	a902      	add	r1, sp, #8
 800e5f2:	4604      	mov	r4, r0
 800e5f4:	4628      	mov	r0, r5
 800e5f6:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800e5fa:	f7fe faa7 	bl	800cb4c <ucdr_deserialize_bool>
 800e5fe:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e602:	4004      	ands	r4, r0
 800e604:	b2e4      	uxtb	r4, r4
 800e606:	b95b      	cbnz	r3, 800e620 <read_submessage_info+0x44>
 800e608:	a987      	add	r1, sp, #540	@ 0x21c
 800e60a:	4628      	mov	r0, r5
 800e60c:	f7fe fa9e 	bl	800cb4c <ucdr_deserialize_bool>
 800e610:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800e614:	4606      	mov	r6, r0
 800e616:	b94b      	cbnz	r3, 800e62c <read_submessage_info+0x50>
 800e618:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800e61c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e620:	a903      	add	r1, sp, #12
 800e622:	4628      	mov	r0, r5
 800e624:	f002 f8d2 	bl	80107cc <uxr_deserialize_ObjectVariant>
 800e628:	4004      	ands	r4, r0
 800e62a:	e7ed      	b.n	800e608 <read_submessage_info+0x2c>
 800e62c:	a988      	add	r1, sp, #544	@ 0x220
 800e62e:	4628      	mov	r0, r5
 800e630:	f7fe faba 	bl	800cba8 <ucdr_deserialize_uint8_t>
 800e634:	4234      	tst	r4, r6
 800e636:	d0ef      	beq.n	800e618 <read_submessage_info+0x3c>
 800e638:	2800      	cmp	r0, #0
 800e63a:	d0ed      	beq.n	800e618 <read_submessage_info+0x3c>
 800e63c:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800e640:	2b0d      	cmp	r3, #13
 800e642:	d1e9      	bne.n	800e618 <read_submessage_info+0x3c>
 800e644:	a98a      	add	r1, sp, #552	@ 0x228
 800e646:	4628      	mov	r0, r5
 800e648:	f7ff f854 	bl	800d6f4 <ucdr_deserialize_int16_t>
 800e64c:	b140      	cbz	r0, 800e660 <read_submessage_info+0x84>
 800e64e:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800e652:	2b00      	cmp	r3, #0
 800e654:	dd07      	ble.n	800e666 <read_submessage_info+0x8a>
 800e656:	f1b8 0f00 	cmp.w	r8, #0
 800e65a:	bf14      	ite	ne
 800e65c:	2001      	movne	r0, #1
 800e65e:	2002      	moveq	r0, #2
 800e660:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800e664:	e7d8      	b.n	800e618 <read_submessage_info+0x3c>
 800e666:	2000      	movs	r0, #0
 800e668:	e7fa      	b.n	800e660 <read_submessage_info+0x84>
 800e66a:	bf00      	nop

0800e66c <read_submessage_list>:
 800e66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e670:	b097      	sub	sp, #92	@ 0x5c
 800e672:	4ec1      	ldr	r6, [pc, #772]	@ (800e978 <read_submessage_list+0x30c>)
 800e674:	9209      	str	r2, [sp, #36]	@ 0x24
 800e676:	4604      	mov	r4, r0
 800e678:	460d      	mov	r5, r1
 800e67a:	f04f 0801 	mov.w	r8, #1
 800e67e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800e682:	aa0c      	add	r2, sp, #48	@ 0x30
 800e684:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800e688:	4628      	mov	r0, r5
 800e68a:	f001 fc89 	bl	800ffa0 <uxr_read_submessage_header>
 800e68e:	2800      	cmp	r0, #0
 800e690:	f000 813e 	beq.w	800e910 <read_submessage_list+0x2a4>
 800e694:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800e698:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800e69c:	3b02      	subs	r3, #2
 800e69e:	2b0d      	cmp	r3, #13
 800e6a0:	d8ed      	bhi.n	800e67e <read_submessage_list+0x12>
 800e6a2:	a101      	add	r1, pc, #4	@ (adr r1, 800e6a8 <read_submessage_list+0x3c>)
 800e6a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e6a8:	0800e907 	.word	0x0800e907
 800e6ac:	0800e67f 	.word	0x0800e67f
 800e6b0:	0800e8f7 	.word	0x0800e8f7
 800e6b4:	0800e895 	.word	0x0800e895
 800e6b8:	0800e88b 	.word	0x0800e88b
 800e6bc:	0800e67f 	.word	0x0800e67f
 800e6c0:	0800e67f 	.word	0x0800e67f
 800e6c4:	0800e7eb 	.word	0x0800e7eb
 800e6c8:	0800e77b 	.word	0x0800e77b
 800e6cc:	0800e73b 	.word	0x0800e73b
 800e6d0:	0800e67f 	.word	0x0800e67f
 800e6d4:	0800e67f 	.word	0x0800e67f
 800e6d8:	0800e67f 	.word	0x0800e67f
 800e6dc:	0800e6e1 	.word	0x0800e6e1
 800e6e0:	a910      	add	r1, sp, #64	@ 0x40
 800e6e2:	4628      	mov	r0, r5
 800e6e4:	f002 fbee 	bl	8010ec4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800e6e8:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800e6ec:	f1b9 0f00 	cmp.w	r9, #0
 800e6f0:	f000 8116 	beq.w	800e920 <read_submessage_list+0x2b4>
 800e6f4:	f001 fc9a 	bl	801002c <uxr_nanos>
 800e6f8:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800e6fa:	4602      	mov	r2, r0
 800e6fc:	460b      	mov	r3, r1
 800e6fe:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800e700:	2100      	movs	r1, #0
 800e702:	468c      	mov	ip, r1
 800e704:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800e708:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800e70c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e70e:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800e710:	468c      	mov	ip, r1
 800e712:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800e716:	46e2      	mov	sl, ip
 800e718:	46bc      	mov	ip, r7
 800e71a:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800e71e:	fbc0 7106 	smlal	r7, r1, r0, r6
 800e722:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800e726:	e9cd 7100 	strd	r7, r1, [sp]
 800e72a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800e72e:	9106      	str	r1, [sp, #24]
 800e730:	4620      	mov	r0, r4
 800e732:	47c8      	blx	r9
 800e734:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800e738:	e7a1      	b.n	800e67e <read_submessage_list+0x12>
 800e73a:	a910      	add	r1, sp, #64	@ 0x40
 800e73c:	4628      	mov	r0, r5
 800e73e:	f002 fbaf 	bl	8010ea0 <uxr_deserialize_HEARTBEAT_Payload>
 800e742:	2100      	movs	r1, #0
 800e744:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800e748:	f001 fb02 	bl	800fd50 <uxr_stream_id_from_raw>
 800e74c:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800e750:	900f      	str	r0, [sp, #60]	@ 0x3c
 800e752:	4639      	mov	r1, r7
 800e754:	f104 0008 	add.w	r0, r4, #8
 800e758:	f001 fbe8 	bl	800ff2c <uxr_get_input_reliable_stream>
 800e75c:	2800      	cmp	r0, #0
 800e75e:	d08e      	beq.n	800e67e <read_submessage_list+0x12>
 800e760:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800e764:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800e768:	f007 f886 	bl	8015878 <uxr_process_heartbeat>
 800e76c:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800e770:	463a      	mov	r2, r7
 800e772:	4620      	mov	r0, r4
 800e774:	f7ff fdf4 	bl	800e360 <write_submessage_acknack.isra.0>
 800e778:	e781      	b.n	800e67e <read_submessage_list+0x12>
 800e77a:	a910      	add	r1, sp, #64	@ 0x40
 800e77c:	4628      	mov	r0, r5
 800e77e:	f002 fb67 	bl	8010e50 <uxr_deserialize_ACKNACK_Payload>
 800e782:	2100      	movs	r1, #0
 800e784:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800e788:	f001 fae2 	bl	800fd50 <uxr_stream_id_from_raw>
 800e78c:	900d      	str	r0, [sp, #52]	@ 0x34
 800e78e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800e792:	f104 0008 	add.w	r0, r4, #8
 800e796:	f001 fbb5 	bl	800ff04 <uxr_get_output_reliable_stream>
 800e79a:	4607      	mov	r7, r0
 800e79c:	2800      	cmp	r0, #0
 800e79e:	f43f af6e 	beq.w	800e67e <read_submessage_list+0x12>
 800e7a2:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800e7a6:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800e7aa:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800e7ae:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800e7b2:	b289      	uxth	r1, r1
 800e7b4:	f007 fbba 	bl	8015f2c <uxr_process_acknack>
 800e7b8:	4638      	mov	r0, r7
 800e7ba:	f007 fb77 	bl	8015eac <uxr_begin_output_nack_buffer_it>
 800e7be:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800e7c2:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800e7c6:	e006      	b.n	800e7d6 <read_submessage_list+0x16a>
 800e7c8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800e7ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e7cc:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800e7d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e7d2:	6818      	ldr	r0, [r3, #0]
 800e7d4:	47c8      	blx	r9
 800e7d6:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800e7da:	aa0f      	add	r2, sp, #60	@ 0x3c
 800e7dc:	4651      	mov	r1, sl
 800e7de:	4638      	mov	r0, r7
 800e7e0:	f007 fb66 	bl	8015eb0 <uxr_next_reliable_nack_buffer_to_send>
 800e7e4:	2800      	cmp	r0, #0
 800e7e6:	d1ef      	bne.n	800e7c8 <read_submessage_list+0x15c>
 800e7e8:	e749      	b.n	800e67e <read_submessage_list+0x12>
 800e7ea:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800e7ee:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800e7f2:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800e7f6:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800e7fa:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800e7fe:	4651      	mov	r1, sl
 800e800:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e804:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800e808:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800e80c:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800e810:	4628      	mov	r0, r5
 800e812:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800e816:	f002 f87b 	bl	8010910 <uxr_deserialize_BaseObjectRequest>
 800e81a:	4650      	mov	r0, sl
 800e81c:	a90f      	add	r1, sp, #60	@ 0x3c
 800e81e:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800e822:	f000 fdc7 	bl	800f3b4 <uxr_parse_base_object_request>
 800e826:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800e82a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e82c:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800e830:	9110      	str	r1, [sp, #64]	@ 0x40
 800e832:	3f04      	subs	r7, #4
 800e834:	f009 090e 	and.w	r9, r9, #14
 800e838:	b2bf      	uxth	r7, r7
 800e83a:	f1bb 0f00 	cmp.w	fp, #0
 800e83e:	d006      	beq.n	800e84e <read_submessage_list+0x1e2>
 800e840:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800e844:	9300      	str	r3, [sp, #0]
 800e846:	4652      	mov	r2, sl
 800e848:	2300      	movs	r3, #0
 800e84a:	4620      	mov	r0, r4
 800e84c:	47d8      	blx	fp
 800e84e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800e850:	b16a      	cbz	r2, 800e86e <read_submessage_list+0x202>
 800e852:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800e854:	2100      	movs	r1, #0
 800e856:	3802      	subs	r0, #2
 800e858:	e002      	b.n	800e860 <read_submessage_list+0x1f4>
 800e85a:	3101      	adds	r1, #1
 800e85c:	4291      	cmp	r1, r2
 800e85e:	d006      	beq.n	800e86e <read_submessage_list+0x202>
 800e860:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800e864:	4553      	cmp	r3, sl
 800e866:	d1f8      	bne.n	800e85a <read_submessage_list+0x1ee>
 800e868:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800e86a:	2200      	movs	r2, #0
 800e86c:	545a      	strb	r2, [r3, r1]
 800e86e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800e872:	9102      	str	r1, [sp, #8]
 800e874:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e876:	9101      	str	r1, [sp, #4]
 800e878:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e87a:	9100      	str	r1, [sp, #0]
 800e87c:	464b      	mov	r3, r9
 800e87e:	463a      	mov	r2, r7
 800e880:	4629      	mov	r1, r5
 800e882:	4620      	mov	r0, r4
 800e884:	f7ff fc4a 	bl	800e11c <read_submessage_format>
 800e888:	e6f9      	b.n	800e67e <read_submessage_list+0x12>
 800e88a:	4629      	mov	r1, r5
 800e88c:	4620      	mov	r0, r4
 800e88e:	f7ff fea5 	bl	800e5dc <read_submessage_info>
 800e892:	e6f4      	b.n	800e67e <read_submessage_list+0x12>
 800e894:	2a00      	cmp	r2, #0
 800e896:	d03e      	beq.n	800e916 <read_submessage_list+0x2aa>
 800e898:	a910      	add	r1, sp, #64	@ 0x40
 800e89a:	4628      	mov	r0, r5
 800e89c:	f002 fa34 	bl	8010d08 <uxr_deserialize_STATUS_Payload>
 800e8a0:	a90e      	add	r1, sp, #56	@ 0x38
 800e8a2:	aa0d      	add	r2, sp, #52	@ 0x34
 800e8a4:	a810      	add	r0, sp, #64	@ 0x40
 800e8a6:	f000 fd85 	bl	800f3b4 <uxr_parse_base_object_request>
 800e8aa:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800e8ae:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e8b0:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800e8b4:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800e8b8:	910f      	str	r1, [sp, #60]	@ 0x3c
 800e8ba:	f1ba 0f00 	cmp.w	sl, #0
 800e8be:	d006      	beq.n	800e8ce <read_submessage_list+0x262>
 800e8c0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800e8c4:	9300      	str	r3, [sp, #0]
 800e8c6:	463a      	mov	r2, r7
 800e8c8:	464b      	mov	r3, r9
 800e8ca:	4620      	mov	r0, r4
 800e8cc:	47d0      	blx	sl
 800e8ce:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800e8d0:	2a00      	cmp	r2, #0
 800e8d2:	f43f aed4 	beq.w	800e67e <read_submessage_list+0x12>
 800e8d6:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800e8d8:	2100      	movs	r1, #0
 800e8da:	3802      	subs	r0, #2
 800e8dc:	e003      	b.n	800e8e6 <read_submessage_list+0x27a>
 800e8de:	3101      	adds	r1, #1
 800e8e0:	4291      	cmp	r1, r2
 800e8e2:	f43f aecc 	beq.w	800e67e <read_submessage_list+0x12>
 800e8e6:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800e8ea:	42bb      	cmp	r3, r7
 800e8ec:	d1f7      	bne.n	800e8de <read_submessage_list+0x272>
 800e8ee:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800e8f0:	f803 9001 	strb.w	r9, [r3, r1]
 800e8f4:	e6c3      	b.n	800e67e <read_submessage_list+0x12>
 800e8f6:	2a00      	cmp	r2, #0
 800e8f8:	f47f aec1 	bne.w	800e67e <read_submessage_list+0x12>
 800e8fc:	4629      	mov	r1, r5
 800e8fe:	4620      	mov	r0, r4
 800e900:	f000 fc9e 	bl	800f240 <uxr_read_create_session_status>
 800e904:	e6bb      	b.n	800e67e <read_submessage_list+0x12>
 800e906:	4629      	mov	r1, r5
 800e908:	4620      	mov	r0, r4
 800e90a:	f7ff fcf3 	bl	800e2f4 <read_submessage_get_info>
 800e90e:	e6b6      	b.n	800e67e <read_submessage_list+0x12>
 800e910:	b017      	add	sp, #92	@ 0x5c
 800e912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e916:	4629      	mov	r1, r5
 800e918:	4620      	mov	r0, r4
 800e91a:	f000 fc9d 	bl	800f258 <uxr_read_delete_session_status>
 800e91e:	e6ae      	b.n	800e67e <read_submessage_list+0x12>
 800e920:	f001 fb84 	bl	801002c <uxr_nanos>
 800e924:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e926:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e928:	464f      	mov	r7, r9
 800e92a:	fbc3 2706 	smlal	r2, r7, r3, r6
 800e92e:	1812      	adds	r2, r2, r0
 800e930:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e932:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800e934:	eb47 0101 	adc.w	r1, r7, r1
 800e938:	464f      	mov	r7, r9
 800e93a:	fbc3 0706 	smlal	r0, r7, r3, r6
 800e93e:	463b      	mov	r3, r7
 800e940:	4684      	mov	ip, r0
 800e942:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800e946:	fbc7 0906 	smlal	r0, r9, r7, r6
 800e94a:	eb1c 0c00 	adds.w	ip, ip, r0
 800e94e:	464f      	mov	r7, r9
 800e950:	eb43 0307 	adc.w	r3, r3, r7
 800e954:	ebb2 0c0c 	subs.w	ip, r2, ip
 800e958:	eb61 0303 	sbc.w	r3, r1, r3
 800e95c:	0fda      	lsrs	r2, r3, #31
 800e95e:	eb12 020c 	adds.w	r2, r2, ip
 800e962:	f143 0300 	adc.w	r3, r3, #0
 800e966:	0852      	lsrs	r2, r2, #1
 800e968:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800e96c:	105b      	asrs	r3, r3, #1
 800e96e:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800e972:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800e976:	e6dd      	b.n	800e734 <read_submessage_list+0xc8>
 800e978:	3b9aca00 	.word	0x3b9aca00

0800e97c <listen_message_reliably>:
 800e97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e980:	1e0b      	subs	r3, r1, #0
 800e982:	b09d      	sub	sp, #116	@ 0x74
 800e984:	bfb8      	it	lt
 800e986:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800e98a:	4680      	mov	r8, r0
 800e98c:	9305      	str	r3, [sp, #20]
 800e98e:	f001 fb33 	bl	800fff8 <uxr_millis>
 800e992:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800e996:	4681      	mov	r9, r0
 800e998:	2a00      	cmp	r2, #0
 800e99a:	f000 80a1 	beq.w	800eae0 <listen_message_reliably+0x164>
 800e99e:	2600      	movs	r6, #0
 800e9a0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e9a4:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800e9a8:	9303      	str	r3, [sp, #12]
 800e9aa:	4630      	mov	r0, r6
 800e9ac:	460f      	mov	r7, r1
 800e9ae:	e00f      	b.n	800e9d0 <listen_message_reliably+0x54>
 800e9b0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e9b4:	9903      	ldr	r1, [sp, #12]
 800e9b6:	455a      	cmp	r2, fp
 800e9b8:	f106 0601 	add.w	r6, r6, #1
 800e9bc:	eb73 0101 	sbcs.w	r1, r3, r1
 800e9c0:	b2f0      	uxtb	r0, r6
 800e9c2:	da01      	bge.n	800e9c8 <listen_message_reliably+0x4c>
 800e9c4:	4693      	mov	fp, r2
 800e9c6:	9303      	str	r3, [sp, #12]
 800e9c8:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800e9cc:	4283      	cmp	r3, r0
 800e9ce:	d960      	bls.n	800ea92 <listen_message_reliably+0x116>
 800e9d0:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800e9d4:	2102      	movs	r1, #2
 800e9d6:	2201      	movs	r2, #1
 800e9d8:	f001 f990 	bl	800fcfc <uxr_stream_id>
 800e9dc:	00e4      	lsls	r4, r4, #3
 800e9de:	f104 0520 	add.w	r5, r4, #32
 800e9e2:	4445      	add	r5, r8
 800e9e4:	4601      	mov	r1, r0
 800e9e6:	463b      	mov	r3, r7
 800e9e8:	464a      	mov	r2, r9
 800e9ea:	4628      	mov	r0, r5
 800e9ec:	9109      	str	r1, [sp, #36]	@ 0x24
 800e9ee:	f007 fa33 	bl	8015e58 <uxr_update_output_stream_heartbeat_timestamp>
 800e9f2:	eb08 0304 	add.w	r3, r8, r4
 800e9f6:	2800      	cmp	r0, #0
 800e9f8:	d0da      	beq.n	800e9b0 <listen_message_reliably+0x34>
 800e9fa:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800e9fe:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800ea02:	9304      	str	r3, [sp, #16]
 800ea04:	4640      	mov	r0, r8
 800ea06:	f000 fcaf 	bl	800f368 <uxr_session_header_offset>
 800ea0a:	3501      	adds	r5, #1
 800ea0c:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800ea10:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800ea14:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800ea18:	2300      	movs	r3, #0
 800ea1a:	2211      	movs	r2, #17
 800ea1c:	9000      	str	r0, [sp, #0]
 800ea1e:	a90c      	add	r1, sp, #48	@ 0x30
 800ea20:	4650      	mov	r0, sl
 800ea22:	f7ff f845 	bl	800dab0 <ucdr_init_buffer_origin_offset>
 800ea26:	2300      	movs	r3, #0
 800ea28:	2205      	movs	r2, #5
 800ea2a:	210b      	movs	r1, #11
 800ea2c:	4650      	mov	r0, sl
 800ea2e:	f001 fa9d 	bl	800ff6c <uxr_buffer_submessage_header>
 800ea32:	8968      	ldrh	r0, [r5, #10]
 800ea34:	2101      	movs	r1, #1
 800ea36:	f007 fab1 	bl	8015f9c <uxr_seq_num_add>
 800ea3a:	892b      	ldrh	r3, [r5, #8]
 800ea3c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800ea40:	4602      	mov	r2, r0
 800ea42:	9b04      	ldr	r3, [sp, #16]
 800ea44:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800ea48:	a90a      	add	r1, sp, #40	@ 0x28
 800ea4a:	4650      	mov	r0, sl
 800ea4c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800ea50:	f002 fa12 	bl	8010e78 <uxr_serialize_HEARTBEAT_Payload>
 800ea54:	2200      	movs	r2, #0
 800ea56:	4611      	mov	r1, r2
 800ea58:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ea5a:	4640      	mov	r0, r8
 800ea5c:	f000 fc2e 	bl	800f2bc <uxr_stamp_session_header>
 800ea60:	4650      	mov	r0, sl
 800ea62:	f7ff f863 	bl	800db2c <ucdr_buffer_length>
 800ea66:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800ea6a:	4602      	mov	r2, r0
 800ea6c:	a90c      	add	r1, sp, #48	@ 0x30
 800ea6e:	e9d3 0500 	ldrd	r0, r5, [r3]
 800ea72:	4444      	add	r4, r8
 800ea74:	47a8      	blx	r5
 800ea76:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800ea7a:	9903      	ldr	r1, [sp, #12]
 800ea7c:	455a      	cmp	r2, fp
 800ea7e:	f106 0601 	add.w	r6, r6, #1
 800ea82:	eb73 0101 	sbcs.w	r1, r3, r1
 800ea86:	b2f0      	uxtb	r0, r6
 800ea88:	db9c      	blt.n	800e9c4 <listen_message_reliably+0x48>
 800ea8a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800ea8e:	4283      	cmp	r3, r0
 800ea90:	d89e      	bhi.n	800e9d0 <listen_message_reliably+0x54>
 800ea92:	9a03      	ldr	r2, [sp, #12]
 800ea94:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ea98:	429a      	cmp	r2, r3
 800ea9a:	bf08      	it	eq
 800ea9c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800eaa0:	d01e      	beq.n	800eae0 <listen_message_reliably+0x164>
 800eaa2:	ebab 0309 	sub.w	r3, fp, r9
 800eaa6:	9905      	ldr	r1, [sp, #20]
 800eaa8:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	bf08      	it	eq
 800eab0:	2301      	moveq	r3, #1
 800eab2:	4299      	cmp	r1, r3
 800eab4:	bfa8      	it	ge
 800eab6:	4619      	movge	r1, r3
 800eab8:	6894      	ldr	r4, [r2, #8]
 800eaba:	6810      	ldr	r0, [r2, #0]
 800eabc:	4689      	mov	r9, r1
 800eabe:	460b      	mov	r3, r1
 800eac0:	aa08      	add	r2, sp, #32
 800eac2:	a907      	add	r1, sp, #28
 800eac4:	47a0      	blx	r4
 800eac6:	b968      	cbnz	r0, 800eae4 <listen_message_reliably+0x168>
 800eac8:	9b05      	ldr	r3, [sp, #20]
 800eaca:	eba3 0309 	sub.w	r3, r3, r9
 800eace:	2b00      	cmp	r3, #0
 800ead0:	9305      	str	r3, [sp, #20]
 800ead2:	f73f af5c 	bgt.w	800e98e <listen_message_reliably+0x12>
 800ead6:	4604      	mov	r4, r0
 800ead8:	4620      	mov	r0, r4
 800eada:	b01d      	add	sp, #116	@ 0x74
 800eadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eae0:	9b05      	ldr	r3, [sp, #20]
 800eae2:	e7e0      	b.n	800eaa6 <listen_message_reliably+0x12a>
 800eae4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800eae8:	4604      	mov	r4, r0
 800eaea:	a80c      	add	r0, sp, #48	@ 0x30
 800eaec:	f7fe fff2 	bl	800dad4 <ucdr_init_buffer>
 800eaf0:	2500      	movs	r5, #0
 800eaf2:	f10d 031a 	add.w	r3, sp, #26
 800eaf6:	aa06      	add	r2, sp, #24
 800eaf8:	a90c      	add	r1, sp, #48	@ 0x30
 800eafa:	4640      	mov	r0, r8
 800eafc:	f88d 5018 	strb.w	r5, [sp, #24]
 800eb00:	f000 fbf0 	bl	800f2e4 <uxr_read_session_header>
 800eb04:	b918      	cbnz	r0, 800eb0e <listen_message_reliably+0x192>
 800eb06:	4620      	mov	r0, r4
 800eb08:	b01d      	add	sp, #116	@ 0x74
 800eb0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb0e:	4629      	mov	r1, r5
 800eb10:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800eb14:	f001 f91c 	bl	800fd50 <uxr_stream_id_from_raw>
 800eb18:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800eb1c:	2d01      	cmp	r5, #1
 800eb1e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800eb22:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800eb26:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800eb2a:	d04b      	beq.n	800ebc4 <listen_message_reliably+0x248>
 800eb2c:	2d02      	cmp	r5, #2
 800eb2e:	d00f      	beq.n	800eb50 <listen_message_reliably+0x1d4>
 800eb30:	2d00      	cmp	r5, #0
 800eb32:	d1e8      	bne.n	800eb06 <listen_message_reliably+0x18a>
 800eb34:	4629      	mov	r1, r5
 800eb36:	4628      	mov	r0, r5
 800eb38:	f001 f90a 	bl	800fd50 <uxr_stream_id_from_raw>
 800eb3c:	a90c      	add	r1, sp, #48	@ 0x30
 800eb3e:	4602      	mov	r2, r0
 800eb40:	4640      	mov	r0, r8
 800eb42:	920a      	str	r2, [sp, #40]	@ 0x28
 800eb44:	f7ff fd92 	bl	800e66c <read_submessage_list>
 800eb48:	4620      	mov	r0, r4
 800eb4a:	b01d      	add	sp, #116	@ 0x74
 800eb4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb50:	4631      	mov	r1, r6
 800eb52:	f108 0008 	add.w	r0, r8, #8
 800eb56:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800eb5a:	f001 f9e7 	bl	800ff2c <uxr_get_input_reliable_stream>
 800eb5e:	4607      	mov	r7, r0
 800eb60:	b338      	cbz	r0, 800ebb2 <listen_message_reliably+0x236>
 800eb62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eb64:	9203      	str	r2, [sp, #12]
 800eb66:	a80c      	add	r0, sp, #48	@ 0x30
 800eb68:	f7fe ffe4 	bl	800db34 <ucdr_buffer_remaining>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	f10d 0019 	add.w	r0, sp, #25
 800eb72:	9000      	str	r0, [sp, #0]
 800eb74:	9a03      	ldr	r2, [sp, #12]
 800eb76:	4651      	mov	r1, sl
 800eb78:	4638      	mov	r0, r7
 800eb7a:	f006 fd83 	bl	8015684 <uxr_receive_reliable_message>
 800eb7e:	b1c0      	cbz	r0, 800ebb2 <listen_message_reliably+0x236>
 800eb80:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800eb84:	b393      	cbz	r3, 800ebec <listen_message_reliably+0x270>
 800eb86:	ad14      	add	r5, sp, #80	@ 0x50
 800eb88:	f04f 0a02 	mov.w	sl, #2
 800eb8c:	e00a      	b.n	800eba4 <listen_message_reliably+0x228>
 800eb8e:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800eb92:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800eb96:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800eb9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eb9c:	4629      	mov	r1, r5
 800eb9e:	4640      	mov	r0, r8
 800eba0:	f7ff fd64 	bl	800e66c <read_submessage_list>
 800eba4:	2204      	movs	r2, #4
 800eba6:	4629      	mov	r1, r5
 800eba8:	4638      	mov	r0, r7
 800ebaa:	f006 fdeb 	bl	8015784 <uxr_next_input_reliable_buffer_available>
 800ebae:	2800      	cmp	r0, #0
 800ebb0:	d1ed      	bne.n	800eb8e <listen_message_reliably+0x212>
 800ebb2:	4640      	mov	r0, r8
 800ebb4:	4632      	mov	r2, r6
 800ebb6:	4649      	mov	r1, r9
 800ebb8:	f7ff fbd2 	bl	800e360 <write_submessage_acknack.isra.0>
 800ebbc:	4620      	mov	r0, r4
 800ebbe:	b01d      	add	sp, #116	@ 0x74
 800ebc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebc4:	4631      	mov	r1, r6
 800ebc6:	f108 0008 	add.w	r0, r8, #8
 800ebca:	f001 f9a5 	bl	800ff18 <uxr_get_input_best_effort_stream>
 800ebce:	2800      	cmp	r0, #0
 800ebd0:	d099      	beq.n	800eb06 <listen_message_reliably+0x18a>
 800ebd2:	4651      	mov	r1, sl
 800ebd4:	f006 fcc2 	bl	801555c <uxr_receive_best_effort_message>
 800ebd8:	2800      	cmp	r0, #0
 800ebda:	d094      	beq.n	800eb06 <listen_message_reliably+0x18a>
 800ebdc:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800ebe0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ebe2:	a90c      	add	r1, sp, #48	@ 0x30
 800ebe4:	4640      	mov	r0, r8
 800ebe6:	f7ff fd41 	bl	800e66c <read_submessage_list>
 800ebea:	e78c      	b.n	800eb06 <listen_message_reliably+0x18a>
 800ebec:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800ebf0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ebf2:	a90c      	add	r1, sp, #48	@ 0x30
 800ebf4:	4640      	mov	r0, r8
 800ebf6:	f7ff fd39 	bl	800e66c <read_submessage_list>
 800ebfa:	e7c4      	b.n	800eb86 <listen_message_reliably+0x20a>

0800ebfc <uxr_run_session_timeout>:
 800ebfc:	b570      	push	{r4, r5, r6, lr}
 800ebfe:	4604      	mov	r4, r0
 800ec00:	460d      	mov	r5, r1
 800ec02:	f001 f9f9 	bl	800fff8 <uxr_millis>
 800ec06:	4606      	mov	r6, r0
 800ec08:	4620      	mov	r0, r4
 800ec0a:	f7ff fc71 	bl	800e4f0 <uxr_flash_output_streams>
 800ec0e:	4629      	mov	r1, r5
 800ec10:	4620      	mov	r0, r4
 800ec12:	f7ff feb3 	bl	800e97c <listen_message_reliably>
 800ec16:	f001 f9ef 	bl	800fff8 <uxr_millis>
 800ec1a:	1b83      	subs	r3, r0, r6
 800ec1c:	1ae9      	subs	r1, r5, r3
 800ec1e:	2900      	cmp	r1, #0
 800ec20:	dcf6      	bgt.n	800ec10 <uxr_run_session_timeout+0x14>
 800ec22:	f104 0008 	add.w	r0, r4, #8
 800ec26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ec2a:	f001 b989 	b.w	800ff40 <uxr_output_streams_confirmed>
 800ec2e:	bf00      	nop

0800ec30 <uxr_run_session_until_data>:
 800ec30:	b570      	push	{r4, r5, r6, lr}
 800ec32:	4604      	mov	r4, r0
 800ec34:	460d      	mov	r5, r1
 800ec36:	f001 f9df 	bl	800fff8 <uxr_millis>
 800ec3a:	4606      	mov	r6, r0
 800ec3c:	4620      	mov	r0, r4
 800ec3e:	f7ff fc57 	bl	800e4f0 <uxr_flash_output_streams>
 800ec42:	2300      	movs	r3, #0
 800ec44:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800ec48:	4629      	mov	r1, r5
 800ec4a:	e005      	b.n	800ec58 <uxr_run_session_until_data+0x28>
 800ec4c:	f001 f9d4 	bl	800fff8 <uxr_millis>
 800ec50:	1b83      	subs	r3, r0, r6
 800ec52:	1ae9      	subs	r1, r5, r3
 800ec54:	2900      	cmp	r1, #0
 800ec56:	dd07      	ble.n	800ec68 <uxr_run_session_until_data+0x38>
 800ec58:	4620      	mov	r0, r4
 800ec5a:	f7ff fe8f 	bl	800e97c <listen_message_reliably>
 800ec5e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800ec62:	2800      	cmp	r0, #0
 800ec64:	d0f2      	beq.n	800ec4c <uxr_run_session_until_data+0x1c>
 800ec66:	bd70      	pop	{r4, r5, r6, pc}
 800ec68:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800ec6c:	bd70      	pop	{r4, r5, r6, pc}
 800ec6e:	bf00      	nop

0800ec70 <uxr_run_session_until_confirm_delivery>:
 800ec70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec74:	4606      	mov	r6, r0
 800ec76:	460d      	mov	r5, r1
 800ec78:	f001 f9be 	bl	800fff8 <uxr_millis>
 800ec7c:	4607      	mov	r7, r0
 800ec7e:	4630      	mov	r0, r6
 800ec80:	f7ff fc36 	bl	800e4f0 <uxr_flash_output_streams>
 800ec84:	2d00      	cmp	r5, #0
 800ec86:	f106 0808 	add.w	r8, r6, #8
 800ec8a:	bfa8      	it	ge
 800ec8c:	462c      	movge	r4, r5
 800ec8e:	da07      	bge.n	800eca0 <uxr_run_session_until_confirm_delivery+0x30>
 800ec90:	e00e      	b.n	800ecb0 <uxr_run_session_until_confirm_delivery+0x40>
 800ec92:	f7ff fe73 	bl	800e97c <listen_message_reliably>
 800ec96:	f001 f9af 	bl	800fff8 <uxr_millis>
 800ec9a:	1bc3      	subs	r3, r0, r7
 800ec9c:	1aec      	subs	r4, r5, r3
 800ec9e:	d407      	bmi.n	800ecb0 <uxr_run_session_until_confirm_delivery+0x40>
 800eca0:	4640      	mov	r0, r8
 800eca2:	f001 f94d 	bl	800ff40 <uxr_output_streams_confirmed>
 800eca6:	4603      	mov	r3, r0
 800eca8:	4621      	mov	r1, r4
 800ecaa:	4630      	mov	r0, r6
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d0f0      	beq.n	800ec92 <uxr_run_session_until_confirm_delivery+0x22>
 800ecb0:	4640      	mov	r0, r8
 800ecb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ecb6:	f001 b943 	b.w	800ff40 <uxr_output_streams_confirmed>
 800ecba:	bf00      	nop

0800ecbc <uxr_run_session_until_all_status>:
 800ecbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecc0:	9c08      	ldr	r4, [sp, #32]
 800ecc2:	4606      	mov	r6, r0
 800ecc4:	460f      	mov	r7, r1
 800ecc6:	4691      	mov	r9, r2
 800ecc8:	461d      	mov	r5, r3
 800ecca:	f7ff fc11 	bl	800e4f0 <uxr_flash_output_streams>
 800ecce:	b124      	cbz	r4, 800ecda <uxr_run_session_until_all_status+0x1e>
 800ecd0:	4622      	mov	r2, r4
 800ecd2:	21ff      	movs	r1, #255	@ 0xff
 800ecd4:	4628      	mov	r0, r5
 800ecd6:	f008 f995 	bl	8017004 <memset>
 800ecda:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800ecde:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800ece0:	f001 f98a 	bl	800fff8 <uxr_millis>
 800ece4:	3d01      	subs	r5, #1
 800ece6:	f1a9 0902 	sub.w	r9, r9, #2
 800ecea:	4680      	mov	r8, r0
 800ecec:	4639      	mov	r1, r7
 800ecee:	4630      	mov	r0, r6
 800ecf0:	f7ff fe44 	bl	800e97c <listen_message_reliably>
 800ecf4:	f001 f980 	bl	800fff8 <uxr_millis>
 800ecf8:	eba0 0008 	sub.w	r0, r0, r8
 800ecfc:	1a39      	subs	r1, r7, r0
 800ecfe:	b344      	cbz	r4, 800ed52 <uxr_run_session_until_all_status+0x96>
 800ed00:	4628      	mov	r0, r5
 800ed02:	46ac      	mov	ip, r5
 800ed04:	2301      	movs	r3, #1
 800ed06:	e002      	b.n	800ed0e <uxr_run_session_until_all_status+0x52>
 800ed08:	42a3      	cmp	r3, r4
 800ed0a:	d20d      	bcs.n	800ed28 <uxr_run_session_until_all_status+0x6c>
 800ed0c:	3301      	adds	r3, #1
 800ed0e:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800ed12:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800ed16:	d1f7      	bne.n	800ed08 <uxr_run_session_until_all_status+0x4c>
 800ed18:	42a3      	cmp	r3, r4
 800ed1a:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800ed1e:	d213      	bcs.n	800ed48 <uxr_run_session_until_all_status+0x8c>
 800ed20:	2a00      	cmp	r2, #0
 800ed22:	d0f3      	beq.n	800ed0c <uxr_run_session_until_all_status+0x50>
 800ed24:	2900      	cmp	r1, #0
 800ed26:	dce2      	bgt.n	800ecee <uxr_run_session_until_all_status+0x32>
 800ed28:	2300      	movs	r3, #0
 800ed2a:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800ed2c:	442c      	add	r4, r5
 800ed2e:	e001      	b.n	800ed34 <uxr_run_session_until_all_status+0x78>
 800ed30:	2b01      	cmp	r3, #1
 800ed32:	d812      	bhi.n	800ed5a <uxr_run_session_until_all_status+0x9e>
 800ed34:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800ed38:	4284      	cmp	r4, r0
 800ed3a:	d1f9      	bne.n	800ed30 <uxr_run_session_until_all_status+0x74>
 800ed3c:	2b01      	cmp	r3, #1
 800ed3e:	bf8c      	ite	hi
 800ed40:	2000      	movhi	r0, #0
 800ed42:	2001      	movls	r0, #1
 800ed44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed48:	2900      	cmp	r1, #0
 800ed4a:	dded      	ble.n	800ed28 <uxr_run_session_until_all_status+0x6c>
 800ed4c:	2a00      	cmp	r2, #0
 800ed4e:	d1ce      	bne.n	800ecee <uxr_run_session_until_all_status+0x32>
 800ed50:	e7ea      	b.n	800ed28 <uxr_run_session_until_all_status+0x6c>
 800ed52:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800ed54:	2001      	movs	r0, #1
 800ed56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed5a:	2000      	movs	r0, #0
 800ed5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800ed60 <wait_session_status>:
 800ed60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed64:	4604      	mov	r4, r0
 800ed66:	b09d      	sub	sp, #116	@ 0x74
 800ed68:	20ff      	movs	r0, #255	@ 0xff
 800ed6a:	7160      	strb	r0, [r4, #5]
 800ed6c:	9303      	str	r3, [sp, #12]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	f000 80b6 	beq.w	800eee0 <wait_session_status+0x180>
 800ed74:	468a      	mov	sl, r1
 800ed76:	4691      	mov	r9, r2
 800ed78:	f04f 0b00 	mov.w	fp, #0
 800ed7c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ed7e:	464a      	mov	r2, r9
 800ed80:	e9d3 0500 	ldrd	r0, r5, [r3]
 800ed84:	4651      	mov	r1, sl
 800ed86:	47a8      	blx	r5
 800ed88:	f001 f936 	bl	800fff8 <uxr_millis>
 800ed8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ed90:	4605      	mov	r5, r0
 800ed92:	e009      	b.n	800eda8 <wait_session_status+0x48>
 800ed94:	f001 f930 	bl	800fff8 <uxr_millis>
 800ed98:	1b40      	subs	r0, r0, r5
 800ed9a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	dd40      	ble.n	800ee24 <wait_session_status+0xc4>
 800eda2:	7960      	ldrb	r0, [r4, #5]
 800eda4:	28ff      	cmp	r0, #255	@ 0xff
 800eda6:	d145      	bne.n	800ee34 <wait_session_status+0xd4>
 800eda8:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800edaa:	a908      	add	r1, sp, #32
 800edac:	6896      	ldr	r6, [r2, #8]
 800edae:	6810      	ldr	r0, [r2, #0]
 800edb0:	aa09      	add	r2, sp, #36	@ 0x24
 800edb2:	47b0      	blx	r6
 800edb4:	2800      	cmp	r0, #0
 800edb6:	d0ed      	beq.n	800ed94 <wait_session_status+0x34>
 800edb8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800edbc:	a80c      	add	r0, sp, #48	@ 0x30
 800edbe:	f7fe fe89 	bl	800dad4 <ucdr_init_buffer>
 800edc2:	2600      	movs	r6, #0
 800edc4:	f10d 031e 	add.w	r3, sp, #30
 800edc8:	aa07      	add	r2, sp, #28
 800edca:	a90c      	add	r1, sp, #48	@ 0x30
 800edcc:	4620      	mov	r0, r4
 800edce:	f88d 601c 	strb.w	r6, [sp, #28]
 800edd2:	f000 fa87 	bl	800f2e4 <uxr_read_session_header>
 800edd6:	2800      	cmp	r0, #0
 800edd8:	d0dc      	beq.n	800ed94 <wait_session_status+0x34>
 800edda:	4631      	mov	r1, r6
 800eddc:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800ede0:	f000 ffb6 	bl	800fd50 <uxr_stream_id_from_raw>
 800ede4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800ede8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800edec:	9302      	str	r3, [sp, #8]
 800edee:	2f01      	cmp	r7, #1
 800edf0:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800edf4:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800edf8:	d05c      	beq.n	800eeb4 <wait_session_status+0x154>
 800edfa:	2f02      	cmp	r7, #2
 800edfc:	d020      	beq.n	800ee40 <wait_session_status+0xe0>
 800edfe:	2f00      	cmp	r7, #0
 800ee00:	d1c8      	bne.n	800ed94 <wait_session_status+0x34>
 800ee02:	4639      	mov	r1, r7
 800ee04:	4638      	mov	r0, r7
 800ee06:	f000 ffa3 	bl	800fd50 <uxr_stream_id_from_raw>
 800ee0a:	a90c      	add	r1, sp, #48	@ 0x30
 800ee0c:	4602      	mov	r2, r0
 800ee0e:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ee10:	4620      	mov	r0, r4
 800ee12:	f7ff fc2b 	bl	800e66c <read_submessage_list>
 800ee16:	f001 f8ef 	bl	800fff8 <uxr_millis>
 800ee1a:	1b40      	subs	r0, r0, r5
 800ee1c:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	dcbe      	bgt.n	800eda2 <wait_session_status+0x42>
 800ee24:	9b03      	ldr	r3, [sp, #12]
 800ee26:	7960      	ldrb	r0, [r4, #5]
 800ee28:	f10b 0b01 	add.w	fp, fp, #1
 800ee2c:	455b      	cmp	r3, fp
 800ee2e:	d001      	beq.n	800ee34 <wait_session_status+0xd4>
 800ee30:	28ff      	cmp	r0, #255	@ 0xff
 800ee32:	d0a3      	beq.n	800ed7c <wait_session_status+0x1c>
 800ee34:	38ff      	subs	r0, #255	@ 0xff
 800ee36:	bf18      	it	ne
 800ee38:	2001      	movne	r0, #1
 800ee3a:	b01d      	add	sp, #116	@ 0x74
 800ee3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee40:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800ee44:	9304      	str	r3, [sp, #16]
 800ee46:	4631      	mov	r1, r6
 800ee48:	f104 0008 	add.w	r0, r4, #8
 800ee4c:	f001 f86e 	bl	800ff2c <uxr_get_input_reliable_stream>
 800ee50:	4680      	mov	r8, r0
 800ee52:	b348      	cbz	r0, 800eea8 <wait_session_status+0x148>
 800ee54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ee56:	9205      	str	r2, [sp, #20]
 800ee58:	a80c      	add	r0, sp, #48	@ 0x30
 800ee5a:	f7fe fe6b 	bl	800db34 <ucdr_buffer_remaining>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	f10d 001d 	add.w	r0, sp, #29
 800ee64:	9000      	str	r0, [sp, #0]
 800ee66:	9a05      	ldr	r2, [sp, #20]
 800ee68:	9902      	ldr	r1, [sp, #8]
 800ee6a:	4640      	mov	r0, r8
 800ee6c:	f006 fc0a 	bl	8015684 <uxr_receive_reliable_message>
 800ee70:	b1d0      	cbz	r0, 800eea8 <wait_session_status+0x148>
 800ee72:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d03a      	beq.n	800eef0 <wait_session_status+0x190>
 800ee7a:	9f04      	ldr	r7, [sp, #16]
 800ee7c:	e00a      	b.n	800ee94 <wait_session_status+0x134>
 800ee7e:	f04f 0302 	mov.w	r3, #2
 800ee82:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800ee86:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800ee8a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800ee8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ee90:	f7ff fbec 	bl	800e66c <read_submessage_list>
 800ee94:	a914      	add	r1, sp, #80	@ 0x50
 800ee96:	2204      	movs	r2, #4
 800ee98:	4640      	mov	r0, r8
 800ee9a:	f006 fc73 	bl	8015784 <uxr_next_input_reliable_buffer_available>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	a914      	add	r1, sp, #80	@ 0x50
 800eea2:	4620      	mov	r0, r4
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d1ea      	bne.n	800ee7e <wait_session_status+0x11e>
 800eea8:	9904      	ldr	r1, [sp, #16]
 800eeaa:	4632      	mov	r2, r6
 800eeac:	4620      	mov	r0, r4
 800eeae:	f7ff fa57 	bl	800e360 <write_submessage_acknack.isra.0>
 800eeb2:	e76f      	b.n	800ed94 <wait_session_status+0x34>
 800eeb4:	4631      	mov	r1, r6
 800eeb6:	f104 0008 	add.w	r0, r4, #8
 800eeba:	f001 f82d 	bl	800ff18 <uxr_get_input_best_effort_stream>
 800eebe:	2800      	cmp	r0, #0
 800eec0:	f43f af68 	beq.w	800ed94 <wait_session_status+0x34>
 800eec4:	9902      	ldr	r1, [sp, #8]
 800eec6:	f006 fb49 	bl	801555c <uxr_receive_best_effort_message>
 800eeca:	2800      	cmp	r0, #0
 800eecc:	f43f af62 	beq.w	800ed94 <wait_session_status+0x34>
 800eed0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800eed4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800eed6:	a90c      	add	r1, sp, #48	@ 0x30
 800eed8:	4620      	mov	r0, r4
 800eeda:	f7ff fbc7 	bl	800e66c <read_submessage_list>
 800eede:	e759      	b.n	800ed94 <wait_session_status+0x34>
 800eee0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800eee2:	e9d3 0400 	ldrd	r0, r4, [r3]
 800eee6:	47a0      	blx	r4
 800eee8:	2001      	movs	r0, #1
 800eeea:	b01d      	add	sp, #116	@ 0x74
 800eeec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eef0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800eef4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800eef6:	a90c      	add	r1, sp, #48	@ 0x30
 800eef8:	4620      	mov	r0, r4
 800eefa:	f7ff fbb7 	bl	800e66c <read_submessage_list>
 800eefe:	e7bc      	b.n	800ee7a <wait_session_status+0x11a>

0800ef00 <uxr_delete_session_retries>:
 800ef00:	b530      	push	{r4, r5, lr}
 800ef02:	b08f      	sub	sp, #60	@ 0x3c
 800ef04:	4604      	mov	r4, r0
 800ef06:	460d      	mov	r5, r1
 800ef08:	f000 fa2e 	bl	800f368 <uxr_session_header_offset>
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	2210      	movs	r2, #16
 800ef10:	9000      	str	r0, [sp, #0]
 800ef12:	a902      	add	r1, sp, #8
 800ef14:	a806      	add	r0, sp, #24
 800ef16:	f7fe fdcb 	bl	800dab0 <ucdr_init_buffer_origin_offset>
 800ef1a:	a906      	add	r1, sp, #24
 800ef1c:	4620      	mov	r0, r4
 800ef1e:	f000 f973 	bl	800f208 <uxr_buffer_delete_session>
 800ef22:	2200      	movs	r2, #0
 800ef24:	4611      	mov	r1, r2
 800ef26:	9b06      	ldr	r3, [sp, #24]
 800ef28:	4620      	mov	r0, r4
 800ef2a:	f000 f9c7 	bl	800f2bc <uxr_stamp_session_header>
 800ef2e:	a806      	add	r0, sp, #24
 800ef30:	f7fe fdfc 	bl	800db2c <ucdr_buffer_length>
 800ef34:	462b      	mov	r3, r5
 800ef36:	4602      	mov	r2, r0
 800ef38:	a902      	add	r1, sp, #8
 800ef3a:	4620      	mov	r0, r4
 800ef3c:	f7ff ff10 	bl	800ed60 <wait_session_status>
 800ef40:	b118      	cbz	r0, 800ef4a <uxr_delete_session_retries+0x4a>
 800ef42:	7960      	ldrb	r0, [r4, #5]
 800ef44:	fab0 f080 	clz	r0, r0
 800ef48:	0940      	lsrs	r0, r0, #5
 800ef4a:	b00f      	add	sp, #60	@ 0x3c
 800ef4c:	bd30      	pop	{r4, r5, pc}
 800ef4e:	bf00      	nop

0800ef50 <uxr_create_session>:
 800ef50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef54:	f100 0b08 	add.w	fp, r0, #8
 800ef58:	b0ab      	sub	sp, #172	@ 0xac
 800ef5a:	4604      	mov	r4, r0
 800ef5c:	4658      	mov	r0, fp
 800ef5e:	f000 ff2b 	bl	800fdb8 <uxr_reset_stream_storage>
 800ef62:	4620      	mov	r0, r4
 800ef64:	f000 fa00 	bl	800f368 <uxr_session_header_offset>
 800ef68:	2300      	movs	r3, #0
 800ef6a:	9000      	str	r0, [sp, #0]
 800ef6c:	221c      	movs	r2, #28
 800ef6e:	a90b      	add	r1, sp, #44	@ 0x2c
 800ef70:	a812      	add	r0, sp, #72	@ 0x48
 800ef72:	f7fe fd9d 	bl	800dab0 <ucdr_init_buffer_origin_offset>
 800ef76:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ef78:	8a1a      	ldrh	r2, [r3, #16]
 800ef7a:	3a04      	subs	r2, #4
 800ef7c:	b292      	uxth	r2, r2
 800ef7e:	a912      	add	r1, sp, #72	@ 0x48
 800ef80:	4620      	mov	r0, r4
 800ef82:	f000 f917 	bl	800f1b4 <uxr_buffer_create_session>
 800ef86:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ef88:	4620      	mov	r0, r4
 800ef8a:	f000 f983 	bl	800f294 <uxr_stamp_create_session_header>
 800ef8e:	a812      	add	r0, sp, #72	@ 0x48
 800ef90:	f7fe fdcc 	bl	800db2c <ucdr_buffer_length>
 800ef94:	23ff      	movs	r3, #255	@ 0xff
 800ef96:	7163      	strb	r3, [r4, #5]
 800ef98:	230a      	movs	r3, #10
 800ef9a:	46da      	mov	sl, fp
 800ef9c:	9303      	str	r3, [sp, #12]
 800ef9e:	4683      	mov	fp, r0
 800efa0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800efa2:	465a      	mov	r2, fp
 800efa4:	e9d3 0500 	ldrd	r0, r5, [r3]
 800efa8:	a90b      	add	r1, sp, #44	@ 0x2c
 800efaa:	47a8      	blx	r5
 800efac:	f001 f824 	bl	800fff8 <uxr_millis>
 800efb0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800efb4:	4605      	mov	r5, r0
 800efb6:	e009      	b.n	800efcc <uxr_create_session+0x7c>
 800efb8:	f001 f81e 	bl	800fff8 <uxr_millis>
 800efbc:	1b40      	subs	r0, r0, r5
 800efbe:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	7962      	ldrb	r2, [r4, #5]
 800efc6:	dd38      	ble.n	800f03a <uxr_create_session+0xea>
 800efc8:	2aff      	cmp	r2, #255	@ 0xff
 800efca:	d13c      	bne.n	800f046 <uxr_create_session+0xf6>
 800efcc:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800efce:	a907      	add	r1, sp, #28
 800efd0:	6896      	ldr	r6, [r2, #8]
 800efd2:	6810      	ldr	r0, [r2, #0]
 800efd4:	aa08      	add	r2, sp, #32
 800efd6:	47b0      	blx	r6
 800efd8:	2800      	cmp	r0, #0
 800efda:	d0ed      	beq.n	800efb8 <uxr_create_session+0x68>
 800efdc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800efe0:	a81a      	add	r0, sp, #104	@ 0x68
 800efe2:	f7fe fd77 	bl	800dad4 <ucdr_init_buffer>
 800efe6:	2600      	movs	r6, #0
 800efe8:	f10d 031a 	add.w	r3, sp, #26
 800efec:	aa06      	add	r2, sp, #24
 800efee:	a91a      	add	r1, sp, #104	@ 0x68
 800eff0:	4620      	mov	r0, r4
 800eff2:	f88d 6018 	strb.w	r6, [sp, #24]
 800eff6:	f000 f975 	bl	800f2e4 <uxr_read_session_header>
 800effa:	2800      	cmp	r0, #0
 800effc:	d0dc      	beq.n	800efb8 <uxr_create_session+0x68>
 800effe:	4631      	mov	r1, r6
 800f000:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f004:	f000 fea4 	bl	800fd50 <uxr_stream_id_from_raw>
 800f008:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800f00c:	2e01      	cmp	r6, #1
 800f00e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800f012:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800f016:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800f01a:	d053      	beq.n	800f0c4 <uxr_create_session+0x174>
 800f01c:	2e02      	cmp	r6, #2
 800f01e:	d018      	beq.n	800f052 <uxr_create_session+0x102>
 800f020:	2e00      	cmp	r6, #0
 800f022:	d1c9      	bne.n	800efb8 <uxr_create_session+0x68>
 800f024:	4631      	mov	r1, r6
 800f026:	4630      	mov	r0, r6
 800f028:	f000 fe92 	bl	800fd50 <uxr_stream_id_from_raw>
 800f02c:	a91a      	add	r1, sp, #104	@ 0x68
 800f02e:	4602      	mov	r2, r0
 800f030:	900a      	str	r0, [sp, #40]	@ 0x28
 800f032:	4620      	mov	r0, r4
 800f034:	f7ff fb1a 	bl	800e66c <read_submessage_list>
 800f038:	e7be      	b.n	800efb8 <uxr_create_session+0x68>
 800f03a:	9b03      	ldr	r3, [sp, #12]
 800f03c:	3b01      	subs	r3, #1
 800f03e:	9303      	str	r3, [sp, #12]
 800f040:	d001      	beq.n	800f046 <uxr_create_session+0xf6>
 800f042:	2aff      	cmp	r2, #255	@ 0xff
 800f044:	d0ac      	beq.n	800efa0 <uxr_create_session+0x50>
 800f046:	2a00      	cmp	r2, #0
 800f048:	d051      	beq.n	800f0ee <uxr_create_session+0x19e>
 800f04a:	2000      	movs	r0, #0
 800f04c:	b02b      	add	sp, #172	@ 0xac
 800f04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f052:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800f056:	9304      	str	r3, [sp, #16]
 800f058:	4639      	mov	r1, r7
 800f05a:	4650      	mov	r0, sl
 800f05c:	f000 ff66 	bl	800ff2c <uxr_get_input_reliable_stream>
 800f060:	4680      	mov	r8, r0
 800f062:	b348      	cbz	r0, 800f0b8 <uxr_create_session+0x168>
 800f064:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f066:	9205      	str	r2, [sp, #20]
 800f068:	a81a      	add	r0, sp, #104	@ 0x68
 800f06a:	f7fe fd63 	bl	800db34 <ucdr_buffer_remaining>
 800f06e:	4603      	mov	r3, r0
 800f070:	f10d 0019 	add.w	r0, sp, #25
 800f074:	9000      	str	r0, [sp, #0]
 800f076:	9a05      	ldr	r2, [sp, #20]
 800f078:	4649      	mov	r1, r9
 800f07a:	4640      	mov	r0, r8
 800f07c:	f006 fb02 	bl	8015684 <uxr_receive_reliable_message>
 800f080:	b1d0      	cbz	r0, 800f0b8 <uxr_create_session+0x168>
 800f082:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d038      	beq.n	800f0fc <uxr_create_session+0x1ac>
 800f08a:	9e04      	ldr	r6, [sp, #16]
 800f08c:	e00a      	b.n	800f0a4 <uxr_create_session+0x154>
 800f08e:	f04f 0302 	mov.w	r3, #2
 800f092:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800f096:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800f09a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f09e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f0a0:	f7ff fae4 	bl	800e66c <read_submessage_list>
 800f0a4:	a922      	add	r1, sp, #136	@ 0x88
 800f0a6:	2204      	movs	r2, #4
 800f0a8:	4640      	mov	r0, r8
 800f0aa:	f006 fb6b 	bl	8015784 <uxr_next_input_reliable_buffer_available>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	a922      	add	r1, sp, #136	@ 0x88
 800f0b2:	4620      	mov	r0, r4
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d1ea      	bne.n	800f08e <uxr_create_session+0x13e>
 800f0b8:	9904      	ldr	r1, [sp, #16]
 800f0ba:	463a      	mov	r2, r7
 800f0bc:	4620      	mov	r0, r4
 800f0be:	f7ff f94f 	bl	800e360 <write_submessage_acknack.isra.0>
 800f0c2:	e779      	b.n	800efb8 <uxr_create_session+0x68>
 800f0c4:	4639      	mov	r1, r7
 800f0c6:	4650      	mov	r0, sl
 800f0c8:	f000 ff26 	bl	800ff18 <uxr_get_input_best_effort_stream>
 800f0cc:	2800      	cmp	r0, #0
 800f0ce:	f43f af73 	beq.w	800efb8 <uxr_create_session+0x68>
 800f0d2:	4649      	mov	r1, r9
 800f0d4:	f006 fa42 	bl	801555c <uxr_receive_best_effort_message>
 800f0d8:	2800      	cmp	r0, #0
 800f0da:	f43f af6d 	beq.w	800efb8 <uxr_create_session+0x68>
 800f0de:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800f0e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f0e4:	a91a      	add	r1, sp, #104	@ 0x68
 800f0e6:	4620      	mov	r0, r4
 800f0e8:	f7ff fac0 	bl	800e66c <read_submessage_list>
 800f0ec:	e764      	b.n	800efb8 <uxr_create_session+0x68>
 800f0ee:	4650      	mov	r0, sl
 800f0f0:	f000 fe62 	bl	800fdb8 <uxr_reset_stream_storage>
 800f0f4:	2001      	movs	r0, #1
 800f0f6:	b02b      	add	sp, #172	@ 0xac
 800f0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0fc:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800f100:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f102:	a91a      	add	r1, sp, #104	@ 0x68
 800f104:	4620      	mov	r0, r4
 800f106:	f7ff fab1 	bl	800e66c <read_submessage_list>
 800f10a:	e7be      	b.n	800f08a <uxr_create_session+0x13a>

0800f10c <uxr_prepare_stream_to_write_submessage>:
 800f10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f110:	b082      	sub	sp, #8
 800f112:	4682      	mov	sl, r0
 800f114:	4610      	mov	r0, r2
 800f116:	4615      	mov	r5, r2
 800f118:	461e      	mov	r6, r3
 800f11a:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800f11e:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800f122:	9101      	str	r1, [sp, #4]
 800f124:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800f128:	f000 ff60 	bl	800ffec <uxr_submessage_padding>
 800f12c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f130:	f105 0904 	add.w	r9, r5, #4
 800f134:	2b01      	cmp	r3, #1
 800f136:	4481      	add	r9, r0
 800f138:	d01d      	beq.n	800f176 <uxr_prepare_stream_to_write_submessage+0x6a>
 800f13a:	2b02      	cmp	r3, #2
 800f13c:	d116      	bne.n	800f16c <uxr_prepare_stream_to_write_submessage+0x60>
 800f13e:	4621      	mov	r1, r4
 800f140:	f10a 0008 	add.w	r0, sl, #8
 800f144:	f000 fede 	bl	800ff04 <uxr_get_output_reliable_stream>
 800f148:	4604      	mov	r4, r0
 800f14a:	b158      	cbz	r0, 800f164 <uxr_prepare_stream_to_write_submessage+0x58>
 800f14c:	4649      	mov	r1, r9
 800f14e:	4632      	mov	r2, r6
 800f150:	f006 fcd4 	bl	8015afc <uxr_prepare_reliable_buffer_to_write>
 800f154:	4604      	mov	r4, r0
 800f156:	b12c      	cbz	r4, 800f164 <uxr_prepare_stream_to_write_submessage+0x58>
 800f158:	4643      	mov	r3, r8
 800f15a:	b2aa      	uxth	r2, r5
 800f15c:	4639      	mov	r1, r7
 800f15e:	4630      	mov	r0, r6
 800f160:	f000 ff04 	bl	800ff6c <uxr_buffer_submessage_header>
 800f164:	4620      	mov	r0, r4
 800f166:	b002      	add	sp, #8
 800f168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f16c:	2400      	movs	r4, #0
 800f16e:	4620      	mov	r0, r4
 800f170:	b002      	add	sp, #8
 800f172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f176:	4621      	mov	r1, r4
 800f178:	f10a 0008 	add.w	r0, sl, #8
 800f17c:	f000 feba 	bl	800fef4 <uxr_get_output_best_effort_stream>
 800f180:	4604      	mov	r4, r0
 800f182:	2800      	cmp	r0, #0
 800f184:	d0ee      	beq.n	800f164 <uxr_prepare_stream_to_write_submessage+0x58>
 800f186:	4649      	mov	r1, r9
 800f188:	4632      	mov	r2, r6
 800f18a:	f006 fbe7 	bl	801595c <uxr_prepare_best_effort_buffer_to_write>
 800f18e:	4604      	mov	r4, r0
 800f190:	e7e1      	b.n	800f156 <uxr_prepare_stream_to_write_submessage+0x4a>
 800f192:	bf00      	nop

0800f194 <uxr_init_session_info>:
 800f194:	0e13      	lsrs	r3, r2, #24
 800f196:	7043      	strb	r3, [r0, #1]
 800f198:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800f19c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800f1a0:	7001      	strb	r1, [r0, #0]
 800f1a2:	70c3      	strb	r3, [r0, #3]
 800f1a4:	2109      	movs	r1, #9
 800f1a6:	23ff      	movs	r3, #255	@ 0xff
 800f1a8:	f880 c002 	strb.w	ip, [r0, #2]
 800f1ac:	7102      	strb	r2, [r0, #4]
 800f1ae:	80c1      	strh	r1, [r0, #6]
 800f1b0:	7143      	strb	r3, [r0, #5]
 800f1b2:	4770      	bx	lr

0800f1b4 <uxr_buffer_create_session>:
 800f1b4:	b530      	push	{r4, r5, lr}
 800f1b6:	b089      	sub	sp, #36	@ 0x24
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	4d12      	ldr	r5, [pc, #72]	@ (800f204 <uxr_buffer_create_session+0x50>)
 800f1bc:	9307      	str	r3, [sp, #28]
 800f1be:	f8ad 201c 	strh.w	r2, [sp, #28]
 800f1c2:	2201      	movs	r2, #1
 800f1c4:	9301      	str	r3, [sp, #4]
 800f1c6:	80c2      	strh	r2, [r0, #6]
 800f1c8:	f88d 2004 	strb.w	r2, [sp, #4]
 800f1cc:	682a      	ldr	r2, [r5, #0]
 800f1ce:	9200      	str	r2, [sp, #0]
 800f1d0:	88aa      	ldrh	r2, [r5, #4]
 800f1d2:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f1d6:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800f1da:	9202      	str	r2, [sp, #8]
 800f1dc:	460c      	mov	r4, r1
 800f1de:	7802      	ldrb	r2, [r0, #0]
 800f1e0:	9303      	str	r3, [sp, #12]
 800f1e2:	4619      	mov	r1, r3
 800f1e4:	f88d 200c 	strb.w	r2, [sp, #12]
 800f1e8:	4620      	mov	r0, r4
 800f1ea:	2210      	movs	r2, #16
 800f1ec:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800f1f0:	9306      	str	r3, [sp, #24]
 800f1f2:	f000 febb 	bl	800ff6c <uxr_buffer_submessage_header>
 800f1f6:	4669      	mov	r1, sp
 800f1f8:	4620      	mov	r0, r4
 800f1fa:	f001 fc9f 	bl	8010b3c <uxr_serialize_CREATE_CLIENT_Payload>
 800f1fe:	b009      	add	sp, #36	@ 0x24
 800f200:	bd30      	pop	{r4, r5, pc}
 800f202:	bf00      	nop
 800f204:	08017fe4 	.word	0x08017fe4

0800f208 <uxr_buffer_delete_session>:
 800f208:	b510      	push	{r4, lr}
 800f20a:	4b0c      	ldr	r3, [pc, #48]	@ (800f23c <uxr_buffer_delete_session+0x34>)
 800f20c:	b082      	sub	sp, #8
 800f20e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800f212:	f8ad c006 	strh.w	ip, [sp, #6]
 800f216:	460c      	mov	r4, r1
 800f218:	2202      	movs	r2, #2
 800f21a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f21e:	80c2      	strh	r2, [r0, #6]
 800f220:	f8ad 3004 	strh.w	r3, [sp, #4]
 800f224:	2204      	movs	r2, #4
 800f226:	2300      	movs	r3, #0
 800f228:	2103      	movs	r1, #3
 800f22a:	4620      	mov	r0, r4
 800f22c:	f000 fe9e 	bl	800ff6c <uxr_buffer_submessage_header>
 800f230:	a901      	add	r1, sp, #4
 800f232:	4620      	mov	r0, r4
 800f234:	f001 fd28 	bl	8010c88 <uxr_serialize_DELETE_Payload>
 800f238:	b002      	add	sp, #8
 800f23a:	bd10      	pop	{r4, pc}
 800f23c:	08017fe4 	.word	0x08017fe4

0800f240 <uxr_read_create_session_status>:
 800f240:	b510      	push	{r4, lr}
 800f242:	b088      	sub	sp, #32
 800f244:	4604      	mov	r4, r0
 800f246:	4608      	mov	r0, r1
 800f248:	a901      	add	r1, sp, #4
 800f24a:	f001 fd2d 	bl	8010ca8 <uxr_deserialize_STATUS_AGENT_Payload>
 800f24e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f252:	7163      	strb	r3, [r4, #5]
 800f254:	b008      	add	sp, #32
 800f256:	bd10      	pop	{r4, pc}

0800f258 <uxr_read_delete_session_status>:
 800f258:	b510      	push	{r4, lr}
 800f25a:	4604      	mov	r4, r0
 800f25c:	b084      	sub	sp, #16
 800f25e:	4608      	mov	r0, r1
 800f260:	a902      	add	r1, sp, #8
 800f262:	f001 fd51 	bl	8010d08 <uxr_deserialize_STATUS_Payload>
 800f266:	88e3      	ldrh	r3, [r4, #6]
 800f268:	2b02      	cmp	r3, #2
 800f26a:	d001      	beq.n	800f270 <uxr_read_delete_session_status+0x18>
 800f26c:	b004      	add	sp, #16
 800f26e:	bd10      	pop	{r4, pc}
 800f270:	f10d 000a 	add.w	r0, sp, #10
 800f274:	f7fe feca 	bl	800e00c <uxr_object_id_from_raw>
 800f278:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800f27c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800f280:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f284:	b29b      	uxth	r3, r3
 800f286:	2b02      	cmp	r3, #2
 800f288:	bf04      	itt	eq
 800f28a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800f28e:	7163      	strbeq	r3, [r4, #5]
 800f290:	b004      	add	sp, #16
 800f292:	bd10      	pop	{r4, pc}

0800f294 <uxr_stamp_create_session_header>:
 800f294:	b510      	push	{r4, lr}
 800f296:	2208      	movs	r2, #8
 800f298:	b08a      	sub	sp, #40	@ 0x28
 800f29a:	4604      	mov	r4, r0
 800f29c:	eb0d 0002 	add.w	r0, sp, r2
 800f2a0:	f7fe fc18 	bl	800dad4 <ucdr_init_buffer>
 800f2a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2a8:	9400      	str	r4, [sp, #0]
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	461a      	mov	r2, r3
 800f2ae:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800f2b2:	a802      	add	r0, sp, #8
 800f2b4:	f000 fed0 	bl	8010058 <uxr_serialize_message_header>
 800f2b8:	b00a      	add	sp, #40	@ 0x28
 800f2ba:	bd10      	pop	{r4, pc}

0800f2bc <uxr_stamp_session_header>:
 800f2bc:	b530      	push	{r4, r5, lr}
 800f2be:	b08d      	sub	sp, #52	@ 0x34
 800f2c0:	4604      	mov	r4, r0
 800f2c2:	460d      	mov	r5, r1
 800f2c4:	9203      	str	r2, [sp, #12]
 800f2c6:	4619      	mov	r1, r3
 800f2c8:	a804      	add	r0, sp, #16
 800f2ca:	2208      	movs	r2, #8
 800f2cc:	f7fe fc02 	bl	800dad4 <ucdr_init_buffer>
 800f2d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2d4:	9b03      	ldr	r3, [sp, #12]
 800f2d6:	9400      	str	r4, [sp, #0]
 800f2d8:	462a      	mov	r2, r5
 800f2da:	a804      	add	r0, sp, #16
 800f2dc:	f000 febc 	bl	8010058 <uxr_serialize_message_header>
 800f2e0:	b00d      	add	sp, #52	@ 0x34
 800f2e2:	bd30      	pop	{r4, r5, pc}

0800f2e4 <uxr_read_session_header>:
 800f2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2e8:	4607      	mov	r7, r0
 800f2ea:	b084      	sub	sp, #16
 800f2ec:	4608      	mov	r0, r1
 800f2ee:	460c      	mov	r4, r1
 800f2f0:	4615      	mov	r5, r2
 800f2f2:	461e      	mov	r6, r3
 800f2f4:	f7fe fc1e 	bl	800db34 <ucdr_buffer_remaining>
 800f2f8:	2808      	cmp	r0, #8
 800f2fa:	d803      	bhi.n	800f304 <uxr_read_session_header+0x20>
 800f2fc:	2000      	movs	r0, #0
 800f2fe:	b004      	add	sp, #16
 800f300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f304:	f10d 080c 	add.w	r8, sp, #12
 800f308:	4633      	mov	r3, r6
 800f30a:	462a      	mov	r2, r5
 800f30c:	f8cd 8000 	str.w	r8, [sp]
 800f310:	4620      	mov	r0, r4
 800f312:	f10d 010b 	add.w	r1, sp, #11
 800f316:	f000 febd 	bl	8010094 <uxr_deserialize_message_header>
 800f31a:	783a      	ldrb	r2, [r7, #0]
 800f31c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800f320:	4293      	cmp	r3, r2
 800f322:	d1eb      	bne.n	800f2fc <uxr_read_session_header+0x18>
 800f324:	061b      	lsls	r3, r3, #24
 800f326:	d41c      	bmi.n	800f362 <uxr_read_session_header+0x7e>
 800f328:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800f32c:	787b      	ldrb	r3, [r7, #1]
 800f32e:	429a      	cmp	r2, r3
 800f330:	d003      	beq.n	800f33a <uxr_read_session_header+0x56>
 800f332:	2001      	movs	r0, #1
 800f334:	f080 0001 	eor.w	r0, r0, #1
 800f338:	e7e1      	b.n	800f2fe <uxr_read_session_header+0x1a>
 800f33a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800f33e:	78bb      	ldrb	r3, [r7, #2]
 800f340:	429a      	cmp	r2, r3
 800f342:	f107 0102 	add.w	r1, r7, #2
 800f346:	d1f4      	bne.n	800f332 <uxr_read_session_header+0x4e>
 800f348:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800f34c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f350:	429a      	cmp	r2, r3
 800f352:	d1ee      	bne.n	800f332 <uxr_read_session_header+0x4e>
 800f354:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800f358:	784b      	ldrb	r3, [r1, #1]
 800f35a:	429a      	cmp	r2, r3
 800f35c:	d1e9      	bne.n	800f332 <uxr_read_session_header+0x4e>
 800f35e:	2000      	movs	r0, #0
 800f360:	e7e8      	b.n	800f334 <uxr_read_session_header+0x50>
 800f362:	2001      	movs	r0, #1
 800f364:	e7cb      	b.n	800f2fe <uxr_read_session_header+0x1a>
 800f366:	bf00      	nop

0800f368 <uxr_session_header_offset>:
 800f368:	f990 3000 	ldrsb.w	r3, [r0]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	bfac      	ite	ge
 800f370:	2008      	movge	r0, #8
 800f372:	2004      	movlt	r0, #4
 800f374:	4770      	bx	lr
 800f376:	bf00      	nop

0800f378 <uxr_init_base_object_request>:
 800f378:	b510      	push	{r4, lr}
 800f37a:	88c3      	ldrh	r3, [r0, #6]
 800f37c:	b082      	sub	sp, #8
 800f37e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800f382:	9101      	str	r1, [sp, #4]
 800f384:	f1a3 010a 	sub.w	r1, r3, #10
 800f388:	b289      	uxth	r1, r1
 800f38a:	42a1      	cmp	r1, r4
 800f38c:	d80e      	bhi.n	800f3ac <uxr_init_base_object_request+0x34>
 800f38e:	3301      	adds	r3, #1
 800f390:	b29c      	uxth	r4, r3
 800f392:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800f396:	b2db      	uxtb	r3, r3
 800f398:	80c4      	strh	r4, [r0, #6]
 800f39a:	9801      	ldr	r0, [sp, #4]
 800f39c:	7011      	strb	r1, [r2, #0]
 800f39e:	7053      	strb	r3, [r2, #1]
 800f3a0:	1c91      	adds	r1, r2, #2
 800f3a2:	f7fe fe47 	bl	800e034 <uxr_object_id_to_raw>
 800f3a6:	4620      	mov	r0, r4
 800f3a8:	b002      	add	sp, #8
 800f3aa:	bd10      	pop	{r4, pc}
 800f3ac:	230a      	movs	r3, #10
 800f3ae:	2100      	movs	r1, #0
 800f3b0:	461c      	mov	r4, r3
 800f3b2:	e7f1      	b.n	800f398 <uxr_init_base_object_request+0x20>

0800f3b4 <uxr_parse_base_object_request>:
 800f3b4:	b570      	push	{r4, r5, r6, lr}
 800f3b6:	4604      	mov	r4, r0
 800f3b8:	3002      	adds	r0, #2
 800f3ba:	460d      	mov	r5, r1
 800f3bc:	4616      	mov	r6, r2
 800f3be:	f7fe fe25 	bl	800e00c <uxr_object_id_from_raw>
 800f3c2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800f3c6:	8028      	strh	r0, [r5, #0]
 800f3c8:	806b      	strh	r3, [r5, #2]
 800f3ca:	7822      	ldrb	r2, [r4, #0]
 800f3cc:	7863      	ldrb	r3, [r4, #1]
 800f3ce:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f3d2:	8033      	strh	r3, [r6, #0]
 800f3d4:	bd70      	pop	{r4, r5, r6, pc}
 800f3d6:	bf00      	nop

0800f3d8 <uxr_init_framing_io>:
 800f3d8:	2300      	movs	r3, #0
 800f3da:	7041      	strb	r1, [r0, #1]
 800f3dc:	7003      	strb	r3, [r0, #0]
 800f3de:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800f3e0:	4770      	bx	lr
 800f3e2:	bf00      	nop

0800f3e4 <uxr_write_framed_msg>:
 800f3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3e8:	4617      	mov	r7, r2
 800f3ea:	7842      	ldrb	r2, [r0, #1]
 800f3ec:	b083      	sub	sp, #12
 800f3ee:	460e      	mov	r6, r1
 800f3f0:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 800f3f4:	469a      	mov	sl, r3
 800f3f6:	2901      	cmp	r1, #1
 800f3f8:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 800f3fc:	4604      	mov	r4, r0
 800f3fe:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 800f402:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800f406:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 800f40a:	f240 8137 	bls.w	800f67c <uxr_write_framed_msg+0x298>
 800f40e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800f412:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 800f416:	2901      	cmp	r1, #1
 800f418:	f04f 0202 	mov.w	r2, #2
 800f41c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f420:	f240 808f 	bls.w	800f542 <uxr_write_framed_msg+0x15e>
 800f424:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f426:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 800f42a:	b2dd      	uxtb	r5, r3
 800f42c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800f430:	2203      	movs	r2, #3
 800f432:	2901      	cmp	r1, #1
 800f434:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f438:	f240 809a 	bls.w	800f570 <uxr_write_framed_msg+0x18c>
 800f43c:	18a1      	adds	r1, r4, r2
 800f43e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f440:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800f444:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800f448:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800f44c:	3201      	adds	r2, #1
 800f44e:	2801      	cmp	r0, #1
 800f450:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f454:	f240 80a0 	bls.w	800f598 <uxr_write_framed_msg+0x1b4>
 800f458:	18a0      	adds	r0, r4, r2
 800f45a:	3201      	adds	r2, #1
 800f45c:	b2d2      	uxtb	r2, r2
 800f45e:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800f462:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f466:	2b00      	cmp	r3, #0
 800f468:	f000 80a9 	beq.w	800f5be <uxr_write_framed_msg+0x1da>
 800f46c:	f04f 0900 	mov.w	r9, #0
 800f470:	46c8      	mov	r8, r9
 800f472:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800f476:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800f47a:	2901      	cmp	r1, #1
 800f47c:	f240 80c3 	bls.w	800f606 <uxr_write_framed_msg+0x222>
 800f480:	2a29      	cmp	r2, #41	@ 0x29
 800f482:	f200 809f 	bhi.w	800f5c4 <uxr_write_framed_msg+0x1e0>
 800f486:	18a1      	adds	r1, r4, r2
 800f488:	3201      	adds	r2, #1
 800f48a:	b2d2      	uxtb	r2, r2
 800f48c:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800f490:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f494:	ea89 0303 	eor.w	r3, r9, r3
 800f498:	498c      	ldr	r1, [pc, #560]	@ (800f6cc <uxr_write_framed_msg+0x2e8>)
 800f49a:	b2db      	uxtb	r3, r3
 800f49c:	f108 0801 	add.w	r8, r8, #1
 800f4a0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f4a4:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 800f4a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f4aa:	4543      	cmp	r3, r8
 800f4ac:	d8e1      	bhi.n	800f472 <uxr_write_framed_msg+0x8e>
 800f4ae:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800f4b2:	fa5f f889 	uxtb.w	r8, r9
 800f4b6:	9301      	str	r3, [sp, #4]
 800f4b8:	f04f 0900 	mov.w	r9, #0
 800f4bc:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 800f4c0:	fa5f f18a 	uxtb.w	r1, sl
 800f4c4:	2901      	cmp	r1, #1
 800f4c6:	d921      	bls.n	800f50c <uxr_write_framed_msg+0x128>
 800f4c8:	2a29      	cmp	r2, #41	@ 0x29
 800f4ca:	f240 80af 	bls.w	800f62c <uxr_write_framed_msg+0x248>
 800f4ce:	2500      	movs	r5, #0
 800f4d0:	e000      	b.n	800f4d4 <uxr_write_framed_msg+0xf0>
 800f4d2:	b160      	cbz	r0, 800f4ee <uxr_write_framed_msg+0x10a>
 800f4d4:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800f4d8:	1b52      	subs	r2, r2, r5
 800f4da:	465b      	mov	r3, fp
 800f4dc:	4421      	add	r1, r4
 800f4de:	4638      	mov	r0, r7
 800f4e0:	47b0      	blx	r6
 800f4e2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800f4e6:	4405      	add	r5, r0
 800f4e8:	4295      	cmp	r5, r2
 800f4ea:	d3f2      	bcc.n	800f4d2 <uxr_write_framed_msg+0xee>
 800f4ec:	d003      	beq.n	800f4f6 <uxr_write_framed_msg+0x112>
 800f4ee:	2000      	movs	r0, #0
 800f4f0:	b003      	add	sp, #12
 800f4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4f6:	fa5f f18a 	uxtb.w	r1, sl
 800f4fa:	f04f 0300 	mov.w	r3, #0
 800f4fe:	2901      	cmp	r1, #1
 800f500:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800f504:	f04f 0200 	mov.w	r2, #0
 800f508:	f200 8090 	bhi.w	800f62c <uxr_write_framed_msg+0x248>
 800f50c:	1c51      	adds	r1, r2, #1
 800f50e:	b2c9      	uxtb	r1, r1
 800f510:	2929      	cmp	r1, #41	@ 0x29
 800f512:	d8dc      	bhi.n	800f4ce <uxr_write_framed_msg+0xea>
 800f514:	18a5      	adds	r5, r4, r2
 800f516:	4421      	add	r1, r4
 800f518:	3202      	adds	r2, #2
 800f51a:	f088 0820 	eor.w	r8, r8, #32
 800f51e:	4648      	mov	r0, r9
 800f520:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 800f524:	b2d2      	uxtb	r2, r2
 800f526:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800f52a:	f04f 0901 	mov.w	r9, #1
 800f52e:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800f532:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f536:	2800      	cmp	r0, #0
 800f538:	f040 8085 	bne.w	800f646 <uxr_write_framed_msg+0x262>
 800f53c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f540:	e7bc      	b.n	800f4bc <uxr_write_framed_msg+0xd8>
 800f542:	4611      	mov	r1, r2
 800f544:	f04f 0c03 	mov.w	ip, #3
 800f548:	2204      	movs	r2, #4
 800f54a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f54c:	4421      	add	r1, r4
 800f54e:	b2dd      	uxtb	r5, r3
 800f550:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 800f554:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 800f558:	44a4      	add	ip, r4
 800f55a:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800f55e:	f080 0020 	eor.w	r0, r0, #32
 800f562:	2901      	cmp	r1, #1
 800f564:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 800f568:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f56c:	f63f af66 	bhi.w	800f43c <uxr_write_framed_msg+0x58>
 800f570:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f572:	18a0      	adds	r0, r4, r2
 800f574:	f085 0520 	eor.w	r5, r5, #32
 800f578:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800f57c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800f580:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800f584:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 800f588:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800f58c:	3202      	adds	r2, #2
 800f58e:	2801      	cmp	r0, #1
 800f590:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f594:	f63f af60 	bhi.w	800f458 <uxr_write_framed_msg+0x74>
 800f598:	1c50      	adds	r0, r2, #1
 800f59a:	18a5      	adds	r5, r4, r2
 800f59c:	fa54 f080 	uxtab	r0, r4, r0
 800f5a0:	3202      	adds	r2, #2
 800f5a2:	f081 0120 	eor.w	r1, r1, #32
 800f5a6:	b2d2      	uxtb	r2, r2
 800f5a8:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800f5ac:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 800f5b0:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800f5b4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	f47f af57 	bne.w	800f46c <uxr_write_framed_msg+0x88>
 800f5be:	9301      	str	r3, [sp, #4]
 800f5c0:	4698      	mov	r8, r3
 800f5c2:	e779      	b.n	800f4b8 <uxr_write_framed_msg+0xd4>
 800f5c4:	2500      	movs	r5, #0
 800f5c6:	e001      	b.n	800f5cc <uxr_write_framed_msg+0x1e8>
 800f5c8:	2800      	cmp	r0, #0
 800f5ca:	d090      	beq.n	800f4ee <uxr_write_framed_msg+0x10a>
 800f5cc:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800f5d0:	1b52      	subs	r2, r2, r5
 800f5d2:	465b      	mov	r3, fp
 800f5d4:	4421      	add	r1, r4
 800f5d6:	4638      	mov	r0, r7
 800f5d8:	47b0      	blx	r6
 800f5da:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800f5de:	4405      	add	r5, r0
 800f5e0:	4295      	cmp	r5, r2
 800f5e2:	d3f1      	bcc.n	800f5c8 <uxr_write_framed_msg+0x1e4>
 800f5e4:	d183      	bne.n	800f4ee <uxr_write_framed_msg+0x10a>
 800f5e6:	f04f 0300 	mov.w	r3, #0
 800f5ea:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800f5ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f5f0:	4543      	cmp	r3, r8
 800f5f2:	d964      	bls.n	800f6be <uxr_write_framed_msg+0x2da>
 800f5f4:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800f5f8:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800f5fc:	2901      	cmp	r1, #1
 800f5fe:	f04f 0200 	mov.w	r2, #0
 800f602:	f63f af3d 	bhi.w	800f480 <uxr_write_framed_msg+0x9c>
 800f606:	1c51      	adds	r1, r2, #1
 800f608:	b2c9      	uxtb	r1, r1
 800f60a:	2929      	cmp	r1, #41	@ 0x29
 800f60c:	d8da      	bhi.n	800f5c4 <uxr_write_framed_msg+0x1e0>
 800f60e:	18a0      	adds	r0, r4, r2
 800f610:	4421      	add	r1, r4
 800f612:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 800f616:	3202      	adds	r2, #2
 800f618:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 800f61c:	b2d2      	uxtb	r2, r2
 800f61e:	f083 0020 	eor.w	r0, r3, #32
 800f622:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800f626:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f62a:	e733      	b.n	800f494 <uxr_write_framed_msg+0xb0>
 800f62c:	18a1      	adds	r1, r4, r2
 800f62e:	3201      	adds	r2, #1
 800f630:	4648      	mov	r0, r9
 800f632:	b2d2      	uxtb	r2, r2
 800f634:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800f638:	f04f 0901 	mov.w	r9, #1
 800f63c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f640:	2800      	cmp	r0, #0
 800f642:	f43f af7b 	beq.w	800f53c <uxr_write_framed_msg+0x158>
 800f646:	2500      	movs	r5, #0
 800f648:	e002      	b.n	800f650 <uxr_write_framed_msg+0x26c>
 800f64a:	2800      	cmp	r0, #0
 800f64c:	f43f af4f 	beq.w	800f4ee <uxr_write_framed_msg+0x10a>
 800f650:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800f654:	1b52      	subs	r2, r2, r5
 800f656:	465b      	mov	r3, fp
 800f658:	4421      	add	r1, r4
 800f65a:	4638      	mov	r0, r7
 800f65c:	47b0      	blx	r6
 800f65e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800f662:	4405      	add	r5, r0
 800f664:	4295      	cmp	r5, r2
 800f666:	d3f0      	bcc.n	800f64a <uxr_write_framed_msg+0x266>
 800f668:	f47f af41 	bne.w	800f4ee <uxr_write_framed_msg+0x10a>
 800f66c:	2300      	movs	r3, #0
 800f66e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800f672:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f674:	b298      	uxth	r0, r3
 800f676:	b003      	add	sp, #12
 800f678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f67c:	217d      	movs	r1, #125	@ 0x7d
 800f67e:	f082 0220 	eor.w	r2, r2, #32
 800f682:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 800f686:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800f68a:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 800f68e:	2901      	cmp	r1, #1
 800f690:	f04f 0203 	mov.w	r2, #3
 800f694:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f698:	d804      	bhi.n	800f6a4 <uxr_write_framed_msg+0x2c0>
 800f69a:	4611      	mov	r1, r2
 800f69c:	f04f 0c04 	mov.w	ip, #4
 800f6a0:	2205      	movs	r2, #5
 800f6a2:	e752      	b.n	800f54a <uxr_write_framed_msg+0x166>
 800f6a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f6a6:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 800f6aa:	b2dd      	uxtb	r5, r3
 800f6ac:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800f6b0:	2204      	movs	r2, #4
 800f6b2:	2901      	cmp	r1, #1
 800f6b4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f6b8:	f63f aec0 	bhi.w	800f43c <uxr_write_framed_msg+0x58>
 800f6bc:	e758      	b.n	800f570 <uxr_write_framed_msg+0x18c>
 800f6be:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800f6c2:	fa5f f889 	uxtb.w	r8, r9
 800f6c6:	9301      	str	r3, [sp, #4]
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	e6f5      	b.n	800f4b8 <uxr_write_framed_msg+0xd4>
 800f6cc:	08018300 	.word	0x08018300

0800f6d0 <uxr_framing_read_transport>:
 800f6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6d4:	4604      	mov	r4, r0
 800f6d6:	b083      	sub	sp, #12
 800f6d8:	461f      	mov	r7, r3
 800f6da:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800f6de:	4689      	mov	r9, r1
 800f6e0:	4692      	mov	sl, r2
 800f6e2:	f000 fc89 	bl	800fff8 <uxr_millis>
 800f6e6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f6ea:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800f6ee:	42b3      	cmp	r3, r6
 800f6f0:	4680      	mov	r8, r0
 800f6f2:	d061      	beq.n	800f7b8 <uxr_framing_read_transport+0xe8>
 800f6f4:	d81c      	bhi.n	800f730 <uxr_framing_read_transport+0x60>
 800f6f6:	1e75      	subs	r5, r6, #1
 800f6f8:	1aed      	subs	r5, r5, r3
 800f6fa:	b2ed      	uxtb	r5, r5
 800f6fc:	2600      	movs	r6, #0
 800f6fe:	455d      	cmp	r5, fp
 800f700:	d81f      	bhi.n	800f742 <uxr_framing_read_transport+0x72>
 800f702:	19ab      	adds	r3, r5, r6
 800f704:	455b      	cmp	r3, fp
 800f706:	bf84      	itt	hi
 800f708:	ebab 0605 	subhi.w	r6, fp, r5
 800f70c:	b2f6      	uxtbhi	r6, r6
 800f70e:	b9ed      	cbnz	r5, 800f74c <uxr_framing_read_transport+0x7c>
 800f710:	f04f 0b00 	mov.w	fp, #0
 800f714:	f000 fc70 	bl	800fff8 <uxr_millis>
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	eba0 0808 	sub.w	r8, r0, r8
 800f71e:	eba3 0308 	sub.w	r3, r3, r8
 800f722:	4658      	mov	r0, fp
 800f724:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f728:	603b      	str	r3, [r7, #0]
 800f72a:	b003      	add	sp, #12
 800f72c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f730:	2e00      	cmp	r6, #0
 800f732:	d049      	beq.n	800f7c8 <uxr_framing_read_transport+0xf8>
 800f734:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 800f738:	b2ed      	uxtb	r5, r5
 800f73a:	3e01      	subs	r6, #1
 800f73c:	455d      	cmp	r5, fp
 800f73e:	b2f6      	uxtb	r6, r6
 800f740:	d9df      	bls.n	800f702 <uxr_framing_read_transport+0x32>
 800f742:	fa5f f58b 	uxtb.w	r5, fp
 800f746:	2600      	movs	r6, #0
 800f748:	2d00      	cmp	r5, #0
 800f74a:	d0e1      	beq.n	800f710 <uxr_framing_read_transport+0x40>
 800f74c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f750:	3102      	adds	r1, #2
 800f752:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f754:	9300      	str	r3, [sp, #0]
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	4421      	add	r1, r4
 800f75a:	462a      	mov	r2, r5
 800f75c:	4650      	mov	r0, sl
 800f75e:	47c8      	blx	r9
 800f760:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f764:	4a1a      	ldr	r2, [pc, #104]	@ (800f7d0 <uxr_framing_read_transport+0x100>)
 800f766:	4403      	add	r3, r0
 800f768:	0859      	lsrs	r1, r3, #1
 800f76a:	fba2 2101 	umull	r2, r1, r2, r1
 800f76e:	0889      	lsrs	r1, r1, #2
 800f770:	222a      	movs	r2, #42	@ 0x2a
 800f772:	fb02 3111 	mls	r1, r2, r1, r3
 800f776:	4683      	mov	fp, r0
 800f778:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800f77c:	2800      	cmp	r0, #0
 800f77e:	d0c7      	beq.n	800f710 <uxr_framing_read_transport+0x40>
 800f780:	42a8      	cmp	r0, r5
 800f782:	d1c7      	bne.n	800f714 <uxr_framing_read_transport+0x44>
 800f784:	2e00      	cmp	r6, #0
 800f786:	d0c5      	beq.n	800f714 <uxr_framing_read_transport+0x44>
 800f788:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f78a:	9300      	str	r3, [sp, #0]
 800f78c:	3102      	adds	r1, #2
 800f78e:	4632      	mov	r2, r6
 800f790:	4421      	add	r1, r4
 800f792:	2300      	movs	r3, #0
 800f794:	4650      	mov	r0, sl
 800f796:	47c8      	blx	r9
 800f798:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f79c:	4a0c      	ldr	r2, [pc, #48]	@ (800f7d0 <uxr_framing_read_transport+0x100>)
 800f79e:	180b      	adds	r3, r1, r0
 800f7a0:	0859      	lsrs	r1, r3, #1
 800f7a2:	fba2 1201 	umull	r1, r2, r2, r1
 800f7a6:	0892      	lsrs	r2, r2, #2
 800f7a8:	212a      	movs	r1, #42	@ 0x2a
 800f7aa:	fb01 3312 	mls	r3, r1, r2, r3
 800f7ae:	eb00 0b05 	add.w	fp, r0, r5
 800f7b2:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800f7b6:	e7ad      	b.n	800f714 <uxr_framing_read_transport+0x44>
 800f7b8:	2600      	movs	r6, #0
 800f7ba:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800f7be:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800f7c0:	d9bf      	bls.n	800f742 <uxr_framing_read_transport+0x72>
 800f7c2:	2102      	movs	r1, #2
 800f7c4:	2529      	movs	r5, #41	@ 0x29
 800f7c6:	e7c4      	b.n	800f752 <uxr_framing_read_transport+0x82>
 800f7c8:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 800f7cc:	b2ed      	uxtb	r5, r5
 800f7ce:	e796      	b.n	800f6fe <uxr_framing_read_transport+0x2e>
 800f7d0:	30c30c31 	.word	0x30c30c31

0800f7d4 <uxr_read_framed_msg>:
 800f7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7d8:	461e      	mov	r6, r3
 800f7da:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 800f7de:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800f7e2:	429d      	cmp	r5, r3
 800f7e4:	b083      	sub	sp, #12
 800f7e6:	4604      	mov	r4, r0
 800f7e8:	4688      	mov	r8, r1
 800f7ea:	4691      	mov	r9, r2
 800f7ec:	f000 8188 	beq.w	800fb00 <uxr_read_framed_msg+0x32c>
 800f7f0:	7823      	ldrb	r3, [r4, #0]
 800f7f2:	4dc1      	ldr	r5, [pc, #772]	@ (800faf8 <uxr_read_framed_msg+0x324>)
 800f7f4:	4fc1      	ldr	r7, [pc, #772]	@ (800fafc <uxr_read_framed_msg+0x328>)
 800f7f6:	2b07      	cmp	r3, #7
 800f7f8:	d8fd      	bhi.n	800f7f6 <uxr_read_framed_msg+0x22>
 800f7fa:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f7fe:	0115      	.short	0x0115
 800f800:	00d600f6 	.word	0x00d600f6
 800f804:	009000b9 	.word	0x009000b9
 800f808:	0030004d 	.word	0x0030004d
 800f80c:	0008      	.short	0x0008
 800f80e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f812:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f816:	4299      	cmp	r1, r3
 800f818:	f000 814a 	beq.w	800fab0 <uxr_read_framed_msg+0x2dc>
 800f81c:	18e2      	adds	r2, r4, r3
 800f81e:	7892      	ldrb	r2, [r2, #2]
 800f820:	2a7d      	cmp	r2, #125	@ 0x7d
 800f822:	f000 8199 	beq.w	800fb58 <uxr_read_framed_msg+0x384>
 800f826:	3301      	adds	r3, #1
 800f828:	0858      	lsrs	r0, r3, #1
 800f82a:	fba5 1000 	umull	r1, r0, r5, r0
 800f82e:	0880      	lsrs	r0, r0, #2
 800f830:	212a      	movs	r1, #42	@ 0x2a
 800f832:	fb01 3310 	mls	r3, r1, r0, r3
 800f836:	2a7e      	cmp	r2, #126	@ 0x7e
 800f838:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f83c:	f000 8252 	beq.w	800fce4 <uxr_read_framed_msg+0x510>
 800f840:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800f842:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 800f844:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f848:	b29b      	uxth	r3, r3
 800f84a:	2200      	movs	r2, #0
 800f84c:	4299      	cmp	r1, r3
 800f84e:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800f850:	7022      	strb	r2, [r4, #0]
 800f852:	f000 8179 	beq.w	800fb48 <uxr_read_framed_msg+0x374>
 800f856:	2000      	movs	r0, #0
 800f858:	b003      	add	sp, #12
 800f85a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f85e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f862:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f866:	4299      	cmp	r1, r3
 800f868:	f000 8131 	beq.w	800face <uxr_read_framed_msg+0x2fa>
 800f86c:	18e2      	adds	r2, r4, r3
 800f86e:	7890      	ldrb	r0, [r2, #2]
 800f870:	287d      	cmp	r0, #125	@ 0x7d
 800f872:	f000 8190 	beq.w	800fb96 <uxr_read_framed_msg+0x3c2>
 800f876:	3301      	adds	r3, #1
 800f878:	085a      	lsrs	r2, r3, #1
 800f87a:	fba5 1202 	umull	r1, r2, r5, r2
 800f87e:	0892      	lsrs	r2, r2, #2
 800f880:	212a      	movs	r1, #42	@ 0x2a
 800f882:	fb01 3312 	mls	r3, r1, r2, r3
 800f886:	287e      	cmp	r0, #126	@ 0x7e
 800f888:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f88c:	f000 821a 	beq.w	800fcc4 <uxr_read_framed_msg+0x4f0>
 800f890:	2307      	movs	r3, #7
 800f892:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800f894:	7023      	strb	r3, [r4, #0]
 800f896:	e7ae      	b.n	800f7f6 <uxr_read_framed_msg+0x22>
 800f898:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800f89a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800f89e:	459e      	cmp	lr, r3
 800f8a0:	d938      	bls.n	800f914 <uxr_read_framed_msg+0x140>
 800f8a2:	ee07 8a90 	vmov	s15, r8
 800f8a6:	212a      	movs	r1, #42	@ 0x2a
 800f8a8:	e020      	b.n	800f8ec <uxr_read_framed_msg+0x118>
 800f8aa:	f89b c002 	ldrb.w	ip, [fp, #2]
 800f8ae:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 800f8b2:	f000 80d4 	beq.w	800fa5e <uxr_read_framed_msg+0x28a>
 800f8b6:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800f8ba:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f8be:	f000 8219 	beq.w	800fcf4 <uxr_read_framed_msg+0x520>
 800f8c2:	f806 c003 	strb.w	ip, [r6, r3]
 800f8c6:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 800f8ca:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800f8cc:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800f8d0:	ea8a 000c 	eor.w	r0, sl, ip
 800f8d4:	b2c0      	uxtb	r0, r0
 800f8d6:	3301      	adds	r3, #1
 800f8d8:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 800f8dc:	b29b      	uxth	r3, r3
 800f8de:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 800f8e2:	4573      	cmp	r3, lr
 800f8e4:	8663      	strh	r3, [r4, #50]	@ 0x32
 800f8e6:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800f8e8:	f080 8120 	bcs.w	800fb2c <uxr_read_framed_msg+0x358>
 800f8ec:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800f8f0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800f8f4:	f100 0c01 	add.w	ip, r0, #1
 800f8f8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800f8fc:	fba5 8202 	umull	r8, r2, r5, r2
 800f900:	0892      	lsrs	r2, r2, #2
 800f902:	4582      	cmp	sl, r0
 800f904:	eb04 0b00 	add.w	fp, r4, r0
 800f908:	fb01 c212 	mls	r2, r1, r2, ip
 800f90c:	d1cd      	bne.n	800f8aa <uxr_read_framed_msg+0xd6>
 800f90e:	ee17 8a90 	vmov	r8, s15
 800f912:	459e      	cmp	lr, r3
 800f914:	f040 8111 	bne.w	800fb3a <uxr_read_framed_msg+0x366>
 800f918:	2306      	movs	r3, #6
 800f91a:	7023      	strb	r3, [r4, #0]
 800f91c:	e76b      	b.n	800f7f6 <uxr_read_framed_msg+0x22>
 800f91e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800f922:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f926:	4298      	cmp	r0, r3
 800f928:	f000 80c2 	beq.w	800fab0 <uxr_read_framed_msg+0x2dc>
 800f92c:	18e2      	adds	r2, r4, r3
 800f92e:	7891      	ldrb	r1, [r2, #2]
 800f930:	297d      	cmp	r1, #125	@ 0x7d
 800f932:	f000 814c 	beq.w	800fbce <uxr_read_framed_msg+0x3fa>
 800f936:	3301      	adds	r3, #1
 800f938:	085a      	lsrs	r2, r3, #1
 800f93a:	fba5 0202 	umull	r0, r2, r5, r2
 800f93e:	0892      	lsrs	r2, r2, #2
 800f940:	202a      	movs	r0, #42	@ 0x2a
 800f942:	fb00 3312 	mls	r3, r0, r2, r3
 800f946:	297e      	cmp	r1, #126	@ 0x7e
 800f948:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f94c:	f000 81ca 	beq.w	800fce4 <uxr_read_framed_msg+0x510>
 800f950:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800f952:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800f956:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f958:	b29b      	uxth	r3, r3
 800f95a:	2000      	movs	r0, #0
 800f95c:	428b      	cmp	r3, r1
 800f95e:	8623      	strh	r3, [r4, #48]	@ 0x30
 800f960:	8660      	strh	r0, [r4, #50]	@ 0x32
 800f962:	86e0      	strh	r0, [r4, #54]	@ 0x36
 800f964:	f240 80df 	bls.w	800fb26 <uxr_read_framed_msg+0x352>
 800f968:	7020      	strb	r0, [r4, #0]
 800f96a:	b003      	add	sp, #12
 800f96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f970:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f974:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f978:	4299      	cmp	r1, r3
 800f97a:	f000 80a8 	beq.w	800face <uxr_read_framed_msg+0x2fa>
 800f97e:	18e2      	adds	r2, r4, r3
 800f980:	7890      	ldrb	r0, [r2, #2]
 800f982:	287d      	cmp	r0, #125	@ 0x7d
 800f984:	f000 8164 	beq.w	800fc50 <uxr_read_framed_msg+0x47c>
 800f988:	3301      	adds	r3, #1
 800f98a:	085a      	lsrs	r2, r3, #1
 800f98c:	fba5 1202 	umull	r1, r2, r5, r2
 800f990:	0892      	lsrs	r2, r2, #2
 800f992:	212a      	movs	r1, #42	@ 0x2a
 800f994:	fb01 3312 	mls	r3, r1, r2, r3
 800f998:	287e      	cmp	r0, #126	@ 0x7e
 800f99a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f99e:	f000 8191 	beq.w	800fcc4 <uxr_read_framed_msg+0x4f0>
 800f9a2:	2304      	movs	r3, #4
 800f9a4:	8620      	strh	r0, [r4, #48]	@ 0x30
 800f9a6:	7023      	strb	r3, [r4, #0]
 800f9a8:	e725      	b.n	800f7f6 <uxr_read_framed_msg+0x22>
 800f9aa:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800f9ae:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f9b2:	4290      	cmp	r0, r2
 800f9b4:	f000 80b3 	beq.w	800fb1e <uxr_read_framed_msg+0x34a>
 800f9b8:	18a3      	adds	r3, r4, r2
 800f9ba:	7899      	ldrb	r1, [r3, #2]
 800f9bc:	297d      	cmp	r1, #125	@ 0x7d
 800f9be:	f000 8164 	beq.w	800fc8a <uxr_read_framed_msg+0x4b6>
 800f9c2:	3201      	adds	r2, #1
 800f9c4:	0850      	lsrs	r0, r2, #1
 800f9c6:	fba5 3000 	umull	r3, r0, r5, r0
 800f9ca:	0880      	lsrs	r0, r0, #2
 800f9cc:	232a      	movs	r3, #42	@ 0x2a
 800f9ce:	fb03 2210 	mls	r2, r3, r0, r2
 800f9d2:	297e      	cmp	r1, #126	@ 0x7e
 800f9d4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f9d8:	f000 8188 	beq.w	800fcec <uxr_read_framed_msg+0x518>
 800f9dc:	7863      	ldrb	r3, [r4, #1]
 800f9de:	428b      	cmp	r3, r1
 800f9e0:	bf0c      	ite	eq
 800f9e2:	2303      	moveq	r3, #3
 800f9e4:	2300      	movne	r3, #0
 800f9e6:	7023      	strb	r3, [r4, #0]
 800f9e8:	e705      	b.n	800f7f6 <uxr_read_framed_msg+0x22>
 800f9ea:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f9ee:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	4299      	cmp	r1, r3
 800f9f6:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 800f9fa:	d06c      	beq.n	800fad6 <uxr_read_framed_msg+0x302>
 800f9fc:	18e2      	adds	r2, r4, r3
 800f9fe:	7890      	ldrb	r0, [r2, #2]
 800fa00:	287d      	cmp	r0, #125	@ 0x7d
 800fa02:	f000 8101 	beq.w	800fc08 <uxr_read_framed_msg+0x434>
 800fa06:	3301      	adds	r3, #1
 800fa08:	085a      	lsrs	r2, r3, #1
 800fa0a:	fba5 1202 	umull	r1, r2, r5, r2
 800fa0e:	0892      	lsrs	r2, r2, #2
 800fa10:	212a      	movs	r1, #42	@ 0x2a
 800fa12:	fb01 3312 	mls	r3, r1, r2, r3
 800fa16:	287e      	cmp	r0, #126	@ 0x7e
 800fa18:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800fa1c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800fa20:	d059      	beq.n	800fad6 <uxr_read_framed_msg+0x302>
 800fa22:	2302      	movs	r3, #2
 800fa24:	7023      	strb	r3, [r4, #0]
 800fa26:	e6e6      	b.n	800f7f6 <uxr_read_framed_msg+0x22>
 800fa28:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800fa2c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800fa30:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 800fa34:	1c51      	adds	r1, r2, #1
 800fa36:	084b      	lsrs	r3, r1, #1
 800fa38:	fba5 c303 	umull	ip, r3, r5, r3
 800fa3c:	089b      	lsrs	r3, r3, #2
 800fa3e:	fb0e 1313 	mls	r3, lr, r3, r1
 800fa42:	4592      	cmp	sl, r2
 800fa44:	eb04 0002 	add.w	r0, r4, r2
 800fa48:	b2da      	uxtb	r2, r3
 800fa4a:	f43f af04 	beq.w	800f856 <uxr_read_framed_msg+0x82>
 800fa4e:	7883      	ldrb	r3, [r0, #2]
 800fa50:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800fa54:	2b7e      	cmp	r3, #126	@ 0x7e
 800fa56:	d1ed      	bne.n	800fa34 <uxr_read_framed_msg+0x260>
 800fa58:	2301      	movs	r3, #1
 800fa5a:	7023      	strb	r3, [r4, #0]
 800fa5c:	e6cb      	b.n	800f7f6 <uxr_read_framed_msg+0x22>
 800fa5e:	f100 0c01 	add.w	ip, r0, #1
 800fa62:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800fa66:	fba5 8202 	umull	r8, r2, r5, r2
 800fa6a:	0892      	lsrs	r2, r2, #2
 800fa6c:	fb01 c212 	mls	r2, r1, r2, ip
 800fa70:	eb04 0c02 	add.w	ip, r4, r2
 800fa74:	b2d2      	uxtb	r2, r2
 800fa76:	4592      	cmp	sl, r2
 800fa78:	f100 0002 	add.w	r0, r0, #2
 800fa7c:	f43f af47 	beq.w	800f90e <uxr_read_framed_msg+0x13a>
 800fa80:	0842      	lsrs	r2, r0, #1
 800fa82:	f89c a002 	ldrb.w	sl, [ip, #2]
 800fa86:	fba5 8202 	umull	r8, r2, r5, r2
 800fa8a:	0892      	lsrs	r2, r2, #2
 800fa8c:	fb01 0012 	mls	r0, r1, r2, r0
 800fa90:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 800fa94:	f08a 0c20 	eor.w	ip, sl, #32
 800fa98:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 800fa9c:	f47f af11 	bne.w	800f8c2 <uxr_read_framed_msg+0xee>
 800faa0:	459e      	cmp	lr, r3
 800faa2:	ee17 8a90 	vmov	r8, s15
 800faa6:	f43f af37 	beq.w	800f918 <uxr_read_framed_msg+0x144>
 800faaa:	2301      	movs	r3, #1
 800faac:	7023      	strb	r3, [r4, #0]
 800faae:	e6a2      	b.n	800f7f6 <uxr_read_framed_msg+0x22>
 800fab0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fab2:	9300      	str	r3, [sp, #0]
 800fab4:	2301      	movs	r3, #1
 800fab6:	9301      	str	r3, [sp, #4]
 800fab8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800faba:	464a      	mov	r2, r9
 800fabc:	4641      	mov	r1, r8
 800fabe:	4620      	mov	r0, r4
 800fac0:	f7ff fe06 	bl	800f6d0 <uxr_framing_read_transport>
 800fac4:	2800      	cmp	r0, #0
 800fac6:	f43f aec6 	beq.w	800f856 <uxr_read_framed_msg+0x82>
 800faca:	7823      	ldrb	r3, [r4, #0]
 800facc:	e693      	b.n	800f7f6 <uxr_read_framed_msg+0x22>
 800face:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fad0:	9300      	str	r3, [sp, #0]
 800fad2:	2302      	movs	r3, #2
 800fad4:	e7ef      	b.n	800fab6 <uxr_read_framed_msg+0x2e2>
 800fad6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fad8:	9300      	str	r3, [sp, #0]
 800fada:	2304      	movs	r3, #4
 800fadc:	9301      	str	r3, [sp, #4]
 800fade:	464a      	mov	r2, r9
 800fae0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fae2:	4641      	mov	r1, r8
 800fae4:	4620      	mov	r0, r4
 800fae6:	f7ff fdf3 	bl	800f6d0 <uxr_framing_read_transport>
 800faea:	2800      	cmp	r0, #0
 800faec:	d1ed      	bne.n	800faca <uxr_read_framed_msg+0x2f6>
 800faee:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800faf2:	2b7e      	cmp	r3, #126	@ 0x7e
 800faf4:	d0e9      	beq.n	800faca <uxr_read_framed_msg+0x2f6>
 800faf6:	e6ae      	b.n	800f856 <uxr_read_framed_msg+0x82>
 800faf8:	30c30c31 	.word	0x30c30c31
 800fafc:	08018300 	.word	0x08018300
 800fb00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb02:	9300      	str	r3, [sp, #0]
 800fb04:	2305      	movs	r3, #5
 800fb06:	9301      	str	r3, [sp, #4]
 800fb08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fb0a:	f7ff fde1 	bl	800f6d0 <uxr_framing_read_transport>
 800fb0e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800fb12:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800fb16:	429a      	cmp	r2, r3
 800fb18:	f43f ae9d 	beq.w	800f856 <uxr_read_framed_msg+0x82>
 800fb1c:	e668      	b.n	800f7f0 <uxr_read_framed_msg+0x1c>
 800fb1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb20:	9300      	str	r3, [sp, #0]
 800fb22:	2303      	movs	r3, #3
 800fb24:	e7c7      	b.n	800fab6 <uxr_read_framed_msg+0x2e2>
 800fb26:	2305      	movs	r3, #5
 800fb28:	7023      	strb	r3, [r4, #0]
 800fb2a:	e664      	b.n	800f7f6 <uxr_read_framed_msg+0x22>
 800fb2c:	ee17 8a90 	vmov	r8, s15
 800fb30:	f43f aef2 	beq.w	800f918 <uxr_read_framed_msg+0x144>
 800fb34:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800fb38:	d08e      	beq.n	800fa58 <uxr_read_framed_msg+0x284>
 800fb3a:	ebae 0303 	sub.w	r3, lr, r3
 800fb3e:	3302      	adds	r3, #2
 800fb40:	9301      	str	r3, [sp, #4]
 800fb42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fb44:	9300      	str	r3, [sp, #0]
 800fb46:	e7b7      	b.n	800fab8 <uxr_read_framed_msg+0x2e4>
 800fb48:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fb4a:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800fb4e:	7013      	strb	r3, [r2, #0]
 800fb50:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 800fb52:	b003      	add	sp, #12
 800fb54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb58:	f103 0c01 	add.w	ip, r3, #1
 800fb5c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800fb60:	fba5 0202 	umull	r0, r2, r5, r2
 800fb64:	0892      	lsrs	r2, r2, #2
 800fb66:	202a      	movs	r0, #42	@ 0x2a
 800fb68:	fb00 c212 	mls	r2, r0, r2, ip
 800fb6c:	fa5f fc82 	uxtb.w	ip, r2
 800fb70:	4561      	cmp	r1, ip
 800fb72:	d09d      	beq.n	800fab0 <uxr_read_framed_msg+0x2dc>
 800fb74:	3302      	adds	r3, #2
 800fb76:	4422      	add	r2, r4
 800fb78:	0859      	lsrs	r1, r3, #1
 800fb7a:	7892      	ldrb	r2, [r2, #2]
 800fb7c:	fba5 c101 	umull	ip, r1, r5, r1
 800fb80:	0889      	lsrs	r1, r1, #2
 800fb82:	fb00 3311 	mls	r3, r0, r1, r3
 800fb86:	2a7e      	cmp	r2, #126	@ 0x7e
 800fb88:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800fb8c:	f000 80aa 	beq.w	800fce4 <uxr_read_framed_msg+0x510>
 800fb90:	f082 0220 	eor.w	r2, r2, #32
 800fb94:	e654      	b.n	800f840 <uxr_read_framed_msg+0x6c>
 800fb96:	1c58      	adds	r0, r3, #1
 800fb98:	0842      	lsrs	r2, r0, #1
 800fb9a:	fba5 c202 	umull	ip, r2, r5, r2
 800fb9e:	0892      	lsrs	r2, r2, #2
 800fba0:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800fba4:	fb0c 0212 	mls	r2, ip, r2, r0
 800fba8:	b2d0      	uxtb	r0, r2
 800fbaa:	4281      	cmp	r1, r0
 800fbac:	d08f      	beq.n	800face <uxr_read_framed_msg+0x2fa>
 800fbae:	4422      	add	r2, r4
 800fbb0:	3302      	adds	r3, #2
 800fbb2:	7890      	ldrb	r0, [r2, #2]
 800fbb4:	085a      	lsrs	r2, r3, #1
 800fbb6:	fba5 1202 	umull	r1, r2, r5, r2
 800fbba:	0892      	lsrs	r2, r2, #2
 800fbbc:	fb0c 3312 	mls	r3, ip, r2, r3
 800fbc0:	287e      	cmp	r0, #126	@ 0x7e
 800fbc2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800fbc6:	d07d      	beq.n	800fcc4 <uxr_read_framed_msg+0x4f0>
 800fbc8:	f080 0020 	eor.w	r0, r0, #32
 800fbcc:	e660      	b.n	800f890 <uxr_read_framed_msg+0xbc>
 800fbce:	1c59      	adds	r1, r3, #1
 800fbd0:	084a      	lsrs	r2, r1, #1
 800fbd2:	fba5 c202 	umull	ip, r2, r5, r2
 800fbd6:	0892      	lsrs	r2, r2, #2
 800fbd8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800fbdc:	fb0c 1212 	mls	r2, ip, r2, r1
 800fbe0:	b2d1      	uxtb	r1, r2
 800fbe2:	4288      	cmp	r0, r1
 800fbe4:	f43f af64 	beq.w	800fab0 <uxr_read_framed_msg+0x2dc>
 800fbe8:	4422      	add	r2, r4
 800fbea:	3302      	adds	r3, #2
 800fbec:	7891      	ldrb	r1, [r2, #2]
 800fbee:	085a      	lsrs	r2, r3, #1
 800fbf0:	fba5 0202 	umull	r0, r2, r5, r2
 800fbf4:	0892      	lsrs	r2, r2, #2
 800fbf6:	fb0c 3312 	mls	r3, ip, r2, r3
 800fbfa:	297e      	cmp	r1, #126	@ 0x7e
 800fbfc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800fc00:	d070      	beq.n	800fce4 <uxr_read_framed_msg+0x510>
 800fc02:	f081 0120 	eor.w	r1, r1, #32
 800fc06:	e6a3      	b.n	800f950 <uxr_read_framed_msg+0x17c>
 800fc08:	f103 0c01 	add.w	ip, r3, #1
 800fc0c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800fc10:	fba5 0202 	umull	r0, r2, r5, r2
 800fc14:	0892      	lsrs	r2, r2, #2
 800fc16:	202a      	movs	r0, #42	@ 0x2a
 800fc18:	fb00 c212 	mls	r2, r0, r2, ip
 800fc1c:	fa5f fc82 	uxtb.w	ip, r2
 800fc20:	4561      	cmp	r1, ip
 800fc22:	f43f af58 	beq.w	800fad6 <uxr_read_framed_msg+0x302>
 800fc26:	4422      	add	r2, r4
 800fc28:	3302      	adds	r3, #2
 800fc2a:	7891      	ldrb	r1, [r2, #2]
 800fc2c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800fc30:	085a      	lsrs	r2, r3, #1
 800fc32:	fba5 c202 	umull	ip, r2, r5, r2
 800fc36:	0892      	lsrs	r2, r2, #2
 800fc38:	fb00 3312 	mls	r3, r0, r2, r3
 800fc3c:	297e      	cmp	r1, #126	@ 0x7e
 800fc3e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800fc42:	f43f af48 	beq.w	800fad6 <uxr_read_framed_msg+0x302>
 800fc46:	f081 0120 	eor.w	r1, r1, #32
 800fc4a:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800fc4e:	e6e8      	b.n	800fa22 <uxr_read_framed_msg+0x24e>
 800fc50:	1c58      	adds	r0, r3, #1
 800fc52:	0842      	lsrs	r2, r0, #1
 800fc54:	fba5 c202 	umull	ip, r2, r5, r2
 800fc58:	0892      	lsrs	r2, r2, #2
 800fc5a:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800fc5e:	fb0c 0212 	mls	r2, ip, r2, r0
 800fc62:	b2d0      	uxtb	r0, r2
 800fc64:	4281      	cmp	r1, r0
 800fc66:	f43f af32 	beq.w	800face <uxr_read_framed_msg+0x2fa>
 800fc6a:	4422      	add	r2, r4
 800fc6c:	3302      	adds	r3, #2
 800fc6e:	7890      	ldrb	r0, [r2, #2]
 800fc70:	085a      	lsrs	r2, r3, #1
 800fc72:	fba5 1202 	umull	r1, r2, r5, r2
 800fc76:	0892      	lsrs	r2, r2, #2
 800fc78:	fb0c 3312 	mls	r3, ip, r2, r3
 800fc7c:	287e      	cmp	r0, #126	@ 0x7e
 800fc7e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800fc82:	d01f      	beq.n	800fcc4 <uxr_read_framed_msg+0x4f0>
 800fc84:	f080 0020 	eor.w	r0, r0, #32
 800fc88:	e68b      	b.n	800f9a2 <uxr_read_framed_msg+0x1ce>
 800fc8a:	1c51      	adds	r1, r2, #1
 800fc8c:	084b      	lsrs	r3, r1, #1
 800fc8e:	fba5 c303 	umull	ip, r3, r5, r3
 800fc92:	089b      	lsrs	r3, r3, #2
 800fc94:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800fc98:	fb0c 1313 	mls	r3, ip, r3, r1
 800fc9c:	b2d9      	uxtb	r1, r3
 800fc9e:	4288      	cmp	r0, r1
 800fca0:	f43f af3d 	beq.w	800fb1e <uxr_read_framed_msg+0x34a>
 800fca4:	3202      	adds	r2, #2
 800fca6:	4423      	add	r3, r4
 800fca8:	0850      	lsrs	r0, r2, #1
 800fcaa:	789b      	ldrb	r3, [r3, #2]
 800fcac:	fba5 1000 	umull	r1, r0, r5, r0
 800fcb0:	0880      	lsrs	r0, r0, #2
 800fcb2:	fb0c 2210 	mls	r2, ip, r0, r2
 800fcb6:	2b7e      	cmp	r3, #126	@ 0x7e
 800fcb8:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800fcbc:	d016      	beq.n	800fcec <uxr_read_framed_msg+0x518>
 800fcbe:	f083 0120 	eor.w	r1, r3, #32
 800fcc2:	e68b      	b.n	800f9dc <uxr_read_framed_msg+0x208>
 800fcc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fcc6:	9300      	str	r3, [sp, #0]
 800fcc8:	2302      	movs	r3, #2
 800fcca:	9301      	str	r3, [sp, #4]
 800fccc:	464a      	mov	r2, r9
 800fcce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fcd0:	4641      	mov	r1, r8
 800fcd2:	4620      	mov	r0, r4
 800fcd4:	f7ff fcfc 	bl	800f6d0 <uxr_framing_read_transport>
 800fcd8:	2800      	cmp	r0, #0
 800fcda:	f47f aef6 	bne.w	800faca <uxr_read_framed_msg+0x2f6>
 800fcde:	2301      	movs	r3, #1
 800fce0:	7023      	strb	r3, [r4, #0]
 800fce2:	e588      	b.n	800f7f6 <uxr_read_framed_msg+0x22>
 800fce4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fce6:	9300      	str	r3, [sp, #0]
 800fce8:	2301      	movs	r3, #1
 800fcea:	e7ee      	b.n	800fcca <uxr_read_framed_msg+0x4f6>
 800fcec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fcee:	9300      	str	r3, [sp, #0]
 800fcf0:	2303      	movs	r3, #3
 800fcf2:	e7ea      	b.n	800fcca <uxr_read_framed_msg+0x4f6>
 800fcf4:	ee17 8a90 	vmov	r8, s15
 800fcf8:	e6ae      	b.n	800fa58 <uxr_read_framed_msg+0x284>
 800fcfa:	bf00      	nop

0800fcfc <uxr_stream_id>:
 800fcfc:	2901      	cmp	r1, #1
 800fcfe:	b082      	sub	sp, #8
 800fd00:	d01d      	beq.n	800fd3e <uxr_stream_id+0x42>
 800fd02:	2902      	cmp	r1, #2
 800fd04:	f04f 0c00 	mov.w	ip, #0
 800fd08:	d01e      	beq.n	800fd48 <uxr_stream_id+0x4c>
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	f36c 0307 	bfi	r3, ip, #0, #8
 800fd10:	f360 230f 	bfi	r3, r0, #8, #8
 800fd14:	f361 4317 	bfi	r3, r1, #16, #8
 800fd18:	f362 631f 	bfi	r3, r2, #24, #8
 800fd1c:	b2da      	uxtb	r2, r3
 800fd1e:	2000      	movs	r0, #0
 800fd20:	f362 0007 	bfi	r0, r2, #0, #8
 800fd24:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800fd28:	f362 200f 	bfi	r0, r2, #8, #8
 800fd2c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800fd30:	f362 4017 	bfi	r0, r2, #16, #8
 800fd34:	0e1b      	lsrs	r3, r3, #24
 800fd36:	f363 601f 	bfi	r0, r3, #24, #8
 800fd3a:	b002      	add	sp, #8
 800fd3c:	4770      	bx	lr
 800fd3e:	f100 0c01 	add.w	ip, r0, #1
 800fd42:	fa5f fc8c 	uxtb.w	ip, ip
 800fd46:	e7e0      	b.n	800fd0a <uxr_stream_id+0xe>
 800fd48:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800fd4c:	e7dd      	b.n	800fd0a <uxr_stream_id+0xe>
 800fd4e:	bf00      	nop

0800fd50 <uxr_stream_id_from_raw>:
 800fd50:	b082      	sub	sp, #8
 800fd52:	b130      	cbz	r0, 800fd62 <uxr_stream_id_from_raw+0x12>
 800fd54:	0603      	lsls	r3, r0, #24
 800fd56:	d420      	bmi.n	800fd9a <uxr_stream_id_from_raw+0x4a>
 800fd58:	1e42      	subs	r2, r0, #1
 800fd5a:	b2d2      	uxtb	r2, r2
 800fd5c:	f04f 0c01 	mov.w	ip, #1
 800fd60:	e001      	b.n	800fd66 <uxr_stream_id_from_raw+0x16>
 800fd62:	4684      	mov	ip, r0
 800fd64:	4602      	mov	r2, r0
 800fd66:	2300      	movs	r3, #0
 800fd68:	f360 0307 	bfi	r3, r0, #0, #8
 800fd6c:	f362 230f 	bfi	r3, r2, #8, #8
 800fd70:	f36c 4317 	bfi	r3, ip, #16, #8
 800fd74:	f361 631f 	bfi	r3, r1, #24, #8
 800fd78:	b2da      	uxtb	r2, r3
 800fd7a:	2000      	movs	r0, #0
 800fd7c:	f362 0007 	bfi	r0, r2, #0, #8
 800fd80:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800fd84:	f362 200f 	bfi	r0, r2, #8, #8
 800fd88:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800fd8c:	f362 4017 	bfi	r0, r2, #16, #8
 800fd90:	0e1b      	lsrs	r3, r3, #24
 800fd92:	f363 601f 	bfi	r0, r3, #24, #8
 800fd96:	b002      	add	sp, #8
 800fd98:	4770      	bx	lr
 800fd9a:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800fd9e:	f04f 0c02 	mov.w	ip, #2
 800fda2:	e7e0      	b.n	800fd66 <uxr_stream_id_from_raw+0x16>

0800fda4 <uxr_init_stream_storage>:
 800fda4:	2300      	movs	r3, #0
 800fda6:	7403      	strb	r3, [r0, #16]
 800fda8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800fdac:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800fdb0:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800fdb4:	4770      	bx	lr
 800fdb6:	bf00      	nop

0800fdb8 <uxr_reset_stream_storage>:
 800fdb8:	b570      	push	{r4, r5, r6, lr}
 800fdba:	7c03      	ldrb	r3, [r0, #16]
 800fdbc:	4604      	mov	r4, r0
 800fdbe:	b153      	cbz	r3, 800fdd6 <uxr_reset_stream_storage+0x1e>
 800fdc0:	4606      	mov	r6, r0
 800fdc2:	2500      	movs	r5, #0
 800fdc4:	4630      	mov	r0, r6
 800fdc6:	f005 fdc3 	bl	8015950 <uxr_reset_output_best_effort_stream>
 800fdca:	7c23      	ldrb	r3, [r4, #16]
 800fdcc:	3501      	adds	r5, #1
 800fdce:	42ab      	cmp	r3, r5
 800fdd0:	f106 0610 	add.w	r6, r6, #16
 800fdd4:	d8f6      	bhi.n	800fdc4 <uxr_reset_stream_storage+0xc>
 800fdd6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800fdda:	b163      	cbz	r3, 800fdf6 <uxr_reset_stream_storage+0x3e>
 800fddc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fde0:	2500      	movs	r5, #0
 800fde2:	4630      	mov	r0, r6
 800fde4:	f005 fbb6 	bl	8015554 <uxr_reset_input_best_effort_stream>
 800fde8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800fdec:	3501      	adds	r5, #1
 800fdee:	42ab      	cmp	r3, r5
 800fdf0:	f106 0602 	add.w	r6, r6, #2
 800fdf4:	d8f5      	bhi.n	800fde2 <uxr_reset_stream_storage+0x2a>
 800fdf6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800fdfa:	b163      	cbz	r3, 800fe16 <uxr_reset_stream_storage+0x5e>
 800fdfc:	f104 0618 	add.w	r6, r4, #24
 800fe00:	2500      	movs	r5, #0
 800fe02:	4630      	mov	r0, r6
 800fe04:	f005 fe50 	bl	8015aa8 <uxr_reset_output_reliable_stream>
 800fe08:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800fe0c:	3501      	adds	r5, #1
 800fe0e:	42ab      	cmp	r3, r5
 800fe10:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800fe14:	d8f5      	bhi.n	800fe02 <uxr_reset_stream_storage+0x4a>
 800fe16:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800fe1a:	b163      	cbz	r3, 800fe36 <uxr_reset_stream_storage+0x7e>
 800fe1c:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800fe20:	2500      	movs	r5, #0
 800fe22:	4630      	mov	r0, r6
 800fe24:	f005 fc0a 	bl	801563c <uxr_reset_input_reliable_stream>
 800fe28:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800fe2c:	3501      	adds	r5, #1
 800fe2e:	42ab      	cmp	r3, r5
 800fe30:	f106 0618 	add.w	r6, r6, #24
 800fe34:	d8f5      	bhi.n	800fe22 <uxr_reset_stream_storage+0x6a>
 800fe36:	bd70      	pop	{r4, r5, r6, pc}

0800fe38 <uxr_add_output_best_effort_buffer>:
 800fe38:	b510      	push	{r4, lr}
 800fe3a:	7c04      	ldrb	r4, [r0, #16]
 800fe3c:	f104 0c01 	add.w	ip, r4, #1
 800fe40:	b082      	sub	sp, #8
 800fe42:	f880 c010 	strb.w	ip, [r0, #16]
 800fe46:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800fe4a:	f005 fd77 	bl	801593c <uxr_init_output_best_effort_stream>
 800fe4e:	2201      	movs	r2, #1
 800fe50:	4611      	mov	r1, r2
 800fe52:	4620      	mov	r0, r4
 800fe54:	b002      	add	sp, #8
 800fe56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe5a:	f7ff bf4f 	b.w	800fcfc <uxr_stream_id>
 800fe5e:	bf00      	nop

0800fe60 <uxr_add_output_reliable_buffer>:
 800fe60:	b510      	push	{r4, lr}
 800fe62:	b084      	sub	sp, #16
 800fe64:	4684      	mov	ip, r0
 800fe66:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800fe6a:	9000      	str	r0, [sp, #0]
 800fe6c:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800fe70:	2028      	movs	r0, #40	@ 0x28
 800fe72:	fb00 c004 	mla	r0, r0, r4, ip
 800fe76:	f104 0e01 	add.w	lr, r4, #1
 800fe7a:	3018      	adds	r0, #24
 800fe7c:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800fe80:	f005 fdda 	bl	8015a38 <uxr_init_output_reliable_stream>
 800fe84:	2201      	movs	r2, #1
 800fe86:	2102      	movs	r1, #2
 800fe88:	4620      	mov	r0, r4
 800fe8a:	b004      	add	sp, #16
 800fe8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe90:	f7ff bf34 	b.w	800fcfc <uxr_stream_id>

0800fe94 <uxr_add_input_best_effort_buffer>:
 800fe94:	b510      	push	{r4, lr}
 800fe96:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	1c62      	adds	r2, r4, #1
 800fe9e:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800fea2:	b082      	sub	sp, #8
 800fea4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800fea8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800feac:	f005 fb4e 	bl	801554c <uxr_init_input_best_effort_stream>
 800feb0:	2200      	movs	r2, #0
 800feb2:	2101      	movs	r1, #1
 800feb4:	4620      	mov	r0, r4
 800feb6:	b002      	add	sp, #8
 800feb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800febc:	f7ff bf1e 	b.w	800fcfc <uxr_stream_id>

0800fec0 <uxr_add_input_reliable_buffer>:
 800fec0:	b510      	push	{r4, lr}
 800fec2:	b084      	sub	sp, #16
 800fec4:	4684      	mov	ip, r0
 800fec6:	9806      	ldr	r0, [sp, #24]
 800fec8:	9000      	str	r0, [sp, #0]
 800feca:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800fece:	2018      	movs	r0, #24
 800fed0:	fb00 c004 	mla	r0, r0, r4, ip
 800fed4:	f104 0e01 	add.w	lr, r4, #1
 800fed8:	3048      	adds	r0, #72	@ 0x48
 800feda:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800fede:	f005 fb81 	bl	80155e4 <uxr_init_input_reliable_stream>
 800fee2:	2200      	movs	r2, #0
 800fee4:	2102      	movs	r1, #2
 800fee6:	4620      	mov	r0, r4
 800fee8:	b004      	add	sp, #16
 800feea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800feee:	f7ff bf05 	b.w	800fcfc <uxr_stream_id>
 800fef2:	bf00      	nop

0800fef4 <uxr_get_output_best_effort_stream>:
 800fef4:	7c03      	ldrb	r3, [r0, #16]
 800fef6:	428b      	cmp	r3, r1
 800fef8:	bf8c      	ite	hi
 800fefa:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800fefe:	2000      	movls	r0, #0
 800ff00:	4770      	bx	lr
 800ff02:	bf00      	nop

0800ff04 <uxr_get_output_reliable_stream>:
 800ff04:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ff08:	428b      	cmp	r3, r1
 800ff0a:	bf83      	ittte	hi
 800ff0c:	2328      	movhi	r3, #40	@ 0x28
 800ff0e:	fb03 0001 	mlahi	r0, r3, r1, r0
 800ff12:	3018      	addhi	r0, #24
 800ff14:	2000      	movls	r0, #0
 800ff16:	4770      	bx	lr

0800ff18 <uxr_get_input_best_effort_stream>:
 800ff18:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800ff1c:	428b      	cmp	r3, r1
 800ff1e:	bf86      	itte	hi
 800ff20:	3121      	addhi	r1, #33	@ 0x21
 800ff22:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800ff26:	2000      	movls	r0, #0
 800ff28:	4770      	bx	lr
 800ff2a:	bf00      	nop

0800ff2c <uxr_get_input_reliable_stream>:
 800ff2c:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800ff30:	428b      	cmp	r3, r1
 800ff32:	bf83      	ittte	hi
 800ff34:	2318      	movhi	r3, #24
 800ff36:	fb03 0001 	mlahi	r0, r3, r1, r0
 800ff3a:	3048      	addhi	r0, #72	@ 0x48
 800ff3c:	2000      	movls	r0, #0
 800ff3e:	4770      	bx	lr

0800ff40 <uxr_output_streams_confirmed>:
 800ff40:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ff44:	b183      	cbz	r3, 800ff68 <uxr_output_streams_confirmed+0x28>
 800ff46:	b570      	push	{r4, r5, r6, lr}
 800ff48:	4606      	mov	r6, r0
 800ff4a:	f100 0518 	add.w	r5, r0, #24
 800ff4e:	2400      	movs	r4, #0
 800ff50:	e001      	b.n	800ff56 <uxr_output_streams_confirmed+0x16>
 800ff52:	3528      	adds	r5, #40	@ 0x28
 800ff54:	b138      	cbz	r0, 800ff66 <uxr_output_streams_confirmed+0x26>
 800ff56:	4628      	mov	r0, r5
 800ff58:	f006 f816 	bl	8015f88 <uxr_is_output_up_to_date>
 800ff5c:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800ff60:	3401      	adds	r4, #1
 800ff62:	42a3      	cmp	r3, r4
 800ff64:	d8f5      	bhi.n	800ff52 <uxr_output_streams_confirmed+0x12>
 800ff66:	bd70      	pop	{r4, r5, r6, pc}
 800ff68:	2001      	movs	r0, #1
 800ff6a:	4770      	bx	lr

0800ff6c <uxr_buffer_submessage_header>:
 800ff6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff6e:	4604      	mov	r4, r0
 800ff70:	460e      	mov	r6, r1
 800ff72:	2104      	movs	r1, #4
 800ff74:	4615      	mov	r5, r2
 800ff76:	461f      	mov	r7, r3
 800ff78:	f7fd fdc6 	bl	800db08 <ucdr_align_to>
 800ff7c:	2301      	movs	r3, #1
 800ff7e:	ea47 0203 	orr.w	r2, r7, r3
 800ff82:	4631      	mov	r1, r6
 800ff84:	7523      	strb	r3, [r4, #20]
 800ff86:	4620      	mov	r0, r4
 800ff88:	462b      	mov	r3, r5
 800ff8a:	f000 f8a3 	bl	80100d4 <uxr_serialize_submessage_header>
 800ff8e:	4620      	mov	r0, r4
 800ff90:	f7fd fdd0 	bl	800db34 <ucdr_buffer_remaining>
 800ff94:	42a8      	cmp	r0, r5
 800ff96:	bf34      	ite	cc
 800ff98:	2000      	movcc	r0, #0
 800ff9a:	2001      	movcs	r0, #1
 800ff9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff9e:	bf00      	nop

0800ffa0 <uxr_read_submessage_header>:
 800ffa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffa4:	4604      	mov	r4, r0
 800ffa6:	460d      	mov	r5, r1
 800ffa8:	2104      	movs	r1, #4
 800ffaa:	4616      	mov	r6, r2
 800ffac:	4698      	mov	r8, r3
 800ffae:	f7fd fdab 	bl	800db08 <ucdr_align_to>
 800ffb2:	4620      	mov	r0, r4
 800ffb4:	f7fd fdbe 	bl	800db34 <ucdr_buffer_remaining>
 800ffb8:	2803      	cmp	r0, #3
 800ffba:	bf8c      	ite	hi
 800ffbc:	2701      	movhi	r7, #1
 800ffbe:	2700      	movls	r7, #0
 800ffc0:	d802      	bhi.n	800ffc8 <uxr_read_submessage_header+0x28>
 800ffc2:	4638      	mov	r0, r7
 800ffc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffc8:	4633      	mov	r3, r6
 800ffca:	4642      	mov	r2, r8
 800ffcc:	4620      	mov	r0, r4
 800ffce:	4629      	mov	r1, r5
 800ffd0:	f000 f894 	bl	80100fc <uxr_deserialize_submessage_header>
 800ffd4:	f898 3000 	ldrb.w	r3, [r8]
 800ffd8:	f003 0201 	and.w	r2, r3, #1
 800ffdc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800ffe0:	f888 3000 	strb.w	r3, [r8]
 800ffe4:	7522      	strb	r2, [r4, #20]
 800ffe6:	4638      	mov	r0, r7
 800ffe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ffec <uxr_submessage_padding>:
 800ffec:	f010 0003 	ands.w	r0, r0, #3
 800fff0:	bf18      	it	ne
 800fff2:	f1c0 0004 	rsbne	r0, r0, #4
 800fff6:	4770      	bx	lr

0800fff8 <uxr_millis>:
 800fff8:	b510      	push	{r4, lr}
 800fffa:	b084      	sub	sp, #16
 800fffc:	4669      	mov	r1, sp
 800fffe:	2001      	movs	r0, #1
 8010000:	f7f2 fb6a 	bl	80026d8 <clock_gettime>
 8010004:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8010008:	4906      	ldr	r1, [pc, #24]	@ (8010024 <uxr_millis+0x2c>)
 801000a:	fba0 0301 	umull	r0, r3, r0, r1
 801000e:	1900      	adds	r0, r0, r4
 8010010:	fb01 3102 	mla	r1, r1, r2, r3
 8010014:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8010018:	4a03      	ldr	r2, [pc, #12]	@ (8010028 <uxr_millis+0x30>)
 801001a:	2300      	movs	r3, #0
 801001c:	f7f0 fd56 	bl	8000acc <__aeabi_ldivmod>
 8010020:	b004      	add	sp, #16
 8010022:	bd10      	pop	{r4, pc}
 8010024:	3b9aca00 	.word	0x3b9aca00
 8010028:	000f4240 	.word	0x000f4240

0801002c <uxr_nanos>:
 801002c:	b510      	push	{r4, lr}
 801002e:	b084      	sub	sp, #16
 8010030:	4669      	mov	r1, sp
 8010032:	2001      	movs	r0, #1
 8010034:	f7f2 fb50 	bl	80026d8 <clock_gettime>
 8010038:	4a06      	ldr	r2, [pc, #24]	@ (8010054 <uxr_nanos+0x28>)
 801003a:	9800      	ldr	r0, [sp, #0]
 801003c:	9902      	ldr	r1, [sp, #8]
 801003e:	9c01      	ldr	r4, [sp, #4]
 8010040:	fba0 0302 	umull	r0, r3, r0, r2
 8010044:	1840      	adds	r0, r0, r1
 8010046:	fb02 3304 	mla	r3, r2, r4, r3
 801004a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 801004e:	b004      	add	sp, #16
 8010050:	bd10      	pop	{r4, pc}
 8010052:	bf00      	nop
 8010054:	3b9aca00 	.word	0x3b9aca00

08010058 <uxr_serialize_message_header>:
 8010058:	b5f0      	push	{r4, r5, r6, r7, lr}
 801005a:	b083      	sub	sp, #12
 801005c:	4616      	mov	r6, r2
 801005e:	4604      	mov	r4, r0
 8010060:	9301      	str	r3, [sp, #4]
 8010062:	460d      	mov	r5, r1
 8010064:	9f08      	ldr	r7, [sp, #32]
 8010066:	f7fc fd89 	bl	800cb7c <ucdr_serialize_uint8_t>
 801006a:	4631      	mov	r1, r6
 801006c:	4620      	mov	r0, r4
 801006e:	f7fc fd85 	bl	800cb7c <ucdr_serialize_uint8_t>
 8010072:	9a01      	ldr	r2, [sp, #4]
 8010074:	2101      	movs	r1, #1
 8010076:	4620      	mov	r0, r4
 8010078:	f7fc fe2c 	bl	800ccd4 <ucdr_serialize_endian_uint16_t>
 801007c:	062b      	lsls	r3, r5, #24
 801007e:	d501      	bpl.n	8010084 <uxr_serialize_message_header+0x2c>
 8010080:	b003      	add	sp, #12
 8010082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010084:	2204      	movs	r2, #4
 8010086:	4639      	mov	r1, r7
 8010088:	4620      	mov	r0, r4
 801008a:	b003      	add	sp, #12
 801008c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010090:	f005 b924 	b.w	80152dc <ucdr_serialize_array_uint8_t>

08010094 <uxr_deserialize_message_header>:
 8010094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010096:	b083      	sub	sp, #12
 8010098:	4616      	mov	r6, r2
 801009a:	4604      	mov	r4, r0
 801009c:	9301      	str	r3, [sp, #4]
 801009e:	460d      	mov	r5, r1
 80100a0:	9f08      	ldr	r7, [sp, #32]
 80100a2:	f7fc fd81 	bl	800cba8 <ucdr_deserialize_uint8_t>
 80100a6:	4631      	mov	r1, r6
 80100a8:	4620      	mov	r0, r4
 80100aa:	f7fc fd7d 	bl	800cba8 <ucdr_deserialize_uint8_t>
 80100ae:	9a01      	ldr	r2, [sp, #4]
 80100b0:	2101      	movs	r1, #1
 80100b2:	4620      	mov	r0, r4
 80100b4:	f7fc ff02 	bl	800cebc <ucdr_deserialize_endian_uint16_t>
 80100b8:	f995 3000 	ldrsb.w	r3, [r5]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	da01      	bge.n	80100c4 <uxr_deserialize_message_header+0x30>
 80100c0:	b003      	add	sp, #12
 80100c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100c4:	2204      	movs	r2, #4
 80100c6:	4639      	mov	r1, r7
 80100c8:	4620      	mov	r0, r4
 80100ca:	b003      	add	sp, #12
 80100cc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80100d0:	f005 b968 	b.w	80153a4 <ucdr_deserialize_array_uint8_t>

080100d4 <uxr_serialize_submessage_header>:
 80100d4:	b530      	push	{r4, r5, lr}
 80100d6:	b083      	sub	sp, #12
 80100d8:	4615      	mov	r5, r2
 80100da:	4604      	mov	r4, r0
 80100dc:	9301      	str	r3, [sp, #4]
 80100de:	f7fc fd4d 	bl	800cb7c <ucdr_serialize_uint8_t>
 80100e2:	4629      	mov	r1, r5
 80100e4:	4620      	mov	r0, r4
 80100e6:	f7fc fd49 	bl	800cb7c <ucdr_serialize_uint8_t>
 80100ea:	9a01      	ldr	r2, [sp, #4]
 80100ec:	2101      	movs	r1, #1
 80100ee:	4620      	mov	r0, r4
 80100f0:	b003      	add	sp, #12
 80100f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80100f6:	f7fc bded 	b.w	800ccd4 <ucdr_serialize_endian_uint16_t>
 80100fa:	bf00      	nop

080100fc <uxr_deserialize_submessage_header>:
 80100fc:	b530      	push	{r4, r5, lr}
 80100fe:	b083      	sub	sp, #12
 8010100:	4615      	mov	r5, r2
 8010102:	4604      	mov	r4, r0
 8010104:	9301      	str	r3, [sp, #4]
 8010106:	f7fc fd4f 	bl	800cba8 <ucdr_deserialize_uint8_t>
 801010a:	4629      	mov	r1, r5
 801010c:	4620      	mov	r0, r4
 801010e:	f7fc fd4b 	bl	800cba8 <ucdr_deserialize_uint8_t>
 8010112:	9a01      	ldr	r2, [sp, #4]
 8010114:	2101      	movs	r1, #1
 8010116:	4620      	mov	r0, r4
 8010118:	b003      	add	sp, #12
 801011a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801011e:	f7fc becd 	b.w	800cebc <ucdr_deserialize_endian_uint16_t>
 8010122:	bf00      	nop

08010124 <uxr_serialize_CLIENT_Representation>:
 8010124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010128:	2204      	movs	r2, #4
 801012a:	460e      	mov	r6, r1
 801012c:	4605      	mov	r5, r0
 801012e:	f005 f8d5 	bl	80152dc <ucdr_serialize_array_uint8_t>
 8010132:	2202      	movs	r2, #2
 8010134:	4607      	mov	r7, r0
 8010136:	1d31      	adds	r1, r6, #4
 8010138:	4628      	mov	r0, r5
 801013a:	f005 f8cf 	bl	80152dc <ucdr_serialize_array_uint8_t>
 801013e:	4038      	ands	r0, r7
 8010140:	2202      	movs	r2, #2
 8010142:	1db1      	adds	r1, r6, #6
 8010144:	b2c7      	uxtb	r7, r0
 8010146:	4628      	mov	r0, r5
 8010148:	f005 f8c8 	bl	80152dc <ucdr_serialize_array_uint8_t>
 801014c:	2204      	movs	r2, #4
 801014e:	4007      	ands	r7, r0
 8010150:	f106 0108 	add.w	r1, r6, #8
 8010154:	4628      	mov	r0, r5
 8010156:	f005 f8c1 	bl	80152dc <ucdr_serialize_array_uint8_t>
 801015a:	7b31      	ldrb	r1, [r6, #12]
 801015c:	4007      	ands	r7, r0
 801015e:	4628      	mov	r0, r5
 8010160:	f7fc fd0c 	bl	800cb7c <ucdr_serialize_uint8_t>
 8010164:	7b71      	ldrb	r1, [r6, #13]
 8010166:	4007      	ands	r7, r0
 8010168:	4628      	mov	r0, r5
 801016a:	f7fc fcd9 	bl	800cb20 <ucdr_serialize_bool>
 801016e:	7b73      	ldrb	r3, [r6, #13]
 8010170:	ea07 0800 	and.w	r8, r7, r0
 8010174:	b93b      	cbnz	r3, 8010186 <uxr_serialize_CLIENT_Representation+0x62>
 8010176:	8bb1      	ldrh	r1, [r6, #28]
 8010178:	4628      	mov	r0, r5
 801017a:	f7fc fd2b 	bl	800cbd4 <ucdr_serialize_uint16_t>
 801017e:	ea08 0000 	and.w	r0, r8, r0
 8010182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010186:	6931      	ldr	r1, [r6, #16]
 8010188:	4628      	mov	r0, r5
 801018a:	f7fc ff0d 	bl	800cfa8 <ucdr_serialize_uint32_t>
 801018e:	6933      	ldr	r3, [r6, #16]
 8010190:	b1e3      	cbz	r3, 80101cc <uxr_serialize_CLIENT_Representation+0xa8>
 8010192:	b1c0      	cbz	r0, 80101c6 <uxr_serialize_CLIENT_Representation+0xa2>
 8010194:	4637      	mov	r7, r6
 8010196:	f04f 0900 	mov.w	r9, #0
 801019a:	e001      	b.n	80101a0 <uxr_serialize_CLIENT_Representation+0x7c>
 801019c:	3708      	adds	r7, #8
 801019e:	b194      	cbz	r4, 80101c6 <uxr_serialize_CLIENT_Representation+0xa2>
 80101a0:	6979      	ldr	r1, [r7, #20]
 80101a2:	4628      	mov	r0, r5
 80101a4:	f005 f9ba 	bl	801551c <ucdr_serialize_string>
 80101a8:	69b9      	ldr	r1, [r7, #24]
 80101aa:	4604      	mov	r4, r0
 80101ac:	4628      	mov	r0, r5
 80101ae:	f005 f9b5 	bl	801551c <ucdr_serialize_string>
 80101b2:	6933      	ldr	r3, [r6, #16]
 80101b4:	f109 0901 	add.w	r9, r9, #1
 80101b8:	4004      	ands	r4, r0
 80101ba:	4599      	cmp	r9, r3
 80101bc:	b2e4      	uxtb	r4, r4
 80101be:	d3ed      	bcc.n	801019c <uxr_serialize_CLIENT_Representation+0x78>
 80101c0:	ea08 0804 	and.w	r8, r8, r4
 80101c4:	e7d7      	b.n	8010176 <uxr_serialize_CLIENT_Representation+0x52>
 80101c6:	f04f 0800 	mov.w	r8, #0
 80101ca:	e7d4      	b.n	8010176 <uxr_serialize_CLIENT_Representation+0x52>
 80101cc:	ea08 0800 	and.w	r8, r8, r0
 80101d0:	e7d1      	b.n	8010176 <uxr_serialize_CLIENT_Representation+0x52>
 80101d2:	bf00      	nop

080101d4 <uxr_deserialize_CLIENT_Representation>:
 80101d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101d8:	2204      	movs	r2, #4
 80101da:	460c      	mov	r4, r1
 80101dc:	4605      	mov	r5, r0
 80101de:	f005 f8e1 	bl	80153a4 <ucdr_deserialize_array_uint8_t>
 80101e2:	2202      	movs	r2, #2
 80101e4:	4607      	mov	r7, r0
 80101e6:	1d21      	adds	r1, r4, #4
 80101e8:	4628      	mov	r0, r5
 80101ea:	f005 f8db 	bl	80153a4 <ucdr_deserialize_array_uint8_t>
 80101ee:	4038      	ands	r0, r7
 80101f0:	2202      	movs	r2, #2
 80101f2:	1da1      	adds	r1, r4, #6
 80101f4:	b2c6      	uxtb	r6, r0
 80101f6:	4628      	mov	r0, r5
 80101f8:	f005 f8d4 	bl	80153a4 <ucdr_deserialize_array_uint8_t>
 80101fc:	2204      	movs	r2, #4
 80101fe:	4006      	ands	r6, r0
 8010200:	f104 0108 	add.w	r1, r4, #8
 8010204:	4628      	mov	r0, r5
 8010206:	f005 f8cd 	bl	80153a4 <ucdr_deserialize_array_uint8_t>
 801020a:	f104 010c 	add.w	r1, r4, #12
 801020e:	4006      	ands	r6, r0
 8010210:	4628      	mov	r0, r5
 8010212:	f7fc fcc9 	bl	800cba8 <ucdr_deserialize_uint8_t>
 8010216:	f104 010d 	add.w	r1, r4, #13
 801021a:	ea06 0700 	and.w	r7, r6, r0
 801021e:	4628      	mov	r0, r5
 8010220:	f7fc fc94 	bl	800cb4c <ucdr_deserialize_bool>
 8010224:	7b63      	ldrb	r3, [r4, #13]
 8010226:	4007      	ands	r7, r0
 8010228:	b93b      	cbnz	r3, 801023a <uxr_deserialize_CLIENT_Representation+0x66>
 801022a:	f104 011c 	add.w	r1, r4, #28
 801022e:	4628      	mov	r0, r5
 8010230:	f7fc fdd0 	bl	800cdd4 <ucdr_deserialize_uint16_t>
 8010234:	4038      	ands	r0, r7
 8010236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801023a:	f104 0110 	add.w	r1, r4, #16
 801023e:	4628      	mov	r0, r5
 8010240:	f7fc ffe2 	bl	800d208 <ucdr_deserialize_uint32_t>
 8010244:	6923      	ldr	r3, [r4, #16]
 8010246:	2b01      	cmp	r3, #1
 8010248:	d903      	bls.n	8010252 <uxr_deserialize_CLIENT_Representation+0x7e>
 801024a:	2301      	movs	r3, #1
 801024c:	75ab      	strb	r3, [r5, #22]
 801024e:	2700      	movs	r7, #0
 8010250:	e7eb      	b.n	801022a <uxr_deserialize_CLIENT_Representation+0x56>
 8010252:	b30b      	cbz	r3, 8010298 <uxr_deserialize_CLIENT_Representation+0xc4>
 8010254:	2800      	cmp	r0, #0
 8010256:	d0fa      	beq.n	801024e <uxr_deserialize_CLIENT_Representation+0x7a>
 8010258:	46a0      	mov	r8, r4
 801025a:	f04f 0900 	mov.w	r9, #0
 801025e:	e001      	b.n	8010264 <uxr_deserialize_CLIENT_Representation+0x90>
 8010260:	2e00      	cmp	r6, #0
 8010262:	d0f4      	beq.n	801024e <uxr_deserialize_CLIENT_Representation+0x7a>
 8010264:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8010268:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801026c:	4628      	mov	r0, r5
 801026e:	f005 f965 	bl	801553c <ucdr_deserialize_string>
 8010272:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010276:	4606      	mov	r6, r0
 8010278:	f8d8 1018 	ldr.w	r1, [r8, #24]
 801027c:	4628      	mov	r0, r5
 801027e:	f005 f95d 	bl	801553c <ucdr_deserialize_string>
 8010282:	6923      	ldr	r3, [r4, #16]
 8010284:	f109 0901 	add.w	r9, r9, #1
 8010288:	4006      	ands	r6, r0
 801028a:	4599      	cmp	r9, r3
 801028c:	f108 0808 	add.w	r8, r8, #8
 8010290:	b2f6      	uxtb	r6, r6
 8010292:	d3e5      	bcc.n	8010260 <uxr_deserialize_CLIENT_Representation+0x8c>
 8010294:	4037      	ands	r7, r6
 8010296:	e7c8      	b.n	801022a <uxr_deserialize_CLIENT_Representation+0x56>
 8010298:	4007      	ands	r7, r0
 801029a:	e7c6      	b.n	801022a <uxr_deserialize_CLIENT_Representation+0x56>

0801029c <uxr_serialize_AGENT_Representation>:
 801029c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102a0:	2204      	movs	r2, #4
 80102a2:	460f      	mov	r7, r1
 80102a4:	4605      	mov	r5, r0
 80102a6:	f005 f819 	bl	80152dc <ucdr_serialize_array_uint8_t>
 80102aa:	2202      	movs	r2, #2
 80102ac:	4604      	mov	r4, r0
 80102ae:	1d39      	adds	r1, r7, #4
 80102b0:	4628      	mov	r0, r5
 80102b2:	f005 f813 	bl	80152dc <ucdr_serialize_array_uint8_t>
 80102b6:	4020      	ands	r0, r4
 80102b8:	2202      	movs	r2, #2
 80102ba:	1db9      	adds	r1, r7, #6
 80102bc:	b2c4      	uxtb	r4, r0
 80102be:	4628      	mov	r0, r5
 80102c0:	f005 f80c 	bl	80152dc <ucdr_serialize_array_uint8_t>
 80102c4:	7a39      	ldrb	r1, [r7, #8]
 80102c6:	4004      	ands	r4, r0
 80102c8:	4628      	mov	r0, r5
 80102ca:	f7fc fc29 	bl	800cb20 <ucdr_serialize_bool>
 80102ce:	7a3b      	ldrb	r3, [r7, #8]
 80102d0:	ea00 0804 	and.w	r8, r0, r4
 80102d4:	b913      	cbnz	r3, 80102dc <uxr_serialize_AGENT_Representation+0x40>
 80102d6:	4640      	mov	r0, r8
 80102d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102dc:	68f9      	ldr	r1, [r7, #12]
 80102de:	4628      	mov	r0, r5
 80102e0:	f7fc fe62 	bl	800cfa8 <ucdr_serialize_uint32_t>
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	b303      	cbz	r3, 801032a <uxr_serialize_AGENT_Representation+0x8e>
 80102e8:	b1d0      	cbz	r0, 8010320 <uxr_serialize_AGENT_Representation+0x84>
 80102ea:	463e      	mov	r6, r7
 80102ec:	f04f 0900 	mov.w	r9, #0
 80102f0:	e001      	b.n	80102f6 <uxr_serialize_AGENT_Representation+0x5a>
 80102f2:	3608      	adds	r6, #8
 80102f4:	b1a4      	cbz	r4, 8010320 <uxr_serialize_AGENT_Representation+0x84>
 80102f6:	6931      	ldr	r1, [r6, #16]
 80102f8:	4628      	mov	r0, r5
 80102fa:	f005 f90f 	bl	801551c <ucdr_serialize_string>
 80102fe:	6971      	ldr	r1, [r6, #20]
 8010300:	4604      	mov	r4, r0
 8010302:	4628      	mov	r0, r5
 8010304:	f005 f90a 	bl	801551c <ucdr_serialize_string>
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	f109 0901 	add.w	r9, r9, #1
 801030e:	4004      	ands	r4, r0
 8010310:	4599      	cmp	r9, r3
 8010312:	b2e4      	uxtb	r4, r4
 8010314:	d3ed      	bcc.n	80102f2 <uxr_serialize_AGENT_Representation+0x56>
 8010316:	ea08 0804 	and.w	r8, r8, r4
 801031a:	4640      	mov	r0, r8
 801031c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010320:	f04f 0800 	mov.w	r8, #0
 8010324:	4640      	mov	r0, r8
 8010326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801032a:	ea08 0800 	and.w	r8, r8, r0
 801032e:	e7d2      	b.n	80102d6 <uxr_serialize_AGENT_Representation+0x3a>

08010330 <uxr_serialize_DATAWRITER_Representation>:
 8010330:	b570      	push	{r4, r5, r6, lr}
 8010332:	460d      	mov	r5, r1
 8010334:	7809      	ldrb	r1, [r1, #0]
 8010336:	4606      	mov	r6, r0
 8010338:	f7fc fc20 	bl	800cb7c <ucdr_serialize_uint8_t>
 801033c:	4604      	mov	r4, r0
 801033e:	b130      	cbz	r0, 801034e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010340:	782b      	ldrb	r3, [r5, #0]
 8010342:	2b02      	cmp	r3, #2
 8010344:	d00c      	beq.n	8010360 <uxr_serialize_DATAWRITER_Representation+0x30>
 8010346:	2b03      	cmp	r3, #3
 8010348:	d010      	beq.n	801036c <uxr_serialize_DATAWRITER_Representation+0x3c>
 801034a:	2b01      	cmp	r3, #1
 801034c:	d008      	beq.n	8010360 <uxr_serialize_DATAWRITER_Representation+0x30>
 801034e:	2202      	movs	r2, #2
 8010350:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8010354:	4630      	mov	r0, r6
 8010356:	f004 ffc1 	bl	80152dc <ucdr_serialize_array_uint8_t>
 801035a:	4020      	ands	r0, r4
 801035c:	b2c0      	uxtb	r0, r0
 801035e:	bd70      	pop	{r4, r5, r6, pc}
 8010360:	6869      	ldr	r1, [r5, #4]
 8010362:	4630      	mov	r0, r6
 8010364:	f005 f8da 	bl	801551c <ucdr_serialize_string>
 8010368:	4604      	mov	r4, r0
 801036a:	e7f0      	b.n	801034e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801036c:	4629      	mov	r1, r5
 801036e:	4630      	mov	r0, r6
 8010370:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8010374:	3104      	adds	r1, #4
 8010376:	f005 f8a5 	bl	80154c4 <ucdr_serialize_sequence_uint8_t>
 801037a:	4604      	mov	r4, r0
 801037c:	e7e7      	b.n	801034e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801037e:	bf00      	nop

08010380 <uxr_serialize_ObjectVariant.part.0>:
 8010380:	b570      	push	{r4, r5, r6, lr}
 8010382:	780b      	ldrb	r3, [r1, #0]
 8010384:	3b01      	subs	r3, #1
 8010386:	460c      	mov	r4, r1
 8010388:	4605      	mov	r5, r0
 801038a:	2b0d      	cmp	r3, #13
 801038c:	d854      	bhi.n	8010438 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801038e:	e8df f003 	tbb	[pc, r3]
 8010392:	0730      	.short	0x0730
 8010394:	07071b1b 	.word	0x07071b1b
 8010398:	0c530707 	.word	0x0c530707
 801039c:	494e0c0c 	.word	0x494e0c0c
 80103a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80103a4:	3104      	adds	r1, #4
 80103a6:	f7ff bfc3 	b.w	8010330 <uxr_serialize_DATAWRITER_Representation>
 80103aa:	7909      	ldrb	r1, [r1, #4]
 80103ac:	f7fc fbe6 	bl	800cb7c <ucdr_serialize_uint8_t>
 80103b0:	b1e8      	cbz	r0, 80103ee <uxr_serialize_ObjectVariant.part.0+0x6e>
 80103b2:	7923      	ldrb	r3, [r4, #4]
 80103b4:	2b01      	cmp	r3, #1
 80103b6:	d001      	beq.n	80103bc <uxr_serialize_ObjectVariant.part.0+0x3c>
 80103b8:	2b02      	cmp	r3, #2
 80103ba:	d13d      	bne.n	8010438 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80103bc:	68a1      	ldr	r1, [r4, #8]
 80103be:	4628      	mov	r0, r5
 80103c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80103c4:	f005 b8aa 	b.w	801551c <ucdr_serialize_string>
 80103c8:	7909      	ldrb	r1, [r1, #4]
 80103ca:	f7fc fbd7 	bl	800cb7c <ucdr_serialize_uint8_t>
 80103ce:	4606      	mov	r6, r0
 80103d0:	b120      	cbz	r0, 80103dc <uxr_serialize_ObjectVariant.part.0+0x5c>
 80103d2:	7923      	ldrb	r3, [r4, #4]
 80103d4:	2b02      	cmp	r3, #2
 80103d6:	d039      	beq.n	801044c <uxr_serialize_ObjectVariant.part.0+0xcc>
 80103d8:	2b03      	cmp	r3, #3
 80103da:	d02f      	beq.n	801043c <uxr_serialize_ObjectVariant.part.0+0xbc>
 80103dc:	2202      	movs	r2, #2
 80103de:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80103e2:	4628      	mov	r0, r5
 80103e4:	f004 ff7a 	bl	80152dc <ucdr_serialize_array_uint8_t>
 80103e8:	4030      	ands	r0, r6
 80103ea:	b2c0      	uxtb	r0, r0
 80103ec:	bd70      	pop	{r4, r5, r6, pc}
 80103ee:	2000      	movs	r0, #0
 80103f0:	bd70      	pop	{r4, r5, r6, pc}
 80103f2:	7909      	ldrb	r1, [r1, #4]
 80103f4:	f7fc fbc2 	bl	800cb7c <ucdr_serialize_uint8_t>
 80103f8:	4606      	mov	r6, r0
 80103fa:	b158      	cbz	r0, 8010414 <uxr_serialize_ObjectVariant.part.0+0x94>
 80103fc:	7923      	ldrb	r3, [r4, #4]
 80103fe:	2b02      	cmp	r3, #2
 8010400:	d003      	beq.n	801040a <uxr_serialize_ObjectVariant.part.0+0x8a>
 8010402:	2b03      	cmp	r3, #3
 8010404:	d028      	beq.n	8010458 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8010406:	2b01      	cmp	r3, #1
 8010408:	d104      	bne.n	8010414 <uxr_serialize_ObjectVariant.part.0+0x94>
 801040a:	68a1      	ldr	r1, [r4, #8]
 801040c:	4628      	mov	r0, r5
 801040e:	f005 f885 	bl	801551c <ucdr_serialize_string>
 8010412:	4606      	mov	r6, r0
 8010414:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8010418:	4628      	mov	r0, r5
 801041a:	f7fd f8eb 	bl	800d5f4 <ucdr_serialize_int16_t>
 801041e:	4030      	ands	r0, r6
 8010420:	b2c0      	uxtb	r0, r0
 8010422:	bd70      	pop	{r4, r5, r6, pc}
 8010424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010428:	3104      	adds	r1, #4
 801042a:	f7ff be7b 	b.w	8010124 <uxr_serialize_CLIENT_Representation>
 801042e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010432:	3104      	adds	r1, #4
 8010434:	f7ff bf32 	b.w	801029c <uxr_serialize_AGENT_Representation>
 8010438:	2001      	movs	r0, #1
 801043a:	bd70      	pop	{r4, r5, r6, pc}
 801043c:	68a2      	ldr	r2, [r4, #8]
 801043e:	f104 010c 	add.w	r1, r4, #12
 8010442:	4628      	mov	r0, r5
 8010444:	f005 f83e 	bl	80154c4 <ucdr_serialize_sequence_uint8_t>
 8010448:	4606      	mov	r6, r0
 801044a:	e7c7      	b.n	80103dc <uxr_serialize_ObjectVariant.part.0+0x5c>
 801044c:	68a1      	ldr	r1, [r4, #8]
 801044e:	4628      	mov	r0, r5
 8010450:	f005 f864 	bl	801551c <ucdr_serialize_string>
 8010454:	4606      	mov	r6, r0
 8010456:	e7c1      	b.n	80103dc <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010458:	68a2      	ldr	r2, [r4, #8]
 801045a:	f104 010c 	add.w	r1, r4, #12
 801045e:	4628      	mov	r0, r5
 8010460:	f005 f830 	bl	80154c4 <ucdr_serialize_sequence_uint8_t>
 8010464:	4606      	mov	r6, r0
 8010466:	e7d5      	b.n	8010414 <uxr_serialize_ObjectVariant.part.0+0x94>

08010468 <uxr_deserialize_DATAWRITER_Representation>:
 8010468:	b570      	push	{r4, r5, r6, lr}
 801046a:	4606      	mov	r6, r0
 801046c:	460d      	mov	r5, r1
 801046e:	f7fc fb9b 	bl	800cba8 <ucdr_deserialize_uint8_t>
 8010472:	4604      	mov	r4, r0
 8010474:	b130      	cbz	r0, 8010484 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8010476:	782b      	ldrb	r3, [r5, #0]
 8010478:	2b02      	cmp	r3, #2
 801047a:	d00c      	beq.n	8010496 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801047c:	2b03      	cmp	r3, #3
 801047e:	d012      	beq.n	80104a6 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8010480:	2b01      	cmp	r3, #1
 8010482:	d008      	beq.n	8010496 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8010484:	2202      	movs	r2, #2
 8010486:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801048a:	4630      	mov	r0, r6
 801048c:	f004 ff8a 	bl	80153a4 <ucdr_deserialize_array_uint8_t>
 8010490:	4020      	ands	r0, r4
 8010492:	b2c0      	uxtb	r0, r0
 8010494:	bd70      	pop	{r4, r5, r6, pc}
 8010496:	6869      	ldr	r1, [r5, #4]
 8010498:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801049c:	4630      	mov	r0, r6
 801049e:	f005 f84d 	bl	801553c <ucdr_deserialize_string>
 80104a2:	4604      	mov	r4, r0
 80104a4:	e7ee      	b.n	8010484 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80104a6:	1d2b      	adds	r3, r5, #4
 80104a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80104ac:	f105 0108 	add.w	r1, r5, #8
 80104b0:	4630      	mov	r0, r6
 80104b2:	f005 f819 	bl	80154e8 <ucdr_deserialize_sequence_uint8_t>
 80104b6:	4604      	mov	r4, r0
 80104b8:	e7e4      	b.n	8010484 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80104ba:	bf00      	nop

080104bc <uxr_serialize_OBJK_DomainParticipant_Binary>:
 80104bc:	b570      	push	{r4, r5, r6, lr}
 80104be:	460d      	mov	r5, r1
 80104c0:	7809      	ldrb	r1, [r1, #0]
 80104c2:	4606      	mov	r6, r0
 80104c4:	f7fc fb2c 	bl	800cb20 <ucdr_serialize_bool>
 80104c8:	782b      	ldrb	r3, [r5, #0]
 80104ca:	4604      	mov	r4, r0
 80104cc:	b94b      	cbnz	r3, 80104e2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 80104ce:	7a29      	ldrb	r1, [r5, #8]
 80104d0:	4630      	mov	r0, r6
 80104d2:	f7fc fb25 	bl	800cb20 <ucdr_serialize_bool>
 80104d6:	7a2b      	ldrb	r3, [r5, #8]
 80104d8:	4004      	ands	r4, r0
 80104da:	b2e4      	uxtb	r4, r4
 80104dc:	b943      	cbnz	r3, 80104f0 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80104de:	4620      	mov	r0, r4
 80104e0:	bd70      	pop	{r4, r5, r6, pc}
 80104e2:	6869      	ldr	r1, [r5, #4]
 80104e4:	4630      	mov	r0, r6
 80104e6:	f005 f819 	bl	801551c <ucdr_serialize_string>
 80104ea:	4004      	ands	r4, r0
 80104ec:	b2e4      	uxtb	r4, r4
 80104ee:	e7ee      	b.n	80104ce <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80104f0:	68e9      	ldr	r1, [r5, #12]
 80104f2:	4630      	mov	r0, r6
 80104f4:	f005 f812 	bl	801551c <ucdr_serialize_string>
 80104f8:	4004      	ands	r4, r0
 80104fa:	4620      	mov	r0, r4
 80104fc:	bd70      	pop	{r4, r5, r6, pc}
 80104fe:	bf00      	nop

08010500 <uxr_serialize_OBJK_Topic_Binary>:
 8010500:	b570      	push	{r4, r5, r6, lr}
 8010502:	460d      	mov	r5, r1
 8010504:	6809      	ldr	r1, [r1, #0]
 8010506:	4606      	mov	r6, r0
 8010508:	f005 f808 	bl	801551c <ucdr_serialize_string>
 801050c:	7929      	ldrb	r1, [r5, #4]
 801050e:	4604      	mov	r4, r0
 8010510:	4630      	mov	r0, r6
 8010512:	f7fc fb05 	bl	800cb20 <ucdr_serialize_bool>
 8010516:	792b      	ldrb	r3, [r5, #4]
 8010518:	4004      	ands	r4, r0
 801051a:	b2e4      	uxtb	r4, r4
 801051c:	b943      	cbnz	r3, 8010530 <uxr_serialize_OBJK_Topic_Binary+0x30>
 801051e:	7b29      	ldrb	r1, [r5, #12]
 8010520:	4630      	mov	r0, r6
 8010522:	f7fc fafd 	bl	800cb20 <ucdr_serialize_bool>
 8010526:	7b2b      	ldrb	r3, [r5, #12]
 8010528:	4004      	ands	r4, r0
 801052a:	b93b      	cbnz	r3, 801053c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801052c:	4620      	mov	r0, r4
 801052e:	bd70      	pop	{r4, r5, r6, pc}
 8010530:	68a9      	ldr	r1, [r5, #8]
 8010532:	4630      	mov	r0, r6
 8010534:	f004 fff2 	bl	801551c <ucdr_serialize_string>
 8010538:	4004      	ands	r4, r0
 801053a:	e7f0      	b.n	801051e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 801053c:	6929      	ldr	r1, [r5, #16]
 801053e:	4630      	mov	r0, r6
 8010540:	f004 ffec 	bl	801551c <ucdr_serialize_string>
 8010544:	4004      	ands	r4, r0
 8010546:	b2e4      	uxtb	r4, r4
 8010548:	4620      	mov	r0, r4
 801054a:	bd70      	pop	{r4, r5, r6, pc}

0801054c <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 801054c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010550:	460c      	mov	r4, r1
 8010552:	7809      	ldrb	r1, [r1, #0]
 8010554:	4606      	mov	r6, r0
 8010556:	f7fc fae3 	bl	800cb20 <ucdr_serialize_bool>
 801055a:	7823      	ldrb	r3, [r4, #0]
 801055c:	4605      	mov	r5, r0
 801055e:	b96b      	cbnz	r3, 801057c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8010560:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8010564:	4630      	mov	r0, r6
 8010566:	f7fc fadb 	bl	800cb20 <ucdr_serialize_bool>
 801056a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801056e:	4005      	ands	r5, r0
 8010570:	b2ed      	uxtb	r5, r5
 8010572:	2b00      	cmp	r3, #0
 8010574:	d169      	bne.n	801064a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8010576:	4628      	mov	r0, r5
 8010578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801057c:	6861      	ldr	r1, [r4, #4]
 801057e:	4630      	mov	r0, r6
 8010580:	f7fc fd12 	bl	800cfa8 <ucdr_serialize_uint32_t>
 8010584:	6863      	ldr	r3, [r4, #4]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d06b      	beq.n	8010662 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801058a:	2800      	cmp	r0, #0
 801058c:	d067      	beq.n	801065e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801058e:	68a1      	ldr	r1, [r4, #8]
 8010590:	4630      	mov	r0, r6
 8010592:	f004 ffc3 	bl	801551c <ucdr_serialize_string>
 8010596:	6863      	ldr	r3, [r4, #4]
 8010598:	2b01      	cmp	r3, #1
 801059a:	d953      	bls.n	8010644 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801059c:	2800      	cmp	r0, #0
 801059e:	d05e      	beq.n	801065e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80105a0:	68e1      	ldr	r1, [r4, #12]
 80105a2:	4630      	mov	r0, r6
 80105a4:	f004 ffba 	bl	801551c <ucdr_serialize_string>
 80105a8:	6863      	ldr	r3, [r4, #4]
 80105aa:	2b02      	cmp	r3, #2
 80105ac:	d94a      	bls.n	8010644 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80105ae:	2800      	cmp	r0, #0
 80105b0:	d055      	beq.n	801065e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80105b2:	6921      	ldr	r1, [r4, #16]
 80105b4:	4630      	mov	r0, r6
 80105b6:	f004 ffb1 	bl	801551c <ucdr_serialize_string>
 80105ba:	6863      	ldr	r3, [r4, #4]
 80105bc:	2b03      	cmp	r3, #3
 80105be:	d941      	bls.n	8010644 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80105c0:	2800      	cmp	r0, #0
 80105c2:	d04c      	beq.n	801065e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80105c4:	6961      	ldr	r1, [r4, #20]
 80105c6:	4630      	mov	r0, r6
 80105c8:	f004 ffa8 	bl	801551c <ucdr_serialize_string>
 80105cc:	6863      	ldr	r3, [r4, #4]
 80105ce:	2b04      	cmp	r3, #4
 80105d0:	d938      	bls.n	8010644 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80105d2:	2800      	cmp	r0, #0
 80105d4:	d043      	beq.n	801065e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80105d6:	69a1      	ldr	r1, [r4, #24]
 80105d8:	4630      	mov	r0, r6
 80105da:	f004 ff9f 	bl	801551c <ucdr_serialize_string>
 80105de:	6863      	ldr	r3, [r4, #4]
 80105e0:	2b05      	cmp	r3, #5
 80105e2:	d92f      	bls.n	8010644 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80105e4:	2800      	cmp	r0, #0
 80105e6:	d03a      	beq.n	801065e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80105e8:	69e1      	ldr	r1, [r4, #28]
 80105ea:	4630      	mov	r0, r6
 80105ec:	f004 ff96 	bl	801551c <ucdr_serialize_string>
 80105f0:	6863      	ldr	r3, [r4, #4]
 80105f2:	2b06      	cmp	r3, #6
 80105f4:	d926      	bls.n	8010644 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80105f6:	b390      	cbz	r0, 801065e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80105f8:	6a21      	ldr	r1, [r4, #32]
 80105fa:	4630      	mov	r0, r6
 80105fc:	f004 ff8e 	bl	801551c <ucdr_serialize_string>
 8010600:	6863      	ldr	r3, [r4, #4]
 8010602:	2b07      	cmp	r3, #7
 8010604:	d91e      	bls.n	8010644 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010606:	b350      	cbz	r0, 801065e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010608:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801060a:	4630      	mov	r0, r6
 801060c:	f004 ff86 	bl	801551c <ucdr_serialize_string>
 8010610:	6863      	ldr	r3, [r4, #4]
 8010612:	2b08      	cmp	r3, #8
 8010614:	d916      	bls.n	8010644 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010616:	b310      	cbz	r0, 801065e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010618:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801061a:	4630      	mov	r0, r6
 801061c:	f004 ff7e 	bl	801551c <ucdr_serialize_string>
 8010620:	6863      	ldr	r3, [r4, #4]
 8010622:	2b09      	cmp	r3, #9
 8010624:	d90e      	bls.n	8010644 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8010626:	b1d0      	cbz	r0, 801065e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010628:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 801062c:	2709      	movs	r7, #9
 801062e:	e000      	b.n	8010632 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8010630:	b1a8      	cbz	r0, 801065e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8010632:	f858 1b04 	ldr.w	r1, [r8], #4
 8010636:	4630      	mov	r0, r6
 8010638:	f004 ff70 	bl	801551c <ucdr_serialize_string>
 801063c:	6862      	ldr	r2, [r4, #4]
 801063e:	3701      	adds	r7, #1
 8010640:	4297      	cmp	r7, r2
 8010642:	d3f5      	bcc.n	8010630 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8010644:	4005      	ands	r5, r0
 8010646:	b2ed      	uxtb	r5, r5
 8010648:	e78a      	b.n	8010560 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801064a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801064c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8010650:	4630      	mov	r0, r6
 8010652:	f004 ff37 	bl	80154c4 <ucdr_serialize_sequence_uint8_t>
 8010656:	4005      	ands	r5, r0
 8010658:	4628      	mov	r0, r5
 801065a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801065e:	2500      	movs	r5, #0
 8010660:	e77e      	b.n	8010560 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8010662:	4028      	ands	r0, r5
 8010664:	b2c5      	uxtb	r5, r0
 8010666:	e77b      	b.n	8010560 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08010668 <uxr_serialize_OBJK_Subscriber_Binary>:
 8010668:	b570      	push	{r4, r5, r6, lr}
 801066a:	460d      	mov	r5, r1
 801066c:	7809      	ldrb	r1, [r1, #0]
 801066e:	4606      	mov	r6, r0
 8010670:	f7fc fa56 	bl	800cb20 <ucdr_serialize_bool>
 8010674:	782b      	ldrb	r3, [r5, #0]
 8010676:	4604      	mov	r4, r0
 8010678:	b94b      	cbnz	r3, 801068e <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801067a:	7a29      	ldrb	r1, [r5, #8]
 801067c:	4630      	mov	r0, r6
 801067e:	f7fc fa4f 	bl	800cb20 <ucdr_serialize_bool>
 8010682:	7a2b      	ldrb	r3, [r5, #8]
 8010684:	4004      	ands	r4, r0
 8010686:	b2e4      	uxtb	r4, r4
 8010688:	b943      	cbnz	r3, 801069c <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801068a:	4620      	mov	r0, r4
 801068c:	bd70      	pop	{r4, r5, r6, pc}
 801068e:	6869      	ldr	r1, [r5, #4]
 8010690:	4630      	mov	r0, r6
 8010692:	f004 ff43 	bl	801551c <ucdr_serialize_string>
 8010696:	4004      	ands	r4, r0
 8010698:	b2e4      	uxtb	r4, r4
 801069a:	e7ee      	b.n	801067a <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801069c:	f105 010c 	add.w	r1, r5, #12
 80106a0:	4630      	mov	r0, r6
 80106a2:	f7ff ff53 	bl	801054c <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 80106a6:	4004      	ands	r4, r0
 80106a8:	4620      	mov	r0, r4
 80106aa:	bd70      	pop	{r4, r5, r6, pc}

080106ac <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80106ac:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80106b0:	4688      	mov	r8, r1
 80106b2:	8809      	ldrh	r1, [r1, #0]
 80106b4:	4681      	mov	r9, r0
 80106b6:	f7fc fa8d 	bl	800cbd4 <ucdr_serialize_uint16_t>
 80106ba:	f898 1002 	ldrb.w	r1, [r8, #2]
 80106be:	4606      	mov	r6, r0
 80106c0:	4648      	mov	r0, r9
 80106c2:	f7fc fa2d 	bl	800cb20 <ucdr_serialize_bool>
 80106c6:	f898 3002 	ldrb.w	r3, [r8, #2]
 80106ca:	4006      	ands	r6, r0
 80106cc:	b2f5      	uxtb	r5, r6
 80106ce:	b9eb      	cbnz	r3, 801070c <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 80106d0:	f898 1006 	ldrb.w	r1, [r8, #6]
 80106d4:	4648      	mov	r0, r9
 80106d6:	f7fc fa23 	bl	800cb20 <ucdr_serialize_bool>
 80106da:	f898 3006 	ldrb.w	r3, [r8, #6]
 80106de:	4005      	ands	r5, r0
 80106e0:	bb7b      	cbnz	r3, 8010742 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80106e2:	f898 100c 	ldrb.w	r1, [r8, #12]
 80106e6:	4648      	mov	r0, r9
 80106e8:	f7fc fa1a 	bl	800cb20 <ucdr_serialize_bool>
 80106ec:	f898 300c 	ldrb.w	r3, [r8, #12]
 80106f0:	4005      	ands	r5, r0
 80106f2:	b9f3      	cbnz	r3, 8010732 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80106f4:	f898 1014 	ldrb.w	r1, [r8, #20]
 80106f8:	4648      	mov	r0, r9
 80106fa:	f7fc fa11 	bl	800cb20 <ucdr_serialize_bool>
 80106fe:	f898 3014 	ldrb.w	r3, [r8, #20]
 8010702:	4005      	ands	r5, r0
 8010704:	b94b      	cbnz	r3, 801071a <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8010706:	4628      	mov	r0, r5
 8010708:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801070c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8010710:	4648      	mov	r0, r9
 8010712:	f7fc fa5f 	bl	800cbd4 <ucdr_serialize_uint16_t>
 8010716:	4005      	ands	r5, r0
 8010718:	e7da      	b.n	80106d0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801071a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801071e:	f108 011c 	add.w	r1, r8, #28
 8010722:	4648      	mov	r0, r9
 8010724:	f004 fece 	bl	80154c4 <ucdr_serialize_sequence_uint8_t>
 8010728:	4028      	ands	r0, r5
 801072a:	b2c5      	uxtb	r5, r0
 801072c:	4628      	mov	r0, r5
 801072e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8010732:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010736:	4648      	mov	r0, r9
 8010738:	f7fc fc36 	bl	800cfa8 <ucdr_serialize_uint32_t>
 801073c:	4028      	ands	r0, r5
 801073e:	b2c5      	uxtb	r5, r0
 8010740:	e7d8      	b.n	80106f4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8010742:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8010746:	4648      	mov	r0, r9
 8010748:	f7fc fc2e 	bl	800cfa8 <ucdr_serialize_uint32_t>
 801074c:	4028      	ands	r0, r5
 801074e:	b2c5      	uxtb	r5, r0
 8010750:	e7c7      	b.n	80106e2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8010752:	bf00      	nop

08010754 <uxr_serialize_OBJK_DataReader_Binary>:
 8010754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010756:	2202      	movs	r2, #2
 8010758:	460c      	mov	r4, r1
 801075a:	4606      	mov	r6, r0
 801075c:	f004 fdbe 	bl	80152dc <ucdr_serialize_array_uint8_t>
 8010760:	78a1      	ldrb	r1, [r4, #2]
 8010762:	4605      	mov	r5, r0
 8010764:	4630      	mov	r0, r6
 8010766:	f7fc f9db 	bl	800cb20 <ucdr_serialize_bool>
 801076a:	78a3      	ldrb	r3, [r4, #2]
 801076c:	4005      	ands	r5, r0
 801076e:	b2ed      	uxtb	r5, r5
 8010770:	b90b      	cbnz	r3, 8010776 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8010772:	4628      	mov	r0, r5
 8010774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010776:	f104 0108 	add.w	r1, r4, #8
 801077a:	4630      	mov	r0, r6
 801077c:	f7ff ff96 	bl	80106ac <uxr_serialize_OBJK_Endpoint_QosBinary>
 8010780:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010784:	4607      	mov	r7, r0
 8010786:	4630      	mov	r0, r6
 8010788:	f7fc f9ca 	bl	800cb20 <ucdr_serialize_bool>
 801078c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010790:	4038      	ands	r0, r7
 8010792:	b2c7      	uxtb	r7, r0
 8010794:	b95b      	cbnz	r3, 80107ae <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8010796:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 801079a:	4630      	mov	r0, r6
 801079c:	f7fc f9c0 	bl	800cb20 <ucdr_serialize_bool>
 80107a0:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80107a4:	4007      	ands	r7, r0
 80107a6:	b94b      	cbnz	r3, 80107bc <uxr_serialize_OBJK_DataReader_Binary+0x68>
 80107a8:	403d      	ands	r5, r7
 80107aa:	4628      	mov	r0, r5
 80107ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107ae:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 80107b2:	4630      	mov	r0, r6
 80107b4:	f7fc fe4e 	bl	800d454 <ucdr_serialize_uint64_t>
 80107b8:	4007      	ands	r7, r0
 80107ba:	e7ec      	b.n	8010796 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 80107bc:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80107be:	4630      	mov	r0, r6
 80107c0:	f004 feac 	bl	801551c <ucdr_serialize_string>
 80107c4:	4007      	ands	r7, r0
 80107c6:	b2ff      	uxtb	r7, r7
 80107c8:	e7ee      	b.n	80107a8 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 80107ca:	bf00      	nop

080107cc <uxr_deserialize_ObjectVariant>:
 80107cc:	b570      	push	{r4, r5, r6, lr}
 80107ce:	4605      	mov	r5, r0
 80107d0:	460e      	mov	r6, r1
 80107d2:	f7fc f9e9 	bl	800cba8 <ucdr_deserialize_uint8_t>
 80107d6:	b168      	cbz	r0, 80107f4 <uxr_deserialize_ObjectVariant+0x28>
 80107d8:	7833      	ldrb	r3, [r6, #0]
 80107da:	3b01      	subs	r3, #1
 80107dc:	4604      	mov	r4, r0
 80107de:	2b0d      	cmp	r3, #13
 80107e0:	d809      	bhi.n	80107f6 <uxr_deserialize_ObjectVariant+0x2a>
 80107e2:	e8df f003 	tbb	[pc, r3]
 80107e6:	0a41      	.short	0x0a41
 80107e8:	0a0a2323 	.word	0x0a0a2323
 80107ec:	10080a0a 	.word	0x10080a0a
 80107f0:	565c1010 	.word	0x565c1010
 80107f4:	2400      	movs	r4, #0
 80107f6:	4620      	mov	r0, r4
 80107f8:	bd70      	pop	{r4, r5, r6, pc}
 80107fa:	1d31      	adds	r1, r6, #4
 80107fc:	4628      	mov	r0, r5
 80107fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010802:	f7ff be31 	b.w	8010468 <uxr_deserialize_DATAWRITER_Representation>
 8010806:	1d31      	adds	r1, r6, #4
 8010808:	4628      	mov	r0, r5
 801080a:	f7fc f9cd 	bl	800cba8 <ucdr_deserialize_uint8_t>
 801080e:	2800      	cmp	r0, #0
 8010810:	d0f0      	beq.n	80107f4 <uxr_deserialize_ObjectVariant+0x28>
 8010812:	7933      	ldrb	r3, [r6, #4]
 8010814:	2b01      	cmp	r3, #1
 8010816:	d001      	beq.n	801081c <uxr_deserialize_ObjectVariant+0x50>
 8010818:	2b02      	cmp	r3, #2
 801081a:	d1ec      	bne.n	80107f6 <uxr_deserialize_ObjectVariant+0x2a>
 801081c:	68b1      	ldr	r1, [r6, #8]
 801081e:	4628      	mov	r0, r5
 8010820:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010824:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010828:	f004 be88 	b.w	801553c <ucdr_deserialize_string>
 801082c:	1d31      	adds	r1, r6, #4
 801082e:	4628      	mov	r0, r5
 8010830:	f7fc f9ba 	bl	800cba8 <ucdr_deserialize_uint8_t>
 8010834:	4604      	mov	r4, r0
 8010836:	b170      	cbz	r0, 8010856 <uxr_deserialize_ObjectVariant+0x8a>
 8010838:	7933      	ldrb	r3, [r6, #4]
 801083a:	2b02      	cmp	r3, #2
 801083c:	d04c      	beq.n	80108d8 <uxr_deserialize_ObjectVariant+0x10c>
 801083e:	2b03      	cmp	r3, #3
 8010840:	d109      	bne.n	8010856 <uxr_deserialize_ObjectVariant+0x8a>
 8010842:	f106 0308 	add.w	r3, r6, #8
 8010846:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801084a:	f106 010c 	add.w	r1, r6, #12
 801084e:	4628      	mov	r0, r5
 8010850:	f004 fe4a 	bl	80154e8 <ucdr_deserialize_sequence_uint8_t>
 8010854:	4604      	mov	r4, r0
 8010856:	2202      	movs	r2, #2
 8010858:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801085c:	4628      	mov	r0, r5
 801085e:	f004 fda1 	bl	80153a4 <ucdr_deserialize_array_uint8_t>
 8010862:	4020      	ands	r0, r4
 8010864:	b2c4      	uxtb	r4, r0
 8010866:	e7c6      	b.n	80107f6 <uxr_deserialize_ObjectVariant+0x2a>
 8010868:	1d31      	adds	r1, r6, #4
 801086a:	4628      	mov	r0, r5
 801086c:	f7fc f99c 	bl	800cba8 <ucdr_deserialize_uint8_t>
 8010870:	4604      	mov	r4, r0
 8010872:	b130      	cbz	r0, 8010882 <uxr_deserialize_ObjectVariant+0xb6>
 8010874:	7933      	ldrb	r3, [r6, #4]
 8010876:	2b02      	cmp	r3, #2
 8010878:	d036      	beq.n	80108e8 <uxr_deserialize_ObjectVariant+0x11c>
 801087a:	2b03      	cmp	r3, #3
 801087c:	d03c      	beq.n	80108f8 <uxr_deserialize_ObjectVariant+0x12c>
 801087e:	2b01      	cmp	r3, #1
 8010880:	d032      	beq.n	80108e8 <uxr_deserialize_ObjectVariant+0x11c>
 8010882:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8010886:	4628      	mov	r0, r5
 8010888:	f7fc ff34 	bl	800d6f4 <ucdr_deserialize_int16_t>
 801088c:	4020      	ands	r0, r4
 801088e:	b2c4      	uxtb	r4, r0
 8010890:	e7b1      	b.n	80107f6 <uxr_deserialize_ObjectVariant+0x2a>
 8010892:	1d31      	adds	r1, r6, #4
 8010894:	4628      	mov	r0, r5
 8010896:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801089a:	f7ff bc9b 	b.w	80101d4 <uxr_deserialize_CLIENT_Representation>
 801089e:	2204      	movs	r2, #4
 80108a0:	18b1      	adds	r1, r6, r2
 80108a2:	4628      	mov	r0, r5
 80108a4:	f004 fd7e 	bl	80153a4 <ucdr_deserialize_array_uint8_t>
 80108a8:	2202      	movs	r2, #2
 80108aa:	f106 0108 	add.w	r1, r6, #8
 80108ae:	4604      	mov	r4, r0
 80108b0:	4628      	mov	r0, r5
 80108b2:	f004 fd77 	bl	80153a4 <ucdr_deserialize_array_uint8_t>
 80108b6:	2202      	movs	r2, #2
 80108b8:	4004      	ands	r4, r0
 80108ba:	f106 010a 	add.w	r1, r6, #10
 80108be:	4628      	mov	r0, r5
 80108c0:	f004 fd70 	bl	80153a4 <ucdr_deserialize_array_uint8_t>
 80108c4:	b2e4      	uxtb	r4, r4
 80108c6:	4603      	mov	r3, r0
 80108c8:	f106 010c 	add.w	r1, r6, #12
 80108cc:	4628      	mov	r0, r5
 80108ce:	401c      	ands	r4, r3
 80108d0:	f7fc f93c 	bl	800cb4c <ucdr_deserialize_bool>
 80108d4:	4004      	ands	r4, r0
 80108d6:	e78e      	b.n	80107f6 <uxr_deserialize_ObjectVariant+0x2a>
 80108d8:	68b1      	ldr	r1, [r6, #8]
 80108da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80108de:	4628      	mov	r0, r5
 80108e0:	f004 fe2c 	bl	801553c <ucdr_deserialize_string>
 80108e4:	4604      	mov	r4, r0
 80108e6:	e7b6      	b.n	8010856 <uxr_deserialize_ObjectVariant+0x8a>
 80108e8:	68b1      	ldr	r1, [r6, #8]
 80108ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80108ee:	4628      	mov	r0, r5
 80108f0:	f004 fe24 	bl	801553c <ucdr_deserialize_string>
 80108f4:	4604      	mov	r4, r0
 80108f6:	e7c4      	b.n	8010882 <uxr_deserialize_ObjectVariant+0xb6>
 80108f8:	f106 0308 	add.w	r3, r6, #8
 80108fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010900:	f106 010c 	add.w	r1, r6, #12
 8010904:	4628      	mov	r0, r5
 8010906:	f004 fdef 	bl	80154e8 <ucdr_deserialize_sequence_uint8_t>
 801090a:	4604      	mov	r4, r0
 801090c:	e7b9      	b.n	8010882 <uxr_deserialize_ObjectVariant+0xb6>
 801090e:	bf00      	nop

08010910 <uxr_deserialize_BaseObjectRequest>:
 8010910:	b570      	push	{r4, r5, r6, lr}
 8010912:	2202      	movs	r2, #2
 8010914:	4605      	mov	r5, r0
 8010916:	460e      	mov	r6, r1
 8010918:	f004 fd44 	bl	80153a4 <ucdr_deserialize_array_uint8_t>
 801091c:	2202      	movs	r2, #2
 801091e:	4604      	mov	r4, r0
 8010920:	18b1      	adds	r1, r6, r2
 8010922:	4628      	mov	r0, r5
 8010924:	f004 fd3e 	bl	80153a4 <ucdr_deserialize_array_uint8_t>
 8010928:	4020      	ands	r0, r4
 801092a:	b2c0      	uxtb	r0, r0
 801092c:	bd70      	pop	{r4, r5, r6, pc}
 801092e:	bf00      	nop

08010930 <uxr_serialize_ActivityInfoVariant>:
 8010930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010934:	460d      	mov	r5, r1
 8010936:	7809      	ldrb	r1, [r1, #0]
 8010938:	4607      	mov	r7, r0
 801093a:	f7fc f91f 	bl	800cb7c <ucdr_serialize_uint8_t>
 801093e:	4681      	mov	r9, r0
 8010940:	b138      	cbz	r0, 8010952 <uxr_serialize_ActivityInfoVariant+0x22>
 8010942:	782b      	ldrb	r3, [r5, #0]
 8010944:	2b06      	cmp	r3, #6
 8010946:	f000 8082 	beq.w	8010a4e <uxr_serialize_ActivityInfoVariant+0x11e>
 801094a:	2b0d      	cmp	r3, #13
 801094c:	d016      	beq.n	801097c <uxr_serialize_ActivityInfoVariant+0x4c>
 801094e:	2b05      	cmp	r3, #5
 8010950:	d002      	beq.n	8010958 <uxr_serialize_ActivityInfoVariant+0x28>
 8010952:	4648      	mov	r0, r9
 8010954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010958:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801095c:	4638      	mov	r0, r7
 801095e:	f7fc fe49 	bl	800d5f4 <ucdr_serialize_int16_t>
 8010962:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8010966:	4681      	mov	r9, r0
 8010968:	4638      	mov	r0, r7
 801096a:	f7fc fd73 	bl	800d454 <ucdr_serialize_uint64_t>
 801096e:	ea09 0000 	and.w	r0, r9, r0
 8010972:	fa5f f980 	uxtb.w	r9, r0
 8010976:	4648      	mov	r0, r9
 8010978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801097c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8010980:	4638      	mov	r0, r7
 8010982:	f7fc fe37 	bl	800d5f4 <ucdr_serialize_int16_t>
 8010986:	68e9      	ldr	r1, [r5, #12]
 8010988:	4681      	mov	r9, r0
 801098a:	4638      	mov	r0, r7
 801098c:	f7fc fb0c 	bl	800cfa8 <ucdr_serialize_uint32_t>
 8010990:	68eb      	ldr	r3, [r5, #12]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d0eb      	beq.n	801096e <uxr_serialize_ActivityInfoVariant+0x3e>
 8010996:	b320      	cbz	r0, 80109e2 <uxr_serialize_ActivityInfoVariant+0xb2>
 8010998:	f105 080c 	add.w	r8, r5, #12
 801099c:	2600      	movs	r6, #0
 801099e:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 80109a2:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 80109a6:	f89a 1010 	ldrb.w	r1, [sl, #16]
 80109aa:	4638      	mov	r0, r7
 80109ac:	f7fc f8e6 	bl	800cb7c <ucdr_serialize_uint8_t>
 80109b0:	2800      	cmp	r0, #0
 80109b2:	d053      	beq.n	8010a5c <uxr_serialize_ActivityInfoVariant+0x12c>
 80109b4:	f89a 3010 	ldrb.w	r3, [sl, #16]
 80109b8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80109bc:	0074      	lsls	r4, r6, #1
 80109be:	00c9      	lsls	r1, r1, #3
 80109c0:	2b03      	cmp	r3, #3
 80109c2:	d854      	bhi.n	8010a6e <uxr_serialize_ActivityInfoVariant+0x13e>
 80109c4:	e8df f003 	tbb	[pc, r3]
 80109c8:	02102132 	.word	0x02102132
 80109cc:	4441      	add	r1, r8
 80109ce:	4638      	mov	r0, r7
 80109d0:	6889      	ldr	r1, [r1, #8]
 80109d2:	f004 fda3 	bl	801551c <ucdr_serialize_string>
 80109d6:	68ea      	ldr	r2, [r5, #12]
 80109d8:	3601      	adds	r6, #1
 80109da:	4296      	cmp	r6, r2
 80109dc:	d242      	bcs.n	8010a64 <uxr_serialize_ActivityInfoVariant+0x134>
 80109de:	2800      	cmp	r0, #0
 80109e0:	d1dd      	bne.n	801099e <uxr_serialize_ActivityInfoVariant+0x6e>
 80109e2:	f04f 0900 	mov.w	r9, #0
 80109e6:	e7b4      	b.n	8010952 <uxr_serialize_ActivityInfoVariant+0x22>
 80109e8:	3108      	adds	r1, #8
 80109ea:	4441      	add	r1, r8
 80109ec:	2210      	movs	r2, #16
 80109ee:	4638      	mov	r0, r7
 80109f0:	f004 fc74 	bl	80152dc <ucdr_serialize_array_uint8_t>
 80109f4:	4434      	add	r4, r6
 80109f6:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80109fa:	4604      	mov	r4, r0
 80109fc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80109fe:	4638      	mov	r0, r7
 8010a00:	f7fc fad2 	bl	800cfa8 <ucdr_serialize_uint32_t>
 8010a04:	4020      	ands	r0, r4
 8010a06:	b2c0      	uxtb	r0, r0
 8010a08:	e7e5      	b.n	80109d6 <uxr_serialize_ActivityInfoVariant+0xa6>
 8010a0a:	3108      	adds	r1, #8
 8010a0c:	4441      	add	r1, r8
 8010a0e:	2204      	movs	r2, #4
 8010a10:	4638      	mov	r0, r7
 8010a12:	f004 fc63 	bl	80152dc <ucdr_serialize_array_uint8_t>
 8010a16:	4434      	add	r4, r6
 8010a18:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8010a1c:	4604      	mov	r4, r0
 8010a1e:	8b19      	ldrh	r1, [r3, #24]
 8010a20:	4638      	mov	r0, r7
 8010a22:	f7fc f8d7 	bl	800cbd4 <ucdr_serialize_uint16_t>
 8010a26:	4020      	ands	r0, r4
 8010a28:	b2c0      	uxtb	r0, r0
 8010a2a:	e7d4      	b.n	80109d6 <uxr_serialize_ActivityInfoVariant+0xa6>
 8010a2c:	3108      	adds	r1, #8
 8010a2e:	4441      	add	r1, r8
 8010a30:	2202      	movs	r2, #2
 8010a32:	4638      	mov	r0, r7
 8010a34:	f004 fc52 	bl	80152dc <ucdr_serialize_array_uint8_t>
 8010a38:	4434      	add	r4, r6
 8010a3a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8010a3e:	4604      	mov	r4, r0
 8010a40:	7d99      	ldrb	r1, [r3, #22]
 8010a42:	4638      	mov	r0, r7
 8010a44:	f7fc f89a 	bl	800cb7c <ucdr_serialize_uint8_t>
 8010a48:	4020      	ands	r0, r4
 8010a4a:	b2c0      	uxtb	r0, r0
 8010a4c:	e7c3      	b.n	80109d6 <uxr_serialize_ActivityInfoVariant+0xa6>
 8010a4e:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8010a52:	4638      	mov	r0, r7
 8010a54:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a58:	f7fc bdcc 	b.w	800d5f4 <ucdr_serialize_int16_t>
 8010a5c:	68ea      	ldr	r2, [r5, #12]
 8010a5e:	3601      	adds	r6, #1
 8010a60:	42b2      	cmp	r2, r6
 8010a62:	d8be      	bhi.n	80109e2 <uxr_serialize_ActivityInfoVariant+0xb2>
 8010a64:	ea09 0900 	and.w	r9, r9, r0
 8010a68:	fa5f f989 	uxtb.w	r9, r9
 8010a6c:	e771      	b.n	8010952 <uxr_serialize_ActivityInfoVariant+0x22>
 8010a6e:	68eb      	ldr	r3, [r5, #12]
 8010a70:	3601      	adds	r6, #1
 8010a72:	429e      	cmp	r6, r3
 8010a74:	f10a 0a18 	add.w	sl, sl, #24
 8010a78:	d395      	bcc.n	80109a6 <uxr_serialize_ActivityInfoVariant+0x76>
 8010a7a:	e76a      	b.n	8010952 <uxr_serialize_ActivityInfoVariant+0x22>

08010a7c <uxr_deserialize_BaseObjectReply>:
 8010a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a80:	2202      	movs	r2, #2
 8010a82:	4606      	mov	r6, r0
 8010a84:	460f      	mov	r7, r1
 8010a86:	f004 fc8d 	bl	80153a4 <ucdr_deserialize_array_uint8_t>
 8010a8a:	2202      	movs	r2, #2
 8010a8c:	18b9      	adds	r1, r7, r2
 8010a8e:	4605      	mov	r5, r0
 8010a90:	4630      	mov	r0, r6
 8010a92:	f004 fc87 	bl	80153a4 <ucdr_deserialize_array_uint8_t>
 8010a96:	1d39      	adds	r1, r7, #4
 8010a98:	4680      	mov	r8, r0
 8010a9a:	4630      	mov	r0, r6
 8010a9c:	f7fc f884 	bl	800cba8 <ucdr_deserialize_uint8_t>
 8010aa0:	1d79      	adds	r1, r7, #5
 8010aa2:	4604      	mov	r4, r0
 8010aa4:	4630      	mov	r0, r6
 8010aa6:	f7fc f87f 	bl	800cba8 <ucdr_deserialize_uint8_t>
 8010aaa:	ea05 0508 	and.w	r5, r5, r8
 8010aae:	402c      	ands	r4, r5
 8010ab0:	4020      	ands	r0, r4
 8010ab2:	b2c0      	uxtb	r0, r0
 8010ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010ab8 <uxr_serialize_ReadSpecification>:
 8010ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010abc:	460e      	mov	r6, r1
 8010abe:	7809      	ldrb	r1, [r1, #0]
 8010ac0:	4607      	mov	r7, r0
 8010ac2:	f7fc f85b 	bl	800cb7c <ucdr_serialize_uint8_t>
 8010ac6:	7871      	ldrb	r1, [r6, #1]
 8010ac8:	4604      	mov	r4, r0
 8010aca:	4638      	mov	r0, r7
 8010acc:	f7fc f856 	bl	800cb7c <ucdr_serialize_uint8_t>
 8010ad0:	78b1      	ldrb	r1, [r6, #2]
 8010ad2:	4004      	ands	r4, r0
 8010ad4:	4638      	mov	r0, r7
 8010ad6:	f7fc f823 	bl	800cb20 <ucdr_serialize_bool>
 8010ada:	78b3      	ldrb	r3, [r6, #2]
 8010adc:	b2e4      	uxtb	r4, r4
 8010ade:	4004      	ands	r4, r0
 8010ae0:	b94b      	cbnz	r3, 8010af6 <uxr_serialize_ReadSpecification+0x3e>
 8010ae2:	7a31      	ldrb	r1, [r6, #8]
 8010ae4:	4638      	mov	r0, r7
 8010ae6:	f7fc f81b 	bl	800cb20 <ucdr_serialize_bool>
 8010aea:	7a33      	ldrb	r3, [r6, #8]
 8010aec:	4004      	ands	r4, r0
 8010aee:	b943      	cbnz	r3, 8010b02 <uxr_serialize_ReadSpecification+0x4a>
 8010af0:	4620      	mov	r0, r4
 8010af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010af6:	6871      	ldr	r1, [r6, #4]
 8010af8:	4638      	mov	r0, r7
 8010afa:	f004 fd0f 	bl	801551c <ucdr_serialize_string>
 8010afe:	4004      	ands	r4, r0
 8010b00:	e7ef      	b.n	8010ae2 <uxr_serialize_ReadSpecification+0x2a>
 8010b02:	8971      	ldrh	r1, [r6, #10]
 8010b04:	4638      	mov	r0, r7
 8010b06:	f7fc f865 	bl	800cbd4 <ucdr_serialize_uint16_t>
 8010b0a:	89b1      	ldrh	r1, [r6, #12]
 8010b0c:	4605      	mov	r5, r0
 8010b0e:	4638      	mov	r0, r7
 8010b10:	f7fc f860 	bl	800cbd4 <ucdr_serialize_uint16_t>
 8010b14:	89f1      	ldrh	r1, [r6, #14]
 8010b16:	4005      	ands	r5, r0
 8010b18:	4638      	mov	r0, r7
 8010b1a:	f7fc f85b 	bl	800cbd4 <ucdr_serialize_uint16_t>
 8010b1e:	8a31      	ldrh	r1, [r6, #16]
 8010b20:	4680      	mov	r8, r0
 8010b22:	4638      	mov	r0, r7
 8010b24:	f7fc f856 	bl	800cbd4 <ucdr_serialize_uint16_t>
 8010b28:	b2ed      	uxtb	r5, r5
 8010b2a:	4025      	ands	r5, r4
 8010b2c:	ea08 0505 	and.w	r5, r8, r5
 8010b30:	ea00 0405 	and.w	r4, r0, r5
 8010b34:	4620      	mov	r0, r4
 8010b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b3a:	bf00      	nop

08010b3c <uxr_serialize_CREATE_CLIENT_Payload>:
 8010b3c:	f7ff baf2 	b.w	8010124 <uxr_serialize_CLIENT_Representation>

08010b40 <uxr_serialize_CREATE_Payload>:
 8010b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b42:	2202      	movs	r2, #2
 8010b44:	4607      	mov	r7, r0
 8010b46:	460e      	mov	r6, r1
 8010b48:	f004 fbc8 	bl	80152dc <ucdr_serialize_array_uint8_t>
 8010b4c:	2202      	movs	r2, #2
 8010b4e:	18b1      	adds	r1, r6, r2
 8010b50:	4605      	mov	r5, r0
 8010b52:	4638      	mov	r0, r7
 8010b54:	f004 fbc2 	bl	80152dc <ucdr_serialize_array_uint8_t>
 8010b58:	7931      	ldrb	r1, [r6, #4]
 8010b5a:	4604      	mov	r4, r0
 8010b5c:	4638      	mov	r0, r7
 8010b5e:	f7fc f80d 	bl	800cb7c <ucdr_serialize_uint8_t>
 8010b62:	b170      	cbz	r0, 8010b82 <uxr_serialize_CREATE_Payload+0x42>
 8010b64:	7933      	ldrb	r3, [r6, #4]
 8010b66:	402c      	ands	r4, r5
 8010b68:	3b01      	subs	r3, #1
 8010b6a:	b2e4      	uxtb	r4, r4
 8010b6c:	2b0d      	cmp	r3, #13
 8010b6e:	d809      	bhi.n	8010b84 <uxr_serialize_CREATE_Payload+0x44>
 8010b70:	e8df f003 	tbb	[pc, r3]
 8010b74:	23230a4c 	.word	0x23230a4c
 8010b78:	0a0a0a0a 	.word	0x0a0a0a0a
 8010b7c:	12121208 	.word	0x12121208
 8010b80:	3e45      	.short	0x3e45
 8010b82:	2400      	movs	r4, #0
 8010b84:	4620      	mov	r0, r4
 8010b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b88:	f106 0108 	add.w	r1, r6, #8
 8010b8c:	4638      	mov	r0, r7
 8010b8e:	f7ff fbcf 	bl	8010330 <uxr_serialize_DATAWRITER_Representation>
 8010b92:	4004      	ands	r4, r0
 8010b94:	4620      	mov	r0, r4
 8010b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b98:	7a31      	ldrb	r1, [r6, #8]
 8010b9a:	4638      	mov	r0, r7
 8010b9c:	f7fb ffee 	bl	800cb7c <ucdr_serialize_uint8_t>
 8010ba0:	2800      	cmp	r0, #0
 8010ba2:	d0ee      	beq.n	8010b82 <uxr_serialize_CREATE_Payload+0x42>
 8010ba4:	7a33      	ldrb	r3, [r6, #8]
 8010ba6:	2b01      	cmp	r3, #1
 8010ba8:	d001      	beq.n	8010bae <uxr_serialize_CREATE_Payload+0x6e>
 8010baa:	2b02      	cmp	r3, #2
 8010bac:	d1ea      	bne.n	8010b84 <uxr_serialize_CREATE_Payload+0x44>
 8010bae:	68f1      	ldr	r1, [r6, #12]
 8010bb0:	4638      	mov	r0, r7
 8010bb2:	f004 fcb3 	bl	801551c <ucdr_serialize_string>
 8010bb6:	4004      	ands	r4, r0
 8010bb8:	e7e4      	b.n	8010b84 <uxr_serialize_CREATE_Payload+0x44>
 8010bba:	7a31      	ldrb	r1, [r6, #8]
 8010bbc:	4638      	mov	r0, r7
 8010bbe:	f7fb ffdd 	bl	800cb7c <ucdr_serialize_uint8_t>
 8010bc2:	4605      	mov	r5, r0
 8010bc4:	b158      	cbz	r0, 8010bde <uxr_serialize_CREATE_Payload+0x9e>
 8010bc6:	7a33      	ldrb	r3, [r6, #8]
 8010bc8:	2b02      	cmp	r3, #2
 8010bca:	d034      	beq.n	8010c36 <uxr_serialize_CREATE_Payload+0xf6>
 8010bcc:	2b03      	cmp	r3, #3
 8010bce:	d106      	bne.n	8010bde <uxr_serialize_CREATE_Payload+0x9e>
 8010bd0:	68f2      	ldr	r2, [r6, #12]
 8010bd2:	f106 0110 	add.w	r1, r6, #16
 8010bd6:	4638      	mov	r0, r7
 8010bd8:	f004 fc74 	bl	80154c4 <ucdr_serialize_sequence_uint8_t>
 8010bdc:	4605      	mov	r5, r0
 8010bde:	2202      	movs	r2, #2
 8010be0:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8010be4:	4638      	mov	r0, r7
 8010be6:	f004 fb79 	bl	80152dc <ucdr_serialize_array_uint8_t>
 8010bea:	4028      	ands	r0, r5
 8010bec:	4004      	ands	r4, r0
 8010bee:	e7c9      	b.n	8010b84 <uxr_serialize_CREATE_Payload+0x44>
 8010bf0:	f106 0108 	add.w	r1, r6, #8
 8010bf4:	4638      	mov	r0, r7
 8010bf6:	f7ff fa95 	bl	8010124 <uxr_serialize_CLIENT_Representation>
 8010bfa:	4004      	ands	r4, r0
 8010bfc:	e7c2      	b.n	8010b84 <uxr_serialize_CREATE_Payload+0x44>
 8010bfe:	f106 0108 	add.w	r1, r6, #8
 8010c02:	4638      	mov	r0, r7
 8010c04:	f7ff fb4a 	bl	801029c <uxr_serialize_AGENT_Representation>
 8010c08:	4004      	ands	r4, r0
 8010c0a:	e7bb      	b.n	8010b84 <uxr_serialize_CREATE_Payload+0x44>
 8010c0c:	7a31      	ldrb	r1, [r6, #8]
 8010c0e:	4638      	mov	r0, r7
 8010c10:	f7fb ffb4 	bl	800cb7c <ucdr_serialize_uint8_t>
 8010c14:	4605      	mov	r5, r0
 8010c16:	b130      	cbz	r0, 8010c26 <uxr_serialize_CREATE_Payload+0xe6>
 8010c18:	7a33      	ldrb	r3, [r6, #8]
 8010c1a:	2b02      	cmp	r3, #2
 8010c1c:	d011      	beq.n	8010c42 <uxr_serialize_CREATE_Payload+0x102>
 8010c1e:	2b03      	cmp	r3, #3
 8010c20:	d015      	beq.n	8010c4e <uxr_serialize_CREATE_Payload+0x10e>
 8010c22:	2b01      	cmp	r3, #1
 8010c24:	d00d      	beq.n	8010c42 <uxr_serialize_CREATE_Payload+0x102>
 8010c26:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8010c2a:	4638      	mov	r0, r7
 8010c2c:	f7fc fce2 	bl	800d5f4 <ucdr_serialize_int16_t>
 8010c30:	4028      	ands	r0, r5
 8010c32:	4004      	ands	r4, r0
 8010c34:	e7a6      	b.n	8010b84 <uxr_serialize_CREATE_Payload+0x44>
 8010c36:	68f1      	ldr	r1, [r6, #12]
 8010c38:	4638      	mov	r0, r7
 8010c3a:	f004 fc6f 	bl	801551c <ucdr_serialize_string>
 8010c3e:	4605      	mov	r5, r0
 8010c40:	e7cd      	b.n	8010bde <uxr_serialize_CREATE_Payload+0x9e>
 8010c42:	68f1      	ldr	r1, [r6, #12]
 8010c44:	4638      	mov	r0, r7
 8010c46:	f004 fc69 	bl	801551c <ucdr_serialize_string>
 8010c4a:	4605      	mov	r5, r0
 8010c4c:	e7eb      	b.n	8010c26 <uxr_serialize_CREATE_Payload+0xe6>
 8010c4e:	68f2      	ldr	r2, [r6, #12]
 8010c50:	f106 0110 	add.w	r1, r6, #16
 8010c54:	4638      	mov	r0, r7
 8010c56:	f004 fc35 	bl	80154c4 <ucdr_serialize_sequence_uint8_t>
 8010c5a:	4605      	mov	r5, r0
 8010c5c:	e7e3      	b.n	8010c26 <uxr_serialize_CREATE_Payload+0xe6>
 8010c5e:	bf00      	nop

08010c60 <uxr_deserialize_GET_INFO_Payload>:
 8010c60:	b570      	push	{r4, r5, r6, lr}
 8010c62:	2202      	movs	r2, #2
 8010c64:	4605      	mov	r5, r0
 8010c66:	460e      	mov	r6, r1
 8010c68:	f004 fb9c 	bl	80153a4 <ucdr_deserialize_array_uint8_t>
 8010c6c:	2202      	movs	r2, #2
 8010c6e:	18b1      	adds	r1, r6, r2
 8010c70:	4604      	mov	r4, r0
 8010c72:	4628      	mov	r0, r5
 8010c74:	f004 fb96 	bl	80153a4 <ucdr_deserialize_array_uint8_t>
 8010c78:	1d31      	adds	r1, r6, #4
 8010c7a:	4004      	ands	r4, r0
 8010c7c:	4628      	mov	r0, r5
 8010c7e:	f7fc fac3 	bl	800d208 <ucdr_deserialize_uint32_t>
 8010c82:	b2e4      	uxtb	r4, r4
 8010c84:	4020      	ands	r0, r4
 8010c86:	bd70      	pop	{r4, r5, r6, pc}

08010c88 <uxr_serialize_DELETE_Payload>:
 8010c88:	b570      	push	{r4, r5, r6, lr}
 8010c8a:	2202      	movs	r2, #2
 8010c8c:	4605      	mov	r5, r0
 8010c8e:	460e      	mov	r6, r1
 8010c90:	f004 fb24 	bl	80152dc <ucdr_serialize_array_uint8_t>
 8010c94:	2202      	movs	r2, #2
 8010c96:	4604      	mov	r4, r0
 8010c98:	18b1      	adds	r1, r6, r2
 8010c9a:	4628      	mov	r0, r5
 8010c9c:	f004 fb1e 	bl	80152dc <ucdr_serialize_array_uint8_t>
 8010ca0:	4020      	ands	r0, r4
 8010ca2:	b2c0      	uxtb	r0, r0
 8010ca4:	bd70      	pop	{r4, r5, r6, pc}
 8010ca6:	bf00      	nop

08010ca8 <uxr_deserialize_STATUS_AGENT_Payload>:
 8010ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cac:	4605      	mov	r5, r0
 8010cae:	460e      	mov	r6, r1
 8010cb0:	f7fb ff7a 	bl	800cba8 <ucdr_deserialize_uint8_t>
 8010cb4:	1c71      	adds	r1, r6, #1
 8010cb6:	4604      	mov	r4, r0
 8010cb8:	4628      	mov	r0, r5
 8010cba:	f7fb ff75 	bl	800cba8 <ucdr_deserialize_uint8_t>
 8010cbe:	2204      	movs	r2, #4
 8010cc0:	18b1      	adds	r1, r6, r2
 8010cc2:	4680      	mov	r8, r0
 8010cc4:	4628      	mov	r0, r5
 8010cc6:	f004 fb6d 	bl	80153a4 <ucdr_deserialize_array_uint8_t>
 8010cca:	f106 0108 	add.w	r1, r6, #8
 8010cce:	4607      	mov	r7, r0
 8010cd0:	2202      	movs	r2, #2
 8010cd2:	4628      	mov	r0, r5
 8010cd4:	f004 fb66 	bl	80153a4 <ucdr_deserialize_array_uint8_t>
 8010cd8:	ea04 0308 	and.w	r3, r4, r8
 8010cdc:	b2db      	uxtb	r3, r3
 8010cde:	ea03 0407 	and.w	r4, r3, r7
 8010ce2:	2202      	movs	r2, #2
 8010ce4:	4607      	mov	r7, r0
 8010ce6:	f106 010a 	add.w	r1, r6, #10
 8010cea:	4628      	mov	r0, r5
 8010cec:	f004 fb5a 	bl	80153a4 <ucdr_deserialize_array_uint8_t>
 8010cf0:	f106 010c 	add.w	r1, r6, #12
 8010cf4:	4603      	mov	r3, r0
 8010cf6:	4628      	mov	r0, r5
 8010cf8:	461d      	mov	r5, r3
 8010cfa:	f7fb ff27 	bl	800cb4c <ucdr_deserialize_bool>
 8010cfe:	403c      	ands	r4, r7
 8010d00:	4025      	ands	r5, r4
 8010d02:	4028      	ands	r0, r5
 8010d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010d08 <uxr_deserialize_STATUS_Payload>:
 8010d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d0c:	2202      	movs	r2, #2
 8010d0e:	4606      	mov	r6, r0
 8010d10:	460f      	mov	r7, r1
 8010d12:	f004 fb47 	bl	80153a4 <ucdr_deserialize_array_uint8_t>
 8010d16:	2202      	movs	r2, #2
 8010d18:	18b9      	adds	r1, r7, r2
 8010d1a:	4605      	mov	r5, r0
 8010d1c:	4630      	mov	r0, r6
 8010d1e:	f004 fb41 	bl	80153a4 <ucdr_deserialize_array_uint8_t>
 8010d22:	1d39      	adds	r1, r7, #4
 8010d24:	4680      	mov	r8, r0
 8010d26:	4630      	mov	r0, r6
 8010d28:	f7fb ff3e 	bl	800cba8 <ucdr_deserialize_uint8_t>
 8010d2c:	1d79      	adds	r1, r7, #5
 8010d2e:	4604      	mov	r4, r0
 8010d30:	4630      	mov	r0, r6
 8010d32:	f7fb ff39 	bl	800cba8 <ucdr_deserialize_uint8_t>
 8010d36:	ea05 0508 	and.w	r5, r5, r8
 8010d3a:	402c      	ands	r4, r5
 8010d3c:	4020      	ands	r0, r4
 8010d3e:	b2c0      	uxtb	r0, r0
 8010d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010d44 <uxr_serialize_INFO_Payload>:
 8010d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d48:	2202      	movs	r2, #2
 8010d4a:	460c      	mov	r4, r1
 8010d4c:	4605      	mov	r5, r0
 8010d4e:	f004 fac5 	bl	80152dc <ucdr_serialize_array_uint8_t>
 8010d52:	2202      	movs	r2, #2
 8010d54:	18a1      	adds	r1, r4, r2
 8010d56:	4680      	mov	r8, r0
 8010d58:	4628      	mov	r0, r5
 8010d5a:	f004 fabf 	bl	80152dc <ucdr_serialize_array_uint8_t>
 8010d5e:	7921      	ldrb	r1, [r4, #4]
 8010d60:	4607      	mov	r7, r0
 8010d62:	4628      	mov	r0, r5
 8010d64:	f7fb ff0a 	bl	800cb7c <ucdr_serialize_uint8_t>
 8010d68:	7961      	ldrb	r1, [r4, #5]
 8010d6a:	4606      	mov	r6, r0
 8010d6c:	4628      	mov	r0, r5
 8010d6e:	f7fb ff05 	bl	800cb7c <ucdr_serialize_uint8_t>
 8010d72:	ea08 0807 	and.w	r8, r8, r7
 8010d76:	ea06 0608 	and.w	r6, r6, r8
 8010d7a:	4006      	ands	r6, r0
 8010d7c:	7a21      	ldrb	r1, [r4, #8]
 8010d7e:	4628      	mov	r0, r5
 8010d80:	f7fb fece 	bl	800cb20 <ucdr_serialize_bool>
 8010d84:	7a23      	ldrb	r3, [r4, #8]
 8010d86:	b2f7      	uxtb	r7, r6
 8010d88:	4606      	mov	r6, r0
 8010d8a:	b96b      	cbnz	r3, 8010da8 <uxr_serialize_INFO_Payload+0x64>
 8010d8c:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8010d90:	4628      	mov	r0, r5
 8010d92:	f7fb fec5 	bl	800cb20 <ucdr_serialize_bool>
 8010d96:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8010d9a:	4030      	ands	r0, r6
 8010d9c:	b2c6      	uxtb	r6, r0
 8010d9e:	b983      	cbnz	r3, 8010dc2 <uxr_serialize_INFO_Payload+0x7e>
 8010da0:	ea06 0007 	and.w	r0, r6, r7
 8010da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010da8:	7b21      	ldrb	r1, [r4, #12]
 8010daa:	4628      	mov	r0, r5
 8010dac:	f7fb fee6 	bl	800cb7c <ucdr_serialize_uint8_t>
 8010db0:	b188      	cbz	r0, 8010dd6 <uxr_serialize_INFO_Payload+0x92>
 8010db2:	f104 010c 	add.w	r1, r4, #12
 8010db6:	4628      	mov	r0, r5
 8010db8:	f7ff fae2 	bl	8010380 <uxr_serialize_ObjectVariant.part.0>
 8010dbc:	4030      	ands	r0, r6
 8010dbe:	b2c6      	uxtb	r6, r0
 8010dc0:	e7e4      	b.n	8010d8c <uxr_serialize_INFO_Payload+0x48>
 8010dc2:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8010dc6:	4628      	mov	r0, r5
 8010dc8:	f7ff fdb2 	bl	8010930 <uxr_serialize_ActivityInfoVariant>
 8010dcc:	4006      	ands	r6, r0
 8010dce:	ea06 0007 	and.w	r0, r6, r7
 8010dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dd6:	4606      	mov	r6, r0
 8010dd8:	e7d8      	b.n	8010d8c <uxr_serialize_INFO_Payload+0x48>
 8010dda:	bf00      	nop

08010ddc <uxr_serialize_READ_DATA_Payload>:
 8010ddc:	b570      	push	{r4, r5, r6, lr}
 8010dde:	2202      	movs	r2, #2
 8010de0:	4605      	mov	r5, r0
 8010de2:	460e      	mov	r6, r1
 8010de4:	f004 fa7a 	bl	80152dc <ucdr_serialize_array_uint8_t>
 8010de8:	2202      	movs	r2, #2
 8010dea:	18b1      	adds	r1, r6, r2
 8010dec:	4604      	mov	r4, r0
 8010dee:	4628      	mov	r0, r5
 8010df0:	f004 fa74 	bl	80152dc <ucdr_serialize_array_uint8_t>
 8010df4:	1d31      	adds	r1, r6, #4
 8010df6:	4004      	ands	r4, r0
 8010df8:	4628      	mov	r0, r5
 8010dfa:	f7ff fe5d 	bl	8010ab8 <uxr_serialize_ReadSpecification>
 8010dfe:	b2e4      	uxtb	r4, r4
 8010e00:	4020      	ands	r0, r4
 8010e02:	bd70      	pop	{r4, r5, r6, pc}

08010e04 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8010e04:	b570      	push	{r4, r5, r6, lr}
 8010e06:	2202      	movs	r2, #2
 8010e08:	4605      	mov	r5, r0
 8010e0a:	460e      	mov	r6, r1
 8010e0c:	f004 fa66 	bl	80152dc <ucdr_serialize_array_uint8_t>
 8010e10:	2202      	movs	r2, #2
 8010e12:	4604      	mov	r4, r0
 8010e14:	18b1      	adds	r1, r6, r2
 8010e16:	4628      	mov	r0, r5
 8010e18:	f004 fa60 	bl	80152dc <ucdr_serialize_array_uint8_t>
 8010e1c:	4020      	ands	r0, r4
 8010e1e:	b2c0      	uxtb	r0, r0
 8010e20:	bd70      	pop	{r4, r5, r6, pc}
 8010e22:	bf00      	nop

08010e24 <uxr_serialize_ACKNACK_Payload>:
 8010e24:	b570      	push	{r4, r5, r6, lr}
 8010e26:	460c      	mov	r4, r1
 8010e28:	460e      	mov	r6, r1
 8010e2a:	f834 1b02 	ldrh.w	r1, [r4], #2
 8010e2e:	4605      	mov	r5, r0
 8010e30:	f7fb fed0 	bl	800cbd4 <ucdr_serialize_uint16_t>
 8010e34:	2202      	movs	r2, #2
 8010e36:	4621      	mov	r1, r4
 8010e38:	4604      	mov	r4, r0
 8010e3a:	4628      	mov	r0, r5
 8010e3c:	f004 fa4e 	bl	80152dc <ucdr_serialize_array_uint8_t>
 8010e40:	7931      	ldrb	r1, [r6, #4]
 8010e42:	4004      	ands	r4, r0
 8010e44:	4628      	mov	r0, r5
 8010e46:	f7fb fe99 	bl	800cb7c <ucdr_serialize_uint8_t>
 8010e4a:	b2e4      	uxtb	r4, r4
 8010e4c:	4020      	ands	r0, r4
 8010e4e:	bd70      	pop	{r4, r5, r6, pc}

08010e50 <uxr_deserialize_ACKNACK_Payload>:
 8010e50:	b570      	push	{r4, r5, r6, lr}
 8010e52:	4605      	mov	r5, r0
 8010e54:	460e      	mov	r6, r1
 8010e56:	f7fb ffbd 	bl	800cdd4 <ucdr_deserialize_uint16_t>
 8010e5a:	2202      	movs	r2, #2
 8010e5c:	18b1      	adds	r1, r6, r2
 8010e5e:	4604      	mov	r4, r0
 8010e60:	4628      	mov	r0, r5
 8010e62:	f004 fa9f 	bl	80153a4 <ucdr_deserialize_array_uint8_t>
 8010e66:	1d31      	adds	r1, r6, #4
 8010e68:	4004      	ands	r4, r0
 8010e6a:	4628      	mov	r0, r5
 8010e6c:	f7fb fe9c 	bl	800cba8 <ucdr_deserialize_uint8_t>
 8010e70:	b2e4      	uxtb	r4, r4
 8010e72:	4020      	ands	r0, r4
 8010e74:	bd70      	pop	{r4, r5, r6, pc}
 8010e76:	bf00      	nop

08010e78 <uxr_serialize_HEARTBEAT_Payload>:
 8010e78:	b570      	push	{r4, r5, r6, lr}
 8010e7a:	460d      	mov	r5, r1
 8010e7c:	8809      	ldrh	r1, [r1, #0]
 8010e7e:	4606      	mov	r6, r0
 8010e80:	f7fb fea8 	bl	800cbd4 <ucdr_serialize_uint16_t>
 8010e84:	8869      	ldrh	r1, [r5, #2]
 8010e86:	4604      	mov	r4, r0
 8010e88:	4630      	mov	r0, r6
 8010e8a:	f7fb fea3 	bl	800cbd4 <ucdr_serialize_uint16_t>
 8010e8e:	7929      	ldrb	r1, [r5, #4]
 8010e90:	4004      	ands	r4, r0
 8010e92:	4630      	mov	r0, r6
 8010e94:	f7fb fe72 	bl	800cb7c <ucdr_serialize_uint8_t>
 8010e98:	b2e4      	uxtb	r4, r4
 8010e9a:	4020      	ands	r0, r4
 8010e9c:	bd70      	pop	{r4, r5, r6, pc}
 8010e9e:	bf00      	nop

08010ea0 <uxr_deserialize_HEARTBEAT_Payload>:
 8010ea0:	b570      	push	{r4, r5, r6, lr}
 8010ea2:	4605      	mov	r5, r0
 8010ea4:	460e      	mov	r6, r1
 8010ea6:	f7fb ff95 	bl	800cdd4 <ucdr_deserialize_uint16_t>
 8010eaa:	1cb1      	adds	r1, r6, #2
 8010eac:	4604      	mov	r4, r0
 8010eae:	4628      	mov	r0, r5
 8010eb0:	f7fb ff90 	bl	800cdd4 <ucdr_deserialize_uint16_t>
 8010eb4:	1d31      	adds	r1, r6, #4
 8010eb6:	4004      	ands	r4, r0
 8010eb8:	4628      	mov	r0, r5
 8010eba:	f7fb fe75 	bl	800cba8 <ucdr_deserialize_uint8_t>
 8010ebe:	b2e4      	uxtb	r4, r4
 8010ec0:	4020      	ands	r0, r4
 8010ec2:	bd70      	pop	{r4, r5, r6, pc}

08010ec4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8010ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ec8:	4605      	mov	r5, r0
 8010eca:	460e      	mov	r6, r1
 8010ecc:	f7fc fd1e 	bl	800d90c <ucdr_deserialize_int32_t>
 8010ed0:	1d31      	adds	r1, r6, #4
 8010ed2:	4607      	mov	r7, r0
 8010ed4:	4628      	mov	r0, r5
 8010ed6:	f7fc f997 	bl	800d208 <ucdr_deserialize_uint32_t>
 8010eda:	f106 0108 	add.w	r1, r6, #8
 8010ede:	4680      	mov	r8, r0
 8010ee0:	4628      	mov	r0, r5
 8010ee2:	f7fc fd13 	bl	800d90c <ucdr_deserialize_int32_t>
 8010ee6:	f106 010c 	add.w	r1, r6, #12
 8010eea:	4604      	mov	r4, r0
 8010eec:	4628      	mov	r0, r5
 8010eee:	f7fc f98b 	bl	800d208 <ucdr_deserialize_uint32_t>
 8010ef2:	ea07 0708 	and.w	r7, r7, r8
 8010ef6:	403c      	ands	r4, r7
 8010ef8:	f106 0110 	add.w	r1, r6, #16
 8010efc:	4004      	ands	r4, r0
 8010efe:	4628      	mov	r0, r5
 8010f00:	f7fc fd04 	bl	800d90c <ucdr_deserialize_int32_t>
 8010f04:	f106 0114 	add.w	r1, r6, #20
 8010f08:	4607      	mov	r7, r0
 8010f0a:	4628      	mov	r0, r5
 8010f0c:	f7fc f97c 	bl	800d208 <ucdr_deserialize_uint32_t>
 8010f10:	b2e4      	uxtb	r4, r4
 8010f12:	403c      	ands	r4, r7
 8010f14:	4020      	ands	r0, r4
 8010f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f1a:	bf00      	nop

08010f1c <uxr_serialize_SampleIdentity>:
 8010f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f20:	220c      	movs	r2, #12
 8010f22:	4604      	mov	r4, r0
 8010f24:	460d      	mov	r5, r1
 8010f26:	f004 f9d9 	bl	80152dc <ucdr_serialize_array_uint8_t>
 8010f2a:	2203      	movs	r2, #3
 8010f2c:	f105 010c 	add.w	r1, r5, #12
 8010f30:	4607      	mov	r7, r0
 8010f32:	4620      	mov	r0, r4
 8010f34:	f004 f9d2 	bl	80152dc <ucdr_serialize_array_uint8_t>
 8010f38:	7be9      	ldrb	r1, [r5, #15]
 8010f3a:	4680      	mov	r8, r0
 8010f3c:	4620      	mov	r0, r4
 8010f3e:	f7fb fe1d 	bl	800cb7c <ucdr_serialize_uint8_t>
 8010f42:	6929      	ldr	r1, [r5, #16]
 8010f44:	4606      	mov	r6, r0
 8010f46:	4620      	mov	r0, r4
 8010f48:	f7fc fc48 	bl	800d7dc <ucdr_serialize_int32_t>
 8010f4c:	6969      	ldr	r1, [r5, #20]
 8010f4e:	4603      	mov	r3, r0
 8010f50:	4620      	mov	r0, r4
 8010f52:	ea07 0708 	and.w	r7, r7, r8
 8010f56:	461c      	mov	r4, r3
 8010f58:	f7fc f826 	bl	800cfa8 <ucdr_serialize_uint32_t>
 8010f5c:	403e      	ands	r6, r7
 8010f5e:	4034      	ands	r4, r6
 8010f60:	4020      	ands	r0, r4
 8010f62:	b2c0      	uxtb	r0, r0
 8010f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010f68 <uxr_deserialize_SampleIdentity>:
 8010f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f6c:	220c      	movs	r2, #12
 8010f6e:	4604      	mov	r4, r0
 8010f70:	460d      	mov	r5, r1
 8010f72:	f004 fa17 	bl	80153a4 <ucdr_deserialize_array_uint8_t>
 8010f76:	2203      	movs	r2, #3
 8010f78:	f105 010c 	add.w	r1, r5, #12
 8010f7c:	4607      	mov	r7, r0
 8010f7e:	4620      	mov	r0, r4
 8010f80:	f004 fa10 	bl	80153a4 <ucdr_deserialize_array_uint8_t>
 8010f84:	f105 010f 	add.w	r1, r5, #15
 8010f88:	4680      	mov	r8, r0
 8010f8a:	4620      	mov	r0, r4
 8010f8c:	f7fb fe0c 	bl	800cba8 <ucdr_deserialize_uint8_t>
 8010f90:	f105 0110 	add.w	r1, r5, #16
 8010f94:	4606      	mov	r6, r0
 8010f96:	4620      	mov	r0, r4
 8010f98:	f7fc fcb8 	bl	800d90c <ucdr_deserialize_int32_t>
 8010f9c:	f105 0114 	add.w	r1, r5, #20
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	4620      	mov	r0, r4
 8010fa4:	ea07 0708 	and.w	r7, r7, r8
 8010fa8:	461c      	mov	r4, r3
 8010faa:	f7fc f92d 	bl	800d208 <ucdr_deserialize_uint32_t>
 8010fae:	403e      	ands	r6, r7
 8010fb0:	4034      	ands	r4, r6
 8010fb2:	4020      	ands	r0, r4
 8010fb4:	b2c0      	uxtb	r0, r0
 8010fb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fba:	bf00      	nop

08010fbc <rcl_client_get_rmw_handle>:
 8010fbc:	b118      	cbz	r0, 8010fc6 <rcl_client_get_rmw_handle+0xa>
 8010fbe:	6800      	ldr	r0, [r0, #0]
 8010fc0:	b108      	cbz	r0, 8010fc6 <rcl_client_get_rmw_handle+0xa>
 8010fc2:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8010fc6:	4770      	bx	lr

08010fc8 <rcl_send_request>:
 8010fc8:	b570      	push	{r4, r5, r6, lr}
 8010fca:	b082      	sub	sp, #8
 8010fcc:	b1e8      	cbz	r0, 801100a <rcl_send_request+0x42>
 8010fce:	4604      	mov	r4, r0
 8010fd0:	6800      	ldr	r0, [r0, #0]
 8010fd2:	b1d0      	cbz	r0, 801100a <rcl_send_request+0x42>
 8010fd4:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8010fd8:	b1bb      	cbz	r3, 801100a <rcl_send_request+0x42>
 8010fda:	460e      	mov	r6, r1
 8010fdc:	b1d1      	cbz	r1, 8011014 <rcl_send_request+0x4c>
 8010fde:	4615      	mov	r5, r2
 8010fe0:	b1c2      	cbz	r2, 8011014 <rcl_send_request+0x4c>
 8010fe2:	2105      	movs	r1, #5
 8010fe4:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8010fe8:	f002 fe82 	bl	8013cf0 <__atomic_load_8>
 8010fec:	6823      	ldr	r3, [r4, #0]
 8010fee:	e9c5 0100 	strd	r0, r1, [r5]
 8010ff2:	462a      	mov	r2, r5
 8010ff4:	4631      	mov	r1, r6
 8010ff6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8010ffa:	f003 fd8d 	bl	8014b18 <rmw_send_request>
 8010ffe:	4606      	mov	r6, r0
 8011000:	b160      	cbz	r0, 801101c <rcl_send_request+0x54>
 8011002:	2601      	movs	r6, #1
 8011004:	4630      	mov	r0, r6
 8011006:	b002      	add	sp, #8
 8011008:	bd70      	pop	{r4, r5, r6, pc}
 801100a:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 801100e:	4630      	mov	r0, r6
 8011010:	b002      	add	sp, #8
 8011012:	bd70      	pop	{r4, r5, r6, pc}
 8011014:	260b      	movs	r6, #11
 8011016:	4630      	mov	r0, r6
 8011018:	b002      	add	sp, #8
 801101a:	bd70      	pop	{r4, r5, r6, pc}
 801101c:	6820      	ldr	r0, [r4, #0]
 801101e:	2105      	movs	r1, #5
 8011020:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011024:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8011028:	9100      	str	r1, [sp, #0]
 801102a:	f002 fecd 	bl	8013dc8 <__atomic_exchange_8>
 801102e:	4630      	mov	r0, r6
 8011030:	b002      	add	sp, #8
 8011032:	bd70      	pop	{r4, r5, r6, pc}
 8011034:	0000      	movs	r0, r0
	...

08011038 <rcl_take_response>:
 8011038:	b570      	push	{r4, r5, r6, lr}
 801103a:	468e      	mov	lr, r1
 801103c:	460c      	mov	r4, r1
 801103e:	4616      	mov	r6, r2
 8011040:	4605      	mov	r5, r0
 8011042:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011046:	b08c      	sub	sp, #48	@ 0x30
 8011048:	f10d 0c18 	add.w	ip, sp, #24
 801104c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011050:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011054:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011058:	b35d      	cbz	r5, 80110b2 <rcl_take_response+0x7a>
 801105a:	682b      	ldr	r3, [r5, #0]
 801105c:	b34b      	cbz	r3, 80110b2 <rcl_take_response+0x7a>
 801105e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011062:	b330      	cbz	r0, 80110b2 <rcl_take_response+0x7a>
 8011064:	b346      	cbz	r6, 80110b8 <rcl_take_response+0x80>
 8011066:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80110c0 <rcl_take_response+0x88>
 801106a:	2300      	movs	r3, #0
 801106c:	f88d 3007 	strb.w	r3, [sp, #7]
 8011070:	4632      	mov	r2, r6
 8011072:	f10d 0307 	add.w	r3, sp, #7
 8011076:	a902      	add	r1, sp, #8
 8011078:	ed8d 7b02 	vstr	d7, [sp, #8]
 801107c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011080:	f003 fe52 	bl	8014d28 <rmw_take_response>
 8011084:	4605      	mov	r5, r0
 8011086:	b9c8      	cbnz	r0, 80110bc <rcl_take_response+0x84>
 8011088:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801108c:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8011090:	2a00      	cmp	r2, #0
 8011092:	bf08      	it	eq
 8011094:	461d      	moveq	r5, r3
 8011096:	f10d 0e18 	add.w	lr, sp, #24
 801109a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801109e:	46a4      	mov	ip, r4
 80110a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80110a4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80110a8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80110ac:	4628      	mov	r0, r5
 80110ae:	b00c      	add	sp, #48	@ 0x30
 80110b0:	bd70      	pop	{r4, r5, r6, pc}
 80110b2:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 80110b6:	e7ee      	b.n	8011096 <rcl_take_response+0x5e>
 80110b8:	250b      	movs	r5, #11
 80110ba:	e7ec      	b.n	8011096 <rcl_take_response+0x5e>
 80110bc:	2501      	movs	r5, #1
 80110be:	e7ea      	b.n	8011096 <rcl_take_response+0x5e>
	...

080110c8 <rcl_client_is_valid>:
 80110c8:	b130      	cbz	r0, 80110d8 <rcl_client_is_valid+0x10>
 80110ca:	6800      	ldr	r0, [r0, #0]
 80110cc:	b120      	cbz	r0, 80110d8 <rcl_client_is_valid+0x10>
 80110ce:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80110d2:	3800      	subs	r0, #0
 80110d4:	bf18      	it	ne
 80110d6:	2001      	movne	r0, #1
 80110d8:	4770      	bx	lr
 80110da:	bf00      	nop

080110dc <rcl_convert_rmw_ret_to_rcl_ret>:
 80110dc:	280b      	cmp	r0, #11
 80110de:	dc0d      	bgt.n	80110fc <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80110e0:	2800      	cmp	r0, #0
 80110e2:	db09      	blt.n	80110f8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80110e4:	280b      	cmp	r0, #11
 80110e6:	d807      	bhi.n	80110f8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80110e8:	e8df f000 	tbb	[pc, r0]
 80110ec:	07060607 	.word	0x07060607
 80110f0:	06060606 	.word	0x06060606
 80110f4:	07070606 	.word	0x07070606
 80110f8:	2001      	movs	r0, #1
 80110fa:	4770      	bx	lr
 80110fc:	28cb      	cmp	r0, #203	@ 0xcb
 80110fe:	bf18      	it	ne
 8011100:	2001      	movne	r0, #1
 8011102:	4770      	bx	lr

08011104 <rcl_get_zero_initialized_context>:
 8011104:	4a03      	ldr	r2, [pc, #12]	@ (8011114 <rcl_get_zero_initialized_context+0x10>)
 8011106:	4603      	mov	r3, r0
 8011108:	e892 0003 	ldmia.w	r2, {r0, r1}
 801110c:	e883 0003 	stmia.w	r3, {r0, r1}
 8011110:	4618      	mov	r0, r3
 8011112:	4770      	bx	lr
 8011114:	08018500 	.word	0x08018500

08011118 <rcl_context_is_valid>:
 8011118:	b118      	cbz	r0, 8011122 <rcl_context_is_valid+0xa>
 801111a:	6840      	ldr	r0, [r0, #4]
 801111c:	3800      	subs	r0, #0
 801111e:	bf18      	it	ne
 8011120:	2001      	movne	r0, #1
 8011122:	4770      	bx	lr

08011124 <__cleanup_context>:
 8011124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011128:	4606      	mov	r6, r0
 801112a:	6800      	ldr	r0, [r0, #0]
 801112c:	2300      	movs	r3, #0
 801112e:	6073      	str	r3, [r6, #4]
 8011130:	2800      	cmp	r0, #0
 8011132:	d049      	beq.n	80111c8 <__cleanup_context+0xa4>
 8011134:	6947      	ldr	r7, [r0, #20]
 8011136:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801113a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801113e:	b137      	cbz	r7, 801114e <__cleanup_context+0x2a>
 8011140:	3014      	adds	r0, #20
 8011142:	f7f9 faf1 	bl	800a728 <rcl_init_options_fini>
 8011146:	4607      	mov	r7, r0
 8011148:	2800      	cmp	r0, #0
 801114a:	d144      	bne.n	80111d6 <__cleanup_context+0xb2>
 801114c:	6830      	ldr	r0, [r6, #0]
 801114e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011150:	b143      	cbz	r3, 8011164 <__cleanup_context+0x40>
 8011152:	3028      	adds	r0, #40	@ 0x28
 8011154:	f7fa fdd4 	bl	800bd00 <rmw_context_fini>
 8011158:	b118      	cbz	r0, 8011162 <__cleanup_context+0x3e>
 801115a:	2f00      	cmp	r7, #0
 801115c:	d03e      	beq.n	80111dc <__cleanup_context+0xb8>
 801115e:	f7fa fb0b 	bl	800b778 <rcutils_reset_error>
 8011162:	6830      	ldr	r0, [r6, #0]
 8011164:	6a03      	ldr	r3, [r0, #32]
 8011166:	b1db      	cbz	r3, 80111a0 <__cleanup_context+0x7c>
 8011168:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801116c:	2a01      	cmp	r2, #1
 801116e:	f17c 0100 	sbcs.w	r1, ip, #0
 8011172:	db11      	blt.n	8011198 <__cleanup_context+0x74>
 8011174:	2400      	movs	r4, #0
 8011176:	4625      	mov	r5, r4
 8011178:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801117c:	4649      	mov	r1, r9
 801117e:	b1b8      	cbz	r0, 80111b0 <__cleanup_context+0x8c>
 8011180:	47c0      	blx	r8
 8011182:	6833      	ldr	r3, [r6, #0]
 8011184:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8011188:	3401      	adds	r4, #1
 801118a:	f145 0500 	adc.w	r5, r5, #0
 801118e:	4294      	cmp	r4, r2
 8011190:	eb75 010c 	sbcs.w	r1, r5, ip
 8011194:	6a1b      	ldr	r3, [r3, #32]
 8011196:	dbef      	blt.n	8011178 <__cleanup_context+0x54>
 8011198:	4618      	mov	r0, r3
 801119a:	4649      	mov	r1, r9
 801119c:	47c0      	blx	r8
 801119e:	6830      	ldr	r0, [r6, #0]
 80111a0:	4649      	mov	r1, r9
 80111a2:	47c0      	blx	r8
 80111a4:	2300      	movs	r3, #0
 80111a6:	e9c6 3300 	strd	r3, r3, [r6]
 80111aa:	4638      	mov	r0, r7
 80111ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111b0:	3401      	adds	r4, #1
 80111b2:	f145 0500 	adc.w	r5, r5, #0
 80111b6:	4294      	cmp	r4, r2
 80111b8:	eb75 010c 	sbcs.w	r1, r5, ip
 80111bc:	dbdc      	blt.n	8011178 <__cleanup_context+0x54>
 80111be:	4618      	mov	r0, r3
 80111c0:	4649      	mov	r1, r9
 80111c2:	47c0      	blx	r8
 80111c4:	6830      	ldr	r0, [r6, #0]
 80111c6:	e7eb      	b.n	80111a0 <__cleanup_context+0x7c>
 80111c8:	4607      	mov	r7, r0
 80111ca:	2300      	movs	r3, #0
 80111cc:	e9c6 3300 	strd	r3, r3, [r6]
 80111d0:	4638      	mov	r0, r7
 80111d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111d6:	f7fa facf 	bl	800b778 <rcutils_reset_error>
 80111da:	e7b7      	b.n	801114c <__cleanup_context+0x28>
 80111dc:	f7ff ff7e 	bl	80110dc <rcl_convert_rmw_ret_to_rcl_ret>
 80111e0:	4607      	mov	r7, r0
 80111e2:	e7bc      	b.n	801115e <__cleanup_context+0x3a>

080111e4 <rcl_init>:
 80111e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111e8:	1e05      	subs	r5, r0, #0
 80111ea:	b09e      	sub	sp, #120	@ 0x78
 80111ec:	460e      	mov	r6, r1
 80111ee:	4690      	mov	r8, r2
 80111f0:	461f      	mov	r7, r3
 80111f2:	f340 809c 	ble.w	801132e <rcl_init+0x14a>
 80111f6:	2900      	cmp	r1, #0
 80111f8:	f000 809c 	beq.w	8011334 <rcl_init+0x150>
 80111fc:	f1a1 0e04 	sub.w	lr, r1, #4
 8011200:	f04f 0c00 	mov.w	ip, #0
 8011204:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8011208:	f10c 0c01 	add.w	ip, ip, #1
 801120c:	2c00      	cmp	r4, #0
 801120e:	f000 8091 	beq.w	8011334 <rcl_init+0x150>
 8011212:	4565      	cmp	r5, ip
 8011214:	d1f6      	bne.n	8011204 <rcl_init+0x20>
 8011216:	f1b8 0f00 	cmp.w	r8, #0
 801121a:	f000 808b 	beq.w	8011334 <rcl_init+0x150>
 801121e:	f8d8 4000 	ldr.w	r4, [r8]
 8011222:	2c00      	cmp	r4, #0
 8011224:	f000 8086 	beq.w	8011334 <rcl_init+0x150>
 8011228:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801122a:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 801122e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011232:	6823      	ldr	r3, [r4, #0]
 8011234:	f8cc 3000 	str.w	r3, [ip]
 8011238:	a819      	add	r0, sp, #100	@ 0x64
 801123a:	f7fa fa77 	bl	800b72c <rcutils_allocator_is_valid>
 801123e:	2800      	cmp	r0, #0
 8011240:	d078      	beq.n	8011334 <rcl_init+0x150>
 8011242:	2f00      	cmp	r7, #0
 8011244:	d076      	beq.n	8011334 <rcl_init+0x150>
 8011246:	683b      	ldr	r3, [r7, #0]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d178      	bne.n	801133e <rcl_init+0x15a>
 801124c:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8011250:	2178      	movs	r1, #120	@ 0x78
 8011252:	2001      	movs	r0, #1
 8011254:	4798      	blx	r3
 8011256:	4604      	mov	r4, r0
 8011258:	6038      	str	r0, [r7, #0]
 801125a:	2800      	cmp	r0, #0
 801125c:	f000 80b6 	beq.w	80113cc <rcl_init+0x1e8>
 8011260:	a802      	add	r0, sp, #8
 8011262:	f003 f895 	bl	8014390 <rmw_get_zero_initialized_context>
 8011266:	a902      	add	r1, sp, #8
 8011268:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 801126c:	2250      	movs	r2, #80	@ 0x50
 801126e:	ac19      	add	r4, sp, #100	@ 0x64
 8011270:	f005 ff91 	bl	8017196 <memcpy>
 8011274:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011276:	f8d7 e000 	ldr.w	lr, [r7]
 801127a:	46f4      	mov	ip, lr
 801127c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011280:	6823      	ldr	r3, [r4, #0]
 8011282:	f8cc 3000 	str.w	r3, [ip]
 8011286:	f10e 0114 	add.w	r1, lr, #20
 801128a:	4640      	mov	r0, r8
 801128c:	f7f9 fa76 	bl	800a77c <rcl_init_options_copy>
 8011290:	4604      	mov	r4, r0
 8011292:	2800      	cmp	r0, #0
 8011294:	d144      	bne.n	8011320 <rcl_init+0x13c>
 8011296:	f8d7 9000 	ldr.w	r9, [r7]
 801129a:	ea4f 78e5 	mov.w	r8, r5, asr #31
 801129e:	f8c9 0020 	str.w	r0, [r9, #32]
 80112a2:	f8c9 5018 	str.w	r5, [r9, #24]
 80112a6:	f8c9 801c 	str.w	r8, [r9, #28]
 80112aa:	2d00      	cmp	r5, #0
 80112ac:	d04e      	beq.n	801134c <rcl_init+0x168>
 80112ae:	2e00      	cmp	r6, #0
 80112b0:	d04c      	beq.n	801134c <rcl_init+0x168>
 80112b2:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80112b6:	2104      	movs	r1, #4
 80112b8:	4628      	mov	r0, r5
 80112ba:	4798      	blx	r3
 80112bc:	f8c9 0020 	str.w	r0, [r9, #32]
 80112c0:	f8d7 9000 	ldr.w	r9, [r7]
 80112c4:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80112c8:	46ca      	mov	sl, r9
 80112ca:	b343      	cbz	r3, 801131e <rcl_init+0x13a>
 80112cc:	2d01      	cmp	r5, #1
 80112ce:	f178 0300 	sbcs.w	r3, r8, #0
 80112d2:	db3b      	blt.n	801134c <rcl_init+0x168>
 80112d4:	2400      	movs	r4, #0
 80112d6:	3e04      	subs	r6, #4
 80112d8:	46a1      	mov	r9, r4
 80112da:	e00b      	b.n	80112f4 <rcl_init+0x110>
 80112dc:	6831      	ldr	r1, [r6, #0]
 80112de:	f005 ff5a 	bl	8017196 <memcpy>
 80112e2:	3401      	adds	r4, #1
 80112e4:	f149 0900 	adc.w	r9, r9, #0
 80112e8:	45c8      	cmp	r8, r9
 80112ea:	bf08      	it	eq
 80112ec:	42a5      	cmpeq	r5, r4
 80112ee:	d02b      	beq.n	8011348 <rcl_init+0x164>
 80112f0:	f8d7 a000 	ldr.w	sl, [r7]
 80112f4:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80112f8:	f7ee ff9c 	bl	8000234 <strlen>
 80112fc:	1c42      	adds	r2, r0, #1
 80112fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011300:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8011302:	f8da a020 	ldr.w	sl, [sl, #32]
 8011306:	9201      	str	r2, [sp, #4]
 8011308:	4610      	mov	r0, r2
 801130a:	4798      	blx	r3
 801130c:	683b      	ldr	r3, [r7, #0]
 801130e:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8011312:	6a1b      	ldr	r3, [r3, #32]
 8011314:	9a01      	ldr	r2, [sp, #4]
 8011316:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801131a:	2800      	cmp	r0, #0
 801131c:	d1de      	bne.n	80112dc <rcl_init+0xf8>
 801131e:	240a      	movs	r4, #10
 8011320:	4638      	mov	r0, r7
 8011322:	f7ff feff 	bl	8011124 <__cleanup_context>
 8011326:	4620      	mov	r0, r4
 8011328:	b01e      	add	sp, #120	@ 0x78
 801132a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801132e:	2900      	cmp	r1, #0
 8011330:	f43f af71 	beq.w	8011216 <rcl_init+0x32>
 8011334:	240b      	movs	r4, #11
 8011336:	4620      	mov	r0, r4
 8011338:	b01e      	add	sp, #120	@ 0x78
 801133a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801133e:	2464      	movs	r4, #100	@ 0x64
 8011340:	4620      	mov	r0, r4
 8011342:	b01e      	add	sp, #120	@ 0x78
 8011344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011348:	f8d7 9000 	ldr.w	r9, [r7]
 801134c:	4926      	ldr	r1, [pc, #152]	@ (80113e8 <rcl_init+0x204>)
 801134e:	680b      	ldr	r3, [r1, #0]
 8011350:	3301      	adds	r3, #1
 8011352:	d036      	beq.n	80113c2 <rcl_init+0x1de>
 8011354:	600b      	str	r3, [r1, #0]
 8011356:	461a      	mov	r2, r3
 8011358:	2400      	movs	r4, #0
 801135a:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801135e:	607b      	str	r3, [r7, #4]
 8011360:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8011362:	3301      	adds	r3, #1
 8011364:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8011368:	d034      	beq.n	80113d4 <rcl_init+0x1f0>
 801136a:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 801136e:	b93b      	cbnz	r3, 8011380 <rcl_init+0x19c>
 8011370:	3030      	adds	r0, #48	@ 0x30
 8011372:	f000 f83b 	bl	80113ec <rcl_get_localhost_only>
 8011376:	4604      	mov	r4, r0
 8011378:	2800      	cmp	r0, #0
 801137a:	d1d1      	bne.n	8011320 <rcl_init+0x13c>
 801137c:	683b      	ldr	r3, [r7, #0]
 801137e:	6958      	ldr	r0, [r3, #20]
 8011380:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8011382:	aa18      	add	r2, sp, #96	@ 0x60
 8011384:	a917      	add	r1, sp, #92	@ 0x5c
 8011386:	f001 f94d 	bl	8012624 <rcl_validate_enclave_name>
 801138a:	4604      	mov	r4, r0
 801138c:	2800      	cmp	r0, #0
 801138e:	d1c7      	bne.n	8011320 <rcl_init+0x13c>
 8011390:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011392:	b9eb      	cbnz	r3, 80113d0 <rcl_init+0x1ec>
 8011394:	6839      	ldr	r1, [r7, #0]
 8011396:	694b      	ldr	r3, [r1, #20]
 8011398:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801139a:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801139e:	f000 fb3f 	bl	8011a20 <rcl_get_security_options_from_environment>
 80113a2:	4604      	mov	r4, r0
 80113a4:	2800      	cmp	r0, #0
 80113a6:	d1bb      	bne.n	8011320 <rcl_init+0x13c>
 80113a8:	6839      	ldr	r1, [r7, #0]
 80113aa:	6948      	ldr	r0, [r1, #20]
 80113ac:	3128      	adds	r1, #40	@ 0x28
 80113ae:	3018      	adds	r0, #24
 80113b0:	f7fa fb70 	bl	800ba94 <rmw_init>
 80113b4:	4604      	mov	r4, r0
 80113b6:	2800      	cmp	r0, #0
 80113b8:	d0bd      	beq.n	8011336 <rcl_init+0x152>
 80113ba:	f7ff fe8f 	bl	80110dc <rcl_convert_rmw_ret_to_rcl_ret>
 80113be:	4604      	mov	r4, r0
 80113c0:	e7ae      	b.n	8011320 <rcl_init+0x13c>
 80113c2:	2201      	movs	r2, #1
 80113c4:	461c      	mov	r4, r3
 80113c6:	600a      	str	r2, [r1, #0]
 80113c8:	4613      	mov	r3, r2
 80113ca:	e7c6      	b.n	801135a <rcl_init+0x176>
 80113cc:	240a      	movs	r4, #10
 80113ce:	e7b2      	b.n	8011336 <rcl_init+0x152>
 80113d0:	2401      	movs	r4, #1
 80113d2:	e7a5      	b.n	8011320 <rcl_init+0x13c>
 80113d4:	3024      	adds	r0, #36	@ 0x24
 80113d6:	f004 fe31 	bl	801603c <rcl_get_default_domain_id>
 80113da:	4604      	mov	r4, r0
 80113dc:	2800      	cmp	r0, #0
 80113de:	d19f      	bne.n	8011320 <rcl_init+0x13c>
 80113e0:	683b      	ldr	r3, [r7, #0]
 80113e2:	6958      	ldr	r0, [r3, #20]
 80113e4:	e7c1      	b.n	801136a <rcl_init+0x186>
 80113e6:	bf00      	nop
 80113e8:	2000ab40 	.word	0x2000ab40

080113ec <rcl_get_localhost_only>:
 80113ec:	b510      	push	{r4, lr}
 80113ee:	b082      	sub	sp, #8
 80113f0:	2300      	movs	r3, #0
 80113f2:	9301      	str	r3, [sp, #4]
 80113f4:	b1b8      	cbz	r0, 8011426 <rcl_get_localhost_only+0x3a>
 80113f6:	4604      	mov	r4, r0
 80113f8:	a901      	add	r1, sp, #4
 80113fa:	480c      	ldr	r0, [pc, #48]	@ (801142c <rcl_get_localhost_only+0x40>)
 80113fc:	f002 fd1c 	bl	8013e38 <rcutils_get_env>
 8011400:	b110      	cbz	r0, 8011408 <rcl_get_localhost_only+0x1c>
 8011402:	2001      	movs	r0, #1
 8011404:	b002      	add	sp, #8
 8011406:	bd10      	pop	{r4, pc}
 8011408:	9b01      	ldr	r3, [sp, #4]
 801140a:	b113      	cbz	r3, 8011412 <rcl_get_localhost_only+0x26>
 801140c:	781a      	ldrb	r2, [r3, #0]
 801140e:	2a31      	cmp	r2, #49	@ 0x31
 8011410:	d004      	beq.n	801141c <rcl_get_localhost_only+0x30>
 8011412:	2302      	movs	r3, #2
 8011414:	2000      	movs	r0, #0
 8011416:	7023      	strb	r3, [r4, #0]
 8011418:	b002      	add	sp, #8
 801141a:	bd10      	pop	{r4, pc}
 801141c:	785b      	ldrb	r3, [r3, #1]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d1f7      	bne.n	8011412 <rcl_get_localhost_only+0x26>
 8011422:	2301      	movs	r3, #1
 8011424:	e7f6      	b.n	8011414 <rcl_get_localhost_only+0x28>
 8011426:	200b      	movs	r0, #11
 8011428:	b002      	add	sp, #8
 801142a:	bd10      	pop	{r4, pc}
 801142c:	08018508 	.word	0x08018508

08011430 <rcl_get_zero_initialized_node>:
 8011430:	4a03      	ldr	r2, [pc, #12]	@ (8011440 <rcl_get_zero_initialized_node+0x10>)
 8011432:	4603      	mov	r3, r0
 8011434:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011438:	e883 0003 	stmia.w	r3, {r0, r1}
 801143c:	4618      	mov	r0, r3
 801143e:	4770      	bx	lr
 8011440:	08018524 	.word	0x08018524

08011444 <rcl_node_init>:
 8011444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011448:	b0a9      	sub	sp, #164	@ 0xa4
 801144a:	4604      	mov	r4, r0
 801144c:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8011450:	a823      	add	r0, sp, #140	@ 0x8c
 8011452:	460e      	mov	r6, r1
 8011454:	4615      	mov	r5, r2
 8011456:	461f      	mov	r7, r3
 8011458:	f005 f864 	bl	8016524 <rcl_guard_condition_get_default_options>
 801145c:	f1b8 0f00 	cmp.w	r8, #0
 8011460:	f000 80e6 	beq.w	8011630 <rcl_node_init+0x1ec>
 8011464:	4640      	mov	r0, r8
 8011466:	f7fa f961 	bl	800b72c <rcutils_allocator_is_valid>
 801146a:	2800      	cmp	r0, #0
 801146c:	f000 80e0 	beq.w	8011630 <rcl_node_init+0x1ec>
 8011470:	2e00      	cmp	r6, #0
 8011472:	f000 80dd 	beq.w	8011630 <rcl_node_init+0x1ec>
 8011476:	2d00      	cmp	r5, #0
 8011478:	f000 80da 	beq.w	8011630 <rcl_node_init+0x1ec>
 801147c:	2c00      	cmp	r4, #0
 801147e:	f000 80d7 	beq.w	8011630 <rcl_node_init+0x1ec>
 8011482:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011486:	f1b9 0f00 	cmp.w	r9, #0
 801148a:	f040 80fd 	bne.w	8011688 <rcl_node_init+0x244>
 801148e:	2f00      	cmp	r7, #0
 8011490:	f000 80ce 	beq.w	8011630 <rcl_node_init+0x1ec>
 8011494:	4638      	mov	r0, r7
 8011496:	f7ff fe3f 	bl	8011118 <rcl_context_is_valid>
 801149a:	4682      	mov	sl, r0
 801149c:	2800      	cmp	r0, #0
 801149e:	f000 80cd 	beq.w	801163c <rcl_node_init+0x1f8>
 80114a2:	464a      	mov	r2, r9
 80114a4:	a922      	add	r1, sp, #136	@ 0x88
 80114a6:	4630      	mov	r0, r6
 80114a8:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 80114ac:	f003 f90e 	bl	80146cc <rmw_validate_node_name>
 80114b0:	4681      	mov	r9, r0
 80114b2:	2800      	cmp	r0, #0
 80114b4:	f040 80be 	bne.w	8011634 <rcl_node_init+0x1f0>
 80114b8:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80114ba:	2800      	cmp	r0, #0
 80114bc:	f040 80f0 	bne.w	80116a0 <rcl_node_init+0x25c>
 80114c0:	4628      	mov	r0, r5
 80114c2:	f7ee feb7 	bl	8000234 <strlen>
 80114c6:	2800      	cmp	r0, #0
 80114c8:	f040 80bb 	bne.w	8011642 <rcl_node_init+0x1fe>
 80114cc:	4d7c      	ldr	r5, [pc, #496]	@ (80116c0 <rcl_node_init+0x27c>)
 80114ce:	a922      	add	r1, sp, #136	@ 0x88
 80114d0:	2200      	movs	r2, #0
 80114d2:	4628      	mov	r0, r5
 80114d4:	f003 f8dc 	bl	8014690 <rmw_validate_namespace>
 80114d8:	4681      	mov	r9, r0
 80114da:	2800      	cmp	r0, #0
 80114dc:	f040 80aa 	bne.w	8011634 <rcl_node_init+0x1f0>
 80114e0:	4682      	mov	sl, r0
 80114e2:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80114e4:	2800      	cmp	r0, #0
 80114e6:	f040 80e0 	bne.w	80116aa <rcl_node_init+0x266>
 80114ea:	f8d8 3000 	ldr.w	r3, [r8]
 80114ee:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80114f2:	2078      	movs	r0, #120	@ 0x78
 80114f4:	4798      	blx	r3
 80114f6:	4681      	mov	r9, r0
 80114f8:	6060      	str	r0, [r4, #4]
 80114fa:	2800      	cmp	r0, #0
 80114fc:	f000 80ca 	beq.w	8011694 <rcl_node_init+0x250>
 8011500:	2200      	movs	r2, #0
 8011502:	2300      	movs	r3, #0
 8011504:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8011508:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 801150c:	a808      	add	r0, sp, #32
 801150e:	f000 f907 	bl	8011720 <rcl_node_get_default_options>
 8011512:	a908      	add	r1, sp, #32
 8011514:	4648      	mov	r0, r9
 8011516:	2268      	movs	r2, #104	@ 0x68
 8011518:	f005 fe3d 	bl	8017196 <memcpy>
 801151c:	6861      	ldr	r1, [r4, #4]
 801151e:	6027      	str	r7, [r4, #0]
 8011520:	4640      	mov	r0, r8
 8011522:	f000 f90b 	bl	801173c <rcl_node_options_copy>
 8011526:	2800      	cmp	r0, #0
 8011528:	d158      	bne.n	80115dc <rcl_node_init+0x198>
 801152a:	4628      	mov	r0, r5
 801152c:	f7ee fe82 	bl	8000234 <strlen>
 8011530:	4428      	add	r0, r5
 8011532:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8011536:	e9cd 5603 	strd	r5, r6, [sp, #12]
 801153a:	2b2f      	cmp	r3, #47	@ 0x2f
 801153c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011540:	9300      	str	r3, [sp, #0]
 8011542:	bf0c      	ite	eq
 8011544:	4b5f      	ldreq	r3, [pc, #380]	@ (80116c4 <rcl_node_init+0x280>)
 8011546:	4b60      	ldrne	r3, [pc, #384]	@ (80116c8 <rcl_node_init+0x284>)
 8011548:	9302      	str	r3, [sp, #8]
 801154a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801154e:	9301      	str	r3, [sp, #4]
 8011550:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8011554:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011558:	f002 fc96 	bl	8013e88 <rcutils_format_string_limit>
 801155c:	6823      	ldr	r3, [r4, #0]
 801155e:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 8011562:	6818      	ldr	r0, [r3, #0]
 8011564:	4631      	mov	r1, r6
 8011566:	3028      	adds	r0, #40	@ 0x28
 8011568:	462a      	mov	r2, r5
 801156a:	6866      	ldr	r6, [r4, #4]
 801156c:	f7fa fc74 	bl	800be58 <rmw_create_node>
 8011570:	6863      	ldr	r3, [r4, #4]
 8011572:	66b0      	str	r0, [r6, #104]	@ 0x68
 8011574:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8011576:	2800      	cmp	r0, #0
 8011578:	d032      	beq.n	80115e0 <rcl_node_init+0x19c>
 801157a:	f7fa fd01 	bl	800bf80 <rmw_node_get_graph_guard_condition>
 801157e:	4681      	mov	r9, r0
 8011580:	b360      	cbz	r0, 80115dc <rcl_node_init+0x198>
 8011582:	f8d8 3000 	ldr.w	r3, [r8]
 8011586:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801158a:	6866      	ldr	r6, [r4, #4]
 801158c:	2008      	movs	r0, #8
 801158e:	4798      	blx	r3
 8011590:	6863      	ldr	r3, [r4, #4]
 8011592:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8011594:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8011598:	f1bb 0f00 	cmp.w	fp, #0
 801159c:	d020      	beq.n	80115e0 <rcl_node_init+0x19c>
 801159e:	a806      	add	r0, sp, #24
 80115a0:	f004 fee4 	bl	801636c <rcl_get_zero_initialized_guard_condition>
 80115a4:	a806      	add	r0, sp, #24
 80115a6:	c803      	ldmia	r0, {r0, r1}
 80115a8:	6863      	ldr	r3, [r4, #4]
 80115aa:	46c4      	mov	ip, r8
 80115ac:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 80115b0:	e88b 0003 	stmia.w	fp, {r0, r1}
 80115b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80115b8:	ae23      	add	r6, sp, #140	@ 0x8c
 80115ba:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80115bc:	f8dc 3000 	ldr.w	r3, [ip]
 80115c0:	6033      	str	r3, [r6, #0]
 80115c2:	ab28      	add	r3, sp, #160	@ 0xa0
 80115c4:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80115c8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80115cc:	4649      	mov	r1, r9
 80115ce:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80115d0:	463a      	mov	r2, r7
 80115d2:	4670      	mov	r0, lr
 80115d4:	f004 ff20 	bl	8016418 <rcl_guard_condition_init_from_rmw>
 80115d8:	4681      	mov	r9, r0
 80115da:	b328      	cbz	r0, 8011628 <rcl_node_init+0x1e4>
 80115dc:	6863      	ldr	r3, [r4, #4]
 80115de:	b1f3      	cbz	r3, 801161e <rcl_node_init+0x1da>
 80115e0:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80115e2:	b128      	cbz	r0, 80115f0 <rcl_node_init+0x1ac>
 80115e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80115e8:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80115ec:	4798      	blx	r3
 80115ee:	6863      	ldr	r3, [r4, #4]
 80115f0:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80115f2:	b110      	cbz	r0, 80115fa <rcl_node_init+0x1b6>
 80115f4:	f7fa fc48 	bl	800be88 <rmw_destroy_node>
 80115f8:	6863      	ldr	r3, [r4, #4]
 80115fa:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80115fc:	b148      	cbz	r0, 8011612 <rcl_node_init+0x1ce>
 80115fe:	f004 ff6b 	bl	80164d8 <rcl_guard_condition_fini>
 8011602:	6863      	ldr	r3, [r4, #4]
 8011604:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011608:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 801160a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801160e:	4798      	blx	r3
 8011610:	6863      	ldr	r3, [r4, #4]
 8011612:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011616:	4618      	mov	r0, r3
 8011618:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801161c:	4798      	blx	r3
 801161e:	2300      	movs	r3, #0
 8011620:	e9c4 3300 	strd	r3, r3, [r4]
 8011624:	f04f 0901 	mov.w	r9, #1
 8011628:	f1ba 0f00 	cmp.w	sl, #0
 801162c:	d125      	bne.n	801167a <rcl_node_init+0x236>
 801162e:	e001      	b.n	8011634 <rcl_node_init+0x1f0>
 8011630:	f04f 090b 	mov.w	r9, #11
 8011634:	4648      	mov	r0, r9
 8011636:	b029      	add	sp, #164	@ 0xa4
 8011638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801163c:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8011640:	e7f8      	b.n	8011634 <rcl_node_init+0x1f0>
 8011642:	782b      	ldrb	r3, [r5, #0]
 8011644:	2b2f      	cmp	r3, #47	@ 0x2f
 8011646:	f43f af42 	beq.w	80114ce <rcl_node_init+0x8a>
 801164a:	9503      	str	r5, [sp, #12]
 801164c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011650:	9300      	str	r3, [sp, #0]
 8011652:	4b1e      	ldr	r3, [pc, #120]	@ (80116cc <rcl_node_init+0x288>)
 8011654:	9302      	str	r3, [sp, #8]
 8011656:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801165a:	9301      	str	r3, [sp, #4]
 801165c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8011660:	f002 fc12 	bl	8013e88 <rcutils_format_string_limit>
 8011664:	4605      	mov	r5, r0
 8011666:	b340      	cbz	r0, 80116ba <rcl_node_init+0x276>
 8011668:	2200      	movs	r2, #0
 801166a:	a922      	add	r1, sp, #136	@ 0x88
 801166c:	9222      	str	r2, [sp, #136]	@ 0x88
 801166e:	f003 f80f 	bl	8014690 <rmw_validate_namespace>
 8011672:	4681      	mov	r9, r0
 8011674:	2800      	cmp	r0, #0
 8011676:	f43f af34 	beq.w	80114e2 <rcl_node_init+0x9e>
 801167a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801167e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011682:	4628      	mov	r0, r5
 8011684:	4798      	blx	r3
 8011686:	e7d5      	b.n	8011634 <rcl_node_init+0x1f0>
 8011688:	f04f 0964 	mov.w	r9, #100	@ 0x64
 801168c:	4648      	mov	r0, r9
 801168e:	b029      	add	sp, #164	@ 0xa4
 8011690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011694:	f04f 090a 	mov.w	r9, #10
 8011698:	f1ba 0f00 	cmp.w	sl, #0
 801169c:	d1ed      	bne.n	801167a <rcl_node_init+0x236>
 801169e:	e7c9      	b.n	8011634 <rcl_node_init+0x1f0>
 80116a0:	f003 f866 	bl	8014770 <rmw_node_name_validation_result_string>
 80116a4:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 80116a8:	e7c4      	b.n	8011634 <rcl_node_init+0x1f0>
 80116aa:	f003 f803 	bl	80146b4 <rmw_namespace_validation_result_string>
 80116ae:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 80116b2:	f1ba 0f00 	cmp.w	sl, #0
 80116b6:	d1e0      	bne.n	801167a <rcl_node_init+0x236>
 80116b8:	e7bc      	b.n	8011634 <rcl_node_init+0x1f0>
 80116ba:	f04f 090a 	mov.w	r9, #10
 80116be:	e7b9      	b.n	8011634 <rcl_node_init+0x1f0>
 80116c0:	08018158 	.word	0x08018158
 80116c4:	080181a4 	.word	0x080181a4
 80116c8:	0801815c 	.word	0x0801815c
 80116cc:	08018520 	.word	0x08018520

080116d0 <rcl_node_is_valid>:
 80116d0:	b130      	cbz	r0, 80116e0 <rcl_node_is_valid+0x10>
 80116d2:	6843      	ldr	r3, [r0, #4]
 80116d4:	b123      	cbz	r3, 80116e0 <rcl_node_is_valid+0x10>
 80116d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80116d8:	b113      	cbz	r3, 80116e0 <rcl_node_is_valid+0x10>
 80116da:	6800      	ldr	r0, [r0, #0]
 80116dc:	f7ff bd1c 	b.w	8011118 <rcl_context_is_valid>
 80116e0:	2000      	movs	r0, #0
 80116e2:	4770      	bx	lr

080116e4 <rcl_node_get_name>:
 80116e4:	b120      	cbz	r0, 80116f0 <rcl_node_get_name+0xc>
 80116e6:	6840      	ldr	r0, [r0, #4]
 80116e8:	b110      	cbz	r0, 80116f0 <rcl_node_get_name+0xc>
 80116ea:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80116ec:	b100      	cbz	r0, 80116f0 <rcl_node_get_name+0xc>
 80116ee:	6880      	ldr	r0, [r0, #8]
 80116f0:	4770      	bx	lr
 80116f2:	bf00      	nop

080116f4 <rcl_node_get_namespace>:
 80116f4:	b120      	cbz	r0, 8011700 <rcl_node_get_namespace+0xc>
 80116f6:	6840      	ldr	r0, [r0, #4]
 80116f8:	b110      	cbz	r0, 8011700 <rcl_node_get_namespace+0xc>
 80116fa:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80116fc:	b100      	cbz	r0, 8011700 <rcl_node_get_namespace+0xc>
 80116fe:	68c0      	ldr	r0, [r0, #12]
 8011700:	4770      	bx	lr
 8011702:	bf00      	nop

08011704 <rcl_node_get_options>:
 8011704:	b128      	cbz	r0, 8011712 <rcl_node_get_options+0xe>
 8011706:	6840      	ldr	r0, [r0, #4]
 8011708:	b118      	cbz	r0, 8011712 <rcl_node_get_options+0xe>
 801170a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801170c:	2b00      	cmp	r3, #0
 801170e:	bf08      	it	eq
 8011710:	2000      	moveq	r0, #0
 8011712:	4770      	bx	lr

08011714 <rcl_node_get_rmw_handle>:
 8011714:	b110      	cbz	r0, 801171c <rcl_node_get_rmw_handle+0x8>
 8011716:	6840      	ldr	r0, [r0, #4]
 8011718:	b100      	cbz	r0, 801171c <rcl_node_get_rmw_handle+0x8>
 801171a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 801171c:	4770      	bx	lr
 801171e:	bf00      	nop

08011720 <rcl_node_get_default_options>:
 8011720:	b510      	push	{r4, lr}
 8011722:	2268      	movs	r2, #104	@ 0x68
 8011724:	4604      	mov	r4, r0
 8011726:	2100      	movs	r1, #0
 8011728:	f005 fc6c 	bl	8017004 <memset>
 801172c:	4620      	mov	r0, r4
 801172e:	f7f9 ffef 	bl	800b710 <rcutils_get_default_allocator>
 8011732:	2301      	movs	r3, #1
 8011734:	7523      	strb	r3, [r4, #20]
 8011736:	4620      	mov	r0, r4
 8011738:	bd10      	pop	{r4, pc}
 801173a:	bf00      	nop

0801173c <rcl_node_options_copy>:
 801173c:	b1d0      	cbz	r0, 8011774 <rcl_node_options_copy+0x38>
 801173e:	b570      	push	{r4, r5, r6, lr}
 8011740:	460c      	mov	r4, r1
 8011742:	b1a9      	cbz	r1, 8011770 <rcl_node_options_copy+0x34>
 8011744:	4288      	cmp	r0, r1
 8011746:	4684      	mov	ip, r0
 8011748:	d012      	beq.n	8011770 <rcl_node_options_copy+0x34>
 801174a:	4605      	mov	r5, r0
 801174c:	8a86      	ldrh	r6, [r0, #20]
 801174e:	468e      	mov	lr, r1
 8011750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011752:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011756:	682b      	ldr	r3, [r5, #0]
 8011758:	f8ce 3000 	str.w	r3, [lr]
 801175c:	f10c 0118 	add.w	r1, ip, #24
 8011760:	2250      	movs	r2, #80	@ 0x50
 8011762:	82a6      	strh	r6, [r4, #20]
 8011764:	f104 0018 	add.w	r0, r4, #24
 8011768:	f005 fd15 	bl	8017196 <memcpy>
 801176c:	2000      	movs	r0, #0
 801176e:	bd70      	pop	{r4, r5, r6, pc}
 8011770:	200b      	movs	r0, #11
 8011772:	bd70      	pop	{r4, r5, r6, pc}
 8011774:	200b      	movs	r0, #11
 8011776:	4770      	bx	lr

08011778 <rcl_node_resolve_name>:
 8011778:	b082      	sub	sp, #8
 801177a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801177e:	b091      	sub	sp, #68	@ 0x44
 8011780:	ac1a      	add	r4, sp, #104	@ 0x68
 8011782:	e884 000c 	stmia.w	r4, {r2, r3}
 8011786:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 801178a:	2800      	cmp	r0, #0
 801178c:	d03b      	beq.n	8011806 <rcl_node_resolve_name+0x8e>
 801178e:	460c      	mov	r4, r1
 8011790:	4605      	mov	r5, r0
 8011792:	f7ff ffb7 	bl	8011704 <rcl_node_get_options>
 8011796:	2800      	cmp	r0, #0
 8011798:	d037      	beq.n	801180a <rcl_node_resolve_name+0x92>
 801179a:	4628      	mov	r0, r5
 801179c:	f7ff ffa2 	bl	80116e4 <rcl_node_get_name>
 80117a0:	4606      	mov	r6, r0
 80117a2:	4628      	mov	r0, r5
 80117a4:	f7ff ffa6 	bl	80116f4 <rcl_node_get_namespace>
 80117a8:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 80117ac:	4681      	mov	r9, r0
 80117ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80117b2:	ad0b      	add	r5, sp, #44	@ 0x2c
 80117b4:	46ac      	mov	ip, r5
 80117b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80117ba:	f8de 3000 	ldr.w	r3, [lr]
 80117be:	f8cc 3000 	str.w	r3, [ip]
 80117c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80117c4:	b1fb      	cbz	r3, 8011806 <rcl_node_resolve_name+0x8e>
 80117c6:	468a      	mov	sl, r1
 80117c8:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 80117cc:	f002 fcb4 	bl	8014138 <rcutils_get_zero_initialized_string_map>
 80117d0:	ab10      	add	r3, sp, #64	@ 0x40
 80117d2:	9008      	str	r0, [sp, #32]
 80117d4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80117d8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80117dc:	2100      	movs	r1, #0
 80117de:	e895 000c 	ldmia.w	r5, {r2, r3}
 80117e2:	a808      	add	r0, sp, #32
 80117e4:	f002 fd20 	bl	8014228 <rcutils_string_map_init>
 80117e8:	4607      	mov	r7, r0
 80117ea:	b180      	cbz	r0, 801180e <rcl_node_resolve_name+0x96>
 80117ec:	f7f9 ffac 	bl	800b748 <rcutils_get_error_string>
 80117f0:	f7f9 ffc2 	bl	800b778 <rcutils_reset_error>
 80117f4:	2f0a      	cmp	r7, #10
 80117f6:	bf18      	it	ne
 80117f8:	2701      	movne	r7, #1
 80117fa:	4638      	mov	r0, r7
 80117fc:	b011      	add	sp, #68	@ 0x44
 80117fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011802:	b002      	add	sp, #8
 8011804:	4770      	bx	lr
 8011806:	270b      	movs	r7, #11
 8011808:	e7f7      	b.n	80117fa <rcl_node_resolve_name+0x82>
 801180a:	2701      	movs	r7, #1
 801180c:	e7f5      	b.n	80117fa <rcl_node_resolve_name+0x82>
 801180e:	9009      	str	r0, [sp, #36]	@ 0x24
 8011810:	9007      	str	r0, [sp, #28]
 8011812:	a808      	add	r0, sp, #32
 8011814:	f004 fda4 	bl	8016360 <rcl_get_default_topic_name_substitutions>
 8011818:	4607      	mov	r7, r0
 801181a:	b1a8      	cbz	r0, 8011848 <rcl_node_resolve_name+0xd0>
 801181c:	280a      	cmp	r0, #10
 801181e:	9c07      	ldr	r4, [sp, #28]
 8011820:	d000      	beq.n	8011824 <rcl_node_resolve_name+0xac>
 8011822:	2701      	movs	r7, #1
 8011824:	a808      	add	r0, sp, #32
 8011826:	f002 fd3f 	bl	80142a8 <rcutils_string_map_fini>
 801182a:	2800      	cmp	r0, #0
 801182c:	d13d      	bne.n	80118aa <rcl_node_resolve_name+0x132>
 801182e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011830:	4659      	mov	r1, fp
 8011832:	47d0      	blx	sl
 8011834:	4659      	mov	r1, fp
 8011836:	4620      	mov	r0, r4
 8011838:	47d0      	blx	sl
 801183a:	f1b8 0f00 	cmp.w	r8, #0
 801183e:	d0dc      	beq.n	80117fa <rcl_node_resolve_name+0x82>
 8011840:	2f67      	cmp	r7, #103	@ 0x67
 8011842:	bf08      	it	eq
 8011844:	2768      	moveq	r7, #104	@ 0x68
 8011846:	e7d8      	b.n	80117fa <rcl_node_resolve_name+0x82>
 8011848:	ab09      	add	r3, sp, #36	@ 0x24
 801184a:	9305      	str	r3, [sp, #20]
 801184c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801184e:	46ec      	mov	ip, sp
 8011850:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011854:	682b      	ldr	r3, [r5, #0]
 8011856:	f8cc 3000 	str.w	r3, [ip]
 801185a:	464a      	mov	r2, r9
 801185c:	4631      	mov	r1, r6
 801185e:	4620      	mov	r0, r4
 8011860:	ab08      	add	r3, sp, #32
 8011862:	f004 fc1f 	bl	80160a4 <rcl_expand_topic_name>
 8011866:	4607      	mov	r7, r0
 8011868:	b9b8      	cbnz	r0, 801189a <rcl_node_resolve_name+0x122>
 801186a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801186c:	9009      	str	r0, [sp, #36]	@ 0x24
 801186e:	4602      	mov	r2, r0
 8011870:	a90a      	add	r1, sp, #40	@ 0x28
 8011872:	4620      	mov	r0, r4
 8011874:	f002 fe48 	bl	8014508 <rmw_validate_full_topic_name>
 8011878:	b988      	cbnz	r0, 801189e <rcl_node_resolve_name+0x126>
 801187a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801187c:	b9d5      	cbnz	r5, 80118b4 <rcl_node_resolve_name+0x13c>
 801187e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011880:	a808      	add	r0, sp, #32
 8011882:	601c      	str	r4, [r3, #0]
 8011884:	f002 fd10 	bl	80142a8 <rcutils_string_map_fini>
 8011888:	4607      	mov	r7, r0
 801188a:	b1a8      	cbz	r0, 80118b8 <rcl_node_resolve_name+0x140>
 801188c:	f7f9 ff5c 	bl	800b748 <rcutils_get_error_string>
 8011890:	462c      	mov	r4, r5
 8011892:	f7f9 ff71 	bl	800b778 <rcutils_reset_error>
 8011896:	2701      	movs	r7, #1
 8011898:	e7c9      	b.n	801182e <rcl_node_resolve_name+0xb6>
 801189a:	9c07      	ldr	r4, [sp, #28]
 801189c:	e7c2      	b.n	8011824 <rcl_node_resolve_name+0xac>
 801189e:	f7f9 ff53 	bl	800b748 <rcutils_get_error_string>
 80118a2:	2701      	movs	r7, #1
 80118a4:	f7f9 ff68 	bl	800b778 <rcutils_reset_error>
 80118a8:	e7bc      	b.n	8011824 <rcl_node_resolve_name+0xac>
 80118aa:	f7f9 ff4d 	bl	800b748 <rcutils_get_error_string>
 80118ae:	f7f9 ff63 	bl	800b778 <rcutils_reset_error>
 80118b2:	e7bc      	b.n	801182e <rcl_node_resolve_name+0xb6>
 80118b4:	2767      	movs	r7, #103	@ 0x67
 80118b6:	e7b5      	b.n	8011824 <rcl_node_resolve_name+0xac>
 80118b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80118ba:	4659      	mov	r1, fp
 80118bc:	47d0      	blx	sl
 80118be:	4659      	mov	r1, fp
 80118c0:	4638      	mov	r0, r7
 80118c2:	47d0      	blx	sl
 80118c4:	e799      	b.n	80117fa <rcl_node_resolve_name+0x82>
 80118c6:	bf00      	nop

080118c8 <exact_match_lookup>:
 80118c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118ca:	f102 0708 	add.w	r7, r2, #8
 80118ce:	460b      	mov	r3, r1
 80118d0:	4614      	mov	r4, r2
 80118d2:	4606      	mov	r6, r0
 80118d4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80118d8:	b085      	sub	sp, #20
 80118da:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80118de:	4618      	mov	r0, r3
 80118e0:	4919      	ldr	r1, [pc, #100]	@ (8011948 <exact_match_lookup+0x80>)
 80118e2:	e894 000c 	ldmia.w	r4, {r2, r3}
 80118e6:	f002 fac1 	bl	8013e6c <rcutils_join_path>
 80118ea:	7833      	ldrb	r3, [r6, #0]
 80118ec:	2b2f      	cmp	r3, #47	@ 0x2f
 80118ee:	4605      	mov	r5, r0
 80118f0:	d023      	beq.n	801193a <exact_match_lookup+0x72>
 80118f2:	f104 030c 	add.w	r3, r4, #12
 80118f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80118fa:	e88d 0003 	stmia.w	sp, {r0, r1}
 80118fe:	1c70      	adds	r0, r6, #1
 8011900:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8011904:	f002 fab8 	bl	8013e78 <rcutils_to_native_path>
 8011908:	4606      	mov	r6, r0
 801190a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801190e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011912:	4631      	mov	r1, r6
 8011914:	e894 000c 	ldmia.w	r4, {r2, r3}
 8011918:	4628      	mov	r0, r5
 801191a:	f002 faa7 	bl	8013e6c <rcutils_join_path>
 801191e:	6862      	ldr	r2, [r4, #4]
 8011920:	6921      	ldr	r1, [r4, #16]
 8011922:	4603      	mov	r3, r0
 8011924:	4630      	mov	r0, r6
 8011926:	461e      	mov	r6, r3
 8011928:	4790      	blx	r2
 801192a:	4628      	mov	r0, r5
 801192c:	6863      	ldr	r3, [r4, #4]
 801192e:	6921      	ldr	r1, [r4, #16]
 8011930:	4798      	blx	r3
 8011932:	4635      	mov	r5, r6
 8011934:	4628      	mov	r0, r5
 8011936:	b005      	add	sp, #20
 8011938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801193a:	7873      	ldrb	r3, [r6, #1]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d1d8      	bne.n	80118f2 <exact_match_lookup+0x2a>
 8011940:	4628      	mov	r0, r5
 8011942:	b005      	add	sp, #20
 8011944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011946:	bf00      	nop
 8011948:	08018568 	.word	0x08018568

0801194c <rcl_get_secure_root>:
 801194c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011950:	b085      	sub	sp, #20
 8011952:	b168      	cbz	r0, 8011970 <rcl_get_secure_root+0x24>
 8011954:	4607      	mov	r7, r0
 8011956:	4608      	mov	r0, r1
 8011958:	460c      	mov	r4, r1
 801195a:	f7f9 fee7 	bl	800b72c <rcutils_allocator_is_valid>
 801195e:	b138      	cbz	r0, 8011970 <rcl_get_secure_root+0x24>
 8011960:	2300      	movs	r3, #0
 8011962:	482d      	ldr	r0, [pc, #180]	@ (8011a18 <rcl_get_secure_root+0xcc>)
 8011964:	9303      	str	r3, [sp, #12]
 8011966:	a903      	add	r1, sp, #12
 8011968:	f002 fa66 	bl	8013e38 <rcutils_get_env>
 801196c:	4605      	mov	r5, r0
 801196e:	b120      	cbz	r0, 801197a <rcl_get_secure_root+0x2e>
 8011970:	2500      	movs	r5, #0
 8011972:	4628      	mov	r0, r5
 8011974:	b005      	add	sp, #20
 8011976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801197a:	9b03      	ldr	r3, [sp, #12]
 801197c:	781a      	ldrb	r2, [r3, #0]
 801197e:	2a00      	cmp	r2, #0
 8011980:	d0f6      	beq.n	8011970 <rcl_get_secure_root+0x24>
 8011982:	f104 090c 	add.w	r9, r4, #12
 8011986:	e899 0003 	ldmia.w	r9, {r0, r1}
 801198a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801198e:	4618      	mov	r0, r3
 8011990:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8011994:	f002 fb92 	bl	80140bc <rcutils_strdup>
 8011998:	4680      	mov	r8, r0
 801199a:	2800      	cmp	r0, #0
 801199c:	d0e8      	beq.n	8011970 <rcl_get_secure_root+0x24>
 801199e:	481f      	ldr	r0, [pc, #124]	@ (8011a1c <rcl_get_secure_root+0xd0>)
 80119a0:	9503      	str	r5, [sp, #12]
 80119a2:	a903      	add	r1, sp, #12
 80119a4:	f002 fa48 	bl	8013e38 <rcutils_get_env>
 80119a8:	b160      	cbz	r0, 80119c4 <rcl_get_secure_root+0x78>
 80119aa:	2600      	movs	r6, #0
 80119ac:	6863      	ldr	r3, [r4, #4]
 80119ae:	6921      	ldr	r1, [r4, #16]
 80119b0:	4630      	mov	r0, r6
 80119b2:	4798      	blx	r3
 80119b4:	4640      	mov	r0, r8
 80119b6:	6863      	ldr	r3, [r4, #4]
 80119b8:	6921      	ldr	r1, [r4, #16]
 80119ba:	4798      	blx	r3
 80119bc:	4628      	mov	r0, r5
 80119be:	b005      	add	sp, #20
 80119c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119c4:	9b03      	ldr	r3, [sp, #12]
 80119c6:	781e      	ldrb	r6, [r3, #0]
 80119c8:	b1f6      	cbz	r6, 8011a08 <rcl_get_secure_root+0xbc>
 80119ca:	e899 0003 	ldmia.w	r9, {r0, r1}
 80119ce:	e88d 0003 	stmia.w	sp, {r0, r1}
 80119d2:	4618      	mov	r0, r3
 80119d4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80119d8:	f002 fb70 	bl	80140bc <rcutils_strdup>
 80119dc:	4606      	mov	r6, r0
 80119de:	2800      	cmp	r0, #0
 80119e0:	d0e3      	beq.n	80119aa <rcl_get_secure_root+0x5e>
 80119e2:	4622      	mov	r2, r4
 80119e4:	4641      	mov	r1, r8
 80119e6:	f7ff ff6f 	bl	80118c8 <exact_match_lookup>
 80119ea:	4605      	mov	r5, r0
 80119ec:	2d00      	cmp	r5, #0
 80119ee:	d0dd      	beq.n	80119ac <rcl_get_secure_root+0x60>
 80119f0:	4628      	mov	r0, r5
 80119f2:	f002 fa39 	bl	8013e68 <rcutils_is_directory>
 80119f6:	4603      	mov	r3, r0
 80119f8:	2800      	cmp	r0, #0
 80119fa:	d1d7      	bne.n	80119ac <rcl_get_secure_root+0x60>
 80119fc:	4628      	mov	r0, r5
 80119fe:	6921      	ldr	r1, [r4, #16]
 8011a00:	461d      	mov	r5, r3
 8011a02:	6863      	ldr	r3, [r4, #4]
 8011a04:	4798      	blx	r3
 8011a06:	e7d1      	b.n	80119ac <rcl_get_secure_root+0x60>
 8011a08:	4622      	mov	r2, r4
 8011a0a:	4638      	mov	r0, r7
 8011a0c:	4641      	mov	r1, r8
 8011a0e:	f7ff ff5b 	bl	80118c8 <exact_match_lookup>
 8011a12:	4605      	mov	r5, r0
 8011a14:	e7ea      	b.n	80119ec <rcl_get_secure_root+0xa0>
 8011a16:	bf00      	nop
 8011a18:	08018574 	.word	0x08018574
 8011a1c:	0801858c 	.word	0x0801858c

08011a20 <rcl_get_security_options_from_environment>:
 8011a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a24:	b082      	sub	sp, #8
 8011a26:	2300      	movs	r3, #0
 8011a28:	4606      	mov	r6, r0
 8011a2a:	460f      	mov	r7, r1
 8011a2c:	4820      	ldr	r0, [pc, #128]	@ (8011ab0 <rcl_get_security_options_from_environment+0x90>)
 8011a2e:	9301      	str	r3, [sp, #4]
 8011a30:	a901      	add	r1, sp, #4
 8011a32:	4690      	mov	r8, r2
 8011a34:	f002 fa00 	bl	8013e38 <rcutils_get_env>
 8011a38:	b120      	cbz	r0, 8011a44 <rcl_get_security_options_from_environment+0x24>
 8011a3a:	2501      	movs	r5, #1
 8011a3c:	4628      	mov	r0, r5
 8011a3e:	b002      	add	sp, #8
 8011a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a44:	491b      	ldr	r1, [pc, #108]	@ (8011ab4 <rcl_get_security_options_from_environment+0x94>)
 8011a46:	4604      	mov	r4, r0
 8011a48:	9801      	ldr	r0, [sp, #4]
 8011a4a:	f7ee fbe9 	bl	8000220 <strcmp>
 8011a4e:	4605      	mov	r5, r0
 8011a50:	b9e8      	cbnz	r0, 8011a8e <rcl_get_security_options_from_environment+0x6e>
 8011a52:	9001      	str	r0, [sp, #4]
 8011a54:	f1b8 0f00 	cmp.w	r8, #0
 8011a58:	d020      	beq.n	8011a9c <rcl_get_security_options_from_environment+0x7c>
 8011a5a:	4817      	ldr	r0, [pc, #92]	@ (8011ab8 <rcl_get_security_options_from_environment+0x98>)
 8011a5c:	a901      	add	r1, sp, #4
 8011a5e:	f002 f9eb 	bl	8013e38 <rcutils_get_env>
 8011a62:	2800      	cmp	r0, #0
 8011a64:	d1e9      	bne.n	8011a3a <rcl_get_security_options_from_environment+0x1a>
 8011a66:	4915      	ldr	r1, [pc, #84]	@ (8011abc <rcl_get_security_options_from_environment+0x9c>)
 8011a68:	9801      	ldr	r0, [sp, #4]
 8011a6a:	f7ee fbd9 	bl	8000220 <strcmp>
 8011a6e:	fab0 f080 	clz	r0, r0
 8011a72:	0940      	lsrs	r0, r0, #5
 8011a74:	f888 0000 	strb.w	r0, [r8]
 8011a78:	4639      	mov	r1, r7
 8011a7a:	4630      	mov	r0, r6
 8011a7c:	f7ff ff66 	bl	801194c <rcl_get_secure_root>
 8011a80:	b170      	cbz	r0, 8011aa0 <rcl_get_security_options_from_environment+0x80>
 8011a82:	f8c8 0004 	str.w	r0, [r8, #4]
 8011a86:	4628      	mov	r0, r5
 8011a88:	b002      	add	sp, #8
 8011a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a8e:	4625      	mov	r5, r4
 8011a90:	4628      	mov	r0, r5
 8011a92:	f888 4000 	strb.w	r4, [r8]
 8011a96:	b002      	add	sp, #8
 8011a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a9c:	250b      	movs	r5, #11
 8011a9e:	e7cd      	b.n	8011a3c <rcl_get_security_options_from_environment+0x1c>
 8011aa0:	f898 5000 	ldrb.w	r5, [r8]
 8011aa4:	f1a5 0501 	sub.w	r5, r5, #1
 8011aa8:	fab5 f585 	clz	r5, r5
 8011aac:	096d      	lsrs	r5, r5, #5
 8011aae:	e7c5      	b.n	8011a3c <rcl_get_security_options_from_environment+0x1c>
 8011ab0:	0801852c 	.word	0x0801852c
 8011ab4:	08018540 	.word	0x08018540
 8011ab8:	08018548 	.word	0x08018548
 8011abc:	08018560 	.word	0x08018560

08011ac0 <rcl_service_get_rmw_handle>:
 8011ac0:	b118      	cbz	r0, 8011aca <rcl_service_get_rmw_handle+0xa>
 8011ac2:	6800      	ldr	r0, [r0, #0]
 8011ac4:	b108      	cbz	r0, 8011aca <rcl_service_get_rmw_handle+0xa>
 8011ac6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011aca:	4770      	bx	lr

08011acc <rcl_take_request>:
 8011acc:	b570      	push	{r4, r5, r6, lr}
 8011ace:	468e      	mov	lr, r1
 8011ad0:	460c      	mov	r4, r1
 8011ad2:	4616      	mov	r6, r2
 8011ad4:	4605      	mov	r5, r0
 8011ad6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011ada:	b08c      	sub	sp, #48	@ 0x30
 8011adc:	f10d 0c18 	add.w	ip, sp, #24
 8011ae0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011ae4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011ae8:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011aec:	b30d      	cbz	r5, 8011b32 <rcl_take_request+0x66>
 8011aee:	682b      	ldr	r3, [r5, #0]
 8011af0:	b1fb      	cbz	r3, 8011b32 <rcl_take_request+0x66>
 8011af2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011af6:	b1e0      	cbz	r0, 8011b32 <rcl_take_request+0x66>
 8011af8:	b336      	cbz	r6, 8011b48 <rcl_take_request+0x7c>
 8011afa:	2300      	movs	r3, #0
 8011afc:	f88d 3007 	strb.w	r3, [sp, #7]
 8011b00:	4632      	mov	r2, r6
 8011b02:	f10d 0307 	add.w	r3, sp, #7
 8011b06:	a902      	add	r1, sp, #8
 8011b08:	f003 f854 	bl	8014bb4 <rmw_take_request>
 8011b0c:	4605      	mov	r5, r0
 8011b0e:	b198      	cbz	r0, 8011b38 <rcl_take_request+0x6c>
 8011b10:	280a      	cmp	r0, #10
 8011b12:	bf18      	it	ne
 8011b14:	2501      	movne	r5, #1
 8011b16:	f10d 0e18 	add.w	lr, sp, #24
 8011b1a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011b1e:	46a4      	mov	ip, r4
 8011b20:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011b24:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011b28:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011b2c:	4628      	mov	r0, r5
 8011b2e:	b00c      	add	sp, #48	@ 0x30
 8011b30:	bd70      	pop	{r4, r5, r6, pc}
 8011b32:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8011b36:	e7ee      	b.n	8011b16 <rcl_take_request+0x4a>
 8011b38:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011b3c:	f240 2359 	movw	r3, #601	@ 0x259
 8011b40:	2a00      	cmp	r2, #0
 8011b42:	bf08      	it	eq
 8011b44:	461d      	moveq	r5, r3
 8011b46:	e7e6      	b.n	8011b16 <rcl_take_request+0x4a>
 8011b48:	250b      	movs	r5, #11
 8011b4a:	e7e4      	b.n	8011b16 <rcl_take_request+0x4a>

08011b4c <rcl_send_response>:
 8011b4c:	b170      	cbz	r0, 8011b6c <rcl_send_response+0x20>
 8011b4e:	6800      	ldr	r0, [r0, #0]
 8011b50:	b160      	cbz	r0, 8011b6c <rcl_send_response+0x20>
 8011b52:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011b56:	b148      	cbz	r0, 8011b6c <rcl_send_response+0x20>
 8011b58:	b159      	cbz	r1, 8011b72 <rcl_send_response+0x26>
 8011b5a:	b510      	push	{r4, lr}
 8011b5c:	b15a      	cbz	r2, 8011b76 <rcl_send_response+0x2a>
 8011b5e:	f003 f887 	bl	8014c70 <rmw_send_response>
 8011b62:	b110      	cbz	r0, 8011b6a <rcl_send_response+0x1e>
 8011b64:	2802      	cmp	r0, #2
 8011b66:	bf18      	it	ne
 8011b68:	2001      	movne	r0, #1
 8011b6a:	bd10      	pop	{r4, pc}
 8011b6c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8011b70:	4770      	bx	lr
 8011b72:	200b      	movs	r0, #11
 8011b74:	4770      	bx	lr
 8011b76:	200b      	movs	r0, #11
 8011b78:	bd10      	pop	{r4, pc}
 8011b7a:	bf00      	nop

08011b7c <rcl_service_is_valid>:
 8011b7c:	b130      	cbz	r0, 8011b8c <rcl_service_is_valid+0x10>
 8011b7e:	6800      	ldr	r0, [r0, #0]
 8011b80:	b120      	cbz	r0, 8011b8c <rcl_service_is_valid+0x10>
 8011b82:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011b86:	3800      	subs	r0, #0
 8011b88:	bf18      	it	ne
 8011b8a:	2001      	movne	r0, #1
 8011b8c:	4770      	bx	lr
 8011b8e:	bf00      	nop

08011b90 <rcl_get_zero_initialized_subscription>:
 8011b90:	4b01      	ldr	r3, [pc, #4]	@ (8011b98 <rcl_get_zero_initialized_subscription+0x8>)
 8011b92:	6818      	ldr	r0, [r3, #0]
 8011b94:	4770      	bx	lr
 8011b96:	bf00      	nop
 8011b98:	080185ac 	.word	0x080185ac

08011b9c <rcl_subscription_init>:
 8011b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011ba0:	b089      	sub	sp, #36	@ 0x24
 8011ba2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8011ba4:	b1d6      	cbz	r6, 8011bdc <rcl_subscription_init+0x40>
 8011ba6:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 8011baa:	4604      	mov	r4, r0
 8011bac:	4648      	mov	r0, r9
 8011bae:	460d      	mov	r5, r1
 8011bb0:	4690      	mov	r8, r2
 8011bb2:	461f      	mov	r7, r3
 8011bb4:	f7f9 fdba 	bl	800b72c <rcutils_allocator_is_valid>
 8011bb8:	b180      	cbz	r0, 8011bdc <rcl_subscription_init+0x40>
 8011bba:	b17c      	cbz	r4, 8011bdc <rcl_subscription_init+0x40>
 8011bbc:	4628      	mov	r0, r5
 8011bbe:	f7ff fd87 	bl	80116d0 <rcl_node_is_valid>
 8011bc2:	2800      	cmp	r0, #0
 8011bc4:	d054      	beq.n	8011c70 <rcl_subscription_init+0xd4>
 8011bc6:	f1b8 0f00 	cmp.w	r8, #0
 8011bca:	d007      	beq.n	8011bdc <rcl_subscription_init+0x40>
 8011bcc:	b137      	cbz	r7, 8011bdc <rcl_subscription_init+0x40>
 8011bce:	6823      	ldr	r3, [r4, #0]
 8011bd0:	b14b      	cbz	r3, 8011be6 <rcl_subscription_init+0x4a>
 8011bd2:	2764      	movs	r7, #100	@ 0x64
 8011bd4:	4638      	mov	r0, r7
 8011bd6:	b009      	add	sp, #36	@ 0x24
 8011bd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011bdc:	270b      	movs	r7, #11
 8011bde:	4638      	mov	r0, r7
 8011be0:	b009      	add	sp, #36	@ 0x24
 8011be2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011be6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8011bea:	aa07      	add	r2, sp, #28
 8011bec:	9205      	str	r2, [sp, #20]
 8011bee:	9307      	str	r3, [sp, #28]
 8011bf0:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8011bf4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011bf8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8011bfc:	4639      	mov	r1, r7
 8011bfe:	e899 000c 	ldmia.w	r9, {r2, r3}
 8011c02:	4628      	mov	r0, r5
 8011c04:	f7ff fdb8 	bl	8011778 <rcl_node_resolve_name>
 8011c08:	4607      	mov	r7, r0
 8011c0a:	2800      	cmp	r0, #0
 8011c0c:	d15f      	bne.n	8011cce <rcl_subscription_init+0x132>
 8011c0e:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 8011c12:	21c8      	movs	r1, #200	@ 0xc8
 8011c14:	2001      	movs	r0, #1
 8011c16:	4798      	blx	r3
 8011c18:	6020      	str	r0, [r4, #0]
 8011c1a:	2800      	cmp	r0, #0
 8011c1c:	d05d      	beq.n	8011cda <rcl_subscription_init+0x13e>
 8011c1e:	4628      	mov	r0, r5
 8011c20:	f7ff fd78 	bl	8011714 <rcl_node_get_rmw_handle>
 8011c24:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8011c28:	9300      	str	r3, [sp, #0]
 8011c2a:	9a07      	ldr	r2, [sp, #28]
 8011c2c:	6827      	ldr	r7, [r4, #0]
 8011c2e:	4641      	mov	r1, r8
 8011c30:	4633      	mov	r3, r6
 8011c32:	f7fa fa41 	bl	800c0b8 <rmw_create_subscription>
 8011c36:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 8011c3a:	6827      	ldr	r7, [r4, #0]
 8011c3c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8011c40:	b348      	cbz	r0, 8011c96 <rcl_subscription_init+0xfa>
 8011c42:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8011c46:	f7fa fb19 	bl	800c27c <rmw_subscription_get_actual_qos>
 8011c4a:	4607      	mov	r7, r0
 8011c4c:	b9a8      	cbnz	r0, 8011c7a <rcl_subscription_init+0xde>
 8011c4e:	6820      	ldr	r0, [r4, #0]
 8011c50:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8011c54:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 8011c58:	2270      	movs	r2, #112	@ 0x70
 8011c5a:	4631      	mov	r1, r6
 8011c5c:	f005 fa9b 	bl	8017196 <memcpy>
 8011c60:	9807      	ldr	r0, [sp, #28]
 8011c62:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8011c64:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8011c66:	4798      	blx	r3
 8011c68:	4638      	mov	r0, r7
 8011c6a:	b009      	add	sp, #36	@ 0x24
 8011c6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c70:	27c8      	movs	r7, #200	@ 0xc8
 8011c72:	4638      	mov	r0, r7
 8011c74:	b009      	add	sp, #36	@ 0x24
 8011c76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c7a:	6827      	ldr	r7, [r4, #0]
 8011c7c:	b32f      	cbz	r7, 8011cca <rcl_subscription_init+0x12e>
 8011c7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8011c82:	b14b      	cbz	r3, 8011c98 <rcl_subscription_init+0xfc>
 8011c84:	4628      	mov	r0, r5
 8011c86:	f7ff fd45 	bl	8011714 <rcl_node_get_rmw_handle>
 8011c8a:	6823      	ldr	r3, [r4, #0]
 8011c8c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8011c90:	f7fa fb04 	bl	800c29c <rmw_destroy_subscription>
 8011c94:	6827      	ldr	r7, [r4, #0]
 8011c96:	b197      	cbz	r7, 8011cbe <rcl_subscription_init+0x122>
 8011c98:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8011c9c:	4628      	mov	r0, r5
 8011c9e:	f7f9 fd45 	bl	800b72c <rcutils_allocator_is_valid>
 8011ca2:	b158      	cbz	r0, 8011cbc <rcl_subscription_init+0x120>
 8011ca4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011ca6:	b148      	cbz	r0, 8011cbc <rcl_subscription_init+0x120>
 8011ca8:	4629      	mov	r1, r5
 8011caa:	f002 fb81 	bl	80143b0 <rmw_subscription_content_filter_options_fini>
 8011cae:	4605      	mov	r5, r0
 8011cb0:	b9b8      	cbnz	r0, 8011ce2 <rcl_subscription_init+0x146>
 8011cb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011cb4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8011cb6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011cb8:	4798      	blx	r3
 8011cba:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8011cbc:	6827      	ldr	r7, [r4, #0]
 8011cbe:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8011cc0:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8011cc2:	4638      	mov	r0, r7
 8011cc4:	4798      	blx	r3
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	6023      	str	r3, [r4, #0]
 8011cca:	2701      	movs	r7, #1
 8011ccc:	e7c8      	b.n	8011c60 <rcl_subscription_init+0xc4>
 8011cce:	2867      	cmp	r0, #103	@ 0x67
 8011cd0:	d0c6      	beq.n	8011c60 <rcl_subscription_init+0xc4>
 8011cd2:	2869      	cmp	r0, #105	@ 0x69
 8011cd4:	d003      	beq.n	8011cde <rcl_subscription_init+0x142>
 8011cd6:	280a      	cmp	r0, #10
 8011cd8:	d1f7      	bne.n	8011cca <rcl_subscription_init+0x12e>
 8011cda:	270a      	movs	r7, #10
 8011cdc:	e7c0      	b.n	8011c60 <rcl_subscription_init+0xc4>
 8011cde:	2767      	movs	r7, #103	@ 0x67
 8011ce0:	e7be      	b.n	8011c60 <rcl_subscription_init+0xc4>
 8011ce2:	f7ff f9fb 	bl	80110dc <rcl_convert_rmw_ret_to_rcl_ret>
 8011ce6:	6827      	ldr	r7, [r4, #0]
 8011ce8:	e7e9      	b.n	8011cbe <rcl_subscription_init+0x122>
 8011cea:	bf00      	nop

08011cec <rcl_subscription_get_default_options>:
 8011cec:	b570      	push	{r4, r5, r6, lr}
 8011cee:	4d14      	ldr	r5, [pc, #80]	@ (8011d40 <rcl_subscription_get_default_options+0x54>)
 8011cf0:	4914      	ldr	r1, [pc, #80]	@ (8011d44 <rcl_subscription_get_default_options+0x58>)
 8011cf2:	b08a      	sub	sp, #40	@ 0x28
 8011cf4:	4604      	mov	r4, r0
 8011cf6:	2250      	movs	r2, #80	@ 0x50
 8011cf8:	4628      	mov	r0, r5
 8011cfa:	f005 fa4c 	bl	8017196 <memcpy>
 8011cfe:	a804      	add	r0, sp, #16
 8011d00:	f7f9 fd06 	bl	800b710 <rcutils_get_default_allocator>
 8011d04:	f10d 0c10 	add.w	ip, sp, #16
 8011d08:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011d0c:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8011d10:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011d14:	466e      	mov	r6, sp
 8011d16:	f8dc 3000 	ldr.w	r3, [ip]
 8011d1a:	f8ce 3000 	str.w	r3, [lr]
 8011d1e:	4630      	mov	r0, r6
 8011d20:	f002 fb60 	bl	80143e4 <rmw_get_default_subscription_options>
 8011d24:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8011d28:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8011d2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011d30:	2270      	movs	r2, #112	@ 0x70
 8011d32:	4629      	mov	r1, r5
 8011d34:	4620      	mov	r0, r4
 8011d36:	f005 fa2e 	bl	8017196 <memcpy>
 8011d3a:	4620      	mov	r0, r4
 8011d3c:	b00a      	add	sp, #40	@ 0x28
 8011d3e:	bd70      	pop	{r4, r5, r6, pc}
 8011d40:	2000ab48 	.word	0x2000ab48
 8011d44:	080185b0 	.word	0x080185b0

08011d48 <rcl_take>:
 8011d48:	2800      	cmp	r0, #0
 8011d4a:	d04a      	beq.n	8011de2 <rcl_take+0x9a>
 8011d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d50:	4604      	mov	r4, r0
 8011d52:	6800      	ldr	r0, [r0, #0]
 8011d54:	b0a4      	sub	sp, #144	@ 0x90
 8011d56:	2800      	cmp	r0, #0
 8011d58:	d03b      	beq.n	8011dd2 <rcl_take+0x8a>
 8011d5a:	461f      	mov	r7, r3
 8011d5c:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d036      	beq.n	8011dd2 <rcl_take+0x8a>
 8011d64:	460e      	mov	r6, r1
 8011d66:	2900      	cmp	r1, #0
 8011d68:	d039      	beq.n	8011dde <rcl_take+0x96>
 8011d6a:	4615      	mov	r5, r2
 8011d6c:	2a00      	cmp	r2, #0
 8011d6e:	d03c      	beq.n	8011dea <rcl_take+0xa2>
 8011d70:	a802      	add	r0, sp, #8
 8011d72:	f002 fbc1 	bl	80144f8 <rmw_get_zero_initialized_message_info>
 8011d76:	f10d 0c08 	add.w	ip, sp, #8
 8011d7a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011d7e:	46ae      	mov	lr, r5
 8011d80:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011d84:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011d88:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011d8c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011d90:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8011d94:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8011d98:	f04f 0800 	mov.w	r8, #0
 8011d9c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8011da0:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8011da4:	6822      	ldr	r2, [r4, #0]
 8011da6:	462b      	mov	r3, r5
 8011da8:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8011dac:	9700      	str	r7, [sp, #0]
 8011dae:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8011db2:	4631      	mov	r1, r6
 8011db4:	f003 f802 	bl	8014dbc <rmw_take_with_info>
 8011db8:	4603      	mov	r3, r0
 8011dba:	b9c0      	cbnz	r0, 8011dee <rcl_take+0xa6>
 8011dbc:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8011dc0:	f240 1291 	movw	r2, #401	@ 0x191
 8011dc4:	2900      	cmp	r1, #0
 8011dc6:	bf08      	it	eq
 8011dc8:	4613      	moveq	r3, r2
 8011dca:	4618      	mov	r0, r3
 8011dcc:	b024      	add	sp, #144	@ 0x90
 8011dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dd2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	b024      	add	sp, #144	@ 0x90
 8011dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dde:	230b      	movs	r3, #11
 8011de0:	e7f3      	b.n	8011dca <rcl_take+0x82>
 8011de2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8011de6:	4618      	mov	r0, r3
 8011de8:	4770      	bx	lr
 8011dea:	ad14      	add	r5, sp, #80	@ 0x50
 8011dec:	e7c0      	b.n	8011d70 <rcl_take+0x28>
 8011dee:	f7ff f975 	bl	80110dc <rcl_convert_rmw_ret_to_rcl_ret>
 8011df2:	4603      	mov	r3, r0
 8011df4:	e7e9      	b.n	8011dca <rcl_take+0x82>
 8011df6:	bf00      	nop

08011df8 <rcl_subscription_get_rmw_handle>:
 8011df8:	b118      	cbz	r0, 8011e02 <rcl_subscription_get_rmw_handle+0xa>
 8011dfa:	6800      	ldr	r0, [r0, #0]
 8011dfc:	b108      	cbz	r0, 8011e02 <rcl_subscription_get_rmw_handle+0xa>
 8011dfe:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8011e02:	4770      	bx	lr

08011e04 <rcl_subscription_is_valid>:
 8011e04:	b130      	cbz	r0, 8011e14 <rcl_subscription_is_valid+0x10>
 8011e06:	6800      	ldr	r0, [r0, #0]
 8011e08:	b120      	cbz	r0, 8011e14 <rcl_subscription_is_valid+0x10>
 8011e0a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8011e0e:	3800      	subs	r0, #0
 8011e10:	bf18      	it	ne
 8011e12:	2001      	movne	r0, #1
 8011e14:	4770      	bx	lr
 8011e16:	bf00      	nop

08011e18 <rcl_get_system_time>:
 8011e18:	4608      	mov	r0, r1
 8011e1a:	f7f9 bcc9 	b.w	800b7b0 <rcutils_system_time_now>
 8011e1e:	bf00      	nop

08011e20 <rcl_get_steady_time>:
 8011e20:	4608      	mov	r0, r1
 8011e22:	f7f9 bced 	b.w	800b800 <rcutils_steady_time_now>
 8011e26:	bf00      	nop

08011e28 <rcl_get_ros_time>:
 8011e28:	7a03      	ldrb	r3, [r0, #8]
 8011e2a:	b510      	push	{r4, lr}
 8011e2c:	460c      	mov	r4, r1
 8011e2e:	b133      	cbz	r3, 8011e3e <rcl_get_ros_time+0x16>
 8011e30:	2105      	movs	r1, #5
 8011e32:	f001 ff5d 	bl	8013cf0 <__atomic_load_8>
 8011e36:	e9c4 0100 	strd	r0, r1, [r4]
 8011e3a:	2000      	movs	r0, #0
 8011e3c:	bd10      	pop	{r4, pc}
 8011e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e42:	4608      	mov	r0, r1
 8011e44:	f7f9 bcb4 	b.w	800b7b0 <rcutils_system_time_now>

08011e48 <rcl_clock_init>:
 8011e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e4a:	4605      	mov	r5, r0
 8011e4c:	4610      	mov	r0, r2
 8011e4e:	4614      	mov	r4, r2
 8011e50:	460e      	mov	r6, r1
 8011e52:	f7f9 fc6b 	bl	800b72c <rcutils_allocator_is_valid>
 8011e56:	b128      	cbz	r0, 8011e64 <rcl_clock_init+0x1c>
 8011e58:	2d03      	cmp	r5, #3
 8011e5a:	d803      	bhi.n	8011e64 <rcl_clock_init+0x1c>
 8011e5c:	e8df f005 	tbb	[pc, r5]
 8011e60:	06532e1d 	.word	0x06532e1d
 8011e64:	f04f 0c0b 	mov.w	ip, #11
 8011e68:	4660      	mov	r0, ip
 8011e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e6c:	2e00      	cmp	r6, #0
 8011e6e:	d0f9      	beq.n	8011e64 <rcl_clock_init+0x1c>
 8011e70:	2c00      	cmp	r4, #0
 8011e72:	d0f7      	beq.n	8011e64 <rcl_clock_init+0x1c>
 8011e74:	2300      	movs	r3, #0
 8011e76:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011e7a:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8011f30 <rcl_clock_init+0xe8>
 8011e7e:	6133      	str	r3, [r6, #16]
 8011e80:	f106 0514 	add.w	r5, r6, #20
 8011e84:	469c      	mov	ip, r3
 8011e86:	2703      	movs	r7, #3
 8011e88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011e8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011e8c:	6823      	ldr	r3, [r4, #0]
 8011e8e:	602b      	str	r3, [r5, #0]
 8011e90:	7037      	strb	r7, [r6, #0]
 8011e92:	f8c6 e00c 	str.w	lr, [r6, #12]
 8011e96:	4660      	mov	r0, ip
 8011e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e9a:	2e00      	cmp	r6, #0
 8011e9c:	d0e2      	beq.n	8011e64 <rcl_clock_init+0x1c>
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	7033      	strb	r3, [r6, #0]
 8011ea2:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011ea6:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8011eaa:	469c      	mov	ip, r3
 8011eac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011eae:	f106 0514 	add.w	r5, r6, #20
 8011eb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011eb4:	6823      	ldr	r3, [r4, #0]
 8011eb6:	602b      	str	r3, [r5, #0]
 8011eb8:	4660      	mov	r0, ip
 8011eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ebc:	2e00      	cmp	r6, #0
 8011ebe:	d0d1      	beq.n	8011e64 <rcl_clock_init+0x1c>
 8011ec0:	2c00      	cmp	r4, #0
 8011ec2:	d0cf      	beq.n	8011e64 <rcl_clock_init+0x1c>
 8011ec4:	2700      	movs	r7, #0
 8011ec6:	7037      	strb	r7, [r6, #0]
 8011ec8:	46a4      	mov	ip, r4
 8011eca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011ece:	f106 0514 	add.w	r5, r6, #20
 8011ed2:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8011ed6:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8011eda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011edc:	f8dc 3000 	ldr.w	r3, [ip]
 8011ee0:	602b      	str	r3, [r5, #0]
 8011ee2:	6921      	ldr	r1, [r4, #16]
 8011ee4:	6823      	ldr	r3, [r4, #0]
 8011ee6:	2010      	movs	r0, #16
 8011ee8:	4798      	blx	r3
 8011eea:	6130      	str	r0, [r6, #16]
 8011eec:	b1d0      	cbz	r0, 8011f24 <rcl_clock_init+0xdc>
 8011eee:	2200      	movs	r2, #0
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	e9c0 2300 	strd	r2, r3, [r0]
 8011ef6:	2301      	movs	r3, #1
 8011ef8:	7207      	strb	r7, [r0, #8]
 8011efa:	4a0c      	ldr	r2, [pc, #48]	@ (8011f2c <rcl_clock_init+0xe4>)
 8011efc:	7033      	strb	r3, [r6, #0]
 8011efe:	46bc      	mov	ip, r7
 8011f00:	60f2      	str	r2, [r6, #12]
 8011f02:	4660      	mov	r0, ip
 8011f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f06:	2e00      	cmp	r6, #0
 8011f08:	d0ac      	beq.n	8011e64 <rcl_clock_init+0x1c>
 8011f0a:	2c00      	cmp	r4, #0
 8011f0c:	d0aa      	beq.n	8011e64 <rcl_clock_init+0x1c>
 8011f0e:	2300      	movs	r3, #0
 8011f10:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011f14:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8011f34 <rcl_clock_init+0xec>
 8011f18:	6133      	str	r3, [r6, #16]
 8011f1a:	f106 0514 	add.w	r5, r6, #20
 8011f1e:	469c      	mov	ip, r3
 8011f20:	2702      	movs	r7, #2
 8011f22:	e7b1      	b.n	8011e88 <rcl_clock_init+0x40>
 8011f24:	f04f 0c0a 	mov.w	ip, #10
 8011f28:	e79e      	b.n	8011e68 <rcl_clock_init+0x20>
 8011f2a:	bf00      	nop
 8011f2c:	08011e29 	.word	0x08011e29
 8011f30:	08011e21 	.word	0x08011e21
 8011f34:	08011e19 	.word	0x08011e19

08011f38 <rcl_clock_get_now>:
 8011f38:	b140      	cbz	r0, 8011f4c <rcl_clock_get_now+0x14>
 8011f3a:	b139      	cbz	r1, 8011f4c <rcl_clock_get_now+0x14>
 8011f3c:	7803      	ldrb	r3, [r0, #0]
 8011f3e:	b11b      	cbz	r3, 8011f48 <rcl_clock_get_now+0x10>
 8011f40:	68c3      	ldr	r3, [r0, #12]
 8011f42:	b10b      	cbz	r3, 8011f48 <rcl_clock_get_now+0x10>
 8011f44:	6900      	ldr	r0, [r0, #16]
 8011f46:	4718      	bx	r3
 8011f48:	2001      	movs	r0, #1
 8011f4a:	4770      	bx	lr
 8011f4c:	200b      	movs	r0, #11
 8011f4e:	4770      	bx	lr

08011f50 <rcl_clock_add_jump_callback>:
 8011f50:	b082      	sub	sp, #8
 8011f52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f56:	a906      	add	r1, sp, #24
 8011f58:	e881 000c 	stmia.w	r1, {r2, r3}
 8011f5c:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8011f60:	b320      	cbz	r0, 8011fac <rcl_clock_add_jump_callback+0x5c>
 8011f62:	4604      	mov	r4, r0
 8011f64:	3014      	adds	r0, #20
 8011f66:	f7f9 fbe1 	bl	800b72c <rcutils_allocator_is_valid>
 8011f6a:	b1f8      	cbz	r0, 8011fac <rcl_clock_add_jump_callback+0x5c>
 8011f6c:	b1f6      	cbz	r6, 8011fac <rcl_clock_add_jump_callback+0x5c>
 8011f6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	db1b      	blt.n	8011fac <rcl_clock_add_jump_callback+0x5c>
 8011f74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8011f78:	2a01      	cmp	r2, #1
 8011f7a:	f173 0300 	sbcs.w	r3, r3, #0
 8011f7e:	da15      	bge.n	8011fac <rcl_clock_add_jump_callback+0x5c>
 8011f80:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8011f84:	2f00      	cmp	r7, #0
 8011f86:	d042      	beq.n	801200e <rcl_clock_add_jump_callback+0xbe>
 8011f88:	2300      	movs	r3, #0
 8011f8a:	4602      	mov	r2, r0
 8011f8c:	e003      	b.n	8011f96 <rcl_clock_add_jump_callback+0x46>
 8011f8e:	42bb      	cmp	r3, r7
 8011f90:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8011f94:	d011      	beq.n	8011fba <rcl_clock_add_jump_callback+0x6a>
 8011f96:	6811      	ldr	r1, [r2, #0]
 8011f98:	42b1      	cmp	r1, r6
 8011f9a:	f103 0301 	add.w	r3, r3, #1
 8011f9e:	d1f6      	bne.n	8011f8e <rcl_clock_add_jump_callback+0x3e>
 8011fa0:	6a11      	ldr	r1, [r2, #32]
 8011fa2:	42a9      	cmp	r1, r5
 8011fa4:	d1f3      	bne.n	8011f8e <rcl_clock_add_jump_callback+0x3e>
 8011fa6:	f04f 0e01 	mov.w	lr, #1
 8011faa:	e001      	b.n	8011fb0 <rcl_clock_add_jump_callback+0x60>
 8011fac:	f04f 0e0b 	mov.w	lr, #11
 8011fb0:	4670      	mov	r0, lr
 8011fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011fb6:	b002      	add	sp, #8
 8011fb8:	4770      	bx	lr
 8011fba:	3301      	adds	r3, #1
 8011fbc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011fc0:	00d9      	lsls	r1, r3, #3
 8011fc2:	69e3      	ldr	r3, [r4, #28]
 8011fc4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8011fc6:	4798      	blx	r3
 8011fc8:	b1f0      	cbz	r0, 8012008 <rcl_clock_add_jump_callback+0xb8>
 8011fca:	68a3      	ldr	r3, [r4, #8]
 8011fcc:	6060      	str	r0, [r4, #4]
 8011fce:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8011fd2:	f10d 0c18 	add.w	ip, sp, #24
 8011fd6:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8011fda:	f103 0801 	add.w	r8, r3, #1
 8011fde:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8011fe2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011fe6:	f106 0708 	add.w	r7, r6, #8
 8011fea:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011fec:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8011ff0:	f04f 0e00 	mov.w	lr, #0
 8011ff4:	e887 0003 	stmia.w	r7, {r0, r1}
 8011ff8:	6235      	str	r5, [r6, #32]
 8011ffa:	4670      	mov	r0, lr
 8011ffc:	f8c4 8008 	str.w	r8, [r4, #8]
 8012000:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012004:	b002      	add	sp, #8
 8012006:	4770      	bx	lr
 8012008:	f04f 0e0a 	mov.w	lr, #10
 801200c:	e7d0      	b.n	8011fb0 <rcl_clock_add_jump_callback+0x60>
 801200e:	2128      	movs	r1, #40	@ 0x28
 8012010:	e7d7      	b.n	8011fc2 <rcl_clock_add_jump_callback+0x72>
 8012012:	bf00      	nop

08012014 <rcl_clock_remove_jump_callback>:
 8012014:	2800      	cmp	r0, #0
 8012016:	d057      	beq.n	80120c8 <rcl_clock_remove_jump_callback+0xb4>
 8012018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801201c:	4605      	mov	r5, r0
 801201e:	3014      	adds	r0, #20
 8012020:	4688      	mov	r8, r1
 8012022:	4692      	mov	sl, r2
 8012024:	f7f9 fb82 	bl	800b72c <rcutils_allocator_is_valid>
 8012028:	2800      	cmp	r0, #0
 801202a:	d03b      	beq.n	80120a4 <rcl_clock_remove_jump_callback+0x90>
 801202c:	f1b8 0f00 	cmp.w	r8, #0
 8012030:	d038      	beq.n	80120a4 <rcl_clock_remove_jump_callback+0x90>
 8012032:	68ae      	ldr	r6, [r5, #8]
 8012034:	b166      	cbz	r6, 8012050 <rcl_clock_remove_jump_callback+0x3c>
 8012036:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801203a:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 801203e:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 8012042:	464c      	mov	r4, r9
 8012044:	6823      	ldr	r3, [r4, #0]
 8012046:	4543      	cmp	r3, r8
 8012048:	d005      	beq.n	8012056 <rcl_clock_remove_jump_callback+0x42>
 801204a:	3428      	adds	r4, #40	@ 0x28
 801204c:	42a7      	cmp	r7, r4
 801204e:	d1f9      	bne.n	8012044 <rcl_clock_remove_jump_callback+0x30>
 8012050:	2001      	movs	r0, #1
 8012052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012056:	6a23      	ldr	r3, [r4, #32]
 8012058:	3428      	adds	r4, #40	@ 0x28
 801205a:	42bc      	cmp	r4, r7
 801205c:	d02d      	beq.n	80120ba <rcl_clock_remove_jump_callback+0xa6>
 801205e:	4553      	cmp	r3, sl
 8012060:	d1f0      	bne.n	8012044 <rcl_clock_remove_jump_callback+0x30>
 8012062:	46a6      	mov	lr, r4
 8012064:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012068:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 801206c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012070:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012074:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012078:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801207c:	3428      	adds	r4, #40	@ 0x28
 801207e:	42a7      	cmp	r7, r4
 8012080:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012084:	d1ed      	bne.n	8012062 <rcl_clock_remove_jump_callback+0x4e>
 8012086:	3e01      	subs	r6, #1
 8012088:	60ae      	str	r6, [r5, #8]
 801208a:	b176      	cbz	r6, 80120aa <rcl_clock_remove_jump_callback+0x96>
 801208c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8012090:	69eb      	ldr	r3, [r5, #28]
 8012092:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8012094:	00f1      	lsls	r1, r6, #3
 8012096:	4648      	mov	r0, r9
 8012098:	4798      	blx	r3
 801209a:	b1b8      	cbz	r0, 80120cc <rcl_clock_remove_jump_callback+0xb8>
 801209c:	6068      	str	r0, [r5, #4]
 801209e:	2000      	movs	r0, #0
 80120a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120a4:	200b      	movs	r0, #11
 80120a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120aa:	4648      	mov	r0, r9
 80120ac:	69ab      	ldr	r3, [r5, #24]
 80120ae:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 80120b0:	4798      	blx	r3
 80120b2:	606e      	str	r6, [r5, #4]
 80120b4:	4630      	mov	r0, r6
 80120b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120ba:	4553      	cmp	r3, sl
 80120bc:	d1c8      	bne.n	8012050 <rcl_clock_remove_jump_callback+0x3c>
 80120be:	3e01      	subs	r6, #1
 80120c0:	60ae      	str	r6, [r5, #8]
 80120c2:	2e00      	cmp	r6, #0
 80120c4:	d1e2      	bne.n	801208c <rcl_clock_remove_jump_callback+0x78>
 80120c6:	e7f0      	b.n	80120aa <rcl_clock_remove_jump_callback+0x96>
 80120c8:	200b      	movs	r0, #11
 80120ca:	4770      	bx	lr
 80120cc:	200a      	movs	r0, #10
 80120ce:	e7ea      	b.n	80120a6 <rcl_clock_remove_jump_callback+0x92>

080120d0 <_rcl_timer_time_jump>:
 80120d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120d4:	4605      	mov	r5, r0
 80120d6:	b084      	sub	sp, #16
 80120d8:	4614      	mov	r4, r2
 80120da:	b131      	cbz	r1, 80120ea <_rcl_timer_time_jump+0x1a>
 80120dc:	7803      	ldrb	r3, [r0, #0]
 80120de:	3b02      	subs	r3, #2
 80120e0:	2b01      	cmp	r3, #1
 80120e2:	d93f      	bls.n	8012164 <_rcl_timer_time_jump+0x94>
 80120e4:	b004      	add	sp, #16
 80120e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120ea:	6813      	ldr	r3, [r2, #0]
 80120ec:	a902      	add	r1, sp, #8
 80120ee:	6818      	ldr	r0, [r3, #0]
 80120f0:	f7ff ff22 	bl	8011f38 <rcl_clock_get_now>
 80120f4:	2800      	cmp	r0, #0
 80120f6:	d1f5      	bne.n	80120e4 <_rcl_timer_time_jump+0x14>
 80120f8:	6820      	ldr	r0, [r4, #0]
 80120fa:	2105      	movs	r1, #5
 80120fc:	3020      	adds	r0, #32
 80120fe:	f001 fdf7 	bl	8013cf0 <__atomic_load_8>
 8012102:	6823      	ldr	r3, [r4, #0]
 8012104:	4681      	mov	r9, r0
 8012106:	4688      	mov	r8, r1
 8012108:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 801210c:	2105      	movs	r1, #5
 801210e:	f001 fdef 	bl	8013cf0 <__atomic_load_8>
 8012112:	4607      	mov	r7, r0
 8012114:	6820      	ldr	r0, [r4, #0]
 8012116:	460e      	mov	r6, r1
 8012118:	3018      	adds	r0, #24
 801211a:	2105      	movs	r1, #5
 801211c:	f001 fde8 	bl	8013cf0 <__atomic_load_8>
 8012120:	782b      	ldrb	r3, [r5, #0]
 8012122:	9a02      	ldr	r2, [sp, #8]
 8012124:	3b02      	subs	r3, #2
 8012126:	2b01      	cmp	r3, #1
 8012128:	460d      	mov	r5, r1
 801212a:	9b03      	ldr	r3, [sp, #12]
 801212c:	4682      	mov	sl, r0
 801212e:	d937      	bls.n	80121a0 <_rcl_timer_time_jump+0xd0>
 8012130:	42ba      	cmp	r2, r7
 8012132:	eb73 0106 	sbcs.w	r1, r3, r6
 8012136:	da5f      	bge.n	80121f8 <_rcl_timer_time_jump+0x128>
 8012138:	454a      	cmp	r2, r9
 801213a:	eb73 0108 	sbcs.w	r1, r3, r8
 801213e:	dad1      	bge.n	80120e4 <_rcl_timer_time_jump+0x14>
 8012140:	6820      	ldr	r0, [r4, #0]
 8012142:	eb1a 0202 	adds.w	r2, sl, r2
 8012146:	eb43 0305 	adc.w	r3, r3, r5
 801214a:	2505      	movs	r5, #5
 801214c:	3028      	adds	r0, #40	@ 0x28
 801214e:	9500      	str	r5, [sp, #0]
 8012150:	f001 fe04 	bl	8013d5c <__atomic_store_8>
 8012154:	6820      	ldr	r0, [r4, #0]
 8012156:	9500      	str	r5, [sp, #0]
 8012158:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801215c:	3020      	adds	r0, #32
 801215e:	f001 fdfd 	bl	8013d5c <__atomic_store_8>
 8012162:	e7bf      	b.n	80120e4 <_rcl_timer_time_jump+0x14>
 8012164:	6813      	ldr	r3, [r2, #0]
 8012166:	a902      	add	r1, sp, #8
 8012168:	6818      	ldr	r0, [r3, #0]
 801216a:	f7ff fee5 	bl	8011f38 <rcl_clock_get_now>
 801216e:	2800      	cmp	r0, #0
 8012170:	d1b8      	bne.n	80120e4 <_rcl_timer_time_jump+0x14>
 8012172:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012176:	4313      	orrs	r3, r2
 8012178:	d0b4      	beq.n	80120e4 <_rcl_timer_time_jump+0x14>
 801217a:	6820      	ldr	r0, [r4, #0]
 801217c:	2105      	movs	r1, #5
 801217e:	3028      	adds	r0, #40	@ 0x28
 8012180:	f001 fdb6 	bl	8013cf0 <__atomic_load_8>
 8012184:	9d02      	ldr	r5, [sp, #8]
 8012186:	9b03      	ldr	r3, [sp, #12]
 8012188:	4602      	mov	r2, r0
 801218a:	6820      	ldr	r0, [r4, #0]
 801218c:	1b52      	subs	r2, r2, r5
 801218e:	f04f 0405 	mov.w	r4, #5
 8012192:	9400      	str	r4, [sp, #0]
 8012194:	eb61 0303 	sbc.w	r3, r1, r3
 8012198:	3030      	adds	r0, #48	@ 0x30
 801219a:	f001 fddf 	bl	8013d5c <__atomic_store_8>
 801219e:	e7a1      	b.n	80120e4 <_rcl_timer_time_jump+0x14>
 80121a0:	4313      	orrs	r3, r2
 80121a2:	d09f      	beq.n	80120e4 <_rcl_timer_time_jump+0x14>
 80121a4:	6820      	ldr	r0, [r4, #0]
 80121a6:	f04f 0805 	mov.w	r8, #5
 80121aa:	2300      	movs	r3, #0
 80121ac:	f8cd 8000 	str.w	r8, [sp]
 80121b0:	3030      	adds	r0, #48	@ 0x30
 80121b2:	2200      	movs	r2, #0
 80121b4:	f001 fe08 	bl	8013dc8 <__atomic_exchange_8>
 80121b8:	ea51 0300 	orrs.w	r3, r1, r0
 80121bc:	4606      	mov	r6, r0
 80121be:	460f      	mov	r7, r1
 80121c0:	d090      	beq.n	80120e4 <_rcl_timer_time_jump+0x14>
 80121c2:	9a02      	ldr	r2, [sp, #8]
 80121c4:	9b03      	ldr	r3, [sp, #12]
 80121c6:	f8cd 8000 	str.w	r8, [sp]
 80121ca:	1a12      	subs	r2, r2, r0
 80121cc:	6820      	ldr	r0, [r4, #0]
 80121ce:	eb63 0301 	sbc.w	r3, r3, r1
 80121d2:	eb12 020a 	adds.w	r2, r2, sl
 80121d6:	eb43 0305 	adc.w	r3, r3, r5
 80121da:	3028      	adds	r0, #40	@ 0x28
 80121dc:	f001 fdbe 	bl	8013d5c <__atomic_store_8>
 80121e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80121e4:	f8cd 8000 	str.w	r8, [sp]
 80121e8:	6820      	ldr	r0, [r4, #0]
 80121ea:	1b92      	subs	r2, r2, r6
 80121ec:	eb63 0307 	sbc.w	r3, r3, r7
 80121f0:	3020      	adds	r0, #32
 80121f2:	f001 fdb3 	bl	8013d5c <__atomic_store_8>
 80121f6:	e775      	b.n	80120e4 <_rcl_timer_time_jump+0x14>
 80121f8:	6820      	ldr	r0, [r4, #0]
 80121fa:	3008      	adds	r0, #8
 80121fc:	f004 f9ae 	bl	801655c <rcl_trigger_guard_condition>
 8012200:	e770      	b.n	80120e4 <_rcl_timer_time_jump+0x14>
 8012202:	bf00      	nop

08012204 <rcl_get_zero_initialized_timer>:
 8012204:	4b01      	ldr	r3, [pc, #4]	@ (801220c <rcl_get_zero_initialized_timer+0x8>)
 8012206:	6818      	ldr	r0, [r3, #0]
 8012208:	4770      	bx	lr
 801220a:	bf00      	nop
 801220c:	08018600 	.word	0x08018600

08012210 <rcl_timer_init>:
 8012210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012214:	b0aa      	sub	sp, #168	@ 0xa8
 8012216:	4604      	mov	r4, r0
 8012218:	a835      	add	r0, sp, #212	@ 0xd4
 801221a:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 801221e:	460d      	mov	r5, r1
 8012220:	4692      	mov	sl, r2
 8012222:	f7f9 fa83 	bl	800b72c <rcutils_allocator_is_valid>
 8012226:	2800      	cmp	r0, #0
 8012228:	d064      	beq.n	80122f4 <rcl_timer_init+0xe4>
 801222a:	2c00      	cmp	r4, #0
 801222c:	d062      	beq.n	80122f4 <rcl_timer_init+0xe4>
 801222e:	2d00      	cmp	r5, #0
 8012230:	d060      	beq.n	80122f4 <rcl_timer_init+0xe4>
 8012232:	2f00      	cmp	r7, #0
 8012234:	db5e      	blt.n	80122f4 <rcl_timer_init+0xe4>
 8012236:	6823      	ldr	r3, [r4, #0]
 8012238:	b123      	cbz	r3, 8012244 <rcl_timer_init+0x34>
 801223a:	2664      	movs	r6, #100	@ 0x64
 801223c:	4630      	mov	r0, r6
 801223e:	b02a      	add	sp, #168	@ 0xa8
 8012240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012244:	a908      	add	r1, sp, #32
 8012246:	4628      	mov	r0, r5
 8012248:	f7ff fe76 	bl	8011f38 <rcl_clock_get_now>
 801224c:	4606      	mov	r6, r0
 801224e:	2800      	cmp	r0, #0
 8012250:	d1f4      	bne.n	801223c <rcl_timer_init+0x2c>
 8012252:	ae06      	add	r6, sp, #24
 8012254:	4630      	mov	r0, r6
 8012256:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 801225a:	f004 f887 	bl	801636c <rcl_get_zero_initialized_guard_condition>
 801225e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8012262:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 8012266:	ae0b      	add	r6, sp, #44	@ 0x2c
 8012268:	e889 0003 	stmia.w	r9, {r0, r1}
 801226c:	4630      	mov	r0, r6
 801226e:	f004 f959 	bl	8016524 <rcl_guard_condition_get_default_options>
 8012272:	ab0d      	add	r3, sp, #52	@ 0x34
 8012274:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012278:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801227c:	4651      	mov	r1, sl
 801227e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012282:	4648      	mov	r0, r9
 8012284:	f004 f87c 	bl	8016380 <rcl_guard_condition_init>
 8012288:	4606      	mov	r6, r0
 801228a:	2800      	cmp	r0, #0
 801228c:	d1d6      	bne.n	801223c <rcl_timer_init+0x2c>
 801228e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012290:	781b      	ldrb	r3, [r3, #0]
 8012292:	2b01      	cmp	r3, #1
 8012294:	d033      	beq.n	80122fe <rcl_timer_init+0xee>
 8012296:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8012298:	911a      	str	r1, [sp, #104]	@ 0x68
 801229a:	4642      	mov	r2, r8
 801229c:	463b      	mov	r3, r7
 801229e:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 80122a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80122a6:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8012358 <rcl_timer_init+0x148>
 80122aa:	eb12 0008 	adds.w	r0, r2, r8
 80122ae:	eb47 0103 	adc.w	r1, r7, r3
 80122b2:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 80122b6:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 80122ba:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 80122be:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 80122c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80122c6:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 80122ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80122ce:	f8de 3000 	ldr.w	r3, [lr]
 80122d2:	f8cc 3000 	str.w	r3, [ip]
 80122d6:	f04f 0a00 	mov.w	sl, #0
 80122da:	4619      	mov	r1, r3
 80122dc:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 80122e0:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 80122e2:	2050      	movs	r0, #80	@ 0x50
 80122e4:	4798      	blx	r3
 80122e6:	6020      	str	r0, [r4, #0]
 80122e8:	b358      	cbz	r0, 8012342 <rcl_timer_init+0x132>
 80122ea:	2250      	movs	r2, #80	@ 0x50
 80122ec:	a916      	add	r1, sp, #88	@ 0x58
 80122ee:	f004 ff52 	bl	8017196 <memcpy>
 80122f2:	e7a3      	b.n	801223c <rcl_timer_init+0x2c>
 80122f4:	260b      	movs	r6, #11
 80122f6:	4630      	mov	r0, r6
 80122f8:	b02a      	add	sp, #168	@ 0xa8
 80122fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122fe:	2001      	movs	r0, #1
 8012300:	2100      	movs	r1, #0
 8012302:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8012306:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801230a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801230e:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8012312:	4a13      	ldr	r2, [pc, #76]	@ (8012360 <rcl_timer_init+0x150>)
 8012314:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8012318:	9405      	str	r4, [sp, #20]
 801231a:	9204      	str	r2, [sp, #16]
 801231c:	ab12      	add	r3, sp, #72	@ 0x48
 801231e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012320:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8012324:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8012328:	e89c 000c 	ldmia.w	ip, {r2, r3}
 801232c:	4628      	mov	r0, r5
 801232e:	f7ff fe0f 	bl	8011f50 <rcl_clock_add_jump_callback>
 8012332:	4682      	mov	sl, r0
 8012334:	2800      	cmp	r0, #0
 8012336:	d0ae      	beq.n	8012296 <rcl_timer_init+0x86>
 8012338:	4648      	mov	r0, r9
 801233a:	f004 f8cd 	bl	80164d8 <rcl_guard_condition_fini>
 801233e:	4656      	mov	r6, sl
 8012340:	e77c      	b.n	801223c <rcl_timer_init+0x2c>
 8012342:	4648      	mov	r0, r9
 8012344:	f004 f8c8 	bl	80164d8 <rcl_guard_condition_fini>
 8012348:	4905      	ldr	r1, [pc, #20]	@ (8012360 <rcl_timer_init+0x150>)
 801234a:	4622      	mov	r2, r4
 801234c:	4628      	mov	r0, r5
 801234e:	f7ff fe61 	bl	8012014 <rcl_clock_remove_jump_callback>
 8012352:	260a      	movs	r6, #10
 8012354:	e772      	b.n	801223c <rcl_timer_init+0x2c>
 8012356:	bf00      	nop
	...
 8012360:	080120d1 	.word	0x080120d1

08012364 <rcl_timer_call>:
 8012364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012368:	b087      	sub	sp, #28
 801236a:	2800      	cmp	r0, #0
 801236c:	d06d      	beq.n	801244a <rcl_timer_call+0xe6>
 801236e:	6803      	ldr	r3, [r0, #0]
 8012370:	4604      	mov	r4, r0
 8012372:	2b00      	cmp	r3, #0
 8012374:	d063      	beq.n	801243e <rcl_timer_call+0xda>
 8012376:	f3bf 8f5b 	dmb	ish
 801237a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801237e:	f3bf 8f5b 	dmb	ish
 8012382:	2b00      	cmp	r3, #0
 8012384:	d150      	bne.n	8012428 <rcl_timer_call+0xc4>
 8012386:	6803      	ldr	r3, [r0, #0]
 8012388:	a904      	add	r1, sp, #16
 801238a:	6818      	ldr	r0, [r3, #0]
 801238c:	f7ff fdd4 	bl	8011f38 <rcl_clock_get_now>
 8012390:	4605      	mov	r5, r0
 8012392:	2800      	cmp	r0, #0
 8012394:	d14a      	bne.n	801242c <rcl_timer_call+0xc8>
 8012396:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801239a:	2b00      	cmp	r3, #0
 801239c:	db4a      	blt.n	8012434 <rcl_timer_call+0xd0>
 801239e:	6820      	ldr	r0, [r4, #0]
 80123a0:	f04f 0a05 	mov.w	sl, #5
 80123a4:	f8cd a000 	str.w	sl, [sp]
 80123a8:	3020      	adds	r0, #32
 80123aa:	f001 fd0d 	bl	8013dc8 <__atomic_exchange_8>
 80123ae:	6823      	ldr	r3, [r4, #0]
 80123b0:	f3bf 8f5b 	dmb	ish
 80123b4:	4680      	mov	r8, r0
 80123b6:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80123ba:	f3bf 8f5b 	dmb	ish
 80123be:	6820      	ldr	r0, [r4, #0]
 80123c0:	4689      	mov	r9, r1
 80123c2:	3028      	adds	r0, #40	@ 0x28
 80123c4:	4651      	mov	r1, sl
 80123c6:	f001 fc93 	bl	8013cf0 <__atomic_load_8>
 80123ca:	4606      	mov	r6, r0
 80123cc:	6820      	ldr	r0, [r4, #0]
 80123ce:	460f      	mov	r7, r1
 80123d0:	3018      	adds	r0, #24
 80123d2:	4651      	mov	r1, sl
 80123d4:	f001 fc8c 	bl	8013cf0 <__atomic_load_8>
 80123d8:	1836      	adds	r6, r6, r0
 80123da:	4602      	mov	r2, r0
 80123dc:	4682      	mov	sl, r0
 80123de:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 80123e2:	eb47 0701 	adc.w	r7, r7, r1
 80123e6:	4286      	cmp	r6, r0
 80123e8:	460b      	mov	r3, r1
 80123ea:	eb77 010c 	sbcs.w	r1, r7, ip
 80123ee:	da04      	bge.n	80123fa <rcl_timer_call+0x96>
 80123f0:	ea53 0102 	orrs.w	r1, r3, r2
 80123f4:	d12e      	bne.n	8012454 <rcl_timer_call+0xf0>
 80123f6:	4606      	mov	r6, r0
 80123f8:	4667      	mov	r7, ip
 80123fa:	6820      	ldr	r0, [r4, #0]
 80123fc:	2105      	movs	r1, #5
 80123fe:	4632      	mov	r2, r6
 8012400:	463b      	mov	r3, r7
 8012402:	3028      	adds	r0, #40	@ 0x28
 8012404:	9100      	str	r1, [sp, #0]
 8012406:	f001 fca9 	bl	8013d5c <__atomic_store_8>
 801240a:	f1bb 0f00 	cmp.w	fp, #0
 801240e:	d00d      	beq.n	801242c <rcl_timer_call+0xc8>
 8012410:	9a04      	ldr	r2, [sp, #16]
 8012412:	9b05      	ldr	r3, [sp, #20]
 8012414:	ebb2 0208 	subs.w	r2, r2, r8
 8012418:	4620      	mov	r0, r4
 801241a:	eb63 0309 	sbc.w	r3, r3, r9
 801241e:	47d8      	blx	fp
 8012420:	4628      	mov	r0, r5
 8012422:	b007      	add	sp, #28
 8012424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012428:	f240 3521 	movw	r5, #801	@ 0x321
 801242c:	4628      	mov	r0, r5
 801242e:	b007      	add	sp, #28
 8012430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012434:	2501      	movs	r5, #1
 8012436:	4628      	mov	r0, r5
 8012438:	b007      	add	sp, #28
 801243a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801243e:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8012442:	4628      	mov	r0, r5
 8012444:	b007      	add	sp, #28
 8012446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801244a:	250b      	movs	r5, #11
 801244c:	4628      	mov	r0, r5
 801244e:	b007      	add	sp, #28
 8012450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012454:	1b80      	subs	r0, r0, r6
 8012456:	eb6c 0107 	sbc.w	r1, ip, r7
 801245a:	3801      	subs	r0, #1
 801245c:	f161 0100 	sbc.w	r1, r1, #0
 8012460:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8012464:	f7ee fb32 	bl	8000acc <__aeabi_ldivmod>
 8012468:	9b02      	ldr	r3, [sp, #8]
 801246a:	3001      	adds	r0, #1
 801246c:	f141 0100 	adc.w	r1, r1, #0
 8012470:	fb00 f303 	mul.w	r3, r0, r3
 8012474:	fb01 330a 	mla	r3, r1, sl, r3
 8012478:	fba0 0a0a 	umull	r0, sl, r0, sl
 801247c:	1986      	adds	r6, r0, r6
 801247e:	4453      	add	r3, sl
 8012480:	eb43 0707 	adc.w	r7, r3, r7
 8012484:	e7b9      	b.n	80123fa <rcl_timer_call+0x96>
 8012486:	bf00      	nop

08012488 <rcl_timer_is_ready>:
 8012488:	b570      	push	{r4, r5, r6, lr}
 801248a:	b082      	sub	sp, #8
 801248c:	b378      	cbz	r0, 80124ee <rcl_timer_is_ready+0x66>
 801248e:	6803      	ldr	r3, [r0, #0]
 8012490:	4604      	mov	r4, r0
 8012492:	b383      	cbz	r3, 80124f6 <rcl_timer_is_ready+0x6e>
 8012494:	460d      	mov	r5, r1
 8012496:	b351      	cbz	r1, 80124ee <rcl_timer_is_ready+0x66>
 8012498:	f3bf 8f5b 	dmb	ish
 801249c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80124a0:	f3bf 8f5b 	dmb	ish
 80124a4:	b953      	cbnz	r3, 80124bc <rcl_timer_is_ready+0x34>
 80124a6:	6803      	ldr	r3, [r0, #0]
 80124a8:	4669      	mov	r1, sp
 80124aa:	6818      	ldr	r0, [r3, #0]
 80124ac:	f7ff fd44 	bl	8011f38 <rcl_clock_get_now>
 80124b0:	4606      	mov	r6, r0
 80124b2:	b140      	cbz	r0, 80124c6 <rcl_timer_is_ready+0x3e>
 80124b4:	f240 3321 	movw	r3, #801	@ 0x321
 80124b8:	4298      	cmp	r0, r3
 80124ba:	d101      	bne.n	80124c0 <rcl_timer_is_ready+0x38>
 80124bc:	2600      	movs	r6, #0
 80124be:	702e      	strb	r6, [r5, #0]
 80124c0:	4630      	mov	r0, r6
 80124c2:	b002      	add	sp, #8
 80124c4:	bd70      	pop	{r4, r5, r6, pc}
 80124c6:	6820      	ldr	r0, [r4, #0]
 80124c8:	2105      	movs	r1, #5
 80124ca:	3028      	adds	r0, #40	@ 0x28
 80124cc:	f001 fc10 	bl	8013cf0 <__atomic_load_8>
 80124d0:	9b00      	ldr	r3, [sp, #0]
 80124d2:	1ac0      	subs	r0, r0, r3
 80124d4:	9b01      	ldr	r3, [sp, #4]
 80124d6:	eb61 0103 	sbc.w	r1, r1, r3
 80124da:	2801      	cmp	r0, #1
 80124dc:	f171 0300 	sbcs.w	r3, r1, #0
 80124e0:	bfb4      	ite	lt
 80124e2:	2301      	movlt	r3, #1
 80124e4:	2300      	movge	r3, #0
 80124e6:	4630      	mov	r0, r6
 80124e8:	702b      	strb	r3, [r5, #0]
 80124ea:	b002      	add	sp, #8
 80124ec:	bd70      	pop	{r4, r5, r6, pc}
 80124ee:	260b      	movs	r6, #11
 80124f0:	4630      	mov	r0, r6
 80124f2:	b002      	add	sp, #8
 80124f4:	bd70      	pop	{r4, r5, r6, pc}
 80124f6:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80124fa:	e7e1      	b.n	80124c0 <rcl_timer_is_ready+0x38>

080124fc <rcl_timer_get_time_until_next_call>:
 80124fc:	b570      	push	{r4, r5, r6, lr}
 80124fe:	b082      	sub	sp, #8
 8012500:	b330      	cbz	r0, 8012550 <rcl_timer_get_time_until_next_call+0x54>
 8012502:	6803      	ldr	r3, [r0, #0]
 8012504:	4604      	mov	r4, r0
 8012506:	b33b      	cbz	r3, 8012558 <rcl_timer_get_time_until_next_call+0x5c>
 8012508:	460d      	mov	r5, r1
 801250a:	b309      	cbz	r1, 8012550 <rcl_timer_get_time_until_next_call+0x54>
 801250c:	f3bf 8f5b 	dmb	ish
 8012510:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012514:	f3bf 8f5b 	dmb	ish
 8012518:	b9ab      	cbnz	r3, 8012546 <rcl_timer_get_time_until_next_call+0x4a>
 801251a:	6803      	ldr	r3, [r0, #0]
 801251c:	4669      	mov	r1, sp
 801251e:	6818      	ldr	r0, [r3, #0]
 8012520:	f7ff fd0a 	bl	8011f38 <rcl_clock_get_now>
 8012524:	4606      	mov	r6, r0
 8012526:	b958      	cbnz	r0, 8012540 <rcl_timer_get_time_until_next_call+0x44>
 8012528:	6820      	ldr	r0, [r4, #0]
 801252a:	2105      	movs	r1, #5
 801252c:	3028      	adds	r0, #40	@ 0x28
 801252e:	f001 fbdf 	bl	8013cf0 <__atomic_load_8>
 8012532:	9b00      	ldr	r3, [sp, #0]
 8012534:	1ac0      	subs	r0, r0, r3
 8012536:	9b01      	ldr	r3, [sp, #4]
 8012538:	6028      	str	r0, [r5, #0]
 801253a:	eb61 0103 	sbc.w	r1, r1, r3
 801253e:	6069      	str	r1, [r5, #4]
 8012540:	4630      	mov	r0, r6
 8012542:	b002      	add	sp, #8
 8012544:	bd70      	pop	{r4, r5, r6, pc}
 8012546:	f240 3621 	movw	r6, #801	@ 0x321
 801254a:	4630      	mov	r0, r6
 801254c:	b002      	add	sp, #8
 801254e:	bd70      	pop	{r4, r5, r6, pc}
 8012550:	260b      	movs	r6, #11
 8012552:	4630      	mov	r0, r6
 8012554:	b002      	add	sp, #8
 8012556:	bd70      	pop	{r4, r5, r6, pc}
 8012558:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801255c:	e7f0      	b.n	8012540 <rcl_timer_get_time_until_next_call+0x44>
 801255e:	bf00      	nop

08012560 <rcl_timer_get_guard_condition>:
 8012560:	b130      	cbz	r0, 8012570 <rcl_timer_get_guard_condition+0x10>
 8012562:	6800      	ldr	r0, [r0, #0]
 8012564:	b120      	cbz	r0, 8012570 <rcl_timer_get_guard_condition+0x10>
 8012566:	68c3      	ldr	r3, [r0, #12]
 8012568:	b10b      	cbz	r3, 801256e <rcl_timer_get_guard_condition+0xe>
 801256a:	3008      	adds	r0, #8
 801256c:	4770      	bx	lr
 801256e:	4618      	mov	r0, r3
 8012570:	4770      	bx	lr
 8012572:	bf00      	nop

08012574 <rcl_validate_enclave_name_with_size>:
 8012574:	b378      	cbz	r0, 80125d6 <rcl_validate_enclave_name_with_size+0x62>
 8012576:	b570      	push	{r4, r5, r6, lr}
 8012578:	4615      	mov	r5, r2
 801257a:	b0c2      	sub	sp, #264	@ 0x108
 801257c:	b302      	cbz	r2, 80125c0 <rcl_validate_enclave_name_with_size+0x4c>
 801257e:	461e      	mov	r6, r3
 8012580:	466a      	mov	r2, sp
 8012582:	ab01      	add	r3, sp, #4
 8012584:	460c      	mov	r4, r1
 8012586:	f002 f835 	bl	80145f4 <rmw_validate_namespace_with_size>
 801258a:	4684      	mov	ip, r0
 801258c:	b9e8      	cbnz	r0, 80125ca <rcl_validate_enclave_name_with_size+0x56>
 801258e:	9b00      	ldr	r3, [sp, #0]
 8012590:	b923      	cbnz	r3, 801259c <rcl_validate_enclave_name_with_size+0x28>
 8012592:	2300      	movs	r3, #0
 8012594:	602b      	str	r3, [r5, #0]
 8012596:	4660      	mov	r0, ip
 8012598:	b042      	add	sp, #264	@ 0x108
 801259a:	bd70      	pop	{r4, r5, r6, pc}
 801259c:	2b07      	cmp	r3, #7
 801259e:	d007      	beq.n	80125b0 <rcl_validate_enclave_name_with_size+0x3c>
 80125a0:	1e5a      	subs	r2, r3, #1
 80125a2:	2a05      	cmp	r2, #5
 80125a4:	d833      	bhi.n	801260e <rcl_validate_enclave_name_with_size+0x9a>
 80125a6:	e8df f002 	tbb	[pc, r2]
 80125aa:	2c2f      	.short	0x2c2f
 80125ac:	1a232629 	.word	0x1a232629
 80125b0:	2cff      	cmp	r4, #255	@ 0xff
 80125b2:	d9ee      	bls.n	8012592 <rcl_validate_enclave_name_with_size+0x1e>
 80125b4:	602b      	str	r3, [r5, #0]
 80125b6:	2e00      	cmp	r6, #0
 80125b8:	d0ed      	beq.n	8012596 <rcl_validate_enclave_name_with_size+0x22>
 80125ba:	23fe      	movs	r3, #254	@ 0xfe
 80125bc:	6033      	str	r3, [r6, #0]
 80125be:	e7ea      	b.n	8012596 <rcl_validate_enclave_name_with_size+0x22>
 80125c0:	f04f 0c0b 	mov.w	ip, #11
 80125c4:	4660      	mov	r0, ip
 80125c6:	b042      	add	sp, #264	@ 0x108
 80125c8:	bd70      	pop	{r4, r5, r6, pc}
 80125ca:	f7fe fd87 	bl	80110dc <rcl_convert_rmw_ret_to_rcl_ret>
 80125ce:	4684      	mov	ip, r0
 80125d0:	4660      	mov	r0, ip
 80125d2:	b042      	add	sp, #264	@ 0x108
 80125d4:	bd70      	pop	{r4, r5, r6, pc}
 80125d6:	f04f 0c0b 	mov.w	ip, #11
 80125da:	4660      	mov	r0, ip
 80125dc:	4770      	bx	lr
 80125de:	2306      	movs	r3, #6
 80125e0:	602b      	str	r3, [r5, #0]
 80125e2:	2e00      	cmp	r6, #0
 80125e4:	d0d7      	beq.n	8012596 <rcl_validate_enclave_name_with_size+0x22>
 80125e6:	9b01      	ldr	r3, [sp, #4]
 80125e8:	6033      	str	r3, [r6, #0]
 80125ea:	4660      	mov	r0, ip
 80125ec:	b042      	add	sp, #264	@ 0x108
 80125ee:	bd70      	pop	{r4, r5, r6, pc}
 80125f0:	2305      	movs	r3, #5
 80125f2:	602b      	str	r3, [r5, #0]
 80125f4:	e7f5      	b.n	80125e2 <rcl_validate_enclave_name_with_size+0x6e>
 80125f6:	2304      	movs	r3, #4
 80125f8:	602b      	str	r3, [r5, #0]
 80125fa:	e7f2      	b.n	80125e2 <rcl_validate_enclave_name_with_size+0x6e>
 80125fc:	2303      	movs	r3, #3
 80125fe:	602b      	str	r3, [r5, #0]
 8012600:	e7ef      	b.n	80125e2 <rcl_validate_enclave_name_with_size+0x6e>
 8012602:	2302      	movs	r3, #2
 8012604:	602b      	str	r3, [r5, #0]
 8012606:	e7ec      	b.n	80125e2 <rcl_validate_enclave_name_with_size+0x6e>
 8012608:	2301      	movs	r3, #1
 801260a:	602b      	str	r3, [r5, #0]
 801260c:	e7e9      	b.n	80125e2 <rcl_validate_enclave_name_with_size+0x6e>
 801260e:	4a04      	ldr	r2, [pc, #16]	@ (8012620 <rcl_validate_enclave_name_with_size+0xac>)
 8012610:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012614:	a802      	add	r0, sp, #8
 8012616:	f001 fd25 	bl	8014064 <rcutils_snprintf>
 801261a:	f04f 0c01 	mov.w	ip, #1
 801261e:	e7ba      	b.n	8012596 <rcl_validate_enclave_name_with_size+0x22>
 8012620:	08018604 	.word	0x08018604

08012624 <rcl_validate_enclave_name>:
 8012624:	b168      	cbz	r0, 8012642 <rcl_validate_enclave_name+0x1e>
 8012626:	b570      	push	{r4, r5, r6, lr}
 8012628:	460d      	mov	r5, r1
 801262a:	4616      	mov	r6, r2
 801262c:	4604      	mov	r4, r0
 801262e:	f7ed fe01 	bl	8000234 <strlen>
 8012632:	4633      	mov	r3, r6
 8012634:	4601      	mov	r1, r0
 8012636:	462a      	mov	r2, r5
 8012638:	4620      	mov	r0, r4
 801263a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801263e:	f7ff bf99 	b.w	8012574 <rcl_validate_enclave_name_with_size>
 8012642:	200b      	movs	r0, #11
 8012644:	4770      	bx	lr
 8012646:	bf00      	nop

08012648 <rcl_get_zero_initialized_wait_set>:
 8012648:	b510      	push	{r4, lr}
 801264a:	4c08      	ldr	r4, [pc, #32]	@ (801266c <rcl_get_zero_initialized_wait_set+0x24>)
 801264c:	4686      	mov	lr, r0
 801264e:	4684      	mov	ip, r0
 8012650:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012652:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012658:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801265c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801265e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012662:	6823      	ldr	r3, [r4, #0]
 8012664:	f8cc 3000 	str.w	r3, [ip]
 8012668:	4670      	mov	r0, lr
 801266a:	bd10      	pop	{r4, pc}
 801266c:	08018664 	.word	0x08018664

08012670 <rcl_wait_set_is_valid>:
 8012670:	b118      	cbz	r0, 801267a <rcl_wait_set_is_valid+0xa>
 8012672:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8012674:	3800      	subs	r0, #0
 8012676:	bf18      	it	ne
 8012678:	2001      	movne	r0, #1
 801267a:	4770      	bx	lr

0801267c <rcl_wait_set_fini>:
 801267c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012680:	b082      	sub	sp, #8
 8012682:	2800      	cmp	r0, #0
 8012684:	f000 8095 	beq.w	80127b2 <rcl_wait_set_fini+0x136>
 8012688:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801268a:	4604      	mov	r4, r0
 801268c:	2e00      	cmp	r6, #0
 801268e:	f000 808c 	beq.w	80127aa <rcl_wait_set_fini+0x12e>
 8012692:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8012694:	f002 fd68 	bl	8015168 <rmw_destroy_wait_set>
 8012698:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801269a:	1e06      	subs	r6, r0, #0
 801269c:	bf18      	it	ne
 801269e:	f44f 7661 	movne.w	r6, #900	@ 0x384
 80126a2:	2d00      	cmp	r5, #0
 80126a4:	f000 8081 	beq.w	80127aa <rcl_wait_set_fini+0x12e>
 80126a8:	6820      	ldr	r0, [r4, #0]
 80126aa:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80126ae:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80126b0:	2700      	movs	r7, #0
 80126b2:	6067      	str	r7, [r4, #4]
 80126b4:	602f      	str	r7, [r5, #0]
 80126b6:	b120      	cbz	r0, 80126c2 <rcl_wait_set_fini+0x46>
 80126b8:	9101      	str	r1, [sp, #4]
 80126ba:	47c0      	blx	r8
 80126bc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80126be:	9901      	ldr	r1, [sp, #4]
 80126c0:	6027      	str	r7, [r4, #0]
 80126c2:	68a8      	ldr	r0, [r5, #8]
 80126c4:	b120      	cbz	r0, 80126d0 <rcl_wait_set_fini+0x54>
 80126c6:	47c0      	blx	r8
 80126c8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80126ca:	2300      	movs	r3, #0
 80126cc:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80126d0:	68a0      	ldr	r0, [r4, #8]
 80126d2:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80126d4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80126d6:	f04f 0800 	mov.w	r8, #0
 80126da:	f8c4 800c 	str.w	r8, [r4, #12]
 80126de:	f8c5 800c 	str.w	r8, [r5, #12]
 80126e2:	b128      	cbz	r0, 80126f0 <rcl_wait_set_fini+0x74>
 80126e4:	47b8      	blx	r7
 80126e6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80126e8:	f8c4 8008 	str.w	r8, [r4, #8]
 80126ec:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80126ee:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80126f0:	6968      	ldr	r0, [r5, #20]
 80126f2:	f04f 0800 	mov.w	r8, #0
 80126f6:	f8c5 8010 	str.w	r8, [r5, #16]
 80126fa:	b128      	cbz	r0, 8012708 <rcl_wait_set_fini+0x8c>
 80126fc:	47b8      	blx	r7
 80126fe:	f8c5 8014 	str.w	r8, [r5, #20]
 8012702:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012704:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8012706:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012708:	6920      	ldr	r0, [r4, #16]
 801270a:	f04f 0800 	mov.w	r8, #0
 801270e:	f8c4 8014 	str.w	r8, [r4, #20]
 8012712:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8012716:	b128      	cbz	r0, 8012724 <rcl_wait_set_fini+0xa8>
 8012718:	47b8      	blx	r7
 801271a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801271c:	f8c4 8010 	str.w	r8, [r4, #16]
 8012720:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8012722:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012724:	69a0      	ldr	r0, [r4, #24]
 8012726:	f04f 0800 	mov.w	r8, #0
 801272a:	f8c4 801c 	str.w	r8, [r4, #28]
 801272e:	f8c5 8018 	str.w	r8, [r5, #24]
 8012732:	b128      	cbz	r0, 8012740 <rcl_wait_set_fini+0xc4>
 8012734:	9101      	str	r1, [sp, #4]
 8012736:	47b8      	blx	r7
 8012738:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801273a:	9901      	ldr	r1, [sp, #4]
 801273c:	f8c4 8018 	str.w	r8, [r4, #24]
 8012740:	6a28      	ldr	r0, [r5, #32]
 8012742:	b120      	cbz	r0, 801274e <rcl_wait_set_fini+0xd2>
 8012744:	47b8      	blx	r7
 8012746:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012748:	2300      	movs	r3, #0
 801274a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801274e:	6a20      	ldr	r0, [r4, #32]
 8012750:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8012754:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8012756:	2700      	movs	r7, #0
 8012758:	6267      	str	r7, [r4, #36]	@ 0x24
 801275a:	626f      	str	r7, [r5, #36]	@ 0x24
 801275c:	b120      	cbz	r0, 8012768 <rcl_wait_set_fini+0xec>
 801275e:	9101      	str	r1, [sp, #4]
 8012760:	47c0      	blx	r8
 8012762:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012764:	9901      	ldr	r1, [sp, #4]
 8012766:	6227      	str	r7, [r4, #32]
 8012768:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801276a:	b120      	cbz	r0, 8012776 <rcl_wait_set_fini+0xfa>
 801276c:	47c0      	blx	r8
 801276e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012770:	2300      	movs	r3, #0
 8012772:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8012776:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8012778:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801277c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801277e:	2700      	movs	r7, #0
 8012780:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8012782:	632f      	str	r7, [r5, #48]	@ 0x30
 8012784:	b120      	cbz	r0, 8012790 <rcl_wait_set_fini+0x114>
 8012786:	9101      	str	r1, [sp, #4]
 8012788:	47c0      	blx	r8
 801278a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801278c:	9901      	ldr	r1, [sp, #4]
 801278e:	62a7      	str	r7, [r4, #40]	@ 0x28
 8012790:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8012792:	b120      	cbz	r0, 801279e <rcl_wait_set_fini+0x122>
 8012794:	47c0      	blx	r8
 8012796:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012798:	2300      	movs	r3, #0
 801279a:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 801279e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80127a0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80127a2:	4628      	mov	r0, r5
 80127a4:	4798      	blx	r3
 80127a6:	2300      	movs	r3, #0
 80127a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80127aa:	4630      	mov	r0, r6
 80127ac:	b002      	add	sp, #8
 80127ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127b2:	260b      	movs	r6, #11
 80127b4:	4630      	mov	r0, r6
 80127b6:	b002      	add	sp, #8
 80127b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080127bc <rcl_wait_set_add_subscription>:
 80127bc:	b318      	cbz	r0, 8012806 <rcl_wait_set_add_subscription+0x4a>
 80127be:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80127c0:	b570      	push	{r4, r5, r6, lr}
 80127c2:	4604      	mov	r4, r0
 80127c4:	b30b      	cbz	r3, 801280a <rcl_wait_set_add_subscription+0x4e>
 80127c6:	b319      	cbz	r1, 8012810 <rcl_wait_set_add_subscription+0x54>
 80127c8:	681d      	ldr	r5, [r3, #0]
 80127ca:	6840      	ldr	r0, [r0, #4]
 80127cc:	4285      	cmp	r5, r0
 80127ce:	d217      	bcs.n	8012800 <rcl_wait_set_add_subscription+0x44>
 80127d0:	6820      	ldr	r0, [r4, #0]
 80127d2:	1c6e      	adds	r6, r5, #1
 80127d4:	601e      	str	r6, [r3, #0]
 80127d6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80127da:	b102      	cbz	r2, 80127de <rcl_wait_set_add_subscription+0x22>
 80127dc:	6015      	str	r5, [r2, #0]
 80127de:	4608      	mov	r0, r1
 80127e0:	f7ff fb0a 	bl	8011df8 <rcl_subscription_get_rmw_handle>
 80127e4:	b150      	cbz	r0, 80127fc <rcl_wait_set_add_subscription+0x40>
 80127e6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80127e8:	6842      	ldr	r2, [r0, #4]
 80127ea:	689b      	ldr	r3, [r3, #8]
 80127ec:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80127f0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80127f2:	6853      	ldr	r3, [r2, #4]
 80127f4:	3301      	adds	r3, #1
 80127f6:	2000      	movs	r0, #0
 80127f8:	6053      	str	r3, [r2, #4]
 80127fa:	bd70      	pop	{r4, r5, r6, pc}
 80127fc:	2001      	movs	r0, #1
 80127fe:	bd70      	pop	{r4, r5, r6, pc}
 8012800:	f240 3086 	movw	r0, #902	@ 0x386
 8012804:	bd70      	pop	{r4, r5, r6, pc}
 8012806:	200b      	movs	r0, #11
 8012808:	4770      	bx	lr
 801280a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801280e:	bd70      	pop	{r4, r5, r6, pc}
 8012810:	200b      	movs	r0, #11
 8012812:	bd70      	pop	{r4, r5, r6, pc}

08012814 <rcl_wait_set_clear>:
 8012814:	2800      	cmp	r0, #0
 8012816:	d073      	beq.n	8012900 <rcl_wait_set_clear+0xec>
 8012818:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801281a:	b510      	push	{r4, lr}
 801281c:	4604      	mov	r4, r0
 801281e:	2b00      	cmp	r3, #0
 8012820:	d070      	beq.n	8012904 <rcl_wait_set_clear+0xf0>
 8012822:	6800      	ldr	r0, [r0, #0]
 8012824:	b138      	cbz	r0, 8012836 <rcl_wait_set_clear+0x22>
 8012826:	6862      	ldr	r2, [r4, #4]
 8012828:	2100      	movs	r1, #0
 801282a:	0092      	lsls	r2, r2, #2
 801282c:	f004 fbea 	bl	8017004 <memset>
 8012830:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012832:	2200      	movs	r2, #0
 8012834:	601a      	str	r2, [r3, #0]
 8012836:	68a0      	ldr	r0, [r4, #8]
 8012838:	b138      	cbz	r0, 801284a <rcl_wait_set_clear+0x36>
 801283a:	68e2      	ldr	r2, [r4, #12]
 801283c:	2100      	movs	r1, #0
 801283e:	0092      	lsls	r2, r2, #2
 8012840:	f004 fbe0 	bl	8017004 <memset>
 8012844:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012846:	2200      	movs	r2, #0
 8012848:	60da      	str	r2, [r3, #12]
 801284a:	69a0      	ldr	r0, [r4, #24]
 801284c:	b138      	cbz	r0, 801285e <rcl_wait_set_clear+0x4a>
 801284e:	69e2      	ldr	r2, [r4, #28]
 8012850:	2100      	movs	r1, #0
 8012852:	0092      	lsls	r2, r2, #2
 8012854:	f004 fbd6 	bl	8017004 <memset>
 8012858:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801285a:	2200      	movs	r2, #0
 801285c:	619a      	str	r2, [r3, #24]
 801285e:	6a20      	ldr	r0, [r4, #32]
 8012860:	b138      	cbz	r0, 8012872 <rcl_wait_set_clear+0x5e>
 8012862:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8012864:	2100      	movs	r1, #0
 8012866:	0092      	lsls	r2, r2, #2
 8012868:	f004 fbcc 	bl	8017004 <memset>
 801286c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801286e:	2200      	movs	r2, #0
 8012870:	625a      	str	r2, [r3, #36]	@ 0x24
 8012872:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8012874:	b138      	cbz	r0, 8012886 <rcl_wait_set_clear+0x72>
 8012876:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012878:	2100      	movs	r1, #0
 801287a:	0092      	lsls	r2, r2, #2
 801287c:	f004 fbc2 	bl	8017004 <memset>
 8012880:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012882:	2200      	movs	r2, #0
 8012884:	631a      	str	r2, [r3, #48]	@ 0x30
 8012886:	6920      	ldr	r0, [r4, #16]
 8012888:	b138      	cbz	r0, 801289a <rcl_wait_set_clear+0x86>
 801288a:	6962      	ldr	r2, [r4, #20]
 801288c:	2100      	movs	r1, #0
 801288e:	0092      	lsls	r2, r2, #2
 8012890:	f004 fbb8 	bl	8017004 <memset>
 8012894:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012896:	2200      	movs	r2, #0
 8012898:	641a      	str	r2, [r3, #64]	@ 0x40
 801289a:	6898      	ldr	r0, [r3, #8]
 801289c:	b138      	cbz	r0, 80128ae <rcl_wait_set_clear+0x9a>
 801289e:	685a      	ldr	r2, [r3, #4]
 80128a0:	2100      	movs	r1, #0
 80128a2:	0092      	lsls	r2, r2, #2
 80128a4:	f004 fbae 	bl	8017004 <memset>
 80128a8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80128aa:	2200      	movs	r2, #0
 80128ac:	605a      	str	r2, [r3, #4]
 80128ae:	6958      	ldr	r0, [r3, #20]
 80128b0:	b138      	cbz	r0, 80128c2 <rcl_wait_set_clear+0xae>
 80128b2:	691a      	ldr	r2, [r3, #16]
 80128b4:	2100      	movs	r1, #0
 80128b6:	0092      	lsls	r2, r2, #2
 80128b8:	f004 fba4 	bl	8017004 <memset>
 80128bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80128be:	2200      	movs	r2, #0
 80128c0:	611a      	str	r2, [r3, #16]
 80128c2:	6a18      	ldr	r0, [r3, #32]
 80128c4:	b138      	cbz	r0, 80128d6 <rcl_wait_set_clear+0xc2>
 80128c6:	69da      	ldr	r2, [r3, #28]
 80128c8:	2100      	movs	r1, #0
 80128ca:	0092      	lsls	r2, r2, #2
 80128cc:	f004 fb9a 	bl	8017004 <memset>
 80128d0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80128d2:	2200      	movs	r2, #0
 80128d4:	61da      	str	r2, [r3, #28]
 80128d6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80128d8:	b138      	cbz	r0, 80128ea <rcl_wait_set_clear+0xd6>
 80128da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80128dc:	2100      	movs	r1, #0
 80128de:	0092      	lsls	r2, r2, #2
 80128e0:	f004 fb90 	bl	8017004 <memset>
 80128e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80128e6:	2200      	movs	r2, #0
 80128e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80128ea:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80128ec:	b138      	cbz	r0, 80128fe <rcl_wait_set_clear+0xea>
 80128ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80128f0:	2100      	movs	r1, #0
 80128f2:	0092      	lsls	r2, r2, #2
 80128f4:	f004 fb86 	bl	8017004 <memset>
 80128f8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80128fa:	2000      	movs	r0, #0
 80128fc:	6358      	str	r0, [r3, #52]	@ 0x34
 80128fe:	bd10      	pop	{r4, pc}
 8012900:	200b      	movs	r0, #11
 8012902:	4770      	bx	lr
 8012904:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012908:	bd10      	pop	{r4, pc}
 801290a:	bf00      	nop

0801290c <rcl_wait_set_resize>:
 801290c:	2800      	cmp	r0, #0
 801290e:	f000 8185 	beq.w	8012c1c <rcl_wait_set_resize+0x310>
 8012912:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012916:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8012918:	b083      	sub	sp, #12
 801291a:	4605      	mov	r5, r0
 801291c:	2c00      	cmp	r4, #0
 801291e:	f000 817f 	beq.w	8012c20 <rcl_wait_set_resize+0x314>
 8012922:	f04f 0900 	mov.w	r9, #0
 8012926:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 801292a:	461f      	mov	r7, r3
 801292c:	4688      	mov	r8, r1
 801292e:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8012932:	4616      	mov	r6, r2
 8012934:	f8c0 9004 	str.w	r9, [r0, #4]
 8012938:	f8c4 9000 	str.w	r9, [r4]
 801293c:	2900      	cmp	r1, #0
 801293e:	f000 80bd 	beq.w	8012abc <rcl_wait_set_resize+0x1b0>
 8012942:	008c      	lsls	r4, r1, #2
 8012944:	6800      	ldr	r0, [r0, #0]
 8012946:	9301      	str	r3, [sp, #4]
 8012948:	4652      	mov	r2, sl
 801294a:	4621      	mov	r1, r4
 801294c:	4798      	blx	r3
 801294e:	9b01      	ldr	r3, [sp, #4]
 8012950:	6028      	str	r0, [r5, #0]
 8012952:	2800      	cmp	r0, #0
 8012954:	f000 80cb 	beq.w	8012aee <rcl_wait_set_resize+0x1e2>
 8012958:	4622      	mov	r2, r4
 801295a:	4649      	mov	r1, r9
 801295c:	9301      	str	r3, [sp, #4]
 801295e:	f004 fb51 	bl	8017004 <memset>
 8012962:	f8c5 8004 	str.w	r8, [r5, #4]
 8012966:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801296a:	9b01      	ldr	r3, [sp, #4]
 801296c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8012970:	f8c8 9004 	str.w	r9, [r8, #4]
 8012974:	4652      	mov	r2, sl
 8012976:	4621      	mov	r1, r4
 8012978:	4798      	blx	r3
 801297a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801297c:	f8c8 0008 	str.w	r0, [r8, #8]
 8012980:	689b      	ldr	r3, [r3, #8]
 8012982:	2b00      	cmp	r3, #0
 8012984:	f000 80ac 	beq.w	8012ae0 <rcl_wait_set_resize+0x1d4>
 8012988:	4622      	mov	r2, r4
 801298a:	4649      	mov	r1, r9
 801298c:	4618      	mov	r0, r3
 801298e:	f004 fb39 	bl	8017004 <memset>
 8012992:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012994:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012998:	f04f 0800 	mov.w	r8, #0
 801299c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 80129a0:	f8c5 800c 	str.w	r8, [r5, #12]
 80129a4:	f8c4 800c 	str.w	r8, [r4, #12]
 80129a8:	2e00      	cmp	r6, #0
 80129aa:	f040 80a4 	bne.w	8012af6 <rcl_wait_set_resize+0x1ea>
 80129ae:	68a8      	ldr	r0, [r5, #8]
 80129b0:	b128      	cbz	r0, 80129be <rcl_wait_set_resize+0xb2>
 80129b2:	4649      	mov	r1, r9
 80129b4:	4790      	blx	r2
 80129b6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80129b8:	60ae      	str	r6, [r5, #8]
 80129ba:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80129be:	f04f 0800 	mov.w	r8, #0
 80129c2:	19f6      	adds	r6, r6, r7
 80129c4:	f8c4 8010 	str.w	r8, [r4, #16]
 80129c8:	f040 80ac 	bne.w	8012b24 <rcl_wait_set_resize+0x218>
 80129cc:	6960      	ldr	r0, [r4, #20]
 80129ce:	b130      	cbz	r0, 80129de <rcl_wait_set_resize+0xd2>
 80129d0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80129d2:	4649      	mov	r1, r9
 80129d4:	4798      	blx	r3
 80129d6:	6166      	str	r6, [r4, #20]
 80129d8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80129da:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80129de:	2600      	movs	r6, #0
 80129e0:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80129e4:	616e      	str	r6, [r5, #20]
 80129e6:	6426      	str	r6, [r4, #64]	@ 0x40
 80129e8:	2f00      	cmp	r7, #0
 80129ea:	f040 80ad 	bne.w	8012b48 <rcl_wait_set_resize+0x23c>
 80129ee:	6928      	ldr	r0, [r5, #16]
 80129f0:	b138      	cbz	r0, 8012a02 <rcl_wait_set_resize+0xf6>
 80129f2:	4649      	mov	r1, r9
 80129f4:	47d0      	blx	sl
 80129f6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80129f8:	612f      	str	r7, [r5, #16]
 80129fa:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80129fe:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012a02:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012a04:	2600      	movs	r6, #0
 8012a06:	61ee      	str	r6, [r5, #28]
 8012a08:	61a6      	str	r6, [r4, #24]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	f040 80af 	bne.w	8012b6e <rcl_wait_set_resize+0x262>
 8012a10:	69a8      	ldr	r0, [r5, #24]
 8012a12:	b120      	cbz	r0, 8012a1e <rcl_wait_set_resize+0x112>
 8012a14:	4649      	mov	r1, r9
 8012a16:	47d0      	blx	sl
 8012a18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012a1a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012a1c:	61ab      	str	r3, [r5, #24]
 8012a1e:	6a20      	ldr	r0, [r4, #32]
 8012a20:	b128      	cbz	r0, 8012a2e <rcl_wait_set_resize+0x122>
 8012a22:	4649      	mov	r1, r9
 8012a24:	47d0      	blx	sl
 8012a26:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012a28:	2300      	movs	r3, #0
 8012a2a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8012a2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012a30:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8012a32:	2600      	movs	r6, #0
 8012a34:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8012a38:	626e      	str	r6, [r5, #36]	@ 0x24
 8012a3a:	6266      	str	r6, [r4, #36]	@ 0x24
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	f000 80b6 	beq.w	8012bae <rcl_wait_set_resize+0x2a2>
 8012a42:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8012a46:	6a28      	ldr	r0, [r5, #32]
 8012a48:	463a      	mov	r2, r7
 8012a4a:	4651      	mov	r1, sl
 8012a4c:	47c8      	blx	r9
 8012a4e:	6228      	str	r0, [r5, #32]
 8012a50:	2800      	cmp	r0, #0
 8012a52:	d04c      	beq.n	8012aee <rcl_wait_set_resize+0x1e2>
 8012a54:	4652      	mov	r2, sl
 8012a56:	4631      	mov	r1, r6
 8012a58:	f004 fad4 	bl	8017004 <memset>
 8012a5c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012a5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012a60:	626b      	str	r3, [r5, #36]	@ 0x24
 8012a62:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8012a64:	62a6      	str	r6, [r4, #40]	@ 0x28
 8012a66:	463a      	mov	r2, r7
 8012a68:	4651      	mov	r1, sl
 8012a6a:	47c8      	blx	r9
 8012a6c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012a6e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8012a70:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8012a72:	2c00      	cmp	r4, #0
 8012a74:	f000 80f0 	beq.w	8012c58 <rcl_wait_set_resize+0x34c>
 8012a78:	4620      	mov	r0, r4
 8012a7a:	4652      	mov	r2, sl
 8012a7c:	4631      	mov	r1, r6
 8012a7e:	f004 fac1 	bl	8017004 <memset>
 8012a82:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012a84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012a86:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8012a88:	2600      	movs	r6, #0
 8012a8a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8012a8e:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8012a90:	6326      	str	r6, [r4, #48]	@ 0x30
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	f040 809d 	bne.w	8012bd2 <rcl_wait_set_resize+0x2c6>
 8012a98:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8012a9a:	b120      	cbz	r0, 8012aa6 <rcl_wait_set_resize+0x19a>
 8012a9c:	4639      	mov	r1, r7
 8012a9e:	47c0      	blx	r8
 8012aa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012aa2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012aa4:	62ab      	str	r3, [r5, #40]	@ 0x28
 8012aa6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8012aa8:	b310      	cbz	r0, 8012af0 <rcl_wait_set_resize+0x1e4>
 8012aaa:	4639      	mov	r1, r7
 8012aac:	47c0      	blx	r8
 8012aae:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012ab0:	2000      	movs	r0, #0
 8012ab2:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8012ab6:	b003      	add	sp, #12
 8012ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012abc:	6800      	ldr	r0, [r0, #0]
 8012abe:	b120      	cbz	r0, 8012aca <rcl_wait_set_resize+0x1be>
 8012ac0:	4651      	mov	r1, sl
 8012ac2:	47d8      	blx	fp
 8012ac4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012ac6:	f8c5 8000 	str.w	r8, [r5]
 8012aca:	68a0      	ldr	r0, [r4, #8]
 8012acc:	2800      	cmp	r0, #0
 8012ace:	f43f af61 	beq.w	8012994 <rcl_wait_set_resize+0x88>
 8012ad2:	4651      	mov	r1, sl
 8012ad4:	47d8      	blx	fp
 8012ad6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012ad8:	2300      	movs	r3, #0
 8012ada:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8012ade:	e759      	b.n	8012994 <rcl_wait_set_resize+0x88>
 8012ae0:	6828      	ldr	r0, [r5, #0]
 8012ae2:	9301      	str	r3, [sp, #4]
 8012ae4:	4651      	mov	r1, sl
 8012ae6:	47d8      	blx	fp
 8012ae8:	9b01      	ldr	r3, [sp, #4]
 8012aea:	e9c5 3300 	strd	r3, r3, [r5]
 8012aee:	200a      	movs	r0, #10
 8012af0:	b003      	add	sp, #12
 8012af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012af6:	00b4      	lsls	r4, r6, #2
 8012af8:	68a8      	ldr	r0, [r5, #8]
 8012afa:	464a      	mov	r2, r9
 8012afc:	4621      	mov	r1, r4
 8012afe:	4798      	blx	r3
 8012b00:	60a8      	str	r0, [r5, #8]
 8012b02:	2800      	cmp	r0, #0
 8012b04:	d0f3      	beq.n	8012aee <rcl_wait_set_resize+0x1e2>
 8012b06:	4622      	mov	r2, r4
 8012b08:	4641      	mov	r1, r8
 8012b0a:	f004 fa7b 	bl	8017004 <memset>
 8012b0e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012b10:	60ee      	str	r6, [r5, #12]
 8012b12:	f04f 0800 	mov.w	r8, #0
 8012b16:	19f6      	adds	r6, r6, r7
 8012b18:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012b1c:	f8c4 8010 	str.w	r8, [r4, #16]
 8012b20:	f43f af54 	beq.w	80129cc <rcl_wait_set_resize+0xc0>
 8012b24:	00b6      	lsls	r6, r6, #2
 8012b26:	464a      	mov	r2, r9
 8012b28:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8012b2a:	6960      	ldr	r0, [r4, #20]
 8012b2c:	4631      	mov	r1, r6
 8012b2e:	4798      	blx	r3
 8012b30:	4681      	mov	r9, r0
 8012b32:	6160      	str	r0, [r4, #20]
 8012b34:	2800      	cmp	r0, #0
 8012b36:	d076      	beq.n	8012c26 <rcl_wait_set_resize+0x31a>
 8012b38:	4632      	mov	r2, r6
 8012b3a:	4641      	mov	r1, r8
 8012b3c:	f004 fa62 	bl	8017004 <memset>
 8012b40:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012b42:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012b46:	e74a      	b.n	80129de <rcl_wait_set_resize+0xd2>
 8012b48:	00bc      	lsls	r4, r7, #2
 8012b4a:	6928      	ldr	r0, [r5, #16]
 8012b4c:	464a      	mov	r2, r9
 8012b4e:	4621      	mov	r1, r4
 8012b50:	47c0      	blx	r8
 8012b52:	6128      	str	r0, [r5, #16]
 8012b54:	2800      	cmp	r0, #0
 8012b56:	d0ca      	beq.n	8012aee <rcl_wait_set_resize+0x1e2>
 8012b58:	4622      	mov	r2, r4
 8012b5a:	4631      	mov	r1, r6
 8012b5c:	f004 fa52 	bl	8017004 <memset>
 8012b60:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012b62:	616f      	str	r7, [r5, #20]
 8012b64:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8012b68:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8012b6c:	e749      	b.n	8012a02 <rcl_wait_set_resize+0xf6>
 8012b6e:	009c      	lsls	r4, r3, #2
 8012b70:	69a8      	ldr	r0, [r5, #24]
 8012b72:	464a      	mov	r2, r9
 8012b74:	4621      	mov	r1, r4
 8012b76:	47c0      	blx	r8
 8012b78:	61a8      	str	r0, [r5, #24]
 8012b7a:	2800      	cmp	r0, #0
 8012b7c:	d0b7      	beq.n	8012aee <rcl_wait_set_resize+0x1e2>
 8012b7e:	4622      	mov	r2, r4
 8012b80:	4631      	mov	r1, r6
 8012b82:	f004 fa3f 	bl	8017004 <memset>
 8012b86:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8012b88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012b8a:	61eb      	str	r3, [r5, #28]
 8012b8c:	6a38      	ldr	r0, [r7, #32]
 8012b8e:	61fe      	str	r6, [r7, #28]
 8012b90:	464a      	mov	r2, r9
 8012b92:	4621      	mov	r1, r4
 8012b94:	47c0      	blx	r8
 8012b96:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012b98:	6238      	str	r0, [r7, #32]
 8012b9a:	6a1f      	ldr	r7, [r3, #32]
 8012b9c:	2f00      	cmp	r7, #0
 8012b9e:	d054      	beq.n	8012c4a <rcl_wait_set_resize+0x33e>
 8012ba0:	4622      	mov	r2, r4
 8012ba2:	4631      	mov	r1, r6
 8012ba4:	4638      	mov	r0, r7
 8012ba6:	f004 fa2d 	bl	8017004 <memset>
 8012baa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012bac:	e73f      	b.n	8012a2e <rcl_wait_set_resize+0x122>
 8012bae:	6a28      	ldr	r0, [r5, #32]
 8012bb0:	b120      	cbz	r0, 8012bbc <rcl_wait_set_resize+0x2b0>
 8012bb2:	4639      	mov	r1, r7
 8012bb4:	47c0      	blx	r8
 8012bb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012bb8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012bba:	622b      	str	r3, [r5, #32]
 8012bbc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8012bbe:	2800      	cmp	r0, #0
 8012bc0:	f43f af60 	beq.w	8012a84 <rcl_wait_set_resize+0x178>
 8012bc4:	4639      	mov	r1, r7
 8012bc6:	47c0      	blx	r8
 8012bc8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8012bca:	2300      	movs	r3, #0
 8012bcc:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8012bd0:	e758      	b.n	8012a84 <rcl_wait_set_resize+0x178>
 8012bd2:	009c      	lsls	r4, r3, #2
 8012bd4:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8012bd6:	463a      	mov	r2, r7
 8012bd8:	4621      	mov	r1, r4
 8012bda:	47c8      	blx	r9
 8012bdc:	62a8      	str	r0, [r5, #40]	@ 0x28
 8012bde:	2800      	cmp	r0, #0
 8012be0:	d085      	beq.n	8012aee <rcl_wait_set_resize+0x1e2>
 8012be2:	4622      	mov	r2, r4
 8012be4:	4631      	mov	r1, r6
 8012be6:	f004 fa0d 	bl	8017004 <memset>
 8012bea:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8012bee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012bf0:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8012bf2:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8012bf6:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8012bfa:	463a      	mov	r2, r7
 8012bfc:	4621      	mov	r1, r4
 8012bfe:	47c8      	blx	r9
 8012c00:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012c02:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8012c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012c08:	b36b      	cbz	r3, 8012c66 <rcl_wait_set_resize+0x35a>
 8012c0a:	4622      	mov	r2, r4
 8012c0c:	4631      	mov	r1, r6
 8012c0e:	4618      	mov	r0, r3
 8012c10:	f004 f9f8 	bl	8017004 <memset>
 8012c14:	4630      	mov	r0, r6
 8012c16:	b003      	add	sp, #12
 8012c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c1c:	200b      	movs	r0, #11
 8012c1e:	4770      	bx	lr
 8012c20:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012c24:	e764      	b.n	8012af0 <rcl_wait_set_resize+0x1e4>
 8012c26:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012c28:	68a8      	ldr	r0, [r5, #8]
 8012c2a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8012c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012c2e:	4798      	blx	r3
 8012c30:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8012c32:	6928      	ldr	r0, [r5, #16]
 8012c34:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012c36:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8012c38:	f8c5 900c 	str.w	r9, [r5, #12]
 8012c3c:	f8c5 9008 	str.w	r9, [r5, #8]
 8012c40:	4790      	blx	r2
 8012c42:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8012c46:	200a      	movs	r0, #10
 8012c48:	e752      	b.n	8012af0 <rcl_wait_set_resize+0x1e4>
 8012c4a:	69a8      	ldr	r0, [r5, #24]
 8012c4c:	4649      	mov	r1, r9
 8012c4e:	47d0      	blx	sl
 8012c50:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8012c54:	200a      	movs	r0, #10
 8012c56:	e74b      	b.n	8012af0 <rcl_wait_set_resize+0x1e4>
 8012c58:	6a28      	ldr	r0, [r5, #32]
 8012c5a:	4639      	mov	r1, r7
 8012c5c:	47c0      	blx	r8
 8012c5e:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8012c62:	200a      	movs	r0, #10
 8012c64:	e744      	b.n	8012af0 <rcl_wait_set_resize+0x1e4>
 8012c66:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8012c68:	9301      	str	r3, [sp, #4]
 8012c6a:	4639      	mov	r1, r7
 8012c6c:	47c0      	blx	r8
 8012c6e:	9b01      	ldr	r3, [sp, #4]
 8012c70:	200a      	movs	r0, #10
 8012c72:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8012c76:	e73b      	b.n	8012af0 <rcl_wait_set_resize+0x1e4>

08012c78 <rcl_wait_set_init>:
 8012c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c7c:	b084      	sub	sp, #16
 8012c7e:	4604      	mov	r4, r0
 8012c80:	a810      	add	r0, sp, #64	@ 0x40
 8012c82:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8012c86:	460f      	mov	r7, r1
 8012c88:	4690      	mov	r8, r2
 8012c8a:	4699      	mov	r9, r3
 8012c8c:	f7f8 fd4e 	bl	800b72c <rcutils_allocator_is_valid>
 8012c90:	2800      	cmp	r0, #0
 8012c92:	d06b      	beq.n	8012d6c <rcl_wait_set_init+0xf4>
 8012c94:	2c00      	cmp	r4, #0
 8012c96:	d069      	beq.n	8012d6c <rcl_wait_set_init+0xf4>
 8012c98:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8012c9a:	b125      	cbz	r5, 8012ca6 <rcl_wait_set_init+0x2e>
 8012c9c:	2564      	movs	r5, #100	@ 0x64
 8012c9e:	4628      	mov	r0, r5
 8012ca0:	b004      	add	sp, #16
 8012ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ca6:	f1ba 0f00 	cmp.w	sl, #0
 8012caa:	d05f      	beq.n	8012d6c <rcl_wait_set_init+0xf4>
 8012cac:	4650      	mov	r0, sl
 8012cae:	f7fe fa33 	bl	8011118 <rcl_context_is_valid>
 8012cb2:	2800      	cmp	r0, #0
 8012cb4:	d067      	beq.n	8012d86 <rcl_wait_set_init+0x10e>
 8012cb6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012cb8:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8012cba:	205c      	movs	r0, #92	@ 0x5c
 8012cbc:	4798      	blx	r3
 8012cbe:	6320      	str	r0, [r4, #48]	@ 0x30
 8012cc0:	2800      	cmp	r0, #0
 8012cc2:	d062      	beq.n	8012d8a <rcl_wait_set_init+0x112>
 8012cc4:	4629      	mov	r1, r5
 8012cc6:	225c      	movs	r2, #92	@ 0x5c
 8012cc8:	f004 f99c 	bl	8017004 <memset>
 8012ccc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8012cd0:	eb03 0e02 	add.w	lr, r3, r2
 8012cd4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012cd6:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8012cd8:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8012cdc:	449e      	add	lr, r3
 8012cde:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012ce2:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8012ce6:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8012cea:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8012cee:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8012cf2:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8012cf6:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8012cfa:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8012cfe:	f8da a000 	ldr.w	sl, [sl]
 8012d02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012d04:	44c6      	add	lr, r8
 8012d06:	f8dc 3000 	ldr.w	r3, [ip]
 8012d0a:	602b      	str	r3, [r5, #0]
 8012d0c:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8012d10:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8012d14:	f002 fa1e 	bl	8015154 <rmw_create_wait_set>
 8012d18:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012d1a:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8012d1c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8012d1e:	b350      	cbz	r0, 8012d76 <rcl_wait_set_init+0xfe>
 8012d20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012d22:	9302      	str	r3, [sp, #8]
 8012d24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012d26:	9301      	str	r3, [sp, #4]
 8012d28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012d2a:	9300      	str	r3, [sp, #0]
 8012d2c:	4642      	mov	r2, r8
 8012d2e:	464b      	mov	r3, r9
 8012d30:	4639      	mov	r1, r7
 8012d32:	4620      	mov	r0, r4
 8012d34:	f7ff fdea 	bl	801290c <rcl_wait_set_resize>
 8012d38:	4605      	mov	r5, r0
 8012d3a:	2800      	cmp	r0, #0
 8012d3c:	d0af      	beq.n	8012c9e <rcl_wait_set_init+0x26>
 8012d3e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012d40:	bb2b      	cbnz	r3, 8012d8e <rcl_wait_set_init+0x116>
 8012d42:	2600      	movs	r6, #0
 8012d44:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8012d48:	9600      	str	r6, [sp, #0]
 8012d4a:	4633      	mov	r3, r6
 8012d4c:	4632      	mov	r2, r6
 8012d4e:	4631      	mov	r1, r6
 8012d50:	4620      	mov	r0, r4
 8012d52:	f7ff fddb 	bl	801290c <rcl_wait_set_resize>
 8012d56:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8012d58:	2800      	cmp	r0, #0
 8012d5a:	d0a0      	beq.n	8012c9e <rcl_wait_set_init+0x26>
 8012d5c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8012d5e:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8012d60:	4798      	blx	r3
 8012d62:	4628      	mov	r0, r5
 8012d64:	6326      	str	r6, [r4, #48]	@ 0x30
 8012d66:	b004      	add	sp, #16
 8012d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d6c:	250b      	movs	r5, #11
 8012d6e:	4628      	mov	r0, r5
 8012d70:	b004      	add	sp, #16
 8012d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d76:	2501      	movs	r5, #1
 8012d78:	f002 f9f6 	bl	8015168 <rmw_destroy_wait_set>
 8012d7c:	2800      	cmp	r0, #0
 8012d7e:	bf18      	it	ne
 8012d80:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8012d84:	e7dd      	b.n	8012d42 <rcl_wait_set_init+0xca>
 8012d86:	2565      	movs	r5, #101	@ 0x65
 8012d88:	e789      	b.n	8012c9e <rcl_wait_set_init+0x26>
 8012d8a:	250a      	movs	r5, #10
 8012d8c:	e787      	b.n	8012c9e <rcl_wait_set_init+0x26>
 8012d8e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8012d90:	e7f2      	b.n	8012d78 <rcl_wait_set_init+0x100>
 8012d92:	bf00      	nop

08012d94 <rcl_wait_set_add_guard_condition>:
 8012d94:	b318      	cbz	r0, 8012dde <rcl_wait_set_add_guard_condition+0x4a>
 8012d96:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012d98:	b570      	push	{r4, r5, r6, lr}
 8012d9a:	4604      	mov	r4, r0
 8012d9c:	b30b      	cbz	r3, 8012de2 <rcl_wait_set_add_guard_condition+0x4e>
 8012d9e:	b319      	cbz	r1, 8012de8 <rcl_wait_set_add_guard_condition+0x54>
 8012da0:	68dd      	ldr	r5, [r3, #12]
 8012da2:	68c0      	ldr	r0, [r0, #12]
 8012da4:	4285      	cmp	r5, r0
 8012da6:	d217      	bcs.n	8012dd8 <rcl_wait_set_add_guard_condition+0x44>
 8012da8:	68a0      	ldr	r0, [r4, #8]
 8012daa:	1c6e      	adds	r6, r5, #1
 8012dac:	60de      	str	r6, [r3, #12]
 8012dae:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012db2:	b102      	cbz	r2, 8012db6 <rcl_wait_set_add_guard_condition+0x22>
 8012db4:	6015      	str	r5, [r2, #0]
 8012db6:	4608      	mov	r0, r1
 8012db8:	f003 fbe0 	bl	801657c <rcl_guard_condition_get_rmw_handle>
 8012dbc:	b150      	cbz	r0, 8012dd4 <rcl_wait_set_add_guard_condition+0x40>
 8012dbe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012dc0:	6842      	ldr	r2, [r0, #4]
 8012dc2:	695b      	ldr	r3, [r3, #20]
 8012dc4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012dc8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012dca:	6913      	ldr	r3, [r2, #16]
 8012dcc:	3301      	adds	r3, #1
 8012dce:	2000      	movs	r0, #0
 8012dd0:	6113      	str	r3, [r2, #16]
 8012dd2:	bd70      	pop	{r4, r5, r6, pc}
 8012dd4:	2001      	movs	r0, #1
 8012dd6:	bd70      	pop	{r4, r5, r6, pc}
 8012dd8:	f240 3086 	movw	r0, #902	@ 0x386
 8012ddc:	bd70      	pop	{r4, r5, r6, pc}
 8012dde:	200b      	movs	r0, #11
 8012de0:	4770      	bx	lr
 8012de2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012de6:	bd70      	pop	{r4, r5, r6, pc}
 8012de8:	200b      	movs	r0, #11
 8012dea:	bd70      	pop	{r4, r5, r6, pc}

08012dec <rcl_wait_set_add_timer>:
 8012dec:	b328      	cbz	r0, 8012e3a <rcl_wait_set_add_timer+0x4e>
 8012dee:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012df0:	b570      	push	{r4, r5, r6, lr}
 8012df2:	4604      	mov	r4, r0
 8012df4:	b31b      	cbz	r3, 8012e3e <rcl_wait_set_add_timer+0x52>
 8012df6:	b329      	cbz	r1, 8012e44 <rcl_wait_set_add_timer+0x58>
 8012df8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8012dfa:	6965      	ldr	r5, [r4, #20]
 8012dfc:	42a8      	cmp	r0, r5
 8012dfe:	d219      	bcs.n	8012e34 <rcl_wait_set_add_timer+0x48>
 8012e00:	6925      	ldr	r5, [r4, #16]
 8012e02:	1c46      	adds	r6, r0, #1
 8012e04:	641e      	str	r6, [r3, #64]	@ 0x40
 8012e06:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8012e0a:	b102      	cbz	r2, 8012e0e <rcl_wait_set_add_timer+0x22>
 8012e0c:	6010      	str	r0, [r2, #0]
 8012e0e:	4608      	mov	r0, r1
 8012e10:	f7ff fba6 	bl	8012560 <rcl_timer_get_guard_condition>
 8012e14:	b168      	cbz	r0, 8012e32 <rcl_wait_set_add_timer+0x46>
 8012e16:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012e18:	68e3      	ldr	r3, [r4, #12]
 8012e1a:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8012e1c:	3b01      	subs	r3, #1
 8012e1e:	441d      	add	r5, r3
 8012e20:	f003 fbac 	bl	801657c <rcl_guard_condition_get_rmw_handle>
 8012e24:	b180      	cbz	r0, 8012e48 <rcl_wait_set_add_timer+0x5c>
 8012e26:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012e28:	6842      	ldr	r2, [r0, #4]
 8012e2a:	695b      	ldr	r3, [r3, #20]
 8012e2c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012e30:	2000      	movs	r0, #0
 8012e32:	bd70      	pop	{r4, r5, r6, pc}
 8012e34:	f240 3086 	movw	r0, #902	@ 0x386
 8012e38:	bd70      	pop	{r4, r5, r6, pc}
 8012e3a:	200b      	movs	r0, #11
 8012e3c:	4770      	bx	lr
 8012e3e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012e42:	bd70      	pop	{r4, r5, r6, pc}
 8012e44:	200b      	movs	r0, #11
 8012e46:	bd70      	pop	{r4, r5, r6, pc}
 8012e48:	2001      	movs	r0, #1
 8012e4a:	bd70      	pop	{r4, r5, r6, pc}

08012e4c <rcl_wait_set_add_client>:
 8012e4c:	b318      	cbz	r0, 8012e96 <rcl_wait_set_add_client+0x4a>
 8012e4e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012e50:	b570      	push	{r4, r5, r6, lr}
 8012e52:	4604      	mov	r4, r0
 8012e54:	b30b      	cbz	r3, 8012e9a <rcl_wait_set_add_client+0x4e>
 8012e56:	b319      	cbz	r1, 8012ea0 <rcl_wait_set_add_client+0x54>
 8012e58:	699d      	ldr	r5, [r3, #24]
 8012e5a:	69c0      	ldr	r0, [r0, #28]
 8012e5c:	4285      	cmp	r5, r0
 8012e5e:	d217      	bcs.n	8012e90 <rcl_wait_set_add_client+0x44>
 8012e60:	69a0      	ldr	r0, [r4, #24]
 8012e62:	1c6e      	adds	r6, r5, #1
 8012e64:	619e      	str	r6, [r3, #24]
 8012e66:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012e6a:	b102      	cbz	r2, 8012e6e <rcl_wait_set_add_client+0x22>
 8012e6c:	6015      	str	r5, [r2, #0]
 8012e6e:	4608      	mov	r0, r1
 8012e70:	f7fe f8a4 	bl	8010fbc <rcl_client_get_rmw_handle>
 8012e74:	b150      	cbz	r0, 8012e8c <rcl_wait_set_add_client+0x40>
 8012e76:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012e78:	6842      	ldr	r2, [r0, #4]
 8012e7a:	6a1b      	ldr	r3, [r3, #32]
 8012e7c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012e80:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012e82:	69d3      	ldr	r3, [r2, #28]
 8012e84:	3301      	adds	r3, #1
 8012e86:	2000      	movs	r0, #0
 8012e88:	61d3      	str	r3, [r2, #28]
 8012e8a:	bd70      	pop	{r4, r5, r6, pc}
 8012e8c:	2001      	movs	r0, #1
 8012e8e:	bd70      	pop	{r4, r5, r6, pc}
 8012e90:	f240 3086 	movw	r0, #902	@ 0x386
 8012e94:	bd70      	pop	{r4, r5, r6, pc}
 8012e96:	200b      	movs	r0, #11
 8012e98:	4770      	bx	lr
 8012e9a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012e9e:	bd70      	pop	{r4, r5, r6, pc}
 8012ea0:	200b      	movs	r0, #11
 8012ea2:	bd70      	pop	{r4, r5, r6, pc}

08012ea4 <rcl_wait_set_add_service>:
 8012ea4:	b318      	cbz	r0, 8012eee <rcl_wait_set_add_service+0x4a>
 8012ea6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8012ea8:	b570      	push	{r4, r5, r6, lr}
 8012eaa:	4604      	mov	r4, r0
 8012eac:	b30b      	cbz	r3, 8012ef2 <rcl_wait_set_add_service+0x4e>
 8012eae:	b319      	cbz	r1, 8012ef8 <rcl_wait_set_add_service+0x54>
 8012eb0:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8012eb2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8012eb4:	4285      	cmp	r5, r0
 8012eb6:	d217      	bcs.n	8012ee8 <rcl_wait_set_add_service+0x44>
 8012eb8:	6a20      	ldr	r0, [r4, #32]
 8012eba:	1c6e      	adds	r6, r5, #1
 8012ebc:	625e      	str	r6, [r3, #36]	@ 0x24
 8012ebe:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8012ec2:	b102      	cbz	r2, 8012ec6 <rcl_wait_set_add_service+0x22>
 8012ec4:	6015      	str	r5, [r2, #0]
 8012ec6:	4608      	mov	r0, r1
 8012ec8:	f7fe fdfa 	bl	8011ac0 <rcl_service_get_rmw_handle>
 8012ecc:	b150      	cbz	r0, 8012ee4 <rcl_wait_set_add_service+0x40>
 8012ece:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012ed0:	6842      	ldr	r2, [r0, #4]
 8012ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ed4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012ed8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8012eda:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8012edc:	3301      	adds	r3, #1
 8012ede:	2000      	movs	r0, #0
 8012ee0:	6293      	str	r3, [r2, #40]	@ 0x28
 8012ee2:	bd70      	pop	{r4, r5, r6, pc}
 8012ee4:	2001      	movs	r0, #1
 8012ee6:	bd70      	pop	{r4, r5, r6, pc}
 8012ee8:	f240 3086 	movw	r0, #902	@ 0x386
 8012eec:	bd70      	pop	{r4, r5, r6, pc}
 8012eee:	200b      	movs	r0, #11
 8012ef0:	4770      	bx	lr
 8012ef2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8012ef6:	bd70      	pop	{r4, r5, r6, pc}
 8012ef8:	200b      	movs	r0, #11
 8012efa:	bd70      	pop	{r4, r5, r6, pc}
 8012efc:	0000      	movs	r0, r0
	...

08012f00 <rcl_wait>:
 8012f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f04:	ed2d 8b02 	vpush	{d8}
 8012f08:	b08d      	sub	sp, #52	@ 0x34
 8012f0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012f0e:	2800      	cmp	r0, #0
 8012f10:	f000 8143 	beq.w	801319a <rcl_wait+0x29a>
 8012f14:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8012f16:	4605      	mov	r5, r0
 8012f18:	2e00      	cmp	r6, #0
 8012f1a:	f000 8112 	beq.w	8013142 <rcl_wait+0x242>
 8012f1e:	6843      	ldr	r3, [r0, #4]
 8012f20:	b983      	cbnz	r3, 8012f44 <rcl_wait+0x44>
 8012f22:	68eb      	ldr	r3, [r5, #12]
 8012f24:	b973      	cbnz	r3, 8012f44 <rcl_wait+0x44>
 8012f26:	696b      	ldr	r3, [r5, #20]
 8012f28:	b963      	cbnz	r3, 8012f44 <rcl_wait+0x44>
 8012f2a:	69eb      	ldr	r3, [r5, #28]
 8012f2c:	b953      	cbnz	r3, 8012f44 <rcl_wait+0x44>
 8012f2e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8012f30:	b943      	cbnz	r3, 8012f44 <rcl_wait+0x44>
 8012f32:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8012f34:	b933      	cbnz	r3, 8012f44 <rcl_wait+0x44>
 8012f36:	f240 3085 	movw	r0, #901	@ 0x385
 8012f3a:	b00d      	add	sp, #52	@ 0x34
 8012f3c:	ecbd 8b02 	vpop	{d8}
 8012f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f44:	9b04      	ldr	r3, [sp, #16]
 8012f46:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8012f48:	2b01      	cmp	r3, #1
 8012f4a:	9b05      	ldr	r3, [sp, #20]
 8012f4c:	f173 0300 	sbcs.w	r3, r3, #0
 8012f50:	f2c0 80f0 	blt.w	8013134 <rcl_wait+0x234>
 8012f54:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8012f58:	4643      	mov	r3, r8
 8012f5a:	2a00      	cmp	r2, #0
 8012f5c:	f000 8133 	beq.w	80131c6 <rcl_wait+0x2c6>
 8012f60:	2400      	movs	r4, #0
 8012f62:	4613      	mov	r3, r2
 8012f64:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 80131d8 <rcl_wait+0x2d8>
 8012f68:	46a2      	mov	sl, r4
 8012f6a:	46a3      	mov	fp, r4
 8012f6c:	f240 3921 	movw	r9, #801	@ 0x321
 8012f70:	4632      	mov	r2, r6
 8012f72:	e014      	b.n	8012f9e <rcl_wait+0x9e>
 8012f74:	2800      	cmp	r0, #0
 8012f76:	d1e0      	bne.n	8012f3a <rcl_wait+0x3a>
 8012f78:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012f7c:	4542      	cmp	r2, r8
 8012f7e:	eb73 0107 	sbcs.w	r1, r3, r7
 8012f82:	da03      	bge.n	8012f8c <rcl_wait+0x8c>
 8012f84:	4690      	mov	r8, r2
 8012f86:	461f      	mov	r7, r3
 8012f88:	f04f 0b01 	mov.w	fp, #1
 8012f8c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8012f8e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8012f90:	3401      	adds	r4, #1
 8012f92:	f14a 0a00 	adc.w	sl, sl, #0
 8012f96:	429c      	cmp	r4, r3
 8012f98:	f17a 0100 	sbcs.w	r1, sl, #0
 8012f9c:	d228      	bcs.n	8012ff0 <rcl_wait+0xf0>
 8012f9e:	6928      	ldr	r0, [r5, #16]
 8012fa0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8012fa4:	a908      	add	r1, sp, #32
 8012fa6:	00a6      	lsls	r6, r4, #2
 8012fa8:	2800      	cmp	r0, #0
 8012faa:	d0f1      	beq.n	8012f90 <rcl_wait+0x90>
 8012fac:	68eb      	ldr	r3, [r5, #12]
 8012fae:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8012fb2:	4423      	add	r3, r4
 8012fb4:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8012fb8:	f1be 0f00 	cmp.w	lr, #0
 8012fbc:	d006      	beq.n	8012fcc <rcl_wait+0xcc>
 8012fbe:	6913      	ldr	r3, [r2, #16]
 8012fc0:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8012fc4:	3301      	adds	r3, #1
 8012fc6:	6113      	str	r3, [r2, #16]
 8012fc8:	692b      	ldr	r3, [r5, #16]
 8012fca:	5998      	ldr	r0, [r3, r6]
 8012fcc:	ed8d 8b08 	vstr	d8, [sp, #32]
 8012fd0:	f7ff fa94 	bl	80124fc <rcl_timer_get_time_until_next_call>
 8012fd4:	4548      	cmp	r0, r9
 8012fd6:	d1cd      	bne.n	8012f74 <rcl_wait+0x74>
 8012fd8:	692b      	ldr	r3, [r5, #16]
 8012fda:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8012fdc:	2100      	movs	r1, #0
 8012fde:	5199      	str	r1, [r3, r6]
 8012fe0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8012fe2:	3401      	adds	r4, #1
 8012fe4:	f14a 0a00 	adc.w	sl, sl, #0
 8012fe8:	429c      	cmp	r4, r3
 8012fea:	f17a 0100 	sbcs.w	r1, sl, #0
 8012fee:	d3d6      	bcc.n	8012f9e <rcl_wait+0x9e>
 8012ff0:	4616      	mov	r6, r2
 8012ff2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8012ff6:	4313      	orrs	r3, r2
 8012ff8:	46d9      	mov	r9, fp
 8012ffa:	f040 80a9 	bne.w	8013150 <rcl_wait+0x250>
 8012ffe:	2300      	movs	r3, #0
 8013000:	2200      	movs	r2, #0
 8013002:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013006:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801300a:	ab08      	add	r3, sp, #32
 801300c:	9302      	str	r3, [sp, #8]
 801300e:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8013010:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8013014:	e9cd 3200 	strd	r3, r2, [sp]
 8013018:	f106 0110 	add.w	r1, r6, #16
 801301c:	f106 031c 	add.w	r3, r6, #28
 8013020:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8013024:	1d30      	adds	r0, r6, #4
 8013026:	f001 ff1d 	bl	8014e64 <rmw_wait>
 801302a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801302c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801302e:	4680      	mov	r8, r0
 8013030:	b1ca      	cbz	r2, 8013066 <rcl_wait+0x166>
 8013032:	2400      	movs	r4, #0
 8013034:	4627      	mov	r7, r4
 8013036:	692a      	ldr	r2, [r5, #16]
 8013038:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 801303c:	f10d 011f 	add.w	r1, sp, #31
 8013040:	00a6      	lsls	r6, r4, #2
 8013042:	b160      	cbz	r0, 801305e <rcl_wait+0x15e>
 8013044:	f88d 701f 	strb.w	r7, [sp, #31]
 8013048:	f7ff fa1e 	bl	8012488 <rcl_timer_is_ready>
 801304c:	2800      	cmp	r0, #0
 801304e:	f47f af74 	bne.w	8012f3a <rcl_wait+0x3a>
 8013052:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8013056:	b90b      	cbnz	r3, 801305c <rcl_wait+0x15c>
 8013058:	692a      	ldr	r2, [r5, #16]
 801305a:	5193      	str	r3, [r2, r6]
 801305c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801305e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013060:	3401      	adds	r4, #1
 8013062:	42a2      	cmp	r2, r4
 8013064:	d8e7      	bhi.n	8013036 <rcl_wait+0x136>
 8013066:	f038 0002 	bics.w	r0, r8, #2
 801306a:	f040 8090 	bne.w	801318e <rcl_wait+0x28e>
 801306e:	686e      	ldr	r6, [r5, #4]
 8013070:	4602      	mov	r2, r0
 8013072:	b91e      	cbnz	r6, 801307c <rcl_wait+0x17c>
 8013074:	e00d      	b.n	8013092 <rcl_wait+0x192>
 8013076:	3201      	adds	r2, #1
 8013078:	42b2      	cmp	r2, r6
 801307a:	d00a      	beq.n	8013092 <rcl_wait+0x192>
 801307c:	6899      	ldr	r1, [r3, #8]
 801307e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013082:	2900      	cmp	r1, #0
 8013084:	d1f7      	bne.n	8013076 <rcl_wait+0x176>
 8013086:	682c      	ldr	r4, [r5, #0]
 8013088:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801308c:	3201      	adds	r2, #1
 801308e:	42b2      	cmp	r2, r6
 8013090:	d1f4      	bne.n	801307c <rcl_wait+0x17c>
 8013092:	68ee      	ldr	r6, [r5, #12]
 8013094:	2200      	movs	r2, #0
 8013096:	b91e      	cbnz	r6, 80130a0 <rcl_wait+0x1a0>
 8013098:	e00d      	b.n	80130b6 <rcl_wait+0x1b6>
 801309a:	3201      	adds	r2, #1
 801309c:	42b2      	cmp	r2, r6
 801309e:	d00a      	beq.n	80130b6 <rcl_wait+0x1b6>
 80130a0:	6959      	ldr	r1, [r3, #20]
 80130a2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80130a6:	2900      	cmp	r1, #0
 80130a8:	d1f7      	bne.n	801309a <rcl_wait+0x19a>
 80130aa:	68ac      	ldr	r4, [r5, #8]
 80130ac:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80130b0:	3201      	adds	r2, #1
 80130b2:	42b2      	cmp	r2, r6
 80130b4:	d1f4      	bne.n	80130a0 <rcl_wait+0x1a0>
 80130b6:	69ee      	ldr	r6, [r5, #28]
 80130b8:	2200      	movs	r2, #0
 80130ba:	b91e      	cbnz	r6, 80130c4 <rcl_wait+0x1c4>
 80130bc:	e00d      	b.n	80130da <rcl_wait+0x1da>
 80130be:	3201      	adds	r2, #1
 80130c0:	42b2      	cmp	r2, r6
 80130c2:	d00a      	beq.n	80130da <rcl_wait+0x1da>
 80130c4:	6a19      	ldr	r1, [r3, #32]
 80130c6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80130ca:	2900      	cmp	r1, #0
 80130cc:	d1f7      	bne.n	80130be <rcl_wait+0x1be>
 80130ce:	69ac      	ldr	r4, [r5, #24]
 80130d0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80130d4:	3201      	adds	r2, #1
 80130d6:	42b2      	cmp	r2, r6
 80130d8:	d1f4      	bne.n	80130c4 <rcl_wait+0x1c4>
 80130da:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 80130dc:	2200      	movs	r2, #0
 80130de:	b91e      	cbnz	r6, 80130e8 <rcl_wait+0x1e8>
 80130e0:	e00d      	b.n	80130fe <rcl_wait+0x1fe>
 80130e2:	3201      	adds	r2, #1
 80130e4:	4296      	cmp	r6, r2
 80130e6:	d00a      	beq.n	80130fe <rcl_wait+0x1fe>
 80130e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80130ea:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80130ee:	2900      	cmp	r1, #0
 80130f0:	d1f7      	bne.n	80130e2 <rcl_wait+0x1e2>
 80130f2:	6a2c      	ldr	r4, [r5, #32]
 80130f4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80130f8:	3201      	adds	r2, #1
 80130fa:	4296      	cmp	r6, r2
 80130fc:	d1f4      	bne.n	80130e8 <rcl_wait+0x1e8>
 80130fe:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8013100:	2200      	movs	r2, #0
 8013102:	b91e      	cbnz	r6, 801310c <rcl_wait+0x20c>
 8013104:	e00d      	b.n	8013122 <rcl_wait+0x222>
 8013106:	3201      	adds	r2, #1
 8013108:	42b2      	cmp	r2, r6
 801310a:	d00a      	beq.n	8013122 <rcl_wait+0x222>
 801310c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801310e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013112:	2900      	cmp	r1, #0
 8013114:	d1f7      	bne.n	8013106 <rcl_wait+0x206>
 8013116:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8013118:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801311c:	3201      	adds	r2, #1
 801311e:	42b2      	cmp	r2, r6
 8013120:	d1f4      	bne.n	801310c <rcl_wait+0x20c>
 8013122:	f1b8 0f02 	cmp.w	r8, #2
 8013126:	f47f af08 	bne.w	8012f3a <rcl_wait+0x3a>
 801312a:	464b      	mov	r3, r9
 801312c:	2b00      	cmp	r3, #0
 801312e:	bf08      	it	eq
 8013130:	2002      	moveq	r0, #2
 8013132:	e702      	b.n	8012f3a <rcl_wait+0x3a>
 8013134:	2a00      	cmp	r2, #0
 8013136:	d03a      	beq.n	80131ae <rcl_wait+0x2ae>
 8013138:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801313c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8013140:	e70e      	b.n	8012f60 <rcl_wait+0x60>
 8013142:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013146:	b00d      	add	sp, #52	@ 0x34
 8013148:	ecbd 8b02 	vpop	{d8}
 801314c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013150:	9b04      	ldr	r3, [sp, #16]
 8013152:	2b01      	cmp	r3, #1
 8013154:	9b05      	ldr	r3, [sp, #20]
 8013156:	f173 0300 	sbcs.w	r3, r3, #0
 801315a:	db24      	blt.n	80131a6 <rcl_wait+0x2a6>
 801315c:	2f00      	cmp	r7, #0
 801315e:	bfbc      	itt	lt
 8013160:	f04f 0800 	movlt.w	r8, #0
 8013164:	4647      	movlt	r7, r8
 8013166:	a31e      	add	r3, pc, #120	@ (adr r3, 80131e0 <rcl_wait+0x2e0>)
 8013168:	e9d3 2300 	ldrd	r2, r3, [r3]
 801316c:	4640      	mov	r0, r8
 801316e:	4639      	mov	r1, r7
 8013170:	f7ed fcac 	bl	8000acc <__aeabi_ldivmod>
 8013174:	a31a      	add	r3, pc, #104	@ (adr r3, 80131e0 <rcl_wait+0x2e0>)
 8013176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801317a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801317e:	4640      	mov	r0, r8
 8013180:	4639      	mov	r1, r7
 8013182:	f7ed fca3 	bl	8000acc <__aeabi_ldivmod>
 8013186:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801318a:	ab08      	add	r3, sp, #32
 801318c:	e73e      	b.n	801300c <rcl_wait+0x10c>
 801318e:	2001      	movs	r0, #1
 8013190:	b00d      	add	sp, #52	@ 0x34
 8013192:	ecbd 8b02 	vpop	{d8}
 8013196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801319a:	200b      	movs	r0, #11
 801319c:	b00d      	add	sp, #52	@ 0x34
 801319e:	ecbd 8b02 	vpop	{d8}
 80131a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131a6:	465b      	mov	r3, fp
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d1d7      	bne.n	801315c <rcl_wait+0x25c>
 80131ac:	e72e      	b.n	801300c <rcl_wait+0x10c>
 80131ae:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80131b2:	430b      	orrs	r3, r1
 80131b4:	bf08      	it	eq
 80131b6:	4691      	moveq	r9, r2
 80131b8:	f43f af21 	beq.w	8012ffe <rcl_wait+0xfe>
 80131bc:	9b04      	ldr	r3, [sp, #16]
 80131be:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80131c2:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80131c6:	2b01      	cmp	r3, #1
 80131c8:	9b05      	ldr	r3, [sp, #20]
 80131ca:	f173 0300 	sbcs.w	r3, r3, #0
 80131ce:	f04f 0300 	mov.w	r3, #0
 80131d2:	4699      	mov	r9, r3
 80131d4:	dac2      	bge.n	801315c <rcl_wait+0x25c>
 80131d6:	e719      	b.n	801300c <rcl_wait+0x10c>
 80131d8:	ffffffff 	.word	0xffffffff
 80131dc:	7fffffff 	.word	0x7fffffff
 80131e0:	3b9aca00 	.word	0x3b9aca00
 80131e4:	00000000 	.word	0x00000000

080131e8 <rcl_action_take_goal_response>:
 80131e8:	2800      	cmp	r0, #0
 80131ea:	d039      	beq.n	8013260 <rcl_action_take_goal_response+0x78>
 80131ec:	b570      	push	{r4, r5, r6, lr}
 80131ee:	4604      	mov	r4, r0
 80131f0:	6800      	ldr	r0, [r0, #0]
 80131f2:	b380      	cbz	r0, 8013256 <rcl_action_take_goal_response+0x6e>
 80131f4:	460d      	mov	r5, r1
 80131f6:	4616      	mov	r6, r2
 80131f8:	f7fd ff66 	bl	80110c8 <rcl_client_is_valid>
 80131fc:	b330      	cbz	r0, 801324c <rcl_action_take_goal_response+0x64>
 80131fe:	6820      	ldr	r0, [r4, #0]
 8013200:	3004      	adds	r0, #4
 8013202:	f7fd ff61 	bl	80110c8 <rcl_client_is_valid>
 8013206:	b308      	cbz	r0, 801324c <rcl_action_take_goal_response+0x64>
 8013208:	6820      	ldr	r0, [r4, #0]
 801320a:	3008      	adds	r0, #8
 801320c:	f7fd ff5c 	bl	80110c8 <rcl_client_is_valid>
 8013210:	b1e0      	cbz	r0, 801324c <rcl_action_take_goal_response+0x64>
 8013212:	6820      	ldr	r0, [r4, #0]
 8013214:	300c      	adds	r0, #12
 8013216:	f7fe fdf5 	bl	8011e04 <rcl_subscription_is_valid>
 801321a:	b1b8      	cbz	r0, 801324c <rcl_action_take_goal_response+0x64>
 801321c:	6820      	ldr	r0, [r4, #0]
 801321e:	3010      	adds	r0, #16
 8013220:	f7fe fdf0 	bl	8011e04 <rcl_subscription_is_valid>
 8013224:	b190      	cbz	r0, 801324c <rcl_action_take_goal_response+0x64>
 8013226:	b1cd      	cbz	r5, 801325c <rcl_action_take_goal_response+0x74>
 8013228:	b1c6      	cbz	r6, 801325c <rcl_action_take_goal_response+0x74>
 801322a:	6820      	ldr	r0, [r4, #0]
 801322c:	4632      	mov	r2, r6
 801322e:	4629      	mov	r1, r5
 8013230:	f7fd ff02 	bl	8011038 <rcl_take_response>
 8013234:	b148      	cbz	r0, 801324a <rcl_action_take_goal_response+0x62>
 8013236:	280a      	cmp	r0, #10
 8013238:	d007      	beq.n	801324a <rcl_action_take_goal_response+0x62>
 801323a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801323e:	f640 0337 	movw	r3, #2103	@ 0x837
 8013242:	4290      	cmp	r0, r2
 8013244:	bf0c      	ite	eq
 8013246:	4618      	moveq	r0, r3
 8013248:	2001      	movne	r0, #1
 801324a:	bd70      	pop	{r4, r5, r6, pc}
 801324c:	f7f8 fa94 	bl	800b778 <rcutils_reset_error>
 8013250:	f640 0036 	movw	r0, #2102	@ 0x836
 8013254:	bd70      	pop	{r4, r5, r6, pc}
 8013256:	f640 0036 	movw	r0, #2102	@ 0x836
 801325a:	bd70      	pop	{r4, r5, r6, pc}
 801325c:	200b      	movs	r0, #11
 801325e:	bd70      	pop	{r4, r5, r6, pc}
 8013260:	f640 0036 	movw	r0, #2102	@ 0x836
 8013264:	4770      	bx	lr
 8013266:	bf00      	nop

08013268 <rcl_action_send_result_request>:
 8013268:	b390      	cbz	r0, 80132d0 <rcl_action_send_result_request+0x68>
 801326a:	b570      	push	{r4, r5, r6, lr}
 801326c:	4604      	mov	r4, r0
 801326e:	6800      	ldr	r0, [r0, #0]
 8013270:	b348      	cbz	r0, 80132c6 <rcl_action_send_result_request+0x5e>
 8013272:	460d      	mov	r5, r1
 8013274:	4616      	mov	r6, r2
 8013276:	f7fd ff27 	bl	80110c8 <rcl_client_is_valid>
 801327a:	b1f8      	cbz	r0, 80132bc <rcl_action_send_result_request+0x54>
 801327c:	6820      	ldr	r0, [r4, #0]
 801327e:	3004      	adds	r0, #4
 8013280:	f7fd ff22 	bl	80110c8 <rcl_client_is_valid>
 8013284:	b1d0      	cbz	r0, 80132bc <rcl_action_send_result_request+0x54>
 8013286:	6820      	ldr	r0, [r4, #0]
 8013288:	3008      	adds	r0, #8
 801328a:	f7fd ff1d 	bl	80110c8 <rcl_client_is_valid>
 801328e:	b1a8      	cbz	r0, 80132bc <rcl_action_send_result_request+0x54>
 8013290:	6820      	ldr	r0, [r4, #0]
 8013292:	300c      	adds	r0, #12
 8013294:	f7fe fdb6 	bl	8011e04 <rcl_subscription_is_valid>
 8013298:	b180      	cbz	r0, 80132bc <rcl_action_send_result_request+0x54>
 801329a:	6820      	ldr	r0, [r4, #0]
 801329c:	3010      	adds	r0, #16
 801329e:	f7fe fdb1 	bl	8011e04 <rcl_subscription_is_valid>
 80132a2:	b158      	cbz	r0, 80132bc <rcl_action_send_result_request+0x54>
 80132a4:	b195      	cbz	r5, 80132cc <rcl_action_send_result_request+0x64>
 80132a6:	b18e      	cbz	r6, 80132cc <rcl_action_send_result_request+0x64>
 80132a8:	6820      	ldr	r0, [r4, #0]
 80132aa:	4632      	mov	r2, r6
 80132ac:	4629      	mov	r1, r5
 80132ae:	3008      	adds	r0, #8
 80132b0:	f7fd fe8a 	bl	8010fc8 <rcl_send_request>
 80132b4:	3800      	subs	r0, #0
 80132b6:	bf18      	it	ne
 80132b8:	2001      	movne	r0, #1
 80132ba:	bd70      	pop	{r4, r5, r6, pc}
 80132bc:	f7f8 fa5c 	bl	800b778 <rcutils_reset_error>
 80132c0:	f640 0036 	movw	r0, #2102	@ 0x836
 80132c4:	bd70      	pop	{r4, r5, r6, pc}
 80132c6:	f640 0036 	movw	r0, #2102	@ 0x836
 80132ca:	bd70      	pop	{r4, r5, r6, pc}
 80132cc:	200b      	movs	r0, #11
 80132ce:	bd70      	pop	{r4, r5, r6, pc}
 80132d0:	f640 0036 	movw	r0, #2102	@ 0x836
 80132d4:	4770      	bx	lr
 80132d6:	bf00      	nop

080132d8 <rcl_action_take_result_response>:
 80132d8:	2800      	cmp	r0, #0
 80132da:	d03a      	beq.n	8013352 <rcl_action_take_result_response+0x7a>
 80132dc:	b570      	push	{r4, r5, r6, lr}
 80132de:	4604      	mov	r4, r0
 80132e0:	6800      	ldr	r0, [r0, #0]
 80132e2:	b388      	cbz	r0, 8013348 <rcl_action_take_result_response+0x70>
 80132e4:	460d      	mov	r5, r1
 80132e6:	4616      	mov	r6, r2
 80132e8:	f7fd feee 	bl	80110c8 <rcl_client_is_valid>
 80132ec:	b338      	cbz	r0, 801333e <rcl_action_take_result_response+0x66>
 80132ee:	6820      	ldr	r0, [r4, #0]
 80132f0:	3004      	adds	r0, #4
 80132f2:	f7fd fee9 	bl	80110c8 <rcl_client_is_valid>
 80132f6:	b310      	cbz	r0, 801333e <rcl_action_take_result_response+0x66>
 80132f8:	6820      	ldr	r0, [r4, #0]
 80132fa:	3008      	adds	r0, #8
 80132fc:	f7fd fee4 	bl	80110c8 <rcl_client_is_valid>
 8013300:	b1e8      	cbz	r0, 801333e <rcl_action_take_result_response+0x66>
 8013302:	6820      	ldr	r0, [r4, #0]
 8013304:	300c      	adds	r0, #12
 8013306:	f7fe fd7d 	bl	8011e04 <rcl_subscription_is_valid>
 801330a:	b1c0      	cbz	r0, 801333e <rcl_action_take_result_response+0x66>
 801330c:	6820      	ldr	r0, [r4, #0]
 801330e:	3010      	adds	r0, #16
 8013310:	f7fe fd78 	bl	8011e04 <rcl_subscription_is_valid>
 8013314:	b198      	cbz	r0, 801333e <rcl_action_take_result_response+0x66>
 8013316:	b1d5      	cbz	r5, 801334e <rcl_action_take_result_response+0x76>
 8013318:	b1ce      	cbz	r6, 801334e <rcl_action_take_result_response+0x76>
 801331a:	6820      	ldr	r0, [r4, #0]
 801331c:	4632      	mov	r2, r6
 801331e:	4629      	mov	r1, r5
 8013320:	3008      	adds	r0, #8
 8013322:	f7fd fe89 	bl	8011038 <rcl_take_response>
 8013326:	b148      	cbz	r0, 801333c <rcl_action_take_result_response+0x64>
 8013328:	280a      	cmp	r0, #10
 801332a:	d007      	beq.n	801333c <rcl_action_take_result_response+0x64>
 801332c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013330:	f640 0337 	movw	r3, #2103	@ 0x837
 8013334:	4290      	cmp	r0, r2
 8013336:	bf0c      	ite	eq
 8013338:	4618      	moveq	r0, r3
 801333a:	2001      	movne	r0, #1
 801333c:	bd70      	pop	{r4, r5, r6, pc}
 801333e:	f7f8 fa1b 	bl	800b778 <rcutils_reset_error>
 8013342:	f640 0036 	movw	r0, #2102	@ 0x836
 8013346:	bd70      	pop	{r4, r5, r6, pc}
 8013348:	f640 0036 	movw	r0, #2102	@ 0x836
 801334c:	bd70      	pop	{r4, r5, r6, pc}
 801334e:	200b      	movs	r0, #11
 8013350:	bd70      	pop	{r4, r5, r6, pc}
 8013352:	f640 0036 	movw	r0, #2102	@ 0x836
 8013356:	4770      	bx	lr

08013358 <rcl_action_take_cancel_response>:
 8013358:	2800      	cmp	r0, #0
 801335a:	d03a      	beq.n	80133d2 <rcl_action_take_cancel_response+0x7a>
 801335c:	b570      	push	{r4, r5, r6, lr}
 801335e:	4604      	mov	r4, r0
 8013360:	6800      	ldr	r0, [r0, #0]
 8013362:	b388      	cbz	r0, 80133c8 <rcl_action_take_cancel_response+0x70>
 8013364:	460d      	mov	r5, r1
 8013366:	4616      	mov	r6, r2
 8013368:	f7fd feae 	bl	80110c8 <rcl_client_is_valid>
 801336c:	b338      	cbz	r0, 80133be <rcl_action_take_cancel_response+0x66>
 801336e:	6820      	ldr	r0, [r4, #0]
 8013370:	3004      	adds	r0, #4
 8013372:	f7fd fea9 	bl	80110c8 <rcl_client_is_valid>
 8013376:	b310      	cbz	r0, 80133be <rcl_action_take_cancel_response+0x66>
 8013378:	6820      	ldr	r0, [r4, #0]
 801337a:	3008      	adds	r0, #8
 801337c:	f7fd fea4 	bl	80110c8 <rcl_client_is_valid>
 8013380:	b1e8      	cbz	r0, 80133be <rcl_action_take_cancel_response+0x66>
 8013382:	6820      	ldr	r0, [r4, #0]
 8013384:	300c      	adds	r0, #12
 8013386:	f7fe fd3d 	bl	8011e04 <rcl_subscription_is_valid>
 801338a:	b1c0      	cbz	r0, 80133be <rcl_action_take_cancel_response+0x66>
 801338c:	6820      	ldr	r0, [r4, #0]
 801338e:	3010      	adds	r0, #16
 8013390:	f7fe fd38 	bl	8011e04 <rcl_subscription_is_valid>
 8013394:	b198      	cbz	r0, 80133be <rcl_action_take_cancel_response+0x66>
 8013396:	b1d5      	cbz	r5, 80133ce <rcl_action_take_cancel_response+0x76>
 8013398:	b1ce      	cbz	r6, 80133ce <rcl_action_take_cancel_response+0x76>
 801339a:	6820      	ldr	r0, [r4, #0]
 801339c:	4632      	mov	r2, r6
 801339e:	4629      	mov	r1, r5
 80133a0:	3004      	adds	r0, #4
 80133a2:	f7fd fe49 	bl	8011038 <rcl_take_response>
 80133a6:	b148      	cbz	r0, 80133bc <rcl_action_take_cancel_response+0x64>
 80133a8:	280a      	cmp	r0, #10
 80133aa:	d007      	beq.n	80133bc <rcl_action_take_cancel_response+0x64>
 80133ac:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80133b0:	f640 0337 	movw	r3, #2103	@ 0x837
 80133b4:	4290      	cmp	r0, r2
 80133b6:	bf0c      	ite	eq
 80133b8:	4618      	moveq	r0, r3
 80133ba:	2001      	movne	r0, #1
 80133bc:	bd70      	pop	{r4, r5, r6, pc}
 80133be:	f7f8 f9db 	bl	800b778 <rcutils_reset_error>
 80133c2:	f640 0036 	movw	r0, #2102	@ 0x836
 80133c6:	bd70      	pop	{r4, r5, r6, pc}
 80133c8:	f640 0036 	movw	r0, #2102	@ 0x836
 80133cc:	bd70      	pop	{r4, r5, r6, pc}
 80133ce:	200b      	movs	r0, #11
 80133d0:	bd70      	pop	{r4, r5, r6, pc}
 80133d2:	f640 0036 	movw	r0, #2102	@ 0x836
 80133d6:	4770      	bx	lr

080133d8 <rcl_action_take_feedback>:
 80133d8:	2800      	cmp	r0, #0
 80133da:	d038      	beq.n	801344e <rcl_action_take_feedback+0x76>
 80133dc:	b530      	push	{r4, r5, lr}
 80133de:	4604      	mov	r4, r0
 80133e0:	6800      	ldr	r0, [r0, #0]
 80133e2:	b091      	sub	sp, #68	@ 0x44
 80133e4:	b378      	cbz	r0, 8013446 <rcl_action_take_feedback+0x6e>
 80133e6:	460d      	mov	r5, r1
 80133e8:	f7fd fe6e 	bl	80110c8 <rcl_client_is_valid>
 80133ec:	b328      	cbz	r0, 801343a <rcl_action_take_feedback+0x62>
 80133ee:	6820      	ldr	r0, [r4, #0]
 80133f0:	3004      	adds	r0, #4
 80133f2:	f7fd fe69 	bl	80110c8 <rcl_client_is_valid>
 80133f6:	b300      	cbz	r0, 801343a <rcl_action_take_feedback+0x62>
 80133f8:	6820      	ldr	r0, [r4, #0]
 80133fa:	3008      	adds	r0, #8
 80133fc:	f7fd fe64 	bl	80110c8 <rcl_client_is_valid>
 8013400:	b1d8      	cbz	r0, 801343a <rcl_action_take_feedback+0x62>
 8013402:	6820      	ldr	r0, [r4, #0]
 8013404:	300c      	adds	r0, #12
 8013406:	f7fe fcfd 	bl	8011e04 <rcl_subscription_is_valid>
 801340a:	b1b0      	cbz	r0, 801343a <rcl_action_take_feedback+0x62>
 801340c:	6820      	ldr	r0, [r4, #0]
 801340e:	3010      	adds	r0, #16
 8013410:	f7fe fcf8 	bl	8011e04 <rcl_subscription_is_valid>
 8013414:	b188      	cbz	r0, 801343a <rcl_action_take_feedback+0x62>
 8013416:	b1ed      	cbz	r5, 8013454 <rcl_action_take_feedback+0x7c>
 8013418:	6820      	ldr	r0, [r4, #0]
 801341a:	2300      	movs	r3, #0
 801341c:	466a      	mov	r2, sp
 801341e:	4629      	mov	r1, r5
 8013420:	300c      	adds	r0, #12
 8013422:	f7fe fc91 	bl	8011d48 <rcl_take>
 8013426:	b160      	cbz	r0, 8013442 <rcl_action_take_feedback+0x6a>
 8013428:	f240 1391 	movw	r3, #401	@ 0x191
 801342c:	4298      	cmp	r0, r3
 801342e:	d014      	beq.n	801345a <rcl_action_take_feedback+0x82>
 8013430:	280a      	cmp	r0, #10
 8013432:	bf18      	it	ne
 8013434:	2001      	movne	r0, #1
 8013436:	b011      	add	sp, #68	@ 0x44
 8013438:	bd30      	pop	{r4, r5, pc}
 801343a:	f7f8 f99d 	bl	800b778 <rcutils_reset_error>
 801343e:	f640 0036 	movw	r0, #2102	@ 0x836
 8013442:	b011      	add	sp, #68	@ 0x44
 8013444:	bd30      	pop	{r4, r5, pc}
 8013446:	f640 0036 	movw	r0, #2102	@ 0x836
 801344a:	b011      	add	sp, #68	@ 0x44
 801344c:	bd30      	pop	{r4, r5, pc}
 801344e:	f640 0036 	movw	r0, #2102	@ 0x836
 8013452:	4770      	bx	lr
 8013454:	200b      	movs	r0, #11
 8013456:	b011      	add	sp, #68	@ 0x44
 8013458:	bd30      	pop	{r4, r5, pc}
 801345a:	f640 0037 	movw	r0, #2103	@ 0x837
 801345e:	e7f0      	b.n	8013442 <rcl_action_take_feedback+0x6a>

08013460 <rcl_action_wait_set_add_action_client>:
 8013460:	2800      	cmp	r0, #0
 8013462:	d048      	beq.n	80134f6 <rcl_action_wait_set_add_action_client+0x96>
 8013464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013466:	460c      	mov	r4, r1
 8013468:	2900      	cmp	r1, #0
 801346a:	d03c      	beq.n	80134e6 <rcl_action_wait_set_add_action_client+0x86>
 801346c:	4605      	mov	r5, r0
 801346e:	6808      	ldr	r0, [r1, #0]
 8013470:	2800      	cmp	r0, #0
 8013472:	d038      	beq.n	80134e6 <rcl_action_wait_set_add_action_client+0x86>
 8013474:	4617      	mov	r7, r2
 8013476:	461e      	mov	r6, r3
 8013478:	f7fd fe26 	bl	80110c8 <rcl_client_is_valid>
 801347c:	b3b0      	cbz	r0, 80134ec <rcl_action_wait_set_add_action_client+0x8c>
 801347e:	6820      	ldr	r0, [r4, #0]
 8013480:	3004      	adds	r0, #4
 8013482:	f7fd fe21 	bl	80110c8 <rcl_client_is_valid>
 8013486:	b388      	cbz	r0, 80134ec <rcl_action_wait_set_add_action_client+0x8c>
 8013488:	6820      	ldr	r0, [r4, #0]
 801348a:	3008      	adds	r0, #8
 801348c:	f7fd fe1c 	bl	80110c8 <rcl_client_is_valid>
 8013490:	b360      	cbz	r0, 80134ec <rcl_action_wait_set_add_action_client+0x8c>
 8013492:	6820      	ldr	r0, [r4, #0]
 8013494:	300c      	adds	r0, #12
 8013496:	f7fe fcb5 	bl	8011e04 <rcl_subscription_is_valid>
 801349a:	b338      	cbz	r0, 80134ec <rcl_action_wait_set_add_action_client+0x8c>
 801349c:	6820      	ldr	r0, [r4, #0]
 801349e:	3010      	adds	r0, #16
 80134a0:	f7fe fcb0 	bl	8011e04 <rcl_subscription_is_valid>
 80134a4:	b310      	cbz	r0, 80134ec <rcl_action_wait_set_add_action_client+0x8c>
 80134a6:	6821      	ldr	r1, [r4, #0]
 80134a8:	4628      	mov	r0, r5
 80134aa:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 80134ae:	f7ff fccd 	bl	8012e4c <rcl_wait_set_add_client>
 80134b2:	b9b8      	cbnz	r0, 80134e4 <rcl_action_wait_set_add_action_client+0x84>
 80134b4:	6821      	ldr	r1, [r4, #0]
 80134b6:	4628      	mov	r0, r5
 80134b8:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 80134bc:	3104      	adds	r1, #4
 80134be:	f7ff fcc5 	bl	8012e4c <rcl_wait_set_add_client>
 80134c2:	b978      	cbnz	r0, 80134e4 <rcl_action_wait_set_add_action_client+0x84>
 80134c4:	6821      	ldr	r1, [r4, #0]
 80134c6:	4628      	mov	r0, r5
 80134c8:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 80134cc:	3108      	adds	r1, #8
 80134ce:	f7ff fcbd 	bl	8012e4c <rcl_wait_set_add_client>
 80134d2:	b938      	cbnz	r0, 80134e4 <rcl_action_wait_set_add_action_client+0x84>
 80134d4:	6821      	ldr	r1, [r4, #0]
 80134d6:	4628      	mov	r0, r5
 80134d8:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80134dc:	310c      	adds	r1, #12
 80134de:	f7ff f96d 	bl	80127bc <rcl_wait_set_add_subscription>
 80134e2:	b158      	cbz	r0, 80134fc <rcl_action_wait_set_add_action_client+0x9c>
 80134e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134e6:	f640 0036 	movw	r0, #2102	@ 0x836
 80134ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134ec:	f7f8 f944 	bl	800b778 <rcutils_reset_error>
 80134f0:	f640 0036 	movw	r0, #2102	@ 0x836
 80134f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134f6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80134fa:	4770      	bx	lr
 80134fc:	6821      	ldr	r1, [r4, #0]
 80134fe:	4628      	mov	r0, r5
 8013500:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8013504:	3110      	adds	r1, #16
 8013506:	f7ff f959 	bl	80127bc <rcl_wait_set_add_subscription>
 801350a:	2800      	cmp	r0, #0
 801350c:	d1ea      	bne.n	80134e4 <rcl_action_wait_set_add_action_client+0x84>
 801350e:	b11f      	cbz	r7, 8013518 <rcl_action_wait_set_add_action_client+0xb8>
 8013510:	6823      	ldr	r3, [r4, #0]
 8013512:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8013516:	603b      	str	r3, [r7, #0]
 8013518:	2e00      	cmp	r6, #0
 801351a:	d0e3      	beq.n	80134e4 <rcl_action_wait_set_add_action_client+0x84>
 801351c:	6823      	ldr	r3, [r4, #0]
 801351e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8013522:	6033      	str	r3, [r6, #0]
 8013524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013526:	bf00      	nop

08013528 <rcl_action_client_wait_set_get_entities_ready>:
 8013528:	2800      	cmp	r0, #0
 801352a:	f000 808d 	beq.w	8013648 <rcl_action_client_wait_set_get_entities_ready+0x120>
 801352e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013532:	460c      	mov	r4, r1
 8013534:	2900      	cmp	r1, #0
 8013536:	d077      	beq.n	8013628 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8013538:	4605      	mov	r5, r0
 801353a:	6808      	ldr	r0, [r1, #0]
 801353c:	2800      	cmp	r0, #0
 801353e:	d073      	beq.n	8013628 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8013540:	4616      	mov	r6, r2
 8013542:	461f      	mov	r7, r3
 8013544:	f7fd fdc0 	bl	80110c8 <rcl_client_is_valid>
 8013548:	2800      	cmp	r0, #0
 801354a:	d071      	beq.n	8013630 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801354c:	6820      	ldr	r0, [r4, #0]
 801354e:	3004      	adds	r0, #4
 8013550:	f7fd fdba 	bl	80110c8 <rcl_client_is_valid>
 8013554:	2800      	cmp	r0, #0
 8013556:	d06b      	beq.n	8013630 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013558:	6820      	ldr	r0, [r4, #0]
 801355a:	3008      	adds	r0, #8
 801355c:	f7fd fdb4 	bl	80110c8 <rcl_client_is_valid>
 8013560:	2800      	cmp	r0, #0
 8013562:	d065      	beq.n	8013630 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013564:	6820      	ldr	r0, [r4, #0]
 8013566:	300c      	adds	r0, #12
 8013568:	f7fe fc4c 	bl	8011e04 <rcl_subscription_is_valid>
 801356c:	2800      	cmp	r0, #0
 801356e:	d05f      	beq.n	8013630 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8013570:	6820      	ldr	r0, [r4, #0]
 8013572:	3010      	adds	r0, #16
 8013574:	f7fe fc46 	bl	8011e04 <rcl_subscription_is_valid>
 8013578:	2800      	cmp	r0, #0
 801357a:	d059      	beq.n	8013630 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801357c:	2e00      	cmp	r6, #0
 801357e:	d060      	beq.n	8013642 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8013580:	2f00      	cmp	r7, #0
 8013582:	d05e      	beq.n	8013642 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8013584:	9b06      	ldr	r3, [sp, #24]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d05b      	beq.n	8013642 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801358a:	9b07      	ldr	r3, [sp, #28]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d058      	beq.n	8013642 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8013590:	9b08      	ldr	r3, [sp, #32]
 8013592:	2b00      	cmp	r3, #0
 8013594:	d055      	beq.n	8013642 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8013596:	6823      	ldr	r3, [r4, #0]
 8013598:	686a      	ldr	r2, [r5, #4]
 801359a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 801359e:	428a      	cmp	r2, r1
 80135a0:	d94c      	bls.n	801363c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80135a2:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 80135a6:	4282      	cmp	r2, r0
 80135a8:	d948      	bls.n	801363c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80135aa:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 80135ae:	69ea      	ldr	r2, [r5, #28]
 80135b0:	42a2      	cmp	r2, r4
 80135b2:	d943      	bls.n	801363c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80135b4:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 80135b8:	4562      	cmp	r2, ip
 80135ba:	d93f      	bls.n	801363c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80135bc:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 80135c0:	4572      	cmp	r2, lr
 80135c2:	d93b      	bls.n	801363c <rcl_action_client_wait_set_get_entities_ready+0x114>
 80135c4:	69aa      	ldr	r2, [r5, #24]
 80135c6:	682d      	ldr	r5, [r5, #0]
 80135c8:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 80135cc:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80135d0:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80135d4:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80135d8:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80135dc:	f103 0c0c 	add.w	ip, r3, #12
 80135e0:	eba5 050c 	sub.w	r5, r5, ip
 80135e4:	fab5 f585 	clz	r5, r5
 80135e8:	096d      	lsrs	r5, r5, #5
 80135ea:	7035      	strb	r5, [r6, #0]
 80135ec:	f103 0510 	add.w	r5, r3, #16
 80135f0:	1b64      	subs	r4, r4, r5
 80135f2:	fab4 f484 	clz	r4, r4
 80135f6:	0964      	lsrs	r4, r4, #5
 80135f8:	703c      	strb	r4, [r7, #0]
 80135fa:	eba3 0008 	sub.w	r0, r3, r8
 80135fe:	1d1c      	adds	r4, r3, #4
 8013600:	3308      	adds	r3, #8
 8013602:	1ad3      	subs	r3, r2, r3
 8013604:	fab0 f080 	clz	r0, r0
 8013608:	9a06      	ldr	r2, [sp, #24]
 801360a:	0940      	lsrs	r0, r0, #5
 801360c:	1b09      	subs	r1, r1, r4
 801360e:	7010      	strb	r0, [r2, #0]
 8013610:	fab1 f181 	clz	r1, r1
 8013614:	9a07      	ldr	r2, [sp, #28]
 8013616:	0949      	lsrs	r1, r1, #5
 8013618:	7011      	strb	r1, [r2, #0]
 801361a:	fab3 f383 	clz	r3, r3
 801361e:	9a08      	ldr	r2, [sp, #32]
 8013620:	095b      	lsrs	r3, r3, #5
 8013622:	2000      	movs	r0, #0
 8013624:	7013      	strb	r3, [r2, #0]
 8013626:	e001      	b.n	801362c <rcl_action_client_wait_set_get_entities_ready+0x104>
 8013628:	f640 0036 	movw	r0, #2102	@ 0x836
 801362c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013630:	f7f8 f8a2 	bl	800b778 <rcutils_reset_error>
 8013634:	f640 0036 	movw	r0, #2102	@ 0x836
 8013638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801363c:	2001      	movs	r0, #1
 801363e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013642:	200b      	movs	r0, #11
 8013644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013648:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801364c:	4770      	bx	lr
 801364e:	bf00      	nop

08013650 <rcl_action_take_goal_request>:
 8013650:	2800      	cmp	r0, #0
 8013652:	d039      	beq.n	80136c8 <rcl_action_take_goal_request+0x78>
 8013654:	b570      	push	{r4, r5, r6, lr}
 8013656:	4604      	mov	r4, r0
 8013658:	6800      	ldr	r0, [r0, #0]
 801365a:	b380      	cbz	r0, 80136be <rcl_action_take_goal_request+0x6e>
 801365c:	460d      	mov	r5, r1
 801365e:	4616      	mov	r6, r2
 8013660:	f7fe fa8c 	bl	8011b7c <rcl_service_is_valid>
 8013664:	b330      	cbz	r0, 80136b4 <rcl_action_take_goal_request+0x64>
 8013666:	6820      	ldr	r0, [r4, #0]
 8013668:	3004      	adds	r0, #4
 801366a:	f7fe fa87 	bl	8011b7c <rcl_service_is_valid>
 801366e:	b308      	cbz	r0, 80136b4 <rcl_action_take_goal_request+0x64>
 8013670:	6820      	ldr	r0, [r4, #0]
 8013672:	3008      	adds	r0, #8
 8013674:	f7fe fa82 	bl	8011b7c <rcl_service_is_valid>
 8013678:	b1e0      	cbz	r0, 80136b4 <rcl_action_take_goal_request+0x64>
 801367a:	6820      	ldr	r0, [r4, #0]
 801367c:	300c      	adds	r0, #12
 801367e:	f002 ff83 	bl	8016588 <rcl_publisher_is_valid>
 8013682:	b1b8      	cbz	r0, 80136b4 <rcl_action_take_goal_request+0x64>
 8013684:	6820      	ldr	r0, [r4, #0]
 8013686:	3010      	adds	r0, #16
 8013688:	f002 ff7e 	bl	8016588 <rcl_publisher_is_valid>
 801368c:	b190      	cbz	r0, 80136b4 <rcl_action_take_goal_request+0x64>
 801368e:	b1cd      	cbz	r5, 80136c4 <rcl_action_take_goal_request+0x74>
 8013690:	b1c6      	cbz	r6, 80136c4 <rcl_action_take_goal_request+0x74>
 8013692:	6820      	ldr	r0, [r4, #0]
 8013694:	4632      	mov	r2, r6
 8013696:	4629      	mov	r1, r5
 8013698:	f7fe fa18 	bl	8011acc <rcl_take_request>
 801369c:	b148      	cbz	r0, 80136b2 <rcl_action_take_goal_request+0x62>
 801369e:	280a      	cmp	r0, #10
 80136a0:	d007      	beq.n	80136b2 <rcl_action_take_goal_request+0x62>
 80136a2:	f240 2259 	movw	r2, #601	@ 0x259
 80136a6:	f640 0399 	movw	r3, #2201	@ 0x899
 80136aa:	4290      	cmp	r0, r2
 80136ac:	bf0c      	ite	eq
 80136ae:	4618      	moveq	r0, r3
 80136b0:	2001      	movne	r0, #1
 80136b2:	bd70      	pop	{r4, r5, r6, pc}
 80136b4:	f7f8 f860 	bl	800b778 <rcutils_reset_error>
 80136b8:	f640 0098 	movw	r0, #2200	@ 0x898
 80136bc:	bd70      	pop	{r4, r5, r6, pc}
 80136be:	f640 0098 	movw	r0, #2200	@ 0x898
 80136c2:	bd70      	pop	{r4, r5, r6, pc}
 80136c4:	200b      	movs	r0, #11
 80136c6:	bd70      	pop	{r4, r5, r6, pc}
 80136c8:	f640 0098 	movw	r0, #2200	@ 0x898
 80136cc:	4770      	bx	lr
 80136ce:	bf00      	nop

080136d0 <rcl_action_send_goal_response>:
 80136d0:	b390      	cbz	r0, 8013738 <rcl_action_send_goal_response+0x68>
 80136d2:	b570      	push	{r4, r5, r6, lr}
 80136d4:	4604      	mov	r4, r0
 80136d6:	6800      	ldr	r0, [r0, #0]
 80136d8:	b348      	cbz	r0, 801372e <rcl_action_send_goal_response+0x5e>
 80136da:	460d      	mov	r5, r1
 80136dc:	4616      	mov	r6, r2
 80136de:	f7fe fa4d 	bl	8011b7c <rcl_service_is_valid>
 80136e2:	b1f8      	cbz	r0, 8013724 <rcl_action_send_goal_response+0x54>
 80136e4:	6820      	ldr	r0, [r4, #0]
 80136e6:	3004      	adds	r0, #4
 80136e8:	f7fe fa48 	bl	8011b7c <rcl_service_is_valid>
 80136ec:	b1d0      	cbz	r0, 8013724 <rcl_action_send_goal_response+0x54>
 80136ee:	6820      	ldr	r0, [r4, #0]
 80136f0:	3008      	adds	r0, #8
 80136f2:	f7fe fa43 	bl	8011b7c <rcl_service_is_valid>
 80136f6:	b1a8      	cbz	r0, 8013724 <rcl_action_send_goal_response+0x54>
 80136f8:	6820      	ldr	r0, [r4, #0]
 80136fa:	300c      	adds	r0, #12
 80136fc:	f002 ff44 	bl	8016588 <rcl_publisher_is_valid>
 8013700:	b180      	cbz	r0, 8013724 <rcl_action_send_goal_response+0x54>
 8013702:	6820      	ldr	r0, [r4, #0]
 8013704:	3010      	adds	r0, #16
 8013706:	f002 ff3f 	bl	8016588 <rcl_publisher_is_valid>
 801370a:	b158      	cbz	r0, 8013724 <rcl_action_send_goal_response+0x54>
 801370c:	b195      	cbz	r5, 8013734 <rcl_action_send_goal_response+0x64>
 801370e:	b18e      	cbz	r6, 8013734 <rcl_action_send_goal_response+0x64>
 8013710:	6820      	ldr	r0, [r4, #0]
 8013712:	4632      	mov	r2, r6
 8013714:	4629      	mov	r1, r5
 8013716:	f7fe fa19 	bl	8011b4c <rcl_send_response>
 801371a:	b110      	cbz	r0, 8013722 <rcl_action_send_goal_response+0x52>
 801371c:	2802      	cmp	r0, #2
 801371e:	bf18      	it	ne
 8013720:	2001      	movne	r0, #1
 8013722:	bd70      	pop	{r4, r5, r6, pc}
 8013724:	f7f8 f828 	bl	800b778 <rcutils_reset_error>
 8013728:	f640 0098 	movw	r0, #2200	@ 0x898
 801372c:	bd70      	pop	{r4, r5, r6, pc}
 801372e:	f640 0098 	movw	r0, #2200	@ 0x898
 8013732:	bd70      	pop	{r4, r5, r6, pc}
 8013734:	200b      	movs	r0, #11
 8013736:	bd70      	pop	{r4, r5, r6, pc}
 8013738:	f640 0098 	movw	r0, #2200	@ 0x898
 801373c:	4770      	bx	lr
 801373e:	bf00      	nop

08013740 <rcl_action_take_result_request>:
 8013740:	2800      	cmp	r0, #0
 8013742:	d03a      	beq.n	80137ba <rcl_action_take_result_request+0x7a>
 8013744:	b570      	push	{r4, r5, r6, lr}
 8013746:	4604      	mov	r4, r0
 8013748:	6800      	ldr	r0, [r0, #0]
 801374a:	b388      	cbz	r0, 80137b0 <rcl_action_take_result_request+0x70>
 801374c:	460d      	mov	r5, r1
 801374e:	4616      	mov	r6, r2
 8013750:	f7fe fa14 	bl	8011b7c <rcl_service_is_valid>
 8013754:	b338      	cbz	r0, 80137a6 <rcl_action_take_result_request+0x66>
 8013756:	6820      	ldr	r0, [r4, #0]
 8013758:	3004      	adds	r0, #4
 801375a:	f7fe fa0f 	bl	8011b7c <rcl_service_is_valid>
 801375e:	b310      	cbz	r0, 80137a6 <rcl_action_take_result_request+0x66>
 8013760:	6820      	ldr	r0, [r4, #0]
 8013762:	3008      	adds	r0, #8
 8013764:	f7fe fa0a 	bl	8011b7c <rcl_service_is_valid>
 8013768:	b1e8      	cbz	r0, 80137a6 <rcl_action_take_result_request+0x66>
 801376a:	6820      	ldr	r0, [r4, #0]
 801376c:	300c      	adds	r0, #12
 801376e:	f002 ff0b 	bl	8016588 <rcl_publisher_is_valid>
 8013772:	b1c0      	cbz	r0, 80137a6 <rcl_action_take_result_request+0x66>
 8013774:	6820      	ldr	r0, [r4, #0]
 8013776:	3010      	adds	r0, #16
 8013778:	f002 ff06 	bl	8016588 <rcl_publisher_is_valid>
 801377c:	b198      	cbz	r0, 80137a6 <rcl_action_take_result_request+0x66>
 801377e:	b1d5      	cbz	r5, 80137b6 <rcl_action_take_result_request+0x76>
 8013780:	b1ce      	cbz	r6, 80137b6 <rcl_action_take_result_request+0x76>
 8013782:	6820      	ldr	r0, [r4, #0]
 8013784:	4632      	mov	r2, r6
 8013786:	4629      	mov	r1, r5
 8013788:	3008      	adds	r0, #8
 801378a:	f7fe f99f 	bl	8011acc <rcl_take_request>
 801378e:	b148      	cbz	r0, 80137a4 <rcl_action_take_result_request+0x64>
 8013790:	280a      	cmp	r0, #10
 8013792:	d007      	beq.n	80137a4 <rcl_action_take_result_request+0x64>
 8013794:	f240 2259 	movw	r2, #601	@ 0x259
 8013798:	f640 0399 	movw	r3, #2201	@ 0x899
 801379c:	4290      	cmp	r0, r2
 801379e:	bf0c      	ite	eq
 80137a0:	4618      	moveq	r0, r3
 80137a2:	2001      	movne	r0, #1
 80137a4:	bd70      	pop	{r4, r5, r6, pc}
 80137a6:	f7f7 ffe7 	bl	800b778 <rcutils_reset_error>
 80137aa:	f640 0098 	movw	r0, #2200	@ 0x898
 80137ae:	bd70      	pop	{r4, r5, r6, pc}
 80137b0:	f640 0098 	movw	r0, #2200	@ 0x898
 80137b4:	bd70      	pop	{r4, r5, r6, pc}
 80137b6:	200b      	movs	r0, #11
 80137b8:	bd70      	pop	{r4, r5, r6, pc}
 80137ba:	f640 0098 	movw	r0, #2200	@ 0x898
 80137be:	4770      	bx	lr

080137c0 <rcl_action_take_cancel_request>:
 80137c0:	2800      	cmp	r0, #0
 80137c2:	d03a      	beq.n	801383a <rcl_action_take_cancel_request+0x7a>
 80137c4:	b570      	push	{r4, r5, r6, lr}
 80137c6:	4604      	mov	r4, r0
 80137c8:	6800      	ldr	r0, [r0, #0]
 80137ca:	b388      	cbz	r0, 8013830 <rcl_action_take_cancel_request+0x70>
 80137cc:	460d      	mov	r5, r1
 80137ce:	4616      	mov	r6, r2
 80137d0:	f7fe f9d4 	bl	8011b7c <rcl_service_is_valid>
 80137d4:	b338      	cbz	r0, 8013826 <rcl_action_take_cancel_request+0x66>
 80137d6:	6820      	ldr	r0, [r4, #0]
 80137d8:	3004      	adds	r0, #4
 80137da:	f7fe f9cf 	bl	8011b7c <rcl_service_is_valid>
 80137de:	b310      	cbz	r0, 8013826 <rcl_action_take_cancel_request+0x66>
 80137e0:	6820      	ldr	r0, [r4, #0]
 80137e2:	3008      	adds	r0, #8
 80137e4:	f7fe f9ca 	bl	8011b7c <rcl_service_is_valid>
 80137e8:	b1e8      	cbz	r0, 8013826 <rcl_action_take_cancel_request+0x66>
 80137ea:	6820      	ldr	r0, [r4, #0]
 80137ec:	300c      	adds	r0, #12
 80137ee:	f002 fecb 	bl	8016588 <rcl_publisher_is_valid>
 80137f2:	b1c0      	cbz	r0, 8013826 <rcl_action_take_cancel_request+0x66>
 80137f4:	6820      	ldr	r0, [r4, #0]
 80137f6:	3010      	adds	r0, #16
 80137f8:	f002 fec6 	bl	8016588 <rcl_publisher_is_valid>
 80137fc:	b198      	cbz	r0, 8013826 <rcl_action_take_cancel_request+0x66>
 80137fe:	b1d5      	cbz	r5, 8013836 <rcl_action_take_cancel_request+0x76>
 8013800:	b1ce      	cbz	r6, 8013836 <rcl_action_take_cancel_request+0x76>
 8013802:	6820      	ldr	r0, [r4, #0]
 8013804:	4632      	mov	r2, r6
 8013806:	4629      	mov	r1, r5
 8013808:	3004      	adds	r0, #4
 801380a:	f7fe f95f 	bl	8011acc <rcl_take_request>
 801380e:	b148      	cbz	r0, 8013824 <rcl_action_take_cancel_request+0x64>
 8013810:	280a      	cmp	r0, #10
 8013812:	d007      	beq.n	8013824 <rcl_action_take_cancel_request+0x64>
 8013814:	f240 2259 	movw	r2, #601	@ 0x259
 8013818:	f640 0399 	movw	r3, #2201	@ 0x899
 801381c:	4290      	cmp	r0, r2
 801381e:	bf0c      	ite	eq
 8013820:	4618      	moveq	r0, r3
 8013822:	2001      	movne	r0, #1
 8013824:	bd70      	pop	{r4, r5, r6, pc}
 8013826:	f7f7 ffa7 	bl	800b778 <rcutils_reset_error>
 801382a:	f640 0098 	movw	r0, #2200	@ 0x898
 801382e:	bd70      	pop	{r4, r5, r6, pc}
 8013830:	f640 0098 	movw	r0, #2200	@ 0x898
 8013834:	bd70      	pop	{r4, r5, r6, pc}
 8013836:	200b      	movs	r0, #11
 8013838:	bd70      	pop	{r4, r5, r6, pc}
 801383a:	f640 0098 	movw	r0, #2200	@ 0x898
 801383e:	4770      	bx	lr

08013840 <rcl_action_send_cancel_response>:
 8013840:	b398      	cbz	r0, 80138aa <rcl_action_send_cancel_response+0x6a>
 8013842:	b570      	push	{r4, r5, r6, lr}
 8013844:	4604      	mov	r4, r0
 8013846:	6800      	ldr	r0, [r0, #0]
 8013848:	b350      	cbz	r0, 80138a0 <rcl_action_send_cancel_response+0x60>
 801384a:	460d      	mov	r5, r1
 801384c:	4616      	mov	r6, r2
 801384e:	f7fe f995 	bl	8011b7c <rcl_service_is_valid>
 8013852:	b300      	cbz	r0, 8013896 <rcl_action_send_cancel_response+0x56>
 8013854:	6820      	ldr	r0, [r4, #0]
 8013856:	3004      	adds	r0, #4
 8013858:	f7fe f990 	bl	8011b7c <rcl_service_is_valid>
 801385c:	b1d8      	cbz	r0, 8013896 <rcl_action_send_cancel_response+0x56>
 801385e:	6820      	ldr	r0, [r4, #0]
 8013860:	3008      	adds	r0, #8
 8013862:	f7fe f98b 	bl	8011b7c <rcl_service_is_valid>
 8013866:	b1b0      	cbz	r0, 8013896 <rcl_action_send_cancel_response+0x56>
 8013868:	6820      	ldr	r0, [r4, #0]
 801386a:	300c      	adds	r0, #12
 801386c:	f002 fe8c 	bl	8016588 <rcl_publisher_is_valid>
 8013870:	b188      	cbz	r0, 8013896 <rcl_action_send_cancel_response+0x56>
 8013872:	6820      	ldr	r0, [r4, #0]
 8013874:	3010      	adds	r0, #16
 8013876:	f002 fe87 	bl	8016588 <rcl_publisher_is_valid>
 801387a:	b160      	cbz	r0, 8013896 <rcl_action_send_cancel_response+0x56>
 801387c:	b19d      	cbz	r5, 80138a6 <rcl_action_send_cancel_response+0x66>
 801387e:	b196      	cbz	r6, 80138a6 <rcl_action_send_cancel_response+0x66>
 8013880:	6820      	ldr	r0, [r4, #0]
 8013882:	4632      	mov	r2, r6
 8013884:	4629      	mov	r1, r5
 8013886:	3004      	adds	r0, #4
 8013888:	f7fe f960 	bl	8011b4c <rcl_send_response>
 801388c:	b110      	cbz	r0, 8013894 <rcl_action_send_cancel_response+0x54>
 801388e:	2802      	cmp	r0, #2
 8013890:	bf18      	it	ne
 8013892:	2001      	movne	r0, #1
 8013894:	bd70      	pop	{r4, r5, r6, pc}
 8013896:	f7f7 ff6f 	bl	800b778 <rcutils_reset_error>
 801389a:	f640 0098 	movw	r0, #2200	@ 0x898
 801389e:	bd70      	pop	{r4, r5, r6, pc}
 80138a0:	f640 0098 	movw	r0, #2200	@ 0x898
 80138a4:	bd70      	pop	{r4, r5, r6, pc}
 80138a6:	200b      	movs	r0, #11
 80138a8:	bd70      	pop	{r4, r5, r6, pc}
 80138aa:	f640 0098 	movw	r0, #2200	@ 0x898
 80138ae:	4770      	bx	lr

080138b0 <rcl_action_wait_set_add_action_server>:
 80138b0:	2800      	cmp	r0, #0
 80138b2:	d04d      	beq.n	8013950 <rcl_action_wait_set_add_action_server+0xa0>
 80138b4:	b570      	push	{r4, r5, r6, lr}
 80138b6:	460c      	mov	r4, r1
 80138b8:	b159      	cbz	r1, 80138d2 <rcl_action_wait_set_add_action_server+0x22>
 80138ba:	4605      	mov	r5, r0
 80138bc:	6808      	ldr	r0, [r1, #0]
 80138be:	b140      	cbz	r0, 80138d2 <rcl_action_wait_set_add_action_server+0x22>
 80138c0:	4616      	mov	r6, r2
 80138c2:	f7fe f95b 	bl	8011b7c <rcl_service_is_valid>
 80138c6:	b120      	cbz	r0, 80138d2 <rcl_action_wait_set_add_action_server+0x22>
 80138c8:	6820      	ldr	r0, [r4, #0]
 80138ca:	3004      	adds	r0, #4
 80138cc:	f7fe f956 	bl	8011b7c <rcl_service_is_valid>
 80138d0:	b910      	cbnz	r0, 80138d8 <rcl_action_wait_set_add_action_server+0x28>
 80138d2:	f640 0098 	movw	r0, #2200	@ 0x898
 80138d6:	bd70      	pop	{r4, r5, r6, pc}
 80138d8:	6820      	ldr	r0, [r4, #0]
 80138da:	3008      	adds	r0, #8
 80138dc:	f7fe f94e 	bl	8011b7c <rcl_service_is_valid>
 80138e0:	2800      	cmp	r0, #0
 80138e2:	d0f6      	beq.n	80138d2 <rcl_action_wait_set_add_action_server+0x22>
 80138e4:	6820      	ldr	r0, [r4, #0]
 80138e6:	300c      	adds	r0, #12
 80138e8:	f002 fe66 	bl	80165b8 <rcl_publisher_is_valid_except_context>
 80138ec:	2800      	cmp	r0, #0
 80138ee:	d0f0      	beq.n	80138d2 <rcl_action_wait_set_add_action_server+0x22>
 80138f0:	6820      	ldr	r0, [r4, #0]
 80138f2:	3010      	adds	r0, #16
 80138f4:	f002 fe60 	bl	80165b8 <rcl_publisher_is_valid_except_context>
 80138f8:	2800      	cmp	r0, #0
 80138fa:	d0ea      	beq.n	80138d2 <rcl_action_wait_set_add_action_server+0x22>
 80138fc:	6821      	ldr	r1, [r4, #0]
 80138fe:	4628      	mov	r0, r5
 8013900:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 8013904:	f7ff face 	bl	8012ea4 <rcl_wait_set_add_service>
 8013908:	2800      	cmp	r0, #0
 801390a:	d1e4      	bne.n	80138d6 <rcl_action_wait_set_add_action_server+0x26>
 801390c:	6821      	ldr	r1, [r4, #0]
 801390e:	4628      	mov	r0, r5
 8013910:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 8013914:	3104      	adds	r1, #4
 8013916:	f7ff fac5 	bl	8012ea4 <rcl_wait_set_add_service>
 801391a:	2800      	cmp	r0, #0
 801391c:	d1db      	bne.n	80138d6 <rcl_action_wait_set_add_action_server+0x26>
 801391e:	6821      	ldr	r1, [r4, #0]
 8013920:	4628      	mov	r0, r5
 8013922:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 8013926:	3108      	adds	r1, #8
 8013928:	f7ff fabc 	bl	8012ea4 <rcl_wait_set_add_service>
 801392c:	2800      	cmp	r0, #0
 801392e:	d1d2      	bne.n	80138d6 <rcl_action_wait_set_add_action_server+0x26>
 8013930:	6821      	ldr	r1, [r4, #0]
 8013932:	4628      	mov	r0, r5
 8013934:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8013938:	3114      	adds	r1, #20
 801393a:	f7ff fa57 	bl	8012dec <rcl_wait_set_add_timer>
 801393e:	2800      	cmp	r0, #0
 8013940:	d1c9      	bne.n	80138d6 <rcl_action_wait_set_add_action_server+0x26>
 8013942:	2e00      	cmp	r6, #0
 8013944:	d0c7      	beq.n	80138d6 <rcl_action_wait_set_add_action_server+0x26>
 8013946:	6823      	ldr	r3, [r4, #0]
 8013948:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801394c:	6033      	str	r3, [r6, #0]
 801394e:	bd70      	pop	{r4, r5, r6, pc}
 8013950:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013954:	4770      	bx	lr
 8013956:	bf00      	nop

08013958 <rcl_action_server_wait_set_get_entities_ready>:
 8013958:	2800      	cmp	r0, #0
 801395a:	d05a      	beq.n	8013a12 <rcl_action_server_wait_set_get_entities_ready+0xba>
 801395c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801395e:	460c      	mov	r4, r1
 8013960:	b161      	cbz	r1, 801397c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8013962:	4605      	mov	r5, r0
 8013964:	6808      	ldr	r0, [r1, #0]
 8013966:	b148      	cbz	r0, 801397c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8013968:	4616      	mov	r6, r2
 801396a:	461f      	mov	r7, r3
 801396c:	f7fe f906 	bl	8011b7c <rcl_service_is_valid>
 8013970:	b120      	cbz	r0, 801397c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8013972:	6820      	ldr	r0, [r4, #0]
 8013974:	3004      	adds	r0, #4
 8013976:	f7fe f901 	bl	8011b7c <rcl_service_is_valid>
 801397a:	b910      	cbnz	r0, 8013982 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 801397c:	f640 0098 	movw	r0, #2200	@ 0x898
 8013980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013982:	6820      	ldr	r0, [r4, #0]
 8013984:	3008      	adds	r0, #8
 8013986:	f7fe f8f9 	bl	8011b7c <rcl_service_is_valid>
 801398a:	2800      	cmp	r0, #0
 801398c:	d0f6      	beq.n	801397c <rcl_action_server_wait_set_get_entities_ready+0x24>
 801398e:	6820      	ldr	r0, [r4, #0]
 8013990:	300c      	adds	r0, #12
 8013992:	f002 fe11 	bl	80165b8 <rcl_publisher_is_valid_except_context>
 8013996:	2800      	cmp	r0, #0
 8013998:	d0f0      	beq.n	801397c <rcl_action_server_wait_set_get_entities_ready+0x24>
 801399a:	6820      	ldr	r0, [r4, #0]
 801399c:	3010      	adds	r0, #16
 801399e:	f002 fe0b 	bl	80165b8 <rcl_publisher_is_valid_except_context>
 80139a2:	2800      	cmp	r0, #0
 80139a4:	d0ea      	beq.n	801397c <rcl_action_server_wait_set_get_entities_ready+0x24>
 80139a6:	b3be      	cbz	r6, 8013a18 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80139a8:	b3b7      	cbz	r7, 8013a18 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80139aa:	9b06      	ldr	r3, [sp, #24]
 80139ac:	b3a3      	cbz	r3, 8013a18 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80139ae:	9b07      	ldr	r3, [sp, #28]
 80139b0:	b393      	cbz	r3, 8013a18 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80139b2:	6821      	ldr	r1, [r4, #0]
 80139b4:	692a      	ldr	r2, [r5, #16]
 80139b6:	6a2c      	ldr	r4, [r5, #32]
 80139b8:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 80139bc:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80139c0:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80139c4:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 80139c8:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 80139cc:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80139d0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80139d4:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80139d8:	1a64      	subs	r4, r4, r1
 80139da:	fab4 f484 	clz	r4, r4
 80139de:	0964      	lsrs	r4, r4, #5
 80139e0:	7034      	strb	r4, [r6, #0]
 80139e2:	1d0c      	adds	r4, r1, #4
 80139e4:	1b1b      	subs	r3, r3, r4
 80139e6:	fab3 f383 	clz	r3, r3
 80139ea:	095b      	lsrs	r3, r3, #5
 80139ec:	f101 0408 	add.w	r4, r1, #8
 80139f0:	703b      	strb	r3, [r7, #0]
 80139f2:	f101 0314 	add.w	r3, r1, #20
 80139f6:	1b01      	subs	r1, r0, r4
 80139f8:	1ad3      	subs	r3, r2, r3
 80139fa:	fab1 f181 	clz	r1, r1
 80139fe:	9a06      	ldr	r2, [sp, #24]
 8013a00:	0949      	lsrs	r1, r1, #5
 8013a02:	7011      	strb	r1, [r2, #0]
 8013a04:	fab3 f383 	clz	r3, r3
 8013a08:	9a07      	ldr	r2, [sp, #28]
 8013a0a:	095b      	lsrs	r3, r3, #5
 8013a0c:	2000      	movs	r0, #0
 8013a0e:	7013      	strb	r3, [r2, #0]
 8013a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a12:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013a16:	4770      	bx	lr
 8013a18:	200b      	movs	r0, #11
 8013a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013a1c <_execute_event_handler>:
 8013a1c:	2002      	movs	r0, #2
 8013a1e:	4770      	bx	lr

08013a20 <_cancel_goal_event_handler>:
 8013a20:	2003      	movs	r0, #3
 8013a22:	4770      	bx	lr

08013a24 <_succeed_event_handler>:
 8013a24:	2004      	movs	r0, #4
 8013a26:	4770      	bx	lr

08013a28 <_abort_event_handler>:
 8013a28:	2006      	movs	r0, #6
 8013a2a:	4770      	bx	lr

08013a2c <_canceled_event_handler>:
 8013a2c:	2005      	movs	r0, #5
 8013a2e:	4770      	bx	lr

08013a30 <rcl_action_transition_goal_state>:
 8013a30:	b2c2      	uxtb	r2, r0
 8013a32:	2a06      	cmp	r2, #6
 8013a34:	d80c      	bhi.n	8013a50 <rcl_action_transition_goal_state+0x20>
 8013a36:	2904      	cmp	r1, #4
 8013a38:	d80a      	bhi.n	8013a50 <rcl_action_transition_goal_state+0x20>
 8013a3a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8013a3e:	b410      	push	{r4}
 8013a40:	1853      	adds	r3, r2, r1
 8013a42:	4c06      	ldr	r4, [pc, #24]	@ (8013a5c <rcl_action_transition_goal_state+0x2c>)
 8013a44:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8013a48:	b123      	cbz	r3, 8013a54 <rcl_action_transition_goal_state+0x24>
 8013a4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a4e:	4718      	bx	r3
 8013a50:	2000      	movs	r0, #0
 8013a52:	4770      	bx	lr
 8013a54:	2000      	movs	r0, #0
 8013a56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013a5a:	4770      	bx	lr
 8013a5c:	08018698 	.word	0x08018698

08013a60 <rcl_action_get_zero_initialized_cancel_response>:
 8013a60:	b510      	push	{r4, lr}
 8013a62:	4c07      	ldr	r4, [pc, #28]	@ (8013a80 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8013a64:	4686      	mov	lr, r0
 8013a66:	4684      	mov	ip, r0
 8013a68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013a6a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013a6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013a70:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013a74:	6823      	ldr	r3, [r4, #0]
 8013a76:	f8cc 3000 	str.w	r3, [ip]
 8013a7a:	4670      	mov	r0, lr
 8013a7c:	bd10      	pop	{r4, pc}
 8013a7e:	bf00      	nop
 8013a80:	08018724 	.word	0x08018724

08013a84 <rclc_action_send_result_request>:
 8013a84:	b1d0      	cbz	r0, 8013abc <rclc_action_send_result_request+0x38>
 8013a86:	b500      	push	{lr}
 8013a88:	4684      	mov	ip, r0
 8013a8a:	b087      	sub	sp, #28
 8013a8c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8013a90:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8013a94:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8013a98:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8013a9c:	f10d 0e08 	add.w	lr, sp, #8
 8013aa0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013aa4:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8013aa8:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8013aac:	a902      	add	r1, sp, #8
 8013aae:	3010      	adds	r0, #16
 8013ab0:	f7ff fbda 	bl	8013268 <rcl_action_send_result_request>
 8013ab4:	b920      	cbnz	r0, 8013ac0 <rclc_action_send_result_request+0x3c>
 8013ab6:	b007      	add	sp, #28
 8013ab8:	f85d fb04 	ldr.w	pc, [sp], #4
 8013abc:	200b      	movs	r0, #11
 8013abe:	4770      	bx	lr
 8013ac0:	9001      	str	r0, [sp, #4]
 8013ac2:	f7f7 fe59 	bl	800b778 <rcutils_reset_error>
 8013ac6:	9801      	ldr	r0, [sp, #4]
 8013ac8:	b007      	add	sp, #28
 8013aca:	f85d fb04 	ldr.w	pc, [sp], #4
 8013ace:	bf00      	nop

08013ad0 <rclc_action_take_goal_handle>:
 8013ad0:	b160      	cbz	r0, 8013aec <rclc_action_take_goal_handle+0x1c>
 8013ad2:	6883      	ldr	r3, [r0, #8]
 8013ad4:	b143      	cbz	r3, 8013ae8 <rclc_action_take_goal_handle+0x18>
 8013ad6:	6819      	ldr	r1, [r3, #0]
 8013ad8:	6081      	str	r1, [r0, #8]
 8013ada:	2200      	movs	r2, #0
 8013adc:	721a      	strb	r2, [r3, #8]
 8013ade:	68c1      	ldr	r1, [r0, #12]
 8013ae0:	6019      	str	r1, [r3, #0]
 8013ae2:	621a      	str	r2, [r3, #32]
 8013ae4:	849a      	strh	r2, [r3, #36]	@ 0x24
 8013ae6:	60c3      	str	r3, [r0, #12]
 8013ae8:	4618      	mov	r0, r3
 8013aea:	4770      	bx	lr
 8013aec:	4603      	mov	r3, r0
 8013aee:	e7fb      	b.n	8013ae8 <rclc_action_take_goal_handle+0x18>

08013af0 <rclc_action_remove_used_goal_handle>:
 8013af0:	b180      	cbz	r0, 8013b14 <rclc_action_remove_used_goal_handle+0x24>
 8013af2:	b179      	cbz	r1, 8013b14 <rclc_action_remove_used_goal_handle+0x24>
 8013af4:	68c3      	ldr	r3, [r0, #12]
 8013af6:	4299      	cmp	r1, r3
 8013af8:	d00d      	beq.n	8013b16 <rclc_action_remove_used_goal_handle+0x26>
 8013afa:	b12b      	cbz	r3, 8013b08 <rclc_action_remove_used_goal_handle+0x18>
 8013afc:	681a      	ldr	r2, [r3, #0]
 8013afe:	4291      	cmp	r1, r2
 8013b00:	d003      	beq.n	8013b0a <rclc_action_remove_used_goal_handle+0x1a>
 8013b02:	4613      	mov	r3, r2
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d1f9      	bne.n	8013afc <rclc_action_remove_used_goal_handle+0xc>
 8013b08:	4770      	bx	lr
 8013b0a:	680a      	ldr	r2, [r1, #0]
 8013b0c:	601a      	str	r2, [r3, #0]
 8013b0e:	6883      	ldr	r3, [r0, #8]
 8013b10:	600b      	str	r3, [r1, #0]
 8013b12:	6081      	str	r1, [r0, #8]
 8013b14:	4770      	bx	lr
 8013b16:	680b      	ldr	r3, [r1, #0]
 8013b18:	60c3      	str	r3, [r0, #12]
 8013b1a:	e7f8      	b.n	8013b0e <rclc_action_remove_used_goal_handle+0x1e>

08013b1c <rclc_action_find_goal_handle_by_uuid>:
 8013b1c:	b538      	push	{r3, r4, r5, lr}
 8013b1e:	b180      	cbz	r0, 8013b42 <rclc_action_find_goal_handle_by_uuid+0x26>
 8013b20:	460d      	mov	r5, r1
 8013b22:	b181      	cbz	r1, 8013b46 <rclc_action_find_goal_handle_by_uuid+0x2a>
 8013b24:	68c4      	ldr	r4, [r0, #12]
 8013b26:	b914      	cbnz	r4, 8013b2e <rclc_action_find_goal_handle_by_uuid+0x12>
 8013b28:	e009      	b.n	8013b3e <rclc_action_find_goal_handle_by_uuid+0x22>
 8013b2a:	6824      	ldr	r4, [r4, #0]
 8013b2c:	b13c      	cbz	r4, 8013b3e <rclc_action_find_goal_handle_by_uuid+0x22>
 8013b2e:	f104 0009 	add.w	r0, r4, #9
 8013b32:	2210      	movs	r2, #16
 8013b34:	4629      	mov	r1, r5
 8013b36:	f003 fa3b 	bl	8016fb0 <memcmp>
 8013b3a:	2800      	cmp	r0, #0
 8013b3c:	d1f5      	bne.n	8013b2a <rclc_action_find_goal_handle_by_uuid+0xe>
 8013b3e:	4620      	mov	r0, r4
 8013b40:	bd38      	pop	{r3, r4, r5, pc}
 8013b42:	4604      	mov	r4, r0
 8013b44:	e7fb      	b.n	8013b3e <rclc_action_find_goal_handle_by_uuid+0x22>
 8013b46:	460c      	mov	r4, r1
 8013b48:	e7f9      	b.n	8013b3e <rclc_action_find_goal_handle_by_uuid+0x22>
 8013b4a:	bf00      	nop

08013b4c <rclc_action_find_first_handle_by_status>:
 8013b4c:	b140      	cbz	r0, 8013b60 <rclc_action_find_first_handle_by_status+0x14>
 8013b4e:	68c0      	ldr	r0, [r0, #12]
 8013b50:	b910      	cbnz	r0, 8013b58 <rclc_action_find_first_handle_by_status+0xc>
 8013b52:	e005      	b.n	8013b60 <rclc_action_find_first_handle_by_status+0x14>
 8013b54:	6800      	ldr	r0, [r0, #0]
 8013b56:	b118      	cbz	r0, 8013b60 <rclc_action_find_first_handle_by_status+0x14>
 8013b58:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8013b5c:	428b      	cmp	r3, r1
 8013b5e:	d1f9      	bne.n	8013b54 <rclc_action_find_first_handle_by_status+0x8>
 8013b60:	4770      	bx	lr
 8013b62:	bf00      	nop

08013b64 <rclc_action_find_first_terminated_handle>:
 8013b64:	b140      	cbz	r0, 8013b78 <rclc_action_find_first_terminated_handle+0x14>
 8013b66:	68c0      	ldr	r0, [r0, #12]
 8013b68:	b910      	cbnz	r0, 8013b70 <rclc_action_find_first_terminated_handle+0xc>
 8013b6a:	e005      	b.n	8013b78 <rclc_action_find_first_terminated_handle+0x14>
 8013b6c:	6800      	ldr	r0, [r0, #0]
 8013b6e:	b118      	cbz	r0, 8013b78 <rclc_action_find_first_terminated_handle+0x14>
 8013b70:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8013b74:	2b03      	cmp	r3, #3
 8013b76:	ddf9      	ble.n	8013b6c <rclc_action_find_first_terminated_handle+0x8>
 8013b78:	4770      	bx	lr
 8013b7a:	bf00      	nop

08013b7c <rclc_action_find_handle_by_goal_request_sequence_number>:
 8013b7c:	b170      	cbz	r0, 8013b9c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8013b7e:	68c0      	ldr	r0, [r0, #12]
 8013b80:	b160      	cbz	r0, 8013b9c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8013b82:	b410      	push	{r4}
 8013b84:	e001      	b.n	8013b8a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8013b86:	6800      	ldr	r0, [r0, #0]
 8013b88:	b128      	cbz	r0, 8013b96 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8013b8a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8013b8e:	4299      	cmp	r1, r3
 8013b90:	bf08      	it	eq
 8013b92:	4294      	cmpeq	r4, r2
 8013b94:	d1f7      	bne.n	8013b86 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8013b96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b9a:	4770      	bx	lr
 8013b9c:	4770      	bx	lr
 8013b9e:	bf00      	nop

08013ba0 <rclc_action_find_handle_by_result_request_sequence_number>:
 8013ba0:	b170      	cbz	r0, 8013bc0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8013ba2:	68c0      	ldr	r0, [r0, #12]
 8013ba4:	b160      	cbz	r0, 8013bc0 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8013ba6:	b410      	push	{r4}
 8013ba8:	e001      	b.n	8013bae <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8013baa:	6800      	ldr	r0, [r0, #0]
 8013bac:	b128      	cbz	r0, 8013bba <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8013bae:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8013bb2:	4299      	cmp	r1, r3
 8013bb4:	bf08      	it	eq
 8013bb6:	4294      	cmpeq	r4, r2
 8013bb8:	d1f7      	bne.n	8013baa <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8013bba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013bbe:	4770      	bx	lr
 8013bc0:	4770      	bx	lr
 8013bc2:	bf00      	nop

08013bc4 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8013bc4:	b170      	cbz	r0, 8013be4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8013bc6:	68c0      	ldr	r0, [r0, #12]
 8013bc8:	b160      	cbz	r0, 8013be4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8013bca:	b410      	push	{r4}
 8013bcc:	e001      	b.n	8013bd2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8013bce:	6800      	ldr	r0, [r0, #0]
 8013bd0:	b128      	cbz	r0, 8013bde <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8013bd2:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8013bd6:	4299      	cmp	r1, r3
 8013bd8:	bf08      	it	eq
 8013bda:	4294      	cmpeq	r4, r2
 8013bdc:	d1f7      	bne.n	8013bce <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8013bde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013be2:	4770      	bx	lr
 8013be4:	4770      	bx	lr
 8013be6:	bf00      	nop

08013be8 <rclc_action_find_first_handle_with_goal_response>:
 8013be8:	b140      	cbz	r0, 8013bfc <rclc_action_find_first_handle_with_goal_response+0x14>
 8013bea:	68c0      	ldr	r0, [r0, #12]
 8013bec:	b910      	cbnz	r0, 8013bf4 <rclc_action_find_first_handle_with_goal_response+0xc>
 8013bee:	e005      	b.n	8013bfc <rclc_action_find_first_handle_with_goal_response+0x14>
 8013bf0:	6800      	ldr	r0, [r0, #0]
 8013bf2:	b118      	cbz	r0, 8013bfc <rclc_action_find_first_handle_with_goal_response+0x14>
 8013bf4:	f890 3020 	ldrb.w	r3, [r0, #32]
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d0f9      	beq.n	8013bf0 <rclc_action_find_first_handle_with_goal_response+0x8>
 8013bfc:	4770      	bx	lr
 8013bfe:	bf00      	nop

08013c00 <rclc_action_find_first_handle_with_result_response>:
 8013c00:	b140      	cbz	r0, 8013c14 <rclc_action_find_first_handle_with_result_response+0x14>
 8013c02:	68c0      	ldr	r0, [r0, #12]
 8013c04:	b910      	cbnz	r0, 8013c0c <rclc_action_find_first_handle_with_result_response+0xc>
 8013c06:	e005      	b.n	8013c14 <rclc_action_find_first_handle_with_result_response+0x14>
 8013c08:	6800      	ldr	r0, [r0, #0]
 8013c0a:	b118      	cbz	r0, 8013c14 <rclc_action_find_first_handle_with_result_response+0x14>
 8013c0c:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d0f9      	beq.n	8013c08 <rclc_action_find_first_handle_with_result_response+0x8>
 8013c14:	4770      	bx	lr
 8013c16:	bf00      	nop

08013c18 <rclc_action_server_response_goal_request>:
 8013c18:	b198      	cbz	r0, 8013c42 <rclc_action_server_response_goal_request+0x2a>
 8013c1a:	b510      	push	{r4, lr}
 8013c1c:	6844      	ldr	r4, [r0, #4]
 8013c1e:	b086      	sub	sp, #24
 8013c20:	2200      	movs	r2, #0
 8013c22:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8013c26:	460b      	mov	r3, r1
 8013c28:	9205      	str	r2, [sp, #20]
 8013c2a:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8013c2e:	aa03      	add	r2, sp, #12
 8013c30:	f104 0010 	add.w	r0, r4, #16
 8013c34:	f88d 300c 	strb.w	r3, [sp, #12]
 8013c38:	f7ff fd4a 	bl	80136d0 <rcl_action_send_goal_response>
 8013c3c:	b918      	cbnz	r0, 8013c46 <rclc_action_server_response_goal_request+0x2e>
 8013c3e:	b006      	add	sp, #24
 8013c40:	bd10      	pop	{r4, pc}
 8013c42:	200b      	movs	r0, #11
 8013c44:	4770      	bx	lr
 8013c46:	9001      	str	r0, [sp, #4]
 8013c48:	f7f7 fd96 	bl	800b778 <rcutils_reset_error>
 8013c4c:	9801      	ldr	r0, [sp, #4]
 8013c4e:	b006      	add	sp, #24
 8013c50:	bd10      	pop	{r4, pc}
 8013c52:	bf00      	nop
 8013c54:	0000      	movs	r0, r0
	...

08013c58 <rclc_action_server_goal_cancel_accept>:
 8013c58:	b310      	cbz	r0, 8013ca0 <rclc_action_server_goal_cancel_accept+0x48>
 8013c5a:	b510      	push	{r4, lr}
 8013c5c:	b090      	sub	sp, #64	@ 0x40
 8013c5e:	4604      	mov	r4, r0
 8013c60:	a806      	add	r0, sp, #24
 8013c62:	f7ff fefd 	bl	8013a60 <rcl_action_get_zero_initialized_cancel_response>
 8013c66:	2300      	movs	r3, #0
 8013c68:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8013c6c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8013c70:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8013c74:	f88d 3018 	strb.w	r3, [sp, #24]
 8013c78:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8013c7c:	f8cd d01c 	str.w	sp, [sp, #28]
 8013c80:	46ec      	mov	ip, sp
 8013c82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013c86:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8013ca8 <rclc_action_server_goal_cancel_accept+0x50>
 8013c8a:	6860      	ldr	r0, [r4, #4]
 8013c8c:	aa06      	add	r2, sp, #24
 8013c8e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8013c92:	3010      	adds	r0, #16
 8013c94:	ed8d 7b08 	vstr	d7, [sp, #32]
 8013c98:	f7ff fdd2 	bl	8013840 <rcl_action_send_cancel_response>
 8013c9c:	b010      	add	sp, #64	@ 0x40
 8013c9e:	bd10      	pop	{r4, pc}
 8013ca0:	200b      	movs	r0, #11
 8013ca2:	4770      	bx	lr
 8013ca4:	f3af 8000 	nop.w
 8013ca8:	00000001 	.word	0x00000001
 8013cac:	00000001 	.word	0x00000001

08013cb0 <rclc_action_server_goal_cancel_reject>:
 8013cb0:	b082      	sub	sp, #8
 8013cb2:	b530      	push	{r4, r5, lr}
 8013cb4:	b08b      	sub	sp, #44	@ 0x2c
 8013cb6:	ac0e      	add	r4, sp, #56	@ 0x38
 8013cb8:	e884 000c 	stmia.w	r4, {r2, r3}
 8013cbc:	b188      	cbz	r0, 8013ce2 <rclc_action_server_goal_cancel_reject+0x32>
 8013cbe:	4604      	mov	r4, r0
 8013cc0:	a801      	add	r0, sp, #4
 8013cc2:	460d      	mov	r5, r1
 8013cc4:	f7ff fecc 	bl	8013a60 <rcl_action_get_zero_initialized_cancel_response>
 8013cc8:	aa01      	add	r2, sp, #4
 8013cca:	a90e      	add	r1, sp, #56	@ 0x38
 8013ccc:	f104 0010 	add.w	r0, r4, #16
 8013cd0:	f88d 5004 	strb.w	r5, [sp, #4]
 8013cd4:	f7ff fdb4 	bl	8013840 <rcl_action_send_cancel_response>
 8013cd8:	b00b      	add	sp, #44	@ 0x2c
 8013cda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013cde:	b002      	add	sp, #8
 8013ce0:	4770      	bx	lr
 8013ce2:	200b      	movs	r0, #11
 8013ce4:	b00b      	add	sp, #44	@ 0x2c
 8013ce6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013cea:	b002      	add	sp, #8
 8013cec:	4770      	bx	lr
 8013cee:	bf00      	nop

08013cf0 <__atomic_load_8>:
 8013cf0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8013cf4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8013cf8:	4a15      	ldr	r2, [pc, #84]	@ (8013d50 <__atomic_load_8+0x60>)
 8013cfa:	4b16      	ldr	r3, [pc, #88]	@ (8013d54 <__atomic_load_8+0x64>)
 8013cfc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8013d00:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8013d04:	fb02 f101 	mul.w	r1, r2, r1
 8013d08:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8013d0c:	fba3 2301 	umull	r2, r3, r3, r1
 8013d10:	091b      	lsrs	r3, r3, #4
 8013d12:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8013d16:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8013d1a:	b4d0      	push	{r4, r6, r7}
 8013d1c:	4c0e      	ldr	r4, [pc, #56]	@ (8013d58 <__atomic_load_8+0x68>)
 8013d1e:	1ac9      	subs	r1, r1, r3
 8013d20:	1862      	adds	r2, r4, r1
 8013d22:	f04f 0c01 	mov.w	ip, #1
 8013d26:	e8d2 3f4f 	ldrexb	r3, [r2]
 8013d2a:	e8c2 cf46 	strexb	r6, ip, [r2]
 8013d2e:	2e00      	cmp	r6, #0
 8013d30:	d1f9      	bne.n	8013d26 <__atomic_load_8+0x36>
 8013d32:	f3bf 8f5b 	dmb	ish
 8013d36:	b2db      	uxtb	r3, r3
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d1f4      	bne.n	8013d26 <__atomic_load_8+0x36>
 8013d3c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8013d40:	f3bf 8f5b 	dmb	ish
 8013d44:	5463      	strb	r3, [r4, r1]
 8013d46:	4630      	mov	r0, r6
 8013d48:	4639      	mov	r1, r7
 8013d4a:	bcd0      	pop	{r4, r6, r7}
 8013d4c:	4770      	bx	lr
 8013d4e:	bf00      	nop
 8013d50:	27d4eb2d 	.word	0x27d4eb2d
 8013d54:	b21642c9 	.word	0xb21642c9
 8013d58:	2000abb8 	.word	0x2000abb8

08013d5c <__atomic_store_8>:
 8013d5c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8013d60:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8013d64:	b570      	push	{r4, r5, r6, lr}
 8013d66:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8013d6a:	4c14      	ldr	r4, [pc, #80]	@ (8013dbc <__atomic_store_8+0x60>)
 8013d6c:	4d14      	ldr	r5, [pc, #80]	@ (8013dc0 <__atomic_store_8+0x64>)
 8013d6e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8013d72:	fb04 f101 	mul.w	r1, r4, r1
 8013d76:	4c13      	ldr	r4, [pc, #76]	@ (8013dc4 <__atomic_store_8+0x68>)
 8013d78:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8013d7c:	fba4 4e01 	umull	r4, lr, r4, r1
 8013d80:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8013d84:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8013d88:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8013d8c:	eba1 0e0e 	sub.w	lr, r1, lr
 8013d90:	eb05 0c0e 	add.w	ip, r5, lr
 8013d94:	f04f 0401 	mov.w	r4, #1
 8013d98:	e8dc 1f4f 	ldrexb	r1, [ip]
 8013d9c:	e8cc 4f46 	strexb	r6, r4, [ip]
 8013da0:	2e00      	cmp	r6, #0
 8013da2:	d1f9      	bne.n	8013d98 <__atomic_store_8+0x3c>
 8013da4:	f3bf 8f5b 	dmb	ish
 8013da8:	b2c9      	uxtb	r1, r1
 8013daa:	2900      	cmp	r1, #0
 8013dac:	d1f4      	bne.n	8013d98 <__atomic_store_8+0x3c>
 8013dae:	e9c0 2300 	strd	r2, r3, [r0]
 8013db2:	f3bf 8f5b 	dmb	ish
 8013db6:	f805 100e 	strb.w	r1, [r5, lr]
 8013dba:	bd70      	pop	{r4, r5, r6, pc}
 8013dbc:	27d4eb2d 	.word	0x27d4eb2d
 8013dc0:	2000abb8 	.word	0x2000abb8
 8013dc4:	b21642c9 	.word	0xb21642c9

08013dc8 <__atomic_exchange_8>:
 8013dc8:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8013dcc:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8013dd0:	4916      	ldr	r1, [pc, #88]	@ (8013e2c <__atomic_exchange_8+0x64>)
 8013dd2:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8013dd6:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8013dda:	fb01 fc0c 	mul.w	ip, r1, ip
 8013dde:	4914      	ldr	r1, [pc, #80]	@ (8013e30 <__atomic_exchange_8+0x68>)
 8013de0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8013de4:	b570      	push	{r4, r5, r6, lr}
 8013de6:	4605      	mov	r5, r0
 8013de8:	fba1 010c 	umull	r0, r1, r1, ip
 8013dec:	0909      	lsrs	r1, r1, #4
 8013dee:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8013df2:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8013df6:	4e0f      	ldr	r6, [pc, #60]	@ (8013e34 <__atomic_exchange_8+0x6c>)
 8013df8:	ebac 0c01 	sub.w	ip, ip, r1
 8013dfc:	eb06 010c 	add.w	r1, r6, ip
 8013e00:	f04f 0e01 	mov.w	lr, #1
 8013e04:	e8d1 4f4f 	ldrexb	r4, [r1]
 8013e08:	e8c1 ef40 	strexb	r0, lr, [r1]
 8013e0c:	2800      	cmp	r0, #0
 8013e0e:	d1f9      	bne.n	8013e04 <__atomic_exchange_8+0x3c>
 8013e10:	f3bf 8f5b 	dmb	ish
 8013e14:	b2e4      	uxtb	r4, r4
 8013e16:	2c00      	cmp	r4, #0
 8013e18:	d1f4      	bne.n	8013e04 <__atomic_exchange_8+0x3c>
 8013e1a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013e1e:	e9c5 2300 	strd	r2, r3, [r5]
 8013e22:	f3bf 8f5b 	dmb	ish
 8013e26:	f806 400c 	strb.w	r4, [r6, ip]
 8013e2a:	bd70      	pop	{r4, r5, r6, pc}
 8013e2c:	27d4eb2d 	.word	0x27d4eb2d
 8013e30:	b21642c9 	.word	0xb21642c9
 8013e34:	2000abb8 	.word	0x2000abb8

08013e38 <rcutils_get_env>:
 8013e38:	b168      	cbz	r0, 8013e56 <rcutils_get_env+0x1e>
 8013e3a:	b510      	push	{r4, lr}
 8013e3c:	460c      	mov	r4, r1
 8013e3e:	b129      	cbz	r1, 8013e4c <rcutils_get_env+0x14>
 8013e40:	f002 fd12 	bl	8016868 <getenv>
 8013e44:	b120      	cbz	r0, 8013e50 <rcutils_get_env+0x18>
 8013e46:	6020      	str	r0, [r4, #0]
 8013e48:	2000      	movs	r0, #0
 8013e4a:	bd10      	pop	{r4, pc}
 8013e4c:	4803      	ldr	r0, [pc, #12]	@ (8013e5c <rcutils_get_env+0x24>)
 8013e4e:	bd10      	pop	{r4, pc}
 8013e50:	4b03      	ldr	r3, [pc, #12]	@ (8013e60 <rcutils_get_env+0x28>)
 8013e52:	6023      	str	r3, [r4, #0]
 8013e54:	bd10      	pop	{r4, pc}
 8013e56:	4803      	ldr	r0, [pc, #12]	@ (8013e64 <rcutils_get_env+0x2c>)
 8013e58:	4770      	bx	lr
 8013e5a:	bf00      	nop
 8013e5c:	08018764 	.word	0x08018764
 8013e60:	08018888 	.word	0x08018888
 8013e64:	08018748 	.word	0x08018748

08013e68 <rcutils_is_directory>:
 8013e68:	2000      	movs	r0, #0
 8013e6a:	4770      	bx	lr

08013e6c <rcutils_join_path>:
 8013e6c:	b082      	sub	sp, #8
 8013e6e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8013e72:	2000      	movs	r0, #0
 8013e74:	b002      	add	sp, #8
 8013e76:	4770      	bx	lr

08013e78 <rcutils_to_native_path>:
 8013e78:	b084      	sub	sp, #16
 8013e7a:	a801      	add	r0, sp, #4
 8013e7c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8013e80:	b004      	add	sp, #16
 8013e82:	2000      	movs	r0, #0
 8013e84:	4770      	bx	lr
 8013e86:	bf00      	nop

08013e88 <rcutils_format_string_limit>:
 8013e88:	b40f      	push	{r0, r1, r2, r3}
 8013e8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e8c:	b083      	sub	sp, #12
 8013e8e:	ac08      	add	r4, sp, #32
 8013e90:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8013e92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013e96:	b34e      	cbz	r6, 8013eec <rcutils_format_string_limit+0x64>
 8013e98:	a808      	add	r0, sp, #32
 8013e9a:	f7f7 fc47 	bl	800b72c <rcutils_allocator_is_valid>
 8013e9e:	b328      	cbz	r0, 8013eec <rcutils_format_string_limit+0x64>
 8013ea0:	2100      	movs	r1, #0
 8013ea2:	ab0f      	add	r3, sp, #60	@ 0x3c
 8013ea4:	4632      	mov	r2, r6
 8013ea6:	4608      	mov	r0, r1
 8013ea8:	e9cd 3300 	strd	r3, r3, [sp]
 8013eac:	f000 f8f4 	bl	8014098 <rcutils_vsnprintf>
 8013eb0:	1c43      	adds	r3, r0, #1
 8013eb2:	4605      	mov	r5, r0
 8013eb4:	d01a      	beq.n	8013eec <rcutils_format_string_limit+0x64>
 8013eb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013eb8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013eba:	1c47      	adds	r7, r0, #1
 8013ebc:	429f      	cmp	r7, r3
 8013ebe:	bf84      	itt	hi
 8013ec0:	461f      	movhi	r7, r3
 8013ec2:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8013ec6:	4638      	mov	r0, r7
 8013ec8:	9b08      	ldr	r3, [sp, #32]
 8013eca:	4798      	blx	r3
 8013ecc:	4604      	mov	r4, r0
 8013ece:	b168      	cbz	r0, 8013eec <rcutils_format_string_limit+0x64>
 8013ed0:	9b01      	ldr	r3, [sp, #4]
 8013ed2:	4632      	mov	r2, r6
 8013ed4:	4639      	mov	r1, r7
 8013ed6:	f000 f8df 	bl	8014098 <rcutils_vsnprintf>
 8013eda:	2800      	cmp	r0, #0
 8013edc:	db02      	blt.n	8013ee4 <rcutils_format_string_limit+0x5c>
 8013ede:	2300      	movs	r3, #0
 8013ee0:	5563      	strb	r3, [r4, r5]
 8013ee2:	e004      	b.n	8013eee <rcutils_format_string_limit+0x66>
 8013ee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ee6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013ee8:	4620      	mov	r0, r4
 8013eea:	4798      	blx	r3
 8013eec:	2400      	movs	r4, #0
 8013eee:	4620      	mov	r0, r4
 8013ef0:	b003      	add	sp, #12
 8013ef2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013ef6:	b004      	add	sp, #16
 8013ef8:	4770      	bx	lr
 8013efa:	bf00      	nop

08013efc <rcutils_repl_str>:
 8013efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f00:	ed2d 8b02 	vpush	{d8}
 8013f04:	b087      	sub	sp, #28
 8013f06:	4680      	mov	r8, r0
 8013f08:	4608      	mov	r0, r1
 8013f0a:	f8cd 8004 	str.w	r8, [sp, #4]
 8013f0e:	ee08 2a10 	vmov	s16, r2
 8013f12:	468a      	mov	sl, r1
 8013f14:	4699      	mov	r9, r3
 8013f16:	f7ec f98d 	bl	8000234 <strlen>
 8013f1a:	2600      	movs	r6, #0
 8013f1c:	4647      	mov	r7, r8
 8013f1e:	9002      	str	r0, [sp, #8]
 8013f20:	46b3      	mov	fp, r6
 8013f22:	2510      	movs	r5, #16
 8013f24:	46b0      	mov	r8, r6
 8013f26:	e01d      	b.n	8013f64 <rcutils_repl_str+0x68>
 8013f28:	f10b 0b01 	add.w	fp, fp, #1
 8013f2c:	455e      	cmp	r6, fp
 8013f2e:	d211      	bcs.n	8013f54 <rcutils_repl_str+0x58>
 8013f30:	442e      	add	r6, r5
 8013f32:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013f36:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8013f3a:	00b1      	lsls	r1, r6, #2
 8013f3c:	4798      	blx	r3
 8013f3e:	2800      	cmp	r0, #0
 8013f40:	f000 8088 	beq.w	8014054 <rcutils_repl_str+0x158>
 8013f44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013f48:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8013f4c:	4680      	mov	r8, r0
 8013f4e:	bf28      	it	cs
 8013f50:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8013f54:	9a01      	ldr	r2, [sp, #4]
 8013f56:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8013f5a:	1aa2      	subs	r2, r4, r2
 8013f5c:	f843 2c04 	str.w	r2, [r3, #-4]
 8013f60:	9b02      	ldr	r3, [sp, #8]
 8013f62:	18e7      	adds	r7, r4, r3
 8013f64:	4651      	mov	r1, sl
 8013f66:	4638      	mov	r0, r7
 8013f68:	f003 f873 	bl	8017052 <strstr>
 8013f6c:	4604      	mov	r4, r0
 8013f6e:	4640      	mov	r0, r8
 8013f70:	2c00      	cmp	r4, #0
 8013f72:	d1d9      	bne.n	8013f28 <rcutils_repl_str+0x2c>
 8013f74:	46b8      	mov	r8, r7
 8013f76:	4607      	mov	r7, r0
 8013f78:	4640      	mov	r0, r8
 8013f7a:	f7ec f95b 	bl	8000234 <strlen>
 8013f7e:	9b01      	ldr	r3, [sp, #4]
 8013f80:	eba8 0303 	sub.w	r3, r8, r3
 8013f84:	181c      	adds	r4, r3, r0
 8013f86:	9404      	str	r4, [sp, #16]
 8013f88:	f1bb 0f00 	cmp.w	fp, #0
 8013f8c:	d04a      	beq.n	8014024 <rcutils_repl_str+0x128>
 8013f8e:	ee18 0a10 	vmov	r0, s16
 8013f92:	f7ec f94f 	bl	8000234 <strlen>
 8013f96:	9b02      	ldr	r3, [sp, #8]
 8013f98:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8013f9c:	1ac3      	subs	r3, r0, r3
 8013f9e:	fb0b 4303 	mla	r3, fp, r3, r4
 8013fa2:	461a      	mov	r2, r3
 8013fa4:	9305      	str	r3, [sp, #20]
 8013fa6:	4606      	mov	r6, r0
 8013fa8:	f8d9 3000 	ldr.w	r3, [r9]
 8013fac:	1c50      	adds	r0, r2, #1
 8013fae:	4798      	blx	r3
 8013fb0:	9003      	str	r0, [sp, #12]
 8013fb2:	2800      	cmp	r0, #0
 8013fb4:	d04f      	beq.n	8014056 <rcutils_repl_str+0x15a>
 8013fb6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013fba:	683a      	ldr	r2, [r7, #0]
 8013fbc:	4641      	mov	r1, r8
 8013fbe:	f003 f8ea 	bl	8017196 <memcpy>
 8013fc2:	683d      	ldr	r5, [r7, #0]
 8013fc4:	9b03      	ldr	r3, [sp, #12]
 8013fc6:	9701      	str	r7, [sp, #4]
 8013fc8:	46ba      	mov	sl, r7
 8013fca:	441d      	add	r5, r3
 8013fcc:	9f02      	ldr	r7, [sp, #8]
 8013fce:	f8cd 9008 	str.w	r9, [sp, #8]
 8013fd2:	2401      	movs	r4, #1
 8013fd4:	46d1      	mov	r9, sl
 8013fd6:	ee18 aa10 	vmov	sl, s16
 8013fda:	e00a      	b.n	8013ff2 <rcutils_repl_str+0xf6>
 8013fdc:	f8d9 5000 	ldr.w	r5, [r9]
 8013fe0:	1aaa      	subs	r2, r5, r2
 8013fe2:	1885      	adds	r5, r0, r2
 8013fe4:	f003 f8d7 	bl	8017196 <memcpy>
 8013fe8:	45a3      	cmp	fp, r4
 8013fea:	f104 0201 	add.w	r2, r4, #1
 8013fee:	d935      	bls.n	801405c <rcutils_repl_str+0x160>
 8013ff0:	4614      	mov	r4, r2
 8013ff2:	4632      	mov	r2, r6
 8013ff4:	4651      	mov	r1, sl
 8013ff6:	4628      	mov	r0, r5
 8013ff8:	f003 f8cd 	bl	8017196 <memcpy>
 8013ffc:	f859 2b04 	ldr.w	r2, [r9], #4
 8014000:	45a3      	cmp	fp, r4
 8014002:	443a      	add	r2, r7
 8014004:	eb05 0006 	add.w	r0, r5, r6
 8014008:	eb08 0102 	add.w	r1, r8, r2
 801400c:	d1e6      	bne.n	8013fdc <rcutils_repl_str+0xe0>
 801400e:	9b04      	ldr	r3, [sp, #16]
 8014010:	1a9a      	subs	r2, r3, r2
 8014012:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8014016:	f003 f8be 	bl	8017196 <memcpy>
 801401a:	9a03      	ldr	r2, [sp, #12]
 801401c:	9905      	ldr	r1, [sp, #20]
 801401e:	2300      	movs	r3, #0
 8014020:	5453      	strb	r3, [r2, r1]
 8014022:	e00b      	b.n	801403c <rcutils_repl_str+0x140>
 8014024:	4620      	mov	r0, r4
 8014026:	f8d9 3000 	ldr.w	r3, [r9]
 801402a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801402e:	3001      	adds	r0, #1
 8014030:	4798      	blx	r3
 8014032:	9003      	str	r0, [sp, #12]
 8014034:	b110      	cbz	r0, 801403c <rcutils_repl_str+0x140>
 8014036:	9901      	ldr	r1, [sp, #4]
 8014038:	f003 f8a5 	bl	8017186 <strcpy>
 801403c:	4638      	mov	r0, r7
 801403e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014042:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014046:	4798      	blx	r3
 8014048:	9803      	ldr	r0, [sp, #12]
 801404a:	b007      	add	sp, #28
 801404c:	ecbd 8b02 	vpop	{d8}
 8014050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014054:	4647      	mov	r7, r8
 8014056:	2300      	movs	r3, #0
 8014058:	9303      	str	r3, [sp, #12]
 801405a:	e7ef      	b.n	801403c <rcutils_repl_str+0x140>
 801405c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8014060:	e7db      	b.n	801401a <rcutils_repl_str+0x11e>
 8014062:	bf00      	nop

08014064 <rcutils_snprintf>:
 8014064:	b40c      	push	{r2, r3}
 8014066:	b530      	push	{r4, r5, lr}
 8014068:	b083      	sub	sp, #12
 801406a:	ab06      	add	r3, sp, #24
 801406c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014070:	9301      	str	r3, [sp, #4]
 8014072:	b152      	cbz	r2, 801408a <rcutils_snprintf+0x26>
 8014074:	b138      	cbz	r0, 8014086 <rcutils_snprintf+0x22>
 8014076:	b141      	cbz	r1, 801408a <rcutils_snprintf+0x26>
 8014078:	f002 ff8c 	bl	8016f94 <vsniprintf>
 801407c:	b003      	add	sp, #12
 801407e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014082:	b002      	add	sp, #8
 8014084:	4770      	bx	lr
 8014086:	2900      	cmp	r1, #0
 8014088:	d0f6      	beq.n	8014078 <rcutils_snprintf+0x14>
 801408a:	f003 f84f 	bl	801712c <__errno>
 801408e:	2316      	movs	r3, #22
 8014090:	6003      	str	r3, [r0, #0]
 8014092:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014096:	e7f1      	b.n	801407c <rcutils_snprintf+0x18>

08014098 <rcutils_vsnprintf>:
 8014098:	b570      	push	{r4, r5, r6, lr}
 801409a:	b13a      	cbz	r2, 80140ac <rcutils_vsnprintf+0x14>
 801409c:	b120      	cbz	r0, 80140a8 <rcutils_vsnprintf+0x10>
 801409e:	b129      	cbz	r1, 80140ac <rcutils_vsnprintf+0x14>
 80140a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80140a4:	f002 bf76 	b.w	8016f94 <vsniprintf>
 80140a8:	2900      	cmp	r1, #0
 80140aa:	d0f9      	beq.n	80140a0 <rcutils_vsnprintf+0x8>
 80140ac:	f003 f83e 	bl	801712c <__errno>
 80140b0:	2316      	movs	r3, #22
 80140b2:	6003      	str	r3, [r0, #0]
 80140b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80140b8:	bd70      	pop	{r4, r5, r6, pc}
 80140ba:	bf00      	nop

080140bc <rcutils_strdup>:
 80140bc:	b084      	sub	sp, #16
 80140be:	b570      	push	{r4, r5, r6, lr}
 80140c0:	b082      	sub	sp, #8
 80140c2:	ac07      	add	r4, sp, #28
 80140c4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80140c8:	4605      	mov	r5, r0
 80140ca:	b1b0      	cbz	r0, 80140fa <rcutils_strdup+0x3e>
 80140cc:	f7ec f8b2 	bl	8000234 <strlen>
 80140d0:	1c42      	adds	r2, r0, #1
 80140d2:	9b07      	ldr	r3, [sp, #28]
 80140d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80140d6:	9201      	str	r2, [sp, #4]
 80140d8:	4606      	mov	r6, r0
 80140da:	4610      	mov	r0, r2
 80140dc:	4798      	blx	r3
 80140de:	4604      	mov	r4, r0
 80140e0:	b128      	cbz	r0, 80140ee <rcutils_strdup+0x32>
 80140e2:	9a01      	ldr	r2, [sp, #4]
 80140e4:	4629      	mov	r1, r5
 80140e6:	f003 f856 	bl	8017196 <memcpy>
 80140ea:	2300      	movs	r3, #0
 80140ec:	55a3      	strb	r3, [r4, r6]
 80140ee:	4620      	mov	r0, r4
 80140f0:	b002      	add	sp, #8
 80140f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80140f6:	b004      	add	sp, #16
 80140f8:	4770      	bx	lr
 80140fa:	4604      	mov	r4, r0
 80140fc:	e7f7      	b.n	80140ee <rcutils_strdup+0x32>
 80140fe:	bf00      	nop

08014100 <rcutils_strndup>:
 8014100:	b082      	sub	sp, #8
 8014102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014104:	ac06      	add	r4, sp, #24
 8014106:	e884 000c 	stmia.w	r4, {r2, r3}
 801410a:	4605      	mov	r5, r0
 801410c:	b188      	cbz	r0, 8014132 <rcutils_strndup+0x32>
 801410e:	1c4f      	adds	r7, r1, #1
 8014110:	460e      	mov	r6, r1
 8014112:	4638      	mov	r0, r7
 8014114:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8014116:	4790      	blx	r2
 8014118:	4604      	mov	r4, r0
 801411a:	b128      	cbz	r0, 8014128 <rcutils_strndup+0x28>
 801411c:	463a      	mov	r2, r7
 801411e:	4629      	mov	r1, r5
 8014120:	f003 f839 	bl	8017196 <memcpy>
 8014124:	2300      	movs	r3, #0
 8014126:	55a3      	strb	r3, [r4, r6]
 8014128:	4620      	mov	r0, r4
 801412a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801412e:	b002      	add	sp, #8
 8014130:	4770      	bx	lr
 8014132:	4604      	mov	r4, r0
 8014134:	e7f8      	b.n	8014128 <rcutils_strndup+0x28>
 8014136:	bf00      	nop

08014138 <rcutils_get_zero_initialized_string_map>:
 8014138:	4b01      	ldr	r3, [pc, #4]	@ (8014140 <rcutils_get_zero_initialized_string_map+0x8>)
 801413a:	2000      	movs	r0, #0
 801413c:	6018      	str	r0, [r3, #0]
 801413e:	4770      	bx	lr
 8014140:	2000abd0 	.word	0x2000abd0

08014144 <rcutils_string_map_reserve>:
 8014144:	2800      	cmp	r0, #0
 8014146:	d05f      	beq.n	8014208 <rcutils_string_map_reserve+0xc4>
 8014148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801414c:	460c      	mov	r4, r1
 801414e:	6801      	ldr	r1, [r0, #0]
 8014150:	b082      	sub	sp, #8
 8014152:	4605      	mov	r5, r0
 8014154:	b129      	cbz	r1, 8014162 <rcutils_string_map_reserve+0x1e>
 8014156:	68cb      	ldr	r3, [r1, #12]
 8014158:	42a3      	cmp	r3, r4
 801415a:	d906      	bls.n	801416a <rcutils_string_map_reserve+0x26>
 801415c:	461c      	mov	r4, r3
 801415e:	2900      	cmp	r1, #0
 8014160:	d1f9      	bne.n	8014156 <rcutils_string_map_reserve+0x12>
 8014162:	201f      	movs	r0, #31
 8014164:	b002      	add	sp, #8
 8014166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801416a:	688b      	ldr	r3, [r1, #8]
 801416c:	42a3      	cmp	r3, r4
 801416e:	d047      	beq.n	8014200 <rcutils_string_map_reserve+0xbc>
 8014170:	6a0e      	ldr	r6, [r1, #32]
 8014172:	2c00      	cmp	r4, #0
 8014174:	d034      	beq.n	80141e0 <rcutils_string_map_reserve+0x9c>
 8014176:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801417a:	d243      	bcs.n	8014204 <rcutils_string_map_reserve+0xc0>
 801417c:	00a7      	lsls	r7, r4, #2
 801417e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8014182:	6808      	ldr	r0, [r1, #0]
 8014184:	4632      	mov	r2, r6
 8014186:	4639      	mov	r1, r7
 8014188:	47c0      	blx	r8
 801418a:	2800      	cmp	r0, #0
 801418c:	d03a      	beq.n	8014204 <rcutils_string_map_reserve+0xc0>
 801418e:	682b      	ldr	r3, [r5, #0]
 8014190:	4632      	mov	r2, r6
 8014192:	6018      	str	r0, [r3, #0]
 8014194:	4639      	mov	r1, r7
 8014196:	6858      	ldr	r0, [r3, #4]
 8014198:	47c0      	blx	r8
 801419a:	2800      	cmp	r0, #0
 801419c:	d032      	beq.n	8014204 <rcutils_string_map_reserve+0xc0>
 801419e:	682d      	ldr	r5, [r5, #0]
 80141a0:	68ab      	ldr	r3, [r5, #8]
 80141a2:	6068      	str	r0, [r5, #4]
 80141a4:	42a3      	cmp	r3, r4
 80141a6:	d226      	bcs.n	80141f6 <rcutils_string_map_reserve+0xb2>
 80141a8:	682a      	ldr	r2, [r5, #0]
 80141aa:	eb00 0c07 	add.w	ip, r0, r7
 80141ae:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80141b2:	45e6      	cmp	lr, ip
 80141b4:	ea4f 0183 	mov.w	r1, r3, lsl #2
 80141b8:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80141bc:	d203      	bcs.n	80141c6 <rcutils_string_map_reserve+0x82>
 80141be:	eb02 0c07 	add.w	ip, r2, r7
 80141c2:	4566      	cmp	r6, ip
 80141c4:	d322      	bcc.n	801420c <rcutils_string_map_reserve+0xc8>
 80141c6:	1ae3      	subs	r3, r4, r3
 80141c8:	009a      	lsls	r2, r3, #2
 80141ca:	4670      	mov	r0, lr
 80141cc:	2100      	movs	r1, #0
 80141ce:	9201      	str	r2, [sp, #4]
 80141d0:	f002 ff18 	bl	8017004 <memset>
 80141d4:	9a01      	ldr	r2, [sp, #4]
 80141d6:	2100      	movs	r1, #0
 80141d8:	4630      	mov	r0, r6
 80141da:	f002 ff13 	bl	8017004 <memset>
 80141de:	e00a      	b.n	80141f6 <rcutils_string_map_reserve+0xb2>
 80141e0:	694f      	ldr	r7, [r1, #20]
 80141e2:	6808      	ldr	r0, [r1, #0]
 80141e4:	4631      	mov	r1, r6
 80141e6:	47b8      	blx	r7
 80141e8:	682b      	ldr	r3, [r5, #0]
 80141ea:	4631      	mov	r1, r6
 80141ec:	6858      	ldr	r0, [r3, #4]
 80141ee:	601c      	str	r4, [r3, #0]
 80141f0:	47b8      	blx	r7
 80141f2:	682d      	ldr	r5, [r5, #0]
 80141f4:	606c      	str	r4, [r5, #4]
 80141f6:	2000      	movs	r0, #0
 80141f8:	60ac      	str	r4, [r5, #8]
 80141fa:	b002      	add	sp, #8
 80141fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014200:	2000      	movs	r0, #0
 8014202:	e7af      	b.n	8014164 <rcutils_string_map_reserve+0x20>
 8014204:	200a      	movs	r0, #10
 8014206:	e7ad      	b.n	8014164 <rcutils_string_map_reserve+0x20>
 8014208:	200b      	movs	r0, #11
 801420a:	4770      	bx	lr
 801420c:	1f0b      	subs	r3, r1, #4
 801420e:	4418      	add	r0, r3
 8014210:	4413      	add	r3, r2
 8014212:	3a04      	subs	r2, #4
 8014214:	4417      	add	r7, r2
 8014216:	2200      	movs	r2, #0
 8014218:	f843 2f04 	str.w	r2, [r3, #4]!
 801421c:	42bb      	cmp	r3, r7
 801421e:	f840 2f04 	str.w	r2, [r0, #4]!
 8014222:	d1f9      	bne.n	8014218 <rcutils_string_map_reserve+0xd4>
 8014224:	e7e7      	b.n	80141f6 <rcutils_string_map_reserve+0xb2>
 8014226:	bf00      	nop

08014228 <rcutils_string_map_init>:
 8014228:	b082      	sub	sp, #8
 801422a:	b570      	push	{r4, r5, r6, lr}
 801422c:	ac04      	add	r4, sp, #16
 801422e:	e884 000c 	stmia.w	r4, {r2, r3}
 8014232:	b380      	cbz	r0, 8014296 <rcutils_string_map_init+0x6e>
 8014234:	6806      	ldr	r6, [r0, #0]
 8014236:	4604      	mov	r4, r0
 8014238:	b12e      	cbz	r6, 8014246 <rcutils_string_map_init+0x1e>
 801423a:	251e      	movs	r5, #30
 801423c:	4628      	mov	r0, r5
 801423e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014242:	b002      	add	sp, #8
 8014244:	4770      	bx	lr
 8014246:	a804      	add	r0, sp, #16
 8014248:	460d      	mov	r5, r1
 801424a:	f7f7 fa6f 	bl	800b72c <rcutils_allocator_is_valid>
 801424e:	b310      	cbz	r0, 8014296 <rcutils_string_map_init+0x6e>
 8014250:	9b04      	ldr	r3, [sp, #16]
 8014252:	9908      	ldr	r1, [sp, #32]
 8014254:	2024      	movs	r0, #36	@ 0x24
 8014256:	4798      	blx	r3
 8014258:	6020      	str	r0, [r4, #0]
 801425a:	b310      	cbz	r0, 80142a2 <rcutils_string_map_init+0x7a>
 801425c:	f10d 0e10 	add.w	lr, sp, #16
 8014260:	e9c0 6600 	strd	r6, r6, [r0]
 8014264:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8014268:	f100 0c10 	add.w	ip, r0, #16
 801426c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014270:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014274:	f8de 3000 	ldr.w	r3, [lr]
 8014278:	f8cc 3000 	str.w	r3, [ip]
 801427c:	4629      	mov	r1, r5
 801427e:	4620      	mov	r0, r4
 8014280:	f7ff ff60 	bl	8014144 <rcutils_string_map_reserve>
 8014284:	4605      	mov	r5, r0
 8014286:	2800      	cmp	r0, #0
 8014288:	d0d8      	beq.n	801423c <rcutils_string_map_init+0x14>
 801428a:	9b05      	ldr	r3, [sp, #20]
 801428c:	9908      	ldr	r1, [sp, #32]
 801428e:	6820      	ldr	r0, [r4, #0]
 8014290:	4798      	blx	r3
 8014292:	6026      	str	r6, [r4, #0]
 8014294:	e7d2      	b.n	801423c <rcutils_string_map_init+0x14>
 8014296:	250b      	movs	r5, #11
 8014298:	4628      	mov	r0, r5
 801429a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801429e:	b002      	add	sp, #8
 80142a0:	4770      	bx	lr
 80142a2:	250a      	movs	r5, #10
 80142a4:	e7ca      	b.n	801423c <rcutils_string_map_init+0x14>
 80142a6:	bf00      	nop

080142a8 <rcutils_string_map_fini>:
 80142a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142ac:	b082      	sub	sp, #8
 80142ae:	2800      	cmp	r0, #0
 80142b0:	d03a      	beq.n	8014328 <rcutils_string_map_fini+0x80>
 80142b2:	6804      	ldr	r4, [r0, #0]
 80142b4:	4606      	mov	r6, r0
 80142b6:	2c00      	cmp	r4, #0
 80142b8:	d032      	beq.n	8014320 <rcutils_string_map_fini+0x78>
 80142ba:	68a3      	ldr	r3, [r4, #8]
 80142bc:	b32b      	cbz	r3, 801430a <rcutils_string_map_fini+0x62>
 80142be:	2500      	movs	r5, #0
 80142c0:	6822      	ldr	r2, [r4, #0]
 80142c2:	462f      	mov	r7, r5
 80142c4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80142c8:	b1e0      	cbz	r0, 8014304 <rcutils_string_map_fini+0x5c>
 80142ca:	6a21      	ldr	r1, [r4, #32]
 80142cc:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80142d0:	9101      	str	r1, [sp, #4]
 80142d2:	47c0      	blx	r8
 80142d4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80142d8:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80142dc:	9901      	ldr	r1, [sp, #4]
 80142de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80142e2:	47c0      	blx	r8
 80142e4:	68e3      	ldr	r3, [r4, #12]
 80142e6:	6862      	ldr	r2, [r4, #4]
 80142e8:	3b01      	subs	r3, #1
 80142ea:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80142ee:	60e3      	str	r3, [r4, #12]
 80142f0:	6834      	ldr	r4, [r6, #0]
 80142f2:	68a3      	ldr	r3, [r4, #8]
 80142f4:	3501      	adds	r5, #1
 80142f6:	429d      	cmp	r5, r3
 80142f8:	d207      	bcs.n	801430a <rcutils_string_map_fini+0x62>
 80142fa:	6822      	ldr	r2, [r4, #0]
 80142fc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014300:	2800      	cmp	r0, #0
 8014302:	d1e2      	bne.n	80142ca <rcutils_string_map_fini+0x22>
 8014304:	3501      	adds	r5, #1
 8014306:	429d      	cmp	r5, r3
 8014308:	d3dc      	bcc.n	80142c4 <rcutils_string_map_fini+0x1c>
 801430a:	2100      	movs	r1, #0
 801430c:	4630      	mov	r0, r6
 801430e:	f7ff ff19 	bl	8014144 <rcutils_string_map_reserve>
 8014312:	4604      	mov	r4, r0
 8014314:	b920      	cbnz	r0, 8014320 <rcutils_string_map_fini+0x78>
 8014316:	6830      	ldr	r0, [r6, #0]
 8014318:	6943      	ldr	r3, [r0, #20]
 801431a:	6a01      	ldr	r1, [r0, #32]
 801431c:	4798      	blx	r3
 801431e:	6034      	str	r4, [r6, #0]
 8014320:	4620      	mov	r0, r4
 8014322:	b002      	add	sp, #8
 8014324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014328:	240b      	movs	r4, #11
 801432a:	4620      	mov	r0, r4
 801432c:	b002      	add	sp, #8
 801432e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014332:	bf00      	nop

08014334 <rcutils_string_map_getn>:
 8014334:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014338:	b300      	cbz	r0, 801437c <rcutils_string_map_getn+0x48>
 801433a:	6807      	ldr	r7, [r0, #0]
 801433c:	b1ff      	cbz	r7, 801437e <rcutils_string_map_getn+0x4a>
 801433e:	4688      	mov	r8, r1
 8014340:	b1e1      	cbz	r1, 801437c <rcutils_string_map_getn+0x48>
 8014342:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8014346:	683e      	ldr	r6, [r7, #0]
 8014348:	f1ba 0f00 	cmp.w	sl, #0
 801434c:	d016      	beq.n	801437c <rcutils_string_map_getn+0x48>
 801434e:	4691      	mov	r9, r2
 8014350:	3e04      	subs	r6, #4
 8014352:	2400      	movs	r4, #0
 8014354:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8014358:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801435c:	4628      	mov	r0, r5
 801435e:	3401      	adds	r4, #1
 8014360:	b155      	cbz	r5, 8014378 <rcutils_string_map_getn+0x44>
 8014362:	f7eb ff67 	bl	8000234 <strlen>
 8014366:	4548      	cmp	r0, r9
 8014368:	4602      	mov	r2, r0
 801436a:	4629      	mov	r1, r5
 801436c:	bf38      	it	cc
 801436e:	464a      	movcc	r2, r9
 8014370:	4640      	mov	r0, r8
 8014372:	f002 fe5c 	bl	801702e <strncmp>
 8014376:	b128      	cbz	r0, 8014384 <rcutils_string_map_getn+0x50>
 8014378:	45a2      	cmp	sl, r4
 801437a:	d1eb      	bne.n	8014354 <rcutils_string_map_getn+0x20>
 801437c:	2700      	movs	r7, #0
 801437e:	4638      	mov	r0, r7
 8014380:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	f853 700b 	ldr.w	r7, [r3, fp]
 801438a:	4638      	mov	r0, r7
 801438c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014390 <rmw_get_zero_initialized_context>:
 8014390:	b510      	push	{r4, lr}
 8014392:	4604      	mov	r4, r0
 8014394:	3010      	adds	r0, #16
 8014396:	f7f7 fa5b 	bl	800b850 <rmw_get_zero_initialized_init_options>
 801439a:	2300      	movs	r3, #0
 801439c:	2000      	movs	r0, #0
 801439e:	2100      	movs	r1, #0
 80143a0:	e9c4 0100 	strd	r0, r1, [r4]
 80143a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 80143a8:	60a3      	str	r3, [r4, #8]
 80143aa:	4620      	mov	r0, r4
 80143ac:	bd10      	pop	{r4, pc}
 80143ae:	bf00      	nop

080143b0 <rmw_subscription_content_filter_options_fini>:
 80143b0:	b1b0      	cbz	r0, 80143e0 <rmw_subscription_content_filter_options_fini+0x30>
 80143b2:	b538      	push	{r3, r4, r5, lr}
 80143b4:	4604      	mov	r4, r0
 80143b6:	4608      	mov	r0, r1
 80143b8:	460d      	mov	r5, r1
 80143ba:	f7f7 f9b7 	bl	800b72c <rcutils_allocator_is_valid>
 80143be:	b168      	cbz	r0, 80143dc <rmw_subscription_content_filter_options_fini+0x2c>
 80143c0:	6820      	ldr	r0, [r4, #0]
 80143c2:	b120      	cbz	r0, 80143ce <rmw_subscription_content_filter_options_fini+0x1e>
 80143c4:	686b      	ldr	r3, [r5, #4]
 80143c6:	6929      	ldr	r1, [r5, #16]
 80143c8:	4798      	blx	r3
 80143ca:	2300      	movs	r3, #0
 80143cc:	6023      	str	r3, [r4, #0]
 80143ce:	1d20      	adds	r0, r4, #4
 80143d0:	f002 f9ce 	bl	8016770 <rcutils_string_array_fini>
 80143d4:	3800      	subs	r0, #0
 80143d6:	bf18      	it	ne
 80143d8:	2001      	movne	r0, #1
 80143da:	bd38      	pop	{r3, r4, r5, pc}
 80143dc:	200b      	movs	r0, #11
 80143de:	bd38      	pop	{r3, r4, r5, pc}
 80143e0:	200b      	movs	r0, #11
 80143e2:	4770      	bx	lr

080143e4 <rmw_get_default_subscription_options>:
 80143e4:	2200      	movs	r2, #0
 80143e6:	e9c0 2200 	strd	r2, r2, [r0]
 80143ea:	6082      	str	r2, [r0, #8]
 80143ec:	4770      	bx	lr
 80143ee:	bf00      	nop

080143f0 <rmw_time_equal>:
 80143f0:	b4f0      	push	{r4, r5, r6, r7}
 80143f2:	b084      	sub	sp, #16
 80143f4:	ac04      	add	r4, sp, #16
 80143f6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80143fa:	4603      	mov	r3, r0
 80143fc:	4924      	ldr	r1, [pc, #144]	@ (8014490 <rmw_time_equal+0xa0>)
 80143fe:	9e03      	ldr	r6, [sp, #12]
 8014400:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8014404:	2202      	movs	r2, #2
 8014406:	4299      	cmp	r1, r3
 8014408:	41aa      	sbcs	r2, r5
 801440a:	d330      	bcc.n	801446e <rmw_time_equal+0x7e>
 801440c:	4c21      	ldr	r4, [pc, #132]	@ (8014494 <rmw_time_equal+0xa4>)
 801440e:	fba3 3204 	umull	r3, r2, r3, r4
 8014412:	fb04 2205 	mla	r2, r4, r5, r2
 8014416:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801441a:	43dd      	mvns	r5, r3
 801441c:	1a8c      	subs	r4, r1, r2
 801441e:	4285      	cmp	r5, r0
 8014420:	41b4      	sbcs	r4, r6
 8014422:	d332      	bcc.n	801448a <rmw_time_equal+0x9a>
 8014424:	eb10 0c03 	adds.w	ip, r0, r3
 8014428:	eb42 0106 	adc.w	r1, r2, r6
 801442c:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8014430:	4817      	ldr	r0, [pc, #92]	@ (8014490 <rmw_time_equal+0xa0>)
 8014432:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8014434:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8014436:	2202      	movs	r2, #2
 8014438:	4298      	cmp	r0, r3
 801443a:	41b2      	sbcs	r2, r6
 801443c:	d31c      	bcc.n	8014478 <rmw_time_equal+0x88>
 801443e:	4c15      	ldr	r4, [pc, #84]	@ (8014494 <rmw_time_equal+0xa4>)
 8014440:	fba3 3204 	umull	r3, r2, r3, r4
 8014444:	fb04 2206 	mla	r2, r4, r6, r2
 8014448:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801444c:	43de      	mvns	r6, r3
 801444e:	1a84      	subs	r4, r0, r2
 8014450:	42ae      	cmp	r6, r5
 8014452:	41bc      	sbcs	r4, r7
 8014454:	d315      	bcc.n	8014482 <rmw_time_equal+0x92>
 8014456:	195b      	adds	r3, r3, r5
 8014458:	eb42 0207 	adc.w	r2, r2, r7
 801445c:	428a      	cmp	r2, r1
 801445e:	bf08      	it	eq
 8014460:	4563      	cmpeq	r3, ip
 8014462:	bf0c      	ite	eq
 8014464:	2001      	moveq	r0, #1
 8014466:	2000      	movne	r0, #0
 8014468:	b004      	add	sp, #16
 801446a:	bcf0      	pop	{r4, r5, r6, r7}
 801446c:	4770      	bx	lr
 801446e:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8014472:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014476:	e7d9      	b.n	801442c <rmw_time_equal+0x3c>
 8014478:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801447c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8014480:	e7ec      	b.n	801445c <rmw_time_equal+0x6c>
 8014482:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014486:	4602      	mov	r2, r0
 8014488:	e7e8      	b.n	801445c <rmw_time_equal+0x6c>
 801448a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801448e:	e7cd      	b.n	801442c <rmw_time_equal+0x3c>
 8014490:	25c17d04 	.word	0x25c17d04
 8014494:	3b9aca00 	.word	0x3b9aca00

08014498 <rmw_time_total_nsec>:
 8014498:	b470      	push	{r4, r5, r6}
 801449a:	b085      	sub	sp, #20
 801449c:	ac04      	add	r4, sp, #16
 801449e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80144a2:	4603      	mov	r3, r0
 80144a4:	4912      	ldr	r1, [pc, #72]	@ (80144f0 <rmw_time_total_nsec+0x58>)
 80144a6:	9e03      	ldr	r6, [sp, #12]
 80144a8:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80144ac:	2202      	movs	r2, #2
 80144ae:	4299      	cmp	r1, r3
 80144b0:	41aa      	sbcs	r2, r5
 80144b2:	d311      	bcc.n	80144d8 <rmw_time_total_nsec+0x40>
 80144b4:	4c0f      	ldr	r4, [pc, #60]	@ (80144f4 <rmw_time_total_nsec+0x5c>)
 80144b6:	fba3 3204 	umull	r3, r2, r3, r4
 80144ba:	fb04 2205 	mla	r2, r4, r5, r2
 80144be:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80144c2:	43dd      	mvns	r5, r3
 80144c4:	1a8c      	subs	r4, r1, r2
 80144c6:	4285      	cmp	r5, r0
 80144c8:	41b4      	sbcs	r4, r6
 80144ca:	d30c      	bcc.n	80144e6 <rmw_time_total_nsec+0x4e>
 80144cc:	1818      	adds	r0, r3, r0
 80144ce:	eb42 0106 	adc.w	r1, r2, r6
 80144d2:	b005      	add	sp, #20
 80144d4:	bc70      	pop	{r4, r5, r6}
 80144d6:	4770      	bx	lr
 80144d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80144dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80144e0:	b005      	add	sp, #20
 80144e2:	bc70      	pop	{r4, r5, r6}
 80144e4:	4770      	bx	lr
 80144e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80144ea:	b005      	add	sp, #20
 80144ec:	bc70      	pop	{r4, r5, r6}
 80144ee:	4770      	bx	lr
 80144f0:	25c17d04 	.word	0x25c17d04
 80144f4:	3b9aca00 	.word	0x3b9aca00

080144f8 <rmw_get_zero_initialized_message_info>:
 80144f8:	b510      	push	{r4, lr}
 80144fa:	2240      	movs	r2, #64	@ 0x40
 80144fc:	4604      	mov	r4, r0
 80144fe:	2100      	movs	r1, #0
 8014500:	f002 fd80 	bl	8017004 <memset>
 8014504:	4620      	mov	r0, r4
 8014506:	bd10      	pop	{r4, pc}

08014508 <rmw_validate_full_topic_name>:
 8014508:	2800      	cmp	r0, #0
 801450a:	d057      	beq.n	80145bc <rmw_validate_full_topic_name+0xb4>
 801450c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014510:	460d      	mov	r5, r1
 8014512:	2900      	cmp	r1, #0
 8014514:	d054      	beq.n	80145c0 <rmw_validate_full_topic_name+0xb8>
 8014516:	4616      	mov	r6, r2
 8014518:	4604      	mov	r4, r0
 801451a:	f7eb fe8b 	bl	8000234 <strlen>
 801451e:	b148      	cbz	r0, 8014534 <rmw_validate_full_topic_name+0x2c>
 8014520:	7823      	ldrb	r3, [r4, #0]
 8014522:	2b2f      	cmp	r3, #47	@ 0x2f
 8014524:	d00d      	beq.n	8014542 <rmw_validate_full_topic_name+0x3a>
 8014526:	2302      	movs	r3, #2
 8014528:	602b      	str	r3, [r5, #0]
 801452a:	b13e      	cbz	r6, 801453c <rmw_validate_full_topic_name+0x34>
 801452c:	2000      	movs	r0, #0
 801452e:	6030      	str	r0, [r6, #0]
 8014530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014534:	2301      	movs	r3, #1
 8014536:	602b      	str	r3, [r5, #0]
 8014538:	2e00      	cmp	r6, #0
 801453a:	d1f7      	bne.n	801452c <rmw_validate_full_topic_name+0x24>
 801453c:	2000      	movs	r0, #0
 801453e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014542:	1e43      	subs	r3, r0, #1
 8014544:	5ce2      	ldrb	r2, [r4, r3]
 8014546:	2a2f      	cmp	r2, #47	@ 0x2f
 8014548:	d03c      	beq.n	80145c4 <rmw_validate_full_topic_name+0xbc>
 801454a:	1e63      	subs	r3, r4, #1
 801454c:	eb03 0800 	add.w	r8, r3, r0
 8014550:	f1c4 0e01 	rsb	lr, r4, #1
 8014554:	eb0e 0703 	add.w	r7, lr, r3
 8014558:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 801455c:	f021 0220 	bic.w	r2, r1, #32
 8014560:	3a41      	subs	r2, #65	@ 0x41
 8014562:	2a19      	cmp	r2, #25
 8014564:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8014568:	d90b      	bls.n	8014582 <rmw_validate_full_topic_name+0x7a>
 801456a:	295f      	cmp	r1, #95	@ 0x5f
 801456c:	d009      	beq.n	8014582 <rmw_validate_full_topic_name+0x7a>
 801456e:	f1bc 0f0a 	cmp.w	ip, #10
 8014572:	d906      	bls.n	8014582 <rmw_validate_full_topic_name+0x7a>
 8014574:	2304      	movs	r3, #4
 8014576:	602b      	str	r3, [r5, #0]
 8014578:	2e00      	cmp	r6, #0
 801457a:	d0df      	beq.n	801453c <rmw_validate_full_topic_name+0x34>
 801457c:	6037      	str	r7, [r6, #0]
 801457e:	2000      	movs	r0, #0
 8014580:	e7d6      	b.n	8014530 <rmw_validate_full_topic_name+0x28>
 8014582:	4543      	cmp	r3, r8
 8014584:	d1e6      	bne.n	8014554 <rmw_validate_full_topic_name+0x4c>
 8014586:	4f1a      	ldr	r7, [pc, #104]	@ (80145f0 <rmw_validate_full_topic_name+0xe8>)
 8014588:	2301      	movs	r3, #1
 801458a:	e004      	b.n	8014596 <rmw_validate_full_topic_name+0x8e>
 801458c:	4298      	cmp	r0, r3
 801458e:	f104 0401 	add.w	r4, r4, #1
 8014592:	d91c      	bls.n	80145ce <rmw_validate_full_topic_name+0xc6>
 8014594:	4613      	mov	r3, r2
 8014596:	4298      	cmp	r0, r3
 8014598:	f103 0201 	add.w	r2, r3, #1
 801459c:	d0f6      	beq.n	801458c <rmw_validate_full_topic_name+0x84>
 801459e:	7821      	ldrb	r1, [r4, #0]
 80145a0:	292f      	cmp	r1, #47	@ 0x2f
 80145a2:	d1f3      	bne.n	801458c <rmw_validate_full_topic_name+0x84>
 80145a4:	7861      	ldrb	r1, [r4, #1]
 80145a6:	292f      	cmp	r1, #47	@ 0x2f
 80145a8:	d01c      	beq.n	80145e4 <rmw_validate_full_topic_name+0xdc>
 80145aa:	5dc9      	ldrb	r1, [r1, r7]
 80145ac:	0749      	lsls	r1, r1, #29
 80145ae:	d5ed      	bpl.n	801458c <rmw_validate_full_topic_name+0x84>
 80145b0:	2206      	movs	r2, #6
 80145b2:	602a      	str	r2, [r5, #0]
 80145b4:	2e00      	cmp	r6, #0
 80145b6:	d0c1      	beq.n	801453c <rmw_validate_full_topic_name+0x34>
 80145b8:	6033      	str	r3, [r6, #0]
 80145ba:	e7bf      	b.n	801453c <rmw_validate_full_topic_name+0x34>
 80145bc:	200b      	movs	r0, #11
 80145be:	4770      	bx	lr
 80145c0:	200b      	movs	r0, #11
 80145c2:	e7b5      	b.n	8014530 <rmw_validate_full_topic_name+0x28>
 80145c4:	2203      	movs	r2, #3
 80145c6:	602a      	str	r2, [r5, #0]
 80145c8:	2e00      	cmp	r6, #0
 80145ca:	d1f5      	bne.n	80145b8 <rmw_validate_full_topic_name+0xb0>
 80145cc:	e7b6      	b.n	801453c <rmw_validate_full_topic_name+0x34>
 80145ce:	28f7      	cmp	r0, #247	@ 0xf7
 80145d0:	d802      	bhi.n	80145d8 <rmw_validate_full_topic_name+0xd0>
 80145d2:	2000      	movs	r0, #0
 80145d4:	6028      	str	r0, [r5, #0]
 80145d6:	e7ab      	b.n	8014530 <rmw_validate_full_topic_name+0x28>
 80145d8:	2307      	movs	r3, #7
 80145da:	602b      	str	r3, [r5, #0]
 80145dc:	2e00      	cmp	r6, #0
 80145de:	d0ad      	beq.n	801453c <rmw_validate_full_topic_name+0x34>
 80145e0:	23f6      	movs	r3, #246	@ 0xf6
 80145e2:	e7e9      	b.n	80145b8 <rmw_validate_full_topic_name+0xb0>
 80145e4:	2205      	movs	r2, #5
 80145e6:	602a      	str	r2, [r5, #0]
 80145e8:	2e00      	cmp	r6, #0
 80145ea:	d1e5      	bne.n	80145b8 <rmw_validate_full_topic_name+0xb0>
 80145ec:	e7a6      	b.n	801453c <rmw_validate_full_topic_name+0x34>
 80145ee:	bf00      	nop
 80145f0:	08018b78 	.word	0x08018b78

080145f4 <rmw_validate_namespace_with_size>:
 80145f4:	b340      	cbz	r0, 8014648 <rmw_validate_namespace_with_size+0x54>
 80145f6:	b570      	push	{r4, r5, r6, lr}
 80145f8:	4614      	mov	r4, r2
 80145fa:	b0c2      	sub	sp, #264	@ 0x108
 80145fc:	b332      	cbz	r2, 801464c <rmw_validate_namespace_with_size+0x58>
 80145fe:	2901      	cmp	r1, #1
 8014600:	460d      	mov	r5, r1
 8014602:	461e      	mov	r6, r3
 8014604:	d102      	bne.n	801460c <rmw_validate_namespace_with_size+0x18>
 8014606:	7803      	ldrb	r3, [r0, #0]
 8014608:	2b2f      	cmp	r3, #47	@ 0x2f
 801460a:	d012      	beq.n	8014632 <rmw_validate_namespace_with_size+0x3e>
 801460c:	aa01      	add	r2, sp, #4
 801460e:	4669      	mov	r1, sp
 8014610:	f7ff ff7a 	bl	8014508 <rmw_validate_full_topic_name>
 8014614:	b978      	cbnz	r0, 8014636 <rmw_validate_namespace_with_size+0x42>
 8014616:	9b00      	ldr	r3, [sp, #0]
 8014618:	b14b      	cbz	r3, 801462e <rmw_validate_namespace_with_size+0x3a>
 801461a:	2b07      	cmp	r3, #7
 801461c:	d007      	beq.n	801462e <rmw_validate_namespace_with_size+0x3a>
 801461e:	1e5a      	subs	r2, r3, #1
 8014620:	2a05      	cmp	r2, #5
 8014622:	d82b      	bhi.n	801467c <rmw_validate_namespace_with_size+0x88>
 8014624:	e8df f002 	tbb	[pc, r2]
 8014628:	1e212427 	.word	0x1e212427
 801462c:	141b      	.short	0x141b
 801462e:	2df5      	cmp	r5, #245	@ 0xf5
 8014630:	d803      	bhi.n	801463a <rmw_validate_namespace_with_size+0x46>
 8014632:	2000      	movs	r0, #0
 8014634:	6020      	str	r0, [r4, #0]
 8014636:	b042      	add	sp, #264	@ 0x108
 8014638:	bd70      	pop	{r4, r5, r6, pc}
 801463a:	2307      	movs	r3, #7
 801463c:	6023      	str	r3, [r4, #0]
 801463e:	2e00      	cmp	r6, #0
 8014640:	d0f9      	beq.n	8014636 <rmw_validate_namespace_with_size+0x42>
 8014642:	23f4      	movs	r3, #244	@ 0xf4
 8014644:	6033      	str	r3, [r6, #0]
 8014646:	e7f6      	b.n	8014636 <rmw_validate_namespace_with_size+0x42>
 8014648:	200b      	movs	r0, #11
 801464a:	4770      	bx	lr
 801464c:	200b      	movs	r0, #11
 801464e:	e7f2      	b.n	8014636 <rmw_validate_namespace_with_size+0x42>
 8014650:	2306      	movs	r3, #6
 8014652:	6023      	str	r3, [r4, #0]
 8014654:	2e00      	cmp	r6, #0
 8014656:	d0ee      	beq.n	8014636 <rmw_validate_namespace_with_size+0x42>
 8014658:	9b01      	ldr	r3, [sp, #4]
 801465a:	6033      	str	r3, [r6, #0]
 801465c:	e7eb      	b.n	8014636 <rmw_validate_namespace_with_size+0x42>
 801465e:	2305      	movs	r3, #5
 8014660:	6023      	str	r3, [r4, #0]
 8014662:	e7f7      	b.n	8014654 <rmw_validate_namespace_with_size+0x60>
 8014664:	2304      	movs	r3, #4
 8014666:	6023      	str	r3, [r4, #0]
 8014668:	e7f4      	b.n	8014654 <rmw_validate_namespace_with_size+0x60>
 801466a:	2303      	movs	r3, #3
 801466c:	6023      	str	r3, [r4, #0]
 801466e:	e7f1      	b.n	8014654 <rmw_validate_namespace_with_size+0x60>
 8014670:	2302      	movs	r3, #2
 8014672:	6023      	str	r3, [r4, #0]
 8014674:	e7ee      	b.n	8014654 <rmw_validate_namespace_with_size+0x60>
 8014676:	2301      	movs	r3, #1
 8014678:	6023      	str	r3, [r4, #0]
 801467a:	e7eb      	b.n	8014654 <rmw_validate_namespace_with_size+0x60>
 801467c:	4a03      	ldr	r2, [pc, #12]	@ (801468c <rmw_validate_namespace_with_size+0x98>)
 801467e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8014682:	a802      	add	r0, sp, #8
 8014684:	f7ff fcee 	bl	8014064 <rcutils_snprintf>
 8014688:	2001      	movs	r0, #1
 801468a:	e7d4      	b.n	8014636 <rmw_validate_namespace_with_size+0x42>
 801468c:	08018780 	.word	0x08018780

08014690 <rmw_validate_namespace>:
 8014690:	b168      	cbz	r0, 80146ae <rmw_validate_namespace+0x1e>
 8014692:	b570      	push	{r4, r5, r6, lr}
 8014694:	460d      	mov	r5, r1
 8014696:	4616      	mov	r6, r2
 8014698:	4604      	mov	r4, r0
 801469a:	f7eb fdcb 	bl	8000234 <strlen>
 801469e:	4633      	mov	r3, r6
 80146a0:	4601      	mov	r1, r0
 80146a2:	462a      	mov	r2, r5
 80146a4:	4620      	mov	r0, r4
 80146a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80146aa:	f7ff bfa3 	b.w	80145f4 <rmw_validate_namespace_with_size>
 80146ae:	200b      	movs	r0, #11
 80146b0:	4770      	bx	lr
 80146b2:	bf00      	nop

080146b4 <rmw_namespace_validation_result_string>:
 80146b4:	2807      	cmp	r0, #7
 80146b6:	bf9a      	itte	ls
 80146b8:	4b02      	ldrls	r3, [pc, #8]	@ (80146c4 <rmw_namespace_validation_result_string+0x10>)
 80146ba:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80146be:	4802      	ldrhi	r0, [pc, #8]	@ (80146c8 <rmw_namespace_validation_result_string+0x14>)
 80146c0:	4770      	bx	lr
 80146c2:	bf00      	nop
 80146c4:	08018978 	.word	0x08018978
 80146c8:	080187d0 	.word	0x080187d0

080146cc <rmw_validate_node_name>:
 80146cc:	2800      	cmp	r0, #0
 80146ce:	d03b      	beq.n	8014748 <rmw_validate_node_name+0x7c>
 80146d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146d4:	460d      	mov	r5, r1
 80146d6:	2900      	cmp	r1, #0
 80146d8:	d038      	beq.n	801474c <rmw_validate_node_name+0x80>
 80146da:	4616      	mov	r6, r2
 80146dc:	4604      	mov	r4, r0
 80146de:	f7eb fda9 	bl	8000234 <strlen>
 80146e2:	b1e0      	cbz	r0, 801471e <rmw_validate_node_name+0x52>
 80146e4:	1e63      	subs	r3, r4, #1
 80146e6:	eb03 0800 	add.w	r8, r3, r0
 80146ea:	f1c4 0101 	rsb	r1, r4, #1
 80146ee:	18cf      	adds	r7, r1, r3
 80146f0:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80146f4:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 80146f8:	f02e 0c20 	bic.w	ip, lr, #32
 80146fc:	2a09      	cmp	r2, #9
 80146fe:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8014702:	d914      	bls.n	801472e <rmw_validate_node_name+0x62>
 8014704:	f1bc 0f19 	cmp.w	ip, #25
 8014708:	d911      	bls.n	801472e <rmw_validate_node_name+0x62>
 801470a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 801470e:	d00e      	beq.n	801472e <rmw_validate_node_name+0x62>
 8014710:	2302      	movs	r3, #2
 8014712:	602b      	str	r3, [r5, #0]
 8014714:	b106      	cbz	r6, 8014718 <rmw_validate_node_name+0x4c>
 8014716:	6037      	str	r7, [r6, #0]
 8014718:	2000      	movs	r0, #0
 801471a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801471e:	2301      	movs	r3, #1
 8014720:	602b      	str	r3, [r5, #0]
 8014722:	2e00      	cmp	r6, #0
 8014724:	d0f8      	beq.n	8014718 <rmw_validate_node_name+0x4c>
 8014726:	2000      	movs	r0, #0
 8014728:	6030      	str	r0, [r6, #0]
 801472a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801472e:	4543      	cmp	r3, r8
 8014730:	d1dd      	bne.n	80146ee <rmw_validate_node_name+0x22>
 8014732:	7822      	ldrb	r2, [r4, #0]
 8014734:	4b0d      	ldr	r3, [pc, #52]	@ (801476c <rmw_validate_node_name+0xa0>)
 8014736:	5cd3      	ldrb	r3, [r2, r3]
 8014738:	f013 0304 	ands.w	r3, r3, #4
 801473c:	d110      	bne.n	8014760 <rmw_validate_node_name+0x94>
 801473e:	28ff      	cmp	r0, #255	@ 0xff
 8014740:	d806      	bhi.n	8014750 <rmw_validate_node_name+0x84>
 8014742:	602b      	str	r3, [r5, #0]
 8014744:	4618      	mov	r0, r3
 8014746:	e7e8      	b.n	801471a <rmw_validate_node_name+0x4e>
 8014748:	200b      	movs	r0, #11
 801474a:	4770      	bx	lr
 801474c:	200b      	movs	r0, #11
 801474e:	e7e4      	b.n	801471a <rmw_validate_node_name+0x4e>
 8014750:	2204      	movs	r2, #4
 8014752:	602a      	str	r2, [r5, #0]
 8014754:	2e00      	cmp	r6, #0
 8014756:	d0df      	beq.n	8014718 <rmw_validate_node_name+0x4c>
 8014758:	22fe      	movs	r2, #254	@ 0xfe
 801475a:	6032      	str	r2, [r6, #0]
 801475c:	4618      	mov	r0, r3
 801475e:	e7dc      	b.n	801471a <rmw_validate_node_name+0x4e>
 8014760:	2303      	movs	r3, #3
 8014762:	602b      	str	r3, [r5, #0]
 8014764:	2e00      	cmp	r6, #0
 8014766:	d1de      	bne.n	8014726 <rmw_validate_node_name+0x5a>
 8014768:	e7d6      	b.n	8014718 <rmw_validate_node_name+0x4c>
 801476a:	bf00      	nop
 801476c:	08018b78 	.word	0x08018b78

08014770 <rmw_node_name_validation_result_string>:
 8014770:	2804      	cmp	r0, #4
 8014772:	bf9a      	itte	ls
 8014774:	4b02      	ldrls	r3, [pc, #8]	@ (8014780 <rmw_node_name_validation_result_string+0x10>)
 8014776:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801477a:	4802      	ldrhi	r0, [pc, #8]	@ (8014784 <rmw_node_name_validation_result_string+0x14>)
 801477c:	4770      	bx	lr
 801477e:	bf00      	nop
 8014780:	08018a84 	.word	0x08018a84
 8014784:	08018998 	.word	0x08018998

08014788 <on_status>:
 8014788:	b082      	sub	sp, #8
 801478a:	b002      	add	sp, #8
 801478c:	4770      	bx	lr
 801478e:	bf00      	nop

08014790 <on_topic>:
 8014790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014794:	4a22      	ldr	r2, [pc, #136]	@ (8014820 <on_topic+0x90>)
 8014796:	b094      	sub	sp, #80	@ 0x50
 8014798:	6812      	ldr	r2, [r2, #0]
 801479a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801479c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80147a0:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 80147a4:	b3c2      	cbz	r2, 8014818 <on_topic+0x88>
 80147a6:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 80147aa:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 80147ae:	e001      	b.n	80147b4 <on_topic+0x24>
 80147b0:	6852      	ldr	r2, [r2, #4]
 80147b2:	b38a      	cbz	r2, 8014818 <on_topic+0x88>
 80147b4:	6894      	ldr	r4, [r2, #8]
 80147b6:	8aa3      	ldrh	r3, [r4, #20]
 80147b8:	428b      	cmp	r3, r1
 80147ba:	d1f9      	bne.n	80147b0 <on_topic+0x20>
 80147bc:	7da3      	ldrb	r3, [r4, #22]
 80147be:	4283      	cmp	r3, r0
 80147c0:	d1f6      	bne.n	80147b0 <on_topic+0x20>
 80147c2:	2248      	movs	r2, #72	@ 0x48
 80147c4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80147c8:	4668      	mov	r0, sp
 80147ca:	f002 fce4 	bl	8017196 <memcpy>
 80147ce:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80147d2:	cb0c      	ldmia	r3, {r2, r3}
 80147d4:	4620      	mov	r0, r4
 80147d6:	f7f7 ffbb 	bl	800c750 <rmw_uxrce_get_static_input_buffer_for_entity>
 80147da:	4607      	mov	r7, r0
 80147dc:	b1e0      	cbz	r0, 8014818 <on_topic+0x88>
 80147de:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80147e2:	4632      	mov	r2, r6
 80147e4:	4628      	mov	r0, r5
 80147e6:	f108 0110 	add.w	r1, r8, #16
 80147ea:	f000 fddb 	bl	80153a4 <ucdr_deserialize_array_uint8_t>
 80147ee:	b930      	cbnz	r0, 80147fe <on_topic+0x6e>
 80147f0:	480c      	ldr	r0, [pc, #48]	@ (8014824 <on_topic+0x94>)
 80147f2:	4639      	mov	r1, r7
 80147f4:	b014      	add	sp, #80	@ 0x50
 80147f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80147fa:	f000 b8bd 	b.w	8014978 <put_memory>
 80147fe:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8014802:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8014806:	f000 fcc3 	bl	8015190 <rmw_uros_epoch_nanos>
 801480a:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801480e:	2305      	movs	r3, #5
 8014810:	e942 0102 	strd	r0, r1, [r2, #-8]
 8014814:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8014818:	b014      	add	sp, #80	@ 0x50
 801481a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801481e:	bf00      	nop
 8014820:	2000ab0c 	.word	0x2000ab0c
 8014824:	2000aafc 	.word	0x2000aafc

08014828 <on_request>:
 8014828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801482c:	4823      	ldr	r0, [pc, #140]	@ (80148bc <on_request+0x94>)
 801482e:	b094      	sub	sp, #80	@ 0x50
 8014830:	6800      	ldr	r0, [r0, #0]
 8014832:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8014834:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8014838:	9113      	str	r1, [sp, #76]	@ 0x4c
 801483a:	2800      	cmp	r0, #0
 801483c:	d03b      	beq.n	80148b6 <on_request+0x8e>
 801483e:	461d      	mov	r5, r3
 8014840:	e001      	b.n	8014846 <on_request+0x1e>
 8014842:	6840      	ldr	r0, [r0, #4]
 8014844:	b3b8      	cbz	r0, 80148b6 <on_request+0x8e>
 8014846:	6884      	ldr	r4, [r0, #8]
 8014848:	8b21      	ldrh	r1, [r4, #24]
 801484a:	4291      	cmp	r1, r2
 801484c:	d1f9      	bne.n	8014842 <on_request+0x1a>
 801484e:	2248      	movs	r2, #72	@ 0x48
 8014850:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8014854:	4668      	mov	r0, sp
 8014856:	f002 fc9e 	bl	8017196 <memcpy>
 801485a:	f104 0320 	add.w	r3, r4, #32
 801485e:	cb0c      	ldmia	r3, {r2, r3}
 8014860:	4620      	mov	r0, r4
 8014862:	f7f7 ff75 	bl	800c750 <rmw_uxrce_get_static_input_buffer_for_entity>
 8014866:	4680      	mov	r8, r0
 8014868:	b328      	cbz	r0, 80148b6 <on_request+0x8e>
 801486a:	4638      	mov	r0, r7
 801486c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8014870:	4632      	mov	r2, r6
 8014872:	f107 0110 	add.w	r1, r7, #16
 8014876:	f000 fd95 	bl	80153a4 <ucdr_deserialize_array_uint8_t>
 801487a:	b930      	cbnz	r0, 801488a <on_request+0x62>
 801487c:	4810      	ldr	r0, [pc, #64]	@ (80148c0 <on_request+0x98>)
 801487e:	4641      	mov	r1, r8
 8014880:	b014      	add	sp, #80	@ 0x50
 8014882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014886:	f000 b877 	b.w	8014978 <put_memory>
 801488a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801488c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8014890:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8014894:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8014898:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801489c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80148a0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80148a4:	f000 fc74 	bl	8015190 <rmw_uros_epoch_nanos>
 80148a8:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80148ac:	2303      	movs	r3, #3
 80148ae:	e942 0102 	strd	r0, r1, [r2, #-8]
 80148b2:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80148b6:	b014      	add	sp, #80	@ 0x50
 80148b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148bc:	2000aadc 	.word	0x2000aadc
 80148c0:	2000aafc 	.word	0x2000aafc

080148c4 <on_reply>:
 80148c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148c8:	4821      	ldr	r0, [pc, #132]	@ (8014950 <on_reply+0x8c>)
 80148ca:	b094      	sub	sp, #80	@ 0x50
 80148cc:	6800      	ldr	r0, [r0, #0]
 80148ce:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80148d0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80148d4:	9113      	str	r1, [sp, #76]	@ 0x4c
 80148d6:	b3b8      	cbz	r0, 8014948 <on_reply+0x84>
 80148d8:	461d      	mov	r5, r3
 80148da:	e001      	b.n	80148e0 <on_reply+0x1c>
 80148dc:	6840      	ldr	r0, [r0, #4]
 80148de:	b398      	cbz	r0, 8014948 <on_reply+0x84>
 80148e0:	6884      	ldr	r4, [r0, #8]
 80148e2:	8b21      	ldrh	r1, [r4, #24]
 80148e4:	4291      	cmp	r1, r2
 80148e6:	d1f9      	bne.n	80148dc <on_reply+0x18>
 80148e8:	2248      	movs	r2, #72	@ 0x48
 80148ea:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80148ee:	4668      	mov	r0, sp
 80148f0:	f002 fc51 	bl	8017196 <memcpy>
 80148f4:	f104 0320 	add.w	r3, r4, #32
 80148f8:	cb0c      	ldmia	r3, {r2, r3}
 80148fa:	4620      	mov	r0, r4
 80148fc:	f7f7 ff28 	bl	800c750 <rmw_uxrce_get_static_input_buffer_for_entity>
 8014900:	4680      	mov	r8, r0
 8014902:	b308      	cbz	r0, 8014948 <on_reply+0x84>
 8014904:	4638      	mov	r0, r7
 8014906:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801490a:	4632      	mov	r2, r6
 801490c:	f107 0110 	add.w	r1, r7, #16
 8014910:	f000 fd48 	bl	80153a4 <ucdr_deserialize_array_uint8_t>
 8014914:	b930      	cbnz	r0, 8014924 <on_reply+0x60>
 8014916:	480f      	ldr	r0, [pc, #60]	@ (8014954 <on_reply+0x90>)
 8014918:	4641      	mov	r1, r8
 801491a:	b014      	add	sp, #80	@ 0x50
 801491c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014920:	f000 b82a 	b.w	8014978 <put_memory>
 8014924:	2200      	movs	r2, #0
 8014926:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801492a:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801492e:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8014932:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8014936:	f000 fc2b 	bl	8015190 <rmw_uros_epoch_nanos>
 801493a:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801493e:	2304      	movs	r3, #4
 8014940:	e942 0102 	strd	r0, r1, [r2, #-8]
 8014944:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8014948:	b014      	add	sp, #80	@ 0x50
 801494a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801494e:	bf00      	nop
 8014950:	200061ec 	.word	0x200061ec
 8014954:	2000aafc 	.word	0x2000aafc

08014958 <get_memory>:
 8014958:	4603      	mov	r3, r0
 801495a:	6840      	ldr	r0, [r0, #4]
 801495c:	b158      	cbz	r0, 8014976 <get_memory+0x1e>
 801495e:	6842      	ldr	r2, [r0, #4]
 8014960:	605a      	str	r2, [r3, #4]
 8014962:	b10a      	cbz	r2, 8014968 <get_memory+0x10>
 8014964:	2100      	movs	r1, #0
 8014966:	6011      	str	r1, [r2, #0]
 8014968:	681a      	ldr	r2, [r3, #0]
 801496a:	6042      	str	r2, [r0, #4]
 801496c:	b102      	cbz	r2, 8014970 <get_memory+0x18>
 801496e:	6010      	str	r0, [r2, #0]
 8014970:	2200      	movs	r2, #0
 8014972:	6002      	str	r2, [r0, #0]
 8014974:	6018      	str	r0, [r3, #0]
 8014976:	4770      	bx	lr

08014978 <put_memory>:
 8014978:	680b      	ldr	r3, [r1, #0]
 801497a:	b10b      	cbz	r3, 8014980 <put_memory+0x8>
 801497c:	684a      	ldr	r2, [r1, #4]
 801497e:	605a      	str	r2, [r3, #4]
 8014980:	684a      	ldr	r2, [r1, #4]
 8014982:	b102      	cbz	r2, 8014986 <put_memory+0xe>
 8014984:	6013      	str	r3, [r2, #0]
 8014986:	6803      	ldr	r3, [r0, #0]
 8014988:	428b      	cmp	r3, r1
 801498a:	6843      	ldr	r3, [r0, #4]
 801498c:	bf08      	it	eq
 801498e:	6002      	streq	r2, [r0, #0]
 8014990:	604b      	str	r3, [r1, #4]
 8014992:	b103      	cbz	r3, 8014996 <put_memory+0x1e>
 8014994:	6019      	str	r1, [r3, #0]
 8014996:	2300      	movs	r3, #0
 8014998:	600b      	str	r3, [r1, #0]
 801499a:	6041      	str	r1, [r0, #4]
 801499c:	4770      	bx	lr
 801499e:	bf00      	nop

080149a0 <rmw_destroy_client>:
 80149a0:	b570      	push	{r4, r5, r6, lr}
 80149a2:	b128      	cbz	r0, 80149b0 <rmw_destroy_client+0x10>
 80149a4:	4604      	mov	r4, r0
 80149a6:	6800      	ldr	r0, [r0, #0]
 80149a8:	460d      	mov	r5, r1
 80149aa:	f7f8 f847 	bl	800ca3c <is_uxrce_rmw_identifier_valid>
 80149ae:	b910      	cbnz	r0, 80149b6 <rmw_destroy_client+0x16>
 80149b0:	2401      	movs	r4, #1
 80149b2:	4620      	mov	r0, r4
 80149b4:	bd70      	pop	{r4, r5, r6, pc}
 80149b6:	6863      	ldr	r3, [r4, #4]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d0f9      	beq.n	80149b0 <rmw_destroy_client+0x10>
 80149bc:	2d00      	cmp	r5, #0
 80149be:	d0f7      	beq.n	80149b0 <rmw_destroy_client+0x10>
 80149c0:	6828      	ldr	r0, [r5, #0]
 80149c2:	f7f8 f83b 	bl	800ca3c <is_uxrce_rmw_identifier_valid>
 80149c6:	2800      	cmp	r0, #0
 80149c8:	d0f2      	beq.n	80149b0 <rmw_destroy_client+0x10>
 80149ca:	686e      	ldr	r6, [r5, #4]
 80149cc:	2e00      	cmp	r6, #0
 80149ce:	d0ef      	beq.n	80149b0 <rmw_destroy_client+0x10>
 80149d0:	6864      	ldr	r4, [r4, #4]
 80149d2:	6932      	ldr	r2, [r6, #16]
 80149d4:	6920      	ldr	r0, [r4, #16]
 80149d6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80149da:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80149de:	6819      	ldr	r1, [r3, #0]
 80149e0:	f7f9 fb70 	bl	800e0c4 <uxr_buffer_cancel_data>
 80149e4:	4602      	mov	r2, r0
 80149e6:	6920      	ldr	r0, [r4, #16]
 80149e8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80149ec:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80149f0:	f7f7 ffa4 	bl	800c93c <run_xrce_session>
 80149f4:	6920      	ldr	r0, [r4, #16]
 80149f6:	6932      	ldr	r2, [r6, #16]
 80149f8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80149fc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014a00:	6819      	ldr	r1, [r3, #0]
 8014a02:	f7f9 f8d7 	bl	800dbb4 <uxr_buffer_delete_entity>
 8014a06:	4602      	mov	r2, r0
 8014a08:	6920      	ldr	r0, [r4, #16]
 8014a0a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014a0e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014a12:	f7f7 ff93 	bl	800c93c <run_xrce_session>
 8014a16:	2800      	cmp	r0, #0
 8014a18:	4628      	mov	r0, r5
 8014a1a:	bf14      	ite	ne
 8014a1c:	2400      	movne	r4, #0
 8014a1e:	2402      	moveq	r4, #2
 8014a20:	f7f7 fe74 	bl	800c70c <rmw_uxrce_fini_client_memory>
 8014a24:	e7c5      	b.n	80149b2 <rmw_destroy_client+0x12>
 8014a26:	bf00      	nop

08014a28 <rmw_get_implementation_identifier>:
 8014a28:	4b01      	ldr	r3, [pc, #4]	@ (8014a30 <rmw_get_implementation_identifier+0x8>)
 8014a2a:	6818      	ldr	r0, [r3, #0]
 8014a2c:	4770      	bx	lr
 8014a2e:	bf00      	nop
 8014a30:	08018ab0 	.word	0x08018ab0

08014a34 <create_topic>:
 8014a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a38:	4605      	mov	r5, r0
 8014a3a:	b084      	sub	sp, #16
 8014a3c:	4822      	ldr	r0, [pc, #136]	@ (8014ac8 <create_topic+0x94>)
 8014a3e:	460f      	mov	r7, r1
 8014a40:	4616      	mov	r6, r2
 8014a42:	f7ff ff89 	bl	8014958 <get_memory>
 8014a46:	4604      	mov	r4, r0
 8014a48:	2800      	cmp	r0, #0
 8014a4a:	d039      	beq.n	8014ac0 <create_topic+0x8c>
 8014a4c:	692b      	ldr	r3, [r5, #16]
 8014a4e:	6884      	ldr	r4, [r0, #8]
 8014a50:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8014ad0 <create_topic+0x9c>
 8014a54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014a58:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8014a5c:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8014a60:	1c42      	adds	r2, r0, #1
 8014a62:	2102      	movs	r1, #2
 8014a64:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8014a68:	f7f9 fac2 	bl	800dff0 <uxr_object_id>
 8014a6c:	223c      	movs	r2, #60	@ 0x3c
 8014a6e:	6120      	str	r0, [r4, #16]
 8014a70:	4641      	mov	r1, r8
 8014a72:	4638      	mov	r0, r7
 8014a74:	f7f7 ffc8 	bl	800ca08 <generate_topic_name>
 8014a78:	b1f0      	cbz	r0, 8014ab8 <create_topic+0x84>
 8014a7a:	4f14      	ldr	r7, [pc, #80]	@ (8014acc <create_topic+0x98>)
 8014a7c:	4630      	mov	r0, r6
 8014a7e:	2264      	movs	r2, #100	@ 0x64
 8014a80:	4639      	mov	r1, r7
 8014a82:	f7f7 ff91 	bl	800c9a8 <generate_type_name>
 8014a86:	b1b8      	cbz	r0, 8014ab8 <create_topic+0x84>
 8014a88:	6928      	ldr	r0, [r5, #16]
 8014a8a:	2306      	movs	r3, #6
 8014a8c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8014a90:	f8cd 8000 	str.w	r8, [sp]
 8014a94:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8014a98:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014a9c:	6811      	ldr	r1, [r2, #0]
 8014a9e:	696b      	ldr	r3, [r5, #20]
 8014aa0:	6922      	ldr	r2, [r4, #16]
 8014aa2:	f7f9 f905 	bl	800dcb0 <uxr_buffer_create_topic_bin>
 8014aa6:	4602      	mov	r2, r0
 8014aa8:	6928      	ldr	r0, [r5, #16]
 8014aaa:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8014aae:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8014ab2:	f7f7 ff43 	bl	800c93c <run_xrce_session>
 8014ab6:	b918      	cbnz	r0, 8014ac0 <create_topic+0x8c>
 8014ab8:	4620      	mov	r0, r4
 8014aba:	f7f7 fe3d 	bl	800c738 <rmw_uxrce_fini_topic_memory>
 8014abe:	2400      	movs	r4, #0
 8014ac0:	4620      	mov	r0, r4
 8014ac2:	b004      	add	sp, #16
 8014ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ac8:	2000ab1c 	.word	0x2000ab1c
 8014acc:	2000ac10 	.word	0x2000ac10
 8014ad0:	2000abd4 	.word	0x2000abd4

08014ad4 <destroy_topic>:
 8014ad4:	b538      	push	{r3, r4, r5, lr}
 8014ad6:	6985      	ldr	r5, [r0, #24]
 8014ad8:	b1d5      	cbz	r5, 8014b10 <destroy_topic+0x3c>
 8014ada:	4604      	mov	r4, r0
 8014adc:	6928      	ldr	r0, [r5, #16]
 8014ade:	6922      	ldr	r2, [r4, #16]
 8014ae0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8014ae4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014ae8:	6819      	ldr	r1, [r3, #0]
 8014aea:	f7f9 f863 	bl	800dbb4 <uxr_buffer_delete_entity>
 8014aee:	4602      	mov	r2, r0
 8014af0:	6928      	ldr	r0, [r5, #16]
 8014af2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8014af6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8014afa:	f7f7 ff1f 	bl	800c93c <run_xrce_session>
 8014afe:	2800      	cmp	r0, #0
 8014b00:	4620      	mov	r0, r4
 8014b02:	bf14      	ite	ne
 8014b04:	2400      	movne	r4, #0
 8014b06:	2402      	moveq	r4, #2
 8014b08:	f7f7 fe16 	bl	800c738 <rmw_uxrce_fini_topic_memory>
 8014b0c:	4620      	mov	r0, r4
 8014b0e:	bd38      	pop	{r3, r4, r5, pc}
 8014b10:	2401      	movs	r4, #1
 8014b12:	4620      	mov	r0, r4
 8014b14:	bd38      	pop	{r3, r4, r5, pc}
 8014b16:	bf00      	nop

08014b18 <rmw_send_request>:
 8014b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014b1c:	4604      	mov	r4, r0
 8014b1e:	6800      	ldr	r0, [r0, #0]
 8014b20:	b08b      	sub	sp, #44	@ 0x2c
 8014b22:	460e      	mov	r6, r1
 8014b24:	4615      	mov	r5, r2
 8014b26:	b128      	cbz	r0, 8014b34 <rmw_send_request+0x1c>
 8014b28:	4b21      	ldr	r3, [pc, #132]	@ (8014bb0 <rmw_send_request+0x98>)
 8014b2a:	6819      	ldr	r1, [r3, #0]
 8014b2c:	f7eb fb78 	bl	8000220 <strcmp>
 8014b30:	2800      	cmp	r0, #0
 8014b32:	d139      	bne.n	8014ba8 <rmw_send_request+0x90>
 8014b34:	6864      	ldr	r4, [r4, #4]
 8014b36:	6963      	ldr	r3, [r4, #20]
 8014b38:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8014b3c:	689b      	ldr	r3, [r3, #8]
 8014b3e:	4798      	blx	r3
 8014b40:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8014b44:	4630      	mov	r0, r6
 8014b46:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014b4a:	4798      	blx	r3
 8014b4c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014b50:	9000      	str	r0, [sp, #0]
 8014b52:	6922      	ldr	r2, [r4, #16]
 8014b54:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8014b56:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8014b5a:	ab02      	add	r3, sp, #8
 8014b5c:	f001 fa3e 	bl	8015fdc <uxr_prepare_output_stream>
 8014b60:	2700      	movs	r7, #0
 8014b62:	6028      	str	r0, [r5, #0]
 8014b64:	606f      	str	r7, [r5, #4]
 8014b66:	b198      	cbz	r0, 8014b90 <rmw_send_request+0x78>
 8014b68:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014b6c:	a902      	add	r1, sp, #8
 8014b6e:	4630      	mov	r0, r6
 8014b70:	4798      	blx	r3
 8014b72:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8014b76:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8014b7a:	2b01      	cmp	r3, #1
 8014b7c:	d00c      	beq.n	8014b98 <rmw_send_request+0x80>
 8014b7e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8014b80:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014b84:	f7fa f874 	bl	800ec70 <uxr_run_session_until_confirm_delivery>
 8014b88:	4638      	mov	r0, r7
 8014b8a:	b00b      	add	sp, #44	@ 0x2c
 8014b8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b90:	2001      	movs	r0, #1
 8014b92:	b00b      	add	sp, #44	@ 0x2c
 8014b94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b98:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014b9c:	f7f9 fca8 	bl	800e4f0 <uxr_flash_output_streams>
 8014ba0:	4638      	mov	r0, r7
 8014ba2:	b00b      	add	sp, #44	@ 0x2c
 8014ba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ba8:	200c      	movs	r0, #12
 8014baa:	b00b      	add	sp, #44	@ 0x2c
 8014bac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014bb0:	08018ab0 	.word	0x08018ab0

08014bb4 <rmw_take_request>:
 8014bb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014bb8:	4605      	mov	r5, r0
 8014bba:	6800      	ldr	r0, [r0, #0]
 8014bbc:	b089      	sub	sp, #36	@ 0x24
 8014bbe:	460c      	mov	r4, r1
 8014bc0:	4690      	mov	r8, r2
 8014bc2:	461e      	mov	r6, r3
 8014bc4:	b128      	cbz	r0, 8014bd2 <rmw_take_request+0x1e>
 8014bc6:	4b28      	ldr	r3, [pc, #160]	@ (8014c68 <rmw_take_request+0xb4>)
 8014bc8:	6819      	ldr	r1, [r3, #0]
 8014bca:	f7eb fb29 	bl	8000220 <strcmp>
 8014bce:	2800      	cmp	r0, #0
 8014bd0:	d146      	bne.n	8014c60 <rmw_take_request+0xac>
 8014bd2:	b10e      	cbz	r6, 8014bd8 <rmw_take_request+0x24>
 8014bd4:	2300      	movs	r3, #0
 8014bd6:	7033      	strb	r3, [r6, #0]
 8014bd8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8014bdc:	f7f7 fe30 	bl	800c840 <rmw_uxrce_clean_expired_static_input_buffer>
 8014be0:	4648      	mov	r0, r9
 8014be2:	f7f7 fe05 	bl	800c7f0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014be6:	4607      	mov	r7, r0
 8014be8:	b3b0      	cbz	r0, 8014c58 <rmw_take_request+0xa4>
 8014bea:	6885      	ldr	r5, [r0, #8]
 8014bec:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8014bf0:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8014bf4:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8014bf8:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8014bfc:	7423      	strb	r3, [r4, #16]
 8014bfe:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8014c02:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8014c06:	74e2      	strb	r2, [r4, #19]
 8014c08:	f8a4 3011 	strh.w	r3, [r4, #17]
 8014c0c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8014c10:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8014c14:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8014c18:	61e1      	str	r1, [r4, #28]
 8014c1a:	6162      	str	r2, [r4, #20]
 8014c1c:	61a3      	str	r3, [r4, #24]
 8014c1e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8014c22:	689b      	ldr	r3, [r3, #8]
 8014c24:	4798      	blx	r3
 8014c26:	6844      	ldr	r4, [r0, #4]
 8014c28:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8014c2c:	f105 0110 	add.w	r1, r5, #16
 8014c30:	4668      	mov	r0, sp
 8014c32:	f7f8 ff4f 	bl	800dad4 <ucdr_init_buffer>
 8014c36:	68e3      	ldr	r3, [r4, #12]
 8014c38:	4641      	mov	r1, r8
 8014c3a:	4668      	mov	r0, sp
 8014c3c:	4798      	blx	r3
 8014c3e:	4639      	mov	r1, r7
 8014c40:	4604      	mov	r4, r0
 8014c42:	480a      	ldr	r0, [pc, #40]	@ (8014c6c <rmw_take_request+0xb8>)
 8014c44:	f7ff fe98 	bl	8014978 <put_memory>
 8014c48:	b106      	cbz	r6, 8014c4c <rmw_take_request+0x98>
 8014c4a:	7034      	strb	r4, [r6, #0]
 8014c4c:	f084 0001 	eor.w	r0, r4, #1
 8014c50:	b2c0      	uxtb	r0, r0
 8014c52:	b009      	add	sp, #36	@ 0x24
 8014c54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c58:	2001      	movs	r0, #1
 8014c5a:	b009      	add	sp, #36	@ 0x24
 8014c5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c60:	200c      	movs	r0, #12
 8014c62:	b009      	add	sp, #36	@ 0x24
 8014c64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c68:	08018ab0 	.word	0x08018ab0
 8014c6c:	2000aafc 	.word	0x2000aafc

08014c70 <rmw_send_response>:
 8014c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c72:	4605      	mov	r5, r0
 8014c74:	6800      	ldr	r0, [r0, #0]
 8014c76:	b091      	sub	sp, #68	@ 0x44
 8014c78:	460c      	mov	r4, r1
 8014c7a:	4616      	mov	r6, r2
 8014c7c:	b128      	cbz	r0, 8014c8a <rmw_send_response+0x1a>
 8014c7e:	4b29      	ldr	r3, [pc, #164]	@ (8014d24 <rmw_send_response+0xb4>)
 8014c80:	6819      	ldr	r1, [r3, #0]
 8014c82:	f7eb facd 	bl	8000220 <strcmp>
 8014c86:	2800      	cmp	r0, #0
 8014c88:	d141      	bne.n	8014d0e <rmw_send_response+0x9e>
 8014c8a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8014c8e:	9306      	str	r3, [sp, #24]
 8014c90:	4623      	mov	r3, r4
 8014c92:	9207      	str	r2, [sp, #28]
 8014c94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014c98:	686d      	ldr	r5, [r5, #4]
 8014c9a:	789b      	ldrb	r3, [r3, #2]
 8014c9c:	68a1      	ldr	r1, [r4, #8]
 8014c9e:	f88d 2017 	strb.w	r2, [sp, #23]
 8014ca2:	f88d 3016 	strb.w	r3, [sp, #22]
 8014ca6:	68e2      	ldr	r2, [r4, #12]
 8014ca8:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8014cac:	6860      	ldr	r0, [r4, #4]
 8014cae:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014cb2:	ab02      	add	r3, sp, #8
 8014cb4:	c307      	stmia	r3!, {r0, r1, r2}
 8014cb6:	696b      	ldr	r3, [r5, #20]
 8014cb8:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8014cba:	68db      	ldr	r3, [r3, #12]
 8014cbc:	4798      	blx	r3
 8014cbe:	6844      	ldr	r4, [r0, #4]
 8014cc0:	4630      	mov	r0, r6
 8014cc2:	6923      	ldr	r3, [r4, #16]
 8014cc4:	4798      	blx	r3
 8014cc6:	f100 0318 	add.w	r3, r0, #24
 8014cca:	6938      	ldr	r0, [r7, #16]
 8014ccc:	9300      	str	r3, [sp, #0]
 8014cce:	692a      	ldr	r2, [r5, #16]
 8014cd0:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8014cd2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014cd6:	ab08      	add	r3, sp, #32
 8014cd8:	f001 f980 	bl	8015fdc <uxr_prepare_output_stream>
 8014cdc:	b910      	cbnz	r0, 8014ce4 <rmw_send_response+0x74>
 8014cde:	2001      	movs	r0, #1
 8014ce0:	b011      	add	sp, #68	@ 0x44
 8014ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ce4:	a902      	add	r1, sp, #8
 8014ce6:	a808      	add	r0, sp, #32
 8014ce8:	f7fc f918 	bl	8010f1c <uxr_serialize_SampleIdentity>
 8014cec:	68a3      	ldr	r3, [r4, #8]
 8014cee:	a908      	add	r1, sp, #32
 8014cf0:	4630      	mov	r0, r6
 8014cf2:	4798      	blx	r3
 8014cf4:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8014cf8:	6938      	ldr	r0, [r7, #16]
 8014cfa:	2b01      	cmp	r3, #1
 8014cfc:	d00a      	beq.n	8014d14 <rmw_send_response+0xa4>
 8014cfe:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8014d00:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014d04:	f7f9 ffb4 	bl	800ec70 <uxr_run_session_until_confirm_delivery>
 8014d08:	2000      	movs	r0, #0
 8014d0a:	b011      	add	sp, #68	@ 0x44
 8014d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d0e:	200c      	movs	r0, #12
 8014d10:	b011      	add	sp, #68	@ 0x44
 8014d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d14:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014d18:	f7f9 fbea 	bl	800e4f0 <uxr_flash_output_streams>
 8014d1c:	2000      	movs	r0, #0
 8014d1e:	b011      	add	sp, #68	@ 0x44
 8014d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d22:	bf00      	nop
 8014d24:	08018ab0 	.word	0x08018ab0

08014d28 <rmw_take_response>:
 8014d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d2c:	4604      	mov	r4, r0
 8014d2e:	6800      	ldr	r0, [r0, #0]
 8014d30:	b088      	sub	sp, #32
 8014d32:	4688      	mov	r8, r1
 8014d34:	4617      	mov	r7, r2
 8014d36:	461d      	mov	r5, r3
 8014d38:	b120      	cbz	r0, 8014d44 <rmw_take_response+0x1c>
 8014d3a:	4b1e      	ldr	r3, [pc, #120]	@ (8014db4 <rmw_take_response+0x8c>)
 8014d3c:	6819      	ldr	r1, [r3, #0]
 8014d3e:	f7eb fa6f 	bl	8000220 <strcmp>
 8014d42:	bb78      	cbnz	r0, 8014da4 <rmw_take_response+0x7c>
 8014d44:	b10d      	cbz	r5, 8014d4a <rmw_take_response+0x22>
 8014d46:	2300      	movs	r3, #0
 8014d48:	702b      	strb	r3, [r5, #0]
 8014d4a:	6864      	ldr	r4, [r4, #4]
 8014d4c:	f7f7 fd78 	bl	800c840 <rmw_uxrce_clean_expired_static_input_buffer>
 8014d50:	4620      	mov	r0, r4
 8014d52:	f7f7 fd4d 	bl	800c7f0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014d56:	4606      	mov	r6, r0
 8014d58:	b340      	cbz	r0, 8014dac <rmw_take_response+0x84>
 8014d5a:	6963      	ldr	r3, [r4, #20]
 8014d5c:	6884      	ldr	r4, [r0, #8]
 8014d5e:	68db      	ldr	r3, [r3, #12]
 8014d60:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8014d64:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8014d68:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8014d6c:	4798      	blx	r3
 8014d6e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8014d72:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8014d76:	f104 0110 	add.w	r1, r4, #16
 8014d7a:	4668      	mov	r0, sp
 8014d7c:	f7f8 feaa 	bl	800dad4 <ucdr_init_buffer>
 8014d80:	4639      	mov	r1, r7
 8014d82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014d86:	4668      	mov	r0, sp
 8014d88:	4798      	blx	r3
 8014d8a:	4631      	mov	r1, r6
 8014d8c:	4604      	mov	r4, r0
 8014d8e:	480a      	ldr	r0, [pc, #40]	@ (8014db8 <rmw_take_response+0x90>)
 8014d90:	f7ff fdf2 	bl	8014978 <put_memory>
 8014d94:	b105      	cbz	r5, 8014d98 <rmw_take_response+0x70>
 8014d96:	702c      	strb	r4, [r5, #0]
 8014d98:	f084 0001 	eor.w	r0, r4, #1
 8014d9c:	b2c0      	uxtb	r0, r0
 8014d9e:	b008      	add	sp, #32
 8014da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014da4:	200c      	movs	r0, #12
 8014da6:	b008      	add	sp, #32
 8014da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dac:	2001      	movs	r0, #1
 8014dae:	b008      	add	sp, #32
 8014db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014db4:	08018ab0 	.word	0x08018ab0
 8014db8:	2000aafc 	.word	0x2000aafc

08014dbc <rmw_take_with_info>:
 8014dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014dbe:	4604      	mov	r4, r0
 8014dc0:	6800      	ldr	r0, [r0, #0]
 8014dc2:	b089      	sub	sp, #36	@ 0x24
 8014dc4:	460f      	mov	r7, r1
 8014dc6:	4615      	mov	r5, r2
 8014dc8:	b128      	cbz	r0, 8014dd6 <rmw_take_with_info+0x1a>
 8014dca:	4b24      	ldr	r3, [pc, #144]	@ (8014e5c <rmw_take_with_info+0xa0>)
 8014dcc:	6819      	ldr	r1, [r3, #0]
 8014dce:	f7eb fa27 	bl	8000220 <strcmp>
 8014dd2:	2800      	cmp	r0, #0
 8014dd4:	d13e      	bne.n	8014e54 <rmw_take_with_info+0x98>
 8014dd6:	b305      	cbz	r5, 8014e1a <rmw_take_with_info+0x5e>
 8014dd8:	6864      	ldr	r4, [r4, #4]
 8014dda:	2300      	movs	r3, #0
 8014ddc:	702b      	strb	r3, [r5, #0]
 8014dde:	f7f7 fd2f 	bl	800c840 <rmw_uxrce_clean_expired_static_input_buffer>
 8014de2:	4620      	mov	r0, r4
 8014de4:	f7f7 fd04 	bl	800c7f0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014de8:	4606      	mov	r6, r0
 8014dea:	b1f0      	cbz	r0, 8014e2a <rmw_take_with_info+0x6e>
 8014dec:	6881      	ldr	r1, [r0, #8]
 8014dee:	4668      	mov	r0, sp
 8014df0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8014df4:	3110      	adds	r1, #16
 8014df6:	f7f8 fe6d 	bl	800dad4 <ucdr_init_buffer>
 8014dfa:	69a3      	ldr	r3, [r4, #24]
 8014dfc:	4639      	mov	r1, r7
 8014dfe:	68db      	ldr	r3, [r3, #12]
 8014e00:	4668      	mov	r0, sp
 8014e02:	4798      	blx	r3
 8014e04:	4631      	mov	r1, r6
 8014e06:	4604      	mov	r4, r0
 8014e08:	4815      	ldr	r0, [pc, #84]	@ (8014e60 <rmw_take_with_info+0xa4>)
 8014e0a:	f7ff fdb5 	bl	8014978 <put_memory>
 8014e0e:	702c      	strb	r4, [r5, #0]
 8014e10:	f084 0001 	eor.w	r0, r4, #1
 8014e14:	b2c0      	uxtb	r0, r0
 8014e16:	b009      	add	sp, #36	@ 0x24
 8014e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e1a:	6864      	ldr	r4, [r4, #4]
 8014e1c:	f7f7 fd10 	bl	800c840 <rmw_uxrce_clean_expired_static_input_buffer>
 8014e20:	4620      	mov	r0, r4
 8014e22:	f7f7 fce5 	bl	800c7f0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014e26:	4605      	mov	r5, r0
 8014e28:	b910      	cbnz	r0, 8014e30 <rmw_take_with_info+0x74>
 8014e2a:	2001      	movs	r0, #1
 8014e2c:	b009      	add	sp, #36	@ 0x24
 8014e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e30:	68a9      	ldr	r1, [r5, #8]
 8014e32:	4668      	mov	r0, sp
 8014e34:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8014e38:	3110      	adds	r1, #16
 8014e3a:	f7f8 fe4b 	bl	800dad4 <ucdr_init_buffer>
 8014e3e:	69a3      	ldr	r3, [r4, #24]
 8014e40:	4639      	mov	r1, r7
 8014e42:	68db      	ldr	r3, [r3, #12]
 8014e44:	4668      	mov	r0, sp
 8014e46:	4798      	blx	r3
 8014e48:	4629      	mov	r1, r5
 8014e4a:	4604      	mov	r4, r0
 8014e4c:	4804      	ldr	r0, [pc, #16]	@ (8014e60 <rmw_take_with_info+0xa4>)
 8014e4e:	f7ff fd93 	bl	8014978 <put_memory>
 8014e52:	e7dd      	b.n	8014e10 <rmw_take_with_info+0x54>
 8014e54:	200c      	movs	r0, #12
 8014e56:	b009      	add	sp, #36	@ 0x24
 8014e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e5a:	bf00      	nop
 8014e5c:	08018ab0 	.word	0x08018ab0
 8014e60:	2000aafc 	.word	0x2000aafc

08014e64 <rmw_wait>:
 8014e64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014e68:	b089      	sub	sp, #36	@ 0x24
 8014e6a:	4605      	mov	r5, r0
 8014e6c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8014e6e:	460e      	mov	r6, r1
 8014e70:	4698      	mov	r8, r3
 8014e72:	4691      	mov	r9, r2
 8014e74:	2a00      	cmp	r2, #0
 8014e76:	f000 810a 	beq.w	801508e <rmw_wait+0x22a>
 8014e7a:	b16c      	cbz	r4, 8014e98 <rmw_wait+0x34>
 8014e7c:	4bae      	ldr	r3, [pc, #696]	@ (8015138 <rmw_wait+0x2d4>)
 8014e7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014e80:	af04      	add	r7, sp, #16
 8014e82:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8014e86:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014e8a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014e8e:	f7ff faaf 	bl	80143f0 <rmw_time_equal>
 8014e92:	2800      	cmp	r0, #0
 8014e94:	f000 8127 	beq.w	80150e6 <rmw_wait+0x282>
 8014e98:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8014e9c:	f7f7 fcd0 	bl	800c840 <rmw_uxrce_clean_expired_static_input_buffer>
 8014ea0:	4ba6      	ldr	r3, [pc, #664]	@ (801513c <rmw_wait+0x2d8>)
 8014ea2:	681c      	ldr	r4, [r3, #0]
 8014ea4:	b14c      	cbz	r4, 8014eba <rmw_wait+0x56>
 8014ea6:	4623      	mov	r3, r4
 8014ea8:	2100      	movs	r1, #0
 8014eaa:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8014eae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8014eb2:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d1f7      	bne.n	8014eaa <rmw_wait+0x46>
 8014eba:	f1b9 0f00 	cmp.w	r9, #0
 8014ebe:	d011      	beq.n	8014ee4 <rmw_wait+0x80>
 8014ec0:	f8d9 1000 	ldr.w	r1, [r9]
 8014ec4:	b171      	cbz	r1, 8014ee4 <rmw_wait+0x80>
 8014ec6:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8014eca:	2300      	movs	r3, #0
 8014ecc:	2001      	movs	r0, #1
 8014ece:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8014ed2:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8014ed4:	6912      	ldr	r2, [r2, #16]
 8014ed6:	3301      	adds	r3, #1
 8014ed8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8014edc:	4299      	cmp	r1, r3
 8014ede:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8014ee2:	d1f4      	bne.n	8014ece <rmw_wait+0x6a>
 8014ee4:	f1b8 0f00 	cmp.w	r8, #0
 8014ee8:	d011      	beq.n	8014f0e <rmw_wait+0xaa>
 8014eea:	f8d8 1000 	ldr.w	r1, [r8]
 8014eee:	b171      	cbz	r1, 8014f0e <rmw_wait+0xaa>
 8014ef0:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	2001      	movs	r0, #1
 8014ef8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8014efc:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8014efe:	6912      	ldr	r2, [r2, #16]
 8014f00:	3301      	adds	r3, #1
 8014f02:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8014f06:	4299      	cmp	r1, r3
 8014f08:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8014f0c:	d1f4      	bne.n	8014ef8 <rmw_wait+0x94>
 8014f0e:	b185      	cbz	r5, 8014f32 <rmw_wait+0xce>
 8014f10:	6829      	ldr	r1, [r5, #0]
 8014f12:	b171      	cbz	r1, 8014f32 <rmw_wait+0xce>
 8014f14:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8014f18:	2300      	movs	r3, #0
 8014f1a:	2001      	movs	r0, #1
 8014f1c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8014f20:	6a12      	ldr	r2, [r2, #32]
 8014f22:	6912      	ldr	r2, [r2, #16]
 8014f24:	3301      	adds	r3, #1
 8014f26:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8014f2a:	4299      	cmp	r1, r3
 8014f2c:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8014f30:	d1f4      	bne.n	8014f1c <rmw_wait+0xb8>
 8014f32:	b34c      	cbz	r4, 8014f88 <rmw_wait+0x124>
 8014f34:	4622      	mov	r2, r4
 8014f36:	2300      	movs	r3, #0
 8014f38:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8014f3c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8014f40:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8014f44:	440b      	add	r3, r1
 8014f46:	b2db      	uxtb	r3, r3
 8014f48:	2a00      	cmp	r2, #0
 8014f4a:	d1f5      	bne.n	8014f38 <rmw_wait+0xd4>
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	f000 8084 	beq.w	801505a <rmw_wait+0x1f6>
 8014f52:	1c7a      	adds	r2, r7, #1
 8014f54:	d00d      	beq.n	8014f72 <rmw_wait+0x10e>
 8014f56:	ee07 7a90 	vmov	s15, r7
 8014f5a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014f5e:	ee07 3a90 	vmov	s15, r3
 8014f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014f6a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8014f6e:	ee17 7a90 	vmov	r7, s15
 8014f72:	68a0      	ldr	r0, [r4, #8]
 8014f74:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8014f78:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	f040 8090 	bne.w	80150a2 <rmw_wait+0x23e>
 8014f82:	6864      	ldr	r4, [r4, #4]
 8014f84:	2c00      	cmp	r4, #0
 8014f86:	d1f4      	bne.n	8014f72 <rmw_wait+0x10e>
 8014f88:	f1b9 0f00 	cmp.w	r9, #0
 8014f8c:	f000 80bc 	beq.w	8015108 <rmw_wait+0x2a4>
 8014f90:	f8d9 7000 	ldr.w	r7, [r9]
 8014f94:	2f00      	cmp	r7, #0
 8014f96:	f000 808e 	beq.w	80150b6 <rmw_wait+0x252>
 8014f9a:	2400      	movs	r4, #0
 8014f9c:	4627      	mov	r7, r4
 8014f9e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014fa2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014fa6:	f7f7 fc23 	bl	800c7f0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014faa:	2800      	cmp	r0, #0
 8014fac:	d05f      	beq.n	801506e <rmw_wait+0x20a>
 8014fae:	f8d9 3000 	ldr.w	r3, [r9]
 8014fb2:	3401      	adds	r4, #1
 8014fb4:	42a3      	cmp	r3, r4
 8014fb6:	f04f 0701 	mov.w	r7, #1
 8014fba:	d8f0      	bhi.n	8014f9e <rmw_wait+0x13a>
 8014fbc:	f1b8 0f00 	cmp.w	r8, #0
 8014fc0:	d012      	beq.n	8014fe8 <rmw_wait+0x184>
 8014fc2:	f8d8 3000 	ldr.w	r3, [r8]
 8014fc6:	b17b      	cbz	r3, 8014fe8 <rmw_wait+0x184>
 8014fc8:	2400      	movs	r4, #0
 8014fca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014fce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014fd2:	f7f7 fc0d 	bl	800c7f0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014fd6:	2800      	cmp	r0, #0
 8014fd8:	d051      	beq.n	801507e <rmw_wait+0x21a>
 8014fda:	f8d8 3000 	ldr.w	r3, [r8]
 8014fde:	3401      	adds	r4, #1
 8014fe0:	42a3      	cmp	r3, r4
 8014fe2:	f04f 0701 	mov.w	r7, #1
 8014fe6:	d8f0      	bhi.n	8014fca <rmw_wait+0x166>
 8014fe8:	b1dd      	cbz	r5, 8015022 <rmw_wait+0x1be>
 8014fea:	682b      	ldr	r3, [r5, #0]
 8014fec:	b1cb      	cbz	r3, 8015022 <rmw_wait+0x1be>
 8014fee:	2400      	movs	r4, #0
 8014ff0:	686b      	ldr	r3, [r5, #4]
 8014ff2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014ff6:	f7f7 fbfb 	bl	800c7f0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8014ffa:	b158      	cbz	r0, 8015014 <rmw_wait+0x1b0>
 8014ffc:	682b      	ldr	r3, [r5, #0]
 8014ffe:	3401      	adds	r4, #1
 8015000:	42a3      	cmp	r3, r4
 8015002:	d969      	bls.n	80150d8 <rmw_wait+0x274>
 8015004:	686b      	ldr	r3, [r5, #4]
 8015006:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801500a:	2701      	movs	r7, #1
 801500c:	f7f7 fbf0 	bl	800c7f0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015010:	2800      	cmp	r0, #0
 8015012:	d1f3      	bne.n	8014ffc <rmw_wait+0x198>
 8015014:	e9d5 3200 	ldrd	r3, r2, [r5]
 8015018:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801501c:	3401      	adds	r4, #1
 801501e:	42a3      	cmp	r3, r4
 8015020:	d8e6      	bhi.n	8014ff0 <rmw_wait+0x18c>
 8015022:	b1a6      	cbz	r6, 801504e <rmw_wait+0x1ea>
 8015024:	6834      	ldr	r4, [r6, #0]
 8015026:	b194      	cbz	r4, 801504e <rmw_wait+0x1ea>
 8015028:	2300      	movs	r3, #0
 801502a:	461d      	mov	r5, r3
 801502c:	e004      	b.n	8015038 <rmw_wait+0x1d4>
 801502e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8015032:	3301      	adds	r3, #1
 8015034:	42a3      	cmp	r3, r4
 8015036:	d00a      	beq.n	801504e <rmw_wait+0x1ea>
 8015038:	6870      	ldr	r0, [r6, #4]
 801503a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801503e:	7c0a      	ldrb	r2, [r1, #16]
 8015040:	2a00      	cmp	r2, #0
 8015042:	d0f4      	beq.n	801502e <rmw_wait+0x1ca>
 8015044:	3301      	adds	r3, #1
 8015046:	42a3      	cmp	r3, r4
 8015048:	740d      	strb	r5, [r1, #16]
 801504a:	4617      	mov	r7, r2
 801504c:	d1f4      	bne.n	8015038 <rmw_wait+0x1d4>
 801504e:	2f00      	cmp	r7, #0
 8015050:	d03e      	beq.n	80150d0 <rmw_wait+0x26c>
 8015052:	2000      	movs	r0, #0
 8015054:	b009      	add	sp, #36	@ 0x24
 8015056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801505a:	68a0      	ldr	r0, [r4, #8]
 801505c:	2100      	movs	r1, #0
 801505e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015062:	f7f9 fdcb 	bl	800ebfc <uxr_run_session_timeout>
 8015066:	6864      	ldr	r4, [r4, #4]
 8015068:	2c00      	cmp	r4, #0
 801506a:	d1f6      	bne.n	801505a <rmw_wait+0x1f6>
 801506c:	e78c      	b.n	8014f88 <rmw_wait+0x124>
 801506e:	e9d9 3200 	ldrd	r3, r2, [r9]
 8015072:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015076:	3401      	adds	r4, #1
 8015078:	42a3      	cmp	r3, r4
 801507a:	d890      	bhi.n	8014f9e <rmw_wait+0x13a>
 801507c:	e79e      	b.n	8014fbc <rmw_wait+0x158>
 801507e:	e9d8 3200 	ldrd	r3, r2, [r8]
 8015082:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015086:	3401      	adds	r4, #1
 8015088:	429c      	cmp	r4, r3
 801508a:	d39e      	bcc.n	8014fca <rmw_wait+0x166>
 801508c:	e7ac      	b.n	8014fe8 <rmw_wait+0x184>
 801508e:	2b00      	cmp	r3, #0
 8015090:	f47f aef3 	bne.w	8014e7a <rmw_wait+0x16>
 8015094:	2800      	cmp	r0, #0
 8015096:	f47f aef0 	bne.w	8014e7a <rmw_wait+0x16>
 801509a:	2900      	cmp	r1, #0
 801509c:	f47f aeed 	bne.w	8014e7a <rmw_wait+0x16>
 80150a0:	e7d7      	b.n	8015052 <rmw_wait+0x1ee>
 80150a2:	4639      	mov	r1, r7
 80150a4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80150a8:	f7f9 fdc2 	bl	800ec30 <uxr_run_session_until_data>
 80150ac:	6864      	ldr	r4, [r4, #4]
 80150ae:	2c00      	cmp	r4, #0
 80150b0:	f47f af5f 	bne.w	8014f72 <rmw_wait+0x10e>
 80150b4:	e768      	b.n	8014f88 <rmw_wait+0x124>
 80150b6:	f1b8 0f00 	cmp.w	r8, #0
 80150ba:	d032      	beq.n	8015122 <rmw_wait+0x2be>
 80150bc:	f8d8 3000 	ldr.w	r3, [r8]
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d181      	bne.n	8014fc8 <rmw_wait+0x164>
 80150c4:	461f      	mov	r7, r3
 80150c6:	2d00      	cmp	r5, #0
 80150c8:	d18f      	bne.n	8014fea <rmw_wait+0x186>
 80150ca:	462f      	mov	r7, r5
 80150cc:	2e00      	cmp	r6, #0
 80150ce:	d1a9      	bne.n	8015024 <rmw_wait+0x1c0>
 80150d0:	2002      	movs	r0, #2
 80150d2:	b009      	add	sp, #36	@ 0x24
 80150d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80150d8:	2e00      	cmp	r6, #0
 80150da:	d0ba      	beq.n	8015052 <rmw_wait+0x1ee>
 80150dc:	6834      	ldr	r4, [r6, #0]
 80150de:	2701      	movs	r7, #1
 80150e0:	2c00      	cmp	r4, #0
 80150e2:	d1a1      	bne.n	8015028 <rmw_wait+0x1c4>
 80150e4:	e7b5      	b.n	8015052 <rmw_wait+0x1ee>
 80150e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80150ea:	f7ff f9d5 	bl	8014498 <rmw_time_total_nsec>
 80150ee:	2300      	movs	r3, #0
 80150f0:	4a13      	ldr	r2, [pc, #76]	@ (8015140 <rmw_wait+0x2dc>)
 80150f2:	f7eb fd3b 	bl	8000b6c <__aeabi_uldivmod>
 80150f6:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 80150fa:	f171 0300 	sbcs.w	r3, r1, #0
 80150fe:	4607      	mov	r7, r0
 8015100:	bfa8      	it	ge
 8015102:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8015106:	e6c9      	b.n	8014e9c <rmw_wait+0x38>
 8015108:	f1b8 0f00 	cmp.w	r8, #0
 801510c:	d009      	beq.n	8015122 <rmw_wait+0x2be>
 801510e:	f8d8 3000 	ldr.w	r3, [r8]
 8015112:	464f      	mov	r7, r9
 8015114:	2b00      	cmp	r3, #0
 8015116:	f47f af57 	bne.w	8014fc8 <rmw_wait+0x164>
 801511a:	2d00      	cmp	r5, #0
 801511c:	f47f af65 	bne.w	8014fea <rmw_wait+0x186>
 8015120:	e7d3      	b.n	80150ca <rmw_wait+0x266>
 8015122:	b17d      	cbz	r5, 8015144 <rmw_wait+0x2e0>
 8015124:	682b      	ldr	r3, [r5, #0]
 8015126:	4647      	mov	r7, r8
 8015128:	2b00      	cmp	r3, #0
 801512a:	f47f af60 	bne.w	8014fee <rmw_wait+0x18a>
 801512e:	2e00      	cmp	r6, #0
 8015130:	f47f af78 	bne.w	8015024 <rmw_wait+0x1c0>
 8015134:	e7cc      	b.n	80150d0 <rmw_wait+0x26c>
 8015136:	bf00      	nop
 8015138:	08017ff0 	.word	0x08017ff0
 801513c:	2000aaec 	.word	0x2000aaec
 8015140:	000f4240 	.word	0x000f4240
 8015144:	2e00      	cmp	r6, #0
 8015146:	d0c3      	beq.n	80150d0 <rmw_wait+0x26c>
 8015148:	6834      	ldr	r4, [r6, #0]
 801514a:	462f      	mov	r7, r5
 801514c:	2c00      	cmp	r4, #0
 801514e:	f47f af6b 	bne.w	8015028 <rmw_wait+0x1c4>
 8015152:	e7bd      	b.n	80150d0 <rmw_wait+0x26c>

08015154 <rmw_create_wait_set>:
 8015154:	b508      	push	{r3, lr}
 8015156:	4803      	ldr	r0, [pc, #12]	@ (8015164 <rmw_create_wait_set+0x10>)
 8015158:	f7ff fbfe 	bl	8014958 <get_memory>
 801515c:	b108      	cbz	r0, 8015162 <rmw_create_wait_set+0xe>
 801515e:	6880      	ldr	r0, [r0, #8]
 8015160:	3010      	adds	r0, #16
 8015162:	bd08      	pop	{r3, pc}
 8015164:	2000ab2c 	.word	0x2000ab2c

08015168 <rmw_destroy_wait_set>:
 8015168:	b508      	push	{r3, lr}
 801516a:	4b08      	ldr	r3, [pc, #32]	@ (801518c <rmw_destroy_wait_set+0x24>)
 801516c:	6819      	ldr	r1, [r3, #0]
 801516e:	b911      	cbnz	r1, 8015176 <rmw_destroy_wait_set+0xe>
 8015170:	e00a      	b.n	8015188 <rmw_destroy_wait_set+0x20>
 8015172:	6849      	ldr	r1, [r1, #4]
 8015174:	b141      	cbz	r1, 8015188 <rmw_destroy_wait_set+0x20>
 8015176:	688b      	ldr	r3, [r1, #8]
 8015178:	3310      	adds	r3, #16
 801517a:	4298      	cmp	r0, r3
 801517c:	d1f9      	bne.n	8015172 <rmw_destroy_wait_set+0xa>
 801517e:	4803      	ldr	r0, [pc, #12]	@ (801518c <rmw_destroy_wait_set+0x24>)
 8015180:	f7ff fbfa 	bl	8014978 <put_memory>
 8015184:	2000      	movs	r0, #0
 8015186:	bd08      	pop	{r3, pc}
 8015188:	2001      	movs	r0, #1
 801518a:	bd08      	pop	{r3, pc}
 801518c:	2000ab2c 	.word	0x2000ab2c

08015190 <rmw_uros_epoch_nanos>:
 8015190:	4b05      	ldr	r3, [pc, #20]	@ (80151a8 <rmw_uros_epoch_nanos+0x18>)
 8015192:	681b      	ldr	r3, [r3, #0]
 8015194:	b123      	cbz	r3, 80151a0 <rmw_uros_epoch_nanos+0x10>
 8015196:	6898      	ldr	r0, [r3, #8]
 8015198:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801519c:	f7f9 b99e 	b.w	800e4dc <uxr_epoch_nanos>
 80151a0:	2000      	movs	r0, #0
 80151a2:	2100      	movs	r1, #0
 80151a4:	4770      	bx	lr
 80151a6:	bf00      	nop
 80151a8:	2000aaec 	.word	0x2000aaec

080151ac <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80151ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151b0:	6805      	ldr	r5, [r0, #0]
 80151b2:	4604      	mov	r4, r0
 80151b4:	4628      	mov	r0, r5
 80151b6:	460e      	mov	r6, r1
 80151b8:	f7eb f832 	bl	8000220 <strcmp>
 80151bc:	b1c8      	cbz	r0, 80151f2 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 80151be:	4b11      	ldr	r3, [pc, #68]	@ (8015204 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	429d      	cmp	r5, r3
 80151c4:	d112      	bne.n	80151ec <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80151c6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80151ca:	f8d8 4000 	ldr.w	r4, [r8]
 80151ce:	b16c      	cbz	r4, 80151ec <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80151d0:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80151d4:	2700      	movs	r7, #0
 80151d6:	3d04      	subs	r5, #4
 80151d8:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80151dc:	4631      	mov	r1, r6
 80151de:	f7eb f81f 	bl	8000220 <strcmp>
 80151e2:	00bb      	lsls	r3, r7, #2
 80151e4:	b140      	cbz	r0, 80151f8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 80151e6:	3701      	adds	r7, #1
 80151e8:	42bc      	cmp	r4, r7
 80151ea:	d1f5      	bne.n	80151d8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 80151ec:	2000      	movs	r0, #0
 80151ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151f2:	4620      	mov	r0, r4
 80151f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151f8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80151fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015200:	58d3      	ldr	r3, [r2, r3]
 8015202:	4718      	bx	r3
 8015204:	200000b4 	.word	0x200000b4

08015208 <std_msgs__msg__Int32__init>:
 8015208:	3800      	subs	r0, #0
 801520a:	bf18      	it	ne
 801520c:	2001      	movne	r0, #1
 801520e:	4770      	bx	lr

08015210 <std_msgs__msg__Int32__fini>:
 8015210:	4770      	bx	lr
 8015212:	bf00      	nop

08015214 <ucdr_serialize_endian_array_char>:
 8015214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015218:	4619      	mov	r1, r3
 801521a:	461f      	mov	r7, r3
 801521c:	4605      	mov	r5, r0
 801521e:	4690      	mov	r8, r2
 8015220:	f7f8 fc04 	bl	800da2c <ucdr_check_buffer_available_for>
 8015224:	b9e0      	cbnz	r0, 8015260 <ucdr_serialize_endian_array_char+0x4c>
 8015226:	463e      	mov	r6, r7
 8015228:	e009      	b.n	801523e <ucdr_serialize_endian_array_char+0x2a>
 801522a:	68a8      	ldr	r0, [r5, #8]
 801522c:	f001 ffb3 	bl	8017196 <memcpy>
 8015230:	68ab      	ldr	r3, [r5, #8]
 8015232:	6928      	ldr	r0, [r5, #16]
 8015234:	4423      	add	r3, r4
 8015236:	4420      	add	r0, r4
 8015238:	1b36      	subs	r6, r6, r4
 801523a:	60ab      	str	r3, [r5, #8]
 801523c:	6128      	str	r0, [r5, #16]
 801523e:	4631      	mov	r1, r6
 8015240:	2201      	movs	r2, #1
 8015242:	4628      	mov	r0, r5
 8015244:	f7f8 fc7a 	bl	800db3c <ucdr_check_final_buffer_behavior_array>
 8015248:	1bb9      	subs	r1, r7, r6
 801524a:	4441      	add	r1, r8
 801524c:	4604      	mov	r4, r0
 801524e:	4602      	mov	r2, r0
 8015250:	2800      	cmp	r0, #0
 8015252:	d1ea      	bne.n	801522a <ucdr_serialize_endian_array_char+0x16>
 8015254:	2301      	movs	r3, #1
 8015256:	7da8      	ldrb	r0, [r5, #22]
 8015258:	756b      	strb	r3, [r5, #21]
 801525a:	4058      	eors	r0, r3
 801525c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015260:	463a      	mov	r2, r7
 8015262:	68a8      	ldr	r0, [r5, #8]
 8015264:	4641      	mov	r1, r8
 8015266:	f001 ff96 	bl	8017196 <memcpy>
 801526a:	68aa      	ldr	r2, [r5, #8]
 801526c:	692b      	ldr	r3, [r5, #16]
 801526e:	443a      	add	r2, r7
 8015270:	443b      	add	r3, r7
 8015272:	60aa      	str	r2, [r5, #8]
 8015274:	612b      	str	r3, [r5, #16]
 8015276:	e7ed      	b.n	8015254 <ucdr_serialize_endian_array_char+0x40>

08015278 <ucdr_deserialize_endian_array_char>:
 8015278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801527c:	4619      	mov	r1, r3
 801527e:	461f      	mov	r7, r3
 8015280:	4605      	mov	r5, r0
 8015282:	4690      	mov	r8, r2
 8015284:	f7f8 fbd2 	bl	800da2c <ucdr_check_buffer_available_for>
 8015288:	b9e0      	cbnz	r0, 80152c4 <ucdr_deserialize_endian_array_char+0x4c>
 801528a:	463e      	mov	r6, r7
 801528c:	e009      	b.n	80152a2 <ucdr_deserialize_endian_array_char+0x2a>
 801528e:	68a9      	ldr	r1, [r5, #8]
 8015290:	f001 ff81 	bl	8017196 <memcpy>
 8015294:	68ab      	ldr	r3, [r5, #8]
 8015296:	6928      	ldr	r0, [r5, #16]
 8015298:	4423      	add	r3, r4
 801529a:	4420      	add	r0, r4
 801529c:	1b36      	subs	r6, r6, r4
 801529e:	60ab      	str	r3, [r5, #8]
 80152a0:	6128      	str	r0, [r5, #16]
 80152a2:	2201      	movs	r2, #1
 80152a4:	4631      	mov	r1, r6
 80152a6:	4628      	mov	r0, r5
 80152a8:	f7f8 fc48 	bl	800db3c <ucdr_check_final_buffer_behavior_array>
 80152ac:	4604      	mov	r4, r0
 80152ae:	1bb8      	subs	r0, r7, r6
 80152b0:	4440      	add	r0, r8
 80152b2:	4622      	mov	r2, r4
 80152b4:	2c00      	cmp	r4, #0
 80152b6:	d1ea      	bne.n	801528e <ucdr_deserialize_endian_array_char+0x16>
 80152b8:	2301      	movs	r3, #1
 80152ba:	7da8      	ldrb	r0, [r5, #22]
 80152bc:	756b      	strb	r3, [r5, #21]
 80152be:	4058      	eors	r0, r3
 80152c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152c4:	463a      	mov	r2, r7
 80152c6:	68a9      	ldr	r1, [r5, #8]
 80152c8:	4640      	mov	r0, r8
 80152ca:	f001 ff64 	bl	8017196 <memcpy>
 80152ce:	68aa      	ldr	r2, [r5, #8]
 80152d0:	692b      	ldr	r3, [r5, #16]
 80152d2:	443a      	add	r2, r7
 80152d4:	443b      	add	r3, r7
 80152d6:	60aa      	str	r2, [r5, #8]
 80152d8:	612b      	str	r3, [r5, #16]
 80152da:	e7ed      	b.n	80152b8 <ucdr_deserialize_endian_array_char+0x40>

080152dc <ucdr_serialize_array_uint8_t>:
 80152dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152e0:	4688      	mov	r8, r1
 80152e2:	4611      	mov	r1, r2
 80152e4:	4617      	mov	r7, r2
 80152e6:	4605      	mov	r5, r0
 80152e8:	f7f8 fba0 	bl	800da2c <ucdr_check_buffer_available_for>
 80152ec:	b9e0      	cbnz	r0, 8015328 <ucdr_serialize_array_uint8_t+0x4c>
 80152ee:	463e      	mov	r6, r7
 80152f0:	e009      	b.n	8015306 <ucdr_serialize_array_uint8_t+0x2a>
 80152f2:	68a8      	ldr	r0, [r5, #8]
 80152f4:	f001 ff4f 	bl	8017196 <memcpy>
 80152f8:	68aa      	ldr	r2, [r5, #8]
 80152fa:	692b      	ldr	r3, [r5, #16]
 80152fc:	4422      	add	r2, r4
 80152fe:	4423      	add	r3, r4
 8015300:	1b36      	subs	r6, r6, r4
 8015302:	60aa      	str	r2, [r5, #8]
 8015304:	612b      	str	r3, [r5, #16]
 8015306:	4631      	mov	r1, r6
 8015308:	2201      	movs	r2, #1
 801530a:	4628      	mov	r0, r5
 801530c:	f7f8 fc16 	bl	800db3c <ucdr_check_final_buffer_behavior_array>
 8015310:	1bb9      	subs	r1, r7, r6
 8015312:	4441      	add	r1, r8
 8015314:	4604      	mov	r4, r0
 8015316:	4602      	mov	r2, r0
 8015318:	2800      	cmp	r0, #0
 801531a:	d1ea      	bne.n	80152f2 <ucdr_serialize_array_uint8_t+0x16>
 801531c:	2301      	movs	r3, #1
 801531e:	7da8      	ldrb	r0, [r5, #22]
 8015320:	756b      	strb	r3, [r5, #21]
 8015322:	4058      	eors	r0, r3
 8015324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015328:	463a      	mov	r2, r7
 801532a:	68a8      	ldr	r0, [r5, #8]
 801532c:	4641      	mov	r1, r8
 801532e:	f001 ff32 	bl	8017196 <memcpy>
 8015332:	68aa      	ldr	r2, [r5, #8]
 8015334:	692b      	ldr	r3, [r5, #16]
 8015336:	443a      	add	r2, r7
 8015338:	443b      	add	r3, r7
 801533a:	60aa      	str	r2, [r5, #8]
 801533c:	612b      	str	r3, [r5, #16]
 801533e:	e7ed      	b.n	801531c <ucdr_serialize_array_uint8_t+0x40>

08015340 <ucdr_serialize_endian_array_uint8_t>:
 8015340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015344:	4619      	mov	r1, r3
 8015346:	461f      	mov	r7, r3
 8015348:	4605      	mov	r5, r0
 801534a:	4690      	mov	r8, r2
 801534c:	f7f8 fb6e 	bl	800da2c <ucdr_check_buffer_available_for>
 8015350:	b9e0      	cbnz	r0, 801538c <ucdr_serialize_endian_array_uint8_t+0x4c>
 8015352:	463e      	mov	r6, r7
 8015354:	e009      	b.n	801536a <ucdr_serialize_endian_array_uint8_t+0x2a>
 8015356:	68a8      	ldr	r0, [r5, #8]
 8015358:	f001 ff1d 	bl	8017196 <memcpy>
 801535c:	68ab      	ldr	r3, [r5, #8]
 801535e:	6928      	ldr	r0, [r5, #16]
 8015360:	4423      	add	r3, r4
 8015362:	4420      	add	r0, r4
 8015364:	1b36      	subs	r6, r6, r4
 8015366:	60ab      	str	r3, [r5, #8]
 8015368:	6128      	str	r0, [r5, #16]
 801536a:	4631      	mov	r1, r6
 801536c:	2201      	movs	r2, #1
 801536e:	4628      	mov	r0, r5
 8015370:	f7f8 fbe4 	bl	800db3c <ucdr_check_final_buffer_behavior_array>
 8015374:	1bb9      	subs	r1, r7, r6
 8015376:	4441      	add	r1, r8
 8015378:	4604      	mov	r4, r0
 801537a:	4602      	mov	r2, r0
 801537c:	2800      	cmp	r0, #0
 801537e:	d1ea      	bne.n	8015356 <ucdr_serialize_endian_array_uint8_t+0x16>
 8015380:	2301      	movs	r3, #1
 8015382:	7da8      	ldrb	r0, [r5, #22]
 8015384:	756b      	strb	r3, [r5, #21]
 8015386:	4058      	eors	r0, r3
 8015388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801538c:	463a      	mov	r2, r7
 801538e:	68a8      	ldr	r0, [r5, #8]
 8015390:	4641      	mov	r1, r8
 8015392:	f001 ff00 	bl	8017196 <memcpy>
 8015396:	68aa      	ldr	r2, [r5, #8]
 8015398:	692b      	ldr	r3, [r5, #16]
 801539a:	443a      	add	r2, r7
 801539c:	443b      	add	r3, r7
 801539e:	60aa      	str	r2, [r5, #8]
 80153a0:	612b      	str	r3, [r5, #16]
 80153a2:	e7ed      	b.n	8015380 <ucdr_serialize_endian_array_uint8_t+0x40>

080153a4 <ucdr_deserialize_array_uint8_t>:
 80153a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153a8:	4688      	mov	r8, r1
 80153aa:	4611      	mov	r1, r2
 80153ac:	4617      	mov	r7, r2
 80153ae:	4605      	mov	r5, r0
 80153b0:	f7f8 fb3c 	bl	800da2c <ucdr_check_buffer_available_for>
 80153b4:	b9e0      	cbnz	r0, 80153f0 <ucdr_deserialize_array_uint8_t+0x4c>
 80153b6:	463e      	mov	r6, r7
 80153b8:	e009      	b.n	80153ce <ucdr_deserialize_array_uint8_t+0x2a>
 80153ba:	68a9      	ldr	r1, [r5, #8]
 80153bc:	f001 feeb 	bl	8017196 <memcpy>
 80153c0:	68aa      	ldr	r2, [r5, #8]
 80153c2:	692b      	ldr	r3, [r5, #16]
 80153c4:	4422      	add	r2, r4
 80153c6:	4423      	add	r3, r4
 80153c8:	1b36      	subs	r6, r6, r4
 80153ca:	60aa      	str	r2, [r5, #8]
 80153cc:	612b      	str	r3, [r5, #16]
 80153ce:	2201      	movs	r2, #1
 80153d0:	4631      	mov	r1, r6
 80153d2:	4628      	mov	r0, r5
 80153d4:	f7f8 fbb2 	bl	800db3c <ucdr_check_final_buffer_behavior_array>
 80153d8:	4604      	mov	r4, r0
 80153da:	1bb8      	subs	r0, r7, r6
 80153dc:	4440      	add	r0, r8
 80153de:	4622      	mov	r2, r4
 80153e0:	2c00      	cmp	r4, #0
 80153e2:	d1ea      	bne.n	80153ba <ucdr_deserialize_array_uint8_t+0x16>
 80153e4:	2301      	movs	r3, #1
 80153e6:	7da8      	ldrb	r0, [r5, #22]
 80153e8:	756b      	strb	r3, [r5, #21]
 80153ea:	4058      	eors	r0, r3
 80153ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153f0:	463a      	mov	r2, r7
 80153f2:	68a9      	ldr	r1, [r5, #8]
 80153f4:	4640      	mov	r0, r8
 80153f6:	f001 fece 	bl	8017196 <memcpy>
 80153fa:	68aa      	ldr	r2, [r5, #8]
 80153fc:	692b      	ldr	r3, [r5, #16]
 80153fe:	443a      	add	r2, r7
 8015400:	443b      	add	r3, r7
 8015402:	60aa      	str	r2, [r5, #8]
 8015404:	612b      	str	r3, [r5, #16]
 8015406:	e7ed      	b.n	80153e4 <ucdr_deserialize_array_uint8_t+0x40>

08015408 <ucdr_deserialize_endian_array_uint8_t>:
 8015408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801540c:	4619      	mov	r1, r3
 801540e:	461f      	mov	r7, r3
 8015410:	4605      	mov	r5, r0
 8015412:	4690      	mov	r8, r2
 8015414:	f7f8 fb0a 	bl	800da2c <ucdr_check_buffer_available_for>
 8015418:	b9e0      	cbnz	r0, 8015454 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 801541a:	463e      	mov	r6, r7
 801541c:	e009      	b.n	8015432 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 801541e:	68a9      	ldr	r1, [r5, #8]
 8015420:	f001 feb9 	bl	8017196 <memcpy>
 8015424:	68ab      	ldr	r3, [r5, #8]
 8015426:	6928      	ldr	r0, [r5, #16]
 8015428:	4423      	add	r3, r4
 801542a:	4420      	add	r0, r4
 801542c:	1b36      	subs	r6, r6, r4
 801542e:	60ab      	str	r3, [r5, #8]
 8015430:	6128      	str	r0, [r5, #16]
 8015432:	2201      	movs	r2, #1
 8015434:	4631      	mov	r1, r6
 8015436:	4628      	mov	r0, r5
 8015438:	f7f8 fb80 	bl	800db3c <ucdr_check_final_buffer_behavior_array>
 801543c:	4604      	mov	r4, r0
 801543e:	1bb8      	subs	r0, r7, r6
 8015440:	4440      	add	r0, r8
 8015442:	4622      	mov	r2, r4
 8015444:	2c00      	cmp	r4, #0
 8015446:	d1ea      	bne.n	801541e <ucdr_deserialize_endian_array_uint8_t+0x16>
 8015448:	2301      	movs	r3, #1
 801544a:	7da8      	ldrb	r0, [r5, #22]
 801544c:	756b      	strb	r3, [r5, #21]
 801544e:	4058      	eors	r0, r3
 8015450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015454:	463a      	mov	r2, r7
 8015456:	68a9      	ldr	r1, [r5, #8]
 8015458:	4640      	mov	r0, r8
 801545a:	f001 fe9c 	bl	8017196 <memcpy>
 801545e:	68aa      	ldr	r2, [r5, #8]
 8015460:	692b      	ldr	r3, [r5, #16]
 8015462:	443a      	add	r2, r7
 8015464:	443b      	add	r3, r7
 8015466:	60aa      	str	r2, [r5, #8]
 8015468:	612b      	str	r3, [r5, #16]
 801546a:	e7ed      	b.n	8015448 <ucdr_deserialize_endian_array_uint8_t+0x40>

0801546c <ucdr_serialize_sequence_char>:
 801546c:	b570      	push	{r4, r5, r6, lr}
 801546e:	4615      	mov	r5, r2
 8015470:	460e      	mov	r6, r1
 8015472:	7d01      	ldrb	r1, [r0, #20]
 8015474:	4604      	mov	r4, r0
 8015476:	f7f7 fe2f 	bl	800d0d8 <ucdr_serialize_endian_uint32_t>
 801547a:	b90d      	cbnz	r5, 8015480 <ucdr_serialize_sequence_char+0x14>
 801547c:	2001      	movs	r0, #1
 801547e:	bd70      	pop	{r4, r5, r6, pc}
 8015480:	7d21      	ldrb	r1, [r4, #20]
 8015482:	462b      	mov	r3, r5
 8015484:	4632      	mov	r2, r6
 8015486:	4620      	mov	r0, r4
 8015488:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801548c:	f7ff bec2 	b.w	8015214 <ucdr_serialize_endian_array_char>

08015490 <ucdr_deserialize_sequence_char>:
 8015490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015494:	461d      	mov	r5, r3
 8015496:	4616      	mov	r6, r2
 8015498:	460f      	mov	r7, r1
 801549a:	461a      	mov	r2, r3
 801549c:	7d01      	ldrb	r1, [r0, #20]
 801549e:	4604      	mov	r4, r0
 80154a0:	f7f7 ff42 	bl	800d328 <ucdr_deserialize_endian_uint32_t>
 80154a4:	682b      	ldr	r3, [r5, #0]
 80154a6:	429e      	cmp	r6, r3
 80154a8:	bf3c      	itt	cc
 80154aa:	2201      	movcc	r2, #1
 80154ac:	75a2      	strbcc	r2, [r4, #22]
 80154ae:	b913      	cbnz	r3, 80154b6 <ucdr_deserialize_sequence_char+0x26>
 80154b0:	2001      	movs	r0, #1
 80154b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154b6:	7d21      	ldrb	r1, [r4, #20]
 80154b8:	463a      	mov	r2, r7
 80154ba:	4620      	mov	r0, r4
 80154bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80154c0:	f7ff beda 	b.w	8015278 <ucdr_deserialize_endian_array_char>

080154c4 <ucdr_serialize_sequence_uint8_t>:
 80154c4:	b570      	push	{r4, r5, r6, lr}
 80154c6:	4615      	mov	r5, r2
 80154c8:	460e      	mov	r6, r1
 80154ca:	7d01      	ldrb	r1, [r0, #20]
 80154cc:	4604      	mov	r4, r0
 80154ce:	f7f7 fe03 	bl	800d0d8 <ucdr_serialize_endian_uint32_t>
 80154d2:	b90d      	cbnz	r5, 80154d8 <ucdr_serialize_sequence_uint8_t+0x14>
 80154d4:	2001      	movs	r0, #1
 80154d6:	bd70      	pop	{r4, r5, r6, pc}
 80154d8:	7d21      	ldrb	r1, [r4, #20]
 80154da:	462b      	mov	r3, r5
 80154dc:	4632      	mov	r2, r6
 80154de:	4620      	mov	r0, r4
 80154e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80154e4:	f7ff bf2c 	b.w	8015340 <ucdr_serialize_endian_array_uint8_t>

080154e8 <ucdr_deserialize_sequence_uint8_t>:
 80154e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154ec:	461d      	mov	r5, r3
 80154ee:	4616      	mov	r6, r2
 80154f0:	460f      	mov	r7, r1
 80154f2:	461a      	mov	r2, r3
 80154f4:	7d01      	ldrb	r1, [r0, #20]
 80154f6:	4604      	mov	r4, r0
 80154f8:	f7f7 ff16 	bl	800d328 <ucdr_deserialize_endian_uint32_t>
 80154fc:	682b      	ldr	r3, [r5, #0]
 80154fe:	429e      	cmp	r6, r3
 8015500:	bf3c      	itt	cc
 8015502:	2201      	movcc	r2, #1
 8015504:	75a2      	strbcc	r2, [r4, #22]
 8015506:	b913      	cbnz	r3, 801550e <ucdr_deserialize_sequence_uint8_t+0x26>
 8015508:	2001      	movs	r0, #1
 801550a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801550e:	7d21      	ldrb	r1, [r4, #20]
 8015510:	463a      	mov	r2, r7
 8015512:	4620      	mov	r0, r4
 8015514:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015518:	f7ff bf76 	b.w	8015408 <ucdr_deserialize_endian_array_uint8_t>

0801551c <ucdr_serialize_string>:
 801551c:	b510      	push	{r4, lr}
 801551e:	b082      	sub	sp, #8
 8015520:	4604      	mov	r4, r0
 8015522:	4608      	mov	r0, r1
 8015524:	9101      	str	r1, [sp, #4]
 8015526:	f7ea fe85 	bl	8000234 <strlen>
 801552a:	9901      	ldr	r1, [sp, #4]
 801552c:	1c42      	adds	r2, r0, #1
 801552e:	4620      	mov	r0, r4
 8015530:	b002      	add	sp, #8
 8015532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015536:	f7ff bf99 	b.w	801546c <ucdr_serialize_sequence_char>
 801553a:	bf00      	nop

0801553c <ucdr_deserialize_string>:
 801553c:	b500      	push	{lr}
 801553e:	b083      	sub	sp, #12
 8015540:	ab01      	add	r3, sp, #4
 8015542:	f7ff ffa5 	bl	8015490 <ucdr_deserialize_sequence_char>
 8015546:	b003      	add	sp, #12
 8015548:	f85d fb04 	ldr.w	pc, [sp], #4

0801554c <uxr_init_input_best_effort_stream>:
 801554c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015550:	8003      	strh	r3, [r0, #0]
 8015552:	4770      	bx	lr

08015554 <uxr_reset_input_best_effort_stream>:
 8015554:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015558:	8003      	strh	r3, [r0, #0]
 801555a:	4770      	bx	lr

0801555c <uxr_receive_best_effort_message>:
 801555c:	b538      	push	{r3, r4, r5, lr}
 801555e:	4604      	mov	r4, r0
 8015560:	8800      	ldrh	r0, [r0, #0]
 8015562:	460d      	mov	r5, r1
 8015564:	f000 fd22 	bl	8015fac <uxr_seq_num_cmp>
 8015568:	4603      	mov	r3, r0
 801556a:	2b00      	cmp	r3, #0
 801556c:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8015570:	bfb8      	it	lt
 8015572:	8025      	strhlt	r5, [r4, #0]
 8015574:	bd38      	pop	{r3, r4, r5, pc}
 8015576:	bf00      	nop

08015578 <on_full_input_buffer>:
 8015578:	b570      	push	{r4, r5, r6, lr}
 801557a:	4605      	mov	r5, r0
 801557c:	460c      	mov	r4, r1
 801557e:	682b      	ldr	r3, [r5, #0]
 8015580:	6809      	ldr	r1, [r1, #0]
 8015582:	8920      	ldrh	r0, [r4, #8]
 8015584:	6862      	ldr	r2, [r4, #4]
 8015586:	fbb2 f2f0 	udiv	r2, r2, r0
 801558a:	eba3 0c01 	sub.w	ip, r3, r1
 801558e:	fbbc fcf2 	udiv	ip, ip, r2
 8015592:	f10c 0c01 	add.w	ip, ip, #1
 8015596:	fa1f f38c 	uxth.w	r3, ip
 801559a:	fbb3 f6f0 	udiv	r6, r3, r0
 801559e:	fb00 3316 	mls	r3, r0, r6, r3
 80155a2:	b29b      	uxth	r3, r3
 80155a4:	fb02 f303 	mul.w	r3, r2, r3
 80155a8:	1d18      	adds	r0, r3, #4
 80155aa:	4408      	add	r0, r1
 80155ac:	7d26      	ldrb	r6, [r4, #20]
 80155ae:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80155b2:	b116      	cbz	r6, 80155ba <on_full_input_buffer+0x42>
 80155b4:	2600      	movs	r6, #0
 80155b6:	f840 6c04 	str.w	r6, [r0, #-4]
 80155ba:	2a03      	cmp	r2, #3
 80155bc:	d801      	bhi.n	80155c2 <on_full_input_buffer+0x4a>
 80155be:	2001      	movs	r0, #1
 80155c0:	bd70      	pop	{r4, r5, r6, pc}
 80155c2:	3308      	adds	r3, #8
 80155c4:	4419      	add	r1, r3
 80155c6:	4628      	mov	r0, r5
 80155c8:	692b      	ldr	r3, [r5, #16]
 80155ca:	3a04      	subs	r2, #4
 80155cc:	f7f8 fa7a 	bl	800dac4 <ucdr_init_buffer_origin>
 80155d0:	4628      	mov	r0, r5
 80155d2:	4903      	ldr	r1, [pc, #12]	@ (80155e0 <on_full_input_buffer+0x68>)
 80155d4:	4622      	mov	r2, r4
 80155d6:	f7f8 fa51 	bl	800da7c <ucdr_set_on_full_buffer_callback>
 80155da:	2000      	movs	r0, #0
 80155dc:	bd70      	pop	{r4, r5, r6, pc}
 80155de:	bf00      	nop
 80155e0:	08015579 	.word	0x08015579

080155e4 <uxr_init_input_reliable_stream>:
 80155e4:	b500      	push	{lr}
 80155e6:	e9c0 1200 	strd	r1, r2, [r0]
 80155ea:	f04f 0e00 	mov.w	lr, #0
 80155ee:	9a01      	ldr	r2, [sp, #4]
 80155f0:	8103      	strh	r3, [r0, #8]
 80155f2:	6102      	str	r2, [r0, #16]
 80155f4:	f880 e014 	strb.w	lr, [r0, #20]
 80155f8:	b1d3      	cbz	r3, 8015630 <uxr_init_input_reliable_stream+0x4c>
 80155fa:	f8c1 e000 	str.w	lr, [r1]
 80155fe:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015602:	f1bc 0f01 	cmp.w	ip, #1
 8015606:	d913      	bls.n	8015630 <uxr_init_input_reliable_stream+0x4c>
 8015608:	2301      	movs	r3, #1
 801560a:	fbb3 f1fc 	udiv	r1, r3, ip
 801560e:	fb0c 3111 	mls	r1, ip, r1, r3
 8015612:	b289      	uxth	r1, r1
 8015614:	6842      	ldr	r2, [r0, #4]
 8015616:	fbb2 f2fc 	udiv	r2, r2, ip
 801561a:	fb01 f202 	mul.w	r2, r1, r2
 801561e:	6801      	ldr	r1, [r0, #0]
 8015620:	f841 e002 	str.w	lr, [r1, r2]
 8015624:	3301      	adds	r3, #1
 8015626:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801562a:	b29b      	uxth	r3, r3
 801562c:	459c      	cmp	ip, r3
 801562e:	d8ec      	bhi.n	801560a <uxr_init_input_reliable_stream+0x26>
 8015630:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015634:	60c3      	str	r3, [r0, #12]
 8015636:	f85d fb04 	ldr.w	pc, [sp], #4
 801563a:	bf00      	nop

0801563c <uxr_reset_input_reliable_stream>:
 801563c:	8901      	ldrh	r1, [r0, #8]
 801563e:	b1e9      	cbz	r1, 801567c <uxr_reset_input_reliable_stream+0x40>
 8015640:	f04f 0c00 	mov.w	ip, #0
 8015644:	b500      	push	{lr}
 8015646:	4663      	mov	r3, ip
 8015648:	46e6      	mov	lr, ip
 801564a:	fbb3 f2f1 	udiv	r2, r3, r1
 801564e:	fb01 3312 	mls	r3, r1, r2, r3
 8015652:	b29b      	uxth	r3, r3
 8015654:	6842      	ldr	r2, [r0, #4]
 8015656:	fbb2 f2f1 	udiv	r2, r2, r1
 801565a:	fb02 f303 	mul.w	r3, r2, r3
 801565e:	6802      	ldr	r2, [r0, #0]
 8015660:	f842 e003 	str.w	lr, [r2, r3]
 8015664:	f10c 0c01 	add.w	ip, ip, #1
 8015668:	8901      	ldrh	r1, [r0, #8]
 801566a:	fa1f f38c 	uxth.w	r3, ip
 801566e:	4299      	cmp	r1, r3
 8015670:	d8eb      	bhi.n	801564a <uxr_reset_input_reliable_stream+0xe>
 8015672:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015676:	60c3      	str	r3, [r0, #12]
 8015678:	f85d fb04 	ldr.w	pc, [sp], #4
 801567c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015680:	60c3      	str	r3, [r0, #12]
 8015682:	4770      	bx	lr

08015684 <uxr_receive_reliable_message>:
 8015684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015688:	4604      	mov	r4, r0
 801568a:	460d      	mov	r5, r1
 801568c:	8901      	ldrh	r1, [r0, #8]
 801568e:	8980      	ldrh	r0, [r0, #12]
 8015690:	4690      	mov	r8, r2
 8015692:	461f      	mov	r7, r3
 8015694:	f000 fc82 	bl	8015f9c <uxr_seq_num_add>
 8015698:	4629      	mov	r1, r5
 801569a:	4606      	mov	r6, r0
 801569c:	89a0      	ldrh	r0, [r4, #12]
 801569e:	f000 fc85 	bl	8015fac <uxr_seq_num_cmp>
 80156a2:	2800      	cmp	r0, #0
 80156a4:	db0a      	blt.n	80156bc <uxr_receive_reliable_message+0x38>
 80156a6:	2600      	movs	r6, #0
 80156a8:	89e0      	ldrh	r0, [r4, #14]
 80156aa:	4629      	mov	r1, r5
 80156ac:	f000 fc7e 	bl	8015fac <uxr_seq_num_cmp>
 80156b0:	2800      	cmp	r0, #0
 80156b2:	da00      	bge.n	80156b6 <uxr_receive_reliable_message+0x32>
 80156b4:	81e5      	strh	r5, [r4, #14]
 80156b6:	4630      	mov	r0, r6
 80156b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80156bc:	4630      	mov	r0, r6
 80156be:	4629      	mov	r1, r5
 80156c0:	f000 fc74 	bl	8015fac <uxr_seq_num_cmp>
 80156c4:	2800      	cmp	r0, #0
 80156c6:	dbee      	blt.n	80156a6 <uxr_receive_reliable_message+0x22>
 80156c8:	6923      	ldr	r3, [r4, #16]
 80156ca:	4640      	mov	r0, r8
 80156cc:	4798      	blx	r3
 80156ce:	2101      	movs	r1, #1
 80156d0:	4681      	mov	r9, r0
 80156d2:	89a0      	ldrh	r0, [r4, #12]
 80156d4:	f000 fc62 	bl	8015f9c <uxr_seq_num_add>
 80156d8:	f1b9 0f00 	cmp.w	r9, #0
 80156dc:	d101      	bne.n	80156e2 <uxr_receive_reliable_message+0x5e>
 80156de:	4285      	cmp	r5, r0
 80156e0:	d047      	beq.n	8015772 <uxr_receive_reliable_message+0xee>
 80156e2:	8922      	ldrh	r2, [r4, #8]
 80156e4:	fbb5 f0f2 	udiv	r0, r5, r2
 80156e8:	fb02 5010 	mls	r0, r2, r0, r5
 80156ec:	b280      	uxth	r0, r0
 80156ee:	6863      	ldr	r3, [r4, #4]
 80156f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80156f4:	fb00 f303 	mul.w	r3, r0, r3
 80156f8:	6820      	ldr	r0, [r4, #0]
 80156fa:	3304      	adds	r3, #4
 80156fc:	4418      	add	r0, r3
 80156fe:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015702:	2b00      	cmp	r3, #0
 8015704:	d1cf      	bne.n	80156a6 <uxr_receive_reliable_message+0x22>
 8015706:	4641      	mov	r1, r8
 8015708:	463a      	mov	r2, r7
 801570a:	f001 fd44 	bl	8017196 <memcpy>
 801570e:	8921      	ldrh	r1, [r4, #8]
 8015710:	fbb5 f2f1 	udiv	r2, r5, r1
 8015714:	fb01 5212 	mls	r2, r1, r2, r5
 8015718:	b292      	uxth	r2, r2
 801571a:	6863      	ldr	r3, [r4, #4]
 801571c:	fbb3 f3f1 	udiv	r3, r3, r1
 8015720:	fb02 f303 	mul.w	r3, r2, r3
 8015724:	6822      	ldr	r2, [r4, #0]
 8015726:	50d7      	str	r7, [r2, r3]
 8015728:	9a08      	ldr	r2, [sp, #32]
 801572a:	2301      	movs	r3, #1
 801572c:	7013      	strb	r3, [r2, #0]
 801572e:	f1b9 0f00 	cmp.w	r9, #0
 8015732:	d0b8      	beq.n	80156a6 <uxr_receive_reliable_message+0x22>
 8015734:	89a6      	ldrh	r6, [r4, #12]
 8015736:	4630      	mov	r0, r6
 8015738:	2101      	movs	r1, #1
 801573a:	f000 fc2f 	bl	8015f9c <uxr_seq_num_add>
 801573e:	8922      	ldrh	r2, [r4, #8]
 8015740:	6863      	ldr	r3, [r4, #4]
 8015742:	fbb3 f3f2 	udiv	r3, r3, r2
 8015746:	4606      	mov	r6, r0
 8015748:	fbb0 f0f2 	udiv	r0, r0, r2
 801574c:	fb02 6010 	mls	r0, r2, r0, r6
 8015750:	b280      	uxth	r0, r0
 8015752:	fb00 f303 	mul.w	r3, r0, r3
 8015756:	6820      	ldr	r0, [r4, #0]
 8015758:	3304      	adds	r3, #4
 801575a:	4418      	add	r0, r3
 801575c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015760:	2b00      	cmp	r3, #0
 8015762:	d0a0      	beq.n	80156a6 <uxr_receive_reliable_message+0x22>
 8015764:	6923      	ldr	r3, [r4, #16]
 8015766:	4798      	blx	r3
 8015768:	2802      	cmp	r0, #2
 801576a:	d008      	beq.n	801577e <uxr_receive_reliable_message+0xfa>
 801576c:	2801      	cmp	r0, #1
 801576e:	d0e2      	beq.n	8015736 <uxr_receive_reliable_message+0xb2>
 8015770:	e799      	b.n	80156a6 <uxr_receive_reliable_message+0x22>
 8015772:	9b08      	ldr	r3, [sp, #32]
 8015774:	81a5      	strh	r5, [r4, #12]
 8015776:	2601      	movs	r6, #1
 8015778:	f883 9000 	strb.w	r9, [r3]
 801577c:	e794      	b.n	80156a8 <uxr_receive_reliable_message+0x24>
 801577e:	2601      	movs	r6, #1
 8015780:	e792      	b.n	80156a8 <uxr_receive_reliable_message+0x24>
 8015782:	bf00      	nop

08015784 <uxr_next_input_reliable_buffer_available>:
 8015784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015788:	4604      	mov	r4, r0
 801578a:	460f      	mov	r7, r1
 801578c:	8980      	ldrh	r0, [r0, #12]
 801578e:	2101      	movs	r1, #1
 8015790:	4690      	mov	r8, r2
 8015792:	f000 fc03 	bl	8015f9c <uxr_seq_num_add>
 8015796:	8922      	ldrh	r2, [r4, #8]
 8015798:	fbb0 f6f2 	udiv	r6, r0, r2
 801579c:	fb02 0616 	mls	r6, r2, r6, r0
 80157a0:	b2b6      	uxth	r6, r6
 80157a2:	6863      	ldr	r3, [r4, #4]
 80157a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80157a8:	fb06 f303 	mul.w	r3, r6, r3
 80157ac:	6826      	ldr	r6, [r4, #0]
 80157ae:	3304      	adds	r3, #4
 80157b0:	441e      	add	r6, r3
 80157b2:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80157b6:	f1b9 0f00 	cmp.w	r9, #0
 80157ba:	d023      	beq.n	8015804 <uxr_next_input_reliable_buffer_available+0x80>
 80157bc:	6923      	ldr	r3, [r4, #16]
 80157be:	4605      	mov	r5, r0
 80157c0:	4630      	mov	r0, r6
 80157c2:	4798      	blx	r3
 80157c4:	4682      	mov	sl, r0
 80157c6:	b300      	cbz	r0, 801580a <uxr_next_input_reliable_buffer_available+0x86>
 80157c8:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80157cc:	2101      	movs	r1, #1
 80157ce:	4650      	mov	r0, sl
 80157d0:	f000 fbe4 	bl	8015f9c <uxr_seq_num_add>
 80157d4:	8921      	ldrh	r1, [r4, #8]
 80157d6:	fbb0 f2f1 	udiv	r2, r0, r1
 80157da:	4682      	mov	sl, r0
 80157dc:	fb01 0212 	mls	r2, r1, r2, r0
 80157e0:	e9d4 0300 	ldrd	r0, r3, [r4]
 80157e4:	b292      	uxth	r2, r2
 80157e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80157ea:	fb02 f303 	mul.w	r3, r2, r3
 80157ee:	3304      	adds	r3, #4
 80157f0:	4418      	add	r0, r3
 80157f2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80157f6:	b12b      	cbz	r3, 8015804 <uxr_next_input_reliable_buffer_available+0x80>
 80157f8:	6923      	ldr	r3, [r4, #16]
 80157fa:	4798      	blx	r3
 80157fc:	2802      	cmp	r0, #2
 80157fe:	d01b      	beq.n	8015838 <uxr_next_input_reliable_buffer_available+0xb4>
 8015800:	2801      	cmp	r0, #1
 8015802:	d0e3      	beq.n	80157cc <uxr_next_input_reliable_buffer_available+0x48>
 8015804:	2000      	movs	r0, #0
 8015806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801580a:	464a      	mov	r2, r9
 801580c:	4631      	mov	r1, r6
 801580e:	4638      	mov	r0, r7
 8015810:	f7f8 f960 	bl	800dad4 <ucdr_init_buffer>
 8015814:	8921      	ldrh	r1, [r4, #8]
 8015816:	fbb5 f2f1 	udiv	r2, r5, r1
 801581a:	fb01 5212 	mls	r2, r1, r2, r5
 801581e:	b292      	uxth	r2, r2
 8015820:	6863      	ldr	r3, [r4, #4]
 8015822:	fbb3 f3f1 	udiv	r3, r3, r1
 8015826:	fb02 f303 	mul.w	r3, r2, r3
 801582a:	6822      	ldr	r2, [r4, #0]
 801582c:	f842 a003 	str.w	sl, [r2, r3]
 8015830:	2001      	movs	r0, #1
 8015832:	81a5      	strh	r5, [r4, #12]
 8015834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015838:	8920      	ldrh	r0, [r4, #8]
 801583a:	fbb5 f3f0 	udiv	r3, r5, r0
 801583e:	fb00 5513 	mls	r5, r0, r3, r5
 8015842:	b2ad      	uxth	r5, r5
 8015844:	6863      	ldr	r3, [r4, #4]
 8015846:	fbb3 f3f0 	udiv	r3, r3, r0
 801584a:	fb03 f505 	mul.w	r5, r3, r5
 801584e:	6823      	ldr	r3, [r4, #0]
 8015850:	2000      	movs	r0, #0
 8015852:	5158      	str	r0, [r3, r5]
 8015854:	eb06 0108 	add.w	r1, r6, r8
 8015858:	eba9 0208 	sub.w	r2, r9, r8
 801585c:	4638      	mov	r0, r7
 801585e:	f7f8 f939 	bl	800dad4 <ucdr_init_buffer>
 8015862:	4638      	mov	r0, r7
 8015864:	4903      	ldr	r1, [pc, #12]	@ (8015874 <uxr_next_input_reliable_buffer_available+0xf0>)
 8015866:	4622      	mov	r2, r4
 8015868:	f7f8 f908 	bl	800da7c <ucdr_set_on_full_buffer_callback>
 801586c:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8015870:	2001      	movs	r0, #1
 8015872:	e7c8      	b.n	8015806 <uxr_next_input_reliable_buffer_available+0x82>
 8015874:	08015579 	.word	0x08015579

08015878 <uxr_process_heartbeat>:
 8015878:	b538      	push	{r3, r4, r5, lr}
 801587a:	4611      	mov	r1, r2
 801587c:	4604      	mov	r4, r0
 801587e:	89c0      	ldrh	r0, [r0, #14]
 8015880:	4615      	mov	r5, r2
 8015882:	f000 fb93 	bl	8015fac <uxr_seq_num_cmp>
 8015886:	2800      	cmp	r0, #0
 8015888:	bfb8      	it	lt
 801588a:	81e5      	strhlt	r5, [r4, #14]
 801588c:	bd38      	pop	{r3, r4, r5, pc}
 801588e:	bf00      	nop

08015890 <uxr_compute_acknack>:
 8015890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015894:	8903      	ldrh	r3, [r0, #8]
 8015896:	8985      	ldrh	r5, [r0, #12]
 8015898:	4604      	mov	r4, r0
 801589a:	460e      	mov	r6, r1
 801589c:	b1d3      	cbz	r3, 80158d4 <uxr_compute_acknack+0x44>
 801589e:	4628      	mov	r0, r5
 80158a0:	2701      	movs	r7, #1
 80158a2:	e003      	b.n	80158ac <uxr_compute_acknack+0x1c>
 80158a4:	4567      	cmp	r7, ip
 80158a6:	d215      	bcs.n	80158d4 <uxr_compute_acknack+0x44>
 80158a8:	89a0      	ldrh	r0, [r4, #12]
 80158aa:	3701      	adds	r7, #1
 80158ac:	b2b9      	uxth	r1, r7
 80158ae:	f000 fb75 	bl	8015f9c <uxr_seq_num_add>
 80158b2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80158b6:	fbb0 f3fc 	udiv	r3, r0, ip
 80158ba:	fb0c 0313 	mls	r3, ip, r3, r0
 80158be:	b29a      	uxth	r2, r3
 80158c0:	e9d4 1300 	ldrd	r1, r3, [r4]
 80158c4:	fbb3 f3fc 	udiv	r3, r3, ip
 80158c8:	fb02 f303 	mul.w	r3, r2, r3
 80158cc:	58cb      	ldr	r3, [r1, r3]
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d1e8      	bne.n	80158a4 <uxr_compute_acknack+0x14>
 80158d2:	4605      	mov	r5, r0
 80158d4:	8035      	strh	r5, [r6, #0]
 80158d6:	2101      	movs	r1, #1
 80158d8:	4628      	mov	r0, r5
 80158da:	89e7      	ldrh	r7, [r4, #14]
 80158dc:	f000 fb62 	bl	8015fa4 <uxr_seq_num_sub>
 80158e0:	4601      	mov	r1, r0
 80158e2:	4638      	mov	r0, r7
 80158e4:	f000 fb5e 	bl	8015fa4 <uxr_seq_num_sub>
 80158e8:	4605      	mov	r5, r0
 80158ea:	b318      	cbz	r0, 8015934 <uxr_compute_acknack+0xa4>
 80158ec:	f04f 0900 	mov.w	r9, #0
 80158f0:	464f      	mov	r7, r9
 80158f2:	f04f 0801 	mov.w	r8, #1
 80158f6:	fa1f f189 	uxth.w	r1, r9
 80158fa:	8830      	ldrh	r0, [r6, #0]
 80158fc:	f000 fb4e 	bl	8015f9c <uxr_seq_num_add>
 8015900:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015904:	fbb0 f3fc 	udiv	r3, r0, ip
 8015908:	e9d4 1200 	ldrd	r1, r2, [r4]
 801590c:	fb03 001c 	mls	r0, r3, ip, r0
 8015910:	b283      	uxth	r3, r0
 8015912:	fbb2 f2fc 	udiv	r2, r2, ip
 8015916:	fb02 f303 	mul.w	r3, r2, r3
 801591a:	fa08 f209 	lsl.w	r2, r8, r9
 801591e:	58cb      	ldr	r3, [r1, r3]
 8015920:	f109 0901 	add.w	r9, r9, #1
 8015924:	b90b      	cbnz	r3, 801592a <uxr_compute_acknack+0x9a>
 8015926:	4317      	orrs	r7, r2
 8015928:	b2bf      	uxth	r7, r7
 801592a:	454d      	cmp	r5, r9
 801592c:	d1e3      	bne.n	80158f6 <uxr_compute_acknack+0x66>
 801592e:	4638      	mov	r0, r7
 8015930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015934:	4607      	mov	r7, r0
 8015936:	4638      	mov	r0, r7
 8015938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801593c <uxr_init_output_best_effort_stream>:
 801593c:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8015940:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8015944:	6001      	str	r1, [r0, #0]
 8015946:	7303      	strb	r3, [r0, #12]
 8015948:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801594c:	4770      	bx	lr
 801594e:	bf00      	nop

08015950 <uxr_reset_output_best_effort_stream>:
 8015950:	7b02      	ldrb	r2, [r0, #12]
 8015952:	6042      	str	r2, [r0, #4]
 8015954:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015958:	81c3      	strh	r3, [r0, #14]
 801595a:	4770      	bx	lr

0801595c <uxr_prepare_best_effort_buffer_to_write>:
 801595c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801595e:	4604      	mov	r4, r0
 8015960:	b083      	sub	sp, #12
 8015962:	6840      	ldr	r0, [r0, #4]
 8015964:	460d      	mov	r5, r1
 8015966:	4616      	mov	r6, r2
 8015968:	f7fa fb40 	bl	800ffec <uxr_submessage_padding>
 801596c:	6863      	ldr	r3, [r4, #4]
 801596e:	4418      	add	r0, r3
 8015970:	68a3      	ldr	r3, [r4, #8]
 8015972:	1942      	adds	r2, r0, r5
 8015974:	4293      	cmp	r3, r2
 8015976:	bf2c      	ite	cs
 8015978:	2701      	movcs	r7, #1
 801597a:	2700      	movcc	r7, #0
 801597c:	d202      	bcs.n	8015984 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801597e:	4638      	mov	r0, r7
 8015980:	b003      	add	sp, #12
 8015982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015984:	9000      	str	r0, [sp, #0]
 8015986:	6821      	ldr	r1, [r4, #0]
 8015988:	4630      	mov	r0, r6
 801598a:	2300      	movs	r3, #0
 801598c:	f7f8 f890 	bl	800dab0 <ucdr_init_buffer_origin_offset>
 8015990:	6861      	ldr	r1, [r4, #4]
 8015992:	4638      	mov	r0, r7
 8015994:	4429      	add	r1, r5
 8015996:	6061      	str	r1, [r4, #4]
 8015998:	b003      	add	sp, #12
 801599a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801599c <uxr_prepare_best_effort_buffer_to_send>:
 801599c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159a0:	4604      	mov	r4, r0
 80159a2:	461d      	mov	r5, r3
 80159a4:	6840      	ldr	r0, [r0, #4]
 80159a6:	7b23      	ldrb	r3, [r4, #12]
 80159a8:	4298      	cmp	r0, r3
 80159aa:	bf8c      	ite	hi
 80159ac:	2601      	movhi	r6, #1
 80159ae:	2600      	movls	r6, #0
 80159b0:	d802      	bhi.n	80159b8 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80159b2:	4630      	mov	r0, r6
 80159b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159b8:	4688      	mov	r8, r1
 80159ba:	89e0      	ldrh	r0, [r4, #14]
 80159bc:	2101      	movs	r1, #1
 80159be:	4617      	mov	r7, r2
 80159c0:	f000 faec 	bl	8015f9c <uxr_seq_num_add>
 80159c4:	6823      	ldr	r3, [r4, #0]
 80159c6:	81e0      	strh	r0, [r4, #14]
 80159c8:	8028      	strh	r0, [r5, #0]
 80159ca:	f8c8 3000 	str.w	r3, [r8]
 80159ce:	6863      	ldr	r3, [r4, #4]
 80159d0:	603b      	str	r3, [r7, #0]
 80159d2:	7b23      	ldrb	r3, [r4, #12]
 80159d4:	6063      	str	r3, [r4, #4]
 80159d6:	4630      	mov	r0, r6
 80159d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080159dc <on_full_output_buffer>:
 80159dc:	b538      	push	{r3, r4, r5, lr}
 80159de:	6802      	ldr	r2, [r0, #0]
 80159e0:	460c      	mov	r4, r1
 80159e2:	6809      	ldr	r1, [r1, #0]
 80159e4:	8923      	ldrh	r3, [r4, #8]
 80159e6:	eba2 0c01 	sub.w	ip, r2, r1
 80159ea:	6862      	ldr	r2, [r4, #4]
 80159ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80159f0:	fbbc fcf2 	udiv	ip, ip, r2
 80159f4:	f10c 0c01 	add.w	ip, ip, #1
 80159f8:	fa1f fc8c 	uxth.w	ip, ip
 80159fc:	fbbc fef3 	udiv	lr, ip, r3
 8015a00:	fb03 c31e 	mls	r3, r3, lr, ip
 8015a04:	b29b      	uxth	r3, r3
 8015a06:	fb02 f303 	mul.w	r3, r2, r3
 8015a0a:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8015a0e:	58ca      	ldr	r2, [r1, r3]
 8015a10:	4463      	add	r3, ip
 8015a12:	eba2 020c 	sub.w	r2, r2, ip
 8015a16:	3308      	adds	r3, #8
 8015a18:	4605      	mov	r5, r0
 8015a1a:	4419      	add	r1, r3
 8015a1c:	3a04      	subs	r2, #4
 8015a1e:	6903      	ldr	r3, [r0, #16]
 8015a20:	f7f8 f850 	bl	800dac4 <ucdr_init_buffer_origin>
 8015a24:	4628      	mov	r0, r5
 8015a26:	4903      	ldr	r1, [pc, #12]	@ (8015a34 <on_full_output_buffer+0x58>)
 8015a28:	4622      	mov	r2, r4
 8015a2a:	f7f8 f827 	bl	800da7c <ucdr_set_on_full_buffer_callback>
 8015a2e:	2000      	movs	r0, #0
 8015a30:	bd38      	pop	{r3, r4, r5, pc}
 8015a32:	bf00      	nop
 8015a34:	080159dd 	.word	0x080159dd

08015a38 <uxr_init_output_reliable_stream>:
 8015a38:	b410      	push	{r4}
 8015a3a:	f89d c004 	ldrb.w	ip, [sp, #4]
 8015a3e:	8103      	strh	r3, [r0, #8]
 8015a40:	e9c0 1200 	strd	r1, r2, [r0]
 8015a44:	f880 c00c 	strb.w	ip, [r0, #12]
 8015a48:	b1d3      	cbz	r3, 8015a80 <uxr_init_output_reliable_stream+0x48>
 8015a4a:	f8c1 c000 	str.w	ip, [r1]
 8015a4e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015a52:	f1bc 0f01 	cmp.w	ip, #1
 8015a56:	d913      	bls.n	8015a80 <uxr_init_output_reliable_stream+0x48>
 8015a58:	2301      	movs	r3, #1
 8015a5a:	fbb3 f1fc 	udiv	r1, r3, ip
 8015a5e:	fb0c 3111 	mls	r1, ip, r1, r3
 8015a62:	b289      	uxth	r1, r1
 8015a64:	6842      	ldr	r2, [r0, #4]
 8015a66:	6804      	ldr	r4, [r0, #0]
 8015a68:	fbb2 f2fc 	udiv	r2, r2, ip
 8015a6c:	fb01 f202 	mul.w	r2, r1, r2
 8015a70:	7b01      	ldrb	r1, [r0, #12]
 8015a72:	50a1      	str	r1, [r4, r2]
 8015a74:	3301      	adds	r3, #1
 8015a76:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015a7a:	b29b      	uxth	r3, r3
 8015a7c:	459c      	cmp	ip, r3
 8015a7e:	d8ec      	bhi.n	8015a5a <uxr_init_output_reliable_stream+0x22>
 8015a80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015a84:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015a88:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8015a8c:	4905      	ldr	r1, [pc, #20]	@ (8015aa4 <uxr_init_output_reliable_stream+0x6c>)
 8015a8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015a92:	f8c0 100e 	str.w	r1, [r0, #14]
 8015a96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	8242      	strh	r2, [r0, #18]
 8015a9e:	8403      	strh	r3, [r0, #32]
 8015aa0:	4770      	bx	lr
 8015aa2:	bf00      	nop
 8015aa4:	ffff0000 	.word	0xffff0000

08015aa8 <uxr_reset_output_reliable_stream>:
 8015aa8:	8901      	ldrh	r1, [r0, #8]
 8015aaa:	b1b1      	cbz	r1, 8015ada <uxr_reset_output_reliable_stream+0x32>
 8015aac:	f04f 0c00 	mov.w	ip, #0
 8015ab0:	4663      	mov	r3, ip
 8015ab2:	fbb3 f2f1 	udiv	r2, r3, r1
 8015ab6:	fb01 3312 	mls	r3, r1, r2, r3
 8015aba:	b29b      	uxth	r3, r3
 8015abc:	6842      	ldr	r2, [r0, #4]
 8015abe:	fbb2 f2f1 	udiv	r2, r2, r1
 8015ac2:	6801      	ldr	r1, [r0, #0]
 8015ac4:	fb02 f303 	mul.w	r3, r2, r3
 8015ac8:	7b02      	ldrb	r2, [r0, #12]
 8015aca:	50ca      	str	r2, [r1, r3]
 8015acc:	f10c 0c01 	add.w	ip, ip, #1
 8015ad0:	8901      	ldrh	r1, [r0, #8]
 8015ad2:	fa1f f38c 	uxth.w	r3, ip
 8015ad6:	4299      	cmp	r1, r3
 8015ad8:	d8eb      	bhi.n	8015ab2 <uxr_reset_output_reliable_stream+0xa>
 8015ada:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015ade:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015ae2:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8015ae6:	4904      	ldr	r1, [pc, #16]	@ (8015af8 <uxr_reset_output_reliable_stream+0x50>)
 8015ae8:	f8c0 100e 	str.w	r1, [r0, #14]
 8015aec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015af0:	2300      	movs	r3, #0
 8015af2:	8242      	strh	r2, [r0, #18]
 8015af4:	8403      	strh	r3, [r0, #32]
 8015af6:	4770      	bx	lr
 8015af8:	ffff0000 	.word	0xffff0000

08015afc <uxr_prepare_reliable_buffer_to_write>:
 8015afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b00:	4604      	mov	r4, r0
 8015b02:	b091      	sub	sp, #68	@ 0x44
 8015b04:	8900      	ldrh	r0, [r0, #8]
 8015b06:	89e6      	ldrh	r6, [r4, #14]
 8015b08:	6823      	ldr	r3, [r4, #0]
 8015b0a:	9204      	str	r2, [sp, #16]
 8015b0c:	fbb6 f2f0 	udiv	r2, r6, r0
 8015b10:	fb00 6212 	mls	r2, r0, r2, r6
 8015b14:	b292      	uxth	r2, r2
 8015b16:	6865      	ldr	r5, [r4, #4]
 8015b18:	fbb5 f5f0 	udiv	r5, r5, r0
 8015b1c:	fb05 3202 	mla	r2, r5, r2, r3
 8015b20:	3204      	adds	r2, #4
 8015b22:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8015b26:	f894 900c 	ldrb.w	r9, [r4, #12]
 8015b2a:	9203      	str	r2, [sp, #12]
 8015b2c:	468b      	mov	fp, r1
 8015b2e:	1f2f      	subs	r7, r5, #4
 8015b30:	2800      	cmp	r0, #0
 8015b32:	f000 814c 	beq.w	8015dce <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8015b36:	f04f 0c00 	mov.w	ip, #0
 8015b3a:	46e2      	mov	sl, ip
 8015b3c:	4661      	mov	r1, ip
 8015b3e:	fbb1 f2f0 	udiv	r2, r1, r0
 8015b42:	fb00 1212 	mls	r2, r0, r2, r1
 8015b46:	b292      	uxth	r2, r2
 8015b48:	fb05 f202 	mul.w	r2, r5, r2
 8015b4c:	f10c 0c01 	add.w	ip, ip, #1
 8015b50:	589a      	ldr	r2, [r3, r2]
 8015b52:	454a      	cmp	r2, r9
 8015b54:	bf08      	it	eq
 8015b56:	f10a 0a01 	addeq.w	sl, sl, #1
 8015b5a:	fa1f f18c 	uxth.w	r1, ip
 8015b5e:	bf08      	it	eq
 8015b60:	fa1f fa8a 	uxtheq.w	sl, sl
 8015b64:	4281      	cmp	r1, r0
 8015b66:	d3ea      	bcc.n	8015b3e <uxr_prepare_reliable_buffer_to_write+0x42>
 8015b68:	4640      	mov	r0, r8
 8015b6a:	2104      	movs	r1, #4
 8015b6c:	f8cd a014 	str.w	sl, [sp, #20]
 8015b70:	f7f7 ffb4 	bl	800dadc <ucdr_alignment>
 8015b74:	4480      	add	r8, r0
 8015b76:	eb08 020b 	add.w	r2, r8, fp
 8015b7a:	42ba      	cmp	r2, r7
 8015b7c:	f240 80cd 	bls.w	8015d1a <uxr_prepare_reliable_buffer_to_write+0x21e>
 8015b80:	7b22      	ldrb	r2, [r4, #12]
 8015b82:	445a      	add	r2, fp
 8015b84:	42ba      	cmp	r2, r7
 8015b86:	f240 80b5 	bls.w	8015cf4 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8015b8a:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8015b8e:	33fc      	adds	r3, #252	@ 0xfc
 8015b90:	b2ba      	uxth	r2, r7
 8015b92:	4413      	add	r3, r2
 8015b94:	b29b      	uxth	r3, r3
 8015b96:	fb0a f903 	mul.w	r9, sl, r3
 8015b9a:	45d9      	cmp	r9, fp
 8015b9c:	9305      	str	r3, [sp, #20]
 8015b9e:	9306      	str	r3, [sp, #24]
 8015ba0:	f0c0 80b7 	bcc.w	8015d12 <uxr_prepare_reliable_buffer_to_write+0x216>
 8015ba4:	f108 0304 	add.w	r3, r8, #4
 8015ba8:	42bb      	cmp	r3, r7
 8015baa:	f080 80db 	bcs.w	8015d64 <uxr_prepare_reliable_buffer_to_write+0x268>
 8015bae:	f1a2 0904 	sub.w	r9, r2, #4
 8015bb2:	eba9 0908 	sub.w	r9, r9, r8
 8015bb6:	9b05      	ldr	r3, [sp, #20]
 8015bb8:	fa1f f989 	uxth.w	r9, r9
 8015bbc:	ebab 0b09 	sub.w	fp, fp, r9
 8015bc0:	fbbb f2f3 	udiv	r2, fp, r3
 8015bc4:	fb03 b312 	mls	r3, r3, r2, fp
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	f000 80c8 	beq.w	8015d5e <uxr_prepare_reliable_buffer_to_write+0x262>
 8015bce:	3201      	adds	r2, #1
 8015bd0:	b292      	uxth	r2, r2
 8015bd2:	9306      	str	r3, [sp, #24]
 8015bd4:	4552      	cmp	r2, sl
 8015bd6:	f200 809c 	bhi.w	8015d12 <uxr_prepare_reliable_buffer_to_write+0x216>
 8015bda:	f10d 0b20 	add.w	fp, sp, #32
 8015bde:	2a00      	cmp	r2, #0
 8015be0:	d042      	beq.n	8015c68 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8015be2:	f8cd 801c 	str.w	r8, [sp, #28]
 8015be6:	f04f 0a00 	mov.w	sl, #0
 8015bea:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8015bee:	9505      	str	r5, [sp, #20]
 8015bf0:	f10d 0b20 	add.w	fp, sp, #32
 8015bf4:	4615      	mov	r5, r2
 8015bf6:	e000      	b.n	8015bfa <uxr_prepare_reliable_buffer_to_write+0xfe>
 8015bf8:	46c1      	mov	r9, r8
 8015bfa:	8920      	ldrh	r0, [r4, #8]
 8015bfc:	fbb6 f2f0 	udiv	r2, r6, r0
 8015c00:	fb00 6112 	mls	r1, r0, r2, r6
 8015c04:	b28a      	uxth	r2, r1
 8015c06:	6863      	ldr	r3, [r4, #4]
 8015c08:	fbb3 f1f0 	udiv	r1, r3, r0
 8015c0c:	6823      	ldr	r3, [r4, #0]
 8015c0e:	fb02 f101 	mul.w	r1, r2, r1
 8015c12:	3104      	adds	r1, #4
 8015c14:	4419      	add	r1, r3
 8015c16:	4658      	mov	r0, fp
 8015c18:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8015c1c:	9200      	str	r2, [sp, #0]
 8015c1e:	2300      	movs	r3, #0
 8015c20:	463a      	mov	r2, r7
 8015c22:	f7f7 ff45 	bl	800dab0 <ucdr_init_buffer_origin_offset>
 8015c26:	464a      	mov	r2, r9
 8015c28:	2300      	movs	r3, #0
 8015c2a:	210d      	movs	r1, #13
 8015c2c:	4658      	mov	r0, fp
 8015c2e:	f7fa f99d 	bl	800ff6c <uxr_buffer_submessage_header>
 8015c32:	8921      	ldrh	r1, [r4, #8]
 8015c34:	fbb6 f2f1 	udiv	r2, r6, r1
 8015c38:	fb01 6212 	mls	r2, r1, r2, r6
 8015c3c:	b292      	uxth	r2, r2
 8015c3e:	6863      	ldr	r3, [r4, #4]
 8015c40:	fbb3 f3f1 	udiv	r3, r3, r1
 8015c44:	fb02 f303 	mul.w	r3, r2, r3
 8015c48:	6822      	ldr	r2, [r4, #0]
 8015c4a:	4630      	mov	r0, r6
 8015c4c:	50d7      	str	r7, [r2, r3]
 8015c4e:	2101      	movs	r1, #1
 8015c50:	f000 f9a4 	bl	8015f9c <uxr_seq_num_add>
 8015c54:	f10a 0a01 	add.w	sl, sl, #1
 8015c58:	fa1f f38a 	uxth.w	r3, sl
 8015c5c:	429d      	cmp	r5, r3
 8015c5e:	4606      	mov	r6, r0
 8015c60:	d8ca      	bhi.n	8015bf8 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8015c62:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8015c66:	9d05      	ldr	r5, [sp, #20]
 8015c68:	8920      	ldrh	r0, [r4, #8]
 8015c6a:	fbb6 f3f0 	udiv	r3, r6, r0
 8015c6e:	fb00 6313 	mls	r3, r0, r3, r6
 8015c72:	b299      	uxth	r1, r3
 8015c74:	6863      	ldr	r3, [r4, #4]
 8015c76:	fbb3 f3f0 	udiv	r3, r3, r0
 8015c7a:	fb01 f303 	mul.w	r3, r1, r3
 8015c7e:	6821      	ldr	r1, [r4, #0]
 8015c80:	3304      	adds	r3, #4
 8015c82:	4419      	add	r1, r3
 8015c84:	463a      	mov	r2, r7
 8015c86:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8015c8a:	9000      	str	r0, [sp, #0]
 8015c8c:	2300      	movs	r3, #0
 8015c8e:	4658      	mov	r0, fp
 8015c90:	f7f7 ff0e 	bl	800dab0 <ucdr_init_buffer_origin_offset>
 8015c94:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8015c98:	4658      	mov	r0, fp
 8015c9a:	fa1f f289 	uxth.w	r2, r9
 8015c9e:	2302      	movs	r3, #2
 8015ca0:	210d      	movs	r1, #13
 8015ca2:	f7fa f963 	bl	800ff6c <uxr_buffer_submessage_header>
 8015ca6:	9b03      	ldr	r3, [sp, #12]
 8015ca8:	8927      	ldrh	r7, [r4, #8]
 8015caa:	7b20      	ldrb	r0, [r4, #12]
 8015cac:	f108 0104 	add.w	r1, r8, #4
 8015cb0:	440b      	add	r3, r1
 8015cb2:	4619      	mov	r1, r3
 8015cb4:	fbb6 f3f7 	udiv	r3, r6, r7
 8015cb8:	fb07 6313 	mls	r3, r7, r3, r6
 8015cbc:	f1a5 0208 	sub.w	r2, r5, #8
 8015cc0:	b29d      	uxth	r5, r3
 8015cc2:	3004      	adds	r0, #4
 8015cc4:	6863      	ldr	r3, [r4, #4]
 8015cc6:	fbb3 f3f7 	udiv	r3, r3, r7
 8015cca:	fb05 f303 	mul.w	r3, r5, r3
 8015cce:	6825      	ldr	r5, [r4, #0]
 8015cd0:	4448      	add	r0, r9
 8015cd2:	50e8      	str	r0, [r5, r3]
 8015cd4:	9d04      	ldr	r5, [sp, #16]
 8015cd6:	eba2 0208 	sub.w	r2, r2, r8
 8015cda:	4628      	mov	r0, r5
 8015cdc:	f7f7 fefa 	bl	800dad4 <ucdr_init_buffer>
 8015ce0:	4628      	mov	r0, r5
 8015ce2:	493c      	ldr	r1, [pc, #240]	@ (8015dd4 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8015ce4:	4622      	mov	r2, r4
 8015ce6:	f7f7 fec9 	bl	800da7c <ucdr_set_on_full_buffer_callback>
 8015cea:	2001      	movs	r0, #1
 8015cec:	81e6      	strh	r6, [r4, #14]
 8015cee:	b011      	add	sp, #68	@ 0x44
 8015cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cf4:	2101      	movs	r1, #1
 8015cf6:	89e0      	ldrh	r0, [r4, #14]
 8015cf8:	f000 f950 	bl	8015f9c <uxr_seq_num_add>
 8015cfc:	8921      	ldrh	r1, [r4, #8]
 8015cfe:	4605      	mov	r5, r0
 8015d00:	8a60      	ldrh	r0, [r4, #18]
 8015d02:	f000 f94b 	bl	8015f9c <uxr_seq_num_add>
 8015d06:	4601      	mov	r1, r0
 8015d08:	4628      	mov	r0, r5
 8015d0a:	f000 f94f 	bl	8015fac <uxr_seq_num_cmp>
 8015d0e:	2800      	cmp	r0, #0
 8015d10:	dd42      	ble.n	8015d98 <uxr_prepare_reliable_buffer_to_write+0x29c>
 8015d12:	2000      	movs	r0, #0
 8015d14:	b011      	add	sp, #68	@ 0x44
 8015d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d1a:	8921      	ldrh	r1, [r4, #8]
 8015d1c:	8a60      	ldrh	r0, [r4, #18]
 8015d1e:	9205      	str	r2, [sp, #20]
 8015d20:	f000 f93c 	bl	8015f9c <uxr_seq_num_add>
 8015d24:	4601      	mov	r1, r0
 8015d26:	4630      	mov	r0, r6
 8015d28:	f000 f940 	bl	8015fac <uxr_seq_num_cmp>
 8015d2c:	2800      	cmp	r0, #0
 8015d2e:	9a05      	ldr	r2, [sp, #20]
 8015d30:	dcef      	bgt.n	8015d12 <uxr_prepare_reliable_buffer_to_write+0x216>
 8015d32:	8927      	ldrh	r7, [r4, #8]
 8015d34:	fbb6 f3f7 	udiv	r3, r6, r7
 8015d38:	fb07 6313 	mls	r3, r7, r3, r6
 8015d3c:	b29d      	uxth	r5, r3
 8015d3e:	6863      	ldr	r3, [r4, #4]
 8015d40:	6824      	ldr	r4, [r4, #0]
 8015d42:	fbb3 f3f7 	udiv	r3, r3, r7
 8015d46:	fb05 f303 	mul.w	r3, r5, r3
 8015d4a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8015d4e:	50e2      	str	r2, [r4, r3]
 8015d50:	2300      	movs	r3, #0
 8015d52:	f8cd 8000 	str.w	r8, [sp]
 8015d56:	f7f7 feab 	bl	800dab0 <ucdr_init_buffer_origin_offset>
 8015d5a:	2001      	movs	r0, #1
 8015d5c:	e7da      	b.n	8015d14 <uxr_prepare_reliable_buffer_to_write+0x218>
 8015d5e:	b293      	uxth	r3, r2
 8015d60:	461a      	mov	r2, r3
 8015d62:	e737      	b.n	8015bd4 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8015d64:	4630      	mov	r0, r6
 8015d66:	2101      	movs	r1, #1
 8015d68:	9207      	str	r2, [sp, #28]
 8015d6a:	f000 f917 	bl	8015f9c <uxr_seq_num_add>
 8015d6e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015d72:	fbb0 f1fc 	udiv	r1, r0, ip
 8015d76:	fb0c 0111 	mls	r1, ip, r1, r0
 8015d7a:	4606      	mov	r6, r0
 8015d7c:	b288      	uxth	r0, r1
 8015d7e:	6863      	ldr	r3, [r4, #4]
 8015d80:	fbb3 f1fc 	udiv	r1, r3, ip
 8015d84:	6823      	ldr	r3, [r4, #0]
 8015d86:	9a07      	ldr	r2, [sp, #28]
 8015d88:	fb00 f101 	mul.w	r1, r0, r1
 8015d8c:	3104      	adds	r1, #4
 8015d8e:	440b      	add	r3, r1
 8015d90:	9303      	str	r3, [sp, #12]
 8015d92:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8015d96:	e70a      	b.n	8015bae <uxr_prepare_reliable_buffer_to_write+0xb2>
 8015d98:	8921      	ldrh	r1, [r4, #8]
 8015d9a:	fbb5 f3f1 	udiv	r3, r5, r1
 8015d9e:	fb01 5313 	mls	r3, r1, r3, r5
 8015da2:	b29a      	uxth	r2, r3
 8015da4:	6863      	ldr	r3, [r4, #4]
 8015da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8015daa:	6821      	ldr	r1, [r4, #0]
 8015dac:	9804      	ldr	r0, [sp, #16]
 8015dae:	fb02 f303 	mul.w	r3, r2, r3
 8015db2:	3304      	adds	r3, #4
 8015db4:	7b22      	ldrb	r2, [r4, #12]
 8015db6:	4419      	add	r1, r3
 8015db8:	445a      	add	r2, fp
 8015dba:	f841 2c04 	str.w	r2, [r1, #-4]
 8015dbe:	7b23      	ldrb	r3, [r4, #12]
 8015dc0:	9300      	str	r3, [sp, #0]
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	f7f7 fe74 	bl	800dab0 <ucdr_init_buffer_origin_offset>
 8015dc8:	81e5      	strh	r5, [r4, #14]
 8015dca:	2001      	movs	r0, #1
 8015dcc:	e7a2      	b.n	8015d14 <uxr_prepare_reliable_buffer_to_write+0x218>
 8015dce:	4682      	mov	sl, r0
 8015dd0:	e6ca      	b.n	8015b68 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8015dd2:	bf00      	nop
 8015dd4:	080159dd 	.word	0x080159dd

08015dd8 <uxr_prepare_next_reliable_buffer_to_send>:
 8015dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015dda:	4604      	mov	r4, r0
 8015ddc:	460f      	mov	r7, r1
 8015dde:	8a00      	ldrh	r0, [r0, #16]
 8015de0:	2101      	movs	r1, #1
 8015de2:	4616      	mov	r6, r2
 8015de4:	461d      	mov	r5, r3
 8015de6:	f000 f8d9 	bl	8015f9c <uxr_seq_num_add>
 8015dea:	8028      	strh	r0, [r5, #0]
 8015dec:	8922      	ldrh	r2, [r4, #8]
 8015dee:	fbb0 f3f2 	udiv	r3, r0, r2
 8015df2:	fb02 0c13 	mls	ip, r2, r3, r0
 8015df6:	fa1f fc8c 	uxth.w	ip, ip
 8015dfa:	6863      	ldr	r3, [r4, #4]
 8015dfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8015e00:	fb0c fc03 	mul.w	ip, ip, r3
 8015e04:	6823      	ldr	r3, [r4, #0]
 8015e06:	89e1      	ldrh	r1, [r4, #14]
 8015e08:	f10c 0c04 	add.w	ip, ip, #4
 8015e0c:	4463      	add	r3, ip
 8015e0e:	603b      	str	r3, [r7, #0]
 8015e10:	6823      	ldr	r3, [r4, #0]
 8015e12:	449c      	add	ip, r3
 8015e14:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8015e18:	6033      	str	r3, [r6, #0]
 8015e1a:	f000 f8c7 	bl	8015fac <uxr_seq_num_cmp>
 8015e1e:	2800      	cmp	r0, #0
 8015e20:	dd01      	ble.n	8015e26 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8015e22:	2000      	movs	r0, #0
 8015e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e26:	7b23      	ldrb	r3, [r4, #12]
 8015e28:	6832      	ldr	r2, [r6, #0]
 8015e2a:	429a      	cmp	r2, r3
 8015e2c:	d9f9      	bls.n	8015e22 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8015e2e:	8a61      	ldrh	r1, [r4, #18]
 8015e30:	8a20      	ldrh	r0, [r4, #16]
 8015e32:	f000 f8b7 	bl	8015fa4 <uxr_seq_num_sub>
 8015e36:	8923      	ldrh	r3, [r4, #8]
 8015e38:	4283      	cmp	r3, r0
 8015e3a:	d0f2      	beq.n	8015e22 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8015e3c:	8828      	ldrh	r0, [r5, #0]
 8015e3e:	89e3      	ldrh	r3, [r4, #14]
 8015e40:	8220      	strh	r0, [r4, #16]
 8015e42:	4298      	cmp	r0, r3
 8015e44:	d001      	beq.n	8015e4a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8015e46:	2001      	movs	r0, #1
 8015e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e4a:	2101      	movs	r1, #1
 8015e4c:	f000 f8a6 	bl	8015f9c <uxr_seq_num_add>
 8015e50:	81e0      	strh	r0, [r4, #14]
 8015e52:	2001      	movs	r0, #1
 8015e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e56:	bf00      	nop

08015e58 <uxr_update_output_stream_heartbeat_timestamp>:
 8015e58:	b570      	push	{r4, r5, r6, lr}
 8015e5a:	8a01      	ldrh	r1, [r0, #16]
 8015e5c:	4604      	mov	r4, r0
 8015e5e:	8a40      	ldrh	r0, [r0, #18]
 8015e60:	4615      	mov	r5, r2
 8015e62:	461e      	mov	r6, r3
 8015e64:	f000 f8a2 	bl	8015fac <uxr_seq_num_cmp>
 8015e68:	2800      	cmp	r0, #0
 8015e6a:	db07      	blt.n	8015e7c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8015e6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015e70:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8015e74:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8015e78:	2000      	movs	r0, #0
 8015e7a:	bd70      	pop	{r4, r5, r6, pc}
 8015e7c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8015e80:	b940      	cbnz	r0, 8015e94 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8015e82:	2301      	movs	r3, #1
 8015e84:	f884 3020 	strb.w	r3, [r4, #32]
 8015e88:	3564      	adds	r5, #100	@ 0x64
 8015e8a:	f146 0600 	adc.w	r6, r6, #0
 8015e8e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8015e92:	bd70      	pop	{r4, r5, r6, pc}
 8015e94:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8015e98:	4295      	cmp	r5, r2
 8015e9a:	eb76 0303 	sbcs.w	r3, r6, r3
 8015e9e:	bfa5      	ittet	ge
 8015ea0:	3001      	addge	r0, #1
 8015ea2:	f884 0020 	strbge.w	r0, [r4, #32]
 8015ea6:	2000      	movlt	r0, #0
 8015ea8:	2001      	movge	r0, #1
 8015eaa:	e7ed      	b.n	8015e88 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08015eac <uxr_begin_output_nack_buffer_it>:
 8015eac:	8a40      	ldrh	r0, [r0, #18]
 8015eae:	4770      	bx	lr

08015eb0 <uxr_next_reliable_nack_buffer_to_send>:
 8015eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015eb4:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8015eb8:	b082      	sub	sp, #8
 8015eba:	f1b8 0f00 	cmp.w	r8, #0
 8015ebe:	d011      	beq.n	8015ee4 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8015ec0:	4604      	mov	r4, r0
 8015ec2:	8818      	ldrh	r0, [r3, #0]
 8015ec4:	460e      	mov	r6, r1
 8015ec6:	4617      	mov	r7, r2
 8015ec8:	461d      	mov	r5, r3
 8015eca:	2101      	movs	r1, #1
 8015ecc:	f000 f866 	bl	8015f9c <uxr_seq_num_add>
 8015ed0:	8028      	strh	r0, [r5, #0]
 8015ed2:	8a21      	ldrh	r1, [r4, #16]
 8015ed4:	f000 f86a 	bl	8015fac <uxr_seq_num_cmp>
 8015ed8:	2800      	cmp	r0, #0
 8015eda:	dd07      	ble.n	8015eec <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8015edc:	f04f 0800 	mov.w	r8, #0
 8015ee0:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8015ee4:	4640      	mov	r0, r8
 8015ee6:	b002      	add	sp, #8
 8015ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015eec:	8921      	ldrh	r1, [r4, #8]
 8015eee:	8828      	ldrh	r0, [r5, #0]
 8015ef0:	6823      	ldr	r3, [r4, #0]
 8015ef2:	fbb0 f2f1 	udiv	r2, r0, r1
 8015ef6:	fb01 0c12 	mls	ip, r1, r2, r0
 8015efa:	fa1f f28c 	uxth.w	r2, ip
 8015efe:	9301      	str	r3, [sp, #4]
 8015f00:	6863      	ldr	r3, [r4, #4]
 8015f02:	fbb3 fcf1 	udiv	ip, r3, r1
 8015f06:	9b01      	ldr	r3, [sp, #4]
 8015f08:	fb02 fc0c 	mul.w	ip, r2, ip
 8015f0c:	f10c 0c04 	add.w	ip, ip, #4
 8015f10:	4463      	add	r3, ip
 8015f12:	6033      	str	r3, [r6, #0]
 8015f14:	6823      	ldr	r3, [r4, #0]
 8015f16:	4463      	add	r3, ip
 8015f18:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8015f1c:	603b      	str	r3, [r7, #0]
 8015f1e:	7b22      	ldrb	r2, [r4, #12]
 8015f20:	429a      	cmp	r2, r3
 8015f22:	d0d2      	beq.n	8015eca <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8015f24:	4640      	mov	r0, r8
 8015f26:	b002      	add	sp, #8
 8015f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015f2c <uxr_process_acknack>:
 8015f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f2e:	4604      	mov	r4, r0
 8015f30:	460e      	mov	r6, r1
 8015f32:	4610      	mov	r0, r2
 8015f34:	2101      	movs	r1, #1
 8015f36:	f000 f835 	bl	8015fa4 <uxr_seq_num_sub>
 8015f3a:	8a61      	ldrh	r1, [r4, #18]
 8015f3c:	f000 f832 	bl	8015fa4 <uxr_seq_num_sub>
 8015f40:	b1c0      	cbz	r0, 8015f74 <uxr_process_acknack+0x48>
 8015f42:	4605      	mov	r5, r0
 8015f44:	2700      	movs	r7, #0
 8015f46:	2101      	movs	r1, #1
 8015f48:	8a60      	ldrh	r0, [r4, #18]
 8015f4a:	f000 f827 	bl	8015f9c <uxr_seq_num_add>
 8015f4e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8015f52:	fbb0 f1fc 	udiv	r1, r0, ip
 8015f56:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015f5a:	fb0c 0111 	mls	r1, ip, r1, r0
 8015f5e:	b289      	uxth	r1, r1
 8015f60:	3701      	adds	r7, #1
 8015f62:	fbb3 f3fc 	udiv	r3, r3, ip
 8015f66:	fb01 f303 	mul.w	r3, r1, r3
 8015f6a:	42bd      	cmp	r5, r7
 8015f6c:	7b21      	ldrb	r1, [r4, #12]
 8015f6e:	8260      	strh	r0, [r4, #18]
 8015f70:	50d1      	str	r1, [r2, r3]
 8015f72:	d1e8      	bne.n	8015f46 <uxr_process_acknack+0x1a>
 8015f74:	3e00      	subs	r6, #0
 8015f76:	f04f 0300 	mov.w	r3, #0
 8015f7a:	bf18      	it	ne
 8015f7c:	2601      	movne	r6, #1
 8015f7e:	f884 3020 	strb.w	r3, [r4, #32]
 8015f82:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8015f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015f88 <uxr_is_output_up_to_date>:
 8015f88:	8a01      	ldrh	r1, [r0, #16]
 8015f8a:	8a40      	ldrh	r0, [r0, #18]
 8015f8c:	b508      	push	{r3, lr}
 8015f8e:	f000 f80d 	bl	8015fac <uxr_seq_num_cmp>
 8015f92:	fab0 f080 	clz	r0, r0
 8015f96:	0940      	lsrs	r0, r0, #5
 8015f98:	bd08      	pop	{r3, pc}
 8015f9a:	bf00      	nop

08015f9c <uxr_seq_num_add>:
 8015f9c:	4408      	add	r0, r1
 8015f9e:	b280      	uxth	r0, r0
 8015fa0:	4770      	bx	lr
 8015fa2:	bf00      	nop

08015fa4 <uxr_seq_num_sub>:
 8015fa4:	1a40      	subs	r0, r0, r1
 8015fa6:	b280      	uxth	r0, r0
 8015fa8:	4770      	bx	lr
 8015faa:	bf00      	nop

08015fac <uxr_seq_num_cmp>:
 8015fac:	4288      	cmp	r0, r1
 8015fae:	d011      	beq.n	8015fd4 <uxr_seq_num_cmp+0x28>
 8015fb0:	d309      	bcc.n	8015fc6 <uxr_seq_num_cmp+0x1a>
 8015fb2:	4288      	cmp	r0, r1
 8015fb4:	d910      	bls.n	8015fd8 <uxr_seq_num_cmp+0x2c>
 8015fb6:	1a40      	subs	r0, r0, r1
 8015fb8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8015fbc:	bfd4      	ite	le
 8015fbe:	2001      	movle	r0, #1
 8015fc0:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8015fc4:	4770      	bx	lr
 8015fc6:	1a0b      	subs	r3, r1, r0
 8015fc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015fcc:	daf1      	bge.n	8015fb2 <uxr_seq_num_cmp+0x6>
 8015fce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015fd2:	4770      	bx	lr
 8015fd4:	2000      	movs	r0, #0
 8015fd6:	4770      	bx	lr
 8015fd8:	2001      	movs	r0, #1
 8015fda:	4770      	bx	lr

08015fdc <uxr_prepare_output_stream>:
 8015fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015fde:	b087      	sub	sp, #28
 8015fe0:	2707      	movs	r7, #7
 8015fe2:	9202      	str	r2, [sp, #8]
 8015fe4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015fe6:	9103      	str	r1, [sp, #12]
 8015fe8:	2500      	movs	r5, #0
 8015fea:	3204      	adds	r2, #4
 8015fec:	e9cd 7500 	strd	r7, r5, [sp]
 8015ff0:	461c      	mov	r4, r3
 8015ff2:	4606      	mov	r6, r0
 8015ff4:	f7f9 f88a 	bl	800f10c <uxr_prepare_stream_to_write_submessage>
 8015ff8:	f080 0201 	eor.w	r2, r0, #1
 8015ffc:	b2d2      	uxtb	r2, r2
 8015ffe:	75a2      	strb	r2, [r4, #22]
 8016000:	b112      	cbz	r2, 8016008 <uxr_prepare_output_stream+0x2c>
 8016002:	4628      	mov	r0, r5
 8016004:	b007      	add	sp, #28
 8016006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016008:	aa05      	add	r2, sp, #20
 801600a:	9902      	ldr	r1, [sp, #8]
 801600c:	4630      	mov	r0, r6
 801600e:	f7f9 f9b3 	bl	800f378 <uxr_init_base_object_request>
 8016012:	a905      	add	r1, sp, #20
 8016014:	4605      	mov	r5, r0
 8016016:	4620      	mov	r0, r4
 8016018:	f7fa fef4 	bl	8010e04 <uxr_serialize_WRITE_DATA_Payload_Data>
 801601c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8016020:	69a6      	ldr	r6, [r4, #24]
 8016022:	69e7      	ldr	r7, [r4, #28]
 8016024:	1a52      	subs	r2, r2, r1
 8016026:	4620      	mov	r0, r4
 8016028:	f7f7 fd54 	bl	800dad4 <ucdr_init_buffer>
 801602c:	4620      	mov	r0, r4
 801602e:	463a      	mov	r2, r7
 8016030:	4631      	mov	r1, r6
 8016032:	f7f7 fd23 	bl	800da7c <ucdr_set_on_full_buffer_callback>
 8016036:	4628      	mov	r0, r5
 8016038:	b007      	add	sp, #28
 801603a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801603c <rcl_get_default_domain_id>:
 801603c:	b530      	push	{r4, r5, lr}
 801603e:	b083      	sub	sp, #12
 8016040:	2300      	movs	r3, #0
 8016042:	9300      	str	r3, [sp, #0]
 8016044:	b1d0      	cbz	r0, 801607c <rcl_get_default_domain_id+0x40>
 8016046:	4604      	mov	r4, r0
 8016048:	4669      	mov	r1, sp
 801604a:	4815      	ldr	r0, [pc, #84]	@ (80160a0 <rcl_get_default_domain_id+0x64>)
 801604c:	f7fd fef4 	bl	8013e38 <rcutils_get_env>
 8016050:	4602      	mov	r2, r0
 8016052:	b110      	cbz	r0, 801605a <rcl_get_default_domain_id+0x1e>
 8016054:	2001      	movs	r0, #1
 8016056:	b003      	add	sp, #12
 8016058:	bd30      	pop	{r4, r5, pc}
 801605a:	9b00      	ldr	r3, [sp, #0]
 801605c:	b18b      	cbz	r3, 8016082 <rcl_get_default_domain_id+0x46>
 801605e:	7818      	ldrb	r0, [r3, #0]
 8016060:	2800      	cmp	r0, #0
 8016062:	d0f8      	beq.n	8016056 <rcl_get_default_domain_id+0x1a>
 8016064:	a901      	add	r1, sp, #4
 8016066:	4618      	mov	r0, r3
 8016068:	9201      	str	r2, [sp, #4]
 801606a:	f000 fe13 	bl	8016c94 <strtoul>
 801606e:	4605      	mov	r5, r0
 8016070:	b150      	cbz	r0, 8016088 <rcl_get_default_domain_id+0x4c>
 8016072:	1c43      	adds	r3, r0, #1
 8016074:	d00d      	beq.n	8016092 <rcl_get_default_domain_id+0x56>
 8016076:	6025      	str	r5, [r4, #0]
 8016078:	2000      	movs	r0, #0
 801607a:	e7ec      	b.n	8016056 <rcl_get_default_domain_id+0x1a>
 801607c:	200b      	movs	r0, #11
 801607e:	b003      	add	sp, #12
 8016080:	bd30      	pop	{r4, r5, pc}
 8016082:	4618      	mov	r0, r3
 8016084:	b003      	add	sp, #12
 8016086:	bd30      	pop	{r4, r5, pc}
 8016088:	9b01      	ldr	r3, [sp, #4]
 801608a:	781b      	ldrb	r3, [r3, #0]
 801608c:	2b00      	cmp	r3, #0
 801608e:	d0f2      	beq.n	8016076 <rcl_get_default_domain_id+0x3a>
 8016090:	e7e0      	b.n	8016054 <rcl_get_default_domain_id+0x18>
 8016092:	f001 f84b 	bl	801712c <__errno>
 8016096:	6803      	ldr	r3, [r0, #0]
 8016098:	2b22      	cmp	r3, #34	@ 0x22
 801609a:	d1ec      	bne.n	8016076 <rcl_get_default_domain_id+0x3a>
 801609c:	e7da      	b.n	8016054 <rcl_get_default_domain_id+0x18>
 801609e:	bf00      	nop
 80160a0:	08018acc 	.word	0x08018acc

080160a4 <rcl_expand_topic_name>:
 80160a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160a8:	b08b      	sub	sp, #44	@ 0x2c
 80160aa:	9306      	str	r3, [sp, #24]
 80160ac:	2800      	cmp	r0, #0
 80160ae:	f000 80ad 	beq.w	801620c <rcl_expand_topic_name+0x168>
 80160b2:	460e      	mov	r6, r1
 80160b4:	2900      	cmp	r1, #0
 80160b6:	f000 80a9 	beq.w	801620c <rcl_expand_topic_name+0x168>
 80160ba:	4617      	mov	r7, r2
 80160bc:	2a00      	cmp	r2, #0
 80160be:	f000 80a5 	beq.w	801620c <rcl_expand_topic_name+0x168>
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	f000 80a2 	beq.w	801620c <rcl_expand_topic_name+0x168>
 80160c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	f000 809e 	beq.w	801620c <rcl_expand_topic_name+0x168>
 80160d0:	2200      	movs	r2, #0
 80160d2:	a909      	add	r1, sp, #36	@ 0x24
 80160d4:	4680      	mov	r8, r0
 80160d6:	f000 fa79 	bl	80165cc <rcl_validate_topic_name>
 80160da:	4604      	mov	r4, r0
 80160dc:	2800      	cmp	r0, #0
 80160de:	f040 8096 	bne.w	801620e <rcl_expand_topic_name+0x16a>
 80160e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	f040 809a 	bne.w	801621e <rcl_expand_topic_name+0x17a>
 80160ea:	4602      	mov	r2, r0
 80160ec:	a909      	add	r1, sp, #36	@ 0x24
 80160ee:	4630      	mov	r0, r6
 80160f0:	f7fe faec 	bl	80146cc <rmw_validate_node_name>
 80160f4:	2800      	cmp	r0, #0
 80160f6:	f040 808e 	bne.w	8016216 <rcl_expand_topic_name+0x172>
 80160fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80160fc:	2a00      	cmp	r2, #0
 80160fe:	f040 8093 	bne.w	8016228 <rcl_expand_topic_name+0x184>
 8016102:	a909      	add	r1, sp, #36	@ 0x24
 8016104:	4638      	mov	r0, r7
 8016106:	f7fe fac3 	bl	8014690 <rmw_validate_namespace>
 801610a:	2800      	cmp	r0, #0
 801610c:	f040 8083 	bne.w	8016216 <rcl_expand_topic_name+0x172>
 8016110:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8016112:	2c00      	cmp	r4, #0
 8016114:	f040 80ed 	bne.w	80162f2 <rcl_expand_topic_name+0x24e>
 8016118:	217b      	movs	r1, #123	@ 0x7b
 801611a:	4640      	mov	r0, r8
 801611c:	f000 ff7a 	bl	8017014 <strchr>
 8016120:	f898 3000 	ldrb.w	r3, [r8]
 8016124:	2b2f      	cmp	r3, #47	@ 0x2f
 8016126:	4605      	mov	r5, r0
 8016128:	f000 809e 	beq.w	8016268 <rcl_expand_topic_name+0x1c4>
 801612c:	2b7e      	cmp	r3, #126	@ 0x7e
 801612e:	f040 80a2 	bne.w	8016276 <rcl_expand_topic_name+0x1d2>
 8016132:	4638      	mov	r0, r7
 8016134:	f7ea f87e 	bl	8000234 <strlen>
 8016138:	4a82      	ldr	r2, [pc, #520]	@ (8016344 <rcl_expand_topic_name+0x2a0>)
 801613a:	4b83      	ldr	r3, [pc, #524]	@ (8016348 <rcl_expand_topic_name+0x2a4>)
 801613c:	2801      	cmp	r0, #1
 801613e:	bf18      	it	ne
 8016140:	4613      	movne	r3, r2
 8016142:	9302      	str	r3, [sp, #8]
 8016144:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8016146:	9300      	str	r3, [sp, #0]
 8016148:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801614c:	f108 0301 	add.w	r3, r8, #1
 8016150:	9305      	str	r3, [sp, #20]
 8016152:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016156:	9301      	str	r3, [sp, #4]
 8016158:	ab14      	add	r3, sp, #80	@ 0x50
 801615a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801615c:	f7fd fe94 	bl	8013e88 <rcutils_format_string_limit>
 8016160:	4682      	mov	sl, r0
 8016162:	2800      	cmp	r0, #0
 8016164:	f000 80c7 	beq.w	80162f6 <rcl_expand_topic_name+0x252>
 8016168:	2d00      	cmp	r5, #0
 801616a:	f000 80a2 	beq.w	80162b2 <rcl_expand_topic_name+0x20e>
 801616e:	217b      	movs	r1, #123	@ 0x7b
 8016170:	f000 ff50 	bl	8017014 <strchr>
 8016174:	46d1      	mov	r9, sl
 8016176:	4605      	mov	r5, r0
 8016178:	9407      	str	r4, [sp, #28]
 801617a:	46d3      	mov	fp, sl
 801617c:	464c      	mov	r4, r9
 801617e:	2d00      	cmp	r5, #0
 8016180:	f000 80be 	beq.w	8016300 <rcl_expand_topic_name+0x25c>
 8016184:	217d      	movs	r1, #125	@ 0x7d
 8016186:	4620      	mov	r0, r4
 8016188:	f000 ff44 	bl	8017014 <strchr>
 801618c:	eba0 0905 	sub.w	r9, r0, r5
 8016190:	f109 0a01 	add.w	sl, r9, #1
 8016194:	486d      	ldr	r0, [pc, #436]	@ (801634c <rcl_expand_topic_name+0x2a8>)
 8016196:	4652      	mov	r2, sl
 8016198:	4629      	mov	r1, r5
 801619a:	f000 ff48 	bl	801702e <strncmp>
 801619e:	2800      	cmp	r0, #0
 80161a0:	d067      	beq.n	8016272 <rcl_expand_topic_name+0x1ce>
 80161a2:	486b      	ldr	r0, [pc, #428]	@ (8016350 <rcl_expand_topic_name+0x2ac>)
 80161a4:	4652      	mov	r2, sl
 80161a6:	4629      	mov	r1, r5
 80161a8:	f000 ff41 	bl	801702e <strncmp>
 80161ac:	b130      	cbz	r0, 80161bc <rcl_expand_topic_name+0x118>
 80161ae:	4869      	ldr	r0, [pc, #420]	@ (8016354 <rcl_expand_topic_name+0x2b0>)
 80161b0:	4652      	mov	r2, sl
 80161b2:	4629      	mov	r1, r5
 80161b4:	f000 ff3b 	bl	801702e <strncmp>
 80161b8:	2800      	cmp	r0, #0
 80161ba:	d137      	bne.n	801622c <rcl_expand_topic_name+0x188>
 80161bc:	46b9      	mov	r9, r7
 80161be:	ab16      	add	r3, sp, #88	@ 0x58
 80161c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80161c4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80161c8:	ab14      	add	r3, sp, #80	@ 0x50
 80161ca:	4628      	mov	r0, r5
 80161cc:	cb0c      	ldmia	r3, {r2, r3}
 80161ce:	4651      	mov	r1, sl
 80161d0:	f7fd ff96 	bl	8014100 <rcutils_strndup>
 80161d4:	4605      	mov	r5, r0
 80161d6:	2800      	cmp	r0, #0
 80161d8:	f000 809c 	beq.w	8016314 <rcl_expand_topic_name+0x270>
 80161dc:	464a      	mov	r2, r9
 80161de:	4620      	mov	r0, r4
 80161e0:	ab14      	add	r3, sp, #80	@ 0x50
 80161e2:	4629      	mov	r1, r5
 80161e4:	f7fd fe8a 	bl	8013efc <rcutils_repl_str>
 80161e8:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80161ea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80161ec:	4604      	mov	r4, r0
 80161ee:	4628      	mov	r0, r5
 80161f0:	4798      	blx	r3
 80161f2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80161f4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80161f6:	4658      	mov	r0, fp
 80161f8:	4798      	blx	r3
 80161fa:	2c00      	cmp	r4, #0
 80161fc:	d07b      	beq.n	80162f6 <rcl_expand_topic_name+0x252>
 80161fe:	217b      	movs	r1, #123	@ 0x7b
 8016200:	4620      	mov	r0, r4
 8016202:	f000 ff07 	bl	8017014 <strchr>
 8016206:	46a3      	mov	fp, r4
 8016208:	4605      	mov	r5, r0
 801620a:	e7b8      	b.n	801617e <rcl_expand_topic_name+0xda>
 801620c:	240b      	movs	r4, #11
 801620e:	4620      	mov	r0, r4
 8016210:	b00b      	add	sp, #44	@ 0x2c
 8016212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016216:	f7fa ff61 	bl	80110dc <rcl_convert_rmw_ret_to_rcl_ret>
 801621a:	4604      	mov	r4, r0
 801621c:	e7f7      	b.n	801620e <rcl_expand_topic_name+0x16a>
 801621e:	2467      	movs	r4, #103	@ 0x67
 8016220:	4620      	mov	r0, r4
 8016222:	b00b      	add	sp, #44	@ 0x2c
 8016224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016228:	24c9      	movs	r4, #201	@ 0xc9
 801622a:	e7f0      	b.n	801620e <rcl_expand_topic_name+0x16a>
 801622c:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8016230:	9806      	ldr	r0, [sp, #24]
 8016232:	1c69      	adds	r1, r5, #1
 8016234:	f7fe f87e 	bl	8014334 <rcutils_string_map_getn>
 8016238:	4681      	mov	r9, r0
 801623a:	2800      	cmp	r0, #0
 801623c:	d1bf      	bne.n	80161be <rcl_expand_topic_name+0x11a>
 801623e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016240:	aa16      	add	r2, sp, #88	@ 0x58
 8016242:	6018      	str	r0, [r3, #0]
 8016244:	ca07      	ldmia	r2, {r0, r1, r2}
 8016246:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801624a:	ab14      	add	r3, sp, #80	@ 0x50
 801624c:	cb0c      	ldmia	r3, {r2, r3}
 801624e:	4651      	mov	r1, sl
 8016250:	4628      	mov	r0, r5
 8016252:	f7fd ff55 	bl	8014100 <rcutils_strndup>
 8016256:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016258:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801625a:	4798      	blx	r3
 801625c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801625e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016260:	4658      	mov	r0, fp
 8016262:	2469      	movs	r4, #105	@ 0x69
 8016264:	4798      	blx	r3
 8016266:	e7d2      	b.n	801620e <rcl_expand_topic_name+0x16a>
 8016268:	2800      	cmp	r0, #0
 801626a:	d05b      	beq.n	8016324 <rcl_expand_topic_name+0x280>
 801626c:	46c1      	mov	r9, r8
 801626e:	46a2      	mov	sl, r4
 8016270:	e782      	b.n	8016178 <rcl_expand_topic_name+0xd4>
 8016272:	46b1      	mov	r9, r6
 8016274:	e7a3      	b.n	80161be <rcl_expand_topic_name+0x11a>
 8016276:	2800      	cmp	r0, #0
 8016278:	d1f8      	bne.n	801626c <rcl_expand_topic_name+0x1c8>
 801627a:	4638      	mov	r0, r7
 801627c:	f7e9 ffda 	bl	8000234 <strlen>
 8016280:	4a35      	ldr	r2, [pc, #212]	@ (8016358 <rcl_expand_topic_name+0x2b4>)
 8016282:	4b36      	ldr	r3, [pc, #216]	@ (801635c <rcl_expand_topic_name+0x2b8>)
 8016284:	f8cd 8010 	str.w	r8, [sp, #16]
 8016288:	2801      	cmp	r0, #1
 801628a:	bf18      	it	ne
 801628c:	4613      	movne	r3, r2
 801628e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8016292:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8016296:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016298:	9703      	str	r7, [sp, #12]
 801629a:	9200      	str	r2, [sp, #0]
 801629c:	ab14      	add	r3, sp, #80	@ 0x50
 801629e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80162a0:	f7fd fdf2 	bl	8013e88 <rcutils_format_string_limit>
 80162a4:	4682      	mov	sl, r0
 80162a6:	4653      	mov	r3, sl
 80162a8:	b32b      	cbz	r3, 80162f6 <rcl_expand_topic_name+0x252>
 80162aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80162ac:	f8c3 a000 	str.w	sl, [r3]
 80162b0:	e7ad      	b.n	801620e <rcl_expand_topic_name+0x16a>
 80162b2:	f89a 3000 	ldrb.w	r3, [sl]
 80162b6:	2b2f      	cmp	r3, #47	@ 0x2f
 80162b8:	d0f7      	beq.n	80162aa <rcl_expand_topic_name+0x206>
 80162ba:	4638      	mov	r0, r7
 80162bc:	f7e9 ffba 	bl	8000234 <strlen>
 80162c0:	4a25      	ldr	r2, [pc, #148]	@ (8016358 <rcl_expand_topic_name+0x2b4>)
 80162c2:	4b26      	ldr	r3, [pc, #152]	@ (801635c <rcl_expand_topic_name+0x2b8>)
 80162c4:	f8cd a010 	str.w	sl, [sp, #16]
 80162c8:	2801      	cmp	r0, #1
 80162ca:	bf18      	it	ne
 80162cc:	4613      	movne	r3, r2
 80162ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80162d2:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80162d6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80162d8:	9703      	str	r7, [sp, #12]
 80162da:	9200      	str	r2, [sp, #0]
 80162dc:	ab14      	add	r3, sp, #80	@ 0x50
 80162de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80162e0:	f7fd fdd2 	bl	8013e88 <rcutils_format_string_limit>
 80162e4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80162e6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80162e8:	4605      	mov	r5, r0
 80162ea:	4650      	mov	r0, sl
 80162ec:	4798      	blx	r3
 80162ee:	46aa      	mov	sl, r5
 80162f0:	e7d9      	b.n	80162a6 <rcl_expand_topic_name+0x202>
 80162f2:	24ca      	movs	r4, #202	@ 0xca
 80162f4:	e78b      	b.n	801620e <rcl_expand_topic_name+0x16a>
 80162f6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80162f8:	2300      	movs	r3, #0
 80162fa:	6013      	str	r3, [r2, #0]
 80162fc:	240a      	movs	r4, #10
 80162fe:	e786      	b.n	801620e <rcl_expand_topic_name+0x16a>
 8016300:	465b      	mov	r3, fp
 8016302:	9c07      	ldr	r4, [sp, #28]
 8016304:	46da      	mov	sl, fp
 8016306:	2b00      	cmp	r3, #0
 8016308:	d1d3      	bne.n	80162b2 <rcl_expand_topic_name+0x20e>
 801630a:	f898 3000 	ldrb.w	r3, [r8]
 801630e:	2b2f      	cmp	r3, #47	@ 0x2f
 8016310:	d0cb      	beq.n	80162aa <rcl_expand_topic_name+0x206>
 8016312:	e7b2      	b.n	801627a <rcl_expand_topic_name+0x1d6>
 8016314:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8016318:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801631a:	6015      	str	r5, [r2, #0]
 801631c:	4658      	mov	r0, fp
 801631e:	4798      	blx	r3
 8016320:	240a      	movs	r4, #10
 8016322:	e774      	b.n	801620e <rcl_expand_topic_name+0x16a>
 8016324:	ab17      	add	r3, sp, #92	@ 0x5c
 8016326:	e893 0003 	ldmia.w	r3, {r0, r1}
 801632a:	e88d 0003 	stmia.w	sp, {r0, r1}
 801632e:	ab14      	add	r3, sp, #80	@ 0x50
 8016330:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016332:	4640      	mov	r0, r8
 8016334:	f7fd fec2 	bl	80140bc <rcutils_strdup>
 8016338:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801633a:	2800      	cmp	r0, #0
 801633c:	6018      	str	r0, [r3, #0]
 801633e:	bf08      	it	eq
 8016340:	240a      	moveq	r4, #10
 8016342:	e764      	b.n	801620e <rcl_expand_topic_name+0x16a>
 8016344:	08018adc 	.word	0x08018adc
 8016348:	08018194 	.word	0x08018194
 801634c:	08018ae4 	.word	0x08018ae4
 8016350:	08018aec 	.word	0x08018aec
 8016354:	08018af4 	.word	0x08018af4
 8016358:	0801815c 	.word	0x0801815c
 801635c:	080181a4 	.word	0x080181a4

08016360 <rcl_get_default_topic_name_substitutions>:
 8016360:	2800      	cmp	r0, #0
 8016362:	bf0c      	ite	eq
 8016364:	200b      	moveq	r0, #11
 8016366:	2000      	movne	r0, #0
 8016368:	4770      	bx	lr
 801636a:	bf00      	nop

0801636c <rcl_get_zero_initialized_guard_condition>:
 801636c:	4a03      	ldr	r2, [pc, #12]	@ (801637c <rcl_get_zero_initialized_guard_condition+0x10>)
 801636e:	4603      	mov	r3, r0
 8016370:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016374:	e883 0003 	stmia.w	r3, {r0, r1}
 8016378:	4618      	mov	r0, r3
 801637a:	4770      	bx	lr
 801637c:	08018b00 	.word	0x08018b00

08016380 <rcl_guard_condition_init>:
 8016380:	b082      	sub	sp, #8
 8016382:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016384:	b087      	sub	sp, #28
 8016386:	ac0c      	add	r4, sp, #48	@ 0x30
 8016388:	e884 000c 	stmia.w	r4, {r2, r3}
 801638c:	46a6      	mov	lr, r4
 801638e:	460d      	mov	r5, r1
 8016390:	4604      	mov	r4, r0
 8016392:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016396:	f10d 0c04 	add.w	ip, sp, #4
 801639a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801639e:	f8de 3000 	ldr.w	r3, [lr]
 80163a2:	f8cc 3000 	str.w	r3, [ip]
 80163a6:	a801      	add	r0, sp, #4
 80163a8:	f7f5 f9c0 	bl	800b72c <rcutils_allocator_is_valid>
 80163ac:	b338      	cbz	r0, 80163fe <rcl_guard_condition_init+0x7e>
 80163ae:	b334      	cbz	r4, 80163fe <rcl_guard_condition_init+0x7e>
 80163b0:	6866      	ldr	r6, [r4, #4]
 80163b2:	b9ee      	cbnz	r6, 80163f0 <rcl_guard_condition_init+0x70>
 80163b4:	b31d      	cbz	r5, 80163fe <rcl_guard_condition_init+0x7e>
 80163b6:	4628      	mov	r0, r5
 80163b8:	f7fa feae 	bl	8011118 <rcl_context_is_valid>
 80163bc:	b308      	cbz	r0, 8016402 <rcl_guard_condition_init+0x82>
 80163be:	9b01      	ldr	r3, [sp, #4]
 80163c0:	9905      	ldr	r1, [sp, #20]
 80163c2:	201c      	movs	r0, #28
 80163c4:	4798      	blx	r3
 80163c6:	4607      	mov	r7, r0
 80163c8:	6060      	str	r0, [r4, #4]
 80163ca:	b310      	cbz	r0, 8016412 <rcl_guard_condition_init+0x92>
 80163cc:	6828      	ldr	r0, [r5, #0]
 80163ce:	3028      	adds	r0, #40	@ 0x28
 80163d0:	f000 f9f6 	bl	80167c0 <rmw_create_guard_condition>
 80163d4:	6038      	str	r0, [r7, #0]
 80163d6:	6860      	ldr	r0, [r4, #4]
 80163d8:	6805      	ldr	r5, [r0, #0]
 80163da:	b1a5      	cbz	r5, 8016406 <rcl_guard_condition_init+0x86>
 80163dc:	2301      	movs	r3, #1
 80163de:	ac01      	add	r4, sp, #4
 80163e0:	7103      	strb	r3, [r0, #4]
 80163e2:	f100 0708 	add.w	r7, r0, #8
 80163e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80163e8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80163ea:	6823      	ldr	r3, [r4, #0]
 80163ec:	603b      	str	r3, [r7, #0]
 80163ee:	e000      	b.n	80163f2 <rcl_guard_condition_init+0x72>
 80163f0:	2664      	movs	r6, #100	@ 0x64
 80163f2:	4630      	mov	r0, r6
 80163f4:	b007      	add	sp, #28
 80163f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80163fa:	b002      	add	sp, #8
 80163fc:	4770      	bx	lr
 80163fe:	260b      	movs	r6, #11
 8016400:	e7f7      	b.n	80163f2 <rcl_guard_condition_init+0x72>
 8016402:	2665      	movs	r6, #101	@ 0x65
 8016404:	e7f5      	b.n	80163f2 <rcl_guard_condition_init+0x72>
 8016406:	9b02      	ldr	r3, [sp, #8]
 8016408:	9905      	ldr	r1, [sp, #20]
 801640a:	4798      	blx	r3
 801640c:	2601      	movs	r6, #1
 801640e:	6065      	str	r5, [r4, #4]
 8016410:	e7ef      	b.n	80163f2 <rcl_guard_condition_init+0x72>
 8016412:	260a      	movs	r6, #10
 8016414:	e7ed      	b.n	80163f2 <rcl_guard_condition_init+0x72>
 8016416:	bf00      	nop

08016418 <rcl_guard_condition_init_from_rmw>:
 8016418:	b082      	sub	sp, #8
 801641a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801641e:	b086      	sub	sp, #24
 8016420:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8016424:	4604      	mov	r4, r0
 8016426:	f84c 3f04 	str.w	r3, [ip, #4]!
 801642a:	460e      	mov	r6, r1
 801642c:	4617      	mov	r7, r2
 801642e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016432:	f10d 0e04 	add.w	lr, sp, #4
 8016436:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801643a:	f8dc 3000 	ldr.w	r3, [ip]
 801643e:	f8ce 3000 	str.w	r3, [lr]
 8016442:	a801      	add	r0, sp, #4
 8016444:	f7f5 f972 	bl	800b72c <rcutils_allocator_is_valid>
 8016448:	b350      	cbz	r0, 80164a0 <rcl_guard_condition_init_from_rmw+0x88>
 801644a:	b34c      	cbz	r4, 80164a0 <rcl_guard_condition_init_from_rmw+0x88>
 801644c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8016450:	f1b8 0f00 	cmp.w	r8, #0
 8016454:	d11e      	bne.n	8016494 <rcl_guard_condition_init_from_rmw+0x7c>
 8016456:	b31f      	cbz	r7, 80164a0 <rcl_guard_condition_init_from_rmw+0x88>
 8016458:	4638      	mov	r0, r7
 801645a:	f7fa fe5d 	bl	8011118 <rcl_context_is_valid>
 801645e:	b328      	cbz	r0, 80164ac <rcl_guard_condition_init_from_rmw+0x94>
 8016460:	9b01      	ldr	r3, [sp, #4]
 8016462:	9905      	ldr	r1, [sp, #20]
 8016464:	201c      	movs	r0, #28
 8016466:	4798      	blx	r3
 8016468:	4605      	mov	r5, r0
 801646a:	6060      	str	r0, [r4, #4]
 801646c:	b358      	cbz	r0, 80164c6 <rcl_guard_condition_init_from_rmw+0xae>
 801646e:	b1fe      	cbz	r6, 80164b0 <rcl_guard_condition_init_from_rmw+0x98>
 8016470:	6006      	str	r6, [r0, #0]
 8016472:	f880 8004 	strb.w	r8, [r0, #4]
 8016476:	ac01      	add	r4, sp, #4
 8016478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801647a:	f105 0c08 	add.w	ip, r5, #8
 801647e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016482:	6823      	ldr	r3, [r4, #0]
 8016484:	f8cc 3000 	str.w	r3, [ip]
 8016488:	2000      	movs	r0, #0
 801648a:	b006      	add	sp, #24
 801648c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016490:	b002      	add	sp, #8
 8016492:	4770      	bx	lr
 8016494:	2064      	movs	r0, #100	@ 0x64
 8016496:	b006      	add	sp, #24
 8016498:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801649c:	b002      	add	sp, #8
 801649e:	4770      	bx	lr
 80164a0:	200b      	movs	r0, #11
 80164a2:	b006      	add	sp, #24
 80164a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80164a8:	b002      	add	sp, #8
 80164aa:	4770      	bx	lr
 80164ac:	2065      	movs	r0, #101	@ 0x65
 80164ae:	e7f2      	b.n	8016496 <rcl_guard_condition_init_from_rmw+0x7e>
 80164b0:	6838      	ldr	r0, [r7, #0]
 80164b2:	3028      	adds	r0, #40	@ 0x28
 80164b4:	f000 f984 	bl	80167c0 <rmw_create_guard_condition>
 80164b8:	6028      	str	r0, [r5, #0]
 80164ba:	6865      	ldr	r5, [r4, #4]
 80164bc:	682e      	ldr	r6, [r5, #0]
 80164be:	b126      	cbz	r6, 80164ca <rcl_guard_condition_init_from_rmw+0xb2>
 80164c0:	2301      	movs	r3, #1
 80164c2:	712b      	strb	r3, [r5, #4]
 80164c4:	e7d7      	b.n	8016476 <rcl_guard_condition_init_from_rmw+0x5e>
 80164c6:	200a      	movs	r0, #10
 80164c8:	e7e5      	b.n	8016496 <rcl_guard_condition_init_from_rmw+0x7e>
 80164ca:	4628      	mov	r0, r5
 80164cc:	9b02      	ldr	r3, [sp, #8]
 80164ce:	9905      	ldr	r1, [sp, #20]
 80164d0:	4798      	blx	r3
 80164d2:	6066      	str	r6, [r4, #4]
 80164d4:	2001      	movs	r0, #1
 80164d6:	e7de      	b.n	8016496 <rcl_guard_condition_init_from_rmw+0x7e>

080164d8 <rcl_guard_condition_fini>:
 80164d8:	b570      	push	{r4, r5, r6, lr}
 80164da:	b082      	sub	sp, #8
 80164dc:	b1f0      	cbz	r0, 801651c <rcl_guard_condition_fini+0x44>
 80164de:	6843      	ldr	r3, [r0, #4]
 80164e0:	4604      	mov	r4, r0
 80164e2:	b163      	cbz	r3, 80164fe <rcl_guard_condition_fini+0x26>
 80164e4:	6818      	ldr	r0, [r3, #0]
 80164e6:	68de      	ldr	r6, [r3, #12]
 80164e8:	6999      	ldr	r1, [r3, #24]
 80164ea:	b160      	cbz	r0, 8016506 <rcl_guard_condition_fini+0x2e>
 80164ec:	791d      	ldrb	r5, [r3, #4]
 80164ee:	b965      	cbnz	r5, 801650a <rcl_guard_condition_fini+0x32>
 80164f0:	4618      	mov	r0, r3
 80164f2:	47b0      	blx	r6
 80164f4:	2300      	movs	r3, #0
 80164f6:	4628      	mov	r0, r5
 80164f8:	6063      	str	r3, [r4, #4]
 80164fa:	b002      	add	sp, #8
 80164fc:	bd70      	pop	{r4, r5, r6, pc}
 80164fe:	461d      	mov	r5, r3
 8016500:	4628      	mov	r0, r5
 8016502:	b002      	add	sp, #8
 8016504:	bd70      	pop	{r4, r5, r6, pc}
 8016506:	4605      	mov	r5, r0
 8016508:	e7f2      	b.n	80164f0 <rcl_guard_condition_fini+0x18>
 801650a:	9101      	str	r1, [sp, #4]
 801650c:	f000 f96c 	bl	80167e8 <rmw_destroy_guard_condition>
 8016510:	1e05      	subs	r5, r0, #0
 8016512:	6863      	ldr	r3, [r4, #4]
 8016514:	9901      	ldr	r1, [sp, #4]
 8016516:	bf18      	it	ne
 8016518:	2501      	movne	r5, #1
 801651a:	e7e9      	b.n	80164f0 <rcl_guard_condition_fini+0x18>
 801651c:	250b      	movs	r5, #11
 801651e:	4628      	mov	r0, r5
 8016520:	b002      	add	sp, #8
 8016522:	bd70      	pop	{r4, r5, r6, pc}

08016524 <rcl_guard_condition_get_default_options>:
 8016524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016526:	b087      	sub	sp, #28
 8016528:	4606      	mov	r6, r0
 801652a:	4668      	mov	r0, sp
 801652c:	f7f5 f8f0 	bl	800b710 <rcutils_get_default_allocator>
 8016530:	4b09      	ldr	r3, [pc, #36]	@ (8016558 <rcl_guard_condition_get_default_options+0x34>)
 8016532:	46ee      	mov	lr, sp
 8016534:	469c      	mov	ip, r3
 8016536:	461d      	mov	r5, r3
 8016538:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801653c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016542:	4634      	mov	r4, r6
 8016544:	f8de 7000 	ldr.w	r7, [lr]
 8016548:	f8cc 7000 	str.w	r7, [ip]
 801654c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801654e:	4630      	mov	r0, r6
 8016550:	6027      	str	r7, [r4, #0]
 8016552:	b007      	add	sp, #28
 8016554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016556:	bf00      	nop
 8016558:	2000ac74 	.word	0x2000ac74

0801655c <rcl_trigger_guard_condition>:
 801655c:	b148      	cbz	r0, 8016572 <rcl_trigger_guard_condition+0x16>
 801655e:	b508      	push	{r3, lr}
 8016560:	6843      	ldr	r3, [r0, #4]
 8016562:	b143      	cbz	r3, 8016576 <rcl_trigger_guard_condition+0x1a>
 8016564:	6818      	ldr	r0, [r3, #0]
 8016566:	f000 f953 	bl	8016810 <rmw_trigger_guard_condition>
 801656a:	3800      	subs	r0, #0
 801656c:	bf18      	it	ne
 801656e:	2001      	movne	r0, #1
 8016570:	bd08      	pop	{r3, pc}
 8016572:	200b      	movs	r0, #11
 8016574:	4770      	bx	lr
 8016576:	200b      	movs	r0, #11
 8016578:	bd08      	pop	{r3, pc}
 801657a:	bf00      	nop

0801657c <rcl_guard_condition_get_rmw_handle>:
 801657c:	b110      	cbz	r0, 8016584 <rcl_guard_condition_get_rmw_handle+0x8>
 801657e:	6840      	ldr	r0, [r0, #4]
 8016580:	b100      	cbz	r0, 8016584 <rcl_guard_condition_get_rmw_handle+0x8>
 8016582:	6800      	ldr	r0, [r0, #0]
 8016584:	4770      	bx	lr
 8016586:	bf00      	nop

08016588 <rcl_publisher_is_valid>:
 8016588:	b1a0      	cbz	r0, 80165b4 <rcl_publisher_is_valid+0x2c>
 801658a:	6803      	ldr	r3, [r0, #0]
 801658c:	b510      	push	{r4, lr}
 801658e:	4604      	mov	r4, r0
 8016590:	b173      	cbz	r3, 80165b0 <rcl_publisher_is_valid+0x28>
 8016592:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8016596:	b15a      	cbz	r2, 80165b0 <rcl_publisher_is_valid+0x28>
 8016598:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 801659c:	f7fa fdbc 	bl	8011118 <rcl_context_is_valid>
 80165a0:	b130      	cbz	r0, 80165b0 <rcl_publisher_is_valid+0x28>
 80165a2:	6823      	ldr	r3, [r4, #0]
 80165a4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 80165a8:	3800      	subs	r0, #0
 80165aa:	bf18      	it	ne
 80165ac:	2001      	movne	r0, #1
 80165ae:	bd10      	pop	{r4, pc}
 80165b0:	2000      	movs	r0, #0
 80165b2:	bd10      	pop	{r4, pc}
 80165b4:	2000      	movs	r0, #0
 80165b6:	4770      	bx	lr

080165b8 <rcl_publisher_is_valid_except_context>:
 80165b8:	b130      	cbz	r0, 80165c8 <rcl_publisher_is_valid_except_context+0x10>
 80165ba:	6800      	ldr	r0, [r0, #0]
 80165bc:	b120      	cbz	r0, 80165c8 <rcl_publisher_is_valid_except_context+0x10>
 80165be:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 80165c2:	3800      	subs	r0, #0
 80165c4:	bf18      	it	ne
 80165c6:	2001      	movne	r0, #1
 80165c8:	4770      	bx	lr
 80165ca:	bf00      	nop

080165cc <rcl_validate_topic_name>:
 80165cc:	2800      	cmp	r0, #0
 80165ce:	d07a      	beq.n	80166c6 <rcl_validate_topic_name+0xfa>
 80165d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165d4:	460e      	mov	r6, r1
 80165d6:	2900      	cmp	r1, #0
 80165d8:	d07c      	beq.n	80166d4 <rcl_validate_topic_name+0x108>
 80165da:	4617      	mov	r7, r2
 80165dc:	4605      	mov	r5, r0
 80165de:	f7e9 fe29 	bl	8000234 <strlen>
 80165e2:	b1b0      	cbz	r0, 8016612 <rcl_validate_topic_name+0x46>
 80165e4:	f895 9000 	ldrb.w	r9, [r5]
 80165e8:	f8df c180 	ldr.w	ip, [pc, #384]	@ 801676c <rcl_validate_topic_name+0x1a0>
 80165ec:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80165f0:	f013 0304 	ands.w	r3, r3, #4
 80165f4:	d169      	bne.n	80166ca <rcl_validate_topic_name+0xfe>
 80165f6:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80165fa:	f815 2008 	ldrb.w	r2, [r5, r8]
 80165fe:	2a2f      	cmp	r2, #47	@ 0x2f
 8016600:	d10e      	bne.n	8016620 <rcl_validate_topic_name+0x54>
 8016602:	2202      	movs	r2, #2
 8016604:	6032      	str	r2, [r6, #0]
 8016606:	b36f      	cbz	r7, 8016664 <rcl_validate_topic_name+0x98>
 8016608:	f8c7 8000 	str.w	r8, [r7]
 801660c:	4618      	mov	r0, r3
 801660e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016612:	2301      	movs	r3, #1
 8016614:	6033      	str	r3, [r6, #0]
 8016616:	b32f      	cbz	r7, 8016664 <rcl_validate_topic_name+0x98>
 8016618:	2000      	movs	r0, #0
 801661a:	6038      	str	r0, [r7, #0]
 801661c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016620:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8016624:	461c      	mov	r4, r3
 8016626:	4619      	mov	r1, r3
 8016628:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801662c:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8016630:	f1be 0f09 	cmp.w	lr, #9
 8016634:	d919      	bls.n	801666a <rcl_validate_topic_name+0x9e>
 8016636:	f022 0e20 	bic.w	lr, r2, #32
 801663a:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 801663e:	f1be 0f19 	cmp.w	lr, #25
 8016642:	d912      	bls.n	801666a <rcl_validate_topic_name+0x9e>
 8016644:	2a5f      	cmp	r2, #95	@ 0x5f
 8016646:	d019      	beq.n	801667c <rcl_validate_topic_name+0xb0>
 8016648:	2a2f      	cmp	r2, #47	@ 0x2f
 801664a:	d051      	beq.n	80166f0 <rcl_validate_topic_name+0x124>
 801664c:	2a7e      	cmp	r2, #126	@ 0x7e
 801664e:	d048      	beq.n	80166e2 <rcl_validate_topic_name+0x116>
 8016650:	2a7b      	cmp	r2, #123	@ 0x7b
 8016652:	d054      	beq.n	80166fe <rcl_validate_topic_name+0x132>
 8016654:	2a7d      	cmp	r2, #125	@ 0x7d
 8016656:	d161      	bne.n	801671c <rcl_validate_topic_name+0x150>
 8016658:	2c00      	cmp	r4, #0
 801665a:	d155      	bne.n	8016708 <rcl_validate_topic_name+0x13c>
 801665c:	2305      	movs	r3, #5
 801665e:	6033      	str	r3, [r6, #0]
 8016660:	b107      	cbz	r7, 8016664 <rcl_validate_topic_name+0x98>
 8016662:	6039      	str	r1, [r7, #0]
 8016664:	2000      	movs	r0, #0
 8016666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801666a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801666e:	0752      	lsls	r2, r2, #29
 8016670:	d504      	bpl.n	801667c <rcl_validate_topic_name+0xb0>
 8016672:	b11c      	cbz	r4, 801667c <rcl_validate_topic_name+0xb0>
 8016674:	b111      	cbz	r1, 801667c <rcl_validate_topic_name+0xb0>
 8016676:	1e4a      	subs	r2, r1, #1
 8016678:	429a      	cmp	r2, r3
 801667a:	d02d      	beq.n	80166d8 <rcl_validate_topic_name+0x10c>
 801667c:	3101      	adds	r1, #1
 801667e:	4288      	cmp	r0, r1
 8016680:	d1d2      	bne.n	8016628 <rcl_validate_topic_name+0x5c>
 8016682:	2c00      	cmp	r4, #0
 8016684:	d145      	bne.n	8016712 <rcl_validate_topic_name+0x146>
 8016686:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801668a:	d04f      	beq.n	801672c <rcl_validate_topic_name+0x160>
 801668c:	4620      	mov	r0, r4
 801668e:	2301      	movs	r3, #1
 8016690:	e006      	b.n	80166a0 <rcl_validate_topic_name+0xd4>
 8016692:	428b      	cmp	r3, r1
 8016694:	f105 0501 	add.w	r5, r5, #1
 8016698:	f103 0201 	add.w	r2, r3, #1
 801669c:	d236      	bcs.n	801670c <rcl_validate_topic_name+0x140>
 801669e:	4613      	mov	r3, r2
 80166a0:	4580      	cmp	r8, r0
 80166a2:	f100 0001 	add.w	r0, r0, #1
 80166a6:	d0f4      	beq.n	8016692 <rcl_validate_topic_name+0xc6>
 80166a8:	782a      	ldrb	r2, [r5, #0]
 80166aa:	2a2f      	cmp	r2, #47	@ 0x2f
 80166ac:	d1f1      	bne.n	8016692 <rcl_validate_topic_name+0xc6>
 80166ae:	786a      	ldrb	r2, [r5, #1]
 80166b0:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80166b4:	0754      	lsls	r4, r2, #29
 80166b6:	d5ec      	bpl.n	8016692 <rcl_validate_topic_name+0xc6>
 80166b8:	2204      	movs	r2, #4
 80166ba:	6032      	str	r2, [r6, #0]
 80166bc:	2f00      	cmp	r7, #0
 80166be:	d0d1      	beq.n	8016664 <rcl_validate_topic_name+0x98>
 80166c0:	603b      	str	r3, [r7, #0]
 80166c2:	2000      	movs	r0, #0
 80166c4:	e7aa      	b.n	801661c <rcl_validate_topic_name+0x50>
 80166c6:	200b      	movs	r0, #11
 80166c8:	4770      	bx	lr
 80166ca:	2304      	movs	r3, #4
 80166cc:	6033      	str	r3, [r6, #0]
 80166ce:	2f00      	cmp	r7, #0
 80166d0:	d1a2      	bne.n	8016618 <rcl_validate_topic_name+0x4c>
 80166d2:	e7c7      	b.n	8016664 <rcl_validate_topic_name+0x98>
 80166d4:	200b      	movs	r0, #11
 80166d6:	e7a1      	b.n	801661c <rcl_validate_topic_name+0x50>
 80166d8:	2309      	movs	r3, #9
 80166da:	6033      	str	r3, [r6, #0]
 80166dc:	2f00      	cmp	r7, #0
 80166de:	d1c0      	bne.n	8016662 <rcl_validate_topic_name+0x96>
 80166e0:	e7c0      	b.n	8016664 <rcl_validate_topic_name+0x98>
 80166e2:	2900      	cmp	r1, #0
 80166e4:	d0ca      	beq.n	801667c <rcl_validate_topic_name+0xb0>
 80166e6:	2306      	movs	r3, #6
 80166e8:	6033      	str	r3, [r6, #0]
 80166ea:	2f00      	cmp	r7, #0
 80166ec:	d1b9      	bne.n	8016662 <rcl_validate_topic_name+0x96>
 80166ee:	e7b9      	b.n	8016664 <rcl_validate_topic_name+0x98>
 80166f0:	2c00      	cmp	r4, #0
 80166f2:	d0c3      	beq.n	801667c <rcl_validate_topic_name+0xb0>
 80166f4:	2308      	movs	r3, #8
 80166f6:	6033      	str	r3, [r6, #0]
 80166f8:	2f00      	cmp	r7, #0
 80166fa:	d1b2      	bne.n	8016662 <rcl_validate_topic_name+0x96>
 80166fc:	e7b2      	b.n	8016664 <rcl_validate_topic_name+0x98>
 80166fe:	2c00      	cmp	r4, #0
 8016700:	d1f8      	bne.n	80166f4 <rcl_validate_topic_name+0x128>
 8016702:	460b      	mov	r3, r1
 8016704:	2401      	movs	r4, #1
 8016706:	e7b9      	b.n	801667c <rcl_validate_topic_name+0xb0>
 8016708:	2400      	movs	r4, #0
 801670a:	e7b7      	b.n	801667c <rcl_validate_topic_name+0xb0>
 801670c:	2000      	movs	r0, #0
 801670e:	6030      	str	r0, [r6, #0]
 8016710:	e784      	b.n	801661c <rcl_validate_topic_name+0x50>
 8016712:	2205      	movs	r2, #5
 8016714:	6032      	str	r2, [r6, #0]
 8016716:	2f00      	cmp	r7, #0
 8016718:	d1d2      	bne.n	80166c0 <rcl_validate_topic_name+0xf4>
 801671a:	e7a3      	b.n	8016664 <rcl_validate_topic_name+0x98>
 801671c:	2c00      	cmp	r4, #0
 801671e:	bf14      	ite	ne
 8016720:	2308      	movne	r3, #8
 8016722:	2303      	moveq	r3, #3
 8016724:	6033      	str	r3, [r6, #0]
 8016726:	2f00      	cmp	r7, #0
 8016728:	d19b      	bne.n	8016662 <rcl_validate_topic_name+0x96>
 801672a:	e79b      	b.n	8016664 <rcl_validate_topic_name+0x98>
 801672c:	2301      	movs	r3, #1
 801672e:	e00a      	b.n	8016746 <rcl_validate_topic_name+0x17a>
 8016730:	2c01      	cmp	r4, #1
 8016732:	d013      	beq.n	801675c <rcl_validate_topic_name+0x190>
 8016734:	4299      	cmp	r1, r3
 8016736:	f104 0401 	add.w	r4, r4, #1
 801673a:	f105 0501 	add.w	r5, r5, #1
 801673e:	f103 0201 	add.w	r2, r3, #1
 8016742:	d9e3      	bls.n	801670c <rcl_validate_topic_name+0x140>
 8016744:	4613      	mov	r3, r2
 8016746:	45a0      	cmp	r8, r4
 8016748:	d0f4      	beq.n	8016734 <rcl_validate_topic_name+0x168>
 801674a:	782a      	ldrb	r2, [r5, #0]
 801674c:	2a2f      	cmp	r2, #47	@ 0x2f
 801674e:	d1ef      	bne.n	8016730 <rcl_validate_topic_name+0x164>
 8016750:	786a      	ldrb	r2, [r5, #1]
 8016752:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8016756:	0752      	lsls	r2, r2, #29
 8016758:	d5ec      	bpl.n	8016734 <rcl_validate_topic_name+0x168>
 801675a:	e7ad      	b.n	80166b8 <rcl_validate_topic_name+0xec>
 801675c:	2307      	movs	r3, #7
 801675e:	6033      	str	r3, [r6, #0]
 8016760:	2f00      	cmp	r7, #0
 8016762:	f43f af7f 	beq.w	8016664 <rcl_validate_topic_name+0x98>
 8016766:	603c      	str	r4, [r7, #0]
 8016768:	2000      	movs	r0, #0
 801676a:	e757      	b.n	801661c <rcl_validate_topic_name+0x50>
 801676c:	08018b78 	.word	0x08018b78

08016770 <rcutils_string_array_fini>:
 8016770:	b320      	cbz	r0, 80167bc <rcutils_string_array_fini+0x4c>
 8016772:	b570      	push	{r4, r5, r6, lr}
 8016774:	4604      	mov	r4, r0
 8016776:	6840      	ldr	r0, [r0, #4]
 8016778:	b1d8      	cbz	r0, 80167b2 <rcutils_string_array_fini+0x42>
 801677a:	f104 0008 	add.w	r0, r4, #8
 801677e:	f7f4 ffd5 	bl	800b72c <rcutils_allocator_is_valid>
 8016782:	b1b8      	cbz	r0, 80167b4 <rcutils_string_array_fini+0x44>
 8016784:	6823      	ldr	r3, [r4, #0]
 8016786:	b1bb      	cbz	r3, 80167b8 <rcutils_string_array_fini+0x48>
 8016788:	2500      	movs	r5, #0
 801678a:	6860      	ldr	r0, [r4, #4]
 801678c:	462e      	mov	r6, r5
 801678e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8016792:	68e3      	ldr	r3, [r4, #12]
 8016794:	69a1      	ldr	r1, [r4, #24]
 8016796:	4798      	blx	r3
 8016798:	e9d4 3000 	ldrd	r3, r0, [r4]
 801679c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 80167a0:	3501      	adds	r5, #1
 80167a2:	429d      	cmp	r5, r3
 80167a4:	d3f3      	bcc.n	801678e <rcutils_string_array_fini+0x1e>
 80167a6:	68e3      	ldr	r3, [r4, #12]
 80167a8:	69a1      	ldr	r1, [r4, #24]
 80167aa:	4798      	blx	r3
 80167ac:	2000      	movs	r0, #0
 80167ae:	e9c4 0000 	strd	r0, r0, [r4]
 80167b2:	bd70      	pop	{r4, r5, r6, pc}
 80167b4:	200b      	movs	r0, #11
 80167b6:	bd70      	pop	{r4, r5, r6, pc}
 80167b8:	6860      	ldr	r0, [r4, #4]
 80167ba:	e7f4      	b.n	80167a6 <rcutils_string_array_fini+0x36>
 80167bc:	200b      	movs	r0, #11
 80167be:	4770      	bx	lr

080167c0 <rmw_create_guard_condition>:
 80167c0:	b538      	push	{r3, r4, r5, lr}
 80167c2:	4605      	mov	r5, r0
 80167c4:	4807      	ldr	r0, [pc, #28]	@ (80167e4 <rmw_create_guard_condition+0x24>)
 80167c6:	f7fe f8c7 	bl	8014958 <get_memory>
 80167ca:	b148      	cbz	r0, 80167e0 <rmw_create_guard_condition+0x20>
 80167cc:	6884      	ldr	r4, [r0, #8]
 80167ce:	2300      	movs	r3, #0
 80167d0:	7423      	strb	r3, [r4, #16]
 80167d2:	61e5      	str	r5, [r4, #28]
 80167d4:	f7fe f928 	bl	8014a28 <rmw_get_implementation_identifier>
 80167d8:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80167dc:	f104 0014 	add.w	r0, r4, #20
 80167e0:	bd38      	pop	{r3, r4, r5, pc}
 80167e2:	bf00      	nop
 80167e4:	2000aa9c 	.word	0x2000aa9c

080167e8 <rmw_destroy_guard_condition>:
 80167e8:	b508      	push	{r3, lr}
 80167ea:	4b08      	ldr	r3, [pc, #32]	@ (801680c <rmw_destroy_guard_condition+0x24>)
 80167ec:	6819      	ldr	r1, [r3, #0]
 80167ee:	b911      	cbnz	r1, 80167f6 <rmw_destroy_guard_condition+0xe>
 80167f0:	e00a      	b.n	8016808 <rmw_destroy_guard_condition+0x20>
 80167f2:	6849      	ldr	r1, [r1, #4]
 80167f4:	b141      	cbz	r1, 8016808 <rmw_destroy_guard_condition+0x20>
 80167f6:	688b      	ldr	r3, [r1, #8]
 80167f8:	3314      	adds	r3, #20
 80167fa:	4298      	cmp	r0, r3
 80167fc:	d1f9      	bne.n	80167f2 <rmw_destroy_guard_condition+0xa>
 80167fe:	4803      	ldr	r0, [pc, #12]	@ (801680c <rmw_destroy_guard_condition+0x24>)
 8016800:	f7fe f8ba 	bl	8014978 <put_memory>
 8016804:	2000      	movs	r0, #0
 8016806:	bd08      	pop	{r3, pc}
 8016808:	2001      	movs	r0, #1
 801680a:	bd08      	pop	{r3, pc}
 801680c:	2000aa9c 	.word	0x2000aa9c

08016810 <rmw_trigger_guard_condition>:
 8016810:	b160      	cbz	r0, 801682c <rmw_trigger_guard_condition+0x1c>
 8016812:	b510      	push	{r4, lr}
 8016814:	4604      	mov	r4, r0
 8016816:	6800      	ldr	r0, [r0, #0]
 8016818:	f7f6 f910 	bl	800ca3c <is_uxrce_rmw_identifier_valid>
 801681c:	b908      	cbnz	r0, 8016822 <rmw_trigger_guard_condition+0x12>
 801681e:	2001      	movs	r0, #1
 8016820:	bd10      	pop	{r4, pc}
 8016822:	6863      	ldr	r3, [r4, #4]
 8016824:	2201      	movs	r2, #1
 8016826:	741a      	strb	r2, [r3, #16]
 8016828:	2000      	movs	r0, #0
 801682a:	bd10      	pop	{r4, pc}
 801682c:	2001      	movs	r0, #1
 801682e:	4770      	bx	lr

08016830 <calloc>:
 8016830:	4b02      	ldr	r3, [pc, #8]	@ (801683c <calloc+0xc>)
 8016832:	460a      	mov	r2, r1
 8016834:	4601      	mov	r1, r0
 8016836:	6818      	ldr	r0, [r3, #0]
 8016838:	f000 b802 	b.w	8016840 <_calloc_r>
 801683c:	200000c8 	.word	0x200000c8

08016840 <_calloc_r>:
 8016840:	b570      	push	{r4, r5, r6, lr}
 8016842:	fba1 5402 	umull	r5, r4, r1, r2
 8016846:	b93c      	cbnz	r4, 8016858 <_calloc_r+0x18>
 8016848:	4629      	mov	r1, r5
 801684a:	f000 f887 	bl	801695c <_malloc_r>
 801684e:	4606      	mov	r6, r0
 8016850:	b928      	cbnz	r0, 801685e <_calloc_r+0x1e>
 8016852:	2600      	movs	r6, #0
 8016854:	4630      	mov	r0, r6
 8016856:	bd70      	pop	{r4, r5, r6, pc}
 8016858:	220c      	movs	r2, #12
 801685a:	6002      	str	r2, [r0, #0]
 801685c:	e7f9      	b.n	8016852 <_calloc_r+0x12>
 801685e:	462a      	mov	r2, r5
 8016860:	4621      	mov	r1, r4
 8016862:	f000 fbcf 	bl	8017004 <memset>
 8016866:	e7f5      	b.n	8016854 <_calloc_r+0x14>

08016868 <getenv>:
 8016868:	b507      	push	{r0, r1, r2, lr}
 801686a:	4b04      	ldr	r3, [pc, #16]	@ (801687c <getenv+0x14>)
 801686c:	4601      	mov	r1, r0
 801686e:	aa01      	add	r2, sp, #4
 8016870:	6818      	ldr	r0, [r3, #0]
 8016872:	f000 f805 	bl	8016880 <_findenv_r>
 8016876:	b003      	add	sp, #12
 8016878:	f85d fb04 	ldr.w	pc, [sp], #4
 801687c:	200000c8 	.word	0x200000c8

08016880 <_findenv_r>:
 8016880:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016884:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80168f4 <_findenv_r+0x74>
 8016888:	4606      	mov	r6, r0
 801688a:	4689      	mov	r9, r1
 801688c:	4617      	mov	r7, r2
 801688e:	f000 fcaf 	bl	80171f0 <__env_lock>
 8016892:	f8da 4000 	ldr.w	r4, [sl]
 8016896:	b134      	cbz	r4, 80168a6 <_findenv_r+0x26>
 8016898:	464b      	mov	r3, r9
 801689a:	4698      	mov	r8, r3
 801689c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80168a0:	b13a      	cbz	r2, 80168b2 <_findenv_r+0x32>
 80168a2:	2a3d      	cmp	r2, #61	@ 0x3d
 80168a4:	d1f9      	bne.n	801689a <_findenv_r+0x1a>
 80168a6:	4630      	mov	r0, r6
 80168a8:	f000 fca8 	bl	80171fc <__env_unlock>
 80168ac:	2000      	movs	r0, #0
 80168ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168b2:	eba8 0809 	sub.w	r8, r8, r9
 80168b6:	46a3      	mov	fp, r4
 80168b8:	f854 0b04 	ldr.w	r0, [r4], #4
 80168bc:	2800      	cmp	r0, #0
 80168be:	d0f2      	beq.n	80168a6 <_findenv_r+0x26>
 80168c0:	4642      	mov	r2, r8
 80168c2:	4649      	mov	r1, r9
 80168c4:	f000 fbb3 	bl	801702e <strncmp>
 80168c8:	2800      	cmp	r0, #0
 80168ca:	d1f4      	bne.n	80168b6 <_findenv_r+0x36>
 80168cc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80168d0:	eb03 0508 	add.w	r5, r3, r8
 80168d4:	f813 3008 	ldrb.w	r3, [r3, r8]
 80168d8:	2b3d      	cmp	r3, #61	@ 0x3d
 80168da:	d1ec      	bne.n	80168b6 <_findenv_r+0x36>
 80168dc:	f8da 3000 	ldr.w	r3, [sl]
 80168e0:	ebab 0303 	sub.w	r3, fp, r3
 80168e4:	109b      	asrs	r3, r3, #2
 80168e6:	4630      	mov	r0, r6
 80168e8:	603b      	str	r3, [r7, #0]
 80168ea:	f000 fc87 	bl	80171fc <__env_unlock>
 80168ee:	1c68      	adds	r0, r5, #1
 80168f0:	e7dd      	b.n	80168ae <_findenv_r+0x2e>
 80168f2:	bf00      	nop
 80168f4:	20000008 	.word	0x20000008

080168f8 <malloc>:
 80168f8:	4b02      	ldr	r3, [pc, #8]	@ (8016904 <malloc+0xc>)
 80168fa:	4601      	mov	r1, r0
 80168fc:	6818      	ldr	r0, [r3, #0]
 80168fe:	f000 b82d 	b.w	801695c <_malloc_r>
 8016902:	bf00      	nop
 8016904:	200000c8 	.word	0x200000c8

08016908 <free>:
 8016908:	4b02      	ldr	r3, [pc, #8]	@ (8016914 <free+0xc>)
 801690a:	4601      	mov	r1, r0
 801690c:	6818      	ldr	r0, [r3, #0]
 801690e:	f000 bc7b 	b.w	8017208 <_free_r>
 8016912:	bf00      	nop
 8016914:	200000c8 	.word	0x200000c8

08016918 <sbrk_aligned>:
 8016918:	b570      	push	{r4, r5, r6, lr}
 801691a:	4e0f      	ldr	r6, [pc, #60]	@ (8016958 <sbrk_aligned+0x40>)
 801691c:	460c      	mov	r4, r1
 801691e:	6831      	ldr	r1, [r6, #0]
 8016920:	4605      	mov	r5, r0
 8016922:	b911      	cbnz	r1, 801692a <sbrk_aligned+0x12>
 8016924:	f000 fbe0 	bl	80170e8 <_sbrk_r>
 8016928:	6030      	str	r0, [r6, #0]
 801692a:	4621      	mov	r1, r4
 801692c:	4628      	mov	r0, r5
 801692e:	f000 fbdb 	bl	80170e8 <_sbrk_r>
 8016932:	1c43      	adds	r3, r0, #1
 8016934:	d103      	bne.n	801693e <sbrk_aligned+0x26>
 8016936:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801693a:	4620      	mov	r0, r4
 801693c:	bd70      	pop	{r4, r5, r6, pc}
 801693e:	1cc4      	adds	r4, r0, #3
 8016940:	f024 0403 	bic.w	r4, r4, #3
 8016944:	42a0      	cmp	r0, r4
 8016946:	d0f8      	beq.n	801693a <sbrk_aligned+0x22>
 8016948:	1a21      	subs	r1, r4, r0
 801694a:	4628      	mov	r0, r5
 801694c:	f000 fbcc 	bl	80170e8 <_sbrk_r>
 8016950:	3001      	adds	r0, #1
 8016952:	d1f2      	bne.n	801693a <sbrk_aligned+0x22>
 8016954:	e7ef      	b.n	8016936 <sbrk_aligned+0x1e>
 8016956:	bf00      	nop
 8016958:	2000ac88 	.word	0x2000ac88

0801695c <_malloc_r>:
 801695c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016960:	1ccd      	adds	r5, r1, #3
 8016962:	f025 0503 	bic.w	r5, r5, #3
 8016966:	3508      	adds	r5, #8
 8016968:	2d0c      	cmp	r5, #12
 801696a:	bf38      	it	cc
 801696c:	250c      	movcc	r5, #12
 801696e:	2d00      	cmp	r5, #0
 8016970:	4606      	mov	r6, r0
 8016972:	db01      	blt.n	8016978 <_malloc_r+0x1c>
 8016974:	42a9      	cmp	r1, r5
 8016976:	d904      	bls.n	8016982 <_malloc_r+0x26>
 8016978:	230c      	movs	r3, #12
 801697a:	6033      	str	r3, [r6, #0]
 801697c:	2000      	movs	r0, #0
 801697e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016982:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016a58 <_malloc_r+0xfc>
 8016986:	f000 f869 	bl	8016a5c <__malloc_lock>
 801698a:	f8d8 3000 	ldr.w	r3, [r8]
 801698e:	461c      	mov	r4, r3
 8016990:	bb44      	cbnz	r4, 80169e4 <_malloc_r+0x88>
 8016992:	4629      	mov	r1, r5
 8016994:	4630      	mov	r0, r6
 8016996:	f7ff ffbf 	bl	8016918 <sbrk_aligned>
 801699a:	1c43      	adds	r3, r0, #1
 801699c:	4604      	mov	r4, r0
 801699e:	d158      	bne.n	8016a52 <_malloc_r+0xf6>
 80169a0:	f8d8 4000 	ldr.w	r4, [r8]
 80169a4:	4627      	mov	r7, r4
 80169a6:	2f00      	cmp	r7, #0
 80169a8:	d143      	bne.n	8016a32 <_malloc_r+0xd6>
 80169aa:	2c00      	cmp	r4, #0
 80169ac:	d04b      	beq.n	8016a46 <_malloc_r+0xea>
 80169ae:	6823      	ldr	r3, [r4, #0]
 80169b0:	4639      	mov	r1, r7
 80169b2:	4630      	mov	r0, r6
 80169b4:	eb04 0903 	add.w	r9, r4, r3
 80169b8:	f000 fb96 	bl	80170e8 <_sbrk_r>
 80169bc:	4581      	cmp	r9, r0
 80169be:	d142      	bne.n	8016a46 <_malloc_r+0xea>
 80169c0:	6821      	ldr	r1, [r4, #0]
 80169c2:	1a6d      	subs	r5, r5, r1
 80169c4:	4629      	mov	r1, r5
 80169c6:	4630      	mov	r0, r6
 80169c8:	f7ff ffa6 	bl	8016918 <sbrk_aligned>
 80169cc:	3001      	adds	r0, #1
 80169ce:	d03a      	beq.n	8016a46 <_malloc_r+0xea>
 80169d0:	6823      	ldr	r3, [r4, #0]
 80169d2:	442b      	add	r3, r5
 80169d4:	6023      	str	r3, [r4, #0]
 80169d6:	f8d8 3000 	ldr.w	r3, [r8]
 80169da:	685a      	ldr	r2, [r3, #4]
 80169dc:	bb62      	cbnz	r2, 8016a38 <_malloc_r+0xdc>
 80169de:	f8c8 7000 	str.w	r7, [r8]
 80169e2:	e00f      	b.n	8016a04 <_malloc_r+0xa8>
 80169e4:	6822      	ldr	r2, [r4, #0]
 80169e6:	1b52      	subs	r2, r2, r5
 80169e8:	d420      	bmi.n	8016a2c <_malloc_r+0xd0>
 80169ea:	2a0b      	cmp	r2, #11
 80169ec:	d917      	bls.n	8016a1e <_malloc_r+0xc2>
 80169ee:	1961      	adds	r1, r4, r5
 80169f0:	42a3      	cmp	r3, r4
 80169f2:	6025      	str	r5, [r4, #0]
 80169f4:	bf18      	it	ne
 80169f6:	6059      	strne	r1, [r3, #4]
 80169f8:	6863      	ldr	r3, [r4, #4]
 80169fa:	bf08      	it	eq
 80169fc:	f8c8 1000 	streq.w	r1, [r8]
 8016a00:	5162      	str	r2, [r4, r5]
 8016a02:	604b      	str	r3, [r1, #4]
 8016a04:	4630      	mov	r0, r6
 8016a06:	f000 f82f 	bl	8016a68 <__malloc_unlock>
 8016a0a:	f104 000b 	add.w	r0, r4, #11
 8016a0e:	1d23      	adds	r3, r4, #4
 8016a10:	f020 0007 	bic.w	r0, r0, #7
 8016a14:	1ac2      	subs	r2, r0, r3
 8016a16:	bf1c      	itt	ne
 8016a18:	1a1b      	subne	r3, r3, r0
 8016a1a:	50a3      	strne	r3, [r4, r2]
 8016a1c:	e7af      	b.n	801697e <_malloc_r+0x22>
 8016a1e:	6862      	ldr	r2, [r4, #4]
 8016a20:	42a3      	cmp	r3, r4
 8016a22:	bf0c      	ite	eq
 8016a24:	f8c8 2000 	streq.w	r2, [r8]
 8016a28:	605a      	strne	r2, [r3, #4]
 8016a2a:	e7eb      	b.n	8016a04 <_malloc_r+0xa8>
 8016a2c:	4623      	mov	r3, r4
 8016a2e:	6864      	ldr	r4, [r4, #4]
 8016a30:	e7ae      	b.n	8016990 <_malloc_r+0x34>
 8016a32:	463c      	mov	r4, r7
 8016a34:	687f      	ldr	r7, [r7, #4]
 8016a36:	e7b6      	b.n	80169a6 <_malloc_r+0x4a>
 8016a38:	461a      	mov	r2, r3
 8016a3a:	685b      	ldr	r3, [r3, #4]
 8016a3c:	42a3      	cmp	r3, r4
 8016a3e:	d1fb      	bne.n	8016a38 <_malloc_r+0xdc>
 8016a40:	2300      	movs	r3, #0
 8016a42:	6053      	str	r3, [r2, #4]
 8016a44:	e7de      	b.n	8016a04 <_malloc_r+0xa8>
 8016a46:	230c      	movs	r3, #12
 8016a48:	6033      	str	r3, [r6, #0]
 8016a4a:	4630      	mov	r0, r6
 8016a4c:	f000 f80c 	bl	8016a68 <__malloc_unlock>
 8016a50:	e794      	b.n	801697c <_malloc_r+0x20>
 8016a52:	6005      	str	r5, [r0, #0]
 8016a54:	e7d6      	b.n	8016a04 <_malloc_r+0xa8>
 8016a56:	bf00      	nop
 8016a58:	2000ac8c 	.word	0x2000ac8c

08016a5c <__malloc_lock>:
 8016a5c:	4801      	ldr	r0, [pc, #4]	@ (8016a64 <__malloc_lock+0x8>)
 8016a5e:	f000 bb90 	b.w	8017182 <__retarget_lock_acquire_recursive>
 8016a62:	bf00      	nop
 8016a64:	2000add1 	.word	0x2000add1

08016a68 <__malloc_unlock>:
 8016a68:	4801      	ldr	r0, [pc, #4]	@ (8016a70 <__malloc_unlock+0x8>)
 8016a6a:	f000 bb8b 	b.w	8017184 <__retarget_lock_release_recursive>
 8016a6e:	bf00      	nop
 8016a70:	2000add1 	.word	0x2000add1

08016a74 <srand>:
 8016a74:	b538      	push	{r3, r4, r5, lr}
 8016a76:	4b10      	ldr	r3, [pc, #64]	@ (8016ab8 <srand+0x44>)
 8016a78:	681d      	ldr	r5, [r3, #0]
 8016a7a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016a7c:	4604      	mov	r4, r0
 8016a7e:	b9b3      	cbnz	r3, 8016aae <srand+0x3a>
 8016a80:	2018      	movs	r0, #24
 8016a82:	f7ff ff39 	bl	80168f8 <malloc>
 8016a86:	4602      	mov	r2, r0
 8016a88:	6328      	str	r0, [r5, #48]	@ 0x30
 8016a8a:	b920      	cbnz	r0, 8016a96 <srand+0x22>
 8016a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8016abc <srand+0x48>)
 8016a8e:	480c      	ldr	r0, [pc, #48]	@ (8016ac0 <srand+0x4c>)
 8016a90:	2146      	movs	r1, #70	@ 0x46
 8016a92:	f000 fb8f 	bl	80171b4 <__assert_func>
 8016a96:	490b      	ldr	r1, [pc, #44]	@ (8016ac4 <srand+0x50>)
 8016a98:	4b0b      	ldr	r3, [pc, #44]	@ (8016ac8 <srand+0x54>)
 8016a9a:	e9c0 1300 	strd	r1, r3, [r0]
 8016a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8016acc <srand+0x58>)
 8016aa0:	6083      	str	r3, [r0, #8]
 8016aa2:	230b      	movs	r3, #11
 8016aa4:	8183      	strh	r3, [r0, #12]
 8016aa6:	2100      	movs	r1, #0
 8016aa8:	2001      	movs	r0, #1
 8016aaa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016aae:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016ab0:	2200      	movs	r2, #0
 8016ab2:	611c      	str	r4, [r3, #16]
 8016ab4:	615a      	str	r2, [r3, #20]
 8016ab6:	bd38      	pop	{r3, r4, r5, pc}
 8016ab8:	200000c8 	.word	0x200000c8
 8016abc:	08018b08 	.word	0x08018b08
 8016ac0:	08018b1f 	.word	0x08018b1f
 8016ac4:	abcd330e 	.word	0xabcd330e
 8016ac8:	e66d1234 	.word	0xe66d1234
 8016acc:	0005deec 	.word	0x0005deec

08016ad0 <rand>:
 8016ad0:	4b16      	ldr	r3, [pc, #88]	@ (8016b2c <rand+0x5c>)
 8016ad2:	b510      	push	{r4, lr}
 8016ad4:	681c      	ldr	r4, [r3, #0]
 8016ad6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016ad8:	b9b3      	cbnz	r3, 8016b08 <rand+0x38>
 8016ada:	2018      	movs	r0, #24
 8016adc:	f7ff ff0c 	bl	80168f8 <malloc>
 8016ae0:	4602      	mov	r2, r0
 8016ae2:	6320      	str	r0, [r4, #48]	@ 0x30
 8016ae4:	b920      	cbnz	r0, 8016af0 <rand+0x20>
 8016ae6:	4b12      	ldr	r3, [pc, #72]	@ (8016b30 <rand+0x60>)
 8016ae8:	4812      	ldr	r0, [pc, #72]	@ (8016b34 <rand+0x64>)
 8016aea:	2152      	movs	r1, #82	@ 0x52
 8016aec:	f000 fb62 	bl	80171b4 <__assert_func>
 8016af0:	4911      	ldr	r1, [pc, #68]	@ (8016b38 <rand+0x68>)
 8016af2:	4b12      	ldr	r3, [pc, #72]	@ (8016b3c <rand+0x6c>)
 8016af4:	e9c0 1300 	strd	r1, r3, [r0]
 8016af8:	4b11      	ldr	r3, [pc, #68]	@ (8016b40 <rand+0x70>)
 8016afa:	6083      	str	r3, [r0, #8]
 8016afc:	230b      	movs	r3, #11
 8016afe:	8183      	strh	r3, [r0, #12]
 8016b00:	2100      	movs	r1, #0
 8016b02:	2001      	movs	r0, #1
 8016b04:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016b08:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016b0a:	480e      	ldr	r0, [pc, #56]	@ (8016b44 <rand+0x74>)
 8016b0c:	690b      	ldr	r3, [r1, #16]
 8016b0e:	694c      	ldr	r4, [r1, #20]
 8016b10:	4a0d      	ldr	r2, [pc, #52]	@ (8016b48 <rand+0x78>)
 8016b12:	4358      	muls	r0, r3
 8016b14:	fb02 0004 	mla	r0, r2, r4, r0
 8016b18:	fba3 3202 	umull	r3, r2, r3, r2
 8016b1c:	3301      	adds	r3, #1
 8016b1e:	eb40 0002 	adc.w	r0, r0, r2
 8016b22:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016b26:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8016b2a:	bd10      	pop	{r4, pc}
 8016b2c:	200000c8 	.word	0x200000c8
 8016b30:	08018b08 	.word	0x08018b08
 8016b34:	08018b1f 	.word	0x08018b1f
 8016b38:	abcd330e 	.word	0xabcd330e
 8016b3c:	e66d1234 	.word	0xe66d1234
 8016b40:	0005deec 	.word	0x0005deec
 8016b44:	5851f42d 	.word	0x5851f42d
 8016b48:	4c957f2d 	.word	0x4c957f2d

08016b4c <realloc>:
 8016b4c:	4b02      	ldr	r3, [pc, #8]	@ (8016b58 <realloc+0xc>)
 8016b4e:	460a      	mov	r2, r1
 8016b50:	4601      	mov	r1, r0
 8016b52:	6818      	ldr	r0, [r3, #0]
 8016b54:	f000 b802 	b.w	8016b5c <_realloc_r>
 8016b58:	200000c8 	.word	0x200000c8

08016b5c <_realloc_r>:
 8016b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b60:	4680      	mov	r8, r0
 8016b62:	4615      	mov	r5, r2
 8016b64:	460c      	mov	r4, r1
 8016b66:	b921      	cbnz	r1, 8016b72 <_realloc_r+0x16>
 8016b68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b6c:	4611      	mov	r1, r2
 8016b6e:	f7ff bef5 	b.w	801695c <_malloc_r>
 8016b72:	b92a      	cbnz	r2, 8016b80 <_realloc_r+0x24>
 8016b74:	f000 fb48 	bl	8017208 <_free_r>
 8016b78:	2400      	movs	r4, #0
 8016b7a:	4620      	mov	r0, r4
 8016b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b80:	f000 fb8c 	bl	801729c <_malloc_usable_size_r>
 8016b84:	4285      	cmp	r5, r0
 8016b86:	4606      	mov	r6, r0
 8016b88:	d802      	bhi.n	8016b90 <_realloc_r+0x34>
 8016b8a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8016b8e:	d8f4      	bhi.n	8016b7a <_realloc_r+0x1e>
 8016b90:	4629      	mov	r1, r5
 8016b92:	4640      	mov	r0, r8
 8016b94:	f7ff fee2 	bl	801695c <_malloc_r>
 8016b98:	4607      	mov	r7, r0
 8016b9a:	2800      	cmp	r0, #0
 8016b9c:	d0ec      	beq.n	8016b78 <_realloc_r+0x1c>
 8016b9e:	42b5      	cmp	r5, r6
 8016ba0:	462a      	mov	r2, r5
 8016ba2:	4621      	mov	r1, r4
 8016ba4:	bf28      	it	cs
 8016ba6:	4632      	movcs	r2, r6
 8016ba8:	f000 faf5 	bl	8017196 <memcpy>
 8016bac:	4621      	mov	r1, r4
 8016bae:	4640      	mov	r0, r8
 8016bb0:	f000 fb2a 	bl	8017208 <_free_r>
 8016bb4:	463c      	mov	r4, r7
 8016bb6:	e7e0      	b.n	8016b7a <_realloc_r+0x1e>

08016bb8 <_strtoul_l.constprop.0>:
 8016bb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016bbc:	4e34      	ldr	r6, [pc, #208]	@ (8016c90 <_strtoul_l.constprop.0+0xd8>)
 8016bbe:	4686      	mov	lr, r0
 8016bc0:	460d      	mov	r5, r1
 8016bc2:	4628      	mov	r0, r5
 8016bc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016bc8:	5d37      	ldrb	r7, [r6, r4]
 8016bca:	f017 0708 	ands.w	r7, r7, #8
 8016bce:	d1f8      	bne.n	8016bc2 <_strtoul_l.constprop.0+0xa>
 8016bd0:	2c2d      	cmp	r4, #45	@ 0x2d
 8016bd2:	d12f      	bne.n	8016c34 <_strtoul_l.constprop.0+0x7c>
 8016bd4:	782c      	ldrb	r4, [r5, #0]
 8016bd6:	2701      	movs	r7, #1
 8016bd8:	1c85      	adds	r5, r0, #2
 8016bda:	f033 0010 	bics.w	r0, r3, #16
 8016bde:	d109      	bne.n	8016bf4 <_strtoul_l.constprop.0+0x3c>
 8016be0:	2c30      	cmp	r4, #48	@ 0x30
 8016be2:	d12c      	bne.n	8016c3e <_strtoul_l.constprop.0+0x86>
 8016be4:	7828      	ldrb	r0, [r5, #0]
 8016be6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8016bea:	2858      	cmp	r0, #88	@ 0x58
 8016bec:	d127      	bne.n	8016c3e <_strtoul_l.constprop.0+0x86>
 8016bee:	786c      	ldrb	r4, [r5, #1]
 8016bf0:	2310      	movs	r3, #16
 8016bf2:	3502      	adds	r5, #2
 8016bf4:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8016bf8:	2600      	movs	r6, #0
 8016bfa:	fbb8 f8f3 	udiv	r8, r8, r3
 8016bfe:	fb03 f908 	mul.w	r9, r3, r8
 8016c02:	ea6f 0909 	mvn.w	r9, r9
 8016c06:	4630      	mov	r0, r6
 8016c08:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8016c0c:	f1bc 0f09 	cmp.w	ip, #9
 8016c10:	d81c      	bhi.n	8016c4c <_strtoul_l.constprop.0+0x94>
 8016c12:	4664      	mov	r4, ip
 8016c14:	42a3      	cmp	r3, r4
 8016c16:	dd2a      	ble.n	8016c6e <_strtoul_l.constprop.0+0xb6>
 8016c18:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8016c1c:	d007      	beq.n	8016c2e <_strtoul_l.constprop.0+0x76>
 8016c1e:	4580      	cmp	r8, r0
 8016c20:	d322      	bcc.n	8016c68 <_strtoul_l.constprop.0+0xb0>
 8016c22:	d101      	bne.n	8016c28 <_strtoul_l.constprop.0+0x70>
 8016c24:	45a1      	cmp	r9, r4
 8016c26:	db1f      	blt.n	8016c68 <_strtoul_l.constprop.0+0xb0>
 8016c28:	fb00 4003 	mla	r0, r0, r3, r4
 8016c2c:	2601      	movs	r6, #1
 8016c2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016c32:	e7e9      	b.n	8016c08 <_strtoul_l.constprop.0+0x50>
 8016c34:	2c2b      	cmp	r4, #43	@ 0x2b
 8016c36:	bf04      	itt	eq
 8016c38:	782c      	ldrbeq	r4, [r5, #0]
 8016c3a:	1c85      	addeq	r5, r0, #2
 8016c3c:	e7cd      	b.n	8016bda <_strtoul_l.constprop.0+0x22>
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d1d8      	bne.n	8016bf4 <_strtoul_l.constprop.0+0x3c>
 8016c42:	2c30      	cmp	r4, #48	@ 0x30
 8016c44:	bf0c      	ite	eq
 8016c46:	2308      	moveq	r3, #8
 8016c48:	230a      	movne	r3, #10
 8016c4a:	e7d3      	b.n	8016bf4 <_strtoul_l.constprop.0+0x3c>
 8016c4c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8016c50:	f1bc 0f19 	cmp.w	ip, #25
 8016c54:	d801      	bhi.n	8016c5a <_strtoul_l.constprop.0+0xa2>
 8016c56:	3c37      	subs	r4, #55	@ 0x37
 8016c58:	e7dc      	b.n	8016c14 <_strtoul_l.constprop.0+0x5c>
 8016c5a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8016c5e:	f1bc 0f19 	cmp.w	ip, #25
 8016c62:	d804      	bhi.n	8016c6e <_strtoul_l.constprop.0+0xb6>
 8016c64:	3c57      	subs	r4, #87	@ 0x57
 8016c66:	e7d5      	b.n	8016c14 <_strtoul_l.constprop.0+0x5c>
 8016c68:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8016c6c:	e7df      	b.n	8016c2e <_strtoul_l.constprop.0+0x76>
 8016c6e:	1c73      	adds	r3, r6, #1
 8016c70:	d106      	bne.n	8016c80 <_strtoul_l.constprop.0+0xc8>
 8016c72:	2322      	movs	r3, #34	@ 0x22
 8016c74:	f8ce 3000 	str.w	r3, [lr]
 8016c78:	4630      	mov	r0, r6
 8016c7a:	b932      	cbnz	r2, 8016c8a <_strtoul_l.constprop.0+0xd2>
 8016c7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c80:	b107      	cbz	r7, 8016c84 <_strtoul_l.constprop.0+0xcc>
 8016c82:	4240      	negs	r0, r0
 8016c84:	2a00      	cmp	r2, #0
 8016c86:	d0f9      	beq.n	8016c7c <_strtoul_l.constprop.0+0xc4>
 8016c88:	b106      	cbz	r6, 8016c8c <_strtoul_l.constprop.0+0xd4>
 8016c8a:	1e69      	subs	r1, r5, #1
 8016c8c:	6011      	str	r1, [r2, #0]
 8016c8e:	e7f5      	b.n	8016c7c <_strtoul_l.constprop.0+0xc4>
 8016c90:	08018b78 	.word	0x08018b78

08016c94 <strtoul>:
 8016c94:	4613      	mov	r3, r2
 8016c96:	460a      	mov	r2, r1
 8016c98:	4601      	mov	r1, r0
 8016c9a:	4802      	ldr	r0, [pc, #8]	@ (8016ca4 <strtoul+0x10>)
 8016c9c:	6800      	ldr	r0, [r0, #0]
 8016c9e:	f7ff bf8b 	b.w	8016bb8 <_strtoul_l.constprop.0>
 8016ca2:	bf00      	nop
 8016ca4:	200000c8 	.word	0x200000c8

08016ca8 <std>:
 8016ca8:	2300      	movs	r3, #0
 8016caa:	b510      	push	{r4, lr}
 8016cac:	4604      	mov	r4, r0
 8016cae:	e9c0 3300 	strd	r3, r3, [r0]
 8016cb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016cb6:	6083      	str	r3, [r0, #8]
 8016cb8:	8181      	strh	r1, [r0, #12]
 8016cba:	6643      	str	r3, [r0, #100]	@ 0x64
 8016cbc:	81c2      	strh	r2, [r0, #14]
 8016cbe:	6183      	str	r3, [r0, #24]
 8016cc0:	4619      	mov	r1, r3
 8016cc2:	2208      	movs	r2, #8
 8016cc4:	305c      	adds	r0, #92	@ 0x5c
 8016cc6:	f000 f99d 	bl	8017004 <memset>
 8016cca:	4b0d      	ldr	r3, [pc, #52]	@ (8016d00 <std+0x58>)
 8016ccc:	6263      	str	r3, [r4, #36]	@ 0x24
 8016cce:	4b0d      	ldr	r3, [pc, #52]	@ (8016d04 <std+0x5c>)
 8016cd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8016d08 <std+0x60>)
 8016cd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8016d0c <std+0x64>)
 8016cd8:	6323      	str	r3, [r4, #48]	@ 0x30
 8016cda:	4b0d      	ldr	r3, [pc, #52]	@ (8016d10 <std+0x68>)
 8016cdc:	6224      	str	r4, [r4, #32]
 8016cde:	429c      	cmp	r4, r3
 8016ce0:	d006      	beq.n	8016cf0 <std+0x48>
 8016ce2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016ce6:	4294      	cmp	r4, r2
 8016ce8:	d002      	beq.n	8016cf0 <std+0x48>
 8016cea:	33d0      	adds	r3, #208	@ 0xd0
 8016cec:	429c      	cmp	r4, r3
 8016cee:	d105      	bne.n	8016cfc <std+0x54>
 8016cf0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016cf8:	f000 ba42 	b.w	8017180 <__retarget_lock_init_recursive>
 8016cfc:	bd10      	pop	{r4, pc}
 8016cfe:	bf00      	nop
 8016d00:	08016eb9 	.word	0x08016eb9
 8016d04:	08016edb 	.word	0x08016edb
 8016d08:	08016f13 	.word	0x08016f13
 8016d0c:	08016f37 	.word	0x08016f37
 8016d10:	2000ac90 	.word	0x2000ac90

08016d14 <stdio_exit_handler>:
 8016d14:	4a02      	ldr	r2, [pc, #8]	@ (8016d20 <stdio_exit_handler+0xc>)
 8016d16:	4903      	ldr	r1, [pc, #12]	@ (8016d24 <stdio_exit_handler+0x10>)
 8016d18:	4803      	ldr	r0, [pc, #12]	@ (8016d28 <stdio_exit_handler+0x14>)
 8016d1a:	f000 b869 	b.w	8016df0 <_fwalk_sglue>
 8016d1e:	bf00      	nop
 8016d20:	200000bc 	.word	0x200000bc
 8016d24:	08017c05 	.word	0x08017c05
 8016d28:	200000cc 	.word	0x200000cc

08016d2c <cleanup_stdio>:
 8016d2c:	6841      	ldr	r1, [r0, #4]
 8016d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8016d60 <cleanup_stdio+0x34>)
 8016d30:	4299      	cmp	r1, r3
 8016d32:	b510      	push	{r4, lr}
 8016d34:	4604      	mov	r4, r0
 8016d36:	d001      	beq.n	8016d3c <cleanup_stdio+0x10>
 8016d38:	f000 ff64 	bl	8017c04 <_fflush_r>
 8016d3c:	68a1      	ldr	r1, [r4, #8]
 8016d3e:	4b09      	ldr	r3, [pc, #36]	@ (8016d64 <cleanup_stdio+0x38>)
 8016d40:	4299      	cmp	r1, r3
 8016d42:	d002      	beq.n	8016d4a <cleanup_stdio+0x1e>
 8016d44:	4620      	mov	r0, r4
 8016d46:	f000 ff5d 	bl	8017c04 <_fflush_r>
 8016d4a:	68e1      	ldr	r1, [r4, #12]
 8016d4c:	4b06      	ldr	r3, [pc, #24]	@ (8016d68 <cleanup_stdio+0x3c>)
 8016d4e:	4299      	cmp	r1, r3
 8016d50:	d004      	beq.n	8016d5c <cleanup_stdio+0x30>
 8016d52:	4620      	mov	r0, r4
 8016d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d58:	f000 bf54 	b.w	8017c04 <_fflush_r>
 8016d5c:	bd10      	pop	{r4, pc}
 8016d5e:	bf00      	nop
 8016d60:	2000ac90 	.word	0x2000ac90
 8016d64:	2000acf8 	.word	0x2000acf8
 8016d68:	2000ad60 	.word	0x2000ad60

08016d6c <global_stdio_init.part.0>:
 8016d6c:	b510      	push	{r4, lr}
 8016d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8016d9c <global_stdio_init.part.0+0x30>)
 8016d70:	4c0b      	ldr	r4, [pc, #44]	@ (8016da0 <global_stdio_init.part.0+0x34>)
 8016d72:	4a0c      	ldr	r2, [pc, #48]	@ (8016da4 <global_stdio_init.part.0+0x38>)
 8016d74:	601a      	str	r2, [r3, #0]
 8016d76:	4620      	mov	r0, r4
 8016d78:	2200      	movs	r2, #0
 8016d7a:	2104      	movs	r1, #4
 8016d7c:	f7ff ff94 	bl	8016ca8 <std>
 8016d80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016d84:	2201      	movs	r2, #1
 8016d86:	2109      	movs	r1, #9
 8016d88:	f7ff ff8e 	bl	8016ca8 <std>
 8016d8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016d90:	2202      	movs	r2, #2
 8016d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d96:	2112      	movs	r1, #18
 8016d98:	f7ff bf86 	b.w	8016ca8 <std>
 8016d9c:	2000adc8 	.word	0x2000adc8
 8016da0:	2000ac90 	.word	0x2000ac90
 8016da4:	08016d15 	.word	0x08016d15

08016da8 <__sfp_lock_acquire>:
 8016da8:	4801      	ldr	r0, [pc, #4]	@ (8016db0 <__sfp_lock_acquire+0x8>)
 8016daa:	f000 b9ea 	b.w	8017182 <__retarget_lock_acquire_recursive>
 8016dae:	bf00      	nop
 8016db0:	2000add2 	.word	0x2000add2

08016db4 <__sfp_lock_release>:
 8016db4:	4801      	ldr	r0, [pc, #4]	@ (8016dbc <__sfp_lock_release+0x8>)
 8016db6:	f000 b9e5 	b.w	8017184 <__retarget_lock_release_recursive>
 8016dba:	bf00      	nop
 8016dbc:	2000add2 	.word	0x2000add2

08016dc0 <__sinit>:
 8016dc0:	b510      	push	{r4, lr}
 8016dc2:	4604      	mov	r4, r0
 8016dc4:	f7ff fff0 	bl	8016da8 <__sfp_lock_acquire>
 8016dc8:	6a23      	ldr	r3, [r4, #32]
 8016dca:	b11b      	cbz	r3, 8016dd4 <__sinit+0x14>
 8016dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016dd0:	f7ff bff0 	b.w	8016db4 <__sfp_lock_release>
 8016dd4:	4b04      	ldr	r3, [pc, #16]	@ (8016de8 <__sinit+0x28>)
 8016dd6:	6223      	str	r3, [r4, #32]
 8016dd8:	4b04      	ldr	r3, [pc, #16]	@ (8016dec <__sinit+0x2c>)
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d1f5      	bne.n	8016dcc <__sinit+0xc>
 8016de0:	f7ff ffc4 	bl	8016d6c <global_stdio_init.part.0>
 8016de4:	e7f2      	b.n	8016dcc <__sinit+0xc>
 8016de6:	bf00      	nop
 8016de8:	08016d2d 	.word	0x08016d2d
 8016dec:	2000adc8 	.word	0x2000adc8

08016df0 <_fwalk_sglue>:
 8016df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016df4:	4607      	mov	r7, r0
 8016df6:	4688      	mov	r8, r1
 8016df8:	4614      	mov	r4, r2
 8016dfa:	2600      	movs	r6, #0
 8016dfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016e00:	f1b9 0901 	subs.w	r9, r9, #1
 8016e04:	d505      	bpl.n	8016e12 <_fwalk_sglue+0x22>
 8016e06:	6824      	ldr	r4, [r4, #0]
 8016e08:	2c00      	cmp	r4, #0
 8016e0a:	d1f7      	bne.n	8016dfc <_fwalk_sglue+0xc>
 8016e0c:	4630      	mov	r0, r6
 8016e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016e12:	89ab      	ldrh	r3, [r5, #12]
 8016e14:	2b01      	cmp	r3, #1
 8016e16:	d907      	bls.n	8016e28 <_fwalk_sglue+0x38>
 8016e18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016e1c:	3301      	adds	r3, #1
 8016e1e:	d003      	beq.n	8016e28 <_fwalk_sglue+0x38>
 8016e20:	4629      	mov	r1, r5
 8016e22:	4638      	mov	r0, r7
 8016e24:	47c0      	blx	r8
 8016e26:	4306      	orrs	r6, r0
 8016e28:	3568      	adds	r5, #104	@ 0x68
 8016e2a:	e7e9      	b.n	8016e00 <_fwalk_sglue+0x10>

08016e2c <iprintf>:
 8016e2c:	b40f      	push	{r0, r1, r2, r3}
 8016e2e:	b507      	push	{r0, r1, r2, lr}
 8016e30:	4906      	ldr	r1, [pc, #24]	@ (8016e4c <iprintf+0x20>)
 8016e32:	ab04      	add	r3, sp, #16
 8016e34:	6808      	ldr	r0, [r1, #0]
 8016e36:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e3a:	6881      	ldr	r1, [r0, #8]
 8016e3c:	9301      	str	r3, [sp, #4]
 8016e3e:	f000 fbb7 	bl	80175b0 <_vfiprintf_r>
 8016e42:	b003      	add	sp, #12
 8016e44:	f85d eb04 	ldr.w	lr, [sp], #4
 8016e48:	b004      	add	sp, #16
 8016e4a:	4770      	bx	lr
 8016e4c:	200000c8 	.word	0x200000c8

08016e50 <sniprintf>:
 8016e50:	b40c      	push	{r2, r3}
 8016e52:	b530      	push	{r4, r5, lr}
 8016e54:	4b17      	ldr	r3, [pc, #92]	@ (8016eb4 <sniprintf+0x64>)
 8016e56:	1e0c      	subs	r4, r1, #0
 8016e58:	681d      	ldr	r5, [r3, #0]
 8016e5a:	b09d      	sub	sp, #116	@ 0x74
 8016e5c:	da08      	bge.n	8016e70 <sniprintf+0x20>
 8016e5e:	238b      	movs	r3, #139	@ 0x8b
 8016e60:	602b      	str	r3, [r5, #0]
 8016e62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016e66:	b01d      	add	sp, #116	@ 0x74
 8016e68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016e6c:	b002      	add	sp, #8
 8016e6e:	4770      	bx	lr
 8016e70:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016e74:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016e78:	bf14      	ite	ne
 8016e7a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8016e7e:	4623      	moveq	r3, r4
 8016e80:	9304      	str	r3, [sp, #16]
 8016e82:	9307      	str	r3, [sp, #28]
 8016e84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016e88:	9002      	str	r0, [sp, #8]
 8016e8a:	9006      	str	r0, [sp, #24]
 8016e8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016e90:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8016e92:	ab21      	add	r3, sp, #132	@ 0x84
 8016e94:	a902      	add	r1, sp, #8
 8016e96:	4628      	mov	r0, r5
 8016e98:	9301      	str	r3, [sp, #4]
 8016e9a:	f000 fa63 	bl	8017364 <_svfiprintf_r>
 8016e9e:	1c43      	adds	r3, r0, #1
 8016ea0:	bfbc      	itt	lt
 8016ea2:	238b      	movlt	r3, #139	@ 0x8b
 8016ea4:	602b      	strlt	r3, [r5, #0]
 8016ea6:	2c00      	cmp	r4, #0
 8016ea8:	d0dd      	beq.n	8016e66 <sniprintf+0x16>
 8016eaa:	9b02      	ldr	r3, [sp, #8]
 8016eac:	2200      	movs	r2, #0
 8016eae:	701a      	strb	r2, [r3, #0]
 8016eb0:	e7d9      	b.n	8016e66 <sniprintf+0x16>
 8016eb2:	bf00      	nop
 8016eb4:	200000c8 	.word	0x200000c8

08016eb8 <__sread>:
 8016eb8:	b510      	push	{r4, lr}
 8016eba:	460c      	mov	r4, r1
 8016ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ec0:	f000 f900 	bl	80170c4 <_read_r>
 8016ec4:	2800      	cmp	r0, #0
 8016ec6:	bfab      	itete	ge
 8016ec8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016eca:	89a3      	ldrhlt	r3, [r4, #12]
 8016ecc:	181b      	addge	r3, r3, r0
 8016ece:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016ed2:	bfac      	ite	ge
 8016ed4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016ed6:	81a3      	strhlt	r3, [r4, #12]
 8016ed8:	bd10      	pop	{r4, pc}

08016eda <__swrite>:
 8016eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ede:	461f      	mov	r7, r3
 8016ee0:	898b      	ldrh	r3, [r1, #12]
 8016ee2:	05db      	lsls	r3, r3, #23
 8016ee4:	4605      	mov	r5, r0
 8016ee6:	460c      	mov	r4, r1
 8016ee8:	4616      	mov	r6, r2
 8016eea:	d505      	bpl.n	8016ef8 <__swrite+0x1e>
 8016eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ef0:	2302      	movs	r3, #2
 8016ef2:	2200      	movs	r2, #0
 8016ef4:	f000 f8d4 	bl	80170a0 <_lseek_r>
 8016ef8:	89a3      	ldrh	r3, [r4, #12]
 8016efa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016efe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016f02:	81a3      	strh	r3, [r4, #12]
 8016f04:	4632      	mov	r2, r6
 8016f06:	463b      	mov	r3, r7
 8016f08:	4628      	mov	r0, r5
 8016f0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f0e:	f000 b8fb 	b.w	8017108 <_write_r>

08016f12 <__sseek>:
 8016f12:	b510      	push	{r4, lr}
 8016f14:	460c      	mov	r4, r1
 8016f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f1a:	f000 f8c1 	bl	80170a0 <_lseek_r>
 8016f1e:	1c43      	adds	r3, r0, #1
 8016f20:	89a3      	ldrh	r3, [r4, #12]
 8016f22:	bf15      	itete	ne
 8016f24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016f26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016f2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016f2e:	81a3      	strheq	r3, [r4, #12]
 8016f30:	bf18      	it	ne
 8016f32:	81a3      	strhne	r3, [r4, #12]
 8016f34:	bd10      	pop	{r4, pc}

08016f36 <__sclose>:
 8016f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f3a:	f000 b8a1 	b.w	8017080 <_close_r>

08016f3e <_vsniprintf_r>:
 8016f3e:	b530      	push	{r4, r5, lr}
 8016f40:	4614      	mov	r4, r2
 8016f42:	2c00      	cmp	r4, #0
 8016f44:	b09b      	sub	sp, #108	@ 0x6c
 8016f46:	4605      	mov	r5, r0
 8016f48:	461a      	mov	r2, r3
 8016f4a:	da05      	bge.n	8016f58 <_vsniprintf_r+0x1a>
 8016f4c:	238b      	movs	r3, #139	@ 0x8b
 8016f4e:	6003      	str	r3, [r0, #0]
 8016f50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016f54:	b01b      	add	sp, #108	@ 0x6c
 8016f56:	bd30      	pop	{r4, r5, pc}
 8016f58:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016f5c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016f60:	bf14      	ite	ne
 8016f62:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8016f66:	4623      	moveq	r3, r4
 8016f68:	9302      	str	r3, [sp, #8]
 8016f6a:	9305      	str	r3, [sp, #20]
 8016f6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016f70:	9100      	str	r1, [sp, #0]
 8016f72:	9104      	str	r1, [sp, #16]
 8016f74:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016f78:	4669      	mov	r1, sp
 8016f7a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8016f7c:	f000 f9f2 	bl	8017364 <_svfiprintf_r>
 8016f80:	1c43      	adds	r3, r0, #1
 8016f82:	bfbc      	itt	lt
 8016f84:	238b      	movlt	r3, #139	@ 0x8b
 8016f86:	602b      	strlt	r3, [r5, #0]
 8016f88:	2c00      	cmp	r4, #0
 8016f8a:	d0e3      	beq.n	8016f54 <_vsniprintf_r+0x16>
 8016f8c:	9b00      	ldr	r3, [sp, #0]
 8016f8e:	2200      	movs	r2, #0
 8016f90:	701a      	strb	r2, [r3, #0]
 8016f92:	e7df      	b.n	8016f54 <_vsniprintf_r+0x16>

08016f94 <vsniprintf>:
 8016f94:	b507      	push	{r0, r1, r2, lr}
 8016f96:	9300      	str	r3, [sp, #0]
 8016f98:	4613      	mov	r3, r2
 8016f9a:	460a      	mov	r2, r1
 8016f9c:	4601      	mov	r1, r0
 8016f9e:	4803      	ldr	r0, [pc, #12]	@ (8016fac <vsniprintf+0x18>)
 8016fa0:	6800      	ldr	r0, [r0, #0]
 8016fa2:	f7ff ffcc 	bl	8016f3e <_vsniprintf_r>
 8016fa6:	b003      	add	sp, #12
 8016fa8:	f85d fb04 	ldr.w	pc, [sp], #4
 8016fac:	200000c8 	.word	0x200000c8

08016fb0 <memcmp>:
 8016fb0:	b510      	push	{r4, lr}
 8016fb2:	3901      	subs	r1, #1
 8016fb4:	4402      	add	r2, r0
 8016fb6:	4290      	cmp	r0, r2
 8016fb8:	d101      	bne.n	8016fbe <memcmp+0xe>
 8016fba:	2000      	movs	r0, #0
 8016fbc:	e005      	b.n	8016fca <memcmp+0x1a>
 8016fbe:	7803      	ldrb	r3, [r0, #0]
 8016fc0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016fc4:	42a3      	cmp	r3, r4
 8016fc6:	d001      	beq.n	8016fcc <memcmp+0x1c>
 8016fc8:	1b18      	subs	r0, r3, r4
 8016fca:	bd10      	pop	{r4, pc}
 8016fcc:	3001      	adds	r0, #1
 8016fce:	e7f2      	b.n	8016fb6 <memcmp+0x6>

08016fd0 <memmove>:
 8016fd0:	4288      	cmp	r0, r1
 8016fd2:	b510      	push	{r4, lr}
 8016fd4:	eb01 0402 	add.w	r4, r1, r2
 8016fd8:	d902      	bls.n	8016fe0 <memmove+0x10>
 8016fda:	4284      	cmp	r4, r0
 8016fdc:	4623      	mov	r3, r4
 8016fde:	d807      	bhi.n	8016ff0 <memmove+0x20>
 8016fe0:	1e43      	subs	r3, r0, #1
 8016fe2:	42a1      	cmp	r1, r4
 8016fe4:	d008      	beq.n	8016ff8 <memmove+0x28>
 8016fe6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016fea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016fee:	e7f8      	b.n	8016fe2 <memmove+0x12>
 8016ff0:	4402      	add	r2, r0
 8016ff2:	4601      	mov	r1, r0
 8016ff4:	428a      	cmp	r2, r1
 8016ff6:	d100      	bne.n	8016ffa <memmove+0x2a>
 8016ff8:	bd10      	pop	{r4, pc}
 8016ffa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016ffe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017002:	e7f7      	b.n	8016ff4 <memmove+0x24>

08017004 <memset>:
 8017004:	4402      	add	r2, r0
 8017006:	4603      	mov	r3, r0
 8017008:	4293      	cmp	r3, r2
 801700a:	d100      	bne.n	801700e <memset+0xa>
 801700c:	4770      	bx	lr
 801700e:	f803 1b01 	strb.w	r1, [r3], #1
 8017012:	e7f9      	b.n	8017008 <memset+0x4>

08017014 <strchr>:
 8017014:	b2c9      	uxtb	r1, r1
 8017016:	4603      	mov	r3, r0
 8017018:	4618      	mov	r0, r3
 801701a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801701e:	b112      	cbz	r2, 8017026 <strchr+0x12>
 8017020:	428a      	cmp	r2, r1
 8017022:	d1f9      	bne.n	8017018 <strchr+0x4>
 8017024:	4770      	bx	lr
 8017026:	2900      	cmp	r1, #0
 8017028:	bf18      	it	ne
 801702a:	2000      	movne	r0, #0
 801702c:	4770      	bx	lr

0801702e <strncmp>:
 801702e:	b510      	push	{r4, lr}
 8017030:	b16a      	cbz	r2, 801704e <strncmp+0x20>
 8017032:	3901      	subs	r1, #1
 8017034:	1884      	adds	r4, r0, r2
 8017036:	f810 2b01 	ldrb.w	r2, [r0], #1
 801703a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801703e:	429a      	cmp	r2, r3
 8017040:	d103      	bne.n	801704a <strncmp+0x1c>
 8017042:	42a0      	cmp	r0, r4
 8017044:	d001      	beq.n	801704a <strncmp+0x1c>
 8017046:	2a00      	cmp	r2, #0
 8017048:	d1f5      	bne.n	8017036 <strncmp+0x8>
 801704a:	1ad0      	subs	r0, r2, r3
 801704c:	bd10      	pop	{r4, pc}
 801704e:	4610      	mov	r0, r2
 8017050:	e7fc      	b.n	801704c <strncmp+0x1e>

08017052 <strstr>:
 8017052:	780a      	ldrb	r2, [r1, #0]
 8017054:	b570      	push	{r4, r5, r6, lr}
 8017056:	b96a      	cbnz	r2, 8017074 <strstr+0x22>
 8017058:	bd70      	pop	{r4, r5, r6, pc}
 801705a:	429a      	cmp	r2, r3
 801705c:	d109      	bne.n	8017072 <strstr+0x20>
 801705e:	460c      	mov	r4, r1
 8017060:	4605      	mov	r5, r0
 8017062:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017066:	2b00      	cmp	r3, #0
 8017068:	d0f6      	beq.n	8017058 <strstr+0x6>
 801706a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801706e:	429e      	cmp	r6, r3
 8017070:	d0f7      	beq.n	8017062 <strstr+0x10>
 8017072:	3001      	adds	r0, #1
 8017074:	7803      	ldrb	r3, [r0, #0]
 8017076:	2b00      	cmp	r3, #0
 8017078:	d1ef      	bne.n	801705a <strstr+0x8>
 801707a:	4618      	mov	r0, r3
 801707c:	e7ec      	b.n	8017058 <strstr+0x6>
	...

08017080 <_close_r>:
 8017080:	b538      	push	{r3, r4, r5, lr}
 8017082:	4d06      	ldr	r5, [pc, #24]	@ (801709c <_close_r+0x1c>)
 8017084:	2300      	movs	r3, #0
 8017086:	4604      	mov	r4, r0
 8017088:	4608      	mov	r0, r1
 801708a:	602b      	str	r3, [r5, #0]
 801708c:	f7ea ff6c 	bl	8001f68 <_close>
 8017090:	1c43      	adds	r3, r0, #1
 8017092:	d102      	bne.n	801709a <_close_r+0x1a>
 8017094:	682b      	ldr	r3, [r5, #0]
 8017096:	b103      	cbz	r3, 801709a <_close_r+0x1a>
 8017098:	6023      	str	r3, [r4, #0]
 801709a:	bd38      	pop	{r3, r4, r5, pc}
 801709c:	2000adcc 	.word	0x2000adcc

080170a0 <_lseek_r>:
 80170a0:	b538      	push	{r3, r4, r5, lr}
 80170a2:	4d07      	ldr	r5, [pc, #28]	@ (80170c0 <_lseek_r+0x20>)
 80170a4:	4604      	mov	r4, r0
 80170a6:	4608      	mov	r0, r1
 80170a8:	4611      	mov	r1, r2
 80170aa:	2200      	movs	r2, #0
 80170ac:	602a      	str	r2, [r5, #0]
 80170ae:	461a      	mov	r2, r3
 80170b0:	f7ea ff81 	bl	8001fb6 <_lseek>
 80170b4:	1c43      	adds	r3, r0, #1
 80170b6:	d102      	bne.n	80170be <_lseek_r+0x1e>
 80170b8:	682b      	ldr	r3, [r5, #0]
 80170ba:	b103      	cbz	r3, 80170be <_lseek_r+0x1e>
 80170bc:	6023      	str	r3, [r4, #0]
 80170be:	bd38      	pop	{r3, r4, r5, pc}
 80170c0:	2000adcc 	.word	0x2000adcc

080170c4 <_read_r>:
 80170c4:	b538      	push	{r3, r4, r5, lr}
 80170c6:	4d07      	ldr	r5, [pc, #28]	@ (80170e4 <_read_r+0x20>)
 80170c8:	4604      	mov	r4, r0
 80170ca:	4608      	mov	r0, r1
 80170cc:	4611      	mov	r1, r2
 80170ce:	2200      	movs	r2, #0
 80170d0:	602a      	str	r2, [r5, #0]
 80170d2:	461a      	mov	r2, r3
 80170d4:	f7ea ff0f 	bl	8001ef6 <_read>
 80170d8:	1c43      	adds	r3, r0, #1
 80170da:	d102      	bne.n	80170e2 <_read_r+0x1e>
 80170dc:	682b      	ldr	r3, [r5, #0]
 80170de:	b103      	cbz	r3, 80170e2 <_read_r+0x1e>
 80170e0:	6023      	str	r3, [r4, #0]
 80170e2:	bd38      	pop	{r3, r4, r5, pc}
 80170e4:	2000adcc 	.word	0x2000adcc

080170e8 <_sbrk_r>:
 80170e8:	b538      	push	{r3, r4, r5, lr}
 80170ea:	4d06      	ldr	r5, [pc, #24]	@ (8017104 <_sbrk_r+0x1c>)
 80170ec:	2300      	movs	r3, #0
 80170ee:	4604      	mov	r4, r0
 80170f0:	4608      	mov	r0, r1
 80170f2:	602b      	str	r3, [r5, #0]
 80170f4:	f7ea ff6c 	bl	8001fd0 <_sbrk>
 80170f8:	1c43      	adds	r3, r0, #1
 80170fa:	d102      	bne.n	8017102 <_sbrk_r+0x1a>
 80170fc:	682b      	ldr	r3, [r5, #0]
 80170fe:	b103      	cbz	r3, 8017102 <_sbrk_r+0x1a>
 8017100:	6023      	str	r3, [r4, #0]
 8017102:	bd38      	pop	{r3, r4, r5, pc}
 8017104:	2000adcc 	.word	0x2000adcc

08017108 <_write_r>:
 8017108:	b538      	push	{r3, r4, r5, lr}
 801710a:	4d07      	ldr	r5, [pc, #28]	@ (8017128 <_write_r+0x20>)
 801710c:	4604      	mov	r4, r0
 801710e:	4608      	mov	r0, r1
 8017110:	4611      	mov	r1, r2
 8017112:	2200      	movs	r2, #0
 8017114:	602a      	str	r2, [r5, #0]
 8017116:	461a      	mov	r2, r3
 8017118:	f7ea ff0a 	bl	8001f30 <_write>
 801711c:	1c43      	adds	r3, r0, #1
 801711e:	d102      	bne.n	8017126 <_write_r+0x1e>
 8017120:	682b      	ldr	r3, [r5, #0]
 8017122:	b103      	cbz	r3, 8017126 <_write_r+0x1e>
 8017124:	6023      	str	r3, [r4, #0]
 8017126:	bd38      	pop	{r3, r4, r5, pc}
 8017128:	2000adcc 	.word	0x2000adcc

0801712c <__errno>:
 801712c:	4b01      	ldr	r3, [pc, #4]	@ (8017134 <__errno+0x8>)
 801712e:	6818      	ldr	r0, [r3, #0]
 8017130:	4770      	bx	lr
 8017132:	bf00      	nop
 8017134:	200000c8 	.word	0x200000c8

08017138 <__libc_init_array>:
 8017138:	b570      	push	{r4, r5, r6, lr}
 801713a:	4d0d      	ldr	r5, [pc, #52]	@ (8017170 <__libc_init_array+0x38>)
 801713c:	4c0d      	ldr	r4, [pc, #52]	@ (8017174 <__libc_init_array+0x3c>)
 801713e:	1b64      	subs	r4, r4, r5
 8017140:	10a4      	asrs	r4, r4, #2
 8017142:	2600      	movs	r6, #0
 8017144:	42a6      	cmp	r6, r4
 8017146:	d109      	bne.n	801715c <__libc_init_array+0x24>
 8017148:	4d0b      	ldr	r5, [pc, #44]	@ (8017178 <__libc_init_array+0x40>)
 801714a:	4c0c      	ldr	r4, [pc, #48]	@ (801717c <__libc_init_array+0x44>)
 801714c:	f000 fef8 	bl	8017f40 <_init>
 8017150:	1b64      	subs	r4, r4, r5
 8017152:	10a4      	asrs	r4, r4, #2
 8017154:	2600      	movs	r6, #0
 8017156:	42a6      	cmp	r6, r4
 8017158:	d105      	bne.n	8017166 <__libc_init_array+0x2e>
 801715a:	bd70      	pop	{r4, r5, r6, pc}
 801715c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017160:	4798      	blx	r3
 8017162:	3601      	adds	r6, #1
 8017164:	e7ee      	b.n	8017144 <__libc_init_array+0xc>
 8017166:	f855 3b04 	ldr.w	r3, [r5], #4
 801716a:	4798      	blx	r3
 801716c:	3601      	adds	r6, #1
 801716e:	e7f2      	b.n	8017156 <__libc_init_array+0x1e>
 8017170:	08018cf0 	.word	0x08018cf0
 8017174:	08018cf0 	.word	0x08018cf0
 8017178:	08018cf0 	.word	0x08018cf0
 801717c:	08018cf8 	.word	0x08018cf8

08017180 <__retarget_lock_init_recursive>:
 8017180:	4770      	bx	lr

08017182 <__retarget_lock_acquire_recursive>:
 8017182:	4770      	bx	lr

08017184 <__retarget_lock_release_recursive>:
 8017184:	4770      	bx	lr

08017186 <strcpy>:
 8017186:	4603      	mov	r3, r0
 8017188:	f811 2b01 	ldrb.w	r2, [r1], #1
 801718c:	f803 2b01 	strb.w	r2, [r3], #1
 8017190:	2a00      	cmp	r2, #0
 8017192:	d1f9      	bne.n	8017188 <strcpy+0x2>
 8017194:	4770      	bx	lr

08017196 <memcpy>:
 8017196:	440a      	add	r2, r1
 8017198:	4291      	cmp	r1, r2
 801719a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801719e:	d100      	bne.n	80171a2 <memcpy+0xc>
 80171a0:	4770      	bx	lr
 80171a2:	b510      	push	{r4, lr}
 80171a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80171a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80171ac:	4291      	cmp	r1, r2
 80171ae:	d1f9      	bne.n	80171a4 <memcpy+0xe>
 80171b0:	bd10      	pop	{r4, pc}
	...

080171b4 <__assert_func>:
 80171b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80171b6:	4614      	mov	r4, r2
 80171b8:	461a      	mov	r2, r3
 80171ba:	4b09      	ldr	r3, [pc, #36]	@ (80171e0 <__assert_func+0x2c>)
 80171bc:	681b      	ldr	r3, [r3, #0]
 80171be:	4605      	mov	r5, r0
 80171c0:	68d8      	ldr	r0, [r3, #12]
 80171c2:	b954      	cbnz	r4, 80171da <__assert_func+0x26>
 80171c4:	4b07      	ldr	r3, [pc, #28]	@ (80171e4 <__assert_func+0x30>)
 80171c6:	461c      	mov	r4, r3
 80171c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80171cc:	9100      	str	r1, [sp, #0]
 80171ce:	462b      	mov	r3, r5
 80171d0:	4905      	ldr	r1, [pc, #20]	@ (80171e8 <__assert_func+0x34>)
 80171d2:	f000 fd3f 	bl	8017c54 <fiprintf>
 80171d6:	f000 fde3 	bl	8017da0 <abort>
 80171da:	4b04      	ldr	r3, [pc, #16]	@ (80171ec <__assert_func+0x38>)
 80171dc:	e7f4      	b.n	80171c8 <__assert_func+0x14>
 80171de:	bf00      	nop
 80171e0:	200000c8 	.word	0x200000c8
 80171e4:	08018cb3 	.word	0x08018cb3
 80171e8:	08018c85 	.word	0x08018c85
 80171ec:	08018c78 	.word	0x08018c78

080171f0 <__env_lock>:
 80171f0:	4801      	ldr	r0, [pc, #4]	@ (80171f8 <__env_lock+0x8>)
 80171f2:	f7ff bfc6 	b.w	8017182 <__retarget_lock_acquire_recursive>
 80171f6:	bf00      	nop
 80171f8:	2000add0 	.word	0x2000add0

080171fc <__env_unlock>:
 80171fc:	4801      	ldr	r0, [pc, #4]	@ (8017204 <__env_unlock+0x8>)
 80171fe:	f7ff bfc1 	b.w	8017184 <__retarget_lock_release_recursive>
 8017202:	bf00      	nop
 8017204:	2000add0 	.word	0x2000add0

08017208 <_free_r>:
 8017208:	b538      	push	{r3, r4, r5, lr}
 801720a:	4605      	mov	r5, r0
 801720c:	2900      	cmp	r1, #0
 801720e:	d041      	beq.n	8017294 <_free_r+0x8c>
 8017210:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017214:	1f0c      	subs	r4, r1, #4
 8017216:	2b00      	cmp	r3, #0
 8017218:	bfb8      	it	lt
 801721a:	18e4      	addlt	r4, r4, r3
 801721c:	f7ff fc1e 	bl	8016a5c <__malloc_lock>
 8017220:	4a1d      	ldr	r2, [pc, #116]	@ (8017298 <_free_r+0x90>)
 8017222:	6813      	ldr	r3, [r2, #0]
 8017224:	b933      	cbnz	r3, 8017234 <_free_r+0x2c>
 8017226:	6063      	str	r3, [r4, #4]
 8017228:	6014      	str	r4, [r2, #0]
 801722a:	4628      	mov	r0, r5
 801722c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017230:	f7ff bc1a 	b.w	8016a68 <__malloc_unlock>
 8017234:	42a3      	cmp	r3, r4
 8017236:	d908      	bls.n	801724a <_free_r+0x42>
 8017238:	6820      	ldr	r0, [r4, #0]
 801723a:	1821      	adds	r1, r4, r0
 801723c:	428b      	cmp	r3, r1
 801723e:	bf01      	itttt	eq
 8017240:	6819      	ldreq	r1, [r3, #0]
 8017242:	685b      	ldreq	r3, [r3, #4]
 8017244:	1809      	addeq	r1, r1, r0
 8017246:	6021      	streq	r1, [r4, #0]
 8017248:	e7ed      	b.n	8017226 <_free_r+0x1e>
 801724a:	461a      	mov	r2, r3
 801724c:	685b      	ldr	r3, [r3, #4]
 801724e:	b10b      	cbz	r3, 8017254 <_free_r+0x4c>
 8017250:	42a3      	cmp	r3, r4
 8017252:	d9fa      	bls.n	801724a <_free_r+0x42>
 8017254:	6811      	ldr	r1, [r2, #0]
 8017256:	1850      	adds	r0, r2, r1
 8017258:	42a0      	cmp	r0, r4
 801725a:	d10b      	bne.n	8017274 <_free_r+0x6c>
 801725c:	6820      	ldr	r0, [r4, #0]
 801725e:	4401      	add	r1, r0
 8017260:	1850      	adds	r0, r2, r1
 8017262:	4283      	cmp	r3, r0
 8017264:	6011      	str	r1, [r2, #0]
 8017266:	d1e0      	bne.n	801722a <_free_r+0x22>
 8017268:	6818      	ldr	r0, [r3, #0]
 801726a:	685b      	ldr	r3, [r3, #4]
 801726c:	6053      	str	r3, [r2, #4]
 801726e:	4408      	add	r0, r1
 8017270:	6010      	str	r0, [r2, #0]
 8017272:	e7da      	b.n	801722a <_free_r+0x22>
 8017274:	d902      	bls.n	801727c <_free_r+0x74>
 8017276:	230c      	movs	r3, #12
 8017278:	602b      	str	r3, [r5, #0]
 801727a:	e7d6      	b.n	801722a <_free_r+0x22>
 801727c:	6820      	ldr	r0, [r4, #0]
 801727e:	1821      	adds	r1, r4, r0
 8017280:	428b      	cmp	r3, r1
 8017282:	bf04      	itt	eq
 8017284:	6819      	ldreq	r1, [r3, #0]
 8017286:	685b      	ldreq	r3, [r3, #4]
 8017288:	6063      	str	r3, [r4, #4]
 801728a:	bf04      	itt	eq
 801728c:	1809      	addeq	r1, r1, r0
 801728e:	6021      	streq	r1, [r4, #0]
 8017290:	6054      	str	r4, [r2, #4]
 8017292:	e7ca      	b.n	801722a <_free_r+0x22>
 8017294:	bd38      	pop	{r3, r4, r5, pc}
 8017296:	bf00      	nop
 8017298:	2000ac8c 	.word	0x2000ac8c

0801729c <_malloc_usable_size_r>:
 801729c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80172a0:	1f18      	subs	r0, r3, #4
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	bfbc      	itt	lt
 80172a6:	580b      	ldrlt	r3, [r1, r0]
 80172a8:	18c0      	addlt	r0, r0, r3
 80172aa:	4770      	bx	lr

080172ac <__ssputs_r>:
 80172ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172b0:	688e      	ldr	r6, [r1, #8]
 80172b2:	461f      	mov	r7, r3
 80172b4:	42be      	cmp	r6, r7
 80172b6:	680b      	ldr	r3, [r1, #0]
 80172b8:	4682      	mov	sl, r0
 80172ba:	460c      	mov	r4, r1
 80172bc:	4690      	mov	r8, r2
 80172be:	d82d      	bhi.n	801731c <__ssputs_r+0x70>
 80172c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80172c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80172c8:	d026      	beq.n	8017318 <__ssputs_r+0x6c>
 80172ca:	6965      	ldr	r5, [r4, #20]
 80172cc:	6909      	ldr	r1, [r1, #16]
 80172ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80172d2:	eba3 0901 	sub.w	r9, r3, r1
 80172d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80172da:	1c7b      	adds	r3, r7, #1
 80172dc:	444b      	add	r3, r9
 80172de:	106d      	asrs	r5, r5, #1
 80172e0:	429d      	cmp	r5, r3
 80172e2:	bf38      	it	cc
 80172e4:	461d      	movcc	r5, r3
 80172e6:	0553      	lsls	r3, r2, #21
 80172e8:	d527      	bpl.n	801733a <__ssputs_r+0x8e>
 80172ea:	4629      	mov	r1, r5
 80172ec:	f7ff fb36 	bl	801695c <_malloc_r>
 80172f0:	4606      	mov	r6, r0
 80172f2:	b360      	cbz	r0, 801734e <__ssputs_r+0xa2>
 80172f4:	6921      	ldr	r1, [r4, #16]
 80172f6:	464a      	mov	r2, r9
 80172f8:	f7ff ff4d 	bl	8017196 <memcpy>
 80172fc:	89a3      	ldrh	r3, [r4, #12]
 80172fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017306:	81a3      	strh	r3, [r4, #12]
 8017308:	6126      	str	r6, [r4, #16]
 801730a:	6165      	str	r5, [r4, #20]
 801730c:	444e      	add	r6, r9
 801730e:	eba5 0509 	sub.w	r5, r5, r9
 8017312:	6026      	str	r6, [r4, #0]
 8017314:	60a5      	str	r5, [r4, #8]
 8017316:	463e      	mov	r6, r7
 8017318:	42be      	cmp	r6, r7
 801731a:	d900      	bls.n	801731e <__ssputs_r+0x72>
 801731c:	463e      	mov	r6, r7
 801731e:	6820      	ldr	r0, [r4, #0]
 8017320:	4632      	mov	r2, r6
 8017322:	4641      	mov	r1, r8
 8017324:	f7ff fe54 	bl	8016fd0 <memmove>
 8017328:	68a3      	ldr	r3, [r4, #8]
 801732a:	1b9b      	subs	r3, r3, r6
 801732c:	60a3      	str	r3, [r4, #8]
 801732e:	6823      	ldr	r3, [r4, #0]
 8017330:	4433      	add	r3, r6
 8017332:	6023      	str	r3, [r4, #0]
 8017334:	2000      	movs	r0, #0
 8017336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801733a:	462a      	mov	r2, r5
 801733c:	f7ff fc0e 	bl	8016b5c <_realloc_r>
 8017340:	4606      	mov	r6, r0
 8017342:	2800      	cmp	r0, #0
 8017344:	d1e0      	bne.n	8017308 <__ssputs_r+0x5c>
 8017346:	6921      	ldr	r1, [r4, #16]
 8017348:	4650      	mov	r0, sl
 801734a:	f7ff ff5d 	bl	8017208 <_free_r>
 801734e:	230c      	movs	r3, #12
 8017350:	f8ca 3000 	str.w	r3, [sl]
 8017354:	89a3      	ldrh	r3, [r4, #12]
 8017356:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801735a:	81a3      	strh	r3, [r4, #12]
 801735c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017360:	e7e9      	b.n	8017336 <__ssputs_r+0x8a>
	...

08017364 <_svfiprintf_r>:
 8017364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017368:	4698      	mov	r8, r3
 801736a:	898b      	ldrh	r3, [r1, #12]
 801736c:	061b      	lsls	r3, r3, #24
 801736e:	b09d      	sub	sp, #116	@ 0x74
 8017370:	4607      	mov	r7, r0
 8017372:	460d      	mov	r5, r1
 8017374:	4614      	mov	r4, r2
 8017376:	d510      	bpl.n	801739a <_svfiprintf_r+0x36>
 8017378:	690b      	ldr	r3, [r1, #16]
 801737a:	b973      	cbnz	r3, 801739a <_svfiprintf_r+0x36>
 801737c:	2140      	movs	r1, #64	@ 0x40
 801737e:	f7ff faed 	bl	801695c <_malloc_r>
 8017382:	6028      	str	r0, [r5, #0]
 8017384:	6128      	str	r0, [r5, #16]
 8017386:	b930      	cbnz	r0, 8017396 <_svfiprintf_r+0x32>
 8017388:	230c      	movs	r3, #12
 801738a:	603b      	str	r3, [r7, #0]
 801738c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017390:	b01d      	add	sp, #116	@ 0x74
 8017392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017396:	2340      	movs	r3, #64	@ 0x40
 8017398:	616b      	str	r3, [r5, #20]
 801739a:	2300      	movs	r3, #0
 801739c:	9309      	str	r3, [sp, #36]	@ 0x24
 801739e:	2320      	movs	r3, #32
 80173a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80173a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80173a8:	2330      	movs	r3, #48	@ 0x30
 80173aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017548 <_svfiprintf_r+0x1e4>
 80173ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80173b2:	f04f 0901 	mov.w	r9, #1
 80173b6:	4623      	mov	r3, r4
 80173b8:	469a      	mov	sl, r3
 80173ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80173be:	b10a      	cbz	r2, 80173c4 <_svfiprintf_r+0x60>
 80173c0:	2a25      	cmp	r2, #37	@ 0x25
 80173c2:	d1f9      	bne.n	80173b8 <_svfiprintf_r+0x54>
 80173c4:	ebba 0b04 	subs.w	fp, sl, r4
 80173c8:	d00b      	beq.n	80173e2 <_svfiprintf_r+0x7e>
 80173ca:	465b      	mov	r3, fp
 80173cc:	4622      	mov	r2, r4
 80173ce:	4629      	mov	r1, r5
 80173d0:	4638      	mov	r0, r7
 80173d2:	f7ff ff6b 	bl	80172ac <__ssputs_r>
 80173d6:	3001      	adds	r0, #1
 80173d8:	f000 80a7 	beq.w	801752a <_svfiprintf_r+0x1c6>
 80173dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80173de:	445a      	add	r2, fp
 80173e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80173e2:	f89a 3000 	ldrb.w	r3, [sl]
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	f000 809f 	beq.w	801752a <_svfiprintf_r+0x1c6>
 80173ec:	2300      	movs	r3, #0
 80173ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80173f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80173f6:	f10a 0a01 	add.w	sl, sl, #1
 80173fa:	9304      	str	r3, [sp, #16]
 80173fc:	9307      	str	r3, [sp, #28]
 80173fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017402:	931a      	str	r3, [sp, #104]	@ 0x68
 8017404:	4654      	mov	r4, sl
 8017406:	2205      	movs	r2, #5
 8017408:	f814 1b01 	ldrb.w	r1, [r4], #1
 801740c:	484e      	ldr	r0, [pc, #312]	@ (8017548 <_svfiprintf_r+0x1e4>)
 801740e:	f7e8 ff1f 	bl	8000250 <memchr>
 8017412:	9a04      	ldr	r2, [sp, #16]
 8017414:	b9d8      	cbnz	r0, 801744e <_svfiprintf_r+0xea>
 8017416:	06d0      	lsls	r0, r2, #27
 8017418:	bf44      	itt	mi
 801741a:	2320      	movmi	r3, #32
 801741c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017420:	0711      	lsls	r1, r2, #28
 8017422:	bf44      	itt	mi
 8017424:	232b      	movmi	r3, #43	@ 0x2b
 8017426:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801742a:	f89a 3000 	ldrb.w	r3, [sl]
 801742e:	2b2a      	cmp	r3, #42	@ 0x2a
 8017430:	d015      	beq.n	801745e <_svfiprintf_r+0xfa>
 8017432:	9a07      	ldr	r2, [sp, #28]
 8017434:	4654      	mov	r4, sl
 8017436:	2000      	movs	r0, #0
 8017438:	f04f 0c0a 	mov.w	ip, #10
 801743c:	4621      	mov	r1, r4
 801743e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017442:	3b30      	subs	r3, #48	@ 0x30
 8017444:	2b09      	cmp	r3, #9
 8017446:	d94b      	bls.n	80174e0 <_svfiprintf_r+0x17c>
 8017448:	b1b0      	cbz	r0, 8017478 <_svfiprintf_r+0x114>
 801744a:	9207      	str	r2, [sp, #28]
 801744c:	e014      	b.n	8017478 <_svfiprintf_r+0x114>
 801744e:	eba0 0308 	sub.w	r3, r0, r8
 8017452:	fa09 f303 	lsl.w	r3, r9, r3
 8017456:	4313      	orrs	r3, r2
 8017458:	9304      	str	r3, [sp, #16]
 801745a:	46a2      	mov	sl, r4
 801745c:	e7d2      	b.n	8017404 <_svfiprintf_r+0xa0>
 801745e:	9b03      	ldr	r3, [sp, #12]
 8017460:	1d19      	adds	r1, r3, #4
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	9103      	str	r1, [sp, #12]
 8017466:	2b00      	cmp	r3, #0
 8017468:	bfbb      	ittet	lt
 801746a:	425b      	neglt	r3, r3
 801746c:	f042 0202 	orrlt.w	r2, r2, #2
 8017470:	9307      	strge	r3, [sp, #28]
 8017472:	9307      	strlt	r3, [sp, #28]
 8017474:	bfb8      	it	lt
 8017476:	9204      	strlt	r2, [sp, #16]
 8017478:	7823      	ldrb	r3, [r4, #0]
 801747a:	2b2e      	cmp	r3, #46	@ 0x2e
 801747c:	d10a      	bne.n	8017494 <_svfiprintf_r+0x130>
 801747e:	7863      	ldrb	r3, [r4, #1]
 8017480:	2b2a      	cmp	r3, #42	@ 0x2a
 8017482:	d132      	bne.n	80174ea <_svfiprintf_r+0x186>
 8017484:	9b03      	ldr	r3, [sp, #12]
 8017486:	1d1a      	adds	r2, r3, #4
 8017488:	681b      	ldr	r3, [r3, #0]
 801748a:	9203      	str	r2, [sp, #12]
 801748c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017490:	3402      	adds	r4, #2
 8017492:	9305      	str	r3, [sp, #20]
 8017494:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017558 <_svfiprintf_r+0x1f4>
 8017498:	7821      	ldrb	r1, [r4, #0]
 801749a:	2203      	movs	r2, #3
 801749c:	4650      	mov	r0, sl
 801749e:	f7e8 fed7 	bl	8000250 <memchr>
 80174a2:	b138      	cbz	r0, 80174b4 <_svfiprintf_r+0x150>
 80174a4:	9b04      	ldr	r3, [sp, #16]
 80174a6:	eba0 000a 	sub.w	r0, r0, sl
 80174aa:	2240      	movs	r2, #64	@ 0x40
 80174ac:	4082      	lsls	r2, r0
 80174ae:	4313      	orrs	r3, r2
 80174b0:	3401      	adds	r4, #1
 80174b2:	9304      	str	r3, [sp, #16]
 80174b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80174b8:	4824      	ldr	r0, [pc, #144]	@ (801754c <_svfiprintf_r+0x1e8>)
 80174ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80174be:	2206      	movs	r2, #6
 80174c0:	f7e8 fec6 	bl	8000250 <memchr>
 80174c4:	2800      	cmp	r0, #0
 80174c6:	d036      	beq.n	8017536 <_svfiprintf_r+0x1d2>
 80174c8:	4b21      	ldr	r3, [pc, #132]	@ (8017550 <_svfiprintf_r+0x1ec>)
 80174ca:	bb1b      	cbnz	r3, 8017514 <_svfiprintf_r+0x1b0>
 80174cc:	9b03      	ldr	r3, [sp, #12]
 80174ce:	3307      	adds	r3, #7
 80174d0:	f023 0307 	bic.w	r3, r3, #7
 80174d4:	3308      	adds	r3, #8
 80174d6:	9303      	str	r3, [sp, #12]
 80174d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80174da:	4433      	add	r3, r6
 80174dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80174de:	e76a      	b.n	80173b6 <_svfiprintf_r+0x52>
 80174e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80174e4:	460c      	mov	r4, r1
 80174e6:	2001      	movs	r0, #1
 80174e8:	e7a8      	b.n	801743c <_svfiprintf_r+0xd8>
 80174ea:	2300      	movs	r3, #0
 80174ec:	3401      	adds	r4, #1
 80174ee:	9305      	str	r3, [sp, #20]
 80174f0:	4619      	mov	r1, r3
 80174f2:	f04f 0c0a 	mov.w	ip, #10
 80174f6:	4620      	mov	r0, r4
 80174f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80174fc:	3a30      	subs	r2, #48	@ 0x30
 80174fe:	2a09      	cmp	r2, #9
 8017500:	d903      	bls.n	801750a <_svfiprintf_r+0x1a6>
 8017502:	2b00      	cmp	r3, #0
 8017504:	d0c6      	beq.n	8017494 <_svfiprintf_r+0x130>
 8017506:	9105      	str	r1, [sp, #20]
 8017508:	e7c4      	b.n	8017494 <_svfiprintf_r+0x130>
 801750a:	fb0c 2101 	mla	r1, ip, r1, r2
 801750e:	4604      	mov	r4, r0
 8017510:	2301      	movs	r3, #1
 8017512:	e7f0      	b.n	80174f6 <_svfiprintf_r+0x192>
 8017514:	ab03      	add	r3, sp, #12
 8017516:	9300      	str	r3, [sp, #0]
 8017518:	462a      	mov	r2, r5
 801751a:	4b0e      	ldr	r3, [pc, #56]	@ (8017554 <_svfiprintf_r+0x1f0>)
 801751c:	a904      	add	r1, sp, #16
 801751e:	4638      	mov	r0, r7
 8017520:	f3af 8000 	nop.w
 8017524:	1c42      	adds	r2, r0, #1
 8017526:	4606      	mov	r6, r0
 8017528:	d1d6      	bne.n	80174d8 <_svfiprintf_r+0x174>
 801752a:	89ab      	ldrh	r3, [r5, #12]
 801752c:	065b      	lsls	r3, r3, #25
 801752e:	f53f af2d 	bmi.w	801738c <_svfiprintf_r+0x28>
 8017532:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017534:	e72c      	b.n	8017390 <_svfiprintf_r+0x2c>
 8017536:	ab03      	add	r3, sp, #12
 8017538:	9300      	str	r3, [sp, #0]
 801753a:	462a      	mov	r2, r5
 801753c:	4b05      	ldr	r3, [pc, #20]	@ (8017554 <_svfiprintf_r+0x1f0>)
 801753e:	a904      	add	r1, sp, #16
 8017540:	4638      	mov	r0, r7
 8017542:	f000 f9bb 	bl	80178bc <_printf_i>
 8017546:	e7ed      	b.n	8017524 <_svfiprintf_r+0x1c0>
 8017548:	08018cb4 	.word	0x08018cb4
 801754c:	08018cbe 	.word	0x08018cbe
 8017550:	00000000 	.word	0x00000000
 8017554:	080172ad 	.word	0x080172ad
 8017558:	08018cba 	.word	0x08018cba

0801755c <__sfputc_r>:
 801755c:	6893      	ldr	r3, [r2, #8]
 801755e:	3b01      	subs	r3, #1
 8017560:	2b00      	cmp	r3, #0
 8017562:	b410      	push	{r4}
 8017564:	6093      	str	r3, [r2, #8]
 8017566:	da08      	bge.n	801757a <__sfputc_r+0x1e>
 8017568:	6994      	ldr	r4, [r2, #24]
 801756a:	42a3      	cmp	r3, r4
 801756c:	db01      	blt.n	8017572 <__sfputc_r+0x16>
 801756e:	290a      	cmp	r1, #10
 8017570:	d103      	bne.n	801757a <__sfputc_r+0x1e>
 8017572:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017576:	f000 bb7f 	b.w	8017c78 <__swbuf_r>
 801757a:	6813      	ldr	r3, [r2, #0]
 801757c:	1c58      	adds	r0, r3, #1
 801757e:	6010      	str	r0, [r2, #0]
 8017580:	7019      	strb	r1, [r3, #0]
 8017582:	4608      	mov	r0, r1
 8017584:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017588:	4770      	bx	lr

0801758a <__sfputs_r>:
 801758a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801758c:	4606      	mov	r6, r0
 801758e:	460f      	mov	r7, r1
 8017590:	4614      	mov	r4, r2
 8017592:	18d5      	adds	r5, r2, r3
 8017594:	42ac      	cmp	r4, r5
 8017596:	d101      	bne.n	801759c <__sfputs_r+0x12>
 8017598:	2000      	movs	r0, #0
 801759a:	e007      	b.n	80175ac <__sfputs_r+0x22>
 801759c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80175a0:	463a      	mov	r2, r7
 80175a2:	4630      	mov	r0, r6
 80175a4:	f7ff ffda 	bl	801755c <__sfputc_r>
 80175a8:	1c43      	adds	r3, r0, #1
 80175aa:	d1f3      	bne.n	8017594 <__sfputs_r+0xa>
 80175ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080175b0 <_vfiprintf_r>:
 80175b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175b4:	460d      	mov	r5, r1
 80175b6:	b09d      	sub	sp, #116	@ 0x74
 80175b8:	4614      	mov	r4, r2
 80175ba:	4698      	mov	r8, r3
 80175bc:	4606      	mov	r6, r0
 80175be:	b118      	cbz	r0, 80175c8 <_vfiprintf_r+0x18>
 80175c0:	6a03      	ldr	r3, [r0, #32]
 80175c2:	b90b      	cbnz	r3, 80175c8 <_vfiprintf_r+0x18>
 80175c4:	f7ff fbfc 	bl	8016dc0 <__sinit>
 80175c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80175ca:	07d9      	lsls	r1, r3, #31
 80175cc:	d405      	bmi.n	80175da <_vfiprintf_r+0x2a>
 80175ce:	89ab      	ldrh	r3, [r5, #12]
 80175d0:	059a      	lsls	r2, r3, #22
 80175d2:	d402      	bmi.n	80175da <_vfiprintf_r+0x2a>
 80175d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80175d6:	f7ff fdd4 	bl	8017182 <__retarget_lock_acquire_recursive>
 80175da:	89ab      	ldrh	r3, [r5, #12]
 80175dc:	071b      	lsls	r3, r3, #28
 80175de:	d501      	bpl.n	80175e4 <_vfiprintf_r+0x34>
 80175e0:	692b      	ldr	r3, [r5, #16]
 80175e2:	b99b      	cbnz	r3, 801760c <_vfiprintf_r+0x5c>
 80175e4:	4629      	mov	r1, r5
 80175e6:	4630      	mov	r0, r6
 80175e8:	f000 fb84 	bl	8017cf4 <__swsetup_r>
 80175ec:	b170      	cbz	r0, 801760c <_vfiprintf_r+0x5c>
 80175ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80175f0:	07dc      	lsls	r4, r3, #31
 80175f2:	d504      	bpl.n	80175fe <_vfiprintf_r+0x4e>
 80175f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80175f8:	b01d      	add	sp, #116	@ 0x74
 80175fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175fe:	89ab      	ldrh	r3, [r5, #12]
 8017600:	0598      	lsls	r0, r3, #22
 8017602:	d4f7      	bmi.n	80175f4 <_vfiprintf_r+0x44>
 8017604:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017606:	f7ff fdbd 	bl	8017184 <__retarget_lock_release_recursive>
 801760a:	e7f3      	b.n	80175f4 <_vfiprintf_r+0x44>
 801760c:	2300      	movs	r3, #0
 801760e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017610:	2320      	movs	r3, #32
 8017612:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017616:	f8cd 800c 	str.w	r8, [sp, #12]
 801761a:	2330      	movs	r3, #48	@ 0x30
 801761c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80177cc <_vfiprintf_r+0x21c>
 8017620:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017624:	f04f 0901 	mov.w	r9, #1
 8017628:	4623      	mov	r3, r4
 801762a:	469a      	mov	sl, r3
 801762c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017630:	b10a      	cbz	r2, 8017636 <_vfiprintf_r+0x86>
 8017632:	2a25      	cmp	r2, #37	@ 0x25
 8017634:	d1f9      	bne.n	801762a <_vfiprintf_r+0x7a>
 8017636:	ebba 0b04 	subs.w	fp, sl, r4
 801763a:	d00b      	beq.n	8017654 <_vfiprintf_r+0xa4>
 801763c:	465b      	mov	r3, fp
 801763e:	4622      	mov	r2, r4
 8017640:	4629      	mov	r1, r5
 8017642:	4630      	mov	r0, r6
 8017644:	f7ff ffa1 	bl	801758a <__sfputs_r>
 8017648:	3001      	adds	r0, #1
 801764a:	f000 80a7 	beq.w	801779c <_vfiprintf_r+0x1ec>
 801764e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017650:	445a      	add	r2, fp
 8017652:	9209      	str	r2, [sp, #36]	@ 0x24
 8017654:	f89a 3000 	ldrb.w	r3, [sl]
 8017658:	2b00      	cmp	r3, #0
 801765a:	f000 809f 	beq.w	801779c <_vfiprintf_r+0x1ec>
 801765e:	2300      	movs	r3, #0
 8017660:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017664:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017668:	f10a 0a01 	add.w	sl, sl, #1
 801766c:	9304      	str	r3, [sp, #16]
 801766e:	9307      	str	r3, [sp, #28]
 8017670:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017674:	931a      	str	r3, [sp, #104]	@ 0x68
 8017676:	4654      	mov	r4, sl
 8017678:	2205      	movs	r2, #5
 801767a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801767e:	4853      	ldr	r0, [pc, #332]	@ (80177cc <_vfiprintf_r+0x21c>)
 8017680:	f7e8 fde6 	bl	8000250 <memchr>
 8017684:	9a04      	ldr	r2, [sp, #16]
 8017686:	b9d8      	cbnz	r0, 80176c0 <_vfiprintf_r+0x110>
 8017688:	06d1      	lsls	r1, r2, #27
 801768a:	bf44      	itt	mi
 801768c:	2320      	movmi	r3, #32
 801768e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017692:	0713      	lsls	r3, r2, #28
 8017694:	bf44      	itt	mi
 8017696:	232b      	movmi	r3, #43	@ 0x2b
 8017698:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801769c:	f89a 3000 	ldrb.w	r3, [sl]
 80176a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80176a2:	d015      	beq.n	80176d0 <_vfiprintf_r+0x120>
 80176a4:	9a07      	ldr	r2, [sp, #28]
 80176a6:	4654      	mov	r4, sl
 80176a8:	2000      	movs	r0, #0
 80176aa:	f04f 0c0a 	mov.w	ip, #10
 80176ae:	4621      	mov	r1, r4
 80176b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80176b4:	3b30      	subs	r3, #48	@ 0x30
 80176b6:	2b09      	cmp	r3, #9
 80176b8:	d94b      	bls.n	8017752 <_vfiprintf_r+0x1a2>
 80176ba:	b1b0      	cbz	r0, 80176ea <_vfiprintf_r+0x13a>
 80176bc:	9207      	str	r2, [sp, #28]
 80176be:	e014      	b.n	80176ea <_vfiprintf_r+0x13a>
 80176c0:	eba0 0308 	sub.w	r3, r0, r8
 80176c4:	fa09 f303 	lsl.w	r3, r9, r3
 80176c8:	4313      	orrs	r3, r2
 80176ca:	9304      	str	r3, [sp, #16]
 80176cc:	46a2      	mov	sl, r4
 80176ce:	e7d2      	b.n	8017676 <_vfiprintf_r+0xc6>
 80176d0:	9b03      	ldr	r3, [sp, #12]
 80176d2:	1d19      	adds	r1, r3, #4
 80176d4:	681b      	ldr	r3, [r3, #0]
 80176d6:	9103      	str	r1, [sp, #12]
 80176d8:	2b00      	cmp	r3, #0
 80176da:	bfbb      	ittet	lt
 80176dc:	425b      	neglt	r3, r3
 80176de:	f042 0202 	orrlt.w	r2, r2, #2
 80176e2:	9307      	strge	r3, [sp, #28]
 80176e4:	9307      	strlt	r3, [sp, #28]
 80176e6:	bfb8      	it	lt
 80176e8:	9204      	strlt	r2, [sp, #16]
 80176ea:	7823      	ldrb	r3, [r4, #0]
 80176ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80176ee:	d10a      	bne.n	8017706 <_vfiprintf_r+0x156>
 80176f0:	7863      	ldrb	r3, [r4, #1]
 80176f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80176f4:	d132      	bne.n	801775c <_vfiprintf_r+0x1ac>
 80176f6:	9b03      	ldr	r3, [sp, #12]
 80176f8:	1d1a      	adds	r2, r3, #4
 80176fa:	681b      	ldr	r3, [r3, #0]
 80176fc:	9203      	str	r2, [sp, #12]
 80176fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017702:	3402      	adds	r4, #2
 8017704:	9305      	str	r3, [sp, #20]
 8017706:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80177dc <_vfiprintf_r+0x22c>
 801770a:	7821      	ldrb	r1, [r4, #0]
 801770c:	2203      	movs	r2, #3
 801770e:	4650      	mov	r0, sl
 8017710:	f7e8 fd9e 	bl	8000250 <memchr>
 8017714:	b138      	cbz	r0, 8017726 <_vfiprintf_r+0x176>
 8017716:	9b04      	ldr	r3, [sp, #16]
 8017718:	eba0 000a 	sub.w	r0, r0, sl
 801771c:	2240      	movs	r2, #64	@ 0x40
 801771e:	4082      	lsls	r2, r0
 8017720:	4313      	orrs	r3, r2
 8017722:	3401      	adds	r4, #1
 8017724:	9304      	str	r3, [sp, #16]
 8017726:	f814 1b01 	ldrb.w	r1, [r4], #1
 801772a:	4829      	ldr	r0, [pc, #164]	@ (80177d0 <_vfiprintf_r+0x220>)
 801772c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017730:	2206      	movs	r2, #6
 8017732:	f7e8 fd8d 	bl	8000250 <memchr>
 8017736:	2800      	cmp	r0, #0
 8017738:	d03f      	beq.n	80177ba <_vfiprintf_r+0x20a>
 801773a:	4b26      	ldr	r3, [pc, #152]	@ (80177d4 <_vfiprintf_r+0x224>)
 801773c:	bb1b      	cbnz	r3, 8017786 <_vfiprintf_r+0x1d6>
 801773e:	9b03      	ldr	r3, [sp, #12]
 8017740:	3307      	adds	r3, #7
 8017742:	f023 0307 	bic.w	r3, r3, #7
 8017746:	3308      	adds	r3, #8
 8017748:	9303      	str	r3, [sp, #12]
 801774a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801774c:	443b      	add	r3, r7
 801774e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017750:	e76a      	b.n	8017628 <_vfiprintf_r+0x78>
 8017752:	fb0c 3202 	mla	r2, ip, r2, r3
 8017756:	460c      	mov	r4, r1
 8017758:	2001      	movs	r0, #1
 801775a:	e7a8      	b.n	80176ae <_vfiprintf_r+0xfe>
 801775c:	2300      	movs	r3, #0
 801775e:	3401      	adds	r4, #1
 8017760:	9305      	str	r3, [sp, #20]
 8017762:	4619      	mov	r1, r3
 8017764:	f04f 0c0a 	mov.w	ip, #10
 8017768:	4620      	mov	r0, r4
 801776a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801776e:	3a30      	subs	r2, #48	@ 0x30
 8017770:	2a09      	cmp	r2, #9
 8017772:	d903      	bls.n	801777c <_vfiprintf_r+0x1cc>
 8017774:	2b00      	cmp	r3, #0
 8017776:	d0c6      	beq.n	8017706 <_vfiprintf_r+0x156>
 8017778:	9105      	str	r1, [sp, #20]
 801777a:	e7c4      	b.n	8017706 <_vfiprintf_r+0x156>
 801777c:	fb0c 2101 	mla	r1, ip, r1, r2
 8017780:	4604      	mov	r4, r0
 8017782:	2301      	movs	r3, #1
 8017784:	e7f0      	b.n	8017768 <_vfiprintf_r+0x1b8>
 8017786:	ab03      	add	r3, sp, #12
 8017788:	9300      	str	r3, [sp, #0]
 801778a:	462a      	mov	r2, r5
 801778c:	4b12      	ldr	r3, [pc, #72]	@ (80177d8 <_vfiprintf_r+0x228>)
 801778e:	a904      	add	r1, sp, #16
 8017790:	4630      	mov	r0, r6
 8017792:	f3af 8000 	nop.w
 8017796:	4607      	mov	r7, r0
 8017798:	1c78      	adds	r0, r7, #1
 801779a:	d1d6      	bne.n	801774a <_vfiprintf_r+0x19a>
 801779c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801779e:	07d9      	lsls	r1, r3, #31
 80177a0:	d405      	bmi.n	80177ae <_vfiprintf_r+0x1fe>
 80177a2:	89ab      	ldrh	r3, [r5, #12]
 80177a4:	059a      	lsls	r2, r3, #22
 80177a6:	d402      	bmi.n	80177ae <_vfiprintf_r+0x1fe>
 80177a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80177aa:	f7ff fceb 	bl	8017184 <__retarget_lock_release_recursive>
 80177ae:	89ab      	ldrh	r3, [r5, #12]
 80177b0:	065b      	lsls	r3, r3, #25
 80177b2:	f53f af1f 	bmi.w	80175f4 <_vfiprintf_r+0x44>
 80177b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80177b8:	e71e      	b.n	80175f8 <_vfiprintf_r+0x48>
 80177ba:	ab03      	add	r3, sp, #12
 80177bc:	9300      	str	r3, [sp, #0]
 80177be:	462a      	mov	r2, r5
 80177c0:	4b05      	ldr	r3, [pc, #20]	@ (80177d8 <_vfiprintf_r+0x228>)
 80177c2:	a904      	add	r1, sp, #16
 80177c4:	4630      	mov	r0, r6
 80177c6:	f000 f879 	bl	80178bc <_printf_i>
 80177ca:	e7e4      	b.n	8017796 <_vfiprintf_r+0x1e6>
 80177cc:	08018cb4 	.word	0x08018cb4
 80177d0:	08018cbe 	.word	0x08018cbe
 80177d4:	00000000 	.word	0x00000000
 80177d8:	0801758b 	.word	0x0801758b
 80177dc:	08018cba 	.word	0x08018cba

080177e0 <_printf_common>:
 80177e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80177e4:	4616      	mov	r6, r2
 80177e6:	4698      	mov	r8, r3
 80177e8:	688a      	ldr	r2, [r1, #8]
 80177ea:	690b      	ldr	r3, [r1, #16]
 80177ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80177f0:	4293      	cmp	r3, r2
 80177f2:	bfb8      	it	lt
 80177f4:	4613      	movlt	r3, r2
 80177f6:	6033      	str	r3, [r6, #0]
 80177f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80177fc:	4607      	mov	r7, r0
 80177fe:	460c      	mov	r4, r1
 8017800:	b10a      	cbz	r2, 8017806 <_printf_common+0x26>
 8017802:	3301      	adds	r3, #1
 8017804:	6033      	str	r3, [r6, #0]
 8017806:	6823      	ldr	r3, [r4, #0]
 8017808:	0699      	lsls	r1, r3, #26
 801780a:	bf42      	ittt	mi
 801780c:	6833      	ldrmi	r3, [r6, #0]
 801780e:	3302      	addmi	r3, #2
 8017810:	6033      	strmi	r3, [r6, #0]
 8017812:	6825      	ldr	r5, [r4, #0]
 8017814:	f015 0506 	ands.w	r5, r5, #6
 8017818:	d106      	bne.n	8017828 <_printf_common+0x48>
 801781a:	f104 0a19 	add.w	sl, r4, #25
 801781e:	68e3      	ldr	r3, [r4, #12]
 8017820:	6832      	ldr	r2, [r6, #0]
 8017822:	1a9b      	subs	r3, r3, r2
 8017824:	42ab      	cmp	r3, r5
 8017826:	dc26      	bgt.n	8017876 <_printf_common+0x96>
 8017828:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801782c:	6822      	ldr	r2, [r4, #0]
 801782e:	3b00      	subs	r3, #0
 8017830:	bf18      	it	ne
 8017832:	2301      	movne	r3, #1
 8017834:	0692      	lsls	r2, r2, #26
 8017836:	d42b      	bmi.n	8017890 <_printf_common+0xb0>
 8017838:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801783c:	4641      	mov	r1, r8
 801783e:	4638      	mov	r0, r7
 8017840:	47c8      	blx	r9
 8017842:	3001      	adds	r0, #1
 8017844:	d01e      	beq.n	8017884 <_printf_common+0xa4>
 8017846:	6823      	ldr	r3, [r4, #0]
 8017848:	6922      	ldr	r2, [r4, #16]
 801784a:	f003 0306 	and.w	r3, r3, #6
 801784e:	2b04      	cmp	r3, #4
 8017850:	bf02      	ittt	eq
 8017852:	68e5      	ldreq	r5, [r4, #12]
 8017854:	6833      	ldreq	r3, [r6, #0]
 8017856:	1aed      	subeq	r5, r5, r3
 8017858:	68a3      	ldr	r3, [r4, #8]
 801785a:	bf0c      	ite	eq
 801785c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017860:	2500      	movne	r5, #0
 8017862:	4293      	cmp	r3, r2
 8017864:	bfc4      	itt	gt
 8017866:	1a9b      	subgt	r3, r3, r2
 8017868:	18ed      	addgt	r5, r5, r3
 801786a:	2600      	movs	r6, #0
 801786c:	341a      	adds	r4, #26
 801786e:	42b5      	cmp	r5, r6
 8017870:	d11a      	bne.n	80178a8 <_printf_common+0xc8>
 8017872:	2000      	movs	r0, #0
 8017874:	e008      	b.n	8017888 <_printf_common+0xa8>
 8017876:	2301      	movs	r3, #1
 8017878:	4652      	mov	r2, sl
 801787a:	4641      	mov	r1, r8
 801787c:	4638      	mov	r0, r7
 801787e:	47c8      	blx	r9
 8017880:	3001      	adds	r0, #1
 8017882:	d103      	bne.n	801788c <_printf_common+0xac>
 8017884:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801788c:	3501      	adds	r5, #1
 801788e:	e7c6      	b.n	801781e <_printf_common+0x3e>
 8017890:	18e1      	adds	r1, r4, r3
 8017892:	1c5a      	adds	r2, r3, #1
 8017894:	2030      	movs	r0, #48	@ 0x30
 8017896:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801789a:	4422      	add	r2, r4
 801789c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80178a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80178a4:	3302      	adds	r3, #2
 80178a6:	e7c7      	b.n	8017838 <_printf_common+0x58>
 80178a8:	2301      	movs	r3, #1
 80178aa:	4622      	mov	r2, r4
 80178ac:	4641      	mov	r1, r8
 80178ae:	4638      	mov	r0, r7
 80178b0:	47c8      	blx	r9
 80178b2:	3001      	adds	r0, #1
 80178b4:	d0e6      	beq.n	8017884 <_printf_common+0xa4>
 80178b6:	3601      	adds	r6, #1
 80178b8:	e7d9      	b.n	801786e <_printf_common+0x8e>
	...

080178bc <_printf_i>:
 80178bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80178c0:	7e0f      	ldrb	r7, [r1, #24]
 80178c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80178c4:	2f78      	cmp	r7, #120	@ 0x78
 80178c6:	4691      	mov	r9, r2
 80178c8:	4680      	mov	r8, r0
 80178ca:	460c      	mov	r4, r1
 80178cc:	469a      	mov	sl, r3
 80178ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80178d2:	d807      	bhi.n	80178e4 <_printf_i+0x28>
 80178d4:	2f62      	cmp	r7, #98	@ 0x62
 80178d6:	d80a      	bhi.n	80178ee <_printf_i+0x32>
 80178d8:	2f00      	cmp	r7, #0
 80178da:	f000 80d2 	beq.w	8017a82 <_printf_i+0x1c6>
 80178de:	2f58      	cmp	r7, #88	@ 0x58
 80178e0:	f000 80b9 	beq.w	8017a56 <_printf_i+0x19a>
 80178e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80178e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80178ec:	e03a      	b.n	8017964 <_printf_i+0xa8>
 80178ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80178f2:	2b15      	cmp	r3, #21
 80178f4:	d8f6      	bhi.n	80178e4 <_printf_i+0x28>
 80178f6:	a101      	add	r1, pc, #4	@ (adr r1, 80178fc <_printf_i+0x40>)
 80178f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80178fc:	08017955 	.word	0x08017955
 8017900:	08017969 	.word	0x08017969
 8017904:	080178e5 	.word	0x080178e5
 8017908:	080178e5 	.word	0x080178e5
 801790c:	080178e5 	.word	0x080178e5
 8017910:	080178e5 	.word	0x080178e5
 8017914:	08017969 	.word	0x08017969
 8017918:	080178e5 	.word	0x080178e5
 801791c:	080178e5 	.word	0x080178e5
 8017920:	080178e5 	.word	0x080178e5
 8017924:	080178e5 	.word	0x080178e5
 8017928:	08017a69 	.word	0x08017a69
 801792c:	08017993 	.word	0x08017993
 8017930:	08017a23 	.word	0x08017a23
 8017934:	080178e5 	.word	0x080178e5
 8017938:	080178e5 	.word	0x080178e5
 801793c:	08017a8b 	.word	0x08017a8b
 8017940:	080178e5 	.word	0x080178e5
 8017944:	08017993 	.word	0x08017993
 8017948:	080178e5 	.word	0x080178e5
 801794c:	080178e5 	.word	0x080178e5
 8017950:	08017a2b 	.word	0x08017a2b
 8017954:	6833      	ldr	r3, [r6, #0]
 8017956:	1d1a      	adds	r2, r3, #4
 8017958:	681b      	ldr	r3, [r3, #0]
 801795a:	6032      	str	r2, [r6, #0]
 801795c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017960:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017964:	2301      	movs	r3, #1
 8017966:	e09d      	b.n	8017aa4 <_printf_i+0x1e8>
 8017968:	6833      	ldr	r3, [r6, #0]
 801796a:	6820      	ldr	r0, [r4, #0]
 801796c:	1d19      	adds	r1, r3, #4
 801796e:	6031      	str	r1, [r6, #0]
 8017970:	0606      	lsls	r6, r0, #24
 8017972:	d501      	bpl.n	8017978 <_printf_i+0xbc>
 8017974:	681d      	ldr	r5, [r3, #0]
 8017976:	e003      	b.n	8017980 <_printf_i+0xc4>
 8017978:	0645      	lsls	r5, r0, #25
 801797a:	d5fb      	bpl.n	8017974 <_printf_i+0xb8>
 801797c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017980:	2d00      	cmp	r5, #0
 8017982:	da03      	bge.n	801798c <_printf_i+0xd0>
 8017984:	232d      	movs	r3, #45	@ 0x2d
 8017986:	426d      	negs	r5, r5
 8017988:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801798c:	4859      	ldr	r0, [pc, #356]	@ (8017af4 <_printf_i+0x238>)
 801798e:	230a      	movs	r3, #10
 8017990:	e011      	b.n	80179b6 <_printf_i+0xfa>
 8017992:	6821      	ldr	r1, [r4, #0]
 8017994:	6833      	ldr	r3, [r6, #0]
 8017996:	0608      	lsls	r0, r1, #24
 8017998:	f853 5b04 	ldr.w	r5, [r3], #4
 801799c:	d402      	bmi.n	80179a4 <_printf_i+0xe8>
 801799e:	0649      	lsls	r1, r1, #25
 80179a0:	bf48      	it	mi
 80179a2:	b2ad      	uxthmi	r5, r5
 80179a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80179a6:	4853      	ldr	r0, [pc, #332]	@ (8017af4 <_printf_i+0x238>)
 80179a8:	6033      	str	r3, [r6, #0]
 80179aa:	bf14      	ite	ne
 80179ac:	230a      	movne	r3, #10
 80179ae:	2308      	moveq	r3, #8
 80179b0:	2100      	movs	r1, #0
 80179b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80179b6:	6866      	ldr	r6, [r4, #4]
 80179b8:	60a6      	str	r6, [r4, #8]
 80179ba:	2e00      	cmp	r6, #0
 80179bc:	bfa2      	ittt	ge
 80179be:	6821      	ldrge	r1, [r4, #0]
 80179c0:	f021 0104 	bicge.w	r1, r1, #4
 80179c4:	6021      	strge	r1, [r4, #0]
 80179c6:	b90d      	cbnz	r5, 80179cc <_printf_i+0x110>
 80179c8:	2e00      	cmp	r6, #0
 80179ca:	d04b      	beq.n	8017a64 <_printf_i+0x1a8>
 80179cc:	4616      	mov	r6, r2
 80179ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80179d2:	fb03 5711 	mls	r7, r3, r1, r5
 80179d6:	5dc7      	ldrb	r7, [r0, r7]
 80179d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80179dc:	462f      	mov	r7, r5
 80179de:	42bb      	cmp	r3, r7
 80179e0:	460d      	mov	r5, r1
 80179e2:	d9f4      	bls.n	80179ce <_printf_i+0x112>
 80179e4:	2b08      	cmp	r3, #8
 80179e6:	d10b      	bne.n	8017a00 <_printf_i+0x144>
 80179e8:	6823      	ldr	r3, [r4, #0]
 80179ea:	07df      	lsls	r7, r3, #31
 80179ec:	d508      	bpl.n	8017a00 <_printf_i+0x144>
 80179ee:	6923      	ldr	r3, [r4, #16]
 80179f0:	6861      	ldr	r1, [r4, #4]
 80179f2:	4299      	cmp	r1, r3
 80179f4:	bfde      	ittt	le
 80179f6:	2330      	movle	r3, #48	@ 0x30
 80179f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80179fc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8017a00:	1b92      	subs	r2, r2, r6
 8017a02:	6122      	str	r2, [r4, #16]
 8017a04:	f8cd a000 	str.w	sl, [sp]
 8017a08:	464b      	mov	r3, r9
 8017a0a:	aa03      	add	r2, sp, #12
 8017a0c:	4621      	mov	r1, r4
 8017a0e:	4640      	mov	r0, r8
 8017a10:	f7ff fee6 	bl	80177e0 <_printf_common>
 8017a14:	3001      	adds	r0, #1
 8017a16:	d14a      	bne.n	8017aae <_printf_i+0x1f2>
 8017a18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017a1c:	b004      	add	sp, #16
 8017a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a22:	6823      	ldr	r3, [r4, #0]
 8017a24:	f043 0320 	orr.w	r3, r3, #32
 8017a28:	6023      	str	r3, [r4, #0]
 8017a2a:	4833      	ldr	r0, [pc, #204]	@ (8017af8 <_printf_i+0x23c>)
 8017a2c:	2778      	movs	r7, #120	@ 0x78
 8017a2e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017a32:	6823      	ldr	r3, [r4, #0]
 8017a34:	6831      	ldr	r1, [r6, #0]
 8017a36:	061f      	lsls	r7, r3, #24
 8017a38:	f851 5b04 	ldr.w	r5, [r1], #4
 8017a3c:	d402      	bmi.n	8017a44 <_printf_i+0x188>
 8017a3e:	065f      	lsls	r7, r3, #25
 8017a40:	bf48      	it	mi
 8017a42:	b2ad      	uxthmi	r5, r5
 8017a44:	6031      	str	r1, [r6, #0]
 8017a46:	07d9      	lsls	r1, r3, #31
 8017a48:	bf44      	itt	mi
 8017a4a:	f043 0320 	orrmi.w	r3, r3, #32
 8017a4e:	6023      	strmi	r3, [r4, #0]
 8017a50:	b11d      	cbz	r5, 8017a5a <_printf_i+0x19e>
 8017a52:	2310      	movs	r3, #16
 8017a54:	e7ac      	b.n	80179b0 <_printf_i+0xf4>
 8017a56:	4827      	ldr	r0, [pc, #156]	@ (8017af4 <_printf_i+0x238>)
 8017a58:	e7e9      	b.n	8017a2e <_printf_i+0x172>
 8017a5a:	6823      	ldr	r3, [r4, #0]
 8017a5c:	f023 0320 	bic.w	r3, r3, #32
 8017a60:	6023      	str	r3, [r4, #0]
 8017a62:	e7f6      	b.n	8017a52 <_printf_i+0x196>
 8017a64:	4616      	mov	r6, r2
 8017a66:	e7bd      	b.n	80179e4 <_printf_i+0x128>
 8017a68:	6833      	ldr	r3, [r6, #0]
 8017a6a:	6825      	ldr	r5, [r4, #0]
 8017a6c:	6961      	ldr	r1, [r4, #20]
 8017a6e:	1d18      	adds	r0, r3, #4
 8017a70:	6030      	str	r0, [r6, #0]
 8017a72:	062e      	lsls	r6, r5, #24
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	d501      	bpl.n	8017a7c <_printf_i+0x1c0>
 8017a78:	6019      	str	r1, [r3, #0]
 8017a7a:	e002      	b.n	8017a82 <_printf_i+0x1c6>
 8017a7c:	0668      	lsls	r0, r5, #25
 8017a7e:	d5fb      	bpl.n	8017a78 <_printf_i+0x1bc>
 8017a80:	8019      	strh	r1, [r3, #0]
 8017a82:	2300      	movs	r3, #0
 8017a84:	6123      	str	r3, [r4, #16]
 8017a86:	4616      	mov	r6, r2
 8017a88:	e7bc      	b.n	8017a04 <_printf_i+0x148>
 8017a8a:	6833      	ldr	r3, [r6, #0]
 8017a8c:	1d1a      	adds	r2, r3, #4
 8017a8e:	6032      	str	r2, [r6, #0]
 8017a90:	681e      	ldr	r6, [r3, #0]
 8017a92:	6862      	ldr	r2, [r4, #4]
 8017a94:	2100      	movs	r1, #0
 8017a96:	4630      	mov	r0, r6
 8017a98:	f7e8 fbda 	bl	8000250 <memchr>
 8017a9c:	b108      	cbz	r0, 8017aa2 <_printf_i+0x1e6>
 8017a9e:	1b80      	subs	r0, r0, r6
 8017aa0:	6060      	str	r0, [r4, #4]
 8017aa2:	6863      	ldr	r3, [r4, #4]
 8017aa4:	6123      	str	r3, [r4, #16]
 8017aa6:	2300      	movs	r3, #0
 8017aa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017aac:	e7aa      	b.n	8017a04 <_printf_i+0x148>
 8017aae:	6923      	ldr	r3, [r4, #16]
 8017ab0:	4632      	mov	r2, r6
 8017ab2:	4649      	mov	r1, r9
 8017ab4:	4640      	mov	r0, r8
 8017ab6:	47d0      	blx	sl
 8017ab8:	3001      	adds	r0, #1
 8017aba:	d0ad      	beq.n	8017a18 <_printf_i+0x15c>
 8017abc:	6823      	ldr	r3, [r4, #0]
 8017abe:	079b      	lsls	r3, r3, #30
 8017ac0:	d413      	bmi.n	8017aea <_printf_i+0x22e>
 8017ac2:	68e0      	ldr	r0, [r4, #12]
 8017ac4:	9b03      	ldr	r3, [sp, #12]
 8017ac6:	4298      	cmp	r0, r3
 8017ac8:	bfb8      	it	lt
 8017aca:	4618      	movlt	r0, r3
 8017acc:	e7a6      	b.n	8017a1c <_printf_i+0x160>
 8017ace:	2301      	movs	r3, #1
 8017ad0:	4632      	mov	r2, r6
 8017ad2:	4649      	mov	r1, r9
 8017ad4:	4640      	mov	r0, r8
 8017ad6:	47d0      	blx	sl
 8017ad8:	3001      	adds	r0, #1
 8017ada:	d09d      	beq.n	8017a18 <_printf_i+0x15c>
 8017adc:	3501      	adds	r5, #1
 8017ade:	68e3      	ldr	r3, [r4, #12]
 8017ae0:	9903      	ldr	r1, [sp, #12]
 8017ae2:	1a5b      	subs	r3, r3, r1
 8017ae4:	42ab      	cmp	r3, r5
 8017ae6:	dcf2      	bgt.n	8017ace <_printf_i+0x212>
 8017ae8:	e7eb      	b.n	8017ac2 <_printf_i+0x206>
 8017aea:	2500      	movs	r5, #0
 8017aec:	f104 0619 	add.w	r6, r4, #25
 8017af0:	e7f5      	b.n	8017ade <_printf_i+0x222>
 8017af2:	bf00      	nop
 8017af4:	08018cc5 	.word	0x08018cc5
 8017af8:	08018cd6 	.word	0x08018cd6

08017afc <__sflush_r>:
 8017afc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b04:	0716      	lsls	r6, r2, #28
 8017b06:	4605      	mov	r5, r0
 8017b08:	460c      	mov	r4, r1
 8017b0a:	d454      	bmi.n	8017bb6 <__sflush_r+0xba>
 8017b0c:	684b      	ldr	r3, [r1, #4]
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	dc02      	bgt.n	8017b18 <__sflush_r+0x1c>
 8017b12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	dd48      	ble.n	8017baa <__sflush_r+0xae>
 8017b18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017b1a:	2e00      	cmp	r6, #0
 8017b1c:	d045      	beq.n	8017baa <__sflush_r+0xae>
 8017b1e:	2300      	movs	r3, #0
 8017b20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017b24:	682f      	ldr	r7, [r5, #0]
 8017b26:	6a21      	ldr	r1, [r4, #32]
 8017b28:	602b      	str	r3, [r5, #0]
 8017b2a:	d030      	beq.n	8017b8e <__sflush_r+0x92>
 8017b2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017b2e:	89a3      	ldrh	r3, [r4, #12]
 8017b30:	0759      	lsls	r1, r3, #29
 8017b32:	d505      	bpl.n	8017b40 <__sflush_r+0x44>
 8017b34:	6863      	ldr	r3, [r4, #4]
 8017b36:	1ad2      	subs	r2, r2, r3
 8017b38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017b3a:	b10b      	cbz	r3, 8017b40 <__sflush_r+0x44>
 8017b3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017b3e:	1ad2      	subs	r2, r2, r3
 8017b40:	2300      	movs	r3, #0
 8017b42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017b44:	6a21      	ldr	r1, [r4, #32]
 8017b46:	4628      	mov	r0, r5
 8017b48:	47b0      	blx	r6
 8017b4a:	1c43      	adds	r3, r0, #1
 8017b4c:	89a3      	ldrh	r3, [r4, #12]
 8017b4e:	d106      	bne.n	8017b5e <__sflush_r+0x62>
 8017b50:	6829      	ldr	r1, [r5, #0]
 8017b52:	291d      	cmp	r1, #29
 8017b54:	d82b      	bhi.n	8017bae <__sflush_r+0xb2>
 8017b56:	4a2a      	ldr	r2, [pc, #168]	@ (8017c00 <__sflush_r+0x104>)
 8017b58:	410a      	asrs	r2, r1
 8017b5a:	07d6      	lsls	r6, r2, #31
 8017b5c:	d427      	bmi.n	8017bae <__sflush_r+0xb2>
 8017b5e:	2200      	movs	r2, #0
 8017b60:	6062      	str	r2, [r4, #4]
 8017b62:	04d9      	lsls	r1, r3, #19
 8017b64:	6922      	ldr	r2, [r4, #16]
 8017b66:	6022      	str	r2, [r4, #0]
 8017b68:	d504      	bpl.n	8017b74 <__sflush_r+0x78>
 8017b6a:	1c42      	adds	r2, r0, #1
 8017b6c:	d101      	bne.n	8017b72 <__sflush_r+0x76>
 8017b6e:	682b      	ldr	r3, [r5, #0]
 8017b70:	b903      	cbnz	r3, 8017b74 <__sflush_r+0x78>
 8017b72:	6560      	str	r0, [r4, #84]	@ 0x54
 8017b74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017b76:	602f      	str	r7, [r5, #0]
 8017b78:	b1b9      	cbz	r1, 8017baa <__sflush_r+0xae>
 8017b7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017b7e:	4299      	cmp	r1, r3
 8017b80:	d002      	beq.n	8017b88 <__sflush_r+0x8c>
 8017b82:	4628      	mov	r0, r5
 8017b84:	f7ff fb40 	bl	8017208 <_free_r>
 8017b88:	2300      	movs	r3, #0
 8017b8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8017b8c:	e00d      	b.n	8017baa <__sflush_r+0xae>
 8017b8e:	2301      	movs	r3, #1
 8017b90:	4628      	mov	r0, r5
 8017b92:	47b0      	blx	r6
 8017b94:	4602      	mov	r2, r0
 8017b96:	1c50      	adds	r0, r2, #1
 8017b98:	d1c9      	bne.n	8017b2e <__sflush_r+0x32>
 8017b9a:	682b      	ldr	r3, [r5, #0]
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d0c6      	beq.n	8017b2e <__sflush_r+0x32>
 8017ba0:	2b1d      	cmp	r3, #29
 8017ba2:	d001      	beq.n	8017ba8 <__sflush_r+0xac>
 8017ba4:	2b16      	cmp	r3, #22
 8017ba6:	d11e      	bne.n	8017be6 <__sflush_r+0xea>
 8017ba8:	602f      	str	r7, [r5, #0]
 8017baa:	2000      	movs	r0, #0
 8017bac:	e022      	b.n	8017bf4 <__sflush_r+0xf8>
 8017bae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017bb2:	b21b      	sxth	r3, r3
 8017bb4:	e01b      	b.n	8017bee <__sflush_r+0xf2>
 8017bb6:	690f      	ldr	r7, [r1, #16]
 8017bb8:	2f00      	cmp	r7, #0
 8017bba:	d0f6      	beq.n	8017baa <__sflush_r+0xae>
 8017bbc:	0793      	lsls	r3, r2, #30
 8017bbe:	680e      	ldr	r6, [r1, #0]
 8017bc0:	bf08      	it	eq
 8017bc2:	694b      	ldreq	r3, [r1, #20]
 8017bc4:	600f      	str	r7, [r1, #0]
 8017bc6:	bf18      	it	ne
 8017bc8:	2300      	movne	r3, #0
 8017bca:	eba6 0807 	sub.w	r8, r6, r7
 8017bce:	608b      	str	r3, [r1, #8]
 8017bd0:	f1b8 0f00 	cmp.w	r8, #0
 8017bd4:	dde9      	ble.n	8017baa <__sflush_r+0xae>
 8017bd6:	6a21      	ldr	r1, [r4, #32]
 8017bd8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017bda:	4643      	mov	r3, r8
 8017bdc:	463a      	mov	r2, r7
 8017bde:	4628      	mov	r0, r5
 8017be0:	47b0      	blx	r6
 8017be2:	2800      	cmp	r0, #0
 8017be4:	dc08      	bgt.n	8017bf8 <__sflush_r+0xfc>
 8017be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017bea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017bee:	81a3      	strh	r3, [r4, #12]
 8017bf0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017bf8:	4407      	add	r7, r0
 8017bfa:	eba8 0800 	sub.w	r8, r8, r0
 8017bfe:	e7e7      	b.n	8017bd0 <__sflush_r+0xd4>
 8017c00:	dfbffffe 	.word	0xdfbffffe

08017c04 <_fflush_r>:
 8017c04:	b538      	push	{r3, r4, r5, lr}
 8017c06:	690b      	ldr	r3, [r1, #16]
 8017c08:	4605      	mov	r5, r0
 8017c0a:	460c      	mov	r4, r1
 8017c0c:	b913      	cbnz	r3, 8017c14 <_fflush_r+0x10>
 8017c0e:	2500      	movs	r5, #0
 8017c10:	4628      	mov	r0, r5
 8017c12:	bd38      	pop	{r3, r4, r5, pc}
 8017c14:	b118      	cbz	r0, 8017c1e <_fflush_r+0x1a>
 8017c16:	6a03      	ldr	r3, [r0, #32]
 8017c18:	b90b      	cbnz	r3, 8017c1e <_fflush_r+0x1a>
 8017c1a:	f7ff f8d1 	bl	8016dc0 <__sinit>
 8017c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d0f3      	beq.n	8017c0e <_fflush_r+0xa>
 8017c26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017c28:	07d0      	lsls	r0, r2, #31
 8017c2a:	d404      	bmi.n	8017c36 <_fflush_r+0x32>
 8017c2c:	0599      	lsls	r1, r3, #22
 8017c2e:	d402      	bmi.n	8017c36 <_fflush_r+0x32>
 8017c30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017c32:	f7ff faa6 	bl	8017182 <__retarget_lock_acquire_recursive>
 8017c36:	4628      	mov	r0, r5
 8017c38:	4621      	mov	r1, r4
 8017c3a:	f7ff ff5f 	bl	8017afc <__sflush_r>
 8017c3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017c40:	07da      	lsls	r2, r3, #31
 8017c42:	4605      	mov	r5, r0
 8017c44:	d4e4      	bmi.n	8017c10 <_fflush_r+0xc>
 8017c46:	89a3      	ldrh	r3, [r4, #12]
 8017c48:	059b      	lsls	r3, r3, #22
 8017c4a:	d4e1      	bmi.n	8017c10 <_fflush_r+0xc>
 8017c4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017c4e:	f7ff fa99 	bl	8017184 <__retarget_lock_release_recursive>
 8017c52:	e7dd      	b.n	8017c10 <_fflush_r+0xc>

08017c54 <fiprintf>:
 8017c54:	b40e      	push	{r1, r2, r3}
 8017c56:	b503      	push	{r0, r1, lr}
 8017c58:	4601      	mov	r1, r0
 8017c5a:	ab03      	add	r3, sp, #12
 8017c5c:	4805      	ldr	r0, [pc, #20]	@ (8017c74 <fiprintf+0x20>)
 8017c5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017c62:	6800      	ldr	r0, [r0, #0]
 8017c64:	9301      	str	r3, [sp, #4]
 8017c66:	f7ff fca3 	bl	80175b0 <_vfiprintf_r>
 8017c6a:	b002      	add	sp, #8
 8017c6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017c70:	b003      	add	sp, #12
 8017c72:	4770      	bx	lr
 8017c74:	200000c8 	.word	0x200000c8

08017c78 <__swbuf_r>:
 8017c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c7a:	460e      	mov	r6, r1
 8017c7c:	4614      	mov	r4, r2
 8017c7e:	4605      	mov	r5, r0
 8017c80:	b118      	cbz	r0, 8017c8a <__swbuf_r+0x12>
 8017c82:	6a03      	ldr	r3, [r0, #32]
 8017c84:	b90b      	cbnz	r3, 8017c8a <__swbuf_r+0x12>
 8017c86:	f7ff f89b 	bl	8016dc0 <__sinit>
 8017c8a:	69a3      	ldr	r3, [r4, #24]
 8017c8c:	60a3      	str	r3, [r4, #8]
 8017c8e:	89a3      	ldrh	r3, [r4, #12]
 8017c90:	071a      	lsls	r2, r3, #28
 8017c92:	d501      	bpl.n	8017c98 <__swbuf_r+0x20>
 8017c94:	6923      	ldr	r3, [r4, #16]
 8017c96:	b943      	cbnz	r3, 8017caa <__swbuf_r+0x32>
 8017c98:	4621      	mov	r1, r4
 8017c9a:	4628      	mov	r0, r5
 8017c9c:	f000 f82a 	bl	8017cf4 <__swsetup_r>
 8017ca0:	b118      	cbz	r0, 8017caa <__swbuf_r+0x32>
 8017ca2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8017ca6:	4638      	mov	r0, r7
 8017ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017caa:	6823      	ldr	r3, [r4, #0]
 8017cac:	6922      	ldr	r2, [r4, #16]
 8017cae:	1a98      	subs	r0, r3, r2
 8017cb0:	6963      	ldr	r3, [r4, #20]
 8017cb2:	b2f6      	uxtb	r6, r6
 8017cb4:	4283      	cmp	r3, r0
 8017cb6:	4637      	mov	r7, r6
 8017cb8:	dc05      	bgt.n	8017cc6 <__swbuf_r+0x4e>
 8017cba:	4621      	mov	r1, r4
 8017cbc:	4628      	mov	r0, r5
 8017cbe:	f7ff ffa1 	bl	8017c04 <_fflush_r>
 8017cc2:	2800      	cmp	r0, #0
 8017cc4:	d1ed      	bne.n	8017ca2 <__swbuf_r+0x2a>
 8017cc6:	68a3      	ldr	r3, [r4, #8]
 8017cc8:	3b01      	subs	r3, #1
 8017cca:	60a3      	str	r3, [r4, #8]
 8017ccc:	6823      	ldr	r3, [r4, #0]
 8017cce:	1c5a      	adds	r2, r3, #1
 8017cd0:	6022      	str	r2, [r4, #0]
 8017cd2:	701e      	strb	r6, [r3, #0]
 8017cd4:	6962      	ldr	r2, [r4, #20]
 8017cd6:	1c43      	adds	r3, r0, #1
 8017cd8:	429a      	cmp	r2, r3
 8017cda:	d004      	beq.n	8017ce6 <__swbuf_r+0x6e>
 8017cdc:	89a3      	ldrh	r3, [r4, #12]
 8017cde:	07db      	lsls	r3, r3, #31
 8017ce0:	d5e1      	bpl.n	8017ca6 <__swbuf_r+0x2e>
 8017ce2:	2e0a      	cmp	r6, #10
 8017ce4:	d1df      	bne.n	8017ca6 <__swbuf_r+0x2e>
 8017ce6:	4621      	mov	r1, r4
 8017ce8:	4628      	mov	r0, r5
 8017cea:	f7ff ff8b 	bl	8017c04 <_fflush_r>
 8017cee:	2800      	cmp	r0, #0
 8017cf0:	d0d9      	beq.n	8017ca6 <__swbuf_r+0x2e>
 8017cf2:	e7d6      	b.n	8017ca2 <__swbuf_r+0x2a>

08017cf4 <__swsetup_r>:
 8017cf4:	b538      	push	{r3, r4, r5, lr}
 8017cf6:	4b29      	ldr	r3, [pc, #164]	@ (8017d9c <__swsetup_r+0xa8>)
 8017cf8:	4605      	mov	r5, r0
 8017cfa:	6818      	ldr	r0, [r3, #0]
 8017cfc:	460c      	mov	r4, r1
 8017cfe:	b118      	cbz	r0, 8017d08 <__swsetup_r+0x14>
 8017d00:	6a03      	ldr	r3, [r0, #32]
 8017d02:	b90b      	cbnz	r3, 8017d08 <__swsetup_r+0x14>
 8017d04:	f7ff f85c 	bl	8016dc0 <__sinit>
 8017d08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d0c:	0719      	lsls	r1, r3, #28
 8017d0e:	d422      	bmi.n	8017d56 <__swsetup_r+0x62>
 8017d10:	06da      	lsls	r2, r3, #27
 8017d12:	d407      	bmi.n	8017d24 <__swsetup_r+0x30>
 8017d14:	2209      	movs	r2, #9
 8017d16:	602a      	str	r2, [r5, #0]
 8017d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017d1c:	81a3      	strh	r3, [r4, #12]
 8017d1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017d22:	e033      	b.n	8017d8c <__swsetup_r+0x98>
 8017d24:	0758      	lsls	r0, r3, #29
 8017d26:	d512      	bpl.n	8017d4e <__swsetup_r+0x5a>
 8017d28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017d2a:	b141      	cbz	r1, 8017d3e <__swsetup_r+0x4a>
 8017d2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017d30:	4299      	cmp	r1, r3
 8017d32:	d002      	beq.n	8017d3a <__swsetup_r+0x46>
 8017d34:	4628      	mov	r0, r5
 8017d36:	f7ff fa67 	bl	8017208 <_free_r>
 8017d3a:	2300      	movs	r3, #0
 8017d3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8017d3e:	89a3      	ldrh	r3, [r4, #12]
 8017d40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017d44:	81a3      	strh	r3, [r4, #12]
 8017d46:	2300      	movs	r3, #0
 8017d48:	6063      	str	r3, [r4, #4]
 8017d4a:	6923      	ldr	r3, [r4, #16]
 8017d4c:	6023      	str	r3, [r4, #0]
 8017d4e:	89a3      	ldrh	r3, [r4, #12]
 8017d50:	f043 0308 	orr.w	r3, r3, #8
 8017d54:	81a3      	strh	r3, [r4, #12]
 8017d56:	6923      	ldr	r3, [r4, #16]
 8017d58:	b94b      	cbnz	r3, 8017d6e <__swsetup_r+0x7a>
 8017d5a:	89a3      	ldrh	r3, [r4, #12]
 8017d5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017d60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017d64:	d003      	beq.n	8017d6e <__swsetup_r+0x7a>
 8017d66:	4621      	mov	r1, r4
 8017d68:	4628      	mov	r0, r5
 8017d6a:	f000 f846 	bl	8017dfa <__smakebuf_r>
 8017d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d72:	f013 0201 	ands.w	r2, r3, #1
 8017d76:	d00a      	beq.n	8017d8e <__swsetup_r+0x9a>
 8017d78:	2200      	movs	r2, #0
 8017d7a:	60a2      	str	r2, [r4, #8]
 8017d7c:	6962      	ldr	r2, [r4, #20]
 8017d7e:	4252      	negs	r2, r2
 8017d80:	61a2      	str	r2, [r4, #24]
 8017d82:	6922      	ldr	r2, [r4, #16]
 8017d84:	b942      	cbnz	r2, 8017d98 <__swsetup_r+0xa4>
 8017d86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017d8a:	d1c5      	bne.n	8017d18 <__swsetup_r+0x24>
 8017d8c:	bd38      	pop	{r3, r4, r5, pc}
 8017d8e:	0799      	lsls	r1, r3, #30
 8017d90:	bf58      	it	pl
 8017d92:	6962      	ldrpl	r2, [r4, #20]
 8017d94:	60a2      	str	r2, [r4, #8]
 8017d96:	e7f4      	b.n	8017d82 <__swsetup_r+0x8e>
 8017d98:	2000      	movs	r0, #0
 8017d9a:	e7f7      	b.n	8017d8c <__swsetup_r+0x98>
 8017d9c:	200000c8 	.word	0x200000c8

08017da0 <abort>:
 8017da0:	b508      	push	{r3, lr}
 8017da2:	2006      	movs	r0, #6
 8017da4:	f000 f88e 	bl	8017ec4 <raise>
 8017da8:	2001      	movs	r0, #1
 8017daa:	f7ea f899 	bl	8001ee0 <_exit>

08017dae <__swhatbuf_r>:
 8017dae:	b570      	push	{r4, r5, r6, lr}
 8017db0:	460c      	mov	r4, r1
 8017db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017db6:	2900      	cmp	r1, #0
 8017db8:	b096      	sub	sp, #88	@ 0x58
 8017dba:	4615      	mov	r5, r2
 8017dbc:	461e      	mov	r6, r3
 8017dbe:	da0d      	bge.n	8017ddc <__swhatbuf_r+0x2e>
 8017dc0:	89a3      	ldrh	r3, [r4, #12]
 8017dc2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017dc6:	f04f 0100 	mov.w	r1, #0
 8017dca:	bf14      	ite	ne
 8017dcc:	2340      	movne	r3, #64	@ 0x40
 8017dce:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017dd2:	2000      	movs	r0, #0
 8017dd4:	6031      	str	r1, [r6, #0]
 8017dd6:	602b      	str	r3, [r5, #0]
 8017dd8:	b016      	add	sp, #88	@ 0x58
 8017dda:	bd70      	pop	{r4, r5, r6, pc}
 8017ddc:	466a      	mov	r2, sp
 8017dde:	f000 f879 	bl	8017ed4 <_fstat_r>
 8017de2:	2800      	cmp	r0, #0
 8017de4:	dbec      	blt.n	8017dc0 <__swhatbuf_r+0x12>
 8017de6:	9901      	ldr	r1, [sp, #4]
 8017de8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017dec:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017df0:	4259      	negs	r1, r3
 8017df2:	4159      	adcs	r1, r3
 8017df4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017df8:	e7eb      	b.n	8017dd2 <__swhatbuf_r+0x24>

08017dfa <__smakebuf_r>:
 8017dfa:	898b      	ldrh	r3, [r1, #12]
 8017dfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017dfe:	079d      	lsls	r5, r3, #30
 8017e00:	4606      	mov	r6, r0
 8017e02:	460c      	mov	r4, r1
 8017e04:	d507      	bpl.n	8017e16 <__smakebuf_r+0x1c>
 8017e06:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017e0a:	6023      	str	r3, [r4, #0]
 8017e0c:	6123      	str	r3, [r4, #16]
 8017e0e:	2301      	movs	r3, #1
 8017e10:	6163      	str	r3, [r4, #20]
 8017e12:	b003      	add	sp, #12
 8017e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e16:	ab01      	add	r3, sp, #4
 8017e18:	466a      	mov	r2, sp
 8017e1a:	f7ff ffc8 	bl	8017dae <__swhatbuf_r>
 8017e1e:	9f00      	ldr	r7, [sp, #0]
 8017e20:	4605      	mov	r5, r0
 8017e22:	4639      	mov	r1, r7
 8017e24:	4630      	mov	r0, r6
 8017e26:	f7fe fd99 	bl	801695c <_malloc_r>
 8017e2a:	b948      	cbnz	r0, 8017e40 <__smakebuf_r+0x46>
 8017e2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017e30:	059a      	lsls	r2, r3, #22
 8017e32:	d4ee      	bmi.n	8017e12 <__smakebuf_r+0x18>
 8017e34:	f023 0303 	bic.w	r3, r3, #3
 8017e38:	f043 0302 	orr.w	r3, r3, #2
 8017e3c:	81a3      	strh	r3, [r4, #12]
 8017e3e:	e7e2      	b.n	8017e06 <__smakebuf_r+0xc>
 8017e40:	89a3      	ldrh	r3, [r4, #12]
 8017e42:	6020      	str	r0, [r4, #0]
 8017e44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017e48:	81a3      	strh	r3, [r4, #12]
 8017e4a:	9b01      	ldr	r3, [sp, #4]
 8017e4c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017e50:	b15b      	cbz	r3, 8017e6a <__smakebuf_r+0x70>
 8017e52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017e56:	4630      	mov	r0, r6
 8017e58:	f000 f84e 	bl	8017ef8 <_isatty_r>
 8017e5c:	b128      	cbz	r0, 8017e6a <__smakebuf_r+0x70>
 8017e5e:	89a3      	ldrh	r3, [r4, #12]
 8017e60:	f023 0303 	bic.w	r3, r3, #3
 8017e64:	f043 0301 	orr.w	r3, r3, #1
 8017e68:	81a3      	strh	r3, [r4, #12]
 8017e6a:	89a3      	ldrh	r3, [r4, #12]
 8017e6c:	431d      	orrs	r5, r3
 8017e6e:	81a5      	strh	r5, [r4, #12]
 8017e70:	e7cf      	b.n	8017e12 <__smakebuf_r+0x18>

08017e72 <_raise_r>:
 8017e72:	291f      	cmp	r1, #31
 8017e74:	b538      	push	{r3, r4, r5, lr}
 8017e76:	4605      	mov	r5, r0
 8017e78:	460c      	mov	r4, r1
 8017e7a:	d904      	bls.n	8017e86 <_raise_r+0x14>
 8017e7c:	2316      	movs	r3, #22
 8017e7e:	6003      	str	r3, [r0, #0]
 8017e80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017e84:	bd38      	pop	{r3, r4, r5, pc}
 8017e86:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017e88:	b112      	cbz	r2, 8017e90 <_raise_r+0x1e>
 8017e8a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017e8e:	b94b      	cbnz	r3, 8017ea4 <_raise_r+0x32>
 8017e90:	4628      	mov	r0, r5
 8017e92:	f000 f853 	bl	8017f3c <_getpid_r>
 8017e96:	4622      	mov	r2, r4
 8017e98:	4601      	mov	r1, r0
 8017e9a:	4628      	mov	r0, r5
 8017e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017ea0:	f000 b83a 	b.w	8017f18 <_kill_r>
 8017ea4:	2b01      	cmp	r3, #1
 8017ea6:	d00a      	beq.n	8017ebe <_raise_r+0x4c>
 8017ea8:	1c59      	adds	r1, r3, #1
 8017eaa:	d103      	bne.n	8017eb4 <_raise_r+0x42>
 8017eac:	2316      	movs	r3, #22
 8017eae:	6003      	str	r3, [r0, #0]
 8017eb0:	2001      	movs	r0, #1
 8017eb2:	e7e7      	b.n	8017e84 <_raise_r+0x12>
 8017eb4:	2100      	movs	r1, #0
 8017eb6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017eba:	4620      	mov	r0, r4
 8017ebc:	4798      	blx	r3
 8017ebe:	2000      	movs	r0, #0
 8017ec0:	e7e0      	b.n	8017e84 <_raise_r+0x12>
	...

08017ec4 <raise>:
 8017ec4:	4b02      	ldr	r3, [pc, #8]	@ (8017ed0 <raise+0xc>)
 8017ec6:	4601      	mov	r1, r0
 8017ec8:	6818      	ldr	r0, [r3, #0]
 8017eca:	f7ff bfd2 	b.w	8017e72 <_raise_r>
 8017ece:	bf00      	nop
 8017ed0:	200000c8 	.word	0x200000c8

08017ed4 <_fstat_r>:
 8017ed4:	b538      	push	{r3, r4, r5, lr}
 8017ed6:	4d07      	ldr	r5, [pc, #28]	@ (8017ef4 <_fstat_r+0x20>)
 8017ed8:	2300      	movs	r3, #0
 8017eda:	4604      	mov	r4, r0
 8017edc:	4608      	mov	r0, r1
 8017ede:	4611      	mov	r1, r2
 8017ee0:	602b      	str	r3, [r5, #0]
 8017ee2:	f7ea f84d 	bl	8001f80 <_fstat>
 8017ee6:	1c43      	adds	r3, r0, #1
 8017ee8:	d102      	bne.n	8017ef0 <_fstat_r+0x1c>
 8017eea:	682b      	ldr	r3, [r5, #0]
 8017eec:	b103      	cbz	r3, 8017ef0 <_fstat_r+0x1c>
 8017eee:	6023      	str	r3, [r4, #0]
 8017ef0:	bd38      	pop	{r3, r4, r5, pc}
 8017ef2:	bf00      	nop
 8017ef4:	2000adcc 	.word	0x2000adcc

08017ef8 <_isatty_r>:
 8017ef8:	b538      	push	{r3, r4, r5, lr}
 8017efa:	4d06      	ldr	r5, [pc, #24]	@ (8017f14 <_isatty_r+0x1c>)
 8017efc:	2300      	movs	r3, #0
 8017efe:	4604      	mov	r4, r0
 8017f00:	4608      	mov	r0, r1
 8017f02:	602b      	str	r3, [r5, #0]
 8017f04:	f7ea f84c 	bl	8001fa0 <_isatty>
 8017f08:	1c43      	adds	r3, r0, #1
 8017f0a:	d102      	bne.n	8017f12 <_isatty_r+0x1a>
 8017f0c:	682b      	ldr	r3, [r5, #0]
 8017f0e:	b103      	cbz	r3, 8017f12 <_isatty_r+0x1a>
 8017f10:	6023      	str	r3, [r4, #0]
 8017f12:	bd38      	pop	{r3, r4, r5, pc}
 8017f14:	2000adcc 	.word	0x2000adcc

08017f18 <_kill_r>:
 8017f18:	b538      	push	{r3, r4, r5, lr}
 8017f1a:	4d07      	ldr	r5, [pc, #28]	@ (8017f38 <_kill_r+0x20>)
 8017f1c:	2300      	movs	r3, #0
 8017f1e:	4604      	mov	r4, r0
 8017f20:	4608      	mov	r0, r1
 8017f22:	4611      	mov	r1, r2
 8017f24:	602b      	str	r3, [r5, #0]
 8017f26:	f7e9 ffcb 	bl	8001ec0 <_kill>
 8017f2a:	1c43      	adds	r3, r0, #1
 8017f2c:	d102      	bne.n	8017f34 <_kill_r+0x1c>
 8017f2e:	682b      	ldr	r3, [r5, #0]
 8017f30:	b103      	cbz	r3, 8017f34 <_kill_r+0x1c>
 8017f32:	6023      	str	r3, [r4, #0]
 8017f34:	bd38      	pop	{r3, r4, r5, pc}
 8017f36:	bf00      	nop
 8017f38:	2000adcc 	.word	0x2000adcc

08017f3c <_getpid_r>:
 8017f3c:	f7e9 bfb8 	b.w	8001eb0 <_getpid>

08017f40 <_init>:
 8017f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f42:	bf00      	nop
 8017f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017f46:	bc08      	pop	{r3}
 8017f48:	469e      	mov	lr, r3
 8017f4a:	4770      	bx	lr

08017f4c <_fini>:
 8017f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f4e:	bf00      	nop
 8017f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017f52:	bc08      	pop	{r3}
 8017f54:	469e      	mov	lr, r3
 8017f56:	4770      	bx	lr
