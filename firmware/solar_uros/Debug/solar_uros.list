
solar_uros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001894c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e78  08018b30  08018b30  00019b30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080199a8  080199a8  0001b110  2**0
                  CONTENTS
  4 .ARM          00000008  080199a8  080199a8  0001a9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080199b0  080199b0  0001b110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080199b0  080199b0  0001a9b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080199b8  080199b8  0001a9b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000110  20000000  080199bc  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ad74  20000110  08019acc  0001b110  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000ae84  08019acc  0001be84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b110  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022352  00000000  00000000  0001b140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004834  00000000  00000000  0003d492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ae8  00000000  00000000  00041cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014ce  00000000  00000000  000437b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b7c7  00000000  00000000  00044c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ffb4  00000000  00000000  00070445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001127d8  00000000  00000000  000903f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001a2bd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008000  00000000  00000000  001a2c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001aac48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000110 	.word	0x20000110
 80001fc:	00000000 	.word	0x00000000
 8000200:	08018b14 	.word	0x08018b14

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000114 	.word	0x20000114
 800021c:	08018b14 	.word	0x08018b14

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__aeabi_d2uiz>:
 8000a8c:	004a      	lsls	r2, r1, #1
 8000a8e:	d211      	bcs.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a94:	d211      	bcs.n	8000aba <__aeabi_d2uiz+0x2e>
 8000a96:	d50d      	bpl.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a98:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d40e      	bmi.n	8000ac0 <__aeabi_d2uiz+0x34>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d102      	bne.n	8000ac6 <__aeabi_d2uiz+0x3a>
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac4:	4770      	bx	lr
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	4770      	bx	lr

08000acc <__aeabi_ldivmod>:
 8000acc:	b97b      	cbnz	r3, 8000aee <__aeabi_ldivmod+0x22>
 8000ace:	b972      	cbnz	r2, 8000aee <__aeabi_ldivmod+0x22>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bfbe      	ittt	lt
 8000ad4:	2000      	movlt	r0, #0
 8000ad6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ada:	e006      	blt.n	8000aea <__aeabi_ldivmod+0x1e>
 8000adc:	bf08      	it	eq
 8000ade:	2800      	cmpeq	r0, #0
 8000ae0:	bf1c      	itt	ne
 8000ae2:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ae6:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000aea:	f000 b9b5 	b.w	8000e58 <__aeabi_idiv0>
 8000aee:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000af6:	2900      	cmp	r1, #0
 8000af8:	db09      	blt.n	8000b0e <__aeabi_ldivmod+0x42>
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	db1a      	blt.n	8000b34 <__aeabi_ldivmod+0x68>
 8000afe:	f000 f84d 	bl	8000b9c <__udivmoddi4>
 8000b02:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b0a:	b004      	add	sp, #16
 8000b0c:	4770      	bx	lr
 8000b0e:	4240      	negs	r0, r0
 8000b10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	db1b      	blt.n	8000b50 <__aeabi_ldivmod+0x84>
 8000b18:	f000 f840 	bl	8000b9c <__udivmoddi4>
 8000b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b24:	b004      	add	sp, #16
 8000b26:	4240      	negs	r0, r0
 8000b28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b2c:	4252      	negs	r2, r2
 8000b2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b32:	4770      	bx	lr
 8000b34:	4252      	negs	r2, r2
 8000b36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b3a:	f000 f82f 	bl	8000b9c <__udivmoddi4>
 8000b3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b46:	b004      	add	sp, #16
 8000b48:	4240      	negs	r0, r0
 8000b4a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b4e:	4770      	bx	lr
 8000b50:	4252      	negs	r2, r2
 8000b52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b56:	f000 f821 	bl	8000b9c <__udivmoddi4>
 8000b5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b62:	b004      	add	sp, #16
 8000b64:	4252      	negs	r2, r2
 8000b66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b80:	f000 b96a 	b.w	8000e58 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	460c      	mov	r4, r1
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d14e      	bne.n	8000c46 <__udivmoddi4+0xaa>
 8000ba8:	4694      	mov	ip, r2
 8000baa:	458c      	cmp	ip, r1
 8000bac:	4686      	mov	lr, r0
 8000bae:	fab2 f282 	clz	r2, r2
 8000bb2:	d962      	bls.n	8000c7a <__udivmoddi4+0xde>
 8000bb4:	b14a      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb6:	f1c2 0320 	rsb	r3, r2, #32
 8000bba:	4091      	lsls	r1, r2
 8000bbc:	fa20 f303 	lsr.w	r3, r0, r3
 8000bc0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc4:	4319      	orrs	r1, r3
 8000bc6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bce:	fa1f f68c 	uxth.w	r6, ip
 8000bd2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bd6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bda:	fb07 1114 	mls	r1, r7, r4, r1
 8000bde:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be2:	fb04 f106 	mul.w	r1, r4, r6
 8000be6:	4299      	cmp	r1, r3
 8000be8:	d90a      	bls.n	8000c00 <__udivmoddi4+0x64>
 8000bea:	eb1c 0303 	adds.w	r3, ip, r3
 8000bee:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000bf2:	f080 8112 	bcs.w	8000e1a <__udivmoddi4+0x27e>
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	f240 810f 	bls.w	8000e1a <__udivmoddi4+0x27e>
 8000bfc:	3c02      	subs	r4, #2
 8000bfe:	4463      	add	r3, ip
 8000c00:	1a59      	subs	r1, r3, r1
 8000c02:	fa1f f38e 	uxth.w	r3, lr
 8000c06:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c0a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c12:	fb00 f606 	mul.w	r6, r0, r6
 8000c16:	429e      	cmp	r6, r3
 8000c18:	d90a      	bls.n	8000c30 <__udivmoddi4+0x94>
 8000c1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c22:	f080 80fc 	bcs.w	8000e1e <__udivmoddi4+0x282>
 8000c26:	429e      	cmp	r6, r3
 8000c28:	f240 80f9 	bls.w	8000e1e <__udivmoddi4+0x282>
 8000c2c:	4463      	add	r3, ip
 8000c2e:	3802      	subs	r0, #2
 8000c30:	1b9b      	subs	r3, r3, r6
 8000c32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c36:	2100      	movs	r1, #0
 8000c38:	b11d      	cbz	r5, 8000c42 <__udivmoddi4+0xa6>
 8000c3a:	40d3      	lsrs	r3, r2
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d905      	bls.n	8000c56 <__udivmoddi4+0xba>
 8000c4a:	b10d      	cbz	r5, 8000c50 <__udivmoddi4+0xb4>
 8000c4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c50:	2100      	movs	r1, #0
 8000c52:	4608      	mov	r0, r1
 8000c54:	e7f5      	b.n	8000c42 <__udivmoddi4+0xa6>
 8000c56:	fab3 f183 	clz	r1, r3
 8000c5a:	2900      	cmp	r1, #0
 8000c5c:	d146      	bne.n	8000cec <__udivmoddi4+0x150>
 8000c5e:	42a3      	cmp	r3, r4
 8000c60:	d302      	bcc.n	8000c68 <__udivmoddi4+0xcc>
 8000c62:	4290      	cmp	r0, r2
 8000c64:	f0c0 80f0 	bcc.w	8000e48 <__udivmoddi4+0x2ac>
 8000c68:	1a86      	subs	r6, r0, r2
 8000c6a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c6e:	2001      	movs	r0, #1
 8000c70:	2d00      	cmp	r5, #0
 8000c72:	d0e6      	beq.n	8000c42 <__udivmoddi4+0xa6>
 8000c74:	e9c5 6300 	strd	r6, r3, [r5]
 8000c78:	e7e3      	b.n	8000c42 <__udivmoddi4+0xa6>
 8000c7a:	2a00      	cmp	r2, #0
 8000c7c:	f040 8090 	bne.w	8000da0 <__udivmoddi4+0x204>
 8000c80:	eba1 040c 	sub.w	r4, r1, ip
 8000c84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c88:	fa1f f78c 	uxth.w	r7, ip
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c96:	fb08 4416 	mls	r4, r8, r6, r4
 8000c9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c9e:	fb07 f006 	mul.w	r0, r7, r6
 8000ca2:	4298      	cmp	r0, r3
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x11c>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x11a>
 8000cb0:	4298      	cmp	r0, r3
 8000cb2:	f200 80cd 	bhi.w	8000e50 <__udivmoddi4+0x2b4>
 8000cb6:	4626      	mov	r6, r4
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	fa1f f38e 	uxth.w	r3, lr
 8000cbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cc2:	fb08 4410 	mls	r4, r8, r0, r4
 8000cc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cca:	fb00 f707 	mul.w	r7, r0, r7
 8000cce:	429f      	cmp	r7, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x148>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x146>
 8000cdc:	429f      	cmp	r7, r3
 8000cde:	f200 80b0 	bhi.w	8000e42 <__udivmoddi4+0x2a6>
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	1bdb      	subs	r3, r3, r7
 8000ce6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cea:	e7a5      	b.n	8000c38 <__udivmoddi4+0x9c>
 8000cec:	f1c1 0620 	rsb	r6, r1, #32
 8000cf0:	408b      	lsls	r3, r1
 8000cf2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cf6:	431f      	orrs	r7, r3
 8000cf8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cfc:	fa04 f301 	lsl.w	r3, r4, r1
 8000d00:	ea43 030c 	orr.w	r3, r3, ip
 8000d04:	40f4      	lsrs	r4, r6
 8000d06:	fa00 f801 	lsl.w	r8, r0, r1
 8000d0a:	0c38      	lsrs	r0, r7, #16
 8000d0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d10:	fbb4 fef0 	udiv	lr, r4, r0
 8000d14:	fa1f fc87 	uxth.w	ip, r7
 8000d18:	fb00 441e 	mls	r4, r0, lr, r4
 8000d1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d20:	fb0e f90c 	mul.w	r9, lr, ip
 8000d24:	45a1      	cmp	r9, r4
 8000d26:	fa02 f201 	lsl.w	r2, r2, r1
 8000d2a:	d90a      	bls.n	8000d42 <__udivmoddi4+0x1a6>
 8000d2c:	193c      	adds	r4, r7, r4
 8000d2e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d32:	f080 8084 	bcs.w	8000e3e <__udivmoddi4+0x2a2>
 8000d36:	45a1      	cmp	r9, r4
 8000d38:	f240 8081 	bls.w	8000e3e <__udivmoddi4+0x2a2>
 8000d3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d40:	443c      	add	r4, r7
 8000d42:	eba4 0409 	sub.w	r4, r4, r9
 8000d46:	fa1f f983 	uxth.w	r9, r3
 8000d4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	d907      	bls.n	8000d6e <__udivmoddi4+0x1d2>
 8000d5e:	193c      	adds	r4, r7, r4
 8000d60:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d64:	d267      	bcs.n	8000e36 <__udivmoddi4+0x29a>
 8000d66:	45a4      	cmp	ip, r4
 8000d68:	d965      	bls.n	8000e36 <__udivmoddi4+0x29a>
 8000d6a:	3b02      	subs	r3, #2
 8000d6c:	443c      	add	r4, r7
 8000d6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d72:	fba0 9302 	umull	r9, r3, r0, r2
 8000d76:	eba4 040c 	sub.w	r4, r4, ip
 8000d7a:	429c      	cmp	r4, r3
 8000d7c:	46ce      	mov	lr, r9
 8000d7e:	469c      	mov	ip, r3
 8000d80:	d351      	bcc.n	8000e26 <__udivmoddi4+0x28a>
 8000d82:	d04e      	beq.n	8000e22 <__udivmoddi4+0x286>
 8000d84:	b155      	cbz	r5, 8000d9c <__udivmoddi4+0x200>
 8000d86:	ebb8 030e 	subs.w	r3, r8, lr
 8000d8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d92:	40cb      	lsrs	r3, r1
 8000d94:	431e      	orrs	r6, r3
 8000d96:	40cc      	lsrs	r4, r1
 8000d98:	e9c5 6400 	strd	r6, r4, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	e750      	b.n	8000c42 <__udivmoddi4+0xa6>
 8000da0:	f1c2 0320 	rsb	r3, r2, #32
 8000da4:	fa20 f103 	lsr.w	r1, r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	fa24 f303 	lsr.w	r3, r4, r3
 8000db0:	4094      	lsls	r4, r2
 8000db2:	430c      	orrs	r4, r1
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dbc:	fa1f f78c 	uxth.w	r7, ip
 8000dc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc4:	fb08 3110 	mls	r1, r8, r0, r3
 8000dc8:	0c23      	lsrs	r3, r4, #16
 8000dca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dce:	fb00 f107 	mul.w	r1, r0, r7
 8000dd2:	4299      	cmp	r1, r3
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x24c>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000dde:	d22c      	bcs.n	8000e3a <__udivmoddi4+0x29e>
 8000de0:	4299      	cmp	r1, r3
 8000de2:	d92a      	bls.n	8000e3a <__udivmoddi4+0x29e>
 8000de4:	3802      	subs	r0, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000df0:	fb08 3311 	mls	r3, r8, r1, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb01 f307 	mul.w	r3, r1, r7
 8000dfc:	42a3      	cmp	r3, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x276>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e08:	d213      	bcs.n	8000e32 <__udivmoddi4+0x296>
 8000e0a:	42a3      	cmp	r3, r4
 8000e0c:	d911      	bls.n	8000e32 <__udivmoddi4+0x296>
 8000e0e:	3902      	subs	r1, #2
 8000e10:	4464      	add	r4, ip
 8000e12:	1ae4      	subs	r4, r4, r3
 8000e14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e18:	e739      	b.n	8000c8e <__udivmoddi4+0xf2>
 8000e1a:	4604      	mov	r4, r0
 8000e1c:	e6f0      	b.n	8000c00 <__udivmoddi4+0x64>
 8000e1e:	4608      	mov	r0, r1
 8000e20:	e706      	b.n	8000c30 <__udivmoddi4+0x94>
 8000e22:	45c8      	cmp	r8, r9
 8000e24:	d2ae      	bcs.n	8000d84 <__udivmoddi4+0x1e8>
 8000e26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e2e:	3801      	subs	r0, #1
 8000e30:	e7a8      	b.n	8000d84 <__udivmoddi4+0x1e8>
 8000e32:	4631      	mov	r1, r6
 8000e34:	e7ed      	b.n	8000e12 <__udivmoddi4+0x276>
 8000e36:	4603      	mov	r3, r0
 8000e38:	e799      	b.n	8000d6e <__udivmoddi4+0x1d2>
 8000e3a:	4630      	mov	r0, r6
 8000e3c:	e7d4      	b.n	8000de8 <__udivmoddi4+0x24c>
 8000e3e:	46d6      	mov	lr, sl
 8000e40:	e77f      	b.n	8000d42 <__udivmoddi4+0x1a6>
 8000e42:	4463      	add	r3, ip
 8000e44:	3802      	subs	r0, #2
 8000e46:	e74d      	b.n	8000ce4 <__udivmoddi4+0x148>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	4623      	mov	r3, r4
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	e70f      	b.n	8000c70 <__udivmoddi4+0xd4>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	e730      	b.n	8000cb8 <__udivmoddi4+0x11c>
 8000e56:	bf00      	nop

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	4613      	mov	r3, r2
 8000e68:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e9c <PWM_init+0x40>)
 8000e6e:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	88fa      	ldrh	r2, [r7, #6]
 8000e7a:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 8000e82:	68b8      	ldr	r0, [r7, #8]
 8000e84:	f003 fd1a 	bl	80048bc <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8000e88:	88fb      	ldrh	r3, [r7, #6]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	68b8      	ldr	r0, [r7, #8]
 8000e8e:	f003 fe5f 	bl	8004b50 <HAL_TIM_PWM_Start>
}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	0a21fe80 	.word	0x0a21fe80

08000ea0 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 8000ea0:	b5b0      	push	{r4, r5, r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	ed87 0a02 	vstr	s0, [r7, #8]
 8000eac:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8000eb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000eb4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ebc:	d137      	bne.n	8000f2e <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	889b      	ldrh	r3, [r3, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d105      	bne.n	8000ed2 <PWM_write_duty+0x32>
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8000ed0:	e0e1      	b.n	8001096 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	889b      	ldrh	r3, [r3, #4]
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	d105      	bne.n	8000ee6 <PWM_write_duty+0x46>
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	6393      	str	r3, [r2, #56]	@ 0x38
 8000ee4:	e0d7      	b.n	8001096 <PWM_write_duty+0x1f6>
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	889b      	ldrh	r3, [r3, #4]
 8000eea:	2b08      	cmp	r3, #8
 8000eec:	d105      	bne.n	8000efa <PWM_write_duty+0x5a>
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000ef8:	e0cd      	b.n	8001096 <PWM_write_duty+0x1f6>
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	889b      	ldrh	r3, [r3, #4]
 8000efe:	2b0c      	cmp	r3, #12
 8000f00:	d105      	bne.n	8000f0e <PWM_write_duty+0x6e>
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	2300      	movs	r3, #0
 8000f0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f0c:	e0c3      	b.n	8001096 <PWM_write_duty+0x1f6>
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	889b      	ldrh	r3, [r3, #4]
 8000f12:	2b10      	cmp	r3, #16
 8000f14:	d105      	bne.n	8000f22 <PWM_write_duty+0x82>
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f20:	e0b9      	b.n	8001096 <PWM_write_duty+0x1f6>
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	2300      	movs	r3, #0
 8000f2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000f2c:	e0b3      	b.n	8001096 <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	691b      	ldr	r3, [r3, #16]
 8000f32:	ee07 3a90 	vmov	s15, r3
 8000f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000f3a:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f46:	ee17 2a90 	vmov	r2, s15
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000f56:	33fe      	adds	r3, #254	@ 0xfe
 8000f58:	4a51      	ldr	r2, [pc, #324]	@ (80010a0 <PWM_write_duty+0x200>)
 8000f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5e:	0bdb      	lsrs	r3, r3, #15
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	3b01      	subs	r3, #1
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	ee07 3a90 	vmov	s15, r3
 8000f72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	899b      	ldrh	r3, [r3, #12]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000f88:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f9c:	ee17 3a90 	vmov	r3, s15
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	89db      	ldrh	r3, [r3, #14]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff faf2 	bl	8000594 <__aeabi_i2d>
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	460d      	mov	r5, r1
 8000fb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fb8:	eef0 7ae7 	vabs.f32	s15, s15
 8000fbc:	ee17 0a90 	vmov	r0, s15
 8000fc0:	f7ff fafa 	bl	80005b8 <__aeabi_f2d>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4620      	mov	r0, r4
 8000fca:	4629      	mov	r1, r5
 8000fcc:	f7ff fb4c 	bl	8000668 <__aeabi_dmul>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	4610      	mov	r0, r2
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f04f 0200 	mov.w	r2, #0
 8000fdc:	4b31      	ldr	r3, [pc, #196]	@ (80010a4 <PWM_write_duty+0x204>)
 8000fde:	f7ff fc6d 	bl	80008bc <__aeabi_ddiv>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f7ff fd4f 	bl	8000a8c <__aeabi_d2uiz>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	899a      	ldrh	r2, [r3, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	89da      	ldrh	r2, [r3, #14]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	89da      	ldrh	r2, [r3, #14]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	889b      	ldrh	r3, [r3, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d106      	bne.n	8001030 <PWM_write_duty+0x190>
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	68fa      	ldr	r2, [r7, #12]
 800102a:	6952      	ldr	r2, [r2, #20]
 800102c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800102e:	e032      	b.n	8001096 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	889b      	ldrh	r3, [r3, #4]
 8001034:	2b04      	cmp	r3, #4
 8001036:	d106      	bne.n	8001046 <PWM_write_duty+0x1a6>
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001044:	e027      	b.n	8001096 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	889b      	ldrh	r3, [r3, #4]
 800104a:	2b08      	cmp	r3, #8
 800104c:	d106      	bne.n	800105c <PWM_write_duty+0x1bc>
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800105a:	e01c      	b.n	8001096 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	889b      	ldrh	r3, [r3, #4]
 8001060:	2b0c      	cmp	r3, #12
 8001062:	d106      	bne.n	8001072 <PWM_write_duty+0x1d2>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001070:	e011      	b.n	8001096 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	889b      	ldrh	r3, [r3, #4]
 8001076:	2b10      	cmp	r3, #16
 8001078:	d106      	bne.n	8001088 <PWM_write_duty+0x1e8>
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8001086:	e006      	b.n	8001096 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001094:	e7ff      	b.n	8001096 <PWM_write_duty+0x1f6>
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bdb0      	pop	{r4, r5, r7, pc}
 800109e:	bf00      	nop
 80010a0:	80008001 	.word	0x80008001
 80010a4:	40590000 	.word	0x40590000

080010a8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010ac:	f3bf 8f4f 	dsb	sy
}
 80010b0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80010b2:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <__NVIC_SystemReset+0x24>)
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80010ba:	4904      	ldr	r1, [pc, #16]	@ (80010cc <__NVIC_SystemReset+0x24>)
 80010bc:	4b04      	ldr	r3, [pc, #16]	@ (80010d0 <__NVIC_SystemReset+0x28>)
 80010be:	4313      	orrs	r3, r2
 80010c0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80010c2:	f3bf 8f4f 	dsb	sy
}
 80010c6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <__NVIC_SystemReset+0x20>
 80010cc:	e000ed00 	.word	0xe000ed00
 80010d0:	05fa0004 	.word	0x05fa0004

080010d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d8:	f001 fd0b 	bl	8002af2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010dc:	f000 f84e 	bl	800117c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e0:	f000 fa18 	bl	8001514 <MX_GPIO_Init>
  MX_DMA_Init();
 80010e4:	f000 f9e4 	bl	80014b0 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80010e8:	f000 f894 	bl	8001214 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 80010ec:	f000 f8dc 	bl	80012a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80010f0:	f000 f95c 	bl	80013ac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  PWM_init(&BrushMTR, &htim2, TIM_CHANNEL_1);
 80010f4:	2200      	movs	r2, #0
 80010f6:	4918      	ldr	r1, [pc, #96]	@ (8001158 <main+0x84>)
 80010f8:	4818      	ldr	r0, [pc, #96]	@ (800115c <main+0x88>)
 80010fa:	f7ff feaf 	bl	8000e5c <PWM_init>
  PWM_init(&WaterPump, &htim2, TIM_CHANNEL_2);
 80010fe:	2204      	movs	r2, #4
 8001100:	4915      	ldr	r1, [pc, #84]	@ (8001158 <main+0x84>)
 8001102:	4817      	ldr	r0, [pc, #92]	@ (8001160 <main+0x8c>)
 8001104:	f7ff feaa 	bl	8000e5c <PWM_init>
  PWM_init(&BrushUD2, &htim3, TIM_CHANNEL_1);
 8001108:	2200      	movs	r2, #0
 800110a:	4916      	ldr	r1, [pc, #88]	@ (8001164 <main+0x90>)
 800110c:	4816      	ldr	r0, [pc, #88]	@ (8001168 <main+0x94>)
 800110e:	f7ff fea5 	bl	8000e5c <PWM_init>
  PWM_init(&BrushUD, &htim3, TIM_CHANNEL_2);
 8001112:	2204      	movs	r2, #4
 8001114:	4913      	ldr	r1, [pc, #76]	@ (8001164 <main+0x90>)
 8001116:	4815      	ldr	r0, [pc, #84]	@ (800116c <main+0x98>)
 8001118:	f7ff fea0 	bl	8000e5c <PWM_init>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800111c:	2100      	movs	r1, #0
 800111e:	480e      	ldr	r0, [pc, #56]	@ (8001158 <main+0x84>)
 8001120:	f003 fd16 	bl	8004b50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001124:	2104      	movs	r1, #4
 8001126:	480c      	ldr	r0, [pc, #48]	@ (8001158 <main+0x84>)
 8001128:	f003 fd12 	bl	8004b50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800112c:	2100      	movs	r1, #0
 800112e:	480d      	ldr	r0, [pc, #52]	@ (8001164 <main+0x90>)
 8001130:	f003 fd0e 	bl	8004b50 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001134:	2104      	movs	r1, #4
 8001136:	480b      	ldr	r0, [pc, #44]	@ (8001164 <main+0x90>)
 8001138:	f003 fd0a 	bl	8004b50 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800113c:	f006 fd60 	bl	8007c00 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001140:	4a0b      	ldr	r2, [pc, #44]	@ (8001170 <main+0x9c>)
 8001142:	2100      	movs	r1, #0
 8001144:	480b      	ldr	r0, [pc, #44]	@ (8001174 <main+0xa0>)
 8001146:	f006 fda5 	bl	8007c94 <osThreadNew>
 800114a:	4603      	mov	r3, r0
 800114c:	4a0a      	ldr	r2, [pc, #40]	@ (8001178 <main+0xa4>)
 800114e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001150:	f006 fd7a 	bl	8007c48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <main+0x80>
 8001158:	20000280 	.word	0x20000280
 800115c:	20003384 	.word	0x20003384
 8001160:	2000336c 	.word	0x2000336c
 8001164:	200002cc 	.word	0x200002cc
 8001168:	200033b4 	.word	0x200033b4
 800116c:	2000339c 	.word	0x2000339c
 8001170:	08018c20 	.word	0x08018c20
 8001174:	08001981 	.word	0x08001981
 8001178:	20000318 	.word	0x20000318

0800117c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b094      	sub	sp, #80	@ 0x50
 8001180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001182:	f107 0318 	add.w	r3, r7, #24
 8001186:	2238      	movs	r2, #56	@ 0x38
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f016 fd24 	bl	8017bd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800119e:	2000      	movs	r0, #0
 80011a0:	f002 fad2 	bl	8003748 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011a4:	2302      	movs	r3, #2
 80011a6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ae:	2340      	movs	r3, #64	@ 0x40
 80011b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b2:	2302      	movs	r3, #2
 80011b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011b6:	2302      	movs	r3, #2
 80011b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80011ba:	2304      	movs	r3, #4
 80011bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80011be:	2355      	movs	r3, #85	@ 0x55
 80011c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011c2:	2302      	movs	r3, #2
 80011c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011c6:	2302      	movs	r3, #2
 80011c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011ca:	2302      	movs	r3, #2
 80011cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ce:	f107 0318 	add.w	r3, r7, #24
 80011d2:	4618      	mov	r0, r3
 80011d4:	f002 fb6c 	bl	80038b0 <HAL_RCC_OscConfig>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011de:	f000 fcf3 	bl	8001bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e2:	230f      	movs	r3, #15
 80011e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e6:	2303      	movs	r3, #3
 80011e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2104      	movs	r1, #4
 80011fa:	4618      	mov	r0, r3
 80011fc:	f002 fe6a 	bl	8003ed4 <HAL_RCC_ClockConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001206:	f000 fcdf 	bl	8001bc8 <Error_Handler>
  }
}
 800120a:	bf00      	nop
 800120c:	3750      	adds	r7, #80	@ 0x50
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001218:	4b21      	ldr	r3, [pc, #132]	@ (80012a0 <MX_LPUART1_UART_Init+0x8c>)
 800121a:	4a22      	ldr	r2, [pc, #136]	@ (80012a4 <MX_LPUART1_UART_Init+0x90>)
 800121c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800121e:	4b20      	ldr	r3, [pc, #128]	@ (80012a0 <MX_LPUART1_UART_Init+0x8c>)
 8001220:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001224:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001226:	4b1e      	ldr	r3, [pc, #120]	@ (80012a0 <MX_LPUART1_UART_Init+0x8c>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800122c:	4b1c      	ldr	r3, [pc, #112]	@ (80012a0 <MX_LPUART1_UART_Init+0x8c>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001232:	4b1b      	ldr	r3, [pc, #108]	@ (80012a0 <MX_LPUART1_UART_Init+0x8c>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001238:	4b19      	ldr	r3, [pc, #100]	@ (80012a0 <MX_LPUART1_UART_Init+0x8c>)
 800123a:	220c      	movs	r2, #12
 800123c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123e:	4b18      	ldr	r3, [pc, #96]	@ (80012a0 <MX_LPUART1_UART_Init+0x8c>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001244:	4b16      	ldr	r3, [pc, #88]	@ (80012a0 <MX_LPUART1_UART_Init+0x8c>)
 8001246:	2200      	movs	r2, #0
 8001248:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800124a:	4b15      	ldr	r3, [pc, #84]	@ (80012a0 <MX_LPUART1_UART_Init+0x8c>)
 800124c:	2200      	movs	r2, #0
 800124e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001250:	4b13      	ldr	r3, [pc, #76]	@ (80012a0 <MX_LPUART1_UART_Init+0x8c>)
 8001252:	2200      	movs	r2, #0
 8001254:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001256:	4812      	ldr	r0, [pc, #72]	@ (80012a0 <MX_LPUART1_UART_Init+0x8c>)
 8001258:	f004 feaa 	bl	8005fb0 <HAL_UART_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001262:	f000 fcb1 	bl	8001bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001266:	2100      	movs	r1, #0
 8001268:	480d      	ldr	r0, [pc, #52]	@ (80012a0 <MX_LPUART1_UART_Init+0x8c>)
 800126a:	f006 fbba 	bl	80079e2 <HAL_UARTEx_SetTxFifoThreshold>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001274:	f000 fca8 	bl	8001bc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001278:	2100      	movs	r1, #0
 800127a:	4809      	ldr	r0, [pc, #36]	@ (80012a0 <MX_LPUART1_UART_Init+0x8c>)
 800127c:	f006 fbef 	bl	8007a5e <HAL_UARTEx_SetRxFifoThreshold>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001286:	f000 fc9f 	bl	8001bc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800128a:	4805      	ldr	r0, [pc, #20]	@ (80012a0 <MX_LPUART1_UART_Init+0x8c>)
 800128c:	f006 fb70 	bl	8007970 <HAL_UARTEx_DisableFifoMode>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001296:	f000 fc97 	bl	8001bc8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	2000012c 	.word	0x2000012c
 80012a4:	40008000 	.word	0x40008000

080012a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08e      	sub	sp, #56	@ 0x38
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012bc:	f107 031c 	add.w	r3, r7, #28
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c8:	463b      	mov	r3, r7
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
 80012d4:	611a      	str	r2, [r3, #16]
 80012d6:	615a      	str	r2, [r3, #20]
 80012d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012da:	4b33      	ldr	r3, [pc, #204]	@ (80013a8 <MX_TIM2_Init+0x100>)
 80012dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80012e2:	4b31      	ldr	r3, [pc, #196]	@ (80013a8 <MX_TIM2_Init+0x100>)
 80012e4:	22a9      	movs	r2, #169	@ 0xa9
 80012e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e8:	4b2f      	ldr	r3, [pc, #188]	@ (80013a8 <MX_TIM2_Init+0x100>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80012ee:	4b2e      	ldr	r3, [pc, #184]	@ (80013a8 <MX_TIM2_Init+0x100>)
 80012f0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f6:	4b2c      	ldr	r3, [pc, #176]	@ (80013a8 <MX_TIM2_Init+0x100>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fc:	4b2a      	ldr	r3, [pc, #168]	@ (80013a8 <MX_TIM2_Init+0x100>)
 80012fe:	2200      	movs	r2, #0
 8001300:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001302:	4829      	ldr	r0, [pc, #164]	@ (80013a8 <MX_TIM2_Init+0x100>)
 8001304:	f003 fa82 	bl	800480c <HAL_TIM_Base_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800130e:	f000 fc5b 	bl	8001bc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001312:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001316:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001318:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800131c:	4619      	mov	r1, r3
 800131e:	4822      	ldr	r0, [pc, #136]	@ (80013a8 <MX_TIM2_Init+0x100>)
 8001320:	f003 ff8c 	bl	800523c <HAL_TIM_ConfigClockSource>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800132a:	f000 fc4d 	bl	8001bc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800132e:	481e      	ldr	r0, [pc, #120]	@ (80013a8 <MX_TIM2_Init+0x100>)
 8001330:	f003 fbac 	bl	8004a8c <HAL_TIM_PWM_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800133a:	f000 fc45 	bl	8001bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001342:	2300      	movs	r3, #0
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001346:	f107 031c 	add.w	r3, r7, #28
 800134a:	4619      	mov	r1, r3
 800134c:	4816      	ldr	r0, [pc, #88]	@ (80013a8 <MX_TIM2_Init+0x100>)
 800134e:	f004 fd53 	bl	8005df8 <HAL_TIMEx_MasterConfigSynchronization>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001358:	f000 fc36 	bl	8001bc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800135c:	2360      	movs	r3, #96	@ 0x60
 800135e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001364:	2300      	movs	r3, #0
 8001366:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800136c:	463b      	mov	r3, r7
 800136e:	2200      	movs	r2, #0
 8001370:	4619      	mov	r1, r3
 8001372:	480d      	ldr	r0, [pc, #52]	@ (80013a8 <MX_TIM2_Init+0x100>)
 8001374:	f003 fe4e 	bl	8005014 <HAL_TIM_PWM_ConfigChannel>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800137e:	f000 fc23 	bl	8001bc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001382:	463b      	mov	r3, r7
 8001384:	2204      	movs	r2, #4
 8001386:	4619      	mov	r1, r3
 8001388:	4807      	ldr	r0, [pc, #28]	@ (80013a8 <MX_TIM2_Init+0x100>)
 800138a:	f003 fe43 	bl	8005014 <HAL_TIM_PWM_ConfigChannel>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001394:	f000 fc18 	bl	8001bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001398:	4803      	ldr	r0, [pc, #12]	@ (80013a8 <MX_TIM2_Init+0x100>)
 800139a:	f000 fd35 	bl	8001e08 <HAL_TIM_MspPostInit>

}
 800139e:	bf00      	nop
 80013a0:	3738      	adds	r7, #56	@ 0x38
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000280 	.word	0x20000280

080013ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08e      	sub	sp, #56	@ 0x38
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c0:	f107 031c 	add.w	r3, r7, #28
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013cc:	463b      	mov	r3, r7
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	611a      	str	r2, [r3, #16]
 80013da:	615a      	str	r2, [r3, #20]
 80013dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013de:	4b32      	ldr	r3, [pc, #200]	@ (80014a8 <MX_TIM3_Init+0xfc>)
 80013e0:	4a32      	ldr	r2, [pc, #200]	@ (80014ac <MX_TIM3_Init+0x100>)
 80013e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 80013e4:	4b30      	ldr	r3, [pc, #192]	@ (80014a8 <MX_TIM3_Init+0xfc>)
 80013e6:	22a9      	movs	r2, #169	@ 0xa9
 80013e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ea:	4b2f      	ldr	r3, [pc, #188]	@ (80014a8 <MX_TIM3_Init+0xfc>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80013f0:	4b2d      	ldr	r3, [pc, #180]	@ (80014a8 <MX_TIM3_Init+0xfc>)
 80013f2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f8:	4b2b      	ldr	r3, [pc, #172]	@ (80014a8 <MX_TIM3_Init+0xfc>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fe:	4b2a      	ldr	r3, [pc, #168]	@ (80014a8 <MX_TIM3_Init+0xfc>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001404:	4828      	ldr	r0, [pc, #160]	@ (80014a8 <MX_TIM3_Init+0xfc>)
 8001406:	f003 fa01 	bl	800480c <HAL_TIM_Base_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001410:	f000 fbda 	bl	8001bc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001414:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001418:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800141a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800141e:	4619      	mov	r1, r3
 8001420:	4821      	ldr	r0, [pc, #132]	@ (80014a8 <MX_TIM3_Init+0xfc>)
 8001422:	f003 ff0b 	bl	800523c <HAL_TIM_ConfigClockSource>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800142c:	f000 fbcc 	bl	8001bc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001430:	481d      	ldr	r0, [pc, #116]	@ (80014a8 <MX_TIM3_Init+0xfc>)
 8001432:	f003 fb2b 	bl	8004a8c <HAL_TIM_PWM_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800143c:	f000 fbc4 	bl	8001bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001440:	2300      	movs	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001448:	f107 031c 	add.w	r3, r7, #28
 800144c:	4619      	mov	r1, r3
 800144e:	4816      	ldr	r0, [pc, #88]	@ (80014a8 <MX_TIM3_Init+0xfc>)
 8001450:	f004 fcd2 	bl	8005df8 <HAL_TIMEx_MasterConfigSynchronization>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800145a:	f000 fbb5 	bl	8001bc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800145e:	2360      	movs	r3, #96	@ 0x60
 8001460:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800146e:	463b      	mov	r3, r7
 8001470:	2200      	movs	r2, #0
 8001472:	4619      	mov	r1, r3
 8001474:	480c      	ldr	r0, [pc, #48]	@ (80014a8 <MX_TIM3_Init+0xfc>)
 8001476:	f003 fdcd 	bl	8005014 <HAL_TIM_PWM_ConfigChannel>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001480:	f000 fba2 	bl	8001bc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001484:	463b      	mov	r3, r7
 8001486:	2204      	movs	r2, #4
 8001488:	4619      	mov	r1, r3
 800148a:	4807      	ldr	r0, [pc, #28]	@ (80014a8 <MX_TIM3_Init+0xfc>)
 800148c:	f003 fdc2 	bl	8005014 <HAL_TIM_PWM_ConfigChannel>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001496:	f000 fb97 	bl	8001bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800149a:	4803      	ldr	r0, [pc, #12]	@ (80014a8 <MX_TIM3_Init+0xfc>)
 800149c:	f000 fcb4 	bl	8001e08 <HAL_TIM_MspPostInit>

}
 80014a0:	bf00      	nop
 80014a2:	3738      	adds	r7, #56	@ 0x38
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	200002cc 	.word	0x200002cc
 80014ac:	40000400 	.word	0x40000400

080014b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80014b6:	4b16      	ldr	r3, [pc, #88]	@ (8001510 <MX_DMA_Init+0x60>)
 80014b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ba:	4a15      	ldr	r2, [pc, #84]	@ (8001510 <MX_DMA_Init+0x60>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80014c2:	4b13      	ldr	r3, [pc, #76]	@ (8001510 <MX_DMA_Init+0x60>)
 80014c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014ce:	4b10      	ldr	r3, [pc, #64]	@ (8001510 <MX_DMA_Init+0x60>)
 80014d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001510 <MX_DMA_Init+0x60>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80014da:	4b0d      	ldr	r3, [pc, #52]	@ (8001510 <MX_DMA_Init+0x60>)
 80014dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2105      	movs	r1, #5
 80014ea:	200b      	movs	r0, #11
 80014ec:	f001 fbf0 	bl	8002cd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014f0:	200b      	movs	r0, #11
 80014f2:	f001 fc07 	bl	8002d04 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2105      	movs	r1, #5
 80014fa:	200c      	movs	r0, #12
 80014fc:	f001 fbe8 	bl	8002cd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001500:	200c      	movs	r0, #12
 8001502:	f001 fbff 	bl	8002d04 <HAL_NVIC_EnableIRQ>

}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000

08001514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	@ 0x28
 8001518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800152a:	4b37      	ldr	r3, [pc, #220]	@ (8001608 <MX_GPIO_Init+0xf4>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152e:	4a36      	ldr	r2, [pc, #216]	@ (8001608 <MX_GPIO_Init+0xf4>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001536:	4b34      	ldr	r3, [pc, #208]	@ (8001608 <MX_GPIO_Init+0xf4>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001542:	4b31      	ldr	r3, [pc, #196]	@ (8001608 <MX_GPIO_Init+0xf4>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001546:	4a30      	ldr	r2, [pc, #192]	@ (8001608 <MX_GPIO_Init+0xf4>)
 8001548:	f043 0320 	orr.w	r3, r3, #32
 800154c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800154e:	4b2e      	ldr	r3, [pc, #184]	@ (8001608 <MX_GPIO_Init+0xf4>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001552:	f003 0320 	and.w	r3, r3, #32
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	4b2b      	ldr	r3, [pc, #172]	@ (8001608 <MX_GPIO_Init+0xf4>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800155e:	4a2a      	ldr	r2, [pc, #168]	@ (8001608 <MX_GPIO_Init+0xf4>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001566:	4b28      	ldr	r3, [pc, #160]	@ (8001608 <MX_GPIO_Init+0xf4>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001572:	4b25      	ldr	r3, [pc, #148]	@ (8001608 <MX_GPIO_Init+0xf4>)
 8001574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001576:	4a24      	ldr	r2, [pc, #144]	@ (8001608 <MX_GPIO_Init+0xf4>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800157e:	4b22      	ldr	r3, [pc, #136]	@ (8001608 <MX_GPIO_Init+0xf4>)
 8001580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800158a:	2200      	movs	r2, #0
 800158c:	f240 6181 	movw	r1, #1665	@ 0x681
 8001590:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001594:	f002 f89c 	bl	80036d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001598:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800159c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800159e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	4619      	mov	r1, r3
 80015ae:	4817      	ldr	r0, [pc, #92]	@ (800160c <MX_GPIO_Init+0xf8>)
 80015b0:	f001 fef4 	bl	800339c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA7 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
 80015b4:	f240 6381 	movw	r3, #1665	@ 0x681
 80015b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ba:	2301      	movs	r3, #1
 80015bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	2300      	movs	r3, #0
 80015c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015d0:	f001 fee4 	bl	800339c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015da:	2300      	movs	r3, #0
 80015dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ec:	f001 fed6 	bl	800339c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2105      	movs	r1, #5
 80015f4:	2028      	movs	r0, #40	@ 0x28
 80015f6:	f001 fb6b 	bl	8002cd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015fa:	2028      	movs	r0, #40	@ 0x28
 80015fc:	f001 fb82 	bl	8002d04 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001600:	bf00      	nop
 8001602:	3728      	adds	r7, #40	@ 0x28
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40021000 	.word	0x40021000
 800160c:	48000800 	.word	0x48000800

08001610 <timer_callback>:
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d007      	beq.n	8001632 <timer_callback+0x22>
		BrusheMotorControlled();
 8001622:	f000 f819 	bl	8001658 <BrusheMotorControlled>
		BrushUpDownMode();
 8001626:	f000 f867 	bl	80016f8 <BrushUpDownMode>
		Omron_check();
 800162a:	f000 f933 	bl	8001894 <Omron_check>
		WaterPumpControlled();
 800162e:	f000 f83b 	bl	80016a8 <WaterPumpControlled>
	}
	rcl_ret_t ret = rcl_publish(&publisher, &msg_pub, NULL);
 8001632:	2200      	movs	r2, #0
 8001634:	4906      	ldr	r1, [pc, #24]	@ (8001650 <timer_callback+0x40>)
 8001636:	4807      	ldr	r0, [pc, #28]	@ (8001654 <timer_callback+0x44>)
 8001638:	f009 fa5e 	bl	800aaf8 <rcl_publish>
 800163c:	6178      	str	r0, [r7, #20]
	if (ret != RCL_RET_OK)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <timer_callback+0x38>
	{
		NVIC_SystemReset();
 8001644:	f7ff fd30 	bl	80010a8 <__NVIC_SystemReset>
	}
}
 8001648:	bf00      	nop
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20003274 	.word	0x20003274
 8001654:	20003270 	.word	0x20003270

08001658 <BrusheMotorControlled>:

void BrusheMotorControlled()
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
	if (Brush)
 800165c:	4b0d      	ldr	r3, [pc, #52]	@ (8001694 <BrusheMotorControlled+0x3c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d00e      	beq.n	8001682 <BrusheMotorControlled+0x2a>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800166a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800166e:	f002 f82f 	bl	80036d0 <HAL_GPIO_WritePin>
		PWM_write_duty(&BrushMTR, 2000, 100);
 8001672:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8001698 <BrusheMotorControlled+0x40>
 8001676:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 800169c <BrusheMotorControlled+0x44>
 800167a:	4809      	ldr	r0, [pc, #36]	@ (80016a0 <BrusheMotorControlled+0x48>)
 800167c:	f7ff fc10 	bl	8000ea0 <PWM_write_duty>
	}
	else
	{
		PWM_write_duty(&BrushMTR, 2000, 0);
	}
}
 8001680:	e006      	b.n	8001690 <BrusheMotorControlled+0x38>
		PWM_write_duty(&BrushMTR, 2000, 0);
 8001682:	eddf 0a08 	vldr	s1, [pc, #32]	@ 80016a4 <BrusheMotorControlled+0x4c>
 8001686:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 800169c <BrusheMotorControlled+0x44>
 800168a:	4805      	ldr	r0, [pc, #20]	@ (80016a0 <BrusheMotorControlled+0x48>)
 800168c:	f7ff fc08 	bl	8000ea0 <PWM_write_duty>
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20003360 	.word	0x20003360
 8001698:	42c80000 	.word	0x42c80000
 800169c:	44fa0000 	.word	0x44fa0000
 80016a0:	20003384 	.word	0x20003384
 80016a4:	00000000 	.word	0x00000000

080016a8 <WaterPumpControlled>:
void WaterPumpControlled()
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
	if (Water)
 80016ac:	4b0d      	ldr	r3, [pc, #52]	@ (80016e4 <WaterPumpControlled+0x3c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d00d      	beq.n	80016d0 <WaterPumpControlled+0x28>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, RESET);
 80016b4:	2200      	movs	r2, #0
 80016b6:	2101      	movs	r1, #1
 80016b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016bc:	f002 f808 	bl	80036d0 <HAL_GPIO_WritePin>
		PWM_write_duty(&WaterPump, 2000, 100);
 80016c0:	eddf 0a09 	vldr	s1, [pc, #36]	@ 80016e8 <WaterPumpControlled+0x40>
 80016c4:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 80016ec <WaterPumpControlled+0x44>
 80016c8:	4809      	ldr	r0, [pc, #36]	@ (80016f0 <WaterPumpControlled+0x48>)
 80016ca:	f7ff fbe9 	bl	8000ea0 <PWM_write_duty>
	}
	else
	{
		PWM_write_duty(&WaterPump, 2000, 0);
	}
}
 80016ce:	e006      	b.n	80016de <WaterPumpControlled+0x36>
		PWM_write_duty(&WaterPump, 2000, 0);
 80016d0:	eddf 0a08 	vldr	s1, [pc, #32]	@ 80016f4 <WaterPumpControlled+0x4c>
 80016d4:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 80016ec <WaterPumpControlled+0x44>
 80016d8:	4805      	ldr	r0, [pc, #20]	@ (80016f0 <WaterPumpControlled+0x48>)
 80016da:	f7ff fbe1 	bl	8000ea0 <PWM_write_duty>
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20003364 	.word	0x20003364
 80016e8:	42c80000 	.word	0x42c80000
 80016ec:	44fa0000 	.word	0x44fa0000
 80016f0:	2000336c 	.word	0x2000336c
 80016f4:	00000000 	.word	0x00000000

080016f8 <BrushUpDownMode>:
void BrushUpDownMode()
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	// PA10 DIR1 , PA4 PWM1
	// PA7 DIR2 ,PA6 PWM2

	if (Servo_switch == 1)
 80016fc:	4b5b      	ldr	r3, [pc, #364]	@ (800186c <BrushUpDownMode+0x174>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d120      	bne.n	8001746 <BrushUpDownMode+0x4e>
	{
		if (HAL_GetTick() < timestamp_servo + 500)
 8001704:	f001 fa20 	bl	8002b48 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	4b59      	ldr	r3, [pc, #356]	@ (8001870 <BrushUpDownMode+0x178>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001712:	429a      	cmp	r2, r3
 8001714:	d20e      	bcs.n	8001734 <BrushUpDownMode+0x3c>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8001716:	2201      	movs	r2, #1
 8001718:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800171c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001720:	f001 ffd6 	bl	80036d0 <HAL_GPIO_WritePin>
			PWM_write_duty(&BrushUD, 998, 50);
 8001724:	eddf 0a53 	vldr	s1, [pc, #332]	@ 8001874 <BrushUpDownMode+0x17c>
 8001728:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 8001878 <BrushUpDownMode+0x180>
 800172c:	4853      	ldr	r0, [pc, #332]	@ (800187c <BrushUpDownMode+0x184>)
 800172e:	f7ff fbb7 	bl	8000ea0 <PWM_write_duty>
		timestamp_servo4 = HAL_GetTick();
		PWM_write_duty(&BrushUD2, 998, 0);
		PWM_write_duty(&BrushUD, 998, 0);
	}

}
 8001732:	e099      	b.n	8001868 <BrushUpDownMode+0x170>
			Servo_switch = 0;
 8001734:	4b4d      	ldr	r3, [pc, #308]	@ (800186c <BrushUpDownMode+0x174>)
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
			timestamp_servo = HAL_GetTick();
 800173a:	f001 fa05 	bl	8002b48 <HAL_GetTick>
 800173e:	4603      	mov	r3, r0
 8001740:	4a4b      	ldr	r2, [pc, #300]	@ (8001870 <BrushUpDownMode+0x178>)
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	e090      	b.n	8001868 <BrushUpDownMode+0x170>
	else if (Servo_switch == -1)
 8001746:	4b49      	ldr	r3, [pc, #292]	@ (800186c <BrushUpDownMode+0x174>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800174e:	d120      	bne.n	8001792 <BrushUpDownMode+0x9a>
		if (HAL_GetTick() < timestamp_servo2 + 500)
 8001750:	f001 f9fa 	bl	8002b48 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	4b4a      	ldr	r3, [pc, #296]	@ (8001880 <BrushUpDownMode+0x188>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800175e:	429a      	cmp	r2, r3
 8001760:	d20e      	bcs.n	8001780 <BrushUpDownMode+0x88>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001768:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800176c:	f001 ffb0 	bl	80036d0 <HAL_GPIO_WritePin>
			PWM_write_duty(&BrushUD, 998, 50);
 8001770:	eddf 0a40 	vldr	s1, [pc, #256]	@ 8001874 <BrushUpDownMode+0x17c>
 8001774:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 8001878 <BrushUpDownMode+0x180>
 8001778:	4840      	ldr	r0, [pc, #256]	@ (800187c <BrushUpDownMode+0x184>)
 800177a:	f7ff fb91 	bl	8000ea0 <PWM_write_duty>
}
 800177e:	e073      	b.n	8001868 <BrushUpDownMode+0x170>
			Servo_switch = 0;
 8001780:	4b3a      	ldr	r3, [pc, #232]	@ (800186c <BrushUpDownMode+0x174>)
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
			timestamp_servo2 = HAL_GetTick();
 8001786:	f001 f9df 	bl	8002b48 <HAL_GetTick>
 800178a:	4603      	mov	r3, r0
 800178c:	4a3c      	ldr	r2, [pc, #240]	@ (8001880 <BrushUpDownMode+0x188>)
 800178e:	6013      	str	r3, [r2, #0]
}
 8001790:	e06a      	b.n	8001868 <BrushUpDownMode+0x170>
	else if (Servo_switch == 2)
 8001792:	4b36      	ldr	r3, [pc, #216]	@ (800186c <BrushUpDownMode+0x174>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d11f      	bne.n	80017da <BrushUpDownMode+0xe2>
		if (HAL_GetTick() < timestamp_servo3 + 500)
 800179a:	f001 f9d5 	bl	8002b48 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	4b38      	ldr	r3, [pc, #224]	@ (8001884 <BrushUpDownMode+0x18c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d20d      	bcs.n	80017c8 <BrushUpDownMode+0xd0>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2180      	movs	r1, #128	@ 0x80
 80017b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017b4:	f001 ff8c 	bl	80036d0 <HAL_GPIO_WritePin>
			PWM_write_duty(&BrushUD2, 998, 50);
 80017b8:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 8001874 <BrushUpDownMode+0x17c>
 80017bc:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8001878 <BrushUpDownMode+0x180>
 80017c0:	4831      	ldr	r0, [pc, #196]	@ (8001888 <BrushUpDownMode+0x190>)
 80017c2:	f7ff fb6d 	bl	8000ea0 <PWM_write_duty>
}
 80017c6:	e04f      	b.n	8001868 <BrushUpDownMode+0x170>
			Servo_switch = 0;
 80017c8:	4b28      	ldr	r3, [pc, #160]	@ (800186c <BrushUpDownMode+0x174>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
			timestamp_servo3 = HAL_GetTick();
 80017ce:	f001 f9bb 	bl	8002b48 <HAL_GetTick>
 80017d2:	4603      	mov	r3, r0
 80017d4:	4a2b      	ldr	r2, [pc, #172]	@ (8001884 <BrushUpDownMode+0x18c>)
 80017d6:	6013      	str	r3, [r2, #0]
}
 80017d8:	e046      	b.n	8001868 <BrushUpDownMode+0x170>
	else if(Servo_switch == -2)
 80017da:	4b24      	ldr	r3, [pc, #144]	@ (800186c <BrushUpDownMode+0x174>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f113 0f02 	cmn.w	r3, #2
 80017e2:	d11f      	bne.n	8001824 <BrushUpDownMode+0x12c>
		if (HAL_GetTick() < timestamp_servo4 + 500)
 80017e4:	f001 f9b0 	bl	8002b48 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	4b28      	ldr	r3, [pc, #160]	@ (800188c <BrushUpDownMode+0x194>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d20d      	bcs.n	8001812 <BrushUpDownMode+0x11a>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 80017f6:	2201      	movs	r2, #1
 80017f8:	2180      	movs	r1, #128	@ 0x80
 80017fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017fe:	f001 ff67 	bl	80036d0 <HAL_GPIO_WritePin>
			PWM_write_duty(&BrushUD2, 998, 50);
 8001802:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8001874 <BrushUpDownMode+0x17c>
 8001806:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8001878 <BrushUpDownMode+0x180>
 800180a:	481f      	ldr	r0, [pc, #124]	@ (8001888 <BrushUpDownMode+0x190>)
 800180c:	f7ff fb48 	bl	8000ea0 <PWM_write_duty>
}
 8001810:	e02a      	b.n	8001868 <BrushUpDownMode+0x170>
			Servo_switch = 0;
 8001812:	4b16      	ldr	r3, [pc, #88]	@ (800186c <BrushUpDownMode+0x174>)
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
			timestamp_servo4 = HAL_GetTick();
 8001818:	f001 f996 	bl	8002b48 <HAL_GetTick>
 800181c:	4603      	mov	r3, r0
 800181e:	4a1b      	ldr	r2, [pc, #108]	@ (800188c <BrushUpDownMode+0x194>)
 8001820:	6013      	str	r3, [r2, #0]
}
 8001822:	e021      	b.n	8001868 <BrushUpDownMode+0x170>
		timestamp_servo = HAL_GetTick();
 8001824:	f001 f990 	bl	8002b48 <HAL_GetTick>
 8001828:	4603      	mov	r3, r0
 800182a:	4a11      	ldr	r2, [pc, #68]	@ (8001870 <BrushUpDownMode+0x178>)
 800182c:	6013      	str	r3, [r2, #0]
		timestamp_servo2 = HAL_GetTick();
 800182e:	f001 f98b 	bl	8002b48 <HAL_GetTick>
 8001832:	4603      	mov	r3, r0
 8001834:	4a12      	ldr	r2, [pc, #72]	@ (8001880 <BrushUpDownMode+0x188>)
 8001836:	6013      	str	r3, [r2, #0]
		timestamp_servo3 = HAL_GetTick();
 8001838:	f001 f986 	bl	8002b48 <HAL_GetTick>
 800183c:	4603      	mov	r3, r0
 800183e:	4a11      	ldr	r2, [pc, #68]	@ (8001884 <BrushUpDownMode+0x18c>)
 8001840:	6013      	str	r3, [r2, #0]
		timestamp_servo4 = HAL_GetTick();
 8001842:	f001 f981 	bl	8002b48 <HAL_GetTick>
 8001846:	4603      	mov	r3, r0
 8001848:	4a10      	ldr	r2, [pc, #64]	@ (800188c <BrushUpDownMode+0x194>)
 800184a:	6013      	str	r3, [r2, #0]
		PWM_write_duty(&BrushUD2, 998, 0);
 800184c:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8001890 <BrushUpDownMode+0x198>
 8001850:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8001878 <BrushUpDownMode+0x180>
 8001854:	480c      	ldr	r0, [pc, #48]	@ (8001888 <BrushUpDownMode+0x190>)
 8001856:	f7ff fb23 	bl	8000ea0 <PWM_write_duty>
		PWM_write_duty(&BrushUD, 998, 0);
 800185a:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8001890 <BrushUpDownMode+0x198>
 800185e:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8001878 <BrushUpDownMode+0x180>
 8001862:	4806      	ldr	r0, [pc, #24]	@ (800187c <BrushUpDownMode+0x184>)
 8001864:	f7ff fb1c 	bl	8000ea0 <PWM_write_duty>
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20003368 	.word	0x20003368
 8001870:	200033d0 	.word	0x200033d0
 8001874:	42480000 	.word	0x42480000
 8001878:	44798000 	.word	0x44798000
 800187c:	2000339c 	.word	0x2000339c
 8001880:	200033d4 	.word	0x200033d4
 8001884:	200033d8 	.word	0x200033d8
 8001888:	200033b4 	.word	0x200033b4
 800188c:	200033dc 	.word	0x200033dc
 8001890:	00000000 	.word	0x00000000

08001894 <Omron_check>:

void Omron_check()
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 1)
 800189a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800189e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018a2:	f001 fefd 	bl	80036a0 <HAL_GPIO_ReadPin>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d119      	bne.n	80018e0 <Omron_check+0x4c>
	{
		if (HAL_GetTick() > timestamp_omron + 2000){
 80018ac:	f001 f94c 	bl	8002b48 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	4b15      	ldr	r3, [pc, #84]	@ (8001908 <Omron_check+0x74>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d920      	bls.n	8001900 <Omron_check+0x6c>
			std_msgs__msg__Int32 msg;

			// Set message value
			msg.data = 1;
 80018be:	2301      	movs	r3, #1
 80018c0:	607b      	str	r3, [r7, #4]
			Omron = 1;
 80018c2:	4b12      	ldr	r3, [pc, #72]	@ (800190c <Omron_check+0x78>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	601a      	str	r2, [r3, #0]
			// Publish message
			rcl_publish(&omron_publisher, &msg, NULL);
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	2200      	movs	r2, #0
 80018cc:	4619      	mov	r1, r3
 80018ce:	4810      	ldr	r0, [pc, #64]	@ (8001910 <Omron_check+0x7c>)
 80018d0:	f009 f912 	bl	800aaf8 <rcl_publish>
			timestamp_omron = HAL_GetTick();
 80018d4:	f001 f938 	bl	8002b48 <HAL_GetTick>
 80018d8:	4603      	mov	r3, r0
 80018da:	4a0b      	ldr	r2, [pc, #44]	@ (8001908 <Omron_check+0x74>)
 80018dc:	6013      	str	r3, [r2, #0]
		msg.data = 0;
		Omron = 0;
		// Publish message
		rcl_publish(&omron_publisher, &msg, NULL);
	}
}
 80018de:	e00f      	b.n	8001900 <Omron_check+0x6c>
		timestamp_omron  = HAL_GetTick();
 80018e0:	f001 f932 	bl	8002b48 <HAL_GetTick>
 80018e4:	4603      	mov	r3, r0
 80018e6:	4a08      	ldr	r2, [pc, #32]	@ (8001908 <Omron_check+0x74>)
 80018e8:	6013      	str	r3, [r2, #0]
		msg.data = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	603b      	str	r3, [r7, #0]
		Omron = 0;
 80018ee:	4b07      	ldr	r3, [pc, #28]	@ (800190c <Omron_check+0x78>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
		rcl_publish(&omron_publisher, &msg, NULL);
 80018f4:	463b      	mov	r3, r7
 80018f6:	2200      	movs	r2, #0
 80018f8:	4619      	mov	r1, r3
 80018fa:	4805      	ldr	r0, [pc, #20]	@ (8001910 <Omron_check+0x7c>)
 80018fc:	f009 f8fc 	bl	800aaf8 <rcl_publish>
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	200033e0 	.word	0x200033e0
 800190c:	200033cc 	.word	0x200033cc
 8001910:	20003278 	.word	0x20003278

08001914 <subscription_callback_servo>:

void subscription_callback_servo(const void * msgin)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
	const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32 *)msgin;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	60fb      	str	r3, [r7, #12]
	Servo_switch = msg->data;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a03      	ldr	r2, [pc, #12]	@ (8001934 <subscription_callback_servo+0x20>)
 8001926:	6013      	str	r3, [r2, #0]
	// 0 = do nothing
	// 1 and -1 , 1 == 1 up , -1 == 1 down
	// 2 and -2
}
 8001928:	bf00      	nop
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	20003368 	.word	0x20003368

08001938 <subscription_callback_Brush>:

void subscription_callback_Brush(const void * msgin)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32 *)msgin;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	60fb      	str	r3, [r7, #12]
	Brush = msg->data;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a03      	ldr	r2, [pc, #12]	@ (8001958 <subscription_callback_Brush+0x20>)
 800194a:	6013      	str	r3, [r2, #0]
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	20003360 	.word	0x20003360

0800195c <subscription_callback_Water>:

void subscription_callback_Water(const void * msgin)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32 *)msgin;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	60fb      	str	r3, [r7, #12]
	Water = msg->data;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a03      	ldr	r2, [pc, #12]	@ (800197c <subscription_callback_Water+0x20>)
 800196e:	6013      	str	r3, [r2, #0]
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	20003364 	.word	0x20003364

08001980 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001980:	b5b0      	push	{r4, r5, r7, lr}
 8001982:	b0b2      	sub	sp, #200	@ 0xc8
 8001984:	af02      	add	r7, sp, #8
 8001986:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
  /* USER CODE BEGIN 5 */
		rmw_uros_set_custom_transport(
 800198a:	4b61      	ldr	r3, [pc, #388]	@ (8001b10 <StartDefaultTask+0x190>)
 800198c:	9301      	str	r3, [sp, #4]
 800198e:	4b61      	ldr	r3, [pc, #388]	@ (8001b14 <StartDefaultTask+0x194>)
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	4b61      	ldr	r3, [pc, #388]	@ (8001b18 <StartDefaultTask+0x198>)
 8001994:	4a61      	ldr	r2, [pc, #388]	@ (8001b1c <StartDefaultTask+0x19c>)
 8001996:	4962      	ldr	r1, [pc, #392]	@ (8001b20 <StartDefaultTask+0x1a0>)
 8001998:	2001      	movs	r0, #1
 800199a:	f00a f935 	bl	800bc08 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

		rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 800199e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80019a2:	4618      	mov	r0, r3
 80019a4:	f00a f84c 	bl	800ba40 <rcutils_get_zero_initialized_allocator>
		freeRTOS_allocator.allocate = microros_allocate;
 80019a8:	4b5e      	ldr	r3, [pc, #376]	@ (8001b24 <StartDefaultTask+0x1a4>)
 80019aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		freeRTOS_allocator.deallocate = microros_deallocate;
 80019ae:	4b5e      	ldr	r3, [pc, #376]	@ (8001b28 <StartDefaultTask+0x1a8>)
 80019b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		freeRTOS_allocator.reallocate = microros_reallocate;
 80019b4:	4b5d      	ldr	r3, [pc, #372]	@ (8001b2c <StartDefaultTask+0x1ac>)
 80019b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
		freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 80019ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001b30 <StartDefaultTask+0x1b0>)
 80019bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

		if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 80019c0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80019c4:	4618      	mov	r0, r3
 80019c6:	f00a f849 	bl	800ba5c <rcutils_set_default_allocator>
 80019ca:	4603      	mov	r3, r0
 80019cc:	f083 0301 	eor.w	r3, r3, #1
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d004      	beq.n	80019e0 <StartDefaultTask+0x60>
		  printf("Error on default allocators (line %d)\n", __LINE__);
 80019d6:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 80019da:	4856      	ldr	r0, [pc, #344]	@ (8001b34 <StartDefaultTask+0x1b4>)
 80019dc:	f016 f810 	bl	8017a00 <iprintf>
		}

		// micro-ROS app
		allocator = rcl_get_default_allocator();
 80019e0:	4c55      	ldr	r4, [pc, #340]	@ (8001b38 <StartDefaultTask+0x1b8>)
 80019e2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80019e6:	4618      	mov	r0, r3
 80019e8:	f00a f856 	bl	800ba98 <rcutils_get_default_allocator>
 80019ec:	4625      	mov	r5, r4
 80019ee:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 80019f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f6:	6823      	ldr	r3, [r4, #0]
 80019f8:	602b      	str	r3, [r5, #0]

		init_options = rcl_get_zero_initialized_init_options();
 80019fa:	f008 fead 	bl	800a758 <rcl_get_zero_initialized_init_options>
 80019fe:	4603      	mov	r3, r0
 8001a00:	4a4e      	ldr	r2, [pc, #312]	@ (8001b3c <StartDefaultTask+0x1bc>)
 8001a02:	6013      	str	r3, [r2, #0]
		rcl_init_options_init(&init_options, allocator);
 8001a04:	4b4c      	ldr	r3, [pc, #304]	@ (8001b38 <StartDefaultTask+0x1b8>)
 8001a06:	466c      	mov	r4, sp
 8001a08:	f103 020c 	add.w	r2, r3, #12
 8001a0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a10:	e884 0003 	stmia.w	r4, {r0, r1}
 8001a14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a16:	4849      	ldr	r0, [pc, #292]	@ (8001b3c <StartDefaultTask+0x1bc>)
 8001a18:	f008 fea0 	bl	800a75c <rcl_init_options_init>
		rcl_init_options_set_domain_id(&init_options, 1);
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	4847      	ldr	r0, [pc, #284]	@ (8001b3c <StartDefaultTask+0x1bc>)
 8001a20:	f008 ff98 	bl	800a954 <rcl_init_options_set_domain_id>

		// Initialize rclc support object with custom options
		rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8001a24:	4b44      	ldr	r3, [pc, #272]	@ (8001b38 <StartDefaultTask+0x1b8>)
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	4b44      	ldr	r3, [pc, #272]	@ (8001b3c <StartDefaultTask+0x1bc>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4844      	ldr	r0, [pc, #272]	@ (8001b40 <StartDefaultTask+0x1c0>)
 8001a30:	f009 fef6 	bl	800b820 <rclc_support_init_with_options>

		// Create node
		rclc_node_init_default(&node, "cubemx_node", "", &support);
 8001a34:	4b42      	ldr	r3, [pc, #264]	@ (8001b40 <StartDefaultTask+0x1c0>)
 8001a36:	4a43      	ldr	r2, [pc, #268]	@ (8001b44 <StartDefaultTask+0x1c4>)
 8001a38:	4943      	ldr	r1, [pc, #268]	@ (8001b48 <StartDefaultTask+0x1c8>)
 8001a3a:	4844      	ldr	r0, [pc, #272]	@ (8001b4c <StartDefaultTask+0x1cc>)
 8001a3c:	f009 ff24 	bl	800b888 <rclc_node_init_default>

		// Create timer
		rclc_timer_init_default(&timer, &support, RCL_MS_TO_NS(10), timer_callback);
 8001a40:	4b43      	ldr	r3, [pc, #268]	@ (8001b50 <StartDefaultTask+0x1d0>)
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	4a43      	ldr	r2, [pc, #268]	@ (8001b54 <StartDefaultTask+0x1d4>)
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	493d      	ldr	r1, [pc, #244]	@ (8001b40 <StartDefaultTask+0x1c0>)
 8001a4c:	4842      	ldr	r0, [pc, #264]	@ (8001b58 <StartDefaultTask+0x1d8>)
 8001a4e:	f009 ffbf 	bl	800b9d0 <rclc_timer_init_default>

		// Create subscriber
		rclc_subscription_init_default(
 8001a52:	f00b fb25 	bl	800d0a0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001a56:	4602      	mov	r2, r0
 8001a58:	4b40      	ldr	r3, [pc, #256]	@ (8001b5c <StartDefaultTask+0x1dc>)
 8001a5a:	493c      	ldr	r1, [pc, #240]	@ (8001b4c <StartDefaultTask+0x1cc>)
 8001a5c:	4840      	ldr	r0, [pc, #256]	@ (8001b60 <StartDefaultTask+0x1e0>)
 8001a5e:	f009 ff83 	bl	800b968 <rclc_subscription_init_default>
			&subscriber_servo,
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			"cubemx_publisher_servo");

		rclc_subscription_init_default(
 8001a62:	f00b fb1d 	bl	800d0a0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001a66:	4602      	mov	r2, r0
 8001a68:	4b3e      	ldr	r3, [pc, #248]	@ (8001b64 <StartDefaultTask+0x1e4>)
 8001a6a:	4938      	ldr	r1, [pc, #224]	@ (8001b4c <StartDefaultTask+0x1cc>)
 8001a6c:	483e      	ldr	r0, [pc, #248]	@ (8001b68 <StartDefaultTask+0x1e8>)
 8001a6e:	f009 ff7b 	bl	800b968 <rclc_subscription_init_default>
			&subscriber_Brush,
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			"cubemx_publisher_Brush");

		rclc_subscription_init_default(
 8001a72:	f00b fb15 	bl	800d0a0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001a76:	4602      	mov	r2, r0
 8001a78:	4b3c      	ldr	r3, [pc, #240]	@ (8001b6c <StartDefaultTask+0x1ec>)
 8001a7a:	4934      	ldr	r1, [pc, #208]	@ (8001b4c <StartDefaultTask+0x1cc>)
 8001a7c:	483c      	ldr	r0, [pc, #240]	@ (8001b70 <StartDefaultTask+0x1f0>)
 8001a7e:	f009 ff73 	bl	800b968 <rclc_subscription_init_default>
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			"cubemx_publisher_Water");

		// create publisher
		rclc_publisher_init_default(
 8001a82:	f00b fb0d 	bl	800d0a0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001a86:	4602      	mov	r2, r0
 8001a88:	4b3a      	ldr	r3, [pc, #232]	@ (8001b74 <StartDefaultTask+0x1f4>)
 8001a8a:	4930      	ldr	r1, [pc, #192]	@ (8001b4c <StartDefaultTask+0x1cc>)
 8001a8c:	483a      	ldr	r0, [pc, #232]	@ (8001b78 <StartDefaultTask+0x1f8>)
 8001a8e:	f009 ff37 	bl	800b900 <rclc_publisher_init_default>
			&publisher,
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			"cubemx_publisher");

		rclc_publisher_init_default(
 8001a92:	f00b fb05 	bl	800d0a0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001a96:	4602      	mov	r2, r0
 8001a98:	4b38      	ldr	r3, [pc, #224]	@ (8001b7c <StartDefaultTask+0x1fc>)
 8001a9a:	492c      	ldr	r1, [pc, #176]	@ (8001b4c <StartDefaultTask+0x1cc>)
 8001a9c:	4838      	ldr	r0, [pc, #224]	@ (8001b80 <StartDefaultTask+0x200>)
 8001a9e:	f009 ff2f 	bl	800b900 <rclc_publisher_init_default>
			&omron_publisher,
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			"cubemx_publisher_Omron");

		msg_pub.data = 0;
 8001aa2:	4b38      	ldr	r3, [pc, #224]	@ (8001b84 <StartDefaultTask+0x204>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]

		// Initialize the executor
		executor = rclc_executor_get_zero_initialized_executor();
 8001aa8:	4c37      	ldr	r4, [pc, #220]	@ (8001b88 <StartDefaultTask+0x208>)
 8001aaa:	463b      	mov	r3, r7
 8001aac:	4618      	mov	r0, r3
 8001aae:	f009 fbb1 	bl	800b214 <rclc_executor_get_zero_initialized_executor>
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	463b      	mov	r3, r7
 8001ab6:	2288      	movs	r2, #136	@ 0x88
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f016 f956 	bl	8017d6a <memcpy>
		rclc_executor_init(&executor, &support.context, 4, &allocator);
 8001abe:	4b1e      	ldr	r3, [pc, #120]	@ (8001b38 <StartDefaultTask+0x1b8>)
 8001ac0:	2204      	movs	r2, #4
 8001ac2:	491f      	ldr	r1, [pc, #124]	@ (8001b40 <StartDefaultTask+0x1c0>)
 8001ac4:	4830      	ldr	r0, [pc, #192]	@ (8001b88 <StartDefaultTask+0x208>)
 8001ac6:	f009 fbaf 	bl	800b228 <rclc_executor_init>
		rclc_executor_add_timer(&executor, &timer);
 8001aca:	4923      	ldr	r1, [pc, #140]	@ (8001b58 <StartDefaultTask+0x1d8>)
 8001acc:	482e      	ldr	r0, [pc, #184]	@ (8001b88 <StartDefaultTask+0x208>)
 8001ace:	f009 fc4f 	bl	800b370 <rclc_executor_add_timer>
		rclc_executor_add_subscription(&executor, &subscriber_servo, &msg_servo, subscription_callback_servo, ON_NEW_DATA);
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	4b2d      	ldr	r3, [pc, #180]	@ (8001b8c <StartDefaultTask+0x20c>)
 8001ad8:	4a2d      	ldr	r2, [pc, #180]	@ (8001b90 <StartDefaultTask+0x210>)
 8001ada:	4921      	ldr	r1, [pc, #132]	@ (8001b60 <StartDefaultTask+0x1e0>)
 8001adc:	482a      	ldr	r0, [pc, #168]	@ (8001b88 <StartDefaultTask+0x208>)
 8001ade:	f009 fc13 	bl	800b308 <rclc_executor_add_subscription>
		rclc_executor_add_subscription(&executor, &subscriber_Brush, &msg_Brush, subscription_callback_Brush, ON_NEW_DATA);
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	4b2b      	ldr	r3, [pc, #172]	@ (8001b94 <StartDefaultTask+0x214>)
 8001ae8:	4a2b      	ldr	r2, [pc, #172]	@ (8001b98 <StartDefaultTask+0x218>)
 8001aea:	491f      	ldr	r1, [pc, #124]	@ (8001b68 <StartDefaultTask+0x1e8>)
 8001aec:	4826      	ldr	r0, [pc, #152]	@ (8001b88 <StartDefaultTask+0x208>)
 8001aee:	f009 fc0b 	bl	800b308 <rclc_executor_add_subscription>
		rclc_executor_add_subscription(&executor, &subscriber_Water, &msg_Water, subscription_callback_Water, ON_NEW_DATA);
 8001af2:	2300      	movs	r3, #0
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	4b29      	ldr	r3, [pc, #164]	@ (8001b9c <StartDefaultTask+0x21c>)
 8001af8:	4a29      	ldr	r2, [pc, #164]	@ (8001ba0 <StartDefaultTask+0x220>)
 8001afa:	491d      	ldr	r1, [pc, #116]	@ (8001b70 <StartDefaultTask+0x1f0>)
 8001afc:	4822      	ldr	r0, [pc, #136]	@ (8001b88 <StartDefaultTask+0x208>)
 8001afe:	f009 fc03 	bl	800b308 <rclc_executor_add_subscription>
		rclc_executor_spin(&executor);
 8001b02:	4821      	ldr	r0, [pc, #132]	@ (8001b88 <StartDefaultTask+0x208>)
 8001b04:	f009 fe4a 	bl	800b79c <rclc_executor_spin>

		for(;;)
		{
			osDelay(10);
 8001b08:	200a      	movs	r0, #10
 8001b0a:	f006 f955 	bl	8007db8 <osDelay>
 8001b0e:	e7fb      	b.n	8001b08 <StartDefaultTask+0x188>
 8001b10:	080029f9 	.word	0x080029f9
 8001b14:	08002995 	.word	0x08002995
 8001b18:	08002975 	.word	0x08002975
 8001b1c:	08002949 	.word	0x08002949
 8001b20:	2000012c 	.word	0x2000012c
 8001b24:	0800267d 	.word	0x0800267d
 8001b28:	080026c1 	.word	0x080026c1
 8001b2c:	080026f9 	.word	0x080026f9
 8001b30:	08002765 	.word	0x08002765
 8001b34:	08018b3c 	.word	0x08018b3c
 8001b38:	200032b4 	.word	0x200032b4
 8001b3c:	200032d0 	.word	0x200032d0
 8001b40:	20003280 	.word	0x20003280
 8001b44:	08018b64 	.word	0x08018b64
 8001b48:	08018b68 	.word	0x08018b68
 8001b4c:	200032c8 	.word	0x200032c8
 8001b50:	08001611 	.word	0x08001611
 8001b54:	00989680 	.word	0x00989680
 8001b58:	2000327c 	.word	0x2000327c
 8001b5c:	08018b74 	.word	0x08018b74
 8001b60:	20003258 	.word	0x20003258
 8001b64:	08018b8c 	.word	0x08018b8c
 8001b68:	20003260 	.word	0x20003260
 8001b6c:	08018ba4 	.word	0x08018ba4
 8001b70:	20003268 	.word	0x20003268
 8001b74:	08018bbc 	.word	0x08018bbc
 8001b78:	20003270 	.word	0x20003270
 8001b7c:	08018bd0 	.word	0x08018bd0
 8001b80:	20003278 	.word	0x20003278
 8001b84:	20003274 	.word	0x20003274
 8001b88:	200032d8 	.word	0x200032d8
 8001b8c:	08001915 	.word	0x08001915
 8001b90:	2000325c 	.word	0x2000325c
 8001b94:	08001939 	.word	0x08001939
 8001b98:	20003264 	.word	0x20003264
 8001b9c:	0800195d 	.word	0x0800195d
 8001ba0:	2000326c 	.word	0x2000326c

08001ba4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a04      	ldr	r2, [pc, #16]	@ (8001bc4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d101      	bne.n	8001bba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bb6:	f000 ffb5 	bl	8002b24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40012c00 	.word	0x40012c00

08001bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001bcc:	b672      	cpsid	i
}
 8001bce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bd0:	bf00      	nop
 8001bd2:	e7fd      	b.n	8001bd0 <Error_Handler+0x8>

08001bd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bda:	4b12      	ldr	r3, [pc, #72]	@ (8001c24 <HAL_MspInit+0x50>)
 8001bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bde:	4a11      	ldr	r2, [pc, #68]	@ (8001c24 <HAL_MspInit+0x50>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001be6:	4b0f      	ldr	r3, [pc, #60]	@ (8001c24 <HAL_MspInit+0x50>)
 8001be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	607b      	str	r3, [r7, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8001c24 <HAL_MspInit+0x50>)
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf6:	4a0b      	ldr	r2, [pc, #44]	@ (8001c24 <HAL_MspInit+0x50>)
 8001bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bfe:	4b09      	ldr	r3, [pc, #36]	@ (8001c24 <HAL_MspInit+0x50>)
 8001c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c06:	603b      	str	r3, [r7, #0]
 8001c08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	210f      	movs	r1, #15
 8001c0e:	f06f 0001 	mvn.w	r0, #1
 8001c12:	f001 f85d 	bl	8002cd0 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001c16:	f001 fe3b 	bl	8003890 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40021000 	.word	0x40021000

08001c28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b09e      	sub	sp, #120	@ 0x78
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c40:	f107 0310 	add.w	r3, r7, #16
 8001c44:	2254      	movs	r2, #84	@ 0x54
 8001c46:	2100      	movs	r1, #0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f015 ffc5 	bl	8017bd8 <memset>
  if(huart->Instance==LPUART1)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a4e      	ldr	r2, [pc, #312]	@ (8001d8c <HAL_UART_MspInit+0x164>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	f040 8094 	bne.w	8001d82 <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001c5a:	2320      	movs	r3, #32
 8001c5c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c62:	f107 0310 	add.w	r3, r7, #16
 8001c66:	4618      	mov	r0, r3
 8001c68:	f002 fb82 	bl	8004370 <HAL_RCCEx_PeriphCLKConfig>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001c72:	f7ff ffa9 	bl	8001bc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001c76:	4b46      	ldr	r3, [pc, #280]	@ (8001d90 <HAL_UART_MspInit+0x168>)
 8001c78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c7a:	4a45      	ldr	r2, [pc, #276]	@ (8001d90 <HAL_UART_MspInit+0x168>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001c82:	4b43      	ldr	r3, [pc, #268]	@ (8001d90 <HAL_UART_MspInit+0x168>)
 8001c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8e:	4b40      	ldr	r3, [pc, #256]	@ (8001d90 <HAL_UART_MspInit+0x168>)
 8001c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c92:	4a3f      	ldr	r2, [pc, #252]	@ (8001d90 <HAL_UART_MspInit+0x168>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c9a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d90 <HAL_UART_MspInit+0x168>)
 8001c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001ca6:	230c      	movs	r3, #12
 8001ca8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001caa:	2302      	movs	r3, #2
 8001cac:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001cb6:	230c      	movs	r3, #12
 8001cb8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cba:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cc4:	f001 fb6a 	bl	800339c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 8001cc8:	4b32      	ldr	r3, [pc, #200]	@ (8001d94 <HAL_UART_MspInit+0x16c>)
 8001cca:	4a33      	ldr	r2, [pc, #204]	@ (8001d98 <HAL_UART_MspInit+0x170>)
 8001ccc:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001cce:	4b31      	ldr	r3, [pc, #196]	@ (8001d94 <HAL_UART_MspInit+0x16c>)
 8001cd0:	2223      	movs	r2, #35	@ 0x23
 8001cd2:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cd4:	4b2f      	ldr	r3, [pc, #188]	@ (8001d94 <HAL_UART_MspInit+0x16c>)
 8001cd6:	2210      	movs	r2, #16
 8001cd8:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cda:	4b2e      	ldr	r3, [pc, #184]	@ (8001d94 <HAL_UART_MspInit+0x16c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ce0:	4b2c      	ldr	r3, [pc, #176]	@ (8001d94 <HAL_UART_MspInit+0x16c>)
 8001ce2:	2280      	movs	r2, #128	@ 0x80
 8001ce4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ce6:	4b2b      	ldr	r3, [pc, #172]	@ (8001d94 <HAL_UART_MspInit+0x16c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cec:	4b29      	ldr	r3, [pc, #164]	@ (8001d94 <HAL_UART_MspInit+0x16c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001cf2:	4b28      	ldr	r3, [pc, #160]	@ (8001d94 <HAL_UART_MspInit+0x16c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001cf8:	4b26      	ldr	r3, [pc, #152]	@ (8001d94 <HAL_UART_MspInit+0x16c>)
 8001cfa:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001cfe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001d00:	4824      	ldr	r0, [pc, #144]	@ (8001d94 <HAL_UART_MspInit+0x16c>)
 8001d02:	f001 f80d 	bl	8002d20 <HAL_DMA_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8001d0c:	f7ff ff5c 	bl	8001bc8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a20      	ldr	r2, [pc, #128]	@ (8001d94 <HAL_UART_MspInit+0x16c>)
 8001d14:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001d16:	4a1f      	ldr	r2, [pc, #124]	@ (8001d94 <HAL_UART_MspInit+0x16c>)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8001d1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001d9c <HAL_UART_MspInit+0x174>)
 8001d1e:	4a20      	ldr	r2, [pc, #128]	@ (8001da0 <HAL_UART_MspInit+0x178>)
 8001d20:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001d22:	4b1e      	ldr	r3, [pc, #120]	@ (8001d9c <HAL_UART_MspInit+0x174>)
 8001d24:	2222      	movs	r2, #34	@ 0x22
 8001d26:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d28:	4b1c      	ldr	r3, [pc, #112]	@ (8001d9c <HAL_UART_MspInit+0x174>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001d9c <HAL_UART_MspInit+0x174>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d34:	4b19      	ldr	r3, [pc, #100]	@ (8001d9c <HAL_UART_MspInit+0x174>)
 8001d36:	2280      	movs	r2, #128	@ 0x80
 8001d38:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d3a:	4b18      	ldr	r3, [pc, #96]	@ (8001d9c <HAL_UART_MspInit+0x174>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d40:	4b16      	ldr	r3, [pc, #88]	@ (8001d9c <HAL_UART_MspInit+0x174>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8001d46:	4b15      	ldr	r3, [pc, #84]	@ (8001d9c <HAL_UART_MspInit+0x174>)
 8001d48:	2220      	movs	r2, #32
 8001d4a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001d4c:	4b13      	ldr	r3, [pc, #76]	@ (8001d9c <HAL_UART_MspInit+0x174>)
 8001d4e:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001d52:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001d54:	4811      	ldr	r0, [pc, #68]	@ (8001d9c <HAL_UART_MspInit+0x174>)
 8001d56:	f000 ffe3 	bl	8002d20 <HAL_DMA_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8001d60:	f7ff ff32 	bl	8001bc8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a0d      	ldr	r2, [pc, #52]	@ (8001d9c <HAL_UART_MspInit+0x174>)
 8001d68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001d6c:	4a0b      	ldr	r2, [pc, #44]	@ (8001d9c <HAL_UART_MspInit+0x174>)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2105      	movs	r1, #5
 8001d76:	205b      	movs	r0, #91	@ 0x5b
 8001d78:	f000 ffaa 	bl	8002cd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001d7c:	205b      	movs	r0, #91	@ 0x5b
 8001d7e:	f000 ffc1 	bl	8002d04 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8001d82:	bf00      	nop
 8001d84:	3778      	adds	r7, #120	@ 0x78
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40008000 	.word	0x40008000
 8001d90:	40021000 	.word	0x40021000
 8001d94:	200001c0 	.word	0x200001c0
 8001d98:	40020008 	.word	0x40020008
 8001d9c:	20000220 	.word	0x20000220
 8001da0:	4002001c 	.word	0x4002001c

08001da4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001db4:	d10c      	bne.n	8001dd0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001db6:	4b12      	ldr	r3, [pc, #72]	@ (8001e00 <HAL_TIM_Base_MspInit+0x5c>)
 8001db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dba:	4a11      	ldr	r2, [pc, #68]	@ (8001e00 <HAL_TIM_Base_MspInit+0x5c>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e00 <HAL_TIM_Base_MspInit+0x5c>)
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001dce:	e010      	b.n	8001df2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0b      	ldr	r2, [pc, #44]	@ (8001e04 <HAL_TIM_Base_MspInit+0x60>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d10b      	bne.n	8001df2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dda:	4b09      	ldr	r3, [pc, #36]	@ (8001e00 <HAL_TIM_Base_MspInit+0x5c>)
 8001ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dde:	4a08      	ldr	r2, [pc, #32]	@ (8001e00 <HAL_TIM_Base_MspInit+0x5c>)
 8001de0:	f043 0302 	orr.w	r3, r3, #2
 8001de4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001de6:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <HAL_TIM_Base_MspInit+0x5c>)
 8001de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	68bb      	ldr	r3, [r7, #8]
}
 8001df2:	bf00      	nop
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40000400 	.word	0x40000400

08001e08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08a      	sub	sp, #40	@ 0x28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e28:	d11d      	bne.n	8001e66 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2a:	4b22      	ldr	r3, [pc, #136]	@ (8001eb4 <HAL_TIM_MspPostInit+0xac>)
 8001e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e2e:	4a21      	ldr	r2, [pc, #132]	@ (8001eb4 <HAL_TIM_MspPostInit+0xac>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e36:	4b1f      	ldr	r3, [pc, #124]	@ (8001eb4 <HAL_TIM_MspPostInit+0xac>)
 8001e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8001e42:	2322      	movs	r3, #34	@ 0x22
 8001e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	2302      	movs	r3, #2
 8001e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e52:	2301      	movs	r3, #1
 8001e54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e60:	f001 fa9c 	bl	800339c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e64:	e021      	b.n	8001eaa <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a13      	ldr	r2, [pc, #76]	@ (8001eb8 <HAL_TIM_MspPostInit+0xb0>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d11c      	bne.n	8001eaa <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e70:	4b10      	ldr	r3, [pc, #64]	@ (8001eb4 <HAL_TIM_MspPostInit+0xac>)
 8001e72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e74:	4a0f      	ldr	r2, [pc, #60]	@ (8001eb4 <HAL_TIM_MspPostInit+0xac>)
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb4 <HAL_TIM_MspPostInit+0xac>)
 8001e7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001e88:	2350      	movs	r3, #80	@ 0x50
 8001e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e94:	2300      	movs	r3, #0
 8001e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ea6:	f001 fa79 	bl	800339c <HAL_GPIO_Init>
}
 8001eaa:	bf00      	nop
 8001eac:	3728      	adds	r7, #40	@ 0x28
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40000400 	.word	0x40000400

08001ebc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08c      	sub	sp, #48	@ 0x30
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ecc:	4b2c      	ldr	r3, [pc, #176]	@ (8001f80 <HAL_InitTick+0xc4>)
 8001ece:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ed0:	4a2b      	ldr	r2, [pc, #172]	@ (8001f80 <HAL_InitTick+0xc4>)
 8001ed2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ed6:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ed8:	4b29      	ldr	r3, [pc, #164]	@ (8001f80 <HAL_InitTick+0xc4>)
 8001eda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001edc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ee4:	f107 020c 	add.w	r2, r7, #12
 8001ee8:	f107 0310 	add.w	r3, r7, #16
 8001eec:	4611      	mov	r1, r2
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f002 f9c6 	bl	8004280 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001ef4:	f002 f9ae 	bl	8004254 <HAL_RCC_GetPCLK2Freq>
 8001ef8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001efc:	4a21      	ldr	r2, [pc, #132]	@ (8001f84 <HAL_InitTick+0xc8>)
 8001efe:	fba2 2303 	umull	r2, r3, r2, r3
 8001f02:	0c9b      	lsrs	r3, r3, #18
 8001f04:	3b01      	subs	r3, #1
 8001f06:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001f08:	4b1f      	ldr	r3, [pc, #124]	@ (8001f88 <HAL_InitTick+0xcc>)
 8001f0a:	4a20      	ldr	r2, [pc, #128]	@ (8001f8c <HAL_InitTick+0xd0>)
 8001f0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001f88 <HAL_InitTick+0xcc>)
 8001f10:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f14:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001f16:	4a1c      	ldr	r2, [pc, #112]	@ (8001f88 <HAL_InitTick+0xcc>)
 8001f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001f88 <HAL_InitTick+0xcc>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f22:	4b19      	ldr	r3, [pc, #100]	@ (8001f88 <HAL_InitTick+0xcc>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001f28:	4817      	ldr	r0, [pc, #92]	@ (8001f88 <HAL_InitTick+0xcc>)
 8001f2a:	f002 fc6f 	bl	800480c <HAL_TIM_Base_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001f34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d11b      	bne.n	8001f74 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001f3c:	4812      	ldr	r0, [pc, #72]	@ (8001f88 <HAL_InitTick+0xcc>)
 8001f3e:	f002 fd2d 	bl	800499c <HAL_TIM_Base_Start_IT>
 8001f42:	4603      	mov	r3, r0
 8001f44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001f48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d111      	bne.n	8001f74 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001f50:	2019      	movs	r0, #25
 8001f52:	f000 fed7 	bl	8002d04 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b0f      	cmp	r3, #15
 8001f5a:	d808      	bhi.n	8001f6e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	2019      	movs	r0, #25
 8001f62:	f000 feb5 	bl	8002cd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f66:	4a0a      	ldr	r2, [pc, #40]	@ (8001f90 <HAL_InitTick+0xd4>)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6013      	str	r3, [r2, #0]
 8001f6c:	e002      	b.n	8001f74 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001f74:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3730      	adds	r7, #48	@ 0x30
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40021000 	.word	0x40021000
 8001f84:	431bde83 	.word	0x431bde83
 8001f88:	200033e4 	.word	0x200033e4
 8001f8c:	40012c00 	.word	0x40012c00
 8001f90:	20000008 	.word	0x20000008

08001f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f98:	bf00      	nop
 8001f9a:	e7fd      	b.n	8001f98 <NMI_Handler+0x4>

08001f9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fa0:	bf00      	nop
 8001fa2:	e7fd      	b.n	8001fa0 <HardFault_Handler+0x4>

08001fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa8:	bf00      	nop
 8001faa:	e7fd      	b.n	8001fa8 <MemManage_Handler+0x4>

08001fac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fb0:	bf00      	nop
 8001fb2:	e7fd      	b.n	8001fb0 <BusFault_Handler+0x4>

08001fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb8:	bf00      	nop
 8001fba:	e7fd      	b.n	8001fb8 <UsageFault_Handler+0x4>

08001fbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
	...

08001fcc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001fd0:	4802      	ldr	r0, [pc, #8]	@ (8001fdc <DMA1_Channel1_IRQHandler+0x10>)
 8001fd2:	f001 f888 	bl	80030e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	200001c0 	.word	0x200001c0

08001fe0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001fe4:	4802      	ldr	r0, [pc, #8]	@ (8001ff0 <DMA1_Channel2_IRQHandler+0x10>)
 8001fe6:	f001 f87e 	bl	80030e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000220 	.word	0x20000220

08001ff4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ff8:	4802      	ldr	r0, [pc, #8]	@ (8002004 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001ffa:	f002 febb 	bl	8004d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	200033e4 	.word	0x200033e4

08002008 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800200c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002010:	f001 fb76 	bl	8003700 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002014:	bf00      	nop
 8002016:	bd80      	pop	{r7, pc}

08002018 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800201c:	4802      	ldr	r0, [pc, #8]	@ (8002028 <LPUART1_IRQHandler+0x10>)
 800201e:	f004 f979 	bl	8006314 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	2000012c 	.word	0x2000012c

0800202c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return 1;
 8002030:	2301      	movs	r3, #1
}
 8002032:	4618      	mov	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <_kill>:

int _kill(int pid, int sig)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002046:	f015 fe5b 	bl	8017d00 <__errno>
 800204a:	4603      	mov	r3, r0
 800204c:	2216      	movs	r2, #22
 800204e:	601a      	str	r2, [r3, #0]
  return -1;
 8002050:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002054:	4618      	mov	r0, r3
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <_exit>:

void _exit (int status)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002064:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff ffe7 	bl	800203c <_kill>
  while (1) {}    /* Make sure we hang here */
 800206e:	bf00      	nop
 8002070:	e7fd      	b.n	800206e <_exit+0x12>

08002072 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b086      	sub	sp, #24
 8002076:	af00      	add	r7, sp, #0
 8002078:	60f8      	str	r0, [r7, #12]
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	e00a      	b.n	800209a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002084:	f3af 8000 	nop.w
 8002088:	4601      	mov	r1, r0
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	60ba      	str	r2, [r7, #8]
 8002090:	b2ca      	uxtb	r2, r1
 8002092:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	3301      	adds	r3, #1
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	429a      	cmp	r2, r3
 80020a0:	dbf0      	blt.n	8002084 <_read+0x12>
  }

  return len;
 80020a2:	687b      	ldr	r3, [r7, #4]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	e009      	b.n	80020d2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	1c5a      	adds	r2, r3, #1
 80020c2:	60ba      	str	r2, [r7, #8]
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	3301      	adds	r3, #1
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	dbf1      	blt.n	80020be <_write+0x12>
  }
  return len;
 80020da:	687b      	ldr	r3, [r7, #4]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <_close>:

int _close(int file)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800210c:	605a      	str	r2, [r3, #4]
  return 0;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <_isatty>:

int _isatty(int file)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002124:	2301      	movs	r3, #1
}
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002132:	b480      	push	{r7}
 8002134:	b085      	sub	sp, #20
 8002136:	af00      	add	r7, sp, #0
 8002138:	60f8      	str	r0, [r7, #12]
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002154:	4a14      	ldr	r2, [pc, #80]	@ (80021a8 <_sbrk+0x5c>)
 8002156:	4b15      	ldr	r3, [pc, #84]	@ (80021ac <_sbrk+0x60>)
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002160:	4b13      	ldr	r3, [pc, #76]	@ (80021b0 <_sbrk+0x64>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d102      	bne.n	800216e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002168:	4b11      	ldr	r3, [pc, #68]	@ (80021b0 <_sbrk+0x64>)
 800216a:	4a12      	ldr	r2, [pc, #72]	@ (80021b4 <_sbrk+0x68>)
 800216c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800216e:	4b10      	ldr	r3, [pc, #64]	@ (80021b0 <_sbrk+0x64>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4413      	add	r3, r2
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	429a      	cmp	r2, r3
 800217a:	d207      	bcs.n	800218c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800217c:	f015 fdc0 	bl	8017d00 <__errno>
 8002180:	4603      	mov	r3, r0
 8002182:	220c      	movs	r2, #12
 8002184:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002186:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800218a:	e009      	b.n	80021a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800218c:	4b08      	ldr	r3, [pc, #32]	@ (80021b0 <_sbrk+0x64>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002192:	4b07      	ldr	r3, [pc, #28]	@ (80021b0 <_sbrk+0x64>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	4a05      	ldr	r2, [pc, #20]	@ (80021b0 <_sbrk+0x64>)
 800219c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800219e:	68fb      	ldr	r3, [r7, #12]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20020000 	.word	0x20020000
 80021ac:	00000400 	.word	0x00000400
 80021b0:	20003434 	.word	0x20003434
 80021b4:	2000ae88 	.word	0x2000ae88

080021b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80021bc:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <SystemInit+0x20>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c2:	4a05      	ldr	r2, [pc, #20]	@ (80021d8 <SystemInit+0x20>)
 80021c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	@ 0x28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80021e8:	f006 fe28 	bl	8008e3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80021ec:	4b5a      	ldr	r3, [pc, #360]	@ (8002358 <pvPortMallocMicroROS+0x17c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80021f4:	f000 f986 	bl	8002504 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80021f8:	4b58      	ldr	r3, [pc, #352]	@ (800235c <pvPortMallocMicroROS+0x180>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4013      	ands	r3, r2
 8002200:	2b00      	cmp	r3, #0
 8002202:	f040 8090 	bne.w	8002326 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d01e      	beq.n	800224a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800220c:	2208      	movs	r2, #8
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4413      	add	r3, r2
 8002212:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	2b00      	cmp	r3, #0
 800221c:	d015      	beq.n	800224a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f023 0307 	bic.w	r3, r3, #7
 8002224:	3308      	adds	r3, #8
 8002226:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00b      	beq.n	800224a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002236:	f383 8811 	msr	BASEPRI, r3
 800223a:	f3bf 8f6f 	isb	sy
 800223e:	f3bf 8f4f 	dsb	sy
 8002242:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002244:	bf00      	nop
 8002246:	bf00      	nop
 8002248:	e7fd      	b.n	8002246 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d06a      	beq.n	8002326 <pvPortMallocMicroROS+0x14a>
 8002250:	4b43      	ldr	r3, [pc, #268]	@ (8002360 <pvPortMallocMicroROS+0x184>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	429a      	cmp	r2, r3
 8002258:	d865      	bhi.n	8002326 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800225a:	4b42      	ldr	r3, [pc, #264]	@ (8002364 <pvPortMallocMicroROS+0x188>)
 800225c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800225e:	4b41      	ldr	r3, [pc, #260]	@ (8002364 <pvPortMallocMicroROS+0x188>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002264:	e004      	b.n	8002270 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8002266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002268:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800226a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	429a      	cmp	r2, r3
 8002278:	d903      	bls.n	8002282 <pvPortMallocMicroROS+0xa6>
 800227a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f1      	bne.n	8002266 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002282:	4b35      	ldr	r3, [pc, #212]	@ (8002358 <pvPortMallocMicroROS+0x17c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002288:	429a      	cmp	r2, r3
 800228a:	d04c      	beq.n	8002326 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800228c:	6a3b      	ldr	r3, [r7, #32]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2208      	movs	r2, #8
 8002292:	4413      	add	r3, r2
 8002294:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800229e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	1ad2      	subs	r2, r2, r3
 80022a6:	2308      	movs	r3, #8
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d920      	bls.n	80022f0 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80022ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4413      	add	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00b      	beq.n	80022d8 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80022c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022c4:	f383 8811 	msr	BASEPRI, r3
 80022c8:	f3bf 8f6f 	isb	sy
 80022cc:	f3bf 8f4f 	dsb	sy
 80022d0:	613b      	str	r3, [r7, #16]
}
 80022d2:	bf00      	nop
 80022d4:	bf00      	nop
 80022d6:	e7fd      	b.n	80022d4 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80022d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	1ad2      	subs	r2, r2, r3
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80022e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80022ea:	69b8      	ldr	r0, [r7, #24]
 80022ec:	f000 f96c 	bl	80025c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80022f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002360 <pvPortMallocMicroROS+0x184>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	4a19      	ldr	r2, [pc, #100]	@ (8002360 <pvPortMallocMicroROS+0x184>)
 80022fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80022fe:	4b18      	ldr	r3, [pc, #96]	@ (8002360 <pvPortMallocMicroROS+0x184>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	4b19      	ldr	r3, [pc, #100]	@ (8002368 <pvPortMallocMicroROS+0x18c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d203      	bcs.n	8002312 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800230a:	4b15      	ldr	r3, [pc, #84]	@ (8002360 <pvPortMallocMicroROS+0x184>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a16      	ldr	r2, [pc, #88]	@ (8002368 <pvPortMallocMicroROS+0x18c>)
 8002310:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	4b11      	ldr	r3, [pc, #68]	@ (800235c <pvPortMallocMicroROS+0x180>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	431a      	orrs	r2, r3
 800231c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002326:	f006 fd97 	bl	8008e58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00b      	beq.n	800234c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8002334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002338:	f383 8811 	msr	BASEPRI, r3
 800233c:	f3bf 8f6f 	isb	sy
 8002340:	f3bf 8f4f 	dsb	sy
 8002344:	60fb      	str	r3, [r7, #12]
}
 8002346:	bf00      	nop
 8002348:	bf00      	nop
 800234a:	e7fd      	b.n	8002348 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 800234c:	69fb      	ldr	r3, [r7, #28]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3728      	adds	r7, #40	@ 0x28
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20004040 	.word	0x20004040
 800235c:	2000404c 	.word	0x2000404c
 8002360:	20004044 	.word	0x20004044
 8002364:	20004038 	.word	0x20004038
 8002368:	20004048 	.word	0x20004048

0800236c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d04a      	beq.n	8002414 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800237e:	2308      	movs	r3, #8
 8002380:	425b      	negs	r3, r3
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	4413      	add	r3, r2
 8002386:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	4b22      	ldr	r3, [pc, #136]	@ (800241c <vPortFreeMicroROS+0xb0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4013      	ands	r3, r2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d10b      	bne.n	80023b2 <vPortFreeMicroROS+0x46>
	__asm volatile
 800239a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800239e:	f383 8811 	msr	BASEPRI, r3
 80023a2:	f3bf 8f6f 	isb	sy
 80023a6:	f3bf 8f4f 	dsb	sy
 80023aa:	60fb      	str	r3, [r7, #12]
}
 80023ac:	bf00      	nop
 80023ae:	bf00      	nop
 80023b0:	e7fd      	b.n	80023ae <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00b      	beq.n	80023d2 <vPortFreeMicroROS+0x66>
	__asm volatile
 80023ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023be:	f383 8811 	msr	BASEPRI, r3
 80023c2:	f3bf 8f6f 	isb	sy
 80023c6:	f3bf 8f4f 	dsb	sy
 80023ca:	60bb      	str	r3, [r7, #8]
}
 80023cc:	bf00      	nop
 80023ce:	bf00      	nop
 80023d0:	e7fd      	b.n	80023ce <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	4b11      	ldr	r3, [pc, #68]	@ (800241c <vPortFreeMicroROS+0xb0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4013      	ands	r3, r2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d019      	beq.n	8002414 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d115      	bne.n	8002414 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	4b0b      	ldr	r3, [pc, #44]	@ (800241c <vPortFreeMicroROS+0xb0>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	401a      	ands	r2, r3
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80023f8:	f006 fd20 	bl	8008e3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	4b07      	ldr	r3, [pc, #28]	@ (8002420 <vPortFreeMicroROS+0xb4>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4413      	add	r3, r2
 8002406:	4a06      	ldr	r2, [pc, #24]	@ (8002420 <vPortFreeMicroROS+0xb4>)
 8002408:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800240a:	6938      	ldr	r0, [r7, #16]
 800240c:	f000 f8dc 	bl	80025c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002410:	f006 fd22 	bl	8008e58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002414:	bf00      	nop
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	2000404c 	.word	0x2000404c
 8002420:	20004044 	.word	0x20004044

08002424 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8002424:	b480      	push	{r7}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8002430:	2308      	movs	r3, #8
 8002432:	425b      	negs	r3, r3
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	4413      	add	r3, r2
 8002438:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	4b06      	ldr	r3, [pc, #24]	@ (800245c <getBlockSize+0x38>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	43db      	mvns	r3, r3
 8002448:	4013      	ands	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]

	return count;
 800244c:	68fb      	ldr	r3, [r7, #12]
}
 800244e:	4618      	mov	r0, r3
 8002450:	371c      	adds	r7, #28
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	2000404c 	.word	0x2000404c

08002460 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800246a:	f006 fce7 	bl	8008e3c <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800246e:	6838      	ldr	r0, [r7, #0]
 8002470:	f7ff feb4 	bl	80021dc <pvPortMallocMicroROS>
 8002474:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d017      	beq.n	80024ac <pvPortReallocMicroROS+0x4c>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d014      	beq.n	80024ac <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff ffce 	bl	8002424 <getBlockSize>
 8002488:	4603      	mov	r3, r0
 800248a:	2208      	movs	r2, #8
 800248c:	1a9b      	subs	r3, r3, r2
 800248e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	429a      	cmp	r2, r3
 8002496:	d201      	bcs.n	800249c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	68b8      	ldr	r0, [r7, #8]
 80024a2:	f015 fc62 	bl	8017d6a <memcpy>

		vPortFreeMicroROS(pv);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff ff60 	bl	800236c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80024ac:	f006 fcd4 	bl	8008e58 <xTaskResumeAll>

	return newmem;
 80024b0:	68bb      	ldr	r3, [r7, #8]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b086      	sub	sp, #24
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80024c4:	f006 fcba 	bl	8008e3c <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	fb02 f303 	mul.w	r3, r2, r3
 80024d0:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80024d2:	6978      	ldr	r0, [r7, #20]
 80024d4:	f7ff fe82 	bl	80021dc <pvPortMallocMicroROS>
 80024d8:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	613b      	str	r3, [r7, #16]

  	while(count--)
 80024de:	e004      	b.n	80024ea <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	613a      	str	r2, [r7, #16]
 80024e6:	2200      	movs	r2, #0
 80024e8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	1e5a      	subs	r2, r3, #1
 80024ee:	617a      	str	r2, [r7, #20]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1f5      	bne.n	80024e0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80024f4:	f006 fcb0 	bl	8008e58 <xTaskResumeAll>
  	return mem;
 80024f8:	68fb      	ldr	r3, [r7, #12]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800250a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800250e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002510:	4b27      	ldr	r3, [pc, #156]	@ (80025b0 <prvHeapInit+0xac>)
 8002512:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00c      	beq.n	8002538 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	3307      	adds	r3, #7
 8002522:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f023 0307 	bic.w	r3, r3, #7
 800252a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	4a1f      	ldr	r2, [pc, #124]	@ (80025b0 <prvHeapInit+0xac>)
 8002534:	4413      	add	r3, r2
 8002536:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800253c:	4a1d      	ldr	r2, [pc, #116]	@ (80025b4 <prvHeapInit+0xb0>)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002542:	4b1c      	ldr	r3, [pc, #112]	@ (80025b4 <prvHeapInit+0xb0>)
 8002544:	2200      	movs	r2, #0
 8002546:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	4413      	add	r3, r2
 800254e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002550:	2208      	movs	r2, #8
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1a9b      	subs	r3, r3, r2
 8002556:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f023 0307 	bic.w	r3, r3, #7
 800255e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4a15      	ldr	r2, [pc, #84]	@ (80025b8 <prvHeapInit+0xb4>)
 8002564:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002566:	4b14      	ldr	r3, [pc, #80]	@ (80025b8 <prvHeapInit+0xb4>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2200      	movs	r2, #0
 800256c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800256e:	4b12      	ldr	r3, [pc, #72]	@ (80025b8 <prvHeapInit+0xb4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	1ad2      	subs	r2, r2, r3
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002584:	4b0c      	ldr	r3, [pc, #48]	@ (80025b8 <prvHeapInit+0xb4>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	4a0a      	ldr	r2, [pc, #40]	@ (80025bc <prvHeapInit+0xb8>)
 8002592:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	4a09      	ldr	r2, [pc, #36]	@ (80025c0 <prvHeapInit+0xbc>)
 800259a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800259c:	4b09      	ldr	r3, [pc, #36]	@ (80025c4 <prvHeapInit+0xc0>)
 800259e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80025a2:	601a      	str	r2, [r3, #0]
}
 80025a4:	bf00      	nop
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	20003438 	.word	0x20003438
 80025b4:	20004038 	.word	0x20004038
 80025b8:	20004040 	.word	0x20004040
 80025bc:	20004048 	.word	0x20004048
 80025c0:	20004044 	.word	0x20004044
 80025c4:	2000404c 	.word	0x2000404c

080025c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80025d0:	4b28      	ldr	r3, [pc, #160]	@ (8002674 <prvInsertBlockIntoFreeList+0xac>)
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	e002      	b.n	80025dc <prvInsertBlockIntoFreeList+0x14>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d8f7      	bhi.n	80025d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	4413      	add	r3, r2
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d108      	bne.n	800260a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	441a      	add	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	441a      	add	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d118      	bne.n	8002650 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	4b15      	ldr	r3, [pc, #84]	@ (8002678 <prvInsertBlockIntoFreeList+0xb0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d00d      	beq.n	8002646 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	441a      	add	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	e008      	b.n	8002658 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002646:	4b0c      	ldr	r3, [pc, #48]	@ (8002678 <prvInsertBlockIntoFreeList+0xb0>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	e003      	b.n	8002658 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	429a      	cmp	r2, r3
 800265e:	d002      	beq.n	8002666 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002666:	bf00      	nop
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	20004038 	.word	0x20004038
 8002678:	20004040 	.word	0x20004040

0800267c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002686:	4b0c      	ldr	r3, [pc, #48]	@ (80026b8 <microros_allocate+0x3c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	461a      	mov	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4413      	add	r3, r2
 8002690:	461a      	mov	r2, r3
 8002692:	4b09      	ldr	r3, [pc, #36]	@ (80026b8 <microros_allocate+0x3c>)
 8002694:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002696:	4b09      	ldr	r3, [pc, #36]	@ (80026bc <microros_allocate+0x40>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	461a      	mov	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4413      	add	r3, r2
 80026a0:	461a      	mov	r2, r3
 80026a2:	4b06      	ldr	r3, [pc, #24]	@ (80026bc <microros_allocate+0x40>)
 80026a4:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff fd98 	bl	80021dc <pvPortMallocMicroROS>
 80026ac:	4603      	mov	r3, r0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20004050 	.word	0x20004050
 80026bc:	20004054 	.word	0x20004054

080026c0 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00c      	beq.n	80026ea <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff fea7 	bl	8002424 <getBlockSize>
 80026d6:	4603      	mov	r3, r0
 80026d8:	4a06      	ldr	r2, [pc, #24]	@ (80026f4 <microros_deallocate+0x34>)
 80026da:	6812      	ldr	r2, [r2, #0]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	461a      	mov	r2, r3
 80026e0:	4b04      	ldr	r3, [pc, #16]	@ (80026f4 <microros_deallocate+0x34>)
 80026e2:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7ff fe41 	bl	800236c <vPortFreeMicroROS>
  }
}
 80026ea:	bf00      	nop
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20004054 	.word	0x20004054

080026f8 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002704:	4b15      	ldr	r3, [pc, #84]	@ (800275c <microros_reallocate+0x64>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	461a      	mov	r2, r3
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	4413      	add	r3, r2
 800270e:	461a      	mov	r2, r3
 8002710:	4b12      	ldr	r3, [pc, #72]	@ (800275c <microros_reallocate+0x64>)
 8002712:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002714:	4b12      	ldr	r3, [pc, #72]	@ (8002760 <microros_reallocate+0x68>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	461a      	mov	r2, r3
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	4413      	add	r3, r2
 800271e:	461a      	mov	r2, r3
 8002720:	4b0f      	ldr	r3, [pc, #60]	@ (8002760 <microros_reallocate+0x68>)
 8002722:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d104      	bne.n	8002734 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800272a:	68b8      	ldr	r0, [r7, #8]
 800272c:	f7ff fd56 	bl	80021dc <pvPortMallocMicroROS>
 8002730:	4603      	mov	r3, r0
 8002732:	e00e      	b.n	8002752 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f7ff fe75 	bl	8002424 <getBlockSize>
 800273a:	4603      	mov	r3, r0
 800273c:	4a08      	ldr	r2, [pc, #32]	@ (8002760 <microros_reallocate+0x68>)
 800273e:	6812      	ldr	r2, [r2, #0]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	461a      	mov	r2, r3
 8002744:	4b06      	ldr	r3, [pc, #24]	@ (8002760 <microros_reallocate+0x68>)
 8002746:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002748:	68b9      	ldr	r1, [r7, #8]
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f7ff fe88 	bl	8002460 <pvPortReallocMicroROS>
 8002750:	4603      	mov	r3, r0
  }
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20004050 	.word	0x20004050
 8002760:	20004054 	.word	0x20004054

08002764 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	fb02 f303 	mul.w	r3, r2, r3
 8002778:	4a0c      	ldr	r2, [pc, #48]	@ (80027ac <microros_zero_allocate+0x48>)
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	4413      	add	r3, r2
 800277e:	461a      	mov	r2, r3
 8002780:	4b0a      	ldr	r3, [pc, #40]	@ (80027ac <microros_zero_allocate+0x48>)
 8002782:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	fb02 f303 	mul.w	r3, r2, r3
 800278c:	4a08      	ldr	r2, [pc, #32]	@ (80027b0 <microros_zero_allocate+0x4c>)
 800278e:	6812      	ldr	r2, [r2, #0]
 8002790:	4413      	add	r3, r2
 8002792:	461a      	mov	r2, r3
 8002794:	4b06      	ldr	r3, [pc, #24]	@ (80027b0 <microros_zero_allocate+0x4c>)
 8002796:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002798:	68b9      	ldr	r1, [r7, #8]
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f7ff fe8d 	bl	80024ba <pvPortCallocMicroROS>
 80027a0:	4603      	mov	r3, r0
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20004050 	.word	0x20004050
 80027b0:	20004054 	.word	0x20004054
 80027b4:	00000000 	.word	0x00000000

080027b8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80027b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027bc:	b086      	sub	sp, #24
 80027be:	af00      	add	r7, sp, #0
 80027c0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80027c4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80027ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027ce:	a320      	add	r3, pc, #128	@ (adr r3, 8002850 <UTILS_NanosecondsToTimespec+0x98>)
 80027d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d4:	f7fe f97a 	bl	8000acc <__aeabi_ldivmod>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80027e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027e6:	a31a      	add	r3, pc, #104	@ (adr r3, 8002850 <UTILS_NanosecondsToTimespec+0x98>)
 80027e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ec:	f7fe f96e 	bl	8000acc <__aeabi_ldivmod>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	da20      	bge.n	800283e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	4a11      	ldr	r2, [pc, #68]	@ (8002848 <UTILS_NanosecondsToTimespec+0x90>)
 8002802:	fb82 1203 	smull	r1, r2, r2, r3
 8002806:	1712      	asrs	r2, r2, #28
 8002808:	17db      	asrs	r3, r3, #31
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	3301      	adds	r3, #1
 800280e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002816:	6979      	ldr	r1, [r7, #20]
 8002818:	17c8      	asrs	r0, r1, #31
 800281a:	460c      	mov	r4, r1
 800281c:	4605      	mov	r5, r0
 800281e:	ebb2 0804 	subs.w	r8, r2, r4
 8002822:	eb63 0905 	sbc.w	r9, r3, r5
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	4906      	ldr	r1, [pc, #24]	@ (800284c <UTILS_NanosecondsToTimespec+0x94>)
 8002834:	fb01 f303 	mul.w	r3, r1, r3
 8002838:	441a      	add	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	609a      	str	r2, [r3, #8]
    }
}
 800283e:	bf00      	nop
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002848:	44b82fa1 	.word	0x44b82fa1
 800284c:	3b9aca00 	.word	0x3b9aca00
 8002850:	3b9aca00 	.word	0x3b9aca00
 8002854:	00000000 	.word	0x00000000

08002858 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800285c:	b08e      	sub	sp, #56	@ 0x38
 800285e:	af00      	add	r7, sp, #0
 8002860:	6278      	str	r0, [r7, #36]	@ 0x24
 8002862:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002864:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002868:	2300      	movs	r3, #0
 800286a:	6013      	str	r3, [r2, #0]
 800286c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	f04f 0300 	mov.w	r3, #0
 8002876:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800287a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800287e:	4618      	mov	r0, r3
 8002880:	f006 fd66 	bl	8009350 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002886:	17da      	asrs	r2, r3, #31
 8002888:	61bb      	str	r3, [r7, #24]
 800288a:	61fa      	str	r2, [r7, #28]
 800288c:	f04f 0200 	mov.w	r2, #0
 8002890:	f04f 0300 	mov.w	r3, #0
 8002894:	69b9      	ldr	r1, [r7, #24]
 8002896:	000b      	movs	r3, r1
 8002898:	2200      	movs	r2, #0
 800289a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800289e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028a0:	2200      	movs	r2, #0
 80028a2:	461c      	mov	r4, r3
 80028a4:	4615      	mov	r5, r2
 80028a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80028aa:	1911      	adds	r1, r2, r4
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	416b      	adcs	r3, r5
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80028b6:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80028ba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80028be:	4602      	mov	r2, r0
 80028c0:	460b      	mov	r3, r1
 80028c2:	f04f 0400 	mov.w	r4, #0
 80028c6:	f04f 0500 	mov.w	r5, #0
 80028ca:	015d      	lsls	r5, r3, #5
 80028cc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80028d0:	0154      	lsls	r4, r2, #5
 80028d2:	4622      	mov	r2, r4
 80028d4:	462b      	mov	r3, r5
 80028d6:	ebb2 0800 	subs.w	r8, r2, r0
 80028da:	eb63 0901 	sbc.w	r9, r3, r1
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80028ea:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80028ee:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80028f2:	4690      	mov	r8, r2
 80028f4:	4699      	mov	r9, r3
 80028f6:	eb18 0a00 	adds.w	sl, r8, r0
 80028fa:	eb49 0b01 	adc.w	fp, r9, r1
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	f04f 0300 	mov.w	r3, #0
 8002906:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800290a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800290e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002912:	ebb2 040a 	subs.w	r4, r2, sl
 8002916:	603c      	str	r4, [r7, #0]
 8002918:	eb63 030b 	sbc.w	r3, r3, fp
 800291c:	607b      	str	r3, [r7, #4]
 800291e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002922:	4623      	mov	r3, r4
 8002924:	181b      	adds	r3, r3, r0
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	462b      	mov	r3, r5
 800292a:	eb41 0303 	adc.w	r3, r1, r3
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	6a3a      	ldr	r2, [r7, #32]
 8002932:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002936:	f7ff ff3f 	bl	80027b8 <UTILS_NanosecondsToTimespec>

    return 0;
 800293a:	2300      	movs	r3, #0
 800293c:	4618      	mov	r0, r3
 800293e:	3738      	adds	r7, #56	@ 0x38
 8002940:	46bd      	mov	sp, r7
 8002942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002948 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002956:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002958:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800295c:	4904      	ldr	r1, [pc, #16]	@ (8002970 <cubemx_transport_open+0x28>)
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f003 fbf6 	bl	8006150 <HAL_UART_Receive_DMA>
    return true;
 8002964:	2301      	movs	r3, #1
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20004058 	.word	0x20004058

08002974 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002982:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f003 fc2f 	bl	80061e8 <HAL_UART_DMAStop>
    return true;
 800298a:	2301      	movs	r3, #1
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
 80029a0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80029a8:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b0:	2b20      	cmp	r3, #32
 80029b2:	d11b      	bne.n	80029ec <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	68b9      	ldr	r1, [r7, #8]
 80029bc:	6978      	ldr	r0, [r7, #20]
 80029be:	f003 fb47 	bl	8006050 <HAL_UART_Transmit_DMA>
 80029c2:	4603      	mov	r3, r0
 80029c4:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80029c6:	e002      	b.n	80029ce <cubemx_transport_write+0x3a>
            osDelay(1);
 80029c8:	2001      	movs	r0, #1
 80029ca:	f005 f9f5 	bl	8007db8 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80029ce:	7cfb      	ldrb	r3, [r7, #19]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d104      	bne.n	80029de <cubemx_transport_write+0x4a>
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029da:	2b20      	cmp	r3, #32
 80029dc:	d1f4      	bne.n	80029c8 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 80029de:	7cfb      	ldrb	r3, [r7, #19]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <cubemx_transport_write+0x54>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	e002      	b.n	80029ee <cubemx_transport_write+0x5a>
 80029e8:	2300      	movs	r3, #0
 80029ea:	e000      	b.n	80029ee <cubemx_transport_write+0x5a>
    }else{
        return 0;
 80029ec:	2300      	movs	r3, #0
    }
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
 8002a04:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8002a0c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a12:	b672      	cpsid	i
}
 8002a14:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8002a24:	4a1b      	ldr	r2, [pc, #108]	@ (8002a94 <cubemx_transport_read+0x9c>)
 8002a26:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a28:	b662      	cpsie	i
}
 8002a2a:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002a32:	2001      	movs	r0, #1
 8002a34:	f005 f9c0 	bl	8007db8 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8002a38:	4b17      	ldr	r3, [pc, #92]	@ (8002a98 <cubemx_transport_read+0xa0>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	4b15      	ldr	r3, [pc, #84]	@ (8002a94 <cubemx_transport_read+0x9c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d103      	bne.n	8002a4c <cubemx_transport_read+0x54>
 8002a44:	69fa      	ldr	r2, [r7, #28]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	dbe2      	blt.n	8002a12 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002a50:	e011      	b.n	8002a76 <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 8002a52:	4b11      	ldr	r3, [pc, #68]	@ (8002a98 <cubemx_transport_read+0xa0>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68b9      	ldr	r1, [r7, #8]
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	440b      	add	r3, r1
 8002a5c:	490f      	ldr	r1, [pc, #60]	@ (8002a9c <cubemx_transport_read+0xa4>)
 8002a5e:	5c8a      	ldrb	r2, [r1, r2]
 8002a60:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002a62:	4b0d      	ldr	r3, [pc, #52]	@ (8002a98 <cubemx_transport_read+0xa0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	3301      	adds	r3, #1
 8002a68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a6c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a98 <cubemx_transport_read+0xa0>)
 8002a6e:	6013      	str	r3, [r2, #0]
        wrote++;
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	3301      	adds	r3, #1
 8002a74:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002a76:	4b08      	ldr	r3, [pc, #32]	@ (8002a98 <cubemx_transport_read+0xa0>)
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	4b06      	ldr	r3, [pc, #24]	@ (8002a94 <cubemx_transport_read+0x9c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d003      	beq.n	8002a8a <cubemx_transport_read+0x92>
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d3e3      	bcc.n	8002a52 <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8002a8a:	69bb      	ldr	r3, [r7, #24]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3720      	adds	r7, #32
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	2000485c 	.word	0x2000485c
 8002a98:	20004858 	.word	0x20004858
 8002a9c:	20004058 	.word	0x20004058

08002aa0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002aa0:	480d      	ldr	r0, [pc, #52]	@ (8002ad8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002aa2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002aa4:	f7ff fb88 	bl	80021b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002aa8:	480c      	ldr	r0, [pc, #48]	@ (8002adc <LoopForever+0x6>)
  ldr r1, =_edata
 8002aaa:	490d      	ldr	r1, [pc, #52]	@ (8002ae0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002aac:	4a0d      	ldr	r2, [pc, #52]	@ (8002ae4 <LoopForever+0xe>)
  movs r3, #0
 8002aae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002ab0:	e002      	b.n	8002ab8 <LoopCopyDataInit>

08002ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ab6:	3304      	adds	r3, #4

08002ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002abc:	d3f9      	bcc.n	8002ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002abe:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ac0:	4c0a      	ldr	r4, [pc, #40]	@ (8002aec <LoopForever+0x16>)
  movs r3, #0
 8002ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ac4:	e001      	b.n	8002aca <LoopFillZerobss>

08002ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ac8:	3204      	adds	r2, #4

08002aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002acc:	d3fb      	bcc.n	8002ac6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ace:	f015 f91d 	bl	8017d0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ad2:	f7fe faff 	bl	80010d4 <main>

08002ad6 <LoopForever>:

LoopForever:
    b LoopForever
 8002ad6:	e7fe      	b.n	8002ad6 <LoopForever>
  ldr   r0, =_estack
 8002ad8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ae0:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8002ae4:	080199bc 	.word	0x080199bc
  ldr r2, =_sbss
 8002ae8:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8002aec:	2000ae84 	.word	0x2000ae84

08002af0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002af0:	e7fe      	b.n	8002af0 <ADC1_2_IRQHandler>

08002af2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b082      	sub	sp, #8
 8002af6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002afc:	2003      	movs	r0, #3
 8002afe:	f000 f8dc 	bl	8002cba <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b02:	200f      	movs	r0, #15
 8002b04:	f7ff f9da 	bl	8001ebc <HAL_InitTick>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	71fb      	strb	r3, [r7, #7]
 8002b12:	e001      	b.n	8002b18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b14:	f7ff f85e 	bl	8001bd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b18:	79fb      	ldrb	r3, [r7, #7]

}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b28:	4b05      	ldr	r3, [pc, #20]	@ (8002b40 <HAL_IncTick+0x1c>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	4b05      	ldr	r3, [pc, #20]	@ (8002b44 <HAL_IncTick+0x20>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4413      	add	r3, r2
 8002b32:	4a03      	ldr	r2, [pc, #12]	@ (8002b40 <HAL_IncTick+0x1c>)
 8002b34:	6013      	str	r3, [r2, #0]
}
 8002b36:	bf00      	nop
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	20004860 	.word	0x20004860
 8002b44:	2000000c 	.word	0x2000000c

08002b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b4c:	4b03      	ldr	r3, [pc, #12]	@ (8002b5c <HAL_GetTick+0x14>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	20004860 	.word	0x20004860

08002b60 <__NVIC_SetPriorityGrouping>:
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b70:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b92:	4a04      	ldr	r2, [pc, #16]	@ (8002ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	60d3      	str	r3, [r2, #12]
}
 8002b98:	bf00      	nop
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	e000ed00 	.word	0xe000ed00

08002ba8 <__NVIC_GetPriorityGrouping>:
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bac:	4b04      	ldr	r3, [pc, #16]	@ (8002bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	0a1b      	lsrs	r3, r3, #8
 8002bb2:	f003 0307 	and.w	r3, r3, #7
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	e000ed00 	.word	0xe000ed00

08002bc4 <__NVIC_EnableIRQ>:
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	db0b      	blt.n	8002bee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	f003 021f 	and.w	r2, r3, #31
 8002bdc:	4907      	ldr	r1, [pc, #28]	@ (8002bfc <__NVIC_EnableIRQ+0x38>)
 8002bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	2001      	movs	r0, #1
 8002be6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	e000e100 	.word	0xe000e100

08002c00 <__NVIC_SetPriority>:
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	6039      	str	r1, [r7, #0]
 8002c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	db0a      	blt.n	8002c2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	490c      	ldr	r1, [pc, #48]	@ (8002c4c <__NVIC_SetPriority+0x4c>)
 8002c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1e:	0112      	lsls	r2, r2, #4
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	440b      	add	r3, r1
 8002c24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002c28:	e00a      	b.n	8002c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	4908      	ldr	r1, [pc, #32]	@ (8002c50 <__NVIC_SetPriority+0x50>)
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	3b04      	subs	r3, #4
 8002c38:	0112      	lsls	r2, r2, #4
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	761a      	strb	r2, [r3, #24]
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	e000e100 	.word	0xe000e100
 8002c50:	e000ed00 	.word	0xe000ed00

08002c54 <NVIC_EncodePriority>:
{
 8002c54:	b480      	push	{r7}
 8002c56:	b089      	sub	sp, #36	@ 0x24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f1c3 0307 	rsb	r3, r3, #7
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	bf28      	it	cs
 8002c72:	2304      	movcs	r3, #4
 8002c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	3304      	adds	r3, #4
 8002c7a:	2b06      	cmp	r3, #6
 8002c7c:	d902      	bls.n	8002c84 <NVIC_EncodePriority+0x30>
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	3b03      	subs	r3, #3
 8002c82:	e000      	b.n	8002c86 <NVIC_EncodePriority+0x32>
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43da      	mvns	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	401a      	ands	r2, r3
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca6:	43d9      	mvns	r1, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cac:	4313      	orrs	r3, r2
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3724      	adds	r7, #36	@ 0x24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b082      	sub	sp, #8
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7ff ff4c 	bl	8002b60 <__NVIC_SetPriorityGrouping>
}
 8002cc8:	bf00      	nop
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
 8002cdc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cde:	f7ff ff63 	bl	8002ba8 <__NVIC_GetPriorityGrouping>
 8002ce2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	68b9      	ldr	r1, [r7, #8]
 8002ce8:	6978      	ldr	r0, [r7, #20]
 8002cea:	f7ff ffb3 	bl	8002c54 <NVIC_EncodePriority>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cf4:	4611      	mov	r1, r2
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff ff82 	bl	8002c00 <__NVIC_SetPriority>
}
 8002cfc:	bf00      	nop
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff ff56 	bl	8002bc4 <__NVIC_EnableIRQ>
}
 8002d18:	bf00      	nop
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e08d      	b.n	8002e4e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	4b47      	ldr	r3, [pc, #284]	@ (8002e58 <HAL_DMA_Init+0x138>)
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d80f      	bhi.n	8002d5e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	4b45      	ldr	r3, [pc, #276]	@ (8002e5c <HAL_DMA_Init+0x13c>)
 8002d46:	4413      	add	r3, r2
 8002d48:	4a45      	ldr	r2, [pc, #276]	@ (8002e60 <HAL_DMA_Init+0x140>)
 8002d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4e:	091b      	lsrs	r3, r3, #4
 8002d50:	009a      	lsls	r2, r3, #2
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a42      	ldr	r2, [pc, #264]	@ (8002e64 <HAL_DMA_Init+0x144>)
 8002d5a:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d5c:	e00e      	b.n	8002d7c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	4b40      	ldr	r3, [pc, #256]	@ (8002e68 <HAL_DMA_Init+0x148>)
 8002d66:	4413      	add	r3, r2
 8002d68:	4a3d      	ldr	r2, [pc, #244]	@ (8002e60 <HAL_DMA_Init+0x140>)
 8002d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6e:	091b      	lsrs	r3, r3, #4
 8002d70:	009a      	lsls	r2, r3, #2
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a3c      	ldr	r2, [pc, #240]	@ (8002e6c <HAL_DMA_Init+0x14c>)
 8002d7a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002d92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002db8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 fa82 	bl	80032d8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ddc:	d102      	bne.n	8002de4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002df8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d010      	beq.n	8002e24 <HAL_DMA_Init+0x104>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d80c      	bhi.n	8002e24 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 faa2 	bl	8003354 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002e20:	605a      	str	r2, [r3, #4]
 8002e22:	e008      	b.n	8002e36 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40020407 	.word	0x40020407
 8002e5c:	bffdfff8 	.word	0xbffdfff8
 8002e60:	cccccccd 	.word	0xcccccccd
 8002e64:	40020000 	.word	0x40020000
 8002e68:	bffdfbf8 	.word	0xbffdfbf8
 8002e6c:	40020400 	.word	0x40020400

08002e70 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <HAL_DMA_Start_IT+0x20>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e066      	b.n	8002f5e <HAL_DMA_Start_IT+0xee>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d155      	bne.n	8002f50 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0201 	bic.w	r2, r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	68b9      	ldr	r1, [r7, #8]
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 f9c7 	bl	800325c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d008      	beq.n	8002ee8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 020e 	orr.w	r2, r2, #14
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	e00f      	b.n	8002f08 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0204 	bic.w	r2, r2, #4
 8002ef6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 020a 	orr.w	r2, r2, #10
 8002f06:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d007      	beq.n	8002f26 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f24:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d007      	beq.n	8002f3e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f3c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f042 0201 	orr.w	r2, r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	e005      	b.n	8002f5c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b085      	sub	sp, #20
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d005      	beq.n	8002f8a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2204      	movs	r2, #4
 8002f82:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	73fb      	strb	r3, [r7, #15]
 8002f88:	e037      	b.n	8002ffa <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 020e 	bic.w	r2, r2, #14
 8002f98:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fa4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fa8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0201 	bic.w	r2, r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fbe:	f003 021f 	and.w	r2, r3, #31
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fcc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002fd6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00c      	beq.n	8002ffa <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fee:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002ff8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800300a:	7bfb      	ldrb	r3, [r7, #15]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d00d      	beq.n	800304c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2204      	movs	r2, #4
 8003034:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	73fb      	strb	r3, [r7, #15]
 800304a:	e047      	b.n	80030dc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 020e 	bic.w	r2, r2, #14
 800305a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0201 	bic.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003076:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800307a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003080:	f003 021f 	and.w	r2, r3, #31
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003088:	2101      	movs	r1, #1
 800308a:	fa01 f202 	lsl.w	r2, r1, r2
 800308e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003098:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00c      	beq.n	80030bc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030b0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80030ba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	4798      	blx	r3
    }
  }
  return status;
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b084      	sub	sp, #16
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003102:	f003 031f 	and.w	r3, r3, #31
 8003106:	2204      	movs	r2, #4
 8003108:	409a      	lsls	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4013      	ands	r3, r2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d026      	beq.n	8003160 <HAL_DMA_IRQHandler+0x7a>
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d021      	beq.n	8003160 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	2b00      	cmp	r3, #0
 8003128:	d107      	bne.n	800313a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0204 	bic.w	r2, r2, #4
 8003138:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800313e:	f003 021f 	and.w	r2, r3, #31
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003146:	2104      	movs	r1, #4
 8003148:	fa01 f202 	lsl.w	r2, r1, r2
 800314c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003152:	2b00      	cmp	r3, #0
 8003154:	d071      	beq.n	800323a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800315e:	e06c      	b.n	800323a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003164:	f003 031f 	and.w	r3, r3, #31
 8003168:	2202      	movs	r2, #2
 800316a:	409a      	lsls	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4013      	ands	r3, r2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d02e      	beq.n	80031d2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d029      	beq.n	80031d2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0320 	and.w	r3, r3, #32
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10b      	bne.n	80031a4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 020a 	bic.w	r2, r2, #10
 800319a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a8:	f003 021f 	and.w	r2, r3, #31
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b0:	2102      	movs	r1, #2
 80031b2:	fa01 f202 	lsl.w	r2, r1, r2
 80031b6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d038      	beq.n	800323a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80031d0:	e033      	b.n	800323a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d6:	f003 031f 	and.w	r3, r3, #31
 80031da:	2208      	movs	r2, #8
 80031dc:	409a      	lsls	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	4013      	ands	r3, r2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d02a      	beq.n	800323c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	f003 0308 	and.w	r3, r3, #8
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d025      	beq.n	800323c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 020e 	bic.w	r2, r2, #14
 80031fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003204:	f003 021f 	and.w	r2, r3, #31
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320c:	2101      	movs	r1, #1
 800320e:	fa01 f202 	lsl.w	r2, r1, r2
 8003212:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800322e:	2b00      	cmp	r3, #0
 8003230:	d004      	beq.n	800323c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800323a:	bf00      	nop
 800323c:	bf00      	nop
}
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8003250:	4618      	mov	r0, r3
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
 8003268:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003272:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003278:	2b00      	cmp	r3, #0
 800327a:	d004      	beq.n	8003286 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003284:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328a:	f003 021f 	and.w	r2, r3, #31
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003292:	2101      	movs	r1, #1
 8003294:	fa01 f202 	lsl.w	r2, r1, r2
 8003298:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	2b10      	cmp	r3, #16
 80032a8:	d108      	bne.n	80032bc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80032ba:	e007      	b.n	80032cc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	60da      	str	r2, [r3, #12]
}
 80032cc:	bf00      	nop
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032d8:	b480      	push	{r7}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	461a      	mov	r2, r3
 80032e6:	4b16      	ldr	r3, [pc, #88]	@ (8003340 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d802      	bhi.n	80032f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80032ec:	4b15      	ldr	r3, [pc, #84]	@ (8003344 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	e001      	b.n	80032f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80032f2:	4b15      	ldr	r3, [pc, #84]	@ (8003348 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80032f4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	3b08      	subs	r3, #8
 8003302:	4a12      	ldr	r2, [pc, #72]	@ (800334c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003304:	fba2 2303 	umull	r2, r3, r2, r3
 8003308:	091b      	lsrs	r3, r3, #4
 800330a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003310:	089b      	lsrs	r3, r3, #2
 8003312:	009a      	lsls	r2, r3, #2
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4413      	add	r3, r2
 8003318:	461a      	mov	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a0b      	ldr	r2, [pc, #44]	@ (8003350 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003322:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f003 031f 	and.w	r3, r3, #31
 800332a:	2201      	movs	r2, #1
 800332c:	409a      	lsls	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003332:	bf00      	nop
 8003334:	371c      	adds	r7, #28
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	40020407 	.word	0x40020407
 8003344:	40020800 	.word	0x40020800
 8003348:	40020820 	.word	0x40020820
 800334c:	cccccccd 	.word	0xcccccccd
 8003350:	40020880 	.word	0x40020880

08003354 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4b0b      	ldr	r3, [pc, #44]	@ (8003394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003368:	4413      	add	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	461a      	mov	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a08      	ldr	r2, [pc, #32]	@ (8003398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003376:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	3b01      	subs	r3, #1
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	2201      	movs	r2, #1
 8003382:	409a      	lsls	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003388:	bf00      	nop
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	1000823f 	.word	0x1000823f
 8003398:	40020940 	.word	0x40020940

0800339c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800339c:	b480      	push	{r7}
 800339e:	b087      	sub	sp, #28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80033aa:	e15a      	b.n	8003662 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	2101      	movs	r1, #1
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	fa01 f303 	lsl.w	r3, r1, r3
 80033b8:	4013      	ands	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 814c 	beq.w	800365c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f003 0303 	and.w	r3, r3, #3
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d005      	beq.n	80033dc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d130      	bne.n	800343e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	2203      	movs	r2, #3
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	43db      	mvns	r3, r3
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	4013      	ands	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	68da      	ldr	r2, [r3, #12]
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	4313      	orrs	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003412:	2201      	movs	r2, #1
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43db      	mvns	r3, r3
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	4013      	ands	r3, r2
 8003420:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	091b      	lsrs	r3, r3, #4
 8003428:	f003 0201 	and.w	r2, r3, #1
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	2b03      	cmp	r3, #3
 8003448:	d017      	beq.n	800347a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	2203      	movs	r2, #3
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43db      	mvns	r3, r3
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	4013      	ands	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d123      	bne.n	80034ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	08da      	lsrs	r2, r3, #3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3208      	adds	r2, #8
 800348e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003492:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	220f      	movs	r2, #15
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	43db      	mvns	r3, r3
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4013      	ands	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	691a      	ldr	r2, [r3, #16]
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4313      	orrs	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	08da      	lsrs	r2, r3, #3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3208      	adds	r2, #8
 80034c8:	6939      	ldr	r1, [r7, #16]
 80034ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	2203      	movs	r2, #3
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	43db      	mvns	r3, r3
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	4013      	ands	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 0203 	and.w	r2, r3, #3
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 80a6 	beq.w	800365c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003510:	4b5b      	ldr	r3, [pc, #364]	@ (8003680 <HAL_GPIO_Init+0x2e4>)
 8003512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003514:	4a5a      	ldr	r2, [pc, #360]	@ (8003680 <HAL_GPIO_Init+0x2e4>)
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	6613      	str	r3, [r2, #96]	@ 0x60
 800351c:	4b58      	ldr	r3, [pc, #352]	@ (8003680 <HAL_GPIO_Init+0x2e4>)
 800351e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003528:	4a56      	ldr	r2, [pc, #344]	@ (8003684 <HAL_GPIO_Init+0x2e8>)
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	089b      	lsrs	r3, r3, #2
 800352e:	3302      	adds	r3, #2
 8003530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003534:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f003 0303 	and.w	r3, r3, #3
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	220f      	movs	r2, #15
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	43db      	mvns	r3, r3
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	4013      	ands	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003552:	d01f      	beq.n	8003594 <HAL_GPIO_Init+0x1f8>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a4c      	ldr	r2, [pc, #304]	@ (8003688 <HAL_GPIO_Init+0x2ec>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d019      	beq.n	8003590 <HAL_GPIO_Init+0x1f4>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a4b      	ldr	r2, [pc, #300]	@ (800368c <HAL_GPIO_Init+0x2f0>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d013      	beq.n	800358c <HAL_GPIO_Init+0x1f0>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a4a      	ldr	r2, [pc, #296]	@ (8003690 <HAL_GPIO_Init+0x2f4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d00d      	beq.n	8003588 <HAL_GPIO_Init+0x1ec>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a49      	ldr	r2, [pc, #292]	@ (8003694 <HAL_GPIO_Init+0x2f8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d007      	beq.n	8003584 <HAL_GPIO_Init+0x1e8>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a48      	ldr	r2, [pc, #288]	@ (8003698 <HAL_GPIO_Init+0x2fc>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d101      	bne.n	8003580 <HAL_GPIO_Init+0x1e4>
 800357c:	2305      	movs	r3, #5
 800357e:	e00a      	b.n	8003596 <HAL_GPIO_Init+0x1fa>
 8003580:	2306      	movs	r3, #6
 8003582:	e008      	b.n	8003596 <HAL_GPIO_Init+0x1fa>
 8003584:	2304      	movs	r3, #4
 8003586:	e006      	b.n	8003596 <HAL_GPIO_Init+0x1fa>
 8003588:	2303      	movs	r3, #3
 800358a:	e004      	b.n	8003596 <HAL_GPIO_Init+0x1fa>
 800358c:	2302      	movs	r3, #2
 800358e:	e002      	b.n	8003596 <HAL_GPIO_Init+0x1fa>
 8003590:	2301      	movs	r3, #1
 8003592:	e000      	b.n	8003596 <HAL_GPIO_Init+0x1fa>
 8003594:	2300      	movs	r3, #0
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	f002 0203 	and.w	r2, r2, #3
 800359c:	0092      	lsls	r2, r2, #2
 800359e:	4093      	lsls	r3, r2
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035a6:	4937      	ldr	r1, [pc, #220]	@ (8003684 <HAL_GPIO_Init+0x2e8>)
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	089b      	lsrs	r3, r3, #2
 80035ac:	3302      	adds	r3, #2
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035b4:	4b39      	ldr	r3, [pc, #228]	@ (800369c <HAL_GPIO_Init+0x300>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	43db      	mvns	r3, r3
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	4013      	ands	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035d8:	4a30      	ldr	r2, [pc, #192]	@ (800369c <HAL_GPIO_Init+0x300>)
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035de:	4b2f      	ldr	r3, [pc, #188]	@ (800369c <HAL_GPIO_Init+0x300>)
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	43db      	mvns	r3, r3
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	4013      	ands	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4313      	orrs	r3, r2
 8003600:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003602:	4a26      	ldr	r2, [pc, #152]	@ (800369c <HAL_GPIO_Init+0x300>)
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003608:	4b24      	ldr	r3, [pc, #144]	@ (800369c <HAL_GPIO_Init+0x300>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	43db      	mvns	r3, r3
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	4013      	ands	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	4313      	orrs	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800362c:	4a1b      	ldr	r2, [pc, #108]	@ (800369c <HAL_GPIO_Init+0x300>)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003632:	4b1a      	ldr	r3, [pc, #104]	@ (800369c <HAL_GPIO_Init+0x300>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	43db      	mvns	r3, r3
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	4013      	ands	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003656:	4a11      	ldr	r2, [pc, #68]	@ (800369c <HAL_GPIO_Init+0x300>)
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	3301      	adds	r3, #1
 8003660:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	fa22 f303 	lsr.w	r3, r2, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	f47f ae9d 	bne.w	80033ac <HAL_GPIO_Init+0x10>
  }
}
 8003672:	bf00      	nop
 8003674:	bf00      	nop
 8003676:	371c      	adds	r7, #28
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	40021000 	.word	0x40021000
 8003684:	40010000 	.word	0x40010000
 8003688:	48000400 	.word	0x48000400
 800368c:	48000800 	.word	0x48000800
 8003690:	48000c00 	.word	0x48000c00
 8003694:	48001000 	.word	0x48001000
 8003698:	48001400 	.word	0x48001400
 800369c:	40010400 	.word	0x40010400

080036a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	460b      	mov	r3, r1
 80036aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691a      	ldr	r2, [r3, #16]
 80036b0:	887b      	ldrh	r3, [r7, #2]
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d002      	beq.n	80036be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036b8:	2301      	movs	r3, #1
 80036ba:	73fb      	strb	r3, [r7, #15]
 80036bc:	e001      	b.n	80036c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036be:	2300      	movs	r3, #0
 80036c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	807b      	strh	r3, [r7, #2]
 80036dc:	4613      	mov	r3, r2
 80036de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036e0:	787b      	ldrb	r3, [r7, #1]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036e6:	887a      	ldrh	r2, [r7, #2]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036ec:	e002      	b.n	80036f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036ee:	887a      	ldrh	r2, [r7, #2]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	4603      	mov	r3, r0
 8003708:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800370a:	4b08      	ldr	r3, [pc, #32]	@ (800372c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800370c:	695a      	ldr	r2, [r3, #20]
 800370e:	88fb      	ldrh	r3, [r7, #6]
 8003710:	4013      	ands	r3, r2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d006      	beq.n	8003724 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003716:	4a05      	ldr	r2, [pc, #20]	@ (800372c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003718:	88fb      	ldrh	r3, [r7, #6]
 800371a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800371c:	88fb      	ldrh	r3, [r7, #6]
 800371e:	4618      	mov	r0, r3
 8003720:	f000 f806 	bl	8003730 <HAL_GPIO_EXTI_Callback>
  }
}
 8003724:	bf00      	nop
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40010400 	.word	0x40010400

08003730 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
	...

08003748 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d141      	bne.n	80037da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003756:	4b4b      	ldr	r3, [pc, #300]	@ (8003884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800375e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003762:	d131      	bne.n	80037c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003764:	4b47      	ldr	r3, [pc, #284]	@ (8003884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003766:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800376a:	4a46      	ldr	r2, [pc, #280]	@ (8003884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800376c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003770:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003774:	4b43      	ldr	r3, [pc, #268]	@ (8003884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800377c:	4a41      	ldr	r2, [pc, #260]	@ (8003884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800377e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003782:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003784:	4b40      	ldr	r3, [pc, #256]	@ (8003888 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2232      	movs	r2, #50	@ 0x32
 800378a:	fb02 f303 	mul.w	r3, r2, r3
 800378e:	4a3f      	ldr	r2, [pc, #252]	@ (800388c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003790:	fba2 2303 	umull	r2, r3, r2, r3
 8003794:	0c9b      	lsrs	r3, r3, #18
 8003796:	3301      	adds	r3, #1
 8003798:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800379a:	e002      	b.n	80037a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	3b01      	subs	r3, #1
 80037a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037a2:	4b38      	ldr	r3, [pc, #224]	@ (8003884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037ae:	d102      	bne.n	80037b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1f2      	bne.n	800379c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037b6:	4b33      	ldr	r3, [pc, #204]	@ (8003884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037c2:	d158      	bne.n	8003876 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e057      	b.n	8003878 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037c8:	4b2e      	ldr	r3, [pc, #184]	@ (8003884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037ce:	4a2d      	ldr	r2, [pc, #180]	@ (8003884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80037d8:	e04d      	b.n	8003876 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037e0:	d141      	bne.n	8003866 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037e2:	4b28      	ldr	r3, [pc, #160]	@ (8003884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80037ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037ee:	d131      	bne.n	8003854 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037f0:	4b24      	ldr	r3, [pc, #144]	@ (8003884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037f6:	4a23      	ldr	r2, [pc, #140]	@ (8003884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003800:	4b20      	ldr	r3, [pc, #128]	@ (8003884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003808:	4a1e      	ldr	r2, [pc, #120]	@ (8003884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800380a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800380e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003810:	4b1d      	ldr	r3, [pc, #116]	@ (8003888 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2232      	movs	r2, #50	@ 0x32
 8003816:	fb02 f303 	mul.w	r3, r2, r3
 800381a:	4a1c      	ldr	r2, [pc, #112]	@ (800388c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800381c:	fba2 2303 	umull	r2, r3, r2, r3
 8003820:	0c9b      	lsrs	r3, r3, #18
 8003822:	3301      	adds	r3, #1
 8003824:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003826:	e002      	b.n	800382e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	3b01      	subs	r3, #1
 800382c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800382e:	4b15      	ldr	r3, [pc, #84]	@ (8003884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003836:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800383a:	d102      	bne.n	8003842 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1f2      	bne.n	8003828 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003842:	4b10      	ldr	r3, [pc, #64]	@ (8003884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800384a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800384e:	d112      	bne.n	8003876 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e011      	b.n	8003878 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003854:	4b0b      	ldr	r3, [pc, #44]	@ (8003884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003856:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800385a:	4a0a      	ldr	r2, [pc, #40]	@ (8003884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800385c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003860:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003864:	e007      	b.n	8003876 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003866:	4b07      	ldr	r3, [pc, #28]	@ (8003884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800386e:	4a05      	ldr	r2, [pc, #20]	@ (8003884 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003870:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003874:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	40007000 	.word	0x40007000
 8003888:	20000004 	.word	0x20000004
 800388c:	431bde83 	.word	0x431bde83

08003890 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003894:	4b05      	ldr	r3, [pc, #20]	@ (80038ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	4a04      	ldr	r2, [pc, #16]	@ (80038ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800389a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800389e:	6093      	str	r3, [r2, #8]
}
 80038a0:	bf00      	nop
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	40007000 	.word	0x40007000

080038b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b088      	sub	sp, #32
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e2fe      	b.n	8003ec0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d075      	beq.n	80039ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ce:	4b97      	ldr	r3, [pc, #604]	@ (8003b2c <HAL_RCC_OscConfig+0x27c>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 030c 	and.w	r3, r3, #12
 80038d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038d8:	4b94      	ldr	r3, [pc, #592]	@ (8003b2c <HAL_RCC_OscConfig+0x27c>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f003 0303 	and.w	r3, r3, #3
 80038e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	2b0c      	cmp	r3, #12
 80038e6:	d102      	bne.n	80038ee <HAL_RCC_OscConfig+0x3e>
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d002      	beq.n	80038f4 <HAL_RCC_OscConfig+0x44>
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d10b      	bne.n	800390c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f4:	4b8d      	ldr	r3, [pc, #564]	@ (8003b2c <HAL_RCC_OscConfig+0x27c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d05b      	beq.n	80039b8 <HAL_RCC_OscConfig+0x108>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d157      	bne.n	80039b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e2d9      	b.n	8003ec0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003914:	d106      	bne.n	8003924 <HAL_RCC_OscConfig+0x74>
 8003916:	4b85      	ldr	r3, [pc, #532]	@ (8003b2c <HAL_RCC_OscConfig+0x27c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a84      	ldr	r2, [pc, #528]	@ (8003b2c <HAL_RCC_OscConfig+0x27c>)
 800391c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	e01d      	b.n	8003960 <HAL_RCC_OscConfig+0xb0>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800392c:	d10c      	bne.n	8003948 <HAL_RCC_OscConfig+0x98>
 800392e:	4b7f      	ldr	r3, [pc, #508]	@ (8003b2c <HAL_RCC_OscConfig+0x27c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a7e      	ldr	r2, [pc, #504]	@ (8003b2c <HAL_RCC_OscConfig+0x27c>)
 8003934:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	4b7c      	ldr	r3, [pc, #496]	@ (8003b2c <HAL_RCC_OscConfig+0x27c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a7b      	ldr	r2, [pc, #492]	@ (8003b2c <HAL_RCC_OscConfig+0x27c>)
 8003940:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	e00b      	b.n	8003960 <HAL_RCC_OscConfig+0xb0>
 8003948:	4b78      	ldr	r3, [pc, #480]	@ (8003b2c <HAL_RCC_OscConfig+0x27c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a77      	ldr	r2, [pc, #476]	@ (8003b2c <HAL_RCC_OscConfig+0x27c>)
 800394e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003952:	6013      	str	r3, [r2, #0]
 8003954:	4b75      	ldr	r3, [pc, #468]	@ (8003b2c <HAL_RCC_OscConfig+0x27c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a74      	ldr	r2, [pc, #464]	@ (8003b2c <HAL_RCC_OscConfig+0x27c>)
 800395a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800395e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d013      	beq.n	8003990 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003968:	f7ff f8ee 	bl	8002b48 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003970:	f7ff f8ea 	bl	8002b48 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b64      	cmp	r3, #100	@ 0x64
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e29e      	b.n	8003ec0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003982:	4b6a      	ldr	r3, [pc, #424]	@ (8003b2c <HAL_RCC_OscConfig+0x27c>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0f0      	beq.n	8003970 <HAL_RCC_OscConfig+0xc0>
 800398e:	e014      	b.n	80039ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003990:	f7ff f8da 	bl	8002b48 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003998:	f7ff f8d6 	bl	8002b48 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b64      	cmp	r3, #100	@ 0x64
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e28a      	b.n	8003ec0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039aa:	4b60      	ldr	r3, [pc, #384]	@ (8003b2c <HAL_RCC_OscConfig+0x27c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f0      	bne.n	8003998 <HAL_RCC_OscConfig+0xe8>
 80039b6:	e000      	b.n	80039ba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d075      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039c6:	4b59      	ldr	r3, [pc, #356]	@ (8003b2c <HAL_RCC_OscConfig+0x27c>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 030c 	and.w	r3, r3, #12
 80039ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039d0:	4b56      	ldr	r3, [pc, #344]	@ (8003b2c <HAL_RCC_OscConfig+0x27c>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f003 0303 	and.w	r3, r3, #3
 80039d8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	2b0c      	cmp	r3, #12
 80039de:	d102      	bne.n	80039e6 <HAL_RCC_OscConfig+0x136>
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d002      	beq.n	80039ec <HAL_RCC_OscConfig+0x13c>
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	2b04      	cmp	r3, #4
 80039ea:	d11f      	bne.n	8003a2c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039ec:	4b4f      	ldr	r3, [pc, #316]	@ (8003b2c <HAL_RCC_OscConfig+0x27c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d005      	beq.n	8003a04 <HAL_RCC_OscConfig+0x154>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e25d      	b.n	8003ec0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a04:	4b49      	ldr	r3, [pc, #292]	@ (8003b2c <HAL_RCC_OscConfig+0x27c>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	061b      	lsls	r3, r3, #24
 8003a12:	4946      	ldr	r1, [pc, #280]	@ (8003b2c <HAL_RCC_OscConfig+0x27c>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a18:	4b45      	ldr	r3, [pc, #276]	@ (8003b30 <HAL_RCC_OscConfig+0x280>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fe fa4d 	bl	8001ebc <HAL_InitTick>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d043      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e249      	b.n	8003ec0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d023      	beq.n	8003a7c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a34:	4b3d      	ldr	r3, [pc, #244]	@ (8003b2c <HAL_RCC_OscConfig+0x27c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a3c      	ldr	r2, [pc, #240]	@ (8003b2c <HAL_RCC_OscConfig+0x27c>)
 8003a3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a40:	f7ff f882 	bl	8002b48 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a48:	f7ff f87e 	bl	8002b48 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e232      	b.n	8003ec0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a5a:	4b34      	ldr	r3, [pc, #208]	@ (8003b2c <HAL_RCC_OscConfig+0x27c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a66:	4b31      	ldr	r3, [pc, #196]	@ (8003b2c <HAL_RCC_OscConfig+0x27c>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	061b      	lsls	r3, r3, #24
 8003a74:	492d      	ldr	r1, [pc, #180]	@ (8003b2c <HAL_RCC_OscConfig+0x27c>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	604b      	str	r3, [r1, #4]
 8003a7a:	e01a      	b.n	8003ab2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8003b2c <HAL_RCC_OscConfig+0x27c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a2a      	ldr	r2, [pc, #168]	@ (8003b2c <HAL_RCC_OscConfig+0x27c>)
 8003a82:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a88:	f7ff f85e 	bl	8002b48 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a90:	f7ff f85a 	bl	8002b48 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e20e      	b.n	8003ec0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003aa2:	4b22      	ldr	r3, [pc, #136]	@ (8003b2c <HAL_RCC_OscConfig+0x27c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1f0      	bne.n	8003a90 <HAL_RCC_OscConfig+0x1e0>
 8003aae:	e000      	b.n	8003ab2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ab0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d041      	beq.n	8003b42 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d01c      	beq.n	8003b00 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ac6:	4b19      	ldr	r3, [pc, #100]	@ (8003b2c <HAL_RCC_OscConfig+0x27c>)
 8003ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003acc:	4a17      	ldr	r2, [pc, #92]	@ (8003b2c <HAL_RCC_OscConfig+0x27c>)
 8003ace:	f043 0301 	orr.w	r3, r3, #1
 8003ad2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad6:	f7ff f837 	bl	8002b48 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ade:	f7ff f833 	bl	8002b48 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e1e7      	b.n	8003ec0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003af0:	4b0e      	ldr	r3, [pc, #56]	@ (8003b2c <HAL_RCC_OscConfig+0x27c>)
 8003af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0ef      	beq.n	8003ade <HAL_RCC_OscConfig+0x22e>
 8003afe:	e020      	b.n	8003b42 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b00:	4b0a      	ldr	r3, [pc, #40]	@ (8003b2c <HAL_RCC_OscConfig+0x27c>)
 8003b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b06:	4a09      	ldr	r2, [pc, #36]	@ (8003b2c <HAL_RCC_OscConfig+0x27c>)
 8003b08:	f023 0301 	bic.w	r3, r3, #1
 8003b0c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b10:	f7ff f81a 	bl	8002b48 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b16:	e00d      	b.n	8003b34 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b18:	f7ff f816 	bl	8002b48 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d906      	bls.n	8003b34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e1ca      	b.n	8003ec0 <HAL_RCC_OscConfig+0x610>
 8003b2a:	bf00      	nop
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b34:	4b8c      	ldr	r3, [pc, #560]	@ (8003d68 <HAL_RCC_OscConfig+0x4b8>)
 8003b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1ea      	bne.n	8003b18 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 80a6 	beq.w	8003c9c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b50:	2300      	movs	r3, #0
 8003b52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b54:	4b84      	ldr	r3, [pc, #528]	@ (8003d68 <HAL_RCC_OscConfig+0x4b8>)
 8003b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <HAL_RCC_OscConfig+0x2b4>
 8003b60:	2301      	movs	r3, #1
 8003b62:	e000      	b.n	8003b66 <HAL_RCC_OscConfig+0x2b6>
 8003b64:	2300      	movs	r3, #0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00d      	beq.n	8003b86 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b6a:	4b7f      	ldr	r3, [pc, #508]	@ (8003d68 <HAL_RCC_OscConfig+0x4b8>)
 8003b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b6e:	4a7e      	ldr	r2, [pc, #504]	@ (8003d68 <HAL_RCC_OscConfig+0x4b8>)
 8003b70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b74:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b76:	4b7c      	ldr	r3, [pc, #496]	@ (8003d68 <HAL_RCC_OscConfig+0x4b8>)
 8003b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b82:	2301      	movs	r3, #1
 8003b84:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b86:	4b79      	ldr	r3, [pc, #484]	@ (8003d6c <HAL_RCC_OscConfig+0x4bc>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d118      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b92:	4b76      	ldr	r3, [pc, #472]	@ (8003d6c <HAL_RCC_OscConfig+0x4bc>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a75      	ldr	r2, [pc, #468]	@ (8003d6c <HAL_RCC_OscConfig+0x4bc>)
 8003b98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b9e:	f7fe ffd3 	bl	8002b48 <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba6:	f7fe ffcf 	bl	8002b48 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e183      	b.n	8003ec0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bb8:	4b6c      	ldr	r3, [pc, #432]	@ (8003d6c <HAL_RCC_OscConfig+0x4bc>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0f0      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d108      	bne.n	8003bde <HAL_RCC_OscConfig+0x32e>
 8003bcc:	4b66      	ldr	r3, [pc, #408]	@ (8003d68 <HAL_RCC_OscConfig+0x4b8>)
 8003bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bd2:	4a65      	ldr	r2, [pc, #404]	@ (8003d68 <HAL_RCC_OscConfig+0x4b8>)
 8003bd4:	f043 0301 	orr.w	r3, r3, #1
 8003bd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bdc:	e024      	b.n	8003c28 <HAL_RCC_OscConfig+0x378>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	2b05      	cmp	r3, #5
 8003be4:	d110      	bne.n	8003c08 <HAL_RCC_OscConfig+0x358>
 8003be6:	4b60      	ldr	r3, [pc, #384]	@ (8003d68 <HAL_RCC_OscConfig+0x4b8>)
 8003be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bec:	4a5e      	ldr	r2, [pc, #376]	@ (8003d68 <HAL_RCC_OscConfig+0x4b8>)
 8003bee:	f043 0304 	orr.w	r3, r3, #4
 8003bf2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bf6:	4b5c      	ldr	r3, [pc, #368]	@ (8003d68 <HAL_RCC_OscConfig+0x4b8>)
 8003bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bfc:	4a5a      	ldr	r2, [pc, #360]	@ (8003d68 <HAL_RCC_OscConfig+0x4b8>)
 8003bfe:	f043 0301 	orr.w	r3, r3, #1
 8003c02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c06:	e00f      	b.n	8003c28 <HAL_RCC_OscConfig+0x378>
 8003c08:	4b57      	ldr	r3, [pc, #348]	@ (8003d68 <HAL_RCC_OscConfig+0x4b8>)
 8003c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c0e:	4a56      	ldr	r2, [pc, #344]	@ (8003d68 <HAL_RCC_OscConfig+0x4b8>)
 8003c10:	f023 0301 	bic.w	r3, r3, #1
 8003c14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c18:	4b53      	ldr	r3, [pc, #332]	@ (8003d68 <HAL_RCC_OscConfig+0x4b8>)
 8003c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c1e:	4a52      	ldr	r2, [pc, #328]	@ (8003d68 <HAL_RCC_OscConfig+0x4b8>)
 8003c20:	f023 0304 	bic.w	r3, r3, #4
 8003c24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d016      	beq.n	8003c5e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c30:	f7fe ff8a 	bl	8002b48 <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c36:	e00a      	b.n	8003c4e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c38:	f7fe ff86 	bl	8002b48 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e138      	b.n	8003ec0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c4e:	4b46      	ldr	r3, [pc, #280]	@ (8003d68 <HAL_RCC_OscConfig+0x4b8>)
 8003c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0ed      	beq.n	8003c38 <HAL_RCC_OscConfig+0x388>
 8003c5c:	e015      	b.n	8003c8a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5e:	f7fe ff73 	bl	8002b48 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c64:	e00a      	b.n	8003c7c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c66:	f7fe ff6f 	bl	8002b48 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e121      	b.n	8003ec0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c7c:	4b3a      	ldr	r3, [pc, #232]	@ (8003d68 <HAL_RCC_OscConfig+0x4b8>)
 8003c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1ed      	bne.n	8003c66 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c8a:	7ffb      	ldrb	r3, [r7, #31]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d105      	bne.n	8003c9c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c90:	4b35      	ldr	r3, [pc, #212]	@ (8003d68 <HAL_RCC_OscConfig+0x4b8>)
 8003c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c94:	4a34      	ldr	r2, [pc, #208]	@ (8003d68 <HAL_RCC_OscConfig+0x4b8>)
 8003c96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c9a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0320 	and.w	r3, r3, #32
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d03c      	beq.n	8003d22 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d01c      	beq.n	8003cea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003cb0:	4b2d      	ldr	r3, [pc, #180]	@ (8003d68 <HAL_RCC_OscConfig+0x4b8>)
 8003cb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cb6:	4a2c      	ldr	r2, [pc, #176]	@ (8003d68 <HAL_RCC_OscConfig+0x4b8>)
 8003cb8:	f043 0301 	orr.w	r3, r3, #1
 8003cbc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc0:	f7fe ff42 	bl	8002b48 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cc8:	f7fe ff3e 	bl	8002b48 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e0f2      	b.n	8003ec0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cda:	4b23      	ldr	r3, [pc, #140]	@ (8003d68 <HAL_RCC_OscConfig+0x4b8>)
 8003cdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0ef      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x418>
 8003ce8:	e01b      	b.n	8003d22 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003cea:	4b1f      	ldr	r3, [pc, #124]	@ (8003d68 <HAL_RCC_OscConfig+0x4b8>)
 8003cec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cf0:	4a1d      	ldr	r2, [pc, #116]	@ (8003d68 <HAL_RCC_OscConfig+0x4b8>)
 8003cf2:	f023 0301 	bic.w	r3, r3, #1
 8003cf6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cfa:	f7fe ff25 	bl	8002b48 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d02:	f7fe ff21 	bl	8002b48 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e0d5      	b.n	8003ec0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d14:	4b14      	ldr	r3, [pc, #80]	@ (8003d68 <HAL_RCC_OscConfig+0x4b8>)
 8003d16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1ef      	bne.n	8003d02 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 80c9 	beq.w	8003ebe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8003d68 <HAL_RCC_OscConfig+0x4b8>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f003 030c 	and.w	r3, r3, #12
 8003d34:	2b0c      	cmp	r3, #12
 8003d36:	f000 8083 	beq.w	8003e40 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d15e      	bne.n	8003e00 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d42:	4b09      	ldr	r3, [pc, #36]	@ (8003d68 <HAL_RCC_OscConfig+0x4b8>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a08      	ldr	r2, [pc, #32]	@ (8003d68 <HAL_RCC_OscConfig+0x4b8>)
 8003d48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4e:	f7fe fefb 	bl	8002b48 <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d54:	e00c      	b.n	8003d70 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d56:	f7fe fef7 	bl	8002b48 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d905      	bls.n	8003d70 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e0ab      	b.n	8003ec0 <HAL_RCC_OscConfig+0x610>
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d70:	4b55      	ldr	r3, [pc, #340]	@ (8003ec8 <HAL_RCC_OscConfig+0x618>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1ec      	bne.n	8003d56 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d7c:	4b52      	ldr	r3, [pc, #328]	@ (8003ec8 <HAL_RCC_OscConfig+0x618>)
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	4b52      	ldr	r3, [pc, #328]	@ (8003ecc <HAL_RCC_OscConfig+0x61c>)
 8003d82:	4013      	ands	r3, r2
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6a11      	ldr	r1, [r2, #32]
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d8c:	3a01      	subs	r2, #1
 8003d8e:	0112      	lsls	r2, r2, #4
 8003d90:	4311      	orrs	r1, r2
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003d96:	0212      	lsls	r2, r2, #8
 8003d98:	4311      	orrs	r1, r2
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003d9e:	0852      	lsrs	r2, r2, #1
 8003da0:	3a01      	subs	r2, #1
 8003da2:	0552      	lsls	r2, r2, #21
 8003da4:	4311      	orrs	r1, r2
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003daa:	0852      	lsrs	r2, r2, #1
 8003dac:	3a01      	subs	r2, #1
 8003dae:	0652      	lsls	r2, r2, #25
 8003db0:	4311      	orrs	r1, r2
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003db6:	06d2      	lsls	r2, r2, #27
 8003db8:	430a      	orrs	r2, r1
 8003dba:	4943      	ldr	r1, [pc, #268]	@ (8003ec8 <HAL_RCC_OscConfig+0x618>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dc0:	4b41      	ldr	r3, [pc, #260]	@ (8003ec8 <HAL_RCC_OscConfig+0x618>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a40      	ldr	r2, [pc, #256]	@ (8003ec8 <HAL_RCC_OscConfig+0x618>)
 8003dc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003dcc:	4b3e      	ldr	r3, [pc, #248]	@ (8003ec8 <HAL_RCC_OscConfig+0x618>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	4a3d      	ldr	r2, [pc, #244]	@ (8003ec8 <HAL_RCC_OscConfig+0x618>)
 8003dd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dd6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd8:	f7fe feb6 	bl	8002b48 <HAL_GetTick>
 8003ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de0:	f7fe feb2 	bl	8002b48 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e066      	b.n	8003ec0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003df2:	4b35      	ldr	r3, [pc, #212]	@ (8003ec8 <HAL_RCC_OscConfig+0x618>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0f0      	beq.n	8003de0 <HAL_RCC_OscConfig+0x530>
 8003dfe:	e05e      	b.n	8003ebe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e00:	4b31      	ldr	r3, [pc, #196]	@ (8003ec8 <HAL_RCC_OscConfig+0x618>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a30      	ldr	r2, [pc, #192]	@ (8003ec8 <HAL_RCC_OscConfig+0x618>)
 8003e06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0c:	f7fe fe9c 	bl	8002b48 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e14:	f7fe fe98 	bl	8002b48 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e04c      	b.n	8003ec0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e26:	4b28      	ldr	r3, [pc, #160]	@ (8003ec8 <HAL_RCC_OscConfig+0x618>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1f0      	bne.n	8003e14 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003e32:	4b25      	ldr	r3, [pc, #148]	@ (8003ec8 <HAL_RCC_OscConfig+0x618>)
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	4924      	ldr	r1, [pc, #144]	@ (8003ec8 <HAL_RCC_OscConfig+0x618>)
 8003e38:	4b25      	ldr	r3, [pc, #148]	@ (8003ed0 <HAL_RCC_OscConfig+0x620>)
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	60cb      	str	r3, [r1, #12]
 8003e3e:	e03e      	b.n	8003ebe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	69db      	ldr	r3, [r3, #28]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e039      	b.n	8003ec0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8003ec8 <HAL_RCC_OscConfig+0x618>)
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f003 0203 	and.w	r2, r3, #3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d12c      	bne.n	8003eba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d123      	bne.n	8003eba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d11b      	bne.n	8003eba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e8c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d113      	bne.n	8003eba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9c:	085b      	lsrs	r3, r3, #1
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d109      	bne.n	8003eba <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb0:	085b      	lsrs	r3, r3, #1
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d001      	beq.n	8003ebe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3720      	adds	r7, #32
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	019f800c 	.word	0x019f800c
 8003ed0:	feeefffc 	.word	0xfeeefffc

08003ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d101      	bne.n	8003eec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e11e      	b.n	800412a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003eec:	4b91      	ldr	r3, [pc, #580]	@ (8004134 <HAL_RCC_ClockConfig+0x260>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 030f 	and.w	r3, r3, #15
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d910      	bls.n	8003f1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003efa:	4b8e      	ldr	r3, [pc, #568]	@ (8004134 <HAL_RCC_ClockConfig+0x260>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f023 020f 	bic.w	r2, r3, #15
 8003f02:	498c      	ldr	r1, [pc, #560]	@ (8004134 <HAL_RCC_ClockConfig+0x260>)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f0a:	4b8a      	ldr	r3, [pc, #552]	@ (8004134 <HAL_RCC_ClockConfig+0x260>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d001      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e106      	b.n	800412a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d073      	beq.n	8004010 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2b03      	cmp	r3, #3
 8003f2e:	d129      	bne.n	8003f84 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f30:	4b81      	ldr	r3, [pc, #516]	@ (8004138 <HAL_RCC_ClockConfig+0x264>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0f4      	b.n	800412a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003f40:	f000 f9d0 	bl	80042e4 <RCC_GetSysClockFreqFromPLLSource>
 8003f44:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	4a7c      	ldr	r2, [pc, #496]	@ (800413c <HAL_RCC_ClockConfig+0x268>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d93f      	bls.n	8003fce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003f4e:	4b7a      	ldr	r3, [pc, #488]	@ (8004138 <HAL_RCC_ClockConfig+0x264>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d009      	beq.n	8003f6e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d033      	beq.n	8003fce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d12f      	bne.n	8003fce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f6e:	4b72      	ldr	r3, [pc, #456]	@ (8004138 <HAL_RCC_ClockConfig+0x264>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f76:	4a70      	ldr	r2, [pc, #448]	@ (8004138 <HAL_RCC_ClockConfig+0x264>)
 8003f78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f7c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003f7e:	2380      	movs	r3, #128	@ 0x80
 8003f80:	617b      	str	r3, [r7, #20]
 8003f82:	e024      	b.n	8003fce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d107      	bne.n	8003f9c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f8c:	4b6a      	ldr	r3, [pc, #424]	@ (8004138 <HAL_RCC_ClockConfig+0x264>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d109      	bne.n	8003fac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0c6      	b.n	800412a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f9c:	4b66      	ldr	r3, [pc, #408]	@ (8004138 <HAL_RCC_ClockConfig+0x264>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e0be      	b.n	800412a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003fac:	f000 f8ce 	bl	800414c <HAL_RCC_GetSysClockFreq>
 8003fb0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	4a61      	ldr	r2, [pc, #388]	@ (800413c <HAL_RCC_ClockConfig+0x268>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d909      	bls.n	8003fce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003fba:	4b5f      	ldr	r3, [pc, #380]	@ (8004138 <HAL_RCC_ClockConfig+0x264>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003fc2:	4a5d      	ldr	r2, [pc, #372]	@ (8004138 <HAL_RCC_ClockConfig+0x264>)
 8003fc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fc8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003fca:	2380      	movs	r3, #128	@ 0x80
 8003fcc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fce:	4b5a      	ldr	r3, [pc, #360]	@ (8004138 <HAL_RCC_ClockConfig+0x264>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f023 0203 	bic.w	r2, r3, #3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	4957      	ldr	r1, [pc, #348]	@ (8004138 <HAL_RCC_ClockConfig+0x264>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fe0:	f7fe fdb2 	bl	8002b48 <HAL_GetTick>
 8003fe4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe6:	e00a      	b.n	8003ffe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fe8:	f7fe fdae 	bl	8002b48 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e095      	b.n	800412a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ffe:	4b4e      	ldr	r3, [pc, #312]	@ (8004138 <HAL_RCC_ClockConfig+0x264>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 020c 	and.w	r2, r3, #12
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	429a      	cmp	r2, r3
 800400e:	d1eb      	bne.n	8003fe8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d023      	beq.n	8004064 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	d005      	beq.n	8004034 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004028:	4b43      	ldr	r3, [pc, #268]	@ (8004138 <HAL_RCC_ClockConfig+0x264>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	4a42      	ldr	r2, [pc, #264]	@ (8004138 <HAL_RCC_ClockConfig+0x264>)
 800402e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004032:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0308 	and.w	r3, r3, #8
 800403c:	2b00      	cmp	r3, #0
 800403e:	d007      	beq.n	8004050 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004040:	4b3d      	ldr	r3, [pc, #244]	@ (8004138 <HAL_RCC_ClockConfig+0x264>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004048:	4a3b      	ldr	r2, [pc, #236]	@ (8004138 <HAL_RCC_ClockConfig+0x264>)
 800404a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800404e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004050:	4b39      	ldr	r3, [pc, #228]	@ (8004138 <HAL_RCC_ClockConfig+0x264>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	4936      	ldr	r1, [pc, #216]	@ (8004138 <HAL_RCC_ClockConfig+0x264>)
 800405e:	4313      	orrs	r3, r2
 8004060:	608b      	str	r3, [r1, #8]
 8004062:	e008      	b.n	8004076 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	2b80      	cmp	r3, #128	@ 0x80
 8004068:	d105      	bne.n	8004076 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800406a:	4b33      	ldr	r3, [pc, #204]	@ (8004138 <HAL_RCC_ClockConfig+0x264>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	4a32      	ldr	r2, [pc, #200]	@ (8004138 <HAL_RCC_ClockConfig+0x264>)
 8004070:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004074:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004076:	4b2f      	ldr	r3, [pc, #188]	@ (8004134 <HAL_RCC_ClockConfig+0x260>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 030f 	and.w	r3, r3, #15
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	429a      	cmp	r2, r3
 8004082:	d21d      	bcs.n	80040c0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004084:	4b2b      	ldr	r3, [pc, #172]	@ (8004134 <HAL_RCC_ClockConfig+0x260>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f023 020f 	bic.w	r2, r3, #15
 800408c:	4929      	ldr	r1, [pc, #164]	@ (8004134 <HAL_RCC_ClockConfig+0x260>)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	4313      	orrs	r3, r2
 8004092:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004094:	f7fe fd58 	bl	8002b48 <HAL_GetTick>
 8004098:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800409a:	e00a      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800409c:	f7fe fd54 	bl	8002b48 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e03b      	b.n	800412a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b2:	4b20      	ldr	r3, [pc, #128]	@ (8004134 <HAL_RCC_ClockConfig+0x260>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d1ed      	bne.n	800409c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d008      	beq.n	80040de <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040cc:	4b1a      	ldr	r3, [pc, #104]	@ (8004138 <HAL_RCC_ClockConfig+0x264>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	4917      	ldr	r1, [pc, #92]	@ (8004138 <HAL_RCC_ClockConfig+0x264>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0308 	and.w	r3, r3, #8
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d009      	beq.n	80040fe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040ea:	4b13      	ldr	r3, [pc, #76]	@ (8004138 <HAL_RCC_ClockConfig+0x264>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	490f      	ldr	r1, [pc, #60]	@ (8004138 <HAL_RCC_ClockConfig+0x264>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040fe:	f000 f825 	bl	800414c <HAL_RCC_GetSysClockFreq>
 8004102:	4602      	mov	r2, r0
 8004104:	4b0c      	ldr	r3, [pc, #48]	@ (8004138 <HAL_RCC_ClockConfig+0x264>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	091b      	lsrs	r3, r3, #4
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	490c      	ldr	r1, [pc, #48]	@ (8004140 <HAL_RCC_ClockConfig+0x26c>)
 8004110:	5ccb      	ldrb	r3, [r1, r3]
 8004112:	f003 031f 	and.w	r3, r3, #31
 8004116:	fa22 f303 	lsr.w	r3, r2, r3
 800411a:	4a0a      	ldr	r2, [pc, #40]	@ (8004144 <HAL_RCC_ClockConfig+0x270>)
 800411c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800411e:	4b0a      	ldr	r3, [pc, #40]	@ (8004148 <HAL_RCC_ClockConfig+0x274>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f7fd feca 	bl	8001ebc <HAL_InitTick>
 8004128:	4603      	mov	r3, r0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3718      	adds	r7, #24
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	40022000 	.word	0x40022000
 8004138:	40021000 	.word	0x40021000
 800413c:	04c4b400 	.word	0x04c4b400
 8004140:	08018c44 	.word	0x08018c44
 8004144:	20000004 	.word	0x20000004
 8004148:	20000008 	.word	0x20000008

0800414c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004152:	4b2c      	ldr	r3, [pc, #176]	@ (8004204 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 030c 	and.w	r3, r3, #12
 800415a:	2b04      	cmp	r3, #4
 800415c:	d102      	bne.n	8004164 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800415e:	4b2a      	ldr	r3, [pc, #168]	@ (8004208 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004160:	613b      	str	r3, [r7, #16]
 8004162:	e047      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004164:	4b27      	ldr	r3, [pc, #156]	@ (8004204 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 030c 	and.w	r3, r3, #12
 800416c:	2b08      	cmp	r3, #8
 800416e:	d102      	bne.n	8004176 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004170:	4b26      	ldr	r3, [pc, #152]	@ (800420c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004172:	613b      	str	r3, [r7, #16]
 8004174:	e03e      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004176:	4b23      	ldr	r3, [pc, #140]	@ (8004204 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 030c 	and.w	r3, r3, #12
 800417e:	2b0c      	cmp	r3, #12
 8004180:	d136      	bne.n	80041f0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004182:	4b20      	ldr	r3, [pc, #128]	@ (8004204 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800418c:	4b1d      	ldr	r3, [pc, #116]	@ (8004204 <HAL_RCC_GetSysClockFreq+0xb8>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	091b      	lsrs	r3, r3, #4
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	3301      	adds	r3, #1
 8004198:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2b03      	cmp	r3, #3
 800419e:	d10c      	bne.n	80041ba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041a0:	4a1a      	ldr	r2, [pc, #104]	@ (800420c <HAL_RCC_GetSysClockFreq+0xc0>)
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a8:	4a16      	ldr	r2, [pc, #88]	@ (8004204 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041aa:	68d2      	ldr	r2, [r2, #12]
 80041ac:	0a12      	lsrs	r2, r2, #8
 80041ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80041b2:	fb02 f303 	mul.w	r3, r2, r3
 80041b6:	617b      	str	r3, [r7, #20]
      break;
 80041b8:	e00c      	b.n	80041d4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041ba:	4a13      	ldr	r2, [pc, #76]	@ (8004208 <HAL_RCC_GetSysClockFreq+0xbc>)
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c2:	4a10      	ldr	r2, [pc, #64]	@ (8004204 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041c4:	68d2      	ldr	r2, [r2, #12]
 80041c6:	0a12      	lsrs	r2, r2, #8
 80041c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80041cc:	fb02 f303 	mul.w	r3, r2, r3
 80041d0:	617b      	str	r3, [r7, #20]
      break;
 80041d2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004204 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	0e5b      	lsrs	r3, r3, #25
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	3301      	adds	r3, #1
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	e001      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80041f4:	693b      	ldr	r3, [r7, #16]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	371c      	adds	r7, #28
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	40021000 	.word	0x40021000
 8004208:	00f42400 	.word	0x00f42400
 800420c:	016e3600 	.word	0x016e3600

08004210 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004214:	4b03      	ldr	r3, [pc, #12]	@ (8004224 <HAL_RCC_GetHCLKFreq+0x14>)
 8004216:	681b      	ldr	r3, [r3, #0]
}
 8004218:	4618      	mov	r0, r3
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	20000004 	.word	0x20000004

08004228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800422c:	f7ff fff0 	bl	8004210 <HAL_RCC_GetHCLKFreq>
 8004230:	4602      	mov	r2, r0
 8004232:	4b06      	ldr	r3, [pc, #24]	@ (800424c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	0a1b      	lsrs	r3, r3, #8
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	4904      	ldr	r1, [pc, #16]	@ (8004250 <HAL_RCC_GetPCLK1Freq+0x28>)
 800423e:	5ccb      	ldrb	r3, [r1, r3]
 8004240:	f003 031f 	and.w	r3, r3, #31
 8004244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004248:	4618      	mov	r0, r3
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40021000 	.word	0x40021000
 8004250:	08018c54 	.word	0x08018c54

08004254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004258:	f7ff ffda 	bl	8004210 <HAL_RCC_GetHCLKFreq>
 800425c:	4602      	mov	r2, r0
 800425e:	4b06      	ldr	r3, [pc, #24]	@ (8004278 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	0adb      	lsrs	r3, r3, #11
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	4904      	ldr	r1, [pc, #16]	@ (800427c <HAL_RCC_GetPCLK2Freq+0x28>)
 800426a:	5ccb      	ldrb	r3, [r1, r3]
 800426c:	f003 031f 	and.w	r3, r3, #31
 8004270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004274:	4618      	mov	r0, r3
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40021000 	.word	0x40021000
 800427c:	08018c54 	.word	0x08018c54

08004280 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	220f      	movs	r2, #15
 800428e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004290:	4b12      	ldr	r3, [pc, #72]	@ (80042dc <HAL_RCC_GetClockConfig+0x5c>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f003 0203 	and.w	r2, r3, #3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800429c:	4b0f      	ldr	r3, [pc, #60]	@ (80042dc <HAL_RCC_GetClockConfig+0x5c>)
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80042a8:	4b0c      	ldr	r3, [pc, #48]	@ (80042dc <HAL_RCC_GetClockConfig+0x5c>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80042b4:	4b09      	ldr	r3, [pc, #36]	@ (80042dc <HAL_RCC_GetClockConfig+0x5c>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	08db      	lsrs	r3, r3, #3
 80042ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80042c2:	4b07      	ldr	r3, [pc, #28]	@ (80042e0 <HAL_RCC_GetClockConfig+0x60>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 020f 	and.w	r2, r3, #15
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	601a      	str	r2, [r3, #0]
}
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	40021000 	.word	0x40021000
 80042e0:	40022000 	.word	0x40022000

080042e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004364 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004364 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	091b      	lsrs	r3, r3, #4
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	3301      	adds	r3, #1
 8004300:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	2b03      	cmp	r3, #3
 8004306:	d10c      	bne.n	8004322 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004308:	4a17      	ldr	r2, [pc, #92]	@ (8004368 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004310:	4a14      	ldr	r2, [pc, #80]	@ (8004364 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004312:	68d2      	ldr	r2, [r2, #12]
 8004314:	0a12      	lsrs	r2, r2, #8
 8004316:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800431a:	fb02 f303 	mul.w	r3, r2, r3
 800431e:	617b      	str	r3, [r7, #20]
    break;
 8004320:	e00c      	b.n	800433c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004322:	4a12      	ldr	r2, [pc, #72]	@ (800436c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	fbb2 f3f3 	udiv	r3, r2, r3
 800432a:	4a0e      	ldr	r2, [pc, #56]	@ (8004364 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800432c:	68d2      	ldr	r2, [r2, #12]
 800432e:	0a12      	lsrs	r2, r2, #8
 8004330:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004334:	fb02 f303 	mul.w	r3, r2, r3
 8004338:	617b      	str	r3, [r7, #20]
    break;
 800433a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800433c:	4b09      	ldr	r3, [pc, #36]	@ (8004364 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	0e5b      	lsrs	r3, r3, #25
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	3301      	adds	r3, #1
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	fbb2 f3f3 	udiv	r3, r2, r3
 8004354:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004356:	687b      	ldr	r3, [r7, #4]
}
 8004358:	4618      	mov	r0, r3
 800435a:	371c      	adds	r7, #28
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	40021000 	.word	0x40021000
 8004368:	016e3600 	.word	0x016e3600
 800436c:	00f42400 	.word	0x00f42400

08004370 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004378:	2300      	movs	r3, #0
 800437a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800437c:	2300      	movs	r3, #0
 800437e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 8098 	beq.w	80044be <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800438e:	2300      	movs	r3, #0
 8004390:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004392:	4b43      	ldr	r3, [pc, #268]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10d      	bne.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800439e:	4b40      	ldr	r3, [pc, #256]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a2:	4a3f      	ldr	r2, [pc, #252]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80043aa:	4b3d      	ldr	r3, [pc, #244]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043b2:	60bb      	str	r3, [r7, #8]
 80043b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043b6:	2301      	movs	r3, #1
 80043b8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043ba:	4b3a      	ldr	r3, [pc, #232]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a39      	ldr	r2, [pc, #228]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043c6:	f7fe fbbf 	bl	8002b48 <HAL_GetTick>
 80043ca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043cc:	e009      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ce:	f7fe fbbb 	bl	8002b48 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d902      	bls.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	74fb      	strb	r3, [r7, #19]
        break;
 80043e0:	e005      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043e2:	4b30      	ldr	r3, [pc, #192]	@ (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0ef      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80043ee:	7cfb      	ldrb	r3, [r7, #19]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d159      	bne.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043f4:	4b2a      	ldr	r3, [pc, #168]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043fe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d01e      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	429a      	cmp	r2, r3
 800440e:	d019      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004410:	4b23      	ldr	r3, [pc, #140]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004416:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800441a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800441c:	4b20      	ldr	r3, [pc, #128]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800441e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004422:	4a1f      	ldr	r2, [pc, #124]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004424:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004428:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800442c:	4b1c      	ldr	r3, [pc, #112]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800442e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004432:	4a1b      	ldr	r2, [pc, #108]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004434:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004438:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800443c:	4a18      	ldr	r2, [pc, #96]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d016      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444e:	f7fe fb7b 	bl	8002b48 <HAL_GetTick>
 8004452:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004454:	e00b      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004456:	f7fe fb77 	bl	8002b48 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004464:	4293      	cmp	r3, r2
 8004466:	d902      	bls.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	74fb      	strb	r3, [r7, #19]
            break;
 800446c:	e006      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800446e:	4b0c      	ldr	r3, [pc, #48]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0ec      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800447c:	7cfb      	ldrb	r3, [r7, #19]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10b      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004482:	4b07      	ldr	r3, [pc, #28]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004488:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004490:	4903      	ldr	r1, [pc, #12]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004492:	4313      	orrs	r3, r2
 8004494:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004498:	e008      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800449a:	7cfb      	ldrb	r3, [r7, #19]
 800449c:	74bb      	strb	r3, [r7, #18]
 800449e:	e005      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80044a0:	40021000 	.word	0x40021000
 80044a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a8:	7cfb      	ldrb	r3, [r7, #19]
 80044aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044ac:	7c7b      	ldrb	r3, [r7, #17]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d105      	bne.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044b2:	4ba7      	ldr	r3, [pc, #668]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044b6:	4aa6      	ldr	r2, [pc, #664]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044bc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044ca:	4ba1      	ldr	r3, [pc, #644]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044d0:	f023 0203 	bic.w	r2, r3, #3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	499d      	ldr	r1, [pc, #628]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00a      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044ec:	4b98      	ldr	r3, [pc, #608]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f2:	f023 020c 	bic.w	r2, r3, #12
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	4995      	ldr	r1, [pc, #596]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0304 	and.w	r3, r3, #4
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800450e:	4b90      	ldr	r3, [pc, #576]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004514:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	498c      	ldr	r1, [pc, #560]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0308 	and.w	r3, r3, #8
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004530:	4b87      	ldr	r3, [pc, #540]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004536:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	4984      	ldr	r1, [pc, #528]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0310 	and.w	r3, r3, #16
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00a      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004552:	4b7f      	ldr	r3, [pc, #508]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004558:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	497b      	ldr	r1, [pc, #492]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004562:	4313      	orrs	r3, r2
 8004564:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0320 	and.w	r3, r3, #32
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00a      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004574:	4b76      	ldr	r3, [pc, #472]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800457a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	4973      	ldr	r1, [pc, #460]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00a      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004596:	4b6e      	ldr	r3, [pc, #440]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800459c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	496a      	ldr	r1, [pc, #424]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045b8:	4b65      	ldr	r3, [pc, #404]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045be:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	4962      	ldr	r1, [pc, #392]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00a      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045da:	4b5d      	ldr	r3, [pc, #372]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e8:	4959      	ldr	r1, [pc, #356]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d00a      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045fc:	4b54      	ldr	r3, [pc, #336]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004602:	f023 0203 	bic.w	r2, r3, #3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800460a:	4951      	ldr	r1, [pc, #324]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800460c:	4313      	orrs	r3, r2
 800460e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00a      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800461e:	4b4c      	ldr	r3, [pc, #304]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004624:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462c:	4948      	ldr	r1, [pc, #288]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800462e:	4313      	orrs	r3, r2
 8004630:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800463c:	2b00      	cmp	r3, #0
 800463e:	d015      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004640:	4b43      	ldr	r3, [pc, #268]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004646:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800464e:	4940      	ldr	r1, [pc, #256]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004650:	4313      	orrs	r3, r2
 8004652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800465e:	d105      	bne.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004660:	4b3b      	ldr	r3, [pc, #236]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	4a3a      	ldr	r2, [pc, #232]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004666:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800466a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004674:	2b00      	cmp	r3, #0
 8004676:	d015      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004678:	4b35      	ldr	r3, [pc, #212]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800467a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800467e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004686:	4932      	ldr	r1, [pc, #200]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004688:	4313      	orrs	r3, r2
 800468a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004692:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004696:	d105      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004698:	4b2d      	ldr	r3, [pc, #180]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	4a2c      	ldr	r2, [pc, #176]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800469e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046a2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d015      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80046b0:	4b27      	ldr	r3, [pc, #156]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046be:	4924      	ldr	r1, [pc, #144]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046ce:	d105      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046d0:	4b1f      	ldr	r3, [pc, #124]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	4a1e      	ldr	r2, [pc, #120]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046da:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d015      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046e8:	4b19      	ldr	r3, [pc, #100]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f6:	4916      	ldr	r1, [pc, #88]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004702:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004706:	d105      	bne.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004708:	4b11      	ldr	r3, [pc, #68]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	4a10      	ldr	r2, [pc, #64]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800470e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004712:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d019      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004720:	4b0b      	ldr	r3, [pc, #44]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004726:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472e:	4908      	ldr	r1, [pc, #32]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004730:	4313      	orrs	r3, r2
 8004732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800473e:	d109      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004740:	4b03      	ldr	r3, [pc, #12]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	4a02      	ldr	r2, [pc, #8]	@ (8004750 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004746:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800474a:	60d3      	str	r3, [r2, #12]
 800474c:	e002      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800474e:	bf00      	nop
 8004750:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d015      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004760:	4b29      	ldr	r3, [pc, #164]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004766:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800476e:	4926      	ldr	r1, [pc, #152]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004770:	4313      	orrs	r3, r2
 8004772:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800477a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800477e:	d105      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004780:	4b21      	ldr	r3, [pc, #132]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	4a20      	ldr	r2, [pc, #128]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004786:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800478a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d015      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004798:	4b1b      	ldr	r3, [pc, #108]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800479a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800479e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047a6:	4918      	ldr	r1, [pc, #96]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047b6:	d105      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80047b8:	4b13      	ldr	r3, [pc, #76]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	4a12      	ldr	r2, [pc, #72]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047c2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d015      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80047d0:	4b0d      	ldr	r3, [pc, #52]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047de:	490a      	ldr	r1, [pc, #40]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047ee:	d105      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047f0:	4b05      	ldr	r3, [pc, #20]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	4a04      	ldr	r2, [pc, #16]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80047fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3718      	adds	r7, #24
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	40021000 	.word	0x40021000

0800480c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e049      	b.n	80048b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d106      	bne.n	8004838 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7fd fab6 	bl	8001da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3304      	adds	r3, #4
 8004848:	4619      	mov	r1, r3
 800484a:	4610      	mov	r0, r2
 800484c:	f000 fe34 	bl	80054b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
	...

080048bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d001      	beq.n	80048d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e04c      	b.n	800496e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a26      	ldr	r2, [pc, #152]	@ (800497c <HAL_TIM_Base_Start+0xc0>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d022      	beq.n	800492c <HAL_TIM_Base_Start+0x70>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048ee:	d01d      	beq.n	800492c <HAL_TIM_Base_Start+0x70>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a22      	ldr	r2, [pc, #136]	@ (8004980 <HAL_TIM_Base_Start+0xc4>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d018      	beq.n	800492c <HAL_TIM_Base_Start+0x70>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a21      	ldr	r2, [pc, #132]	@ (8004984 <HAL_TIM_Base_Start+0xc8>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d013      	beq.n	800492c <HAL_TIM_Base_Start+0x70>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a1f      	ldr	r2, [pc, #124]	@ (8004988 <HAL_TIM_Base_Start+0xcc>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d00e      	beq.n	800492c <HAL_TIM_Base_Start+0x70>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a1e      	ldr	r2, [pc, #120]	@ (800498c <HAL_TIM_Base_Start+0xd0>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d009      	beq.n	800492c <HAL_TIM_Base_Start+0x70>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a1c      	ldr	r2, [pc, #112]	@ (8004990 <HAL_TIM_Base_Start+0xd4>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d004      	beq.n	800492c <HAL_TIM_Base_Start+0x70>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a1b      	ldr	r2, [pc, #108]	@ (8004994 <HAL_TIM_Base_Start+0xd8>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d115      	bne.n	8004958 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	4b19      	ldr	r3, [pc, #100]	@ (8004998 <HAL_TIM_Base_Start+0xdc>)
 8004934:	4013      	ands	r3, r2
 8004936:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2b06      	cmp	r3, #6
 800493c:	d015      	beq.n	800496a <HAL_TIM_Base_Start+0xae>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004944:	d011      	beq.n	800496a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f042 0201 	orr.w	r2, r2, #1
 8004954:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004956:	e008      	b.n	800496a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f042 0201 	orr.w	r2, r2, #1
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	e000      	b.n	800496c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800496a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	40012c00 	.word	0x40012c00
 8004980:	40000400 	.word	0x40000400
 8004984:	40000800 	.word	0x40000800
 8004988:	40000c00 	.word	0x40000c00
 800498c:	40013400 	.word	0x40013400
 8004990:	40014000 	.word	0x40014000
 8004994:	40015000 	.word	0x40015000
 8004998:	00010007 	.word	0x00010007

0800499c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d001      	beq.n	80049b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e054      	b.n	8004a5e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2202      	movs	r2, #2
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f042 0201 	orr.w	r2, r2, #1
 80049ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a26      	ldr	r2, [pc, #152]	@ (8004a6c <HAL_TIM_Base_Start_IT+0xd0>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d022      	beq.n	8004a1c <HAL_TIM_Base_Start_IT+0x80>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049de:	d01d      	beq.n	8004a1c <HAL_TIM_Base_Start_IT+0x80>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a22      	ldr	r2, [pc, #136]	@ (8004a70 <HAL_TIM_Base_Start_IT+0xd4>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d018      	beq.n	8004a1c <HAL_TIM_Base_Start_IT+0x80>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a21      	ldr	r2, [pc, #132]	@ (8004a74 <HAL_TIM_Base_Start_IT+0xd8>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d013      	beq.n	8004a1c <HAL_TIM_Base_Start_IT+0x80>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a1f      	ldr	r2, [pc, #124]	@ (8004a78 <HAL_TIM_Base_Start_IT+0xdc>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d00e      	beq.n	8004a1c <HAL_TIM_Base_Start_IT+0x80>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a1e      	ldr	r2, [pc, #120]	@ (8004a7c <HAL_TIM_Base_Start_IT+0xe0>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d009      	beq.n	8004a1c <HAL_TIM_Base_Start_IT+0x80>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a1c      	ldr	r2, [pc, #112]	@ (8004a80 <HAL_TIM_Base_Start_IT+0xe4>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d004      	beq.n	8004a1c <HAL_TIM_Base_Start_IT+0x80>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a1b      	ldr	r2, [pc, #108]	@ (8004a84 <HAL_TIM_Base_Start_IT+0xe8>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d115      	bne.n	8004a48 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	689a      	ldr	r2, [r3, #8]
 8004a22:	4b19      	ldr	r3, [pc, #100]	@ (8004a88 <HAL_TIM_Base_Start_IT+0xec>)
 8004a24:	4013      	ands	r3, r2
 8004a26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2b06      	cmp	r3, #6
 8004a2c:	d015      	beq.n	8004a5a <HAL_TIM_Base_Start_IT+0xbe>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a34:	d011      	beq.n	8004a5a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f042 0201 	orr.w	r2, r2, #1
 8004a44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a46:	e008      	b.n	8004a5a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 0201 	orr.w	r2, r2, #1
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	e000      	b.n	8004a5c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40012c00 	.word	0x40012c00
 8004a70:	40000400 	.word	0x40000400
 8004a74:	40000800 	.word	0x40000800
 8004a78:	40000c00 	.word	0x40000c00
 8004a7c:	40013400 	.word	0x40013400
 8004a80:	40014000 	.word	0x40014000
 8004a84:	40015000 	.word	0x40015000
 8004a88:	00010007 	.word	0x00010007

08004a8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e049      	b.n	8004b32 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d106      	bne.n	8004ab8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f841 	bl	8004b3a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	3304      	adds	r3, #4
 8004ac8:	4619      	mov	r1, r3
 8004aca:	4610      	mov	r0, r2
 8004acc:	f000 fcf4 	bl	80054b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
	...

08004b50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d109      	bne.n	8004b74 <HAL_TIM_PWM_Start+0x24>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	bf14      	ite	ne
 8004b6c:	2301      	movne	r3, #1
 8004b6e:	2300      	moveq	r3, #0
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	e03c      	b.n	8004bee <HAL_TIM_PWM_Start+0x9e>
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d109      	bne.n	8004b8e <HAL_TIM_PWM_Start+0x3e>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	bf14      	ite	ne
 8004b86:	2301      	movne	r3, #1
 8004b88:	2300      	moveq	r3, #0
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	e02f      	b.n	8004bee <HAL_TIM_PWM_Start+0x9e>
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d109      	bne.n	8004ba8 <HAL_TIM_PWM_Start+0x58>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	bf14      	ite	ne
 8004ba0:	2301      	movne	r3, #1
 8004ba2:	2300      	moveq	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	e022      	b.n	8004bee <HAL_TIM_PWM_Start+0x9e>
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	2b0c      	cmp	r3, #12
 8004bac:	d109      	bne.n	8004bc2 <HAL_TIM_PWM_Start+0x72>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	bf14      	ite	ne
 8004bba:	2301      	movne	r3, #1
 8004bbc:	2300      	moveq	r3, #0
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	e015      	b.n	8004bee <HAL_TIM_PWM_Start+0x9e>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b10      	cmp	r3, #16
 8004bc6:	d109      	bne.n	8004bdc <HAL_TIM_PWM_Start+0x8c>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	bf14      	ite	ne
 8004bd4:	2301      	movne	r3, #1
 8004bd6:	2300      	moveq	r3, #0
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	e008      	b.n	8004bee <HAL_TIM_PWM_Start+0x9e>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	bf14      	ite	ne
 8004be8:	2301      	movne	r3, #1
 8004bea:	2300      	moveq	r3, #0
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e0a6      	b.n	8004d44 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d104      	bne.n	8004c06 <HAL_TIM_PWM_Start+0xb6>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c04:	e023      	b.n	8004c4e <HAL_TIM_PWM_Start+0xfe>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b04      	cmp	r3, #4
 8004c0a:	d104      	bne.n	8004c16 <HAL_TIM_PWM_Start+0xc6>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c14:	e01b      	b.n	8004c4e <HAL_TIM_PWM_Start+0xfe>
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d104      	bne.n	8004c26 <HAL_TIM_PWM_Start+0xd6>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c24:	e013      	b.n	8004c4e <HAL_TIM_PWM_Start+0xfe>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b0c      	cmp	r3, #12
 8004c2a:	d104      	bne.n	8004c36 <HAL_TIM_PWM_Start+0xe6>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c34:	e00b      	b.n	8004c4e <HAL_TIM_PWM_Start+0xfe>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b10      	cmp	r3, #16
 8004c3a:	d104      	bne.n	8004c46 <HAL_TIM_PWM_Start+0xf6>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c44:	e003      	b.n	8004c4e <HAL_TIM_PWM_Start+0xfe>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2202      	movs	r2, #2
 8004c4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2201      	movs	r2, #1
 8004c54:	6839      	ldr	r1, [r7, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f001 f8a8 	bl	8005dac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a3a      	ldr	r2, [pc, #232]	@ (8004d4c <HAL_TIM_PWM_Start+0x1fc>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d018      	beq.n	8004c98 <HAL_TIM_PWM_Start+0x148>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a39      	ldr	r2, [pc, #228]	@ (8004d50 <HAL_TIM_PWM_Start+0x200>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d013      	beq.n	8004c98 <HAL_TIM_PWM_Start+0x148>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a37      	ldr	r2, [pc, #220]	@ (8004d54 <HAL_TIM_PWM_Start+0x204>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d00e      	beq.n	8004c98 <HAL_TIM_PWM_Start+0x148>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a36      	ldr	r2, [pc, #216]	@ (8004d58 <HAL_TIM_PWM_Start+0x208>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d009      	beq.n	8004c98 <HAL_TIM_PWM_Start+0x148>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a34      	ldr	r2, [pc, #208]	@ (8004d5c <HAL_TIM_PWM_Start+0x20c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d004      	beq.n	8004c98 <HAL_TIM_PWM_Start+0x148>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a33      	ldr	r2, [pc, #204]	@ (8004d60 <HAL_TIM_PWM_Start+0x210>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d101      	bne.n	8004c9c <HAL_TIM_PWM_Start+0x14c>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e000      	b.n	8004c9e <HAL_TIM_PWM_Start+0x14e>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d007      	beq.n	8004cb2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cb0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a25      	ldr	r2, [pc, #148]	@ (8004d4c <HAL_TIM_PWM_Start+0x1fc>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d022      	beq.n	8004d02 <HAL_TIM_PWM_Start+0x1b2>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cc4:	d01d      	beq.n	8004d02 <HAL_TIM_PWM_Start+0x1b2>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a26      	ldr	r2, [pc, #152]	@ (8004d64 <HAL_TIM_PWM_Start+0x214>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d018      	beq.n	8004d02 <HAL_TIM_PWM_Start+0x1b2>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a24      	ldr	r2, [pc, #144]	@ (8004d68 <HAL_TIM_PWM_Start+0x218>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d013      	beq.n	8004d02 <HAL_TIM_PWM_Start+0x1b2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a23      	ldr	r2, [pc, #140]	@ (8004d6c <HAL_TIM_PWM_Start+0x21c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d00e      	beq.n	8004d02 <HAL_TIM_PWM_Start+0x1b2>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a19      	ldr	r2, [pc, #100]	@ (8004d50 <HAL_TIM_PWM_Start+0x200>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d009      	beq.n	8004d02 <HAL_TIM_PWM_Start+0x1b2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a18      	ldr	r2, [pc, #96]	@ (8004d54 <HAL_TIM_PWM_Start+0x204>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d004      	beq.n	8004d02 <HAL_TIM_PWM_Start+0x1b2>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a18      	ldr	r2, [pc, #96]	@ (8004d60 <HAL_TIM_PWM_Start+0x210>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d115      	bne.n	8004d2e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	4b19      	ldr	r3, [pc, #100]	@ (8004d70 <HAL_TIM_PWM_Start+0x220>)
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2b06      	cmp	r3, #6
 8004d12:	d015      	beq.n	8004d40 <HAL_TIM_PWM_Start+0x1f0>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d1a:	d011      	beq.n	8004d40 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 0201 	orr.w	r2, r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d2c:	e008      	b.n	8004d40 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f042 0201 	orr.w	r2, r2, #1
 8004d3c:	601a      	str	r2, [r3, #0]
 8004d3e:	e000      	b.n	8004d42 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3710      	adds	r7, #16
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	40012c00 	.word	0x40012c00
 8004d50:	40013400 	.word	0x40013400
 8004d54:	40014000 	.word	0x40014000
 8004d58:	40014400 	.word	0x40014400
 8004d5c:	40014800 	.word	0x40014800
 8004d60:	40015000 	.word	0x40015000
 8004d64:	40000400 	.word	0x40000400
 8004d68:	40000800 	.word	0x40000800
 8004d6c:	40000c00 	.word	0x40000c00
 8004d70:	00010007 	.word	0x00010007

08004d74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d020      	beq.n	8004dd8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d01b      	beq.n	8004dd8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f06f 0202 	mvn.w	r2, #2
 8004da8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fb5c 	bl	800547c <HAL_TIM_IC_CaptureCallback>
 8004dc4:	e005      	b.n	8004dd2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fb4e 	bl	8005468 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 fb5f 	bl	8005490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f003 0304 	and.w	r3, r3, #4
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d020      	beq.n	8004e24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d01b      	beq.n	8004e24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f06f 0204 	mvn.w	r2, #4
 8004df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2202      	movs	r2, #2
 8004dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 fb36 	bl	800547c <HAL_TIM_IC_CaptureCallback>
 8004e10:	e005      	b.n	8004e1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 fb28 	bl	8005468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 fb39 	bl	8005490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d020      	beq.n	8004e70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f003 0308 	and.w	r3, r3, #8
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d01b      	beq.n	8004e70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f06f 0208 	mvn.w	r2, #8
 8004e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2204      	movs	r2, #4
 8004e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	f003 0303 	and.w	r3, r3, #3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 fb10 	bl	800547c <HAL_TIM_IC_CaptureCallback>
 8004e5c:	e005      	b.n	8004e6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 fb02 	bl	8005468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 fb13 	bl	8005490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f003 0310 	and.w	r3, r3, #16
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d020      	beq.n	8004ebc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f003 0310 	and.w	r3, r3, #16
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d01b      	beq.n	8004ebc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f06f 0210 	mvn.w	r2, #16
 8004e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2208      	movs	r2, #8
 8004e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 faea 	bl	800547c <HAL_TIM_IC_CaptureCallback>
 8004ea8:	e005      	b.n	8004eb6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fadc 	bl	8005468 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 faed 	bl	8005490 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00c      	beq.n	8004ee0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d007      	beq.n	8004ee0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f06f 0201 	mvn.w	r2, #1
 8004ed8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7fc fe62 	bl	8001ba4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d104      	bne.n	8004ef4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00c      	beq.n	8004f0e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d007      	beq.n	8004f0e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f001 f815 	bl	8005f38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00c      	beq.n	8004f32 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d007      	beq.n	8004f32 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f001 f80d 	bl	8005f4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00c      	beq.n	8004f56 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d007      	beq.n	8004f56 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 faa7 	bl	80054a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	f003 0320 	and.w	r3, r3, #32
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00c      	beq.n	8004f7a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f003 0320 	and.w	r3, r3, #32
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d007      	beq.n	8004f7a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f06f 0220 	mvn.w	r2, #32
 8004f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 ffd5 	bl	8005f24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00c      	beq.n	8004f9e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d007      	beq.n	8004f9e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 ffe1 	bl	8005f60 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00c      	beq.n	8004fc2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d007      	beq.n	8004fc2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004fba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 ffd9 	bl	8005f74 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00c      	beq.n	8004fe6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d007      	beq.n	8004fe6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 ffd1 	bl	8005f88 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00c      	beq.n	800500a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d007      	beq.n	800500a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 ffc9 	bl	8005f9c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800500a:	bf00      	nop
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
	...

08005014 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b086      	sub	sp, #24
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005020:	2300      	movs	r3, #0
 8005022:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800502a:	2b01      	cmp	r3, #1
 800502c:	d101      	bne.n	8005032 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800502e:	2302      	movs	r3, #2
 8005030:	e0ff      	b.n	8005232 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b14      	cmp	r3, #20
 800503e:	f200 80f0 	bhi.w	8005222 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005042:	a201      	add	r2, pc, #4	@ (adr r2, 8005048 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005048:	0800509d 	.word	0x0800509d
 800504c:	08005223 	.word	0x08005223
 8005050:	08005223 	.word	0x08005223
 8005054:	08005223 	.word	0x08005223
 8005058:	080050dd 	.word	0x080050dd
 800505c:	08005223 	.word	0x08005223
 8005060:	08005223 	.word	0x08005223
 8005064:	08005223 	.word	0x08005223
 8005068:	0800511f 	.word	0x0800511f
 800506c:	08005223 	.word	0x08005223
 8005070:	08005223 	.word	0x08005223
 8005074:	08005223 	.word	0x08005223
 8005078:	0800515f 	.word	0x0800515f
 800507c:	08005223 	.word	0x08005223
 8005080:	08005223 	.word	0x08005223
 8005084:	08005223 	.word	0x08005223
 8005088:	080051a1 	.word	0x080051a1
 800508c:	08005223 	.word	0x08005223
 8005090:	08005223 	.word	0x08005223
 8005094:	08005223 	.word	0x08005223
 8005098:	080051e1 	.word	0x080051e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68b9      	ldr	r1, [r7, #8]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 fabc 	bl	8005620 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	699a      	ldr	r2, [r3, #24]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0208 	orr.w	r2, r2, #8
 80050b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699a      	ldr	r2, [r3, #24]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 0204 	bic.w	r2, r2, #4
 80050c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6999      	ldr	r1, [r3, #24]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	691a      	ldr	r2, [r3, #16]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	619a      	str	r2, [r3, #24]
      break;
 80050da:	e0a5      	b.n	8005228 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68b9      	ldr	r1, [r7, #8]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 fb36 	bl	8005754 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699a      	ldr	r2, [r3, #24]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	699a      	ldr	r2, [r3, #24]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6999      	ldr	r1, [r3, #24]
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	021a      	lsls	r2, r3, #8
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	619a      	str	r2, [r3, #24]
      break;
 800511c:	e084      	b.n	8005228 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68b9      	ldr	r1, [r7, #8]
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fba9 	bl	800587c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69da      	ldr	r2, [r3, #28]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f042 0208 	orr.w	r2, r2, #8
 8005138:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	69da      	ldr	r2, [r3, #28]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0204 	bic.w	r2, r2, #4
 8005148:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	69d9      	ldr	r1, [r3, #28]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	691a      	ldr	r2, [r3, #16]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	430a      	orrs	r2, r1
 800515a:	61da      	str	r2, [r3, #28]
      break;
 800515c:	e064      	b.n	8005228 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68b9      	ldr	r1, [r7, #8]
 8005164:	4618      	mov	r0, r3
 8005166:	f000 fc1b 	bl	80059a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69da      	ldr	r2, [r3, #28]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005178:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69da      	ldr	r2, [r3, #28]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	69d9      	ldr	r1, [r3, #28]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	021a      	lsls	r2, r3, #8
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	61da      	str	r2, [r3, #28]
      break;
 800519e:	e043      	b.n	8005228 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68b9      	ldr	r1, [r7, #8]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fc8e 	bl	8005ac8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0208 	orr.w	r2, r2, #8
 80051ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 0204 	bic.w	r2, r2, #4
 80051ca:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	691a      	ldr	r2, [r3, #16]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80051de:	e023      	b.n	8005228 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68b9      	ldr	r1, [r7, #8]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 fcd8 	bl	8005b9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051fa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800520a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	021a      	lsls	r2, r3, #8
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005220:	e002      	b.n	8005228 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	75fb      	strb	r3, [r7, #23]
      break;
 8005226:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005230:	7dfb      	ldrb	r3, [r7, #23]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop

0800523c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <HAL_TIM_ConfigClockSource+0x1c>
 8005254:	2302      	movs	r3, #2
 8005256:	e0f6      	b.n	8005446 <HAL_TIM_ConfigClockSource+0x20a>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005276:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800527a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005282:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a6f      	ldr	r2, [pc, #444]	@ (8005450 <HAL_TIM_ConfigClockSource+0x214>)
 8005292:	4293      	cmp	r3, r2
 8005294:	f000 80c1 	beq.w	800541a <HAL_TIM_ConfigClockSource+0x1de>
 8005298:	4a6d      	ldr	r2, [pc, #436]	@ (8005450 <HAL_TIM_ConfigClockSource+0x214>)
 800529a:	4293      	cmp	r3, r2
 800529c:	f200 80c6 	bhi.w	800542c <HAL_TIM_ConfigClockSource+0x1f0>
 80052a0:	4a6c      	ldr	r2, [pc, #432]	@ (8005454 <HAL_TIM_ConfigClockSource+0x218>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	f000 80b9 	beq.w	800541a <HAL_TIM_ConfigClockSource+0x1de>
 80052a8:	4a6a      	ldr	r2, [pc, #424]	@ (8005454 <HAL_TIM_ConfigClockSource+0x218>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	f200 80be 	bhi.w	800542c <HAL_TIM_ConfigClockSource+0x1f0>
 80052b0:	4a69      	ldr	r2, [pc, #420]	@ (8005458 <HAL_TIM_ConfigClockSource+0x21c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	f000 80b1 	beq.w	800541a <HAL_TIM_ConfigClockSource+0x1de>
 80052b8:	4a67      	ldr	r2, [pc, #412]	@ (8005458 <HAL_TIM_ConfigClockSource+0x21c>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	f200 80b6 	bhi.w	800542c <HAL_TIM_ConfigClockSource+0x1f0>
 80052c0:	4a66      	ldr	r2, [pc, #408]	@ (800545c <HAL_TIM_ConfigClockSource+0x220>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	f000 80a9 	beq.w	800541a <HAL_TIM_ConfigClockSource+0x1de>
 80052c8:	4a64      	ldr	r2, [pc, #400]	@ (800545c <HAL_TIM_ConfigClockSource+0x220>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	f200 80ae 	bhi.w	800542c <HAL_TIM_ConfigClockSource+0x1f0>
 80052d0:	4a63      	ldr	r2, [pc, #396]	@ (8005460 <HAL_TIM_ConfigClockSource+0x224>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	f000 80a1 	beq.w	800541a <HAL_TIM_ConfigClockSource+0x1de>
 80052d8:	4a61      	ldr	r2, [pc, #388]	@ (8005460 <HAL_TIM_ConfigClockSource+0x224>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	f200 80a6 	bhi.w	800542c <HAL_TIM_ConfigClockSource+0x1f0>
 80052e0:	4a60      	ldr	r2, [pc, #384]	@ (8005464 <HAL_TIM_ConfigClockSource+0x228>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	f000 8099 	beq.w	800541a <HAL_TIM_ConfigClockSource+0x1de>
 80052e8:	4a5e      	ldr	r2, [pc, #376]	@ (8005464 <HAL_TIM_ConfigClockSource+0x228>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	f200 809e 	bhi.w	800542c <HAL_TIM_ConfigClockSource+0x1f0>
 80052f0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80052f4:	f000 8091 	beq.w	800541a <HAL_TIM_ConfigClockSource+0x1de>
 80052f8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80052fc:	f200 8096 	bhi.w	800542c <HAL_TIM_ConfigClockSource+0x1f0>
 8005300:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005304:	f000 8089 	beq.w	800541a <HAL_TIM_ConfigClockSource+0x1de>
 8005308:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800530c:	f200 808e 	bhi.w	800542c <HAL_TIM_ConfigClockSource+0x1f0>
 8005310:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005314:	d03e      	beq.n	8005394 <HAL_TIM_ConfigClockSource+0x158>
 8005316:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800531a:	f200 8087 	bhi.w	800542c <HAL_TIM_ConfigClockSource+0x1f0>
 800531e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005322:	f000 8086 	beq.w	8005432 <HAL_TIM_ConfigClockSource+0x1f6>
 8005326:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800532a:	d87f      	bhi.n	800542c <HAL_TIM_ConfigClockSource+0x1f0>
 800532c:	2b70      	cmp	r3, #112	@ 0x70
 800532e:	d01a      	beq.n	8005366 <HAL_TIM_ConfigClockSource+0x12a>
 8005330:	2b70      	cmp	r3, #112	@ 0x70
 8005332:	d87b      	bhi.n	800542c <HAL_TIM_ConfigClockSource+0x1f0>
 8005334:	2b60      	cmp	r3, #96	@ 0x60
 8005336:	d050      	beq.n	80053da <HAL_TIM_ConfigClockSource+0x19e>
 8005338:	2b60      	cmp	r3, #96	@ 0x60
 800533a:	d877      	bhi.n	800542c <HAL_TIM_ConfigClockSource+0x1f0>
 800533c:	2b50      	cmp	r3, #80	@ 0x50
 800533e:	d03c      	beq.n	80053ba <HAL_TIM_ConfigClockSource+0x17e>
 8005340:	2b50      	cmp	r3, #80	@ 0x50
 8005342:	d873      	bhi.n	800542c <HAL_TIM_ConfigClockSource+0x1f0>
 8005344:	2b40      	cmp	r3, #64	@ 0x40
 8005346:	d058      	beq.n	80053fa <HAL_TIM_ConfigClockSource+0x1be>
 8005348:	2b40      	cmp	r3, #64	@ 0x40
 800534a:	d86f      	bhi.n	800542c <HAL_TIM_ConfigClockSource+0x1f0>
 800534c:	2b30      	cmp	r3, #48	@ 0x30
 800534e:	d064      	beq.n	800541a <HAL_TIM_ConfigClockSource+0x1de>
 8005350:	2b30      	cmp	r3, #48	@ 0x30
 8005352:	d86b      	bhi.n	800542c <HAL_TIM_ConfigClockSource+0x1f0>
 8005354:	2b20      	cmp	r3, #32
 8005356:	d060      	beq.n	800541a <HAL_TIM_ConfigClockSource+0x1de>
 8005358:	2b20      	cmp	r3, #32
 800535a:	d867      	bhi.n	800542c <HAL_TIM_ConfigClockSource+0x1f0>
 800535c:	2b00      	cmp	r3, #0
 800535e:	d05c      	beq.n	800541a <HAL_TIM_ConfigClockSource+0x1de>
 8005360:	2b10      	cmp	r3, #16
 8005362:	d05a      	beq.n	800541a <HAL_TIM_ConfigClockSource+0x1de>
 8005364:	e062      	b.n	800542c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005376:	f000 fcf9 	bl	8005d6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005388:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	609a      	str	r2, [r3, #8]
      break;
 8005392:	e04f      	b.n	8005434 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053a4:	f000 fce2 	bl	8005d6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689a      	ldr	r2, [r3, #8]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053b6:	609a      	str	r2, [r3, #8]
      break;
 80053b8:	e03c      	b.n	8005434 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053c6:	461a      	mov	r2, r3
 80053c8:	f000 fc54 	bl	8005c74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2150      	movs	r1, #80	@ 0x50
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 fcad 	bl	8005d32 <TIM_ITRx_SetConfig>
      break;
 80053d8:	e02c      	b.n	8005434 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053e6:	461a      	mov	r2, r3
 80053e8:	f000 fc73 	bl	8005cd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2160      	movs	r1, #96	@ 0x60
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 fc9d 	bl	8005d32 <TIM_ITRx_SetConfig>
      break;
 80053f8:	e01c      	b.n	8005434 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005406:	461a      	mov	r2, r3
 8005408:	f000 fc34 	bl	8005c74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2140      	movs	r1, #64	@ 0x40
 8005412:	4618      	mov	r0, r3
 8005414:	f000 fc8d 	bl	8005d32 <TIM_ITRx_SetConfig>
      break;
 8005418:	e00c      	b.n	8005434 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4619      	mov	r1, r3
 8005424:	4610      	mov	r0, r2
 8005426:	f000 fc84 	bl	8005d32 <TIM_ITRx_SetConfig>
      break;
 800542a:	e003      	b.n	8005434 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	73fb      	strb	r3, [r7, #15]
      break;
 8005430:	e000      	b.n	8005434 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005432:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005444:	7bfb      	ldrb	r3, [r7, #15]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	00100070 	.word	0x00100070
 8005454:	00100060 	.word	0x00100060
 8005458:	00100050 	.word	0x00100050
 800545c:	00100040 	.word	0x00100040
 8005460:	00100030 	.word	0x00100030
 8005464:	00100020 	.word	0x00100020

08005468 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a4c      	ldr	r2, [pc, #304]	@ (80055fc <TIM_Base_SetConfig+0x144>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d017      	beq.n	8005500 <TIM_Base_SetConfig+0x48>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054d6:	d013      	beq.n	8005500 <TIM_Base_SetConfig+0x48>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a49      	ldr	r2, [pc, #292]	@ (8005600 <TIM_Base_SetConfig+0x148>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d00f      	beq.n	8005500 <TIM_Base_SetConfig+0x48>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a48      	ldr	r2, [pc, #288]	@ (8005604 <TIM_Base_SetConfig+0x14c>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d00b      	beq.n	8005500 <TIM_Base_SetConfig+0x48>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a47      	ldr	r2, [pc, #284]	@ (8005608 <TIM_Base_SetConfig+0x150>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d007      	beq.n	8005500 <TIM_Base_SetConfig+0x48>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a46      	ldr	r2, [pc, #280]	@ (800560c <TIM_Base_SetConfig+0x154>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d003      	beq.n	8005500 <TIM_Base_SetConfig+0x48>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a45      	ldr	r2, [pc, #276]	@ (8005610 <TIM_Base_SetConfig+0x158>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d108      	bne.n	8005512 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005506:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	4313      	orrs	r3, r2
 8005510:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a39      	ldr	r2, [pc, #228]	@ (80055fc <TIM_Base_SetConfig+0x144>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d023      	beq.n	8005562 <TIM_Base_SetConfig+0xaa>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005520:	d01f      	beq.n	8005562 <TIM_Base_SetConfig+0xaa>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a36      	ldr	r2, [pc, #216]	@ (8005600 <TIM_Base_SetConfig+0x148>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d01b      	beq.n	8005562 <TIM_Base_SetConfig+0xaa>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a35      	ldr	r2, [pc, #212]	@ (8005604 <TIM_Base_SetConfig+0x14c>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d017      	beq.n	8005562 <TIM_Base_SetConfig+0xaa>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a34      	ldr	r2, [pc, #208]	@ (8005608 <TIM_Base_SetConfig+0x150>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d013      	beq.n	8005562 <TIM_Base_SetConfig+0xaa>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a33      	ldr	r2, [pc, #204]	@ (800560c <TIM_Base_SetConfig+0x154>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d00f      	beq.n	8005562 <TIM_Base_SetConfig+0xaa>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a33      	ldr	r2, [pc, #204]	@ (8005614 <TIM_Base_SetConfig+0x15c>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d00b      	beq.n	8005562 <TIM_Base_SetConfig+0xaa>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a32      	ldr	r2, [pc, #200]	@ (8005618 <TIM_Base_SetConfig+0x160>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d007      	beq.n	8005562 <TIM_Base_SetConfig+0xaa>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a31      	ldr	r2, [pc, #196]	@ (800561c <TIM_Base_SetConfig+0x164>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d003      	beq.n	8005562 <TIM_Base_SetConfig+0xaa>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a2c      	ldr	r2, [pc, #176]	@ (8005610 <TIM_Base_SetConfig+0x158>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d108      	bne.n	8005574 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	4313      	orrs	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	4313      	orrs	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a18      	ldr	r2, [pc, #96]	@ (80055fc <TIM_Base_SetConfig+0x144>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d013      	beq.n	80055c8 <TIM_Base_SetConfig+0x110>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a1a      	ldr	r2, [pc, #104]	@ (800560c <TIM_Base_SetConfig+0x154>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d00f      	beq.n	80055c8 <TIM_Base_SetConfig+0x110>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a1a      	ldr	r2, [pc, #104]	@ (8005614 <TIM_Base_SetConfig+0x15c>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d00b      	beq.n	80055c8 <TIM_Base_SetConfig+0x110>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a19      	ldr	r2, [pc, #100]	@ (8005618 <TIM_Base_SetConfig+0x160>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d007      	beq.n	80055c8 <TIM_Base_SetConfig+0x110>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a18      	ldr	r2, [pc, #96]	@ (800561c <TIM_Base_SetConfig+0x164>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d003      	beq.n	80055c8 <TIM_Base_SetConfig+0x110>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a13      	ldr	r2, [pc, #76]	@ (8005610 <TIM_Base_SetConfig+0x158>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d103      	bne.n	80055d0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	691a      	ldr	r2, [r3, #16]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d105      	bne.n	80055ee <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	f023 0201 	bic.w	r2, r3, #1
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	611a      	str	r2, [r3, #16]
  }
}
 80055ee:	bf00      	nop
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	40012c00 	.word	0x40012c00
 8005600:	40000400 	.word	0x40000400
 8005604:	40000800 	.word	0x40000800
 8005608:	40000c00 	.word	0x40000c00
 800560c:	40013400 	.word	0x40013400
 8005610:	40015000 	.word	0x40015000
 8005614:	40014000 	.word	0x40014000
 8005618:	40014400 	.word	0x40014400
 800561c:	40014800 	.word	0x40014800

08005620 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	f023 0201 	bic.w	r2, r3, #1
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800564e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 0303 	bic.w	r3, r3, #3
 800565a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	4313      	orrs	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f023 0302 	bic.w	r3, r3, #2
 800566c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	4313      	orrs	r3, r2
 8005676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a30      	ldr	r2, [pc, #192]	@ (800573c <TIM_OC1_SetConfig+0x11c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d013      	beq.n	80056a8 <TIM_OC1_SetConfig+0x88>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a2f      	ldr	r2, [pc, #188]	@ (8005740 <TIM_OC1_SetConfig+0x120>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d00f      	beq.n	80056a8 <TIM_OC1_SetConfig+0x88>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a2e      	ldr	r2, [pc, #184]	@ (8005744 <TIM_OC1_SetConfig+0x124>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d00b      	beq.n	80056a8 <TIM_OC1_SetConfig+0x88>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a2d      	ldr	r2, [pc, #180]	@ (8005748 <TIM_OC1_SetConfig+0x128>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d007      	beq.n	80056a8 <TIM_OC1_SetConfig+0x88>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a2c      	ldr	r2, [pc, #176]	@ (800574c <TIM_OC1_SetConfig+0x12c>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d003      	beq.n	80056a8 <TIM_OC1_SetConfig+0x88>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a2b      	ldr	r2, [pc, #172]	@ (8005750 <TIM_OC1_SetConfig+0x130>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d10c      	bne.n	80056c2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f023 0308 	bic.w	r3, r3, #8
 80056ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f023 0304 	bic.w	r3, r3, #4
 80056c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a1d      	ldr	r2, [pc, #116]	@ (800573c <TIM_OC1_SetConfig+0x11c>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d013      	beq.n	80056f2 <TIM_OC1_SetConfig+0xd2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a1c      	ldr	r2, [pc, #112]	@ (8005740 <TIM_OC1_SetConfig+0x120>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d00f      	beq.n	80056f2 <TIM_OC1_SetConfig+0xd2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a1b      	ldr	r2, [pc, #108]	@ (8005744 <TIM_OC1_SetConfig+0x124>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d00b      	beq.n	80056f2 <TIM_OC1_SetConfig+0xd2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a1a      	ldr	r2, [pc, #104]	@ (8005748 <TIM_OC1_SetConfig+0x128>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d007      	beq.n	80056f2 <TIM_OC1_SetConfig+0xd2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a19      	ldr	r2, [pc, #100]	@ (800574c <TIM_OC1_SetConfig+0x12c>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d003      	beq.n	80056f2 <TIM_OC1_SetConfig+0xd2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a18      	ldr	r2, [pc, #96]	@ (8005750 <TIM_OC1_SetConfig+0x130>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d111      	bne.n	8005716 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005700:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	4313      	orrs	r3, r2
 800570a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	4313      	orrs	r3, r2
 8005714:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	621a      	str	r2, [r3, #32]
}
 8005730:	bf00      	nop
 8005732:	371c      	adds	r7, #28
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr
 800573c:	40012c00 	.word	0x40012c00
 8005740:	40013400 	.word	0x40013400
 8005744:	40014000 	.word	0x40014000
 8005748:	40014400 	.word	0x40014400
 800574c:	40014800 	.word	0x40014800
 8005750:	40015000 	.word	0x40015000

08005754 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	f023 0210 	bic.w	r2, r3, #16
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005782:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800578e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	021b      	lsls	r3, r3, #8
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	4313      	orrs	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f023 0320 	bic.w	r3, r3, #32
 80057a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	011b      	lsls	r3, r3, #4
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a2c      	ldr	r2, [pc, #176]	@ (8005864 <TIM_OC2_SetConfig+0x110>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d007      	beq.n	80057c8 <TIM_OC2_SetConfig+0x74>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a2b      	ldr	r2, [pc, #172]	@ (8005868 <TIM_OC2_SetConfig+0x114>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d003      	beq.n	80057c8 <TIM_OC2_SetConfig+0x74>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a2a      	ldr	r2, [pc, #168]	@ (800586c <TIM_OC2_SetConfig+0x118>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d10d      	bne.n	80057e4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	011b      	lsls	r3, r3, #4
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	4313      	orrs	r3, r2
 80057da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a1f      	ldr	r2, [pc, #124]	@ (8005864 <TIM_OC2_SetConfig+0x110>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d013      	beq.n	8005814 <TIM_OC2_SetConfig+0xc0>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a1e      	ldr	r2, [pc, #120]	@ (8005868 <TIM_OC2_SetConfig+0x114>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d00f      	beq.n	8005814 <TIM_OC2_SetConfig+0xc0>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005870 <TIM_OC2_SetConfig+0x11c>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d00b      	beq.n	8005814 <TIM_OC2_SetConfig+0xc0>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a1d      	ldr	r2, [pc, #116]	@ (8005874 <TIM_OC2_SetConfig+0x120>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d007      	beq.n	8005814 <TIM_OC2_SetConfig+0xc0>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a1c      	ldr	r2, [pc, #112]	@ (8005878 <TIM_OC2_SetConfig+0x124>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d003      	beq.n	8005814 <TIM_OC2_SetConfig+0xc0>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a17      	ldr	r2, [pc, #92]	@ (800586c <TIM_OC2_SetConfig+0x118>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d113      	bne.n	800583c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800581a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005822:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	4313      	orrs	r3, r2
 800582e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	4313      	orrs	r3, r2
 800583a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	621a      	str	r2, [r3, #32]
}
 8005856:	bf00      	nop
 8005858:	371c      	adds	r7, #28
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	40012c00 	.word	0x40012c00
 8005868:	40013400 	.word	0x40013400
 800586c:	40015000 	.word	0x40015000
 8005870:	40014000 	.word	0x40014000
 8005874:	40014400 	.word	0x40014400
 8005878:	40014800 	.word	0x40014800

0800587c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800587c:	b480      	push	{r7}
 800587e:	b087      	sub	sp, #28
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a1b      	ldr	r3, [r3, #32]
 8005890:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f023 0303 	bic.w	r3, r3, #3
 80058b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80058c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	021b      	lsls	r3, r3, #8
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a2b      	ldr	r2, [pc, #172]	@ (8005988 <TIM_OC3_SetConfig+0x10c>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d007      	beq.n	80058ee <TIM_OC3_SetConfig+0x72>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a2a      	ldr	r2, [pc, #168]	@ (800598c <TIM_OC3_SetConfig+0x110>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d003      	beq.n	80058ee <TIM_OC3_SetConfig+0x72>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a29      	ldr	r2, [pc, #164]	@ (8005990 <TIM_OC3_SetConfig+0x114>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d10d      	bne.n	800590a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	021b      	lsls	r3, r3, #8
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	4313      	orrs	r3, r2
 8005900:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005908:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a1e      	ldr	r2, [pc, #120]	@ (8005988 <TIM_OC3_SetConfig+0x10c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d013      	beq.n	800593a <TIM_OC3_SetConfig+0xbe>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a1d      	ldr	r2, [pc, #116]	@ (800598c <TIM_OC3_SetConfig+0x110>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d00f      	beq.n	800593a <TIM_OC3_SetConfig+0xbe>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a1d      	ldr	r2, [pc, #116]	@ (8005994 <TIM_OC3_SetConfig+0x118>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d00b      	beq.n	800593a <TIM_OC3_SetConfig+0xbe>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a1c      	ldr	r2, [pc, #112]	@ (8005998 <TIM_OC3_SetConfig+0x11c>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d007      	beq.n	800593a <TIM_OC3_SetConfig+0xbe>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a1b      	ldr	r2, [pc, #108]	@ (800599c <TIM_OC3_SetConfig+0x120>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d003      	beq.n	800593a <TIM_OC3_SetConfig+0xbe>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a16      	ldr	r2, [pc, #88]	@ (8005990 <TIM_OC3_SetConfig+0x114>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d113      	bne.n	8005962 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005940:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005948:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	011b      	lsls	r3, r3, #4
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	4313      	orrs	r3, r2
 8005954:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	011b      	lsls	r3, r3, #4
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	4313      	orrs	r3, r2
 8005960:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	621a      	str	r2, [r3, #32]
}
 800597c:	bf00      	nop
 800597e:	371c      	adds	r7, #28
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	40012c00 	.word	0x40012c00
 800598c:	40013400 	.word	0x40013400
 8005990:	40015000 	.word	0x40015000
 8005994:	40014000 	.word	0x40014000
 8005998:	40014400 	.word	0x40014400
 800599c:	40014800 	.word	0x40014800

080059a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	021b      	lsls	r3, r3, #8
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	031b      	lsls	r3, r3, #12
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a2c      	ldr	r2, [pc, #176]	@ (8005ab0 <TIM_OC4_SetConfig+0x110>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d007      	beq.n	8005a14 <TIM_OC4_SetConfig+0x74>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a2b      	ldr	r2, [pc, #172]	@ (8005ab4 <TIM_OC4_SetConfig+0x114>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d003      	beq.n	8005a14 <TIM_OC4_SetConfig+0x74>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a2a      	ldr	r2, [pc, #168]	@ (8005ab8 <TIM_OC4_SetConfig+0x118>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d10d      	bne.n	8005a30 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	031b      	lsls	r3, r3, #12
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a1f      	ldr	r2, [pc, #124]	@ (8005ab0 <TIM_OC4_SetConfig+0x110>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d013      	beq.n	8005a60 <TIM_OC4_SetConfig+0xc0>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a1e      	ldr	r2, [pc, #120]	@ (8005ab4 <TIM_OC4_SetConfig+0x114>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d00f      	beq.n	8005a60 <TIM_OC4_SetConfig+0xc0>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a1e      	ldr	r2, [pc, #120]	@ (8005abc <TIM_OC4_SetConfig+0x11c>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d00b      	beq.n	8005a60 <TIM_OC4_SetConfig+0xc0>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a1d      	ldr	r2, [pc, #116]	@ (8005ac0 <TIM_OC4_SetConfig+0x120>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d007      	beq.n	8005a60 <TIM_OC4_SetConfig+0xc0>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a1c      	ldr	r2, [pc, #112]	@ (8005ac4 <TIM_OC4_SetConfig+0x124>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d003      	beq.n	8005a60 <TIM_OC4_SetConfig+0xc0>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a17      	ldr	r2, [pc, #92]	@ (8005ab8 <TIM_OC4_SetConfig+0x118>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d113      	bne.n	8005a88 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a66:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005a6e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	019b      	lsls	r3, r3, #6
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	019b      	lsls	r3, r3, #6
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	621a      	str	r2, [r3, #32]
}
 8005aa2:	bf00      	nop
 8005aa4:	371c      	adds	r7, #28
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	40012c00 	.word	0x40012c00
 8005ab4:	40013400 	.word	0x40013400
 8005ab8:	40015000 	.word	0x40015000
 8005abc:	40014000 	.word	0x40014000
 8005ac0:	40014400 	.word	0x40014400
 8005ac4:	40014800 	.word	0x40014800

08005ac8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b087      	sub	sp, #28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005afa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005b0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	041b      	lsls	r3, r3, #16
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a19      	ldr	r2, [pc, #100]	@ (8005b84 <TIM_OC5_SetConfig+0xbc>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d013      	beq.n	8005b4a <TIM_OC5_SetConfig+0x82>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a18      	ldr	r2, [pc, #96]	@ (8005b88 <TIM_OC5_SetConfig+0xc0>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d00f      	beq.n	8005b4a <TIM_OC5_SetConfig+0x82>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a17      	ldr	r2, [pc, #92]	@ (8005b8c <TIM_OC5_SetConfig+0xc4>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d00b      	beq.n	8005b4a <TIM_OC5_SetConfig+0x82>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a16      	ldr	r2, [pc, #88]	@ (8005b90 <TIM_OC5_SetConfig+0xc8>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d007      	beq.n	8005b4a <TIM_OC5_SetConfig+0x82>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a15      	ldr	r2, [pc, #84]	@ (8005b94 <TIM_OC5_SetConfig+0xcc>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d003      	beq.n	8005b4a <TIM_OC5_SetConfig+0x82>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a14      	ldr	r2, [pc, #80]	@ (8005b98 <TIM_OC5_SetConfig+0xd0>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d109      	bne.n	8005b5e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	021b      	lsls	r3, r3, #8
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	621a      	str	r2, [r3, #32]
}
 8005b78:	bf00      	nop
 8005b7a:	371c      	adds	r7, #28
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	40012c00 	.word	0x40012c00
 8005b88:	40013400 	.word	0x40013400
 8005b8c:	40014000 	.word	0x40014000
 8005b90:	40014400 	.word	0x40014400
 8005b94:	40014800 	.word	0x40014800
 8005b98:	40015000 	.word	0x40015000

08005b9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005bca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	021b      	lsls	r3, r3, #8
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005be2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	051b      	lsls	r3, r3, #20
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a1a      	ldr	r2, [pc, #104]	@ (8005c5c <TIM_OC6_SetConfig+0xc0>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d013      	beq.n	8005c20 <TIM_OC6_SetConfig+0x84>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a19      	ldr	r2, [pc, #100]	@ (8005c60 <TIM_OC6_SetConfig+0xc4>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d00f      	beq.n	8005c20 <TIM_OC6_SetConfig+0x84>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a18      	ldr	r2, [pc, #96]	@ (8005c64 <TIM_OC6_SetConfig+0xc8>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d00b      	beq.n	8005c20 <TIM_OC6_SetConfig+0x84>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a17      	ldr	r2, [pc, #92]	@ (8005c68 <TIM_OC6_SetConfig+0xcc>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d007      	beq.n	8005c20 <TIM_OC6_SetConfig+0x84>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a16      	ldr	r2, [pc, #88]	@ (8005c6c <TIM_OC6_SetConfig+0xd0>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d003      	beq.n	8005c20 <TIM_OC6_SetConfig+0x84>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a15      	ldr	r2, [pc, #84]	@ (8005c70 <TIM_OC6_SetConfig+0xd4>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d109      	bne.n	8005c34 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	029b      	lsls	r3, r3, #10
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	621a      	str	r2, [r3, #32]
}
 8005c4e:	bf00      	nop
 8005c50:	371c      	adds	r7, #28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	40012c00 	.word	0x40012c00
 8005c60:	40013400 	.word	0x40013400
 8005c64:	40014000 	.word	0x40014000
 8005c68:	40014400 	.word	0x40014400
 8005c6c:	40014800 	.word	0x40014800
 8005c70:	40015000 	.word	0x40015000

08005c74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	f023 0201 	bic.w	r2, r3, #1
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	011b      	lsls	r3, r3, #4
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f023 030a 	bic.w	r3, r3, #10
 8005cb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	621a      	str	r2, [r3, #32]
}
 8005cc6:	bf00      	nop
 8005cc8:	371c      	adds	r7, #28
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b087      	sub	sp, #28
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	60f8      	str	r0, [r7, #12]
 8005cda:	60b9      	str	r1, [r7, #8]
 8005cdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	f023 0210 	bic.w	r2, r3, #16
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005cfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	031b      	lsls	r3, r3, #12
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005d0e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	011b      	lsls	r3, r3, #4
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	621a      	str	r2, [r3, #32]
}
 8005d26:	bf00      	nop
 8005d28:	371c      	adds	r7, #28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d32:	b480      	push	{r7}
 8005d34:	b085      	sub	sp, #20
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005d48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	f043 0307 	orr.w	r3, r3, #7
 8005d58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	609a      	str	r2, [r3, #8]
}
 8005d60:	bf00      	nop
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
 8005d78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	021a      	lsls	r2, r3, #8
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	609a      	str	r2, [r3, #8]
}
 8005da0:	bf00      	nop
 8005da2:	371c      	adds	r7, #28
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f003 031f 	and.w	r3, r3, #31
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6a1a      	ldr	r2, [r3, #32]
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	43db      	mvns	r3, r3
 8005dce:	401a      	ands	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6a1a      	ldr	r2, [r3, #32]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	f003 031f 	and.w	r3, r3, #31
 8005dde:	6879      	ldr	r1, [r7, #4]
 8005de0:	fa01 f303 	lsl.w	r3, r1, r3
 8005de4:	431a      	orrs	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	621a      	str	r2, [r3, #32]
}
 8005dea:	bf00      	nop
 8005dec:	371c      	adds	r7, #28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
	...

08005df8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d101      	bne.n	8005e10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	e074      	b.n	8005efa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a34      	ldr	r2, [pc, #208]	@ (8005f08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d009      	beq.n	8005e4e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a33      	ldr	r2, [pc, #204]	@ (8005f0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d004      	beq.n	8005e4e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a31      	ldr	r2, [pc, #196]	@ (8005f10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d108      	bne.n	8005e60 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005e54:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a21      	ldr	r2, [pc, #132]	@ (8005f08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d022      	beq.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e90:	d01d      	beq.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a1f      	ldr	r2, [pc, #124]	@ (8005f14 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d018      	beq.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8005f18 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d013      	beq.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a1c      	ldr	r2, [pc, #112]	@ (8005f1c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d00e      	beq.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a15      	ldr	r2, [pc, #84]	@ (8005f0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d009      	beq.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a18      	ldr	r2, [pc, #96]	@ (8005f20 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d004      	beq.n	8005ece <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a11      	ldr	r2, [pc, #68]	@ (8005f10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d10c      	bne.n	8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ed4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	40012c00 	.word	0x40012c00
 8005f0c:	40013400 	.word	0x40013400
 8005f10:	40015000 	.word	0x40015000
 8005f14:	40000400 	.word	0x40000400
 8005f18:	40000800 	.word	0x40000800
 8005f1c:	40000c00 	.word	0x40000c00
 8005f20:	40014000 	.word	0x40014000

08005f24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e042      	b.n	8006048 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d106      	bne.n	8005fda <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f7fb fe27 	bl	8001c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2224      	movs	r2, #36	@ 0x24
 8005fde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 0201 	bic.w	r2, r2, #1
 8005ff0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d002      	beq.n	8006000 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f001 f806 	bl	800700c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 fd07 	bl	8006a14 <UART_SetConfig>
 8006006:	4603      	mov	r3, r0
 8006008:	2b01      	cmp	r3, #1
 800600a:	d101      	bne.n	8006010 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e01b      	b.n	8006048 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800601e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689a      	ldr	r2, [r3, #8]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800602e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f042 0201 	orr.w	r2, r2, #1
 800603e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f001 f885 	bl	8007150 <UART_CheckIdleState>
 8006046:	4603      	mov	r3, r0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3708      	adds	r7, #8
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b08a      	sub	sp, #40	@ 0x28
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	4613      	mov	r3, r2
 800605c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006064:	2b20      	cmp	r3, #32
 8006066:	d167      	bne.n	8006138 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d002      	beq.n	8006074 <HAL_UART_Transmit_DMA+0x24>
 800606e:	88fb      	ldrh	r3, [r7, #6]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e060      	b.n	800613a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	88fa      	ldrh	r2, [r7, #6]
 8006082:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	88fa      	ldrh	r2, [r7, #6]
 800608a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2221      	movs	r2, #33	@ 0x21
 800609a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d028      	beq.n	80060f8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060aa:	4a26      	ldr	r2, [pc, #152]	@ (8006144 <HAL_UART_Transmit_DMA+0xf4>)
 80060ac:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060b2:	4a25      	ldr	r2, [pc, #148]	@ (8006148 <HAL_UART_Transmit_DMA+0xf8>)
 80060b4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060ba:	4a24      	ldr	r2, [pc, #144]	@ (800614c <HAL_UART_Transmit_DMA+0xfc>)
 80060bc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060c2:	2200      	movs	r2, #0
 80060c4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060ce:	4619      	mov	r1, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	3328      	adds	r3, #40	@ 0x28
 80060d6:	461a      	mov	r2, r3
 80060d8:	88fb      	ldrh	r3, [r7, #6]
 80060da:	f7fc fec9 	bl	8002e70 <HAL_DMA_Start_IT>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d009      	beq.n	80060f8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2210      	movs	r2, #16
 80060e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2220      	movs	r2, #32
 80060f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e020      	b.n	800613a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2240      	movs	r2, #64	@ 0x40
 80060fe:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	3308      	adds	r3, #8
 8006106:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	e853 3f00 	ldrex	r3, [r3]
 800610e:	613b      	str	r3, [r7, #16]
   return(result);
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006116:	627b      	str	r3, [r7, #36]	@ 0x24
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	3308      	adds	r3, #8
 800611e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006120:	623a      	str	r2, [r7, #32]
 8006122:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006124:	69f9      	ldr	r1, [r7, #28]
 8006126:	6a3a      	ldr	r2, [r7, #32]
 8006128:	e841 2300 	strex	r3, r2, [r1]
 800612c:	61bb      	str	r3, [r7, #24]
   return(result);
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1e5      	bne.n	8006100 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006134:	2300      	movs	r3, #0
 8006136:	e000      	b.n	800613a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006138:	2302      	movs	r3, #2
  }
}
 800613a:	4618      	mov	r0, r3
 800613c:	3728      	adds	r7, #40	@ 0x28
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	0800761b 	.word	0x0800761b
 8006148:	080076b5 	.word	0x080076b5
 800614c:	0800783b 	.word	0x0800783b

08006150 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b08a      	sub	sp, #40	@ 0x28
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	4613      	mov	r3, r2
 800615c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006164:	2b20      	cmp	r3, #32
 8006166:	d137      	bne.n	80061d8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d002      	beq.n	8006174 <HAL_UART_Receive_DMA+0x24>
 800616e:	88fb      	ldrh	r3, [r7, #6]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e030      	b.n	80061da <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a18      	ldr	r2, [pc, #96]	@ (80061e4 <HAL_UART_Receive_DMA+0x94>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d01f      	beq.n	80061c8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d018      	beq.n	80061c8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	e853 3f00 	ldrex	r3, [r3]
 80061a2:	613b      	str	r3, [r7, #16]
   return(result);
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80061aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	461a      	mov	r2, r3
 80061b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b4:	623b      	str	r3, [r7, #32]
 80061b6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b8:	69f9      	ldr	r1, [r7, #28]
 80061ba:	6a3a      	ldr	r2, [r7, #32]
 80061bc:	e841 2300 	strex	r3, r2, [r1]
 80061c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1e6      	bne.n	8006196 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80061c8:	88fb      	ldrh	r3, [r7, #6]
 80061ca:	461a      	mov	r2, r3
 80061cc:	68b9      	ldr	r1, [r7, #8]
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f001 f8d6 	bl	8007380 <UART_Start_Receive_DMA>
 80061d4:	4603      	mov	r3, r0
 80061d6:	e000      	b.n	80061da <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80061d8:	2302      	movs	r3, #2
  }
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3728      	adds	r7, #40	@ 0x28
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	40008000 	.word	0x40008000

080061e8 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b090      	sub	sp, #64	@ 0x40
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80061fe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800620a:	2b80      	cmp	r3, #128	@ 0x80
 800620c:	d139      	bne.n	8006282 <HAL_UART_DMAStop+0x9a>
 800620e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006210:	2b21      	cmp	r3, #33	@ 0x21
 8006212:	d136      	bne.n	8006282 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	3308      	adds	r3, #8
 800621a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621c:	6a3b      	ldr	r3, [r7, #32]
 800621e:	e853 3f00 	ldrex	r3, [r3]
 8006222:	61fb      	str	r3, [r7, #28]
   return(result);
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800622a:	637b      	str	r3, [r7, #52]	@ 0x34
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	3308      	adds	r3, #8
 8006232:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006234:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006236:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006238:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800623a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800623c:	e841 2300 	strex	r3, r2, [r1]
 8006240:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1e5      	bne.n	8006214 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800624c:	2b00      	cmp	r3, #0
 800624e:	d015      	beq.n	800627c <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006254:	4618      	mov	r0, r3
 8006256:	f7fc fe86 	bl	8002f66 <HAL_DMA_Abort>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00d      	beq.n	800627c <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006264:	4618      	mov	r0, r3
 8006266:	f7fc ffed 	bl	8003244 <HAL_DMA_GetError>
 800626a:	4603      	mov	r3, r0
 800626c:	2b20      	cmp	r3, #32
 800626e:	d105      	bne.n	800627c <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2210      	movs	r2, #16
 8006274:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e047      	b.n	800630c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f001 f925 	bl	80074cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800628c:	2b40      	cmp	r3, #64	@ 0x40
 800628e:	d13c      	bne.n	800630a <HAL_UART_DMAStop+0x122>
 8006290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006292:	2b22      	cmp	r3, #34	@ 0x22
 8006294:	d139      	bne.n	800630a <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	3308      	adds	r3, #8
 800629c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	e853 3f00 	ldrex	r3, [r3]
 80062a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	3308      	adds	r3, #8
 80062b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062b6:	61ba      	str	r2, [r7, #24]
 80062b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ba:	6979      	ldr	r1, [r7, #20]
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	e841 2300 	strex	r3, r2, [r1]
 80062c2:	613b      	str	r3, [r7, #16]
   return(result);
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1e5      	bne.n	8006296 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d017      	beq.n	8006304 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062da:	4618      	mov	r0, r3
 80062dc:	f7fc fe43 	bl	8002f66 <HAL_DMA_Abort>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00e      	beq.n	8006304 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7fc ffa9 	bl	8003244 <HAL_DMA_GetError>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b20      	cmp	r3, #32
 80062f6:	d105      	bne.n	8006304 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2210      	movs	r2, #16
 80062fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e003      	b.n	800630c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f001 f922 	bl	800754e <UART_EndRxTransfer>
  }

  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3740      	adds	r7, #64	@ 0x40
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b0ba      	sub	sp, #232	@ 0xe8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800633a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800633e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006342:	4013      	ands	r3, r2
 8006344:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006348:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800634c:	2b00      	cmp	r3, #0
 800634e:	d11b      	bne.n	8006388 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006354:	f003 0320 	and.w	r3, r3, #32
 8006358:	2b00      	cmp	r3, #0
 800635a:	d015      	beq.n	8006388 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800635c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006360:	f003 0320 	and.w	r3, r3, #32
 8006364:	2b00      	cmp	r3, #0
 8006366:	d105      	bne.n	8006374 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006368:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800636c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d009      	beq.n	8006388 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 8300 	beq.w	800697e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	4798      	blx	r3
      }
      return;
 8006386:	e2fa      	b.n	800697e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006388:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800638c:	2b00      	cmp	r3, #0
 800638e:	f000 8123 	beq.w	80065d8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006392:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006396:	4b8d      	ldr	r3, [pc, #564]	@ (80065cc <HAL_UART_IRQHandler+0x2b8>)
 8006398:	4013      	ands	r3, r2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d106      	bne.n	80063ac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800639e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80063a2:	4b8b      	ldr	r3, [pc, #556]	@ (80065d0 <HAL_UART_IRQHandler+0x2bc>)
 80063a4:	4013      	ands	r3, r2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f000 8116 	beq.w	80065d8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063b0:	f003 0301 	and.w	r3, r3, #1
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d011      	beq.n	80063dc <HAL_UART_IRQHandler+0xc8>
 80063b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00b      	beq.n	80063dc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2201      	movs	r2, #1
 80063ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063d2:	f043 0201 	orr.w	r2, r3, #1
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063e0:	f003 0302 	and.w	r3, r3, #2
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d011      	beq.n	800640c <HAL_UART_IRQHandler+0xf8>
 80063e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00b      	beq.n	800640c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2202      	movs	r2, #2
 80063fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006402:	f043 0204 	orr.w	r2, r3, #4
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800640c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006410:	f003 0304 	and.w	r3, r3, #4
 8006414:	2b00      	cmp	r3, #0
 8006416:	d011      	beq.n	800643c <HAL_UART_IRQHandler+0x128>
 8006418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800641c:	f003 0301 	and.w	r3, r3, #1
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00b      	beq.n	800643c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2204      	movs	r2, #4
 800642a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006432:	f043 0202 	orr.w	r2, r3, #2
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800643c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006440:	f003 0308 	and.w	r3, r3, #8
 8006444:	2b00      	cmp	r3, #0
 8006446:	d017      	beq.n	8006478 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800644c:	f003 0320 	and.w	r3, r3, #32
 8006450:	2b00      	cmp	r3, #0
 8006452:	d105      	bne.n	8006460 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006454:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006458:	4b5c      	ldr	r3, [pc, #368]	@ (80065cc <HAL_UART_IRQHandler+0x2b8>)
 800645a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00b      	beq.n	8006478 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2208      	movs	r2, #8
 8006466:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800646e:	f043 0208 	orr.w	r2, r3, #8
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800647c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006480:	2b00      	cmp	r3, #0
 8006482:	d012      	beq.n	80064aa <HAL_UART_IRQHandler+0x196>
 8006484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006488:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00c      	beq.n	80064aa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006498:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064a0:	f043 0220 	orr.w	r2, r3, #32
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f000 8266 	beq.w	8006982 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80064b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064ba:	f003 0320 	and.w	r3, r3, #32
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d013      	beq.n	80064ea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80064c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064c6:	f003 0320 	and.w	r3, r3, #32
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d105      	bne.n	80064da <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80064ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d007      	beq.n	80064ea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064fe:	2b40      	cmp	r3, #64	@ 0x40
 8006500:	d005      	beq.n	800650e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006502:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006506:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800650a:	2b00      	cmp	r3, #0
 800650c:	d054      	beq.n	80065b8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f001 f81d 	bl	800754e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800651e:	2b40      	cmp	r3, #64	@ 0x40
 8006520:	d146      	bne.n	80065b0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	3308      	adds	r3, #8
 8006528:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006530:	e853 3f00 	ldrex	r3, [r3]
 8006534:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006538:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800653c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006540:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	3308      	adds	r3, #8
 800654a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800654e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006552:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006556:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800655a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800655e:	e841 2300 	strex	r3, r2, [r1]
 8006562:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006566:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1d9      	bne.n	8006522 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006574:	2b00      	cmp	r3, #0
 8006576:	d017      	beq.n	80065a8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800657e:	4a15      	ldr	r2, [pc, #84]	@ (80065d4 <HAL_UART_IRQHandler+0x2c0>)
 8006580:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006588:	4618      	mov	r0, r3
 800658a:	f7fc fd45 	bl	8003018 <HAL_DMA_Abort_IT>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d019      	beq.n	80065c8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800659a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80065a2:	4610      	mov	r0, r2
 80065a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a6:	e00f      	b.n	80065c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fa1d 	bl	80069e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ae:	e00b      	b.n	80065c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fa19 	bl	80069e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065b6:	e007      	b.n	80065c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fa15 	bl	80069e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80065c6:	e1dc      	b.n	8006982 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065c8:	bf00      	nop
    return;
 80065ca:	e1da      	b.n	8006982 <HAL_UART_IRQHandler+0x66e>
 80065cc:	10000001 	.word	0x10000001
 80065d0:	04000120 	.word	0x04000120
 80065d4:	080078bb 	.word	0x080078bb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065dc:	2b01      	cmp	r3, #1
 80065de:	f040 8170 	bne.w	80068c2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80065e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065e6:	f003 0310 	and.w	r3, r3, #16
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f000 8169 	beq.w	80068c2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80065f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065f4:	f003 0310 	and.w	r3, r3, #16
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 8162 	beq.w	80068c2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2210      	movs	r2, #16
 8006604:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006610:	2b40      	cmp	r3, #64	@ 0x40
 8006612:	f040 80d8 	bne.w	80067c6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006624:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 80af 	beq.w	800678c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006634:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006638:	429a      	cmp	r2, r3
 800663a:	f080 80a7 	bcs.w	800678c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006644:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0320 	and.w	r3, r3, #32
 8006656:	2b00      	cmp	r3, #0
 8006658:	f040 8087 	bne.w	800676a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006664:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006668:	e853 3f00 	ldrex	r3, [r3]
 800666c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006670:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006674:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006678:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	461a      	mov	r2, r3
 8006682:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006686:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800668a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006692:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006696:	e841 2300 	strex	r3, r2, [r1]
 800669a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800669e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1da      	bne.n	800665c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	3308      	adds	r3, #8
 80066ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80066b0:	e853 3f00 	ldrex	r3, [r3]
 80066b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80066b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80066b8:	f023 0301 	bic.w	r3, r3, #1
 80066bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3308      	adds	r3, #8
 80066c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80066ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80066ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80066d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80066d6:	e841 2300 	strex	r3, r2, [r1]
 80066da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80066dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1e1      	bne.n	80066a6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	3308      	adds	r3, #8
 80066e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066ec:	e853 3f00 	ldrex	r3, [r3]
 80066f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80066f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	3308      	adds	r3, #8
 8006702:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006706:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006708:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800670c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800670e:	e841 2300 	strex	r3, r2, [r1]
 8006712:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006714:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1e3      	bne.n	80066e2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2220      	movs	r2, #32
 800671e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006730:	e853 3f00 	ldrex	r3, [r3]
 8006734:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006736:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006738:	f023 0310 	bic.w	r3, r3, #16
 800673c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	461a      	mov	r2, r3
 8006746:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800674a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800674c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006750:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006752:	e841 2300 	strex	r3, r2, [r1]
 8006756:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006758:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1e4      	bne.n	8006728 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006764:	4618      	mov	r0, r3
 8006766:	f7fc fbfe 	bl	8002f66 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2202      	movs	r2, #2
 800676e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800677c:	b29b      	uxth	r3, r3
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	b29b      	uxth	r3, r3
 8006782:	4619      	mov	r1, r3
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f939 	bl	80069fc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800678a:	e0fc      	b.n	8006986 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006792:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006796:	429a      	cmp	r2, r3
 8006798:	f040 80f5 	bne.w	8006986 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0320 	and.w	r3, r3, #32
 80067aa:	2b20      	cmp	r3, #32
 80067ac:	f040 80eb 	bne.w	8006986 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2202      	movs	r2, #2
 80067b4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80067bc:	4619      	mov	r1, r3
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f91c 	bl	80069fc <HAL_UARTEx_RxEventCallback>
      return;
 80067c4:	e0df      	b.n	8006986 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f000 80d1 	beq.w	800698a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80067e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 80cc 	beq.w	800698a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067fa:	e853 3f00 	ldrex	r3, [r3]
 80067fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006802:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006806:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	461a      	mov	r2, r3
 8006810:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006814:	647b      	str	r3, [r7, #68]	@ 0x44
 8006816:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006818:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800681a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800681c:	e841 2300 	strex	r3, r2, [r1]
 8006820:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1e4      	bne.n	80067f2 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	3308      	adds	r3, #8
 800682e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006832:	e853 3f00 	ldrex	r3, [r3]
 8006836:	623b      	str	r3, [r7, #32]
   return(result);
 8006838:	6a3b      	ldr	r3, [r7, #32]
 800683a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800683e:	f023 0301 	bic.w	r3, r3, #1
 8006842:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	3308      	adds	r3, #8
 800684c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006850:	633a      	str	r2, [r7, #48]	@ 0x30
 8006852:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006854:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006856:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006858:	e841 2300 	strex	r3, r2, [r1]
 800685c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800685e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1e1      	bne.n	8006828 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2220      	movs	r2, #32
 8006868:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	e853 3f00 	ldrex	r3, [r3]
 8006884:	60fb      	str	r3, [r7, #12]
   return(result);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f023 0310 	bic.w	r3, r3, #16
 800688c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	461a      	mov	r2, r3
 8006896:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800689a:	61fb      	str	r3, [r7, #28]
 800689c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689e:	69b9      	ldr	r1, [r7, #24]
 80068a0:	69fa      	ldr	r2, [r7, #28]
 80068a2:	e841 2300 	strex	r3, r2, [r1]
 80068a6:	617b      	str	r3, [r7, #20]
   return(result);
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1e4      	bne.n	8006878 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2202      	movs	r2, #2
 80068b2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80068b8:	4619      	mov	r1, r3
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f89e 	bl	80069fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068c0:	e063      	b.n	800698a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80068c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00e      	beq.n	80068ec <HAL_UART_IRQHandler+0x5d8>
 80068ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d008      	beq.n	80068ec <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80068e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f001 f825 	bl	8007934 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068ea:	e051      	b.n	8006990 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80068ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d014      	beq.n	8006922 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80068f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006900:	2b00      	cmp	r3, #0
 8006902:	d105      	bne.n	8006910 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006908:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800690c:	2b00      	cmp	r3, #0
 800690e:	d008      	beq.n	8006922 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006914:	2b00      	cmp	r3, #0
 8006916:	d03a      	beq.n	800698e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	4798      	blx	r3
    }
    return;
 8006920:	e035      	b.n	800698e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800692a:	2b00      	cmp	r3, #0
 800692c:	d009      	beq.n	8006942 <HAL_UART_IRQHandler+0x62e>
 800692e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 ffcf 	bl	80078de <UART_EndTransmit_IT>
    return;
 8006940:	e026      	b.n	8006990 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006946:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d009      	beq.n	8006962 <HAL_UART_IRQHandler+0x64e>
 800694e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006952:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d003      	beq.n	8006962 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fffe 	bl	800795c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006960:	e016      	b.n	8006990 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006966:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d010      	beq.n	8006990 <HAL_UART_IRQHandler+0x67c>
 800696e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006972:	2b00      	cmp	r3, #0
 8006974:	da0c      	bge.n	8006990 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 ffe6 	bl	8007948 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800697c:	e008      	b.n	8006990 <HAL_UART_IRQHandler+0x67c>
      return;
 800697e:	bf00      	nop
 8006980:	e006      	b.n	8006990 <HAL_UART_IRQHandler+0x67c>
    return;
 8006982:	bf00      	nop
 8006984:	e004      	b.n	8006990 <HAL_UART_IRQHandler+0x67c>
      return;
 8006986:	bf00      	nop
 8006988:	e002      	b.n	8006990 <HAL_UART_IRQHandler+0x67c>
      return;
 800698a:	bf00      	nop
 800698c:	e000      	b.n	8006990 <HAL_UART_IRQHandler+0x67c>
    return;
 800698e:	bf00      	nop
  }
}
 8006990:	37e8      	adds	r7, #232	@ 0xe8
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop

08006998 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80069f0:	bf00      	nop
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	460b      	mov	r3, r1
 8006a06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a18:	b08c      	sub	sp, #48	@ 0x30
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	689a      	ldr	r2, [r3, #8]
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	431a      	orrs	r2, r3
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	695b      	ldr	r3, [r3, #20]
 8006a32:	431a      	orrs	r2, r3
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	69db      	ldr	r3, [r3, #28]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	4baa      	ldr	r3, [pc, #680]	@ (8006cec <UART_SetConfig+0x2d8>)
 8006a44:	4013      	ands	r3, r2
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	6812      	ldr	r2, [r2, #0]
 8006a4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a4c:	430b      	orrs	r3, r1
 8006a4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	68da      	ldr	r2, [r3, #12]
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	430a      	orrs	r2, r1
 8006a64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a9f      	ldr	r2, [pc, #636]	@ (8006cf0 <UART_SetConfig+0x2dc>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d004      	beq.n	8006a80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006a8a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	6812      	ldr	r2, [r2, #0]
 8006a92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a94:	430b      	orrs	r3, r1
 8006a96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a9e:	f023 010f 	bic.w	r1, r3, #15
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	430a      	orrs	r2, r1
 8006aac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a90      	ldr	r2, [pc, #576]	@ (8006cf4 <UART_SetConfig+0x2e0>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d125      	bne.n	8006b04 <UART_SetConfig+0xf0>
 8006ab8:	4b8f      	ldr	r3, [pc, #572]	@ (8006cf8 <UART_SetConfig+0x2e4>)
 8006aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006abe:	f003 0303 	and.w	r3, r3, #3
 8006ac2:	2b03      	cmp	r3, #3
 8006ac4:	d81a      	bhi.n	8006afc <UART_SetConfig+0xe8>
 8006ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8006acc <UART_SetConfig+0xb8>)
 8006ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006acc:	08006add 	.word	0x08006add
 8006ad0:	08006aed 	.word	0x08006aed
 8006ad4:	08006ae5 	.word	0x08006ae5
 8006ad8:	08006af5 	.word	0x08006af5
 8006adc:	2301      	movs	r3, #1
 8006ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ae2:	e116      	b.n	8006d12 <UART_SetConfig+0x2fe>
 8006ae4:	2302      	movs	r3, #2
 8006ae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aea:	e112      	b.n	8006d12 <UART_SetConfig+0x2fe>
 8006aec:	2304      	movs	r3, #4
 8006aee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006af2:	e10e      	b.n	8006d12 <UART_SetConfig+0x2fe>
 8006af4:	2308      	movs	r3, #8
 8006af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006afa:	e10a      	b.n	8006d12 <UART_SetConfig+0x2fe>
 8006afc:	2310      	movs	r3, #16
 8006afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b02:	e106      	b.n	8006d12 <UART_SetConfig+0x2fe>
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a7c      	ldr	r2, [pc, #496]	@ (8006cfc <UART_SetConfig+0x2e8>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d138      	bne.n	8006b80 <UART_SetConfig+0x16c>
 8006b0e:	4b7a      	ldr	r3, [pc, #488]	@ (8006cf8 <UART_SetConfig+0x2e4>)
 8006b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b14:	f003 030c 	and.w	r3, r3, #12
 8006b18:	2b0c      	cmp	r3, #12
 8006b1a:	d82d      	bhi.n	8006b78 <UART_SetConfig+0x164>
 8006b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8006b24 <UART_SetConfig+0x110>)
 8006b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b22:	bf00      	nop
 8006b24:	08006b59 	.word	0x08006b59
 8006b28:	08006b79 	.word	0x08006b79
 8006b2c:	08006b79 	.word	0x08006b79
 8006b30:	08006b79 	.word	0x08006b79
 8006b34:	08006b69 	.word	0x08006b69
 8006b38:	08006b79 	.word	0x08006b79
 8006b3c:	08006b79 	.word	0x08006b79
 8006b40:	08006b79 	.word	0x08006b79
 8006b44:	08006b61 	.word	0x08006b61
 8006b48:	08006b79 	.word	0x08006b79
 8006b4c:	08006b79 	.word	0x08006b79
 8006b50:	08006b79 	.word	0x08006b79
 8006b54:	08006b71 	.word	0x08006b71
 8006b58:	2300      	movs	r3, #0
 8006b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b5e:	e0d8      	b.n	8006d12 <UART_SetConfig+0x2fe>
 8006b60:	2302      	movs	r3, #2
 8006b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b66:	e0d4      	b.n	8006d12 <UART_SetConfig+0x2fe>
 8006b68:	2304      	movs	r3, #4
 8006b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b6e:	e0d0      	b.n	8006d12 <UART_SetConfig+0x2fe>
 8006b70:	2308      	movs	r3, #8
 8006b72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b76:	e0cc      	b.n	8006d12 <UART_SetConfig+0x2fe>
 8006b78:	2310      	movs	r3, #16
 8006b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b7e:	e0c8      	b.n	8006d12 <UART_SetConfig+0x2fe>
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a5e      	ldr	r2, [pc, #376]	@ (8006d00 <UART_SetConfig+0x2ec>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d125      	bne.n	8006bd6 <UART_SetConfig+0x1c2>
 8006b8a:	4b5b      	ldr	r3, [pc, #364]	@ (8006cf8 <UART_SetConfig+0x2e4>)
 8006b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b90:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006b94:	2b30      	cmp	r3, #48	@ 0x30
 8006b96:	d016      	beq.n	8006bc6 <UART_SetConfig+0x1b2>
 8006b98:	2b30      	cmp	r3, #48	@ 0x30
 8006b9a:	d818      	bhi.n	8006bce <UART_SetConfig+0x1ba>
 8006b9c:	2b20      	cmp	r3, #32
 8006b9e:	d00a      	beq.n	8006bb6 <UART_SetConfig+0x1a2>
 8006ba0:	2b20      	cmp	r3, #32
 8006ba2:	d814      	bhi.n	8006bce <UART_SetConfig+0x1ba>
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d002      	beq.n	8006bae <UART_SetConfig+0x19a>
 8006ba8:	2b10      	cmp	r3, #16
 8006baa:	d008      	beq.n	8006bbe <UART_SetConfig+0x1aa>
 8006bac:	e00f      	b.n	8006bce <UART_SetConfig+0x1ba>
 8006bae:	2300      	movs	r3, #0
 8006bb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bb4:	e0ad      	b.n	8006d12 <UART_SetConfig+0x2fe>
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bbc:	e0a9      	b.n	8006d12 <UART_SetConfig+0x2fe>
 8006bbe:	2304      	movs	r3, #4
 8006bc0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bc4:	e0a5      	b.n	8006d12 <UART_SetConfig+0x2fe>
 8006bc6:	2308      	movs	r3, #8
 8006bc8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bcc:	e0a1      	b.n	8006d12 <UART_SetConfig+0x2fe>
 8006bce:	2310      	movs	r3, #16
 8006bd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bd4:	e09d      	b.n	8006d12 <UART_SetConfig+0x2fe>
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a4a      	ldr	r2, [pc, #296]	@ (8006d04 <UART_SetConfig+0x2f0>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d125      	bne.n	8006c2c <UART_SetConfig+0x218>
 8006be0:	4b45      	ldr	r3, [pc, #276]	@ (8006cf8 <UART_SetConfig+0x2e4>)
 8006be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006be6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006bea:	2bc0      	cmp	r3, #192	@ 0xc0
 8006bec:	d016      	beq.n	8006c1c <UART_SetConfig+0x208>
 8006bee:	2bc0      	cmp	r3, #192	@ 0xc0
 8006bf0:	d818      	bhi.n	8006c24 <UART_SetConfig+0x210>
 8006bf2:	2b80      	cmp	r3, #128	@ 0x80
 8006bf4:	d00a      	beq.n	8006c0c <UART_SetConfig+0x1f8>
 8006bf6:	2b80      	cmp	r3, #128	@ 0x80
 8006bf8:	d814      	bhi.n	8006c24 <UART_SetConfig+0x210>
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d002      	beq.n	8006c04 <UART_SetConfig+0x1f0>
 8006bfe:	2b40      	cmp	r3, #64	@ 0x40
 8006c00:	d008      	beq.n	8006c14 <UART_SetConfig+0x200>
 8006c02:	e00f      	b.n	8006c24 <UART_SetConfig+0x210>
 8006c04:	2300      	movs	r3, #0
 8006c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c0a:	e082      	b.n	8006d12 <UART_SetConfig+0x2fe>
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c12:	e07e      	b.n	8006d12 <UART_SetConfig+0x2fe>
 8006c14:	2304      	movs	r3, #4
 8006c16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c1a:	e07a      	b.n	8006d12 <UART_SetConfig+0x2fe>
 8006c1c:	2308      	movs	r3, #8
 8006c1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c22:	e076      	b.n	8006d12 <UART_SetConfig+0x2fe>
 8006c24:	2310      	movs	r3, #16
 8006c26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c2a:	e072      	b.n	8006d12 <UART_SetConfig+0x2fe>
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a35      	ldr	r2, [pc, #212]	@ (8006d08 <UART_SetConfig+0x2f4>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d12a      	bne.n	8006c8c <UART_SetConfig+0x278>
 8006c36:	4b30      	ldr	r3, [pc, #192]	@ (8006cf8 <UART_SetConfig+0x2e4>)
 8006c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c44:	d01a      	beq.n	8006c7c <UART_SetConfig+0x268>
 8006c46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c4a:	d81b      	bhi.n	8006c84 <UART_SetConfig+0x270>
 8006c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c50:	d00c      	beq.n	8006c6c <UART_SetConfig+0x258>
 8006c52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c56:	d815      	bhi.n	8006c84 <UART_SetConfig+0x270>
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d003      	beq.n	8006c64 <UART_SetConfig+0x250>
 8006c5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c60:	d008      	beq.n	8006c74 <UART_SetConfig+0x260>
 8006c62:	e00f      	b.n	8006c84 <UART_SetConfig+0x270>
 8006c64:	2300      	movs	r3, #0
 8006c66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c6a:	e052      	b.n	8006d12 <UART_SetConfig+0x2fe>
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c72:	e04e      	b.n	8006d12 <UART_SetConfig+0x2fe>
 8006c74:	2304      	movs	r3, #4
 8006c76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c7a:	e04a      	b.n	8006d12 <UART_SetConfig+0x2fe>
 8006c7c:	2308      	movs	r3, #8
 8006c7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c82:	e046      	b.n	8006d12 <UART_SetConfig+0x2fe>
 8006c84:	2310      	movs	r3, #16
 8006c86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c8a:	e042      	b.n	8006d12 <UART_SetConfig+0x2fe>
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a17      	ldr	r2, [pc, #92]	@ (8006cf0 <UART_SetConfig+0x2dc>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d13a      	bne.n	8006d0c <UART_SetConfig+0x2f8>
 8006c96:	4b18      	ldr	r3, [pc, #96]	@ (8006cf8 <UART_SetConfig+0x2e4>)
 8006c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c9c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006ca0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ca4:	d01a      	beq.n	8006cdc <UART_SetConfig+0x2c8>
 8006ca6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006caa:	d81b      	bhi.n	8006ce4 <UART_SetConfig+0x2d0>
 8006cac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cb0:	d00c      	beq.n	8006ccc <UART_SetConfig+0x2b8>
 8006cb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cb6:	d815      	bhi.n	8006ce4 <UART_SetConfig+0x2d0>
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d003      	beq.n	8006cc4 <UART_SetConfig+0x2b0>
 8006cbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cc0:	d008      	beq.n	8006cd4 <UART_SetConfig+0x2c0>
 8006cc2:	e00f      	b.n	8006ce4 <UART_SetConfig+0x2d0>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cca:	e022      	b.n	8006d12 <UART_SetConfig+0x2fe>
 8006ccc:	2302      	movs	r3, #2
 8006cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cd2:	e01e      	b.n	8006d12 <UART_SetConfig+0x2fe>
 8006cd4:	2304      	movs	r3, #4
 8006cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cda:	e01a      	b.n	8006d12 <UART_SetConfig+0x2fe>
 8006cdc:	2308      	movs	r3, #8
 8006cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ce2:	e016      	b.n	8006d12 <UART_SetConfig+0x2fe>
 8006ce4:	2310      	movs	r3, #16
 8006ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cea:	e012      	b.n	8006d12 <UART_SetConfig+0x2fe>
 8006cec:	cfff69f3 	.word	0xcfff69f3
 8006cf0:	40008000 	.word	0x40008000
 8006cf4:	40013800 	.word	0x40013800
 8006cf8:	40021000 	.word	0x40021000
 8006cfc:	40004400 	.word	0x40004400
 8006d00:	40004800 	.word	0x40004800
 8006d04:	40004c00 	.word	0x40004c00
 8006d08:	40005000 	.word	0x40005000
 8006d0c:	2310      	movs	r3, #16
 8006d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4aae      	ldr	r2, [pc, #696]	@ (8006fd0 <UART_SetConfig+0x5bc>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	f040 8097 	bne.w	8006e4c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d1e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d22:	2b08      	cmp	r3, #8
 8006d24:	d823      	bhi.n	8006d6e <UART_SetConfig+0x35a>
 8006d26:	a201      	add	r2, pc, #4	@ (adr r2, 8006d2c <UART_SetConfig+0x318>)
 8006d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d2c:	08006d51 	.word	0x08006d51
 8006d30:	08006d6f 	.word	0x08006d6f
 8006d34:	08006d59 	.word	0x08006d59
 8006d38:	08006d6f 	.word	0x08006d6f
 8006d3c:	08006d5f 	.word	0x08006d5f
 8006d40:	08006d6f 	.word	0x08006d6f
 8006d44:	08006d6f 	.word	0x08006d6f
 8006d48:	08006d6f 	.word	0x08006d6f
 8006d4c:	08006d67 	.word	0x08006d67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d50:	f7fd fa6a 	bl	8004228 <HAL_RCC_GetPCLK1Freq>
 8006d54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d56:	e010      	b.n	8006d7a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d58:	4b9e      	ldr	r3, [pc, #632]	@ (8006fd4 <UART_SetConfig+0x5c0>)
 8006d5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d5c:	e00d      	b.n	8006d7a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d5e:	f7fd f9f5 	bl	800414c <HAL_RCC_GetSysClockFreq>
 8006d62:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d64:	e009      	b.n	8006d7a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d6c:	e005      	b.n	8006d7a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 8130 	beq.w	8006fe2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d86:	4a94      	ldr	r2, [pc, #592]	@ (8006fd8 <UART_SetConfig+0x5c4>)
 8006d88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d90:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d94:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	685a      	ldr	r2, [r3, #4]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	005b      	lsls	r3, r3, #1
 8006d9e:	4413      	add	r3, r2
 8006da0:	69ba      	ldr	r2, [r7, #24]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d305      	bcc.n	8006db2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006dac:	69ba      	ldr	r2, [r7, #24]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d903      	bls.n	8006dba <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006db8:	e113      	b.n	8006fe2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	60bb      	str	r3, [r7, #8]
 8006dc0:	60fa      	str	r2, [r7, #12]
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc6:	4a84      	ldr	r2, [pc, #528]	@ (8006fd8 <UART_SetConfig+0x5c4>)
 8006dc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	2200      	movs	r2, #0
 8006dd0:	603b      	str	r3, [r7, #0]
 8006dd2:	607a      	str	r2, [r7, #4]
 8006dd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dd8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ddc:	f7f9 fec6 	bl	8000b6c <__aeabi_uldivmod>
 8006de0:	4602      	mov	r2, r0
 8006de2:	460b      	mov	r3, r1
 8006de4:	4610      	mov	r0, r2
 8006de6:	4619      	mov	r1, r3
 8006de8:	f04f 0200 	mov.w	r2, #0
 8006dec:	f04f 0300 	mov.w	r3, #0
 8006df0:	020b      	lsls	r3, r1, #8
 8006df2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006df6:	0202      	lsls	r2, r0, #8
 8006df8:	6979      	ldr	r1, [r7, #20]
 8006dfa:	6849      	ldr	r1, [r1, #4]
 8006dfc:	0849      	lsrs	r1, r1, #1
 8006dfe:	2000      	movs	r0, #0
 8006e00:	460c      	mov	r4, r1
 8006e02:	4605      	mov	r5, r0
 8006e04:	eb12 0804 	adds.w	r8, r2, r4
 8006e08:	eb43 0905 	adc.w	r9, r3, r5
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	469a      	mov	sl, r3
 8006e14:	4693      	mov	fp, r2
 8006e16:	4652      	mov	r2, sl
 8006e18:	465b      	mov	r3, fp
 8006e1a:	4640      	mov	r0, r8
 8006e1c:	4649      	mov	r1, r9
 8006e1e:	f7f9 fea5 	bl	8000b6c <__aeabi_uldivmod>
 8006e22:	4602      	mov	r2, r0
 8006e24:	460b      	mov	r3, r1
 8006e26:	4613      	mov	r3, r2
 8006e28:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e2a:	6a3b      	ldr	r3, [r7, #32]
 8006e2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e30:	d308      	bcc.n	8006e44 <UART_SetConfig+0x430>
 8006e32:	6a3b      	ldr	r3, [r7, #32]
 8006e34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e38:	d204      	bcs.n	8006e44 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	6a3a      	ldr	r2, [r7, #32]
 8006e40:	60da      	str	r2, [r3, #12]
 8006e42:	e0ce      	b.n	8006fe2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006e4a:	e0ca      	b.n	8006fe2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	69db      	ldr	r3, [r3, #28]
 8006e50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e54:	d166      	bne.n	8006f24 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006e56:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006e5a:	2b08      	cmp	r3, #8
 8006e5c:	d827      	bhi.n	8006eae <UART_SetConfig+0x49a>
 8006e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e64 <UART_SetConfig+0x450>)
 8006e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e64:	08006e89 	.word	0x08006e89
 8006e68:	08006e91 	.word	0x08006e91
 8006e6c:	08006e99 	.word	0x08006e99
 8006e70:	08006eaf 	.word	0x08006eaf
 8006e74:	08006e9f 	.word	0x08006e9f
 8006e78:	08006eaf 	.word	0x08006eaf
 8006e7c:	08006eaf 	.word	0x08006eaf
 8006e80:	08006eaf 	.word	0x08006eaf
 8006e84:	08006ea7 	.word	0x08006ea7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e88:	f7fd f9ce 	bl	8004228 <HAL_RCC_GetPCLK1Freq>
 8006e8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e8e:	e014      	b.n	8006eba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e90:	f7fd f9e0 	bl	8004254 <HAL_RCC_GetPCLK2Freq>
 8006e94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e96:	e010      	b.n	8006eba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e98:	4b4e      	ldr	r3, [pc, #312]	@ (8006fd4 <UART_SetConfig+0x5c0>)
 8006e9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e9c:	e00d      	b.n	8006eba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e9e:	f7fd f955 	bl	800414c <HAL_RCC_GetSysClockFreq>
 8006ea2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ea4:	e009      	b.n	8006eba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ea6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006eaa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006eac:	e005      	b.n	8006eba <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006eb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f000 8090 	beq.w	8006fe2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec6:	4a44      	ldr	r2, [pc, #272]	@ (8006fd8 <UART_SetConfig+0x5c4>)
 8006ec8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ed4:	005a      	lsls	r2, r3, #1
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	085b      	lsrs	r3, r3, #1
 8006edc:	441a      	add	r2, r3
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ee8:	6a3b      	ldr	r3, [r7, #32]
 8006eea:	2b0f      	cmp	r3, #15
 8006eec:	d916      	bls.n	8006f1c <UART_SetConfig+0x508>
 8006eee:	6a3b      	ldr	r3, [r7, #32]
 8006ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ef4:	d212      	bcs.n	8006f1c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ef6:	6a3b      	ldr	r3, [r7, #32]
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	f023 030f 	bic.w	r3, r3, #15
 8006efe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f00:	6a3b      	ldr	r3, [r7, #32]
 8006f02:	085b      	lsrs	r3, r3, #1
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	f003 0307 	and.w	r3, r3, #7
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	8bfb      	ldrh	r3, [r7, #30]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	8bfa      	ldrh	r2, [r7, #30]
 8006f18:	60da      	str	r2, [r3, #12]
 8006f1a:	e062      	b.n	8006fe2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006f22:	e05e      	b.n	8006fe2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f24:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006f28:	2b08      	cmp	r3, #8
 8006f2a:	d828      	bhi.n	8006f7e <UART_SetConfig+0x56a>
 8006f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f34 <UART_SetConfig+0x520>)
 8006f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f32:	bf00      	nop
 8006f34:	08006f59 	.word	0x08006f59
 8006f38:	08006f61 	.word	0x08006f61
 8006f3c:	08006f69 	.word	0x08006f69
 8006f40:	08006f7f 	.word	0x08006f7f
 8006f44:	08006f6f 	.word	0x08006f6f
 8006f48:	08006f7f 	.word	0x08006f7f
 8006f4c:	08006f7f 	.word	0x08006f7f
 8006f50:	08006f7f 	.word	0x08006f7f
 8006f54:	08006f77 	.word	0x08006f77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f58:	f7fd f966 	bl	8004228 <HAL_RCC_GetPCLK1Freq>
 8006f5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f5e:	e014      	b.n	8006f8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f60:	f7fd f978 	bl	8004254 <HAL_RCC_GetPCLK2Freq>
 8006f64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f66:	e010      	b.n	8006f8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f68:	4b1a      	ldr	r3, [pc, #104]	@ (8006fd4 <UART_SetConfig+0x5c0>)
 8006f6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f6c:	e00d      	b.n	8006f8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f6e:	f7fd f8ed 	bl	800414c <HAL_RCC_GetSysClockFreq>
 8006f72:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f74:	e009      	b.n	8006f8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f7c:	e005      	b.n	8006f8a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006f88:	bf00      	nop
    }

    if (pclk != 0U)
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d028      	beq.n	8006fe2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f94:	4a10      	ldr	r2, [pc, #64]	@ (8006fd8 <UART_SetConfig+0x5c4>)
 8006f96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	085b      	lsrs	r3, r3, #1
 8006fa8:	441a      	add	r2, r3
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	2b0f      	cmp	r3, #15
 8006fb8:	d910      	bls.n	8006fdc <UART_SetConfig+0x5c8>
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fc0:	d20c      	bcs.n	8006fdc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fc2:	6a3b      	ldr	r3, [r7, #32]
 8006fc4:	b29a      	uxth	r2, r3
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	60da      	str	r2, [r3, #12]
 8006fcc:	e009      	b.n	8006fe2 <UART_SetConfig+0x5ce>
 8006fce:	bf00      	nop
 8006fd0:	40008000 	.word	0x40008000
 8006fd4:	00f42400 	.word	0x00f42400
 8006fd8:	08018c5c 	.word	0x08018c5c
      }
      else
      {
        ret = HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	2201      	movs	r2, #1
 8006fee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006ffe:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007002:	4618      	mov	r0, r3
 8007004:	3730      	adds	r7, #48	@ 0x30
 8007006:	46bd      	mov	sp, r7
 8007008:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800700c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007018:	f003 0308 	and.w	r3, r3, #8
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00a      	beq.n	8007036 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	430a      	orrs	r2, r1
 8007034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00a      	beq.n	8007058 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	430a      	orrs	r2, r1
 8007056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800705c:	f003 0302 	and.w	r3, r3, #2
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00a      	beq.n	800707a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	430a      	orrs	r2, r1
 8007078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800707e:	f003 0304 	and.w	r3, r3, #4
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00a      	beq.n	800709c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	430a      	orrs	r2, r1
 800709a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a0:	f003 0310 	and.w	r3, r3, #16
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00a      	beq.n	80070be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	430a      	orrs	r2, r1
 80070bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c2:	f003 0320 	and.w	r3, r3, #32
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00a      	beq.n	80070e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	430a      	orrs	r2, r1
 80070de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d01a      	beq.n	8007122 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	430a      	orrs	r2, r1
 8007100:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007106:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800710a:	d10a      	bne.n	8007122 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	430a      	orrs	r2, r1
 8007120:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00a      	beq.n	8007144 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	430a      	orrs	r2, r1
 8007142:	605a      	str	r2, [r3, #4]
  }
}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b098      	sub	sp, #96	@ 0x60
 8007154:	af02      	add	r7, sp, #8
 8007156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007160:	f7fb fcf2 	bl	8002b48 <HAL_GetTick>
 8007164:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0308 	and.w	r3, r3, #8
 8007170:	2b08      	cmp	r3, #8
 8007172:	d12f      	bne.n	80071d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007174:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007178:	9300      	str	r3, [sp, #0]
 800717a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800717c:	2200      	movs	r2, #0
 800717e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f88e 	bl	80072a4 <UART_WaitOnFlagUntilTimeout>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d022      	beq.n	80071d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007196:	e853 3f00 	ldrex	r3, [r3]
 800719a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800719c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800719e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	461a      	mov	r2, r3
 80071aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80071ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80071b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071b4:	e841 2300 	strex	r3, r2, [r1]
 80071b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80071ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1e6      	bne.n	800718e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2220      	movs	r2, #32
 80071c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071d0:	2303      	movs	r3, #3
 80071d2:	e063      	b.n	800729c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 0304 	and.w	r3, r3, #4
 80071de:	2b04      	cmp	r3, #4
 80071e0:	d149      	bne.n	8007276 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80071e6:	9300      	str	r3, [sp, #0]
 80071e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071ea:	2200      	movs	r2, #0
 80071ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f857 	bl	80072a4 <UART_WaitOnFlagUntilTimeout>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d03c      	beq.n	8007276 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007204:	e853 3f00 	ldrex	r3, [r3]
 8007208:	623b      	str	r3, [r7, #32]
   return(result);
 800720a:	6a3b      	ldr	r3, [r7, #32]
 800720c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007210:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	461a      	mov	r2, r3
 8007218:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800721a:	633b      	str	r3, [r7, #48]	@ 0x30
 800721c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007220:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007222:	e841 2300 	strex	r3, r2, [r1]
 8007226:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1e6      	bne.n	80071fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	3308      	adds	r3, #8
 8007234:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	e853 3f00 	ldrex	r3, [r3]
 800723c:	60fb      	str	r3, [r7, #12]
   return(result);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f023 0301 	bic.w	r3, r3, #1
 8007244:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	3308      	adds	r3, #8
 800724c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800724e:	61fa      	str	r2, [r7, #28]
 8007250:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007252:	69b9      	ldr	r1, [r7, #24]
 8007254:	69fa      	ldr	r2, [r7, #28]
 8007256:	e841 2300 	strex	r3, r2, [r1]
 800725a:	617b      	str	r3, [r7, #20]
   return(result);
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1e5      	bne.n	800722e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2220      	movs	r2, #32
 8007266:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e012      	b.n	800729c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2220      	movs	r2, #32
 800727a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2220      	movs	r2, #32
 8007282:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3758      	adds	r7, #88	@ 0x58
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	603b      	str	r3, [r7, #0]
 80072b0:	4613      	mov	r3, r2
 80072b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072b4:	e04f      	b.n	8007356 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072bc:	d04b      	beq.n	8007356 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072be:	f7fb fc43 	bl	8002b48 <HAL_GetTick>
 80072c2:	4602      	mov	r2, r0
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	69ba      	ldr	r2, [r7, #24]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d302      	bcc.n	80072d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d101      	bne.n	80072d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e04e      	b.n	8007376 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0304 	and.w	r3, r3, #4
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d037      	beq.n	8007356 <UART_WaitOnFlagUntilTimeout+0xb2>
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	2b80      	cmp	r3, #128	@ 0x80
 80072ea:	d034      	beq.n	8007356 <UART_WaitOnFlagUntilTimeout+0xb2>
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	2b40      	cmp	r3, #64	@ 0x40
 80072f0:	d031      	beq.n	8007356 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	69db      	ldr	r3, [r3, #28]
 80072f8:	f003 0308 	and.w	r3, r3, #8
 80072fc:	2b08      	cmp	r3, #8
 80072fe:	d110      	bne.n	8007322 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2208      	movs	r2, #8
 8007306:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f000 f920 	bl	800754e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2208      	movs	r2, #8
 8007312:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e029      	b.n	8007376 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	69db      	ldr	r3, [r3, #28]
 8007328:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800732c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007330:	d111      	bne.n	8007356 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800733a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f000 f906 	bl	800754e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2220      	movs	r2, #32
 8007346:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e00f      	b.n	8007376 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	69da      	ldr	r2, [r3, #28]
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	4013      	ands	r3, r2
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	429a      	cmp	r2, r3
 8007364:	bf0c      	ite	eq
 8007366:	2301      	moveq	r3, #1
 8007368:	2300      	movne	r3, #0
 800736a:	b2db      	uxtb	r3, r3
 800736c:	461a      	mov	r2, r3
 800736e:	79fb      	ldrb	r3, [r7, #7]
 8007370:	429a      	cmp	r2, r3
 8007372:	d0a0      	beq.n	80072b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
	...

08007380 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b096      	sub	sp, #88	@ 0x58
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	4613      	mov	r3, r2
 800738c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	88fa      	ldrh	r2, [r7, #6]
 8007398:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2222      	movs	r2, #34	@ 0x22
 80073a8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d02d      	beq.n	8007412 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073bc:	4a40      	ldr	r2, [pc, #256]	@ (80074c0 <UART_Start_Receive_DMA+0x140>)
 80073be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073c6:	4a3f      	ldr	r2, [pc, #252]	@ (80074c4 <UART_Start_Receive_DMA+0x144>)
 80073c8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073d0:	4a3d      	ldr	r2, [pc, #244]	@ (80074c8 <UART_Start_Receive_DMA+0x148>)
 80073d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073da:	2200      	movs	r2, #0
 80073dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	3324      	adds	r3, #36	@ 0x24
 80073ea:	4619      	mov	r1, r3
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073f0:	461a      	mov	r2, r3
 80073f2:	88fb      	ldrh	r3, [r7, #6]
 80073f4:	f7fb fd3c 	bl	8002e70 <HAL_DMA_Start_IT>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d009      	beq.n	8007412 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2210      	movs	r2, #16
 8007402:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2220      	movs	r2, #32
 800740a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e051      	b.n	80074b6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d018      	beq.n	800744c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007422:	e853 3f00 	ldrex	r3, [r3]
 8007426:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800742a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800742e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	461a      	mov	r2, r3
 8007436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007438:	64bb      	str	r3, [r7, #72]	@ 0x48
 800743a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800743e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007440:	e841 2300 	strex	r3, r2, [r1]
 8007444:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007446:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1e6      	bne.n	800741a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	3308      	adds	r3, #8
 8007452:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007456:	e853 3f00 	ldrex	r3, [r3]
 800745a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800745c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745e:	f043 0301 	orr.w	r3, r3, #1
 8007462:	653b      	str	r3, [r7, #80]	@ 0x50
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3308      	adds	r3, #8
 800746a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800746c:	637a      	str	r2, [r7, #52]	@ 0x34
 800746e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007470:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007472:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007474:	e841 2300 	strex	r3, r2, [r1]
 8007478:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800747a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1e5      	bne.n	800744c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	3308      	adds	r3, #8
 8007486:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	e853 3f00 	ldrex	r3, [r3]
 800748e:	613b      	str	r3, [r7, #16]
   return(result);
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007496:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	3308      	adds	r3, #8
 800749e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80074a0:	623a      	str	r2, [r7, #32]
 80074a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a4:	69f9      	ldr	r1, [r7, #28]
 80074a6:	6a3a      	ldr	r2, [r7, #32]
 80074a8:	e841 2300 	strex	r3, r2, [r1]
 80074ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1e5      	bne.n	8007480 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3758      	adds	r7, #88	@ 0x58
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	080076d1 	.word	0x080076d1
 80074c4:	080077fd 	.word	0x080077fd
 80074c8:	0800783b 	.word	0x0800783b

080074cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b08f      	sub	sp, #60	@ 0x3c
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	e853 3f00 	ldrex	r3, [r3]
 80074e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80074e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074f4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074fa:	e841 2300 	strex	r3, r2, [r1]
 80074fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1e6      	bne.n	80074d4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	3308      	adds	r3, #8
 800750c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	e853 3f00 	ldrex	r3, [r3]
 8007514:	60bb      	str	r3, [r7, #8]
   return(result);
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800751c:	633b      	str	r3, [r7, #48]	@ 0x30
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	3308      	adds	r3, #8
 8007524:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007526:	61ba      	str	r2, [r7, #24]
 8007528:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752a:	6979      	ldr	r1, [r7, #20]
 800752c:	69ba      	ldr	r2, [r7, #24]
 800752e:	e841 2300 	strex	r3, r2, [r1]
 8007532:	613b      	str	r3, [r7, #16]
   return(result);
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1e5      	bne.n	8007506 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2220      	movs	r2, #32
 800753e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8007542:	bf00      	nop
 8007544:	373c      	adds	r7, #60	@ 0x3c
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800754e:	b480      	push	{r7}
 8007550:	b095      	sub	sp, #84	@ 0x54
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800755e:	e853 3f00 	ldrex	r3, [r3]
 8007562:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007566:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800756a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	461a      	mov	r2, r3
 8007572:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007574:	643b      	str	r3, [r7, #64]	@ 0x40
 8007576:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007578:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800757a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800757c:	e841 2300 	strex	r3, r2, [r1]
 8007580:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1e6      	bne.n	8007556 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	3308      	adds	r3, #8
 800758e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007590:	6a3b      	ldr	r3, [r7, #32]
 8007592:	e853 3f00 	ldrex	r3, [r3]
 8007596:	61fb      	str	r3, [r7, #28]
   return(result);
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800759e:	f023 0301 	bic.w	r3, r3, #1
 80075a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	3308      	adds	r3, #8
 80075aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80075ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075b4:	e841 2300 	strex	r3, r2, [r1]
 80075b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80075ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1e3      	bne.n	8007588 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d118      	bne.n	80075fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	e853 3f00 	ldrex	r3, [r3]
 80075d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	f023 0310 	bic.w	r3, r3, #16
 80075dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	461a      	mov	r2, r3
 80075e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075e6:	61bb      	str	r3, [r7, #24]
 80075e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ea:	6979      	ldr	r1, [r7, #20]
 80075ec:	69ba      	ldr	r2, [r7, #24]
 80075ee:	e841 2300 	strex	r3, r2, [r1]
 80075f2:	613b      	str	r3, [r7, #16]
   return(result);
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1e6      	bne.n	80075c8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2220      	movs	r2, #32
 80075fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800760e:	bf00      	nop
 8007610:	3754      	adds	r7, #84	@ 0x54
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr

0800761a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b090      	sub	sp, #64	@ 0x40
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007626:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0320 	and.w	r3, r3, #32
 8007632:	2b00      	cmp	r3, #0
 8007634:	d137      	bne.n	80076a6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007638:	2200      	movs	r2, #0
 800763a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800763e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	3308      	adds	r3, #8
 8007644:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007648:	e853 3f00 	ldrex	r3, [r3]
 800764c:	623b      	str	r3, [r7, #32]
   return(result);
 800764e:	6a3b      	ldr	r3, [r7, #32]
 8007650:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007654:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	3308      	adds	r3, #8
 800765c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800765e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007660:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007662:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007664:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007666:	e841 2300 	strex	r3, r2, [r1]
 800766a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800766c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1e5      	bne.n	800763e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	e853 3f00 	ldrex	r3, [r3]
 800767e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007686:	637b      	str	r3, [r7, #52]	@ 0x34
 8007688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	461a      	mov	r2, r3
 800768e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007690:	61fb      	str	r3, [r7, #28]
 8007692:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007694:	69b9      	ldr	r1, [r7, #24]
 8007696:	69fa      	ldr	r2, [r7, #28]
 8007698:	e841 2300 	strex	r3, r2, [r1]
 800769c:	617b      	str	r3, [r7, #20]
   return(result);
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1e6      	bne.n	8007672 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80076a4:	e002      	b.n	80076ac <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80076a6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80076a8:	f7ff f976 	bl	8006998 <HAL_UART_TxCpltCallback>
}
 80076ac:	bf00      	nop
 80076ae:	3740      	adds	r7, #64	@ 0x40
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076c0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f7ff f972 	bl	80069ac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076c8:	bf00      	nop
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b09c      	sub	sp, #112	@ 0x70
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076dc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 0320 	and.w	r3, r3, #32
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d171      	bne.n	80077d0 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80076ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076ee:	2200      	movs	r2, #0
 80076f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076fc:	e853 3f00 	ldrex	r3, [r3]
 8007700:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007702:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007704:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007708:	66bb      	str	r3, [r7, #104]	@ 0x68
 800770a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	461a      	mov	r2, r3
 8007710:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007712:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007714:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007716:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007718:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800771a:	e841 2300 	strex	r3, r2, [r1]
 800771e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007720:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1e6      	bne.n	80076f4 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007726:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	3308      	adds	r3, #8
 800772c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007730:	e853 3f00 	ldrex	r3, [r3]
 8007734:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007738:	f023 0301 	bic.w	r3, r3, #1
 800773c:	667b      	str	r3, [r7, #100]	@ 0x64
 800773e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	3308      	adds	r3, #8
 8007744:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007746:	647a      	str	r2, [r7, #68]	@ 0x44
 8007748:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800774c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800774e:	e841 2300 	strex	r3, r2, [r1]
 8007752:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1e5      	bne.n	8007726 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800775a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	3308      	adds	r3, #8
 8007760:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007764:	e853 3f00 	ldrex	r3, [r3]
 8007768:	623b      	str	r3, [r7, #32]
   return(result);
 800776a:	6a3b      	ldr	r3, [r7, #32]
 800776c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007770:	663b      	str	r3, [r7, #96]	@ 0x60
 8007772:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	3308      	adds	r3, #8
 8007778:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800777a:	633a      	str	r2, [r7, #48]	@ 0x30
 800777c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007780:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007782:	e841 2300 	strex	r3, r2, [r1]
 8007786:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1e5      	bne.n	800775a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800778e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007790:	2220      	movs	r2, #32
 8007792:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007796:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007798:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800779a:	2b01      	cmp	r3, #1
 800779c:	d118      	bne.n	80077d0 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800779e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	e853 3f00 	ldrex	r3, [r3]
 80077aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f023 0310 	bic.w	r3, r3, #16
 80077b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	461a      	mov	r2, r3
 80077ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077bc:	61fb      	str	r3, [r7, #28]
 80077be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c0:	69b9      	ldr	r1, [r7, #24]
 80077c2:	69fa      	ldr	r2, [r7, #28]
 80077c4:	e841 2300 	strex	r3, r2, [r1]
 80077c8:	617b      	str	r3, [r7, #20]
   return(result);
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1e6      	bne.n	800779e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077d2:	2200      	movs	r2, #0
 80077d4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d107      	bne.n	80077ee <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80077e4:	4619      	mov	r1, r3
 80077e6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80077e8:	f7ff f908 	bl	80069fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80077ec:	e002      	b.n	80077f4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80077ee:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80077f0:	f7ff f8e6 	bl	80069c0 <HAL_UART_RxCpltCallback>
}
 80077f4:	bf00      	nop
 80077f6:	3770      	adds	r7, #112	@ 0x70
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007808:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2201      	movs	r2, #1
 800780e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007814:	2b01      	cmp	r3, #1
 8007816:	d109      	bne.n	800782c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800781e:	085b      	lsrs	r3, r3, #1
 8007820:	b29b      	uxth	r3, r3
 8007822:	4619      	mov	r1, r3
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f7ff f8e9 	bl	80069fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800782a:	e002      	b.n	8007832 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f7ff f8d1 	bl	80069d4 <HAL_UART_RxHalfCpltCallback>
}
 8007832:	bf00      	nop
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b086      	sub	sp, #24
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007846:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800784e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007856:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007862:	2b80      	cmp	r3, #128	@ 0x80
 8007864:	d109      	bne.n	800787a <UART_DMAError+0x40>
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	2b21      	cmp	r3, #33	@ 0x21
 800786a:	d106      	bne.n	800787a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	2200      	movs	r2, #0
 8007870:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007874:	6978      	ldr	r0, [r7, #20]
 8007876:	f7ff fe29 	bl	80074cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007884:	2b40      	cmp	r3, #64	@ 0x40
 8007886:	d109      	bne.n	800789c <UART_DMAError+0x62>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2b22      	cmp	r3, #34	@ 0x22
 800788c:	d106      	bne.n	800789c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	2200      	movs	r2, #0
 8007892:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8007896:	6978      	ldr	r0, [r7, #20]
 8007898:	f7ff fe59 	bl	800754e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078a2:	f043 0210 	orr.w	r2, r3, #16
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078ac:	6978      	ldr	r0, [r7, #20]
 80078ae:	f7ff f89b 	bl	80069e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078b2:	bf00      	nop
 80078b4:	3718      	adds	r7, #24
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b084      	sub	sp, #16
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f7ff f889 	bl	80069e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078d6:	bf00      	nop
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b088      	sub	sp, #32
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	e853 3f00 	ldrex	r3, [r3]
 80078f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078fa:	61fb      	str	r3, [r7, #28]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	461a      	mov	r2, r3
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	61bb      	str	r3, [r7, #24]
 8007906:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007908:	6979      	ldr	r1, [r7, #20]
 800790a:	69ba      	ldr	r2, [r7, #24]
 800790c:	e841 2300 	strex	r3, r2, [r1]
 8007910:	613b      	str	r3, [r7, #16]
   return(result);
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1e6      	bne.n	80078e6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2220      	movs	r2, #32
 800791c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7ff f836 	bl	8006998 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800792c:	bf00      	nop
 800792e:	3720      	adds	r7, #32
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800793c:	bf00      	nop
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007950:	bf00      	nop
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800797e:	2b01      	cmp	r3, #1
 8007980:	d101      	bne.n	8007986 <HAL_UARTEx_DisableFifoMode+0x16>
 8007982:	2302      	movs	r3, #2
 8007984:	e027      	b.n	80079d6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2224      	movs	r2, #36	@ 0x24
 8007992:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f022 0201 	bic.w	r2, r2, #1
 80079ac:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80079b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2220      	movs	r2, #32
 80079c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3714      	adds	r7, #20
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b084      	sub	sp, #16
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
 80079ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d101      	bne.n	80079fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80079f6:	2302      	movs	r3, #2
 80079f8:	e02d      	b.n	8007a56 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2224      	movs	r2, #36	@ 0x24
 8007a06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f022 0201 	bic.w	r2, r2, #1
 8007a20:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	683a      	ldr	r2, [r7, #0]
 8007a32:	430a      	orrs	r2, r1
 8007a34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f850 	bl	8007adc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2220      	movs	r2, #32
 8007a48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b084      	sub	sp, #16
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
 8007a66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d101      	bne.n	8007a76 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a72:	2302      	movs	r3, #2
 8007a74:	e02d      	b.n	8007ad2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2224      	movs	r2, #36	@ 0x24
 8007a82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f022 0201 	bic.w	r2, r2, #1
 8007a9c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	683a      	ldr	r2, [r7, #0]
 8007aae:	430a      	orrs	r2, r1
 8007ab0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f812 	bl	8007adc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2220      	movs	r2, #32
 8007ac4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ad0:	2300      	movs	r3, #0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
	...

08007adc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d108      	bne.n	8007afe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007afc:	e031      	b.n	8007b62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007afe:	2308      	movs	r3, #8
 8007b00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b02:	2308      	movs	r3, #8
 8007b04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	0e5b      	lsrs	r3, r3, #25
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	f003 0307 	and.w	r3, r3, #7
 8007b14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	0f5b      	lsrs	r3, r3, #29
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	f003 0307 	and.w	r3, r3, #7
 8007b24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b26:	7bbb      	ldrb	r3, [r7, #14]
 8007b28:	7b3a      	ldrb	r2, [r7, #12]
 8007b2a:	4911      	ldr	r1, [pc, #68]	@ (8007b70 <UARTEx_SetNbDataToProcess+0x94>)
 8007b2c:	5c8a      	ldrb	r2, [r1, r2]
 8007b2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007b32:	7b3a      	ldrb	r2, [r7, #12]
 8007b34:	490f      	ldr	r1, [pc, #60]	@ (8007b74 <UARTEx_SetNbDataToProcess+0x98>)
 8007b36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b38:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
 8007b46:	7b7a      	ldrb	r2, [r7, #13]
 8007b48:	4909      	ldr	r1, [pc, #36]	@ (8007b70 <UARTEx_SetNbDataToProcess+0x94>)
 8007b4a:	5c8a      	ldrb	r2, [r1, r2]
 8007b4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007b50:	7b7a      	ldrb	r2, [r7, #13]
 8007b52:	4908      	ldr	r1, [pc, #32]	@ (8007b74 <UARTEx_SetNbDataToProcess+0x98>)
 8007b54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b56:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007b62:	bf00      	nop
 8007b64:	3714      	adds	r7, #20
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	08018c74 	.word	0x08018c74
 8007b74:	08018c7c 	.word	0x08018c7c

08007b78 <__NVIC_SetPriority>:
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	4603      	mov	r3, r0
 8007b80:	6039      	str	r1, [r7, #0]
 8007b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	db0a      	blt.n	8007ba2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	b2da      	uxtb	r2, r3
 8007b90:	490c      	ldr	r1, [pc, #48]	@ (8007bc4 <__NVIC_SetPriority+0x4c>)
 8007b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b96:	0112      	lsls	r2, r2, #4
 8007b98:	b2d2      	uxtb	r2, r2
 8007b9a:	440b      	add	r3, r1
 8007b9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007ba0:	e00a      	b.n	8007bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	b2da      	uxtb	r2, r3
 8007ba6:	4908      	ldr	r1, [pc, #32]	@ (8007bc8 <__NVIC_SetPriority+0x50>)
 8007ba8:	79fb      	ldrb	r3, [r7, #7]
 8007baa:	f003 030f 	and.w	r3, r3, #15
 8007bae:	3b04      	subs	r3, #4
 8007bb0:	0112      	lsls	r2, r2, #4
 8007bb2:	b2d2      	uxtb	r2, r2
 8007bb4:	440b      	add	r3, r1
 8007bb6:	761a      	strb	r2, [r3, #24]
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr
 8007bc4:	e000e100 	.word	0xe000e100
 8007bc8:	e000ed00 	.word	0xe000ed00

08007bcc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007bd0:	4b05      	ldr	r3, [pc, #20]	@ (8007be8 <SysTick_Handler+0x1c>)
 8007bd2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007bd4:	f001 fd40 	bl	8009658 <xTaskGetSchedulerState>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d001      	beq.n	8007be2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007bde:	f002 fb3b 	bl	800a258 <xPortSysTickHandler>
  }
}
 8007be2:	bf00      	nop
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	e000e010 	.word	0xe000e010

08007bec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007bec:	b580      	push	{r7, lr}
 8007bee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	f06f 0004 	mvn.w	r0, #4
 8007bf6:	f7ff ffbf 	bl	8007b78 <__NVIC_SetPriority>
#endif
}
 8007bfa:	bf00      	nop
 8007bfc:	bd80      	pop	{r7, pc}
	...

08007c00 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c06:	f3ef 8305 	mrs	r3, IPSR
 8007c0a:	603b      	str	r3, [r7, #0]
  return(result);
 8007c0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d003      	beq.n	8007c1a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007c12:	f06f 0305 	mvn.w	r3, #5
 8007c16:	607b      	str	r3, [r7, #4]
 8007c18:	e00c      	b.n	8007c34 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8007c44 <osKernelInitialize+0x44>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d105      	bne.n	8007c2e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007c22:	4b08      	ldr	r3, [pc, #32]	@ (8007c44 <osKernelInitialize+0x44>)
 8007c24:	2201      	movs	r2, #1
 8007c26:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	607b      	str	r3, [r7, #4]
 8007c2c:	e002      	b.n	8007c34 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007c2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007c32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007c34:	687b      	ldr	r3, [r7, #4]
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	370c      	adds	r7, #12
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	20004864 	.word	0x20004864

08007c48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c4e:	f3ef 8305 	mrs	r3, IPSR
 8007c52:	603b      	str	r3, [r7, #0]
  return(result);
 8007c54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d003      	beq.n	8007c62 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007c5a:	f06f 0305 	mvn.w	r3, #5
 8007c5e:	607b      	str	r3, [r7, #4]
 8007c60:	e010      	b.n	8007c84 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007c62:	4b0b      	ldr	r3, [pc, #44]	@ (8007c90 <osKernelStart+0x48>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d109      	bne.n	8007c7e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007c6a:	f7ff ffbf 	bl	8007bec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007c6e:	4b08      	ldr	r3, [pc, #32]	@ (8007c90 <osKernelStart+0x48>)
 8007c70:	2202      	movs	r2, #2
 8007c72:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007c74:	f001 f87a 	bl	8008d6c <vTaskStartScheduler>
      stat = osOK;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	607b      	str	r3, [r7, #4]
 8007c7c:	e002      	b.n	8007c84 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007c7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007c82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007c84:	687b      	ldr	r3, [r7, #4]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	20004864 	.word	0x20004864

08007c94 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b08e      	sub	sp, #56	@ 0x38
 8007c98:	af04      	add	r7, sp, #16
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ca4:	f3ef 8305 	mrs	r3, IPSR
 8007ca8:	617b      	str	r3, [r7, #20]
  return(result);
 8007caa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d17e      	bne.n	8007dae <osThreadNew+0x11a>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d07b      	beq.n	8007dae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007cb6:	2380      	movs	r3, #128	@ 0x80
 8007cb8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007cba:	2318      	movs	r3, #24
 8007cbc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007cc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007cc6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d045      	beq.n	8007d5a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d002      	beq.n	8007cdc <osThreadNew+0x48>
        name = attr->name;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d002      	beq.n	8007cea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	699b      	ldr	r3, [r3, #24]
 8007ce8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d008      	beq.n	8007d02 <osThreadNew+0x6e>
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	2b38      	cmp	r3, #56	@ 0x38
 8007cf4:	d805      	bhi.n	8007d02 <osThreadNew+0x6e>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	f003 0301 	and.w	r3, r3, #1
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d001      	beq.n	8007d06 <osThreadNew+0x72>
        return (NULL);
 8007d02:	2300      	movs	r3, #0
 8007d04:	e054      	b.n	8007db0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	695b      	ldr	r3, [r3, #20]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d003      	beq.n	8007d16 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	089b      	lsrs	r3, r3, #2
 8007d14:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00e      	beq.n	8007d3c <osThreadNew+0xa8>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	2b5b      	cmp	r3, #91	@ 0x5b
 8007d24:	d90a      	bls.n	8007d3c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d006      	beq.n	8007d3c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	695b      	ldr	r3, [r3, #20]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d002      	beq.n	8007d3c <osThreadNew+0xa8>
        mem = 1;
 8007d36:	2301      	movs	r3, #1
 8007d38:	61bb      	str	r3, [r7, #24]
 8007d3a:	e010      	b.n	8007d5e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10c      	bne.n	8007d5e <osThreadNew+0xca>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d108      	bne.n	8007d5e <osThreadNew+0xca>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d104      	bne.n	8007d5e <osThreadNew+0xca>
          mem = 0;
 8007d54:	2300      	movs	r3, #0
 8007d56:	61bb      	str	r3, [r7, #24]
 8007d58:	e001      	b.n	8007d5e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d110      	bne.n	8007d86 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007d6c:	9202      	str	r2, [sp, #8]
 8007d6e:	9301      	str	r3, [sp, #4]
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	9300      	str	r3, [sp, #0]
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	6a3a      	ldr	r2, [r7, #32]
 8007d78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007d7a:	68f8      	ldr	r0, [r7, #12]
 8007d7c:	f000 fe1a 	bl	80089b4 <xTaskCreateStatic>
 8007d80:	4603      	mov	r3, r0
 8007d82:	613b      	str	r3, [r7, #16]
 8007d84:	e013      	b.n	8007dae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d110      	bne.n	8007dae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007d8c:	6a3b      	ldr	r3, [r7, #32]
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	f107 0310 	add.w	r3, r7, #16
 8007d94:	9301      	str	r3, [sp, #4]
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	9300      	str	r3, [sp, #0]
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007d9e:	68f8      	ldr	r0, [r7, #12]
 8007da0:	f000 fe68 	bl	8008a74 <xTaskCreate>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d001      	beq.n	8007dae <osThreadNew+0x11a>
            hTask = NULL;
 8007daa:	2300      	movs	r3, #0
 8007dac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007dae:	693b      	ldr	r3, [r7, #16]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3728      	adds	r7, #40	@ 0x28
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dc0:	f3ef 8305 	mrs	r3, IPSR
 8007dc4:	60bb      	str	r3, [r7, #8]
  return(result);
 8007dc6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d003      	beq.n	8007dd4 <osDelay+0x1c>
    stat = osErrorISR;
 8007dcc:	f06f 0305 	mvn.w	r3, #5
 8007dd0:	60fb      	str	r3, [r7, #12]
 8007dd2:	e007      	b.n	8007de4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d002      	beq.n	8007de4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 ff8e 	bl	8008d00 <vTaskDelay>
    }
  }

  return (stat);
 8007de4:	68fb      	ldr	r3, [r7, #12]
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
	...

08007df0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	4a07      	ldr	r2, [pc, #28]	@ (8007e1c <vApplicationGetIdleTaskMemory+0x2c>)
 8007e00:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	4a06      	ldr	r2, [pc, #24]	@ (8007e20 <vApplicationGetIdleTaskMemory+0x30>)
 8007e06:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2280      	movs	r2, #128	@ 0x80
 8007e0c:	601a      	str	r2, [r3, #0]
}
 8007e0e:	bf00      	nop
 8007e10:	3714      	adds	r7, #20
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	20004868 	.word	0x20004868
 8007e20:	200048c4 	.word	0x200048c4

08007e24 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	4a07      	ldr	r2, [pc, #28]	@ (8007e50 <vApplicationGetTimerTaskMemory+0x2c>)
 8007e34:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	4a06      	ldr	r2, [pc, #24]	@ (8007e54 <vApplicationGetTimerTaskMemory+0x30>)
 8007e3a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007e42:	601a      	str	r2, [r3, #0]
}
 8007e44:	bf00      	nop
 8007e46:	3714      	adds	r7, #20
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr
 8007e50:	20004ac4 	.word	0x20004ac4
 8007e54:	20004b20 	.word	0x20004b20

08007e58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f103 0208 	add.w	r2, r3, #8
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f103 0208 	add.w	r2, r3, #8
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f103 0208 	add.w	r2, r3, #8
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007ea6:	bf00      	nop
 8007ea8:	370c      	adds	r7, #12
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr

08007eb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b085      	sub	sp, #20
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
 8007eba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	689a      	ldr	r2, [r3, #8]
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	683a      	ldr	r2, [r7, #0]
 8007ed6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	683a      	ldr	r2, [r7, #0]
 8007edc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	1c5a      	adds	r2, r3, #1
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	601a      	str	r2, [r3, #0]
}
 8007eee:	bf00      	nop
 8007ef0:	3714      	adds	r7, #20
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr

08007efa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007efa:	b480      	push	{r7}
 8007efc:	b085      	sub	sp, #20
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
 8007f02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f10:	d103      	bne.n	8007f1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	60fb      	str	r3, [r7, #12]
 8007f18:	e00c      	b.n	8007f34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	3308      	adds	r3, #8
 8007f1e:	60fb      	str	r3, [r7, #12]
 8007f20:	e002      	b.n	8007f28 <vListInsert+0x2e>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	60fb      	str	r3, [r7, #12]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d2f6      	bcs.n	8007f22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	685a      	ldr	r2, [r3, #4]
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	683a      	ldr	r2, [r7, #0]
 8007f42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	683a      	ldr	r2, [r7, #0]
 8007f4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	1c5a      	adds	r2, r3, #1
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	601a      	str	r2, [r3, #0]
}
 8007f60:	bf00      	nop
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	691b      	ldr	r3, [r3, #16]
 8007f78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	6892      	ldr	r2, [r2, #8]
 8007f82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	6852      	ldr	r2, [r2, #4]
 8007f8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d103      	bne.n	8007fa0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	689a      	ldr	r2, [r3, #8]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	1e5a      	subs	r2, r3, #1
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3714      	adds	r7, #20
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10b      	bne.n	8007fec <xQueueGenericReset+0x2c>
	__asm volatile
 8007fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	60bb      	str	r3, [r7, #8]
}
 8007fe6:	bf00      	nop
 8007fe8:	bf00      	nop
 8007fea:	e7fd      	b.n	8007fe8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007fec:	f002 f8a4 	bl	800a138 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ff8:	68f9      	ldr	r1, [r7, #12]
 8007ffa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007ffc:	fb01 f303 	mul.w	r3, r1, r3
 8008000:	441a      	add	r2, r3
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800801c:	3b01      	subs	r3, #1
 800801e:	68f9      	ldr	r1, [r7, #12]
 8008020:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008022:	fb01 f303 	mul.w	r3, r1, r3
 8008026:	441a      	add	r2, r3
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	22ff      	movs	r2, #255	@ 0xff
 8008030:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	22ff      	movs	r2, #255	@ 0xff
 8008038:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d114      	bne.n	800806c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d01a      	beq.n	8008080 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	3310      	adds	r3, #16
 800804e:	4618      	mov	r0, r3
 8008050:	f001 f91a 	bl	8009288 <xTaskRemoveFromEventList>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d012      	beq.n	8008080 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800805a:	4b0d      	ldr	r3, [pc, #52]	@ (8008090 <xQueueGenericReset+0xd0>)
 800805c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008060:	601a      	str	r2, [r3, #0]
 8008062:	f3bf 8f4f 	dsb	sy
 8008066:	f3bf 8f6f 	isb	sy
 800806a:	e009      	b.n	8008080 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	3310      	adds	r3, #16
 8008070:	4618      	mov	r0, r3
 8008072:	f7ff fef1 	bl	8007e58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	3324      	adds	r3, #36	@ 0x24
 800807a:	4618      	mov	r0, r3
 800807c:	f7ff feec 	bl	8007e58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008080:	f002 f88c 	bl	800a19c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008084:	2301      	movs	r3, #1
}
 8008086:	4618      	mov	r0, r3
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	e000ed04 	.word	0xe000ed04

08008094 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008094:	b580      	push	{r7, lr}
 8008096:	b08e      	sub	sp, #56	@ 0x38
 8008098:	af02      	add	r7, sp, #8
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
 80080a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d10b      	bne.n	80080c0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80080a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ac:	f383 8811 	msr	BASEPRI, r3
 80080b0:	f3bf 8f6f 	isb	sy
 80080b4:	f3bf 8f4f 	dsb	sy
 80080b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80080ba:	bf00      	nop
 80080bc:	bf00      	nop
 80080be:	e7fd      	b.n	80080bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d10b      	bne.n	80080de <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80080c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ca:	f383 8811 	msr	BASEPRI, r3
 80080ce:	f3bf 8f6f 	isb	sy
 80080d2:	f3bf 8f4f 	dsb	sy
 80080d6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80080d8:	bf00      	nop
 80080da:	bf00      	nop
 80080dc:	e7fd      	b.n	80080da <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d002      	beq.n	80080ea <xQueueGenericCreateStatic+0x56>
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d001      	beq.n	80080ee <xQueueGenericCreateStatic+0x5a>
 80080ea:	2301      	movs	r3, #1
 80080ec:	e000      	b.n	80080f0 <xQueueGenericCreateStatic+0x5c>
 80080ee:	2300      	movs	r3, #0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10b      	bne.n	800810c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80080f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f8:	f383 8811 	msr	BASEPRI, r3
 80080fc:	f3bf 8f6f 	isb	sy
 8008100:	f3bf 8f4f 	dsb	sy
 8008104:	623b      	str	r3, [r7, #32]
}
 8008106:	bf00      	nop
 8008108:	bf00      	nop
 800810a:	e7fd      	b.n	8008108 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d102      	bne.n	8008118 <xQueueGenericCreateStatic+0x84>
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d101      	bne.n	800811c <xQueueGenericCreateStatic+0x88>
 8008118:	2301      	movs	r3, #1
 800811a:	e000      	b.n	800811e <xQueueGenericCreateStatic+0x8a>
 800811c:	2300      	movs	r3, #0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d10b      	bne.n	800813a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008126:	f383 8811 	msr	BASEPRI, r3
 800812a:	f3bf 8f6f 	isb	sy
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	61fb      	str	r3, [r7, #28]
}
 8008134:	bf00      	nop
 8008136:	bf00      	nop
 8008138:	e7fd      	b.n	8008136 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800813a:	2350      	movs	r3, #80	@ 0x50
 800813c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	2b50      	cmp	r3, #80	@ 0x50
 8008142:	d00b      	beq.n	800815c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008148:	f383 8811 	msr	BASEPRI, r3
 800814c:	f3bf 8f6f 	isb	sy
 8008150:	f3bf 8f4f 	dsb	sy
 8008154:	61bb      	str	r3, [r7, #24]
}
 8008156:	bf00      	nop
 8008158:	bf00      	nop
 800815a:	e7fd      	b.n	8008158 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800815c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00d      	beq.n	8008184 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800816a:	2201      	movs	r2, #1
 800816c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008170:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	4613      	mov	r3, r2
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	68b9      	ldr	r1, [r7, #8]
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f000 f805 	bl	800818e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008186:	4618      	mov	r0, r3
 8008188:	3730      	adds	r7, #48	@ 0x30
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b084      	sub	sp, #16
 8008192:	af00      	add	r7, sp, #0
 8008194:	60f8      	str	r0, [r7, #12]
 8008196:	60b9      	str	r1, [r7, #8]
 8008198:	607a      	str	r2, [r7, #4]
 800819a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d103      	bne.n	80081aa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	69ba      	ldr	r2, [r7, #24]
 80081a6:	601a      	str	r2, [r3, #0]
 80081a8:	e002      	b.n	80081b0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	68ba      	ldr	r2, [r7, #8]
 80081ba:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081bc:	2101      	movs	r1, #1
 80081be:	69b8      	ldr	r0, [r7, #24]
 80081c0:	f7ff fefe 	bl	8007fc0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	78fa      	ldrb	r2, [r7, #3]
 80081c8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80081cc:	bf00      	nop
 80081ce:	3710      	adds	r7, #16
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b08e      	sub	sp, #56	@ 0x38
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	607a      	str	r2, [r7, #4]
 80081e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80081e2:	2300      	movs	r3, #0
 80081e4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80081ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10b      	bne.n	8008208 <xQueueGenericSend+0x34>
	__asm volatile
 80081f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081f4:	f383 8811 	msr	BASEPRI, r3
 80081f8:	f3bf 8f6f 	isb	sy
 80081fc:	f3bf 8f4f 	dsb	sy
 8008200:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008202:	bf00      	nop
 8008204:	bf00      	nop
 8008206:	e7fd      	b.n	8008204 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d103      	bne.n	8008216 <xQueueGenericSend+0x42>
 800820e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008212:	2b00      	cmp	r3, #0
 8008214:	d101      	bne.n	800821a <xQueueGenericSend+0x46>
 8008216:	2301      	movs	r3, #1
 8008218:	e000      	b.n	800821c <xQueueGenericSend+0x48>
 800821a:	2300      	movs	r3, #0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d10b      	bne.n	8008238 <xQueueGenericSend+0x64>
	__asm volatile
 8008220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008224:	f383 8811 	msr	BASEPRI, r3
 8008228:	f3bf 8f6f 	isb	sy
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008232:	bf00      	nop
 8008234:	bf00      	nop
 8008236:	e7fd      	b.n	8008234 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	2b02      	cmp	r3, #2
 800823c:	d103      	bne.n	8008246 <xQueueGenericSend+0x72>
 800823e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008242:	2b01      	cmp	r3, #1
 8008244:	d101      	bne.n	800824a <xQueueGenericSend+0x76>
 8008246:	2301      	movs	r3, #1
 8008248:	e000      	b.n	800824c <xQueueGenericSend+0x78>
 800824a:	2300      	movs	r3, #0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d10b      	bne.n	8008268 <xQueueGenericSend+0x94>
	__asm volatile
 8008250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008254:	f383 8811 	msr	BASEPRI, r3
 8008258:	f3bf 8f6f 	isb	sy
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	623b      	str	r3, [r7, #32]
}
 8008262:	bf00      	nop
 8008264:	bf00      	nop
 8008266:	e7fd      	b.n	8008264 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008268:	f001 f9f6 	bl	8009658 <xTaskGetSchedulerState>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	d102      	bne.n	8008278 <xQueueGenericSend+0xa4>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d101      	bne.n	800827c <xQueueGenericSend+0xa8>
 8008278:	2301      	movs	r3, #1
 800827a:	e000      	b.n	800827e <xQueueGenericSend+0xaa>
 800827c:	2300      	movs	r3, #0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d10b      	bne.n	800829a <xQueueGenericSend+0xc6>
	__asm volatile
 8008282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008286:	f383 8811 	msr	BASEPRI, r3
 800828a:	f3bf 8f6f 	isb	sy
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	61fb      	str	r3, [r7, #28]
}
 8008294:	bf00      	nop
 8008296:	bf00      	nop
 8008298:	e7fd      	b.n	8008296 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800829a:	f001 ff4d 	bl	800a138 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800829e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d302      	bcc.n	80082b0 <xQueueGenericSend+0xdc>
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d129      	bne.n	8008304 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082b0:	683a      	ldr	r2, [r7, #0]
 80082b2:	68b9      	ldr	r1, [r7, #8]
 80082b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80082b6:	f000 fa0f 	bl	80086d8 <prvCopyDataToQueue>
 80082ba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d010      	beq.n	80082e6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c6:	3324      	adds	r3, #36	@ 0x24
 80082c8:	4618      	mov	r0, r3
 80082ca:	f000 ffdd 	bl	8009288 <xTaskRemoveFromEventList>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d013      	beq.n	80082fc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80082d4:	4b3f      	ldr	r3, [pc, #252]	@ (80083d4 <xQueueGenericSend+0x200>)
 80082d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082da:	601a      	str	r2, [r3, #0]
 80082dc:	f3bf 8f4f 	dsb	sy
 80082e0:	f3bf 8f6f 	isb	sy
 80082e4:	e00a      	b.n	80082fc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80082e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d007      	beq.n	80082fc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80082ec:	4b39      	ldr	r3, [pc, #228]	@ (80083d4 <xQueueGenericSend+0x200>)
 80082ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082f2:	601a      	str	r2, [r3, #0]
 80082f4:	f3bf 8f4f 	dsb	sy
 80082f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80082fc:	f001 ff4e 	bl	800a19c <vPortExitCritical>
				return pdPASS;
 8008300:	2301      	movs	r3, #1
 8008302:	e063      	b.n	80083cc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d103      	bne.n	8008312 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800830a:	f001 ff47 	bl	800a19c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800830e:	2300      	movs	r3, #0
 8008310:	e05c      	b.n	80083cc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008314:	2b00      	cmp	r3, #0
 8008316:	d106      	bne.n	8008326 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008318:	f107 0314 	add.w	r3, r7, #20
 800831c:	4618      	mov	r0, r3
 800831e:	f001 f83f 	bl	80093a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008322:	2301      	movs	r3, #1
 8008324:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008326:	f001 ff39 	bl	800a19c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800832a:	f000 fd87 	bl	8008e3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800832e:	f001 ff03 	bl	800a138 <vPortEnterCritical>
 8008332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008334:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008338:	b25b      	sxtb	r3, r3
 800833a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800833e:	d103      	bne.n	8008348 <xQueueGenericSend+0x174>
 8008340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008342:	2200      	movs	r2, #0
 8008344:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800834a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800834e:	b25b      	sxtb	r3, r3
 8008350:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008354:	d103      	bne.n	800835e <xQueueGenericSend+0x18a>
 8008356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008358:	2200      	movs	r2, #0
 800835a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800835e:	f001 ff1d 	bl	800a19c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008362:	1d3a      	adds	r2, r7, #4
 8008364:	f107 0314 	add.w	r3, r7, #20
 8008368:	4611      	mov	r1, r2
 800836a:	4618      	mov	r0, r3
 800836c:	f001 f82e 	bl	80093cc <xTaskCheckForTimeOut>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d124      	bne.n	80083c0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008376:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008378:	f000 faa6 	bl	80088c8 <prvIsQueueFull>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d018      	beq.n	80083b4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008384:	3310      	adds	r3, #16
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	4611      	mov	r1, r2
 800838a:	4618      	mov	r0, r3
 800838c:	f000 ff2a 	bl	80091e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008390:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008392:	f000 fa31 	bl	80087f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008396:	f000 fd5f 	bl	8008e58 <xTaskResumeAll>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	f47f af7c 	bne.w	800829a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80083a2:	4b0c      	ldr	r3, [pc, #48]	@ (80083d4 <xQueueGenericSend+0x200>)
 80083a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083a8:	601a      	str	r2, [r3, #0]
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	f3bf 8f6f 	isb	sy
 80083b2:	e772      	b.n	800829a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80083b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80083b6:	f000 fa1f 	bl	80087f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083ba:	f000 fd4d 	bl	8008e58 <xTaskResumeAll>
 80083be:	e76c      	b.n	800829a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80083c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80083c2:	f000 fa19 	bl	80087f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083c6:	f000 fd47 	bl	8008e58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80083ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3738      	adds	r7, #56	@ 0x38
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	e000ed04 	.word	0xe000ed04

080083d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b090      	sub	sp, #64	@ 0x40
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	607a      	str	r2, [r7, #4]
 80083e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80083ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d10b      	bne.n	8008408 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80083f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f4:	f383 8811 	msr	BASEPRI, r3
 80083f8:	f3bf 8f6f 	isb	sy
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008402:	bf00      	nop
 8008404:	bf00      	nop
 8008406:	e7fd      	b.n	8008404 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d103      	bne.n	8008416 <xQueueGenericSendFromISR+0x3e>
 800840e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008412:	2b00      	cmp	r3, #0
 8008414:	d101      	bne.n	800841a <xQueueGenericSendFromISR+0x42>
 8008416:	2301      	movs	r3, #1
 8008418:	e000      	b.n	800841c <xQueueGenericSendFromISR+0x44>
 800841a:	2300      	movs	r3, #0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d10b      	bne.n	8008438 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008424:	f383 8811 	msr	BASEPRI, r3
 8008428:	f3bf 8f6f 	isb	sy
 800842c:	f3bf 8f4f 	dsb	sy
 8008430:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008432:	bf00      	nop
 8008434:	bf00      	nop
 8008436:	e7fd      	b.n	8008434 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	2b02      	cmp	r3, #2
 800843c:	d103      	bne.n	8008446 <xQueueGenericSendFromISR+0x6e>
 800843e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008442:	2b01      	cmp	r3, #1
 8008444:	d101      	bne.n	800844a <xQueueGenericSendFromISR+0x72>
 8008446:	2301      	movs	r3, #1
 8008448:	e000      	b.n	800844c <xQueueGenericSendFromISR+0x74>
 800844a:	2300      	movs	r3, #0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d10b      	bne.n	8008468 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008454:	f383 8811 	msr	BASEPRI, r3
 8008458:	f3bf 8f6f 	isb	sy
 800845c:	f3bf 8f4f 	dsb	sy
 8008460:	623b      	str	r3, [r7, #32]
}
 8008462:	bf00      	nop
 8008464:	bf00      	nop
 8008466:	e7fd      	b.n	8008464 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008468:	f001 ff46 	bl	800a2f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800846c:	f3ef 8211 	mrs	r2, BASEPRI
 8008470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008474:	f383 8811 	msr	BASEPRI, r3
 8008478:	f3bf 8f6f 	isb	sy
 800847c:	f3bf 8f4f 	dsb	sy
 8008480:	61fa      	str	r2, [r7, #28]
 8008482:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008484:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008486:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800848a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800848c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800848e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008490:	429a      	cmp	r2, r3
 8008492:	d302      	bcc.n	800849a <xQueueGenericSendFromISR+0xc2>
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	2b02      	cmp	r3, #2
 8008498:	d12f      	bne.n	80084fa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800849a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800849c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80084aa:	683a      	ldr	r2, [r7, #0]
 80084ac:	68b9      	ldr	r1, [r7, #8]
 80084ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80084b0:	f000 f912 	bl	80086d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80084b4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80084b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80084bc:	d112      	bne.n	80084e4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d016      	beq.n	80084f4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c8:	3324      	adds	r3, #36	@ 0x24
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 fedc 	bl	8009288 <xTaskRemoveFromEventList>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00e      	beq.n	80084f4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00b      	beq.n	80084f4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	601a      	str	r2, [r3, #0]
 80084e2:	e007      	b.n	80084f4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80084e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80084e8:	3301      	adds	r3, #1
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	b25a      	sxtb	r2, r3
 80084ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80084f4:	2301      	movs	r3, #1
 80084f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80084f8:	e001      	b.n	80084fe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80084fa:	2300      	movs	r3, #0
 80084fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008500:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008508:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800850a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800850c:	4618      	mov	r0, r3
 800850e:	3740      	adds	r7, #64	@ 0x40
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b08c      	sub	sp, #48	@ 0x30
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008520:	2300      	movs	r3, #0
 8008522:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800852a:	2b00      	cmp	r3, #0
 800852c:	d10b      	bne.n	8008546 <xQueueReceive+0x32>
	__asm volatile
 800852e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008532:	f383 8811 	msr	BASEPRI, r3
 8008536:	f3bf 8f6f 	isb	sy
 800853a:	f3bf 8f4f 	dsb	sy
 800853e:	623b      	str	r3, [r7, #32]
}
 8008540:	bf00      	nop
 8008542:	bf00      	nop
 8008544:	e7fd      	b.n	8008542 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d103      	bne.n	8008554 <xQueueReceive+0x40>
 800854c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800854e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008550:	2b00      	cmp	r3, #0
 8008552:	d101      	bne.n	8008558 <xQueueReceive+0x44>
 8008554:	2301      	movs	r3, #1
 8008556:	e000      	b.n	800855a <xQueueReceive+0x46>
 8008558:	2300      	movs	r3, #0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d10b      	bne.n	8008576 <xQueueReceive+0x62>
	__asm volatile
 800855e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	61fb      	str	r3, [r7, #28]
}
 8008570:	bf00      	nop
 8008572:	bf00      	nop
 8008574:	e7fd      	b.n	8008572 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008576:	f001 f86f 	bl	8009658 <xTaskGetSchedulerState>
 800857a:	4603      	mov	r3, r0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d102      	bne.n	8008586 <xQueueReceive+0x72>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d101      	bne.n	800858a <xQueueReceive+0x76>
 8008586:	2301      	movs	r3, #1
 8008588:	e000      	b.n	800858c <xQueueReceive+0x78>
 800858a:	2300      	movs	r3, #0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d10b      	bne.n	80085a8 <xQueueReceive+0x94>
	__asm volatile
 8008590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008594:	f383 8811 	msr	BASEPRI, r3
 8008598:	f3bf 8f6f 	isb	sy
 800859c:	f3bf 8f4f 	dsb	sy
 80085a0:	61bb      	str	r3, [r7, #24]
}
 80085a2:	bf00      	nop
 80085a4:	bf00      	nop
 80085a6:	e7fd      	b.n	80085a4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80085a8:	f001 fdc6 	bl	800a138 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085b0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d01f      	beq.n	80085f8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80085b8:	68b9      	ldr	r1, [r7, #8]
 80085ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085bc:	f000 f8f6 	bl	80087ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80085c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c2:	1e5a      	subs	r2, r3, #1
 80085c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00f      	beq.n	80085f0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d2:	3310      	adds	r3, #16
 80085d4:	4618      	mov	r0, r3
 80085d6:	f000 fe57 	bl	8009288 <xTaskRemoveFromEventList>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d007      	beq.n	80085f0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80085e0:	4b3c      	ldr	r3, [pc, #240]	@ (80086d4 <xQueueReceive+0x1c0>)
 80085e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085e6:	601a      	str	r2, [r3, #0]
 80085e8:	f3bf 8f4f 	dsb	sy
 80085ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80085f0:	f001 fdd4 	bl	800a19c <vPortExitCritical>
				return pdPASS;
 80085f4:	2301      	movs	r3, #1
 80085f6:	e069      	b.n	80086cc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d103      	bne.n	8008606 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80085fe:	f001 fdcd 	bl	800a19c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008602:	2300      	movs	r3, #0
 8008604:	e062      	b.n	80086cc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008608:	2b00      	cmp	r3, #0
 800860a:	d106      	bne.n	800861a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800860c:	f107 0310 	add.w	r3, r7, #16
 8008610:	4618      	mov	r0, r3
 8008612:	f000 fec5 	bl	80093a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008616:	2301      	movs	r3, #1
 8008618:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800861a:	f001 fdbf 	bl	800a19c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800861e:	f000 fc0d 	bl	8008e3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008622:	f001 fd89 	bl	800a138 <vPortEnterCritical>
 8008626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008628:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800862c:	b25b      	sxtb	r3, r3
 800862e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008632:	d103      	bne.n	800863c <xQueueReceive+0x128>
 8008634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008636:	2200      	movs	r2, #0
 8008638:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800863c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800863e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008642:	b25b      	sxtb	r3, r3
 8008644:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008648:	d103      	bne.n	8008652 <xQueueReceive+0x13e>
 800864a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800864c:	2200      	movs	r2, #0
 800864e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008652:	f001 fda3 	bl	800a19c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008656:	1d3a      	adds	r2, r7, #4
 8008658:	f107 0310 	add.w	r3, r7, #16
 800865c:	4611      	mov	r1, r2
 800865e:	4618      	mov	r0, r3
 8008660:	f000 feb4 	bl	80093cc <xTaskCheckForTimeOut>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d123      	bne.n	80086b2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800866a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800866c:	f000 f916 	bl	800889c <prvIsQueueEmpty>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d017      	beq.n	80086a6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008678:	3324      	adds	r3, #36	@ 0x24
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	4611      	mov	r1, r2
 800867e:	4618      	mov	r0, r3
 8008680:	f000 fdb0 	bl	80091e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008684:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008686:	f000 f8b7 	bl	80087f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800868a:	f000 fbe5 	bl	8008e58 <xTaskResumeAll>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d189      	bne.n	80085a8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008694:	4b0f      	ldr	r3, [pc, #60]	@ (80086d4 <xQueueReceive+0x1c0>)
 8008696:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800869a:	601a      	str	r2, [r3, #0]
 800869c:	f3bf 8f4f 	dsb	sy
 80086a0:	f3bf 8f6f 	isb	sy
 80086a4:	e780      	b.n	80085a8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80086a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086a8:	f000 f8a6 	bl	80087f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086ac:	f000 fbd4 	bl	8008e58 <xTaskResumeAll>
 80086b0:	e77a      	b.n	80085a8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80086b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086b4:	f000 f8a0 	bl	80087f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086b8:	f000 fbce 	bl	8008e58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086be:	f000 f8ed 	bl	800889c <prvIsQueueEmpty>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	f43f af6f 	beq.w	80085a8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80086ca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3730      	adds	r7, #48	@ 0x30
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	e000ed04 	.word	0xe000ed04

080086d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b086      	sub	sp, #24
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80086e4:	2300      	movs	r3, #0
 80086e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d10d      	bne.n	8008712 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d14d      	bne.n	800879a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	4618      	mov	r0, r3
 8008704:	f000 ffc6 	bl	8009694 <xTaskPriorityDisinherit>
 8008708:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2200      	movs	r2, #0
 800870e:	609a      	str	r2, [r3, #8]
 8008710:	e043      	b.n	800879a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d119      	bne.n	800874c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6858      	ldr	r0, [r3, #4]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008720:	461a      	mov	r2, r3
 8008722:	68b9      	ldr	r1, [r7, #8]
 8008724:	f00f fb21 	bl	8017d6a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	685a      	ldr	r2, [r3, #4]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008730:	441a      	add	r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	685a      	ldr	r2, [r3, #4]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	429a      	cmp	r2, r3
 8008740:	d32b      	bcc.n	800879a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	605a      	str	r2, [r3, #4]
 800874a:	e026      	b.n	800879a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	68d8      	ldr	r0, [r3, #12]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008754:	461a      	mov	r2, r3
 8008756:	68b9      	ldr	r1, [r7, #8]
 8008758:	f00f fb07 	bl	8017d6a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	68da      	ldr	r2, [r3, #12]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008764:	425b      	negs	r3, r3
 8008766:	441a      	add	r2, r3
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	68da      	ldr	r2, [r3, #12]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	429a      	cmp	r2, r3
 8008776:	d207      	bcs.n	8008788 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	689a      	ldr	r2, [r3, #8]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008780:	425b      	negs	r3, r3
 8008782:	441a      	add	r2, r3
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2b02      	cmp	r3, #2
 800878c:	d105      	bne.n	800879a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d002      	beq.n	800879a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	3b01      	subs	r3, #1
 8008798:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	1c5a      	adds	r2, r3, #1
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80087a2:	697b      	ldr	r3, [r7, #20]
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3718      	adds	r7, #24
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d018      	beq.n	80087f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	68da      	ldr	r2, [r3, #12]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087c6:	441a      	add	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	68da      	ldr	r2, [r3, #12]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d303      	bcc.n	80087e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	68d9      	ldr	r1, [r3, #12]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087e8:	461a      	mov	r2, r3
 80087ea:	6838      	ldr	r0, [r7, #0]
 80087ec:	f00f fabd 	bl	8017d6a <memcpy>
	}
}
 80087f0:	bf00      	nop
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008800:	f001 fc9a 	bl	800a138 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800880a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800880c:	e011      	b.n	8008832 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008812:	2b00      	cmp	r3, #0
 8008814:	d012      	beq.n	800883c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	3324      	adds	r3, #36	@ 0x24
 800881a:	4618      	mov	r0, r3
 800881c:	f000 fd34 	bl	8009288 <xTaskRemoveFromEventList>
 8008820:	4603      	mov	r3, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d001      	beq.n	800882a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008826:	f000 fe35 	bl	8009494 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800882a:	7bfb      	ldrb	r3, [r7, #15]
 800882c:	3b01      	subs	r3, #1
 800882e:	b2db      	uxtb	r3, r3
 8008830:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008836:	2b00      	cmp	r3, #0
 8008838:	dce9      	bgt.n	800880e <prvUnlockQueue+0x16>
 800883a:	e000      	b.n	800883e <prvUnlockQueue+0x46>
					break;
 800883c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	22ff      	movs	r2, #255	@ 0xff
 8008842:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008846:	f001 fca9 	bl	800a19c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800884a:	f001 fc75 	bl	800a138 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008854:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008856:	e011      	b.n	800887c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	691b      	ldr	r3, [r3, #16]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d012      	beq.n	8008886 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	3310      	adds	r3, #16
 8008864:	4618      	mov	r0, r3
 8008866:	f000 fd0f 	bl	8009288 <xTaskRemoveFromEventList>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d001      	beq.n	8008874 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008870:	f000 fe10 	bl	8009494 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008874:	7bbb      	ldrb	r3, [r7, #14]
 8008876:	3b01      	subs	r3, #1
 8008878:	b2db      	uxtb	r3, r3
 800887a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800887c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008880:	2b00      	cmp	r3, #0
 8008882:	dce9      	bgt.n	8008858 <prvUnlockQueue+0x60>
 8008884:	e000      	b.n	8008888 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008886:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	22ff      	movs	r2, #255	@ 0xff
 800888c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008890:	f001 fc84 	bl	800a19c <vPortExitCritical>
}
 8008894:	bf00      	nop
 8008896:	3710      	adds	r7, #16
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80088a4:	f001 fc48 	bl	800a138 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d102      	bne.n	80088b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80088b0:	2301      	movs	r3, #1
 80088b2:	60fb      	str	r3, [r7, #12]
 80088b4:	e001      	b.n	80088ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80088b6:	2300      	movs	r3, #0
 80088b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80088ba:	f001 fc6f 	bl	800a19c <vPortExitCritical>

	return xReturn;
 80088be:	68fb      	ldr	r3, [r7, #12]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80088d0:	f001 fc32 	bl	800a138 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088dc:	429a      	cmp	r2, r3
 80088de:	d102      	bne.n	80088e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80088e0:	2301      	movs	r3, #1
 80088e2:	60fb      	str	r3, [r7, #12]
 80088e4:	e001      	b.n	80088ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80088e6:	2300      	movs	r3, #0
 80088e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80088ea:	f001 fc57 	bl	800a19c <vPortExitCritical>

	return xReturn;
 80088ee:	68fb      	ldr	r3, [r7, #12]
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3710      	adds	r7, #16
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80088f8:	b480      	push	{r7}
 80088fa:	b085      	sub	sp, #20
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008902:	2300      	movs	r3, #0
 8008904:	60fb      	str	r3, [r7, #12]
 8008906:	e014      	b.n	8008932 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008908:	4a0f      	ldr	r2, [pc, #60]	@ (8008948 <vQueueAddToRegistry+0x50>)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d10b      	bne.n	800892c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008914:	490c      	ldr	r1, [pc, #48]	@ (8008948 <vQueueAddToRegistry+0x50>)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	683a      	ldr	r2, [r7, #0]
 800891a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800891e:	4a0a      	ldr	r2, [pc, #40]	@ (8008948 <vQueueAddToRegistry+0x50>)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	00db      	lsls	r3, r3, #3
 8008924:	4413      	add	r3, r2
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800892a:	e006      	b.n	800893a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	3301      	adds	r3, #1
 8008930:	60fb      	str	r3, [r7, #12]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2b07      	cmp	r3, #7
 8008936:	d9e7      	bls.n	8008908 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008938:	bf00      	nop
 800893a:	bf00      	nop
 800893c:	3714      	adds	r7, #20
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	20004f20 	.word	0x20004f20

0800894c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800894c:	b580      	push	{r7, lr}
 800894e:	b086      	sub	sp, #24
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800895c:	f001 fbec 	bl	800a138 <vPortEnterCritical>
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008966:	b25b      	sxtb	r3, r3
 8008968:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800896c:	d103      	bne.n	8008976 <vQueueWaitForMessageRestricted+0x2a>
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	2200      	movs	r2, #0
 8008972:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800897c:	b25b      	sxtb	r3, r3
 800897e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008982:	d103      	bne.n	800898c <vQueueWaitForMessageRestricted+0x40>
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	2200      	movs	r2, #0
 8008988:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800898c:	f001 fc06 	bl	800a19c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008994:	2b00      	cmp	r3, #0
 8008996:	d106      	bne.n	80089a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	3324      	adds	r3, #36	@ 0x24
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	68b9      	ldr	r1, [r7, #8]
 80089a0:	4618      	mov	r0, r3
 80089a2:	f000 fc45 	bl	8009230 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80089a6:	6978      	ldr	r0, [r7, #20]
 80089a8:	f7ff ff26 	bl	80087f8 <prvUnlockQueue>
	}
 80089ac:	bf00      	nop
 80089ae:	3718      	adds	r7, #24
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b08e      	sub	sp, #56	@ 0x38
 80089b8:	af04      	add	r7, sp, #16
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]
 80089c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80089c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d10b      	bne.n	80089e0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80089c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089cc:	f383 8811 	msr	BASEPRI, r3
 80089d0:	f3bf 8f6f 	isb	sy
 80089d4:	f3bf 8f4f 	dsb	sy
 80089d8:	623b      	str	r3, [r7, #32]
}
 80089da:	bf00      	nop
 80089dc:	bf00      	nop
 80089de:	e7fd      	b.n	80089dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80089e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d10b      	bne.n	80089fe <xTaskCreateStatic+0x4a>
	__asm volatile
 80089e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ea:	f383 8811 	msr	BASEPRI, r3
 80089ee:	f3bf 8f6f 	isb	sy
 80089f2:	f3bf 8f4f 	dsb	sy
 80089f6:	61fb      	str	r3, [r7, #28]
}
 80089f8:	bf00      	nop
 80089fa:	bf00      	nop
 80089fc:	e7fd      	b.n	80089fa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80089fe:	235c      	movs	r3, #92	@ 0x5c
 8008a00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	2b5c      	cmp	r3, #92	@ 0x5c
 8008a06:	d00b      	beq.n	8008a20 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a0c:	f383 8811 	msr	BASEPRI, r3
 8008a10:	f3bf 8f6f 	isb	sy
 8008a14:	f3bf 8f4f 	dsb	sy
 8008a18:	61bb      	str	r3, [r7, #24]
}
 8008a1a:	bf00      	nop
 8008a1c:	bf00      	nop
 8008a1e:	e7fd      	b.n	8008a1c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008a20:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d01e      	beq.n	8008a66 <xTaskCreateStatic+0xb2>
 8008a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d01b      	beq.n	8008a66 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a30:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a36:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a3a:	2202      	movs	r2, #2
 8008a3c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008a40:	2300      	movs	r3, #0
 8008a42:	9303      	str	r3, [sp, #12]
 8008a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a46:	9302      	str	r3, [sp, #8]
 8008a48:	f107 0314 	add.w	r3, r7, #20
 8008a4c:	9301      	str	r3, [sp, #4]
 8008a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	68b9      	ldr	r1, [r7, #8]
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f000 f850 	bl	8008afe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008a60:	f000 f8de 	bl	8008c20 <prvAddNewTaskToReadyList>
 8008a64:	e001      	b.n	8008a6a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008a66:	2300      	movs	r3, #0
 8008a68:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008a6a:	697b      	ldr	r3, [r7, #20]
	}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3728      	adds	r7, #40	@ 0x28
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b08c      	sub	sp, #48	@ 0x30
 8008a78:	af04      	add	r7, sp, #16
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	603b      	str	r3, [r7, #0]
 8008a80:	4613      	mov	r3, r2
 8008a82:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008a84:	88fb      	ldrh	r3, [r7, #6]
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f001 fc77 	bl	800a37c <pvPortMalloc>
 8008a8e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00e      	beq.n	8008ab4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008a96:	205c      	movs	r0, #92	@ 0x5c
 8008a98:	f001 fc70 	bl	800a37c <pvPortMalloc>
 8008a9c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d003      	beq.n	8008aac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	697a      	ldr	r2, [r7, #20]
 8008aa8:	631a      	str	r2, [r3, #48]	@ 0x30
 8008aaa:	e005      	b.n	8008ab8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008aac:	6978      	ldr	r0, [r7, #20]
 8008aae:	f001 fd33 	bl	800a518 <vPortFree>
 8008ab2:	e001      	b.n	8008ab8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d017      	beq.n	8008aee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ac6:	88fa      	ldrh	r2, [r7, #6]
 8008ac8:	2300      	movs	r3, #0
 8008aca:	9303      	str	r3, [sp, #12]
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	9302      	str	r3, [sp, #8]
 8008ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ad2:	9301      	str	r3, [sp, #4]
 8008ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad6:	9300      	str	r3, [sp, #0]
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	68b9      	ldr	r1, [r7, #8]
 8008adc:	68f8      	ldr	r0, [r7, #12]
 8008ade:	f000 f80e 	bl	8008afe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ae2:	69f8      	ldr	r0, [r7, #28]
 8008ae4:	f000 f89c 	bl	8008c20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	61bb      	str	r3, [r7, #24]
 8008aec:	e002      	b.n	8008af4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008aee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008af2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008af4:	69bb      	ldr	r3, [r7, #24]
	}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3720      	adds	r7, #32
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b088      	sub	sp, #32
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	60f8      	str	r0, [r7, #12]
 8008b06:	60b9      	str	r1, [r7, #8]
 8008b08:	607a      	str	r2, [r7, #4]
 8008b0a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	461a      	mov	r2, r3
 8008b16:	21a5      	movs	r1, #165	@ 0xa5
 8008b18:	f00f f85e 	bl	8017bd8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008b26:	3b01      	subs	r3, #1
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	4413      	add	r3, r2
 8008b2c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	f023 0307 	bic.w	r3, r3, #7
 8008b34:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	f003 0307 	and.w	r3, r3, #7
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00b      	beq.n	8008b58 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b44:	f383 8811 	msr	BASEPRI, r3
 8008b48:	f3bf 8f6f 	isb	sy
 8008b4c:	f3bf 8f4f 	dsb	sy
 8008b50:	617b      	str	r3, [r7, #20]
}
 8008b52:	bf00      	nop
 8008b54:	bf00      	nop
 8008b56:	e7fd      	b.n	8008b54 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d01f      	beq.n	8008b9e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b5e:	2300      	movs	r3, #0
 8008b60:	61fb      	str	r3, [r7, #28]
 8008b62:	e012      	b.n	8008b8a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008b64:	68ba      	ldr	r2, [r7, #8]
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	4413      	add	r3, r2
 8008b6a:	7819      	ldrb	r1, [r3, #0]
 8008b6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	4413      	add	r3, r2
 8008b72:	3334      	adds	r3, #52	@ 0x34
 8008b74:	460a      	mov	r2, r1
 8008b76:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008b78:	68ba      	ldr	r2, [r7, #8]
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d006      	beq.n	8008b92 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	3301      	adds	r3, #1
 8008b88:	61fb      	str	r3, [r7, #28]
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	2b0f      	cmp	r3, #15
 8008b8e:	d9e9      	bls.n	8008b64 <prvInitialiseNewTask+0x66>
 8008b90:	e000      	b.n	8008b94 <prvInitialiseNewTask+0x96>
			{
				break;
 8008b92:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008b9c:	e003      	b.n	8008ba6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba8:	2b37      	cmp	r3, #55	@ 0x37
 8008baa:	d901      	bls.n	8008bb0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008bac:	2337      	movs	r3, #55	@ 0x37
 8008bae:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008bb4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008bba:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc4:	3304      	adds	r3, #4
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7ff f966 	bl	8007e98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bce:	3318      	adds	r3, #24
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f7ff f961 	bl	8007e98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bda:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bde:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bea:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bee:	2200      	movs	r2, #0
 8008bf0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008bfa:	683a      	ldr	r2, [r7, #0]
 8008bfc:	68f9      	ldr	r1, [r7, #12]
 8008bfe:	69b8      	ldr	r0, [r7, #24]
 8008c00:	f001 f966 	bl	8009ed0 <pxPortInitialiseStack>
 8008c04:	4602      	mov	r2, r0
 8008c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d002      	beq.n	8008c16 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c16:	bf00      	nop
 8008c18:	3720      	adds	r7, #32
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
	...

08008c20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008c28:	f001 fa86 	bl	800a138 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008c2c:	4b2d      	ldr	r3, [pc, #180]	@ (8008ce4 <prvAddNewTaskToReadyList+0xc4>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	3301      	adds	r3, #1
 8008c32:	4a2c      	ldr	r2, [pc, #176]	@ (8008ce4 <prvAddNewTaskToReadyList+0xc4>)
 8008c34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008c36:	4b2c      	ldr	r3, [pc, #176]	@ (8008ce8 <prvAddNewTaskToReadyList+0xc8>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d109      	bne.n	8008c52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008c3e:	4a2a      	ldr	r2, [pc, #168]	@ (8008ce8 <prvAddNewTaskToReadyList+0xc8>)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008c44:	4b27      	ldr	r3, [pc, #156]	@ (8008ce4 <prvAddNewTaskToReadyList+0xc4>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d110      	bne.n	8008c6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008c4c:	f000 fc46 	bl	80094dc <prvInitialiseTaskLists>
 8008c50:	e00d      	b.n	8008c6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008c52:	4b26      	ldr	r3, [pc, #152]	@ (8008cec <prvAddNewTaskToReadyList+0xcc>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d109      	bne.n	8008c6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008c5a:	4b23      	ldr	r3, [pc, #140]	@ (8008ce8 <prvAddNewTaskToReadyList+0xc8>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d802      	bhi.n	8008c6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008c68:	4a1f      	ldr	r2, [pc, #124]	@ (8008ce8 <prvAddNewTaskToReadyList+0xc8>)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008c6e:	4b20      	ldr	r3, [pc, #128]	@ (8008cf0 <prvAddNewTaskToReadyList+0xd0>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	3301      	adds	r3, #1
 8008c74:	4a1e      	ldr	r2, [pc, #120]	@ (8008cf0 <prvAddNewTaskToReadyList+0xd0>)
 8008c76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008c78:	4b1d      	ldr	r3, [pc, #116]	@ (8008cf0 <prvAddNewTaskToReadyList+0xd0>)
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c84:	4b1b      	ldr	r3, [pc, #108]	@ (8008cf4 <prvAddNewTaskToReadyList+0xd4>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d903      	bls.n	8008c94 <prvAddNewTaskToReadyList+0x74>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c90:	4a18      	ldr	r2, [pc, #96]	@ (8008cf4 <prvAddNewTaskToReadyList+0xd4>)
 8008c92:	6013      	str	r3, [r2, #0]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c98:	4613      	mov	r3, r2
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4413      	add	r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4a15      	ldr	r2, [pc, #84]	@ (8008cf8 <prvAddNewTaskToReadyList+0xd8>)
 8008ca2:	441a      	add	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	3304      	adds	r3, #4
 8008ca8:	4619      	mov	r1, r3
 8008caa:	4610      	mov	r0, r2
 8008cac:	f7ff f901 	bl	8007eb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008cb0:	f001 fa74 	bl	800a19c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8008cec <prvAddNewTaskToReadyList+0xcc>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d00e      	beq.n	8008cda <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8008ce8 <prvAddNewTaskToReadyList+0xc8>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d207      	bcs.n	8008cda <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008cca:	4b0c      	ldr	r3, [pc, #48]	@ (8008cfc <prvAddNewTaskToReadyList+0xdc>)
 8008ccc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cd0:	601a      	str	r2, [r3, #0]
 8008cd2:	f3bf 8f4f 	dsb	sy
 8008cd6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cda:	bf00      	nop
 8008cdc:	3708      	adds	r7, #8
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	20005434 	.word	0x20005434
 8008ce8:	20004f60 	.word	0x20004f60
 8008cec:	20005440 	.word	0x20005440
 8008cf0:	20005450 	.word	0x20005450
 8008cf4:	2000543c 	.word	0x2000543c
 8008cf8:	20004f64 	.word	0x20004f64
 8008cfc:	e000ed04 	.word	0xe000ed04

08008d00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d018      	beq.n	8008d44 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008d12:	4b14      	ldr	r3, [pc, #80]	@ (8008d64 <vTaskDelay+0x64>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d00b      	beq.n	8008d32 <vTaskDelay+0x32>
	__asm volatile
 8008d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d1e:	f383 8811 	msr	BASEPRI, r3
 8008d22:	f3bf 8f6f 	isb	sy
 8008d26:	f3bf 8f4f 	dsb	sy
 8008d2a:	60bb      	str	r3, [r7, #8]
}
 8008d2c:	bf00      	nop
 8008d2e:	bf00      	nop
 8008d30:	e7fd      	b.n	8008d2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008d32:	f000 f883 	bl	8008e3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008d36:	2100      	movs	r1, #0
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 fd1b 	bl	8009774 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008d3e:	f000 f88b 	bl	8008e58 <xTaskResumeAll>
 8008d42:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d107      	bne.n	8008d5a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008d4a:	4b07      	ldr	r3, [pc, #28]	@ (8008d68 <vTaskDelay+0x68>)
 8008d4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d50:	601a      	str	r2, [r3, #0]
 8008d52:	f3bf 8f4f 	dsb	sy
 8008d56:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d5a:	bf00      	nop
 8008d5c:	3710      	adds	r7, #16
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	2000545c 	.word	0x2000545c
 8008d68:	e000ed04 	.word	0xe000ed04

08008d6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b08a      	sub	sp, #40	@ 0x28
 8008d70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008d72:	2300      	movs	r3, #0
 8008d74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008d76:	2300      	movs	r3, #0
 8008d78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008d7a:	463a      	mov	r2, r7
 8008d7c:	1d39      	adds	r1, r7, #4
 8008d7e:	f107 0308 	add.w	r3, r7, #8
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7ff f834 	bl	8007df0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	9202      	str	r2, [sp, #8]
 8008d90:	9301      	str	r3, [sp, #4]
 8008d92:	2300      	movs	r3, #0
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	2300      	movs	r3, #0
 8008d98:	460a      	mov	r2, r1
 8008d9a:	4922      	ldr	r1, [pc, #136]	@ (8008e24 <vTaskStartScheduler+0xb8>)
 8008d9c:	4822      	ldr	r0, [pc, #136]	@ (8008e28 <vTaskStartScheduler+0xbc>)
 8008d9e:	f7ff fe09 	bl	80089b4 <xTaskCreateStatic>
 8008da2:	4603      	mov	r3, r0
 8008da4:	4a21      	ldr	r2, [pc, #132]	@ (8008e2c <vTaskStartScheduler+0xc0>)
 8008da6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008da8:	4b20      	ldr	r3, [pc, #128]	@ (8008e2c <vTaskStartScheduler+0xc0>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d002      	beq.n	8008db6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008db0:	2301      	movs	r3, #1
 8008db2:	617b      	str	r3, [r7, #20]
 8008db4:	e001      	b.n	8008dba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008db6:	2300      	movs	r3, #0
 8008db8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d102      	bne.n	8008dc6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008dc0:	f000 fd2c 	bl	800981c <xTimerCreateTimerTask>
 8008dc4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d116      	bne.n	8008dfa <vTaskStartScheduler+0x8e>
	__asm volatile
 8008dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dd0:	f383 8811 	msr	BASEPRI, r3
 8008dd4:	f3bf 8f6f 	isb	sy
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	613b      	str	r3, [r7, #16]
}
 8008dde:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008de0:	4b13      	ldr	r3, [pc, #76]	@ (8008e30 <vTaskStartScheduler+0xc4>)
 8008de2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008de6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008de8:	4b12      	ldr	r3, [pc, #72]	@ (8008e34 <vTaskStartScheduler+0xc8>)
 8008dea:	2201      	movs	r2, #1
 8008dec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008dee:	4b12      	ldr	r3, [pc, #72]	@ (8008e38 <vTaskStartScheduler+0xcc>)
 8008df0:	2200      	movs	r2, #0
 8008df2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008df4:	f001 f8fc 	bl	8009ff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008df8:	e00f      	b.n	8008e1a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e00:	d10b      	bne.n	8008e1a <vTaskStartScheduler+0xae>
	__asm volatile
 8008e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e06:	f383 8811 	msr	BASEPRI, r3
 8008e0a:	f3bf 8f6f 	isb	sy
 8008e0e:	f3bf 8f4f 	dsb	sy
 8008e12:	60fb      	str	r3, [r7, #12]
}
 8008e14:	bf00      	nop
 8008e16:	bf00      	nop
 8008e18:	e7fd      	b.n	8008e16 <vTaskStartScheduler+0xaa>
}
 8008e1a:	bf00      	nop
 8008e1c:	3718      	adds	r7, #24
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	08018be8 	.word	0x08018be8
 8008e28:	080094ad 	.word	0x080094ad
 8008e2c:	20005458 	.word	0x20005458
 8008e30:	20005454 	.word	0x20005454
 8008e34:	20005440 	.word	0x20005440
 8008e38:	20005438 	.word	0x20005438

08008e3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008e40:	4b04      	ldr	r3, [pc, #16]	@ (8008e54 <vTaskSuspendAll+0x18>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	3301      	adds	r3, #1
 8008e46:	4a03      	ldr	r2, [pc, #12]	@ (8008e54 <vTaskSuspendAll+0x18>)
 8008e48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008e4a:	bf00      	nop
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr
 8008e54:	2000545c 	.word	0x2000545c

08008e58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008e62:	2300      	movs	r3, #0
 8008e64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008e66:	4b42      	ldr	r3, [pc, #264]	@ (8008f70 <xTaskResumeAll+0x118>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10b      	bne.n	8008e86 <xTaskResumeAll+0x2e>
	__asm volatile
 8008e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e72:	f383 8811 	msr	BASEPRI, r3
 8008e76:	f3bf 8f6f 	isb	sy
 8008e7a:	f3bf 8f4f 	dsb	sy
 8008e7e:	603b      	str	r3, [r7, #0]
}
 8008e80:	bf00      	nop
 8008e82:	bf00      	nop
 8008e84:	e7fd      	b.n	8008e82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008e86:	f001 f957 	bl	800a138 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008e8a:	4b39      	ldr	r3, [pc, #228]	@ (8008f70 <xTaskResumeAll+0x118>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	4a37      	ldr	r2, [pc, #220]	@ (8008f70 <xTaskResumeAll+0x118>)
 8008e92:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e94:	4b36      	ldr	r3, [pc, #216]	@ (8008f70 <xTaskResumeAll+0x118>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d162      	bne.n	8008f62 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008e9c:	4b35      	ldr	r3, [pc, #212]	@ (8008f74 <xTaskResumeAll+0x11c>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d05e      	beq.n	8008f62 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ea4:	e02f      	b.n	8008f06 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ea6:	4b34      	ldr	r3, [pc, #208]	@ (8008f78 <xTaskResumeAll+0x120>)
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	3318      	adds	r3, #24
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7ff f85a 	bl	8007f6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	3304      	adds	r3, #4
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7ff f855 	bl	8007f6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ec6:	4b2d      	ldr	r3, [pc, #180]	@ (8008f7c <xTaskResumeAll+0x124>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d903      	bls.n	8008ed6 <xTaskResumeAll+0x7e>
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed2:	4a2a      	ldr	r2, [pc, #168]	@ (8008f7c <xTaskResumeAll+0x124>)
 8008ed4:	6013      	str	r3, [r2, #0]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008eda:	4613      	mov	r3, r2
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	4413      	add	r3, r2
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	4a27      	ldr	r2, [pc, #156]	@ (8008f80 <xTaskResumeAll+0x128>)
 8008ee4:	441a      	add	r2, r3
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	3304      	adds	r3, #4
 8008eea:	4619      	mov	r1, r3
 8008eec:	4610      	mov	r0, r2
 8008eee:	f7fe ffe0 	bl	8007eb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ef6:	4b23      	ldr	r3, [pc, #140]	@ (8008f84 <xTaskResumeAll+0x12c>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d302      	bcc.n	8008f06 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008f00:	4b21      	ldr	r3, [pc, #132]	@ (8008f88 <xTaskResumeAll+0x130>)
 8008f02:	2201      	movs	r2, #1
 8008f04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f06:	4b1c      	ldr	r3, [pc, #112]	@ (8008f78 <xTaskResumeAll+0x120>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1cb      	bne.n	8008ea6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d001      	beq.n	8008f18 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f14:	f000 fb80 	bl	8009618 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008f18:	4b1c      	ldr	r3, [pc, #112]	@ (8008f8c <xTaskResumeAll+0x134>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d010      	beq.n	8008f46 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008f24:	f000 f846 	bl	8008fb4 <xTaskIncrementTick>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d002      	beq.n	8008f34 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008f2e:	4b16      	ldr	r3, [pc, #88]	@ (8008f88 <xTaskResumeAll+0x130>)
 8008f30:	2201      	movs	r2, #1
 8008f32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	3b01      	subs	r3, #1
 8008f38:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d1f1      	bne.n	8008f24 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008f40:	4b12      	ldr	r3, [pc, #72]	@ (8008f8c <xTaskResumeAll+0x134>)
 8008f42:	2200      	movs	r2, #0
 8008f44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008f46:	4b10      	ldr	r3, [pc, #64]	@ (8008f88 <xTaskResumeAll+0x130>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d009      	beq.n	8008f62 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008f52:	4b0f      	ldr	r3, [pc, #60]	@ (8008f90 <xTaskResumeAll+0x138>)
 8008f54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f58:	601a      	str	r2, [r3, #0]
 8008f5a:	f3bf 8f4f 	dsb	sy
 8008f5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f62:	f001 f91b 	bl	800a19c <vPortExitCritical>

	return xAlreadyYielded;
 8008f66:	68bb      	ldr	r3, [r7, #8]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	2000545c 	.word	0x2000545c
 8008f74:	20005434 	.word	0x20005434
 8008f78:	200053f4 	.word	0x200053f4
 8008f7c:	2000543c 	.word	0x2000543c
 8008f80:	20004f64 	.word	0x20004f64
 8008f84:	20004f60 	.word	0x20004f60
 8008f88:	20005448 	.word	0x20005448
 8008f8c:	20005444 	.word	0x20005444
 8008f90:	e000ed04 	.word	0xe000ed04

08008f94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008f9a:	4b05      	ldr	r3, [pc, #20]	@ (8008fb0 <xTaskGetTickCount+0x1c>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008fa0:	687b      	ldr	r3, [r7, #4]
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	370c      	adds	r7, #12
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop
 8008fb0:	20005438 	.word	0x20005438

08008fb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b086      	sub	sp, #24
 8008fb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fbe:	4b4f      	ldr	r3, [pc, #316]	@ (80090fc <xTaskIncrementTick+0x148>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	f040 8090 	bne.w	80090e8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008fc8:	4b4d      	ldr	r3, [pc, #308]	@ (8009100 <xTaskIncrementTick+0x14c>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	3301      	adds	r3, #1
 8008fce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008fd0:	4a4b      	ldr	r2, [pc, #300]	@ (8009100 <xTaskIncrementTick+0x14c>)
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d121      	bne.n	8009020 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008fdc:	4b49      	ldr	r3, [pc, #292]	@ (8009104 <xTaskIncrementTick+0x150>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00b      	beq.n	8008ffe <xTaskIncrementTick+0x4a>
	__asm volatile
 8008fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fea:	f383 8811 	msr	BASEPRI, r3
 8008fee:	f3bf 8f6f 	isb	sy
 8008ff2:	f3bf 8f4f 	dsb	sy
 8008ff6:	603b      	str	r3, [r7, #0]
}
 8008ff8:	bf00      	nop
 8008ffa:	bf00      	nop
 8008ffc:	e7fd      	b.n	8008ffa <xTaskIncrementTick+0x46>
 8008ffe:	4b41      	ldr	r3, [pc, #260]	@ (8009104 <xTaskIncrementTick+0x150>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	60fb      	str	r3, [r7, #12]
 8009004:	4b40      	ldr	r3, [pc, #256]	@ (8009108 <xTaskIncrementTick+0x154>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a3e      	ldr	r2, [pc, #248]	@ (8009104 <xTaskIncrementTick+0x150>)
 800900a:	6013      	str	r3, [r2, #0]
 800900c:	4a3e      	ldr	r2, [pc, #248]	@ (8009108 <xTaskIncrementTick+0x154>)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6013      	str	r3, [r2, #0]
 8009012:	4b3e      	ldr	r3, [pc, #248]	@ (800910c <xTaskIncrementTick+0x158>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	3301      	adds	r3, #1
 8009018:	4a3c      	ldr	r2, [pc, #240]	@ (800910c <xTaskIncrementTick+0x158>)
 800901a:	6013      	str	r3, [r2, #0]
 800901c:	f000 fafc 	bl	8009618 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009020:	4b3b      	ldr	r3, [pc, #236]	@ (8009110 <xTaskIncrementTick+0x15c>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	693a      	ldr	r2, [r7, #16]
 8009026:	429a      	cmp	r2, r3
 8009028:	d349      	bcc.n	80090be <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800902a:	4b36      	ldr	r3, [pc, #216]	@ (8009104 <xTaskIncrementTick+0x150>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d104      	bne.n	800903e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009034:	4b36      	ldr	r3, [pc, #216]	@ (8009110 <xTaskIncrementTick+0x15c>)
 8009036:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800903a:	601a      	str	r2, [r3, #0]
					break;
 800903c:	e03f      	b.n	80090be <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800903e:	4b31      	ldr	r3, [pc, #196]	@ (8009104 <xTaskIncrementTick+0x150>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800904e:	693a      	ldr	r2, [r7, #16]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	429a      	cmp	r2, r3
 8009054:	d203      	bcs.n	800905e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009056:	4a2e      	ldr	r2, [pc, #184]	@ (8009110 <xTaskIncrementTick+0x15c>)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800905c:	e02f      	b.n	80090be <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	3304      	adds	r3, #4
 8009062:	4618      	mov	r0, r3
 8009064:	f7fe ff82 	bl	8007f6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800906c:	2b00      	cmp	r3, #0
 800906e:	d004      	beq.n	800907a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	3318      	adds	r3, #24
 8009074:	4618      	mov	r0, r3
 8009076:	f7fe ff79 	bl	8007f6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800907e:	4b25      	ldr	r3, [pc, #148]	@ (8009114 <xTaskIncrementTick+0x160>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	429a      	cmp	r2, r3
 8009084:	d903      	bls.n	800908e <xTaskIncrementTick+0xda>
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800908a:	4a22      	ldr	r2, [pc, #136]	@ (8009114 <xTaskIncrementTick+0x160>)
 800908c:	6013      	str	r3, [r2, #0]
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009092:	4613      	mov	r3, r2
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	4413      	add	r3, r2
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	4a1f      	ldr	r2, [pc, #124]	@ (8009118 <xTaskIncrementTick+0x164>)
 800909c:	441a      	add	r2, r3
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	3304      	adds	r3, #4
 80090a2:	4619      	mov	r1, r3
 80090a4:	4610      	mov	r0, r2
 80090a6:	f7fe ff04 	bl	8007eb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090ae:	4b1b      	ldr	r3, [pc, #108]	@ (800911c <xTaskIncrementTick+0x168>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d3b8      	bcc.n	800902a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80090b8:	2301      	movs	r3, #1
 80090ba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090bc:	e7b5      	b.n	800902a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80090be:	4b17      	ldr	r3, [pc, #92]	@ (800911c <xTaskIncrementTick+0x168>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090c4:	4914      	ldr	r1, [pc, #80]	@ (8009118 <xTaskIncrementTick+0x164>)
 80090c6:	4613      	mov	r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	4413      	add	r3, r2
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	440b      	add	r3, r1
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d901      	bls.n	80090da <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80090d6:	2301      	movs	r3, #1
 80090d8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80090da:	4b11      	ldr	r3, [pc, #68]	@ (8009120 <xTaskIncrementTick+0x16c>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d007      	beq.n	80090f2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80090e2:	2301      	movs	r3, #1
 80090e4:	617b      	str	r3, [r7, #20]
 80090e6:	e004      	b.n	80090f2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80090e8:	4b0e      	ldr	r3, [pc, #56]	@ (8009124 <xTaskIncrementTick+0x170>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	3301      	adds	r3, #1
 80090ee:	4a0d      	ldr	r2, [pc, #52]	@ (8009124 <xTaskIncrementTick+0x170>)
 80090f0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80090f2:	697b      	ldr	r3, [r7, #20]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3718      	adds	r7, #24
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	2000545c 	.word	0x2000545c
 8009100:	20005438 	.word	0x20005438
 8009104:	200053ec 	.word	0x200053ec
 8009108:	200053f0 	.word	0x200053f0
 800910c:	2000544c 	.word	0x2000544c
 8009110:	20005454 	.word	0x20005454
 8009114:	2000543c 	.word	0x2000543c
 8009118:	20004f64 	.word	0x20004f64
 800911c:	20004f60 	.word	0x20004f60
 8009120:	20005448 	.word	0x20005448
 8009124:	20005444 	.word	0x20005444

08009128 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009128:	b480      	push	{r7}
 800912a:	b085      	sub	sp, #20
 800912c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800912e:	4b28      	ldr	r3, [pc, #160]	@ (80091d0 <vTaskSwitchContext+0xa8>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d003      	beq.n	800913e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009136:	4b27      	ldr	r3, [pc, #156]	@ (80091d4 <vTaskSwitchContext+0xac>)
 8009138:	2201      	movs	r2, #1
 800913a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800913c:	e042      	b.n	80091c4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800913e:	4b25      	ldr	r3, [pc, #148]	@ (80091d4 <vTaskSwitchContext+0xac>)
 8009140:	2200      	movs	r2, #0
 8009142:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009144:	4b24      	ldr	r3, [pc, #144]	@ (80091d8 <vTaskSwitchContext+0xb0>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	60fb      	str	r3, [r7, #12]
 800914a:	e011      	b.n	8009170 <vTaskSwitchContext+0x48>
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d10b      	bne.n	800916a <vTaskSwitchContext+0x42>
	__asm volatile
 8009152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009156:	f383 8811 	msr	BASEPRI, r3
 800915a:	f3bf 8f6f 	isb	sy
 800915e:	f3bf 8f4f 	dsb	sy
 8009162:	607b      	str	r3, [r7, #4]
}
 8009164:	bf00      	nop
 8009166:	bf00      	nop
 8009168:	e7fd      	b.n	8009166 <vTaskSwitchContext+0x3e>
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	3b01      	subs	r3, #1
 800916e:	60fb      	str	r3, [r7, #12]
 8009170:	491a      	ldr	r1, [pc, #104]	@ (80091dc <vTaskSwitchContext+0xb4>)
 8009172:	68fa      	ldr	r2, [r7, #12]
 8009174:	4613      	mov	r3, r2
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	4413      	add	r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	440b      	add	r3, r1
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d0e3      	beq.n	800914c <vTaskSwitchContext+0x24>
 8009184:	68fa      	ldr	r2, [r7, #12]
 8009186:	4613      	mov	r3, r2
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	4413      	add	r3, r2
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	4a13      	ldr	r2, [pc, #76]	@ (80091dc <vTaskSwitchContext+0xb4>)
 8009190:	4413      	add	r3, r2
 8009192:	60bb      	str	r3, [r7, #8]
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	685a      	ldr	r2, [r3, #4]
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	605a      	str	r2, [r3, #4]
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	685a      	ldr	r2, [r3, #4]
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	3308      	adds	r3, #8
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d104      	bne.n	80091b4 <vTaskSwitchContext+0x8c>
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	685a      	ldr	r2, [r3, #4]
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	605a      	str	r2, [r3, #4]
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	4a09      	ldr	r2, [pc, #36]	@ (80091e0 <vTaskSwitchContext+0xb8>)
 80091bc:	6013      	str	r3, [r2, #0]
 80091be:	4a06      	ldr	r2, [pc, #24]	@ (80091d8 <vTaskSwitchContext+0xb0>)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	6013      	str	r3, [r2, #0]
}
 80091c4:	bf00      	nop
 80091c6:	3714      	adds	r7, #20
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr
 80091d0:	2000545c 	.word	0x2000545c
 80091d4:	20005448 	.word	0x20005448
 80091d8:	2000543c 	.word	0x2000543c
 80091dc:	20004f64 	.word	0x20004f64
 80091e0:	20004f60 	.word	0x20004f60

080091e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d10b      	bne.n	800920c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80091f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091f8:	f383 8811 	msr	BASEPRI, r3
 80091fc:	f3bf 8f6f 	isb	sy
 8009200:	f3bf 8f4f 	dsb	sy
 8009204:	60fb      	str	r3, [r7, #12]
}
 8009206:	bf00      	nop
 8009208:	bf00      	nop
 800920a:	e7fd      	b.n	8009208 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800920c:	4b07      	ldr	r3, [pc, #28]	@ (800922c <vTaskPlaceOnEventList+0x48>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	3318      	adds	r3, #24
 8009212:	4619      	mov	r1, r3
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f7fe fe70 	bl	8007efa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800921a:	2101      	movs	r1, #1
 800921c:	6838      	ldr	r0, [r7, #0]
 800921e:	f000 faa9 	bl	8009774 <prvAddCurrentTaskToDelayedList>
}
 8009222:	bf00      	nop
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	20004f60 	.word	0x20004f60

08009230 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009230:	b580      	push	{r7, lr}
 8009232:	b086      	sub	sp, #24
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d10b      	bne.n	800925a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009246:	f383 8811 	msr	BASEPRI, r3
 800924a:	f3bf 8f6f 	isb	sy
 800924e:	f3bf 8f4f 	dsb	sy
 8009252:	617b      	str	r3, [r7, #20]
}
 8009254:	bf00      	nop
 8009256:	bf00      	nop
 8009258:	e7fd      	b.n	8009256 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800925a:	4b0a      	ldr	r3, [pc, #40]	@ (8009284 <vTaskPlaceOnEventListRestricted+0x54>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	3318      	adds	r3, #24
 8009260:	4619      	mov	r1, r3
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	f7fe fe25 	bl	8007eb2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d002      	beq.n	8009274 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800926e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009272:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009274:	6879      	ldr	r1, [r7, #4]
 8009276:	68b8      	ldr	r0, [r7, #8]
 8009278:	f000 fa7c 	bl	8009774 <prvAddCurrentTaskToDelayedList>
	}
 800927c:	bf00      	nop
 800927e:	3718      	adds	r7, #24
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	20004f60 	.word	0x20004f60

08009288 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b086      	sub	sp, #24
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	68db      	ldr	r3, [r3, #12]
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d10b      	bne.n	80092b6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800929e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092a2:	f383 8811 	msr	BASEPRI, r3
 80092a6:	f3bf 8f6f 	isb	sy
 80092aa:	f3bf 8f4f 	dsb	sy
 80092ae:	60fb      	str	r3, [r7, #12]
}
 80092b0:	bf00      	nop
 80092b2:	bf00      	nop
 80092b4:	e7fd      	b.n	80092b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	3318      	adds	r3, #24
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7fe fe56 	bl	8007f6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092c0:	4b1d      	ldr	r3, [pc, #116]	@ (8009338 <xTaskRemoveFromEventList+0xb0>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d11d      	bne.n	8009304 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	3304      	adds	r3, #4
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7fe fe4d 	bl	8007f6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092d6:	4b19      	ldr	r3, [pc, #100]	@ (800933c <xTaskRemoveFromEventList+0xb4>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d903      	bls.n	80092e6 <xTaskRemoveFromEventList+0x5e>
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092e2:	4a16      	ldr	r2, [pc, #88]	@ (800933c <xTaskRemoveFromEventList+0xb4>)
 80092e4:	6013      	str	r3, [r2, #0]
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092ea:	4613      	mov	r3, r2
 80092ec:	009b      	lsls	r3, r3, #2
 80092ee:	4413      	add	r3, r2
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	4a13      	ldr	r2, [pc, #76]	@ (8009340 <xTaskRemoveFromEventList+0xb8>)
 80092f4:	441a      	add	r2, r3
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	3304      	adds	r3, #4
 80092fa:	4619      	mov	r1, r3
 80092fc:	4610      	mov	r0, r2
 80092fe:	f7fe fdd8 	bl	8007eb2 <vListInsertEnd>
 8009302:	e005      	b.n	8009310 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	3318      	adds	r3, #24
 8009308:	4619      	mov	r1, r3
 800930a:	480e      	ldr	r0, [pc, #56]	@ (8009344 <xTaskRemoveFromEventList+0xbc>)
 800930c:	f7fe fdd1 	bl	8007eb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009314:	4b0c      	ldr	r3, [pc, #48]	@ (8009348 <xTaskRemoveFromEventList+0xc0>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800931a:	429a      	cmp	r2, r3
 800931c:	d905      	bls.n	800932a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800931e:	2301      	movs	r3, #1
 8009320:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009322:	4b0a      	ldr	r3, [pc, #40]	@ (800934c <xTaskRemoveFromEventList+0xc4>)
 8009324:	2201      	movs	r2, #1
 8009326:	601a      	str	r2, [r3, #0]
 8009328:	e001      	b.n	800932e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800932a:	2300      	movs	r3, #0
 800932c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800932e:	697b      	ldr	r3, [r7, #20]
}
 8009330:	4618      	mov	r0, r3
 8009332:	3718      	adds	r7, #24
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	2000545c 	.word	0x2000545c
 800933c:	2000543c 	.word	0x2000543c
 8009340:	20004f64 	.word	0x20004f64
 8009344:	200053f4 	.word	0x200053f4
 8009348:	20004f60 	.word	0x20004f60
 800934c:	20005448 	.word	0x20005448

08009350 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d10b      	bne.n	8009376 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800935e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009362:	f383 8811 	msr	BASEPRI, r3
 8009366:	f3bf 8f6f 	isb	sy
 800936a:	f3bf 8f4f 	dsb	sy
 800936e:	60fb      	str	r3, [r7, #12]
}
 8009370:	bf00      	nop
 8009372:	bf00      	nop
 8009374:	e7fd      	b.n	8009372 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8009376:	f000 fedf 	bl	800a138 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800937a:	4b07      	ldr	r3, [pc, #28]	@ (8009398 <vTaskSetTimeOutState+0x48>)
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8009382:	4b06      	ldr	r3, [pc, #24]	@ (800939c <vTaskSetTimeOutState+0x4c>)
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800938a:	f000 ff07 	bl	800a19c <vPortExitCritical>
}
 800938e:	bf00      	nop
 8009390:	3710      	adds	r7, #16
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	2000544c 	.word	0x2000544c
 800939c:	20005438 	.word	0x20005438

080093a0 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80093a8:	4b06      	ldr	r3, [pc, #24]	@ (80093c4 <vTaskInternalSetTimeOutState+0x24>)
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80093b0:	4b05      	ldr	r3, [pc, #20]	@ (80093c8 <vTaskInternalSetTimeOutState+0x28>)
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	605a      	str	r2, [r3, #4]
}
 80093b8:	bf00      	nop
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr
 80093c4:	2000544c 	.word	0x2000544c
 80093c8:	20005438 	.word	0x20005438

080093cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b088      	sub	sp, #32
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10b      	bne.n	80093f4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80093dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093e0:	f383 8811 	msr	BASEPRI, r3
 80093e4:	f3bf 8f6f 	isb	sy
 80093e8:	f3bf 8f4f 	dsb	sy
 80093ec:	613b      	str	r3, [r7, #16]
}
 80093ee:	bf00      	nop
 80093f0:	bf00      	nop
 80093f2:	e7fd      	b.n	80093f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d10b      	bne.n	8009412 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80093fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093fe:	f383 8811 	msr	BASEPRI, r3
 8009402:	f3bf 8f6f 	isb	sy
 8009406:	f3bf 8f4f 	dsb	sy
 800940a:	60fb      	str	r3, [r7, #12]
}
 800940c:	bf00      	nop
 800940e:	bf00      	nop
 8009410:	e7fd      	b.n	800940e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009412:	f000 fe91 	bl	800a138 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009416:	4b1d      	ldr	r3, [pc, #116]	@ (800948c <xTaskCheckForTimeOut+0xc0>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	69ba      	ldr	r2, [r7, #24]
 8009422:	1ad3      	subs	r3, r2, r3
 8009424:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800942e:	d102      	bne.n	8009436 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009430:	2300      	movs	r3, #0
 8009432:	61fb      	str	r3, [r7, #28]
 8009434:	e023      	b.n	800947e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	4b15      	ldr	r3, [pc, #84]	@ (8009490 <xTaskCheckForTimeOut+0xc4>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	429a      	cmp	r2, r3
 8009440:	d007      	beq.n	8009452 <xTaskCheckForTimeOut+0x86>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	69ba      	ldr	r2, [r7, #24]
 8009448:	429a      	cmp	r2, r3
 800944a:	d302      	bcc.n	8009452 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800944c:	2301      	movs	r3, #1
 800944e:	61fb      	str	r3, [r7, #28]
 8009450:	e015      	b.n	800947e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	697a      	ldr	r2, [r7, #20]
 8009458:	429a      	cmp	r2, r3
 800945a:	d20b      	bcs.n	8009474 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	1ad2      	subs	r2, r2, r3
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f7ff ff99 	bl	80093a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800946e:	2300      	movs	r3, #0
 8009470:	61fb      	str	r3, [r7, #28]
 8009472:	e004      	b.n	800947e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	2200      	movs	r2, #0
 8009478:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800947a:	2301      	movs	r3, #1
 800947c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800947e:	f000 fe8d 	bl	800a19c <vPortExitCritical>

	return xReturn;
 8009482:	69fb      	ldr	r3, [r7, #28]
}
 8009484:	4618      	mov	r0, r3
 8009486:	3720      	adds	r7, #32
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}
 800948c:	20005438 	.word	0x20005438
 8009490:	2000544c 	.word	0x2000544c

08009494 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009494:	b480      	push	{r7}
 8009496:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009498:	4b03      	ldr	r3, [pc, #12]	@ (80094a8 <vTaskMissedYield+0x14>)
 800949a:	2201      	movs	r2, #1
 800949c:	601a      	str	r2, [r3, #0]
}
 800949e:	bf00      	nop
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr
 80094a8:	20005448 	.word	0x20005448

080094ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80094b4:	f000 f852 	bl	800955c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80094b8:	4b06      	ldr	r3, [pc, #24]	@ (80094d4 <prvIdleTask+0x28>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d9f9      	bls.n	80094b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80094c0:	4b05      	ldr	r3, [pc, #20]	@ (80094d8 <prvIdleTask+0x2c>)
 80094c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094c6:	601a      	str	r2, [r3, #0]
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80094d0:	e7f0      	b.n	80094b4 <prvIdleTask+0x8>
 80094d2:	bf00      	nop
 80094d4:	20004f64 	.word	0x20004f64
 80094d8:	e000ed04 	.word	0xe000ed04

080094dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094e2:	2300      	movs	r3, #0
 80094e4:	607b      	str	r3, [r7, #4]
 80094e6:	e00c      	b.n	8009502 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	4613      	mov	r3, r2
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	4413      	add	r3, r2
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	4a12      	ldr	r2, [pc, #72]	@ (800953c <prvInitialiseTaskLists+0x60>)
 80094f4:	4413      	add	r3, r2
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7fe fcae 	bl	8007e58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	3301      	adds	r3, #1
 8009500:	607b      	str	r3, [r7, #4]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2b37      	cmp	r3, #55	@ 0x37
 8009506:	d9ef      	bls.n	80094e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009508:	480d      	ldr	r0, [pc, #52]	@ (8009540 <prvInitialiseTaskLists+0x64>)
 800950a:	f7fe fca5 	bl	8007e58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800950e:	480d      	ldr	r0, [pc, #52]	@ (8009544 <prvInitialiseTaskLists+0x68>)
 8009510:	f7fe fca2 	bl	8007e58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009514:	480c      	ldr	r0, [pc, #48]	@ (8009548 <prvInitialiseTaskLists+0x6c>)
 8009516:	f7fe fc9f 	bl	8007e58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800951a:	480c      	ldr	r0, [pc, #48]	@ (800954c <prvInitialiseTaskLists+0x70>)
 800951c:	f7fe fc9c 	bl	8007e58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009520:	480b      	ldr	r0, [pc, #44]	@ (8009550 <prvInitialiseTaskLists+0x74>)
 8009522:	f7fe fc99 	bl	8007e58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009526:	4b0b      	ldr	r3, [pc, #44]	@ (8009554 <prvInitialiseTaskLists+0x78>)
 8009528:	4a05      	ldr	r2, [pc, #20]	@ (8009540 <prvInitialiseTaskLists+0x64>)
 800952a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800952c:	4b0a      	ldr	r3, [pc, #40]	@ (8009558 <prvInitialiseTaskLists+0x7c>)
 800952e:	4a05      	ldr	r2, [pc, #20]	@ (8009544 <prvInitialiseTaskLists+0x68>)
 8009530:	601a      	str	r2, [r3, #0]
}
 8009532:	bf00      	nop
 8009534:	3708      	adds	r7, #8
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	20004f64 	.word	0x20004f64
 8009540:	200053c4 	.word	0x200053c4
 8009544:	200053d8 	.word	0x200053d8
 8009548:	200053f4 	.word	0x200053f4
 800954c:	20005408 	.word	0x20005408
 8009550:	20005420 	.word	0x20005420
 8009554:	200053ec 	.word	0x200053ec
 8009558:	200053f0 	.word	0x200053f0

0800955c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009562:	e019      	b.n	8009598 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009564:	f000 fde8 	bl	800a138 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009568:	4b10      	ldr	r3, [pc, #64]	@ (80095ac <prvCheckTasksWaitingTermination+0x50>)
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	3304      	adds	r3, #4
 8009574:	4618      	mov	r0, r3
 8009576:	f7fe fcf9 	bl	8007f6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800957a:	4b0d      	ldr	r3, [pc, #52]	@ (80095b0 <prvCheckTasksWaitingTermination+0x54>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	3b01      	subs	r3, #1
 8009580:	4a0b      	ldr	r2, [pc, #44]	@ (80095b0 <prvCheckTasksWaitingTermination+0x54>)
 8009582:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009584:	4b0b      	ldr	r3, [pc, #44]	@ (80095b4 <prvCheckTasksWaitingTermination+0x58>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	3b01      	subs	r3, #1
 800958a:	4a0a      	ldr	r2, [pc, #40]	@ (80095b4 <prvCheckTasksWaitingTermination+0x58>)
 800958c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800958e:	f000 fe05 	bl	800a19c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 f810 	bl	80095b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009598:	4b06      	ldr	r3, [pc, #24]	@ (80095b4 <prvCheckTasksWaitingTermination+0x58>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d1e1      	bne.n	8009564 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80095a0:	bf00      	nop
 80095a2:	bf00      	nop
 80095a4:	3708      	adds	r7, #8
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	20005408 	.word	0x20005408
 80095b0:	20005434 	.word	0x20005434
 80095b4:	2000541c 	.word	0x2000541c

080095b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d108      	bne.n	80095dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095ce:	4618      	mov	r0, r3
 80095d0:	f000 ffa2 	bl	800a518 <vPortFree>
				vPortFree( pxTCB );
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 ff9f 	bl	800a518 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80095da:	e019      	b.n	8009610 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d103      	bne.n	80095ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 ff96 	bl	800a518 <vPortFree>
	}
 80095ec:	e010      	b.n	8009610 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80095f4:	2b02      	cmp	r3, #2
 80095f6:	d00b      	beq.n	8009610 <prvDeleteTCB+0x58>
	__asm volatile
 80095f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095fc:	f383 8811 	msr	BASEPRI, r3
 8009600:	f3bf 8f6f 	isb	sy
 8009604:	f3bf 8f4f 	dsb	sy
 8009608:	60fb      	str	r3, [r7, #12]
}
 800960a:	bf00      	nop
 800960c:	bf00      	nop
 800960e:	e7fd      	b.n	800960c <prvDeleteTCB+0x54>
	}
 8009610:	bf00      	nop
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800961e:	4b0c      	ldr	r3, [pc, #48]	@ (8009650 <prvResetNextTaskUnblockTime+0x38>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d104      	bne.n	8009632 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009628:	4b0a      	ldr	r3, [pc, #40]	@ (8009654 <prvResetNextTaskUnblockTime+0x3c>)
 800962a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800962e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009630:	e008      	b.n	8009644 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009632:	4b07      	ldr	r3, [pc, #28]	@ (8009650 <prvResetNextTaskUnblockTime+0x38>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	4a04      	ldr	r2, [pc, #16]	@ (8009654 <prvResetNextTaskUnblockTime+0x3c>)
 8009642:	6013      	str	r3, [r2, #0]
}
 8009644:	bf00      	nop
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr
 8009650:	200053ec 	.word	0x200053ec
 8009654:	20005454 	.word	0x20005454

08009658 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800965e:	4b0b      	ldr	r3, [pc, #44]	@ (800968c <xTaskGetSchedulerState+0x34>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d102      	bne.n	800966c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009666:	2301      	movs	r3, #1
 8009668:	607b      	str	r3, [r7, #4]
 800966a:	e008      	b.n	800967e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800966c:	4b08      	ldr	r3, [pc, #32]	@ (8009690 <xTaskGetSchedulerState+0x38>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d102      	bne.n	800967a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009674:	2302      	movs	r3, #2
 8009676:	607b      	str	r3, [r7, #4]
 8009678:	e001      	b.n	800967e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800967a:	2300      	movs	r3, #0
 800967c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800967e:	687b      	ldr	r3, [r7, #4]
	}
 8009680:	4618      	mov	r0, r3
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	20005440 	.word	0x20005440
 8009690:	2000545c 	.word	0x2000545c

08009694 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009694:	b580      	push	{r7, lr}
 8009696:	b086      	sub	sp, #24
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80096a0:	2300      	movs	r3, #0
 80096a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d058      	beq.n	800975c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80096aa:	4b2f      	ldr	r3, [pc, #188]	@ (8009768 <xTaskPriorityDisinherit+0xd4>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	693a      	ldr	r2, [r7, #16]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d00b      	beq.n	80096cc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80096b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b8:	f383 8811 	msr	BASEPRI, r3
 80096bc:	f3bf 8f6f 	isb	sy
 80096c0:	f3bf 8f4f 	dsb	sy
 80096c4:	60fb      	str	r3, [r7, #12]
}
 80096c6:	bf00      	nop
 80096c8:	bf00      	nop
 80096ca:	e7fd      	b.n	80096c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d10b      	bne.n	80096ec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80096d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d8:	f383 8811 	msr	BASEPRI, r3
 80096dc:	f3bf 8f6f 	isb	sy
 80096e0:	f3bf 8f4f 	dsb	sy
 80096e4:	60bb      	str	r3, [r7, #8]
}
 80096e6:	bf00      	nop
 80096e8:	bf00      	nop
 80096ea:	e7fd      	b.n	80096e8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096f0:	1e5a      	subs	r2, r3, #1
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096fe:	429a      	cmp	r2, r3
 8009700:	d02c      	beq.n	800975c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009706:	2b00      	cmp	r3, #0
 8009708:	d128      	bne.n	800975c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	3304      	adds	r3, #4
 800970e:	4618      	mov	r0, r3
 8009710:	f7fe fc2c 	bl	8007f6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009720:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800972c:	4b0f      	ldr	r3, [pc, #60]	@ (800976c <xTaskPriorityDisinherit+0xd8>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	429a      	cmp	r2, r3
 8009732:	d903      	bls.n	800973c <xTaskPriorityDisinherit+0xa8>
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009738:	4a0c      	ldr	r2, [pc, #48]	@ (800976c <xTaskPriorityDisinherit+0xd8>)
 800973a:	6013      	str	r3, [r2, #0]
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009740:	4613      	mov	r3, r2
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	4413      	add	r3, r2
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	4a09      	ldr	r2, [pc, #36]	@ (8009770 <xTaskPriorityDisinherit+0xdc>)
 800974a:	441a      	add	r2, r3
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	3304      	adds	r3, #4
 8009750:	4619      	mov	r1, r3
 8009752:	4610      	mov	r0, r2
 8009754:	f7fe fbad 	bl	8007eb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009758:	2301      	movs	r3, #1
 800975a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800975c:	697b      	ldr	r3, [r7, #20]
	}
 800975e:	4618      	mov	r0, r3
 8009760:	3718      	adds	r7, #24
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	20004f60 	.word	0x20004f60
 800976c:	2000543c 	.word	0x2000543c
 8009770:	20004f64 	.word	0x20004f64

08009774 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800977e:	4b21      	ldr	r3, [pc, #132]	@ (8009804 <prvAddCurrentTaskToDelayedList+0x90>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009784:	4b20      	ldr	r3, [pc, #128]	@ (8009808 <prvAddCurrentTaskToDelayedList+0x94>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	3304      	adds	r3, #4
 800978a:	4618      	mov	r0, r3
 800978c:	f7fe fbee 	bl	8007f6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009796:	d10a      	bne.n	80097ae <prvAddCurrentTaskToDelayedList+0x3a>
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d007      	beq.n	80097ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800979e:	4b1a      	ldr	r3, [pc, #104]	@ (8009808 <prvAddCurrentTaskToDelayedList+0x94>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	3304      	adds	r3, #4
 80097a4:	4619      	mov	r1, r3
 80097a6:	4819      	ldr	r0, [pc, #100]	@ (800980c <prvAddCurrentTaskToDelayedList+0x98>)
 80097a8:	f7fe fb83 	bl	8007eb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80097ac:	e026      	b.n	80097fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80097ae:	68fa      	ldr	r2, [r7, #12]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4413      	add	r3, r2
 80097b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80097b6:	4b14      	ldr	r3, [pc, #80]	@ (8009808 <prvAddCurrentTaskToDelayedList+0x94>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68ba      	ldr	r2, [r7, #8]
 80097bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80097be:	68ba      	ldr	r2, [r7, #8]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d209      	bcs.n	80097da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097c6:	4b12      	ldr	r3, [pc, #72]	@ (8009810 <prvAddCurrentTaskToDelayedList+0x9c>)
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	4b0f      	ldr	r3, [pc, #60]	@ (8009808 <prvAddCurrentTaskToDelayedList+0x94>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	3304      	adds	r3, #4
 80097d0:	4619      	mov	r1, r3
 80097d2:	4610      	mov	r0, r2
 80097d4:	f7fe fb91 	bl	8007efa <vListInsert>
}
 80097d8:	e010      	b.n	80097fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097da:	4b0e      	ldr	r3, [pc, #56]	@ (8009814 <prvAddCurrentTaskToDelayedList+0xa0>)
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	4b0a      	ldr	r3, [pc, #40]	@ (8009808 <prvAddCurrentTaskToDelayedList+0x94>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	3304      	adds	r3, #4
 80097e4:	4619      	mov	r1, r3
 80097e6:	4610      	mov	r0, r2
 80097e8:	f7fe fb87 	bl	8007efa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80097ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009818 <prvAddCurrentTaskToDelayedList+0xa4>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68ba      	ldr	r2, [r7, #8]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d202      	bcs.n	80097fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80097f6:	4a08      	ldr	r2, [pc, #32]	@ (8009818 <prvAddCurrentTaskToDelayedList+0xa4>)
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	6013      	str	r3, [r2, #0]
}
 80097fc:	bf00      	nop
 80097fe:	3710      	adds	r7, #16
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}
 8009804:	20005438 	.word	0x20005438
 8009808:	20004f60 	.word	0x20004f60
 800980c:	20005420 	.word	0x20005420
 8009810:	200053f0 	.word	0x200053f0
 8009814:	200053ec 	.word	0x200053ec
 8009818:	20005454 	.word	0x20005454

0800981c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b08a      	sub	sp, #40	@ 0x28
 8009820:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009822:	2300      	movs	r3, #0
 8009824:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009826:	f000 fb13 	bl	8009e50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800982a:	4b1d      	ldr	r3, [pc, #116]	@ (80098a0 <xTimerCreateTimerTask+0x84>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d021      	beq.n	8009876 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009832:	2300      	movs	r3, #0
 8009834:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009836:	2300      	movs	r3, #0
 8009838:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800983a:	1d3a      	adds	r2, r7, #4
 800983c:	f107 0108 	add.w	r1, r7, #8
 8009840:	f107 030c 	add.w	r3, r7, #12
 8009844:	4618      	mov	r0, r3
 8009846:	f7fe faed 	bl	8007e24 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800984a:	6879      	ldr	r1, [r7, #4]
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	68fa      	ldr	r2, [r7, #12]
 8009850:	9202      	str	r2, [sp, #8]
 8009852:	9301      	str	r3, [sp, #4]
 8009854:	2302      	movs	r3, #2
 8009856:	9300      	str	r3, [sp, #0]
 8009858:	2300      	movs	r3, #0
 800985a:	460a      	mov	r2, r1
 800985c:	4911      	ldr	r1, [pc, #68]	@ (80098a4 <xTimerCreateTimerTask+0x88>)
 800985e:	4812      	ldr	r0, [pc, #72]	@ (80098a8 <xTimerCreateTimerTask+0x8c>)
 8009860:	f7ff f8a8 	bl	80089b4 <xTaskCreateStatic>
 8009864:	4603      	mov	r3, r0
 8009866:	4a11      	ldr	r2, [pc, #68]	@ (80098ac <xTimerCreateTimerTask+0x90>)
 8009868:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800986a:	4b10      	ldr	r3, [pc, #64]	@ (80098ac <xTimerCreateTimerTask+0x90>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d001      	beq.n	8009876 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009872:	2301      	movs	r3, #1
 8009874:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d10b      	bne.n	8009894 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800987c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009880:	f383 8811 	msr	BASEPRI, r3
 8009884:	f3bf 8f6f 	isb	sy
 8009888:	f3bf 8f4f 	dsb	sy
 800988c:	613b      	str	r3, [r7, #16]
}
 800988e:	bf00      	nop
 8009890:	bf00      	nop
 8009892:	e7fd      	b.n	8009890 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009894:	697b      	ldr	r3, [r7, #20]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3718      	adds	r7, #24
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	20005490 	.word	0x20005490
 80098a4:	08018bf0 	.word	0x08018bf0
 80098a8:	080099e9 	.word	0x080099e9
 80098ac:	20005494 	.word	0x20005494

080098b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b08a      	sub	sp, #40	@ 0x28
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	607a      	str	r2, [r7, #4]
 80098bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80098be:	2300      	movs	r3, #0
 80098c0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d10b      	bne.n	80098e0 <xTimerGenericCommand+0x30>
	__asm volatile
 80098c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098cc:	f383 8811 	msr	BASEPRI, r3
 80098d0:	f3bf 8f6f 	isb	sy
 80098d4:	f3bf 8f4f 	dsb	sy
 80098d8:	623b      	str	r3, [r7, #32]
}
 80098da:	bf00      	nop
 80098dc:	bf00      	nop
 80098de:	e7fd      	b.n	80098dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80098e0:	4b19      	ldr	r3, [pc, #100]	@ (8009948 <xTimerGenericCommand+0x98>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d02a      	beq.n	800993e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	2b05      	cmp	r3, #5
 80098f8:	dc18      	bgt.n	800992c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80098fa:	f7ff fead 	bl	8009658 <xTaskGetSchedulerState>
 80098fe:	4603      	mov	r3, r0
 8009900:	2b02      	cmp	r3, #2
 8009902:	d109      	bne.n	8009918 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009904:	4b10      	ldr	r3, [pc, #64]	@ (8009948 <xTimerGenericCommand+0x98>)
 8009906:	6818      	ldr	r0, [r3, #0]
 8009908:	f107 0110 	add.w	r1, r7, #16
 800990c:	2300      	movs	r3, #0
 800990e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009910:	f7fe fc60 	bl	80081d4 <xQueueGenericSend>
 8009914:	6278      	str	r0, [r7, #36]	@ 0x24
 8009916:	e012      	b.n	800993e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009918:	4b0b      	ldr	r3, [pc, #44]	@ (8009948 <xTimerGenericCommand+0x98>)
 800991a:	6818      	ldr	r0, [r3, #0]
 800991c:	f107 0110 	add.w	r1, r7, #16
 8009920:	2300      	movs	r3, #0
 8009922:	2200      	movs	r2, #0
 8009924:	f7fe fc56 	bl	80081d4 <xQueueGenericSend>
 8009928:	6278      	str	r0, [r7, #36]	@ 0x24
 800992a:	e008      	b.n	800993e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800992c:	4b06      	ldr	r3, [pc, #24]	@ (8009948 <xTimerGenericCommand+0x98>)
 800992e:	6818      	ldr	r0, [r3, #0]
 8009930:	f107 0110 	add.w	r1, r7, #16
 8009934:	2300      	movs	r3, #0
 8009936:	683a      	ldr	r2, [r7, #0]
 8009938:	f7fe fd4e 	bl	80083d8 <xQueueGenericSendFromISR>
 800993c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800993e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009940:	4618      	mov	r0, r3
 8009942:	3728      	adds	r7, #40	@ 0x28
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}
 8009948:	20005490 	.word	0x20005490

0800994c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b088      	sub	sp, #32
 8009950:	af02      	add	r7, sp, #8
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009956:	4b23      	ldr	r3, [pc, #140]	@ (80099e4 <prvProcessExpiredTimer+0x98>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	68db      	ldr	r3, [r3, #12]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	3304      	adds	r3, #4
 8009964:	4618      	mov	r0, r3
 8009966:	f7fe fb01 	bl	8007f6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009970:	f003 0304 	and.w	r3, r3, #4
 8009974:	2b00      	cmp	r3, #0
 8009976:	d023      	beq.n	80099c0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	699a      	ldr	r2, [r3, #24]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	18d1      	adds	r1, r2, r3
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	683a      	ldr	r2, [r7, #0]
 8009984:	6978      	ldr	r0, [r7, #20]
 8009986:	f000 f8d5 	bl	8009b34 <prvInsertTimerInActiveList>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d020      	beq.n	80099d2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009990:	2300      	movs	r3, #0
 8009992:	9300      	str	r3, [sp, #0]
 8009994:	2300      	movs	r3, #0
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	2100      	movs	r1, #0
 800999a:	6978      	ldr	r0, [r7, #20]
 800999c:	f7ff ff88 	bl	80098b0 <xTimerGenericCommand>
 80099a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d114      	bne.n	80099d2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80099a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ac:	f383 8811 	msr	BASEPRI, r3
 80099b0:	f3bf 8f6f 	isb	sy
 80099b4:	f3bf 8f4f 	dsb	sy
 80099b8:	60fb      	str	r3, [r7, #12]
}
 80099ba:	bf00      	nop
 80099bc:	bf00      	nop
 80099be:	e7fd      	b.n	80099bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099c6:	f023 0301 	bic.w	r3, r3, #1
 80099ca:	b2da      	uxtb	r2, r3
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	6a1b      	ldr	r3, [r3, #32]
 80099d6:	6978      	ldr	r0, [r7, #20]
 80099d8:	4798      	blx	r3
}
 80099da:	bf00      	nop
 80099dc:	3718      	adds	r7, #24
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	20005488 	.word	0x20005488

080099e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80099f0:	f107 0308 	add.w	r3, r7, #8
 80099f4:	4618      	mov	r0, r3
 80099f6:	f000 f859 	bl	8009aac <prvGetNextExpireTime>
 80099fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	4619      	mov	r1, r3
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	f000 f805 	bl	8009a10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009a06:	f000 f8d7 	bl	8009bb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a0a:	bf00      	nop
 8009a0c:	e7f0      	b.n	80099f0 <prvTimerTask+0x8>
	...

08009a10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009a1a:	f7ff fa0f 	bl	8008e3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a1e:	f107 0308 	add.w	r3, r7, #8
 8009a22:	4618      	mov	r0, r3
 8009a24:	f000 f866 	bl	8009af4 <prvSampleTimeNow>
 8009a28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d130      	bne.n	8009a92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d10a      	bne.n	8009a4c <prvProcessTimerOrBlockTask+0x3c>
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d806      	bhi.n	8009a4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009a3e:	f7ff fa0b 	bl	8008e58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009a42:	68f9      	ldr	r1, [r7, #12]
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f7ff ff81 	bl	800994c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009a4a:	e024      	b.n	8009a96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d008      	beq.n	8009a64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009a52:	4b13      	ldr	r3, [pc, #76]	@ (8009aa0 <prvProcessTimerOrBlockTask+0x90>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d101      	bne.n	8009a60 <prvProcessTimerOrBlockTask+0x50>
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e000      	b.n	8009a62 <prvProcessTimerOrBlockTask+0x52>
 8009a60:	2300      	movs	r3, #0
 8009a62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009a64:	4b0f      	ldr	r3, [pc, #60]	@ (8009aa4 <prvProcessTimerOrBlockTask+0x94>)
 8009a66:	6818      	ldr	r0, [r3, #0]
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	1ad3      	subs	r3, r2, r3
 8009a6e:	683a      	ldr	r2, [r7, #0]
 8009a70:	4619      	mov	r1, r3
 8009a72:	f7fe ff6b 	bl	800894c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009a76:	f7ff f9ef 	bl	8008e58 <xTaskResumeAll>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d10a      	bne.n	8009a96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009a80:	4b09      	ldr	r3, [pc, #36]	@ (8009aa8 <prvProcessTimerOrBlockTask+0x98>)
 8009a82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a86:	601a      	str	r2, [r3, #0]
 8009a88:	f3bf 8f4f 	dsb	sy
 8009a8c:	f3bf 8f6f 	isb	sy
}
 8009a90:	e001      	b.n	8009a96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009a92:	f7ff f9e1 	bl	8008e58 <xTaskResumeAll>
}
 8009a96:	bf00      	nop
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	2000548c 	.word	0x2000548c
 8009aa4:	20005490 	.word	0x20005490
 8009aa8:	e000ed04 	.word	0xe000ed04

08009aac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009aac:	b480      	push	{r7}
 8009aae:	b085      	sub	sp, #20
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8009af0 <prvGetNextExpireTime+0x44>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d101      	bne.n	8009ac2 <prvGetNextExpireTime+0x16>
 8009abe:	2201      	movs	r2, #1
 8009ac0:	e000      	b.n	8009ac4 <prvGetNextExpireTime+0x18>
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d105      	bne.n	8009adc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ad0:	4b07      	ldr	r3, [pc, #28]	@ (8009af0 <prvGetNextExpireTime+0x44>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	68db      	ldr	r3, [r3, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	60fb      	str	r3, [r7, #12]
 8009ada:	e001      	b.n	8009ae0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009adc:	2300      	movs	r3, #0
 8009ade:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3714      	adds	r7, #20
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr
 8009aee:	bf00      	nop
 8009af0:	20005488 	.word	0x20005488

08009af4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009afc:	f7ff fa4a 	bl	8008f94 <xTaskGetTickCount>
 8009b00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009b02:	4b0b      	ldr	r3, [pc, #44]	@ (8009b30 <prvSampleTimeNow+0x3c>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	68fa      	ldr	r2, [r7, #12]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d205      	bcs.n	8009b18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009b0c:	f000 f93a 	bl	8009d84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	601a      	str	r2, [r3, #0]
 8009b16:	e002      	b.n	8009b1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009b1e:	4a04      	ldr	r2, [pc, #16]	@ (8009b30 <prvSampleTimeNow+0x3c>)
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009b24:	68fb      	ldr	r3, [r7, #12]
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3710      	adds	r7, #16
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	20005498 	.word	0x20005498

08009b34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b086      	sub	sp, #24
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	607a      	str	r2, [r7, #4]
 8009b40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009b42:	2300      	movs	r3, #0
 8009b44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	68ba      	ldr	r2, [r7, #8]
 8009b4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009b52:	68ba      	ldr	r2, [r7, #8]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d812      	bhi.n	8009b80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	1ad2      	subs	r2, r2, r3
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	699b      	ldr	r3, [r3, #24]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d302      	bcc.n	8009b6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	617b      	str	r3, [r7, #20]
 8009b6c:	e01b      	b.n	8009ba6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009b6e:	4b10      	ldr	r3, [pc, #64]	@ (8009bb0 <prvInsertTimerInActiveList+0x7c>)
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	3304      	adds	r3, #4
 8009b76:	4619      	mov	r1, r3
 8009b78:	4610      	mov	r0, r2
 8009b7a:	f7fe f9be 	bl	8007efa <vListInsert>
 8009b7e:	e012      	b.n	8009ba6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d206      	bcs.n	8009b96 <prvInsertTimerInActiveList+0x62>
 8009b88:	68ba      	ldr	r2, [r7, #8]
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d302      	bcc.n	8009b96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009b90:	2301      	movs	r3, #1
 8009b92:	617b      	str	r3, [r7, #20]
 8009b94:	e007      	b.n	8009ba6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b96:	4b07      	ldr	r3, [pc, #28]	@ (8009bb4 <prvInsertTimerInActiveList+0x80>)
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	3304      	adds	r3, #4
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	4610      	mov	r0, r2
 8009ba2:	f7fe f9aa 	bl	8007efa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009ba6:	697b      	ldr	r3, [r7, #20]
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3718      	adds	r7, #24
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	2000548c 	.word	0x2000548c
 8009bb4:	20005488 	.word	0x20005488

08009bb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b08e      	sub	sp, #56	@ 0x38
 8009bbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009bbe:	e0ce      	b.n	8009d5e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	da19      	bge.n	8009bfa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009bc6:	1d3b      	adds	r3, r7, #4
 8009bc8:	3304      	adds	r3, #4
 8009bca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d10b      	bne.n	8009bea <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd6:	f383 8811 	msr	BASEPRI, r3
 8009bda:	f3bf 8f6f 	isb	sy
 8009bde:	f3bf 8f4f 	dsb	sy
 8009be2:	61fb      	str	r3, [r7, #28]
}
 8009be4:	bf00      	nop
 8009be6:	bf00      	nop
 8009be8:	e7fd      	b.n	8009be6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bf0:	6850      	ldr	r0, [r2, #4]
 8009bf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bf4:	6892      	ldr	r2, [r2, #8]
 8009bf6:	4611      	mov	r1, r2
 8009bf8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	f2c0 80ae 	blt.w	8009d5e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c08:	695b      	ldr	r3, [r3, #20]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d004      	beq.n	8009c18 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c10:	3304      	adds	r3, #4
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7fe f9aa 	bl	8007f6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c18:	463b      	mov	r3, r7
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7ff ff6a 	bl	8009af4 <prvSampleTimeNow>
 8009c20:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2b09      	cmp	r3, #9
 8009c26:	f200 8097 	bhi.w	8009d58 <prvProcessReceivedCommands+0x1a0>
 8009c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8009c30 <prvProcessReceivedCommands+0x78>)
 8009c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c30:	08009c59 	.word	0x08009c59
 8009c34:	08009c59 	.word	0x08009c59
 8009c38:	08009c59 	.word	0x08009c59
 8009c3c:	08009ccf 	.word	0x08009ccf
 8009c40:	08009ce3 	.word	0x08009ce3
 8009c44:	08009d2f 	.word	0x08009d2f
 8009c48:	08009c59 	.word	0x08009c59
 8009c4c:	08009c59 	.word	0x08009c59
 8009c50:	08009ccf 	.word	0x08009ccf
 8009c54:	08009ce3 	.word	0x08009ce3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c5e:	f043 0301 	orr.w	r3, r3, #1
 8009c62:	b2da      	uxtb	r2, r3
 8009c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009c6a:	68ba      	ldr	r2, [r7, #8]
 8009c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c6e:	699b      	ldr	r3, [r3, #24]
 8009c70:	18d1      	adds	r1, r2, r3
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c78:	f7ff ff5c 	bl	8009b34 <prvInsertTimerInActiveList>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d06c      	beq.n	8009d5c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c84:	6a1b      	ldr	r3, [r3, #32]
 8009c86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c90:	f003 0304 	and.w	r3, r3, #4
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d061      	beq.n	8009d5c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009c98:	68ba      	ldr	r2, [r7, #8]
 8009c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c9c:	699b      	ldr	r3, [r3, #24]
 8009c9e:	441a      	add	r2, r3
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	9300      	str	r3, [sp, #0]
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	2100      	movs	r1, #0
 8009ca8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009caa:	f7ff fe01 	bl	80098b0 <xTimerGenericCommand>
 8009cae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009cb0:	6a3b      	ldr	r3, [r7, #32]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d152      	bne.n	8009d5c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cba:	f383 8811 	msr	BASEPRI, r3
 8009cbe:	f3bf 8f6f 	isb	sy
 8009cc2:	f3bf 8f4f 	dsb	sy
 8009cc6:	61bb      	str	r3, [r7, #24]
}
 8009cc8:	bf00      	nop
 8009cca:	bf00      	nop
 8009ccc:	e7fd      	b.n	8009cca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009cd4:	f023 0301 	bic.w	r3, r3, #1
 8009cd8:	b2da      	uxtb	r2, r3
 8009cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cdc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009ce0:	e03d      	b.n	8009d5e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ce4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ce8:	f043 0301 	orr.w	r3, r3, #1
 8009cec:	b2da      	uxtb	r2, r3
 8009cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cf0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009cf4:	68ba      	ldr	r2, [r7, #8]
 8009cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cf8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cfc:	699b      	ldr	r3, [r3, #24]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d10b      	bne.n	8009d1a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d06:	f383 8811 	msr	BASEPRI, r3
 8009d0a:	f3bf 8f6f 	isb	sy
 8009d0e:	f3bf 8f4f 	dsb	sy
 8009d12:	617b      	str	r3, [r7, #20]
}
 8009d14:	bf00      	nop
 8009d16:	bf00      	nop
 8009d18:	e7fd      	b.n	8009d16 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d1c:	699a      	ldr	r2, [r3, #24]
 8009d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d20:	18d1      	adds	r1, r2, r3
 8009d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d28:	f7ff ff04 	bl	8009b34 <prvInsertTimerInActiveList>
					break;
 8009d2c:	e017      	b.n	8009d5e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d34:	f003 0302 	and.w	r3, r3, #2
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d103      	bne.n	8009d44 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009d3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009d3e:	f000 fbeb 	bl	800a518 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009d42:	e00c      	b.n	8009d5e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d4a:	f023 0301 	bic.w	r3, r3, #1
 8009d4e:	b2da      	uxtb	r2, r3
 8009d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009d56:	e002      	b.n	8009d5e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009d58:	bf00      	nop
 8009d5a:	e000      	b.n	8009d5e <prvProcessReceivedCommands+0x1a6>
					break;
 8009d5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d5e:	4b08      	ldr	r3, [pc, #32]	@ (8009d80 <prvProcessReceivedCommands+0x1c8>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	1d39      	adds	r1, r7, #4
 8009d64:	2200      	movs	r2, #0
 8009d66:	4618      	mov	r0, r3
 8009d68:	f7fe fbd4 	bl	8008514 <xQueueReceive>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f47f af26 	bne.w	8009bc0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009d74:	bf00      	nop
 8009d76:	bf00      	nop
 8009d78:	3730      	adds	r7, #48	@ 0x30
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	20005490 	.word	0x20005490

08009d84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b088      	sub	sp, #32
 8009d88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d8a:	e049      	b.n	8009e20 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d8c:	4b2e      	ldr	r3, [pc, #184]	@ (8009e48 <prvSwitchTimerLists+0xc4>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d96:	4b2c      	ldr	r3, [pc, #176]	@ (8009e48 <prvSwitchTimerLists+0xc4>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	3304      	adds	r3, #4
 8009da4:	4618      	mov	r0, r3
 8009da6:	f7fe f8e1 	bl	8007f6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	6a1b      	ldr	r3, [r3, #32]
 8009dae:	68f8      	ldr	r0, [r7, #12]
 8009db0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009db8:	f003 0304 	and.w	r3, r3, #4
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d02f      	beq.n	8009e20 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	699b      	ldr	r3, [r3, #24]
 8009dc4:	693a      	ldr	r2, [r7, #16]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009dca:	68ba      	ldr	r2, [r7, #8]
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d90e      	bls.n	8009df0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	68ba      	ldr	r2, [r7, #8]
 8009dd6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009dde:	4b1a      	ldr	r3, [pc, #104]	@ (8009e48 <prvSwitchTimerLists+0xc4>)
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	3304      	adds	r3, #4
 8009de6:	4619      	mov	r1, r3
 8009de8:	4610      	mov	r0, r2
 8009dea:	f7fe f886 	bl	8007efa <vListInsert>
 8009dee:	e017      	b.n	8009e20 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009df0:	2300      	movs	r3, #0
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	2300      	movs	r3, #0
 8009df6:	693a      	ldr	r2, [r7, #16]
 8009df8:	2100      	movs	r1, #0
 8009dfa:	68f8      	ldr	r0, [r7, #12]
 8009dfc:	f7ff fd58 	bl	80098b0 <xTimerGenericCommand>
 8009e00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d10b      	bne.n	8009e20 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e0c:	f383 8811 	msr	BASEPRI, r3
 8009e10:	f3bf 8f6f 	isb	sy
 8009e14:	f3bf 8f4f 	dsb	sy
 8009e18:	603b      	str	r3, [r7, #0]
}
 8009e1a:	bf00      	nop
 8009e1c:	bf00      	nop
 8009e1e:	e7fd      	b.n	8009e1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e20:	4b09      	ldr	r3, [pc, #36]	@ (8009e48 <prvSwitchTimerLists+0xc4>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1b0      	bne.n	8009d8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009e2a:	4b07      	ldr	r3, [pc, #28]	@ (8009e48 <prvSwitchTimerLists+0xc4>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009e30:	4b06      	ldr	r3, [pc, #24]	@ (8009e4c <prvSwitchTimerLists+0xc8>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a04      	ldr	r2, [pc, #16]	@ (8009e48 <prvSwitchTimerLists+0xc4>)
 8009e36:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009e38:	4a04      	ldr	r2, [pc, #16]	@ (8009e4c <prvSwitchTimerLists+0xc8>)
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	6013      	str	r3, [r2, #0]
}
 8009e3e:	bf00      	nop
 8009e40:	3718      	adds	r7, #24
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	20005488 	.word	0x20005488
 8009e4c:	2000548c 	.word	0x2000548c

08009e50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009e56:	f000 f96f 	bl	800a138 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009e5a:	4b15      	ldr	r3, [pc, #84]	@ (8009eb0 <prvCheckForValidListAndQueue+0x60>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d120      	bne.n	8009ea4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009e62:	4814      	ldr	r0, [pc, #80]	@ (8009eb4 <prvCheckForValidListAndQueue+0x64>)
 8009e64:	f7fd fff8 	bl	8007e58 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009e68:	4813      	ldr	r0, [pc, #76]	@ (8009eb8 <prvCheckForValidListAndQueue+0x68>)
 8009e6a:	f7fd fff5 	bl	8007e58 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009e6e:	4b13      	ldr	r3, [pc, #76]	@ (8009ebc <prvCheckForValidListAndQueue+0x6c>)
 8009e70:	4a10      	ldr	r2, [pc, #64]	@ (8009eb4 <prvCheckForValidListAndQueue+0x64>)
 8009e72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009e74:	4b12      	ldr	r3, [pc, #72]	@ (8009ec0 <prvCheckForValidListAndQueue+0x70>)
 8009e76:	4a10      	ldr	r2, [pc, #64]	@ (8009eb8 <prvCheckForValidListAndQueue+0x68>)
 8009e78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	9300      	str	r3, [sp, #0]
 8009e7e:	4b11      	ldr	r3, [pc, #68]	@ (8009ec4 <prvCheckForValidListAndQueue+0x74>)
 8009e80:	4a11      	ldr	r2, [pc, #68]	@ (8009ec8 <prvCheckForValidListAndQueue+0x78>)
 8009e82:	2110      	movs	r1, #16
 8009e84:	200a      	movs	r0, #10
 8009e86:	f7fe f905 	bl	8008094 <xQueueGenericCreateStatic>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	4a08      	ldr	r2, [pc, #32]	@ (8009eb0 <prvCheckForValidListAndQueue+0x60>)
 8009e8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009e90:	4b07      	ldr	r3, [pc, #28]	@ (8009eb0 <prvCheckForValidListAndQueue+0x60>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d005      	beq.n	8009ea4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009e98:	4b05      	ldr	r3, [pc, #20]	@ (8009eb0 <prvCheckForValidListAndQueue+0x60>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	490b      	ldr	r1, [pc, #44]	@ (8009ecc <prvCheckForValidListAndQueue+0x7c>)
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f7fe fd2a 	bl	80088f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ea4:	f000 f97a 	bl	800a19c <vPortExitCritical>
}
 8009ea8:	bf00      	nop
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	20005490 	.word	0x20005490
 8009eb4:	20005460 	.word	0x20005460
 8009eb8:	20005474 	.word	0x20005474
 8009ebc:	20005488 	.word	0x20005488
 8009ec0:	2000548c 	.word	0x2000548c
 8009ec4:	2000553c 	.word	0x2000553c
 8009ec8:	2000549c 	.word	0x2000549c
 8009ecc:	08018bf8 	.word	0x08018bf8

08009ed0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b085      	sub	sp, #20
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	3b04      	subs	r3, #4
 8009ee0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009ee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	3b04      	subs	r3, #4
 8009eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	f023 0201 	bic.w	r2, r3, #1
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	3b04      	subs	r3, #4
 8009efe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009f00:	4a0c      	ldr	r2, [pc, #48]	@ (8009f34 <pxPortInitialiseStack+0x64>)
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	3b14      	subs	r3, #20
 8009f0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	3b04      	subs	r3, #4
 8009f16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f06f 0202 	mvn.w	r2, #2
 8009f1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	3b20      	subs	r3, #32
 8009f24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009f26:	68fb      	ldr	r3, [r7, #12]
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3714      	adds	r7, #20
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr
 8009f34:	08009f39 	.word	0x08009f39

08009f38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f42:	4b13      	ldr	r3, [pc, #76]	@ (8009f90 <prvTaskExitError+0x58>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009f4a:	d00b      	beq.n	8009f64 <prvTaskExitError+0x2c>
	__asm volatile
 8009f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f50:	f383 8811 	msr	BASEPRI, r3
 8009f54:	f3bf 8f6f 	isb	sy
 8009f58:	f3bf 8f4f 	dsb	sy
 8009f5c:	60fb      	str	r3, [r7, #12]
}
 8009f5e:	bf00      	nop
 8009f60:	bf00      	nop
 8009f62:	e7fd      	b.n	8009f60 <prvTaskExitError+0x28>
	__asm volatile
 8009f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f68:	f383 8811 	msr	BASEPRI, r3
 8009f6c:	f3bf 8f6f 	isb	sy
 8009f70:	f3bf 8f4f 	dsb	sy
 8009f74:	60bb      	str	r3, [r7, #8]
}
 8009f76:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009f78:	bf00      	nop
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d0fc      	beq.n	8009f7a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009f80:	bf00      	nop
 8009f82:	bf00      	nop
 8009f84:	3714      	adds	r7, #20
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop
 8009f90:	20000010 	.word	0x20000010
	...

08009fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009fa0:	4b07      	ldr	r3, [pc, #28]	@ (8009fc0 <pxCurrentTCBConst2>)
 8009fa2:	6819      	ldr	r1, [r3, #0]
 8009fa4:	6808      	ldr	r0, [r1, #0]
 8009fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009faa:	f380 8809 	msr	PSP, r0
 8009fae:	f3bf 8f6f 	isb	sy
 8009fb2:	f04f 0000 	mov.w	r0, #0
 8009fb6:	f380 8811 	msr	BASEPRI, r0
 8009fba:	4770      	bx	lr
 8009fbc:	f3af 8000 	nop.w

08009fc0 <pxCurrentTCBConst2>:
 8009fc0:	20004f60 	.word	0x20004f60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009fc4:	bf00      	nop
 8009fc6:	bf00      	nop

08009fc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009fc8:	4808      	ldr	r0, [pc, #32]	@ (8009fec <prvPortStartFirstTask+0x24>)
 8009fca:	6800      	ldr	r0, [r0, #0]
 8009fcc:	6800      	ldr	r0, [r0, #0]
 8009fce:	f380 8808 	msr	MSP, r0
 8009fd2:	f04f 0000 	mov.w	r0, #0
 8009fd6:	f380 8814 	msr	CONTROL, r0
 8009fda:	b662      	cpsie	i
 8009fdc:	b661      	cpsie	f
 8009fde:	f3bf 8f4f 	dsb	sy
 8009fe2:	f3bf 8f6f 	isb	sy
 8009fe6:	df00      	svc	0
 8009fe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009fea:	bf00      	nop
 8009fec:	e000ed08 	.word	0xe000ed08

08009ff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b086      	sub	sp, #24
 8009ff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009ff6:	4b47      	ldr	r3, [pc, #284]	@ (800a114 <xPortStartScheduler+0x124>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4a47      	ldr	r2, [pc, #284]	@ (800a118 <xPortStartScheduler+0x128>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d10b      	bne.n	800a018 <xPortStartScheduler+0x28>
	__asm volatile
 800a000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a004:	f383 8811 	msr	BASEPRI, r3
 800a008:	f3bf 8f6f 	isb	sy
 800a00c:	f3bf 8f4f 	dsb	sy
 800a010:	613b      	str	r3, [r7, #16]
}
 800a012:	bf00      	nop
 800a014:	bf00      	nop
 800a016:	e7fd      	b.n	800a014 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a018:	4b3e      	ldr	r3, [pc, #248]	@ (800a114 <xPortStartScheduler+0x124>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a3f      	ldr	r2, [pc, #252]	@ (800a11c <xPortStartScheduler+0x12c>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d10b      	bne.n	800a03a <xPortStartScheduler+0x4a>
	__asm volatile
 800a022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a026:	f383 8811 	msr	BASEPRI, r3
 800a02a:	f3bf 8f6f 	isb	sy
 800a02e:	f3bf 8f4f 	dsb	sy
 800a032:	60fb      	str	r3, [r7, #12]
}
 800a034:	bf00      	nop
 800a036:	bf00      	nop
 800a038:	e7fd      	b.n	800a036 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a03a:	4b39      	ldr	r3, [pc, #228]	@ (800a120 <xPortStartScheduler+0x130>)
 800a03c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	b2db      	uxtb	r3, r3
 800a044:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	22ff      	movs	r2, #255	@ 0xff
 800a04a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	b2db      	uxtb	r3, r3
 800a052:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a054:	78fb      	ldrb	r3, [r7, #3]
 800a056:	b2db      	uxtb	r3, r3
 800a058:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a05c:	b2da      	uxtb	r2, r3
 800a05e:	4b31      	ldr	r3, [pc, #196]	@ (800a124 <xPortStartScheduler+0x134>)
 800a060:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a062:	4b31      	ldr	r3, [pc, #196]	@ (800a128 <xPortStartScheduler+0x138>)
 800a064:	2207      	movs	r2, #7
 800a066:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a068:	e009      	b.n	800a07e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a06a:	4b2f      	ldr	r3, [pc, #188]	@ (800a128 <xPortStartScheduler+0x138>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	3b01      	subs	r3, #1
 800a070:	4a2d      	ldr	r2, [pc, #180]	@ (800a128 <xPortStartScheduler+0x138>)
 800a072:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a074:	78fb      	ldrb	r3, [r7, #3]
 800a076:	b2db      	uxtb	r3, r3
 800a078:	005b      	lsls	r3, r3, #1
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a07e:	78fb      	ldrb	r3, [r7, #3]
 800a080:	b2db      	uxtb	r3, r3
 800a082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a086:	2b80      	cmp	r3, #128	@ 0x80
 800a088:	d0ef      	beq.n	800a06a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a08a:	4b27      	ldr	r3, [pc, #156]	@ (800a128 <xPortStartScheduler+0x138>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f1c3 0307 	rsb	r3, r3, #7
 800a092:	2b04      	cmp	r3, #4
 800a094:	d00b      	beq.n	800a0ae <xPortStartScheduler+0xbe>
	__asm volatile
 800a096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a09a:	f383 8811 	msr	BASEPRI, r3
 800a09e:	f3bf 8f6f 	isb	sy
 800a0a2:	f3bf 8f4f 	dsb	sy
 800a0a6:	60bb      	str	r3, [r7, #8]
}
 800a0a8:	bf00      	nop
 800a0aa:	bf00      	nop
 800a0ac:	e7fd      	b.n	800a0aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a0ae:	4b1e      	ldr	r3, [pc, #120]	@ (800a128 <xPortStartScheduler+0x138>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	021b      	lsls	r3, r3, #8
 800a0b4:	4a1c      	ldr	r2, [pc, #112]	@ (800a128 <xPortStartScheduler+0x138>)
 800a0b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a0b8:	4b1b      	ldr	r3, [pc, #108]	@ (800a128 <xPortStartScheduler+0x138>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a0c0:	4a19      	ldr	r2, [pc, #100]	@ (800a128 <xPortStartScheduler+0x138>)
 800a0c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	b2da      	uxtb	r2, r3
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a0cc:	4b17      	ldr	r3, [pc, #92]	@ (800a12c <xPortStartScheduler+0x13c>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a16      	ldr	r2, [pc, #88]	@ (800a12c <xPortStartScheduler+0x13c>)
 800a0d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a0d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a0d8:	4b14      	ldr	r3, [pc, #80]	@ (800a12c <xPortStartScheduler+0x13c>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a13      	ldr	r2, [pc, #76]	@ (800a12c <xPortStartScheduler+0x13c>)
 800a0de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a0e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a0e4:	f000 f8da 	bl	800a29c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a0e8:	4b11      	ldr	r3, [pc, #68]	@ (800a130 <xPortStartScheduler+0x140>)
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a0ee:	f000 f8f9 	bl	800a2e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a0f2:	4b10      	ldr	r3, [pc, #64]	@ (800a134 <xPortStartScheduler+0x144>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a0f      	ldr	r2, [pc, #60]	@ (800a134 <xPortStartScheduler+0x144>)
 800a0f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a0fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a0fe:	f7ff ff63 	bl	8009fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a102:	f7ff f811 	bl	8009128 <vTaskSwitchContext>
	prvTaskExitError();
 800a106:	f7ff ff17 	bl	8009f38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a10a:	2300      	movs	r3, #0
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3718      	adds	r7, #24
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	e000ed00 	.word	0xe000ed00
 800a118:	410fc271 	.word	0x410fc271
 800a11c:	410fc270 	.word	0x410fc270
 800a120:	e000e400 	.word	0xe000e400
 800a124:	2000558c 	.word	0x2000558c
 800a128:	20005590 	.word	0x20005590
 800a12c:	e000ed20 	.word	0xe000ed20
 800a130:	20000010 	.word	0x20000010
 800a134:	e000ef34 	.word	0xe000ef34

0800a138 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
	__asm volatile
 800a13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a142:	f383 8811 	msr	BASEPRI, r3
 800a146:	f3bf 8f6f 	isb	sy
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	607b      	str	r3, [r7, #4]
}
 800a150:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a152:	4b10      	ldr	r3, [pc, #64]	@ (800a194 <vPortEnterCritical+0x5c>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	3301      	adds	r3, #1
 800a158:	4a0e      	ldr	r2, [pc, #56]	@ (800a194 <vPortEnterCritical+0x5c>)
 800a15a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a15c:	4b0d      	ldr	r3, [pc, #52]	@ (800a194 <vPortEnterCritical+0x5c>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2b01      	cmp	r3, #1
 800a162:	d110      	bne.n	800a186 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a164:	4b0c      	ldr	r3, [pc, #48]	@ (800a198 <vPortEnterCritical+0x60>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00b      	beq.n	800a186 <vPortEnterCritical+0x4e>
	__asm volatile
 800a16e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a172:	f383 8811 	msr	BASEPRI, r3
 800a176:	f3bf 8f6f 	isb	sy
 800a17a:	f3bf 8f4f 	dsb	sy
 800a17e:	603b      	str	r3, [r7, #0]
}
 800a180:	bf00      	nop
 800a182:	bf00      	nop
 800a184:	e7fd      	b.n	800a182 <vPortEnterCritical+0x4a>
	}
}
 800a186:	bf00      	nop
 800a188:	370c      	adds	r7, #12
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop
 800a194:	20000010 	.word	0x20000010
 800a198:	e000ed04 	.word	0xe000ed04

0800a19c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a1a2:	4b12      	ldr	r3, [pc, #72]	@ (800a1ec <vPortExitCritical+0x50>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d10b      	bne.n	800a1c2 <vPortExitCritical+0x26>
	__asm volatile
 800a1aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ae:	f383 8811 	msr	BASEPRI, r3
 800a1b2:	f3bf 8f6f 	isb	sy
 800a1b6:	f3bf 8f4f 	dsb	sy
 800a1ba:	607b      	str	r3, [r7, #4]
}
 800a1bc:	bf00      	nop
 800a1be:	bf00      	nop
 800a1c0:	e7fd      	b.n	800a1be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a1c2:	4b0a      	ldr	r3, [pc, #40]	@ (800a1ec <vPortExitCritical+0x50>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	3b01      	subs	r3, #1
 800a1c8:	4a08      	ldr	r2, [pc, #32]	@ (800a1ec <vPortExitCritical+0x50>)
 800a1ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a1cc:	4b07      	ldr	r3, [pc, #28]	@ (800a1ec <vPortExitCritical+0x50>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d105      	bne.n	800a1e0 <vPortExitCritical+0x44>
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	f383 8811 	msr	BASEPRI, r3
}
 800a1de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a1e0:	bf00      	nop
 800a1e2:	370c      	adds	r7, #12
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr
 800a1ec:	20000010 	.word	0x20000010

0800a1f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a1f0:	f3ef 8009 	mrs	r0, PSP
 800a1f4:	f3bf 8f6f 	isb	sy
 800a1f8:	4b15      	ldr	r3, [pc, #84]	@ (800a250 <pxCurrentTCBConst>)
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	f01e 0f10 	tst.w	lr, #16
 800a200:	bf08      	it	eq
 800a202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a20a:	6010      	str	r0, [r2, #0]
 800a20c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a210:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a214:	f380 8811 	msr	BASEPRI, r0
 800a218:	f3bf 8f4f 	dsb	sy
 800a21c:	f3bf 8f6f 	isb	sy
 800a220:	f7fe ff82 	bl	8009128 <vTaskSwitchContext>
 800a224:	f04f 0000 	mov.w	r0, #0
 800a228:	f380 8811 	msr	BASEPRI, r0
 800a22c:	bc09      	pop	{r0, r3}
 800a22e:	6819      	ldr	r1, [r3, #0]
 800a230:	6808      	ldr	r0, [r1, #0]
 800a232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a236:	f01e 0f10 	tst.w	lr, #16
 800a23a:	bf08      	it	eq
 800a23c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a240:	f380 8809 	msr	PSP, r0
 800a244:	f3bf 8f6f 	isb	sy
 800a248:	4770      	bx	lr
 800a24a:	bf00      	nop
 800a24c:	f3af 8000 	nop.w

0800a250 <pxCurrentTCBConst>:
 800a250:	20004f60 	.word	0x20004f60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a254:	bf00      	nop
 800a256:	bf00      	nop

0800a258 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
	__asm volatile
 800a25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a262:	f383 8811 	msr	BASEPRI, r3
 800a266:	f3bf 8f6f 	isb	sy
 800a26a:	f3bf 8f4f 	dsb	sy
 800a26e:	607b      	str	r3, [r7, #4]
}
 800a270:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a272:	f7fe fe9f 	bl	8008fb4 <xTaskIncrementTick>
 800a276:	4603      	mov	r3, r0
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d003      	beq.n	800a284 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a27c:	4b06      	ldr	r3, [pc, #24]	@ (800a298 <xPortSysTickHandler+0x40>)
 800a27e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a282:	601a      	str	r2, [r3, #0]
 800a284:	2300      	movs	r3, #0
 800a286:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	f383 8811 	msr	BASEPRI, r3
}
 800a28e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a290:	bf00      	nop
 800a292:	3708      	adds	r7, #8
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}
 800a298:	e000ed04 	.word	0xe000ed04

0800a29c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a29c:	b480      	push	{r7}
 800a29e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a2a0:	4b0b      	ldr	r3, [pc, #44]	@ (800a2d0 <vPortSetupTimerInterrupt+0x34>)
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a2a6:	4b0b      	ldr	r3, [pc, #44]	@ (800a2d4 <vPortSetupTimerInterrupt+0x38>)
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a2ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a2d8 <vPortSetupTimerInterrupt+0x3c>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a0a      	ldr	r2, [pc, #40]	@ (800a2dc <vPortSetupTimerInterrupt+0x40>)
 800a2b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a2b6:	099b      	lsrs	r3, r3, #6
 800a2b8:	4a09      	ldr	r2, [pc, #36]	@ (800a2e0 <vPortSetupTimerInterrupt+0x44>)
 800a2ba:	3b01      	subs	r3, #1
 800a2bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a2be:	4b04      	ldr	r3, [pc, #16]	@ (800a2d0 <vPortSetupTimerInterrupt+0x34>)
 800a2c0:	2207      	movs	r2, #7
 800a2c2:	601a      	str	r2, [r3, #0]
}
 800a2c4:	bf00      	nop
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr
 800a2ce:	bf00      	nop
 800a2d0:	e000e010 	.word	0xe000e010
 800a2d4:	e000e018 	.word	0xe000e018
 800a2d8:	20000004 	.word	0x20000004
 800a2dc:	10624dd3 	.word	0x10624dd3
 800a2e0:	e000e014 	.word	0xe000e014

0800a2e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a2e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a2f4 <vPortEnableVFP+0x10>
 800a2e8:	6801      	ldr	r1, [r0, #0]
 800a2ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a2ee:	6001      	str	r1, [r0, #0]
 800a2f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a2f2:	bf00      	nop
 800a2f4:	e000ed88 	.word	0xe000ed88

0800a2f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a2fe:	f3ef 8305 	mrs	r3, IPSR
 800a302:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2b0f      	cmp	r3, #15
 800a308:	d915      	bls.n	800a336 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a30a:	4a18      	ldr	r2, [pc, #96]	@ (800a36c <vPortValidateInterruptPriority+0x74>)
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	4413      	add	r3, r2
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a314:	4b16      	ldr	r3, [pc, #88]	@ (800a370 <vPortValidateInterruptPriority+0x78>)
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	7afa      	ldrb	r2, [r7, #11]
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d20b      	bcs.n	800a336 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a322:	f383 8811 	msr	BASEPRI, r3
 800a326:	f3bf 8f6f 	isb	sy
 800a32a:	f3bf 8f4f 	dsb	sy
 800a32e:	607b      	str	r3, [r7, #4]
}
 800a330:	bf00      	nop
 800a332:	bf00      	nop
 800a334:	e7fd      	b.n	800a332 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a336:	4b0f      	ldr	r3, [pc, #60]	@ (800a374 <vPortValidateInterruptPriority+0x7c>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a33e:	4b0e      	ldr	r3, [pc, #56]	@ (800a378 <vPortValidateInterruptPriority+0x80>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	429a      	cmp	r2, r3
 800a344:	d90b      	bls.n	800a35e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a34a:	f383 8811 	msr	BASEPRI, r3
 800a34e:	f3bf 8f6f 	isb	sy
 800a352:	f3bf 8f4f 	dsb	sy
 800a356:	603b      	str	r3, [r7, #0]
}
 800a358:	bf00      	nop
 800a35a:	bf00      	nop
 800a35c:	e7fd      	b.n	800a35a <vPortValidateInterruptPriority+0x62>
	}
 800a35e:	bf00      	nop
 800a360:	3714      	adds	r7, #20
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr
 800a36a:	bf00      	nop
 800a36c:	e000e3f0 	.word	0xe000e3f0
 800a370:	2000558c 	.word	0x2000558c
 800a374:	e000ed0c 	.word	0xe000ed0c
 800a378:	20005590 	.word	0x20005590

0800a37c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b08a      	sub	sp, #40	@ 0x28
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a384:	2300      	movs	r3, #0
 800a386:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a388:	f7fe fd58 	bl	8008e3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a38c:	4b5c      	ldr	r3, [pc, #368]	@ (800a500 <pvPortMalloc+0x184>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d101      	bne.n	800a398 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a394:	f000 f924 	bl	800a5e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a398:	4b5a      	ldr	r3, [pc, #360]	@ (800a504 <pvPortMalloc+0x188>)
 800a39a:	681a      	ldr	r2, [r3, #0]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	4013      	ands	r3, r2
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	f040 8095 	bne.w	800a4d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d01e      	beq.n	800a3ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a3ac:	2208      	movs	r2, #8
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	4413      	add	r3, r2
 800a3b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f003 0307 	and.w	r3, r3, #7
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d015      	beq.n	800a3ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f023 0307 	bic.w	r3, r3, #7
 800a3c4:	3308      	adds	r3, #8
 800a3c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f003 0307 	and.w	r3, r3, #7
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d00b      	beq.n	800a3ea <pvPortMalloc+0x6e>
	__asm volatile
 800a3d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3d6:	f383 8811 	msr	BASEPRI, r3
 800a3da:	f3bf 8f6f 	isb	sy
 800a3de:	f3bf 8f4f 	dsb	sy
 800a3e2:	617b      	str	r3, [r7, #20]
}
 800a3e4:	bf00      	nop
 800a3e6:	bf00      	nop
 800a3e8:	e7fd      	b.n	800a3e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d06f      	beq.n	800a4d0 <pvPortMalloc+0x154>
 800a3f0:	4b45      	ldr	r3, [pc, #276]	@ (800a508 <pvPortMalloc+0x18c>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d86a      	bhi.n	800a4d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a3fa:	4b44      	ldr	r3, [pc, #272]	@ (800a50c <pvPortMalloc+0x190>)
 800a3fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a3fe:	4b43      	ldr	r3, [pc, #268]	@ (800a50c <pvPortMalloc+0x190>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a404:	e004      	b.n	800a410 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a408:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	429a      	cmp	r2, r3
 800a418:	d903      	bls.n	800a422 <pvPortMalloc+0xa6>
 800a41a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d1f1      	bne.n	800a406 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a422:	4b37      	ldr	r3, [pc, #220]	@ (800a500 <pvPortMalloc+0x184>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a428:	429a      	cmp	r2, r3
 800a42a:	d051      	beq.n	800a4d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a42c:	6a3b      	ldr	r3, [r7, #32]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	2208      	movs	r2, #8
 800a432:	4413      	add	r3, r2
 800a434:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	6a3b      	ldr	r3, [r7, #32]
 800a43c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a440:	685a      	ldr	r2, [r3, #4]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	1ad2      	subs	r2, r2, r3
 800a446:	2308      	movs	r3, #8
 800a448:	005b      	lsls	r3, r3, #1
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d920      	bls.n	800a490 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a44e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	4413      	add	r3, r2
 800a454:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	f003 0307 	and.w	r3, r3, #7
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d00b      	beq.n	800a478 <pvPortMalloc+0xfc>
	__asm volatile
 800a460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a464:	f383 8811 	msr	BASEPRI, r3
 800a468:	f3bf 8f6f 	isb	sy
 800a46c:	f3bf 8f4f 	dsb	sy
 800a470:	613b      	str	r3, [r7, #16]
}
 800a472:	bf00      	nop
 800a474:	bf00      	nop
 800a476:	e7fd      	b.n	800a474 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	1ad2      	subs	r2, r2, r3
 800a480:	69bb      	ldr	r3, [r7, #24]
 800a482:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a48a:	69b8      	ldr	r0, [r7, #24]
 800a48c:	f000 f90a 	bl	800a6a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a490:	4b1d      	ldr	r3, [pc, #116]	@ (800a508 <pvPortMalloc+0x18c>)
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	1ad3      	subs	r3, r2, r3
 800a49a:	4a1b      	ldr	r2, [pc, #108]	@ (800a508 <pvPortMalloc+0x18c>)
 800a49c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a49e:	4b1a      	ldr	r3, [pc, #104]	@ (800a508 <pvPortMalloc+0x18c>)
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	4b1b      	ldr	r3, [pc, #108]	@ (800a510 <pvPortMalloc+0x194>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d203      	bcs.n	800a4b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a4aa:	4b17      	ldr	r3, [pc, #92]	@ (800a508 <pvPortMalloc+0x18c>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4a18      	ldr	r2, [pc, #96]	@ (800a510 <pvPortMalloc+0x194>)
 800a4b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a4b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b4:	685a      	ldr	r2, [r3, #4]
 800a4b6:	4b13      	ldr	r3, [pc, #76]	@ (800a504 <pvPortMalloc+0x188>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	431a      	orrs	r2, r3
 800a4bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a4c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a4c6:	4b13      	ldr	r3, [pc, #76]	@ (800a514 <pvPortMalloc+0x198>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	4a11      	ldr	r2, [pc, #68]	@ (800a514 <pvPortMalloc+0x198>)
 800a4ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a4d0:	f7fe fcc2 	bl	8008e58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4d4:	69fb      	ldr	r3, [r7, #28]
 800a4d6:	f003 0307 	and.w	r3, r3, #7
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00b      	beq.n	800a4f6 <pvPortMalloc+0x17a>
	__asm volatile
 800a4de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4e2:	f383 8811 	msr	BASEPRI, r3
 800a4e6:	f3bf 8f6f 	isb	sy
 800a4ea:	f3bf 8f4f 	dsb	sy
 800a4ee:	60fb      	str	r3, [r7, #12]
}
 800a4f0:	bf00      	nop
 800a4f2:	bf00      	nop
 800a4f4:	e7fd      	b.n	800a4f2 <pvPortMalloc+0x176>
	return pvReturn;
 800a4f6:	69fb      	ldr	r3, [r7, #28]
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3728      	adds	r7, #40	@ 0x28
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}
 800a500:	2000619c 	.word	0x2000619c
 800a504:	200061b0 	.word	0x200061b0
 800a508:	200061a0 	.word	0x200061a0
 800a50c:	20006194 	.word	0x20006194
 800a510:	200061a4 	.word	0x200061a4
 800a514:	200061a8 	.word	0x200061a8

0800a518 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b086      	sub	sp, #24
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d04f      	beq.n	800a5ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a52a:	2308      	movs	r3, #8
 800a52c:	425b      	negs	r3, r3
 800a52e:	697a      	ldr	r2, [r7, #20]
 800a530:	4413      	add	r3, r2
 800a532:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	685a      	ldr	r2, [r3, #4]
 800a53c:	4b25      	ldr	r3, [pc, #148]	@ (800a5d4 <vPortFree+0xbc>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4013      	ands	r3, r2
 800a542:	2b00      	cmp	r3, #0
 800a544:	d10b      	bne.n	800a55e <vPortFree+0x46>
	__asm volatile
 800a546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a54a:	f383 8811 	msr	BASEPRI, r3
 800a54e:	f3bf 8f6f 	isb	sy
 800a552:	f3bf 8f4f 	dsb	sy
 800a556:	60fb      	str	r3, [r7, #12]
}
 800a558:	bf00      	nop
 800a55a:	bf00      	nop
 800a55c:	e7fd      	b.n	800a55a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d00b      	beq.n	800a57e <vPortFree+0x66>
	__asm volatile
 800a566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a56a:	f383 8811 	msr	BASEPRI, r3
 800a56e:	f3bf 8f6f 	isb	sy
 800a572:	f3bf 8f4f 	dsb	sy
 800a576:	60bb      	str	r3, [r7, #8]
}
 800a578:	bf00      	nop
 800a57a:	bf00      	nop
 800a57c:	e7fd      	b.n	800a57a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	685a      	ldr	r2, [r3, #4]
 800a582:	4b14      	ldr	r3, [pc, #80]	@ (800a5d4 <vPortFree+0xbc>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4013      	ands	r3, r2
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d01e      	beq.n	800a5ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d11a      	bne.n	800a5ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	685a      	ldr	r2, [r3, #4]
 800a598:	4b0e      	ldr	r3, [pc, #56]	@ (800a5d4 <vPortFree+0xbc>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	43db      	mvns	r3, r3
 800a59e:	401a      	ands	r2, r3
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a5a4:	f7fe fc4a 	bl	8008e3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	685a      	ldr	r2, [r3, #4]
 800a5ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a5d8 <vPortFree+0xc0>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	4a09      	ldr	r2, [pc, #36]	@ (800a5d8 <vPortFree+0xc0>)
 800a5b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a5b6:	6938      	ldr	r0, [r7, #16]
 800a5b8:	f000 f874 	bl	800a6a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a5bc:	4b07      	ldr	r3, [pc, #28]	@ (800a5dc <vPortFree+0xc4>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	4a06      	ldr	r2, [pc, #24]	@ (800a5dc <vPortFree+0xc4>)
 800a5c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a5c6:	f7fe fc47 	bl	8008e58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a5ca:	bf00      	nop
 800a5cc:	3718      	adds	r7, #24
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	200061b0 	.word	0x200061b0
 800a5d8:	200061a0 	.word	0x200061a0
 800a5dc:	200061ac 	.word	0x200061ac

0800a5e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b085      	sub	sp, #20
 800a5e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a5e6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a5ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a5ec:	4b27      	ldr	r3, [pc, #156]	@ (800a68c <prvHeapInit+0xac>)
 800a5ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f003 0307 	and.w	r3, r3, #7
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d00c      	beq.n	800a614 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	3307      	adds	r3, #7
 800a5fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f023 0307 	bic.w	r3, r3, #7
 800a606:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a608:	68ba      	ldr	r2, [r7, #8]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	1ad3      	subs	r3, r2, r3
 800a60e:	4a1f      	ldr	r2, [pc, #124]	@ (800a68c <prvHeapInit+0xac>)
 800a610:	4413      	add	r3, r2
 800a612:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a618:	4a1d      	ldr	r2, [pc, #116]	@ (800a690 <prvHeapInit+0xb0>)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a61e:	4b1c      	ldr	r3, [pc, #112]	@ (800a690 <prvHeapInit+0xb0>)
 800a620:	2200      	movs	r2, #0
 800a622:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	68ba      	ldr	r2, [r7, #8]
 800a628:	4413      	add	r3, r2
 800a62a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a62c:	2208      	movs	r2, #8
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	1a9b      	subs	r3, r3, r2
 800a632:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f023 0307 	bic.w	r3, r3, #7
 800a63a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	4a15      	ldr	r2, [pc, #84]	@ (800a694 <prvHeapInit+0xb4>)
 800a640:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a642:	4b14      	ldr	r3, [pc, #80]	@ (800a694 <prvHeapInit+0xb4>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	2200      	movs	r2, #0
 800a648:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a64a:	4b12      	ldr	r3, [pc, #72]	@ (800a694 <prvHeapInit+0xb4>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	2200      	movs	r2, #0
 800a650:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	68fa      	ldr	r2, [r7, #12]
 800a65a:	1ad2      	subs	r2, r2, r3
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a660:	4b0c      	ldr	r3, [pc, #48]	@ (800a694 <prvHeapInit+0xb4>)
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	4a0a      	ldr	r2, [pc, #40]	@ (800a698 <prvHeapInit+0xb8>)
 800a66e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	4a09      	ldr	r2, [pc, #36]	@ (800a69c <prvHeapInit+0xbc>)
 800a676:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a678:	4b09      	ldr	r3, [pc, #36]	@ (800a6a0 <prvHeapInit+0xc0>)
 800a67a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a67e:	601a      	str	r2, [r3, #0]
}
 800a680:	bf00      	nop
 800a682:	3714      	adds	r7, #20
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr
 800a68c:	20005594 	.word	0x20005594
 800a690:	20006194 	.word	0x20006194
 800a694:	2000619c 	.word	0x2000619c
 800a698:	200061a4 	.word	0x200061a4
 800a69c:	200061a0 	.word	0x200061a0
 800a6a0:	200061b0 	.word	0x200061b0

0800a6a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b085      	sub	sp, #20
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a6ac:	4b28      	ldr	r3, [pc, #160]	@ (800a750 <prvInsertBlockIntoFreeList+0xac>)
 800a6ae:	60fb      	str	r3, [r7, #12]
 800a6b0:	e002      	b.n	800a6b8 <prvInsertBlockIntoFreeList+0x14>
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	60fb      	str	r3, [r7, #12]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d8f7      	bhi.n	800a6b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	68ba      	ldr	r2, [r7, #8]
 800a6cc:	4413      	add	r3, r2
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d108      	bne.n	800a6e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	685a      	ldr	r2, [r3, #4]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	441a      	add	r2, r3
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	68ba      	ldr	r2, [r7, #8]
 800a6f0:	441a      	add	r2, r3
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d118      	bne.n	800a72c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	4b15      	ldr	r3, [pc, #84]	@ (800a754 <prvInsertBlockIntoFreeList+0xb0>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	429a      	cmp	r2, r3
 800a704:	d00d      	beq.n	800a722 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	685a      	ldr	r2, [r3, #4]
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	441a      	add	r2, r3
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	601a      	str	r2, [r3, #0]
 800a720:	e008      	b.n	800a734 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a722:	4b0c      	ldr	r3, [pc, #48]	@ (800a754 <prvInsertBlockIntoFreeList+0xb0>)
 800a724:	681a      	ldr	r2, [r3, #0]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	601a      	str	r2, [r3, #0]
 800a72a:	e003      	b.n	800a734 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a734:	68fa      	ldr	r2, [r7, #12]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	429a      	cmp	r2, r3
 800a73a:	d002      	beq.n	800a742 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a742:	bf00      	nop
 800a744:	3714      	adds	r7, #20
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop
 800a750:	20006194 	.word	0x20006194
 800a754:	2000619c 	.word	0x2000619c

0800a758 <rcl_get_zero_initialized_init_options>:
 800a758:	2000      	movs	r0, #0
 800a75a:	4770      	bx	lr

0800a75c <rcl_init_options_init>:
 800a75c:	b084      	sub	sp, #16
 800a75e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a760:	b097      	sub	sp, #92	@ 0x5c
 800a762:	ae1d      	add	r6, sp, #116	@ 0x74
 800a764:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800a768:	2800      	cmp	r0, #0
 800a76a:	d058      	beq.n	800a81e <rcl_init_options_init+0xc2>
 800a76c:	6803      	ldr	r3, [r0, #0]
 800a76e:	4605      	mov	r5, r0
 800a770:	b133      	cbz	r3, 800a780 <rcl_init_options_init+0x24>
 800a772:	2464      	movs	r4, #100	@ 0x64
 800a774:	4620      	mov	r0, r4
 800a776:	b017      	add	sp, #92	@ 0x5c
 800a778:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800a77c:	b004      	add	sp, #16
 800a77e:	4770      	bx	lr
 800a780:	4630      	mov	r0, r6
 800a782:	f001 f997 	bl	800bab4 <rcutils_allocator_is_valid>
 800a786:	2800      	cmp	r0, #0
 800a788:	d049      	beq.n	800a81e <rcl_init_options_init+0xc2>
 800a78a:	46b4      	mov	ip, r6
 800a78c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a790:	ac11      	add	r4, sp, #68	@ 0x44
 800a792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a794:	f8dc 3000 	ldr.w	r3, [ip]
 800a798:	6023      	str	r3, [r4, #0]
 800a79a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800a79c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a79e:	2050      	movs	r0, #80	@ 0x50
 800a7a0:	4798      	blx	r3
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	6028      	str	r0, [r5, #0]
 800a7a6:	2800      	cmp	r0, #0
 800a7a8:	d03b      	beq.n	800a822 <rcl_init_options_init+0xc6>
 800a7aa:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800a7ae:	4686      	mov	lr, r0
 800a7b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a7b4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a7b8:	f8dc 3000 	ldr.w	r3, [ip]
 800a7bc:	f8ce 3000 	str.w	r3, [lr]
 800a7c0:	a802      	add	r0, sp, #8
 800a7c2:	f001 fa09 	bl	800bbd8 <rmw_get_zero_initialized_init_options>
 800a7c6:	f10d 0e08 	add.w	lr, sp, #8
 800a7ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a7ce:	f104 0c18 	add.w	ip, r4, #24
 800a7d2:	682f      	ldr	r7, [r5, #0]
 800a7d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a7d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a7dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a7e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a7e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a7e8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800a7ec:	ac20      	add	r4, sp, #128	@ 0x80
 800a7ee:	e88c 0003 	stmia.w	ip, {r0, r1}
 800a7f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a7f6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a7fa:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800a7fe:	f107 0018 	add.w	r0, r7, #24
 800a802:	f001 fa17 	bl	800bc34 <rmw_init_options_init>
 800a806:	4604      	mov	r4, r0
 800a808:	2800      	cmp	r0, #0
 800a80a:	d0b3      	beq.n	800a774 <rcl_init_options_init+0x18>
 800a80c:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800a80e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a810:	6828      	ldr	r0, [r5, #0]
 800a812:	4798      	blx	r3
 800a814:	4620      	mov	r0, r4
 800a816:	f007 fa7d 	bl	8011d14 <rcl_convert_rmw_ret_to_rcl_ret>
 800a81a:	4604      	mov	r4, r0
 800a81c:	e7aa      	b.n	800a774 <rcl_init_options_init+0x18>
 800a81e:	240b      	movs	r4, #11
 800a820:	e7a8      	b.n	800a774 <rcl_init_options_init+0x18>
 800a822:	240a      	movs	r4, #10
 800a824:	e7a6      	b.n	800a774 <rcl_init_options_init+0x18>
 800a826:	bf00      	nop

0800a828 <rcl_init_options_fini>:
 800a828:	b530      	push	{r4, r5, lr}
 800a82a:	b087      	sub	sp, #28
 800a82c:	b1f0      	cbz	r0, 800a86c <rcl_init_options_fini+0x44>
 800a82e:	6803      	ldr	r3, [r0, #0]
 800a830:	4604      	mov	r4, r0
 800a832:	b1db      	cbz	r3, 800a86c <rcl_init_options_fini+0x44>
 800a834:	469c      	mov	ip, r3
 800a836:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a83a:	f10d 0e04 	add.w	lr, sp, #4
 800a83e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a842:	f8dc 3000 	ldr.w	r3, [ip]
 800a846:	f8ce 3000 	str.w	r3, [lr]
 800a84a:	a801      	add	r0, sp, #4
 800a84c:	f001 f932 	bl	800bab4 <rcutils_allocator_is_valid>
 800a850:	b160      	cbz	r0, 800a86c <rcl_init_options_fini+0x44>
 800a852:	6820      	ldr	r0, [r4, #0]
 800a854:	3018      	adds	r0, #24
 800a856:	f001 fa9d 	bl	800bd94 <rmw_init_options_fini>
 800a85a:	4605      	mov	r5, r0
 800a85c:	b950      	cbnz	r0, 800a874 <rcl_init_options_fini+0x4c>
 800a85e:	6820      	ldr	r0, [r4, #0]
 800a860:	9b02      	ldr	r3, [sp, #8]
 800a862:	9905      	ldr	r1, [sp, #20]
 800a864:	4798      	blx	r3
 800a866:	4628      	mov	r0, r5
 800a868:	b007      	add	sp, #28
 800a86a:	bd30      	pop	{r4, r5, pc}
 800a86c:	250b      	movs	r5, #11
 800a86e:	4628      	mov	r0, r5
 800a870:	b007      	add	sp, #28
 800a872:	bd30      	pop	{r4, r5, pc}
 800a874:	f007 fa4e 	bl	8011d14 <rcl_convert_rmw_ret_to_rcl_ret>
 800a878:	4605      	mov	r5, r0
 800a87a:	e7f8      	b.n	800a86e <rcl_init_options_fini+0x46>

0800a87c <rcl_init_options_copy>:
 800a87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a880:	b094      	sub	sp, #80	@ 0x50
 800a882:	2800      	cmp	r0, #0
 800a884:	d058      	beq.n	800a938 <rcl_init_options_copy+0xbc>
 800a886:	4604      	mov	r4, r0
 800a888:	6800      	ldr	r0, [r0, #0]
 800a88a:	2800      	cmp	r0, #0
 800a88c:	d054      	beq.n	800a938 <rcl_init_options_copy+0xbc>
 800a88e:	460e      	mov	r6, r1
 800a890:	f001 f910 	bl	800bab4 <rcutils_allocator_is_valid>
 800a894:	2800      	cmp	r0, #0
 800a896:	d04f      	beq.n	800a938 <rcl_init_options_copy+0xbc>
 800a898:	2e00      	cmp	r6, #0
 800a89a:	d04d      	beq.n	800a938 <rcl_init_options_copy+0xbc>
 800a89c:	6833      	ldr	r3, [r6, #0]
 800a89e:	b123      	cbz	r3, 800a8aa <rcl_init_options_copy+0x2e>
 800a8a0:	2464      	movs	r4, #100	@ 0x64
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	b014      	add	sp, #80	@ 0x50
 800a8a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8aa:	6827      	ldr	r7, [r4, #0]
 800a8ac:	46bc      	mov	ip, r7
 800a8ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a8b2:	ad0f      	add	r5, sp, #60	@ 0x3c
 800a8b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a8b6:	f8dc 3000 	ldr.w	r3, [ip]
 800a8ba:	f8d7 8000 	ldr.w	r8, [r7]
 800a8be:	602b      	str	r3, [r5, #0]
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	2050      	movs	r0, #80	@ 0x50
 800a8c4:	47c0      	blx	r8
 800a8c6:	4605      	mov	r5, r0
 800a8c8:	6030      	str	r0, [r6, #0]
 800a8ca:	b3d0      	cbz	r0, 800a942 <rcl_init_options_copy+0xc6>
 800a8cc:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800a8d0:	4686      	mov	lr, r0
 800a8d2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a8d6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a8da:	f8dc 3000 	ldr.w	r3, [ip]
 800a8de:	f8ce 3000 	str.w	r3, [lr]
 800a8e2:	4668      	mov	r0, sp
 800a8e4:	f001 f978 	bl	800bbd8 <rmw_get_zero_initialized_init_options>
 800a8e8:	46ee      	mov	lr, sp
 800a8ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a8ee:	f105 0c18 	add.w	ip, r5, #24
 800a8f2:	6824      	ldr	r4, [r4, #0]
 800a8f4:	6835      	ldr	r5, [r6, #0]
 800a8f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a8fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a8fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a902:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800a906:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a90a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800a90e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800a912:	f104 0018 	add.w	r0, r4, #24
 800a916:	f105 0118 	add.w	r1, r5, #24
 800a91a:	f001 f9f3 	bl	800bd04 <rmw_init_options_copy>
 800a91e:	4604      	mov	r4, r0
 800a920:	2800      	cmp	r0, #0
 800a922:	d0be      	beq.n	800a8a2 <rcl_init_options_copy+0x26>
 800a924:	f001 f8d4 	bl	800bad0 <rcutils_get_error_string>
 800a928:	f001 f8ea 	bl	800bb00 <rcutils_reset_error>
 800a92c:	4630      	mov	r0, r6
 800a92e:	f7ff ff7b 	bl	800a828 <rcl_init_options_fini>
 800a932:	b140      	cbz	r0, 800a946 <rcl_init_options_copy+0xca>
 800a934:	4604      	mov	r4, r0
 800a936:	e7b4      	b.n	800a8a2 <rcl_init_options_copy+0x26>
 800a938:	240b      	movs	r4, #11
 800a93a:	4620      	mov	r0, r4
 800a93c:	b014      	add	sp, #80	@ 0x50
 800a93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a942:	240a      	movs	r4, #10
 800a944:	e7ad      	b.n	800a8a2 <rcl_init_options_copy+0x26>
 800a946:	4620      	mov	r0, r4
 800a948:	b014      	add	sp, #80	@ 0x50
 800a94a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a94e:	f007 b9e1 	b.w	8011d14 <rcl_convert_rmw_ret_to_rcl_ret>
 800a952:	bf00      	nop

0800a954 <rcl_init_options_set_domain_id>:
 800a954:	b120      	cbz	r0, 800a960 <rcl_init_options_set_domain_id+0xc>
 800a956:	6803      	ldr	r3, [r0, #0]
 800a958:	b113      	cbz	r3, 800a960 <rcl_init_options_set_domain_id+0xc>
 800a95a:	6259      	str	r1, [r3, #36]	@ 0x24
 800a95c:	2000      	movs	r0, #0
 800a95e:	4770      	bx	lr
 800a960:	200b      	movs	r0, #11
 800a962:	4770      	bx	lr

0800a964 <rcl_get_zero_initialized_publisher>:
 800a964:	4b01      	ldr	r3, [pc, #4]	@ (800a96c <rcl_get_zero_initialized_publisher+0x8>)
 800a966:	6818      	ldr	r0, [r3, #0]
 800a968:	4770      	bx	lr
 800a96a:	bf00      	nop
 800a96c:	08018c84 	.word	0x08018c84

0800a970 <rcl_publisher_init>:
 800a970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a974:	b088      	sub	sp, #32
 800a976:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800a978:	2d00      	cmp	r5, #0
 800a97a:	d069      	beq.n	800aa50 <rcl_publisher_init+0xe0>
 800a97c:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800a980:	4604      	mov	r4, r0
 800a982:	4648      	mov	r0, r9
 800a984:	460e      	mov	r6, r1
 800a986:	4690      	mov	r8, r2
 800a988:	461f      	mov	r7, r3
 800a98a:	f001 f893 	bl	800bab4 <rcutils_allocator_is_valid>
 800a98e:	2800      	cmp	r0, #0
 800a990:	d05e      	beq.n	800aa50 <rcl_publisher_init+0xe0>
 800a992:	2c00      	cmp	r4, #0
 800a994:	d05c      	beq.n	800aa50 <rcl_publisher_init+0xe0>
 800a996:	f8d4 a000 	ldr.w	sl, [r4]
 800a99a:	f1ba 0f00 	cmp.w	sl, #0
 800a99e:	d004      	beq.n	800a9aa <rcl_publisher_init+0x3a>
 800a9a0:	2764      	movs	r7, #100	@ 0x64
 800a9a2:	4638      	mov	r0, r7
 800a9a4:	b008      	add	sp, #32
 800a9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	f007 fcac 	bl	8012308 <rcl_node_is_valid>
 800a9b0:	2800      	cmp	r0, #0
 800a9b2:	d052      	beq.n	800aa5a <rcl_publisher_init+0xea>
 800a9b4:	f1b8 0f00 	cmp.w	r8, #0
 800a9b8:	d04a      	beq.n	800aa50 <rcl_publisher_init+0xe0>
 800a9ba:	2f00      	cmp	r7, #0
 800a9bc:	d048      	beq.n	800aa50 <rcl_publisher_init+0xe0>
 800a9be:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800a9c2:	aa07      	add	r2, sp, #28
 800a9c4:	9205      	str	r2, [sp, #20]
 800a9c6:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800a9ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a9ce:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a9d2:	f8cd a01c 	str.w	sl, [sp, #28]
 800a9d6:	4639      	mov	r1, r7
 800a9d8:	e899 000c 	ldmia.w	r9, {r2, r3}
 800a9dc:	4630      	mov	r0, r6
 800a9de:	f007 fce7 	bl	80123b0 <rcl_node_resolve_name>
 800a9e2:	4607      	mov	r7, r0
 800a9e4:	2800      	cmp	r0, #0
 800a9e6:	d14f      	bne.n	800aa88 <rcl_publisher_init+0x118>
 800a9e8:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800a9ea:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a9ec:	20c8      	movs	r0, #200	@ 0xc8
 800a9ee:	4798      	blx	r3
 800a9f0:	6020      	str	r0, [r4, #0]
 800a9f2:	2800      	cmp	r0, #0
 800a9f4:	d04e      	beq.n	800aa94 <rcl_publisher_init+0x124>
 800a9f6:	4630      	mov	r0, r6
 800a9f8:	f007 fca8 	bl	801234c <rcl_node_get_rmw_handle>
 800a9fc:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800aa00:	9300      	str	r3, [sp, #0]
 800aa02:	9a07      	ldr	r2, [sp, #28]
 800aa04:	6827      	ldr	r7, [r4, #0]
 800aa06:	462b      	mov	r3, r5
 800aa08:	4641      	mov	r1, r8
 800aa0a:	f001 fceb 	bl	800c3e4 <rmw_create_publisher>
 800aa0e:	6823      	ldr	r3, [r4, #0]
 800aa10:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800aa14:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800aa18:	b370      	cbz	r0, 800aa78 <rcl_publisher_init+0x108>
 800aa1a:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800aa1e:	f001 fdbf 	bl	800c5a0 <rmw_publisher_get_actual_qos>
 800aa22:	6823      	ldr	r3, [r4, #0]
 800aa24:	4607      	mov	r7, r0
 800aa26:	b9d0      	cbnz	r0, 800aa5e <rcl_publisher_init+0xee>
 800aa28:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800aa2c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800aa30:	4629      	mov	r1, r5
 800aa32:	2270      	movs	r2, #112	@ 0x70
 800aa34:	4618      	mov	r0, r3
 800aa36:	f00d f998 	bl	8017d6a <memcpy>
 800aa3a:	6832      	ldr	r2, [r6, #0]
 800aa3c:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800aa40:	9807      	ldr	r0, [sp, #28]
 800aa42:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800aa44:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800aa46:	4798      	blx	r3
 800aa48:	4638      	mov	r0, r7
 800aa4a:	b008      	add	sp, #32
 800aa4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa50:	270b      	movs	r7, #11
 800aa52:	4638      	mov	r0, r7
 800aa54:	b008      	add	sp, #32
 800aa56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa5a:	27c8      	movs	r7, #200	@ 0xc8
 800aa5c:	e7a1      	b.n	800a9a2 <rcl_publisher_init+0x32>
 800aa5e:	b18b      	cbz	r3, 800aa84 <rcl_publisher_init+0x114>
 800aa60:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800aa64:	b142      	cbz	r2, 800aa78 <rcl_publisher_init+0x108>
 800aa66:	4630      	mov	r0, r6
 800aa68:	f007 fc70 	bl	801234c <rcl_node_get_rmw_handle>
 800aa6c:	6823      	ldr	r3, [r4, #0]
 800aa6e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800aa72:	f001 fda5 	bl	800c5c0 <rmw_destroy_publisher>
 800aa76:	6823      	ldr	r3, [r4, #0]
 800aa78:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800aa7a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	4790      	blx	r2
 800aa80:	2300      	movs	r3, #0
 800aa82:	6023      	str	r3, [r4, #0]
 800aa84:	2701      	movs	r7, #1
 800aa86:	e7db      	b.n	800aa40 <rcl_publisher_init+0xd0>
 800aa88:	2867      	cmp	r0, #103	@ 0x67
 800aa8a:	d0d9      	beq.n	800aa40 <rcl_publisher_init+0xd0>
 800aa8c:	2869      	cmp	r0, #105	@ 0x69
 800aa8e:	d003      	beq.n	800aa98 <rcl_publisher_init+0x128>
 800aa90:	280a      	cmp	r0, #10
 800aa92:	d1f7      	bne.n	800aa84 <rcl_publisher_init+0x114>
 800aa94:	270a      	movs	r7, #10
 800aa96:	e7d3      	b.n	800aa40 <rcl_publisher_init+0xd0>
 800aa98:	2767      	movs	r7, #103	@ 0x67
 800aa9a:	e7d1      	b.n	800aa40 <rcl_publisher_init+0xd0>

0800aa9c <rcl_publisher_get_default_options>:
 800aa9c:	b570      	push	{r4, r5, r6, lr}
 800aa9e:	4d14      	ldr	r5, [pc, #80]	@ (800aaf0 <rcl_publisher_get_default_options+0x54>)
 800aaa0:	4914      	ldr	r1, [pc, #80]	@ (800aaf4 <rcl_publisher_get_default_options+0x58>)
 800aaa2:	b088      	sub	sp, #32
 800aaa4:	4604      	mov	r4, r0
 800aaa6:	2250      	movs	r2, #80	@ 0x50
 800aaa8:	4628      	mov	r0, r5
 800aaaa:	f00d f95e 	bl	8017d6a <memcpy>
 800aaae:	a802      	add	r0, sp, #8
 800aab0:	f000 fff2 	bl	800ba98 <rcutils_get_default_allocator>
 800aab4:	f10d 0c08 	add.w	ip, sp, #8
 800aab8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aabc:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800aac0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800aac4:	466e      	mov	r6, sp
 800aac6:	f8dc 3000 	ldr.w	r3, [ip]
 800aaca:	f8ce 3000 	str.w	r3, [lr]
 800aace:	4630      	mov	r0, r6
 800aad0:	f001 f892 	bl	800bbf8 <rmw_get_default_publisher_options>
 800aad4:	e896 0003 	ldmia.w	r6, {r0, r1}
 800aad8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800aadc:	e883 0003 	stmia.w	r3, {r0, r1}
 800aae0:	2270      	movs	r2, #112	@ 0x70
 800aae2:	4629      	mov	r1, r5
 800aae4:	4620      	mov	r0, r4
 800aae6:	f00d f940 	bl	8017d6a <memcpy>
 800aaea:	4620      	mov	r0, r4
 800aaec:	b008      	add	sp, #32
 800aaee:	bd70      	pop	{r4, r5, r6, pc}
 800aaf0:	200061b8 	.word	0x200061b8
 800aaf4:	08018c88 	.word	0x08018c88

0800aaf8 <rcl_publish>:
 800aaf8:	b1f8      	cbz	r0, 800ab3a <rcl_publish+0x42>
 800aafa:	6803      	ldr	r3, [r0, #0]
 800aafc:	b570      	push	{r4, r5, r6, lr}
 800aafe:	4604      	mov	r4, r0
 800ab00:	b1b3      	cbz	r3, 800ab30 <rcl_publish+0x38>
 800ab02:	4616      	mov	r6, r2
 800ab04:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ab08:	b192      	cbz	r2, 800ab30 <rcl_publish+0x38>
 800ab0a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800ab0e:	460d      	mov	r5, r1
 800ab10:	f007 f91e 	bl	8011d50 <rcl_context_is_valid>
 800ab14:	b160      	cbz	r0, 800ab30 <rcl_publish+0x38>
 800ab16:	6823      	ldr	r3, [r4, #0]
 800ab18:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ab1c:	b140      	cbz	r0, 800ab30 <rcl_publish+0x38>
 800ab1e:	b155      	cbz	r5, 800ab36 <rcl_publish+0x3e>
 800ab20:	4632      	mov	r2, r6
 800ab22:	4629      	mov	r1, r5
 800ab24:	f001 fbfe 	bl	800c324 <rmw_publish>
 800ab28:	3800      	subs	r0, #0
 800ab2a:	bf18      	it	ne
 800ab2c:	2001      	movne	r0, #1
 800ab2e:	bd70      	pop	{r4, r5, r6, pc}
 800ab30:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ab34:	bd70      	pop	{r4, r5, r6, pc}
 800ab36:	200b      	movs	r0, #11
 800ab38:	bd70      	pop	{r4, r5, r6, pc}
 800ab3a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800ab3e:	4770      	bx	lr

0800ab40 <rcl_publisher_is_valid>:
 800ab40:	b1a0      	cbz	r0, 800ab6c <rcl_publisher_is_valid+0x2c>
 800ab42:	6803      	ldr	r3, [r0, #0]
 800ab44:	b510      	push	{r4, lr}
 800ab46:	4604      	mov	r4, r0
 800ab48:	b173      	cbz	r3, 800ab68 <rcl_publisher_is_valid+0x28>
 800ab4a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ab4e:	b15a      	cbz	r2, 800ab68 <rcl_publisher_is_valid+0x28>
 800ab50:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800ab54:	f007 f8fc 	bl	8011d50 <rcl_context_is_valid>
 800ab58:	b130      	cbz	r0, 800ab68 <rcl_publisher_is_valid+0x28>
 800ab5a:	6823      	ldr	r3, [r4, #0]
 800ab5c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ab60:	3800      	subs	r0, #0
 800ab62:	bf18      	it	ne
 800ab64:	2001      	movne	r0, #1
 800ab66:	bd10      	pop	{r4, pc}
 800ab68:	2000      	movs	r0, #0
 800ab6a:	bd10      	pop	{r4, pc}
 800ab6c:	2000      	movs	r0, #0
 800ab6e:	4770      	bx	lr

0800ab70 <rcl_publisher_is_valid_except_context>:
 800ab70:	b130      	cbz	r0, 800ab80 <rcl_publisher_is_valid_except_context+0x10>
 800ab72:	6800      	ldr	r0, [r0, #0]
 800ab74:	b120      	cbz	r0, 800ab80 <rcl_publisher_is_valid_except_context+0x10>
 800ab76:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800ab7a:	3800      	subs	r0, #0
 800ab7c:	bf18      	it	ne
 800ab7e:	2001      	movne	r0, #1
 800ab80:	4770      	bx	lr
 800ab82:	bf00      	nop

0800ab84 <_rclc_check_for_new_data>:
 800ab84:	2800      	cmp	r0, #0
 800ab86:	d046      	beq.n	800ac16 <_rclc_check_for_new_data+0x92>
 800ab88:	b510      	push	{r4, lr}
 800ab8a:	7802      	ldrb	r2, [r0, #0]
 800ab8c:	b084      	sub	sp, #16
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2a0a      	cmp	r2, #10
 800ab92:	d842      	bhi.n	800ac1a <_rclc_check_for_new_data+0x96>
 800ab94:	e8df f002 	tbb	[pc, r2]
 800ab98:	14181212 	.word	0x14181212
 800ab9c:	06060614 	.word	0x06060614
 800aba0:	2e1a      	.short	0x2e1a
 800aba2:	16          	.byte	0x16
 800aba3:	00          	.byte	0x00
 800aba4:	6a0a      	ldr	r2, [r1, #32]
 800aba6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800aba8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800abac:	2000      	movs	r0, #0
 800abae:	1a12      	subs	r2, r2, r0
 800abb0:	bf18      	it	ne
 800abb2:	2201      	movne	r2, #1
 800abb4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800abb8:	b004      	add	sp, #16
 800abba:	bd10      	pop	{r4, pc}
 800abbc:	680a      	ldr	r2, [r1, #0]
 800abbe:	e7f2      	b.n	800aba6 <_rclc_check_for_new_data+0x22>
 800abc0:	698a      	ldr	r2, [r1, #24]
 800abc2:	e7f0      	b.n	800aba6 <_rclc_check_for_new_data+0x22>
 800abc4:	688a      	ldr	r2, [r1, #8]
 800abc6:	e7ee      	b.n	800aba6 <_rclc_check_for_new_data+0x22>
 800abc8:	690a      	ldr	r2, [r1, #16]
 800abca:	e7ec      	b.n	800aba6 <_rclc_check_for_new_data+0x22>
 800abcc:	685c      	ldr	r4, [r3, #4]
 800abce:	4608      	mov	r0, r1
 800abd0:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800abd4:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800abd8:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800abdc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800abe0:	9300      	str	r3, [sp, #0]
 800abe2:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800abe6:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800abea:	f104 0110 	add.w	r1, r4, #16
 800abee:	f009 fab7 	bl	8014160 <rcl_action_client_wait_set_get_entities_ready>
 800abf2:	e7e1      	b.n	800abb8 <_rclc_check_for_new_data+0x34>
 800abf4:	685c      	ldr	r4, [r3, #4]
 800abf6:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800abfa:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800abfe:	e9cd 3200 	strd	r3, r2, [sp]
 800ac02:	4608      	mov	r0, r1
 800ac04:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800ac08:	f104 0220 	add.w	r2, r4, #32
 800ac0c:	f104 0110 	add.w	r1, r4, #16
 800ac10:	f009 fcbe 	bl	8014590 <rcl_action_server_wait_set_get_entities_ready>
 800ac14:	e7d0      	b.n	800abb8 <_rclc_check_for_new_data+0x34>
 800ac16:	200b      	movs	r0, #11
 800ac18:	4770      	bx	lr
 800ac1a:	2001      	movs	r0, #1
 800ac1c:	e7cc      	b.n	800abb8 <_rclc_check_for_new_data+0x34>
 800ac1e:	bf00      	nop

0800ac20 <_rclc_take_new_data>:
 800ac20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac22:	b09b      	sub	sp, #108	@ 0x6c
 800ac24:	2800      	cmp	r0, #0
 800ac26:	f000 8088 	beq.w	800ad3a <_rclc_take_new_data+0x11a>
 800ac2a:	7803      	ldrb	r3, [r0, #0]
 800ac2c:	4604      	mov	r4, r0
 800ac2e:	2b0a      	cmp	r3, #10
 800ac30:	f200 8167 	bhi.w	800af02 <_rclc_take_new_data+0x2e2>
 800ac34:	e8df f003 	tbb	[pc, r3]
 800ac38:	44152d2d 	.word	0x44152d2d
 800ac3c:	19191944 	.word	0x19191944
 800ac40:	065a      	.short	0x065a
 800ac42:	15          	.byte	0x15
 800ac43:	00          	.byte	0x00
 800ac44:	6840      	ldr	r0, [r0, #4]
 800ac46:	f890 3020 	ldrb.w	r3, [r0, #32]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	f040 80b2 	bne.w	800adb4 <_rclc_take_new_data+0x194>
 800ac50:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	f040 80e4 	bne.w	800ae22 <_rclc_take_new_data+0x202>
 800ac5a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d16f      	bne.n	800ad42 <_rclc_take_new_data+0x122>
 800ac62:	2500      	movs	r5, #0
 800ac64:	4628      	mov	r0, r5
 800ac66:	b01b      	add	sp, #108	@ 0x6c
 800ac68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac6a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800ac6c:	6a0b      	ldr	r3, [r1, #32]
 800ac6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d0f5      	beq.n	800ac62 <_rclc_take_new_data+0x42>
 800ac76:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800ac7a:	f104 0110 	add.w	r1, r4, #16
 800ac7e:	f007 fd41 	bl	8012704 <rcl_take_request>
 800ac82:	4605      	mov	r5, r0
 800ac84:	2800      	cmp	r0, #0
 800ac86:	d0ec      	beq.n	800ac62 <_rclc_take_new_data+0x42>
 800ac88:	f240 2359 	movw	r3, #601	@ 0x259
 800ac8c:	4298      	cmp	r0, r3
 800ac8e:	d013      	beq.n	800acb8 <_rclc_take_new_data+0x98>
 800ac90:	e029      	b.n	800ace6 <_rclc_take_new_data+0xc6>
 800ac92:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800ac94:	680b      	ldr	r3, [r1, #0]
 800ac96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d0e1      	beq.n	800ac62 <_rclc_take_new_data+0x42>
 800ac9e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800aca2:	2300      	movs	r3, #0
 800aca4:	aa0a      	add	r2, sp, #40	@ 0x28
 800aca6:	f007 fe6b 	bl	8012980 <rcl_take>
 800acaa:	4605      	mov	r5, r0
 800acac:	2800      	cmp	r0, #0
 800acae:	d0d9      	beq.n	800ac64 <_rclc_take_new_data+0x44>
 800acb0:	f240 1391 	movw	r3, #401	@ 0x191
 800acb4:	4298      	cmp	r0, r3
 800acb6:	d116      	bne.n	800ace6 <_rclc_take_new_data+0xc6>
 800acb8:	2300      	movs	r3, #0
 800acba:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800acbe:	e7d1      	b.n	800ac64 <_rclc_take_new_data+0x44>
 800acc0:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800acc2:	698b      	ldr	r3, [r1, #24]
 800acc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d0ca      	beq.n	800ac62 <_rclc_take_new_data+0x42>
 800accc:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800acd0:	f104 0110 	add.w	r1, r4, #16
 800acd4:	f006 ffcc 	bl	8011c70 <rcl_take_response>
 800acd8:	4605      	mov	r5, r0
 800acda:	2800      	cmp	r0, #0
 800acdc:	d0c1      	beq.n	800ac62 <_rclc_take_new_data+0x42>
 800acde:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800ace2:	4298      	cmp	r0, r3
 800ace4:	d0be      	beq.n	800ac64 <_rclc_take_new_data+0x44>
 800ace6:	f000 ff0b 	bl	800bb00 <rcutils_reset_error>
 800acea:	e7bb      	b.n	800ac64 <_rclc_take_new_data+0x44>
 800acec:	6840      	ldr	r0, [r0, #4]
 800acee:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d17d      	bne.n	800adf2 <_rclc_take_new_data+0x1d2>
 800acf6:	69c3      	ldr	r3, [r0, #28]
 800acf8:	b11b      	cbz	r3, 800ad02 <_rclc_take_new_data+0xe2>
 800acfa:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d144      	bne.n	800ad8c <_rclc_take_new_data+0x16c>
 800ad02:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	f040 80ac 	bne.w	800ae64 <_rclc_take_new_data+0x244>
 800ad0c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d0a6      	beq.n	800ac62 <_rclc_take_new_data+0x42>
 800ad14:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800ad16:	a90a      	add	r1, sp, #40	@ 0x28
 800ad18:	3010      	adds	r0, #16
 800ad1a:	f009 f8f9 	bl	8013f10 <rcl_action_take_result_response>
 800ad1e:	4605      	mov	r5, r0
 800ad20:	2800      	cmp	r0, #0
 800ad22:	d1e0      	bne.n	800ace6 <_rclc_take_new_data+0xc6>
 800ad24:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ad28:	6860      	ldr	r0, [r4, #4]
 800ad2a:	f009 fd55 	bl	80147d8 <rclc_action_find_handle_by_result_request_sequence_number>
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	d098      	beq.n	800ac64 <_rclc_take_new_data+0x44>
 800ad32:	2301      	movs	r3, #1
 800ad34:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800ad38:	e794      	b.n	800ac64 <_rclc_take_new_data+0x44>
 800ad3a:	250b      	movs	r5, #11
 800ad3c:	4628      	mov	r0, r5
 800ad3e:	b01b      	add	sp, #108	@ 0x6c
 800ad40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad42:	ae04      	add	r6, sp, #16
 800ad44:	aa0a      	add	r2, sp, #40	@ 0x28
 800ad46:	3010      	adds	r0, #16
 800ad48:	4631      	mov	r1, r6
 800ad4a:	f009 fb55 	bl	80143f8 <rcl_action_take_cancel_request>
 800ad4e:	4605      	mov	r5, r0
 800ad50:	2800      	cmp	r0, #0
 800ad52:	d1c8      	bne.n	800ace6 <_rclc_take_new_data+0xc6>
 800ad54:	6860      	ldr	r0, [r4, #4]
 800ad56:	a90a      	add	r1, sp, #40	@ 0x28
 800ad58:	f009 fcfc 	bl	8014754 <rclc_action_find_goal_handle_by_uuid>
 800ad5c:	4607      	mov	r7, r0
 800ad5e:	2800      	cmp	r0, #0
 800ad60:	f000 80bb 	beq.w	800aeda <_rclc_take_new_data+0x2ba>
 800ad64:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800ad68:	2101      	movs	r1, #1
 800ad6a:	f009 fc7d 	bl	8014668 <rcl_action_transition_goal_state>
 800ad6e:	2803      	cmp	r0, #3
 800ad70:	4684      	mov	ip, r0
 800ad72:	f040 80a7 	bne.w	800aec4 <_rclc_take_new_data+0x2a4>
 800ad76:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ad78:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800ad7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad7e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ad82:	e884 0003 	stmia.w	r4, {r0, r1}
 800ad86:	f887 c008 	strb.w	ip, [r7, #8]
 800ad8a:	e76b      	b.n	800ac64 <_rclc_take_new_data+0x44>
 800ad8c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ad8e:	3010      	adds	r0, #16
 800ad90:	f009 f93e 	bl	8014010 <rcl_action_take_feedback>
 800ad94:	4605      	mov	r5, r0
 800ad96:	2800      	cmp	r0, #0
 800ad98:	d1a5      	bne.n	800ace6 <_rclc_take_new_data+0xc6>
 800ad9a:	6860      	ldr	r0, [r4, #4]
 800ad9c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ad9e:	f009 fcd9 	bl	8014754 <rclc_action_find_goal_handle_by_uuid>
 800ada2:	4603      	mov	r3, r0
 800ada4:	2800      	cmp	r0, #0
 800ada6:	f000 80a3 	beq.w	800aef0 <_rclc_take_new_data+0x2d0>
 800adaa:	2201      	movs	r2, #1
 800adac:	6860      	ldr	r0, [r4, #4]
 800adae:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800adb2:	e7a6      	b.n	800ad02 <_rclc_take_new_data+0xe2>
 800adb4:	f009 fca8 	bl	8014708 <rclc_action_take_goal_handle>
 800adb8:	4606      	mov	r6, r0
 800adba:	6860      	ldr	r0, [r4, #4]
 800adbc:	2e00      	cmp	r6, #0
 800adbe:	f43f af47 	beq.w	800ac50 <_rclc_take_new_data+0x30>
 800adc2:	6070      	str	r0, [r6, #4]
 800adc4:	69f2      	ldr	r2, [r6, #28]
 800adc6:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800adca:	3010      	adds	r0, #16
 800adcc:	f009 fa5c 	bl	8014288 <rcl_action_take_goal_request>
 800add0:	4605      	mov	r5, r0
 800add2:	2800      	cmp	r0, #0
 800add4:	f040 808e 	bne.w	800aef4 <_rclc_take_new_data+0x2d4>
 800add8:	69f7      	ldr	r7, [r6, #28]
 800adda:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800addc:	7235      	strb	r5, [r6, #8]
 800adde:	f8c6 0009 	str.w	r0, [r6, #9]
 800ade2:	f8c6 100d 	str.w	r1, [r6, #13]
 800ade6:	6860      	ldr	r0, [r4, #4]
 800ade8:	f8c6 2011 	str.w	r2, [r6, #17]
 800adec:	f8c6 3015 	str.w	r3, [r6, #21]
 800adf0:	e72e      	b.n	800ac50 <_rclc_take_new_data+0x30>
 800adf2:	aa04      	add	r2, sp, #16
 800adf4:	a90a      	add	r1, sp, #40	@ 0x28
 800adf6:	3010      	adds	r0, #16
 800adf8:	f009 f812 	bl	8013e20 <rcl_action_take_goal_response>
 800adfc:	4605      	mov	r5, r0
 800adfe:	2800      	cmp	r0, #0
 800ae00:	f47f af71 	bne.w	800ace6 <_rclc_take_new_data+0xc6>
 800ae04:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ae08:	6860      	ldr	r0, [r4, #4]
 800ae0a:	f009 fcd3 	bl	80147b4 <rclc_action_find_handle_by_goal_request_sequence_number>
 800ae0e:	b130      	cbz	r0, 800ae1e <_rclc_take_new_data+0x1fe>
 800ae10:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800ae14:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800ae18:	2201      	movs	r2, #1
 800ae1a:	f880 2020 	strb.w	r2, [r0, #32]
 800ae1e:	6860      	ldr	r0, [r4, #4]
 800ae20:	e769      	b.n	800acf6 <_rclc_take_new_data+0xd6>
 800ae22:	aa04      	add	r2, sp, #16
 800ae24:	3010      	adds	r0, #16
 800ae26:	a90a      	add	r1, sp, #40	@ 0x28
 800ae28:	f009 faa6 	bl	8014378 <rcl_action_take_result_request>
 800ae2c:	4605      	mov	r5, r0
 800ae2e:	2800      	cmp	r0, #0
 800ae30:	f47f af59 	bne.w	800ace6 <_rclc_take_new_data+0xc6>
 800ae34:	6860      	ldr	r0, [r4, #4]
 800ae36:	a904      	add	r1, sp, #16
 800ae38:	f009 fc8c 	bl	8014754 <rclc_action_find_goal_handle_by_uuid>
 800ae3c:	4607      	mov	r7, r0
 800ae3e:	b160      	cbz	r0, 800ae5a <_rclc_take_new_data+0x23a>
 800ae40:	ad0a      	add	r5, sp, #40	@ 0x28
 800ae42:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800ae46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ae48:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ae4a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ae4e:	f04f 0c02 	mov.w	ip, #2
 800ae52:	e886 0003 	stmia.w	r6, {r0, r1}
 800ae56:	f887 c008 	strb.w	ip, [r7, #8]
 800ae5a:	6860      	ldr	r0, [r4, #4]
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800ae62:	e6fa      	b.n	800ac5a <_rclc_take_new_data+0x3a>
 800ae64:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800ae68:	a90a      	add	r1, sp, #40	@ 0x28
 800ae6a:	3010      	adds	r0, #16
 800ae6c:	f009 f890 	bl	8013f90 <rcl_action_take_cancel_response>
 800ae70:	4605      	mov	r5, r0
 800ae72:	2800      	cmp	r0, #0
 800ae74:	f47f af37 	bne.w	800ace6 <_rclc_take_new_data+0xc6>
 800ae78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ae7c:	6860      	ldr	r0, [r4, #4]
 800ae7e:	f009 fcbd 	bl	80147fc <rclc_action_find_handle_by_cancel_request_sequence_number>
 800ae82:	4606      	mov	r6, r0
 800ae84:	6860      	ldr	r0, [r4, #4]
 800ae86:	2e00      	cmp	r6, #0
 800ae88:	f43f af40 	beq.w	800ad0c <_rclc_take_new_data+0xec>
 800ae8c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800ae8e:	2701      	movs	r7, #1
 800ae90:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	f43f af3a 	beq.w	800ad0c <_rclc_take_new_data+0xec>
 800ae98:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ae9a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800ae9e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800aea2:	f009 fc57 	bl	8014754 <rclc_action_find_goal_handle_by_uuid>
 800aea6:	b138      	cbz	r0, 800aeb8 <_rclc_take_new_data+0x298>
 800aea8:	6860      	ldr	r0, [r4, #4]
 800aeaa:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800aeac:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800aeb0:	3501      	adds	r5, #1
 800aeb2:	42ab      	cmp	r3, r5
 800aeb4:	d8f0      	bhi.n	800ae98 <_rclc_take_new_data+0x278>
 800aeb6:	e729      	b.n	800ad0c <_rclc_take_new_data+0xec>
 800aeb8:	6860      	ldr	r0, [r4, #4]
 800aeba:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800aebc:	3501      	adds	r5, #1
 800aebe:	42ab      	cmp	r3, r5
 800aec0:	d8ea      	bhi.n	800ae98 <_rclc_take_new_data+0x278>
 800aec2:	e723      	b.n	800ad0c <_rclc_take_new_data+0xec>
 800aec4:	ab06      	add	r3, sp, #24
 800aec6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aec8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800aecc:	2103      	movs	r1, #3
 800aece:	e896 000c 	ldmia.w	r6, {r2, r3}
 800aed2:	6860      	ldr	r0, [r4, #4]
 800aed4:	f009 fd08 	bl	80148e8 <rclc_action_server_goal_cancel_reject>
 800aed8:	e6c4      	b.n	800ac64 <_rclc_take_new_data+0x44>
 800aeda:	ab06      	add	r3, sp, #24
 800aedc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aede:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800aee2:	2102      	movs	r1, #2
 800aee4:	e896 000c 	ldmia.w	r6, {r2, r3}
 800aee8:	6860      	ldr	r0, [r4, #4]
 800aeea:	f009 fcfd 	bl	80148e8 <rclc_action_server_goal_cancel_reject>
 800aeee:	e6b9      	b.n	800ac64 <_rclc_take_new_data+0x44>
 800aef0:	6860      	ldr	r0, [r4, #4]
 800aef2:	e706      	b.n	800ad02 <_rclc_take_new_data+0xe2>
 800aef4:	6860      	ldr	r0, [r4, #4]
 800aef6:	4631      	mov	r1, r6
 800aef8:	f009 fc16 	bl	8014728 <rclc_action_remove_used_goal_handle>
 800aefc:	f000 fe00 	bl	800bb00 <rcutils_reset_error>
 800af00:	e6b0      	b.n	800ac64 <_rclc_take_new_data+0x44>
 800af02:	2501      	movs	r5, #1
 800af04:	e6ae      	b.n	800ac64 <_rclc_take_new_data+0x44>
 800af06:	bf00      	nop

0800af08 <_rclc_execute.part.0>:
 800af08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af0a:	7803      	ldrb	r3, [r0, #0]
 800af0c:	b087      	sub	sp, #28
 800af0e:	4604      	mov	r4, r0
 800af10:	2b0a      	cmp	r3, #10
 800af12:	f200 8136 	bhi.w	800b182 <_rclc_execute.part.0+0x27a>
 800af16:	e8df f003 	tbb	[pc, r3]
 800af1a:	435e      	.short	0x435e
 800af1c:	06a1664f 	.word	0x06a1664f
 800af20:	6c1e0606 	.word	0x6c1e0606
 800af24:	59          	.byte	0x59
 800af25:	00          	.byte	0x00
 800af26:	2b06      	cmp	r3, #6
 800af28:	f000 8122 	beq.w	800b170 <_rclc_execute.part.0+0x268>
 800af2c:	2b07      	cmp	r3, #7
 800af2e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800af30:	f040 8118 	bne.w	800b164 <_rclc_execute.part.0+0x25c>
 800af34:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800af38:	6880      	ldr	r0, [r0, #8]
 800af3a:	4798      	blx	r3
 800af3c:	f104 0110 	add.w	r1, r4, #16
 800af40:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800af42:	6860      	ldr	r0, [r4, #4]
 800af44:	f007 fc1e 	bl	8012784 <rcl_send_response>
 800af48:	2800      	cmp	r0, #0
 800af4a:	d033      	beq.n	800afb4 <_rclc_execute.part.0+0xac>
 800af4c:	9005      	str	r0, [sp, #20]
 800af4e:	f000 fdd7 	bl	800bb00 <rcutils_reset_error>
 800af52:	9805      	ldr	r0, [sp, #20]
 800af54:	e02e      	b.n	800afb4 <_rclc_execute.part.0+0xac>
 800af56:	6840      	ldr	r0, [r0, #4]
 800af58:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	f000 8086 	beq.w	800b06e <_rclc_execute.part.0+0x166>
 800af62:	2600      	movs	r6, #0
 800af64:	2701      	movs	r7, #1
 800af66:	e004      	b.n	800af72 <_rclc_execute.part.0+0x6a>
 800af68:	f009 fba8 	bl	80146bc <rclc_action_send_result_request>
 800af6c:	b998      	cbnz	r0, 800af96 <_rclc_execute.part.0+0x8e>
 800af6e:	722f      	strb	r7, [r5, #8]
 800af70:	6860      	ldr	r0, [r4, #4]
 800af72:	f009 fc55 	bl	8014820 <rclc_action_find_first_handle_with_goal_response>
 800af76:	4605      	mov	r5, r0
 800af78:	2800      	cmp	r0, #0
 800af7a:	d077      	beq.n	800b06c <_rclc_execute.part.0+0x164>
 800af7c:	6863      	ldr	r3, [r4, #4]
 800af7e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800af80:	699b      	ldr	r3, [r3, #24]
 800af82:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800af86:	f885 6020 	strb.w	r6, [r5, #32]
 800af8a:	4798      	blx	r3
 800af8c:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800af90:	4628      	mov	r0, r5
 800af92:	2b00      	cmp	r3, #0
 800af94:	d1e8      	bne.n	800af68 <_rclc_execute.part.0+0x60>
 800af96:	6860      	ldr	r0, [r4, #4]
 800af98:	4629      	mov	r1, r5
 800af9a:	f009 fbc5 	bl	8014728 <rclc_action_remove_used_goal_handle>
 800af9e:	e7e7      	b.n	800af70 <_rclc_execute.part.0+0x68>
 800afa0:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800afa4:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800afa8:	2d00      	cmp	r5, #0
 800afaa:	f000 80c9 	beq.w	800b140 <_rclc_execute.part.0+0x238>
 800afae:	6880      	ldr	r0, [r0, #8]
 800afb0:	4798      	blx	r3
 800afb2:	2000      	movs	r0, #0
 800afb4:	b007      	add	sp, #28
 800afb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afb8:	6840      	ldr	r0, [r0, #4]
 800afba:	f007 ffef 	bl	8012f9c <rcl_timer_call>
 800afbe:	f240 3321 	movw	r3, #801	@ 0x321
 800afc2:	4298      	cmp	r0, r3
 800afc4:	d004      	beq.n	800afd0 <_rclc_execute.part.0+0xc8>
 800afc6:	2800      	cmp	r0, #0
 800afc8:	d0f4      	beq.n	800afb4 <_rclc_execute.part.0+0xac>
 800afca:	e7bf      	b.n	800af4c <_rclc_execute.part.0+0x44>
 800afcc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800afce:	4798      	blx	r3
 800afd0:	2000      	movs	r0, #0
 800afd2:	b007      	add	sp, #28
 800afd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afd6:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800afda:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800afdc:	b925      	cbnz	r5, 800afe8 <_rclc_execute.part.0+0xe0>
 800afde:	4628      	mov	r0, r5
 800afe0:	4798      	blx	r3
 800afe2:	4628      	mov	r0, r5
 800afe4:	e7e6      	b.n	800afb4 <_rclc_execute.part.0+0xac>
 800afe6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800afe8:	68a0      	ldr	r0, [r4, #8]
 800afea:	4798      	blx	r3
 800afec:	2000      	movs	r0, #0
 800afee:	b007      	add	sp, #28
 800aff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aff2:	6840      	ldr	r0, [r0, #4]
 800aff4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800aff8:	bb3b      	cbnz	r3, 800b04a <_rclc_execute.part.0+0x142>
 800affa:	f890 3020 	ldrb.w	r3, [r0, #32]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d07b      	beq.n	800b0fa <_rclc_execute.part.0+0x1f2>
 800b002:	f640 0634 	movw	r6, #2100	@ 0x834
 800b006:	2701      	movs	r7, #1
 800b008:	e007      	b.n	800b01a <_rclc_execute.part.0+0x112>
 800b00a:	4628      	mov	r0, r5
 800b00c:	f009 fc20 	bl	8014850 <rclc_action_server_response_goal_request>
 800b010:	6860      	ldr	r0, [r4, #4]
 800b012:	4629      	mov	r1, r5
 800b014:	f009 fb88 	bl	8014728 <rclc_action_remove_used_goal_handle>
 800b018:	6860      	ldr	r0, [r4, #4]
 800b01a:	2100      	movs	r1, #0
 800b01c:	f009 fbb2 	bl	8014784 <rclc_action_find_first_handle_by_status>
 800b020:	4605      	mov	r5, r0
 800b022:	2800      	cmp	r0, #0
 800b024:	d066      	beq.n	800b0f4 <_rclc_execute.part.0+0x1ec>
 800b026:	6863      	ldr	r3, [r4, #4]
 800b028:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b02a:	699b      	ldr	r3, [r3, #24]
 800b02c:	4798      	blx	r3
 800b02e:	42b0      	cmp	r0, r6
 800b030:	f04f 0100 	mov.w	r1, #0
 800b034:	d1e9      	bne.n	800b00a <_rclc_execute.part.0+0x102>
 800b036:	2101      	movs	r1, #1
 800b038:	4628      	mov	r0, r5
 800b03a:	f009 fc09 	bl	8014850 <rclc_action_server_response_goal_request>
 800b03e:	722f      	strb	r7, [r5, #8]
 800b040:	e7ea      	b.n	800b018 <_rclc_execute.part.0+0x110>
 800b042:	6848      	ldr	r0, [r1, #4]
 800b044:	f009 fb70 	bl	8014728 <rclc_action_remove_used_goal_handle>
 800b048:	6860      	ldr	r0, [r4, #4]
 800b04a:	f009 fba7 	bl	801479c <rclc_action_find_first_terminated_handle>
 800b04e:	4601      	mov	r1, r0
 800b050:	2800      	cmp	r0, #0
 800b052:	d1f6      	bne.n	800b042 <_rclc_execute.part.0+0x13a>
 800b054:	6860      	ldr	r0, [r4, #4]
 800b056:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800b05a:	e7ce      	b.n	800affa <_rclc_execute.part.0+0xf2>
 800b05c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800b05e:	6880      	ldr	r0, [r0, #8]
 800b060:	f104 0110 	add.w	r1, r4, #16
 800b064:	4798      	blx	r3
 800b066:	2000      	movs	r0, #0
 800b068:	b007      	add	sp, #28
 800b06a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b06c:	6860      	ldr	r0, [r4, #4]
 800b06e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800b072:	b18b      	cbz	r3, 800b098 <_rclc_execute.part.0+0x190>
 800b074:	68c5      	ldr	r5, [r0, #12]
 800b076:	b32d      	cbz	r5, 800b0c4 <_rclc_execute.part.0+0x1bc>
 800b078:	2600      	movs	r6, #0
 800b07a:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800b07e:	b143      	cbz	r3, 800b092 <_rclc_execute.part.0+0x18a>
 800b080:	69c3      	ldr	r3, [r0, #28]
 800b082:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800b086:	b123      	cbz	r3, 800b092 <_rclc_execute.part.0+0x18a>
 800b088:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800b08a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b08c:	4628      	mov	r0, r5
 800b08e:	4798      	blx	r3
 800b090:	6860      	ldr	r0, [r4, #4]
 800b092:	682d      	ldr	r5, [r5, #0]
 800b094:	2d00      	cmp	r5, #0
 800b096:	d1f0      	bne.n	800b07a <_rclc_execute.part.0+0x172>
 800b098:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800b09c:	b193      	cbz	r3, 800b0c4 <_rclc_execute.part.0+0x1bc>
 800b09e:	68c5      	ldr	r5, [r0, #12]
 800b0a0:	b185      	cbz	r5, 800b0c4 <_rclc_execute.part.0+0x1bc>
 800b0a2:	2600      	movs	r6, #0
 800b0a4:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800b0a8:	b14b      	cbz	r3, 800b0be <_rclc_execute.part.0+0x1b6>
 800b0aa:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800b0ac:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800b0b0:	b12b      	cbz	r3, 800b0be <_rclc_execute.part.0+0x1b6>
 800b0b2:	4628      	mov	r0, r5
 800b0b4:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800b0b8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b0ba:	4798      	blx	r3
 800b0bc:	6860      	ldr	r0, [r4, #4]
 800b0be:	682d      	ldr	r5, [r5, #0]
 800b0c0:	2d00      	cmp	r5, #0
 800b0c2:	d1ef      	bne.n	800b0a4 <_rclc_execute.part.0+0x19c>
 800b0c4:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d081      	beq.n	800afd0 <_rclc_execute.part.0+0xc8>
 800b0cc:	2700      	movs	r7, #0
 800b0ce:	e00b      	b.n	800b0e8 <_rclc_execute.part.0+0x1e0>
 800b0d0:	6863      	ldr	r3, [r4, #4]
 800b0d2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b0d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800b0d6:	6a1e      	ldr	r6, [r3, #32]
 800b0d8:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800b0dc:	47b0      	blx	r6
 800b0de:	6860      	ldr	r0, [r4, #4]
 800b0e0:	4629      	mov	r1, r5
 800b0e2:	f009 fb21 	bl	8014728 <rclc_action_remove_used_goal_handle>
 800b0e6:	6860      	ldr	r0, [r4, #4]
 800b0e8:	f009 fba6 	bl	8014838 <rclc_action_find_first_handle_with_result_response>
 800b0ec:	4605      	mov	r5, r0
 800b0ee:	2800      	cmp	r0, #0
 800b0f0:	d1ee      	bne.n	800b0d0 <_rclc_execute.part.0+0x1c8>
 800b0f2:	e76d      	b.n	800afd0 <_rclc_execute.part.0+0xc8>
 800b0f4:	6860      	ldr	r0, [r4, #4]
 800b0f6:	f880 5020 	strb.w	r5, [r0, #32]
 800b0fa:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	f43f af66 	beq.w	800afd0 <_rclc_execute.part.0+0xc8>
 800b104:	68c5      	ldr	r5, [r0, #12]
 800b106:	b1b5      	cbz	r5, 800b136 <_rclc_execute.part.0+0x22e>
 800b108:	2602      	movs	r6, #2
 800b10a:	e001      	b.n	800b110 <_rclc_execute.part.0+0x208>
 800b10c:	682d      	ldr	r5, [r5, #0]
 800b10e:	b195      	cbz	r5, 800b136 <_rclc_execute.part.0+0x22e>
 800b110:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800b114:	2b03      	cmp	r3, #3
 800b116:	d1f9      	bne.n	800b10c <_rclc_execute.part.0+0x204>
 800b118:	69c3      	ldr	r3, [r0, #28]
 800b11a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b11c:	4628      	mov	r0, r5
 800b11e:	4798      	blx	r3
 800b120:	4603      	mov	r3, r0
 800b122:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800b126:	4628      	mov	r0, r5
 800b128:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800b12c:	b163      	cbz	r3, 800b148 <_rclc_execute.part.0+0x240>
 800b12e:	f009 fbaf 	bl	8014890 <rclc_action_server_goal_cancel_accept>
 800b132:	6860      	ldr	r0, [r4, #4]
 800b134:	e7ea      	b.n	800b10c <_rclc_execute.part.0+0x204>
 800b136:	2300      	movs	r3, #0
 800b138:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800b13c:	4618      	mov	r0, r3
 800b13e:	e739      	b.n	800afb4 <_rclc_execute.part.0+0xac>
 800b140:	4628      	mov	r0, r5
 800b142:	4798      	blx	r3
 800b144:	4628      	mov	r0, r5
 800b146:	e735      	b.n	800afb4 <_rclc_execute.part.0+0xac>
 800b148:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800b14a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800b14e:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800b152:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b156:	6860      	ldr	r0, [r4, #4]
 800b158:	2101      	movs	r1, #1
 800b15a:	f009 fbc5 	bl	80148e8 <rclc_action_server_goal_cancel_reject>
 800b15e:	722e      	strb	r6, [r5, #8]
 800b160:	6860      	ldr	r0, [r4, #4]
 800b162:	e7d3      	b.n	800b10c <_rclc_execute.part.0+0x204>
 800b164:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800b166:	6880      	ldr	r0, [r0, #8]
 800b168:	4798      	blx	r3
 800b16a:	f104 0110 	add.w	r1, r4, #16
 800b16e:	e6e7      	b.n	800af40 <_rclc_execute.part.0+0x38>
 800b170:	f100 0110 	add.w	r1, r0, #16
 800b174:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800b176:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800b178:	6880      	ldr	r0, [r0, #8]
 800b17a:	9105      	str	r1, [sp, #20]
 800b17c:	4798      	blx	r3
 800b17e:	9905      	ldr	r1, [sp, #20]
 800b180:	e6de      	b.n	800af40 <_rclc_execute.part.0+0x38>
 800b182:	2001      	movs	r0, #1
 800b184:	e716      	b.n	800afb4 <_rclc_execute.part.0+0xac>
 800b186:	bf00      	nop

0800b188 <rclc_executor_trigger_any>:
 800b188:	2800      	cmp	r0, #0
 800b18a:	d03f      	beq.n	800b20c <rclc_executor_trigger_any+0x84>
 800b18c:	2900      	cmp	r1, #0
 800b18e:	d03e      	beq.n	800b20e <rclc_executor_trigger_any+0x86>
 800b190:	4603      	mov	r3, r0
 800b192:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800b196:	2200      	movs	r2, #0
 800b198:	2800      	cmp	r0, #0
 800b19a:	d037      	beq.n	800b20c <rclc_executor_trigger_any+0x84>
 800b19c:	b430      	push	{r4, r5}
 800b19e:	f893 c000 	ldrb.w	ip, [r3]
 800b1a2:	f1bc 0f08 	cmp.w	ip, #8
 800b1a6:	d11e      	bne.n	800b1e6 <rclc_executor_trigger_any+0x5e>
 800b1a8:	685c      	ldr	r4, [r3, #4]
 800b1aa:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800b1ac:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800b1b0:	d105      	bne.n	800b1be <rclc_executor_trigger_any+0x36>
 800b1b2:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800b1b6:	b910      	cbnz	r0, 800b1be <rclc_executor_trigger_any+0x36>
 800b1b8:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800b1bc:	b128      	cbz	r0, 800b1ca <rclc_executor_trigger_any+0x42>
 800b1be:	bc30      	pop	{r4, r5}
 800b1c0:	4770      	bx	lr
 800b1c2:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800b1c6:	2800      	cmp	r0, #0
 800b1c8:	d1f9      	bne.n	800b1be <rclc_executor_trigger_any+0x36>
 800b1ca:	3201      	adds	r2, #1
 800b1cc:	4291      	cmp	r1, r2
 800b1ce:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800b1d2:	d018      	beq.n	800b206 <rclc_executor_trigger_any+0x7e>
 800b1d4:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800b1d8:	2800      	cmp	r0, #0
 800b1da:	d0f0      	beq.n	800b1be <rclc_executor_trigger_any+0x36>
 800b1dc:	f893 c000 	ldrb.w	ip, [r3]
 800b1e0:	f1bc 0f08 	cmp.w	ip, #8
 800b1e4:	d0e0      	beq.n	800b1a8 <rclc_executor_trigger_any+0x20>
 800b1e6:	f1bc 0f09 	cmp.w	ip, #9
 800b1ea:	d1ea      	bne.n	800b1c2 <rclc_executor_trigger_any+0x3a>
 800b1ec:	685c      	ldr	r4, [r3, #4]
 800b1ee:	6a25      	ldr	r5, [r4, #32]
 800b1f0:	2d00      	cmp	r5, #0
 800b1f2:	d1e4      	bne.n	800b1be <rclc_executor_trigger_any+0x36>
 800b1f4:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	d1e0      	bne.n	800b1be <rclc_executor_trigger_any+0x36>
 800b1fc:	3201      	adds	r2, #1
 800b1fe:	4291      	cmp	r1, r2
 800b200:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800b204:	d1e6      	bne.n	800b1d4 <rclc_executor_trigger_any+0x4c>
 800b206:	2000      	movs	r0, #0
 800b208:	bc30      	pop	{r4, r5}
 800b20a:	4770      	bx	lr
 800b20c:	4770      	bx	lr
 800b20e:	4608      	mov	r0, r1
 800b210:	4770      	bx	lr
 800b212:	bf00      	nop

0800b214 <rclc_executor_get_zero_initialized_executor>:
 800b214:	b510      	push	{r4, lr}
 800b216:	4903      	ldr	r1, [pc, #12]	@ (800b224 <rclc_executor_get_zero_initialized_executor+0x10>)
 800b218:	4604      	mov	r4, r0
 800b21a:	2288      	movs	r2, #136	@ 0x88
 800b21c:	f00c fda5 	bl	8017d6a <memcpy>
 800b220:	4620      	mov	r0, r4
 800b222:	bd10      	pop	{r4, pc}
 800b224:	08018cd8 	.word	0x08018cd8

0800b228 <rclc_executor_init>:
 800b228:	2800      	cmp	r0, #0
 800b22a:	d05f      	beq.n	800b2ec <rclc_executor_init+0xc4>
 800b22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b230:	460c      	mov	r4, r1
 800b232:	b0b0      	sub	sp, #192	@ 0xc0
 800b234:	2900      	cmp	r1, #0
 800b236:	d051      	beq.n	800b2dc <rclc_executor_init+0xb4>
 800b238:	4605      	mov	r5, r0
 800b23a:	4618      	mov	r0, r3
 800b23c:	4616      	mov	r6, r2
 800b23e:	461f      	mov	r7, r3
 800b240:	f000 fc38 	bl	800bab4 <rcutils_allocator_is_valid>
 800b244:	2800      	cmp	r0, #0
 800b246:	d049      	beq.n	800b2dc <rclc_executor_init+0xb4>
 800b248:	2e00      	cmp	r6, #0
 800b24a:	d047      	beq.n	800b2dc <rclc_executor_init+0xb4>
 800b24c:	492c      	ldr	r1, [pc, #176]	@ (800b300 <rclc_executor_init+0xd8>)
 800b24e:	2288      	movs	r2, #136	@ 0x88
 800b250:	a80e      	add	r0, sp, #56	@ 0x38
 800b252:	f00c fd8a 	bl	8017d6a <memcpy>
 800b256:	a90e      	add	r1, sp, #56	@ 0x38
 800b258:	2288      	movs	r2, #136	@ 0x88
 800b25a:	4628      	mov	r0, r5
 800b25c:	f00c fd85 	bl	8017d6a <memcpy>
 800b260:	602c      	str	r4, [r5, #0]
 800b262:	4668      	mov	r0, sp
 800b264:	60ae      	str	r6, [r5, #8]
 800b266:	466c      	mov	r4, sp
 800b268:	f008 f80a 	bl	8013280 <rcl_get_zero_initialized_wait_set>
 800b26c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b26e:	f105 0c14 	add.w	ip, r5, #20
 800b272:	f8d7 8000 	ldr.w	r8, [r7]
 800b276:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b27a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b27c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b280:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b282:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b286:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800b2f8 <rclc_executor_init+0xd0>
 800b28a:	6823      	ldr	r3, [r4, #0]
 800b28c:	f8cc 3000 	str.w	r3, [ip]
 800b290:	6939      	ldr	r1, [r7, #16]
 800b292:	612f      	str	r7, [r5, #16]
 800b294:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800b298:	01b0      	lsls	r0, r6, #6
 800b29a:	47c0      	blx	r8
 800b29c:	6068      	str	r0, [r5, #4]
 800b29e:	b338      	cbz	r0, 800b2f0 <rclc_executor_init+0xc8>
 800b2a0:	2400      	movs	r4, #0
 800b2a2:	e000      	b.n	800b2a6 <rclc_executor_init+0x7e>
 800b2a4:	6868      	ldr	r0, [r5, #4]
 800b2a6:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800b2aa:	4631      	mov	r1, r6
 800b2ac:	3401      	adds	r4, #1
 800b2ae:	f000 fa9f 	bl	800b7f0 <rclc_executor_handle_init>
 800b2b2:	42a6      	cmp	r6, r4
 800b2b4:	d1f6      	bne.n	800b2a4 <rclc_executor_init+0x7c>
 800b2b6:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800b2ba:	f000 fa8d 	bl	800b7d8 <rclc_executor_handle_counters_zero_init>
 800b2be:	4a11      	ldr	r2, [pc, #68]	@ (800b304 <rclc_executor_init+0xdc>)
 800b2c0:	686b      	ldr	r3, [r5, #4]
 800b2c2:	2000      	movs	r0, #0
 800b2c4:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800b2c8:	b163      	cbz	r3, 800b2e4 <rclc_executor_init+0xbc>
 800b2ca:	692b      	ldr	r3, [r5, #16]
 800b2cc:	b153      	cbz	r3, 800b2e4 <rclc_executor_init+0xbc>
 800b2ce:	68ab      	ldr	r3, [r5, #8]
 800b2d0:	b143      	cbz	r3, 800b2e4 <rclc_executor_init+0xbc>
 800b2d2:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800b2d6:	b030      	add	sp, #192	@ 0xc0
 800b2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2dc:	200b      	movs	r0, #11
 800b2de:	b030      	add	sp, #192	@ 0xc0
 800b2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	b030      	add	sp, #192	@ 0xc0
 800b2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2ec:	200b      	movs	r0, #11
 800b2ee:	4770      	bx	lr
 800b2f0:	200a      	movs	r0, #10
 800b2f2:	e7f4      	b.n	800b2de <rclc_executor_init+0xb6>
 800b2f4:	f3af 8000 	nop.w
 800b2f8:	3b9aca00 	.word	0x3b9aca00
 800b2fc:	00000000 	.word	0x00000000
 800b300:	08018cd8 	.word	0x08018cd8
 800b304:	0800b189 	.word	0x0800b189

0800b308 <rclc_executor_add_subscription>:
 800b308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b30a:	f89d e018 	ldrb.w	lr, [sp, #24]
 800b30e:	b338      	cbz	r0, 800b360 <rclc_executor_add_subscription+0x58>
 800b310:	b331      	cbz	r1, 800b360 <rclc_executor_add_subscription+0x58>
 800b312:	b32a      	cbz	r2, 800b360 <rclc_executor_add_subscription+0x58>
 800b314:	b323      	cbz	r3, 800b360 <rclc_executor_add_subscription+0x58>
 800b316:	4604      	mov	r4, r0
 800b318:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800b31c:	42a8      	cmp	r0, r5
 800b31e:	d301      	bcc.n	800b324 <rclc_executor_add_subscription+0x1c>
 800b320:	2001      	movs	r0, #1
 800b322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b324:	6866      	ldr	r6, [r4, #4]
 800b326:	0187      	lsls	r7, r0, #6
 800b328:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800b32c:	2500      	movs	r5, #0
 800b32e:	55f5      	strb	r5, [r6, r7]
 800b330:	3001      	adds	r0, #1
 800b332:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800b336:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800b33a:	2301      	movs	r3, #1
 800b33c:	f104 0514 	add.w	r5, r4, #20
 800b340:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800b344:	f88c e001 	strb.w	lr, [ip, #1]
 800b348:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800b34c:	60e0      	str	r0, [r4, #12]
 800b34e:	4628      	mov	r0, r5
 800b350:	f007 ffaa 	bl	80132a8 <rcl_wait_set_is_valid>
 800b354:	b930      	cbnz	r0, 800b364 <rclc_executor_add_subscription+0x5c>
 800b356:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800b358:	3301      	adds	r3, #1
 800b35a:	2000      	movs	r0, #0
 800b35c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800b35e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b360:	200b      	movs	r0, #11
 800b362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b364:	4628      	mov	r0, r5
 800b366:	f007 ffa5 	bl	80132b4 <rcl_wait_set_fini>
 800b36a:	2800      	cmp	r0, #0
 800b36c:	d0f3      	beq.n	800b356 <rclc_executor_add_subscription+0x4e>
 800b36e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b370 <rclc_executor_add_timer>:
 800b370:	b300      	cbz	r0, 800b3b4 <rclc_executor_add_timer+0x44>
 800b372:	b1f9      	cbz	r1, 800b3b4 <rclc_executor_add_timer+0x44>
 800b374:	b538      	push	{r3, r4, r5, lr}
 800b376:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800b37a:	4293      	cmp	r3, r2
 800b37c:	4604      	mov	r4, r0
 800b37e:	d301      	bcc.n	800b384 <rclc_executor_add_timer+0x14>
 800b380:	2001      	movs	r0, #1
 800b382:	bd38      	pop	{r3, r4, r5, pc}
 800b384:	6840      	ldr	r0, [r0, #4]
 800b386:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800b38a:	019d      	lsls	r5, r3, #6
 800b38c:	6051      	str	r1, [r2, #4]
 800b38e:	2102      	movs	r1, #2
 800b390:	5341      	strh	r1, [r0, r5]
 800b392:	3301      	adds	r3, #1
 800b394:	2000      	movs	r0, #0
 800b396:	2101      	movs	r1, #1
 800b398:	f104 0514 	add.w	r5, r4, #20
 800b39c:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800b39e:	8711      	strh	r1, [r2, #56]	@ 0x38
 800b3a0:	4628      	mov	r0, r5
 800b3a2:	60e3      	str	r3, [r4, #12]
 800b3a4:	f007 ff80 	bl	80132a8 <rcl_wait_set_is_valid>
 800b3a8:	b930      	cbnz	r0, 800b3b8 <rclc_executor_add_timer+0x48>
 800b3aa:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	2000      	movs	r0, #0
 800b3b0:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800b3b2:	bd38      	pop	{r3, r4, r5, pc}
 800b3b4:	200b      	movs	r0, #11
 800b3b6:	4770      	bx	lr
 800b3b8:	4628      	mov	r0, r5
 800b3ba:	f007 ff7b 	bl	80132b4 <rcl_wait_set_fini>
 800b3be:	2800      	cmp	r0, #0
 800b3c0:	d0f3      	beq.n	800b3aa <rclc_executor_add_timer+0x3a>
 800b3c2:	bd38      	pop	{r3, r4, r5, pc}

0800b3c4 <rclc_executor_prepare>:
 800b3c4:	2800      	cmp	r0, #0
 800b3c6:	d044      	beq.n	800b452 <rclc_executor_prepare+0x8e>
 800b3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3ca:	f100 0514 	add.w	r5, r0, #20
 800b3ce:	b09b      	sub	sp, #108	@ 0x6c
 800b3d0:	4604      	mov	r4, r0
 800b3d2:	4628      	mov	r0, r5
 800b3d4:	f007 ff68 	bl	80132a8 <rcl_wait_set_is_valid>
 800b3d8:	b110      	cbz	r0, 800b3e0 <rclc_executor_prepare+0x1c>
 800b3da:	2000      	movs	r0, #0
 800b3dc:	b01b      	add	sp, #108	@ 0x6c
 800b3de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3e0:	4628      	mov	r0, r5
 800b3e2:	f007 ff67 	bl	80132b4 <rcl_wait_set_fini>
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	d130      	bne.n	800b44c <rclc_executor_prepare+0x88>
 800b3ea:	a80c      	add	r0, sp, #48	@ 0x30
 800b3ec:	f007 ff48 	bl	8013280 <rcl_get_zero_initialized_wait_set>
 800b3f0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800b3f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b3f8:	46ae      	mov	lr, r5
 800b3fa:	6927      	ldr	r7, [r4, #16]
 800b3fc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b400:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b404:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b408:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b40c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800b410:	f8dc 3000 	ldr.w	r3, [ip]
 800b414:	f8ce 3000 	str.w	r3, [lr]
 800b418:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800b41a:	ae04      	add	r6, sp, #16
 800b41c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	6822      	ldr	r2, [r4, #0]
 800b422:	6033      	str	r3, [r6, #0]
 800b424:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b426:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800b428:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800b42c:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800b430:	e9cd 2100 	strd	r2, r1, [sp]
 800b434:	4628      	mov	r0, r5
 800b436:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800b438:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b43a:	f008 fa39 	bl	80138b0 <rcl_wait_set_init>
 800b43e:	2800      	cmp	r0, #0
 800b440:	d0cc      	beq.n	800b3dc <rclc_executor_prepare+0x18>
 800b442:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b444:	f000 fb5c 	bl	800bb00 <rcutils_reset_error>
 800b448:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b44a:	e7c7      	b.n	800b3dc <rclc_executor_prepare+0x18>
 800b44c:	f000 fb58 	bl	800bb00 <rcutils_reset_error>
 800b450:	e7cb      	b.n	800b3ea <rclc_executor_prepare+0x26>
 800b452:	200b      	movs	r0, #11
 800b454:	4770      	bx	lr
 800b456:	bf00      	nop

0800b458 <rclc_executor_spin_some.part.0>:
 800b458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b45c:	f100 0614 	add.w	r6, r0, #20
 800b460:	b083      	sub	sp, #12
 800b462:	4691      	mov	r9, r2
 800b464:	4698      	mov	r8, r3
 800b466:	4605      	mov	r5, r0
 800b468:	f7ff ffac 	bl	800b3c4 <rclc_executor_prepare>
 800b46c:	4630      	mov	r0, r6
 800b46e:	f007 ffed 	bl	801344c <rcl_wait_set_clear>
 800b472:	4607      	mov	r7, r0
 800b474:	2800      	cmp	r0, #0
 800b476:	f040 80ed 	bne.w	800b654 <rclc_executor_spin_some.part.0+0x1fc>
 800b47a:	68ab      	ldr	r3, [r5, #8]
 800b47c:	4604      	mov	r4, r0
 800b47e:	b303      	cbz	r3, 800b4c2 <rclc_executor_spin_some.part.0+0x6a>
 800b480:	6869      	ldr	r1, [r5, #4]
 800b482:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800b486:	01a2      	lsls	r2, r4, #6
 800b488:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800b48c:	b1cb      	cbz	r3, 800b4c2 <rclc_executor_spin_some.part.0+0x6a>
 800b48e:	5c8b      	ldrb	r3, [r1, r2]
 800b490:	2b0a      	cmp	r3, #10
 800b492:	f200 80d8 	bhi.w	800b646 <rclc_executor_spin_some.part.0+0x1ee>
 800b496:	e8df f003 	tbb	[pc, r3]
 800b49a:	9c9c      	.short	0x9c9c
 800b49c:	068c8ca7 	.word	0x068c8ca7
 800b4a0:	bdc90606 	.word	0xbdc90606
 800b4a4:	b2          	.byte	0xb2
 800b4a5:	00          	.byte	0x00
 800b4a6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b4aa:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b4ae:	4630      	mov	r0, r6
 800b4b0:	f008 fb14 	bl	8013adc <rcl_wait_set_add_service>
 800b4b4:	2800      	cmp	r0, #0
 800b4b6:	f040 8086 	bne.w	800b5c6 <rclc_executor_spin_some.part.0+0x16e>
 800b4ba:	68ab      	ldr	r3, [r5, #8]
 800b4bc:	3401      	adds	r4, #1
 800b4be:	429c      	cmp	r4, r3
 800b4c0:	d3de      	bcc.n	800b480 <rclc_executor_spin_some.part.0+0x28>
 800b4c2:	4643      	mov	r3, r8
 800b4c4:	464a      	mov	r2, r9
 800b4c6:	4630      	mov	r0, r6
 800b4c8:	f008 fb36 	bl	8013b38 <rcl_wait>
 800b4cc:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	f000 80c7 	beq.w	800b664 <rclc_executor_spin_some.part.0+0x20c>
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	f040 80b5 	bne.w	800b646 <rclc_executor_spin_some.part.0+0x1ee>
 800b4dc:	68ab      	ldr	r3, [r5, #8]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	f000 8159 	beq.w	800b796 <rclc_executor_spin_some.part.0+0x33e>
 800b4e4:	2400      	movs	r4, #0
 800b4e6:	46a0      	mov	r8, r4
 800b4e8:	f240 1991 	movw	r9, #401	@ 0x191
 800b4ec:	e00a      	b.n	800b504 <rclc_executor_spin_some.part.0+0xac>
 800b4ee:	f7ff fb49 	bl	800ab84 <_rclc_check_for_new_data>
 800b4f2:	4604      	mov	r4, r0
 800b4f4:	b110      	cbz	r0, 800b4fc <rclc_executor_spin_some.part.0+0xa4>
 800b4f6:	4548      	cmp	r0, r9
 800b4f8:	f040 80b2 	bne.w	800b660 <rclc_executor_spin_some.part.0+0x208>
 800b4fc:	68ab      	ldr	r3, [r5, #8]
 800b4fe:	4598      	cmp	r8, r3
 800b500:	f080 8126 	bcs.w	800b750 <rclc_executor_spin_some.part.0+0x2f8>
 800b504:	686a      	ldr	r2, [r5, #4]
 800b506:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800b50a:	4631      	mov	r1, r6
 800b50c:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800b510:	f108 0801 	add.w	r8, r8, #1
 800b514:	f1bc 0f00 	cmp.w	ip, #0
 800b518:	d1e9      	bne.n	800b4ee <rclc_executor_spin_some.part.0+0x96>
 800b51a:	4619      	mov	r1, r3
 800b51c:	4610      	mov	r0, r2
 800b51e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800b522:	4798      	blx	r3
 800b524:	2800      	cmp	r0, #0
 800b526:	f000 809b 	beq.w	800b660 <rclc_executor_spin_some.part.0+0x208>
 800b52a:	68ab      	ldr	r3, [r5, #8]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	f000 8097 	beq.w	800b660 <rclc_executor_spin_some.part.0+0x208>
 800b532:	f04f 0800 	mov.w	r8, #0
 800b536:	f240 1991 	movw	r9, #401	@ 0x191
 800b53a:	e009      	b.n	800b550 <rclc_executor_spin_some.part.0+0xf8>
 800b53c:	f7ff fb70 	bl	800ac20 <_rclc_take_new_data>
 800b540:	4604      	mov	r4, r0
 800b542:	b110      	cbz	r0, 800b54a <rclc_executor_spin_some.part.0+0xf2>
 800b544:	4548      	cmp	r0, r9
 800b546:	f040 808b 	bne.w	800b660 <rclc_executor_spin_some.part.0+0x208>
 800b54a:	68ab      	ldr	r3, [r5, #8]
 800b54c:	4598      	cmp	r8, r3
 800b54e:	d209      	bcs.n	800b564 <rclc_executor_spin_some.part.0+0x10c>
 800b550:	6868      	ldr	r0, [r5, #4]
 800b552:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800b556:	4631      	mov	r1, r6
 800b558:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800b55c:	f108 0801 	add.w	r8, r8, #1
 800b560:	2a00      	cmp	r2, #0
 800b562:	d1eb      	bne.n	800b53c <rclc_executor_spin_some.part.0+0xe4>
 800b564:	2600      	movs	r6, #0
 800b566:	b97b      	cbnz	r3, 800b588 <rclc_executor_spin_some.part.0+0x130>
 800b568:	e07a      	b.n	800b660 <rclc_executor_spin_some.part.0+0x208>
 800b56a:	f812 200c 	ldrb.w	r2, [r2, ip]
 800b56e:	2a08      	cmp	r2, #8
 800b570:	f000 80fd 	beq.w	800b76e <rclc_executor_spin_some.part.0+0x316>
 800b574:	2a09      	cmp	r2, #9
 800b576:	f000 80ef 	beq.w	800b758 <rclc_executor_spin_some.part.0+0x300>
 800b57a:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800b57e:	b98a      	cbnz	r2, 800b5a4 <rclc_executor_spin_some.part.0+0x14c>
 800b580:	3601      	adds	r6, #1
 800b582:	429e      	cmp	r6, r3
 800b584:	d262      	bcs.n	800b64c <rclc_executor_spin_some.part.0+0x1f4>
 800b586:	2400      	movs	r4, #0
 800b588:	686a      	ldr	r2, [r5, #4]
 800b58a:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800b58e:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800b592:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800b596:	2900      	cmp	r1, #0
 800b598:	d062      	beq.n	800b660 <rclc_executor_spin_some.part.0+0x208>
 800b59a:	7841      	ldrb	r1, [r0, #1]
 800b59c:	2900      	cmp	r1, #0
 800b59e:	d0e4      	beq.n	800b56a <rclc_executor_spin_some.part.0+0x112>
 800b5a0:	2901      	cmp	r1, #1
 800b5a2:	d1ed      	bne.n	800b580 <rclc_executor_spin_some.part.0+0x128>
 800b5a4:	f7ff fcb0 	bl	800af08 <_rclc_execute.part.0>
 800b5a8:	2800      	cmp	r0, #0
 800b5aa:	f040 80b6 	bne.w	800b71a <rclc_executor_spin_some.part.0+0x2c2>
 800b5ae:	68ab      	ldr	r3, [r5, #8]
 800b5b0:	e7e6      	b.n	800b580 <rclc_executor_spin_some.part.0+0x128>
 800b5b2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b5b6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b5ba:	4630      	mov	r0, r6
 800b5bc:	f008 fa62 	bl	8013a84 <rcl_wait_set_add_client>
 800b5c0:	2800      	cmp	r0, #0
 800b5c2:	f43f af7a 	beq.w	800b4ba <rclc_executor_spin_some.part.0+0x62>
 800b5c6:	9001      	str	r0, [sp, #4]
 800b5c8:	f000 fa9a 	bl	800bb00 <rcutils_reset_error>
 800b5cc:	9801      	ldr	r0, [sp, #4]
 800b5ce:	4607      	mov	r7, r0
 800b5d0:	e03c      	b.n	800b64c <rclc_executor_spin_some.part.0+0x1f4>
 800b5d2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b5d6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b5da:	4630      	mov	r0, r6
 800b5dc:	f007 ff0a 	bl	80133f4 <rcl_wait_set_add_subscription>
 800b5e0:	2800      	cmp	r0, #0
 800b5e2:	f43f af6a 	beq.w	800b4ba <rclc_executor_spin_some.part.0+0x62>
 800b5e6:	e7ee      	b.n	800b5c6 <rclc_executor_spin_some.part.0+0x16e>
 800b5e8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b5ec:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b5f0:	4630      	mov	r0, r6
 800b5f2:	f008 fa17 	bl	8013a24 <rcl_wait_set_add_timer>
 800b5f6:	2800      	cmp	r0, #0
 800b5f8:	f43f af5f 	beq.w	800b4ba <rclc_executor_spin_some.part.0+0x62>
 800b5fc:	e7e3      	b.n	800b5c6 <rclc_executor_spin_some.part.0+0x16e>
 800b5fe:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b602:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b606:	4630      	mov	r0, r6
 800b608:	f008 f9e0 	bl	80139cc <rcl_wait_set_add_guard_condition>
 800b60c:	2800      	cmp	r0, #0
 800b60e:	f43f af54 	beq.w	800b4ba <rclc_executor_spin_some.part.0+0x62>
 800b612:	e7d8      	b.n	800b5c6 <rclc_executor_spin_some.part.0+0x16e>
 800b614:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b618:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b61c:	3110      	adds	r1, #16
 800b61e:	4630      	mov	r0, r6
 800b620:	f008 ff62 	bl	80144e8 <rcl_action_wait_set_add_action_server>
 800b624:	2800      	cmp	r0, #0
 800b626:	f43f af48 	beq.w	800b4ba <rclc_executor_spin_some.part.0+0x62>
 800b62a:	e7cc      	b.n	800b5c6 <rclc_executor_spin_some.part.0+0x16e>
 800b62c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800b630:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800b634:	3110      	adds	r1, #16
 800b636:	2300      	movs	r3, #0
 800b638:	4630      	mov	r0, r6
 800b63a:	f008 fd2d 	bl	8014098 <rcl_action_wait_set_add_action_client>
 800b63e:	2800      	cmp	r0, #0
 800b640:	f43f af3b 	beq.w	800b4ba <rclc_executor_spin_some.part.0+0x62>
 800b644:	e7bf      	b.n	800b5c6 <rclc_executor_spin_some.part.0+0x16e>
 800b646:	f000 fa5b 	bl	800bb00 <rcutils_reset_error>
 800b64a:	2701      	movs	r7, #1
 800b64c:	4638      	mov	r0, r7
 800b64e:	b003      	add	sp, #12
 800b650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b654:	f000 fa54 	bl	800bb00 <rcutils_reset_error>
 800b658:	4638      	mov	r0, r7
 800b65a:	b003      	add	sp, #12
 800b65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b660:	4627      	mov	r7, r4
 800b662:	e7f3      	b.n	800b64c <rclc_executor_spin_some.part.0+0x1f4>
 800b664:	68ab      	ldr	r3, [r5, #8]
 800b666:	2b00      	cmp	r3, #0
 800b668:	f000 8092 	beq.w	800b790 <rclc_executor_spin_some.part.0+0x338>
 800b66c:	2400      	movs	r4, #0
 800b66e:	46a0      	mov	r8, r4
 800b670:	f240 1991 	movw	r9, #401	@ 0x191
 800b674:	e008      	b.n	800b688 <rclc_executor_spin_some.part.0+0x230>
 800b676:	f7ff fa85 	bl	800ab84 <_rclc_check_for_new_data>
 800b67a:	4604      	mov	r4, r0
 800b67c:	b108      	cbz	r0, 800b682 <rclc_executor_spin_some.part.0+0x22a>
 800b67e:	4548      	cmp	r0, r9
 800b680:	d1ee      	bne.n	800b660 <rclc_executor_spin_some.part.0+0x208>
 800b682:	68ab      	ldr	r3, [r5, #8]
 800b684:	4598      	cmp	r8, r3
 800b686:	d265      	bcs.n	800b754 <rclc_executor_spin_some.part.0+0x2fc>
 800b688:	686a      	ldr	r2, [r5, #4]
 800b68a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800b68e:	4631      	mov	r1, r6
 800b690:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800b694:	f108 0801 	add.w	r8, r8, #1
 800b698:	f1bc 0f00 	cmp.w	ip, #0
 800b69c:	d1eb      	bne.n	800b676 <rclc_executor_spin_some.part.0+0x21e>
 800b69e:	4619      	mov	r1, r3
 800b6a0:	4610      	mov	r0, r2
 800b6a2:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800b6a6:	4798      	blx	r3
 800b6a8:	2800      	cmp	r0, #0
 800b6aa:	d0d9      	beq.n	800b660 <rclc_executor_spin_some.part.0+0x208>
 800b6ac:	68ab      	ldr	r3, [r5, #8]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d0d6      	beq.n	800b660 <rclc_executor_spin_some.part.0+0x208>
 800b6b2:	f04f 0800 	mov.w	r8, #0
 800b6b6:	f240 1991 	movw	r9, #401	@ 0x191
 800b6ba:	f240 2a59 	movw	sl, #601	@ 0x259
 800b6be:	e00e      	b.n	800b6de <rclc_executor_spin_some.part.0+0x286>
 800b6c0:	f813 300b 	ldrb.w	r3, [r3, fp]
 800b6c4:	2b08      	cmp	r3, #8
 800b6c6:	d033      	beq.n	800b730 <rclc_executor_spin_some.part.0+0x2d8>
 800b6c8:	2b09      	cmp	r3, #9
 800b6ca:	d028      	beq.n	800b71e <rclc_executor_spin_some.part.0+0x2c6>
 800b6cc:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800b6d0:	b9fb      	cbnz	r3, 800b712 <rclc_executor_spin_some.part.0+0x2ba>
 800b6d2:	68ab      	ldr	r3, [r5, #8]
 800b6d4:	f108 0801 	add.w	r8, r8, #1
 800b6d8:	4598      	cmp	r8, r3
 800b6da:	d2b7      	bcs.n	800b64c <rclc_executor_spin_some.part.0+0x1f4>
 800b6dc:	2400      	movs	r4, #0
 800b6de:	6868      	ldr	r0, [r5, #4]
 800b6e0:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800b6e4:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800b6e8:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d0b7      	beq.n	800b660 <rclc_executor_spin_some.part.0+0x208>
 800b6f0:	4631      	mov	r1, r6
 800b6f2:	f7ff fa95 	bl	800ac20 <_rclc_take_new_data>
 800b6f6:	b118      	cbz	r0, 800b700 <rclc_executor_spin_some.part.0+0x2a8>
 800b6f8:	4548      	cmp	r0, r9
 800b6fa:	d001      	beq.n	800b700 <rclc_executor_spin_some.part.0+0x2a8>
 800b6fc:	4550      	cmp	r0, sl
 800b6fe:	d10c      	bne.n	800b71a <rclc_executor_spin_some.part.0+0x2c2>
 800b700:	686b      	ldr	r3, [r5, #4]
 800b702:	eb13 000b 	adds.w	r0, r3, fp
 800b706:	d021      	beq.n	800b74c <rclc_executor_spin_some.part.0+0x2f4>
 800b708:	7842      	ldrb	r2, [r0, #1]
 800b70a:	2a00      	cmp	r2, #0
 800b70c:	d0d8      	beq.n	800b6c0 <rclc_executor_spin_some.part.0+0x268>
 800b70e:	2a01      	cmp	r2, #1
 800b710:	d1df      	bne.n	800b6d2 <rclc_executor_spin_some.part.0+0x27a>
 800b712:	f7ff fbf9 	bl	800af08 <_rclc_execute.part.0>
 800b716:	2800      	cmp	r0, #0
 800b718:	d0db      	beq.n	800b6d2 <rclc_executor_spin_some.part.0+0x27a>
 800b71a:	4607      	mov	r7, r0
 800b71c:	e796      	b.n	800b64c <rclc_executor_spin_some.part.0+0x1f4>
 800b71e:	6843      	ldr	r3, [r0, #4]
 800b720:	6a1a      	ldr	r2, [r3, #32]
 800b722:	2a00      	cmp	r2, #0
 800b724:	d1f5      	bne.n	800b712 <rclc_executor_spin_some.part.0+0x2ba>
 800b726:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d0d1      	beq.n	800b6d2 <rclc_executor_spin_some.part.0+0x27a>
 800b72e:	e7f0      	b.n	800b712 <rclc_executor_spin_some.part.0+0x2ba>
 800b730:	6843      	ldr	r3, [r0, #4]
 800b732:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b734:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800b738:	d1eb      	bne.n	800b712 <rclc_executor_spin_some.part.0+0x2ba>
 800b73a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800b73e:	2a00      	cmp	r2, #0
 800b740:	d1e7      	bne.n	800b712 <rclc_executor_spin_some.part.0+0x2ba>
 800b742:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b746:	2b00      	cmp	r3, #0
 800b748:	d0c3      	beq.n	800b6d2 <rclc_executor_spin_some.part.0+0x27a>
 800b74a:	e7e2      	b.n	800b712 <rclc_executor_spin_some.part.0+0x2ba>
 800b74c:	270b      	movs	r7, #11
 800b74e:	e77d      	b.n	800b64c <rclc_executor_spin_some.part.0+0x1f4>
 800b750:	686a      	ldr	r2, [r5, #4]
 800b752:	e6e2      	b.n	800b51a <rclc_executor_spin_some.part.0+0xc2>
 800b754:	686a      	ldr	r2, [r5, #4]
 800b756:	e7a2      	b.n	800b69e <rclc_executor_spin_some.part.0+0x246>
 800b758:	6842      	ldr	r2, [r0, #4]
 800b75a:	6a11      	ldr	r1, [r2, #32]
 800b75c:	2900      	cmp	r1, #0
 800b75e:	f47f af21 	bne.w	800b5a4 <rclc_executor_spin_some.part.0+0x14c>
 800b762:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800b766:	2a00      	cmp	r2, #0
 800b768:	f43f af0a 	beq.w	800b580 <rclc_executor_spin_some.part.0+0x128>
 800b76c:	e71a      	b.n	800b5a4 <rclc_executor_spin_some.part.0+0x14c>
 800b76e:	6842      	ldr	r2, [r0, #4]
 800b770:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800b772:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800b776:	f47f af15 	bne.w	800b5a4 <rclc_executor_spin_some.part.0+0x14c>
 800b77a:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800b77e:	2900      	cmp	r1, #0
 800b780:	f47f af10 	bne.w	800b5a4 <rclc_executor_spin_some.part.0+0x14c>
 800b784:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800b788:	2a00      	cmp	r2, #0
 800b78a:	f43f aef9 	beq.w	800b580 <rclc_executor_spin_some.part.0+0x128>
 800b78e:	e709      	b.n	800b5a4 <rclc_executor_spin_some.part.0+0x14c>
 800b790:	686a      	ldr	r2, [r5, #4]
 800b792:	461c      	mov	r4, r3
 800b794:	e783      	b.n	800b69e <rclc_executor_spin_some.part.0+0x246>
 800b796:	686a      	ldr	r2, [r5, #4]
 800b798:	461c      	mov	r4, r3
 800b79a:	e6be      	b.n	800b51a <rclc_executor_spin_some.part.0+0xc2>

0800b79c <rclc_executor_spin>:
 800b79c:	b1d0      	cbz	r0, 800b7d4 <rclc_executor_spin+0x38>
 800b79e:	b510      	push	{r4, lr}
 800b7a0:	4604      	mov	r4, r0
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800b7a8:	6820      	ldr	r0, [r4, #0]
 800b7aa:	e9cd 2300 	strd	r2, r3, [sp]
 800b7ae:	f006 facf 	bl	8011d50 <rcl_context_is_valid>
 800b7b2:	4601      	mov	r1, r0
 800b7b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7b8:	4620      	mov	r0, r4
 800b7ba:	b131      	cbz	r1, 800b7ca <rclc_executor_spin+0x2e>
 800b7bc:	f7ff fe4c 	bl	800b458 <rclc_executor_spin_some.part.0>
 800b7c0:	f030 0302 	bics.w	r3, r0, #2
 800b7c4:	d0ee      	beq.n	800b7a4 <rclc_executor_spin+0x8>
 800b7c6:	b002      	add	sp, #8
 800b7c8:	bd10      	pop	{r4, pc}
 800b7ca:	f000 f999 	bl	800bb00 <rcutils_reset_error>
 800b7ce:	2001      	movs	r0, #1
 800b7d0:	b002      	add	sp, #8
 800b7d2:	bd10      	pop	{r4, pc}
 800b7d4:	200b      	movs	r0, #11
 800b7d6:	4770      	bx	lr

0800b7d8 <rclc_executor_handle_counters_zero_init>:
 800b7d8:	b130      	cbz	r0, 800b7e8 <rclc_executor_handle_counters_zero_init+0x10>
 800b7da:	b508      	push	{r3, lr}
 800b7dc:	2220      	movs	r2, #32
 800b7de:	2100      	movs	r1, #0
 800b7e0:	f00c f9fa 	bl	8017bd8 <memset>
 800b7e4:	2000      	movs	r0, #0
 800b7e6:	bd08      	pop	{r3, pc}
 800b7e8:	200b      	movs	r0, #11
 800b7ea:	4770      	bx	lr
 800b7ec:	0000      	movs	r0, r0
	...

0800b7f0 <rclc_executor_handle_init>:
 800b7f0:	b168      	cbz	r0, 800b80e <rclc_executor_handle_init+0x1e>
 800b7f2:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800b818 <rclc_executor_handle_init+0x28>
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	220b      	movs	r2, #11
 800b7fa:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800b7fe:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800b802:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800b806:	8002      	strh	r2, [r0, #0]
 800b808:	8703      	strh	r3, [r0, #56]	@ 0x38
 800b80a:	4618      	mov	r0, r3
 800b80c:	4770      	bx	lr
 800b80e:	200b      	movs	r0, #11
 800b810:	4770      	bx	lr
 800b812:	bf00      	nop
 800b814:	f3af 8000 	nop.w
	...

0800b820 <rclc_support_init_with_options>:
 800b820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b824:	b083      	sub	sp, #12
 800b826:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b828:	b340      	cbz	r0, 800b87c <rclc_support_init_with_options+0x5c>
 800b82a:	461d      	mov	r5, r3
 800b82c:	b333      	cbz	r3, 800b87c <rclc_support_init_with_options+0x5c>
 800b82e:	b32e      	cbz	r6, 800b87c <rclc_support_init_with_options+0x5c>
 800b830:	46e9      	mov	r9, sp
 800b832:	4604      	mov	r4, r0
 800b834:	4648      	mov	r0, r9
 800b836:	460f      	mov	r7, r1
 800b838:	4690      	mov	r8, r2
 800b83a:	f006 fa7f 	bl	8011d3c <rcl_get_zero_initialized_context>
 800b83e:	e899 0003 	ldmia.w	r9, {r0, r1}
 800b842:	462a      	mov	r2, r5
 800b844:	e884 0003 	stmia.w	r4, {r0, r1}
 800b848:	4623      	mov	r3, r4
 800b84a:	4641      	mov	r1, r8
 800b84c:	4638      	mov	r0, r7
 800b84e:	f006 fae5 	bl	8011e1c <rcl_init>
 800b852:	4605      	mov	r5, r0
 800b854:	b960      	cbnz	r0, 800b870 <rclc_support_init_with_options+0x50>
 800b856:	60a6      	str	r6, [r4, #8]
 800b858:	4632      	mov	r2, r6
 800b85a:	f104 010c 	add.w	r1, r4, #12
 800b85e:	2003      	movs	r0, #3
 800b860:	f007 f90e 	bl	8012a80 <rcl_clock_init>
 800b864:	4605      	mov	r5, r0
 800b866:	b918      	cbnz	r0, 800b870 <rclc_support_init_with_options+0x50>
 800b868:	4628      	mov	r0, r5
 800b86a:	b003      	add	sp, #12
 800b86c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b870:	f000 f946 	bl	800bb00 <rcutils_reset_error>
 800b874:	4628      	mov	r0, r5
 800b876:	b003      	add	sp, #12
 800b878:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b87c:	250b      	movs	r5, #11
 800b87e:	4628      	mov	r0, r5
 800b880:	b003      	add	sp, #12
 800b882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b886:	bf00      	nop

0800b888 <rclc_node_init_default>:
 800b888:	b3b8      	cbz	r0, 800b8fa <rclc_node_init_default+0x72>
 800b88a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b88e:	460d      	mov	r5, r1
 800b890:	b0a1      	sub	sp, #132	@ 0x84
 800b892:	b329      	cbz	r1, 800b8e0 <rclc_node_init_default+0x58>
 800b894:	4616      	mov	r6, r2
 800b896:	b31a      	cbz	r2, 800b8e0 <rclc_node_init_default+0x58>
 800b898:	461f      	mov	r7, r3
 800b89a:	b30b      	cbz	r3, 800b8e0 <rclc_node_init_default+0x58>
 800b89c:	f10d 0810 	add.w	r8, sp, #16
 800b8a0:	4604      	mov	r4, r0
 800b8a2:	4640      	mov	r0, r8
 800b8a4:	f006 fbe0 	bl	8012068 <rcl_get_zero_initialized_node>
 800b8a8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b8ac:	f10d 0918 	add.w	r9, sp, #24
 800b8b0:	e884 0003 	stmia.w	r4, {r0, r1}
 800b8b4:	4648      	mov	r0, r9
 800b8b6:	f006 fd4f 	bl	8012358 <rcl_node_get_default_options>
 800b8ba:	4640      	mov	r0, r8
 800b8bc:	f006 fbd4 	bl	8012068 <rcl_get_zero_initialized_node>
 800b8c0:	f8cd 9000 	str.w	r9, [sp]
 800b8c4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800b8c8:	463b      	mov	r3, r7
 800b8ca:	e884 0003 	stmia.w	r4, {r0, r1}
 800b8ce:	4632      	mov	r2, r6
 800b8d0:	4629      	mov	r1, r5
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	f006 fbd2 	bl	801207c <rcl_node_init>
 800b8d8:	b930      	cbnz	r0, 800b8e8 <rclc_node_init_default+0x60>
 800b8da:	b021      	add	sp, #132	@ 0x84
 800b8dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8e0:	200b      	movs	r0, #11
 800b8e2:	b021      	add	sp, #132	@ 0x84
 800b8e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8e8:	9003      	str	r0, [sp, #12]
 800b8ea:	f000 f909 	bl	800bb00 <rcutils_reset_error>
 800b8ee:	f000 f907 	bl	800bb00 <rcutils_reset_error>
 800b8f2:	9803      	ldr	r0, [sp, #12]
 800b8f4:	b021      	add	sp, #132	@ 0x84
 800b8f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8fa:	200b      	movs	r0, #11
 800b8fc:	4770      	bx	lr
 800b8fe:	bf00      	nop

0800b900 <rclc_publisher_init_default>:
 800b900:	b368      	cbz	r0, 800b95e <rclc_publisher_init_default+0x5e>
 800b902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b906:	460d      	mov	r5, r1
 800b908:	b0a0      	sub	sp, #128	@ 0x80
 800b90a:	b321      	cbz	r1, 800b956 <rclc_publisher_init_default+0x56>
 800b90c:	4616      	mov	r6, r2
 800b90e:	b312      	cbz	r2, 800b956 <rclc_publisher_init_default+0x56>
 800b910:	461f      	mov	r7, r3
 800b912:	b303      	cbz	r3, 800b956 <rclc_publisher_init_default+0x56>
 800b914:	4604      	mov	r4, r0
 800b916:	f7ff f825 	bl	800a964 <rcl_get_zero_initialized_publisher>
 800b91a:	f10d 0810 	add.w	r8, sp, #16
 800b91e:	6020      	str	r0, [r4, #0]
 800b920:	4640      	mov	r0, r8
 800b922:	f7ff f8bb 	bl	800aa9c <rcl_publisher_get_default_options>
 800b926:	490f      	ldr	r1, [pc, #60]	@ (800b964 <rclc_publisher_init_default+0x64>)
 800b928:	2250      	movs	r2, #80	@ 0x50
 800b92a:	4640      	mov	r0, r8
 800b92c:	f00c fa1d 	bl	8017d6a <memcpy>
 800b930:	f8cd 8000 	str.w	r8, [sp]
 800b934:	463b      	mov	r3, r7
 800b936:	4632      	mov	r2, r6
 800b938:	4629      	mov	r1, r5
 800b93a:	4620      	mov	r0, r4
 800b93c:	f7ff f818 	bl	800a970 <rcl_publisher_init>
 800b940:	b910      	cbnz	r0, 800b948 <rclc_publisher_init_default+0x48>
 800b942:	b020      	add	sp, #128	@ 0x80
 800b944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b948:	9003      	str	r0, [sp, #12]
 800b94a:	f000 f8d9 	bl	800bb00 <rcutils_reset_error>
 800b94e:	9803      	ldr	r0, [sp, #12]
 800b950:	b020      	add	sp, #128	@ 0x80
 800b952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b956:	200b      	movs	r0, #11
 800b958:	b020      	add	sp, #128	@ 0x80
 800b95a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b95e:	200b      	movs	r0, #11
 800b960:	4770      	bx	lr
 800b962:	bf00      	nop
 800b964:	08018d60 	.word	0x08018d60

0800b968 <rclc_subscription_init_default>:
 800b968:	b368      	cbz	r0, 800b9c6 <rclc_subscription_init_default+0x5e>
 800b96a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b96e:	460d      	mov	r5, r1
 800b970:	b0a0      	sub	sp, #128	@ 0x80
 800b972:	b321      	cbz	r1, 800b9be <rclc_subscription_init_default+0x56>
 800b974:	4616      	mov	r6, r2
 800b976:	b312      	cbz	r2, 800b9be <rclc_subscription_init_default+0x56>
 800b978:	461f      	mov	r7, r3
 800b97a:	b303      	cbz	r3, 800b9be <rclc_subscription_init_default+0x56>
 800b97c:	4604      	mov	r4, r0
 800b97e:	f006 ff23 	bl	80127c8 <rcl_get_zero_initialized_subscription>
 800b982:	f10d 0810 	add.w	r8, sp, #16
 800b986:	6020      	str	r0, [r4, #0]
 800b988:	4640      	mov	r0, r8
 800b98a:	f006 ffcb 	bl	8012924 <rcl_subscription_get_default_options>
 800b98e:	490f      	ldr	r1, [pc, #60]	@ (800b9cc <rclc_subscription_init_default+0x64>)
 800b990:	2250      	movs	r2, #80	@ 0x50
 800b992:	4640      	mov	r0, r8
 800b994:	f00c f9e9 	bl	8017d6a <memcpy>
 800b998:	f8cd 8000 	str.w	r8, [sp]
 800b99c:	463b      	mov	r3, r7
 800b99e:	4632      	mov	r2, r6
 800b9a0:	4629      	mov	r1, r5
 800b9a2:	4620      	mov	r0, r4
 800b9a4:	f006 ff16 	bl	80127d4 <rcl_subscription_init>
 800b9a8:	b910      	cbnz	r0, 800b9b0 <rclc_subscription_init_default+0x48>
 800b9aa:	b020      	add	sp, #128	@ 0x80
 800b9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9b0:	9003      	str	r0, [sp, #12]
 800b9b2:	f000 f8a5 	bl	800bb00 <rcutils_reset_error>
 800b9b6:	9803      	ldr	r0, [sp, #12]
 800b9b8:	b020      	add	sp, #128	@ 0x80
 800b9ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9be:	200b      	movs	r0, #11
 800b9c0:	b020      	add	sp, #128	@ 0x80
 800b9c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9c6:	200b      	movs	r0, #11
 800b9c8:	4770      	bx	lr
 800b9ca:	bf00      	nop
 800b9cc:	08018db0 	.word	0x08018db0

0800b9d0 <rclc_timer_init_default>:
 800b9d0:	b360      	cbz	r0, 800ba2c <rclc_timer_init_default+0x5c>
 800b9d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9d6:	460e      	mov	r6, r1
 800b9d8:	b08a      	sub	sp, #40	@ 0x28
 800b9da:	b319      	cbz	r1, 800ba24 <rclc_timer_init_default+0x54>
 800b9dc:	4690      	mov	r8, r2
 800b9de:	461f      	mov	r7, r3
 800b9e0:	4605      	mov	r5, r0
 800b9e2:	f007 fa2b 	bl	8012e3c <rcl_get_zero_initialized_timer>
 800b9e6:	68b4      	ldr	r4, [r6, #8]
 800b9e8:	6028      	str	r0, [r5, #0]
 800b9ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b9ec:	f10d 0c0c 	add.w	ip, sp, #12
 800b9f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b9f4:	6823      	ldr	r3, [r4, #0]
 800b9f6:	f8cc 3000 	str.w	r3, [ip]
 800b9fa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b9fc:	9302      	str	r3, [sp, #8]
 800b9fe:	e9cd 8700 	strd	r8, r7, [sp]
 800ba02:	4628      	mov	r0, r5
 800ba04:	4632      	mov	r2, r6
 800ba06:	f106 010c 	add.w	r1, r6, #12
 800ba0a:	f007 fa1d 	bl	8012e48 <rcl_timer_init>
 800ba0e:	b910      	cbnz	r0, 800ba16 <rclc_timer_init_default+0x46>
 800ba10:	b00a      	add	sp, #40	@ 0x28
 800ba12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba16:	9009      	str	r0, [sp, #36]	@ 0x24
 800ba18:	f000 f872 	bl	800bb00 <rcutils_reset_error>
 800ba1c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ba1e:	b00a      	add	sp, #40	@ 0x28
 800ba20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba24:	200b      	movs	r0, #11
 800ba26:	b00a      	add	sp, #40	@ 0x28
 800ba28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba2c:	200b      	movs	r0, #11
 800ba2e:	4770      	bx	lr

0800ba30 <__default_zero_allocate>:
 800ba30:	f00b bce8 	b.w	8017404 <calloc>

0800ba34 <__default_reallocate>:
 800ba34:	f00b be74 	b.w	8017720 <realloc>

0800ba38 <__default_deallocate>:
 800ba38:	f00b bd50 	b.w	80174dc <free>

0800ba3c <__default_allocate>:
 800ba3c:	f00b bd46 	b.w	80174cc <malloc>

0800ba40 <rcutils_get_zero_initialized_allocator>:
 800ba40:	b510      	push	{r4, lr}
 800ba42:	4c05      	ldr	r4, [pc, #20]	@ (800ba58 <rcutils_get_zero_initialized_allocator+0x18>)
 800ba44:	4686      	mov	lr, r0
 800ba46:	4684      	mov	ip, r0
 800ba48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ba4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ba4e:	6823      	ldr	r3, [r4, #0]
 800ba50:	f8cc 3000 	str.w	r3, [ip]
 800ba54:	4670      	mov	r0, lr
 800ba56:	bd10      	pop	{r4, pc}
 800ba58:	08018e00 	.word	0x08018e00

0800ba5c <rcutils_set_default_allocator>:
 800ba5c:	b1a8      	cbz	r0, 800ba8a <rcutils_set_default_allocator+0x2e>
 800ba5e:	6802      	ldr	r2, [r0, #0]
 800ba60:	b1a2      	cbz	r2, 800ba8c <rcutils_set_default_allocator+0x30>
 800ba62:	6841      	ldr	r1, [r0, #4]
 800ba64:	b1a1      	cbz	r1, 800ba90 <rcutils_set_default_allocator+0x34>
 800ba66:	b410      	push	{r4}
 800ba68:	68c4      	ldr	r4, [r0, #12]
 800ba6a:	b164      	cbz	r4, 800ba86 <rcutils_set_default_allocator+0x2a>
 800ba6c:	6880      	ldr	r0, [r0, #8]
 800ba6e:	b138      	cbz	r0, 800ba80 <rcutils_set_default_allocator+0x24>
 800ba70:	4b08      	ldr	r3, [pc, #32]	@ (800ba94 <rcutils_set_default_allocator+0x38>)
 800ba72:	601a      	str	r2, [r3, #0]
 800ba74:	2200      	movs	r2, #0
 800ba76:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800ba7a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800ba7e:	2001      	movs	r0, #1
 800ba80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba84:	4770      	bx	lr
 800ba86:	4620      	mov	r0, r4
 800ba88:	e7fa      	b.n	800ba80 <rcutils_set_default_allocator+0x24>
 800ba8a:	4770      	bx	lr
 800ba8c:	4610      	mov	r0, r2
 800ba8e:	4770      	bx	lr
 800ba90:	4608      	mov	r0, r1
 800ba92:	4770      	bx	lr
 800ba94:	20000014 	.word	0x20000014

0800ba98 <rcutils_get_default_allocator>:
 800ba98:	b510      	push	{r4, lr}
 800ba9a:	4c05      	ldr	r4, [pc, #20]	@ (800bab0 <rcutils_get_default_allocator+0x18>)
 800ba9c:	4686      	mov	lr, r0
 800ba9e:	4684      	mov	ip, r0
 800baa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800baa2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800baa6:	6823      	ldr	r3, [r4, #0]
 800baa8:	f8cc 3000 	str.w	r3, [ip]
 800baac:	4670      	mov	r0, lr
 800baae:	bd10      	pop	{r4, pc}
 800bab0:	20000014 	.word	0x20000014

0800bab4 <rcutils_allocator_is_valid>:
 800bab4:	b158      	cbz	r0, 800bace <rcutils_allocator_is_valid+0x1a>
 800bab6:	6803      	ldr	r3, [r0, #0]
 800bab8:	b143      	cbz	r3, 800bacc <rcutils_allocator_is_valid+0x18>
 800baba:	6843      	ldr	r3, [r0, #4]
 800babc:	b133      	cbz	r3, 800bacc <rcutils_allocator_is_valid+0x18>
 800babe:	68c3      	ldr	r3, [r0, #12]
 800bac0:	b123      	cbz	r3, 800bacc <rcutils_allocator_is_valid+0x18>
 800bac2:	6880      	ldr	r0, [r0, #8]
 800bac4:	3800      	subs	r0, #0
 800bac6:	bf18      	it	ne
 800bac8:	2001      	movne	r0, #1
 800baca:	4770      	bx	lr
 800bacc:	4618      	mov	r0, r3
 800bace:	4770      	bx	lr

0800bad0 <rcutils_get_error_string>:
 800bad0:	4b06      	ldr	r3, [pc, #24]	@ (800baec <rcutils_get_error_string+0x1c>)
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	b13b      	cbz	r3, 800bae6 <rcutils_get_error_string+0x16>
 800bad6:	4b06      	ldr	r3, [pc, #24]	@ (800baf0 <rcutils_get_error_string+0x20>)
 800bad8:	781a      	ldrb	r2, [r3, #0]
 800bada:	b90a      	cbnz	r2, 800bae0 <rcutils_get_error_string+0x10>
 800badc:	2201      	movs	r2, #1
 800bade:	701a      	strb	r2, [r3, #0]
 800bae0:	4b04      	ldr	r3, [pc, #16]	@ (800baf4 <rcutils_get_error_string+0x24>)
 800bae2:	7818      	ldrb	r0, [r3, #0]
 800bae4:	4770      	bx	lr
 800bae6:	4b04      	ldr	r3, [pc, #16]	@ (800baf8 <rcutils_get_error_string+0x28>)
 800bae8:	7818      	ldrb	r0, [r3, #0]
 800baea:	4770      	bx	lr
 800baec:	20006228 	.word	0x20006228
 800baf0:	20006241 	.word	0x20006241
 800baf4:	20006240 	.word	0x20006240
 800baf8:	08018e14 	.word	0x08018e14
 800bafc:	00000000 	.word	0x00000000

0800bb00 <rcutils_reset_error>:
 800bb00:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800bb20 <rcutils_reset_error+0x20>
 800bb04:	4a08      	ldr	r2, [pc, #32]	@ (800bb28 <rcutils_reset_error+0x28>)
 800bb06:	4809      	ldr	r0, [pc, #36]	@ (800bb2c <rcutils_reset_error+0x2c>)
 800bb08:	4909      	ldr	r1, [pc, #36]	@ (800bb30 <rcutils_reset_error+0x30>)
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	8013      	strh	r3, [r2, #0]
 800bb0e:	ed82 7b02 	vstr	d7, [r2, #8]
 800bb12:	4a08      	ldr	r2, [pc, #32]	@ (800bb34 <rcutils_reset_error+0x34>)
 800bb14:	7003      	strb	r3, [r0, #0]
 800bb16:	700b      	strb	r3, [r1, #0]
 800bb18:	7013      	strb	r3, [r2, #0]
 800bb1a:	4770      	bx	lr
 800bb1c:	f3af 8000 	nop.w
	...
 800bb28:	20006230 	.word	0x20006230
 800bb2c:	20006241 	.word	0x20006241
 800bb30:	20006240 	.word	0x20006240
 800bb34:	20006228 	.word	0x20006228

0800bb38 <rcutils_system_time_now>:
 800bb38:	b308      	cbz	r0, 800bb7e <rcutils_system_time_now+0x46>
 800bb3a:	b570      	push	{r4, r5, r6, lr}
 800bb3c:	b084      	sub	sp, #16
 800bb3e:	4604      	mov	r4, r0
 800bb40:	4669      	mov	r1, sp
 800bb42:	2001      	movs	r0, #1
 800bb44:	f7f6 fe88 	bl	8002858 <clock_gettime>
 800bb48:	e9dd 3500 	ldrd	r3, r5, [sp]
 800bb4c:	2d00      	cmp	r5, #0
 800bb4e:	db13      	blt.n	800bb78 <rcutils_system_time_now+0x40>
 800bb50:	9902      	ldr	r1, [sp, #8]
 800bb52:	2900      	cmp	r1, #0
 800bb54:	db0d      	blt.n	800bb72 <rcutils_system_time_now+0x3a>
 800bb56:	4e0b      	ldr	r6, [pc, #44]	@ (800bb84 <rcutils_system_time_now+0x4c>)
 800bb58:	fba3 3206 	umull	r3, r2, r3, r6
 800bb5c:	185b      	adds	r3, r3, r1
 800bb5e:	fb06 2205 	mla	r2, r6, r5, r2
 800bb62:	f04f 0000 	mov.w	r0, #0
 800bb66:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800bb6a:	e9c4 3200 	strd	r3, r2, [r4]
 800bb6e:	b004      	add	sp, #16
 800bb70:	bd70      	pop	{r4, r5, r6, pc}
 800bb72:	ea53 0205 	orrs.w	r2, r3, r5
 800bb76:	d1ee      	bne.n	800bb56 <rcutils_system_time_now+0x1e>
 800bb78:	2002      	movs	r0, #2
 800bb7a:	b004      	add	sp, #16
 800bb7c:	bd70      	pop	{r4, r5, r6, pc}
 800bb7e:	200b      	movs	r0, #11
 800bb80:	4770      	bx	lr
 800bb82:	bf00      	nop
 800bb84:	3b9aca00 	.word	0x3b9aca00

0800bb88 <rcutils_steady_time_now>:
 800bb88:	b308      	cbz	r0, 800bbce <rcutils_steady_time_now+0x46>
 800bb8a:	b570      	push	{r4, r5, r6, lr}
 800bb8c:	b084      	sub	sp, #16
 800bb8e:	4604      	mov	r4, r0
 800bb90:	4669      	mov	r1, sp
 800bb92:	2000      	movs	r0, #0
 800bb94:	f7f6 fe60 	bl	8002858 <clock_gettime>
 800bb98:	e9dd 3500 	ldrd	r3, r5, [sp]
 800bb9c:	2d00      	cmp	r5, #0
 800bb9e:	db13      	blt.n	800bbc8 <rcutils_steady_time_now+0x40>
 800bba0:	9902      	ldr	r1, [sp, #8]
 800bba2:	2900      	cmp	r1, #0
 800bba4:	db0d      	blt.n	800bbc2 <rcutils_steady_time_now+0x3a>
 800bba6:	4e0b      	ldr	r6, [pc, #44]	@ (800bbd4 <rcutils_steady_time_now+0x4c>)
 800bba8:	fba3 3206 	umull	r3, r2, r3, r6
 800bbac:	185b      	adds	r3, r3, r1
 800bbae:	fb06 2205 	mla	r2, r6, r5, r2
 800bbb2:	f04f 0000 	mov.w	r0, #0
 800bbb6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800bbba:	e9c4 3200 	strd	r3, r2, [r4]
 800bbbe:	b004      	add	sp, #16
 800bbc0:	bd70      	pop	{r4, r5, r6, pc}
 800bbc2:	ea53 0205 	orrs.w	r2, r3, r5
 800bbc6:	d1ee      	bne.n	800bba6 <rcutils_steady_time_now+0x1e>
 800bbc8:	2002      	movs	r0, #2
 800bbca:	b004      	add	sp, #16
 800bbcc:	bd70      	pop	{r4, r5, r6, pc}
 800bbce:	200b      	movs	r0, #11
 800bbd0:	4770      	bx	lr
 800bbd2:	bf00      	nop
 800bbd4:	3b9aca00 	.word	0x3b9aca00

0800bbd8 <rmw_get_zero_initialized_init_options>:
 800bbd8:	b510      	push	{r4, lr}
 800bbda:	2238      	movs	r2, #56	@ 0x38
 800bbdc:	4604      	mov	r4, r0
 800bbde:	2100      	movs	r1, #0
 800bbe0:	f00b fffa 	bl	8017bd8 <memset>
 800bbe4:	f104 0010 	add.w	r0, r4, #16
 800bbe8:	f000 f80a 	bl	800bc00 <rmw_get_default_security_options>
 800bbec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bbf0:	60e3      	str	r3, [r4, #12]
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	bd10      	pop	{r4, pc}
 800bbf6:	bf00      	nop

0800bbf8 <rmw_get_default_publisher_options>:
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	6002      	str	r2, [r0, #0]
 800bbfc:	7102      	strb	r2, [r0, #4]
 800bbfe:	4770      	bx	lr

0800bc00 <rmw_get_default_security_options>:
 800bc00:	2200      	movs	r2, #0
 800bc02:	7002      	strb	r2, [r0, #0]
 800bc04:	6042      	str	r2, [r0, #4]
 800bc06:	4770      	bx	lr

0800bc08 <rmw_uros_set_custom_transport>:
 800bc08:	b470      	push	{r4, r5, r6}
 800bc0a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800bc0e:	b162      	cbz	r2, 800bc2a <rmw_uros_set_custom_transport+0x22>
 800bc10:	b15b      	cbz	r3, 800bc2a <rmw_uros_set_custom_transport+0x22>
 800bc12:	b155      	cbz	r5, 800bc2a <rmw_uros_set_custom_transport+0x22>
 800bc14:	b14e      	cbz	r6, 800bc2a <rmw_uros_set_custom_transport+0x22>
 800bc16:	4c06      	ldr	r4, [pc, #24]	@ (800bc30 <rmw_uros_set_custom_transport+0x28>)
 800bc18:	7020      	strb	r0, [r4, #0]
 800bc1a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800bc1e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800bc22:	6166      	str	r6, [r4, #20]
 800bc24:	2000      	movs	r0, #0
 800bc26:	bc70      	pop	{r4, r5, r6}
 800bc28:	4770      	bx	lr
 800bc2a:	200b      	movs	r0, #11
 800bc2c:	bc70      	pop	{r4, r5, r6}
 800bc2e:	4770      	bx	lr
 800bc30:	20006244 	.word	0x20006244

0800bc34 <rmw_init_options_init>:
 800bc34:	b084      	sub	sp, #16
 800bc36:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc38:	b083      	sub	sp, #12
 800bc3a:	ad09      	add	r5, sp, #36	@ 0x24
 800bc3c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800bc40:	b130      	cbz	r0, 800bc50 <rmw_init_options_init+0x1c>
 800bc42:	4604      	mov	r4, r0
 800bc44:	4628      	mov	r0, r5
 800bc46:	f7ff ff35 	bl	800bab4 <rcutils_allocator_is_valid>
 800bc4a:	b108      	cbz	r0, 800bc50 <rmw_init_options_init+0x1c>
 800bc4c:	68a6      	ldr	r6, [r4, #8]
 800bc4e:	b12e      	cbz	r6, 800bc5c <rmw_init_options_init+0x28>
 800bc50:	200b      	movs	r0, #11
 800bc52:	b003      	add	sp, #12
 800bc54:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bc58:	b004      	add	sp, #16
 800bc5a:	4770      	bx	lr
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	2300      	movs	r3, #0
 800bc60:	e9c4 2300 	strd	r2, r3, [r4]
 800bc64:	4b22      	ldr	r3, [pc, #136]	@ (800bcf0 <rmw_init_options_init+0xbc>)
 800bc66:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800bd00 <rmw_init_options_init+0xcc>
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	60a3      	str	r3, [r4, #8]
 800bc6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc70:	f104 0c20 	add.w	ip, r4, #32
 800bc74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bc78:	466f      	mov	r7, sp
 800bc7a:	682b      	ldr	r3, [r5, #0]
 800bc7c:	f8cc 3000 	str.w	r3, [ip]
 800bc80:	4638      	mov	r0, r7
 800bc82:	f8c4 e01c 	str.w	lr, [r4, #28]
 800bc86:	60e6      	str	r6, [r4, #12]
 800bc88:	f7ff ffba 	bl	800bc00 <rmw_get_default_security_options>
 800bc8c:	e897 0003 	ldmia.w	r7, {r0, r1}
 800bc90:	f104 0310 	add.w	r3, r4, #16
 800bc94:	e883 0003 	stmia.w	r3, {r0, r1}
 800bc98:	2203      	movs	r2, #3
 800bc9a:	4816      	ldr	r0, [pc, #88]	@ (800bcf4 <rmw_init_options_init+0xc0>)
 800bc9c:	4916      	ldr	r1, [pc, #88]	@ (800bcf8 <rmw_init_options_init+0xc4>)
 800bc9e:	7626      	strb	r6, [r4, #24]
 800bca0:	f000 ff8e 	bl	800cbc0 <rmw_uxrce_init_init_options_impl_memory>
 800bca4:	4813      	ldr	r0, [pc, #76]	@ (800bcf4 <rmw_init_options_init+0xc0>)
 800bca6:	f009 fc73 	bl	8015590 <get_memory>
 800bcaa:	b1f0      	cbz	r0, 800bcea <rmw_init_options_init+0xb6>
 800bcac:	4a13      	ldr	r2, [pc, #76]	@ (800bcfc <rmw_init_options_init+0xc8>)
 800bcae:	6883      	ldr	r3, [r0, #8]
 800bcb0:	6851      	ldr	r1, [r2, #4]
 800bcb2:	7810      	ldrb	r0, [r2, #0]
 800bcb4:	6363      	str	r3, [r4, #52]	@ 0x34
 800bcb6:	7418      	strb	r0, [r3, #16]
 800bcb8:	6159      	str	r1, [r3, #20]
 800bcba:	68d1      	ldr	r1, [r2, #12]
 800bcbc:	61d9      	str	r1, [r3, #28]
 800bcbe:	6911      	ldr	r1, [r2, #16]
 800bcc0:	6219      	str	r1, [r3, #32]
 800bcc2:	6951      	ldr	r1, [r2, #20]
 800bcc4:	6892      	ldr	r2, [r2, #8]
 800bcc6:	619a      	str	r2, [r3, #24]
 800bcc8:	6259      	str	r1, [r3, #36]	@ 0x24
 800bcca:	f004 fd6b 	bl	80107a4 <uxr_nanos>
 800bcce:	f00b fcbb 	bl	8017648 <srand>
 800bcd2:	f00b fce7 	bl	80176a4 <rand>
 800bcd6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bcd8:	6298      	str	r0, [r3, #40]	@ 0x28
 800bcda:	2800      	cmp	r0, #0
 800bcdc:	d0f9      	beq.n	800bcd2 <rmw_init_options_init+0x9e>
 800bcde:	2000      	movs	r0, #0
 800bce0:	b003      	add	sp, #12
 800bce2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bce6:	b004      	add	sp, #16
 800bce8:	4770      	bx	lr
 800bcea:	2001      	movs	r0, #1
 800bcec:	e7b1      	b.n	800bc52 <rmw_init_options_init+0x1e>
 800bcee:	bf00      	nop
 800bcf0:	08019770 	.word	0x08019770
 800bcf4:	2000ab5c 	.word	0x2000ab5c
 800bcf8:	200063f8 	.word	0x200063f8
 800bcfc:	20006244 	.word	0x20006244
 800bd00:	08018e18 	.word	0x08018e18

0800bd04 <rmw_init_options_copy>:
 800bd04:	b570      	push	{r4, r5, r6, lr}
 800bd06:	b158      	cbz	r0, 800bd20 <rmw_init_options_copy+0x1c>
 800bd08:	460d      	mov	r5, r1
 800bd0a:	b149      	cbz	r1, 800bd20 <rmw_init_options_copy+0x1c>
 800bd0c:	4604      	mov	r4, r0
 800bd0e:	6880      	ldr	r0, [r0, #8]
 800bd10:	b120      	cbz	r0, 800bd1c <rmw_init_options_copy+0x18>
 800bd12:	4b1e      	ldr	r3, [pc, #120]	@ (800bd8c <rmw_init_options_copy+0x88>)
 800bd14:	6819      	ldr	r1, [r3, #0]
 800bd16:	f7f4 fa83 	bl	8000220 <strcmp>
 800bd1a:	bb90      	cbnz	r0, 800bd82 <rmw_init_options_copy+0x7e>
 800bd1c:	68ab      	ldr	r3, [r5, #8]
 800bd1e:	b113      	cbz	r3, 800bd26 <rmw_init_options_copy+0x22>
 800bd20:	250b      	movs	r5, #11
 800bd22:	4628      	mov	r0, r5
 800bd24:	bd70      	pop	{r4, r5, r6, pc}
 800bd26:	4623      	mov	r3, r4
 800bd28:	462a      	mov	r2, r5
 800bd2a:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800bd2e:	f8d3 c000 	ldr.w	ip, [r3]
 800bd32:	6858      	ldr	r0, [r3, #4]
 800bd34:	6899      	ldr	r1, [r3, #8]
 800bd36:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800bd3a:	f8c2 e00c 	str.w	lr, [r2, #12]
 800bd3e:	3310      	adds	r3, #16
 800bd40:	42b3      	cmp	r3, r6
 800bd42:	f8c2 c000 	str.w	ip, [r2]
 800bd46:	6050      	str	r0, [r2, #4]
 800bd48:	6091      	str	r1, [r2, #8]
 800bd4a:	f102 0210 	add.w	r2, r2, #16
 800bd4e:	d1ee      	bne.n	800bd2e <rmw_init_options_copy+0x2a>
 800bd50:	6819      	ldr	r1, [r3, #0]
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	480e      	ldr	r0, [pc, #56]	@ (800bd90 <rmw_init_options_copy+0x8c>)
 800bd56:	6053      	str	r3, [r2, #4]
 800bd58:	6011      	str	r1, [r2, #0]
 800bd5a:	f009 fc19 	bl	8015590 <get_memory>
 800bd5e:	b198      	cbz	r0, 800bd88 <rmw_init_options_copy+0x84>
 800bd60:	6883      	ldr	r3, [r0, #8]
 800bd62:	636b      	str	r3, [r5, #52]	@ 0x34
 800bd64:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800bd66:	f102 0c10 	add.w	ip, r2, #16
 800bd6a:	f103 0410 	add.w	r4, r3, #16
 800bd6e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800bd72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bd74:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800bd78:	2500      	movs	r5, #0
 800bd7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bd7e:	4628      	mov	r0, r5
 800bd80:	bd70      	pop	{r4, r5, r6, pc}
 800bd82:	250c      	movs	r5, #12
 800bd84:	4628      	mov	r0, r5
 800bd86:	bd70      	pop	{r4, r5, r6, pc}
 800bd88:	2501      	movs	r5, #1
 800bd8a:	e7ca      	b.n	800bd22 <rmw_init_options_copy+0x1e>
 800bd8c:	08019770 	.word	0x08019770
 800bd90:	2000ab5c 	.word	0x2000ab5c

0800bd94 <rmw_init_options_fini>:
 800bd94:	2800      	cmp	r0, #0
 800bd96:	d03d      	beq.n	800be14 <rmw_init_options_fini+0x80>
 800bd98:	b510      	push	{r4, lr}
 800bd9a:	4604      	mov	r4, r0
 800bd9c:	b08e      	sub	sp, #56	@ 0x38
 800bd9e:	3020      	adds	r0, #32
 800bda0:	f7ff fe88 	bl	800bab4 <rcutils_allocator_is_valid>
 800bda4:	b360      	cbz	r0, 800be00 <rmw_init_options_fini+0x6c>
 800bda6:	68a0      	ldr	r0, [r4, #8]
 800bda8:	b120      	cbz	r0, 800bdb4 <rmw_init_options_fini+0x20>
 800bdaa:	4b1c      	ldr	r3, [pc, #112]	@ (800be1c <rmw_init_options_fini+0x88>)
 800bdac:	6819      	ldr	r1, [r3, #0]
 800bdae:	f7f4 fa37 	bl	8000220 <strcmp>
 800bdb2:	bb68      	cbnz	r0, 800be10 <rmw_init_options_fini+0x7c>
 800bdb4:	4b1a      	ldr	r3, [pc, #104]	@ (800be20 <rmw_init_options_fini+0x8c>)
 800bdb6:	6819      	ldr	r1, [r3, #0]
 800bdb8:	b331      	cbz	r1, 800be08 <rmw_init_options_fini+0x74>
 800bdba:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800bdbc:	e001      	b.n	800bdc2 <rmw_init_options_fini+0x2e>
 800bdbe:	6849      	ldr	r1, [r1, #4]
 800bdc0:	b311      	cbz	r1, 800be08 <rmw_init_options_fini+0x74>
 800bdc2:	688b      	ldr	r3, [r1, #8]
 800bdc4:	429a      	cmp	r2, r3
 800bdc6:	d1fa      	bne.n	800bdbe <rmw_init_options_fini+0x2a>
 800bdc8:	4815      	ldr	r0, [pc, #84]	@ (800be20 <rmw_init_options_fini+0x8c>)
 800bdca:	f009 fbf1 	bl	80155b0 <put_memory>
 800bdce:	4668      	mov	r0, sp
 800bdd0:	f7ff ff02 	bl	800bbd8 <rmw_get_zero_initialized_init_options>
 800bdd4:	46ee      	mov	lr, sp
 800bdd6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bdda:	46a4      	mov	ip, r4
 800bddc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bde0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bde4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bde8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bdec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bdf0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800bdf4:	e88c 0003 	stmia.w	ip, {r0, r1}
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	b00e      	add	sp, #56	@ 0x38
 800bdfe:	bd10      	pop	{r4, pc}
 800be00:	230b      	movs	r3, #11
 800be02:	4618      	mov	r0, r3
 800be04:	b00e      	add	sp, #56	@ 0x38
 800be06:	bd10      	pop	{r4, pc}
 800be08:	2301      	movs	r3, #1
 800be0a:	4618      	mov	r0, r3
 800be0c:	b00e      	add	sp, #56	@ 0x38
 800be0e:	bd10      	pop	{r4, pc}
 800be10:	230c      	movs	r3, #12
 800be12:	e7f2      	b.n	800bdfa <rmw_init_options_fini+0x66>
 800be14:	230b      	movs	r3, #11
 800be16:	4618      	mov	r0, r3
 800be18:	4770      	bx	lr
 800be1a:	bf00      	nop
 800be1c:	08019770 	.word	0x08019770
 800be20:	2000ab5c 	.word	0x2000ab5c

0800be24 <rmw_init>:
 800be24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be28:	b083      	sub	sp, #12
 800be2a:	2800      	cmp	r0, #0
 800be2c:	f000 80d3 	beq.w	800bfd6 <rmw_init+0x1b2>
 800be30:	460e      	mov	r6, r1
 800be32:	2900      	cmp	r1, #0
 800be34:	f000 80cf 	beq.w	800bfd6 <rmw_init+0x1b2>
 800be38:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800be3a:	4605      	mov	r5, r0
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	f000 80ca 	beq.w	800bfd6 <rmw_init+0x1b2>
 800be42:	4b78      	ldr	r3, [pc, #480]	@ (800c024 <rmw_init+0x200>)
 800be44:	6880      	ldr	r0, [r0, #8]
 800be46:	681f      	ldr	r7, [r3, #0]
 800be48:	b128      	cbz	r0, 800be56 <rmw_init+0x32>
 800be4a:	4639      	mov	r1, r7
 800be4c:	f7f4 f9e8 	bl	8000220 <strcmp>
 800be50:	2800      	cmp	r0, #0
 800be52:	f040 80ca 	bne.w	800bfea <rmw_init+0x1c6>
 800be56:	e9d5 2300 	ldrd	r2, r3, [r5]
 800be5a:	4c73      	ldr	r4, [pc, #460]	@ (800c028 <rmw_init+0x204>)
 800be5c:	4973      	ldr	r1, [pc, #460]	@ (800c02c <rmw_init+0x208>)
 800be5e:	4874      	ldr	r0, [pc, #464]	@ (800c030 <rmw_init+0x20c>)
 800be60:	60b7      	str	r7, [r6, #8]
 800be62:	e9c6 2300 	strd	r2, r3, [r6]
 800be66:	68eb      	ldr	r3, [r5, #12]
 800be68:	64b3      	str	r3, [r6, #72]	@ 0x48
 800be6a:	2201      	movs	r2, #1
 800be6c:	f000 fe48 	bl	800cb00 <rmw_uxrce_init_session_memory>
 800be70:	4620      	mov	r0, r4
 800be72:	4970      	ldr	r1, [pc, #448]	@ (800c034 <rmw_init+0x210>)
 800be74:	2204      	movs	r2, #4
 800be76:	f000 fe83 	bl	800cb80 <rmw_uxrce_init_static_input_buffer_memory>
 800be7a:	f04f 0800 	mov.w	r8, #0
 800be7e:	486c      	ldr	r0, [pc, #432]	@ (800c030 <rmw_init+0x20c>)
 800be80:	f884 800d 	strb.w	r8, [r4, #13]
 800be84:	f009 fb84 	bl	8015590 <get_memory>
 800be88:	2800      	cmp	r0, #0
 800be8a:	f000 80a9 	beq.w	800bfe0 <rmw_init+0x1bc>
 800be8e:	6884      	ldr	r4, [r0, #8]
 800be90:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800be92:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800be94:	f890 c010 	ldrb.w	ip, [r0, #16]
 800be98:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800be9c:	9101      	str	r1, [sp, #4]
 800be9e:	6a00      	ldr	r0, [r0, #32]
 800bea0:	9000      	str	r0, [sp, #0]
 800bea2:	f104 0910 	add.w	r9, r4, #16
 800bea6:	4661      	mov	r1, ip
 800bea8:	4648      	mov	r0, r9
 800beaa:	f002 fc19 	bl	800e6e0 <uxr_set_custom_transport_callbacks>
 800beae:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800beb2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800beb6:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800beba:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800bebe:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800bec2:	495d      	ldr	r1, [pc, #372]	@ (800c038 <rmw_init+0x214>)
 800bec4:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800bec8:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800becc:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800bed0:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800bed4:	4859      	ldr	r0, [pc, #356]	@ (800c03c <rmw_init+0x218>)
 800bed6:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800beda:	2201      	movs	r2, #1
 800bedc:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800bede:	f000 fdef 	bl	800cac0 <rmw_uxrce_init_node_memory>
 800bee2:	4957      	ldr	r1, [pc, #348]	@ (800c040 <rmw_init+0x21c>)
 800bee4:	4857      	ldr	r0, [pc, #348]	@ (800c044 <rmw_init+0x220>)
 800bee6:	2205      	movs	r2, #5
 800bee8:	f000 fdca 	bl	800ca80 <rmw_uxrce_init_subscription_memory>
 800beec:	4956      	ldr	r1, [pc, #344]	@ (800c048 <rmw_init+0x224>)
 800beee:	4857      	ldr	r0, [pc, #348]	@ (800c04c <rmw_init+0x228>)
 800bef0:	220a      	movs	r2, #10
 800bef2:	f000 fda5 	bl	800ca40 <rmw_uxrce_init_publisher_memory>
 800bef6:	4956      	ldr	r1, [pc, #344]	@ (800c050 <rmw_init+0x22c>)
 800bef8:	4856      	ldr	r0, [pc, #344]	@ (800c054 <rmw_init+0x230>)
 800befa:	2201      	movs	r2, #1
 800befc:	f000 fd60 	bl	800c9c0 <rmw_uxrce_init_service_memory>
 800bf00:	4955      	ldr	r1, [pc, #340]	@ (800c058 <rmw_init+0x234>)
 800bf02:	4856      	ldr	r0, [pc, #344]	@ (800c05c <rmw_init+0x238>)
 800bf04:	2201      	movs	r2, #1
 800bf06:	f000 fd7b 	bl	800ca00 <rmw_uxrce_init_client_memory>
 800bf0a:	4955      	ldr	r1, [pc, #340]	@ (800c060 <rmw_init+0x23c>)
 800bf0c:	4855      	ldr	r0, [pc, #340]	@ (800c064 <rmw_init+0x240>)
 800bf0e:	220f      	movs	r2, #15
 800bf10:	f000 fe16 	bl	800cb40 <rmw_uxrce_init_topic_memory>
 800bf14:	4954      	ldr	r1, [pc, #336]	@ (800c068 <rmw_init+0x244>)
 800bf16:	4855      	ldr	r0, [pc, #340]	@ (800c06c <rmw_init+0x248>)
 800bf18:	2203      	movs	r2, #3
 800bf1a:	f000 fe51 	bl	800cbc0 <rmw_uxrce_init_init_options_impl_memory>
 800bf1e:	4954      	ldr	r1, [pc, #336]	@ (800c070 <rmw_init+0x24c>)
 800bf20:	4854      	ldr	r0, [pc, #336]	@ (800c074 <rmw_init+0x250>)
 800bf22:	2204      	movs	r2, #4
 800bf24:	f000 fe6c 	bl	800cc00 <rmw_uxrce_init_wait_set_memory>
 800bf28:	4953      	ldr	r1, [pc, #332]	@ (800c078 <rmw_init+0x254>)
 800bf2a:	4854      	ldr	r0, [pc, #336]	@ (800c07c <rmw_init+0x258>)
 800bf2c:	2204      	movs	r2, #4
 800bf2e:	f000 fe87 	bl	800cc40 <rmw_uxrce_init_guard_condition_memory>
 800bf32:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800bf34:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800bf36:	4642      	mov	r2, r8
 800bf38:	f000 fd2a 	bl	800c990 <rmw_uxrce_transport_init>
 800bf3c:	4607      	mov	r7, r0
 800bf3e:	2800      	cmp	r0, #0
 800bf40:	d158      	bne.n	800bff4 <rmw_init+0x1d0>
 800bf42:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800bf44:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800bf48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bf4a:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800bf4e:	4628      	mov	r0, r5
 800bf50:	f002 fdfa 	bl	800eb48 <uxr_init_session>
 800bf54:	494a      	ldr	r1, [pc, #296]	@ (800c080 <rmw_init+0x25c>)
 800bf56:	4622      	mov	r2, r4
 800bf58:	4628      	mov	r0, r5
 800bf5a:	f002 fe19 	bl	800eb90 <uxr_set_topic_callback>
 800bf5e:	4949      	ldr	r1, [pc, #292]	@ (800c084 <rmw_init+0x260>)
 800bf60:	463a      	mov	r2, r7
 800bf62:	4628      	mov	r0, r5
 800bf64:	f002 fe10 	bl	800eb88 <uxr_set_status_callback>
 800bf68:	4947      	ldr	r1, [pc, #284]	@ (800c088 <rmw_init+0x264>)
 800bf6a:	463a      	mov	r2, r7
 800bf6c:	4628      	mov	r0, r5
 800bf6e:	f002 fe13 	bl	800eb98 <uxr_set_request_callback>
 800bf72:	4946      	ldr	r1, [pc, #280]	@ (800c08c <rmw_init+0x268>)
 800bf74:	463a      	mov	r2, r7
 800bf76:	4628      	mov	r0, r5
 800bf78:	f002 fe12 	bl	800eba0 <uxr_set_reply_callback>
 800bf7c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800bf80:	2304      	movs	r3, #4
 800bf82:	0092      	lsls	r2, r2, #2
 800bf84:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800bf88:	4628      	mov	r0, r5
 800bf8a:	f002 fe47 	bl	800ec1c <uxr_create_input_reliable_stream>
 800bf8e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800bf92:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800bf96:	0092      	lsls	r2, r2, #2
 800bf98:	2304      	movs	r3, #4
 800bf9a:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800bf9e:	4628      	mov	r0, r5
 800bfa0:	f002 fe14 	bl	800ebcc <uxr_create_output_reliable_stream>
 800bfa4:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800bfa8:	4628      	mov	r0, r5
 800bfaa:	f002 fe31 	bl	800ec10 <uxr_create_input_best_effort_stream>
 800bfae:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800bfb2:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800bfb6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800bfba:	3114      	adds	r1, #20
 800bfbc:	4628      	mov	r0, r5
 800bfbe:	f002 fdf3 	bl	800eba8 <uxr_create_output_best_effort_stream>
 800bfc2:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800bfc6:	4628      	mov	r0, r5
 800bfc8:	f003 fb7e 	bl	800f6c8 <uxr_create_session>
 800bfcc:	b1f8      	cbz	r0, 800c00e <rmw_init+0x1ea>
 800bfce:	4638      	mov	r0, r7
 800bfd0:	b003      	add	sp, #12
 800bfd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfd6:	270b      	movs	r7, #11
 800bfd8:	4638      	mov	r0, r7
 800bfda:	b003      	add	sp, #12
 800bfdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfe0:	2701      	movs	r7, #1
 800bfe2:	4638      	mov	r0, r7
 800bfe4:	b003      	add	sp, #12
 800bfe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfea:	270c      	movs	r7, #12
 800bfec:	4638      	mov	r0, r7
 800bfee:	b003      	add	sp, #12
 800bff0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bff4:	4648      	mov	r0, r9
 800bff6:	f002 fbb5 	bl	800e764 <uxr_close_custom_transport>
 800bffa:	480d      	ldr	r0, [pc, #52]	@ (800c030 <rmw_init+0x20c>)
 800bffc:	4621      	mov	r1, r4
 800bffe:	f009 fad7 	bl	80155b0 <put_memory>
 800c002:	4638      	mov	r0, r7
 800c004:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800c008:	b003      	add	sp, #12
 800c00a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c00e:	4648      	mov	r0, r9
 800c010:	f002 fba8 	bl	800e764 <uxr_close_custom_transport>
 800c014:	4806      	ldr	r0, [pc, #24]	@ (800c030 <rmw_init+0x20c>)
 800c016:	4621      	mov	r1, r4
 800c018:	f009 faca 	bl	80155b0 <put_memory>
 800c01c:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800c01e:	2701      	movs	r7, #1
 800c020:	e7d5      	b.n	800bfce <rmw_init+0x1aa>
 800c022:	bf00      	nop
 800c024:	08019770 	.word	0x08019770
 800c028:	2000abac 	.word	0x2000abac
 800c02c:	20006e58 	.word	0x20006e58
 800c030:	2000ab9c 	.word	0x2000ab9c
 800c034:	20008400 	.word	0x20008400
 800c038:	2000647c 	.word	0x2000647c
 800c03c:	2000ab6c 	.word	0x2000ab6c
 800c040:	2000a500 	.word	0x2000a500
 800c044:	2000abbc 	.word	0x2000abbc
 800c048:	20006520 	.word	0x20006520
 800c04c:	2000ab7c 	.word	0x2000ab7c
 800c050:	20006d90 	.word	0x20006d90
 800c054:	2000ab8c 	.word	0x2000ab8c
 800c058:	200062b0 	.word	0x200062b0
 800c05c:	2000629c 	.word	0x2000629c
 800c060:	2000a938 	.word	0x2000a938
 800c064:	2000abcc 	.word	0x2000abcc
 800c068:	200063f8 	.word	0x200063f8
 800c06c:	2000ab5c 	.word	0x2000ab5c
 800c070:	2000aadc 	.word	0x2000aadc
 800c074:	2000abdc 	.word	0x2000abdc
 800c078:	20006378 	.word	0x20006378
 800c07c:	2000ab4c 	.word	0x2000ab4c
 800c080:	080153c9 	.word	0x080153c9
 800c084:	080153c1 	.word	0x080153c1
 800c088:	08015461 	.word	0x08015461
 800c08c:	080154fd 	.word	0x080154fd

0800c090 <rmw_context_fini>:
 800c090:	4b17      	ldr	r3, [pc, #92]	@ (800c0f0 <rmw_context_fini+0x60>)
 800c092:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800c094:	b570      	push	{r4, r5, r6, lr}
 800c096:	681c      	ldr	r4, [r3, #0]
 800c098:	4605      	mov	r5, r0
 800c09a:	b334      	cbz	r4, 800c0ea <rmw_context_fini+0x5a>
 800c09c:	2600      	movs	r6, #0
 800c09e:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800c0a2:	6902      	ldr	r2, [r0, #16]
 800c0a4:	428a      	cmp	r2, r1
 800c0a6:	d018      	beq.n	800c0da <rmw_context_fini+0x4a>
 800c0a8:	2c00      	cmp	r4, #0
 800c0aa:	d1f8      	bne.n	800c09e <rmw_context_fini+0xe>
 800c0ac:	b189      	cbz	r1, 800c0d2 <rmw_context_fini+0x42>
 800c0ae:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800c0b2:	789b      	ldrb	r3, [r3, #2]
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800c0ba:	bf14      	ite	ne
 800c0bc:	210a      	movne	r1, #10
 800c0be:	2100      	moveq	r1, #0
 800c0c0:	f003 fada 	bl	800f678 <uxr_delete_session_retries>
 800c0c4:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800c0c6:	f000 fddb 	bl	800cc80 <rmw_uxrce_fini_session_memory>
 800c0ca:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800c0cc:	3010      	adds	r0, #16
 800c0ce:	f002 fb49 	bl	800e764 <uxr_close_custom_transport>
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800c0d6:	4630      	mov	r0, r6
 800c0d8:	bd70      	pop	{r4, r5, r6, pc}
 800c0da:	3018      	adds	r0, #24
 800c0dc:	f000 f89c 	bl	800c218 <rmw_destroy_node>
 800c0e0:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800c0e2:	4606      	mov	r6, r0
 800c0e4:	2c00      	cmp	r4, #0
 800c0e6:	d1da      	bne.n	800c09e <rmw_context_fini+0xe>
 800c0e8:	e7e0      	b.n	800c0ac <rmw_context_fini+0x1c>
 800c0ea:	4626      	mov	r6, r4
 800c0ec:	e7de      	b.n	800c0ac <rmw_context_fini+0x1c>
 800c0ee:	bf00      	nop
 800c0f0:	2000ab6c 	.word	0x2000ab6c

0800c0f4 <create_node>:
 800c0f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c0f8:	b083      	sub	sp, #12
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d05f      	beq.n	800c1be <create_node+0xca>
 800c0fe:	4606      	mov	r6, r0
 800c100:	4835      	ldr	r0, [pc, #212]	@ (800c1d8 <create_node+0xe4>)
 800c102:	460f      	mov	r7, r1
 800c104:	4690      	mov	r8, r2
 800c106:	461d      	mov	r5, r3
 800c108:	f009 fa42 	bl	8015590 <get_memory>
 800c10c:	2800      	cmp	r0, #0
 800c10e:	d056      	beq.n	800c1be <create_node+0xca>
 800c110:	6884      	ldr	r4, [r0, #8]
 800c112:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800c114:	6123      	str	r3, [r4, #16]
 800c116:	f009 faa3 	bl	8015660 <rmw_get_implementation_identifier>
 800c11a:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800c11e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800c122:	f8c4 9020 	str.w	r9, [r4, #32]
 800c126:	4630      	mov	r0, r6
 800c128:	f7f4 f884 	bl	8000234 <strlen>
 800c12c:	1c42      	adds	r2, r0, #1
 800c12e:	2a3c      	cmp	r2, #60	@ 0x3c
 800c130:	f104 0518 	add.w	r5, r4, #24
 800c134:	d840      	bhi.n	800c1b8 <create_node+0xc4>
 800c136:	4648      	mov	r0, r9
 800c138:	4631      	mov	r1, r6
 800c13a:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800c13e:	f00b fe14 	bl	8017d6a <memcpy>
 800c142:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800c146:	4638      	mov	r0, r7
 800c148:	f7f4 f874 	bl	8000234 <strlen>
 800c14c:	1c42      	adds	r2, r0, #1
 800c14e:	2a3c      	cmp	r2, #60	@ 0x3c
 800c150:	d832      	bhi.n	800c1b8 <create_node+0xc4>
 800c152:	4639      	mov	r1, r7
 800c154:	4648      	mov	r0, r9
 800c156:	f00b fe08 	bl	8017d6a <memcpy>
 800c15a:	6923      	ldr	r3, [r4, #16]
 800c15c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c160:	2101      	movs	r1, #1
 800c162:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800c166:	1842      	adds	r2, r0, r1
 800c168:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800c16c:	f002 fafe 	bl	800e76c <uxr_object_id>
 800c170:	6160      	str	r0, [r4, #20]
 800c172:	783b      	ldrb	r3, [r7, #0]
 800c174:	2b2f      	cmp	r3, #47	@ 0x2f
 800c176:	d127      	bne.n	800c1c8 <create_node+0xd4>
 800c178:	787b      	ldrb	r3, [r7, #1]
 800c17a:	bb2b      	cbnz	r3, 800c1c8 <create_node+0xd4>
 800c17c:	4a17      	ldr	r2, [pc, #92]	@ (800c1dc <create_node+0xe8>)
 800c17e:	4818      	ldr	r0, [pc, #96]	@ (800c1e0 <create_node+0xec>)
 800c180:	4633      	mov	r3, r6
 800c182:	213c      	movs	r1, #60	@ 0x3c
 800c184:	f00b fc4e 	bl	8017a24 <sniprintf>
 800c188:	6920      	ldr	r0, [r4, #16]
 800c18a:	4915      	ldr	r1, [pc, #84]	@ (800c1e0 <create_node+0xec>)
 800c18c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800c190:	9100      	str	r1, [sp, #0]
 800c192:	2106      	movs	r1, #6
 800c194:	9101      	str	r1, [sp, #4]
 800c196:	6811      	ldr	r1, [r2, #0]
 800c198:	6962      	ldr	r2, [r4, #20]
 800c19a:	fa1f f388 	uxth.w	r3, r8
 800c19e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c1a2:	f002 f86b 	bl	800e27c <uxr_buffer_create_participant_bin>
 800c1a6:	4602      	mov	r2, r0
 800c1a8:	6920      	ldr	r0, [r4, #16]
 800c1aa:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c1ae:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c1b2:	f000 fedb 	bl	800cf6c <run_xrce_session>
 800c1b6:	b918      	cbnz	r0, 800c1c0 <create_node+0xcc>
 800c1b8:	4628      	mov	r0, r5
 800c1ba:	f000 fd67 	bl	800cc8c <rmw_uxrce_fini_node_memory>
 800c1be:	2500      	movs	r5, #0
 800c1c0:	4628      	mov	r0, r5
 800c1c2:	b003      	add	sp, #12
 800c1c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1c8:	4a06      	ldr	r2, [pc, #24]	@ (800c1e4 <create_node+0xf0>)
 800c1ca:	9600      	str	r6, [sp, #0]
 800c1cc:	463b      	mov	r3, r7
 800c1ce:	213c      	movs	r1, #60	@ 0x3c
 800c1d0:	4803      	ldr	r0, [pc, #12]	@ (800c1e0 <create_node+0xec>)
 800c1d2:	f00b fc27 	bl	8017a24 <sniprintf>
 800c1d6:	e7d7      	b.n	800c188 <create_node+0x94>
 800c1d8:	2000ab6c 	.word	0x2000ab6c
 800c1dc:	08018e58 	.word	0x08018e58
 800c1e0:	20006260 	.word	0x20006260
 800c1e4:	08018e1c 	.word	0x08018e1c

0800c1e8 <rmw_create_node>:
 800c1e8:	b199      	cbz	r1, 800c212 <rmw_create_node+0x2a>
 800c1ea:	780b      	ldrb	r3, [r1, #0]
 800c1ec:	468c      	mov	ip, r1
 800c1ee:	b183      	cbz	r3, 800c212 <rmw_create_node+0x2a>
 800c1f0:	b410      	push	{r4}
 800c1f2:	4614      	mov	r4, r2
 800c1f4:	b14a      	cbz	r2, 800c20a <rmw_create_node+0x22>
 800c1f6:	7813      	ldrb	r3, [r2, #0]
 800c1f8:	b13b      	cbz	r3, 800c20a <rmw_create_node+0x22>
 800c1fa:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	4621      	mov	r1, r4
 800c200:	4660      	mov	r0, ip
 800c202:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c206:	f7ff bf75 	b.w	800c0f4 <create_node>
 800c20a:	2000      	movs	r0, #0
 800c20c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c210:	4770      	bx	lr
 800c212:	2000      	movs	r0, #0
 800c214:	4770      	bx	lr
 800c216:	bf00      	nop

0800c218 <rmw_destroy_node>:
 800c218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c21a:	b328      	cbz	r0, 800c268 <rmw_destroy_node+0x50>
 800c21c:	4607      	mov	r7, r0
 800c21e:	6800      	ldr	r0, [r0, #0]
 800c220:	b120      	cbz	r0, 800c22c <rmw_destroy_node+0x14>
 800c222:	4b36      	ldr	r3, [pc, #216]	@ (800c2fc <rmw_destroy_node+0xe4>)
 800c224:	6819      	ldr	r1, [r3, #0]
 800c226:	f7f3 fffb 	bl	8000220 <strcmp>
 800c22a:	b9e8      	cbnz	r0, 800c268 <rmw_destroy_node+0x50>
 800c22c:	687d      	ldr	r5, [r7, #4]
 800c22e:	b1dd      	cbz	r5, 800c268 <rmw_destroy_node+0x50>
 800c230:	4b33      	ldr	r3, [pc, #204]	@ (800c300 <rmw_destroy_node+0xe8>)
 800c232:	681c      	ldr	r4, [r3, #0]
 800c234:	2c00      	cmp	r4, #0
 800c236:	d05f      	beq.n	800c2f8 <rmw_destroy_node+0xe0>
 800c238:	2600      	movs	r6, #0
 800c23a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800c23e:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800c242:	429d      	cmp	r5, r3
 800c244:	d013      	beq.n	800c26e <rmw_destroy_node+0x56>
 800c246:	2c00      	cmp	r4, #0
 800c248:	d1f7      	bne.n	800c23a <rmw_destroy_node+0x22>
 800c24a:	4b2e      	ldr	r3, [pc, #184]	@ (800c304 <rmw_destroy_node+0xec>)
 800c24c:	681c      	ldr	r4, [r3, #0]
 800c24e:	b1c4      	cbz	r4, 800c282 <rmw_destroy_node+0x6a>
 800c250:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800c254:	6a0b      	ldr	r3, [r1, #32]
 800c256:	429d      	cmp	r5, r3
 800c258:	d1f9      	bne.n	800c24e <rmw_destroy_node+0x36>
 800c25a:	317c      	adds	r1, #124	@ 0x7c
 800c25c:	4638      	mov	r0, r7
 800c25e:	f000 fb37 	bl	800c8d0 <rmw_destroy_subscription>
 800c262:	2801      	cmp	r0, #1
 800c264:	4606      	mov	r6, r0
 800c266:	d1f2      	bne.n	800c24e <rmw_destroy_node+0x36>
 800c268:	2601      	movs	r6, #1
 800c26a:	4630      	mov	r0, r6
 800c26c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c26e:	3184      	adds	r1, #132	@ 0x84
 800c270:	4638      	mov	r0, r7
 800c272:	f000 f9a5 	bl	800c5c0 <rmw_destroy_publisher>
 800c276:	2801      	cmp	r0, #1
 800c278:	4606      	mov	r6, r0
 800c27a:	d0f5      	beq.n	800c268 <rmw_destroy_node+0x50>
 800c27c:	2c00      	cmp	r4, #0
 800c27e:	d1dc      	bne.n	800c23a <rmw_destroy_node+0x22>
 800c280:	e7e3      	b.n	800c24a <rmw_destroy_node+0x32>
 800c282:	4b21      	ldr	r3, [pc, #132]	@ (800c308 <rmw_destroy_node+0xf0>)
 800c284:	681c      	ldr	r4, [r3, #0]
 800c286:	b16c      	cbz	r4, 800c2a4 <rmw_destroy_node+0x8c>
 800c288:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800c28c:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800c28e:	429d      	cmp	r5, r3
 800c290:	d1f9      	bne.n	800c286 <rmw_destroy_node+0x6e>
 800c292:	317c      	adds	r1, #124	@ 0x7c
 800c294:	4638      	mov	r0, r7
 800c296:	f000 f9e5 	bl	800c664 <rmw_destroy_service>
 800c29a:	2801      	cmp	r0, #1
 800c29c:	4606      	mov	r6, r0
 800c29e:	d0e3      	beq.n	800c268 <rmw_destroy_node+0x50>
 800c2a0:	2c00      	cmp	r4, #0
 800c2a2:	d1f1      	bne.n	800c288 <rmw_destroy_node+0x70>
 800c2a4:	4b19      	ldr	r3, [pc, #100]	@ (800c30c <rmw_destroy_node+0xf4>)
 800c2a6:	681c      	ldr	r4, [r3, #0]
 800c2a8:	b16c      	cbz	r4, 800c2c6 <rmw_destroy_node+0xae>
 800c2aa:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800c2ae:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800c2b0:	429d      	cmp	r5, r3
 800c2b2:	d1f9      	bne.n	800c2a8 <rmw_destroy_node+0x90>
 800c2b4:	317c      	adds	r1, #124	@ 0x7c
 800c2b6:	4638      	mov	r0, r7
 800c2b8:	f009 f98e 	bl	80155d8 <rmw_destroy_client>
 800c2bc:	2801      	cmp	r0, #1
 800c2be:	4606      	mov	r6, r0
 800c2c0:	d0d2      	beq.n	800c268 <rmw_destroy_node+0x50>
 800c2c2:	2c00      	cmp	r4, #0
 800c2c4:	d1f1      	bne.n	800c2aa <rmw_destroy_node+0x92>
 800c2c6:	6928      	ldr	r0, [r5, #16]
 800c2c8:	696a      	ldr	r2, [r5, #20]
 800c2ca:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c2ce:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c2d2:	6819      	ldr	r1, [r3, #0]
 800c2d4:	f001 ff86 	bl	800e1e4 <uxr_buffer_delete_entity>
 800c2d8:	4602      	mov	r2, r0
 800c2da:	6928      	ldr	r0, [r5, #16]
 800c2dc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c2e0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c2e4:	f000 fe42 	bl	800cf6c <run_xrce_session>
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	bf08      	it	eq
 800c2ec:	2602      	moveq	r6, #2
 800c2ee:	4638      	mov	r0, r7
 800c2f0:	f000 fccc 	bl	800cc8c <rmw_uxrce_fini_node_memory>
 800c2f4:	4630      	mov	r0, r6
 800c2f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2f8:	4626      	mov	r6, r4
 800c2fa:	e7a6      	b.n	800c24a <rmw_destroy_node+0x32>
 800c2fc:	08019770 	.word	0x08019770
 800c300:	2000ab7c 	.word	0x2000ab7c
 800c304:	2000abbc 	.word	0x2000abbc
 800c308:	2000ab8c 	.word	0x2000ab8c
 800c30c:	2000629c 	.word	0x2000629c

0800c310 <rmw_node_get_graph_guard_condition>:
 800c310:	6843      	ldr	r3, [r0, #4]
 800c312:	6918      	ldr	r0, [r3, #16]
 800c314:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800c318:	4770      	bx	lr
 800c31a:	bf00      	nop

0800c31c <flush_session>:
 800c31c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800c31e:	f003 b863 	b.w	800f3e8 <uxr_run_session_until_confirm_delivery>
 800c322:	bf00      	nop

0800c324 <rmw_publish>:
 800c324:	2800      	cmp	r0, #0
 800c326:	d053      	beq.n	800c3d0 <rmw_publish+0xac>
 800c328:	b570      	push	{r4, r5, r6, lr}
 800c32a:	460d      	mov	r5, r1
 800c32c:	b08e      	sub	sp, #56	@ 0x38
 800c32e:	2900      	cmp	r1, #0
 800c330:	d04b      	beq.n	800c3ca <rmw_publish+0xa6>
 800c332:	4604      	mov	r4, r0
 800c334:	6800      	ldr	r0, [r0, #0]
 800c336:	f000 fe99 	bl	800d06c <is_uxrce_rmw_identifier_valid>
 800c33a:	2800      	cmp	r0, #0
 800c33c:	d045      	beq.n	800c3ca <rmw_publish+0xa6>
 800c33e:	6866      	ldr	r6, [r4, #4]
 800c340:	2e00      	cmp	r6, #0
 800c342:	d042      	beq.n	800c3ca <rmw_publish+0xa6>
 800c344:	69b4      	ldr	r4, [r6, #24]
 800c346:	4628      	mov	r0, r5
 800c348:	6923      	ldr	r3, [r4, #16]
 800c34a:	4798      	blx	r3
 800c34c:	69f3      	ldr	r3, [r6, #28]
 800c34e:	9005      	str	r0, [sp, #20]
 800c350:	b113      	cbz	r3, 800c358 <rmw_publish+0x34>
 800c352:	a805      	add	r0, sp, #20
 800c354:	4798      	blx	r3
 800c356:	9805      	ldr	r0, [sp, #20]
 800c358:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800c35c:	691b      	ldr	r3, [r3, #16]
 800c35e:	9000      	str	r0, [sp, #0]
 800c360:	6972      	ldr	r2, [r6, #20]
 800c362:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800c364:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800c368:	ab06      	add	r3, sp, #24
 800c36a:	f004 fabb 	bl	80108e4 <uxr_prepare_output_stream>
 800c36e:	b1d8      	cbz	r0, 800c3a8 <rmw_publish+0x84>
 800c370:	68a3      	ldr	r3, [r4, #8]
 800c372:	a906      	add	r1, sp, #24
 800c374:	4628      	mov	r0, r5
 800c376:	4798      	blx	r3
 800c378:	6a33      	ldr	r3, [r6, #32]
 800c37a:	4604      	mov	r4, r0
 800c37c:	b10b      	cbz	r3, 800c382 <rmw_publish+0x5e>
 800c37e:	a806      	add	r0, sp, #24
 800c380:	4798      	blx	r3
 800c382:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800c386:	2b01      	cmp	r3, #1
 800c388:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800c38c:	d022      	beq.n	800c3d4 <rmw_publish+0xb0>
 800c38e:	6918      	ldr	r0, [r3, #16]
 800c390:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800c392:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c396:	f003 f827 	bl	800f3e8 <uxr_run_session_until_confirm_delivery>
 800c39a:	4020      	ands	r0, r4
 800c39c:	b2c4      	uxtb	r4, r0
 800c39e:	f084 0001 	eor.w	r0, r4, #1
 800c3a2:	b2c0      	uxtb	r0, r0
 800c3a4:	b00e      	add	sp, #56	@ 0x38
 800c3a6:	bd70      	pop	{r4, r5, r6, pc}
 800c3a8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800c3ac:	6918      	ldr	r0, [r3, #16]
 800c3ae:	9b05      	ldr	r3, [sp, #20]
 800c3b0:	9300      	str	r3, [sp, #0]
 800c3b2:	4b0b      	ldr	r3, [pc, #44]	@ (800c3e0 <rmw_publish+0xbc>)
 800c3b4:	9301      	str	r3, [sp, #4]
 800c3b6:	9602      	str	r6, [sp, #8]
 800c3b8:	6972      	ldr	r2, [r6, #20]
 800c3ba:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800c3bc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c3c0:	ab06      	add	r3, sp, #24
 800c3c2:	f004 fabf 	bl	8010944 <uxr_prepare_output_stream_fragmented>
 800c3c6:	2800      	cmp	r0, #0
 800c3c8:	d1d2      	bne.n	800c370 <rmw_publish+0x4c>
 800c3ca:	2001      	movs	r0, #1
 800c3cc:	b00e      	add	sp, #56	@ 0x38
 800c3ce:	bd70      	pop	{r4, r5, r6, pc}
 800c3d0:	2001      	movs	r0, #1
 800c3d2:	4770      	bx	lr
 800c3d4:	6918      	ldr	r0, [r3, #16]
 800c3d6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c3da:	f002 fc45 	bl	800ec68 <uxr_flash_output_streams>
 800c3de:	e7de      	b.n	800c39e <rmw_publish+0x7a>
 800c3e0:	0800c31d 	.word	0x0800c31d

0800c3e4 <rmw_create_publisher>:
 800c3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3e8:	b087      	sub	sp, #28
 800c3ea:	2800      	cmp	r0, #0
 800c3ec:	f000 80cc 	beq.w	800c588 <rmw_create_publisher+0x1a4>
 800c3f0:	460e      	mov	r6, r1
 800c3f2:	2900      	cmp	r1, #0
 800c3f4:	f000 80c8 	beq.w	800c588 <rmw_create_publisher+0x1a4>
 800c3f8:	4604      	mov	r4, r0
 800c3fa:	6800      	ldr	r0, [r0, #0]
 800c3fc:	4615      	mov	r5, r2
 800c3fe:	4698      	mov	r8, r3
 800c400:	f000 fe34 	bl	800d06c <is_uxrce_rmw_identifier_valid>
 800c404:	2800      	cmp	r0, #0
 800c406:	f000 80bf 	beq.w	800c588 <rmw_create_publisher+0x1a4>
 800c40a:	2d00      	cmp	r5, #0
 800c40c:	f000 80bc 	beq.w	800c588 <rmw_create_publisher+0x1a4>
 800c410:	782b      	ldrb	r3, [r5, #0]
 800c412:	2b00      	cmp	r3, #0
 800c414:	f000 80b8 	beq.w	800c588 <rmw_create_publisher+0x1a4>
 800c418:	f1b8 0f00 	cmp.w	r8, #0
 800c41c:	f000 80b4 	beq.w	800c588 <rmw_create_publisher+0x1a4>
 800c420:	485c      	ldr	r0, [pc, #368]	@ (800c594 <rmw_create_publisher+0x1b0>)
 800c422:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c426:	f009 f8b3 	bl	8015590 <get_memory>
 800c42a:	2800      	cmp	r0, #0
 800c42c:	f000 80ac 	beq.w	800c588 <rmw_create_publisher+0x1a4>
 800c430:	6884      	ldr	r4, [r0, #8]
 800c432:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800c436:	f009 f913 	bl	8015660 <rmw_get_implementation_identifier>
 800c43a:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800c43e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800c442:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800c446:	4628      	mov	r0, r5
 800c448:	f7f3 fef4 	bl	8000234 <strlen>
 800c44c:	3001      	adds	r0, #1
 800c44e:	283c      	cmp	r0, #60	@ 0x3c
 800c450:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800c454:	f200 8091 	bhi.w	800c57a <rmw_create_publisher+0x196>
 800c458:	4a4f      	ldr	r2, [pc, #316]	@ (800c598 <rmw_create_publisher+0x1b4>)
 800c45a:	462b      	mov	r3, r5
 800c45c:	213c      	movs	r1, #60	@ 0x3c
 800c45e:	4650      	mov	r0, sl
 800c460:	f00b fae0 	bl	8017a24 <sniprintf>
 800c464:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c468:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800c46a:	4641      	mov	r1, r8
 800c46c:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800c470:	2250      	movs	r2, #80	@ 0x50
 800c472:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800c476:	f00b fc78 	bl	8017d6a <memcpy>
 800c47a:	f898 3008 	ldrb.w	r3, [r8, #8]
 800c47e:	4947      	ldr	r1, [pc, #284]	@ (800c59c <rmw_create_publisher+0x1b8>)
 800c480:	2b02      	cmp	r3, #2
 800c482:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c486:	bf0c      	ite	eq
 800c488:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800c48c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800c490:	67a3      	str	r3, [r4, #120]	@ 0x78
 800c492:	2300      	movs	r3, #0
 800c494:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800c498:	4630      	mov	r0, r6
 800c49a:	f000 fdf5 	bl	800d088 <get_message_typesupport_handle>
 800c49e:	2800      	cmp	r0, #0
 800c4a0:	d06b      	beq.n	800c57a <rmw_create_publisher+0x196>
 800c4a2:	6842      	ldr	r2, [r0, #4]
 800c4a4:	61a2      	str	r2, [r4, #24]
 800c4a6:	2a00      	cmp	r2, #0
 800c4a8:	d067      	beq.n	800c57a <rmw_create_publisher+0x196>
 800c4aa:	4629      	mov	r1, r5
 800c4ac:	4643      	mov	r3, r8
 800c4ae:	4648      	mov	r0, r9
 800c4b0:	f009 f8dc 	bl	801566c <create_topic>
 800c4b4:	6260      	str	r0, [r4, #36]	@ 0x24
 800c4b6:	2800      	cmp	r0, #0
 800c4b8:	d063      	beq.n	800c582 <rmw_create_publisher+0x19e>
 800c4ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c4be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c4c2:	2103      	movs	r1, #3
 800c4c4:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800c4c8:	1c42      	adds	r2, r0, #1
 800c4ca:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800c4ce:	f002 f94d 	bl	800e76c <uxr_object_id>
 800c4d2:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800c4d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c4da:	6120      	str	r0, [r4, #16]
 800c4dc:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800c4e0:	6910      	ldr	r0, [r2, #16]
 800c4e2:	2506      	movs	r5, #6
 800c4e4:	9500      	str	r5, [sp, #0]
 800c4e6:	6819      	ldr	r1, [r3, #0]
 800c4e8:	6922      	ldr	r2, [r4, #16]
 800c4ea:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c4ee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c4f2:	f001 ff2b 	bl	800e34c <uxr_buffer_create_publisher_bin>
 800c4f6:	4602      	mov	r2, r0
 800c4f8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c4fc:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c500:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c504:	f000 fd32 	bl	800cf6c <run_xrce_session>
 800c508:	b3b8      	cbz	r0, 800c57a <rmw_create_publisher+0x196>
 800c50a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c50e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c512:	2105      	movs	r1, #5
 800c514:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800c518:	1c42      	adds	r2, r0, #1
 800c51a:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800c51e:	f002 f925 	bl	800e76c <uxr_object_id>
 800c522:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800c526:	6160      	str	r0, [r4, #20]
 800c528:	691e      	ldr	r6, [r3, #16]
 800c52a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c52e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800c532:	f10d 0a10 	add.w	sl, sp, #16
 800c536:	4641      	mov	r1, r8
 800c538:	4650      	mov	r0, sl
 800c53a:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800c53e:	f000 fd31 	bl	800cfa4 <convert_qos_profile>
 800c542:	9503      	str	r5, [sp, #12]
 800c544:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800c548:	9001      	str	r0, [sp, #4]
 800c54a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800c54e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800c552:	9300      	str	r3, [sp, #0]
 800c554:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800c558:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800c55c:	f8d8 1000 	ldr.w	r1, [r8]
 800c560:	4630      	mov	r0, r6
 800c562:	f001 ff53 	bl	800e40c <uxr_buffer_create_datawriter_bin>
 800c566:	4602      	mov	r2, r0
 800c568:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c56c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c570:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c574:	f000 fcfa 	bl	800cf6c <run_xrce_session>
 800c578:	b938      	cbnz	r0, 800c58a <rmw_create_publisher+0x1a6>
 800c57a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c57c:	b108      	cbz	r0, 800c582 <rmw_create_publisher+0x19e>
 800c57e:	f000 fbf5 	bl	800cd6c <rmw_uxrce_fini_topic_memory>
 800c582:	4638      	mov	r0, r7
 800c584:	f000 fb9a 	bl	800ccbc <rmw_uxrce_fini_publisher_memory>
 800c588:	2700      	movs	r7, #0
 800c58a:	4638      	mov	r0, r7
 800c58c:	b007      	add	sp, #28
 800c58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c592:	bf00      	nop
 800c594:	2000ab7c 	.word	0x2000ab7c
 800c598:	08018e58 	.word	0x08018e58
 800c59c:	08018e24 	.word	0x08018e24

0800c5a0 <rmw_publisher_get_actual_qos>:
 800c5a0:	b150      	cbz	r0, 800c5b8 <rmw_publisher_get_actual_qos+0x18>
 800c5a2:	b508      	push	{r3, lr}
 800c5a4:	460b      	mov	r3, r1
 800c5a6:	b149      	cbz	r1, 800c5bc <rmw_publisher_get_actual_qos+0x1c>
 800c5a8:	6841      	ldr	r1, [r0, #4]
 800c5aa:	2250      	movs	r2, #80	@ 0x50
 800c5ac:	3128      	adds	r1, #40	@ 0x28
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f00b fbdb 	bl	8017d6a <memcpy>
 800c5b4:	2000      	movs	r0, #0
 800c5b6:	bd08      	pop	{r3, pc}
 800c5b8:	200b      	movs	r0, #11
 800c5ba:	4770      	bx	lr
 800c5bc:	200b      	movs	r0, #11
 800c5be:	bd08      	pop	{r3, pc}

0800c5c0 <rmw_destroy_publisher>:
 800c5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5c2:	b128      	cbz	r0, 800c5d0 <rmw_destroy_publisher+0x10>
 800c5c4:	4604      	mov	r4, r0
 800c5c6:	6800      	ldr	r0, [r0, #0]
 800c5c8:	460d      	mov	r5, r1
 800c5ca:	f000 fd4f 	bl	800d06c <is_uxrce_rmw_identifier_valid>
 800c5ce:	b910      	cbnz	r0, 800c5d6 <rmw_destroy_publisher+0x16>
 800c5d0:	2401      	movs	r4, #1
 800c5d2:	4620      	mov	r0, r4
 800c5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5d6:	6863      	ldr	r3, [r4, #4]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d0f9      	beq.n	800c5d0 <rmw_destroy_publisher+0x10>
 800c5dc:	2d00      	cmp	r5, #0
 800c5de:	d0f7      	beq.n	800c5d0 <rmw_destroy_publisher+0x10>
 800c5e0:	6828      	ldr	r0, [r5, #0]
 800c5e2:	f000 fd43 	bl	800d06c <is_uxrce_rmw_identifier_valid>
 800c5e6:	2800      	cmp	r0, #0
 800c5e8:	d0f2      	beq.n	800c5d0 <rmw_destroy_publisher+0x10>
 800c5ea:	686c      	ldr	r4, [r5, #4]
 800c5ec:	2c00      	cmp	r4, #0
 800c5ee:	d0ef      	beq.n	800c5d0 <rmw_destroy_publisher+0x10>
 800c5f0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c5f2:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800c5f6:	f009 f889 	bl	801570c <destroy_topic>
 800c5fa:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800c5fe:	6962      	ldr	r2, [r4, #20]
 800c600:	6918      	ldr	r0, [r3, #16]
 800c602:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c606:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c60a:	6819      	ldr	r1, [r3, #0]
 800c60c:	f001 fdea 	bl	800e1e4 <uxr_buffer_delete_entity>
 800c610:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800c614:	6922      	ldr	r2, [r4, #16]
 800c616:	691b      	ldr	r3, [r3, #16]
 800c618:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800c61c:	4604      	mov	r4, r0
 800c61e:	6809      	ldr	r1, [r1, #0]
 800c620:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800c624:	f001 fdde 	bl	800e1e4 <uxr_buffer_delete_entity>
 800c628:	693e      	ldr	r6, [r7, #16]
 800c62a:	4622      	mov	r2, r4
 800c62c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800c630:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800c634:	4604      	mov	r4, r0
 800c636:	4630      	mov	r0, r6
 800c638:	f000 fc98 	bl	800cf6c <run_xrce_session>
 800c63c:	693e      	ldr	r6, [r7, #16]
 800c63e:	4622      	mov	r2, r4
 800c640:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800c644:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800c648:	4604      	mov	r4, r0
 800c64a:	4630      	mov	r0, r6
 800c64c:	f000 fc8e 	bl	800cf6c <run_xrce_session>
 800c650:	b12c      	cbz	r4, 800c65e <rmw_destroy_publisher+0x9e>
 800c652:	b120      	cbz	r0, 800c65e <rmw_destroy_publisher+0x9e>
 800c654:	2400      	movs	r4, #0
 800c656:	4628      	mov	r0, r5
 800c658:	f000 fb30 	bl	800ccbc <rmw_uxrce_fini_publisher_memory>
 800c65c:	e7b9      	b.n	800c5d2 <rmw_destroy_publisher+0x12>
 800c65e:	2402      	movs	r4, #2
 800c660:	e7f9      	b.n	800c656 <rmw_destroy_publisher+0x96>
 800c662:	bf00      	nop

0800c664 <rmw_destroy_service>:
 800c664:	b570      	push	{r4, r5, r6, lr}
 800c666:	b128      	cbz	r0, 800c674 <rmw_destroy_service+0x10>
 800c668:	4604      	mov	r4, r0
 800c66a:	6800      	ldr	r0, [r0, #0]
 800c66c:	460d      	mov	r5, r1
 800c66e:	f000 fcfd 	bl	800d06c <is_uxrce_rmw_identifier_valid>
 800c672:	b910      	cbnz	r0, 800c67a <rmw_destroy_service+0x16>
 800c674:	2401      	movs	r4, #1
 800c676:	4620      	mov	r0, r4
 800c678:	bd70      	pop	{r4, r5, r6, pc}
 800c67a:	6863      	ldr	r3, [r4, #4]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d0f9      	beq.n	800c674 <rmw_destroy_service+0x10>
 800c680:	2d00      	cmp	r5, #0
 800c682:	d0f7      	beq.n	800c674 <rmw_destroy_service+0x10>
 800c684:	6828      	ldr	r0, [r5, #0]
 800c686:	f000 fcf1 	bl	800d06c <is_uxrce_rmw_identifier_valid>
 800c68a:	2800      	cmp	r0, #0
 800c68c:	d0f2      	beq.n	800c674 <rmw_destroy_service+0x10>
 800c68e:	686e      	ldr	r6, [r5, #4]
 800c690:	2e00      	cmp	r6, #0
 800c692:	d0ef      	beq.n	800c674 <rmw_destroy_service+0x10>
 800c694:	6864      	ldr	r4, [r4, #4]
 800c696:	6932      	ldr	r2, [r6, #16]
 800c698:	6920      	ldr	r0, [r4, #16]
 800c69a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c69e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c6a2:	6819      	ldr	r1, [r3, #0]
 800c6a4:	f002 f8cc 	bl	800e840 <uxr_buffer_cancel_data>
 800c6a8:	4602      	mov	r2, r0
 800c6aa:	6920      	ldr	r0, [r4, #16]
 800c6ac:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c6b0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c6b4:	f000 fc5a 	bl	800cf6c <run_xrce_session>
 800c6b8:	6920      	ldr	r0, [r4, #16]
 800c6ba:	6932      	ldr	r2, [r6, #16]
 800c6bc:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c6c0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c6c4:	6819      	ldr	r1, [r3, #0]
 800c6c6:	f001 fd8d 	bl	800e1e4 <uxr_buffer_delete_entity>
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	6920      	ldr	r0, [r4, #16]
 800c6ce:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c6d2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c6d6:	f000 fc49 	bl	800cf6c <run_xrce_session>
 800c6da:	2800      	cmp	r0, #0
 800c6dc:	4628      	mov	r0, r5
 800c6de:	bf14      	ite	ne
 800c6e0:	2400      	movne	r4, #0
 800c6e2:	2402      	moveq	r4, #2
 800c6e4:	f000 fb16 	bl	800cd14 <rmw_uxrce_fini_service_memory>
 800c6e8:	e7c5      	b.n	800c676 <rmw_destroy_service+0x12>
 800c6ea:	bf00      	nop

0800c6ec <rmw_create_subscription>:
 800c6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f0:	b08d      	sub	sp, #52	@ 0x34
 800c6f2:	2800      	cmp	r0, #0
 800c6f4:	f000 80d1 	beq.w	800c89a <rmw_create_subscription+0x1ae>
 800c6f8:	460e      	mov	r6, r1
 800c6fa:	2900      	cmp	r1, #0
 800c6fc:	f000 80cd 	beq.w	800c89a <rmw_create_subscription+0x1ae>
 800c700:	4604      	mov	r4, r0
 800c702:	6800      	ldr	r0, [r0, #0]
 800c704:	4615      	mov	r5, r2
 800c706:	4698      	mov	r8, r3
 800c708:	f000 fcb0 	bl	800d06c <is_uxrce_rmw_identifier_valid>
 800c70c:	2800      	cmp	r0, #0
 800c70e:	f000 80c4 	beq.w	800c89a <rmw_create_subscription+0x1ae>
 800c712:	2d00      	cmp	r5, #0
 800c714:	f000 80c1 	beq.w	800c89a <rmw_create_subscription+0x1ae>
 800c718:	782b      	ldrb	r3, [r5, #0]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	f000 80bd 	beq.w	800c89a <rmw_create_subscription+0x1ae>
 800c720:	f1b8 0f00 	cmp.w	r8, #0
 800c724:	f000 80b9 	beq.w	800c89a <rmw_create_subscription+0x1ae>
 800c728:	485e      	ldr	r0, [pc, #376]	@ (800c8a4 <rmw_create_subscription+0x1b8>)
 800c72a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c72e:	f008 ff2f 	bl	8015590 <get_memory>
 800c732:	4604      	mov	r4, r0
 800c734:	2800      	cmp	r0, #0
 800c736:	f000 80b1 	beq.w	800c89c <rmw_create_subscription+0x1b0>
 800c73a:	6887      	ldr	r7, [r0, #8]
 800c73c:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800c740:	f008 ff8e 	bl	8015660 <rmw_get_implementation_identifier>
 800c744:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 800c748:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800c74a:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800c74e:	4628      	mov	r0, r5
 800c750:	f7f3 fd70 	bl	8000234 <strlen>
 800c754:	3001      	adds	r0, #1
 800c756:	283c      	cmp	r0, #60	@ 0x3c
 800c758:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800c75c:	f200 8096 	bhi.w	800c88c <rmw_create_subscription+0x1a0>
 800c760:	4a51      	ldr	r2, [pc, #324]	@ (800c8a8 <rmw_create_subscription+0x1bc>)
 800c762:	462b      	mov	r3, r5
 800c764:	213c      	movs	r1, #60	@ 0x3c
 800c766:	4650      	mov	r0, sl
 800c768:	f00b f95c 	bl	8017a24 <sniprintf>
 800c76c:	4641      	mov	r1, r8
 800c76e:	f8c7 9020 	str.w	r9, [r7, #32]
 800c772:	2250      	movs	r2, #80	@ 0x50
 800c774:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800c778:	f00b faf7 	bl	8017d6a <memcpy>
 800c77c:	494b      	ldr	r1, [pc, #300]	@ (800c8ac <rmw_create_subscription+0x1c0>)
 800c77e:	4630      	mov	r0, r6
 800c780:	f000 fc82 	bl	800d088 <get_message_typesupport_handle>
 800c784:	2800      	cmp	r0, #0
 800c786:	f000 8081 	beq.w	800c88c <rmw_create_subscription+0x1a0>
 800c78a:	6842      	ldr	r2, [r0, #4]
 800c78c:	61ba      	str	r2, [r7, #24]
 800c78e:	2a00      	cmp	r2, #0
 800c790:	d07c      	beq.n	800c88c <rmw_create_subscription+0x1a0>
 800c792:	4629      	mov	r1, r5
 800c794:	4643      	mov	r3, r8
 800c796:	4648      	mov	r0, r9
 800c798:	f008 ff68 	bl	801566c <create_topic>
 800c79c:	61f8      	str	r0, [r7, #28]
 800c79e:	2800      	cmp	r0, #0
 800c7a0:	d078      	beq.n	800c894 <rmw_create_subscription+0x1a8>
 800c7a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c7a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c7aa:	2104      	movs	r1, #4
 800c7ac:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 800c7b0:	1c42      	adds	r2, r0, #1
 800c7b2:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 800c7b6:	f001 ffd9 	bl	800e76c <uxr_object_id>
 800c7ba:	6138      	str	r0, [r7, #16]
 800c7bc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c7c0:	2506      	movs	r5, #6
 800c7c2:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 800c7c6:	9500      	str	r5, [sp, #0]
 800c7c8:	6819      	ldr	r1, [r3, #0]
 800c7ca:	693a      	ldr	r2, [r7, #16]
 800c7cc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c7d0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c7d4:	f001 fdea 	bl	800e3ac <uxr_buffer_create_subscriber_bin>
 800c7d8:	4602      	mov	r2, r0
 800c7da:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c7de:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c7e2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c7e6:	f000 fbc1 	bl	800cf6c <run_xrce_session>
 800c7ea:	2800      	cmp	r0, #0
 800c7ec:	d04e      	beq.n	800c88c <rmw_create_subscription+0x1a0>
 800c7ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c7f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c7f6:	4629      	mov	r1, r5
 800c7f8:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 800c7fc:	1c42      	adds	r2, r0, #1
 800c7fe:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 800c802:	f001 ffb3 	bl	800e76c <uxr_object_id>
 800c806:	ae08      	add	r6, sp, #32
 800c808:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c80c:	69fb      	ldr	r3, [r7, #28]
 800c80e:	6178      	str	r0, [r7, #20]
 800c810:	4641      	mov	r1, r8
 800c812:	4630      	mov	r0, r6
 800c814:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800c818:	9305      	str	r3, [sp, #20]
 800c81a:	f000 fbc3 	bl	800cfa4 <convert_qos_profile>
 800c81e:	9503      	str	r5, [sp, #12]
 800c820:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c824:	9b05      	ldr	r3, [sp, #20]
 800c826:	9001      	str	r0, [sp, #4]
 800c828:	f8ad 1008 	strh.w	r1, [sp, #8]
 800c82c:	691b      	ldr	r3, [r3, #16]
 800c82e:	9300      	str	r3, [sp, #0]
 800c830:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800c834:	f8db 1000 	ldr.w	r1, [fp]
 800c838:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800c83c:	f001 fe5c 	bl	800e4f8 <uxr_buffer_create_datareader_bin>
 800c840:	4602      	mov	r2, r0
 800c842:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c846:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800c84a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c84e:	f000 fb8d 	bl	800cf6c <run_xrce_session>
 800c852:	b1d8      	cbz	r0, 800c88c <rmw_create_subscription+0x1a0>
 800c854:	f898 3008 	ldrb.w	r3, [r8, #8]
 800c858:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c85c:	2b02      	cmp	r3, #2
 800c85e:	bf0c      	ite	eq
 800c860:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800c864:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800c868:	9307      	str	r3, [sp, #28]
 800c86a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800c86e:	2200      	movs	r2, #0
 800c870:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800c874:	ab0a      	add	r3, sp, #40	@ 0x28
 800c876:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800c87a:	9300      	str	r3, [sp, #0]
 800c87c:	697a      	ldr	r2, [r7, #20]
 800c87e:	9b07      	ldr	r3, [sp, #28]
 800c880:	6809      	ldr	r1, [r1, #0]
 800c882:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c886:	f001 ffa1 	bl	800e7cc <uxr_buffer_request_data>
 800c88a:	e007      	b.n	800c89c <rmw_create_subscription+0x1b0>
 800c88c:	69f8      	ldr	r0, [r7, #28]
 800c88e:	b108      	cbz	r0, 800c894 <rmw_create_subscription+0x1a8>
 800c890:	f000 fa6c 	bl	800cd6c <rmw_uxrce_fini_topic_memory>
 800c894:	4620      	mov	r0, r4
 800c896:	f000 fa27 	bl	800cce8 <rmw_uxrce_fini_subscription_memory>
 800c89a:	2400      	movs	r4, #0
 800c89c:	4620      	mov	r0, r4
 800c89e:	b00d      	add	sp, #52	@ 0x34
 800c8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8a4:	2000abbc 	.word	0x2000abbc
 800c8a8:	08018e58 	.word	0x08018e58
 800c8ac:	08018e24 	.word	0x08018e24

0800c8b0 <rmw_subscription_get_actual_qos>:
 800c8b0:	b150      	cbz	r0, 800c8c8 <rmw_subscription_get_actual_qos+0x18>
 800c8b2:	b508      	push	{r3, lr}
 800c8b4:	460b      	mov	r3, r1
 800c8b6:	b149      	cbz	r1, 800c8cc <rmw_subscription_get_actual_qos+0x1c>
 800c8b8:	6841      	ldr	r1, [r0, #4]
 800c8ba:	2250      	movs	r2, #80	@ 0x50
 800c8bc:	3128      	adds	r1, #40	@ 0x28
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f00b fa53 	bl	8017d6a <memcpy>
 800c8c4:	2000      	movs	r0, #0
 800c8c6:	bd08      	pop	{r3, pc}
 800c8c8:	200b      	movs	r0, #11
 800c8ca:	4770      	bx	lr
 800c8cc:	200b      	movs	r0, #11
 800c8ce:	bd08      	pop	{r3, pc}

0800c8d0 <rmw_destroy_subscription>:
 800c8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8d2:	b128      	cbz	r0, 800c8e0 <rmw_destroy_subscription+0x10>
 800c8d4:	4604      	mov	r4, r0
 800c8d6:	6800      	ldr	r0, [r0, #0]
 800c8d8:	460d      	mov	r5, r1
 800c8da:	f000 fbc7 	bl	800d06c <is_uxrce_rmw_identifier_valid>
 800c8de:	b910      	cbnz	r0, 800c8e6 <rmw_destroy_subscription+0x16>
 800c8e0:	2401      	movs	r4, #1
 800c8e2:	4620      	mov	r0, r4
 800c8e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8e6:	6863      	ldr	r3, [r4, #4]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d0f9      	beq.n	800c8e0 <rmw_destroy_subscription+0x10>
 800c8ec:	2d00      	cmp	r5, #0
 800c8ee:	d0f7      	beq.n	800c8e0 <rmw_destroy_subscription+0x10>
 800c8f0:	6828      	ldr	r0, [r5, #0]
 800c8f2:	f000 fbbb 	bl	800d06c <is_uxrce_rmw_identifier_valid>
 800c8f6:	2800      	cmp	r0, #0
 800c8f8:	d0f2      	beq.n	800c8e0 <rmw_destroy_subscription+0x10>
 800c8fa:	686c      	ldr	r4, [r5, #4]
 800c8fc:	2c00      	cmp	r4, #0
 800c8fe:	d0ef      	beq.n	800c8e0 <rmw_destroy_subscription+0x10>
 800c900:	6a26      	ldr	r6, [r4, #32]
 800c902:	6962      	ldr	r2, [r4, #20]
 800c904:	6930      	ldr	r0, [r6, #16]
 800c906:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c90a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c90e:	6819      	ldr	r1, [r3, #0]
 800c910:	f001 ff96 	bl	800e840 <uxr_buffer_cancel_data>
 800c914:	4602      	mov	r2, r0
 800c916:	6930      	ldr	r0, [r6, #16]
 800c918:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800c91c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800c920:	f000 fb24 	bl	800cf6c <run_xrce_session>
 800c924:	69e0      	ldr	r0, [r4, #28]
 800c926:	f008 fef1 	bl	801570c <destroy_topic>
 800c92a:	6a23      	ldr	r3, [r4, #32]
 800c92c:	6962      	ldr	r2, [r4, #20]
 800c92e:	6918      	ldr	r0, [r3, #16]
 800c930:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800c934:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800c938:	6819      	ldr	r1, [r3, #0]
 800c93a:	f001 fc53 	bl	800e1e4 <uxr_buffer_delete_entity>
 800c93e:	6a23      	ldr	r3, [r4, #32]
 800c940:	6922      	ldr	r2, [r4, #16]
 800c942:	691b      	ldr	r3, [r3, #16]
 800c944:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800c948:	4604      	mov	r4, r0
 800c94a:	6809      	ldr	r1, [r1, #0]
 800c94c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800c950:	f001 fc48 	bl	800e1e4 <uxr_buffer_delete_entity>
 800c954:	6937      	ldr	r7, [r6, #16]
 800c956:	4622      	mov	r2, r4
 800c958:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800c95c:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800c960:	4604      	mov	r4, r0
 800c962:	4638      	mov	r0, r7
 800c964:	f000 fb02 	bl	800cf6c <run_xrce_session>
 800c968:	6936      	ldr	r6, [r6, #16]
 800c96a:	4622      	mov	r2, r4
 800c96c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800c970:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800c974:	4604      	mov	r4, r0
 800c976:	4630      	mov	r0, r6
 800c978:	f000 faf8 	bl	800cf6c <run_xrce_session>
 800c97c:	b12c      	cbz	r4, 800c98a <rmw_destroy_subscription+0xba>
 800c97e:	b120      	cbz	r0, 800c98a <rmw_destroy_subscription+0xba>
 800c980:	2400      	movs	r4, #0
 800c982:	4628      	mov	r0, r5
 800c984:	f000 f9b0 	bl	800cce8 <rmw_uxrce_fini_subscription_memory>
 800c988:	e7ab      	b.n	800c8e2 <rmw_destroy_subscription+0x12>
 800c98a:	2402      	movs	r4, #2
 800c98c:	e7f9      	b.n	800c982 <rmw_destroy_subscription+0xb2>
 800c98e:	bf00      	nop

0800c990 <rmw_uxrce_transport_init>:
 800c990:	b508      	push	{r3, lr}
 800c992:	b108      	cbz	r0, 800c998 <rmw_uxrce_transport_init+0x8>
 800c994:	f100 0210 	add.w	r2, r0, #16
 800c998:	b139      	cbz	r1, 800c9aa <rmw_uxrce_transport_init+0x1a>
 800c99a:	6949      	ldr	r1, [r1, #20]
 800c99c:	4610      	mov	r0, r2
 800c99e:	f001 fead 	bl	800e6fc <uxr_init_custom_transport>
 800c9a2:	f080 0001 	eor.w	r0, r0, #1
 800c9a6:	b2c0      	uxtb	r0, r0
 800c9a8:	bd08      	pop	{r3, pc}
 800c9aa:	4b04      	ldr	r3, [pc, #16]	@ (800c9bc <rmw_uxrce_transport_init+0x2c>)
 800c9ac:	4610      	mov	r0, r2
 800c9ae:	6859      	ldr	r1, [r3, #4]
 800c9b0:	f001 fea4 	bl	800e6fc <uxr_init_custom_transport>
 800c9b4:	f080 0001 	eor.w	r0, r0, #1
 800c9b8:	b2c0      	uxtb	r0, r0
 800c9ba:	bd08      	pop	{r3, pc}
 800c9bc:	20006244 	.word	0x20006244

0800c9c0 <rmw_uxrce_init_service_memory>:
 800c9c0:	b1e2      	cbz	r2, 800c9fc <rmw_uxrce_init_service_memory+0x3c>
 800c9c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9c6:	7b05      	ldrb	r5, [r0, #12]
 800c9c8:	4606      	mov	r6, r0
 800c9ca:	b9ad      	cbnz	r5, 800c9f8 <rmw_uxrce_init_service_memory+0x38>
 800c9cc:	23c8      	movs	r3, #200	@ 0xc8
 800c9ce:	e9c0 5500 	strd	r5, r5, [r0]
 800c9d2:	6083      	str	r3, [r0, #8]
 800c9d4:	f240 1301 	movw	r3, #257	@ 0x101
 800c9d8:	4617      	mov	r7, r2
 800c9da:	8183      	strh	r3, [r0, #12]
 800c9dc:	460c      	mov	r4, r1
 800c9de:	46a8      	mov	r8, r5
 800c9e0:	4621      	mov	r1, r4
 800c9e2:	4630      	mov	r0, r6
 800c9e4:	3501      	adds	r5, #1
 800c9e6:	f008 fde3 	bl	80155b0 <put_memory>
 800c9ea:	42af      	cmp	r7, r5
 800c9ec:	60a4      	str	r4, [r4, #8]
 800c9ee:	f884 800c 	strb.w	r8, [r4, #12]
 800c9f2:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800c9f6:	d1f3      	bne.n	800c9e0 <rmw_uxrce_init_service_memory+0x20>
 800c9f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9fc:	4770      	bx	lr
 800c9fe:	bf00      	nop

0800ca00 <rmw_uxrce_init_client_memory>:
 800ca00:	b1e2      	cbz	r2, 800ca3c <rmw_uxrce_init_client_memory+0x3c>
 800ca02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca06:	7b05      	ldrb	r5, [r0, #12]
 800ca08:	4606      	mov	r6, r0
 800ca0a:	b9ad      	cbnz	r5, 800ca38 <rmw_uxrce_init_client_memory+0x38>
 800ca0c:	23c8      	movs	r3, #200	@ 0xc8
 800ca0e:	e9c0 5500 	strd	r5, r5, [r0]
 800ca12:	6083      	str	r3, [r0, #8]
 800ca14:	f240 1301 	movw	r3, #257	@ 0x101
 800ca18:	4617      	mov	r7, r2
 800ca1a:	8183      	strh	r3, [r0, #12]
 800ca1c:	460c      	mov	r4, r1
 800ca1e:	46a8      	mov	r8, r5
 800ca20:	4621      	mov	r1, r4
 800ca22:	4630      	mov	r0, r6
 800ca24:	3501      	adds	r5, #1
 800ca26:	f008 fdc3 	bl	80155b0 <put_memory>
 800ca2a:	42af      	cmp	r7, r5
 800ca2c:	60a4      	str	r4, [r4, #8]
 800ca2e:	f884 800c 	strb.w	r8, [r4, #12]
 800ca32:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ca36:	d1f3      	bne.n	800ca20 <rmw_uxrce_init_client_memory+0x20>
 800ca38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca3c:	4770      	bx	lr
 800ca3e:	bf00      	nop

0800ca40 <rmw_uxrce_init_publisher_memory>:
 800ca40:	b1e2      	cbz	r2, 800ca7c <rmw_uxrce_init_publisher_memory+0x3c>
 800ca42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca46:	7b05      	ldrb	r5, [r0, #12]
 800ca48:	4606      	mov	r6, r0
 800ca4a:	b9ad      	cbnz	r5, 800ca78 <rmw_uxrce_init_publisher_memory+0x38>
 800ca4c:	23d8      	movs	r3, #216	@ 0xd8
 800ca4e:	e9c0 5500 	strd	r5, r5, [r0]
 800ca52:	6083      	str	r3, [r0, #8]
 800ca54:	f240 1301 	movw	r3, #257	@ 0x101
 800ca58:	4617      	mov	r7, r2
 800ca5a:	8183      	strh	r3, [r0, #12]
 800ca5c:	460c      	mov	r4, r1
 800ca5e:	46a8      	mov	r8, r5
 800ca60:	4621      	mov	r1, r4
 800ca62:	4630      	mov	r0, r6
 800ca64:	3501      	adds	r5, #1
 800ca66:	f008 fda3 	bl	80155b0 <put_memory>
 800ca6a:	42af      	cmp	r7, r5
 800ca6c:	60a4      	str	r4, [r4, #8]
 800ca6e:	f884 800c 	strb.w	r8, [r4, #12]
 800ca72:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ca76:	d1f3      	bne.n	800ca60 <rmw_uxrce_init_publisher_memory+0x20>
 800ca78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca7c:	4770      	bx	lr
 800ca7e:	bf00      	nop

0800ca80 <rmw_uxrce_init_subscription_memory>:
 800ca80:	b1e2      	cbz	r2, 800cabc <rmw_uxrce_init_subscription_memory+0x3c>
 800ca82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca86:	7b05      	ldrb	r5, [r0, #12]
 800ca88:	4606      	mov	r6, r0
 800ca8a:	b9ad      	cbnz	r5, 800cab8 <rmw_uxrce_init_subscription_memory+0x38>
 800ca8c:	23d8      	movs	r3, #216	@ 0xd8
 800ca8e:	e9c0 5500 	strd	r5, r5, [r0]
 800ca92:	6083      	str	r3, [r0, #8]
 800ca94:	f240 1301 	movw	r3, #257	@ 0x101
 800ca98:	4617      	mov	r7, r2
 800ca9a:	8183      	strh	r3, [r0, #12]
 800ca9c:	460c      	mov	r4, r1
 800ca9e:	46a8      	mov	r8, r5
 800caa0:	4621      	mov	r1, r4
 800caa2:	4630      	mov	r0, r6
 800caa4:	3501      	adds	r5, #1
 800caa6:	f008 fd83 	bl	80155b0 <put_memory>
 800caaa:	42af      	cmp	r7, r5
 800caac:	60a4      	str	r4, [r4, #8]
 800caae:	f884 800c 	strb.w	r8, [r4, #12]
 800cab2:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800cab6:	d1f3      	bne.n	800caa0 <rmw_uxrce_init_subscription_memory+0x20>
 800cab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cabc:	4770      	bx	lr
 800cabe:	bf00      	nop

0800cac0 <rmw_uxrce_init_node_memory>:
 800cac0:	b1e2      	cbz	r2, 800cafc <rmw_uxrce_init_node_memory+0x3c>
 800cac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cac6:	7b05      	ldrb	r5, [r0, #12]
 800cac8:	4606      	mov	r6, r0
 800caca:	b9ad      	cbnz	r5, 800caf8 <rmw_uxrce_init_node_memory+0x38>
 800cacc:	23a4      	movs	r3, #164	@ 0xa4
 800cace:	e9c0 5500 	strd	r5, r5, [r0]
 800cad2:	6083      	str	r3, [r0, #8]
 800cad4:	f240 1301 	movw	r3, #257	@ 0x101
 800cad8:	4617      	mov	r7, r2
 800cada:	8183      	strh	r3, [r0, #12]
 800cadc:	460c      	mov	r4, r1
 800cade:	46a8      	mov	r8, r5
 800cae0:	4621      	mov	r1, r4
 800cae2:	4630      	mov	r0, r6
 800cae4:	3501      	adds	r5, #1
 800cae6:	f008 fd63 	bl	80155b0 <put_memory>
 800caea:	42af      	cmp	r7, r5
 800caec:	60a4      	str	r4, [r4, #8]
 800caee:	f884 800c 	strb.w	r8, [r4, #12]
 800caf2:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800caf6:	d1f3      	bne.n	800cae0 <rmw_uxrce_init_node_memory+0x20>
 800caf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cafc:	4770      	bx	lr
 800cafe:	bf00      	nop

0800cb00 <rmw_uxrce_init_session_memory>:
 800cb00:	b1ea      	cbz	r2, 800cb3e <rmw_uxrce_init_session_memory+0x3e>
 800cb02:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb06:	7b05      	ldrb	r5, [r0, #12]
 800cb08:	4606      	mov	r6, r0
 800cb0a:	b9b5      	cbnz	r5, 800cb3a <rmw_uxrce_init_session_memory+0x3a>
 800cb0c:	e9c0 5500 	strd	r5, r5, [r0]
 800cb10:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800cb14:	f240 1301 	movw	r3, #257	@ 0x101
 800cb18:	4617      	mov	r7, r2
 800cb1a:	f8c0 8008 	str.w	r8, [r0, #8]
 800cb1e:	460c      	mov	r4, r1
 800cb20:	8183      	strh	r3, [r0, #12]
 800cb22:	46a9      	mov	r9, r5
 800cb24:	4621      	mov	r1, r4
 800cb26:	4630      	mov	r0, r6
 800cb28:	3501      	adds	r5, #1
 800cb2a:	f008 fd41 	bl	80155b0 <put_memory>
 800cb2e:	42af      	cmp	r7, r5
 800cb30:	60a4      	str	r4, [r4, #8]
 800cb32:	f884 900c 	strb.w	r9, [r4, #12]
 800cb36:	4444      	add	r4, r8
 800cb38:	d1f4      	bne.n	800cb24 <rmw_uxrce_init_session_memory+0x24>
 800cb3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb3e:	4770      	bx	lr

0800cb40 <rmw_uxrce_init_topic_memory>:
 800cb40:	b1e2      	cbz	r2, 800cb7c <rmw_uxrce_init_topic_memory+0x3c>
 800cb42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb46:	7b05      	ldrb	r5, [r0, #12]
 800cb48:	4606      	mov	r6, r0
 800cb4a:	b9ad      	cbnz	r5, 800cb78 <rmw_uxrce_init_topic_memory+0x38>
 800cb4c:	231c      	movs	r3, #28
 800cb4e:	e9c0 5500 	strd	r5, r5, [r0]
 800cb52:	6083      	str	r3, [r0, #8]
 800cb54:	f240 1301 	movw	r3, #257	@ 0x101
 800cb58:	4617      	mov	r7, r2
 800cb5a:	8183      	strh	r3, [r0, #12]
 800cb5c:	460c      	mov	r4, r1
 800cb5e:	46a8      	mov	r8, r5
 800cb60:	4621      	mov	r1, r4
 800cb62:	4630      	mov	r0, r6
 800cb64:	3501      	adds	r5, #1
 800cb66:	f008 fd23 	bl	80155b0 <put_memory>
 800cb6a:	42af      	cmp	r7, r5
 800cb6c:	60a4      	str	r4, [r4, #8]
 800cb6e:	f884 800c 	strb.w	r8, [r4, #12]
 800cb72:	f104 041c 	add.w	r4, r4, #28
 800cb76:	d1f3      	bne.n	800cb60 <rmw_uxrce_init_topic_memory+0x20>
 800cb78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb7c:	4770      	bx	lr
 800cb7e:	bf00      	nop

0800cb80 <rmw_uxrce_init_static_input_buffer_memory>:
 800cb80:	b1ea      	cbz	r2, 800cbbe <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800cb82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb86:	7b05      	ldrb	r5, [r0, #12]
 800cb88:	4606      	mov	r6, r0
 800cb8a:	b9b5      	cbnz	r5, 800cbba <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800cb8c:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800cb90:	e9c0 5500 	strd	r5, r5, [r0]
 800cb94:	6083      	str	r3, [r0, #8]
 800cb96:	f240 1301 	movw	r3, #257	@ 0x101
 800cb9a:	4617      	mov	r7, r2
 800cb9c:	8183      	strh	r3, [r0, #12]
 800cb9e:	460c      	mov	r4, r1
 800cba0:	46a8      	mov	r8, r5
 800cba2:	4621      	mov	r1, r4
 800cba4:	4630      	mov	r0, r6
 800cba6:	3501      	adds	r5, #1
 800cba8:	f008 fd02 	bl	80155b0 <put_memory>
 800cbac:	42af      	cmp	r7, r5
 800cbae:	60a4      	str	r4, [r4, #8]
 800cbb0:	f884 800c 	strb.w	r8, [r4, #12]
 800cbb4:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800cbb8:	d1f3      	bne.n	800cba2 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800cbba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbbe:	4770      	bx	lr

0800cbc0 <rmw_uxrce_init_init_options_impl_memory>:
 800cbc0:	b1e2      	cbz	r2, 800cbfc <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800cbc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbc6:	7b05      	ldrb	r5, [r0, #12]
 800cbc8:	4606      	mov	r6, r0
 800cbca:	b9ad      	cbnz	r5, 800cbf8 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800cbcc:	232c      	movs	r3, #44	@ 0x2c
 800cbce:	e9c0 5500 	strd	r5, r5, [r0]
 800cbd2:	6083      	str	r3, [r0, #8]
 800cbd4:	f240 1301 	movw	r3, #257	@ 0x101
 800cbd8:	4617      	mov	r7, r2
 800cbda:	8183      	strh	r3, [r0, #12]
 800cbdc:	460c      	mov	r4, r1
 800cbde:	46a8      	mov	r8, r5
 800cbe0:	4621      	mov	r1, r4
 800cbe2:	4630      	mov	r0, r6
 800cbe4:	3501      	adds	r5, #1
 800cbe6:	f008 fce3 	bl	80155b0 <put_memory>
 800cbea:	42af      	cmp	r7, r5
 800cbec:	60a4      	str	r4, [r4, #8]
 800cbee:	f884 800c 	strb.w	r8, [r4, #12]
 800cbf2:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800cbf6:	d1f3      	bne.n	800cbe0 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800cbf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbfc:	4770      	bx	lr
 800cbfe:	bf00      	nop

0800cc00 <rmw_uxrce_init_wait_set_memory>:
 800cc00:	b1e2      	cbz	r2, 800cc3c <rmw_uxrce_init_wait_set_memory+0x3c>
 800cc02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc06:	7b05      	ldrb	r5, [r0, #12]
 800cc08:	4606      	mov	r6, r0
 800cc0a:	b9ad      	cbnz	r5, 800cc38 <rmw_uxrce_init_wait_set_memory+0x38>
 800cc0c:	231c      	movs	r3, #28
 800cc0e:	e9c0 5500 	strd	r5, r5, [r0]
 800cc12:	6083      	str	r3, [r0, #8]
 800cc14:	f240 1301 	movw	r3, #257	@ 0x101
 800cc18:	4617      	mov	r7, r2
 800cc1a:	8183      	strh	r3, [r0, #12]
 800cc1c:	460c      	mov	r4, r1
 800cc1e:	46a8      	mov	r8, r5
 800cc20:	4621      	mov	r1, r4
 800cc22:	4630      	mov	r0, r6
 800cc24:	3501      	adds	r5, #1
 800cc26:	f008 fcc3 	bl	80155b0 <put_memory>
 800cc2a:	42af      	cmp	r7, r5
 800cc2c:	60a4      	str	r4, [r4, #8]
 800cc2e:	f884 800c 	strb.w	r8, [r4, #12]
 800cc32:	f104 041c 	add.w	r4, r4, #28
 800cc36:	d1f3      	bne.n	800cc20 <rmw_uxrce_init_wait_set_memory+0x20>
 800cc38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc3c:	4770      	bx	lr
 800cc3e:	bf00      	nop

0800cc40 <rmw_uxrce_init_guard_condition_memory>:
 800cc40:	b1e2      	cbz	r2, 800cc7c <rmw_uxrce_init_guard_condition_memory+0x3c>
 800cc42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc46:	7b05      	ldrb	r5, [r0, #12]
 800cc48:	4606      	mov	r6, r0
 800cc4a:	b9ad      	cbnz	r5, 800cc78 <rmw_uxrce_init_guard_condition_memory+0x38>
 800cc4c:	2320      	movs	r3, #32
 800cc4e:	e9c0 5500 	strd	r5, r5, [r0]
 800cc52:	6083      	str	r3, [r0, #8]
 800cc54:	f240 1301 	movw	r3, #257	@ 0x101
 800cc58:	4617      	mov	r7, r2
 800cc5a:	8183      	strh	r3, [r0, #12]
 800cc5c:	460c      	mov	r4, r1
 800cc5e:	46a8      	mov	r8, r5
 800cc60:	4621      	mov	r1, r4
 800cc62:	4630      	mov	r0, r6
 800cc64:	3501      	adds	r5, #1
 800cc66:	f008 fca3 	bl	80155b0 <put_memory>
 800cc6a:	42af      	cmp	r7, r5
 800cc6c:	60a4      	str	r4, [r4, #8]
 800cc6e:	f884 800c 	strb.w	r8, [r4, #12]
 800cc72:	f104 0420 	add.w	r4, r4, #32
 800cc76:	d1f3      	bne.n	800cc60 <rmw_uxrce_init_guard_condition_memory+0x20>
 800cc78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc7c:	4770      	bx	lr
 800cc7e:	bf00      	nop

0800cc80 <rmw_uxrce_fini_session_memory>:
 800cc80:	4601      	mov	r1, r0
 800cc82:	4801      	ldr	r0, [pc, #4]	@ (800cc88 <rmw_uxrce_fini_session_memory+0x8>)
 800cc84:	f008 bc94 	b.w	80155b0 <put_memory>
 800cc88:	2000ab9c 	.word	0x2000ab9c

0800cc8c <rmw_uxrce_fini_node_memory>:
 800cc8c:	b538      	push	{r3, r4, r5, lr}
 800cc8e:	4604      	mov	r4, r0
 800cc90:	6800      	ldr	r0, [r0, #0]
 800cc92:	b128      	cbz	r0, 800cca0 <rmw_uxrce_fini_node_memory+0x14>
 800cc94:	4b07      	ldr	r3, [pc, #28]	@ (800ccb4 <rmw_uxrce_fini_node_memory+0x28>)
 800cc96:	6819      	ldr	r1, [r3, #0]
 800cc98:	f7f3 fac2 	bl	8000220 <strcmp>
 800cc9c:	b940      	cbnz	r0, 800ccb0 <rmw_uxrce_fini_node_memory+0x24>
 800cc9e:	6020      	str	r0, [r4, #0]
 800cca0:	6861      	ldr	r1, [r4, #4]
 800cca2:	b129      	cbz	r1, 800ccb0 <rmw_uxrce_fini_node_memory+0x24>
 800cca4:	2500      	movs	r5, #0
 800cca6:	4804      	ldr	r0, [pc, #16]	@ (800ccb8 <rmw_uxrce_fini_node_memory+0x2c>)
 800cca8:	610d      	str	r5, [r1, #16]
 800ccaa:	f008 fc81 	bl	80155b0 <put_memory>
 800ccae:	6065      	str	r5, [r4, #4]
 800ccb0:	bd38      	pop	{r3, r4, r5, pc}
 800ccb2:	bf00      	nop
 800ccb4:	08019770 	.word	0x08019770
 800ccb8:	2000ab6c 	.word	0x2000ab6c

0800ccbc <rmw_uxrce_fini_publisher_memory>:
 800ccbc:	b510      	push	{r4, lr}
 800ccbe:	4604      	mov	r4, r0
 800ccc0:	6800      	ldr	r0, [r0, #0]
 800ccc2:	b128      	cbz	r0, 800ccd0 <rmw_uxrce_fini_publisher_memory+0x14>
 800ccc4:	4b06      	ldr	r3, [pc, #24]	@ (800cce0 <rmw_uxrce_fini_publisher_memory+0x24>)
 800ccc6:	6819      	ldr	r1, [r3, #0]
 800ccc8:	f7f3 faaa 	bl	8000220 <strcmp>
 800cccc:	b938      	cbnz	r0, 800ccde <rmw_uxrce_fini_publisher_memory+0x22>
 800ccce:	6020      	str	r0, [r4, #0]
 800ccd0:	6861      	ldr	r1, [r4, #4]
 800ccd2:	b121      	cbz	r1, 800ccde <rmw_uxrce_fini_publisher_memory+0x22>
 800ccd4:	4803      	ldr	r0, [pc, #12]	@ (800cce4 <rmw_uxrce_fini_publisher_memory+0x28>)
 800ccd6:	f008 fc6b 	bl	80155b0 <put_memory>
 800ccda:	2300      	movs	r3, #0
 800ccdc:	6063      	str	r3, [r4, #4]
 800ccde:	bd10      	pop	{r4, pc}
 800cce0:	08019770 	.word	0x08019770
 800cce4:	2000ab7c 	.word	0x2000ab7c

0800cce8 <rmw_uxrce_fini_subscription_memory>:
 800cce8:	b510      	push	{r4, lr}
 800ccea:	4604      	mov	r4, r0
 800ccec:	6800      	ldr	r0, [r0, #0]
 800ccee:	b128      	cbz	r0, 800ccfc <rmw_uxrce_fini_subscription_memory+0x14>
 800ccf0:	4b06      	ldr	r3, [pc, #24]	@ (800cd0c <rmw_uxrce_fini_subscription_memory+0x24>)
 800ccf2:	6819      	ldr	r1, [r3, #0]
 800ccf4:	f7f3 fa94 	bl	8000220 <strcmp>
 800ccf8:	b938      	cbnz	r0, 800cd0a <rmw_uxrce_fini_subscription_memory+0x22>
 800ccfa:	6020      	str	r0, [r4, #0]
 800ccfc:	6861      	ldr	r1, [r4, #4]
 800ccfe:	b121      	cbz	r1, 800cd0a <rmw_uxrce_fini_subscription_memory+0x22>
 800cd00:	4803      	ldr	r0, [pc, #12]	@ (800cd10 <rmw_uxrce_fini_subscription_memory+0x28>)
 800cd02:	f008 fc55 	bl	80155b0 <put_memory>
 800cd06:	2300      	movs	r3, #0
 800cd08:	6063      	str	r3, [r4, #4]
 800cd0a:	bd10      	pop	{r4, pc}
 800cd0c:	08019770 	.word	0x08019770
 800cd10:	2000abbc 	.word	0x2000abbc

0800cd14 <rmw_uxrce_fini_service_memory>:
 800cd14:	b510      	push	{r4, lr}
 800cd16:	4604      	mov	r4, r0
 800cd18:	6800      	ldr	r0, [r0, #0]
 800cd1a:	b128      	cbz	r0, 800cd28 <rmw_uxrce_fini_service_memory+0x14>
 800cd1c:	4b06      	ldr	r3, [pc, #24]	@ (800cd38 <rmw_uxrce_fini_service_memory+0x24>)
 800cd1e:	6819      	ldr	r1, [r3, #0]
 800cd20:	f7f3 fa7e 	bl	8000220 <strcmp>
 800cd24:	b938      	cbnz	r0, 800cd36 <rmw_uxrce_fini_service_memory+0x22>
 800cd26:	6020      	str	r0, [r4, #0]
 800cd28:	6861      	ldr	r1, [r4, #4]
 800cd2a:	b121      	cbz	r1, 800cd36 <rmw_uxrce_fini_service_memory+0x22>
 800cd2c:	4803      	ldr	r0, [pc, #12]	@ (800cd3c <rmw_uxrce_fini_service_memory+0x28>)
 800cd2e:	f008 fc3f 	bl	80155b0 <put_memory>
 800cd32:	2300      	movs	r3, #0
 800cd34:	6063      	str	r3, [r4, #4]
 800cd36:	bd10      	pop	{r4, pc}
 800cd38:	08019770 	.word	0x08019770
 800cd3c:	2000ab8c 	.word	0x2000ab8c

0800cd40 <rmw_uxrce_fini_client_memory>:
 800cd40:	b510      	push	{r4, lr}
 800cd42:	4604      	mov	r4, r0
 800cd44:	6800      	ldr	r0, [r0, #0]
 800cd46:	b128      	cbz	r0, 800cd54 <rmw_uxrce_fini_client_memory+0x14>
 800cd48:	4b06      	ldr	r3, [pc, #24]	@ (800cd64 <rmw_uxrce_fini_client_memory+0x24>)
 800cd4a:	6819      	ldr	r1, [r3, #0]
 800cd4c:	f7f3 fa68 	bl	8000220 <strcmp>
 800cd50:	b938      	cbnz	r0, 800cd62 <rmw_uxrce_fini_client_memory+0x22>
 800cd52:	6020      	str	r0, [r4, #0]
 800cd54:	6861      	ldr	r1, [r4, #4]
 800cd56:	b121      	cbz	r1, 800cd62 <rmw_uxrce_fini_client_memory+0x22>
 800cd58:	4803      	ldr	r0, [pc, #12]	@ (800cd68 <rmw_uxrce_fini_client_memory+0x28>)
 800cd5a:	f008 fc29 	bl	80155b0 <put_memory>
 800cd5e:	2300      	movs	r3, #0
 800cd60:	6063      	str	r3, [r4, #4]
 800cd62:	bd10      	pop	{r4, pc}
 800cd64:	08019770 	.word	0x08019770
 800cd68:	2000629c 	.word	0x2000629c

0800cd6c <rmw_uxrce_fini_topic_memory>:
 800cd6c:	b510      	push	{r4, lr}
 800cd6e:	4604      	mov	r4, r0
 800cd70:	4621      	mov	r1, r4
 800cd72:	4803      	ldr	r0, [pc, #12]	@ (800cd80 <rmw_uxrce_fini_topic_memory+0x14>)
 800cd74:	f008 fc1c 	bl	80155b0 <put_memory>
 800cd78:	2300      	movs	r3, #0
 800cd7a:	61a3      	str	r3, [r4, #24]
 800cd7c:	bd10      	pop	{r4, pc}
 800cd7e:	bf00      	nop
 800cd80:	2000abcc 	.word	0x2000abcc

0800cd84 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800cd84:	b082      	sub	sp, #8
 800cd86:	b530      	push	{r4, r5, lr}
 800cd88:	4925      	ldr	r1, [pc, #148]	@ (800ce20 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800cd8a:	680d      	ldr	r5, [r1, #0]
 800cd8c:	ac03      	add	r4, sp, #12
 800cd8e:	e884 000c 	stmia.w	r4, {r2, r3}
 800cd92:	461c      	mov	r4, r3
 800cd94:	2d00      	cmp	r5, #0
 800cd96:	d041      	beq.n	800ce1c <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800cd98:	462b      	mov	r3, r5
 800cd9a:	2100      	movs	r1, #0
 800cd9c:	689a      	ldr	r2, [r3, #8]
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800cda4:	4290      	cmp	r0, r2
 800cda6:	bf08      	it	eq
 800cda8:	3101      	addeq	r1, #1
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d1f6      	bne.n	800cd9c <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800cdae:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800cdb2:	2b02      	cmp	r3, #2
 800cdb4:	d029      	beq.n	800ce0a <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800cdb6:	d907      	bls.n	800cdc8 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800cdb8:	2b03      	cmp	r3, #3
 800cdba:	d005      	beq.n	800cdc8 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800cdbc:	2100      	movs	r1, #0
 800cdbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cdc2:	4608      	mov	r0, r1
 800cdc4:	b002      	add	sp, #8
 800cdc6:	4770      	bx	lr
 800cdc8:	b314      	cbz	r4, 800ce10 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800cdca:	428c      	cmp	r4, r1
 800cdcc:	d820      	bhi.n	800ce10 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800cdce:	2d00      	cmp	r5, #0
 800cdd0:	d0f4      	beq.n	800cdbc <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800cdd2:	2100      	movs	r1, #0
 800cdd4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800cdd8:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800cddc:	e002      	b.n	800cde4 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800cdde:	686d      	ldr	r5, [r5, #4]
 800cde0:	2d00      	cmp	r5, #0
 800cde2:	d0ec      	beq.n	800cdbe <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800cde4:	68ab      	ldr	r3, [r5, #8]
 800cde6:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800cdea:	4290      	cmp	r0, r2
 800cdec:	d1f7      	bne.n	800cdde <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800cdee:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800cdf2:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800cdf6:	4562      	cmp	r2, ip
 800cdf8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800cdfc:	eb73 0e04 	sbcs.w	lr, r3, r4
 800ce00:	daed      	bge.n	800cdde <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ce02:	4694      	mov	ip, r2
 800ce04:	461c      	mov	r4, r3
 800ce06:	4629      	mov	r1, r5
 800ce08:	e7e9      	b.n	800cdde <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ce0a:	b10c      	cbz	r4, 800ce10 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ce0c:	428c      	cmp	r4, r1
 800ce0e:	d9d5      	bls.n	800cdbc <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800ce10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce14:	4802      	ldr	r0, [pc, #8]	@ (800ce20 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800ce16:	b002      	add	sp, #8
 800ce18:	f008 bbba 	b.w	8015590 <get_memory>
 800ce1c:	4629      	mov	r1, r5
 800ce1e:	e7c6      	b.n	800cdae <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800ce20:	2000abac 	.word	0x2000abac

0800ce24 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800ce24:	4b11      	ldr	r3, [pc, #68]	@ (800ce6c <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	b530      	push	{r4, r5, lr}
 800ce2a:	b1e3      	cbz	r3, 800ce66 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800ce2c:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800ce30:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800ce34:	2400      	movs	r4, #0
 800ce36:	e001      	b.n	800ce3c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800ce38:	685b      	ldr	r3, [r3, #4]
 800ce3a:	b193      	cbz	r3, 800ce62 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800ce3c:	689a      	ldr	r2, [r3, #8]
 800ce3e:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800ce42:	4288      	cmp	r0, r1
 800ce44:	d1f8      	bne.n	800ce38 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800ce46:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800ce4a:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800ce4e:	4571      	cmp	r1, lr
 800ce50:	eb72 050c 	sbcs.w	r5, r2, ip
 800ce54:	daf0      	bge.n	800ce38 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800ce56:	461c      	mov	r4, r3
 800ce58:	685b      	ldr	r3, [r3, #4]
 800ce5a:	468e      	mov	lr, r1
 800ce5c:	4694      	mov	ip, r2
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d1ec      	bne.n	800ce3c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800ce62:	4620      	mov	r0, r4
 800ce64:	bd30      	pop	{r4, r5, pc}
 800ce66:	461c      	mov	r4, r3
 800ce68:	4620      	mov	r0, r4
 800ce6a:	bd30      	pop	{r4, r5, pc}
 800ce6c:	2000abac 	.word	0x2000abac

0800ce70 <rmw_uxrce_clean_expired_static_input_buffer>:
 800ce70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce74:	4b3c      	ldr	r3, [pc, #240]	@ (800cf68 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800ce76:	ed2d 8b06 	vpush	{d8-d10}
 800ce7a:	681f      	ldr	r7, [r3, #0]
 800ce7c:	b08d      	sub	sp, #52	@ 0x34
 800ce7e:	f008 ffa3 	bl	8015dc8 <rmw_uros_epoch_nanos>
 800ce82:	2f00      	cmp	r7, #0
 800ce84:	d05d      	beq.n	800cf42 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800ce86:	46b8      	mov	r8, r7
 800ce88:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800cf50 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800ce8c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800ce90:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800ce94:	2b04      	cmp	r3, #4
 800ce96:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800cf58 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800ce9a:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800cf60 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800ce9e:	4681      	mov	r9, r0
 800cea0:	468a      	mov	sl, r1
 800cea2:	ac04      	add	r4, sp, #16
 800cea4:	d03f      	beq.n	800cf26 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800cea6:	2b05      	cmp	r3, #5
 800cea8:	d044      	beq.n	800cf34 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800ceaa:	2b03      	cmp	r3, #3
 800ceac:	d03b      	beq.n	800cf26 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800ceae:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ceb2:	ed8d ab06 	vstr	d10, [sp, #24]
 800ceb6:	ed8d 8b08 	vstr	d8, [sp, #32]
 800ceba:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800cebe:	ab08      	add	r3, sp, #32
 800cec0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cec2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800cec6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ceca:	f008 f8ad 	bl	8015028 <rmw_time_equal>
 800cece:	b118      	cbz	r0, 800ced8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800ced0:	ed8d 9b04 	vstr	d9, [sp, #16]
 800ced4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ced8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800cedc:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800cee0:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800cee4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800cee8:	f008 f8f2 	bl	80150d0 <rmw_time_total_nsec>
 800ceec:	1830      	adds	r0, r6, r0
 800ceee:	eb47 0101 	adc.w	r1, r7, r1
 800cef2:	4548      	cmp	r0, r9
 800cef4:	eb71 030a 	sbcs.w	r3, r1, sl
 800cef8:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800cefc:	db05      	blt.n	800cf0a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800cefe:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800cf02:	4591      	cmp	r9, r2
 800cf04:	eb7a 0303 	sbcs.w	r3, sl, r3
 800cf08:	da03      	bge.n	800cf12 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800cf0a:	4817      	ldr	r0, [pc, #92]	@ (800cf68 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800cf0c:	4641      	mov	r1, r8
 800cf0e:	f008 fb4f 	bl	80155b0 <put_memory>
 800cf12:	f1bb 0f00 	cmp.w	fp, #0
 800cf16:	d014      	beq.n	800cf42 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800cf18:	46d8      	mov	r8, fp
 800cf1a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800cf1e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800cf22:	2b04      	cmp	r3, #4
 800cf24:	d1bf      	bne.n	800cea6 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800cf26:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800cf2a:	3340      	adds	r3, #64	@ 0x40
 800cf2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cf2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cf32:	e7c0      	b.n	800ceb6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800cf34:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800cf38:	3348      	adds	r3, #72	@ 0x48
 800cf3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cf3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cf40:	e7b9      	b.n	800ceb6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800cf42:	b00d      	add	sp, #52	@ 0x34
 800cf44:	ecbd 8b06 	vpop	{d8-d10}
 800cf48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf4c:	f3af 8000 	nop.w
	...
 800cf58:	00000001 	.word	0x00000001
 800cf5c:	00000000 	.word	0x00000000
 800cf60:	0000001e 	.word	0x0000001e
 800cf64:	00000000 	.word	0x00000000
 800cf68:	2000abac 	.word	0x2000abac

0800cf6c <run_xrce_session>:
 800cf6c:	b510      	push	{r4, lr}
 800cf6e:	788c      	ldrb	r4, [r1, #2]
 800cf70:	b086      	sub	sp, #24
 800cf72:	2c01      	cmp	r4, #1
 800cf74:	f8ad 200e 	strh.w	r2, [sp, #14]
 800cf78:	d00c      	beq.n	800cf94 <run_xrce_session+0x28>
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	9300      	str	r3, [sp, #0]
 800cf80:	f10d 020e 	add.w	r2, sp, #14
 800cf84:	f10d 0317 	add.w	r3, sp, #23
 800cf88:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cf8c:	f002 fa52 	bl	800f434 <uxr_run_session_until_all_status>
 800cf90:	b006      	add	sp, #24
 800cf92:	bd10      	pop	{r4, pc}
 800cf94:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800cf98:	f001 fe66 	bl	800ec68 <uxr_flash_output_streams>
 800cf9c:	4620      	mov	r0, r4
 800cf9e:	b006      	add	sp, #24
 800cfa0:	bd10      	pop	{r4, pc}
 800cfa2:	bf00      	nop

0800cfa4 <convert_qos_profile>:
 800cfa4:	7a4a      	ldrb	r2, [r1, #9]
 800cfa6:	f891 c008 	ldrb.w	ip, [r1, #8]
 800cfaa:	2a02      	cmp	r2, #2
 800cfac:	bf18      	it	ne
 800cfae:	2200      	movne	r2, #0
 800cfb0:	7002      	strb	r2, [r0, #0]
 800cfb2:	780a      	ldrb	r2, [r1, #0]
 800cfb4:	8889      	ldrh	r1, [r1, #4]
 800cfb6:	8081      	strh	r1, [r0, #4]
 800cfb8:	f1ac 0c02 	sub.w	ip, ip, #2
 800cfbc:	f1a2 0202 	sub.w	r2, r2, #2
 800cfc0:	fabc fc8c 	clz	ip, ip
 800cfc4:	fab2 f282 	clz	r2, r2
 800cfc8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800cfcc:	0952      	lsrs	r2, r2, #5
 800cfce:	f880 c001 	strb.w	ip, [r0, #1]
 800cfd2:	7082      	strb	r2, [r0, #2]
 800cfd4:	4770      	bx	lr
 800cfd6:	bf00      	nop

0800cfd8 <generate_type_name>:
 800cfd8:	b530      	push	{r4, r5, lr}
 800cfda:	2300      	movs	r3, #0
 800cfdc:	700b      	strb	r3, [r1, #0]
 800cfde:	6803      	ldr	r3, [r0, #0]
 800cfe0:	b087      	sub	sp, #28
 800cfe2:	4614      	mov	r4, r2
 800cfe4:	b1d3      	cbz	r3, 800d01c <generate_type_name+0x44>
 800cfe6:	4a0f      	ldr	r2, [pc, #60]	@ (800d024 <generate_type_name+0x4c>)
 800cfe8:	4615      	mov	r5, r2
 800cfea:	9203      	str	r2, [sp, #12]
 800cfec:	9500      	str	r5, [sp, #0]
 800cfee:	6842      	ldr	r2, [r0, #4]
 800cff0:	480d      	ldr	r0, [pc, #52]	@ (800d028 <generate_type_name+0x50>)
 800cff2:	9001      	str	r0, [sp, #4]
 800cff4:	4608      	mov	r0, r1
 800cff6:	490d      	ldr	r1, [pc, #52]	@ (800d02c <generate_type_name+0x54>)
 800cff8:	9204      	str	r2, [sp, #16]
 800cffa:	9105      	str	r1, [sp, #20]
 800cffc:	9102      	str	r1, [sp, #8]
 800cffe:	4a0c      	ldr	r2, [pc, #48]	@ (800d030 <generate_type_name+0x58>)
 800d000:	4621      	mov	r1, r4
 800d002:	f00a fd0f 	bl	8017a24 <sniprintf>
 800d006:	2800      	cmp	r0, #0
 800d008:	db05      	blt.n	800d016 <generate_type_name+0x3e>
 800d00a:	4284      	cmp	r4, r0
 800d00c:	bfd4      	ite	le
 800d00e:	2000      	movle	r0, #0
 800d010:	2001      	movgt	r0, #1
 800d012:	b007      	add	sp, #28
 800d014:	bd30      	pop	{r4, r5, pc}
 800d016:	2000      	movs	r0, #0
 800d018:	b007      	add	sp, #28
 800d01a:	bd30      	pop	{r4, r5, pc}
 800d01c:	4b05      	ldr	r3, [pc, #20]	@ (800d034 <generate_type_name+0x5c>)
 800d01e:	4a01      	ldr	r2, [pc, #4]	@ (800d024 <generate_type_name+0x4c>)
 800d020:	461d      	mov	r5, r3
 800d022:	e7e2      	b.n	800cfea <generate_type_name+0x12>
 800d024:	08018e48 	.word	0x08018e48
 800d028:	08018e60 	.word	0x08018e60
 800d02c:	08018e5c 	.word	0x08018e5c
 800d030:	08018e4c 	.word	0x08018e4c
 800d034:	08019548 	.word	0x08019548

0800d038 <generate_topic_name>:
 800d038:	b510      	push	{r4, lr}
 800d03a:	b082      	sub	sp, #8
 800d03c:	4614      	mov	r4, r2
 800d03e:	9000      	str	r0, [sp, #0]
 800d040:	4b08      	ldr	r3, [pc, #32]	@ (800d064 <generate_topic_name+0x2c>)
 800d042:	4a09      	ldr	r2, [pc, #36]	@ (800d068 <generate_topic_name+0x30>)
 800d044:	4608      	mov	r0, r1
 800d046:	4621      	mov	r1, r4
 800d048:	f00a fcec 	bl	8017a24 <sniprintf>
 800d04c:	2800      	cmp	r0, #0
 800d04e:	db05      	blt.n	800d05c <generate_topic_name+0x24>
 800d050:	4284      	cmp	r4, r0
 800d052:	bfd4      	ite	le
 800d054:	2000      	movle	r0, #0
 800d056:	2001      	movgt	r0, #1
 800d058:	b002      	add	sp, #8
 800d05a:	bd10      	pop	{r4, pc}
 800d05c:	2000      	movs	r0, #0
 800d05e:	b002      	add	sp, #8
 800d060:	bd10      	pop	{r4, pc}
 800d062:	bf00      	nop
 800d064:	08018e6c 	.word	0x08018e6c
 800d068:	08018e64 	.word	0x08018e64

0800d06c <is_uxrce_rmw_identifier_valid>:
 800d06c:	b510      	push	{r4, lr}
 800d06e:	4604      	mov	r4, r0
 800d070:	b140      	cbz	r0, 800d084 <is_uxrce_rmw_identifier_valid+0x18>
 800d072:	f008 faf5 	bl	8015660 <rmw_get_implementation_identifier>
 800d076:	4601      	mov	r1, r0
 800d078:	4620      	mov	r0, r4
 800d07a:	f7f3 f8d1 	bl	8000220 <strcmp>
 800d07e:	fab0 f080 	clz	r0, r0
 800d082:	0940      	lsrs	r0, r0, #5
 800d084:	bd10      	pop	{r4, pc}
 800d086:	bf00      	nop

0800d088 <get_message_typesupport_handle>:
 800d088:	6883      	ldr	r3, [r0, #8]
 800d08a:	4718      	bx	r3

0800d08c <get_message_typesupport_handle_function>:
 800d08c:	b510      	push	{r4, lr}
 800d08e:	4604      	mov	r4, r0
 800d090:	6800      	ldr	r0, [r0, #0]
 800d092:	f7f3 f8c5 	bl	8000220 <strcmp>
 800d096:	2800      	cmp	r0, #0
 800d098:	bf0c      	ite	eq
 800d09a:	4620      	moveq	r0, r4
 800d09c:	2000      	movne	r0, #0
 800d09e:	bd10      	pop	{r4, pc}

0800d0a0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800d0a0:	4b04      	ldr	r3, [pc, #16]	@ (800d0b4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800d0a2:	681a      	ldr	r2, [r3, #0]
 800d0a4:	b10a      	cbz	r2, 800d0aa <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800d0a6:	4803      	ldr	r0, [pc, #12]	@ (800d0b4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800d0a8:	4770      	bx	lr
 800d0aa:	4a03      	ldr	r2, [pc, #12]	@ (800d0b8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800d0ac:	4801      	ldr	r0, [pc, #4]	@ (800d0b4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800d0ae:	6812      	ldr	r2, [r2, #0]
 800d0b0:	601a      	str	r2, [r3, #0]
 800d0b2:	4770      	bx	lr
 800d0b4:	20000030 	.word	0x20000030
 800d0b8:	200000ac 	.word	0x200000ac

0800d0bc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800d0bc:	4a02      	ldr	r2, [pc, #8]	@ (800d0c8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800d0be:	4b03      	ldr	r3, [pc, #12]	@ (800d0cc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800d0c0:	6812      	ldr	r2, [r2, #0]
 800d0c2:	601a      	str	r2, [r3, #0]
 800d0c4:	4770      	bx	lr
 800d0c6:	bf00      	nop
 800d0c8:	200000ac 	.word	0x200000ac
 800d0cc:	20000030 	.word	0x20000030

0800d0d0 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800d0d0:	f008 beb6 	b.w	8015e40 <std_msgs__msg__Int32__init>

0800d0d4 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800d0d4:	f008 beb8 	b.w	8015e48 <std_msgs__msg__Int32__fini>

0800d0d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800d0d8:	4b04      	ldr	r3, [pc, #16]	@ (800d0ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800d0da:	681a      	ldr	r2, [r3, #0]
 800d0dc:	b10a      	cbz	r2, 800d0e2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800d0de:	4803      	ldr	r0, [pc, #12]	@ (800d0ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800d0e0:	4770      	bx	lr
 800d0e2:	4a03      	ldr	r2, [pc, #12]	@ (800d0f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800d0e4:	4801      	ldr	r0, [pc, #4]	@ (800d0ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800d0e6:	6812      	ldr	r2, [r2, #0]
 800d0e8:	601a      	str	r2, [r3, #0]
 800d0ea:	4770      	bx	lr
 800d0ec:	20000078 	.word	0x20000078
 800d0f0:	200000b0 	.word	0x200000b0

0800d0f4 <_Int32__max_serialized_size>:
 800d0f4:	b508      	push	{r3, lr}
 800d0f6:	2104      	movs	r1, #4
 800d0f8:	2000      	movs	r0, #0
 800d0fa:	f001 f807 	bl	800e10c <ucdr_alignment>
 800d0fe:	3004      	adds	r0, #4
 800d100:	bd08      	pop	{r3, pc}
 800d102:	bf00      	nop

0800d104 <_Int32__cdr_deserialize>:
 800d104:	b109      	cbz	r1, 800d10a <_Int32__cdr_deserialize+0x6>
 800d106:	f000 bf19 	b.w	800df3c <ucdr_deserialize_int32_t>
 800d10a:	4608      	mov	r0, r1
 800d10c:	4770      	bx	lr
 800d10e:	bf00      	nop

0800d110 <get_serialized_size_std_msgs__msg__Int32>:
 800d110:	b138      	cbz	r0, 800d122 <get_serialized_size_std_msgs__msg__Int32+0x12>
 800d112:	b508      	push	{r3, lr}
 800d114:	460b      	mov	r3, r1
 800d116:	4618      	mov	r0, r3
 800d118:	2104      	movs	r1, #4
 800d11a:	f000 fff7 	bl	800e10c <ucdr_alignment>
 800d11e:	3004      	adds	r0, #4
 800d120:	bd08      	pop	{r3, pc}
 800d122:	4770      	bx	lr

0800d124 <_Int32__cdr_serialize>:
 800d124:	460a      	mov	r2, r1
 800d126:	b118      	cbz	r0, 800d130 <_Int32__cdr_serialize+0xc>
 800d128:	6801      	ldr	r1, [r0, #0]
 800d12a:	4610      	mov	r0, r2
 800d12c:	f000 be6e 	b.w	800de0c <ucdr_serialize_int32_t>
 800d130:	4770      	bx	lr
 800d132:	bf00      	nop

0800d134 <_Int32__get_serialized_size>:
 800d134:	b130      	cbz	r0, 800d144 <_Int32__get_serialized_size+0x10>
 800d136:	b508      	push	{r3, lr}
 800d138:	2104      	movs	r1, #4
 800d13a:	2000      	movs	r0, #0
 800d13c:	f000 ffe6 	bl	800e10c <ucdr_alignment>
 800d140:	3004      	adds	r0, #4
 800d142:	bd08      	pop	{r3, pc}
 800d144:	4770      	bx	lr
 800d146:	bf00      	nop

0800d148 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800d148:	4800      	ldr	r0, [pc, #0]	@ (800d14c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800d14a:	4770      	bx	lr
 800d14c:	20000084 	.word	0x20000084

0800d150 <ucdr_serialize_bool>:
 800d150:	b538      	push	{r3, r4, r5, lr}
 800d152:	460d      	mov	r5, r1
 800d154:	2101      	movs	r1, #1
 800d156:	4604      	mov	r4, r0
 800d158:	f000 ff8c 	bl	800e074 <ucdr_check_final_buffer_behavior>
 800d15c:	b148      	cbz	r0, 800d172 <ucdr_serialize_bool+0x22>
 800d15e:	68a3      	ldr	r3, [r4, #8]
 800d160:	701d      	strb	r5, [r3, #0]
 800d162:	68a2      	ldr	r2, [r4, #8]
 800d164:	6923      	ldr	r3, [r4, #16]
 800d166:	2101      	movs	r1, #1
 800d168:	440a      	add	r2, r1
 800d16a:	440b      	add	r3, r1
 800d16c:	60a2      	str	r2, [r4, #8]
 800d16e:	6123      	str	r3, [r4, #16]
 800d170:	7561      	strb	r1, [r4, #21]
 800d172:	7da0      	ldrb	r0, [r4, #22]
 800d174:	f080 0001 	eor.w	r0, r0, #1
 800d178:	bd38      	pop	{r3, r4, r5, pc}
 800d17a:	bf00      	nop

0800d17c <ucdr_deserialize_bool>:
 800d17c:	b538      	push	{r3, r4, r5, lr}
 800d17e:	460d      	mov	r5, r1
 800d180:	2101      	movs	r1, #1
 800d182:	4604      	mov	r4, r0
 800d184:	f000 ff76 	bl	800e074 <ucdr_check_final_buffer_behavior>
 800d188:	b160      	cbz	r0, 800d1a4 <ucdr_deserialize_bool+0x28>
 800d18a:	68a2      	ldr	r2, [r4, #8]
 800d18c:	6923      	ldr	r3, [r4, #16]
 800d18e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800d192:	3900      	subs	r1, #0
 800d194:	bf18      	it	ne
 800d196:	2101      	movne	r1, #1
 800d198:	7029      	strb	r1, [r5, #0]
 800d19a:	3301      	adds	r3, #1
 800d19c:	2101      	movs	r1, #1
 800d19e:	60a2      	str	r2, [r4, #8]
 800d1a0:	6123      	str	r3, [r4, #16]
 800d1a2:	7561      	strb	r1, [r4, #21]
 800d1a4:	7da0      	ldrb	r0, [r4, #22]
 800d1a6:	f080 0001 	eor.w	r0, r0, #1
 800d1aa:	bd38      	pop	{r3, r4, r5, pc}

0800d1ac <ucdr_serialize_uint8_t>:
 800d1ac:	b538      	push	{r3, r4, r5, lr}
 800d1ae:	460d      	mov	r5, r1
 800d1b0:	2101      	movs	r1, #1
 800d1b2:	4604      	mov	r4, r0
 800d1b4:	f000 ff5e 	bl	800e074 <ucdr_check_final_buffer_behavior>
 800d1b8:	b148      	cbz	r0, 800d1ce <ucdr_serialize_uint8_t+0x22>
 800d1ba:	68a3      	ldr	r3, [r4, #8]
 800d1bc:	701d      	strb	r5, [r3, #0]
 800d1be:	68a2      	ldr	r2, [r4, #8]
 800d1c0:	6923      	ldr	r3, [r4, #16]
 800d1c2:	2101      	movs	r1, #1
 800d1c4:	440a      	add	r2, r1
 800d1c6:	440b      	add	r3, r1
 800d1c8:	60a2      	str	r2, [r4, #8]
 800d1ca:	6123      	str	r3, [r4, #16]
 800d1cc:	7561      	strb	r1, [r4, #21]
 800d1ce:	7da0      	ldrb	r0, [r4, #22]
 800d1d0:	f080 0001 	eor.w	r0, r0, #1
 800d1d4:	bd38      	pop	{r3, r4, r5, pc}
 800d1d6:	bf00      	nop

0800d1d8 <ucdr_deserialize_uint8_t>:
 800d1d8:	b538      	push	{r3, r4, r5, lr}
 800d1da:	460d      	mov	r5, r1
 800d1dc:	2101      	movs	r1, #1
 800d1de:	4604      	mov	r4, r0
 800d1e0:	f000 ff48 	bl	800e074 <ucdr_check_final_buffer_behavior>
 800d1e4:	b150      	cbz	r0, 800d1fc <ucdr_deserialize_uint8_t+0x24>
 800d1e6:	68a3      	ldr	r3, [r4, #8]
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	702b      	strb	r3, [r5, #0]
 800d1ec:	68a2      	ldr	r2, [r4, #8]
 800d1ee:	6923      	ldr	r3, [r4, #16]
 800d1f0:	2101      	movs	r1, #1
 800d1f2:	440a      	add	r2, r1
 800d1f4:	440b      	add	r3, r1
 800d1f6:	60a2      	str	r2, [r4, #8]
 800d1f8:	6123      	str	r3, [r4, #16]
 800d1fa:	7561      	strb	r1, [r4, #21]
 800d1fc:	7da0      	ldrb	r0, [r4, #22]
 800d1fe:	f080 0001 	eor.w	r0, r0, #1
 800d202:	bd38      	pop	{r3, r4, r5, pc}

0800d204 <ucdr_serialize_uint16_t>:
 800d204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d208:	b082      	sub	sp, #8
 800d20a:	460b      	mov	r3, r1
 800d20c:	2102      	movs	r1, #2
 800d20e:	4604      	mov	r4, r0
 800d210:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d214:	f000 ff82 	bl	800e11c <ucdr_buffer_alignment>
 800d218:	4601      	mov	r1, r0
 800d21a:	4620      	mov	r0, r4
 800d21c:	7d67      	ldrb	r7, [r4, #21]
 800d21e:	f000 ffc1 	bl	800e1a4 <ucdr_advance_buffer>
 800d222:	2102      	movs	r1, #2
 800d224:	4620      	mov	r0, r4
 800d226:	f000 ff19 	bl	800e05c <ucdr_check_buffer_available_for>
 800d22a:	bb78      	cbnz	r0, 800d28c <ucdr_serialize_uint16_t+0x88>
 800d22c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d230:	42ab      	cmp	r3, r5
 800d232:	d926      	bls.n	800d282 <ucdr_serialize_uint16_t+0x7e>
 800d234:	1b5e      	subs	r6, r3, r5
 800d236:	60a3      	str	r3, [r4, #8]
 800d238:	6923      	ldr	r3, [r4, #16]
 800d23a:	f1c6 0802 	rsb	r8, r6, #2
 800d23e:	4433      	add	r3, r6
 800d240:	6123      	str	r3, [r4, #16]
 800d242:	4641      	mov	r1, r8
 800d244:	4620      	mov	r0, r4
 800d246:	f000 ff15 	bl	800e074 <ucdr_check_final_buffer_behavior>
 800d24a:	2800      	cmp	r0, #0
 800d24c:	d03b      	beq.n	800d2c6 <ucdr_serialize_uint16_t+0xc2>
 800d24e:	7d23      	ldrb	r3, [r4, #20]
 800d250:	2b01      	cmp	r3, #1
 800d252:	d04a      	beq.n	800d2ea <ucdr_serialize_uint16_t+0xe6>
 800d254:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d258:	702b      	strb	r3, [r5, #0]
 800d25a:	2e00      	cmp	r6, #0
 800d25c:	d040      	beq.n	800d2e0 <ucdr_serialize_uint16_t+0xdc>
 800d25e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d262:	706b      	strb	r3, [r5, #1]
 800d264:	6923      	ldr	r3, [r4, #16]
 800d266:	68a2      	ldr	r2, [r4, #8]
 800d268:	7da0      	ldrb	r0, [r4, #22]
 800d26a:	3302      	adds	r3, #2
 800d26c:	1b9e      	subs	r6, r3, r6
 800d26e:	4442      	add	r2, r8
 800d270:	2302      	movs	r3, #2
 800d272:	f080 0001 	eor.w	r0, r0, #1
 800d276:	60a2      	str	r2, [r4, #8]
 800d278:	6126      	str	r6, [r4, #16]
 800d27a:	7563      	strb	r3, [r4, #21]
 800d27c:	b002      	add	sp, #8
 800d27e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d282:	2102      	movs	r1, #2
 800d284:	4620      	mov	r0, r4
 800d286:	f000 fef5 	bl	800e074 <ucdr_check_final_buffer_behavior>
 800d28a:	b190      	cbz	r0, 800d2b2 <ucdr_serialize_uint16_t+0xae>
 800d28c:	7d23      	ldrb	r3, [r4, #20]
 800d28e:	2b01      	cmp	r3, #1
 800d290:	68a3      	ldr	r3, [r4, #8]
 800d292:	d014      	beq.n	800d2be <ucdr_serialize_uint16_t+0xba>
 800d294:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d298:	701a      	strb	r2, [r3, #0]
 800d29a:	68a3      	ldr	r3, [r4, #8]
 800d29c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d2a0:	705a      	strb	r2, [r3, #1]
 800d2a2:	68a2      	ldr	r2, [r4, #8]
 800d2a4:	6923      	ldr	r3, [r4, #16]
 800d2a6:	3202      	adds	r2, #2
 800d2a8:	3302      	adds	r3, #2
 800d2aa:	2102      	movs	r1, #2
 800d2ac:	60a2      	str	r2, [r4, #8]
 800d2ae:	6123      	str	r3, [r4, #16]
 800d2b0:	7561      	strb	r1, [r4, #21]
 800d2b2:	7da0      	ldrb	r0, [r4, #22]
 800d2b4:	f080 0001 	eor.w	r0, r0, #1
 800d2b8:	b002      	add	sp, #8
 800d2ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2be:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d2c2:	801a      	strh	r2, [r3, #0]
 800d2c4:	e7ed      	b.n	800d2a2 <ucdr_serialize_uint16_t+0x9e>
 800d2c6:	68a2      	ldr	r2, [r4, #8]
 800d2c8:	6923      	ldr	r3, [r4, #16]
 800d2ca:	7da0      	ldrb	r0, [r4, #22]
 800d2cc:	7567      	strb	r7, [r4, #21]
 800d2ce:	1b92      	subs	r2, r2, r6
 800d2d0:	1b9b      	subs	r3, r3, r6
 800d2d2:	f080 0001 	eor.w	r0, r0, #1
 800d2d6:	60a2      	str	r2, [r4, #8]
 800d2d8:	6123      	str	r3, [r4, #16]
 800d2da:	b002      	add	sp, #8
 800d2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2e0:	68a3      	ldr	r3, [r4, #8]
 800d2e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d2e6:	701a      	strb	r2, [r3, #0]
 800d2e8:	e7bc      	b.n	800d264 <ucdr_serialize_uint16_t+0x60>
 800d2ea:	4628      	mov	r0, r5
 800d2ec:	f10d 0506 	add.w	r5, sp, #6
 800d2f0:	4629      	mov	r1, r5
 800d2f2:	4632      	mov	r2, r6
 800d2f4:	f00a fd39 	bl	8017d6a <memcpy>
 800d2f8:	68a0      	ldr	r0, [r4, #8]
 800d2fa:	4642      	mov	r2, r8
 800d2fc:	19a9      	adds	r1, r5, r6
 800d2fe:	f00a fd34 	bl	8017d6a <memcpy>
 800d302:	e7af      	b.n	800d264 <ucdr_serialize_uint16_t+0x60>

0800d304 <ucdr_serialize_endian_uint16_t>:
 800d304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d308:	b083      	sub	sp, #12
 800d30a:	460d      	mov	r5, r1
 800d30c:	2102      	movs	r1, #2
 800d30e:	4604      	mov	r4, r0
 800d310:	f8ad 2006 	strh.w	r2, [sp, #6]
 800d314:	f000 ff02 	bl	800e11c <ucdr_buffer_alignment>
 800d318:	4601      	mov	r1, r0
 800d31a:	4620      	mov	r0, r4
 800d31c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d320:	f000 ff40 	bl	800e1a4 <ucdr_advance_buffer>
 800d324:	2102      	movs	r1, #2
 800d326:	4620      	mov	r0, r4
 800d328:	f000 fe98 	bl	800e05c <ucdr_check_buffer_available_for>
 800d32c:	bb70      	cbnz	r0, 800d38c <ucdr_serialize_endian_uint16_t+0x88>
 800d32e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d332:	42be      	cmp	r6, r7
 800d334:	d925      	bls.n	800d382 <ucdr_serialize_endian_uint16_t+0x7e>
 800d336:	6923      	ldr	r3, [r4, #16]
 800d338:	60a6      	str	r6, [r4, #8]
 800d33a:	1bf6      	subs	r6, r6, r7
 800d33c:	4433      	add	r3, r6
 800d33e:	f1c6 0902 	rsb	r9, r6, #2
 800d342:	6123      	str	r3, [r4, #16]
 800d344:	4649      	mov	r1, r9
 800d346:	4620      	mov	r0, r4
 800d348:	f000 fe94 	bl	800e074 <ucdr_check_final_buffer_behavior>
 800d34c:	2800      	cmp	r0, #0
 800d34e:	d039      	beq.n	800d3c4 <ucdr_serialize_endian_uint16_t+0xc0>
 800d350:	2d01      	cmp	r5, #1
 800d352:	d04a      	beq.n	800d3ea <ucdr_serialize_endian_uint16_t+0xe6>
 800d354:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d358:	703b      	strb	r3, [r7, #0]
 800d35a:	2e00      	cmp	r6, #0
 800d35c:	d040      	beq.n	800d3e0 <ucdr_serialize_endian_uint16_t+0xdc>
 800d35e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d362:	707b      	strb	r3, [r7, #1]
 800d364:	6923      	ldr	r3, [r4, #16]
 800d366:	68a2      	ldr	r2, [r4, #8]
 800d368:	7da0      	ldrb	r0, [r4, #22]
 800d36a:	3302      	adds	r3, #2
 800d36c:	444a      	add	r2, r9
 800d36e:	1b9b      	subs	r3, r3, r6
 800d370:	2102      	movs	r1, #2
 800d372:	f080 0001 	eor.w	r0, r0, #1
 800d376:	60a2      	str	r2, [r4, #8]
 800d378:	6123      	str	r3, [r4, #16]
 800d37a:	7561      	strb	r1, [r4, #21]
 800d37c:	b003      	add	sp, #12
 800d37e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d382:	2102      	movs	r1, #2
 800d384:	4620      	mov	r0, r4
 800d386:	f000 fe75 	bl	800e074 <ucdr_check_final_buffer_behavior>
 800d38a:	b188      	cbz	r0, 800d3b0 <ucdr_serialize_endian_uint16_t+0xac>
 800d38c:	2d01      	cmp	r5, #1
 800d38e:	68a3      	ldr	r3, [r4, #8]
 800d390:	d014      	beq.n	800d3bc <ucdr_serialize_endian_uint16_t+0xb8>
 800d392:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d396:	701a      	strb	r2, [r3, #0]
 800d398:	68a3      	ldr	r3, [r4, #8]
 800d39a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d39e:	705a      	strb	r2, [r3, #1]
 800d3a0:	68a2      	ldr	r2, [r4, #8]
 800d3a2:	6923      	ldr	r3, [r4, #16]
 800d3a4:	3202      	adds	r2, #2
 800d3a6:	3302      	adds	r3, #2
 800d3a8:	2102      	movs	r1, #2
 800d3aa:	60a2      	str	r2, [r4, #8]
 800d3ac:	6123      	str	r3, [r4, #16]
 800d3ae:	7561      	strb	r1, [r4, #21]
 800d3b0:	7da0      	ldrb	r0, [r4, #22]
 800d3b2:	f080 0001 	eor.w	r0, r0, #1
 800d3b6:	b003      	add	sp, #12
 800d3b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3bc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d3c0:	801a      	strh	r2, [r3, #0]
 800d3c2:	e7ed      	b.n	800d3a0 <ucdr_serialize_endian_uint16_t+0x9c>
 800d3c4:	68a2      	ldr	r2, [r4, #8]
 800d3c6:	6923      	ldr	r3, [r4, #16]
 800d3c8:	7da0      	ldrb	r0, [r4, #22]
 800d3ca:	f884 8015 	strb.w	r8, [r4, #21]
 800d3ce:	1b92      	subs	r2, r2, r6
 800d3d0:	1b9b      	subs	r3, r3, r6
 800d3d2:	f080 0001 	eor.w	r0, r0, #1
 800d3d6:	60a2      	str	r2, [r4, #8]
 800d3d8:	6123      	str	r3, [r4, #16]
 800d3da:	b003      	add	sp, #12
 800d3dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3e0:	68a3      	ldr	r3, [r4, #8]
 800d3e2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d3e6:	701a      	strb	r2, [r3, #0]
 800d3e8:	e7bc      	b.n	800d364 <ucdr_serialize_endian_uint16_t+0x60>
 800d3ea:	f10d 0506 	add.w	r5, sp, #6
 800d3ee:	4629      	mov	r1, r5
 800d3f0:	4632      	mov	r2, r6
 800d3f2:	4638      	mov	r0, r7
 800d3f4:	f00a fcb9 	bl	8017d6a <memcpy>
 800d3f8:	68a0      	ldr	r0, [r4, #8]
 800d3fa:	464a      	mov	r2, r9
 800d3fc:	19a9      	adds	r1, r5, r6
 800d3fe:	f00a fcb4 	bl	8017d6a <memcpy>
 800d402:	e7af      	b.n	800d364 <ucdr_serialize_endian_uint16_t+0x60>

0800d404 <ucdr_deserialize_uint16_t>:
 800d404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d408:	460d      	mov	r5, r1
 800d40a:	2102      	movs	r1, #2
 800d40c:	4604      	mov	r4, r0
 800d40e:	f000 fe85 	bl	800e11c <ucdr_buffer_alignment>
 800d412:	4601      	mov	r1, r0
 800d414:	4620      	mov	r0, r4
 800d416:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d41a:	f000 fec3 	bl	800e1a4 <ucdr_advance_buffer>
 800d41e:	2102      	movs	r1, #2
 800d420:	4620      	mov	r0, r4
 800d422:	f000 fe1b 	bl	800e05c <ucdr_check_buffer_available_for>
 800d426:	bb60      	cbnz	r0, 800d482 <ucdr_deserialize_uint16_t+0x7e>
 800d428:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d42c:	42be      	cmp	r6, r7
 800d42e:	d923      	bls.n	800d478 <ucdr_deserialize_uint16_t+0x74>
 800d430:	6923      	ldr	r3, [r4, #16]
 800d432:	60a6      	str	r6, [r4, #8]
 800d434:	1bf6      	subs	r6, r6, r7
 800d436:	4433      	add	r3, r6
 800d438:	f1c6 0902 	rsb	r9, r6, #2
 800d43c:	6123      	str	r3, [r4, #16]
 800d43e:	4649      	mov	r1, r9
 800d440:	4620      	mov	r0, r4
 800d442:	f000 fe17 	bl	800e074 <ucdr_check_final_buffer_behavior>
 800d446:	2800      	cmp	r0, #0
 800d448:	d034      	beq.n	800d4b4 <ucdr_deserialize_uint16_t+0xb0>
 800d44a:	7d23      	ldrb	r3, [r4, #20]
 800d44c:	2b01      	cmp	r3, #1
 800d44e:	d042      	beq.n	800d4d6 <ucdr_deserialize_uint16_t+0xd2>
 800d450:	787b      	ldrb	r3, [r7, #1]
 800d452:	702b      	strb	r3, [r5, #0]
 800d454:	2e00      	cmp	r6, #0
 800d456:	d03a      	beq.n	800d4ce <ucdr_deserialize_uint16_t+0xca>
 800d458:	783b      	ldrb	r3, [r7, #0]
 800d45a:	706b      	strb	r3, [r5, #1]
 800d45c:	6923      	ldr	r3, [r4, #16]
 800d45e:	68a2      	ldr	r2, [r4, #8]
 800d460:	7da0      	ldrb	r0, [r4, #22]
 800d462:	2102      	movs	r1, #2
 800d464:	3302      	adds	r3, #2
 800d466:	444a      	add	r2, r9
 800d468:	1b9b      	subs	r3, r3, r6
 800d46a:	7561      	strb	r1, [r4, #21]
 800d46c:	60a2      	str	r2, [r4, #8]
 800d46e:	6123      	str	r3, [r4, #16]
 800d470:	f080 0001 	eor.w	r0, r0, #1
 800d474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d478:	2102      	movs	r1, #2
 800d47a:	4620      	mov	r0, r4
 800d47c:	f000 fdfa 	bl	800e074 <ucdr_check_final_buffer_behavior>
 800d480:	b180      	cbz	r0, 800d4a4 <ucdr_deserialize_uint16_t+0xa0>
 800d482:	7d23      	ldrb	r3, [r4, #20]
 800d484:	2b01      	cmp	r3, #1
 800d486:	68a3      	ldr	r3, [r4, #8]
 800d488:	d011      	beq.n	800d4ae <ucdr_deserialize_uint16_t+0xaa>
 800d48a:	785b      	ldrb	r3, [r3, #1]
 800d48c:	702b      	strb	r3, [r5, #0]
 800d48e:	68a3      	ldr	r3, [r4, #8]
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	706b      	strb	r3, [r5, #1]
 800d494:	68a2      	ldr	r2, [r4, #8]
 800d496:	6923      	ldr	r3, [r4, #16]
 800d498:	3202      	adds	r2, #2
 800d49a:	3302      	adds	r3, #2
 800d49c:	2102      	movs	r1, #2
 800d49e:	60a2      	str	r2, [r4, #8]
 800d4a0:	6123      	str	r3, [r4, #16]
 800d4a2:	7561      	strb	r1, [r4, #21]
 800d4a4:	7da0      	ldrb	r0, [r4, #22]
 800d4a6:	f080 0001 	eor.w	r0, r0, #1
 800d4aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4ae:	881b      	ldrh	r3, [r3, #0]
 800d4b0:	802b      	strh	r3, [r5, #0]
 800d4b2:	e7ef      	b.n	800d494 <ucdr_deserialize_uint16_t+0x90>
 800d4b4:	68a2      	ldr	r2, [r4, #8]
 800d4b6:	6923      	ldr	r3, [r4, #16]
 800d4b8:	7da0      	ldrb	r0, [r4, #22]
 800d4ba:	f884 8015 	strb.w	r8, [r4, #21]
 800d4be:	1b92      	subs	r2, r2, r6
 800d4c0:	1b9b      	subs	r3, r3, r6
 800d4c2:	60a2      	str	r2, [r4, #8]
 800d4c4:	6123      	str	r3, [r4, #16]
 800d4c6:	f080 0001 	eor.w	r0, r0, #1
 800d4ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4ce:	68a3      	ldr	r3, [r4, #8]
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	706b      	strb	r3, [r5, #1]
 800d4d4:	e7c2      	b.n	800d45c <ucdr_deserialize_uint16_t+0x58>
 800d4d6:	4639      	mov	r1, r7
 800d4d8:	4632      	mov	r2, r6
 800d4da:	4628      	mov	r0, r5
 800d4dc:	f00a fc45 	bl	8017d6a <memcpy>
 800d4e0:	68a1      	ldr	r1, [r4, #8]
 800d4e2:	464a      	mov	r2, r9
 800d4e4:	19a8      	adds	r0, r5, r6
 800d4e6:	f00a fc40 	bl	8017d6a <memcpy>
 800d4ea:	e7b7      	b.n	800d45c <ucdr_deserialize_uint16_t+0x58>

0800d4ec <ucdr_deserialize_endian_uint16_t>:
 800d4ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4f0:	460e      	mov	r6, r1
 800d4f2:	2102      	movs	r1, #2
 800d4f4:	4604      	mov	r4, r0
 800d4f6:	4615      	mov	r5, r2
 800d4f8:	f000 fe10 	bl	800e11c <ucdr_buffer_alignment>
 800d4fc:	4601      	mov	r1, r0
 800d4fe:	4620      	mov	r0, r4
 800d500:	f894 9015 	ldrb.w	r9, [r4, #21]
 800d504:	f000 fe4e 	bl	800e1a4 <ucdr_advance_buffer>
 800d508:	2102      	movs	r1, #2
 800d50a:	4620      	mov	r0, r4
 800d50c:	f000 fda6 	bl	800e05c <ucdr_check_buffer_available_for>
 800d510:	bb70      	cbnz	r0, 800d570 <ucdr_deserialize_endian_uint16_t+0x84>
 800d512:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800d516:	4547      	cmp	r7, r8
 800d518:	d925      	bls.n	800d566 <ucdr_deserialize_endian_uint16_t+0x7a>
 800d51a:	6923      	ldr	r3, [r4, #16]
 800d51c:	60a7      	str	r7, [r4, #8]
 800d51e:	eba7 0708 	sub.w	r7, r7, r8
 800d522:	443b      	add	r3, r7
 800d524:	f1c7 0a02 	rsb	sl, r7, #2
 800d528:	6123      	str	r3, [r4, #16]
 800d52a:	4651      	mov	r1, sl
 800d52c:	4620      	mov	r0, r4
 800d52e:	f000 fda1 	bl	800e074 <ucdr_check_final_buffer_behavior>
 800d532:	2800      	cmp	r0, #0
 800d534:	d034      	beq.n	800d5a0 <ucdr_deserialize_endian_uint16_t+0xb4>
 800d536:	2e01      	cmp	r6, #1
 800d538:	d043      	beq.n	800d5c2 <ucdr_deserialize_endian_uint16_t+0xd6>
 800d53a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d53e:	702b      	strb	r3, [r5, #0]
 800d540:	2f00      	cmp	r7, #0
 800d542:	d03a      	beq.n	800d5ba <ucdr_deserialize_endian_uint16_t+0xce>
 800d544:	f898 3000 	ldrb.w	r3, [r8]
 800d548:	706b      	strb	r3, [r5, #1]
 800d54a:	6923      	ldr	r3, [r4, #16]
 800d54c:	68a2      	ldr	r2, [r4, #8]
 800d54e:	7da0      	ldrb	r0, [r4, #22]
 800d550:	2102      	movs	r1, #2
 800d552:	3302      	adds	r3, #2
 800d554:	4452      	add	r2, sl
 800d556:	1bdb      	subs	r3, r3, r7
 800d558:	7561      	strb	r1, [r4, #21]
 800d55a:	60a2      	str	r2, [r4, #8]
 800d55c:	6123      	str	r3, [r4, #16]
 800d55e:	f080 0001 	eor.w	r0, r0, #1
 800d562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d566:	2102      	movs	r1, #2
 800d568:	4620      	mov	r0, r4
 800d56a:	f000 fd83 	bl	800e074 <ucdr_check_final_buffer_behavior>
 800d56e:	b178      	cbz	r0, 800d590 <ucdr_deserialize_endian_uint16_t+0xa4>
 800d570:	2e01      	cmp	r6, #1
 800d572:	68a3      	ldr	r3, [r4, #8]
 800d574:	d011      	beq.n	800d59a <ucdr_deserialize_endian_uint16_t+0xae>
 800d576:	785b      	ldrb	r3, [r3, #1]
 800d578:	702b      	strb	r3, [r5, #0]
 800d57a:	68a3      	ldr	r3, [r4, #8]
 800d57c:	781b      	ldrb	r3, [r3, #0]
 800d57e:	706b      	strb	r3, [r5, #1]
 800d580:	68a2      	ldr	r2, [r4, #8]
 800d582:	6923      	ldr	r3, [r4, #16]
 800d584:	3202      	adds	r2, #2
 800d586:	3302      	adds	r3, #2
 800d588:	2102      	movs	r1, #2
 800d58a:	60a2      	str	r2, [r4, #8]
 800d58c:	6123      	str	r3, [r4, #16]
 800d58e:	7561      	strb	r1, [r4, #21]
 800d590:	7da0      	ldrb	r0, [r4, #22]
 800d592:	f080 0001 	eor.w	r0, r0, #1
 800d596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d59a:	881b      	ldrh	r3, [r3, #0]
 800d59c:	802b      	strh	r3, [r5, #0]
 800d59e:	e7ef      	b.n	800d580 <ucdr_deserialize_endian_uint16_t+0x94>
 800d5a0:	68a2      	ldr	r2, [r4, #8]
 800d5a2:	6923      	ldr	r3, [r4, #16]
 800d5a4:	7da0      	ldrb	r0, [r4, #22]
 800d5a6:	f884 9015 	strb.w	r9, [r4, #21]
 800d5aa:	1bd2      	subs	r2, r2, r7
 800d5ac:	1bdb      	subs	r3, r3, r7
 800d5ae:	60a2      	str	r2, [r4, #8]
 800d5b0:	6123      	str	r3, [r4, #16]
 800d5b2:	f080 0001 	eor.w	r0, r0, #1
 800d5b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5ba:	68a3      	ldr	r3, [r4, #8]
 800d5bc:	781b      	ldrb	r3, [r3, #0]
 800d5be:	706b      	strb	r3, [r5, #1]
 800d5c0:	e7c3      	b.n	800d54a <ucdr_deserialize_endian_uint16_t+0x5e>
 800d5c2:	4641      	mov	r1, r8
 800d5c4:	463a      	mov	r2, r7
 800d5c6:	4628      	mov	r0, r5
 800d5c8:	f00a fbcf 	bl	8017d6a <memcpy>
 800d5cc:	68a1      	ldr	r1, [r4, #8]
 800d5ce:	4652      	mov	r2, sl
 800d5d0:	19e8      	adds	r0, r5, r7
 800d5d2:	f00a fbca 	bl	8017d6a <memcpy>
 800d5d6:	e7b8      	b.n	800d54a <ucdr_deserialize_endian_uint16_t+0x5e>

0800d5d8 <ucdr_serialize_uint32_t>:
 800d5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5dc:	b082      	sub	sp, #8
 800d5de:	4604      	mov	r4, r0
 800d5e0:	9101      	str	r1, [sp, #4]
 800d5e2:	2104      	movs	r1, #4
 800d5e4:	f000 fd9a 	bl	800e11c <ucdr_buffer_alignment>
 800d5e8:	4601      	mov	r1, r0
 800d5ea:	4620      	mov	r0, r4
 800d5ec:	7d67      	ldrb	r7, [r4, #21]
 800d5ee:	f000 fdd9 	bl	800e1a4 <ucdr_advance_buffer>
 800d5f2:	2104      	movs	r1, #4
 800d5f4:	4620      	mov	r0, r4
 800d5f6:	f000 fd31 	bl	800e05c <ucdr_check_buffer_available_for>
 800d5fa:	2800      	cmp	r0, #0
 800d5fc:	d139      	bne.n	800d672 <ucdr_serialize_uint32_t+0x9a>
 800d5fe:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d602:	42ab      	cmp	r3, r5
 800d604:	d930      	bls.n	800d668 <ucdr_serialize_uint32_t+0x90>
 800d606:	1b5e      	subs	r6, r3, r5
 800d608:	60a3      	str	r3, [r4, #8]
 800d60a:	6923      	ldr	r3, [r4, #16]
 800d60c:	f1c6 0804 	rsb	r8, r6, #4
 800d610:	4433      	add	r3, r6
 800d612:	6123      	str	r3, [r4, #16]
 800d614:	4641      	mov	r1, r8
 800d616:	4620      	mov	r0, r4
 800d618:	f000 fd2c 	bl	800e074 <ucdr_check_final_buffer_behavior>
 800d61c:	2800      	cmp	r0, #0
 800d61e:	d04c      	beq.n	800d6ba <ucdr_serialize_uint32_t+0xe2>
 800d620:	7d23      	ldrb	r3, [r4, #20]
 800d622:	2b01      	cmp	r3, #1
 800d624:	d063      	beq.n	800d6ee <ucdr_serialize_uint32_t+0x116>
 800d626:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d62a:	702b      	strb	r3, [r5, #0]
 800d62c:	2e00      	cmp	r6, #0
 800d62e:	d051      	beq.n	800d6d4 <ucdr_serialize_uint32_t+0xfc>
 800d630:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d634:	706b      	strb	r3, [r5, #1]
 800d636:	2e01      	cmp	r6, #1
 800d638:	d050      	beq.n	800d6dc <ucdr_serialize_uint32_t+0x104>
 800d63a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d63e:	70ab      	strb	r3, [r5, #2]
 800d640:	2e02      	cmp	r6, #2
 800d642:	d04f      	beq.n	800d6e4 <ucdr_serialize_uint32_t+0x10c>
 800d644:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d648:	70eb      	strb	r3, [r5, #3]
 800d64a:	6923      	ldr	r3, [r4, #16]
 800d64c:	68a2      	ldr	r2, [r4, #8]
 800d64e:	7da0      	ldrb	r0, [r4, #22]
 800d650:	3304      	adds	r3, #4
 800d652:	1b9e      	subs	r6, r3, r6
 800d654:	4442      	add	r2, r8
 800d656:	2304      	movs	r3, #4
 800d658:	f080 0001 	eor.w	r0, r0, #1
 800d65c:	60a2      	str	r2, [r4, #8]
 800d65e:	6126      	str	r6, [r4, #16]
 800d660:	7563      	strb	r3, [r4, #21]
 800d662:	b002      	add	sp, #8
 800d664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d668:	2104      	movs	r1, #4
 800d66a:	4620      	mov	r0, r4
 800d66c:	f000 fd02 	bl	800e074 <ucdr_check_final_buffer_behavior>
 800d670:	b1d0      	cbz	r0, 800d6a8 <ucdr_serialize_uint32_t+0xd0>
 800d672:	7d23      	ldrb	r3, [r4, #20]
 800d674:	2b01      	cmp	r3, #1
 800d676:	68a3      	ldr	r3, [r4, #8]
 800d678:	d01c      	beq.n	800d6b4 <ucdr_serialize_uint32_t+0xdc>
 800d67a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d67e:	701a      	strb	r2, [r3, #0]
 800d680:	68a3      	ldr	r3, [r4, #8]
 800d682:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d686:	705a      	strb	r2, [r3, #1]
 800d688:	68a3      	ldr	r3, [r4, #8]
 800d68a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d68e:	709a      	strb	r2, [r3, #2]
 800d690:	68a3      	ldr	r3, [r4, #8]
 800d692:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d696:	70da      	strb	r2, [r3, #3]
 800d698:	68a2      	ldr	r2, [r4, #8]
 800d69a:	6923      	ldr	r3, [r4, #16]
 800d69c:	3204      	adds	r2, #4
 800d69e:	3304      	adds	r3, #4
 800d6a0:	2104      	movs	r1, #4
 800d6a2:	60a2      	str	r2, [r4, #8]
 800d6a4:	6123      	str	r3, [r4, #16]
 800d6a6:	7561      	strb	r1, [r4, #21]
 800d6a8:	7da0      	ldrb	r0, [r4, #22]
 800d6aa:	f080 0001 	eor.w	r0, r0, #1
 800d6ae:	b002      	add	sp, #8
 800d6b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6b4:	9a01      	ldr	r2, [sp, #4]
 800d6b6:	601a      	str	r2, [r3, #0]
 800d6b8:	e7ee      	b.n	800d698 <ucdr_serialize_uint32_t+0xc0>
 800d6ba:	68a2      	ldr	r2, [r4, #8]
 800d6bc:	6923      	ldr	r3, [r4, #16]
 800d6be:	7da0      	ldrb	r0, [r4, #22]
 800d6c0:	7567      	strb	r7, [r4, #21]
 800d6c2:	1b92      	subs	r2, r2, r6
 800d6c4:	1b9b      	subs	r3, r3, r6
 800d6c6:	f080 0001 	eor.w	r0, r0, #1
 800d6ca:	60a2      	str	r2, [r4, #8]
 800d6cc:	6123      	str	r3, [r4, #16]
 800d6ce:	b002      	add	sp, #8
 800d6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6d4:	68a3      	ldr	r3, [r4, #8]
 800d6d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d6da:	701a      	strb	r2, [r3, #0]
 800d6dc:	68a3      	ldr	r3, [r4, #8]
 800d6de:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d6e2:	701a      	strb	r2, [r3, #0]
 800d6e4:	68a3      	ldr	r3, [r4, #8]
 800d6e6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d6ea:	701a      	strb	r2, [r3, #0]
 800d6ec:	e7ad      	b.n	800d64a <ucdr_serialize_uint32_t+0x72>
 800d6ee:	4628      	mov	r0, r5
 800d6f0:	ad01      	add	r5, sp, #4
 800d6f2:	4629      	mov	r1, r5
 800d6f4:	4632      	mov	r2, r6
 800d6f6:	f00a fb38 	bl	8017d6a <memcpy>
 800d6fa:	68a0      	ldr	r0, [r4, #8]
 800d6fc:	4642      	mov	r2, r8
 800d6fe:	19a9      	adds	r1, r5, r6
 800d700:	f00a fb33 	bl	8017d6a <memcpy>
 800d704:	e7a1      	b.n	800d64a <ucdr_serialize_uint32_t+0x72>
 800d706:	bf00      	nop

0800d708 <ucdr_serialize_endian_uint32_t>:
 800d708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d70c:	b083      	sub	sp, #12
 800d70e:	460d      	mov	r5, r1
 800d710:	2104      	movs	r1, #4
 800d712:	4604      	mov	r4, r0
 800d714:	9201      	str	r2, [sp, #4]
 800d716:	f000 fd01 	bl	800e11c <ucdr_buffer_alignment>
 800d71a:	4601      	mov	r1, r0
 800d71c:	4620      	mov	r0, r4
 800d71e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d722:	f000 fd3f 	bl	800e1a4 <ucdr_advance_buffer>
 800d726:	2104      	movs	r1, #4
 800d728:	4620      	mov	r0, r4
 800d72a:	f000 fc97 	bl	800e05c <ucdr_check_buffer_available_for>
 800d72e:	2800      	cmp	r0, #0
 800d730:	d138      	bne.n	800d7a4 <ucdr_serialize_endian_uint32_t+0x9c>
 800d732:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d736:	42b7      	cmp	r7, r6
 800d738:	d92f      	bls.n	800d79a <ucdr_serialize_endian_uint32_t+0x92>
 800d73a:	6923      	ldr	r3, [r4, #16]
 800d73c:	60a7      	str	r7, [r4, #8]
 800d73e:	1bbf      	subs	r7, r7, r6
 800d740:	443b      	add	r3, r7
 800d742:	f1c7 0904 	rsb	r9, r7, #4
 800d746:	6123      	str	r3, [r4, #16]
 800d748:	4649      	mov	r1, r9
 800d74a:	4620      	mov	r0, r4
 800d74c:	f000 fc92 	bl	800e074 <ucdr_check_final_buffer_behavior>
 800d750:	2800      	cmp	r0, #0
 800d752:	d04a      	beq.n	800d7ea <ucdr_serialize_endian_uint32_t+0xe2>
 800d754:	2d01      	cmp	r5, #1
 800d756:	d063      	beq.n	800d820 <ucdr_serialize_endian_uint32_t+0x118>
 800d758:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d75c:	7033      	strb	r3, [r6, #0]
 800d75e:	2f00      	cmp	r7, #0
 800d760:	d051      	beq.n	800d806 <ucdr_serialize_endian_uint32_t+0xfe>
 800d762:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d766:	7073      	strb	r3, [r6, #1]
 800d768:	2f01      	cmp	r7, #1
 800d76a:	d050      	beq.n	800d80e <ucdr_serialize_endian_uint32_t+0x106>
 800d76c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d770:	70b3      	strb	r3, [r6, #2]
 800d772:	2f02      	cmp	r7, #2
 800d774:	d04f      	beq.n	800d816 <ucdr_serialize_endian_uint32_t+0x10e>
 800d776:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d77a:	70f3      	strb	r3, [r6, #3]
 800d77c:	6923      	ldr	r3, [r4, #16]
 800d77e:	68a2      	ldr	r2, [r4, #8]
 800d780:	7da0      	ldrb	r0, [r4, #22]
 800d782:	3304      	adds	r3, #4
 800d784:	444a      	add	r2, r9
 800d786:	1bdb      	subs	r3, r3, r7
 800d788:	2104      	movs	r1, #4
 800d78a:	f080 0001 	eor.w	r0, r0, #1
 800d78e:	60a2      	str	r2, [r4, #8]
 800d790:	6123      	str	r3, [r4, #16]
 800d792:	7561      	strb	r1, [r4, #21]
 800d794:	b003      	add	sp, #12
 800d796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d79a:	2104      	movs	r1, #4
 800d79c:	4620      	mov	r0, r4
 800d79e:	f000 fc69 	bl	800e074 <ucdr_check_final_buffer_behavior>
 800d7a2:	b1c8      	cbz	r0, 800d7d8 <ucdr_serialize_endian_uint32_t+0xd0>
 800d7a4:	2d01      	cmp	r5, #1
 800d7a6:	68a3      	ldr	r3, [r4, #8]
 800d7a8:	d01c      	beq.n	800d7e4 <ucdr_serialize_endian_uint32_t+0xdc>
 800d7aa:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800d7ae:	701a      	strb	r2, [r3, #0]
 800d7b0:	68a3      	ldr	r3, [r4, #8]
 800d7b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d7b6:	705a      	strb	r2, [r3, #1]
 800d7b8:	68a3      	ldr	r3, [r4, #8]
 800d7ba:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d7be:	709a      	strb	r2, [r3, #2]
 800d7c0:	68a3      	ldr	r3, [r4, #8]
 800d7c2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d7c6:	70da      	strb	r2, [r3, #3]
 800d7c8:	68a2      	ldr	r2, [r4, #8]
 800d7ca:	6923      	ldr	r3, [r4, #16]
 800d7cc:	3204      	adds	r2, #4
 800d7ce:	3304      	adds	r3, #4
 800d7d0:	2104      	movs	r1, #4
 800d7d2:	60a2      	str	r2, [r4, #8]
 800d7d4:	6123      	str	r3, [r4, #16]
 800d7d6:	7561      	strb	r1, [r4, #21]
 800d7d8:	7da0      	ldrb	r0, [r4, #22]
 800d7da:	f080 0001 	eor.w	r0, r0, #1
 800d7de:	b003      	add	sp, #12
 800d7e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7e4:	9a01      	ldr	r2, [sp, #4]
 800d7e6:	601a      	str	r2, [r3, #0]
 800d7e8:	e7ee      	b.n	800d7c8 <ucdr_serialize_endian_uint32_t+0xc0>
 800d7ea:	68a2      	ldr	r2, [r4, #8]
 800d7ec:	6923      	ldr	r3, [r4, #16]
 800d7ee:	7da0      	ldrb	r0, [r4, #22]
 800d7f0:	f884 8015 	strb.w	r8, [r4, #21]
 800d7f4:	1bd2      	subs	r2, r2, r7
 800d7f6:	1bdb      	subs	r3, r3, r7
 800d7f8:	f080 0001 	eor.w	r0, r0, #1
 800d7fc:	60a2      	str	r2, [r4, #8]
 800d7fe:	6123      	str	r3, [r4, #16]
 800d800:	b003      	add	sp, #12
 800d802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d806:	68a3      	ldr	r3, [r4, #8]
 800d808:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d80c:	701a      	strb	r2, [r3, #0]
 800d80e:	68a3      	ldr	r3, [r4, #8]
 800d810:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800d814:	701a      	strb	r2, [r3, #0]
 800d816:	68a3      	ldr	r3, [r4, #8]
 800d818:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800d81c:	701a      	strb	r2, [r3, #0]
 800d81e:	e7ad      	b.n	800d77c <ucdr_serialize_endian_uint32_t+0x74>
 800d820:	ad01      	add	r5, sp, #4
 800d822:	4629      	mov	r1, r5
 800d824:	463a      	mov	r2, r7
 800d826:	4630      	mov	r0, r6
 800d828:	f00a fa9f 	bl	8017d6a <memcpy>
 800d82c:	68a0      	ldr	r0, [r4, #8]
 800d82e:	464a      	mov	r2, r9
 800d830:	19e9      	adds	r1, r5, r7
 800d832:	f00a fa9a 	bl	8017d6a <memcpy>
 800d836:	e7a1      	b.n	800d77c <ucdr_serialize_endian_uint32_t+0x74>

0800d838 <ucdr_deserialize_uint32_t>:
 800d838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d83c:	460d      	mov	r5, r1
 800d83e:	2104      	movs	r1, #4
 800d840:	4604      	mov	r4, r0
 800d842:	f000 fc6b 	bl	800e11c <ucdr_buffer_alignment>
 800d846:	4601      	mov	r1, r0
 800d848:	4620      	mov	r0, r4
 800d84a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d84e:	f000 fca9 	bl	800e1a4 <ucdr_advance_buffer>
 800d852:	2104      	movs	r1, #4
 800d854:	4620      	mov	r0, r4
 800d856:	f000 fc01 	bl	800e05c <ucdr_check_buffer_available_for>
 800d85a:	2800      	cmp	r0, #0
 800d85c:	d138      	bne.n	800d8d0 <ucdr_deserialize_uint32_t+0x98>
 800d85e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800d862:	42b7      	cmp	r7, r6
 800d864:	d92f      	bls.n	800d8c6 <ucdr_deserialize_uint32_t+0x8e>
 800d866:	6923      	ldr	r3, [r4, #16]
 800d868:	60a7      	str	r7, [r4, #8]
 800d86a:	1bbf      	subs	r7, r7, r6
 800d86c:	443b      	add	r3, r7
 800d86e:	f1c7 0904 	rsb	r9, r7, #4
 800d872:	6123      	str	r3, [r4, #16]
 800d874:	4649      	mov	r1, r9
 800d876:	4620      	mov	r0, r4
 800d878:	f000 fbfc 	bl	800e074 <ucdr_check_final_buffer_behavior>
 800d87c:	2800      	cmp	r0, #0
 800d87e:	d046      	beq.n	800d90e <ucdr_deserialize_uint32_t+0xd6>
 800d880:	7d23      	ldrb	r3, [r4, #20]
 800d882:	2b01      	cmp	r3, #1
 800d884:	d05c      	beq.n	800d940 <ucdr_deserialize_uint32_t+0x108>
 800d886:	78f3      	ldrb	r3, [r6, #3]
 800d888:	702b      	strb	r3, [r5, #0]
 800d88a:	2f00      	cmp	r7, #0
 800d88c:	d04c      	beq.n	800d928 <ucdr_deserialize_uint32_t+0xf0>
 800d88e:	78b3      	ldrb	r3, [r6, #2]
 800d890:	706b      	strb	r3, [r5, #1]
 800d892:	2f01      	cmp	r7, #1
 800d894:	f105 0302 	add.w	r3, r5, #2
 800d898:	d04a      	beq.n	800d930 <ucdr_deserialize_uint32_t+0xf8>
 800d89a:	7873      	ldrb	r3, [r6, #1]
 800d89c:	70ab      	strb	r3, [r5, #2]
 800d89e:	2f02      	cmp	r7, #2
 800d8a0:	f105 0303 	add.w	r3, r5, #3
 800d8a4:	d048      	beq.n	800d938 <ucdr_deserialize_uint32_t+0x100>
 800d8a6:	7833      	ldrb	r3, [r6, #0]
 800d8a8:	70eb      	strb	r3, [r5, #3]
 800d8aa:	6923      	ldr	r3, [r4, #16]
 800d8ac:	68a2      	ldr	r2, [r4, #8]
 800d8ae:	7da0      	ldrb	r0, [r4, #22]
 800d8b0:	2104      	movs	r1, #4
 800d8b2:	3304      	adds	r3, #4
 800d8b4:	444a      	add	r2, r9
 800d8b6:	1bdb      	subs	r3, r3, r7
 800d8b8:	7561      	strb	r1, [r4, #21]
 800d8ba:	60a2      	str	r2, [r4, #8]
 800d8bc:	6123      	str	r3, [r4, #16]
 800d8be:	f080 0001 	eor.w	r0, r0, #1
 800d8c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8c6:	2104      	movs	r1, #4
 800d8c8:	4620      	mov	r0, r4
 800d8ca:	f000 fbd3 	bl	800e074 <ucdr_check_final_buffer_behavior>
 800d8ce:	b1b0      	cbz	r0, 800d8fe <ucdr_deserialize_uint32_t+0xc6>
 800d8d0:	7d23      	ldrb	r3, [r4, #20]
 800d8d2:	2b01      	cmp	r3, #1
 800d8d4:	68a3      	ldr	r3, [r4, #8]
 800d8d6:	d017      	beq.n	800d908 <ucdr_deserialize_uint32_t+0xd0>
 800d8d8:	78db      	ldrb	r3, [r3, #3]
 800d8da:	702b      	strb	r3, [r5, #0]
 800d8dc:	68a3      	ldr	r3, [r4, #8]
 800d8de:	789b      	ldrb	r3, [r3, #2]
 800d8e0:	706b      	strb	r3, [r5, #1]
 800d8e2:	68a3      	ldr	r3, [r4, #8]
 800d8e4:	785b      	ldrb	r3, [r3, #1]
 800d8e6:	70ab      	strb	r3, [r5, #2]
 800d8e8:	68a3      	ldr	r3, [r4, #8]
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	70eb      	strb	r3, [r5, #3]
 800d8ee:	68a2      	ldr	r2, [r4, #8]
 800d8f0:	6923      	ldr	r3, [r4, #16]
 800d8f2:	3204      	adds	r2, #4
 800d8f4:	3304      	adds	r3, #4
 800d8f6:	2104      	movs	r1, #4
 800d8f8:	60a2      	str	r2, [r4, #8]
 800d8fa:	6123      	str	r3, [r4, #16]
 800d8fc:	7561      	strb	r1, [r4, #21]
 800d8fe:	7da0      	ldrb	r0, [r4, #22]
 800d900:	f080 0001 	eor.w	r0, r0, #1
 800d904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	602b      	str	r3, [r5, #0]
 800d90c:	e7ef      	b.n	800d8ee <ucdr_deserialize_uint32_t+0xb6>
 800d90e:	68a2      	ldr	r2, [r4, #8]
 800d910:	6923      	ldr	r3, [r4, #16]
 800d912:	7da0      	ldrb	r0, [r4, #22]
 800d914:	f884 8015 	strb.w	r8, [r4, #21]
 800d918:	1bd2      	subs	r2, r2, r7
 800d91a:	1bdb      	subs	r3, r3, r7
 800d91c:	60a2      	str	r2, [r4, #8]
 800d91e:	6123      	str	r3, [r4, #16]
 800d920:	f080 0001 	eor.w	r0, r0, #1
 800d924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d928:	68a3      	ldr	r3, [r4, #8]
 800d92a:	789b      	ldrb	r3, [r3, #2]
 800d92c:	706b      	strb	r3, [r5, #1]
 800d92e:	1cab      	adds	r3, r5, #2
 800d930:	68a2      	ldr	r2, [r4, #8]
 800d932:	7852      	ldrb	r2, [r2, #1]
 800d934:	f803 2b01 	strb.w	r2, [r3], #1
 800d938:	68a2      	ldr	r2, [r4, #8]
 800d93a:	7812      	ldrb	r2, [r2, #0]
 800d93c:	701a      	strb	r2, [r3, #0]
 800d93e:	e7b4      	b.n	800d8aa <ucdr_deserialize_uint32_t+0x72>
 800d940:	4631      	mov	r1, r6
 800d942:	463a      	mov	r2, r7
 800d944:	4628      	mov	r0, r5
 800d946:	f00a fa10 	bl	8017d6a <memcpy>
 800d94a:	68a1      	ldr	r1, [r4, #8]
 800d94c:	464a      	mov	r2, r9
 800d94e:	19e8      	adds	r0, r5, r7
 800d950:	f00a fa0b 	bl	8017d6a <memcpy>
 800d954:	e7a9      	b.n	800d8aa <ucdr_deserialize_uint32_t+0x72>
 800d956:	bf00      	nop

0800d958 <ucdr_deserialize_endian_uint32_t>:
 800d958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d95c:	460e      	mov	r6, r1
 800d95e:	2104      	movs	r1, #4
 800d960:	4604      	mov	r4, r0
 800d962:	4615      	mov	r5, r2
 800d964:	f000 fbda 	bl	800e11c <ucdr_buffer_alignment>
 800d968:	4601      	mov	r1, r0
 800d96a:	4620      	mov	r0, r4
 800d96c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800d970:	f000 fc18 	bl	800e1a4 <ucdr_advance_buffer>
 800d974:	2104      	movs	r1, #4
 800d976:	4620      	mov	r0, r4
 800d978:	f000 fb70 	bl	800e05c <ucdr_check_buffer_available_for>
 800d97c:	2800      	cmp	r0, #0
 800d97e:	d13c      	bne.n	800d9fa <ucdr_deserialize_endian_uint32_t+0xa2>
 800d980:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800d984:	42bb      	cmp	r3, r7
 800d986:	d933      	bls.n	800d9f0 <ucdr_deserialize_endian_uint32_t+0x98>
 800d988:	eba3 0807 	sub.w	r8, r3, r7
 800d98c:	60a3      	str	r3, [r4, #8]
 800d98e:	6923      	ldr	r3, [r4, #16]
 800d990:	f1c8 0a04 	rsb	sl, r8, #4
 800d994:	4443      	add	r3, r8
 800d996:	6123      	str	r3, [r4, #16]
 800d998:	4651      	mov	r1, sl
 800d99a:	4620      	mov	r0, r4
 800d99c:	f000 fb6a 	bl	800e074 <ucdr_check_final_buffer_behavior>
 800d9a0:	2800      	cmp	r0, #0
 800d9a2:	d048      	beq.n	800da36 <ucdr_deserialize_endian_uint32_t+0xde>
 800d9a4:	2e01      	cmp	r6, #1
 800d9a6:	d061      	beq.n	800da6c <ucdr_deserialize_endian_uint32_t+0x114>
 800d9a8:	78fb      	ldrb	r3, [r7, #3]
 800d9aa:	702b      	strb	r3, [r5, #0]
 800d9ac:	f1b8 0f00 	cmp.w	r8, #0
 800d9b0:	d050      	beq.n	800da54 <ucdr_deserialize_endian_uint32_t+0xfc>
 800d9b2:	78bb      	ldrb	r3, [r7, #2]
 800d9b4:	706b      	strb	r3, [r5, #1]
 800d9b6:	f1b8 0f01 	cmp.w	r8, #1
 800d9ba:	f105 0302 	add.w	r3, r5, #2
 800d9be:	d04d      	beq.n	800da5c <ucdr_deserialize_endian_uint32_t+0x104>
 800d9c0:	787b      	ldrb	r3, [r7, #1]
 800d9c2:	70ab      	strb	r3, [r5, #2]
 800d9c4:	f1b8 0f02 	cmp.w	r8, #2
 800d9c8:	f105 0303 	add.w	r3, r5, #3
 800d9cc:	d04a      	beq.n	800da64 <ucdr_deserialize_endian_uint32_t+0x10c>
 800d9ce:	783b      	ldrb	r3, [r7, #0]
 800d9d0:	70eb      	strb	r3, [r5, #3]
 800d9d2:	6923      	ldr	r3, [r4, #16]
 800d9d4:	68a2      	ldr	r2, [r4, #8]
 800d9d6:	7da0      	ldrb	r0, [r4, #22]
 800d9d8:	2104      	movs	r1, #4
 800d9da:	3304      	adds	r3, #4
 800d9dc:	4452      	add	r2, sl
 800d9de:	eba3 0308 	sub.w	r3, r3, r8
 800d9e2:	7561      	strb	r1, [r4, #21]
 800d9e4:	60a2      	str	r2, [r4, #8]
 800d9e6:	6123      	str	r3, [r4, #16]
 800d9e8:	f080 0001 	eor.w	r0, r0, #1
 800d9ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9f0:	2104      	movs	r1, #4
 800d9f2:	4620      	mov	r0, r4
 800d9f4:	f000 fb3e 	bl	800e074 <ucdr_check_final_buffer_behavior>
 800d9f8:	b1a8      	cbz	r0, 800da26 <ucdr_deserialize_endian_uint32_t+0xce>
 800d9fa:	2e01      	cmp	r6, #1
 800d9fc:	68a3      	ldr	r3, [r4, #8]
 800d9fe:	d017      	beq.n	800da30 <ucdr_deserialize_endian_uint32_t+0xd8>
 800da00:	78db      	ldrb	r3, [r3, #3]
 800da02:	702b      	strb	r3, [r5, #0]
 800da04:	68a3      	ldr	r3, [r4, #8]
 800da06:	789b      	ldrb	r3, [r3, #2]
 800da08:	706b      	strb	r3, [r5, #1]
 800da0a:	68a3      	ldr	r3, [r4, #8]
 800da0c:	785b      	ldrb	r3, [r3, #1]
 800da0e:	70ab      	strb	r3, [r5, #2]
 800da10:	68a3      	ldr	r3, [r4, #8]
 800da12:	781b      	ldrb	r3, [r3, #0]
 800da14:	70eb      	strb	r3, [r5, #3]
 800da16:	68a2      	ldr	r2, [r4, #8]
 800da18:	6923      	ldr	r3, [r4, #16]
 800da1a:	3204      	adds	r2, #4
 800da1c:	3304      	adds	r3, #4
 800da1e:	2104      	movs	r1, #4
 800da20:	60a2      	str	r2, [r4, #8]
 800da22:	6123      	str	r3, [r4, #16]
 800da24:	7561      	strb	r1, [r4, #21]
 800da26:	7da0      	ldrb	r0, [r4, #22]
 800da28:	f080 0001 	eor.w	r0, r0, #1
 800da2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	602b      	str	r3, [r5, #0]
 800da34:	e7ef      	b.n	800da16 <ucdr_deserialize_endian_uint32_t+0xbe>
 800da36:	68a2      	ldr	r2, [r4, #8]
 800da38:	6923      	ldr	r3, [r4, #16]
 800da3a:	7da0      	ldrb	r0, [r4, #22]
 800da3c:	f884 9015 	strb.w	r9, [r4, #21]
 800da40:	eba2 0208 	sub.w	r2, r2, r8
 800da44:	eba3 0308 	sub.w	r3, r3, r8
 800da48:	60a2      	str	r2, [r4, #8]
 800da4a:	6123      	str	r3, [r4, #16]
 800da4c:	f080 0001 	eor.w	r0, r0, #1
 800da50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da54:	68a3      	ldr	r3, [r4, #8]
 800da56:	789b      	ldrb	r3, [r3, #2]
 800da58:	706b      	strb	r3, [r5, #1]
 800da5a:	1cab      	adds	r3, r5, #2
 800da5c:	68a2      	ldr	r2, [r4, #8]
 800da5e:	7852      	ldrb	r2, [r2, #1]
 800da60:	f803 2b01 	strb.w	r2, [r3], #1
 800da64:	68a2      	ldr	r2, [r4, #8]
 800da66:	7812      	ldrb	r2, [r2, #0]
 800da68:	701a      	strb	r2, [r3, #0]
 800da6a:	e7b2      	b.n	800d9d2 <ucdr_deserialize_endian_uint32_t+0x7a>
 800da6c:	4639      	mov	r1, r7
 800da6e:	4642      	mov	r2, r8
 800da70:	4628      	mov	r0, r5
 800da72:	f00a f97a 	bl	8017d6a <memcpy>
 800da76:	68a1      	ldr	r1, [r4, #8]
 800da78:	4652      	mov	r2, sl
 800da7a:	eb05 0008 	add.w	r0, r5, r8
 800da7e:	f00a f974 	bl	8017d6a <memcpy>
 800da82:	e7a6      	b.n	800d9d2 <ucdr_deserialize_endian_uint32_t+0x7a>

0800da84 <ucdr_serialize_uint64_t>:
 800da84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da88:	2108      	movs	r1, #8
 800da8a:	b082      	sub	sp, #8
 800da8c:	4604      	mov	r4, r0
 800da8e:	e9cd 2300 	strd	r2, r3, [sp]
 800da92:	f000 fb43 	bl	800e11c <ucdr_buffer_alignment>
 800da96:	4601      	mov	r1, r0
 800da98:	4620      	mov	r0, r4
 800da9a:	7d67      	ldrb	r7, [r4, #21]
 800da9c:	f000 fb82 	bl	800e1a4 <ucdr_advance_buffer>
 800daa0:	2108      	movs	r1, #8
 800daa2:	4620      	mov	r0, r4
 800daa4:	f000 fada 	bl	800e05c <ucdr_check_buffer_available_for>
 800daa8:	2800      	cmp	r0, #0
 800daaa:	d14e      	bne.n	800db4a <ucdr_serialize_uint64_t+0xc6>
 800daac:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800dab0:	42ab      	cmp	r3, r5
 800dab2:	d945      	bls.n	800db40 <ucdr_serialize_uint64_t+0xbc>
 800dab4:	1b5e      	subs	r6, r3, r5
 800dab6:	60a3      	str	r3, [r4, #8]
 800dab8:	6923      	ldr	r3, [r4, #16]
 800daba:	f1c6 0808 	rsb	r8, r6, #8
 800dabe:	4433      	add	r3, r6
 800dac0:	6123      	str	r3, [r4, #16]
 800dac2:	4641      	mov	r1, r8
 800dac4:	4620      	mov	r0, r4
 800dac6:	f000 fad5 	bl	800e074 <ucdr_check_final_buffer_behavior>
 800daca:	2800      	cmp	r0, #0
 800dacc:	d074      	beq.n	800dbb8 <ucdr_serialize_uint64_t+0x134>
 800dace:	7d23      	ldrb	r3, [r4, #20]
 800dad0:	2b01      	cmp	r3, #1
 800dad2:	f000 809b 	beq.w	800dc0c <ucdr_serialize_uint64_t+0x188>
 800dad6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dada:	702b      	strb	r3, [r5, #0]
 800dadc:	2e00      	cmp	r6, #0
 800dade:	d078      	beq.n	800dbd2 <ucdr_serialize_uint64_t+0x14e>
 800dae0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dae4:	706b      	strb	r3, [r5, #1]
 800dae6:	2e01      	cmp	r6, #1
 800dae8:	d077      	beq.n	800dbda <ucdr_serialize_uint64_t+0x156>
 800daea:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800daee:	70ab      	strb	r3, [r5, #2]
 800daf0:	2e02      	cmp	r6, #2
 800daf2:	d076      	beq.n	800dbe2 <ucdr_serialize_uint64_t+0x15e>
 800daf4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800daf8:	70eb      	strb	r3, [r5, #3]
 800dafa:	2e03      	cmp	r6, #3
 800dafc:	d075      	beq.n	800dbea <ucdr_serialize_uint64_t+0x166>
 800dafe:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800db02:	712b      	strb	r3, [r5, #4]
 800db04:	2e04      	cmp	r6, #4
 800db06:	d074      	beq.n	800dbf2 <ucdr_serialize_uint64_t+0x16e>
 800db08:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800db0c:	716b      	strb	r3, [r5, #5]
 800db0e:	2e05      	cmp	r6, #5
 800db10:	d073      	beq.n	800dbfa <ucdr_serialize_uint64_t+0x176>
 800db12:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800db16:	71ab      	strb	r3, [r5, #6]
 800db18:	2e06      	cmp	r6, #6
 800db1a:	d072      	beq.n	800dc02 <ucdr_serialize_uint64_t+0x17e>
 800db1c:	f89d 3000 	ldrb.w	r3, [sp]
 800db20:	71eb      	strb	r3, [r5, #7]
 800db22:	6923      	ldr	r3, [r4, #16]
 800db24:	68a2      	ldr	r2, [r4, #8]
 800db26:	7da0      	ldrb	r0, [r4, #22]
 800db28:	3308      	adds	r3, #8
 800db2a:	1b9e      	subs	r6, r3, r6
 800db2c:	4442      	add	r2, r8
 800db2e:	2308      	movs	r3, #8
 800db30:	f080 0001 	eor.w	r0, r0, #1
 800db34:	60a2      	str	r2, [r4, #8]
 800db36:	6126      	str	r6, [r4, #16]
 800db38:	7563      	strb	r3, [r4, #21]
 800db3a:	b002      	add	sp, #8
 800db3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db40:	2108      	movs	r1, #8
 800db42:	4620      	mov	r0, r4
 800db44:	f000 fa96 	bl	800e074 <ucdr_check_final_buffer_behavior>
 800db48:	b350      	cbz	r0, 800dba0 <ucdr_serialize_uint64_t+0x11c>
 800db4a:	7d23      	ldrb	r3, [r4, #20]
 800db4c:	2b01      	cmp	r3, #1
 800db4e:	d02d      	beq.n	800dbac <ucdr_serialize_uint64_t+0x128>
 800db50:	68a3      	ldr	r3, [r4, #8]
 800db52:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800db56:	701a      	strb	r2, [r3, #0]
 800db58:	68a3      	ldr	r3, [r4, #8]
 800db5a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800db5e:	705a      	strb	r2, [r3, #1]
 800db60:	68a3      	ldr	r3, [r4, #8]
 800db62:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800db66:	709a      	strb	r2, [r3, #2]
 800db68:	68a3      	ldr	r3, [r4, #8]
 800db6a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800db6e:	70da      	strb	r2, [r3, #3]
 800db70:	68a3      	ldr	r3, [r4, #8]
 800db72:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800db76:	711a      	strb	r2, [r3, #4]
 800db78:	68a3      	ldr	r3, [r4, #8]
 800db7a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800db7e:	715a      	strb	r2, [r3, #5]
 800db80:	68a3      	ldr	r3, [r4, #8]
 800db82:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800db86:	719a      	strb	r2, [r3, #6]
 800db88:	68a3      	ldr	r3, [r4, #8]
 800db8a:	f89d 2000 	ldrb.w	r2, [sp]
 800db8e:	71da      	strb	r2, [r3, #7]
 800db90:	68a2      	ldr	r2, [r4, #8]
 800db92:	6923      	ldr	r3, [r4, #16]
 800db94:	3208      	adds	r2, #8
 800db96:	3308      	adds	r3, #8
 800db98:	2108      	movs	r1, #8
 800db9a:	60a2      	str	r2, [r4, #8]
 800db9c:	6123      	str	r3, [r4, #16]
 800db9e:	7561      	strb	r1, [r4, #21]
 800dba0:	7da0      	ldrb	r0, [r4, #22]
 800dba2:	f080 0001 	eor.w	r0, r0, #1
 800dba6:	b002      	add	sp, #8
 800dba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbac:	466b      	mov	r3, sp
 800dbae:	cb03      	ldmia	r3!, {r0, r1}
 800dbb0:	68a3      	ldr	r3, [r4, #8]
 800dbb2:	6018      	str	r0, [r3, #0]
 800dbb4:	6059      	str	r1, [r3, #4]
 800dbb6:	e7eb      	b.n	800db90 <ucdr_serialize_uint64_t+0x10c>
 800dbb8:	68a2      	ldr	r2, [r4, #8]
 800dbba:	6923      	ldr	r3, [r4, #16]
 800dbbc:	7da0      	ldrb	r0, [r4, #22]
 800dbbe:	7567      	strb	r7, [r4, #21]
 800dbc0:	1b92      	subs	r2, r2, r6
 800dbc2:	1b9b      	subs	r3, r3, r6
 800dbc4:	f080 0001 	eor.w	r0, r0, #1
 800dbc8:	60a2      	str	r2, [r4, #8]
 800dbca:	6123      	str	r3, [r4, #16]
 800dbcc:	b002      	add	sp, #8
 800dbce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbd2:	68a3      	ldr	r3, [r4, #8]
 800dbd4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dbd8:	701a      	strb	r2, [r3, #0]
 800dbda:	68a3      	ldr	r3, [r4, #8]
 800dbdc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dbe0:	701a      	strb	r2, [r3, #0]
 800dbe2:	68a3      	ldr	r3, [r4, #8]
 800dbe4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dbe8:	701a      	strb	r2, [r3, #0]
 800dbea:	68a3      	ldr	r3, [r4, #8]
 800dbec:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800dbf0:	701a      	strb	r2, [r3, #0]
 800dbf2:	68a3      	ldr	r3, [r4, #8]
 800dbf4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800dbf8:	701a      	strb	r2, [r3, #0]
 800dbfa:	68a3      	ldr	r3, [r4, #8]
 800dbfc:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800dc00:	701a      	strb	r2, [r3, #0]
 800dc02:	68a3      	ldr	r3, [r4, #8]
 800dc04:	f89d 2000 	ldrb.w	r2, [sp]
 800dc08:	701a      	strb	r2, [r3, #0]
 800dc0a:	e78a      	b.n	800db22 <ucdr_serialize_uint64_t+0x9e>
 800dc0c:	4628      	mov	r0, r5
 800dc0e:	466d      	mov	r5, sp
 800dc10:	4629      	mov	r1, r5
 800dc12:	4632      	mov	r2, r6
 800dc14:	f00a f8a9 	bl	8017d6a <memcpy>
 800dc18:	68a0      	ldr	r0, [r4, #8]
 800dc1a:	4642      	mov	r2, r8
 800dc1c:	19a9      	adds	r1, r5, r6
 800dc1e:	f00a f8a4 	bl	8017d6a <memcpy>
 800dc22:	e77e      	b.n	800db22 <ucdr_serialize_uint64_t+0x9e>

0800dc24 <ucdr_serialize_int16_t>:
 800dc24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc28:	b082      	sub	sp, #8
 800dc2a:	460b      	mov	r3, r1
 800dc2c:	2102      	movs	r1, #2
 800dc2e:	4604      	mov	r4, r0
 800dc30:	f8ad 3006 	strh.w	r3, [sp, #6]
 800dc34:	f000 fa72 	bl	800e11c <ucdr_buffer_alignment>
 800dc38:	4601      	mov	r1, r0
 800dc3a:	4620      	mov	r0, r4
 800dc3c:	7d67      	ldrb	r7, [r4, #21]
 800dc3e:	f000 fab1 	bl	800e1a4 <ucdr_advance_buffer>
 800dc42:	2102      	movs	r1, #2
 800dc44:	4620      	mov	r0, r4
 800dc46:	f000 fa09 	bl	800e05c <ucdr_check_buffer_available_for>
 800dc4a:	bb78      	cbnz	r0, 800dcac <ucdr_serialize_int16_t+0x88>
 800dc4c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800dc50:	42ab      	cmp	r3, r5
 800dc52:	d926      	bls.n	800dca2 <ucdr_serialize_int16_t+0x7e>
 800dc54:	1b5e      	subs	r6, r3, r5
 800dc56:	60a3      	str	r3, [r4, #8]
 800dc58:	6923      	ldr	r3, [r4, #16]
 800dc5a:	f1c6 0802 	rsb	r8, r6, #2
 800dc5e:	4433      	add	r3, r6
 800dc60:	6123      	str	r3, [r4, #16]
 800dc62:	4641      	mov	r1, r8
 800dc64:	4620      	mov	r0, r4
 800dc66:	f000 fa05 	bl	800e074 <ucdr_check_final_buffer_behavior>
 800dc6a:	2800      	cmp	r0, #0
 800dc6c:	d03b      	beq.n	800dce6 <ucdr_serialize_int16_t+0xc2>
 800dc6e:	7d23      	ldrb	r3, [r4, #20]
 800dc70:	2b01      	cmp	r3, #1
 800dc72:	d04a      	beq.n	800dd0a <ucdr_serialize_int16_t+0xe6>
 800dc74:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dc78:	702b      	strb	r3, [r5, #0]
 800dc7a:	2e00      	cmp	r6, #0
 800dc7c:	d040      	beq.n	800dd00 <ucdr_serialize_int16_t+0xdc>
 800dc7e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dc82:	706b      	strb	r3, [r5, #1]
 800dc84:	6923      	ldr	r3, [r4, #16]
 800dc86:	68a2      	ldr	r2, [r4, #8]
 800dc88:	7da0      	ldrb	r0, [r4, #22]
 800dc8a:	3302      	adds	r3, #2
 800dc8c:	1b9e      	subs	r6, r3, r6
 800dc8e:	4442      	add	r2, r8
 800dc90:	2302      	movs	r3, #2
 800dc92:	f080 0001 	eor.w	r0, r0, #1
 800dc96:	60a2      	str	r2, [r4, #8]
 800dc98:	6126      	str	r6, [r4, #16]
 800dc9a:	7563      	strb	r3, [r4, #21]
 800dc9c:	b002      	add	sp, #8
 800dc9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dca2:	2102      	movs	r1, #2
 800dca4:	4620      	mov	r0, r4
 800dca6:	f000 f9e5 	bl	800e074 <ucdr_check_final_buffer_behavior>
 800dcaa:	b190      	cbz	r0, 800dcd2 <ucdr_serialize_int16_t+0xae>
 800dcac:	7d23      	ldrb	r3, [r4, #20]
 800dcae:	2b01      	cmp	r3, #1
 800dcb0:	68a3      	ldr	r3, [r4, #8]
 800dcb2:	d014      	beq.n	800dcde <ucdr_serialize_int16_t+0xba>
 800dcb4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800dcb8:	701a      	strb	r2, [r3, #0]
 800dcba:	68a3      	ldr	r3, [r4, #8]
 800dcbc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dcc0:	705a      	strb	r2, [r3, #1]
 800dcc2:	68a2      	ldr	r2, [r4, #8]
 800dcc4:	6923      	ldr	r3, [r4, #16]
 800dcc6:	3202      	adds	r2, #2
 800dcc8:	3302      	adds	r3, #2
 800dcca:	2102      	movs	r1, #2
 800dccc:	60a2      	str	r2, [r4, #8]
 800dcce:	6123      	str	r3, [r4, #16]
 800dcd0:	7561      	strb	r1, [r4, #21]
 800dcd2:	7da0      	ldrb	r0, [r4, #22]
 800dcd4:	f080 0001 	eor.w	r0, r0, #1
 800dcd8:	b002      	add	sp, #8
 800dcda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcde:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800dce2:	801a      	strh	r2, [r3, #0]
 800dce4:	e7ed      	b.n	800dcc2 <ucdr_serialize_int16_t+0x9e>
 800dce6:	68a2      	ldr	r2, [r4, #8]
 800dce8:	6923      	ldr	r3, [r4, #16]
 800dcea:	7da0      	ldrb	r0, [r4, #22]
 800dcec:	7567      	strb	r7, [r4, #21]
 800dcee:	1b92      	subs	r2, r2, r6
 800dcf0:	1b9b      	subs	r3, r3, r6
 800dcf2:	f080 0001 	eor.w	r0, r0, #1
 800dcf6:	60a2      	str	r2, [r4, #8]
 800dcf8:	6123      	str	r3, [r4, #16]
 800dcfa:	b002      	add	sp, #8
 800dcfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd00:	68a3      	ldr	r3, [r4, #8]
 800dd02:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dd06:	701a      	strb	r2, [r3, #0]
 800dd08:	e7bc      	b.n	800dc84 <ucdr_serialize_int16_t+0x60>
 800dd0a:	4628      	mov	r0, r5
 800dd0c:	f10d 0506 	add.w	r5, sp, #6
 800dd10:	4629      	mov	r1, r5
 800dd12:	4632      	mov	r2, r6
 800dd14:	f00a f829 	bl	8017d6a <memcpy>
 800dd18:	68a0      	ldr	r0, [r4, #8]
 800dd1a:	4642      	mov	r2, r8
 800dd1c:	19a9      	adds	r1, r5, r6
 800dd1e:	f00a f824 	bl	8017d6a <memcpy>
 800dd22:	e7af      	b.n	800dc84 <ucdr_serialize_int16_t+0x60>

0800dd24 <ucdr_deserialize_int16_t>:
 800dd24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd28:	460d      	mov	r5, r1
 800dd2a:	2102      	movs	r1, #2
 800dd2c:	4604      	mov	r4, r0
 800dd2e:	f000 f9f5 	bl	800e11c <ucdr_buffer_alignment>
 800dd32:	4601      	mov	r1, r0
 800dd34:	4620      	mov	r0, r4
 800dd36:	f894 8015 	ldrb.w	r8, [r4, #21]
 800dd3a:	f000 fa33 	bl	800e1a4 <ucdr_advance_buffer>
 800dd3e:	2102      	movs	r1, #2
 800dd40:	4620      	mov	r0, r4
 800dd42:	f000 f98b 	bl	800e05c <ucdr_check_buffer_available_for>
 800dd46:	bb60      	cbnz	r0, 800dda2 <ucdr_deserialize_int16_t+0x7e>
 800dd48:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800dd4c:	42be      	cmp	r6, r7
 800dd4e:	d923      	bls.n	800dd98 <ucdr_deserialize_int16_t+0x74>
 800dd50:	6923      	ldr	r3, [r4, #16]
 800dd52:	60a6      	str	r6, [r4, #8]
 800dd54:	1bf6      	subs	r6, r6, r7
 800dd56:	4433      	add	r3, r6
 800dd58:	f1c6 0902 	rsb	r9, r6, #2
 800dd5c:	6123      	str	r3, [r4, #16]
 800dd5e:	4649      	mov	r1, r9
 800dd60:	4620      	mov	r0, r4
 800dd62:	f000 f987 	bl	800e074 <ucdr_check_final_buffer_behavior>
 800dd66:	2800      	cmp	r0, #0
 800dd68:	d034      	beq.n	800ddd4 <ucdr_deserialize_int16_t+0xb0>
 800dd6a:	7d23      	ldrb	r3, [r4, #20]
 800dd6c:	2b01      	cmp	r3, #1
 800dd6e:	d042      	beq.n	800ddf6 <ucdr_deserialize_int16_t+0xd2>
 800dd70:	787b      	ldrb	r3, [r7, #1]
 800dd72:	702b      	strb	r3, [r5, #0]
 800dd74:	2e00      	cmp	r6, #0
 800dd76:	d03a      	beq.n	800ddee <ucdr_deserialize_int16_t+0xca>
 800dd78:	783b      	ldrb	r3, [r7, #0]
 800dd7a:	706b      	strb	r3, [r5, #1]
 800dd7c:	6923      	ldr	r3, [r4, #16]
 800dd7e:	68a2      	ldr	r2, [r4, #8]
 800dd80:	7da0      	ldrb	r0, [r4, #22]
 800dd82:	2102      	movs	r1, #2
 800dd84:	3302      	adds	r3, #2
 800dd86:	444a      	add	r2, r9
 800dd88:	1b9b      	subs	r3, r3, r6
 800dd8a:	7561      	strb	r1, [r4, #21]
 800dd8c:	60a2      	str	r2, [r4, #8]
 800dd8e:	6123      	str	r3, [r4, #16]
 800dd90:	f080 0001 	eor.w	r0, r0, #1
 800dd94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd98:	2102      	movs	r1, #2
 800dd9a:	4620      	mov	r0, r4
 800dd9c:	f000 f96a 	bl	800e074 <ucdr_check_final_buffer_behavior>
 800dda0:	b180      	cbz	r0, 800ddc4 <ucdr_deserialize_int16_t+0xa0>
 800dda2:	7d23      	ldrb	r3, [r4, #20]
 800dda4:	2b01      	cmp	r3, #1
 800dda6:	68a3      	ldr	r3, [r4, #8]
 800dda8:	d011      	beq.n	800ddce <ucdr_deserialize_int16_t+0xaa>
 800ddaa:	785b      	ldrb	r3, [r3, #1]
 800ddac:	702b      	strb	r3, [r5, #0]
 800ddae:	68a3      	ldr	r3, [r4, #8]
 800ddb0:	781b      	ldrb	r3, [r3, #0]
 800ddb2:	706b      	strb	r3, [r5, #1]
 800ddb4:	68a2      	ldr	r2, [r4, #8]
 800ddb6:	6923      	ldr	r3, [r4, #16]
 800ddb8:	3202      	adds	r2, #2
 800ddba:	3302      	adds	r3, #2
 800ddbc:	2102      	movs	r1, #2
 800ddbe:	60a2      	str	r2, [r4, #8]
 800ddc0:	6123      	str	r3, [r4, #16]
 800ddc2:	7561      	strb	r1, [r4, #21]
 800ddc4:	7da0      	ldrb	r0, [r4, #22]
 800ddc6:	f080 0001 	eor.w	r0, r0, #1
 800ddca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddce:	881b      	ldrh	r3, [r3, #0]
 800ddd0:	802b      	strh	r3, [r5, #0]
 800ddd2:	e7ef      	b.n	800ddb4 <ucdr_deserialize_int16_t+0x90>
 800ddd4:	68a2      	ldr	r2, [r4, #8]
 800ddd6:	6923      	ldr	r3, [r4, #16]
 800ddd8:	7da0      	ldrb	r0, [r4, #22]
 800ddda:	f884 8015 	strb.w	r8, [r4, #21]
 800ddde:	1b92      	subs	r2, r2, r6
 800dde0:	1b9b      	subs	r3, r3, r6
 800dde2:	60a2      	str	r2, [r4, #8]
 800dde4:	6123      	str	r3, [r4, #16]
 800dde6:	f080 0001 	eor.w	r0, r0, #1
 800ddea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddee:	68a3      	ldr	r3, [r4, #8]
 800ddf0:	781b      	ldrb	r3, [r3, #0]
 800ddf2:	706b      	strb	r3, [r5, #1]
 800ddf4:	e7c2      	b.n	800dd7c <ucdr_deserialize_int16_t+0x58>
 800ddf6:	4639      	mov	r1, r7
 800ddf8:	4632      	mov	r2, r6
 800ddfa:	4628      	mov	r0, r5
 800ddfc:	f009 ffb5 	bl	8017d6a <memcpy>
 800de00:	68a1      	ldr	r1, [r4, #8]
 800de02:	464a      	mov	r2, r9
 800de04:	19a8      	adds	r0, r5, r6
 800de06:	f009 ffb0 	bl	8017d6a <memcpy>
 800de0a:	e7b7      	b.n	800dd7c <ucdr_deserialize_int16_t+0x58>

0800de0c <ucdr_serialize_int32_t>:
 800de0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de10:	b082      	sub	sp, #8
 800de12:	4604      	mov	r4, r0
 800de14:	9101      	str	r1, [sp, #4]
 800de16:	2104      	movs	r1, #4
 800de18:	f000 f980 	bl	800e11c <ucdr_buffer_alignment>
 800de1c:	4601      	mov	r1, r0
 800de1e:	4620      	mov	r0, r4
 800de20:	7d67      	ldrb	r7, [r4, #21]
 800de22:	f000 f9bf 	bl	800e1a4 <ucdr_advance_buffer>
 800de26:	2104      	movs	r1, #4
 800de28:	4620      	mov	r0, r4
 800de2a:	f000 f917 	bl	800e05c <ucdr_check_buffer_available_for>
 800de2e:	2800      	cmp	r0, #0
 800de30:	d139      	bne.n	800dea6 <ucdr_serialize_int32_t+0x9a>
 800de32:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800de36:	42ab      	cmp	r3, r5
 800de38:	d930      	bls.n	800de9c <ucdr_serialize_int32_t+0x90>
 800de3a:	1b5e      	subs	r6, r3, r5
 800de3c:	60a3      	str	r3, [r4, #8]
 800de3e:	6923      	ldr	r3, [r4, #16]
 800de40:	f1c6 0804 	rsb	r8, r6, #4
 800de44:	4433      	add	r3, r6
 800de46:	6123      	str	r3, [r4, #16]
 800de48:	4641      	mov	r1, r8
 800de4a:	4620      	mov	r0, r4
 800de4c:	f000 f912 	bl	800e074 <ucdr_check_final_buffer_behavior>
 800de50:	2800      	cmp	r0, #0
 800de52:	d04c      	beq.n	800deee <ucdr_serialize_int32_t+0xe2>
 800de54:	7d23      	ldrb	r3, [r4, #20]
 800de56:	2b01      	cmp	r3, #1
 800de58:	d063      	beq.n	800df22 <ucdr_serialize_int32_t+0x116>
 800de5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800de5e:	702b      	strb	r3, [r5, #0]
 800de60:	2e00      	cmp	r6, #0
 800de62:	d051      	beq.n	800df08 <ucdr_serialize_int32_t+0xfc>
 800de64:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800de68:	706b      	strb	r3, [r5, #1]
 800de6a:	2e01      	cmp	r6, #1
 800de6c:	d050      	beq.n	800df10 <ucdr_serialize_int32_t+0x104>
 800de6e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800de72:	70ab      	strb	r3, [r5, #2]
 800de74:	2e02      	cmp	r6, #2
 800de76:	d04f      	beq.n	800df18 <ucdr_serialize_int32_t+0x10c>
 800de78:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800de7c:	70eb      	strb	r3, [r5, #3]
 800de7e:	6923      	ldr	r3, [r4, #16]
 800de80:	68a2      	ldr	r2, [r4, #8]
 800de82:	7da0      	ldrb	r0, [r4, #22]
 800de84:	3304      	adds	r3, #4
 800de86:	1b9e      	subs	r6, r3, r6
 800de88:	4442      	add	r2, r8
 800de8a:	2304      	movs	r3, #4
 800de8c:	f080 0001 	eor.w	r0, r0, #1
 800de90:	60a2      	str	r2, [r4, #8]
 800de92:	6126      	str	r6, [r4, #16]
 800de94:	7563      	strb	r3, [r4, #21]
 800de96:	b002      	add	sp, #8
 800de98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de9c:	2104      	movs	r1, #4
 800de9e:	4620      	mov	r0, r4
 800dea0:	f000 f8e8 	bl	800e074 <ucdr_check_final_buffer_behavior>
 800dea4:	b1d0      	cbz	r0, 800dedc <ucdr_serialize_int32_t+0xd0>
 800dea6:	7d23      	ldrb	r3, [r4, #20]
 800dea8:	2b01      	cmp	r3, #1
 800deaa:	68a3      	ldr	r3, [r4, #8]
 800deac:	d01c      	beq.n	800dee8 <ucdr_serialize_int32_t+0xdc>
 800deae:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800deb2:	701a      	strb	r2, [r3, #0]
 800deb4:	68a3      	ldr	r3, [r4, #8]
 800deb6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800deba:	705a      	strb	r2, [r3, #1]
 800debc:	68a3      	ldr	r3, [r4, #8]
 800debe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dec2:	709a      	strb	r2, [r3, #2]
 800dec4:	68a3      	ldr	r3, [r4, #8]
 800dec6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800deca:	70da      	strb	r2, [r3, #3]
 800decc:	68a2      	ldr	r2, [r4, #8]
 800dece:	6923      	ldr	r3, [r4, #16]
 800ded0:	3204      	adds	r2, #4
 800ded2:	3304      	adds	r3, #4
 800ded4:	2104      	movs	r1, #4
 800ded6:	60a2      	str	r2, [r4, #8]
 800ded8:	6123      	str	r3, [r4, #16]
 800deda:	7561      	strb	r1, [r4, #21]
 800dedc:	7da0      	ldrb	r0, [r4, #22]
 800dede:	f080 0001 	eor.w	r0, r0, #1
 800dee2:	b002      	add	sp, #8
 800dee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dee8:	9a01      	ldr	r2, [sp, #4]
 800deea:	601a      	str	r2, [r3, #0]
 800deec:	e7ee      	b.n	800decc <ucdr_serialize_int32_t+0xc0>
 800deee:	68a2      	ldr	r2, [r4, #8]
 800def0:	6923      	ldr	r3, [r4, #16]
 800def2:	7da0      	ldrb	r0, [r4, #22]
 800def4:	7567      	strb	r7, [r4, #21]
 800def6:	1b92      	subs	r2, r2, r6
 800def8:	1b9b      	subs	r3, r3, r6
 800defa:	f080 0001 	eor.w	r0, r0, #1
 800defe:	60a2      	str	r2, [r4, #8]
 800df00:	6123      	str	r3, [r4, #16]
 800df02:	b002      	add	sp, #8
 800df04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df08:	68a3      	ldr	r3, [r4, #8]
 800df0a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800df0e:	701a      	strb	r2, [r3, #0]
 800df10:	68a3      	ldr	r3, [r4, #8]
 800df12:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800df16:	701a      	strb	r2, [r3, #0]
 800df18:	68a3      	ldr	r3, [r4, #8]
 800df1a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800df1e:	701a      	strb	r2, [r3, #0]
 800df20:	e7ad      	b.n	800de7e <ucdr_serialize_int32_t+0x72>
 800df22:	4628      	mov	r0, r5
 800df24:	ad01      	add	r5, sp, #4
 800df26:	4629      	mov	r1, r5
 800df28:	4632      	mov	r2, r6
 800df2a:	f009 ff1e 	bl	8017d6a <memcpy>
 800df2e:	68a0      	ldr	r0, [r4, #8]
 800df30:	4642      	mov	r2, r8
 800df32:	19a9      	adds	r1, r5, r6
 800df34:	f009 ff19 	bl	8017d6a <memcpy>
 800df38:	e7a1      	b.n	800de7e <ucdr_serialize_int32_t+0x72>
 800df3a:	bf00      	nop

0800df3c <ucdr_deserialize_int32_t>:
 800df3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df40:	460d      	mov	r5, r1
 800df42:	2104      	movs	r1, #4
 800df44:	4604      	mov	r4, r0
 800df46:	f000 f8e9 	bl	800e11c <ucdr_buffer_alignment>
 800df4a:	4601      	mov	r1, r0
 800df4c:	4620      	mov	r0, r4
 800df4e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800df52:	f000 f927 	bl	800e1a4 <ucdr_advance_buffer>
 800df56:	2104      	movs	r1, #4
 800df58:	4620      	mov	r0, r4
 800df5a:	f000 f87f 	bl	800e05c <ucdr_check_buffer_available_for>
 800df5e:	2800      	cmp	r0, #0
 800df60:	d138      	bne.n	800dfd4 <ucdr_deserialize_int32_t+0x98>
 800df62:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800df66:	42b7      	cmp	r7, r6
 800df68:	d92f      	bls.n	800dfca <ucdr_deserialize_int32_t+0x8e>
 800df6a:	6923      	ldr	r3, [r4, #16]
 800df6c:	60a7      	str	r7, [r4, #8]
 800df6e:	1bbf      	subs	r7, r7, r6
 800df70:	443b      	add	r3, r7
 800df72:	f1c7 0904 	rsb	r9, r7, #4
 800df76:	6123      	str	r3, [r4, #16]
 800df78:	4649      	mov	r1, r9
 800df7a:	4620      	mov	r0, r4
 800df7c:	f000 f87a 	bl	800e074 <ucdr_check_final_buffer_behavior>
 800df80:	2800      	cmp	r0, #0
 800df82:	d046      	beq.n	800e012 <ucdr_deserialize_int32_t+0xd6>
 800df84:	7d23      	ldrb	r3, [r4, #20]
 800df86:	2b01      	cmp	r3, #1
 800df88:	d05c      	beq.n	800e044 <ucdr_deserialize_int32_t+0x108>
 800df8a:	78f3      	ldrb	r3, [r6, #3]
 800df8c:	702b      	strb	r3, [r5, #0]
 800df8e:	2f00      	cmp	r7, #0
 800df90:	d04c      	beq.n	800e02c <ucdr_deserialize_int32_t+0xf0>
 800df92:	78b3      	ldrb	r3, [r6, #2]
 800df94:	706b      	strb	r3, [r5, #1]
 800df96:	2f01      	cmp	r7, #1
 800df98:	f105 0302 	add.w	r3, r5, #2
 800df9c:	d04a      	beq.n	800e034 <ucdr_deserialize_int32_t+0xf8>
 800df9e:	7873      	ldrb	r3, [r6, #1]
 800dfa0:	70ab      	strb	r3, [r5, #2]
 800dfa2:	2f02      	cmp	r7, #2
 800dfa4:	f105 0303 	add.w	r3, r5, #3
 800dfa8:	d048      	beq.n	800e03c <ucdr_deserialize_int32_t+0x100>
 800dfaa:	7833      	ldrb	r3, [r6, #0]
 800dfac:	70eb      	strb	r3, [r5, #3]
 800dfae:	6923      	ldr	r3, [r4, #16]
 800dfb0:	68a2      	ldr	r2, [r4, #8]
 800dfb2:	7da0      	ldrb	r0, [r4, #22]
 800dfb4:	2104      	movs	r1, #4
 800dfb6:	3304      	adds	r3, #4
 800dfb8:	444a      	add	r2, r9
 800dfba:	1bdb      	subs	r3, r3, r7
 800dfbc:	7561      	strb	r1, [r4, #21]
 800dfbe:	60a2      	str	r2, [r4, #8]
 800dfc0:	6123      	str	r3, [r4, #16]
 800dfc2:	f080 0001 	eor.w	r0, r0, #1
 800dfc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfca:	2104      	movs	r1, #4
 800dfcc:	4620      	mov	r0, r4
 800dfce:	f000 f851 	bl	800e074 <ucdr_check_final_buffer_behavior>
 800dfd2:	b1b0      	cbz	r0, 800e002 <ucdr_deserialize_int32_t+0xc6>
 800dfd4:	7d23      	ldrb	r3, [r4, #20]
 800dfd6:	2b01      	cmp	r3, #1
 800dfd8:	68a3      	ldr	r3, [r4, #8]
 800dfda:	d017      	beq.n	800e00c <ucdr_deserialize_int32_t+0xd0>
 800dfdc:	78db      	ldrb	r3, [r3, #3]
 800dfde:	702b      	strb	r3, [r5, #0]
 800dfe0:	68a3      	ldr	r3, [r4, #8]
 800dfe2:	789b      	ldrb	r3, [r3, #2]
 800dfe4:	706b      	strb	r3, [r5, #1]
 800dfe6:	68a3      	ldr	r3, [r4, #8]
 800dfe8:	785b      	ldrb	r3, [r3, #1]
 800dfea:	70ab      	strb	r3, [r5, #2]
 800dfec:	68a3      	ldr	r3, [r4, #8]
 800dfee:	781b      	ldrb	r3, [r3, #0]
 800dff0:	70eb      	strb	r3, [r5, #3]
 800dff2:	68a2      	ldr	r2, [r4, #8]
 800dff4:	6923      	ldr	r3, [r4, #16]
 800dff6:	3204      	adds	r2, #4
 800dff8:	3304      	adds	r3, #4
 800dffa:	2104      	movs	r1, #4
 800dffc:	60a2      	str	r2, [r4, #8]
 800dffe:	6123      	str	r3, [r4, #16]
 800e000:	7561      	strb	r1, [r4, #21]
 800e002:	7da0      	ldrb	r0, [r4, #22]
 800e004:	f080 0001 	eor.w	r0, r0, #1
 800e008:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	602b      	str	r3, [r5, #0]
 800e010:	e7ef      	b.n	800dff2 <ucdr_deserialize_int32_t+0xb6>
 800e012:	68a2      	ldr	r2, [r4, #8]
 800e014:	6923      	ldr	r3, [r4, #16]
 800e016:	7da0      	ldrb	r0, [r4, #22]
 800e018:	f884 8015 	strb.w	r8, [r4, #21]
 800e01c:	1bd2      	subs	r2, r2, r7
 800e01e:	1bdb      	subs	r3, r3, r7
 800e020:	60a2      	str	r2, [r4, #8]
 800e022:	6123      	str	r3, [r4, #16]
 800e024:	f080 0001 	eor.w	r0, r0, #1
 800e028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e02c:	68a3      	ldr	r3, [r4, #8]
 800e02e:	789b      	ldrb	r3, [r3, #2]
 800e030:	706b      	strb	r3, [r5, #1]
 800e032:	1cab      	adds	r3, r5, #2
 800e034:	68a2      	ldr	r2, [r4, #8]
 800e036:	7852      	ldrb	r2, [r2, #1]
 800e038:	f803 2b01 	strb.w	r2, [r3], #1
 800e03c:	68a2      	ldr	r2, [r4, #8]
 800e03e:	7812      	ldrb	r2, [r2, #0]
 800e040:	701a      	strb	r2, [r3, #0]
 800e042:	e7b4      	b.n	800dfae <ucdr_deserialize_int32_t+0x72>
 800e044:	4631      	mov	r1, r6
 800e046:	463a      	mov	r2, r7
 800e048:	4628      	mov	r0, r5
 800e04a:	f009 fe8e 	bl	8017d6a <memcpy>
 800e04e:	68a1      	ldr	r1, [r4, #8]
 800e050:	464a      	mov	r2, r9
 800e052:	19e8      	adds	r0, r5, r7
 800e054:	f009 fe89 	bl	8017d6a <memcpy>
 800e058:	e7a9      	b.n	800dfae <ucdr_deserialize_int32_t+0x72>
 800e05a:	bf00      	nop

0800e05c <ucdr_check_buffer_available_for>:
 800e05c:	7d83      	ldrb	r3, [r0, #22]
 800e05e:	b93b      	cbnz	r3, 800e070 <ucdr_check_buffer_available_for+0x14>
 800e060:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800e064:	4419      	add	r1, r3
 800e066:	4288      	cmp	r0, r1
 800e068:	bf34      	ite	cc
 800e06a:	2000      	movcc	r0, #0
 800e06c:	2001      	movcs	r0, #1
 800e06e:	4770      	bx	lr
 800e070:	2000      	movs	r0, #0
 800e072:	4770      	bx	lr

0800e074 <ucdr_check_final_buffer_behavior>:
 800e074:	7d83      	ldrb	r3, [r0, #22]
 800e076:	b943      	cbnz	r3, 800e08a <ucdr_check_final_buffer_behavior+0x16>
 800e078:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800e07c:	4291      	cmp	r1, r2
 800e07e:	b510      	push	{r4, lr}
 800e080:	4604      	mov	r4, r0
 800e082:	d205      	bcs.n	800e090 <ucdr_check_final_buffer_behavior+0x1c>
 800e084:	2301      	movs	r3, #1
 800e086:	4618      	mov	r0, r3
 800e088:	bd10      	pop	{r4, pc}
 800e08a:	2300      	movs	r3, #0
 800e08c:	4618      	mov	r0, r3
 800e08e:	4770      	bx	lr
 800e090:	6982      	ldr	r2, [r0, #24]
 800e092:	b13a      	cbz	r2, 800e0a4 <ucdr_check_final_buffer_behavior+0x30>
 800e094:	69c1      	ldr	r1, [r0, #28]
 800e096:	4790      	blx	r2
 800e098:	f080 0301 	eor.w	r3, r0, #1
 800e09c:	b2db      	uxtb	r3, r3
 800e09e:	75a0      	strb	r0, [r4, #22]
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	bd10      	pop	{r4, pc}
 800e0a4:	2001      	movs	r0, #1
 800e0a6:	75a0      	strb	r0, [r4, #22]
 800e0a8:	e7fa      	b.n	800e0a0 <ucdr_check_final_buffer_behavior+0x2c>
 800e0aa:	bf00      	nop

0800e0ac <ucdr_set_on_full_buffer_callback>:
 800e0ac:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800e0b0:	4770      	bx	lr
 800e0b2:	bf00      	nop

0800e0b4 <ucdr_init_buffer_origin_offset_endian>:
 800e0b4:	b410      	push	{r4}
 800e0b6:	9c01      	ldr	r4, [sp, #4]
 800e0b8:	6001      	str	r1, [r0, #0]
 800e0ba:	440a      	add	r2, r1
 800e0bc:	6042      	str	r2, [r0, #4]
 800e0be:	190a      	adds	r2, r1, r4
 800e0c0:	441c      	add	r4, r3
 800e0c2:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800e0c6:	6082      	str	r2, [r0, #8]
 800e0c8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800e0cc:	7503      	strb	r3, [r0, #20]
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800e0d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0d8:	7542      	strb	r2, [r0, #21]
 800e0da:	7582      	strb	r2, [r0, #22]
 800e0dc:	4770      	bx	lr
 800e0de:	bf00      	nop

0800e0e0 <ucdr_init_buffer_origin_offset>:
 800e0e0:	b510      	push	{r4, lr}
 800e0e2:	b082      	sub	sp, #8
 800e0e4:	9c04      	ldr	r4, [sp, #16]
 800e0e6:	9400      	str	r4, [sp, #0]
 800e0e8:	2401      	movs	r4, #1
 800e0ea:	9401      	str	r4, [sp, #4]
 800e0ec:	f7ff ffe2 	bl	800e0b4 <ucdr_init_buffer_origin_offset_endian>
 800e0f0:	b002      	add	sp, #8
 800e0f2:	bd10      	pop	{r4, pc}

0800e0f4 <ucdr_init_buffer_origin>:
 800e0f4:	b510      	push	{r4, lr}
 800e0f6:	b082      	sub	sp, #8
 800e0f8:	2400      	movs	r4, #0
 800e0fa:	9400      	str	r4, [sp, #0]
 800e0fc:	f7ff fff0 	bl	800e0e0 <ucdr_init_buffer_origin_offset>
 800e100:	b002      	add	sp, #8
 800e102:	bd10      	pop	{r4, pc}

0800e104 <ucdr_init_buffer>:
 800e104:	2300      	movs	r3, #0
 800e106:	f7ff bff5 	b.w	800e0f4 <ucdr_init_buffer_origin>
 800e10a:	bf00      	nop

0800e10c <ucdr_alignment>:
 800e10c:	fbb0 f3f1 	udiv	r3, r0, r1
 800e110:	fb03 0011 	mls	r0, r3, r1, r0
 800e114:	1a08      	subs	r0, r1, r0
 800e116:	3901      	subs	r1, #1
 800e118:	4008      	ands	r0, r1
 800e11a:	4770      	bx	lr

0800e11c <ucdr_buffer_alignment>:
 800e11c:	7d43      	ldrb	r3, [r0, #21]
 800e11e:	428b      	cmp	r3, r1
 800e120:	d208      	bcs.n	800e134 <ucdr_buffer_alignment+0x18>
 800e122:	6900      	ldr	r0, [r0, #16]
 800e124:	fbb0 f3f1 	udiv	r3, r0, r1
 800e128:	fb01 0013 	mls	r0, r1, r3, r0
 800e12c:	1a08      	subs	r0, r1, r0
 800e12e:	3901      	subs	r1, #1
 800e130:	4008      	ands	r0, r1
 800e132:	4770      	bx	lr
 800e134:	2000      	movs	r0, #0
 800e136:	4770      	bx	lr

0800e138 <ucdr_align_to>:
 800e138:	b538      	push	{r3, r4, r5, lr}
 800e13a:	4604      	mov	r4, r0
 800e13c:	460d      	mov	r5, r1
 800e13e:	f7ff ffed 	bl	800e11c <ucdr_buffer_alignment>
 800e142:	68a3      	ldr	r3, [r4, #8]
 800e144:	6921      	ldr	r1, [r4, #16]
 800e146:	7565      	strb	r5, [r4, #21]
 800e148:	181a      	adds	r2, r3, r0
 800e14a:	6863      	ldr	r3, [r4, #4]
 800e14c:	4293      	cmp	r3, r2
 800e14e:	4408      	add	r0, r1
 800e150:	bf28      	it	cs
 800e152:	4613      	movcs	r3, r2
 800e154:	6120      	str	r0, [r4, #16]
 800e156:	60a3      	str	r3, [r4, #8]
 800e158:	bd38      	pop	{r3, r4, r5, pc}
 800e15a:	bf00      	nop

0800e15c <ucdr_buffer_length>:
 800e15c:	6882      	ldr	r2, [r0, #8]
 800e15e:	6800      	ldr	r0, [r0, #0]
 800e160:	1a10      	subs	r0, r2, r0
 800e162:	4770      	bx	lr

0800e164 <ucdr_buffer_remaining>:
 800e164:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800e168:	1a10      	subs	r0, r2, r0
 800e16a:	4770      	bx	lr

0800e16c <ucdr_check_final_buffer_behavior_array>:
 800e16c:	b538      	push	{r3, r4, r5, lr}
 800e16e:	7d83      	ldrb	r3, [r0, #22]
 800e170:	b963      	cbnz	r3, 800e18c <ucdr_check_final_buffer_behavior_array+0x20>
 800e172:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800e176:	429a      	cmp	r2, r3
 800e178:	4604      	mov	r4, r0
 800e17a:	460d      	mov	r5, r1
 800e17c:	d308      	bcc.n	800e190 <ucdr_check_final_buffer_behavior_array+0x24>
 800e17e:	b139      	cbz	r1, 800e190 <ucdr_check_final_buffer_behavior_array+0x24>
 800e180:	6983      	ldr	r3, [r0, #24]
 800e182:	b163      	cbz	r3, 800e19e <ucdr_check_final_buffer_behavior_array+0x32>
 800e184:	69c1      	ldr	r1, [r0, #28]
 800e186:	4798      	blx	r3
 800e188:	75a0      	strb	r0, [r4, #22]
 800e18a:	b108      	cbz	r0, 800e190 <ucdr_check_final_buffer_behavior_array+0x24>
 800e18c:	2000      	movs	r0, #0
 800e18e:	bd38      	pop	{r3, r4, r5, pc}
 800e190:	4620      	mov	r0, r4
 800e192:	f7ff ffe7 	bl	800e164 <ucdr_buffer_remaining>
 800e196:	42a8      	cmp	r0, r5
 800e198:	bf28      	it	cs
 800e19a:	4628      	movcs	r0, r5
 800e19c:	bd38      	pop	{r3, r4, r5, pc}
 800e19e:	2301      	movs	r3, #1
 800e1a0:	7583      	strb	r3, [r0, #22]
 800e1a2:	e7f3      	b.n	800e18c <ucdr_check_final_buffer_behavior_array+0x20>

0800e1a4 <ucdr_advance_buffer>:
 800e1a4:	b538      	push	{r3, r4, r5, lr}
 800e1a6:	4604      	mov	r4, r0
 800e1a8:	460d      	mov	r5, r1
 800e1aa:	f7ff ff57 	bl	800e05c <ucdr_check_buffer_available_for>
 800e1ae:	b178      	cbz	r0, 800e1d0 <ucdr_advance_buffer+0x2c>
 800e1b0:	6923      	ldr	r3, [r4, #16]
 800e1b2:	68a2      	ldr	r2, [r4, #8]
 800e1b4:	442b      	add	r3, r5
 800e1b6:	6123      	str	r3, [r4, #16]
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	442a      	add	r2, r5
 800e1bc:	7563      	strb	r3, [r4, #21]
 800e1be:	60a2      	str	r2, [r4, #8]
 800e1c0:	bd38      	pop	{r3, r4, r5, pc}
 800e1c2:	68a2      	ldr	r2, [r4, #8]
 800e1c4:	6923      	ldr	r3, [r4, #16]
 800e1c6:	4402      	add	r2, r0
 800e1c8:	4403      	add	r3, r0
 800e1ca:	1a2d      	subs	r5, r5, r0
 800e1cc:	60a2      	str	r2, [r4, #8]
 800e1ce:	6123      	str	r3, [r4, #16]
 800e1d0:	4629      	mov	r1, r5
 800e1d2:	2201      	movs	r2, #1
 800e1d4:	4620      	mov	r0, r4
 800e1d6:	f7ff ffc9 	bl	800e16c <ucdr_check_final_buffer_behavior_array>
 800e1da:	2800      	cmp	r0, #0
 800e1dc:	d1f1      	bne.n	800e1c2 <ucdr_advance_buffer+0x1e>
 800e1de:	2301      	movs	r3, #1
 800e1e0:	7563      	strb	r3, [r4, #21]
 800e1e2:	bd38      	pop	{r3, r4, r5, pc}

0800e1e4 <uxr_buffer_delete_entity>:
 800e1e4:	b510      	push	{r4, lr}
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	b08e      	sub	sp, #56	@ 0x38
 800e1ea:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e1ee:	2303      	movs	r3, #3
 800e1f0:	9300      	str	r3, [sp, #0]
 800e1f2:	2204      	movs	r2, #4
 800e1f4:	ab06      	add	r3, sp, #24
 800e1f6:	4604      	mov	r4, r0
 800e1f8:	9103      	str	r1, [sp, #12]
 800e1fa:	f001 fb43 	bl	800f884 <uxr_prepare_stream_to_write_submessage>
 800e1fe:	b918      	cbnz	r0, 800e208 <uxr_buffer_delete_entity+0x24>
 800e200:	4604      	mov	r4, r0
 800e202:	4620      	mov	r0, r4
 800e204:	b00e      	add	sp, #56	@ 0x38
 800e206:	bd10      	pop	{r4, pc}
 800e208:	9902      	ldr	r1, [sp, #8]
 800e20a:	aa05      	add	r2, sp, #20
 800e20c:	4620      	mov	r0, r4
 800e20e:	f001 fc6f 	bl	800faf0 <uxr_init_base_object_request>
 800e212:	a905      	add	r1, sp, #20
 800e214:	4604      	mov	r4, r0
 800e216:	a806      	add	r0, sp, #24
 800e218:	f003 fb52 	bl	80118c0 <uxr_serialize_DELETE_Payload>
 800e21c:	4620      	mov	r0, r4
 800e21e:	b00e      	add	sp, #56	@ 0x38
 800e220:	bd10      	pop	{r4, pc}
 800e222:	bf00      	nop

0800e224 <uxr_common_create_entity>:
 800e224:	b510      	push	{r4, lr}
 800e226:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800e22a:	b08c      	sub	sp, #48	@ 0x30
 800e22c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e230:	f1bc 0f01 	cmp.w	ip, #1
 800e234:	bf0c      	ite	eq
 800e236:	f003 0201 	andeq.w	r2, r3, #1
 800e23a:	2200      	movne	r2, #0
 800e23c:	330e      	adds	r3, #14
 800e23e:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800e242:	9101      	str	r1, [sp, #4]
 800e244:	441a      	add	r2, r3
 800e246:	2301      	movs	r3, #1
 800e248:	9300      	str	r3, [sp, #0]
 800e24a:	9903      	ldr	r1, [sp, #12]
 800e24c:	ab04      	add	r3, sp, #16
 800e24e:	b292      	uxth	r2, r2
 800e250:	4604      	mov	r4, r0
 800e252:	f001 fb17 	bl	800f884 <uxr_prepare_stream_to_write_submessage>
 800e256:	b918      	cbnz	r0, 800e260 <uxr_common_create_entity+0x3c>
 800e258:	4604      	mov	r4, r0
 800e25a:	4620      	mov	r0, r4
 800e25c:	b00c      	add	sp, #48	@ 0x30
 800e25e:	bd10      	pop	{r4, pc}
 800e260:	9902      	ldr	r1, [sp, #8]
 800e262:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e264:	4620      	mov	r0, r4
 800e266:	f001 fc43 	bl	800faf0 <uxr_init_base_object_request>
 800e26a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e26c:	4604      	mov	r4, r0
 800e26e:	a804      	add	r0, sp, #16
 800e270:	f003 fa82 	bl	8011778 <uxr_serialize_CREATE_Payload>
 800e274:	4620      	mov	r0, r4
 800e276:	b00c      	add	sp, #48	@ 0x30
 800e278:	bd10      	pop	{r4, pc}
 800e27a:	bf00      	nop

0800e27c <uxr_buffer_create_participant_bin>:
 800e27c:	b570      	push	{r4, r5, r6, lr}
 800e27e:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800e282:	ac11      	add	r4, sp, #68	@ 0x44
 800e284:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800e288:	2303      	movs	r3, #3
 800e28a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e28e:	7223      	strb	r3, [r4, #8]
 800e290:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800e292:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800e296:	2201      	movs	r2, #1
 800e298:	2100      	movs	r1, #0
 800e29a:	4605      	mov	r5, r0
 800e29c:	7122      	strb	r2, [r4, #4]
 800e29e:	f88d 1014 	strb.w	r1, [sp, #20]
 800e2a2:	b1cb      	cbz	r3, 800e2d8 <uxr_buffer_create_participant_bin+0x5c>
 800e2a4:	f88d 201c 	strb.w	r2, [sp, #28]
 800e2a8:	9308      	str	r3, [sp, #32]
 800e2aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e2ae:	a915      	add	r1, sp, #84	@ 0x54
 800e2b0:	a809      	add	r0, sp, #36	@ 0x24
 800e2b2:	f7ff ff27 	bl	800e104 <ucdr_init_buffer>
 800e2b6:	a905      	add	r1, sp, #20
 800e2b8:	a809      	add	r0, sp, #36	@ 0x24
 800e2ba:	f002 fe3f 	bl	8010f3c <uxr_serialize_OBJK_DomainParticipant_Binary>
 800e2be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e2c0:	9600      	str	r6, [sp, #0]
 800e2c2:	9401      	str	r4, [sp, #4]
 800e2c4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e2c8:	60e3      	str	r3, [r4, #12]
 800e2ca:	4628      	mov	r0, r5
 800e2cc:	b29b      	uxth	r3, r3
 800e2ce:	f7ff ffa9 	bl	800e224 <uxr_common_create_entity>
 800e2d2:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800e2d6:	bd70      	pop	{r4, r5, r6, pc}
 800e2d8:	f88d 301c 	strb.w	r3, [sp, #28]
 800e2dc:	e7e5      	b.n	800e2aa <uxr_buffer_create_participant_bin+0x2e>
 800e2de:	bf00      	nop

0800e2e0 <uxr_buffer_create_topic_bin>:
 800e2e0:	b570      	push	{r4, r5, r6, lr}
 800e2e2:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800e2e6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e2ea:	9105      	str	r1, [sp, #20]
 800e2ec:	4605      	mov	r5, r0
 800e2ee:	a997      	add	r1, sp, #604	@ 0x25c
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	2302      	movs	r3, #2
 800e2f4:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800e2f8:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800e2fc:	f000 fa58 	bl	800e7b0 <uxr_object_id_to_raw>
 800e300:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800e302:	9306      	str	r3, [sp, #24]
 800e304:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800e306:	930a      	str	r3, [sp, #40]	@ 0x28
 800e308:	2303      	movs	r3, #3
 800e30a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800e30e:	2301      	movs	r3, #1
 800e310:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e314:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800e318:	a917      	add	r1, sp, #92	@ 0x5c
 800e31a:	2300      	movs	r3, #0
 800e31c:	a80b      	add	r0, sp, #44	@ 0x2c
 800e31e:	f88d 301c 	strb.w	r3, [sp, #28]
 800e322:	f7ff feef 	bl	800e104 <ucdr_init_buffer>
 800e326:	a906      	add	r1, sp, #24
 800e328:	a80b      	add	r0, sp, #44	@ 0x2c
 800e32a:	f002 fe29 	bl	8010f80 <uxr_serialize_OBJK_Topic_Binary>
 800e32e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e330:	9316      	str	r3, [sp, #88]	@ 0x58
 800e332:	ac13      	add	r4, sp, #76	@ 0x4c
 800e334:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e338:	9600      	str	r6, [sp, #0]
 800e33a:	9401      	str	r4, [sp, #4]
 800e33c:	b29b      	uxth	r3, r3
 800e33e:	4628      	mov	r0, r5
 800e340:	f7ff ff70 	bl	800e224 <uxr_common_create_entity>
 800e344:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800e348:	bd70      	pop	{r4, r5, r6, pc}
 800e34a:	bf00      	nop

0800e34c <uxr_buffer_create_publisher_bin>:
 800e34c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e34e:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800e352:	4605      	mov	r5, r0
 800e354:	9105      	str	r1, [sp, #20]
 800e356:	4618      	mov	r0, r3
 800e358:	2603      	movs	r6, #3
 800e35a:	a992      	add	r1, sp, #584	@ 0x248
 800e35c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e360:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800e364:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800e368:	f000 fa22 	bl	800e7b0 <uxr_object_id_to_raw>
 800e36c:	2300      	movs	r3, #0
 800e36e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e372:	a912      	add	r1, sp, #72	@ 0x48
 800e374:	a806      	add	r0, sp, #24
 800e376:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800e37a:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800e37e:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800e382:	f7ff febf 	bl	800e104 <ucdr_init_buffer>
 800e386:	a993      	add	r1, sp, #588	@ 0x24c
 800e388:	a806      	add	r0, sp, #24
 800e38a:	f002 fead 	bl	80110e8 <uxr_serialize_OBJK_Publisher_Binary>
 800e38e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e390:	9311      	str	r3, [sp, #68]	@ 0x44
 800e392:	ac0e      	add	r4, sp, #56	@ 0x38
 800e394:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e398:	9700      	str	r7, [sp, #0]
 800e39a:	9401      	str	r4, [sp, #4]
 800e39c:	b29b      	uxth	r3, r3
 800e39e:	4628      	mov	r0, r5
 800e3a0:	f7ff ff40 	bl	800e224 <uxr_common_create_entity>
 800e3a4:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800e3a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3aa:	bf00      	nop

0800e3ac <uxr_buffer_create_subscriber_bin>:
 800e3ac:	b570      	push	{r4, r5, r6, lr}
 800e3ae:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 800e3b2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e3b6:	9105      	str	r1, [sp, #20]
 800e3b8:	4605      	mov	r5, r0
 800e3ba:	a992      	add	r1, sp, #584	@ 0x248
 800e3bc:	4618      	mov	r0, r3
 800e3be:	2304      	movs	r3, #4
 800e3c0:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 800e3c4:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 800e3c8:	f000 f9f2 	bl	800e7b0 <uxr_object_id_to_raw>
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e3d2:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800e3d6:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800e3da:	a912      	add	r1, sp, #72	@ 0x48
 800e3dc:	2303      	movs	r3, #3
 800e3de:	a806      	add	r0, sp, #24
 800e3e0:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 800e3e4:	f7ff fe8e 	bl	800e104 <ucdr_init_buffer>
 800e3e8:	a993      	add	r1, sp, #588	@ 0x24c
 800e3ea:	a806      	add	r0, sp, #24
 800e3ec:	f002 ff2c 	bl	8011248 <uxr_serialize_OBJK_Subscriber_Binary>
 800e3f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3f2:	9311      	str	r3, [sp, #68]	@ 0x44
 800e3f4:	ac0e      	add	r4, sp, #56	@ 0x38
 800e3f6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e3fa:	9600      	str	r6, [sp, #0]
 800e3fc:	9401      	str	r4, [sp, #4]
 800e3fe:	b29b      	uxth	r3, r3
 800e400:	4628      	mov	r0, r5
 800e402:	f7ff ff0f 	bl	800e224 <uxr_common_create_entity>
 800e406:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 800e40a:	bd70      	pop	{r4, r5, r6, pc}

0800e40c <uxr_buffer_create_datawriter_bin>:
 800e40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e410:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800e414:	ac1d      	add	r4, sp, #116	@ 0x74
 800e416:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e41a:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800e41e:	9105      	str	r1, [sp, #20]
 800e420:	4606      	mov	r6, r0
 800e422:	a9a1      	add	r1, sp, #644	@ 0x284
 800e424:	4618      	mov	r0, r3
 800e426:	2305      	movs	r3, #5
 800e428:	7123      	strb	r3, [r4, #4]
 800e42a:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800e42e:	2703      	movs	r7, #3
 800e430:	f000 f9be 	bl	800e7b0 <uxr_object_id_to_raw>
 800e434:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800e436:	7227      	strb	r7, [r4, #8]
 800e438:	a90e      	add	r1, sp, #56	@ 0x38
 800e43a:	f000 f9b9 	bl	800e7b0 <uxr_object_id_to_raw>
 800e43e:	2300      	movs	r3, #0
 800e440:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800e444:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800e448:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800e44c:	3d00      	subs	r5, #0
 800e44e:	bf18      	it	ne
 800e450:	2501      	movne	r5, #1
 800e452:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800e456:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800e45a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800e45e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e462:	2301      	movs	r3, #1
 800e464:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800e468:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800e46c:	bb8a      	cbnz	r2, 800e4d2 <uxr_buffer_create_datawriter_bin+0xc6>
 800e46e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e472:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800e476:	f04f 0c13 	mov.w	ip, #19
 800e47a:	250b      	movs	r5, #11
 800e47c:	2221      	movs	r2, #33	@ 0x21
 800e47e:	2111      	movs	r1, #17
 800e480:	2009      	movs	r0, #9
 800e482:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800e486:	b923      	cbnz	r3, 800e492 <uxr_buffer_create_datawriter_bin+0x86>
 800e488:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800e48c:	4672      	mov	r2, lr
 800e48e:	4661      	mov	r1, ip
 800e490:	4628      	mov	r0, r5
 800e492:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800e496:	2b01      	cmp	r3, #1
 800e498:	d025      	beq.n	800e4e6 <uxr_buffer_create_datawriter_bin+0xda>
 800e49a:	2b03      	cmp	r3, #3
 800e49c:	d029      	beq.n	800e4f2 <uxr_buffer_create_datawriter_bin+0xe6>
 800e49e:	b32b      	cbz	r3, 800e4ec <uxr_buffer_create_datawriter_bin+0xe0>
 800e4a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e4a4:	a921      	add	r1, sp, #132	@ 0x84
 800e4a6:	a806      	add	r0, sp, #24
 800e4a8:	f7ff fe2c 	bl	800e104 <ucdr_init_buffer>
 800e4ac:	a90e      	add	r1, sp, #56	@ 0x38
 800e4ae:	a806      	add	r0, sp, #24
 800e4b0:	f002 ff7c 	bl	80113ac <uxr_serialize_OBJK_DataWriter_Binary>
 800e4b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4b6:	f8cd 8000 	str.w	r8, [sp]
 800e4ba:	9401      	str	r4, [sp, #4]
 800e4bc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e4c0:	60e3      	str	r3, [r4, #12]
 800e4c2:	4630      	mov	r0, r6
 800e4c4:	b29b      	uxth	r3, r3
 800e4c6:	f7ff fead 	bl	800e224 <uxr_common_create_entity>
 800e4ca:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800e4ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4d2:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800e4d6:	f04f 0c12 	mov.w	ip, #18
 800e4da:	250a      	movs	r5, #10
 800e4dc:	2220      	movs	r2, #32
 800e4de:	2110      	movs	r1, #16
 800e4e0:	2008      	movs	r0, #8
 800e4e2:	2702      	movs	r7, #2
 800e4e4:	e7cd      	b.n	800e482 <uxr_buffer_create_datawriter_bin+0x76>
 800e4e6:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800e4ea:	e7d9      	b.n	800e4a0 <uxr_buffer_create_datawriter_bin+0x94>
 800e4ec:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800e4f0:	e7d6      	b.n	800e4a0 <uxr_buffer_create_datawriter_bin+0x94>
 800e4f2:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800e4f6:	e7d3      	b.n	800e4a0 <uxr_buffer_create_datawriter_bin+0x94>

0800e4f8 <uxr_buffer_create_datareader_bin>:
 800e4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4fc:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800e500:	ac1f      	add	r4, sp, #124	@ 0x7c
 800e502:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e506:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 800e50a:	9105      	str	r1, [sp, #20]
 800e50c:	4606      	mov	r6, r0
 800e50e:	a9a3      	add	r1, sp, #652	@ 0x28c
 800e510:	4618      	mov	r0, r3
 800e512:	2306      	movs	r3, #6
 800e514:	7123      	strb	r3, [r4, #4]
 800e516:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 800e51a:	2703      	movs	r7, #3
 800e51c:	f000 f948 	bl	800e7b0 <uxr_object_id_to_raw>
 800e520:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 800e522:	7227      	strb	r7, [r4, #8]
 800e524:	a90e      	add	r1, sp, #56	@ 0x38
 800e526:	f000 f943 	bl	800e7b0 <uxr_object_id_to_raw>
 800e52a:	2300      	movs	r3, #0
 800e52c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800e530:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 800e534:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 800e538:	3d00      	subs	r5, #0
 800e53a:	bf18      	it	ne
 800e53c:	2501      	movne	r5, #1
 800e53e:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800e542:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800e546:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800e54a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800e54e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e552:	2301      	movs	r3, #1
 800e554:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800e558:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800e55c:	bb8a      	cbnz	r2, 800e5c2 <uxr_buffer_create_datareader_bin+0xca>
 800e55e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e562:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800e566:	f04f 0c13 	mov.w	ip, #19
 800e56a:	250b      	movs	r5, #11
 800e56c:	2221      	movs	r2, #33	@ 0x21
 800e56e:	2111      	movs	r1, #17
 800e570:	2009      	movs	r0, #9
 800e572:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 800e576:	b923      	cbnz	r3, 800e582 <uxr_buffer_create_datareader_bin+0x8a>
 800e578:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800e57c:	4672      	mov	r2, lr
 800e57e:	4661      	mov	r1, ip
 800e580:	4628      	mov	r0, r5
 800e582:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 800e586:	2b01      	cmp	r3, #1
 800e588:	d025      	beq.n	800e5d6 <uxr_buffer_create_datareader_bin+0xde>
 800e58a:	2b03      	cmp	r3, #3
 800e58c:	d029      	beq.n	800e5e2 <uxr_buffer_create_datareader_bin+0xea>
 800e58e:	b32b      	cbz	r3, 800e5dc <uxr_buffer_create_datareader_bin+0xe4>
 800e590:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e594:	a923      	add	r1, sp, #140	@ 0x8c
 800e596:	a806      	add	r0, sp, #24
 800e598:	f7ff fdb4 	bl	800e104 <ucdr_init_buffer>
 800e59c:	a90e      	add	r1, sp, #56	@ 0x38
 800e59e:	a806      	add	r0, sp, #24
 800e5a0:	f002 fec8 	bl	8011334 <uxr_serialize_OBJK_DataReader_Binary>
 800e5a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5a6:	f8cd 8000 	str.w	r8, [sp]
 800e5aa:	9401      	str	r4, [sp, #4]
 800e5ac:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e5b0:	60e3      	str	r3, [r4, #12]
 800e5b2:	4630      	mov	r0, r6
 800e5b4:	b29b      	uxth	r3, r3
 800e5b6:	f7ff fe35 	bl	800e224 <uxr_common_create_entity>
 800e5ba:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800e5be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5c2:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800e5c6:	f04f 0c12 	mov.w	ip, #18
 800e5ca:	250a      	movs	r5, #10
 800e5cc:	2220      	movs	r2, #32
 800e5ce:	2110      	movs	r1, #16
 800e5d0:	2008      	movs	r0, #8
 800e5d2:	2702      	movs	r7, #2
 800e5d4:	e7cd      	b.n	800e572 <uxr_buffer_create_datareader_bin+0x7a>
 800e5d6:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800e5da:	e7d9      	b.n	800e590 <uxr_buffer_create_datareader_bin+0x98>
 800e5dc:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800e5e0:	e7d6      	b.n	800e590 <uxr_buffer_create_datareader_bin+0x98>
 800e5e2:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800e5e6:	e7d3      	b.n	800e590 <uxr_buffer_create_datareader_bin+0x98>

0800e5e8 <get_custom_error>:
 800e5e8:	4b01      	ldr	r3, [pc, #4]	@ (800e5f0 <get_custom_error+0x8>)
 800e5ea:	7818      	ldrb	r0, [r3, #0]
 800e5ec:	4770      	bx	lr
 800e5ee:	bf00      	nop
 800e5f0:	2000abec 	.word	0x2000abec

0800e5f4 <recv_custom_msg>:
 800e5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5f8:	4693      	mov	fp, r2
 800e5fa:	b089      	sub	sp, #36	@ 0x24
 800e5fc:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800e600:	9305      	str	r3, [sp, #20]
 800e602:	468a      	mov	sl, r1
 800e604:	2100      	movs	r1, #0
 800e606:	4604      	mov	r4, r0
 800e608:	f88d 101e 	strb.w	r1, [sp, #30]
 800e60c:	b322      	cbz	r2, 800e658 <recv_custom_msg+0x64>
 800e60e:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800e612:	f10d 081f 	add.w	r8, sp, #31
 800e616:	af05      	add	r7, sp, #20
 800e618:	f10d 061e 	add.w	r6, sp, #30
 800e61c:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800e620:	e002      	b.n	800e628 <recv_custom_msg+0x34>
 800e622:	9b05      	ldr	r3, [sp, #20]
 800e624:	2b00      	cmp	r3, #0
 800e626:	dd0f      	ble.n	800e648 <recv_custom_msg+0x54>
 800e628:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800e62c:	4623      	mov	r3, r4
 800e62e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800e632:	e9cd 5600 	strd	r5, r6, [sp]
 800e636:	4622      	mov	r2, r4
 800e638:	4648      	mov	r0, r9
 800e63a:	f001 fc87 	bl	800ff4c <uxr_read_framed_msg>
 800e63e:	2800      	cmp	r0, #0
 800e640:	d0ef      	beq.n	800e622 <recv_custom_msg+0x2e>
 800e642:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e646:	b1b3      	cbz	r3, 800e676 <recv_custom_msg+0x82>
 800e648:	4b0f      	ldr	r3, [pc, #60]	@ (800e688 <recv_custom_msg+0x94>)
 800e64a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800e64e:	701a      	strb	r2, [r3, #0]
 800e650:	2000      	movs	r0, #0
 800e652:	b009      	add	sp, #36	@ 0x24
 800e654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e658:	f10d 021f 	add.w	r2, sp, #31
 800e65c:	9200      	str	r2, [sp, #0]
 800e65e:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800e662:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e666:	4601      	mov	r1, r0
 800e668:	47a8      	blx	r5
 800e66a:	2800      	cmp	r0, #0
 800e66c:	d0ec      	beq.n	800e648 <recv_custom_msg+0x54>
 800e66e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d1e8      	bne.n	800e648 <recv_custom_msg+0x54>
 800e676:	f8cb 0000 	str.w	r0, [fp]
 800e67a:	2001      	movs	r0, #1
 800e67c:	f8ca 4000 	str.w	r4, [sl]
 800e680:	b009      	add	sp, #36	@ 0x24
 800e682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e686:	bf00      	nop
 800e688:	2000abec 	.word	0x2000abec

0800e68c <send_custom_msg>:
 800e68c:	b530      	push	{r4, r5, lr}
 800e68e:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800e692:	b087      	sub	sp, #28
 800e694:	4615      	mov	r5, r2
 800e696:	b974      	cbnz	r4, 800e6b6 <send_custom_msg+0x2a>
 800e698:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800e69c:	f10d 0317 	add.w	r3, sp, #23
 800e6a0:	47a0      	blx	r4
 800e6a2:	b108      	cbz	r0, 800e6a8 <send_custom_msg+0x1c>
 800e6a4:	42a8      	cmp	r0, r5
 800e6a6:	d015      	beq.n	800e6d4 <send_custom_msg+0x48>
 800e6a8:	4b0c      	ldr	r3, [pc, #48]	@ (800e6dc <send_custom_msg+0x50>)
 800e6aa:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800e6ae:	701a      	strb	r2, [r3, #0]
 800e6b0:	2000      	movs	r0, #0
 800e6b2:	b007      	add	sp, #28
 800e6b4:	bd30      	pop	{r4, r5, pc}
 800e6b6:	460b      	mov	r3, r1
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	f10d 0117 	add.w	r1, sp, #23
 800e6be:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800e6c2:	4602      	mov	r2, r0
 800e6c4:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800e6c8:	9500      	str	r5, [sp, #0]
 800e6ca:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800e6ce:	f001 fa45 	bl	800fb5c <uxr_write_framed_msg>
 800e6d2:	e7e6      	b.n	800e6a2 <send_custom_msg+0x16>
 800e6d4:	2001      	movs	r0, #1
 800e6d6:	b007      	add	sp, #28
 800e6d8:	bd30      	pop	{r4, r5, pc}
 800e6da:	bf00      	nop
 800e6dc:	2000abec 	.word	0x2000abec

0800e6e0 <uxr_set_custom_transport_callbacks>:
 800e6e0:	b410      	push	{r4}
 800e6e2:	9c01      	ldr	r4, [sp, #4]
 800e6e4:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800e6e8:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800e6ec:	9b02      	ldr	r3, [sp, #8]
 800e6ee:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800e6f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e6f6:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800e6fa:	4770      	bx	lr

0800e6fc <uxr_init_custom_transport>:
 800e6fc:	b538      	push	{r3, r4, r5, lr}
 800e6fe:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800e702:	b303      	cbz	r3, 800e746 <uxr_init_custom_transport+0x4a>
 800e704:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800e708:	4604      	mov	r4, r0
 800e70a:	b1e2      	cbz	r2, 800e746 <uxr_init_custom_transport+0x4a>
 800e70c:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800e710:	b1ca      	cbz	r2, 800e746 <uxr_init_custom_transport+0x4a>
 800e712:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800e716:	b1b2      	cbz	r2, 800e746 <uxr_init_custom_transport+0x4a>
 800e718:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800e71c:	4798      	blx	r3
 800e71e:	4605      	mov	r5, r0
 800e720:	b188      	cbz	r0, 800e746 <uxr_init_custom_transport+0x4a>
 800e722:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800e726:	b98b      	cbnz	r3, 800e74c <uxr_init_custom_transport+0x50>
 800e728:	490b      	ldr	r1, [pc, #44]	@ (800e758 <uxr_init_custom_transport+0x5c>)
 800e72a:	4b0c      	ldr	r3, [pc, #48]	@ (800e75c <uxr_init_custom_transport+0x60>)
 800e72c:	4a0c      	ldr	r2, [pc, #48]	@ (800e760 <uxr_init_custom_transport+0x64>)
 800e72e:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800e732:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e736:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800e73a:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800e73e:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800e742:	4628      	mov	r0, r5
 800e744:	bd38      	pop	{r3, r4, r5, pc}
 800e746:	2500      	movs	r5, #0
 800e748:	4628      	mov	r0, r5
 800e74a:	bd38      	pop	{r3, r4, r5, pc}
 800e74c:	2100      	movs	r1, #0
 800e74e:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800e752:	f001 f9fd 	bl	800fb50 <uxr_init_framing_io>
 800e756:	e7e7      	b.n	800e728 <uxr_init_custom_transport+0x2c>
 800e758:	0800e68d 	.word	0x0800e68d
 800e75c:	0800e5f5 	.word	0x0800e5f5
 800e760:	0800e5e9 	.word	0x0800e5e9

0800e764 <uxr_close_custom_transport>:
 800e764:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800e768:	4718      	bx	r3
 800e76a:	bf00      	nop

0800e76c <uxr_object_id>:
 800e76c:	b082      	sub	sp, #8
 800e76e:	2300      	movs	r3, #0
 800e770:	f88d 1006 	strb.w	r1, [sp, #6]
 800e774:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e778:	f360 030f 	bfi	r3, r0, #0, #16
 800e77c:	f362 431f 	bfi	r3, r2, #16, #16
 800e780:	4618      	mov	r0, r3
 800e782:	b002      	add	sp, #8
 800e784:	4770      	bx	lr
 800e786:	bf00      	nop

0800e788 <uxr_object_id_from_raw>:
 800e788:	7843      	ldrb	r3, [r0, #1]
 800e78a:	7801      	ldrb	r1, [r0, #0]
 800e78c:	b082      	sub	sp, #8
 800e78e:	f003 020f 	and.w	r2, r3, #15
 800e792:	f88d 2006 	strb.w	r2, [sp, #6]
 800e796:	091b      	lsrs	r3, r3, #4
 800e798:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e79c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800e7a0:	2000      	movs	r0, #0
 800e7a2:	f363 000f 	bfi	r0, r3, #0, #16
 800e7a6:	f362 401f 	bfi	r0, r2, #16, #16
 800e7aa:	b002      	add	sp, #8
 800e7ac:	4770      	bx	lr
 800e7ae:	bf00      	nop

0800e7b0 <uxr_object_id_to_raw>:
 800e7b0:	4602      	mov	r2, r0
 800e7b2:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800e7b6:	b082      	sub	sp, #8
 800e7b8:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800e7bc:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800e7c0:	f881 c000 	strb.w	ip, [r1]
 800e7c4:	7048      	strb	r0, [r1, #1]
 800e7c6:	b002      	add	sp, #8
 800e7c8:	4770      	bx	lr
 800e7ca:	bf00      	nop

0800e7cc <uxr_buffer_request_data>:
 800e7cc:	b530      	push	{r4, r5, lr}
 800e7ce:	b095      	sub	sp, #84	@ 0x54
 800e7d0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800e7d4:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800e7d6:	9303      	str	r3, [sp, #12]
 800e7d8:	2200      	movs	r2, #0
 800e7da:	2d00      	cmp	r5, #0
 800e7dc:	bf14      	ite	ne
 800e7de:	2101      	movne	r1, #1
 800e7e0:	4611      	moveq	r1, r2
 800e7e2:	4604      	mov	r4, r0
 800e7e4:	f88d 301c 	strb.w	r3, [sp, #28]
 800e7e8:	f88d 201d 	strb.w	r2, [sp, #29]
 800e7ec:	f88d 201e 	strb.w	r2, [sp, #30]
 800e7f0:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800e7f4:	d021      	beq.n	800e83a <uxr_buffer_request_data+0x6e>
 800e7f6:	682a      	ldr	r2, [r5, #0]
 800e7f8:	686b      	ldr	r3, [r5, #4]
 800e7fa:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 800e7fe:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800e802:	2210      	movs	r2, #16
 800e804:	2308      	movs	r3, #8
 800e806:	2100      	movs	r1, #0
 800e808:	e9cd 3100 	strd	r3, r1, [sp]
 800e80c:	4620      	mov	r0, r4
 800e80e:	9905      	ldr	r1, [sp, #20]
 800e810:	ab0c      	add	r3, sp, #48	@ 0x30
 800e812:	f001 f837 	bl	800f884 <uxr_prepare_stream_to_write_submessage>
 800e816:	b918      	cbnz	r0, 800e820 <uxr_buffer_request_data+0x54>
 800e818:	4604      	mov	r4, r0
 800e81a:	4620      	mov	r0, r4
 800e81c:	b015      	add	sp, #84	@ 0x54
 800e81e:	bd30      	pop	{r4, r5, pc}
 800e820:	9904      	ldr	r1, [sp, #16]
 800e822:	aa06      	add	r2, sp, #24
 800e824:	4620      	mov	r0, r4
 800e826:	f001 f963 	bl	800faf0 <uxr_init_base_object_request>
 800e82a:	a906      	add	r1, sp, #24
 800e82c:	4604      	mov	r4, r0
 800e82e:	a80c      	add	r0, sp, #48	@ 0x30
 800e830:	f003 f8f0 	bl	8011a14 <uxr_serialize_READ_DATA_Payload>
 800e834:	4620      	mov	r0, r4
 800e836:	b015      	add	sp, #84	@ 0x54
 800e838:	bd30      	pop	{r4, r5, pc}
 800e83a:	2208      	movs	r2, #8
 800e83c:	e7e2      	b.n	800e804 <uxr_buffer_request_data+0x38>
 800e83e:	bf00      	nop

0800e840 <uxr_buffer_cancel_data>:
 800e840:	b510      	push	{r4, lr}
 800e842:	b094      	sub	sp, #80	@ 0x50
 800e844:	2300      	movs	r3, #0
 800e846:	9202      	str	r2, [sp, #8]
 800e848:	9205      	str	r2, [sp, #20]
 800e84a:	9301      	str	r3, [sp, #4]
 800e84c:	2201      	movs	r2, #1
 800e84e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e852:	f88d 301e 	strb.w	r3, [sp, #30]
 800e856:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800e85a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800e85e:	2308      	movs	r3, #8
 800e860:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800e864:	9300      	str	r3, [sp, #0]
 800e866:	2210      	movs	r2, #16
 800e868:	ab0c      	add	r3, sp, #48	@ 0x30
 800e86a:	4604      	mov	r4, r0
 800e86c:	9103      	str	r1, [sp, #12]
 800e86e:	f001 f809 	bl	800f884 <uxr_prepare_stream_to_write_submessage>
 800e872:	b918      	cbnz	r0, 800e87c <uxr_buffer_cancel_data+0x3c>
 800e874:	4604      	mov	r4, r0
 800e876:	4620      	mov	r0, r4
 800e878:	b014      	add	sp, #80	@ 0x50
 800e87a:	bd10      	pop	{r4, pc}
 800e87c:	9905      	ldr	r1, [sp, #20]
 800e87e:	aa06      	add	r2, sp, #24
 800e880:	4620      	mov	r0, r4
 800e882:	f001 f935 	bl	800faf0 <uxr_init_base_object_request>
 800e886:	a906      	add	r1, sp, #24
 800e888:	4604      	mov	r4, r0
 800e88a:	a80c      	add	r0, sp, #48	@ 0x30
 800e88c:	f003 f8c2 	bl	8011a14 <uxr_serialize_READ_DATA_Payload>
 800e890:	4620      	mov	r0, r4
 800e892:	b014      	add	sp, #80	@ 0x50
 800e894:	bd10      	pop	{r4, pc}
 800e896:	bf00      	nop

0800e898 <read_submessage_format>:
 800e898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e89c:	b095      	sub	sp, #84	@ 0x54
 800e89e:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800e8a2:	b113      	cbz	r3, 800e8aa <read_submessage_format+0x12>
 800e8a4:	b015      	add	sp, #84	@ 0x54
 800e8a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8aa:	460c      	mov	r4, r1
 800e8ac:	4615      	mov	r5, r2
 800e8ae:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800e8b2:	4607      	mov	r7, r0
 800e8b4:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800e8b6:	9004      	str	r0, [sp, #16]
 800e8b8:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800e8ba:	9005      	str	r0, [sp, #20]
 800e8bc:	1a52      	subs	r2, r2, r1
 800e8be:	a80c      	add	r0, sp, #48	@ 0x30
 800e8c0:	4699      	mov	r9, r3
 800e8c2:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800e8c6:	f7ff fc1d 	bl	800e104 <ucdr_init_buffer>
 800e8ca:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e8ce:	a80c      	add	r0, sp, #48	@ 0x30
 800e8d0:	f7ff fbec 	bl	800e0ac <ucdr_set_on_full_buffer_callback>
 800e8d4:	69e2      	ldr	r2, [r4, #28]
 800e8d6:	b19a      	cbz	r2, 800e900 <read_submessage_format+0x68>
 800e8d8:	f1b8 0f07 	cmp.w	r8, #7
 800e8dc:	f882 9014 	strb.w	r9, [r2, #20]
 800e8e0:	d040      	beq.n	800e964 <read_submessage_format+0xcc>
 800e8e2:	f1b8 0f08 	cmp.w	r8, #8
 800e8e6:	d02e      	beq.n	800e946 <read_submessage_format+0xae>
 800e8e8:	f1b8 0f06 	cmp.w	r8, #6
 800e8ec:	d011      	beq.n	800e912 <read_submessage_format+0x7a>
 800e8ee:	2301      	movs	r3, #1
 800e8f0:	7513      	strb	r3, [r2, #20]
 800e8f2:	4629      	mov	r1, r5
 800e8f4:	4620      	mov	r0, r4
 800e8f6:	f7ff fc55 	bl	800e1a4 <ucdr_advance_buffer>
 800e8fa:	b015      	add	sp, #84	@ 0x54
 800e8fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e900:	f1b8 0f07 	cmp.w	r8, #7
 800e904:	d02e      	beq.n	800e964 <read_submessage_format+0xcc>
 800e906:	f1b8 0f08 	cmp.w	r8, #8
 800e90a:	d01c      	beq.n	800e946 <read_submessage_format+0xae>
 800e90c:	f1b8 0f06 	cmp.w	r8, #6
 800e910:	d1ef      	bne.n	800e8f2 <read_submessage_format+0x5a>
 800e912:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800e916:	f1b8 0f00 	cmp.w	r8, #0
 800e91a:	d011      	beq.n	800e940 <read_submessage_format+0xa8>
 800e91c:	ab0c      	add	r3, sp, #48	@ 0x30
 800e91e:	e9cd 3500 	strd	r3, r5, [sp]
 800e922:	2306      	movs	r3, #6
 800e924:	f88d 3016 	strb.w	r3, [sp, #22]
 800e928:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e92c:	9302      	str	r3, [sp, #8]
 800e92e:	4632      	mov	r2, r6
 800e930:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800e934:	4638      	mov	r0, r7
 800e936:	47c0      	blx	r8
 800e938:	2301      	movs	r3, #1
 800e93a:	69e2      	ldr	r2, [r4, #28]
 800e93c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800e940:	2a00      	cmp	r2, #0
 800e942:	d1d4      	bne.n	800e8ee <read_submessage_format+0x56>
 800e944:	e7d5      	b.n	800e8f2 <read_submessage_format+0x5a>
 800e946:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d0f8      	beq.n	800e940 <read_submessage_format+0xa8>
 800e94e:	a906      	add	r1, sp, #24
 800e950:	a80c      	add	r0, sp, #48	@ 0x30
 800e952:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800e956:	f003 f923 	bl	8011ba0 <uxr_deserialize_SampleIdentity>
 800e95a:	b9a0      	cbnz	r0, 800e986 <read_submessage_format+0xee>
 800e95c:	69e2      	ldr	r2, [r4, #28]
 800e95e:	2a00      	cmp	r2, #0
 800e960:	d1c5      	bne.n	800e8ee <read_submessage_format+0x56>
 800e962:	e7c6      	b.n	800e8f2 <read_submessage_format+0x5a>
 800e964:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e968:	b13b      	cbz	r3, 800e97a <read_submessage_format+0xe2>
 800e96a:	a906      	add	r1, sp, #24
 800e96c:	a80c      	add	r0, sp, #48	@ 0x30
 800e96e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800e972:	f002 fde9 	bl	8011548 <uxr_deserialize_BaseObjectRequest>
 800e976:	bb60      	cbnz	r0, 800e9d2 <read_submessage_format+0x13a>
 800e978:	69e2      	ldr	r2, [r4, #28]
 800e97a:	68a3      	ldr	r3, [r4, #8]
 800e97c:	442b      	add	r3, r5
 800e97e:	60a3      	str	r3, [r4, #8]
 800e980:	2a00      	cmp	r2, #0
 800e982:	d1b4      	bne.n	800e8ee <read_submessage_format+0x56>
 800e984:	e7b5      	b.n	800e8f2 <read_submessage_format+0x5a>
 800e986:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800e98a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e98c:	1a52      	subs	r2, r2, r1
 800e98e:	eba8 0803 	sub.w	r8, r8, r3
 800e992:	a80c      	add	r0, sp, #48	@ 0x30
 800e994:	f7ff fbb6 	bl	800e104 <ucdr_init_buffer>
 800e998:	44a8      	add	r8, r5
 800e99a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e99e:	a80c      	add	r0, sp, #48	@ 0x30
 800e9a0:	f7ff fb84 	bl	800e0ac <ucdr_set_on_full_buffer_callback>
 800e9a4:	fa1f f888 	uxth.w	r8, r8
 800e9a8:	ab0c      	add	r3, sp, #48	@ 0x30
 800e9aa:	9300      	str	r3, [sp, #0]
 800e9ac:	f8cd 8004 	str.w	r8, [sp, #4]
 800e9b0:	2108      	movs	r1, #8
 800e9b2:	f88d 1016 	strb.w	r1, [sp, #22]
 800e9b6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800e9ba:	9102      	str	r1, [sp, #8]
 800e9bc:	ab06      	add	r3, sp, #24
 800e9be:	4632      	mov	r2, r6
 800e9c0:	9905      	ldr	r1, [sp, #20]
 800e9c2:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800e9c6:	4638      	mov	r0, r7
 800e9c8:	47b0      	blx	r6
 800e9ca:	2301      	movs	r3, #1
 800e9cc:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800e9d0:	e7c4      	b.n	800e95c <read_submessage_format+0xc4>
 800e9d2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800e9d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e9d8:	1a52      	subs	r2, r2, r1
 800e9da:	a80c      	add	r0, sp, #48	@ 0x30
 800e9dc:	eba8 0803 	sub.w	r8, r8, r3
 800e9e0:	f7ff fb90 	bl	800e104 <ucdr_init_buffer>
 800e9e4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800e9e8:	a80c      	add	r0, sp, #48	@ 0x30
 800e9ea:	f7ff fb5f 	bl	800e0ac <ucdr_set_on_full_buffer_callback>
 800e9ee:	ab0c      	add	r3, sp, #48	@ 0x30
 800e9f0:	9300      	str	r3, [sp, #0]
 800e9f2:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800e9f6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800e9fa:	44a8      	add	r8, r5
 800e9fc:	fa1f f888 	uxth.w	r8, r8
 800ea00:	f8cd 8004 	str.w	r8, [sp, #4]
 800ea04:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800ea08:	2107      	movs	r1, #7
 800ea0a:	f88d 1016 	strb.w	r1, [sp, #22]
 800ea0e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800ea12:	9102      	str	r1, [sp, #8]
 800ea14:	4632      	mov	r2, r6
 800ea16:	b29b      	uxth	r3, r3
 800ea18:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800ea1c:	9905      	ldr	r1, [sp, #20]
 800ea1e:	4638      	mov	r0, r7
 800ea20:	47b0      	blx	r6
 800ea22:	2301      	movs	r3, #1
 800ea24:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800ea28:	e7a6      	b.n	800e978 <read_submessage_format+0xe0>
 800ea2a:	bf00      	nop

0800ea2c <on_get_fragmentation_info>:
 800ea2c:	b500      	push	{lr}
 800ea2e:	b08b      	sub	sp, #44	@ 0x2c
 800ea30:	4601      	mov	r1, r0
 800ea32:	2204      	movs	r2, #4
 800ea34:	a802      	add	r0, sp, #8
 800ea36:	f7ff fb65 	bl	800e104 <ucdr_init_buffer>
 800ea3a:	f10d 0305 	add.w	r3, sp, #5
 800ea3e:	f10d 0206 	add.w	r2, sp, #6
 800ea42:	a901      	add	r1, sp, #4
 800ea44:	a802      	add	r0, sp, #8
 800ea46:	f001 fe67 	bl	8010718 <uxr_read_submessage_header>
 800ea4a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ea4e:	2b0d      	cmp	r3, #13
 800ea50:	d003      	beq.n	800ea5a <on_get_fragmentation_info+0x2e>
 800ea52:	2000      	movs	r0, #0
 800ea54:	b00b      	add	sp, #44	@ 0x2c
 800ea56:	f85d fb04 	ldr.w	pc, [sp], #4
 800ea5a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ea5e:	f013 0f02 	tst.w	r3, #2
 800ea62:	bf14      	ite	ne
 800ea64:	2002      	movne	r0, #2
 800ea66:	2001      	moveq	r0, #1
 800ea68:	b00b      	add	sp, #44	@ 0x2c
 800ea6a:	f85d fb04 	ldr.w	pc, [sp], #4
 800ea6e:	bf00      	nop

0800ea70 <read_submessage_get_info>:
 800ea70:	b570      	push	{r4, r5, r6, lr}
 800ea72:	2500      	movs	r5, #0
 800ea74:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800ea78:	4604      	mov	r4, r0
 800ea7a:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800ea7e:	460e      	mov	r6, r1
 800ea80:	a810      	add	r0, sp, #64	@ 0x40
 800ea82:	4629      	mov	r1, r5
 800ea84:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800ea88:	f009 f8a6 	bl	8017bd8 <memset>
 800ea8c:	a903      	add	r1, sp, #12
 800ea8e:	4630      	mov	r0, r6
 800ea90:	f002 ff02 	bl	8011898 <uxr_deserialize_GET_INFO_Payload>
 800ea94:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800ea98:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800ea9c:	4620      	mov	r0, r4
 800ea9e:	f001 f81f 	bl	800fae0 <uxr_session_header_offset>
 800eaa2:	462b      	mov	r3, r5
 800eaa4:	9000      	str	r0, [sp, #0]
 800eaa6:	220c      	movs	r2, #12
 800eaa8:	a905      	add	r1, sp, #20
 800eaaa:	a808      	add	r0, sp, #32
 800eaac:	f7ff fb18 	bl	800e0e0 <ucdr_init_buffer_origin_offset>
 800eab0:	a910      	add	r1, sp, #64	@ 0x40
 800eab2:	a808      	add	r0, sp, #32
 800eab4:	f002 ff62 	bl	801197c <uxr_serialize_INFO_Payload>
 800eab8:	9b08      	ldr	r3, [sp, #32]
 800eaba:	462a      	mov	r2, r5
 800eabc:	4629      	mov	r1, r5
 800eabe:	4620      	mov	r0, r4
 800eac0:	f000 ffb8 	bl	800fa34 <uxr_stamp_session_header>
 800eac4:	a808      	add	r0, sp, #32
 800eac6:	f7ff fb49 	bl	800e15c <ucdr_buffer_length>
 800eaca:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800eacc:	4602      	mov	r2, r0
 800eace:	a905      	add	r1, sp, #20
 800ead0:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ead4:	47a0      	blx	r4
 800ead6:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800eada:	bd70      	pop	{r4, r5, r6, pc}

0800eadc <write_submessage_acknack.isra.0>:
 800eadc:	b570      	push	{r4, r5, r6, lr}
 800eade:	b092      	sub	sp, #72	@ 0x48
 800eae0:	4605      	mov	r5, r0
 800eae2:	460e      	mov	r6, r1
 800eae4:	4614      	mov	r4, r2
 800eae6:	f000 fffb 	bl	800fae0 <uxr_session_header_offset>
 800eaea:	a905      	add	r1, sp, #20
 800eaec:	9000      	str	r0, [sp, #0]
 800eaee:	2300      	movs	r3, #0
 800eaf0:	a80a      	add	r0, sp, #40	@ 0x28
 800eaf2:	2211      	movs	r2, #17
 800eaf4:	f7ff faf4 	bl	800e0e0 <ucdr_init_buffer_origin_offset>
 800eaf8:	2218      	movs	r2, #24
 800eafa:	fb02 5404 	mla	r4, r2, r4, r5
 800eafe:	2300      	movs	r3, #0
 800eb00:	2205      	movs	r2, #5
 800eb02:	3450      	adds	r4, #80	@ 0x50
 800eb04:	210a      	movs	r1, #10
 800eb06:	a80a      	add	r0, sp, #40	@ 0x28
 800eb08:	f001 fdec 	bl	80106e4 <uxr_buffer_submessage_header>
 800eb0c:	a903      	add	r1, sp, #12
 800eb0e:	4620      	mov	r0, r4
 800eb10:	f007 fcda 	bl	80164c8 <uxr_compute_acknack>
 800eb14:	ba40      	rev16	r0, r0
 800eb16:	f8ad 000e 	strh.w	r0, [sp, #14]
 800eb1a:	a903      	add	r1, sp, #12
 800eb1c:	a80a      	add	r0, sp, #40	@ 0x28
 800eb1e:	f88d 6010 	strb.w	r6, [sp, #16]
 800eb22:	f002 ff9b 	bl	8011a5c <uxr_serialize_ACKNACK_Payload>
 800eb26:	2200      	movs	r2, #0
 800eb28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb2a:	4611      	mov	r1, r2
 800eb2c:	4628      	mov	r0, r5
 800eb2e:	f000 ff81 	bl	800fa34 <uxr_stamp_session_header>
 800eb32:	a80a      	add	r0, sp, #40	@ 0x28
 800eb34:	f7ff fb12 	bl	800e15c <ucdr_buffer_length>
 800eb38:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800eb3a:	4602      	mov	r2, r0
 800eb3c:	a905      	add	r1, sp, #20
 800eb3e:	e9d3 0400 	ldrd	r0, r4, [r3]
 800eb42:	47a0      	blx	r4
 800eb44:	b012      	add	sp, #72	@ 0x48
 800eb46:	bd70      	pop	{r4, r5, r6, pc}

0800eb48 <uxr_init_session>:
 800eb48:	b510      	push	{r4, lr}
 800eb4a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800eb80 <uxr_init_session+0x38>
 800eb4e:	2300      	movs	r3, #0
 800eb50:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800eb54:	4604      	mov	r4, r0
 800eb56:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800eb5a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800eb5e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800eb62:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800eb66:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800eb6a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800eb6e:	2181      	movs	r1, #129	@ 0x81
 800eb70:	f000 fecc 	bl	800f90c <uxr_init_session_info>
 800eb74:	f104 0008 	add.w	r0, r4, #8
 800eb78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb7c:	f001 bcce 	b.w	801051c <uxr_init_stream_storage>
	...

0800eb88 <uxr_set_status_callback>:
 800eb88:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800eb8c:	4770      	bx	lr
 800eb8e:	bf00      	nop

0800eb90 <uxr_set_topic_callback>:
 800eb90:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800eb94:	4770      	bx	lr
 800eb96:	bf00      	nop

0800eb98 <uxr_set_request_callback>:
 800eb98:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800eb9c:	4770      	bx	lr
 800eb9e:	bf00      	nop

0800eba0 <uxr_set_reply_callback>:
 800eba0:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800eba4:	4770      	bx	lr
 800eba6:	bf00      	nop

0800eba8 <uxr_create_output_best_effort_stream>:
 800eba8:	b510      	push	{r4, lr}
 800ebaa:	b084      	sub	sp, #16
 800ebac:	e9cd 2100 	strd	r2, r1, [sp]
 800ebb0:	4604      	mov	r4, r0
 800ebb2:	f000 ff95 	bl	800fae0 <uxr_session_header_offset>
 800ebb6:	e9dd 2100 	ldrd	r2, r1, [sp]
 800ebba:	4603      	mov	r3, r0
 800ebbc:	f104 0008 	add.w	r0, r4, #8
 800ebc0:	b004      	add	sp, #16
 800ebc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebc6:	f001 bcf3 	b.w	80105b0 <uxr_add_output_best_effort_buffer>
 800ebca:	bf00      	nop

0800ebcc <uxr_create_output_reliable_stream>:
 800ebcc:	b510      	push	{r4, lr}
 800ebce:	b088      	sub	sp, #32
 800ebd0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800ebd4:	4604      	mov	r4, r0
 800ebd6:	9303      	str	r3, [sp, #12]
 800ebd8:	f000 ff82 	bl	800fae0 <uxr_session_header_offset>
 800ebdc:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800ebe0:	9000      	str	r0, [sp, #0]
 800ebe2:	9905      	ldr	r1, [sp, #20]
 800ebe4:	f104 0008 	add.w	r0, r4, #8
 800ebe8:	f001 fcf6 	bl	80105d8 <uxr_add_output_reliable_buffer>
 800ebec:	2200      	movs	r2, #0
 800ebee:	b2c3      	uxtb	r3, r0
 800ebf0:	f363 0207 	bfi	r2, r3, #0, #8
 800ebf4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800ebf8:	f363 220f 	bfi	r2, r3, #8, #8
 800ebfc:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800ec00:	f363 4217 	bfi	r2, r3, #16, #8
 800ec04:	0e03      	lsrs	r3, r0, #24
 800ec06:	f363 621f 	bfi	r2, r3, #24, #8
 800ec0a:	4610      	mov	r0, r2
 800ec0c:	b008      	add	sp, #32
 800ec0e:	bd10      	pop	{r4, pc}

0800ec10 <uxr_create_input_best_effort_stream>:
 800ec10:	b082      	sub	sp, #8
 800ec12:	3008      	adds	r0, #8
 800ec14:	b002      	add	sp, #8
 800ec16:	f001 bcf9 	b.w	801060c <uxr_add_input_best_effort_buffer>
 800ec1a:	bf00      	nop

0800ec1c <uxr_create_input_reliable_stream>:
 800ec1c:	b510      	push	{r4, lr}
 800ec1e:	b084      	sub	sp, #16
 800ec20:	4c0b      	ldr	r4, [pc, #44]	@ (800ec50 <uxr_create_input_reliable_stream+0x34>)
 800ec22:	9400      	str	r4, [sp, #0]
 800ec24:	3008      	adds	r0, #8
 800ec26:	f001 fd07 	bl	8010638 <uxr_add_input_reliable_buffer>
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	b2c3      	uxtb	r3, r0
 800ec2e:	f363 0207 	bfi	r2, r3, #0, #8
 800ec32:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800ec36:	f363 220f 	bfi	r2, r3, #8, #8
 800ec3a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800ec3e:	f363 4217 	bfi	r2, r3, #16, #8
 800ec42:	0e03      	lsrs	r3, r0, #24
 800ec44:	f363 621f 	bfi	r2, r3, #24, #8
 800ec48:	4610      	mov	r0, r2
 800ec4a:	b004      	add	sp, #16
 800ec4c:	bd10      	pop	{r4, pc}
 800ec4e:	bf00      	nop
 800ec50:	0800ea2d 	.word	0x0800ea2d

0800ec54 <uxr_epoch_nanos>:
 800ec54:	b510      	push	{r4, lr}
 800ec56:	4604      	mov	r4, r0
 800ec58:	f001 fda4 	bl	80107a4 <uxr_nanos>
 800ec5c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800ec60:	1ac0      	subs	r0, r0, r3
 800ec62:	eb61 0102 	sbc.w	r1, r1, r2
 800ec66:	bd10      	pop	{r4, pc}

0800ec68 <uxr_flash_output_streams>:
 800ec68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec6c:	7e03      	ldrb	r3, [r0, #24]
 800ec6e:	b084      	sub	sp, #16
 800ec70:	4604      	mov	r4, r0
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d035      	beq.n	800ece2 <uxr_flash_output_streams+0x7a>
 800ec76:	f04f 0900 	mov.w	r9, #0
 800ec7a:	4648      	mov	r0, r9
 800ec7c:	f10d 0802 	add.w	r8, sp, #2
 800ec80:	af03      	add	r7, sp, #12
 800ec82:	ae02      	add	r6, sp, #8
 800ec84:	e006      	b.n	800ec94 <uxr_flash_output_streams+0x2c>
 800ec86:	7e23      	ldrb	r3, [r4, #24]
 800ec88:	f109 0901 	add.w	r9, r9, #1
 800ec8c:	fa5f f089 	uxtb.w	r0, r9
 800ec90:	4283      	cmp	r3, r0
 800ec92:	d926      	bls.n	800ece2 <uxr_flash_output_streams+0x7a>
 800ec94:	2201      	movs	r2, #1
 800ec96:	4611      	mov	r1, r2
 800ec98:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800ec9c:	f001 fbea 	bl	8010474 <uxr_stream_id>
 800eca0:	3508      	adds	r5, #8
 800eca2:	4684      	mov	ip, r0
 800eca4:	4643      	mov	r3, r8
 800eca6:	463a      	mov	r2, r7
 800eca8:	4631      	mov	r1, r6
 800ecaa:	4628      	mov	r0, r5
 800ecac:	f8cd c004 	str.w	ip, [sp, #4]
 800ecb0:	f007 fc90 	bl	80165d4 <uxr_prepare_best_effort_buffer_to_send>
 800ecb4:	2800      	cmp	r0, #0
 800ecb6:	d0e6      	beq.n	800ec86 <uxr_flash_output_streams+0x1e>
 800ecb8:	9b02      	ldr	r3, [sp, #8]
 800ecba:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ecbe:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ecc2:	4620      	mov	r0, r4
 800ecc4:	f000 feb6 	bl	800fa34 <uxr_stamp_session_header>
 800ecc8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ecca:	9a03      	ldr	r2, [sp, #12]
 800eccc:	685d      	ldr	r5, [r3, #4]
 800ecce:	6818      	ldr	r0, [r3, #0]
 800ecd0:	9902      	ldr	r1, [sp, #8]
 800ecd2:	47a8      	blx	r5
 800ecd4:	f109 0901 	add.w	r9, r9, #1
 800ecd8:	7e23      	ldrb	r3, [r4, #24]
 800ecda:	fa5f f089 	uxtb.w	r0, r9
 800ecde:	4283      	cmp	r3, r0
 800ece0:	d8d8      	bhi.n	800ec94 <uxr_flash_output_streams+0x2c>
 800ece2:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ece6:	b38b      	cbz	r3, 800ed4c <uxr_flash_output_streams+0xe4>
 800ece8:	f04f 0900 	mov.w	r9, #0
 800ecec:	f10d 0802 	add.w	r8, sp, #2
 800ecf0:	af03      	add	r7, sp, #12
 800ecf2:	ae02      	add	r6, sp, #8
 800ecf4:	4648      	mov	r0, r9
 800ecf6:	2201      	movs	r2, #1
 800ecf8:	2102      	movs	r1, #2
 800ecfa:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800ecfe:	f001 fbb9 	bl	8010474 <uxr_stream_id>
 800ed02:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800ed06:	3520      	adds	r5, #32
 800ed08:	9001      	str	r0, [sp, #4]
 800ed0a:	e00d      	b.n	800ed28 <uxr_flash_output_streams+0xc0>
 800ed0c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ed10:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800ed14:	9b02      	ldr	r3, [sp, #8]
 800ed16:	f000 fe8d 	bl	800fa34 <uxr_stamp_session_header>
 800ed1a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ed1c:	9a03      	ldr	r2, [sp, #12]
 800ed1e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800ed22:	9902      	ldr	r1, [sp, #8]
 800ed24:	6818      	ldr	r0, [r3, #0]
 800ed26:	47d0      	blx	sl
 800ed28:	4643      	mov	r3, r8
 800ed2a:	463a      	mov	r2, r7
 800ed2c:	4631      	mov	r1, r6
 800ed2e:	4628      	mov	r0, r5
 800ed30:	f007 fe6e 	bl	8016a10 <uxr_prepare_next_reliable_buffer_to_send>
 800ed34:	4603      	mov	r3, r0
 800ed36:	4620      	mov	r0, r4
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d1e7      	bne.n	800ed0c <uxr_flash_output_streams+0xa4>
 800ed3c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800ed40:	f109 0901 	add.w	r9, r9, #1
 800ed44:	fa5f f089 	uxtb.w	r0, r9
 800ed48:	4283      	cmp	r3, r0
 800ed4a:	d8d4      	bhi.n	800ecf6 <uxr_flash_output_streams+0x8e>
 800ed4c:	b004      	add	sp, #16
 800ed4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed52:	bf00      	nop

0800ed54 <read_submessage_info>:
 800ed54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed58:	460d      	mov	r5, r1
 800ed5a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800ed5e:	4669      	mov	r1, sp
 800ed60:	4607      	mov	r7, r0
 800ed62:	4628      	mov	r0, r5
 800ed64:	f002 fca6 	bl	80116b4 <uxr_deserialize_BaseObjectReply>
 800ed68:	a902      	add	r1, sp, #8
 800ed6a:	4604      	mov	r4, r0
 800ed6c:	4628      	mov	r0, r5
 800ed6e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800ed72:	f7fe fa03 	bl	800d17c <ucdr_deserialize_bool>
 800ed76:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800ed7a:	4004      	ands	r4, r0
 800ed7c:	b2e4      	uxtb	r4, r4
 800ed7e:	b95b      	cbnz	r3, 800ed98 <read_submessage_info+0x44>
 800ed80:	a987      	add	r1, sp, #540	@ 0x21c
 800ed82:	4628      	mov	r0, r5
 800ed84:	f7fe f9fa 	bl	800d17c <ucdr_deserialize_bool>
 800ed88:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800ed8c:	4606      	mov	r6, r0
 800ed8e:	b94b      	cbnz	r3, 800eda4 <read_submessage_info+0x50>
 800ed90:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800ed94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed98:	a903      	add	r1, sp, #12
 800ed9a:	4628      	mov	r0, r5
 800ed9c:	f002 fb32 	bl	8011404 <uxr_deserialize_ObjectVariant>
 800eda0:	4004      	ands	r4, r0
 800eda2:	e7ed      	b.n	800ed80 <read_submessage_info+0x2c>
 800eda4:	a988      	add	r1, sp, #544	@ 0x220
 800eda6:	4628      	mov	r0, r5
 800eda8:	f7fe fa16 	bl	800d1d8 <ucdr_deserialize_uint8_t>
 800edac:	4234      	tst	r4, r6
 800edae:	d0ef      	beq.n	800ed90 <read_submessage_info+0x3c>
 800edb0:	2800      	cmp	r0, #0
 800edb2:	d0ed      	beq.n	800ed90 <read_submessage_info+0x3c>
 800edb4:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800edb8:	2b0d      	cmp	r3, #13
 800edba:	d1e9      	bne.n	800ed90 <read_submessage_info+0x3c>
 800edbc:	a98a      	add	r1, sp, #552	@ 0x228
 800edbe:	4628      	mov	r0, r5
 800edc0:	f7fe ffb0 	bl	800dd24 <ucdr_deserialize_int16_t>
 800edc4:	b140      	cbz	r0, 800edd8 <read_submessage_info+0x84>
 800edc6:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800edca:	2b00      	cmp	r3, #0
 800edcc:	dd07      	ble.n	800edde <read_submessage_info+0x8a>
 800edce:	f1b8 0f00 	cmp.w	r8, #0
 800edd2:	bf14      	ite	ne
 800edd4:	2001      	movne	r0, #1
 800edd6:	2002      	moveq	r0, #2
 800edd8:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800eddc:	e7d8      	b.n	800ed90 <read_submessage_info+0x3c>
 800edde:	2000      	movs	r0, #0
 800ede0:	e7fa      	b.n	800edd8 <read_submessage_info+0x84>
 800ede2:	bf00      	nop

0800ede4 <read_submessage_list>:
 800ede4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ede8:	b097      	sub	sp, #92	@ 0x5c
 800edea:	4ec1      	ldr	r6, [pc, #772]	@ (800f0f0 <read_submessage_list+0x30c>)
 800edec:	9209      	str	r2, [sp, #36]	@ 0x24
 800edee:	4604      	mov	r4, r0
 800edf0:	460d      	mov	r5, r1
 800edf2:	f04f 0801 	mov.w	r8, #1
 800edf6:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800edfa:	aa0c      	add	r2, sp, #48	@ 0x30
 800edfc:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800ee00:	4628      	mov	r0, r5
 800ee02:	f001 fc89 	bl	8010718 <uxr_read_submessage_header>
 800ee06:	2800      	cmp	r0, #0
 800ee08:	f000 813e 	beq.w	800f088 <read_submessage_list+0x2a4>
 800ee0c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800ee10:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800ee14:	3b02      	subs	r3, #2
 800ee16:	2b0d      	cmp	r3, #13
 800ee18:	d8ed      	bhi.n	800edf6 <read_submessage_list+0x12>
 800ee1a:	a101      	add	r1, pc, #4	@ (adr r1, 800ee20 <read_submessage_list+0x3c>)
 800ee1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ee20:	0800f07f 	.word	0x0800f07f
 800ee24:	0800edf7 	.word	0x0800edf7
 800ee28:	0800f06f 	.word	0x0800f06f
 800ee2c:	0800f00d 	.word	0x0800f00d
 800ee30:	0800f003 	.word	0x0800f003
 800ee34:	0800edf7 	.word	0x0800edf7
 800ee38:	0800edf7 	.word	0x0800edf7
 800ee3c:	0800ef63 	.word	0x0800ef63
 800ee40:	0800eef3 	.word	0x0800eef3
 800ee44:	0800eeb3 	.word	0x0800eeb3
 800ee48:	0800edf7 	.word	0x0800edf7
 800ee4c:	0800edf7 	.word	0x0800edf7
 800ee50:	0800edf7 	.word	0x0800edf7
 800ee54:	0800ee59 	.word	0x0800ee59
 800ee58:	a910      	add	r1, sp, #64	@ 0x40
 800ee5a:	4628      	mov	r0, r5
 800ee5c:	f002 fe4e 	bl	8011afc <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800ee60:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800ee64:	f1b9 0f00 	cmp.w	r9, #0
 800ee68:	f000 8116 	beq.w	800f098 <read_submessage_list+0x2b4>
 800ee6c:	f001 fc9a 	bl	80107a4 <uxr_nanos>
 800ee70:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800ee72:	4602      	mov	r2, r0
 800ee74:	460b      	mov	r3, r1
 800ee76:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800ee78:	2100      	movs	r1, #0
 800ee7a:	468c      	mov	ip, r1
 800ee7c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800ee80:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800ee84:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800ee86:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800ee88:	468c      	mov	ip, r1
 800ee8a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800ee8e:	46e2      	mov	sl, ip
 800ee90:	46bc      	mov	ip, r7
 800ee92:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800ee96:	fbc0 7106 	smlal	r7, r1, r0, r6
 800ee9a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800ee9e:	e9cd 7100 	strd	r7, r1, [sp]
 800eea2:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800eea6:	9106      	str	r1, [sp, #24]
 800eea8:	4620      	mov	r0, r4
 800eeaa:	47c8      	blx	r9
 800eeac:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800eeb0:	e7a1      	b.n	800edf6 <read_submessage_list+0x12>
 800eeb2:	a910      	add	r1, sp, #64	@ 0x40
 800eeb4:	4628      	mov	r0, r5
 800eeb6:	f002 fe0f 	bl	8011ad8 <uxr_deserialize_HEARTBEAT_Payload>
 800eeba:	2100      	movs	r1, #0
 800eebc:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800eec0:	f001 fb02 	bl	80104c8 <uxr_stream_id_from_raw>
 800eec4:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800eec8:	900f      	str	r0, [sp, #60]	@ 0x3c
 800eeca:	4639      	mov	r1, r7
 800eecc:	f104 0008 	add.w	r0, r4, #8
 800eed0:	f001 fbe8 	bl	80106a4 <uxr_get_input_reliable_stream>
 800eed4:	2800      	cmp	r0, #0
 800eed6:	d08e      	beq.n	800edf6 <read_submessage_list+0x12>
 800eed8:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800eedc:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800eee0:	f007 fae6 	bl	80164b0 <uxr_process_heartbeat>
 800eee4:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800eee8:	463a      	mov	r2, r7
 800eeea:	4620      	mov	r0, r4
 800eeec:	f7ff fdf6 	bl	800eadc <write_submessage_acknack.isra.0>
 800eef0:	e781      	b.n	800edf6 <read_submessage_list+0x12>
 800eef2:	a910      	add	r1, sp, #64	@ 0x40
 800eef4:	4628      	mov	r0, r5
 800eef6:	f002 fdc7 	bl	8011a88 <uxr_deserialize_ACKNACK_Payload>
 800eefa:	2100      	movs	r1, #0
 800eefc:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800ef00:	f001 fae2 	bl	80104c8 <uxr_stream_id_from_raw>
 800ef04:	900d      	str	r0, [sp, #52]	@ 0x34
 800ef06:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800ef0a:	f104 0008 	add.w	r0, r4, #8
 800ef0e:	f001 fbb5 	bl	801067c <uxr_get_output_reliable_stream>
 800ef12:	4607      	mov	r7, r0
 800ef14:	2800      	cmp	r0, #0
 800ef16:	f43f af6e 	beq.w	800edf6 <read_submessage_list+0x12>
 800ef1a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800ef1e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800ef22:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800ef26:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800ef2a:	b289      	uxth	r1, r1
 800ef2c:	f007 fe1a 	bl	8016b64 <uxr_process_acknack>
 800ef30:	4638      	mov	r0, r7
 800ef32:	f007 fdd7 	bl	8016ae4 <uxr_begin_output_nack_buffer_it>
 800ef36:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800ef3a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800ef3e:	e006      	b.n	800ef4e <read_submessage_list+0x16a>
 800ef40:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800ef42:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ef44:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800ef48:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ef4a:	6818      	ldr	r0, [r3, #0]
 800ef4c:	47c8      	blx	r9
 800ef4e:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800ef52:	aa0f      	add	r2, sp, #60	@ 0x3c
 800ef54:	4651      	mov	r1, sl
 800ef56:	4638      	mov	r0, r7
 800ef58:	f007 fdc6 	bl	8016ae8 <uxr_next_reliable_nack_buffer_to_send>
 800ef5c:	2800      	cmp	r0, #0
 800ef5e:	d1ef      	bne.n	800ef40 <read_submessage_list+0x15c>
 800ef60:	e749      	b.n	800edf6 <read_submessage_list+0x12>
 800ef62:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800ef66:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800ef6a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800ef6e:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800ef72:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800ef76:	4651      	mov	r1, sl
 800ef78:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800ef7c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800ef80:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800ef84:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800ef88:	4628      	mov	r0, r5
 800ef8a:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800ef8e:	f002 fadb 	bl	8011548 <uxr_deserialize_BaseObjectRequest>
 800ef92:	4650      	mov	r0, sl
 800ef94:	a90f      	add	r1, sp, #60	@ 0x3c
 800ef96:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800ef9a:	f000 fdc7 	bl	800fb2c <uxr_parse_base_object_request>
 800ef9e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800efa2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800efa4:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800efa8:	9110      	str	r1, [sp, #64]	@ 0x40
 800efaa:	3f04      	subs	r7, #4
 800efac:	f009 090e 	and.w	r9, r9, #14
 800efb0:	b2bf      	uxth	r7, r7
 800efb2:	f1bb 0f00 	cmp.w	fp, #0
 800efb6:	d006      	beq.n	800efc6 <read_submessage_list+0x1e2>
 800efb8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800efbc:	9300      	str	r3, [sp, #0]
 800efbe:	4652      	mov	r2, sl
 800efc0:	2300      	movs	r3, #0
 800efc2:	4620      	mov	r0, r4
 800efc4:	47d8      	blx	fp
 800efc6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800efc8:	b16a      	cbz	r2, 800efe6 <read_submessage_list+0x202>
 800efca:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800efcc:	2100      	movs	r1, #0
 800efce:	3802      	subs	r0, #2
 800efd0:	e002      	b.n	800efd8 <read_submessage_list+0x1f4>
 800efd2:	3101      	adds	r1, #1
 800efd4:	4291      	cmp	r1, r2
 800efd6:	d006      	beq.n	800efe6 <read_submessage_list+0x202>
 800efd8:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800efdc:	4553      	cmp	r3, sl
 800efde:	d1f8      	bne.n	800efd2 <read_submessage_list+0x1ee>
 800efe0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800efe2:	2200      	movs	r2, #0
 800efe4:	545a      	strb	r2, [r3, r1]
 800efe6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800efea:	9102      	str	r1, [sp, #8]
 800efec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800efee:	9101      	str	r1, [sp, #4]
 800eff0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800eff2:	9100      	str	r1, [sp, #0]
 800eff4:	464b      	mov	r3, r9
 800eff6:	463a      	mov	r2, r7
 800eff8:	4629      	mov	r1, r5
 800effa:	4620      	mov	r0, r4
 800effc:	f7ff fc4c 	bl	800e898 <read_submessage_format>
 800f000:	e6f9      	b.n	800edf6 <read_submessage_list+0x12>
 800f002:	4629      	mov	r1, r5
 800f004:	4620      	mov	r0, r4
 800f006:	f7ff fea5 	bl	800ed54 <read_submessage_info>
 800f00a:	e6f4      	b.n	800edf6 <read_submessage_list+0x12>
 800f00c:	2a00      	cmp	r2, #0
 800f00e:	d03e      	beq.n	800f08e <read_submessage_list+0x2aa>
 800f010:	a910      	add	r1, sp, #64	@ 0x40
 800f012:	4628      	mov	r0, r5
 800f014:	f002 fc94 	bl	8011940 <uxr_deserialize_STATUS_Payload>
 800f018:	a90e      	add	r1, sp, #56	@ 0x38
 800f01a:	aa0d      	add	r2, sp, #52	@ 0x34
 800f01c:	a810      	add	r0, sp, #64	@ 0x40
 800f01e:	f000 fd85 	bl	800fb2c <uxr_parse_base_object_request>
 800f022:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800f026:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f028:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800f02c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800f030:	910f      	str	r1, [sp, #60]	@ 0x3c
 800f032:	f1ba 0f00 	cmp.w	sl, #0
 800f036:	d006      	beq.n	800f046 <read_submessage_list+0x262>
 800f038:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800f03c:	9300      	str	r3, [sp, #0]
 800f03e:	463a      	mov	r2, r7
 800f040:	464b      	mov	r3, r9
 800f042:	4620      	mov	r0, r4
 800f044:	47d0      	blx	sl
 800f046:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800f048:	2a00      	cmp	r2, #0
 800f04a:	f43f aed4 	beq.w	800edf6 <read_submessage_list+0x12>
 800f04e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800f050:	2100      	movs	r1, #0
 800f052:	3802      	subs	r0, #2
 800f054:	e003      	b.n	800f05e <read_submessage_list+0x27a>
 800f056:	3101      	adds	r1, #1
 800f058:	4291      	cmp	r1, r2
 800f05a:	f43f aecc 	beq.w	800edf6 <read_submessage_list+0x12>
 800f05e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800f062:	42bb      	cmp	r3, r7
 800f064:	d1f7      	bne.n	800f056 <read_submessage_list+0x272>
 800f066:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800f068:	f803 9001 	strb.w	r9, [r3, r1]
 800f06c:	e6c3      	b.n	800edf6 <read_submessage_list+0x12>
 800f06e:	2a00      	cmp	r2, #0
 800f070:	f47f aec1 	bne.w	800edf6 <read_submessage_list+0x12>
 800f074:	4629      	mov	r1, r5
 800f076:	4620      	mov	r0, r4
 800f078:	f000 fc9e 	bl	800f9b8 <uxr_read_create_session_status>
 800f07c:	e6bb      	b.n	800edf6 <read_submessage_list+0x12>
 800f07e:	4629      	mov	r1, r5
 800f080:	4620      	mov	r0, r4
 800f082:	f7ff fcf5 	bl	800ea70 <read_submessage_get_info>
 800f086:	e6b6      	b.n	800edf6 <read_submessage_list+0x12>
 800f088:	b017      	add	sp, #92	@ 0x5c
 800f08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f08e:	4629      	mov	r1, r5
 800f090:	4620      	mov	r0, r4
 800f092:	f000 fc9d 	bl	800f9d0 <uxr_read_delete_session_status>
 800f096:	e6ae      	b.n	800edf6 <read_submessage_list+0x12>
 800f098:	f001 fb84 	bl	80107a4 <uxr_nanos>
 800f09c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f09e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f0a0:	464f      	mov	r7, r9
 800f0a2:	fbc3 2706 	smlal	r2, r7, r3, r6
 800f0a6:	1812      	adds	r2, r2, r0
 800f0a8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f0aa:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800f0ac:	eb47 0101 	adc.w	r1, r7, r1
 800f0b0:	464f      	mov	r7, r9
 800f0b2:	fbc3 0706 	smlal	r0, r7, r3, r6
 800f0b6:	463b      	mov	r3, r7
 800f0b8:	4684      	mov	ip, r0
 800f0ba:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800f0be:	fbc7 0906 	smlal	r0, r9, r7, r6
 800f0c2:	eb1c 0c00 	adds.w	ip, ip, r0
 800f0c6:	464f      	mov	r7, r9
 800f0c8:	eb43 0307 	adc.w	r3, r3, r7
 800f0cc:	ebb2 0c0c 	subs.w	ip, r2, ip
 800f0d0:	eb61 0303 	sbc.w	r3, r1, r3
 800f0d4:	0fda      	lsrs	r2, r3, #31
 800f0d6:	eb12 020c 	adds.w	r2, r2, ip
 800f0da:	f143 0300 	adc.w	r3, r3, #0
 800f0de:	0852      	lsrs	r2, r2, #1
 800f0e0:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800f0e4:	105b      	asrs	r3, r3, #1
 800f0e6:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800f0ea:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800f0ee:	e6dd      	b.n	800eeac <read_submessage_list+0xc8>
 800f0f0:	3b9aca00 	.word	0x3b9aca00

0800f0f4 <listen_message_reliably>:
 800f0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0f8:	1e0b      	subs	r3, r1, #0
 800f0fa:	b09d      	sub	sp, #116	@ 0x74
 800f0fc:	bfb8      	it	lt
 800f0fe:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800f102:	4680      	mov	r8, r0
 800f104:	9305      	str	r3, [sp, #20]
 800f106:	f001 fb33 	bl	8010770 <uxr_millis>
 800f10a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800f10e:	4681      	mov	r9, r0
 800f110:	2a00      	cmp	r2, #0
 800f112:	f000 80a1 	beq.w	800f258 <listen_message_reliably+0x164>
 800f116:	2600      	movs	r6, #0
 800f118:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f11c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800f120:	9303      	str	r3, [sp, #12]
 800f122:	4630      	mov	r0, r6
 800f124:	460f      	mov	r7, r1
 800f126:	e00f      	b.n	800f148 <listen_message_reliably+0x54>
 800f128:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f12c:	9903      	ldr	r1, [sp, #12]
 800f12e:	455a      	cmp	r2, fp
 800f130:	f106 0601 	add.w	r6, r6, #1
 800f134:	eb73 0101 	sbcs.w	r1, r3, r1
 800f138:	b2f0      	uxtb	r0, r6
 800f13a:	da01      	bge.n	800f140 <listen_message_reliably+0x4c>
 800f13c:	4693      	mov	fp, r2
 800f13e:	9303      	str	r3, [sp, #12]
 800f140:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800f144:	4283      	cmp	r3, r0
 800f146:	d960      	bls.n	800f20a <listen_message_reliably+0x116>
 800f148:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800f14c:	2102      	movs	r1, #2
 800f14e:	2201      	movs	r2, #1
 800f150:	f001 f990 	bl	8010474 <uxr_stream_id>
 800f154:	00e4      	lsls	r4, r4, #3
 800f156:	f104 0520 	add.w	r5, r4, #32
 800f15a:	4445      	add	r5, r8
 800f15c:	4601      	mov	r1, r0
 800f15e:	463b      	mov	r3, r7
 800f160:	464a      	mov	r2, r9
 800f162:	4628      	mov	r0, r5
 800f164:	9109      	str	r1, [sp, #36]	@ 0x24
 800f166:	f007 fc93 	bl	8016a90 <uxr_update_output_stream_heartbeat_timestamp>
 800f16a:	eb08 0304 	add.w	r3, r8, r4
 800f16e:	2800      	cmp	r0, #0
 800f170:	d0da      	beq.n	800f128 <listen_message_reliably+0x34>
 800f172:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800f176:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800f17a:	9304      	str	r3, [sp, #16]
 800f17c:	4640      	mov	r0, r8
 800f17e:	f000 fcaf 	bl	800fae0 <uxr_session_header_offset>
 800f182:	3501      	adds	r5, #1
 800f184:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800f188:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800f18c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800f190:	2300      	movs	r3, #0
 800f192:	2211      	movs	r2, #17
 800f194:	9000      	str	r0, [sp, #0]
 800f196:	a90c      	add	r1, sp, #48	@ 0x30
 800f198:	4650      	mov	r0, sl
 800f19a:	f7fe ffa1 	bl	800e0e0 <ucdr_init_buffer_origin_offset>
 800f19e:	2300      	movs	r3, #0
 800f1a0:	2205      	movs	r2, #5
 800f1a2:	210b      	movs	r1, #11
 800f1a4:	4650      	mov	r0, sl
 800f1a6:	f001 fa9d 	bl	80106e4 <uxr_buffer_submessage_header>
 800f1aa:	8968      	ldrh	r0, [r5, #10]
 800f1ac:	2101      	movs	r1, #1
 800f1ae:	f007 fd31 	bl	8016c14 <uxr_seq_num_add>
 800f1b2:	892b      	ldrh	r3, [r5, #8]
 800f1b4:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800f1b8:	4602      	mov	r2, r0
 800f1ba:	9b04      	ldr	r3, [sp, #16]
 800f1bc:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800f1c0:	a90a      	add	r1, sp, #40	@ 0x28
 800f1c2:	4650      	mov	r0, sl
 800f1c4:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800f1c8:	f002 fc72 	bl	8011ab0 <uxr_serialize_HEARTBEAT_Payload>
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	4611      	mov	r1, r2
 800f1d0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f1d2:	4640      	mov	r0, r8
 800f1d4:	f000 fc2e 	bl	800fa34 <uxr_stamp_session_header>
 800f1d8:	4650      	mov	r0, sl
 800f1da:	f7fe ffbf 	bl	800e15c <ucdr_buffer_length>
 800f1de:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800f1e2:	4602      	mov	r2, r0
 800f1e4:	a90c      	add	r1, sp, #48	@ 0x30
 800f1e6:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f1ea:	4444      	add	r4, r8
 800f1ec:	47a8      	blx	r5
 800f1ee:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800f1f2:	9903      	ldr	r1, [sp, #12]
 800f1f4:	455a      	cmp	r2, fp
 800f1f6:	f106 0601 	add.w	r6, r6, #1
 800f1fa:	eb73 0101 	sbcs.w	r1, r3, r1
 800f1fe:	b2f0      	uxtb	r0, r6
 800f200:	db9c      	blt.n	800f13c <listen_message_reliably+0x48>
 800f202:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800f206:	4283      	cmp	r3, r0
 800f208:	d89e      	bhi.n	800f148 <listen_message_reliably+0x54>
 800f20a:	9a03      	ldr	r2, [sp, #12]
 800f20c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f210:	429a      	cmp	r2, r3
 800f212:	bf08      	it	eq
 800f214:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800f218:	d01e      	beq.n	800f258 <listen_message_reliably+0x164>
 800f21a:	ebab 0309 	sub.w	r3, fp, r9
 800f21e:	9905      	ldr	r1, [sp, #20]
 800f220:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800f224:	2b00      	cmp	r3, #0
 800f226:	bf08      	it	eq
 800f228:	2301      	moveq	r3, #1
 800f22a:	4299      	cmp	r1, r3
 800f22c:	bfa8      	it	ge
 800f22e:	4619      	movge	r1, r3
 800f230:	6894      	ldr	r4, [r2, #8]
 800f232:	6810      	ldr	r0, [r2, #0]
 800f234:	4689      	mov	r9, r1
 800f236:	460b      	mov	r3, r1
 800f238:	aa08      	add	r2, sp, #32
 800f23a:	a907      	add	r1, sp, #28
 800f23c:	47a0      	blx	r4
 800f23e:	b968      	cbnz	r0, 800f25c <listen_message_reliably+0x168>
 800f240:	9b05      	ldr	r3, [sp, #20]
 800f242:	eba3 0309 	sub.w	r3, r3, r9
 800f246:	2b00      	cmp	r3, #0
 800f248:	9305      	str	r3, [sp, #20]
 800f24a:	f73f af5c 	bgt.w	800f106 <listen_message_reliably+0x12>
 800f24e:	4604      	mov	r4, r0
 800f250:	4620      	mov	r0, r4
 800f252:	b01d      	add	sp, #116	@ 0x74
 800f254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f258:	9b05      	ldr	r3, [sp, #20]
 800f25a:	e7e0      	b.n	800f21e <listen_message_reliably+0x12a>
 800f25c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800f260:	4604      	mov	r4, r0
 800f262:	a80c      	add	r0, sp, #48	@ 0x30
 800f264:	f7fe ff4e 	bl	800e104 <ucdr_init_buffer>
 800f268:	2500      	movs	r5, #0
 800f26a:	f10d 031a 	add.w	r3, sp, #26
 800f26e:	aa06      	add	r2, sp, #24
 800f270:	a90c      	add	r1, sp, #48	@ 0x30
 800f272:	4640      	mov	r0, r8
 800f274:	f88d 5018 	strb.w	r5, [sp, #24]
 800f278:	f000 fbf0 	bl	800fa5c <uxr_read_session_header>
 800f27c:	b918      	cbnz	r0, 800f286 <listen_message_reliably+0x192>
 800f27e:	4620      	mov	r0, r4
 800f280:	b01d      	add	sp, #116	@ 0x74
 800f282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f286:	4629      	mov	r1, r5
 800f288:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f28c:	f001 f91c 	bl	80104c8 <uxr_stream_id_from_raw>
 800f290:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800f294:	2d01      	cmp	r5, #1
 800f296:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800f29a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800f29e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800f2a2:	d04b      	beq.n	800f33c <listen_message_reliably+0x248>
 800f2a4:	2d02      	cmp	r5, #2
 800f2a6:	d00f      	beq.n	800f2c8 <listen_message_reliably+0x1d4>
 800f2a8:	2d00      	cmp	r5, #0
 800f2aa:	d1e8      	bne.n	800f27e <listen_message_reliably+0x18a>
 800f2ac:	4629      	mov	r1, r5
 800f2ae:	4628      	mov	r0, r5
 800f2b0:	f001 f90a 	bl	80104c8 <uxr_stream_id_from_raw>
 800f2b4:	a90c      	add	r1, sp, #48	@ 0x30
 800f2b6:	4602      	mov	r2, r0
 800f2b8:	4640      	mov	r0, r8
 800f2ba:	920a      	str	r2, [sp, #40]	@ 0x28
 800f2bc:	f7ff fd92 	bl	800ede4 <read_submessage_list>
 800f2c0:	4620      	mov	r0, r4
 800f2c2:	b01d      	add	sp, #116	@ 0x74
 800f2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2c8:	4631      	mov	r1, r6
 800f2ca:	f108 0008 	add.w	r0, r8, #8
 800f2ce:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800f2d2:	f001 f9e7 	bl	80106a4 <uxr_get_input_reliable_stream>
 800f2d6:	4607      	mov	r7, r0
 800f2d8:	b338      	cbz	r0, 800f32a <listen_message_reliably+0x236>
 800f2da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f2dc:	9203      	str	r2, [sp, #12]
 800f2de:	a80c      	add	r0, sp, #48	@ 0x30
 800f2e0:	f7fe ff40 	bl	800e164 <ucdr_buffer_remaining>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	f10d 0019 	add.w	r0, sp, #25
 800f2ea:	9000      	str	r0, [sp, #0]
 800f2ec:	9a03      	ldr	r2, [sp, #12]
 800f2ee:	4651      	mov	r1, sl
 800f2f0:	4638      	mov	r0, r7
 800f2f2:	f006 ffe3 	bl	80162bc <uxr_receive_reliable_message>
 800f2f6:	b1c0      	cbz	r0, 800f32a <listen_message_reliably+0x236>
 800f2f8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f2fc:	b393      	cbz	r3, 800f364 <listen_message_reliably+0x270>
 800f2fe:	ad14      	add	r5, sp, #80	@ 0x50
 800f300:	f04f 0a02 	mov.w	sl, #2
 800f304:	e00a      	b.n	800f31c <listen_message_reliably+0x228>
 800f306:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800f30a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800f30e:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800f312:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f314:	4629      	mov	r1, r5
 800f316:	4640      	mov	r0, r8
 800f318:	f7ff fd64 	bl	800ede4 <read_submessage_list>
 800f31c:	2204      	movs	r2, #4
 800f31e:	4629      	mov	r1, r5
 800f320:	4638      	mov	r0, r7
 800f322:	f007 f84b 	bl	80163bc <uxr_next_input_reliable_buffer_available>
 800f326:	2800      	cmp	r0, #0
 800f328:	d1ed      	bne.n	800f306 <listen_message_reliably+0x212>
 800f32a:	4640      	mov	r0, r8
 800f32c:	4632      	mov	r2, r6
 800f32e:	4649      	mov	r1, r9
 800f330:	f7ff fbd4 	bl	800eadc <write_submessage_acknack.isra.0>
 800f334:	4620      	mov	r0, r4
 800f336:	b01d      	add	sp, #116	@ 0x74
 800f338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f33c:	4631      	mov	r1, r6
 800f33e:	f108 0008 	add.w	r0, r8, #8
 800f342:	f001 f9a5 	bl	8010690 <uxr_get_input_best_effort_stream>
 800f346:	2800      	cmp	r0, #0
 800f348:	d099      	beq.n	800f27e <listen_message_reliably+0x18a>
 800f34a:	4651      	mov	r1, sl
 800f34c:	f006 ff22 	bl	8016194 <uxr_receive_best_effort_message>
 800f350:	2800      	cmp	r0, #0
 800f352:	d094      	beq.n	800f27e <listen_message_reliably+0x18a>
 800f354:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800f358:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f35a:	a90c      	add	r1, sp, #48	@ 0x30
 800f35c:	4640      	mov	r0, r8
 800f35e:	f7ff fd41 	bl	800ede4 <read_submessage_list>
 800f362:	e78c      	b.n	800f27e <listen_message_reliably+0x18a>
 800f364:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800f368:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f36a:	a90c      	add	r1, sp, #48	@ 0x30
 800f36c:	4640      	mov	r0, r8
 800f36e:	f7ff fd39 	bl	800ede4 <read_submessage_list>
 800f372:	e7c4      	b.n	800f2fe <listen_message_reliably+0x20a>

0800f374 <uxr_run_session_timeout>:
 800f374:	b570      	push	{r4, r5, r6, lr}
 800f376:	4604      	mov	r4, r0
 800f378:	460d      	mov	r5, r1
 800f37a:	f001 f9f9 	bl	8010770 <uxr_millis>
 800f37e:	4606      	mov	r6, r0
 800f380:	4620      	mov	r0, r4
 800f382:	f7ff fc71 	bl	800ec68 <uxr_flash_output_streams>
 800f386:	4629      	mov	r1, r5
 800f388:	4620      	mov	r0, r4
 800f38a:	f7ff feb3 	bl	800f0f4 <listen_message_reliably>
 800f38e:	f001 f9ef 	bl	8010770 <uxr_millis>
 800f392:	1b83      	subs	r3, r0, r6
 800f394:	1ae9      	subs	r1, r5, r3
 800f396:	2900      	cmp	r1, #0
 800f398:	dcf6      	bgt.n	800f388 <uxr_run_session_timeout+0x14>
 800f39a:	f104 0008 	add.w	r0, r4, #8
 800f39e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3a2:	f001 b989 	b.w	80106b8 <uxr_output_streams_confirmed>
 800f3a6:	bf00      	nop

0800f3a8 <uxr_run_session_until_data>:
 800f3a8:	b570      	push	{r4, r5, r6, lr}
 800f3aa:	4604      	mov	r4, r0
 800f3ac:	460d      	mov	r5, r1
 800f3ae:	f001 f9df 	bl	8010770 <uxr_millis>
 800f3b2:	4606      	mov	r6, r0
 800f3b4:	4620      	mov	r0, r4
 800f3b6:	f7ff fc57 	bl	800ec68 <uxr_flash_output_streams>
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800f3c0:	4629      	mov	r1, r5
 800f3c2:	e005      	b.n	800f3d0 <uxr_run_session_until_data+0x28>
 800f3c4:	f001 f9d4 	bl	8010770 <uxr_millis>
 800f3c8:	1b83      	subs	r3, r0, r6
 800f3ca:	1ae9      	subs	r1, r5, r3
 800f3cc:	2900      	cmp	r1, #0
 800f3ce:	dd07      	ble.n	800f3e0 <uxr_run_session_until_data+0x38>
 800f3d0:	4620      	mov	r0, r4
 800f3d2:	f7ff fe8f 	bl	800f0f4 <listen_message_reliably>
 800f3d6:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800f3da:	2800      	cmp	r0, #0
 800f3dc:	d0f2      	beq.n	800f3c4 <uxr_run_session_until_data+0x1c>
 800f3de:	bd70      	pop	{r4, r5, r6, pc}
 800f3e0:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800f3e4:	bd70      	pop	{r4, r5, r6, pc}
 800f3e6:	bf00      	nop

0800f3e8 <uxr_run_session_until_confirm_delivery>:
 800f3e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3ec:	4606      	mov	r6, r0
 800f3ee:	460d      	mov	r5, r1
 800f3f0:	f001 f9be 	bl	8010770 <uxr_millis>
 800f3f4:	4607      	mov	r7, r0
 800f3f6:	4630      	mov	r0, r6
 800f3f8:	f7ff fc36 	bl	800ec68 <uxr_flash_output_streams>
 800f3fc:	2d00      	cmp	r5, #0
 800f3fe:	f106 0808 	add.w	r8, r6, #8
 800f402:	bfa8      	it	ge
 800f404:	462c      	movge	r4, r5
 800f406:	da07      	bge.n	800f418 <uxr_run_session_until_confirm_delivery+0x30>
 800f408:	e00e      	b.n	800f428 <uxr_run_session_until_confirm_delivery+0x40>
 800f40a:	f7ff fe73 	bl	800f0f4 <listen_message_reliably>
 800f40e:	f001 f9af 	bl	8010770 <uxr_millis>
 800f412:	1bc3      	subs	r3, r0, r7
 800f414:	1aec      	subs	r4, r5, r3
 800f416:	d407      	bmi.n	800f428 <uxr_run_session_until_confirm_delivery+0x40>
 800f418:	4640      	mov	r0, r8
 800f41a:	f001 f94d 	bl	80106b8 <uxr_output_streams_confirmed>
 800f41e:	4603      	mov	r3, r0
 800f420:	4621      	mov	r1, r4
 800f422:	4630      	mov	r0, r6
 800f424:	2b00      	cmp	r3, #0
 800f426:	d0f0      	beq.n	800f40a <uxr_run_session_until_confirm_delivery+0x22>
 800f428:	4640      	mov	r0, r8
 800f42a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f42e:	f001 b943 	b.w	80106b8 <uxr_output_streams_confirmed>
 800f432:	bf00      	nop

0800f434 <uxr_run_session_until_all_status>:
 800f434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f438:	9c08      	ldr	r4, [sp, #32]
 800f43a:	4606      	mov	r6, r0
 800f43c:	460f      	mov	r7, r1
 800f43e:	4691      	mov	r9, r2
 800f440:	461d      	mov	r5, r3
 800f442:	f7ff fc11 	bl	800ec68 <uxr_flash_output_streams>
 800f446:	b124      	cbz	r4, 800f452 <uxr_run_session_until_all_status+0x1e>
 800f448:	4622      	mov	r2, r4
 800f44a:	21ff      	movs	r1, #255	@ 0xff
 800f44c:	4628      	mov	r0, r5
 800f44e:	f008 fbc3 	bl	8017bd8 <memset>
 800f452:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800f456:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800f458:	f001 f98a 	bl	8010770 <uxr_millis>
 800f45c:	3d01      	subs	r5, #1
 800f45e:	f1a9 0902 	sub.w	r9, r9, #2
 800f462:	4680      	mov	r8, r0
 800f464:	4639      	mov	r1, r7
 800f466:	4630      	mov	r0, r6
 800f468:	f7ff fe44 	bl	800f0f4 <listen_message_reliably>
 800f46c:	f001 f980 	bl	8010770 <uxr_millis>
 800f470:	eba0 0008 	sub.w	r0, r0, r8
 800f474:	1a39      	subs	r1, r7, r0
 800f476:	b344      	cbz	r4, 800f4ca <uxr_run_session_until_all_status+0x96>
 800f478:	4628      	mov	r0, r5
 800f47a:	46ac      	mov	ip, r5
 800f47c:	2301      	movs	r3, #1
 800f47e:	e002      	b.n	800f486 <uxr_run_session_until_all_status+0x52>
 800f480:	42a3      	cmp	r3, r4
 800f482:	d20d      	bcs.n	800f4a0 <uxr_run_session_until_all_status+0x6c>
 800f484:	3301      	adds	r3, #1
 800f486:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800f48a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800f48e:	d1f7      	bne.n	800f480 <uxr_run_session_until_all_status+0x4c>
 800f490:	42a3      	cmp	r3, r4
 800f492:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800f496:	d213      	bcs.n	800f4c0 <uxr_run_session_until_all_status+0x8c>
 800f498:	2a00      	cmp	r2, #0
 800f49a:	d0f3      	beq.n	800f484 <uxr_run_session_until_all_status+0x50>
 800f49c:	2900      	cmp	r1, #0
 800f49e:	dce2      	bgt.n	800f466 <uxr_run_session_until_all_status+0x32>
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800f4a4:	442c      	add	r4, r5
 800f4a6:	e001      	b.n	800f4ac <uxr_run_session_until_all_status+0x78>
 800f4a8:	2b01      	cmp	r3, #1
 800f4aa:	d812      	bhi.n	800f4d2 <uxr_run_session_until_all_status+0x9e>
 800f4ac:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800f4b0:	4284      	cmp	r4, r0
 800f4b2:	d1f9      	bne.n	800f4a8 <uxr_run_session_until_all_status+0x74>
 800f4b4:	2b01      	cmp	r3, #1
 800f4b6:	bf8c      	ite	hi
 800f4b8:	2000      	movhi	r0, #0
 800f4ba:	2001      	movls	r0, #1
 800f4bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4c0:	2900      	cmp	r1, #0
 800f4c2:	dded      	ble.n	800f4a0 <uxr_run_session_until_all_status+0x6c>
 800f4c4:	2a00      	cmp	r2, #0
 800f4c6:	d1ce      	bne.n	800f466 <uxr_run_session_until_all_status+0x32>
 800f4c8:	e7ea      	b.n	800f4a0 <uxr_run_session_until_all_status+0x6c>
 800f4ca:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800f4cc:	2001      	movs	r0, #1
 800f4ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4d2:	2000      	movs	r0, #0
 800f4d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f4d8 <wait_session_status>:
 800f4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4dc:	4604      	mov	r4, r0
 800f4de:	b09d      	sub	sp, #116	@ 0x74
 800f4e0:	20ff      	movs	r0, #255	@ 0xff
 800f4e2:	7160      	strb	r0, [r4, #5]
 800f4e4:	9303      	str	r3, [sp, #12]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	f000 80b6 	beq.w	800f658 <wait_session_status+0x180>
 800f4ec:	468a      	mov	sl, r1
 800f4ee:	4691      	mov	r9, r2
 800f4f0:	f04f 0b00 	mov.w	fp, #0
 800f4f4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f4f6:	464a      	mov	r2, r9
 800f4f8:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f4fc:	4651      	mov	r1, sl
 800f4fe:	47a8      	blx	r5
 800f500:	f001 f936 	bl	8010770 <uxr_millis>
 800f504:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f508:	4605      	mov	r5, r0
 800f50a:	e009      	b.n	800f520 <wait_session_status+0x48>
 800f50c:	f001 f930 	bl	8010770 <uxr_millis>
 800f510:	1b40      	subs	r0, r0, r5
 800f512:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800f516:	2b00      	cmp	r3, #0
 800f518:	dd40      	ble.n	800f59c <wait_session_status+0xc4>
 800f51a:	7960      	ldrb	r0, [r4, #5]
 800f51c:	28ff      	cmp	r0, #255	@ 0xff
 800f51e:	d145      	bne.n	800f5ac <wait_session_status+0xd4>
 800f520:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800f522:	a908      	add	r1, sp, #32
 800f524:	6896      	ldr	r6, [r2, #8]
 800f526:	6810      	ldr	r0, [r2, #0]
 800f528:	aa09      	add	r2, sp, #36	@ 0x24
 800f52a:	47b0      	blx	r6
 800f52c:	2800      	cmp	r0, #0
 800f52e:	d0ed      	beq.n	800f50c <wait_session_status+0x34>
 800f530:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800f534:	a80c      	add	r0, sp, #48	@ 0x30
 800f536:	f7fe fde5 	bl	800e104 <ucdr_init_buffer>
 800f53a:	2600      	movs	r6, #0
 800f53c:	f10d 031e 	add.w	r3, sp, #30
 800f540:	aa07      	add	r2, sp, #28
 800f542:	a90c      	add	r1, sp, #48	@ 0x30
 800f544:	4620      	mov	r0, r4
 800f546:	f88d 601c 	strb.w	r6, [sp, #28]
 800f54a:	f000 fa87 	bl	800fa5c <uxr_read_session_header>
 800f54e:	2800      	cmp	r0, #0
 800f550:	d0dc      	beq.n	800f50c <wait_session_status+0x34>
 800f552:	4631      	mov	r1, r6
 800f554:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800f558:	f000 ffb6 	bl	80104c8 <uxr_stream_id_from_raw>
 800f55c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800f560:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800f564:	9302      	str	r3, [sp, #8]
 800f566:	2f01      	cmp	r7, #1
 800f568:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800f56c:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800f570:	d05c      	beq.n	800f62c <wait_session_status+0x154>
 800f572:	2f02      	cmp	r7, #2
 800f574:	d020      	beq.n	800f5b8 <wait_session_status+0xe0>
 800f576:	2f00      	cmp	r7, #0
 800f578:	d1c8      	bne.n	800f50c <wait_session_status+0x34>
 800f57a:	4639      	mov	r1, r7
 800f57c:	4638      	mov	r0, r7
 800f57e:	f000 ffa3 	bl	80104c8 <uxr_stream_id_from_raw>
 800f582:	a90c      	add	r1, sp, #48	@ 0x30
 800f584:	4602      	mov	r2, r0
 800f586:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f588:	4620      	mov	r0, r4
 800f58a:	f7ff fc2b 	bl	800ede4 <read_submessage_list>
 800f58e:	f001 f8ef 	bl	8010770 <uxr_millis>
 800f592:	1b40      	subs	r0, r0, r5
 800f594:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800f598:	2b00      	cmp	r3, #0
 800f59a:	dcbe      	bgt.n	800f51a <wait_session_status+0x42>
 800f59c:	9b03      	ldr	r3, [sp, #12]
 800f59e:	7960      	ldrb	r0, [r4, #5]
 800f5a0:	f10b 0b01 	add.w	fp, fp, #1
 800f5a4:	455b      	cmp	r3, fp
 800f5a6:	d001      	beq.n	800f5ac <wait_session_status+0xd4>
 800f5a8:	28ff      	cmp	r0, #255	@ 0xff
 800f5aa:	d0a3      	beq.n	800f4f4 <wait_session_status+0x1c>
 800f5ac:	38ff      	subs	r0, #255	@ 0xff
 800f5ae:	bf18      	it	ne
 800f5b0:	2001      	movne	r0, #1
 800f5b2:	b01d      	add	sp, #116	@ 0x74
 800f5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5b8:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800f5bc:	9304      	str	r3, [sp, #16]
 800f5be:	4631      	mov	r1, r6
 800f5c0:	f104 0008 	add.w	r0, r4, #8
 800f5c4:	f001 f86e 	bl	80106a4 <uxr_get_input_reliable_stream>
 800f5c8:	4680      	mov	r8, r0
 800f5ca:	b348      	cbz	r0, 800f620 <wait_session_status+0x148>
 800f5cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f5ce:	9205      	str	r2, [sp, #20]
 800f5d0:	a80c      	add	r0, sp, #48	@ 0x30
 800f5d2:	f7fe fdc7 	bl	800e164 <ucdr_buffer_remaining>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	f10d 001d 	add.w	r0, sp, #29
 800f5dc:	9000      	str	r0, [sp, #0]
 800f5de:	9a05      	ldr	r2, [sp, #20]
 800f5e0:	9902      	ldr	r1, [sp, #8]
 800f5e2:	4640      	mov	r0, r8
 800f5e4:	f006 fe6a 	bl	80162bc <uxr_receive_reliable_message>
 800f5e8:	b1d0      	cbz	r0, 800f620 <wait_session_status+0x148>
 800f5ea:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d03a      	beq.n	800f668 <wait_session_status+0x190>
 800f5f2:	9f04      	ldr	r7, [sp, #16]
 800f5f4:	e00a      	b.n	800f60c <wait_session_status+0x134>
 800f5f6:	f04f 0302 	mov.w	r3, #2
 800f5fa:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800f5fe:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800f602:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800f606:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f608:	f7ff fbec 	bl	800ede4 <read_submessage_list>
 800f60c:	a914      	add	r1, sp, #80	@ 0x50
 800f60e:	2204      	movs	r2, #4
 800f610:	4640      	mov	r0, r8
 800f612:	f006 fed3 	bl	80163bc <uxr_next_input_reliable_buffer_available>
 800f616:	4603      	mov	r3, r0
 800f618:	a914      	add	r1, sp, #80	@ 0x50
 800f61a:	4620      	mov	r0, r4
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d1ea      	bne.n	800f5f6 <wait_session_status+0x11e>
 800f620:	9904      	ldr	r1, [sp, #16]
 800f622:	4632      	mov	r2, r6
 800f624:	4620      	mov	r0, r4
 800f626:	f7ff fa59 	bl	800eadc <write_submessage_acknack.isra.0>
 800f62a:	e76f      	b.n	800f50c <wait_session_status+0x34>
 800f62c:	4631      	mov	r1, r6
 800f62e:	f104 0008 	add.w	r0, r4, #8
 800f632:	f001 f82d 	bl	8010690 <uxr_get_input_best_effort_stream>
 800f636:	2800      	cmp	r0, #0
 800f638:	f43f af68 	beq.w	800f50c <wait_session_status+0x34>
 800f63c:	9902      	ldr	r1, [sp, #8]
 800f63e:	f006 fda9 	bl	8016194 <uxr_receive_best_effort_message>
 800f642:	2800      	cmp	r0, #0
 800f644:	f43f af62 	beq.w	800f50c <wait_session_status+0x34>
 800f648:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800f64c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f64e:	a90c      	add	r1, sp, #48	@ 0x30
 800f650:	4620      	mov	r0, r4
 800f652:	f7ff fbc7 	bl	800ede4 <read_submessage_list>
 800f656:	e759      	b.n	800f50c <wait_session_status+0x34>
 800f658:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f65a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800f65e:	47a0      	blx	r4
 800f660:	2001      	movs	r0, #1
 800f662:	b01d      	add	sp, #116	@ 0x74
 800f664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f668:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800f66c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f66e:	a90c      	add	r1, sp, #48	@ 0x30
 800f670:	4620      	mov	r0, r4
 800f672:	f7ff fbb7 	bl	800ede4 <read_submessage_list>
 800f676:	e7bc      	b.n	800f5f2 <wait_session_status+0x11a>

0800f678 <uxr_delete_session_retries>:
 800f678:	b530      	push	{r4, r5, lr}
 800f67a:	b08f      	sub	sp, #60	@ 0x3c
 800f67c:	4604      	mov	r4, r0
 800f67e:	460d      	mov	r5, r1
 800f680:	f000 fa2e 	bl	800fae0 <uxr_session_header_offset>
 800f684:	2300      	movs	r3, #0
 800f686:	2210      	movs	r2, #16
 800f688:	9000      	str	r0, [sp, #0]
 800f68a:	a902      	add	r1, sp, #8
 800f68c:	a806      	add	r0, sp, #24
 800f68e:	f7fe fd27 	bl	800e0e0 <ucdr_init_buffer_origin_offset>
 800f692:	a906      	add	r1, sp, #24
 800f694:	4620      	mov	r0, r4
 800f696:	f000 f973 	bl	800f980 <uxr_buffer_delete_session>
 800f69a:	2200      	movs	r2, #0
 800f69c:	4611      	mov	r1, r2
 800f69e:	9b06      	ldr	r3, [sp, #24]
 800f6a0:	4620      	mov	r0, r4
 800f6a2:	f000 f9c7 	bl	800fa34 <uxr_stamp_session_header>
 800f6a6:	a806      	add	r0, sp, #24
 800f6a8:	f7fe fd58 	bl	800e15c <ucdr_buffer_length>
 800f6ac:	462b      	mov	r3, r5
 800f6ae:	4602      	mov	r2, r0
 800f6b0:	a902      	add	r1, sp, #8
 800f6b2:	4620      	mov	r0, r4
 800f6b4:	f7ff ff10 	bl	800f4d8 <wait_session_status>
 800f6b8:	b118      	cbz	r0, 800f6c2 <uxr_delete_session_retries+0x4a>
 800f6ba:	7960      	ldrb	r0, [r4, #5]
 800f6bc:	fab0 f080 	clz	r0, r0
 800f6c0:	0940      	lsrs	r0, r0, #5
 800f6c2:	b00f      	add	sp, #60	@ 0x3c
 800f6c4:	bd30      	pop	{r4, r5, pc}
 800f6c6:	bf00      	nop

0800f6c8 <uxr_create_session>:
 800f6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6cc:	f100 0b08 	add.w	fp, r0, #8
 800f6d0:	b0ab      	sub	sp, #172	@ 0xac
 800f6d2:	4604      	mov	r4, r0
 800f6d4:	4658      	mov	r0, fp
 800f6d6:	f000 ff2b 	bl	8010530 <uxr_reset_stream_storage>
 800f6da:	4620      	mov	r0, r4
 800f6dc:	f000 fa00 	bl	800fae0 <uxr_session_header_offset>
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	9000      	str	r0, [sp, #0]
 800f6e4:	221c      	movs	r2, #28
 800f6e6:	a90b      	add	r1, sp, #44	@ 0x2c
 800f6e8:	a812      	add	r0, sp, #72	@ 0x48
 800f6ea:	f7fe fcf9 	bl	800e0e0 <ucdr_init_buffer_origin_offset>
 800f6ee:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f6f0:	8a1a      	ldrh	r2, [r3, #16]
 800f6f2:	3a04      	subs	r2, #4
 800f6f4:	b292      	uxth	r2, r2
 800f6f6:	a912      	add	r1, sp, #72	@ 0x48
 800f6f8:	4620      	mov	r0, r4
 800f6fa:	f000 f917 	bl	800f92c <uxr_buffer_create_session>
 800f6fe:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800f700:	4620      	mov	r0, r4
 800f702:	f000 f983 	bl	800fa0c <uxr_stamp_create_session_header>
 800f706:	a812      	add	r0, sp, #72	@ 0x48
 800f708:	f7fe fd28 	bl	800e15c <ucdr_buffer_length>
 800f70c:	23ff      	movs	r3, #255	@ 0xff
 800f70e:	7163      	strb	r3, [r4, #5]
 800f710:	230a      	movs	r3, #10
 800f712:	46da      	mov	sl, fp
 800f714:	9303      	str	r3, [sp, #12]
 800f716:	4683      	mov	fp, r0
 800f718:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f71a:	465a      	mov	r2, fp
 800f71c:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f720:	a90b      	add	r1, sp, #44	@ 0x2c
 800f722:	47a8      	blx	r5
 800f724:	f001 f824 	bl	8010770 <uxr_millis>
 800f728:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f72c:	4605      	mov	r5, r0
 800f72e:	e009      	b.n	800f744 <uxr_create_session+0x7c>
 800f730:	f001 f81e 	bl	8010770 <uxr_millis>
 800f734:	1b40      	subs	r0, r0, r5
 800f736:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	7962      	ldrb	r2, [r4, #5]
 800f73e:	dd38      	ble.n	800f7b2 <uxr_create_session+0xea>
 800f740:	2aff      	cmp	r2, #255	@ 0xff
 800f742:	d13c      	bne.n	800f7be <uxr_create_session+0xf6>
 800f744:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800f746:	a907      	add	r1, sp, #28
 800f748:	6896      	ldr	r6, [r2, #8]
 800f74a:	6810      	ldr	r0, [r2, #0]
 800f74c:	aa08      	add	r2, sp, #32
 800f74e:	47b0      	blx	r6
 800f750:	2800      	cmp	r0, #0
 800f752:	d0ed      	beq.n	800f730 <uxr_create_session+0x68>
 800f754:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800f758:	a81a      	add	r0, sp, #104	@ 0x68
 800f75a:	f7fe fcd3 	bl	800e104 <ucdr_init_buffer>
 800f75e:	2600      	movs	r6, #0
 800f760:	f10d 031a 	add.w	r3, sp, #26
 800f764:	aa06      	add	r2, sp, #24
 800f766:	a91a      	add	r1, sp, #104	@ 0x68
 800f768:	4620      	mov	r0, r4
 800f76a:	f88d 6018 	strb.w	r6, [sp, #24]
 800f76e:	f000 f975 	bl	800fa5c <uxr_read_session_header>
 800f772:	2800      	cmp	r0, #0
 800f774:	d0dc      	beq.n	800f730 <uxr_create_session+0x68>
 800f776:	4631      	mov	r1, r6
 800f778:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f77c:	f000 fea4 	bl	80104c8 <uxr_stream_id_from_raw>
 800f780:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800f784:	2e01      	cmp	r6, #1
 800f786:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800f78a:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800f78e:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800f792:	d053      	beq.n	800f83c <uxr_create_session+0x174>
 800f794:	2e02      	cmp	r6, #2
 800f796:	d018      	beq.n	800f7ca <uxr_create_session+0x102>
 800f798:	2e00      	cmp	r6, #0
 800f79a:	d1c9      	bne.n	800f730 <uxr_create_session+0x68>
 800f79c:	4631      	mov	r1, r6
 800f79e:	4630      	mov	r0, r6
 800f7a0:	f000 fe92 	bl	80104c8 <uxr_stream_id_from_raw>
 800f7a4:	a91a      	add	r1, sp, #104	@ 0x68
 800f7a6:	4602      	mov	r2, r0
 800f7a8:	900a      	str	r0, [sp, #40]	@ 0x28
 800f7aa:	4620      	mov	r0, r4
 800f7ac:	f7ff fb1a 	bl	800ede4 <read_submessage_list>
 800f7b0:	e7be      	b.n	800f730 <uxr_create_session+0x68>
 800f7b2:	9b03      	ldr	r3, [sp, #12]
 800f7b4:	3b01      	subs	r3, #1
 800f7b6:	9303      	str	r3, [sp, #12]
 800f7b8:	d001      	beq.n	800f7be <uxr_create_session+0xf6>
 800f7ba:	2aff      	cmp	r2, #255	@ 0xff
 800f7bc:	d0ac      	beq.n	800f718 <uxr_create_session+0x50>
 800f7be:	2a00      	cmp	r2, #0
 800f7c0:	d051      	beq.n	800f866 <uxr_create_session+0x19e>
 800f7c2:	2000      	movs	r0, #0
 800f7c4:	b02b      	add	sp, #172	@ 0xac
 800f7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7ca:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800f7ce:	9304      	str	r3, [sp, #16]
 800f7d0:	4639      	mov	r1, r7
 800f7d2:	4650      	mov	r0, sl
 800f7d4:	f000 ff66 	bl	80106a4 <uxr_get_input_reliable_stream>
 800f7d8:	4680      	mov	r8, r0
 800f7da:	b348      	cbz	r0, 800f830 <uxr_create_session+0x168>
 800f7dc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f7de:	9205      	str	r2, [sp, #20]
 800f7e0:	a81a      	add	r0, sp, #104	@ 0x68
 800f7e2:	f7fe fcbf 	bl	800e164 <ucdr_buffer_remaining>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	f10d 0019 	add.w	r0, sp, #25
 800f7ec:	9000      	str	r0, [sp, #0]
 800f7ee:	9a05      	ldr	r2, [sp, #20]
 800f7f0:	4649      	mov	r1, r9
 800f7f2:	4640      	mov	r0, r8
 800f7f4:	f006 fd62 	bl	80162bc <uxr_receive_reliable_message>
 800f7f8:	b1d0      	cbz	r0, 800f830 <uxr_create_session+0x168>
 800f7fa:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d038      	beq.n	800f874 <uxr_create_session+0x1ac>
 800f802:	9e04      	ldr	r6, [sp, #16]
 800f804:	e00a      	b.n	800f81c <uxr_create_session+0x154>
 800f806:	f04f 0302 	mov.w	r3, #2
 800f80a:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800f80e:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800f812:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f816:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f818:	f7ff fae4 	bl	800ede4 <read_submessage_list>
 800f81c:	a922      	add	r1, sp, #136	@ 0x88
 800f81e:	2204      	movs	r2, #4
 800f820:	4640      	mov	r0, r8
 800f822:	f006 fdcb 	bl	80163bc <uxr_next_input_reliable_buffer_available>
 800f826:	4603      	mov	r3, r0
 800f828:	a922      	add	r1, sp, #136	@ 0x88
 800f82a:	4620      	mov	r0, r4
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d1ea      	bne.n	800f806 <uxr_create_session+0x13e>
 800f830:	9904      	ldr	r1, [sp, #16]
 800f832:	463a      	mov	r2, r7
 800f834:	4620      	mov	r0, r4
 800f836:	f7ff f951 	bl	800eadc <write_submessage_acknack.isra.0>
 800f83a:	e779      	b.n	800f730 <uxr_create_session+0x68>
 800f83c:	4639      	mov	r1, r7
 800f83e:	4650      	mov	r0, sl
 800f840:	f000 ff26 	bl	8010690 <uxr_get_input_best_effort_stream>
 800f844:	2800      	cmp	r0, #0
 800f846:	f43f af73 	beq.w	800f730 <uxr_create_session+0x68>
 800f84a:	4649      	mov	r1, r9
 800f84c:	f006 fca2 	bl	8016194 <uxr_receive_best_effort_message>
 800f850:	2800      	cmp	r0, #0
 800f852:	f43f af6d 	beq.w	800f730 <uxr_create_session+0x68>
 800f856:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800f85a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f85c:	a91a      	add	r1, sp, #104	@ 0x68
 800f85e:	4620      	mov	r0, r4
 800f860:	f7ff fac0 	bl	800ede4 <read_submessage_list>
 800f864:	e764      	b.n	800f730 <uxr_create_session+0x68>
 800f866:	4650      	mov	r0, sl
 800f868:	f000 fe62 	bl	8010530 <uxr_reset_stream_storage>
 800f86c:	2001      	movs	r0, #1
 800f86e:	b02b      	add	sp, #172	@ 0xac
 800f870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f874:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800f878:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f87a:	a91a      	add	r1, sp, #104	@ 0x68
 800f87c:	4620      	mov	r0, r4
 800f87e:	f7ff fab1 	bl	800ede4 <read_submessage_list>
 800f882:	e7be      	b.n	800f802 <uxr_create_session+0x13a>

0800f884 <uxr_prepare_stream_to_write_submessage>:
 800f884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f888:	b082      	sub	sp, #8
 800f88a:	4682      	mov	sl, r0
 800f88c:	4610      	mov	r0, r2
 800f88e:	4615      	mov	r5, r2
 800f890:	461e      	mov	r6, r3
 800f892:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800f896:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800f89a:	9101      	str	r1, [sp, #4]
 800f89c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800f8a0:	f000 ff60 	bl	8010764 <uxr_submessage_padding>
 800f8a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f8a8:	f105 0904 	add.w	r9, r5, #4
 800f8ac:	2b01      	cmp	r3, #1
 800f8ae:	4481      	add	r9, r0
 800f8b0:	d01d      	beq.n	800f8ee <uxr_prepare_stream_to_write_submessage+0x6a>
 800f8b2:	2b02      	cmp	r3, #2
 800f8b4:	d116      	bne.n	800f8e4 <uxr_prepare_stream_to_write_submessage+0x60>
 800f8b6:	4621      	mov	r1, r4
 800f8b8:	f10a 0008 	add.w	r0, sl, #8
 800f8bc:	f000 fede 	bl	801067c <uxr_get_output_reliable_stream>
 800f8c0:	4604      	mov	r4, r0
 800f8c2:	b158      	cbz	r0, 800f8dc <uxr_prepare_stream_to_write_submessage+0x58>
 800f8c4:	4649      	mov	r1, r9
 800f8c6:	4632      	mov	r2, r6
 800f8c8:	f006 ff34 	bl	8016734 <uxr_prepare_reliable_buffer_to_write>
 800f8cc:	4604      	mov	r4, r0
 800f8ce:	b12c      	cbz	r4, 800f8dc <uxr_prepare_stream_to_write_submessage+0x58>
 800f8d0:	4643      	mov	r3, r8
 800f8d2:	b2aa      	uxth	r2, r5
 800f8d4:	4639      	mov	r1, r7
 800f8d6:	4630      	mov	r0, r6
 800f8d8:	f000 ff04 	bl	80106e4 <uxr_buffer_submessage_header>
 800f8dc:	4620      	mov	r0, r4
 800f8de:	b002      	add	sp, #8
 800f8e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8e4:	2400      	movs	r4, #0
 800f8e6:	4620      	mov	r0, r4
 800f8e8:	b002      	add	sp, #8
 800f8ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8ee:	4621      	mov	r1, r4
 800f8f0:	f10a 0008 	add.w	r0, sl, #8
 800f8f4:	f000 feba 	bl	801066c <uxr_get_output_best_effort_stream>
 800f8f8:	4604      	mov	r4, r0
 800f8fa:	2800      	cmp	r0, #0
 800f8fc:	d0ee      	beq.n	800f8dc <uxr_prepare_stream_to_write_submessage+0x58>
 800f8fe:	4649      	mov	r1, r9
 800f900:	4632      	mov	r2, r6
 800f902:	f006 fe47 	bl	8016594 <uxr_prepare_best_effort_buffer_to_write>
 800f906:	4604      	mov	r4, r0
 800f908:	e7e1      	b.n	800f8ce <uxr_prepare_stream_to_write_submessage+0x4a>
 800f90a:	bf00      	nop

0800f90c <uxr_init_session_info>:
 800f90c:	0e13      	lsrs	r3, r2, #24
 800f90e:	7043      	strb	r3, [r0, #1]
 800f910:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800f914:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800f918:	7001      	strb	r1, [r0, #0]
 800f91a:	70c3      	strb	r3, [r0, #3]
 800f91c:	2109      	movs	r1, #9
 800f91e:	23ff      	movs	r3, #255	@ 0xff
 800f920:	f880 c002 	strb.w	ip, [r0, #2]
 800f924:	7102      	strb	r2, [r0, #4]
 800f926:	80c1      	strh	r1, [r0, #6]
 800f928:	7143      	strb	r3, [r0, #5]
 800f92a:	4770      	bx	lr

0800f92c <uxr_buffer_create_session>:
 800f92c:	b530      	push	{r4, r5, lr}
 800f92e:	b089      	sub	sp, #36	@ 0x24
 800f930:	2300      	movs	r3, #0
 800f932:	4d12      	ldr	r5, [pc, #72]	@ (800f97c <uxr_buffer_create_session+0x50>)
 800f934:	9307      	str	r3, [sp, #28]
 800f936:	f8ad 201c 	strh.w	r2, [sp, #28]
 800f93a:	2201      	movs	r2, #1
 800f93c:	9301      	str	r3, [sp, #4]
 800f93e:	80c2      	strh	r2, [r0, #6]
 800f940:	f88d 2004 	strb.w	r2, [sp, #4]
 800f944:	682a      	ldr	r2, [r5, #0]
 800f946:	9200      	str	r2, [sp, #0]
 800f948:	88aa      	ldrh	r2, [r5, #4]
 800f94a:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f94e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800f952:	9202      	str	r2, [sp, #8]
 800f954:	460c      	mov	r4, r1
 800f956:	7802      	ldrb	r2, [r0, #0]
 800f958:	9303      	str	r3, [sp, #12]
 800f95a:	4619      	mov	r1, r3
 800f95c:	f88d 200c 	strb.w	r2, [sp, #12]
 800f960:	4620      	mov	r0, r4
 800f962:	2210      	movs	r2, #16
 800f964:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800f968:	9306      	str	r3, [sp, #24]
 800f96a:	f000 febb 	bl	80106e4 <uxr_buffer_submessage_header>
 800f96e:	4669      	mov	r1, sp
 800f970:	4620      	mov	r0, r4
 800f972:	f001 feff 	bl	8011774 <uxr_serialize_CREATE_CLIENT_Payload>
 800f976:	b009      	add	sp, #36	@ 0x24
 800f978:	bd30      	pop	{r4, r5, pc}
 800f97a:	bf00      	nop
 800f97c:	08018c00 	.word	0x08018c00

0800f980 <uxr_buffer_delete_session>:
 800f980:	b510      	push	{r4, lr}
 800f982:	4b0c      	ldr	r3, [pc, #48]	@ (800f9b4 <uxr_buffer_delete_session+0x34>)
 800f984:	b082      	sub	sp, #8
 800f986:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800f98a:	f8ad c006 	strh.w	ip, [sp, #6]
 800f98e:	460c      	mov	r4, r1
 800f990:	2202      	movs	r2, #2
 800f992:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f996:	80c2      	strh	r2, [r0, #6]
 800f998:	f8ad 3004 	strh.w	r3, [sp, #4]
 800f99c:	2204      	movs	r2, #4
 800f99e:	2300      	movs	r3, #0
 800f9a0:	2103      	movs	r1, #3
 800f9a2:	4620      	mov	r0, r4
 800f9a4:	f000 fe9e 	bl	80106e4 <uxr_buffer_submessage_header>
 800f9a8:	a901      	add	r1, sp, #4
 800f9aa:	4620      	mov	r0, r4
 800f9ac:	f001 ff88 	bl	80118c0 <uxr_serialize_DELETE_Payload>
 800f9b0:	b002      	add	sp, #8
 800f9b2:	bd10      	pop	{r4, pc}
 800f9b4:	08018c00 	.word	0x08018c00

0800f9b8 <uxr_read_create_session_status>:
 800f9b8:	b510      	push	{r4, lr}
 800f9ba:	b088      	sub	sp, #32
 800f9bc:	4604      	mov	r4, r0
 800f9be:	4608      	mov	r0, r1
 800f9c0:	a901      	add	r1, sp, #4
 800f9c2:	f001 ff8d 	bl	80118e0 <uxr_deserialize_STATUS_AGENT_Payload>
 800f9c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f9ca:	7163      	strb	r3, [r4, #5]
 800f9cc:	b008      	add	sp, #32
 800f9ce:	bd10      	pop	{r4, pc}

0800f9d0 <uxr_read_delete_session_status>:
 800f9d0:	b510      	push	{r4, lr}
 800f9d2:	4604      	mov	r4, r0
 800f9d4:	b084      	sub	sp, #16
 800f9d6:	4608      	mov	r0, r1
 800f9d8:	a902      	add	r1, sp, #8
 800f9da:	f001 ffb1 	bl	8011940 <uxr_deserialize_STATUS_Payload>
 800f9de:	88e3      	ldrh	r3, [r4, #6]
 800f9e0:	2b02      	cmp	r3, #2
 800f9e2:	d001      	beq.n	800f9e8 <uxr_read_delete_session_status+0x18>
 800f9e4:	b004      	add	sp, #16
 800f9e6:	bd10      	pop	{r4, pc}
 800f9e8:	f10d 000a 	add.w	r0, sp, #10
 800f9ec:	f7fe fecc 	bl	800e788 <uxr_object_id_from_raw>
 800f9f0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800f9f4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800f9f8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f9fc:	b29b      	uxth	r3, r3
 800f9fe:	2b02      	cmp	r3, #2
 800fa00:	bf04      	itt	eq
 800fa02:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800fa06:	7163      	strbeq	r3, [r4, #5]
 800fa08:	b004      	add	sp, #16
 800fa0a:	bd10      	pop	{r4, pc}

0800fa0c <uxr_stamp_create_session_header>:
 800fa0c:	b510      	push	{r4, lr}
 800fa0e:	2208      	movs	r2, #8
 800fa10:	b08a      	sub	sp, #40	@ 0x28
 800fa12:	4604      	mov	r4, r0
 800fa14:	eb0d 0002 	add.w	r0, sp, r2
 800fa18:	f7fe fb74 	bl	800e104 <ucdr_init_buffer>
 800fa1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa20:	9400      	str	r4, [sp, #0]
 800fa22:	2300      	movs	r3, #0
 800fa24:	461a      	mov	r2, r3
 800fa26:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800fa2a:	a802      	add	r0, sp, #8
 800fa2c:	f001 f854 	bl	8010ad8 <uxr_serialize_message_header>
 800fa30:	b00a      	add	sp, #40	@ 0x28
 800fa32:	bd10      	pop	{r4, pc}

0800fa34 <uxr_stamp_session_header>:
 800fa34:	b530      	push	{r4, r5, lr}
 800fa36:	b08d      	sub	sp, #52	@ 0x34
 800fa38:	4604      	mov	r4, r0
 800fa3a:	460d      	mov	r5, r1
 800fa3c:	9203      	str	r2, [sp, #12]
 800fa3e:	4619      	mov	r1, r3
 800fa40:	a804      	add	r0, sp, #16
 800fa42:	2208      	movs	r2, #8
 800fa44:	f7fe fb5e 	bl	800e104 <ucdr_init_buffer>
 800fa48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa4c:	9b03      	ldr	r3, [sp, #12]
 800fa4e:	9400      	str	r4, [sp, #0]
 800fa50:	462a      	mov	r2, r5
 800fa52:	a804      	add	r0, sp, #16
 800fa54:	f001 f840 	bl	8010ad8 <uxr_serialize_message_header>
 800fa58:	b00d      	add	sp, #52	@ 0x34
 800fa5a:	bd30      	pop	{r4, r5, pc}

0800fa5c <uxr_read_session_header>:
 800fa5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa60:	4607      	mov	r7, r0
 800fa62:	b084      	sub	sp, #16
 800fa64:	4608      	mov	r0, r1
 800fa66:	460c      	mov	r4, r1
 800fa68:	4615      	mov	r5, r2
 800fa6a:	461e      	mov	r6, r3
 800fa6c:	f7fe fb7a 	bl	800e164 <ucdr_buffer_remaining>
 800fa70:	2808      	cmp	r0, #8
 800fa72:	d803      	bhi.n	800fa7c <uxr_read_session_header+0x20>
 800fa74:	2000      	movs	r0, #0
 800fa76:	b004      	add	sp, #16
 800fa78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa7c:	f10d 080c 	add.w	r8, sp, #12
 800fa80:	4633      	mov	r3, r6
 800fa82:	462a      	mov	r2, r5
 800fa84:	f8cd 8000 	str.w	r8, [sp]
 800fa88:	4620      	mov	r0, r4
 800fa8a:	f10d 010b 	add.w	r1, sp, #11
 800fa8e:	f001 f841 	bl	8010b14 <uxr_deserialize_message_header>
 800fa92:	783a      	ldrb	r2, [r7, #0]
 800fa94:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800fa98:	4293      	cmp	r3, r2
 800fa9a:	d1eb      	bne.n	800fa74 <uxr_read_session_header+0x18>
 800fa9c:	061b      	lsls	r3, r3, #24
 800fa9e:	d41c      	bmi.n	800fada <uxr_read_session_header+0x7e>
 800faa0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800faa4:	787b      	ldrb	r3, [r7, #1]
 800faa6:	429a      	cmp	r2, r3
 800faa8:	d003      	beq.n	800fab2 <uxr_read_session_header+0x56>
 800faaa:	2001      	movs	r0, #1
 800faac:	f080 0001 	eor.w	r0, r0, #1
 800fab0:	e7e1      	b.n	800fa76 <uxr_read_session_header+0x1a>
 800fab2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800fab6:	78bb      	ldrb	r3, [r7, #2]
 800fab8:	429a      	cmp	r2, r3
 800faba:	f107 0102 	add.w	r1, r7, #2
 800fabe:	d1f4      	bne.n	800faaa <uxr_read_session_header+0x4e>
 800fac0:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800fac4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fac8:	429a      	cmp	r2, r3
 800faca:	d1ee      	bne.n	800faaa <uxr_read_session_header+0x4e>
 800facc:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800fad0:	784b      	ldrb	r3, [r1, #1]
 800fad2:	429a      	cmp	r2, r3
 800fad4:	d1e9      	bne.n	800faaa <uxr_read_session_header+0x4e>
 800fad6:	2000      	movs	r0, #0
 800fad8:	e7e8      	b.n	800faac <uxr_read_session_header+0x50>
 800fada:	2001      	movs	r0, #1
 800fadc:	e7cb      	b.n	800fa76 <uxr_read_session_header+0x1a>
 800fade:	bf00      	nop

0800fae0 <uxr_session_header_offset>:
 800fae0:	f990 3000 	ldrsb.w	r3, [r0]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	bfac      	ite	ge
 800fae8:	2008      	movge	r0, #8
 800faea:	2004      	movlt	r0, #4
 800faec:	4770      	bx	lr
 800faee:	bf00      	nop

0800faf0 <uxr_init_base_object_request>:
 800faf0:	b510      	push	{r4, lr}
 800faf2:	88c3      	ldrh	r3, [r0, #6]
 800faf4:	b082      	sub	sp, #8
 800faf6:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800fafa:	9101      	str	r1, [sp, #4]
 800fafc:	f1a3 010a 	sub.w	r1, r3, #10
 800fb00:	b289      	uxth	r1, r1
 800fb02:	42a1      	cmp	r1, r4
 800fb04:	d80e      	bhi.n	800fb24 <uxr_init_base_object_request+0x34>
 800fb06:	3301      	adds	r3, #1
 800fb08:	b29c      	uxth	r4, r3
 800fb0a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800fb0e:	b2db      	uxtb	r3, r3
 800fb10:	80c4      	strh	r4, [r0, #6]
 800fb12:	9801      	ldr	r0, [sp, #4]
 800fb14:	7011      	strb	r1, [r2, #0]
 800fb16:	7053      	strb	r3, [r2, #1]
 800fb18:	1c91      	adds	r1, r2, #2
 800fb1a:	f7fe fe49 	bl	800e7b0 <uxr_object_id_to_raw>
 800fb1e:	4620      	mov	r0, r4
 800fb20:	b002      	add	sp, #8
 800fb22:	bd10      	pop	{r4, pc}
 800fb24:	230a      	movs	r3, #10
 800fb26:	2100      	movs	r1, #0
 800fb28:	461c      	mov	r4, r3
 800fb2a:	e7f1      	b.n	800fb10 <uxr_init_base_object_request+0x20>

0800fb2c <uxr_parse_base_object_request>:
 800fb2c:	b570      	push	{r4, r5, r6, lr}
 800fb2e:	4604      	mov	r4, r0
 800fb30:	3002      	adds	r0, #2
 800fb32:	460d      	mov	r5, r1
 800fb34:	4616      	mov	r6, r2
 800fb36:	f7fe fe27 	bl	800e788 <uxr_object_id_from_raw>
 800fb3a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800fb3e:	8028      	strh	r0, [r5, #0]
 800fb40:	806b      	strh	r3, [r5, #2]
 800fb42:	7822      	ldrb	r2, [r4, #0]
 800fb44:	7863      	ldrb	r3, [r4, #1]
 800fb46:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800fb4a:	8033      	strh	r3, [r6, #0]
 800fb4c:	bd70      	pop	{r4, r5, r6, pc}
 800fb4e:	bf00      	nop

0800fb50 <uxr_init_framing_io>:
 800fb50:	2300      	movs	r3, #0
 800fb52:	7041      	strb	r1, [r0, #1]
 800fb54:	7003      	strb	r3, [r0, #0]
 800fb56:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800fb58:	4770      	bx	lr
 800fb5a:	bf00      	nop

0800fb5c <uxr_write_framed_msg>:
 800fb5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb60:	4617      	mov	r7, r2
 800fb62:	7842      	ldrb	r2, [r0, #1]
 800fb64:	b083      	sub	sp, #12
 800fb66:	460e      	mov	r6, r1
 800fb68:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 800fb6c:	469a      	mov	sl, r3
 800fb6e:	2901      	cmp	r1, #1
 800fb70:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 800fb74:	4604      	mov	r4, r0
 800fb76:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 800fb7a:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800fb7e:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 800fb82:	f240 8137 	bls.w	800fdf4 <uxr_write_framed_msg+0x298>
 800fb86:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800fb8a:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 800fb8e:	2901      	cmp	r1, #1
 800fb90:	f04f 0202 	mov.w	r2, #2
 800fb94:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fb98:	f240 808f 	bls.w	800fcba <uxr_write_framed_msg+0x15e>
 800fb9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fb9e:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 800fba2:	b2dd      	uxtb	r5, r3
 800fba4:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800fba8:	2203      	movs	r2, #3
 800fbaa:	2901      	cmp	r1, #1
 800fbac:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fbb0:	f240 809a 	bls.w	800fce8 <uxr_write_framed_msg+0x18c>
 800fbb4:	18a1      	adds	r1, r4, r2
 800fbb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fbb8:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800fbbc:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800fbc0:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800fbc4:	3201      	adds	r2, #1
 800fbc6:	2801      	cmp	r0, #1
 800fbc8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fbcc:	f240 80a0 	bls.w	800fd10 <uxr_write_framed_msg+0x1b4>
 800fbd0:	18a0      	adds	r0, r4, r2
 800fbd2:	3201      	adds	r2, #1
 800fbd4:	b2d2      	uxtb	r2, r2
 800fbd6:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800fbda:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	f000 80a9 	beq.w	800fd36 <uxr_write_framed_msg+0x1da>
 800fbe4:	f04f 0900 	mov.w	r9, #0
 800fbe8:	46c8      	mov	r8, r9
 800fbea:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800fbee:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800fbf2:	2901      	cmp	r1, #1
 800fbf4:	f240 80c3 	bls.w	800fd7e <uxr_write_framed_msg+0x222>
 800fbf8:	2a29      	cmp	r2, #41	@ 0x29
 800fbfa:	f200 809f 	bhi.w	800fd3c <uxr_write_framed_msg+0x1e0>
 800fbfe:	18a1      	adds	r1, r4, r2
 800fc00:	3201      	adds	r2, #1
 800fc02:	b2d2      	uxtb	r2, r2
 800fc04:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800fc08:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fc0c:	ea89 0303 	eor.w	r3, r9, r3
 800fc10:	498c      	ldr	r1, [pc, #560]	@ (800fe44 <uxr_write_framed_msg+0x2e8>)
 800fc12:	b2db      	uxtb	r3, r3
 800fc14:	f108 0801 	add.w	r8, r8, #1
 800fc18:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800fc1c:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 800fc20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fc22:	4543      	cmp	r3, r8
 800fc24:	d8e1      	bhi.n	800fbea <uxr_write_framed_msg+0x8e>
 800fc26:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800fc2a:	fa5f f889 	uxtb.w	r8, r9
 800fc2e:	9301      	str	r3, [sp, #4]
 800fc30:	f04f 0900 	mov.w	r9, #0
 800fc34:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 800fc38:	fa5f f18a 	uxtb.w	r1, sl
 800fc3c:	2901      	cmp	r1, #1
 800fc3e:	d921      	bls.n	800fc84 <uxr_write_framed_msg+0x128>
 800fc40:	2a29      	cmp	r2, #41	@ 0x29
 800fc42:	f240 80af 	bls.w	800fda4 <uxr_write_framed_msg+0x248>
 800fc46:	2500      	movs	r5, #0
 800fc48:	e000      	b.n	800fc4c <uxr_write_framed_msg+0xf0>
 800fc4a:	b160      	cbz	r0, 800fc66 <uxr_write_framed_msg+0x10a>
 800fc4c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800fc50:	1b52      	subs	r2, r2, r5
 800fc52:	465b      	mov	r3, fp
 800fc54:	4421      	add	r1, r4
 800fc56:	4638      	mov	r0, r7
 800fc58:	47b0      	blx	r6
 800fc5a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800fc5e:	4405      	add	r5, r0
 800fc60:	4295      	cmp	r5, r2
 800fc62:	d3f2      	bcc.n	800fc4a <uxr_write_framed_msg+0xee>
 800fc64:	d003      	beq.n	800fc6e <uxr_write_framed_msg+0x112>
 800fc66:	2000      	movs	r0, #0
 800fc68:	b003      	add	sp, #12
 800fc6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc6e:	fa5f f18a 	uxtb.w	r1, sl
 800fc72:	f04f 0300 	mov.w	r3, #0
 800fc76:	2901      	cmp	r1, #1
 800fc78:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800fc7c:	f04f 0200 	mov.w	r2, #0
 800fc80:	f200 8090 	bhi.w	800fda4 <uxr_write_framed_msg+0x248>
 800fc84:	1c51      	adds	r1, r2, #1
 800fc86:	b2c9      	uxtb	r1, r1
 800fc88:	2929      	cmp	r1, #41	@ 0x29
 800fc8a:	d8dc      	bhi.n	800fc46 <uxr_write_framed_msg+0xea>
 800fc8c:	18a5      	adds	r5, r4, r2
 800fc8e:	4421      	add	r1, r4
 800fc90:	3202      	adds	r2, #2
 800fc92:	f088 0820 	eor.w	r8, r8, #32
 800fc96:	4648      	mov	r0, r9
 800fc98:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 800fc9c:	b2d2      	uxtb	r2, r2
 800fc9e:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800fca2:	f04f 0901 	mov.w	r9, #1
 800fca6:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800fcaa:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fcae:	2800      	cmp	r0, #0
 800fcb0:	f040 8085 	bne.w	800fdbe <uxr_write_framed_msg+0x262>
 800fcb4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fcb8:	e7bc      	b.n	800fc34 <uxr_write_framed_msg+0xd8>
 800fcba:	4611      	mov	r1, r2
 800fcbc:	f04f 0c03 	mov.w	ip, #3
 800fcc0:	2204      	movs	r2, #4
 800fcc2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fcc4:	4421      	add	r1, r4
 800fcc6:	b2dd      	uxtb	r5, r3
 800fcc8:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 800fccc:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 800fcd0:	44a4      	add	ip, r4
 800fcd2:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800fcd6:	f080 0020 	eor.w	r0, r0, #32
 800fcda:	2901      	cmp	r1, #1
 800fcdc:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 800fce0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fce4:	f63f af66 	bhi.w	800fbb4 <uxr_write_framed_msg+0x58>
 800fce8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fcea:	18a0      	adds	r0, r4, r2
 800fcec:	f085 0520 	eor.w	r5, r5, #32
 800fcf0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800fcf4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800fcf8:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800fcfc:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 800fd00:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800fd04:	3202      	adds	r2, #2
 800fd06:	2801      	cmp	r0, #1
 800fd08:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fd0c:	f63f af60 	bhi.w	800fbd0 <uxr_write_framed_msg+0x74>
 800fd10:	1c50      	adds	r0, r2, #1
 800fd12:	18a5      	adds	r5, r4, r2
 800fd14:	fa54 f080 	uxtab	r0, r4, r0
 800fd18:	3202      	adds	r2, #2
 800fd1a:	f081 0120 	eor.w	r1, r1, #32
 800fd1e:	b2d2      	uxtb	r2, r2
 800fd20:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800fd24:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 800fd28:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800fd2c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	f47f af57 	bne.w	800fbe4 <uxr_write_framed_msg+0x88>
 800fd36:	9301      	str	r3, [sp, #4]
 800fd38:	4698      	mov	r8, r3
 800fd3a:	e779      	b.n	800fc30 <uxr_write_framed_msg+0xd4>
 800fd3c:	2500      	movs	r5, #0
 800fd3e:	e001      	b.n	800fd44 <uxr_write_framed_msg+0x1e8>
 800fd40:	2800      	cmp	r0, #0
 800fd42:	d090      	beq.n	800fc66 <uxr_write_framed_msg+0x10a>
 800fd44:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800fd48:	1b52      	subs	r2, r2, r5
 800fd4a:	465b      	mov	r3, fp
 800fd4c:	4421      	add	r1, r4
 800fd4e:	4638      	mov	r0, r7
 800fd50:	47b0      	blx	r6
 800fd52:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800fd56:	4405      	add	r5, r0
 800fd58:	4295      	cmp	r5, r2
 800fd5a:	d3f1      	bcc.n	800fd40 <uxr_write_framed_msg+0x1e4>
 800fd5c:	d183      	bne.n	800fc66 <uxr_write_framed_msg+0x10a>
 800fd5e:	f04f 0300 	mov.w	r3, #0
 800fd62:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800fd66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd68:	4543      	cmp	r3, r8
 800fd6a:	d964      	bls.n	800fe36 <uxr_write_framed_msg+0x2da>
 800fd6c:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800fd70:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800fd74:	2901      	cmp	r1, #1
 800fd76:	f04f 0200 	mov.w	r2, #0
 800fd7a:	f63f af3d 	bhi.w	800fbf8 <uxr_write_framed_msg+0x9c>
 800fd7e:	1c51      	adds	r1, r2, #1
 800fd80:	b2c9      	uxtb	r1, r1
 800fd82:	2929      	cmp	r1, #41	@ 0x29
 800fd84:	d8da      	bhi.n	800fd3c <uxr_write_framed_msg+0x1e0>
 800fd86:	18a0      	adds	r0, r4, r2
 800fd88:	4421      	add	r1, r4
 800fd8a:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 800fd8e:	3202      	adds	r2, #2
 800fd90:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 800fd94:	b2d2      	uxtb	r2, r2
 800fd96:	f083 0020 	eor.w	r0, r3, #32
 800fd9a:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800fd9e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fda2:	e733      	b.n	800fc0c <uxr_write_framed_msg+0xb0>
 800fda4:	18a1      	adds	r1, r4, r2
 800fda6:	3201      	adds	r2, #1
 800fda8:	4648      	mov	r0, r9
 800fdaa:	b2d2      	uxtb	r2, r2
 800fdac:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800fdb0:	f04f 0901 	mov.w	r9, #1
 800fdb4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fdb8:	2800      	cmp	r0, #0
 800fdba:	f43f af7b 	beq.w	800fcb4 <uxr_write_framed_msg+0x158>
 800fdbe:	2500      	movs	r5, #0
 800fdc0:	e002      	b.n	800fdc8 <uxr_write_framed_msg+0x26c>
 800fdc2:	2800      	cmp	r0, #0
 800fdc4:	f43f af4f 	beq.w	800fc66 <uxr_write_framed_msg+0x10a>
 800fdc8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800fdcc:	1b52      	subs	r2, r2, r5
 800fdce:	465b      	mov	r3, fp
 800fdd0:	4421      	add	r1, r4
 800fdd2:	4638      	mov	r0, r7
 800fdd4:	47b0      	blx	r6
 800fdd6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800fdda:	4405      	add	r5, r0
 800fddc:	4295      	cmp	r5, r2
 800fdde:	d3f0      	bcc.n	800fdc2 <uxr_write_framed_msg+0x266>
 800fde0:	f47f af41 	bne.w	800fc66 <uxr_write_framed_msg+0x10a>
 800fde4:	2300      	movs	r3, #0
 800fde6:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800fdea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fdec:	b298      	uxth	r0, r3
 800fdee:	b003      	add	sp, #12
 800fdf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdf4:	217d      	movs	r1, #125	@ 0x7d
 800fdf6:	f082 0220 	eor.w	r2, r2, #32
 800fdfa:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 800fdfe:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800fe02:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 800fe06:	2901      	cmp	r1, #1
 800fe08:	f04f 0203 	mov.w	r2, #3
 800fe0c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fe10:	d804      	bhi.n	800fe1c <uxr_write_framed_msg+0x2c0>
 800fe12:	4611      	mov	r1, r2
 800fe14:	f04f 0c04 	mov.w	ip, #4
 800fe18:	2205      	movs	r2, #5
 800fe1a:	e752      	b.n	800fcc2 <uxr_write_framed_msg+0x166>
 800fe1c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fe1e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 800fe22:	b2dd      	uxtb	r5, r3
 800fe24:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800fe28:	2204      	movs	r2, #4
 800fe2a:	2901      	cmp	r1, #1
 800fe2c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fe30:	f63f aec0 	bhi.w	800fbb4 <uxr_write_framed_msg+0x58>
 800fe34:	e758      	b.n	800fce8 <uxr_write_framed_msg+0x18c>
 800fe36:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800fe3a:	fa5f f889 	uxtb.w	r8, r9
 800fe3e:	9301      	str	r3, [sp, #4]
 800fe40:	2200      	movs	r2, #0
 800fe42:	e6f5      	b.n	800fc30 <uxr_write_framed_msg+0xd4>
 800fe44:	08018fc0 	.word	0x08018fc0

0800fe48 <uxr_framing_read_transport>:
 800fe48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe4c:	4604      	mov	r4, r0
 800fe4e:	b083      	sub	sp, #12
 800fe50:	461f      	mov	r7, r3
 800fe52:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800fe56:	4689      	mov	r9, r1
 800fe58:	4692      	mov	sl, r2
 800fe5a:	f000 fc89 	bl	8010770 <uxr_millis>
 800fe5e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800fe62:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800fe66:	42b3      	cmp	r3, r6
 800fe68:	4680      	mov	r8, r0
 800fe6a:	d061      	beq.n	800ff30 <uxr_framing_read_transport+0xe8>
 800fe6c:	d81c      	bhi.n	800fea8 <uxr_framing_read_transport+0x60>
 800fe6e:	1e75      	subs	r5, r6, #1
 800fe70:	1aed      	subs	r5, r5, r3
 800fe72:	b2ed      	uxtb	r5, r5
 800fe74:	2600      	movs	r6, #0
 800fe76:	455d      	cmp	r5, fp
 800fe78:	d81f      	bhi.n	800feba <uxr_framing_read_transport+0x72>
 800fe7a:	19ab      	adds	r3, r5, r6
 800fe7c:	455b      	cmp	r3, fp
 800fe7e:	bf84      	itt	hi
 800fe80:	ebab 0605 	subhi.w	r6, fp, r5
 800fe84:	b2f6      	uxtbhi	r6, r6
 800fe86:	b9ed      	cbnz	r5, 800fec4 <uxr_framing_read_transport+0x7c>
 800fe88:	f04f 0b00 	mov.w	fp, #0
 800fe8c:	f000 fc70 	bl	8010770 <uxr_millis>
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	eba0 0808 	sub.w	r8, r0, r8
 800fe96:	eba3 0308 	sub.w	r3, r3, r8
 800fe9a:	4658      	mov	r0, fp
 800fe9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fea0:	603b      	str	r3, [r7, #0]
 800fea2:	b003      	add	sp, #12
 800fea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fea8:	2e00      	cmp	r6, #0
 800feaa:	d049      	beq.n	800ff40 <uxr_framing_read_transport+0xf8>
 800feac:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 800feb0:	b2ed      	uxtb	r5, r5
 800feb2:	3e01      	subs	r6, #1
 800feb4:	455d      	cmp	r5, fp
 800feb6:	b2f6      	uxtb	r6, r6
 800feb8:	d9df      	bls.n	800fe7a <uxr_framing_read_transport+0x32>
 800feba:	fa5f f58b 	uxtb.w	r5, fp
 800febe:	2600      	movs	r6, #0
 800fec0:	2d00      	cmp	r5, #0
 800fec2:	d0e1      	beq.n	800fe88 <uxr_framing_read_transport+0x40>
 800fec4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800fec8:	3102      	adds	r1, #2
 800feca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fecc:	9300      	str	r3, [sp, #0]
 800fece:	683b      	ldr	r3, [r7, #0]
 800fed0:	4421      	add	r1, r4
 800fed2:	462a      	mov	r2, r5
 800fed4:	4650      	mov	r0, sl
 800fed6:	47c8      	blx	r9
 800fed8:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800fedc:	4a1a      	ldr	r2, [pc, #104]	@ (800ff48 <uxr_framing_read_transport+0x100>)
 800fede:	4403      	add	r3, r0
 800fee0:	0859      	lsrs	r1, r3, #1
 800fee2:	fba2 2101 	umull	r2, r1, r2, r1
 800fee6:	0889      	lsrs	r1, r1, #2
 800fee8:	222a      	movs	r2, #42	@ 0x2a
 800feea:	fb02 3111 	mls	r1, r2, r1, r3
 800feee:	4683      	mov	fp, r0
 800fef0:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800fef4:	2800      	cmp	r0, #0
 800fef6:	d0c7      	beq.n	800fe88 <uxr_framing_read_transport+0x40>
 800fef8:	42a8      	cmp	r0, r5
 800fefa:	d1c7      	bne.n	800fe8c <uxr_framing_read_transport+0x44>
 800fefc:	2e00      	cmp	r6, #0
 800fefe:	d0c5      	beq.n	800fe8c <uxr_framing_read_transport+0x44>
 800ff00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ff02:	9300      	str	r3, [sp, #0]
 800ff04:	3102      	adds	r1, #2
 800ff06:	4632      	mov	r2, r6
 800ff08:	4421      	add	r1, r4
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	4650      	mov	r0, sl
 800ff0e:	47c8      	blx	r9
 800ff10:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800ff14:	4a0c      	ldr	r2, [pc, #48]	@ (800ff48 <uxr_framing_read_transport+0x100>)
 800ff16:	180b      	adds	r3, r1, r0
 800ff18:	0859      	lsrs	r1, r3, #1
 800ff1a:	fba2 1201 	umull	r1, r2, r2, r1
 800ff1e:	0892      	lsrs	r2, r2, #2
 800ff20:	212a      	movs	r1, #42	@ 0x2a
 800ff22:	fb01 3312 	mls	r3, r1, r2, r3
 800ff26:	eb00 0b05 	add.w	fp, r0, r5
 800ff2a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800ff2e:	e7ad      	b.n	800fe8c <uxr_framing_read_transport+0x44>
 800ff30:	2600      	movs	r6, #0
 800ff32:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800ff36:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800ff38:	d9bf      	bls.n	800feba <uxr_framing_read_transport+0x72>
 800ff3a:	2102      	movs	r1, #2
 800ff3c:	2529      	movs	r5, #41	@ 0x29
 800ff3e:	e7c4      	b.n	800feca <uxr_framing_read_transport+0x82>
 800ff40:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 800ff44:	b2ed      	uxtb	r5, r5
 800ff46:	e796      	b.n	800fe76 <uxr_framing_read_transport+0x2e>
 800ff48:	30c30c31 	.word	0x30c30c31

0800ff4c <uxr_read_framed_msg>:
 800ff4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff50:	461e      	mov	r6, r3
 800ff52:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 800ff56:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800ff5a:	429d      	cmp	r5, r3
 800ff5c:	b083      	sub	sp, #12
 800ff5e:	4604      	mov	r4, r0
 800ff60:	4688      	mov	r8, r1
 800ff62:	4691      	mov	r9, r2
 800ff64:	f000 8188 	beq.w	8010278 <uxr_read_framed_msg+0x32c>
 800ff68:	7823      	ldrb	r3, [r4, #0]
 800ff6a:	4dc1      	ldr	r5, [pc, #772]	@ (8010270 <uxr_read_framed_msg+0x324>)
 800ff6c:	4fc1      	ldr	r7, [pc, #772]	@ (8010274 <uxr_read_framed_msg+0x328>)
 800ff6e:	2b07      	cmp	r3, #7
 800ff70:	d8fd      	bhi.n	800ff6e <uxr_read_framed_msg+0x22>
 800ff72:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ff76:	0115      	.short	0x0115
 800ff78:	00d600f6 	.word	0x00d600f6
 800ff7c:	009000b9 	.word	0x009000b9
 800ff80:	0030004d 	.word	0x0030004d
 800ff84:	0008      	.short	0x0008
 800ff86:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800ff8a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800ff8e:	4299      	cmp	r1, r3
 800ff90:	f000 814a 	beq.w	8010228 <uxr_read_framed_msg+0x2dc>
 800ff94:	18e2      	adds	r2, r4, r3
 800ff96:	7892      	ldrb	r2, [r2, #2]
 800ff98:	2a7d      	cmp	r2, #125	@ 0x7d
 800ff9a:	f000 8199 	beq.w	80102d0 <uxr_read_framed_msg+0x384>
 800ff9e:	3301      	adds	r3, #1
 800ffa0:	0858      	lsrs	r0, r3, #1
 800ffa2:	fba5 1000 	umull	r1, r0, r5, r0
 800ffa6:	0880      	lsrs	r0, r0, #2
 800ffa8:	212a      	movs	r1, #42	@ 0x2a
 800ffaa:	fb01 3310 	mls	r3, r1, r0, r3
 800ffae:	2a7e      	cmp	r2, #126	@ 0x7e
 800ffb0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800ffb4:	f000 8252 	beq.w	801045c <uxr_read_framed_msg+0x510>
 800ffb8:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800ffba:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 800ffbc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ffc0:	b29b      	uxth	r3, r3
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	4299      	cmp	r1, r3
 800ffc6:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800ffc8:	7022      	strb	r2, [r4, #0]
 800ffca:	f000 8179 	beq.w	80102c0 <uxr_read_framed_msg+0x374>
 800ffce:	2000      	movs	r0, #0
 800ffd0:	b003      	add	sp, #12
 800ffd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffd6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800ffda:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800ffde:	4299      	cmp	r1, r3
 800ffe0:	f000 8131 	beq.w	8010246 <uxr_read_framed_msg+0x2fa>
 800ffe4:	18e2      	adds	r2, r4, r3
 800ffe6:	7890      	ldrb	r0, [r2, #2]
 800ffe8:	287d      	cmp	r0, #125	@ 0x7d
 800ffea:	f000 8190 	beq.w	801030e <uxr_read_framed_msg+0x3c2>
 800ffee:	3301      	adds	r3, #1
 800fff0:	085a      	lsrs	r2, r3, #1
 800fff2:	fba5 1202 	umull	r1, r2, r5, r2
 800fff6:	0892      	lsrs	r2, r2, #2
 800fff8:	212a      	movs	r1, #42	@ 0x2a
 800fffa:	fb01 3312 	mls	r3, r1, r2, r3
 800fffe:	287e      	cmp	r0, #126	@ 0x7e
 8010000:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010004:	f000 821a 	beq.w	801043c <uxr_read_framed_msg+0x4f0>
 8010008:	2307      	movs	r3, #7
 801000a:	86a0      	strh	r0, [r4, #52]	@ 0x34
 801000c:	7023      	strb	r3, [r4, #0]
 801000e:	e7ae      	b.n	800ff6e <uxr_read_framed_msg+0x22>
 8010010:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8010012:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8010016:	459e      	cmp	lr, r3
 8010018:	d938      	bls.n	801008c <uxr_read_framed_msg+0x140>
 801001a:	ee07 8a90 	vmov	s15, r8
 801001e:	212a      	movs	r1, #42	@ 0x2a
 8010020:	e020      	b.n	8010064 <uxr_read_framed_msg+0x118>
 8010022:	f89b c002 	ldrb.w	ip, [fp, #2]
 8010026:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801002a:	f000 80d4 	beq.w	80101d6 <uxr_read_framed_msg+0x28a>
 801002e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8010032:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8010036:	f000 8219 	beq.w	801046c <uxr_read_framed_msg+0x520>
 801003a:	f806 c003 	strb.w	ip, [r6, r3]
 801003e:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8010042:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8010044:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8010048:	ea8a 000c 	eor.w	r0, sl, ip
 801004c:	b2c0      	uxtb	r0, r0
 801004e:	3301      	adds	r3, #1
 8010050:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8010054:	b29b      	uxth	r3, r3
 8010056:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 801005a:	4573      	cmp	r3, lr
 801005c:	8663      	strh	r3, [r4, #50]	@ 0x32
 801005e:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8010060:	f080 8120 	bcs.w	80102a4 <uxr_read_framed_msg+0x358>
 8010064:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8010068:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801006c:	f100 0c01 	add.w	ip, r0, #1
 8010070:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8010074:	fba5 8202 	umull	r8, r2, r5, r2
 8010078:	0892      	lsrs	r2, r2, #2
 801007a:	4582      	cmp	sl, r0
 801007c:	eb04 0b00 	add.w	fp, r4, r0
 8010080:	fb01 c212 	mls	r2, r1, r2, ip
 8010084:	d1cd      	bne.n	8010022 <uxr_read_framed_msg+0xd6>
 8010086:	ee17 8a90 	vmov	r8, s15
 801008a:	459e      	cmp	lr, r3
 801008c:	f040 8111 	bne.w	80102b2 <uxr_read_framed_msg+0x366>
 8010090:	2306      	movs	r3, #6
 8010092:	7023      	strb	r3, [r4, #0]
 8010094:	e76b      	b.n	800ff6e <uxr_read_framed_msg+0x22>
 8010096:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801009a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801009e:	4298      	cmp	r0, r3
 80100a0:	f000 80c2 	beq.w	8010228 <uxr_read_framed_msg+0x2dc>
 80100a4:	18e2      	adds	r2, r4, r3
 80100a6:	7891      	ldrb	r1, [r2, #2]
 80100a8:	297d      	cmp	r1, #125	@ 0x7d
 80100aa:	f000 814c 	beq.w	8010346 <uxr_read_framed_msg+0x3fa>
 80100ae:	3301      	adds	r3, #1
 80100b0:	085a      	lsrs	r2, r3, #1
 80100b2:	fba5 0202 	umull	r0, r2, r5, r2
 80100b6:	0892      	lsrs	r2, r2, #2
 80100b8:	202a      	movs	r0, #42	@ 0x2a
 80100ba:	fb00 3312 	mls	r3, r0, r2, r3
 80100be:	297e      	cmp	r1, #126	@ 0x7e
 80100c0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80100c4:	f000 81ca 	beq.w	801045c <uxr_read_framed_msg+0x510>
 80100c8:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80100ca:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80100ce:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80100d0:	b29b      	uxth	r3, r3
 80100d2:	2000      	movs	r0, #0
 80100d4:	428b      	cmp	r3, r1
 80100d6:	8623      	strh	r3, [r4, #48]	@ 0x30
 80100d8:	8660      	strh	r0, [r4, #50]	@ 0x32
 80100da:	86e0      	strh	r0, [r4, #54]	@ 0x36
 80100dc:	f240 80df 	bls.w	801029e <uxr_read_framed_msg+0x352>
 80100e0:	7020      	strb	r0, [r4, #0]
 80100e2:	b003      	add	sp, #12
 80100e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100e8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80100ec:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80100f0:	4299      	cmp	r1, r3
 80100f2:	f000 80a8 	beq.w	8010246 <uxr_read_framed_msg+0x2fa>
 80100f6:	18e2      	adds	r2, r4, r3
 80100f8:	7890      	ldrb	r0, [r2, #2]
 80100fa:	287d      	cmp	r0, #125	@ 0x7d
 80100fc:	f000 8164 	beq.w	80103c8 <uxr_read_framed_msg+0x47c>
 8010100:	3301      	adds	r3, #1
 8010102:	085a      	lsrs	r2, r3, #1
 8010104:	fba5 1202 	umull	r1, r2, r5, r2
 8010108:	0892      	lsrs	r2, r2, #2
 801010a:	212a      	movs	r1, #42	@ 0x2a
 801010c:	fb01 3312 	mls	r3, r1, r2, r3
 8010110:	287e      	cmp	r0, #126	@ 0x7e
 8010112:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010116:	f000 8191 	beq.w	801043c <uxr_read_framed_msg+0x4f0>
 801011a:	2304      	movs	r3, #4
 801011c:	8620      	strh	r0, [r4, #48]	@ 0x30
 801011e:	7023      	strb	r3, [r4, #0]
 8010120:	e725      	b.n	800ff6e <uxr_read_framed_msg+0x22>
 8010122:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8010126:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801012a:	4290      	cmp	r0, r2
 801012c:	f000 80b3 	beq.w	8010296 <uxr_read_framed_msg+0x34a>
 8010130:	18a3      	adds	r3, r4, r2
 8010132:	7899      	ldrb	r1, [r3, #2]
 8010134:	297d      	cmp	r1, #125	@ 0x7d
 8010136:	f000 8164 	beq.w	8010402 <uxr_read_framed_msg+0x4b6>
 801013a:	3201      	adds	r2, #1
 801013c:	0850      	lsrs	r0, r2, #1
 801013e:	fba5 3000 	umull	r3, r0, r5, r0
 8010142:	0880      	lsrs	r0, r0, #2
 8010144:	232a      	movs	r3, #42	@ 0x2a
 8010146:	fb03 2210 	mls	r2, r3, r0, r2
 801014a:	297e      	cmp	r1, #126	@ 0x7e
 801014c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8010150:	f000 8188 	beq.w	8010464 <uxr_read_framed_msg+0x518>
 8010154:	7863      	ldrb	r3, [r4, #1]
 8010156:	428b      	cmp	r3, r1
 8010158:	bf0c      	ite	eq
 801015a:	2303      	moveq	r3, #3
 801015c:	2300      	movne	r3, #0
 801015e:	7023      	strb	r3, [r4, #0]
 8010160:	e705      	b.n	800ff6e <uxr_read_framed_msg+0x22>
 8010162:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010166:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801016a:	2200      	movs	r2, #0
 801016c:	4299      	cmp	r1, r3
 801016e:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8010172:	d06c      	beq.n	801024e <uxr_read_framed_msg+0x302>
 8010174:	18e2      	adds	r2, r4, r3
 8010176:	7890      	ldrb	r0, [r2, #2]
 8010178:	287d      	cmp	r0, #125	@ 0x7d
 801017a:	f000 8101 	beq.w	8010380 <uxr_read_framed_msg+0x434>
 801017e:	3301      	adds	r3, #1
 8010180:	085a      	lsrs	r2, r3, #1
 8010182:	fba5 1202 	umull	r1, r2, r5, r2
 8010186:	0892      	lsrs	r2, r2, #2
 8010188:	212a      	movs	r1, #42	@ 0x2a
 801018a:	fb01 3312 	mls	r3, r1, r2, r3
 801018e:	287e      	cmp	r0, #126	@ 0x7e
 8010190:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8010194:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010198:	d059      	beq.n	801024e <uxr_read_framed_msg+0x302>
 801019a:	2302      	movs	r3, #2
 801019c:	7023      	strb	r3, [r4, #0]
 801019e:	e6e6      	b.n	800ff6e <uxr_read_framed_msg+0x22>
 80101a0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80101a4:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80101a8:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 80101ac:	1c51      	adds	r1, r2, #1
 80101ae:	084b      	lsrs	r3, r1, #1
 80101b0:	fba5 c303 	umull	ip, r3, r5, r3
 80101b4:	089b      	lsrs	r3, r3, #2
 80101b6:	fb0e 1313 	mls	r3, lr, r3, r1
 80101ba:	4592      	cmp	sl, r2
 80101bc:	eb04 0002 	add.w	r0, r4, r2
 80101c0:	b2da      	uxtb	r2, r3
 80101c2:	f43f af04 	beq.w	800ffce <uxr_read_framed_msg+0x82>
 80101c6:	7883      	ldrb	r3, [r0, #2]
 80101c8:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80101cc:	2b7e      	cmp	r3, #126	@ 0x7e
 80101ce:	d1ed      	bne.n	80101ac <uxr_read_framed_msg+0x260>
 80101d0:	2301      	movs	r3, #1
 80101d2:	7023      	strb	r3, [r4, #0]
 80101d4:	e6cb      	b.n	800ff6e <uxr_read_framed_msg+0x22>
 80101d6:	f100 0c01 	add.w	ip, r0, #1
 80101da:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80101de:	fba5 8202 	umull	r8, r2, r5, r2
 80101e2:	0892      	lsrs	r2, r2, #2
 80101e4:	fb01 c212 	mls	r2, r1, r2, ip
 80101e8:	eb04 0c02 	add.w	ip, r4, r2
 80101ec:	b2d2      	uxtb	r2, r2
 80101ee:	4592      	cmp	sl, r2
 80101f0:	f100 0002 	add.w	r0, r0, #2
 80101f4:	f43f af47 	beq.w	8010086 <uxr_read_framed_msg+0x13a>
 80101f8:	0842      	lsrs	r2, r0, #1
 80101fa:	f89c a002 	ldrb.w	sl, [ip, #2]
 80101fe:	fba5 8202 	umull	r8, r2, r5, r2
 8010202:	0892      	lsrs	r2, r2, #2
 8010204:	fb01 0012 	mls	r0, r1, r2, r0
 8010208:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 801020c:	f08a 0c20 	eor.w	ip, sl, #32
 8010210:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8010214:	f47f af11 	bne.w	801003a <uxr_read_framed_msg+0xee>
 8010218:	459e      	cmp	lr, r3
 801021a:	ee17 8a90 	vmov	r8, s15
 801021e:	f43f af37 	beq.w	8010090 <uxr_read_framed_msg+0x144>
 8010222:	2301      	movs	r3, #1
 8010224:	7023      	strb	r3, [r4, #0]
 8010226:	e6a2      	b.n	800ff6e <uxr_read_framed_msg+0x22>
 8010228:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801022a:	9300      	str	r3, [sp, #0]
 801022c:	2301      	movs	r3, #1
 801022e:	9301      	str	r3, [sp, #4]
 8010230:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010232:	464a      	mov	r2, r9
 8010234:	4641      	mov	r1, r8
 8010236:	4620      	mov	r0, r4
 8010238:	f7ff fe06 	bl	800fe48 <uxr_framing_read_transport>
 801023c:	2800      	cmp	r0, #0
 801023e:	f43f aec6 	beq.w	800ffce <uxr_read_framed_msg+0x82>
 8010242:	7823      	ldrb	r3, [r4, #0]
 8010244:	e693      	b.n	800ff6e <uxr_read_framed_msg+0x22>
 8010246:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010248:	9300      	str	r3, [sp, #0]
 801024a:	2302      	movs	r3, #2
 801024c:	e7ef      	b.n	801022e <uxr_read_framed_msg+0x2e2>
 801024e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010250:	9300      	str	r3, [sp, #0]
 8010252:	2304      	movs	r3, #4
 8010254:	9301      	str	r3, [sp, #4]
 8010256:	464a      	mov	r2, r9
 8010258:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801025a:	4641      	mov	r1, r8
 801025c:	4620      	mov	r0, r4
 801025e:	f7ff fdf3 	bl	800fe48 <uxr_framing_read_transport>
 8010262:	2800      	cmp	r0, #0
 8010264:	d1ed      	bne.n	8010242 <uxr_read_framed_msg+0x2f6>
 8010266:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801026a:	2b7e      	cmp	r3, #126	@ 0x7e
 801026c:	d0e9      	beq.n	8010242 <uxr_read_framed_msg+0x2f6>
 801026e:	e6ae      	b.n	800ffce <uxr_read_framed_msg+0x82>
 8010270:	30c30c31 	.word	0x30c30c31
 8010274:	08018fc0 	.word	0x08018fc0
 8010278:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801027a:	9300      	str	r3, [sp, #0]
 801027c:	2305      	movs	r3, #5
 801027e:	9301      	str	r3, [sp, #4]
 8010280:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010282:	f7ff fde1 	bl	800fe48 <uxr_framing_read_transport>
 8010286:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801028a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801028e:	429a      	cmp	r2, r3
 8010290:	f43f ae9d 	beq.w	800ffce <uxr_read_framed_msg+0x82>
 8010294:	e668      	b.n	800ff68 <uxr_read_framed_msg+0x1c>
 8010296:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010298:	9300      	str	r3, [sp, #0]
 801029a:	2303      	movs	r3, #3
 801029c:	e7c7      	b.n	801022e <uxr_read_framed_msg+0x2e2>
 801029e:	2305      	movs	r3, #5
 80102a0:	7023      	strb	r3, [r4, #0]
 80102a2:	e664      	b.n	800ff6e <uxr_read_framed_msg+0x22>
 80102a4:	ee17 8a90 	vmov	r8, s15
 80102a8:	f43f aef2 	beq.w	8010090 <uxr_read_framed_msg+0x144>
 80102ac:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80102b0:	d08e      	beq.n	80101d0 <uxr_read_framed_msg+0x284>
 80102b2:	ebae 0303 	sub.w	r3, lr, r3
 80102b6:	3302      	adds	r3, #2
 80102b8:	9301      	str	r3, [sp, #4]
 80102ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80102bc:	9300      	str	r3, [sp, #0]
 80102be:	e7b7      	b.n	8010230 <uxr_read_framed_msg+0x2e4>
 80102c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80102c2:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80102c6:	7013      	strb	r3, [r2, #0]
 80102c8:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80102ca:	b003      	add	sp, #12
 80102cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102d0:	f103 0c01 	add.w	ip, r3, #1
 80102d4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80102d8:	fba5 0202 	umull	r0, r2, r5, r2
 80102dc:	0892      	lsrs	r2, r2, #2
 80102de:	202a      	movs	r0, #42	@ 0x2a
 80102e0:	fb00 c212 	mls	r2, r0, r2, ip
 80102e4:	fa5f fc82 	uxtb.w	ip, r2
 80102e8:	4561      	cmp	r1, ip
 80102ea:	d09d      	beq.n	8010228 <uxr_read_framed_msg+0x2dc>
 80102ec:	3302      	adds	r3, #2
 80102ee:	4422      	add	r2, r4
 80102f0:	0859      	lsrs	r1, r3, #1
 80102f2:	7892      	ldrb	r2, [r2, #2]
 80102f4:	fba5 c101 	umull	ip, r1, r5, r1
 80102f8:	0889      	lsrs	r1, r1, #2
 80102fa:	fb00 3311 	mls	r3, r0, r1, r3
 80102fe:	2a7e      	cmp	r2, #126	@ 0x7e
 8010300:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010304:	f000 80aa 	beq.w	801045c <uxr_read_framed_msg+0x510>
 8010308:	f082 0220 	eor.w	r2, r2, #32
 801030c:	e654      	b.n	800ffb8 <uxr_read_framed_msg+0x6c>
 801030e:	1c58      	adds	r0, r3, #1
 8010310:	0842      	lsrs	r2, r0, #1
 8010312:	fba5 c202 	umull	ip, r2, r5, r2
 8010316:	0892      	lsrs	r2, r2, #2
 8010318:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801031c:	fb0c 0212 	mls	r2, ip, r2, r0
 8010320:	b2d0      	uxtb	r0, r2
 8010322:	4281      	cmp	r1, r0
 8010324:	d08f      	beq.n	8010246 <uxr_read_framed_msg+0x2fa>
 8010326:	4422      	add	r2, r4
 8010328:	3302      	adds	r3, #2
 801032a:	7890      	ldrb	r0, [r2, #2]
 801032c:	085a      	lsrs	r2, r3, #1
 801032e:	fba5 1202 	umull	r1, r2, r5, r2
 8010332:	0892      	lsrs	r2, r2, #2
 8010334:	fb0c 3312 	mls	r3, ip, r2, r3
 8010338:	287e      	cmp	r0, #126	@ 0x7e
 801033a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801033e:	d07d      	beq.n	801043c <uxr_read_framed_msg+0x4f0>
 8010340:	f080 0020 	eor.w	r0, r0, #32
 8010344:	e660      	b.n	8010008 <uxr_read_framed_msg+0xbc>
 8010346:	1c59      	adds	r1, r3, #1
 8010348:	084a      	lsrs	r2, r1, #1
 801034a:	fba5 c202 	umull	ip, r2, r5, r2
 801034e:	0892      	lsrs	r2, r2, #2
 8010350:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8010354:	fb0c 1212 	mls	r2, ip, r2, r1
 8010358:	b2d1      	uxtb	r1, r2
 801035a:	4288      	cmp	r0, r1
 801035c:	f43f af64 	beq.w	8010228 <uxr_read_framed_msg+0x2dc>
 8010360:	4422      	add	r2, r4
 8010362:	3302      	adds	r3, #2
 8010364:	7891      	ldrb	r1, [r2, #2]
 8010366:	085a      	lsrs	r2, r3, #1
 8010368:	fba5 0202 	umull	r0, r2, r5, r2
 801036c:	0892      	lsrs	r2, r2, #2
 801036e:	fb0c 3312 	mls	r3, ip, r2, r3
 8010372:	297e      	cmp	r1, #126	@ 0x7e
 8010374:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010378:	d070      	beq.n	801045c <uxr_read_framed_msg+0x510>
 801037a:	f081 0120 	eor.w	r1, r1, #32
 801037e:	e6a3      	b.n	80100c8 <uxr_read_framed_msg+0x17c>
 8010380:	f103 0c01 	add.w	ip, r3, #1
 8010384:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8010388:	fba5 0202 	umull	r0, r2, r5, r2
 801038c:	0892      	lsrs	r2, r2, #2
 801038e:	202a      	movs	r0, #42	@ 0x2a
 8010390:	fb00 c212 	mls	r2, r0, r2, ip
 8010394:	fa5f fc82 	uxtb.w	ip, r2
 8010398:	4561      	cmp	r1, ip
 801039a:	f43f af58 	beq.w	801024e <uxr_read_framed_msg+0x302>
 801039e:	4422      	add	r2, r4
 80103a0:	3302      	adds	r3, #2
 80103a2:	7891      	ldrb	r1, [r2, #2]
 80103a4:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80103a8:	085a      	lsrs	r2, r3, #1
 80103aa:	fba5 c202 	umull	ip, r2, r5, r2
 80103ae:	0892      	lsrs	r2, r2, #2
 80103b0:	fb00 3312 	mls	r3, r0, r2, r3
 80103b4:	297e      	cmp	r1, #126	@ 0x7e
 80103b6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80103ba:	f43f af48 	beq.w	801024e <uxr_read_framed_msg+0x302>
 80103be:	f081 0120 	eor.w	r1, r1, #32
 80103c2:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80103c6:	e6e8      	b.n	801019a <uxr_read_framed_msg+0x24e>
 80103c8:	1c58      	adds	r0, r3, #1
 80103ca:	0842      	lsrs	r2, r0, #1
 80103cc:	fba5 c202 	umull	ip, r2, r5, r2
 80103d0:	0892      	lsrs	r2, r2, #2
 80103d2:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80103d6:	fb0c 0212 	mls	r2, ip, r2, r0
 80103da:	b2d0      	uxtb	r0, r2
 80103dc:	4281      	cmp	r1, r0
 80103de:	f43f af32 	beq.w	8010246 <uxr_read_framed_msg+0x2fa>
 80103e2:	4422      	add	r2, r4
 80103e4:	3302      	adds	r3, #2
 80103e6:	7890      	ldrb	r0, [r2, #2]
 80103e8:	085a      	lsrs	r2, r3, #1
 80103ea:	fba5 1202 	umull	r1, r2, r5, r2
 80103ee:	0892      	lsrs	r2, r2, #2
 80103f0:	fb0c 3312 	mls	r3, ip, r2, r3
 80103f4:	287e      	cmp	r0, #126	@ 0x7e
 80103f6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80103fa:	d01f      	beq.n	801043c <uxr_read_framed_msg+0x4f0>
 80103fc:	f080 0020 	eor.w	r0, r0, #32
 8010400:	e68b      	b.n	801011a <uxr_read_framed_msg+0x1ce>
 8010402:	1c51      	adds	r1, r2, #1
 8010404:	084b      	lsrs	r3, r1, #1
 8010406:	fba5 c303 	umull	ip, r3, r5, r3
 801040a:	089b      	lsrs	r3, r3, #2
 801040c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8010410:	fb0c 1313 	mls	r3, ip, r3, r1
 8010414:	b2d9      	uxtb	r1, r3
 8010416:	4288      	cmp	r0, r1
 8010418:	f43f af3d 	beq.w	8010296 <uxr_read_framed_msg+0x34a>
 801041c:	3202      	adds	r2, #2
 801041e:	4423      	add	r3, r4
 8010420:	0850      	lsrs	r0, r2, #1
 8010422:	789b      	ldrb	r3, [r3, #2]
 8010424:	fba5 1000 	umull	r1, r0, r5, r0
 8010428:	0880      	lsrs	r0, r0, #2
 801042a:	fb0c 2210 	mls	r2, ip, r0, r2
 801042e:	2b7e      	cmp	r3, #126	@ 0x7e
 8010430:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8010434:	d016      	beq.n	8010464 <uxr_read_framed_msg+0x518>
 8010436:	f083 0120 	eor.w	r1, r3, #32
 801043a:	e68b      	b.n	8010154 <uxr_read_framed_msg+0x208>
 801043c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801043e:	9300      	str	r3, [sp, #0]
 8010440:	2302      	movs	r3, #2
 8010442:	9301      	str	r3, [sp, #4]
 8010444:	464a      	mov	r2, r9
 8010446:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010448:	4641      	mov	r1, r8
 801044a:	4620      	mov	r0, r4
 801044c:	f7ff fcfc 	bl	800fe48 <uxr_framing_read_transport>
 8010450:	2800      	cmp	r0, #0
 8010452:	f47f aef6 	bne.w	8010242 <uxr_read_framed_msg+0x2f6>
 8010456:	2301      	movs	r3, #1
 8010458:	7023      	strb	r3, [r4, #0]
 801045a:	e588      	b.n	800ff6e <uxr_read_framed_msg+0x22>
 801045c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801045e:	9300      	str	r3, [sp, #0]
 8010460:	2301      	movs	r3, #1
 8010462:	e7ee      	b.n	8010442 <uxr_read_framed_msg+0x4f6>
 8010464:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010466:	9300      	str	r3, [sp, #0]
 8010468:	2303      	movs	r3, #3
 801046a:	e7ea      	b.n	8010442 <uxr_read_framed_msg+0x4f6>
 801046c:	ee17 8a90 	vmov	r8, s15
 8010470:	e6ae      	b.n	80101d0 <uxr_read_framed_msg+0x284>
 8010472:	bf00      	nop

08010474 <uxr_stream_id>:
 8010474:	2901      	cmp	r1, #1
 8010476:	b082      	sub	sp, #8
 8010478:	d01d      	beq.n	80104b6 <uxr_stream_id+0x42>
 801047a:	2902      	cmp	r1, #2
 801047c:	f04f 0c00 	mov.w	ip, #0
 8010480:	d01e      	beq.n	80104c0 <uxr_stream_id+0x4c>
 8010482:	2300      	movs	r3, #0
 8010484:	f36c 0307 	bfi	r3, ip, #0, #8
 8010488:	f360 230f 	bfi	r3, r0, #8, #8
 801048c:	f361 4317 	bfi	r3, r1, #16, #8
 8010490:	f362 631f 	bfi	r3, r2, #24, #8
 8010494:	b2da      	uxtb	r2, r3
 8010496:	2000      	movs	r0, #0
 8010498:	f362 0007 	bfi	r0, r2, #0, #8
 801049c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80104a0:	f362 200f 	bfi	r0, r2, #8, #8
 80104a4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80104a8:	f362 4017 	bfi	r0, r2, #16, #8
 80104ac:	0e1b      	lsrs	r3, r3, #24
 80104ae:	f363 601f 	bfi	r0, r3, #24, #8
 80104b2:	b002      	add	sp, #8
 80104b4:	4770      	bx	lr
 80104b6:	f100 0c01 	add.w	ip, r0, #1
 80104ba:	fa5f fc8c 	uxtb.w	ip, ip
 80104be:	e7e0      	b.n	8010482 <uxr_stream_id+0xe>
 80104c0:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 80104c4:	e7dd      	b.n	8010482 <uxr_stream_id+0xe>
 80104c6:	bf00      	nop

080104c8 <uxr_stream_id_from_raw>:
 80104c8:	b082      	sub	sp, #8
 80104ca:	b130      	cbz	r0, 80104da <uxr_stream_id_from_raw+0x12>
 80104cc:	0603      	lsls	r3, r0, #24
 80104ce:	d420      	bmi.n	8010512 <uxr_stream_id_from_raw+0x4a>
 80104d0:	1e42      	subs	r2, r0, #1
 80104d2:	b2d2      	uxtb	r2, r2
 80104d4:	f04f 0c01 	mov.w	ip, #1
 80104d8:	e001      	b.n	80104de <uxr_stream_id_from_raw+0x16>
 80104da:	4684      	mov	ip, r0
 80104dc:	4602      	mov	r2, r0
 80104de:	2300      	movs	r3, #0
 80104e0:	f360 0307 	bfi	r3, r0, #0, #8
 80104e4:	f362 230f 	bfi	r3, r2, #8, #8
 80104e8:	f36c 4317 	bfi	r3, ip, #16, #8
 80104ec:	f361 631f 	bfi	r3, r1, #24, #8
 80104f0:	b2da      	uxtb	r2, r3
 80104f2:	2000      	movs	r0, #0
 80104f4:	f362 0007 	bfi	r0, r2, #0, #8
 80104f8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80104fc:	f362 200f 	bfi	r0, r2, #8, #8
 8010500:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8010504:	f362 4017 	bfi	r0, r2, #16, #8
 8010508:	0e1b      	lsrs	r3, r3, #24
 801050a:	f363 601f 	bfi	r0, r3, #24, #8
 801050e:	b002      	add	sp, #8
 8010510:	4770      	bx	lr
 8010512:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8010516:	f04f 0c02 	mov.w	ip, #2
 801051a:	e7e0      	b.n	80104de <uxr_stream_id_from_raw+0x16>

0801051c <uxr_init_stream_storage>:
 801051c:	2300      	movs	r3, #0
 801051e:	7403      	strb	r3, [r0, #16]
 8010520:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8010524:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8010528:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 801052c:	4770      	bx	lr
 801052e:	bf00      	nop

08010530 <uxr_reset_stream_storage>:
 8010530:	b570      	push	{r4, r5, r6, lr}
 8010532:	7c03      	ldrb	r3, [r0, #16]
 8010534:	4604      	mov	r4, r0
 8010536:	b153      	cbz	r3, 801054e <uxr_reset_stream_storage+0x1e>
 8010538:	4606      	mov	r6, r0
 801053a:	2500      	movs	r5, #0
 801053c:	4630      	mov	r0, r6
 801053e:	f006 f823 	bl	8016588 <uxr_reset_output_best_effort_stream>
 8010542:	7c23      	ldrb	r3, [r4, #16]
 8010544:	3501      	adds	r5, #1
 8010546:	42ab      	cmp	r3, r5
 8010548:	f106 0610 	add.w	r6, r6, #16
 801054c:	d8f6      	bhi.n	801053c <uxr_reset_stream_storage+0xc>
 801054e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010552:	b163      	cbz	r3, 801056e <uxr_reset_stream_storage+0x3e>
 8010554:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010558:	2500      	movs	r5, #0
 801055a:	4630      	mov	r0, r6
 801055c:	f005 fe16 	bl	801618c <uxr_reset_input_best_effort_stream>
 8010560:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010564:	3501      	adds	r5, #1
 8010566:	42ab      	cmp	r3, r5
 8010568:	f106 0602 	add.w	r6, r6, #2
 801056c:	d8f5      	bhi.n	801055a <uxr_reset_stream_storage+0x2a>
 801056e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8010572:	b163      	cbz	r3, 801058e <uxr_reset_stream_storage+0x5e>
 8010574:	f104 0618 	add.w	r6, r4, #24
 8010578:	2500      	movs	r5, #0
 801057a:	4630      	mov	r0, r6
 801057c:	f006 f8b0 	bl	80166e0 <uxr_reset_output_reliable_stream>
 8010580:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8010584:	3501      	adds	r5, #1
 8010586:	42ab      	cmp	r3, r5
 8010588:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 801058c:	d8f5      	bhi.n	801057a <uxr_reset_stream_storage+0x4a>
 801058e:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8010592:	b163      	cbz	r3, 80105ae <uxr_reset_stream_storage+0x7e>
 8010594:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8010598:	2500      	movs	r5, #0
 801059a:	4630      	mov	r0, r6
 801059c:	f005 fe6a 	bl	8016274 <uxr_reset_input_reliable_stream>
 80105a0:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80105a4:	3501      	adds	r5, #1
 80105a6:	42ab      	cmp	r3, r5
 80105a8:	f106 0618 	add.w	r6, r6, #24
 80105ac:	d8f5      	bhi.n	801059a <uxr_reset_stream_storage+0x6a>
 80105ae:	bd70      	pop	{r4, r5, r6, pc}

080105b0 <uxr_add_output_best_effort_buffer>:
 80105b0:	b510      	push	{r4, lr}
 80105b2:	7c04      	ldrb	r4, [r0, #16]
 80105b4:	f104 0c01 	add.w	ip, r4, #1
 80105b8:	b082      	sub	sp, #8
 80105ba:	f880 c010 	strb.w	ip, [r0, #16]
 80105be:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80105c2:	f005 ffd7 	bl	8016574 <uxr_init_output_best_effort_stream>
 80105c6:	2201      	movs	r2, #1
 80105c8:	4611      	mov	r1, r2
 80105ca:	4620      	mov	r0, r4
 80105cc:	b002      	add	sp, #8
 80105ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105d2:	f7ff bf4f 	b.w	8010474 <uxr_stream_id>
 80105d6:	bf00      	nop

080105d8 <uxr_add_output_reliable_buffer>:
 80105d8:	b510      	push	{r4, lr}
 80105da:	b084      	sub	sp, #16
 80105dc:	4684      	mov	ip, r0
 80105de:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80105e2:	9000      	str	r0, [sp, #0]
 80105e4:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 80105e8:	2028      	movs	r0, #40	@ 0x28
 80105ea:	fb00 c004 	mla	r0, r0, r4, ip
 80105ee:	f104 0e01 	add.w	lr, r4, #1
 80105f2:	3018      	adds	r0, #24
 80105f4:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 80105f8:	f006 f83a 	bl	8016670 <uxr_init_output_reliable_stream>
 80105fc:	2201      	movs	r2, #1
 80105fe:	2102      	movs	r1, #2
 8010600:	4620      	mov	r0, r4
 8010602:	b004      	add	sp, #16
 8010604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010608:	f7ff bf34 	b.w	8010474 <uxr_stream_id>

0801060c <uxr_add_input_best_effort_buffer>:
 801060c:	b510      	push	{r4, lr}
 801060e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8010612:	4603      	mov	r3, r0
 8010614:	1c62      	adds	r2, r4, #1
 8010616:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 801061a:	b082      	sub	sp, #8
 801061c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8010620:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010624:	f005 fdae 	bl	8016184 <uxr_init_input_best_effort_stream>
 8010628:	2200      	movs	r2, #0
 801062a:	2101      	movs	r1, #1
 801062c:	4620      	mov	r0, r4
 801062e:	b002      	add	sp, #8
 8010630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010634:	f7ff bf1e 	b.w	8010474 <uxr_stream_id>

08010638 <uxr_add_input_reliable_buffer>:
 8010638:	b510      	push	{r4, lr}
 801063a:	b084      	sub	sp, #16
 801063c:	4684      	mov	ip, r0
 801063e:	9806      	ldr	r0, [sp, #24]
 8010640:	9000      	str	r0, [sp, #0]
 8010642:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8010646:	2018      	movs	r0, #24
 8010648:	fb00 c004 	mla	r0, r0, r4, ip
 801064c:	f104 0e01 	add.w	lr, r4, #1
 8010650:	3048      	adds	r0, #72	@ 0x48
 8010652:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8010656:	f005 fde1 	bl	801621c <uxr_init_input_reliable_stream>
 801065a:	2200      	movs	r2, #0
 801065c:	2102      	movs	r1, #2
 801065e:	4620      	mov	r0, r4
 8010660:	b004      	add	sp, #16
 8010662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010666:	f7ff bf05 	b.w	8010474 <uxr_stream_id>
 801066a:	bf00      	nop

0801066c <uxr_get_output_best_effort_stream>:
 801066c:	7c03      	ldrb	r3, [r0, #16]
 801066e:	428b      	cmp	r3, r1
 8010670:	bf8c      	ite	hi
 8010672:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8010676:	2000      	movls	r0, #0
 8010678:	4770      	bx	lr
 801067a:	bf00      	nop

0801067c <uxr_get_output_reliable_stream>:
 801067c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010680:	428b      	cmp	r3, r1
 8010682:	bf83      	ittte	hi
 8010684:	2328      	movhi	r3, #40	@ 0x28
 8010686:	fb03 0001 	mlahi	r0, r3, r1, r0
 801068a:	3018      	addhi	r0, #24
 801068c:	2000      	movls	r0, #0
 801068e:	4770      	bx	lr

08010690 <uxr_get_input_best_effort_stream>:
 8010690:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8010694:	428b      	cmp	r3, r1
 8010696:	bf86      	itte	hi
 8010698:	3121      	addhi	r1, #33	@ 0x21
 801069a:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 801069e:	2000      	movls	r0, #0
 80106a0:	4770      	bx	lr
 80106a2:	bf00      	nop

080106a4 <uxr_get_input_reliable_stream>:
 80106a4:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 80106a8:	428b      	cmp	r3, r1
 80106aa:	bf83      	ittte	hi
 80106ac:	2318      	movhi	r3, #24
 80106ae:	fb03 0001 	mlahi	r0, r3, r1, r0
 80106b2:	3048      	addhi	r0, #72	@ 0x48
 80106b4:	2000      	movls	r0, #0
 80106b6:	4770      	bx	lr

080106b8 <uxr_output_streams_confirmed>:
 80106b8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80106bc:	b183      	cbz	r3, 80106e0 <uxr_output_streams_confirmed+0x28>
 80106be:	b570      	push	{r4, r5, r6, lr}
 80106c0:	4606      	mov	r6, r0
 80106c2:	f100 0518 	add.w	r5, r0, #24
 80106c6:	2400      	movs	r4, #0
 80106c8:	e001      	b.n	80106ce <uxr_output_streams_confirmed+0x16>
 80106ca:	3528      	adds	r5, #40	@ 0x28
 80106cc:	b138      	cbz	r0, 80106de <uxr_output_streams_confirmed+0x26>
 80106ce:	4628      	mov	r0, r5
 80106d0:	f006 fa76 	bl	8016bc0 <uxr_is_output_up_to_date>
 80106d4:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 80106d8:	3401      	adds	r4, #1
 80106da:	42a3      	cmp	r3, r4
 80106dc:	d8f5      	bhi.n	80106ca <uxr_output_streams_confirmed+0x12>
 80106de:	bd70      	pop	{r4, r5, r6, pc}
 80106e0:	2001      	movs	r0, #1
 80106e2:	4770      	bx	lr

080106e4 <uxr_buffer_submessage_header>:
 80106e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106e6:	4604      	mov	r4, r0
 80106e8:	460e      	mov	r6, r1
 80106ea:	2104      	movs	r1, #4
 80106ec:	4615      	mov	r5, r2
 80106ee:	461f      	mov	r7, r3
 80106f0:	f7fd fd22 	bl	800e138 <ucdr_align_to>
 80106f4:	2301      	movs	r3, #1
 80106f6:	ea47 0203 	orr.w	r2, r7, r3
 80106fa:	4631      	mov	r1, r6
 80106fc:	7523      	strb	r3, [r4, #20]
 80106fe:	4620      	mov	r0, r4
 8010700:	462b      	mov	r3, r5
 8010702:	f000 fa27 	bl	8010b54 <uxr_serialize_submessage_header>
 8010706:	4620      	mov	r0, r4
 8010708:	f7fd fd2c 	bl	800e164 <ucdr_buffer_remaining>
 801070c:	42a8      	cmp	r0, r5
 801070e:	bf34      	ite	cc
 8010710:	2000      	movcc	r0, #0
 8010712:	2001      	movcs	r0, #1
 8010714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010716:	bf00      	nop

08010718 <uxr_read_submessage_header>:
 8010718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801071c:	4604      	mov	r4, r0
 801071e:	460d      	mov	r5, r1
 8010720:	2104      	movs	r1, #4
 8010722:	4616      	mov	r6, r2
 8010724:	4698      	mov	r8, r3
 8010726:	f7fd fd07 	bl	800e138 <ucdr_align_to>
 801072a:	4620      	mov	r0, r4
 801072c:	f7fd fd1a 	bl	800e164 <ucdr_buffer_remaining>
 8010730:	2803      	cmp	r0, #3
 8010732:	bf8c      	ite	hi
 8010734:	2701      	movhi	r7, #1
 8010736:	2700      	movls	r7, #0
 8010738:	d802      	bhi.n	8010740 <uxr_read_submessage_header+0x28>
 801073a:	4638      	mov	r0, r7
 801073c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010740:	4633      	mov	r3, r6
 8010742:	4642      	mov	r2, r8
 8010744:	4620      	mov	r0, r4
 8010746:	4629      	mov	r1, r5
 8010748:	f000 fa18 	bl	8010b7c <uxr_deserialize_submessage_header>
 801074c:	f898 3000 	ldrb.w	r3, [r8]
 8010750:	f003 0201 	and.w	r2, r3, #1
 8010754:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8010758:	f888 3000 	strb.w	r3, [r8]
 801075c:	7522      	strb	r2, [r4, #20]
 801075e:	4638      	mov	r0, r7
 8010760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010764 <uxr_submessage_padding>:
 8010764:	f010 0003 	ands.w	r0, r0, #3
 8010768:	bf18      	it	ne
 801076a:	f1c0 0004 	rsbne	r0, r0, #4
 801076e:	4770      	bx	lr

08010770 <uxr_millis>:
 8010770:	b510      	push	{r4, lr}
 8010772:	b084      	sub	sp, #16
 8010774:	4669      	mov	r1, sp
 8010776:	2001      	movs	r0, #1
 8010778:	f7f2 f86e 	bl	8002858 <clock_gettime>
 801077c:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8010780:	4906      	ldr	r1, [pc, #24]	@ (801079c <uxr_millis+0x2c>)
 8010782:	fba0 0301 	umull	r0, r3, r0, r1
 8010786:	1900      	adds	r0, r0, r4
 8010788:	fb01 3102 	mla	r1, r1, r2, r3
 801078c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8010790:	4a03      	ldr	r2, [pc, #12]	@ (80107a0 <uxr_millis+0x30>)
 8010792:	2300      	movs	r3, #0
 8010794:	f7f0 f99a 	bl	8000acc <__aeabi_ldivmod>
 8010798:	b004      	add	sp, #16
 801079a:	bd10      	pop	{r4, pc}
 801079c:	3b9aca00 	.word	0x3b9aca00
 80107a0:	000f4240 	.word	0x000f4240

080107a4 <uxr_nanos>:
 80107a4:	b510      	push	{r4, lr}
 80107a6:	b084      	sub	sp, #16
 80107a8:	4669      	mov	r1, sp
 80107aa:	2001      	movs	r0, #1
 80107ac:	f7f2 f854 	bl	8002858 <clock_gettime>
 80107b0:	4a06      	ldr	r2, [pc, #24]	@ (80107cc <uxr_nanos+0x28>)
 80107b2:	9800      	ldr	r0, [sp, #0]
 80107b4:	9902      	ldr	r1, [sp, #8]
 80107b6:	9c01      	ldr	r4, [sp, #4]
 80107b8:	fba0 0302 	umull	r0, r3, r0, r2
 80107bc:	1840      	adds	r0, r0, r1
 80107be:	fb02 3304 	mla	r3, r2, r4, r3
 80107c2:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80107c6:	b004      	add	sp, #16
 80107c8:	bd10      	pop	{r4, pc}
 80107ca:	bf00      	nop
 80107cc:	3b9aca00 	.word	0x3b9aca00

080107d0 <on_full_output_buffer_fragmented>:
 80107d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107d4:	460c      	mov	r4, r1
 80107d6:	b08a      	sub	sp, #40	@ 0x28
 80107d8:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 80107dc:	4606      	mov	r6, r0
 80107de:	f104 0008 	add.w	r0, r4, #8
 80107e2:	f7ff ff4b 	bl	801067c <uxr_get_output_reliable_stream>
 80107e6:	4605      	mov	r5, r0
 80107e8:	f006 f9f4 	bl	8016bd4 <get_available_free_slots>
 80107ec:	b968      	cbnz	r0, 801080a <on_full_output_buffer_fragmented+0x3a>
 80107ee:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 80107f2:	4620      	mov	r0, r4
 80107f4:	4798      	blx	r3
 80107f6:	b918      	cbnz	r0, 8010800 <on_full_output_buffer_fragmented+0x30>
 80107f8:	2001      	movs	r0, #1
 80107fa:	b00a      	add	sp, #40	@ 0x28
 80107fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010800:	4628      	mov	r0, r5
 8010802:	f006 f9e7 	bl	8016bd4 <get_available_free_slots>
 8010806:	2800      	cmp	r0, #0
 8010808:	d0f6      	beq.n	80107f8 <on_full_output_buffer_fragmented+0x28>
 801080a:	8929      	ldrh	r1, [r5, #8]
 801080c:	89eb      	ldrh	r3, [r5, #14]
 801080e:	7b28      	ldrb	r0, [r5, #12]
 8010810:	686a      	ldr	r2, [r5, #4]
 8010812:	fbb2 f8f1 	udiv	r8, r2, r1
 8010816:	fbb3 f2f1 	udiv	r2, r3, r1
 801081a:	fb01 3112 	mls	r1, r1, r2, r3
 801081e:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8010822:	b289      	uxth	r1, r1
 8010824:	fb08 f101 	mul.w	r1, r8, r1
 8010828:	30fc      	adds	r0, #252	@ 0xfc
 801082a:	f1a8 0804 	sub.w	r8, r8, #4
 801082e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8010832:	4440      	add	r0, r8
 8010834:	b287      	uxth	r7, r0
 8010836:	1bdb      	subs	r3, r3, r7
 8010838:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 801083c:	682b      	ldr	r3, [r5, #0]
 801083e:	3104      	adds	r1, #4
 8010840:	4419      	add	r1, r3
 8010842:	4642      	mov	r2, r8
 8010844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010848:	9300      	str	r3, [sp, #0]
 801084a:	a802      	add	r0, sp, #8
 801084c:	2300      	movs	r3, #0
 801084e:	f7fd fc47 	bl	800e0e0 <ucdr_init_buffer_origin_offset>
 8010852:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8010856:	f102 0308 	add.w	r3, r2, #8
 801085a:	4543      	cmp	r3, r8
 801085c:	d928      	bls.n	80108b0 <on_full_output_buffer_fragmented+0xe0>
 801085e:	463a      	mov	r2, r7
 8010860:	2300      	movs	r3, #0
 8010862:	210d      	movs	r1, #13
 8010864:	a802      	add	r0, sp, #8
 8010866:	f7ff ff3d 	bl	80106e4 <uxr_buffer_submessage_header>
 801086a:	8929      	ldrh	r1, [r5, #8]
 801086c:	89eb      	ldrh	r3, [r5, #14]
 801086e:	fbb3 f2f1 	udiv	r2, r3, r1
 8010872:	fb01 3312 	mls	r3, r1, r2, r3
 8010876:	b29b      	uxth	r3, r3
 8010878:	686a      	ldr	r2, [r5, #4]
 801087a:	fbb2 f2f1 	udiv	r2, r2, r1
 801087e:	fb02 f303 	mul.w	r3, r2, r3
 8010882:	682a      	ldr	r2, [r5, #0]
 8010884:	f842 8003 	str.w	r8, [r2, r3]
 8010888:	89e8      	ldrh	r0, [r5, #14]
 801088a:	2101      	movs	r1, #1
 801088c:	f006 f9c2 	bl	8016c14 <uxr_seq_num_add>
 8010890:	9904      	ldr	r1, [sp, #16]
 8010892:	9a03      	ldr	r2, [sp, #12]
 8010894:	81e8      	strh	r0, [r5, #14]
 8010896:	1a52      	subs	r2, r2, r1
 8010898:	4630      	mov	r0, r6
 801089a:	f7fd fc33 	bl	800e104 <ucdr_init_buffer>
 801089e:	4630      	mov	r0, r6
 80108a0:	490f      	ldr	r1, [pc, #60]	@ (80108e0 <on_full_output_buffer_fragmented+0x110>)
 80108a2:	4622      	mov	r2, r4
 80108a4:	f7fd fc02 	bl	800e0ac <ucdr_set_on_full_buffer_callback>
 80108a8:	2000      	movs	r0, #0
 80108aa:	b00a      	add	sp, #40	@ 0x28
 80108ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108b0:	b292      	uxth	r2, r2
 80108b2:	2302      	movs	r3, #2
 80108b4:	210d      	movs	r1, #13
 80108b6:	a802      	add	r0, sp, #8
 80108b8:	f7ff ff14 	bl	80106e4 <uxr_buffer_submessage_header>
 80108bc:	8928      	ldrh	r0, [r5, #8]
 80108be:	89eb      	ldrh	r3, [r5, #14]
 80108c0:	fbb3 f1f0 	udiv	r1, r3, r0
 80108c4:	fb00 3311 	mls	r3, r0, r1, r3
 80108c8:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80108cc:	6869      	ldr	r1, [r5, #4]
 80108ce:	fbb1 f1f0 	udiv	r1, r1, r0
 80108d2:	b29b      	uxth	r3, r3
 80108d4:	fb01 f303 	mul.w	r3, r1, r3
 80108d8:	6829      	ldr	r1, [r5, #0]
 80108da:	3208      	adds	r2, #8
 80108dc:	50ca      	str	r2, [r1, r3]
 80108de:	e7d3      	b.n	8010888 <on_full_output_buffer_fragmented+0xb8>
 80108e0:	080107d1 	.word	0x080107d1

080108e4 <uxr_prepare_output_stream>:
 80108e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108e6:	b087      	sub	sp, #28
 80108e8:	2707      	movs	r7, #7
 80108ea:	9202      	str	r2, [sp, #8]
 80108ec:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80108ee:	9103      	str	r1, [sp, #12]
 80108f0:	2500      	movs	r5, #0
 80108f2:	3204      	adds	r2, #4
 80108f4:	e9cd 7500 	strd	r7, r5, [sp]
 80108f8:	461c      	mov	r4, r3
 80108fa:	4606      	mov	r6, r0
 80108fc:	f7fe ffc2 	bl	800f884 <uxr_prepare_stream_to_write_submessage>
 8010900:	f080 0201 	eor.w	r2, r0, #1
 8010904:	b2d2      	uxtb	r2, r2
 8010906:	75a2      	strb	r2, [r4, #22]
 8010908:	b112      	cbz	r2, 8010910 <uxr_prepare_output_stream+0x2c>
 801090a:	4628      	mov	r0, r5
 801090c:	b007      	add	sp, #28
 801090e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010910:	aa05      	add	r2, sp, #20
 8010912:	9902      	ldr	r1, [sp, #8]
 8010914:	4630      	mov	r0, r6
 8010916:	f7ff f8eb 	bl	800faf0 <uxr_init_base_object_request>
 801091a:	a905      	add	r1, sp, #20
 801091c:	4605      	mov	r5, r0
 801091e:	4620      	mov	r0, r4
 8010920:	f001 f88c 	bl	8011a3c <uxr_serialize_WRITE_DATA_Payload_Data>
 8010924:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8010928:	69a6      	ldr	r6, [r4, #24]
 801092a:	69e7      	ldr	r7, [r4, #28]
 801092c:	1a52      	subs	r2, r2, r1
 801092e:	4620      	mov	r0, r4
 8010930:	f7fd fbe8 	bl	800e104 <ucdr_init_buffer>
 8010934:	4620      	mov	r0, r4
 8010936:	463a      	mov	r2, r7
 8010938:	4631      	mov	r1, r6
 801093a:	f7fd fbb7 	bl	800e0ac <ucdr_set_on_full_buffer_callback>
 801093e:	4628      	mov	r0, r5
 8010940:	b007      	add	sp, #28
 8010942:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010944 <uxr_prepare_output_stream_fragmented>:
 8010944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010948:	b091      	sub	sp, #68	@ 0x44
 801094a:	4605      	mov	r5, r0
 801094c:	9105      	str	r1, [sp, #20]
 801094e:	3008      	adds	r0, #8
 8010950:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8010954:	461e      	mov	r6, r3
 8010956:	9204      	str	r2, [sp, #16]
 8010958:	f7ff fe90 	bl	801067c <uxr_get_output_reliable_stream>
 801095c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8010960:	2b01      	cmp	r3, #1
 8010962:	f000 8091 	beq.w	8010a88 <uxr_prepare_output_stream_fragmented+0x144>
 8010966:	4604      	mov	r4, r0
 8010968:	2800      	cmp	r0, #0
 801096a:	f000 808d 	beq.w	8010a88 <uxr_prepare_output_stream_fragmented+0x144>
 801096e:	f006 f931 	bl	8016bd4 <get_available_free_slots>
 8010972:	2800      	cmp	r0, #0
 8010974:	f000 8083 	beq.w	8010a7e <uxr_prepare_output_stream_fragmented+0x13a>
 8010978:	8922      	ldrh	r2, [r4, #8]
 801097a:	89e7      	ldrh	r7, [r4, #14]
 801097c:	fbb7 f9f2 	udiv	r9, r7, r2
 8010980:	fb02 7919 	mls	r9, r2, r9, r7
 8010984:	fa1f f989 	uxth.w	r9, r9
 8010988:	6863      	ldr	r3, [r4, #4]
 801098a:	fbb3 f2f2 	udiv	r2, r3, r2
 801098e:	6823      	ldr	r3, [r4, #0]
 8010990:	9203      	str	r2, [sp, #12]
 8010992:	fb02 f909 	mul.w	r9, r2, r9
 8010996:	f109 0904 	add.w	r9, r9, #4
 801099a:	4499      	add	r9, r3
 801099c:	7b23      	ldrb	r3, [r4, #12]
 801099e:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80109a2:	4543      	cmp	r3, r8
 80109a4:	f1a2 0b04 	sub.w	fp, r2, #4
 80109a8:	d37a      	bcc.n	8010aa0 <uxr_prepare_output_stream_fragmented+0x15c>
 80109aa:	f1ab 0a04 	sub.w	sl, fp, #4
 80109ae:	ebaa 0a03 	sub.w	sl, sl, r3
 80109b2:	465a      	mov	r2, fp
 80109b4:	2300      	movs	r3, #0
 80109b6:	4649      	mov	r1, r9
 80109b8:	a808      	add	r0, sp, #32
 80109ba:	f8cd 8000 	str.w	r8, [sp]
 80109be:	f7fd fb8f 	bl	800e0e0 <ucdr_init_buffer_origin_offset>
 80109c2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80109c4:	fa1f fa8a 	uxth.w	sl, sl
 80109c8:	4652      	mov	r2, sl
 80109ca:	f103 0a08 	add.w	sl, r3, #8
 80109ce:	45da      	cmp	sl, fp
 80109d0:	bf34      	ite	cc
 80109d2:	2302      	movcc	r3, #2
 80109d4:	2300      	movcs	r3, #0
 80109d6:	210d      	movs	r1, #13
 80109d8:	a808      	add	r0, sp, #32
 80109da:	f7ff fe83 	bl	80106e4 <uxr_buffer_submessage_header>
 80109de:	8921      	ldrh	r1, [r4, #8]
 80109e0:	fbb7 f2f1 	udiv	r2, r7, r1
 80109e4:	fb01 7212 	mls	r2, r1, r2, r7
 80109e8:	b292      	uxth	r2, r2
 80109ea:	6863      	ldr	r3, [r4, #4]
 80109ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80109f0:	fb02 f303 	mul.w	r3, r2, r3
 80109f4:	6822      	ldr	r2, [r4, #0]
 80109f6:	4638      	mov	r0, r7
 80109f8:	f842 b003 	str.w	fp, [r2, r3]
 80109fc:	2101      	movs	r1, #1
 80109fe:	f006 f909 	bl	8016c14 <uxr_seq_num_add>
 8010a02:	9b03      	ldr	r3, [sp, #12]
 8010a04:	f108 0104 	add.w	r1, r8, #4
 8010a08:	f1a3 0208 	sub.w	r2, r3, #8
 8010a0c:	eba2 0208 	sub.w	r2, r2, r8
 8010a10:	4449      	add	r1, r9
 8010a12:	4607      	mov	r7, r0
 8010a14:	4630      	mov	r0, r6
 8010a16:	f7fd fb75 	bl	800e104 <ucdr_init_buffer>
 8010a1a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010a1c:	81e7      	strh	r7, [r4, #14]
 8010a1e:	1d1a      	adds	r2, r3, #4
 8010a20:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8010a24:	bf28      	it	cs
 8010a26:	2200      	movcs	r2, #0
 8010a28:	2300      	movs	r3, #0
 8010a2a:	b292      	uxth	r2, r2
 8010a2c:	2107      	movs	r1, #7
 8010a2e:	4630      	mov	r0, r6
 8010a30:	f7ff fe58 	bl	80106e4 <uxr_buffer_submessage_header>
 8010a34:	9904      	ldr	r1, [sp, #16]
 8010a36:	aa07      	add	r2, sp, #28
 8010a38:	4628      	mov	r0, r5
 8010a3a:	f7ff f859 	bl	800faf0 <uxr_init_base_object_request>
 8010a3e:	4604      	mov	r4, r0
 8010a40:	b318      	cbz	r0, 8010a8a <uxr_prepare_output_stream_fragmented+0x146>
 8010a42:	a907      	add	r1, sp, #28
 8010a44:	4630      	mov	r0, r6
 8010a46:	f000 fff9 	bl	8011a3c <uxr_serialize_WRITE_DATA_Payload_Data>
 8010a4a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8010a4e:	4630      	mov	r0, r6
 8010a50:	1a52      	subs	r2, r2, r1
 8010a52:	f7fd fb57 	bl	800e104 <ucdr_init_buffer>
 8010a56:	9b05      	ldr	r3, [sp, #20]
 8010a58:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8010a5c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010a5e:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8010a62:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8010a64:	491b      	ldr	r1, [pc, #108]	@ (8010ad4 <uxr_prepare_output_stream_fragmented+0x190>)
 8010a66:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8010a6a:	4630      	mov	r0, r6
 8010a6c:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8010a70:	462a      	mov	r2, r5
 8010a72:	f7fd fb1b 	bl	800e0ac <ucdr_set_on_full_buffer_callback>
 8010a76:	4620      	mov	r0, r4
 8010a78:	b011      	add	sp, #68	@ 0x44
 8010a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a7e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8010a80:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010a82:	4628      	mov	r0, r5
 8010a84:	4798      	blx	r3
 8010a86:	b920      	cbnz	r0, 8010a92 <uxr_prepare_output_stream_fragmented+0x14e>
 8010a88:	2400      	movs	r4, #0
 8010a8a:	4620      	mov	r0, r4
 8010a8c:	b011      	add	sp, #68	@ 0x44
 8010a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a92:	4620      	mov	r0, r4
 8010a94:	f006 f89e 	bl	8016bd4 <get_available_free_slots>
 8010a98:	2800      	cmp	r0, #0
 8010a9a:	f47f af6d 	bne.w	8010978 <uxr_prepare_output_stream_fragmented+0x34>
 8010a9e:	e7f3      	b.n	8010a88 <uxr_prepare_output_stream_fragmented+0x144>
 8010aa0:	4638      	mov	r0, r7
 8010aa2:	2101      	movs	r1, #1
 8010aa4:	f006 f8b6 	bl	8016c14 <uxr_seq_num_add>
 8010aa8:	8921      	ldrh	r1, [r4, #8]
 8010aaa:	fbb0 f2f1 	udiv	r2, r0, r1
 8010aae:	fb01 0912 	mls	r9, r1, r2, r0
 8010ab2:	fa1f f289 	uxth.w	r2, r9
 8010ab6:	6863      	ldr	r3, [r4, #4]
 8010ab8:	fbb3 f9f1 	udiv	r9, r3, r1
 8010abc:	6823      	ldr	r3, [r4, #0]
 8010abe:	fb02 f909 	mul.w	r9, r2, r9
 8010ac2:	f109 0904 	add.w	r9, r9, #4
 8010ac6:	4499      	add	r9, r3
 8010ac8:	4607      	mov	r7, r0
 8010aca:	7b23      	ldrb	r3, [r4, #12]
 8010acc:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8010ad0:	e76b      	b.n	80109aa <uxr_prepare_output_stream_fragmented+0x66>
 8010ad2:	bf00      	nop
 8010ad4:	080107d1 	.word	0x080107d1

08010ad8 <uxr_serialize_message_header>:
 8010ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ada:	b083      	sub	sp, #12
 8010adc:	4616      	mov	r6, r2
 8010ade:	4604      	mov	r4, r0
 8010ae0:	9301      	str	r3, [sp, #4]
 8010ae2:	460d      	mov	r5, r1
 8010ae4:	9f08      	ldr	r7, [sp, #32]
 8010ae6:	f7fc fb61 	bl	800d1ac <ucdr_serialize_uint8_t>
 8010aea:	4631      	mov	r1, r6
 8010aec:	4620      	mov	r0, r4
 8010aee:	f7fc fb5d 	bl	800d1ac <ucdr_serialize_uint8_t>
 8010af2:	9a01      	ldr	r2, [sp, #4]
 8010af4:	2101      	movs	r1, #1
 8010af6:	4620      	mov	r0, r4
 8010af8:	f7fc fc04 	bl	800d304 <ucdr_serialize_endian_uint16_t>
 8010afc:	062b      	lsls	r3, r5, #24
 8010afe:	d501      	bpl.n	8010b04 <uxr_serialize_message_header+0x2c>
 8010b00:	b003      	add	sp, #12
 8010b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b04:	2204      	movs	r2, #4
 8010b06:	4639      	mov	r1, r7
 8010b08:	4620      	mov	r0, r4
 8010b0a:	b003      	add	sp, #12
 8010b0c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010b10:	f005 ba00 	b.w	8015f14 <ucdr_serialize_array_uint8_t>

08010b14 <uxr_deserialize_message_header>:
 8010b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b16:	b083      	sub	sp, #12
 8010b18:	4616      	mov	r6, r2
 8010b1a:	4604      	mov	r4, r0
 8010b1c:	9301      	str	r3, [sp, #4]
 8010b1e:	460d      	mov	r5, r1
 8010b20:	9f08      	ldr	r7, [sp, #32]
 8010b22:	f7fc fb59 	bl	800d1d8 <ucdr_deserialize_uint8_t>
 8010b26:	4631      	mov	r1, r6
 8010b28:	4620      	mov	r0, r4
 8010b2a:	f7fc fb55 	bl	800d1d8 <ucdr_deserialize_uint8_t>
 8010b2e:	9a01      	ldr	r2, [sp, #4]
 8010b30:	2101      	movs	r1, #1
 8010b32:	4620      	mov	r0, r4
 8010b34:	f7fc fcda 	bl	800d4ec <ucdr_deserialize_endian_uint16_t>
 8010b38:	f995 3000 	ldrsb.w	r3, [r5]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	da01      	bge.n	8010b44 <uxr_deserialize_message_header+0x30>
 8010b40:	b003      	add	sp, #12
 8010b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b44:	2204      	movs	r2, #4
 8010b46:	4639      	mov	r1, r7
 8010b48:	4620      	mov	r0, r4
 8010b4a:	b003      	add	sp, #12
 8010b4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010b50:	f005 ba44 	b.w	8015fdc <ucdr_deserialize_array_uint8_t>

08010b54 <uxr_serialize_submessage_header>:
 8010b54:	b530      	push	{r4, r5, lr}
 8010b56:	b083      	sub	sp, #12
 8010b58:	4615      	mov	r5, r2
 8010b5a:	4604      	mov	r4, r0
 8010b5c:	9301      	str	r3, [sp, #4]
 8010b5e:	f7fc fb25 	bl	800d1ac <ucdr_serialize_uint8_t>
 8010b62:	4629      	mov	r1, r5
 8010b64:	4620      	mov	r0, r4
 8010b66:	f7fc fb21 	bl	800d1ac <ucdr_serialize_uint8_t>
 8010b6a:	9a01      	ldr	r2, [sp, #4]
 8010b6c:	2101      	movs	r1, #1
 8010b6e:	4620      	mov	r0, r4
 8010b70:	b003      	add	sp, #12
 8010b72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b76:	f7fc bbc5 	b.w	800d304 <ucdr_serialize_endian_uint16_t>
 8010b7a:	bf00      	nop

08010b7c <uxr_deserialize_submessage_header>:
 8010b7c:	b530      	push	{r4, r5, lr}
 8010b7e:	b083      	sub	sp, #12
 8010b80:	4615      	mov	r5, r2
 8010b82:	4604      	mov	r4, r0
 8010b84:	9301      	str	r3, [sp, #4]
 8010b86:	f7fc fb27 	bl	800d1d8 <ucdr_deserialize_uint8_t>
 8010b8a:	4629      	mov	r1, r5
 8010b8c:	4620      	mov	r0, r4
 8010b8e:	f7fc fb23 	bl	800d1d8 <ucdr_deserialize_uint8_t>
 8010b92:	9a01      	ldr	r2, [sp, #4]
 8010b94:	2101      	movs	r1, #1
 8010b96:	4620      	mov	r0, r4
 8010b98:	b003      	add	sp, #12
 8010b9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b9e:	f7fc bca5 	b.w	800d4ec <ucdr_deserialize_endian_uint16_t>
 8010ba2:	bf00      	nop

08010ba4 <uxr_serialize_CLIENT_Representation>:
 8010ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ba8:	2204      	movs	r2, #4
 8010baa:	460e      	mov	r6, r1
 8010bac:	4605      	mov	r5, r0
 8010bae:	f005 f9b1 	bl	8015f14 <ucdr_serialize_array_uint8_t>
 8010bb2:	2202      	movs	r2, #2
 8010bb4:	4607      	mov	r7, r0
 8010bb6:	1d31      	adds	r1, r6, #4
 8010bb8:	4628      	mov	r0, r5
 8010bba:	f005 f9ab 	bl	8015f14 <ucdr_serialize_array_uint8_t>
 8010bbe:	4038      	ands	r0, r7
 8010bc0:	2202      	movs	r2, #2
 8010bc2:	1db1      	adds	r1, r6, #6
 8010bc4:	b2c7      	uxtb	r7, r0
 8010bc6:	4628      	mov	r0, r5
 8010bc8:	f005 f9a4 	bl	8015f14 <ucdr_serialize_array_uint8_t>
 8010bcc:	2204      	movs	r2, #4
 8010bce:	4007      	ands	r7, r0
 8010bd0:	f106 0108 	add.w	r1, r6, #8
 8010bd4:	4628      	mov	r0, r5
 8010bd6:	f005 f99d 	bl	8015f14 <ucdr_serialize_array_uint8_t>
 8010bda:	7b31      	ldrb	r1, [r6, #12]
 8010bdc:	4007      	ands	r7, r0
 8010bde:	4628      	mov	r0, r5
 8010be0:	f7fc fae4 	bl	800d1ac <ucdr_serialize_uint8_t>
 8010be4:	7b71      	ldrb	r1, [r6, #13]
 8010be6:	4007      	ands	r7, r0
 8010be8:	4628      	mov	r0, r5
 8010bea:	f7fc fab1 	bl	800d150 <ucdr_serialize_bool>
 8010bee:	7b73      	ldrb	r3, [r6, #13]
 8010bf0:	ea07 0800 	and.w	r8, r7, r0
 8010bf4:	b93b      	cbnz	r3, 8010c06 <uxr_serialize_CLIENT_Representation+0x62>
 8010bf6:	8bb1      	ldrh	r1, [r6, #28]
 8010bf8:	4628      	mov	r0, r5
 8010bfa:	f7fc fb03 	bl	800d204 <ucdr_serialize_uint16_t>
 8010bfe:	ea08 0000 	and.w	r0, r8, r0
 8010c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c06:	6931      	ldr	r1, [r6, #16]
 8010c08:	4628      	mov	r0, r5
 8010c0a:	f7fc fce5 	bl	800d5d8 <ucdr_serialize_uint32_t>
 8010c0e:	6933      	ldr	r3, [r6, #16]
 8010c10:	b1e3      	cbz	r3, 8010c4c <uxr_serialize_CLIENT_Representation+0xa8>
 8010c12:	b1c0      	cbz	r0, 8010c46 <uxr_serialize_CLIENT_Representation+0xa2>
 8010c14:	4637      	mov	r7, r6
 8010c16:	f04f 0900 	mov.w	r9, #0
 8010c1a:	e001      	b.n	8010c20 <uxr_serialize_CLIENT_Representation+0x7c>
 8010c1c:	3708      	adds	r7, #8
 8010c1e:	b194      	cbz	r4, 8010c46 <uxr_serialize_CLIENT_Representation+0xa2>
 8010c20:	6979      	ldr	r1, [r7, #20]
 8010c22:	4628      	mov	r0, r5
 8010c24:	f005 fa96 	bl	8016154 <ucdr_serialize_string>
 8010c28:	69b9      	ldr	r1, [r7, #24]
 8010c2a:	4604      	mov	r4, r0
 8010c2c:	4628      	mov	r0, r5
 8010c2e:	f005 fa91 	bl	8016154 <ucdr_serialize_string>
 8010c32:	6933      	ldr	r3, [r6, #16]
 8010c34:	f109 0901 	add.w	r9, r9, #1
 8010c38:	4004      	ands	r4, r0
 8010c3a:	4599      	cmp	r9, r3
 8010c3c:	b2e4      	uxtb	r4, r4
 8010c3e:	d3ed      	bcc.n	8010c1c <uxr_serialize_CLIENT_Representation+0x78>
 8010c40:	ea08 0804 	and.w	r8, r8, r4
 8010c44:	e7d7      	b.n	8010bf6 <uxr_serialize_CLIENT_Representation+0x52>
 8010c46:	f04f 0800 	mov.w	r8, #0
 8010c4a:	e7d4      	b.n	8010bf6 <uxr_serialize_CLIENT_Representation+0x52>
 8010c4c:	ea08 0800 	and.w	r8, r8, r0
 8010c50:	e7d1      	b.n	8010bf6 <uxr_serialize_CLIENT_Representation+0x52>
 8010c52:	bf00      	nop

08010c54 <uxr_deserialize_CLIENT_Representation>:
 8010c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c58:	2204      	movs	r2, #4
 8010c5a:	460c      	mov	r4, r1
 8010c5c:	4605      	mov	r5, r0
 8010c5e:	f005 f9bd 	bl	8015fdc <ucdr_deserialize_array_uint8_t>
 8010c62:	2202      	movs	r2, #2
 8010c64:	4607      	mov	r7, r0
 8010c66:	1d21      	adds	r1, r4, #4
 8010c68:	4628      	mov	r0, r5
 8010c6a:	f005 f9b7 	bl	8015fdc <ucdr_deserialize_array_uint8_t>
 8010c6e:	4038      	ands	r0, r7
 8010c70:	2202      	movs	r2, #2
 8010c72:	1da1      	adds	r1, r4, #6
 8010c74:	b2c6      	uxtb	r6, r0
 8010c76:	4628      	mov	r0, r5
 8010c78:	f005 f9b0 	bl	8015fdc <ucdr_deserialize_array_uint8_t>
 8010c7c:	2204      	movs	r2, #4
 8010c7e:	4006      	ands	r6, r0
 8010c80:	f104 0108 	add.w	r1, r4, #8
 8010c84:	4628      	mov	r0, r5
 8010c86:	f005 f9a9 	bl	8015fdc <ucdr_deserialize_array_uint8_t>
 8010c8a:	f104 010c 	add.w	r1, r4, #12
 8010c8e:	4006      	ands	r6, r0
 8010c90:	4628      	mov	r0, r5
 8010c92:	f7fc faa1 	bl	800d1d8 <ucdr_deserialize_uint8_t>
 8010c96:	f104 010d 	add.w	r1, r4, #13
 8010c9a:	ea06 0700 	and.w	r7, r6, r0
 8010c9e:	4628      	mov	r0, r5
 8010ca0:	f7fc fa6c 	bl	800d17c <ucdr_deserialize_bool>
 8010ca4:	7b63      	ldrb	r3, [r4, #13]
 8010ca6:	4007      	ands	r7, r0
 8010ca8:	b93b      	cbnz	r3, 8010cba <uxr_deserialize_CLIENT_Representation+0x66>
 8010caa:	f104 011c 	add.w	r1, r4, #28
 8010cae:	4628      	mov	r0, r5
 8010cb0:	f7fc fba8 	bl	800d404 <ucdr_deserialize_uint16_t>
 8010cb4:	4038      	ands	r0, r7
 8010cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010cba:	f104 0110 	add.w	r1, r4, #16
 8010cbe:	4628      	mov	r0, r5
 8010cc0:	f7fc fdba 	bl	800d838 <ucdr_deserialize_uint32_t>
 8010cc4:	6923      	ldr	r3, [r4, #16]
 8010cc6:	2b01      	cmp	r3, #1
 8010cc8:	d903      	bls.n	8010cd2 <uxr_deserialize_CLIENT_Representation+0x7e>
 8010cca:	2301      	movs	r3, #1
 8010ccc:	75ab      	strb	r3, [r5, #22]
 8010cce:	2700      	movs	r7, #0
 8010cd0:	e7eb      	b.n	8010caa <uxr_deserialize_CLIENT_Representation+0x56>
 8010cd2:	b30b      	cbz	r3, 8010d18 <uxr_deserialize_CLIENT_Representation+0xc4>
 8010cd4:	2800      	cmp	r0, #0
 8010cd6:	d0fa      	beq.n	8010cce <uxr_deserialize_CLIENT_Representation+0x7a>
 8010cd8:	46a0      	mov	r8, r4
 8010cda:	f04f 0900 	mov.w	r9, #0
 8010cde:	e001      	b.n	8010ce4 <uxr_deserialize_CLIENT_Representation+0x90>
 8010ce0:	2e00      	cmp	r6, #0
 8010ce2:	d0f4      	beq.n	8010cce <uxr_deserialize_CLIENT_Representation+0x7a>
 8010ce4:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8010ce8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010cec:	4628      	mov	r0, r5
 8010cee:	f005 fa41 	bl	8016174 <ucdr_deserialize_string>
 8010cf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010cf6:	4606      	mov	r6, r0
 8010cf8:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8010cfc:	4628      	mov	r0, r5
 8010cfe:	f005 fa39 	bl	8016174 <ucdr_deserialize_string>
 8010d02:	6923      	ldr	r3, [r4, #16]
 8010d04:	f109 0901 	add.w	r9, r9, #1
 8010d08:	4006      	ands	r6, r0
 8010d0a:	4599      	cmp	r9, r3
 8010d0c:	f108 0808 	add.w	r8, r8, #8
 8010d10:	b2f6      	uxtb	r6, r6
 8010d12:	d3e5      	bcc.n	8010ce0 <uxr_deserialize_CLIENT_Representation+0x8c>
 8010d14:	4037      	ands	r7, r6
 8010d16:	e7c8      	b.n	8010caa <uxr_deserialize_CLIENT_Representation+0x56>
 8010d18:	4007      	ands	r7, r0
 8010d1a:	e7c6      	b.n	8010caa <uxr_deserialize_CLIENT_Representation+0x56>

08010d1c <uxr_serialize_AGENT_Representation>:
 8010d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d20:	2204      	movs	r2, #4
 8010d22:	460f      	mov	r7, r1
 8010d24:	4605      	mov	r5, r0
 8010d26:	f005 f8f5 	bl	8015f14 <ucdr_serialize_array_uint8_t>
 8010d2a:	2202      	movs	r2, #2
 8010d2c:	4604      	mov	r4, r0
 8010d2e:	1d39      	adds	r1, r7, #4
 8010d30:	4628      	mov	r0, r5
 8010d32:	f005 f8ef 	bl	8015f14 <ucdr_serialize_array_uint8_t>
 8010d36:	4020      	ands	r0, r4
 8010d38:	2202      	movs	r2, #2
 8010d3a:	1db9      	adds	r1, r7, #6
 8010d3c:	b2c4      	uxtb	r4, r0
 8010d3e:	4628      	mov	r0, r5
 8010d40:	f005 f8e8 	bl	8015f14 <ucdr_serialize_array_uint8_t>
 8010d44:	7a39      	ldrb	r1, [r7, #8]
 8010d46:	4004      	ands	r4, r0
 8010d48:	4628      	mov	r0, r5
 8010d4a:	f7fc fa01 	bl	800d150 <ucdr_serialize_bool>
 8010d4e:	7a3b      	ldrb	r3, [r7, #8]
 8010d50:	ea00 0804 	and.w	r8, r0, r4
 8010d54:	b913      	cbnz	r3, 8010d5c <uxr_serialize_AGENT_Representation+0x40>
 8010d56:	4640      	mov	r0, r8
 8010d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d5c:	68f9      	ldr	r1, [r7, #12]
 8010d5e:	4628      	mov	r0, r5
 8010d60:	f7fc fc3a 	bl	800d5d8 <ucdr_serialize_uint32_t>
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	b303      	cbz	r3, 8010daa <uxr_serialize_AGENT_Representation+0x8e>
 8010d68:	b1d0      	cbz	r0, 8010da0 <uxr_serialize_AGENT_Representation+0x84>
 8010d6a:	463e      	mov	r6, r7
 8010d6c:	f04f 0900 	mov.w	r9, #0
 8010d70:	e001      	b.n	8010d76 <uxr_serialize_AGENT_Representation+0x5a>
 8010d72:	3608      	adds	r6, #8
 8010d74:	b1a4      	cbz	r4, 8010da0 <uxr_serialize_AGENT_Representation+0x84>
 8010d76:	6931      	ldr	r1, [r6, #16]
 8010d78:	4628      	mov	r0, r5
 8010d7a:	f005 f9eb 	bl	8016154 <ucdr_serialize_string>
 8010d7e:	6971      	ldr	r1, [r6, #20]
 8010d80:	4604      	mov	r4, r0
 8010d82:	4628      	mov	r0, r5
 8010d84:	f005 f9e6 	bl	8016154 <ucdr_serialize_string>
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	f109 0901 	add.w	r9, r9, #1
 8010d8e:	4004      	ands	r4, r0
 8010d90:	4599      	cmp	r9, r3
 8010d92:	b2e4      	uxtb	r4, r4
 8010d94:	d3ed      	bcc.n	8010d72 <uxr_serialize_AGENT_Representation+0x56>
 8010d96:	ea08 0804 	and.w	r8, r8, r4
 8010d9a:	4640      	mov	r0, r8
 8010d9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010da0:	f04f 0800 	mov.w	r8, #0
 8010da4:	4640      	mov	r0, r8
 8010da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010daa:	ea08 0800 	and.w	r8, r8, r0
 8010dae:	e7d2      	b.n	8010d56 <uxr_serialize_AGENT_Representation+0x3a>

08010db0 <uxr_serialize_DATAWRITER_Representation>:
 8010db0:	b570      	push	{r4, r5, r6, lr}
 8010db2:	460d      	mov	r5, r1
 8010db4:	7809      	ldrb	r1, [r1, #0]
 8010db6:	4606      	mov	r6, r0
 8010db8:	f7fc f9f8 	bl	800d1ac <ucdr_serialize_uint8_t>
 8010dbc:	4604      	mov	r4, r0
 8010dbe:	b130      	cbz	r0, 8010dce <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010dc0:	782b      	ldrb	r3, [r5, #0]
 8010dc2:	2b02      	cmp	r3, #2
 8010dc4:	d00c      	beq.n	8010de0 <uxr_serialize_DATAWRITER_Representation+0x30>
 8010dc6:	2b03      	cmp	r3, #3
 8010dc8:	d010      	beq.n	8010dec <uxr_serialize_DATAWRITER_Representation+0x3c>
 8010dca:	2b01      	cmp	r3, #1
 8010dcc:	d008      	beq.n	8010de0 <uxr_serialize_DATAWRITER_Representation+0x30>
 8010dce:	2202      	movs	r2, #2
 8010dd0:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8010dd4:	4630      	mov	r0, r6
 8010dd6:	f005 f89d 	bl	8015f14 <ucdr_serialize_array_uint8_t>
 8010dda:	4020      	ands	r0, r4
 8010ddc:	b2c0      	uxtb	r0, r0
 8010dde:	bd70      	pop	{r4, r5, r6, pc}
 8010de0:	6869      	ldr	r1, [r5, #4]
 8010de2:	4630      	mov	r0, r6
 8010de4:	f005 f9b6 	bl	8016154 <ucdr_serialize_string>
 8010de8:	4604      	mov	r4, r0
 8010dea:	e7f0      	b.n	8010dce <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010dec:	4629      	mov	r1, r5
 8010dee:	4630      	mov	r0, r6
 8010df0:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8010df4:	3104      	adds	r1, #4
 8010df6:	f005 f981 	bl	80160fc <ucdr_serialize_sequence_uint8_t>
 8010dfa:	4604      	mov	r4, r0
 8010dfc:	e7e7      	b.n	8010dce <uxr_serialize_DATAWRITER_Representation+0x1e>
 8010dfe:	bf00      	nop

08010e00 <uxr_serialize_ObjectVariant.part.0>:
 8010e00:	b570      	push	{r4, r5, r6, lr}
 8010e02:	780b      	ldrb	r3, [r1, #0]
 8010e04:	3b01      	subs	r3, #1
 8010e06:	460c      	mov	r4, r1
 8010e08:	4605      	mov	r5, r0
 8010e0a:	2b0d      	cmp	r3, #13
 8010e0c:	d854      	bhi.n	8010eb8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8010e0e:	e8df f003 	tbb	[pc, r3]
 8010e12:	0730      	.short	0x0730
 8010e14:	07071b1b 	.word	0x07071b1b
 8010e18:	0c530707 	.word	0x0c530707
 8010e1c:	494e0c0c 	.word	0x494e0c0c
 8010e20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010e24:	3104      	adds	r1, #4
 8010e26:	f7ff bfc3 	b.w	8010db0 <uxr_serialize_DATAWRITER_Representation>
 8010e2a:	7909      	ldrb	r1, [r1, #4]
 8010e2c:	f7fc f9be 	bl	800d1ac <ucdr_serialize_uint8_t>
 8010e30:	b1e8      	cbz	r0, 8010e6e <uxr_serialize_ObjectVariant.part.0+0x6e>
 8010e32:	7923      	ldrb	r3, [r4, #4]
 8010e34:	2b01      	cmp	r3, #1
 8010e36:	d001      	beq.n	8010e3c <uxr_serialize_ObjectVariant.part.0+0x3c>
 8010e38:	2b02      	cmp	r3, #2
 8010e3a:	d13d      	bne.n	8010eb8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8010e3c:	68a1      	ldr	r1, [r4, #8]
 8010e3e:	4628      	mov	r0, r5
 8010e40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010e44:	f005 b986 	b.w	8016154 <ucdr_serialize_string>
 8010e48:	7909      	ldrb	r1, [r1, #4]
 8010e4a:	f7fc f9af 	bl	800d1ac <ucdr_serialize_uint8_t>
 8010e4e:	4606      	mov	r6, r0
 8010e50:	b120      	cbz	r0, 8010e5c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010e52:	7923      	ldrb	r3, [r4, #4]
 8010e54:	2b02      	cmp	r3, #2
 8010e56:	d039      	beq.n	8010ecc <uxr_serialize_ObjectVariant.part.0+0xcc>
 8010e58:	2b03      	cmp	r3, #3
 8010e5a:	d02f      	beq.n	8010ebc <uxr_serialize_ObjectVariant.part.0+0xbc>
 8010e5c:	2202      	movs	r2, #2
 8010e5e:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8010e62:	4628      	mov	r0, r5
 8010e64:	f005 f856 	bl	8015f14 <ucdr_serialize_array_uint8_t>
 8010e68:	4030      	ands	r0, r6
 8010e6a:	b2c0      	uxtb	r0, r0
 8010e6c:	bd70      	pop	{r4, r5, r6, pc}
 8010e6e:	2000      	movs	r0, #0
 8010e70:	bd70      	pop	{r4, r5, r6, pc}
 8010e72:	7909      	ldrb	r1, [r1, #4]
 8010e74:	f7fc f99a 	bl	800d1ac <ucdr_serialize_uint8_t>
 8010e78:	4606      	mov	r6, r0
 8010e7a:	b158      	cbz	r0, 8010e94 <uxr_serialize_ObjectVariant.part.0+0x94>
 8010e7c:	7923      	ldrb	r3, [r4, #4]
 8010e7e:	2b02      	cmp	r3, #2
 8010e80:	d003      	beq.n	8010e8a <uxr_serialize_ObjectVariant.part.0+0x8a>
 8010e82:	2b03      	cmp	r3, #3
 8010e84:	d028      	beq.n	8010ed8 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8010e86:	2b01      	cmp	r3, #1
 8010e88:	d104      	bne.n	8010e94 <uxr_serialize_ObjectVariant.part.0+0x94>
 8010e8a:	68a1      	ldr	r1, [r4, #8]
 8010e8c:	4628      	mov	r0, r5
 8010e8e:	f005 f961 	bl	8016154 <ucdr_serialize_string>
 8010e92:	4606      	mov	r6, r0
 8010e94:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8010e98:	4628      	mov	r0, r5
 8010e9a:	f7fc fec3 	bl	800dc24 <ucdr_serialize_int16_t>
 8010e9e:	4030      	ands	r0, r6
 8010ea0:	b2c0      	uxtb	r0, r0
 8010ea2:	bd70      	pop	{r4, r5, r6, pc}
 8010ea4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010ea8:	3104      	adds	r1, #4
 8010eaa:	f7ff be7b 	b.w	8010ba4 <uxr_serialize_CLIENT_Representation>
 8010eae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010eb2:	3104      	adds	r1, #4
 8010eb4:	f7ff bf32 	b.w	8010d1c <uxr_serialize_AGENT_Representation>
 8010eb8:	2001      	movs	r0, #1
 8010eba:	bd70      	pop	{r4, r5, r6, pc}
 8010ebc:	68a2      	ldr	r2, [r4, #8]
 8010ebe:	f104 010c 	add.w	r1, r4, #12
 8010ec2:	4628      	mov	r0, r5
 8010ec4:	f005 f91a 	bl	80160fc <ucdr_serialize_sequence_uint8_t>
 8010ec8:	4606      	mov	r6, r0
 8010eca:	e7c7      	b.n	8010e5c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010ecc:	68a1      	ldr	r1, [r4, #8]
 8010ece:	4628      	mov	r0, r5
 8010ed0:	f005 f940 	bl	8016154 <ucdr_serialize_string>
 8010ed4:	4606      	mov	r6, r0
 8010ed6:	e7c1      	b.n	8010e5c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8010ed8:	68a2      	ldr	r2, [r4, #8]
 8010eda:	f104 010c 	add.w	r1, r4, #12
 8010ede:	4628      	mov	r0, r5
 8010ee0:	f005 f90c 	bl	80160fc <ucdr_serialize_sequence_uint8_t>
 8010ee4:	4606      	mov	r6, r0
 8010ee6:	e7d5      	b.n	8010e94 <uxr_serialize_ObjectVariant.part.0+0x94>

08010ee8 <uxr_deserialize_DATAWRITER_Representation>:
 8010ee8:	b570      	push	{r4, r5, r6, lr}
 8010eea:	4606      	mov	r6, r0
 8010eec:	460d      	mov	r5, r1
 8010eee:	f7fc f973 	bl	800d1d8 <ucdr_deserialize_uint8_t>
 8010ef2:	4604      	mov	r4, r0
 8010ef4:	b130      	cbz	r0, 8010f04 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8010ef6:	782b      	ldrb	r3, [r5, #0]
 8010ef8:	2b02      	cmp	r3, #2
 8010efa:	d00c      	beq.n	8010f16 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8010efc:	2b03      	cmp	r3, #3
 8010efe:	d012      	beq.n	8010f26 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8010f00:	2b01      	cmp	r3, #1
 8010f02:	d008      	beq.n	8010f16 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8010f04:	2202      	movs	r2, #2
 8010f06:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8010f0a:	4630      	mov	r0, r6
 8010f0c:	f005 f866 	bl	8015fdc <ucdr_deserialize_array_uint8_t>
 8010f10:	4020      	ands	r0, r4
 8010f12:	b2c0      	uxtb	r0, r0
 8010f14:	bd70      	pop	{r4, r5, r6, pc}
 8010f16:	6869      	ldr	r1, [r5, #4]
 8010f18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010f1c:	4630      	mov	r0, r6
 8010f1e:	f005 f929 	bl	8016174 <ucdr_deserialize_string>
 8010f22:	4604      	mov	r4, r0
 8010f24:	e7ee      	b.n	8010f04 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8010f26:	1d2b      	adds	r3, r5, #4
 8010f28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010f2c:	f105 0108 	add.w	r1, r5, #8
 8010f30:	4630      	mov	r0, r6
 8010f32:	f005 f8f5 	bl	8016120 <ucdr_deserialize_sequence_uint8_t>
 8010f36:	4604      	mov	r4, r0
 8010f38:	e7e4      	b.n	8010f04 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8010f3a:	bf00      	nop

08010f3c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8010f3c:	b570      	push	{r4, r5, r6, lr}
 8010f3e:	460d      	mov	r5, r1
 8010f40:	7809      	ldrb	r1, [r1, #0]
 8010f42:	4606      	mov	r6, r0
 8010f44:	f7fc f904 	bl	800d150 <ucdr_serialize_bool>
 8010f48:	782b      	ldrb	r3, [r5, #0]
 8010f4a:	4604      	mov	r4, r0
 8010f4c:	b94b      	cbnz	r3, 8010f62 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8010f4e:	7a29      	ldrb	r1, [r5, #8]
 8010f50:	4630      	mov	r0, r6
 8010f52:	f7fc f8fd 	bl	800d150 <ucdr_serialize_bool>
 8010f56:	7a2b      	ldrb	r3, [r5, #8]
 8010f58:	4004      	ands	r4, r0
 8010f5a:	b2e4      	uxtb	r4, r4
 8010f5c:	b943      	cbnz	r3, 8010f70 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8010f5e:	4620      	mov	r0, r4
 8010f60:	bd70      	pop	{r4, r5, r6, pc}
 8010f62:	6869      	ldr	r1, [r5, #4]
 8010f64:	4630      	mov	r0, r6
 8010f66:	f005 f8f5 	bl	8016154 <ucdr_serialize_string>
 8010f6a:	4004      	ands	r4, r0
 8010f6c:	b2e4      	uxtb	r4, r4
 8010f6e:	e7ee      	b.n	8010f4e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8010f70:	68e9      	ldr	r1, [r5, #12]
 8010f72:	4630      	mov	r0, r6
 8010f74:	f005 f8ee 	bl	8016154 <ucdr_serialize_string>
 8010f78:	4004      	ands	r4, r0
 8010f7a:	4620      	mov	r0, r4
 8010f7c:	bd70      	pop	{r4, r5, r6, pc}
 8010f7e:	bf00      	nop

08010f80 <uxr_serialize_OBJK_Topic_Binary>:
 8010f80:	b570      	push	{r4, r5, r6, lr}
 8010f82:	460d      	mov	r5, r1
 8010f84:	6809      	ldr	r1, [r1, #0]
 8010f86:	4606      	mov	r6, r0
 8010f88:	f005 f8e4 	bl	8016154 <ucdr_serialize_string>
 8010f8c:	7929      	ldrb	r1, [r5, #4]
 8010f8e:	4604      	mov	r4, r0
 8010f90:	4630      	mov	r0, r6
 8010f92:	f7fc f8dd 	bl	800d150 <ucdr_serialize_bool>
 8010f96:	792b      	ldrb	r3, [r5, #4]
 8010f98:	4004      	ands	r4, r0
 8010f9a:	b2e4      	uxtb	r4, r4
 8010f9c:	b943      	cbnz	r3, 8010fb0 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8010f9e:	7b29      	ldrb	r1, [r5, #12]
 8010fa0:	4630      	mov	r0, r6
 8010fa2:	f7fc f8d5 	bl	800d150 <ucdr_serialize_bool>
 8010fa6:	7b2b      	ldrb	r3, [r5, #12]
 8010fa8:	4004      	ands	r4, r0
 8010faa:	b93b      	cbnz	r3, 8010fbc <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8010fac:	4620      	mov	r0, r4
 8010fae:	bd70      	pop	{r4, r5, r6, pc}
 8010fb0:	68a9      	ldr	r1, [r5, #8]
 8010fb2:	4630      	mov	r0, r6
 8010fb4:	f005 f8ce 	bl	8016154 <ucdr_serialize_string>
 8010fb8:	4004      	ands	r4, r0
 8010fba:	e7f0      	b.n	8010f9e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8010fbc:	6929      	ldr	r1, [r5, #16]
 8010fbe:	4630      	mov	r0, r6
 8010fc0:	f005 f8c8 	bl	8016154 <ucdr_serialize_string>
 8010fc4:	4004      	ands	r4, r0
 8010fc6:	b2e4      	uxtb	r4, r4
 8010fc8:	4620      	mov	r0, r4
 8010fca:	bd70      	pop	{r4, r5, r6, pc}

08010fcc <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8010fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fd0:	460c      	mov	r4, r1
 8010fd2:	7809      	ldrb	r1, [r1, #0]
 8010fd4:	4606      	mov	r6, r0
 8010fd6:	f7fc f8bb 	bl	800d150 <ucdr_serialize_bool>
 8010fda:	7823      	ldrb	r3, [r4, #0]
 8010fdc:	4605      	mov	r5, r0
 8010fde:	b96b      	cbnz	r3, 8010ffc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8010fe0:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8010fe4:	4630      	mov	r0, r6
 8010fe6:	f7fc f8b3 	bl	800d150 <ucdr_serialize_bool>
 8010fea:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8010fee:	4005      	ands	r5, r0
 8010ff0:	b2ed      	uxtb	r5, r5
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d169      	bne.n	80110ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8010ff6:	4628      	mov	r0, r5
 8010ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ffc:	6861      	ldr	r1, [r4, #4]
 8010ffe:	4630      	mov	r0, r6
 8011000:	f7fc faea 	bl	800d5d8 <ucdr_serialize_uint32_t>
 8011004:	6863      	ldr	r3, [r4, #4]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d06b      	beq.n	80110e2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801100a:	2800      	cmp	r0, #0
 801100c:	d067      	beq.n	80110de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801100e:	68a1      	ldr	r1, [r4, #8]
 8011010:	4630      	mov	r0, r6
 8011012:	f005 f89f 	bl	8016154 <ucdr_serialize_string>
 8011016:	6863      	ldr	r3, [r4, #4]
 8011018:	2b01      	cmp	r3, #1
 801101a:	d953      	bls.n	80110c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801101c:	2800      	cmp	r0, #0
 801101e:	d05e      	beq.n	80110de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011020:	68e1      	ldr	r1, [r4, #12]
 8011022:	4630      	mov	r0, r6
 8011024:	f005 f896 	bl	8016154 <ucdr_serialize_string>
 8011028:	6863      	ldr	r3, [r4, #4]
 801102a:	2b02      	cmp	r3, #2
 801102c:	d94a      	bls.n	80110c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801102e:	2800      	cmp	r0, #0
 8011030:	d055      	beq.n	80110de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011032:	6921      	ldr	r1, [r4, #16]
 8011034:	4630      	mov	r0, r6
 8011036:	f005 f88d 	bl	8016154 <ucdr_serialize_string>
 801103a:	6863      	ldr	r3, [r4, #4]
 801103c:	2b03      	cmp	r3, #3
 801103e:	d941      	bls.n	80110c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011040:	2800      	cmp	r0, #0
 8011042:	d04c      	beq.n	80110de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011044:	6961      	ldr	r1, [r4, #20]
 8011046:	4630      	mov	r0, r6
 8011048:	f005 f884 	bl	8016154 <ucdr_serialize_string>
 801104c:	6863      	ldr	r3, [r4, #4]
 801104e:	2b04      	cmp	r3, #4
 8011050:	d938      	bls.n	80110c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011052:	2800      	cmp	r0, #0
 8011054:	d043      	beq.n	80110de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011056:	69a1      	ldr	r1, [r4, #24]
 8011058:	4630      	mov	r0, r6
 801105a:	f005 f87b 	bl	8016154 <ucdr_serialize_string>
 801105e:	6863      	ldr	r3, [r4, #4]
 8011060:	2b05      	cmp	r3, #5
 8011062:	d92f      	bls.n	80110c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011064:	2800      	cmp	r0, #0
 8011066:	d03a      	beq.n	80110de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011068:	69e1      	ldr	r1, [r4, #28]
 801106a:	4630      	mov	r0, r6
 801106c:	f005 f872 	bl	8016154 <ucdr_serialize_string>
 8011070:	6863      	ldr	r3, [r4, #4]
 8011072:	2b06      	cmp	r3, #6
 8011074:	d926      	bls.n	80110c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011076:	b390      	cbz	r0, 80110de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011078:	6a21      	ldr	r1, [r4, #32]
 801107a:	4630      	mov	r0, r6
 801107c:	f005 f86a 	bl	8016154 <ucdr_serialize_string>
 8011080:	6863      	ldr	r3, [r4, #4]
 8011082:	2b07      	cmp	r3, #7
 8011084:	d91e      	bls.n	80110c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011086:	b350      	cbz	r0, 80110de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011088:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801108a:	4630      	mov	r0, r6
 801108c:	f005 f862 	bl	8016154 <ucdr_serialize_string>
 8011090:	6863      	ldr	r3, [r4, #4]
 8011092:	2b08      	cmp	r3, #8
 8011094:	d916      	bls.n	80110c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011096:	b310      	cbz	r0, 80110de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011098:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801109a:	4630      	mov	r0, r6
 801109c:	f005 f85a 	bl	8016154 <ucdr_serialize_string>
 80110a0:	6863      	ldr	r3, [r4, #4]
 80110a2:	2b09      	cmp	r3, #9
 80110a4:	d90e      	bls.n	80110c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80110a6:	b1d0      	cbz	r0, 80110de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80110a8:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80110ac:	2709      	movs	r7, #9
 80110ae:	e000      	b.n	80110b2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80110b0:	b1a8      	cbz	r0, 80110de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80110b2:	f858 1b04 	ldr.w	r1, [r8], #4
 80110b6:	4630      	mov	r0, r6
 80110b8:	f005 f84c 	bl	8016154 <ucdr_serialize_string>
 80110bc:	6862      	ldr	r2, [r4, #4]
 80110be:	3701      	adds	r7, #1
 80110c0:	4297      	cmp	r7, r2
 80110c2:	d3f5      	bcc.n	80110b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80110c4:	4005      	ands	r5, r0
 80110c6:	b2ed      	uxtb	r5, r5
 80110c8:	e78a      	b.n	8010fe0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80110ca:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80110cc:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80110d0:	4630      	mov	r0, r6
 80110d2:	f005 f813 	bl	80160fc <ucdr_serialize_sequence_uint8_t>
 80110d6:	4005      	ands	r5, r0
 80110d8:	4628      	mov	r0, r5
 80110da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110de:	2500      	movs	r5, #0
 80110e0:	e77e      	b.n	8010fe0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80110e2:	4028      	ands	r0, r5
 80110e4:	b2c5      	uxtb	r5, r0
 80110e6:	e77b      	b.n	8010fe0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

080110e8 <uxr_serialize_OBJK_Publisher_Binary>:
 80110e8:	b570      	push	{r4, r5, r6, lr}
 80110ea:	460d      	mov	r5, r1
 80110ec:	7809      	ldrb	r1, [r1, #0]
 80110ee:	4606      	mov	r6, r0
 80110f0:	f7fc f82e 	bl	800d150 <ucdr_serialize_bool>
 80110f4:	782b      	ldrb	r3, [r5, #0]
 80110f6:	4604      	mov	r4, r0
 80110f8:	b94b      	cbnz	r3, 801110e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80110fa:	7a29      	ldrb	r1, [r5, #8]
 80110fc:	4630      	mov	r0, r6
 80110fe:	f7fc f827 	bl	800d150 <ucdr_serialize_bool>
 8011102:	7a2b      	ldrb	r3, [r5, #8]
 8011104:	4004      	ands	r4, r0
 8011106:	b2e4      	uxtb	r4, r4
 8011108:	b943      	cbnz	r3, 801111c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801110a:	4620      	mov	r0, r4
 801110c:	bd70      	pop	{r4, r5, r6, pc}
 801110e:	6869      	ldr	r1, [r5, #4]
 8011110:	4630      	mov	r0, r6
 8011112:	f005 f81f 	bl	8016154 <ucdr_serialize_string>
 8011116:	4004      	ands	r4, r0
 8011118:	b2e4      	uxtb	r4, r4
 801111a:	e7ee      	b.n	80110fa <uxr_serialize_OBJK_Publisher_Binary+0x12>
 801111c:	f105 010c 	add.w	r1, r5, #12
 8011120:	4630      	mov	r0, r6
 8011122:	f7ff ff53 	bl	8010fcc <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8011126:	4004      	ands	r4, r0
 8011128:	4620      	mov	r0, r4
 801112a:	bd70      	pop	{r4, r5, r6, pc}

0801112c <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 801112c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011130:	460c      	mov	r4, r1
 8011132:	7809      	ldrb	r1, [r1, #0]
 8011134:	4606      	mov	r6, r0
 8011136:	f7fc f80b 	bl	800d150 <ucdr_serialize_bool>
 801113a:	7823      	ldrb	r3, [r4, #0]
 801113c:	4605      	mov	r5, r0
 801113e:	b96b      	cbnz	r3, 801115c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8011140:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8011144:	4630      	mov	r0, r6
 8011146:	f7fc f803 	bl	800d150 <ucdr_serialize_bool>
 801114a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801114e:	4005      	ands	r5, r0
 8011150:	b2ed      	uxtb	r5, r5
 8011152:	2b00      	cmp	r3, #0
 8011154:	d169      	bne.n	801122a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8011156:	4628      	mov	r0, r5
 8011158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801115c:	6861      	ldr	r1, [r4, #4]
 801115e:	4630      	mov	r0, r6
 8011160:	f7fc fa3a 	bl	800d5d8 <ucdr_serialize_uint32_t>
 8011164:	6863      	ldr	r3, [r4, #4]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d06b      	beq.n	8011242 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801116a:	2800      	cmp	r0, #0
 801116c:	d067      	beq.n	801123e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801116e:	68a1      	ldr	r1, [r4, #8]
 8011170:	4630      	mov	r0, r6
 8011172:	f004 ffef 	bl	8016154 <ucdr_serialize_string>
 8011176:	6863      	ldr	r3, [r4, #4]
 8011178:	2b01      	cmp	r3, #1
 801117a:	d953      	bls.n	8011224 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801117c:	2800      	cmp	r0, #0
 801117e:	d05e      	beq.n	801123e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011180:	68e1      	ldr	r1, [r4, #12]
 8011182:	4630      	mov	r0, r6
 8011184:	f004 ffe6 	bl	8016154 <ucdr_serialize_string>
 8011188:	6863      	ldr	r3, [r4, #4]
 801118a:	2b02      	cmp	r3, #2
 801118c:	d94a      	bls.n	8011224 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801118e:	2800      	cmp	r0, #0
 8011190:	d055      	beq.n	801123e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011192:	6921      	ldr	r1, [r4, #16]
 8011194:	4630      	mov	r0, r6
 8011196:	f004 ffdd 	bl	8016154 <ucdr_serialize_string>
 801119a:	6863      	ldr	r3, [r4, #4]
 801119c:	2b03      	cmp	r3, #3
 801119e:	d941      	bls.n	8011224 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80111a0:	2800      	cmp	r0, #0
 80111a2:	d04c      	beq.n	801123e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80111a4:	6961      	ldr	r1, [r4, #20]
 80111a6:	4630      	mov	r0, r6
 80111a8:	f004 ffd4 	bl	8016154 <ucdr_serialize_string>
 80111ac:	6863      	ldr	r3, [r4, #4]
 80111ae:	2b04      	cmp	r3, #4
 80111b0:	d938      	bls.n	8011224 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80111b2:	2800      	cmp	r0, #0
 80111b4:	d043      	beq.n	801123e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80111b6:	69a1      	ldr	r1, [r4, #24]
 80111b8:	4630      	mov	r0, r6
 80111ba:	f004 ffcb 	bl	8016154 <ucdr_serialize_string>
 80111be:	6863      	ldr	r3, [r4, #4]
 80111c0:	2b05      	cmp	r3, #5
 80111c2:	d92f      	bls.n	8011224 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80111c4:	2800      	cmp	r0, #0
 80111c6:	d03a      	beq.n	801123e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80111c8:	69e1      	ldr	r1, [r4, #28]
 80111ca:	4630      	mov	r0, r6
 80111cc:	f004 ffc2 	bl	8016154 <ucdr_serialize_string>
 80111d0:	6863      	ldr	r3, [r4, #4]
 80111d2:	2b06      	cmp	r3, #6
 80111d4:	d926      	bls.n	8011224 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80111d6:	b390      	cbz	r0, 801123e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80111d8:	6a21      	ldr	r1, [r4, #32]
 80111da:	4630      	mov	r0, r6
 80111dc:	f004 ffba 	bl	8016154 <ucdr_serialize_string>
 80111e0:	6863      	ldr	r3, [r4, #4]
 80111e2:	2b07      	cmp	r3, #7
 80111e4:	d91e      	bls.n	8011224 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80111e6:	b350      	cbz	r0, 801123e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80111e8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80111ea:	4630      	mov	r0, r6
 80111ec:	f004 ffb2 	bl	8016154 <ucdr_serialize_string>
 80111f0:	6863      	ldr	r3, [r4, #4]
 80111f2:	2b08      	cmp	r3, #8
 80111f4:	d916      	bls.n	8011224 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80111f6:	b310      	cbz	r0, 801123e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80111f8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80111fa:	4630      	mov	r0, r6
 80111fc:	f004 ffaa 	bl	8016154 <ucdr_serialize_string>
 8011200:	6863      	ldr	r3, [r4, #4]
 8011202:	2b09      	cmp	r3, #9
 8011204:	d90e      	bls.n	8011224 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8011206:	b1d0      	cbz	r0, 801123e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011208:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 801120c:	2709      	movs	r7, #9
 801120e:	e000      	b.n	8011212 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8011210:	b1a8      	cbz	r0, 801123e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8011212:	f858 1b04 	ldr.w	r1, [r8], #4
 8011216:	4630      	mov	r0, r6
 8011218:	f004 ff9c 	bl	8016154 <ucdr_serialize_string>
 801121c:	6862      	ldr	r2, [r4, #4]
 801121e:	3701      	adds	r7, #1
 8011220:	4297      	cmp	r7, r2
 8011222:	d3f5      	bcc.n	8011210 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8011224:	4005      	ands	r5, r0
 8011226:	b2ed      	uxtb	r5, r5
 8011228:	e78a      	b.n	8011140 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801122a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801122c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8011230:	4630      	mov	r0, r6
 8011232:	f004 ff63 	bl	80160fc <ucdr_serialize_sequence_uint8_t>
 8011236:	4005      	ands	r5, r0
 8011238:	4628      	mov	r0, r5
 801123a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801123e:	2500      	movs	r5, #0
 8011240:	e77e      	b.n	8011140 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8011242:	4028      	ands	r0, r5
 8011244:	b2c5      	uxtb	r5, r0
 8011246:	e77b      	b.n	8011140 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08011248 <uxr_serialize_OBJK_Subscriber_Binary>:
 8011248:	b570      	push	{r4, r5, r6, lr}
 801124a:	460d      	mov	r5, r1
 801124c:	7809      	ldrb	r1, [r1, #0]
 801124e:	4606      	mov	r6, r0
 8011250:	f7fb ff7e 	bl	800d150 <ucdr_serialize_bool>
 8011254:	782b      	ldrb	r3, [r5, #0]
 8011256:	4604      	mov	r4, r0
 8011258:	b94b      	cbnz	r3, 801126e <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801125a:	7a29      	ldrb	r1, [r5, #8]
 801125c:	4630      	mov	r0, r6
 801125e:	f7fb ff77 	bl	800d150 <ucdr_serialize_bool>
 8011262:	7a2b      	ldrb	r3, [r5, #8]
 8011264:	4004      	ands	r4, r0
 8011266:	b2e4      	uxtb	r4, r4
 8011268:	b943      	cbnz	r3, 801127c <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801126a:	4620      	mov	r0, r4
 801126c:	bd70      	pop	{r4, r5, r6, pc}
 801126e:	6869      	ldr	r1, [r5, #4]
 8011270:	4630      	mov	r0, r6
 8011272:	f004 ff6f 	bl	8016154 <ucdr_serialize_string>
 8011276:	4004      	ands	r4, r0
 8011278:	b2e4      	uxtb	r4, r4
 801127a:	e7ee      	b.n	801125a <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801127c:	f105 010c 	add.w	r1, r5, #12
 8011280:	4630      	mov	r0, r6
 8011282:	f7ff ff53 	bl	801112c <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8011286:	4004      	ands	r4, r0
 8011288:	4620      	mov	r0, r4
 801128a:	bd70      	pop	{r4, r5, r6, pc}

0801128c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801128c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8011290:	4688      	mov	r8, r1
 8011292:	8809      	ldrh	r1, [r1, #0]
 8011294:	4681      	mov	r9, r0
 8011296:	f7fb ffb5 	bl	800d204 <ucdr_serialize_uint16_t>
 801129a:	f898 1002 	ldrb.w	r1, [r8, #2]
 801129e:	4606      	mov	r6, r0
 80112a0:	4648      	mov	r0, r9
 80112a2:	f7fb ff55 	bl	800d150 <ucdr_serialize_bool>
 80112a6:	f898 3002 	ldrb.w	r3, [r8, #2]
 80112aa:	4006      	ands	r6, r0
 80112ac:	b2f5      	uxtb	r5, r6
 80112ae:	b9eb      	cbnz	r3, 80112ec <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 80112b0:	f898 1006 	ldrb.w	r1, [r8, #6]
 80112b4:	4648      	mov	r0, r9
 80112b6:	f7fb ff4b 	bl	800d150 <ucdr_serialize_bool>
 80112ba:	f898 3006 	ldrb.w	r3, [r8, #6]
 80112be:	4005      	ands	r5, r0
 80112c0:	bb7b      	cbnz	r3, 8011322 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80112c2:	f898 100c 	ldrb.w	r1, [r8, #12]
 80112c6:	4648      	mov	r0, r9
 80112c8:	f7fb ff42 	bl	800d150 <ucdr_serialize_bool>
 80112cc:	f898 300c 	ldrb.w	r3, [r8, #12]
 80112d0:	4005      	ands	r5, r0
 80112d2:	b9f3      	cbnz	r3, 8011312 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80112d4:	f898 1014 	ldrb.w	r1, [r8, #20]
 80112d8:	4648      	mov	r0, r9
 80112da:	f7fb ff39 	bl	800d150 <ucdr_serialize_bool>
 80112de:	f898 3014 	ldrb.w	r3, [r8, #20]
 80112e2:	4005      	ands	r5, r0
 80112e4:	b94b      	cbnz	r3, 80112fa <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80112e6:	4628      	mov	r0, r5
 80112e8:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80112ec:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80112f0:	4648      	mov	r0, r9
 80112f2:	f7fb ff87 	bl	800d204 <ucdr_serialize_uint16_t>
 80112f6:	4005      	ands	r5, r0
 80112f8:	e7da      	b.n	80112b0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80112fa:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80112fe:	f108 011c 	add.w	r1, r8, #28
 8011302:	4648      	mov	r0, r9
 8011304:	f004 fefa 	bl	80160fc <ucdr_serialize_sequence_uint8_t>
 8011308:	4028      	ands	r0, r5
 801130a:	b2c5      	uxtb	r5, r0
 801130c:	4628      	mov	r0, r5
 801130e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8011312:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8011316:	4648      	mov	r0, r9
 8011318:	f7fc f95e 	bl	800d5d8 <ucdr_serialize_uint32_t>
 801131c:	4028      	ands	r0, r5
 801131e:	b2c5      	uxtb	r5, r0
 8011320:	e7d8      	b.n	80112d4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8011322:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8011326:	4648      	mov	r0, r9
 8011328:	f7fc f956 	bl	800d5d8 <ucdr_serialize_uint32_t>
 801132c:	4028      	ands	r0, r5
 801132e:	b2c5      	uxtb	r5, r0
 8011330:	e7c7      	b.n	80112c2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8011332:	bf00      	nop

08011334 <uxr_serialize_OBJK_DataReader_Binary>:
 8011334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011336:	2202      	movs	r2, #2
 8011338:	460c      	mov	r4, r1
 801133a:	4606      	mov	r6, r0
 801133c:	f004 fdea 	bl	8015f14 <ucdr_serialize_array_uint8_t>
 8011340:	78a1      	ldrb	r1, [r4, #2]
 8011342:	4605      	mov	r5, r0
 8011344:	4630      	mov	r0, r6
 8011346:	f7fb ff03 	bl	800d150 <ucdr_serialize_bool>
 801134a:	78a3      	ldrb	r3, [r4, #2]
 801134c:	4005      	ands	r5, r0
 801134e:	b2ed      	uxtb	r5, r5
 8011350:	b90b      	cbnz	r3, 8011356 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8011352:	4628      	mov	r0, r5
 8011354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011356:	f104 0108 	add.w	r1, r4, #8
 801135a:	4630      	mov	r0, r6
 801135c:	f7ff ff96 	bl	801128c <uxr_serialize_OBJK_Endpoint_QosBinary>
 8011360:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8011364:	4607      	mov	r7, r0
 8011366:	4630      	mov	r0, r6
 8011368:	f7fb fef2 	bl	800d150 <ucdr_serialize_bool>
 801136c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8011370:	4038      	ands	r0, r7
 8011372:	b2c7      	uxtb	r7, r0
 8011374:	b95b      	cbnz	r3, 801138e <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8011376:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 801137a:	4630      	mov	r0, r6
 801137c:	f7fb fee8 	bl	800d150 <ucdr_serialize_bool>
 8011380:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8011384:	4007      	ands	r7, r0
 8011386:	b94b      	cbnz	r3, 801139c <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8011388:	403d      	ands	r5, r7
 801138a:	4628      	mov	r0, r5
 801138c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801138e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8011392:	4630      	mov	r0, r6
 8011394:	f7fc fb76 	bl	800da84 <ucdr_serialize_uint64_t>
 8011398:	4007      	ands	r7, r0
 801139a:	e7ec      	b.n	8011376 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801139c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801139e:	4630      	mov	r0, r6
 80113a0:	f004 fed8 	bl	8016154 <ucdr_serialize_string>
 80113a4:	4007      	ands	r7, r0
 80113a6:	b2ff      	uxtb	r7, r7
 80113a8:	e7ee      	b.n	8011388 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 80113aa:	bf00      	nop

080113ac <uxr_serialize_OBJK_DataWriter_Binary>:
 80113ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113ae:	2202      	movs	r2, #2
 80113b0:	460d      	mov	r5, r1
 80113b2:	4606      	mov	r6, r0
 80113b4:	f004 fdae 	bl	8015f14 <ucdr_serialize_array_uint8_t>
 80113b8:	78a9      	ldrb	r1, [r5, #2]
 80113ba:	4604      	mov	r4, r0
 80113bc:	4630      	mov	r0, r6
 80113be:	f7fb fec7 	bl	800d150 <ucdr_serialize_bool>
 80113c2:	78ab      	ldrb	r3, [r5, #2]
 80113c4:	4004      	ands	r4, r0
 80113c6:	b2e4      	uxtb	r4, r4
 80113c8:	b90b      	cbnz	r3, 80113ce <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80113ca:	4620      	mov	r0, r4
 80113cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113ce:	f105 0108 	add.w	r1, r5, #8
 80113d2:	4630      	mov	r0, r6
 80113d4:	f7ff ff5a 	bl	801128c <uxr_serialize_OBJK_Endpoint_QosBinary>
 80113d8:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 80113dc:	4607      	mov	r7, r0
 80113de:	4630      	mov	r0, r6
 80113e0:	f7fb feb6 	bl	800d150 <ucdr_serialize_bool>
 80113e4:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 80113e8:	4038      	ands	r0, r7
 80113ea:	b2c7      	uxtb	r7, r0
 80113ec:	b913      	cbnz	r3, 80113f4 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80113ee:	403c      	ands	r4, r7
 80113f0:	4620      	mov	r0, r4
 80113f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113f4:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 80113f8:	4630      	mov	r0, r6
 80113fa:	f7fc fb43 	bl	800da84 <ucdr_serialize_uint64_t>
 80113fe:	4007      	ands	r7, r0
 8011400:	e7f5      	b.n	80113ee <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8011402:	bf00      	nop

08011404 <uxr_deserialize_ObjectVariant>:
 8011404:	b570      	push	{r4, r5, r6, lr}
 8011406:	4605      	mov	r5, r0
 8011408:	460e      	mov	r6, r1
 801140a:	f7fb fee5 	bl	800d1d8 <ucdr_deserialize_uint8_t>
 801140e:	b168      	cbz	r0, 801142c <uxr_deserialize_ObjectVariant+0x28>
 8011410:	7833      	ldrb	r3, [r6, #0]
 8011412:	3b01      	subs	r3, #1
 8011414:	4604      	mov	r4, r0
 8011416:	2b0d      	cmp	r3, #13
 8011418:	d809      	bhi.n	801142e <uxr_deserialize_ObjectVariant+0x2a>
 801141a:	e8df f003 	tbb	[pc, r3]
 801141e:	0a41      	.short	0x0a41
 8011420:	0a0a2323 	.word	0x0a0a2323
 8011424:	10080a0a 	.word	0x10080a0a
 8011428:	565c1010 	.word	0x565c1010
 801142c:	2400      	movs	r4, #0
 801142e:	4620      	mov	r0, r4
 8011430:	bd70      	pop	{r4, r5, r6, pc}
 8011432:	1d31      	adds	r1, r6, #4
 8011434:	4628      	mov	r0, r5
 8011436:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801143a:	f7ff bd55 	b.w	8010ee8 <uxr_deserialize_DATAWRITER_Representation>
 801143e:	1d31      	adds	r1, r6, #4
 8011440:	4628      	mov	r0, r5
 8011442:	f7fb fec9 	bl	800d1d8 <ucdr_deserialize_uint8_t>
 8011446:	2800      	cmp	r0, #0
 8011448:	d0f0      	beq.n	801142c <uxr_deserialize_ObjectVariant+0x28>
 801144a:	7933      	ldrb	r3, [r6, #4]
 801144c:	2b01      	cmp	r3, #1
 801144e:	d001      	beq.n	8011454 <uxr_deserialize_ObjectVariant+0x50>
 8011450:	2b02      	cmp	r3, #2
 8011452:	d1ec      	bne.n	801142e <uxr_deserialize_ObjectVariant+0x2a>
 8011454:	68b1      	ldr	r1, [r6, #8]
 8011456:	4628      	mov	r0, r5
 8011458:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801145c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011460:	f004 be88 	b.w	8016174 <ucdr_deserialize_string>
 8011464:	1d31      	adds	r1, r6, #4
 8011466:	4628      	mov	r0, r5
 8011468:	f7fb feb6 	bl	800d1d8 <ucdr_deserialize_uint8_t>
 801146c:	4604      	mov	r4, r0
 801146e:	b170      	cbz	r0, 801148e <uxr_deserialize_ObjectVariant+0x8a>
 8011470:	7933      	ldrb	r3, [r6, #4]
 8011472:	2b02      	cmp	r3, #2
 8011474:	d04c      	beq.n	8011510 <uxr_deserialize_ObjectVariant+0x10c>
 8011476:	2b03      	cmp	r3, #3
 8011478:	d109      	bne.n	801148e <uxr_deserialize_ObjectVariant+0x8a>
 801147a:	f106 0308 	add.w	r3, r6, #8
 801147e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011482:	f106 010c 	add.w	r1, r6, #12
 8011486:	4628      	mov	r0, r5
 8011488:	f004 fe4a 	bl	8016120 <ucdr_deserialize_sequence_uint8_t>
 801148c:	4604      	mov	r4, r0
 801148e:	2202      	movs	r2, #2
 8011490:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8011494:	4628      	mov	r0, r5
 8011496:	f004 fda1 	bl	8015fdc <ucdr_deserialize_array_uint8_t>
 801149a:	4020      	ands	r0, r4
 801149c:	b2c4      	uxtb	r4, r0
 801149e:	e7c6      	b.n	801142e <uxr_deserialize_ObjectVariant+0x2a>
 80114a0:	1d31      	adds	r1, r6, #4
 80114a2:	4628      	mov	r0, r5
 80114a4:	f7fb fe98 	bl	800d1d8 <ucdr_deserialize_uint8_t>
 80114a8:	4604      	mov	r4, r0
 80114aa:	b130      	cbz	r0, 80114ba <uxr_deserialize_ObjectVariant+0xb6>
 80114ac:	7933      	ldrb	r3, [r6, #4]
 80114ae:	2b02      	cmp	r3, #2
 80114b0:	d036      	beq.n	8011520 <uxr_deserialize_ObjectVariant+0x11c>
 80114b2:	2b03      	cmp	r3, #3
 80114b4:	d03c      	beq.n	8011530 <uxr_deserialize_ObjectVariant+0x12c>
 80114b6:	2b01      	cmp	r3, #1
 80114b8:	d032      	beq.n	8011520 <uxr_deserialize_ObjectVariant+0x11c>
 80114ba:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80114be:	4628      	mov	r0, r5
 80114c0:	f7fc fc30 	bl	800dd24 <ucdr_deserialize_int16_t>
 80114c4:	4020      	ands	r0, r4
 80114c6:	b2c4      	uxtb	r4, r0
 80114c8:	e7b1      	b.n	801142e <uxr_deserialize_ObjectVariant+0x2a>
 80114ca:	1d31      	adds	r1, r6, #4
 80114cc:	4628      	mov	r0, r5
 80114ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80114d2:	f7ff bbbf 	b.w	8010c54 <uxr_deserialize_CLIENT_Representation>
 80114d6:	2204      	movs	r2, #4
 80114d8:	18b1      	adds	r1, r6, r2
 80114da:	4628      	mov	r0, r5
 80114dc:	f004 fd7e 	bl	8015fdc <ucdr_deserialize_array_uint8_t>
 80114e0:	2202      	movs	r2, #2
 80114e2:	f106 0108 	add.w	r1, r6, #8
 80114e6:	4604      	mov	r4, r0
 80114e8:	4628      	mov	r0, r5
 80114ea:	f004 fd77 	bl	8015fdc <ucdr_deserialize_array_uint8_t>
 80114ee:	2202      	movs	r2, #2
 80114f0:	4004      	ands	r4, r0
 80114f2:	f106 010a 	add.w	r1, r6, #10
 80114f6:	4628      	mov	r0, r5
 80114f8:	f004 fd70 	bl	8015fdc <ucdr_deserialize_array_uint8_t>
 80114fc:	b2e4      	uxtb	r4, r4
 80114fe:	4603      	mov	r3, r0
 8011500:	f106 010c 	add.w	r1, r6, #12
 8011504:	4628      	mov	r0, r5
 8011506:	401c      	ands	r4, r3
 8011508:	f7fb fe38 	bl	800d17c <ucdr_deserialize_bool>
 801150c:	4004      	ands	r4, r0
 801150e:	e78e      	b.n	801142e <uxr_deserialize_ObjectVariant+0x2a>
 8011510:	68b1      	ldr	r1, [r6, #8]
 8011512:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011516:	4628      	mov	r0, r5
 8011518:	f004 fe2c 	bl	8016174 <ucdr_deserialize_string>
 801151c:	4604      	mov	r4, r0
 801151e:	e7b6      	b.n	801148e <uxr_deserialize_ObjectVariant+0x8a>
 8011520:	68b1      	ldr	r1, [r6, #8]
 8011522:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011526:	4628      	mov	r0, r5
 8011528:	f004 fe24 	bl	8016174 <ucdr_deserialize_string>
 801152c:	4604      	mov	r4, r0
 801152e:	e7c4      	b.n	80114ba <uxr_deserialize_ObjectVariant+0xb6>
 8011530:	f106 0308 	add.w	r3, r6, #8
 8011534:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011538:	f106 010c 	add.w	r1, r6, #12
 801153c:	4628      	mov	r0, r5
 801153e:	f004 fdef 	bl	8016120 <ucdr_deserialize_sequence_uint8_t>
 8011542:	4604      	mov	r4, r0
 8011544:	e7b9      	b.n	80114ba <uxr_deserialize_ObjectVariant+0xb6>
 8011546:	bf00      	nop

08011548 <uxr_deserialize_BaseObjectRequest>:
 8011548:	b570      	push	{r4, r5, r6, lr}
 801154a:	2202      	movs	r2, #2
 801154c:	4605      	mov	r5, r0
 801154e:	460e      	mov	r6, r1
 8011550:	f004 fd44 	bl	8015fdc <ucdr_deserialize_array_uint8_t>
 8011554:	2202      	movs	r2, #2
 8011556:	4604      	mov	r4, r0
 8011558:	18b1      	adds	r1, r6, r2
 801155a:	4628      	mov	r0, r5
 801155c:	f004 fd3e 	bl	8015fdc <ucdr_deserialize_array_uint8_t>
 8011560:	4020      	ands	r0, r4
 8011562:	b2c0      	uxtb	r0, r0
 8011564:	bd70      	pop	{r4, r5, r6, pc}
 8011566:	bf00      	nop

08011568 <uxr_serialize_ActivityInfoVariant>:
 8011568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801156c:	460d      	mov	r5, r1
 801156e:	7809      	ldrb	r1, [r1, #0]
 8011570:	4607      	mov	r7, r0
 8011572:	f7fb fe1b 	bl	800d1ac <ucdr_serialize_uint8_t>
 8011576:	4681      	mov	r9, r0
 8011578:	b138      	cbz	r0, 801158a <uxr_serialize_ActivityInfoVariant+0x22>
 801157a:	782b      	ldrb	r3, [r5, #0]
 801157c:	2b06      	cmp	r3, #6
 801157e:	f000 8082 	beq.w	8011686 <uxr_serialize_ActivityInfoVariant+0x11e>
 8011582:	2b0d      	cmp	r3, #13
 8011584:	d016      	beq.n	80115b4 <uxr_serialize_ActivityInfoVariant+0x4c>
 8011586:	2b05      	cmp	r3, #5
 8011588:	d002      	beq.n	8011590 <uxr_serialize_ActivityInfoVariant+0x28>
 801158a:	4648      	mov	r0, r9
 801158c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011590:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011594:	4638      	mov	r0, r7
 8011596:	f7fc fb45 	bl	800dc24 <ucdr_serialize_int16_t>
 801159a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 801159e:	4681      	mov	r9, r0
 80115a0:	4638      	mov	r0, r7
 80115a2:	f7fc fa6f 	bl	800da84 <ucdr_serialize_uint64_t>
 80115a6:	ea09 0000 	and.w	r0, r9, r0
 80115aa:	fa5f f980 	uxtb.w	r9, r0
 80115ae:	4648      	mov	r0, r9
 80115b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115b4:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80115b8:	4638      	mov	r0, r7
 80115ba:	f7fc fb33 	bl	800dc24 <ucdr_serialize_int16_t>
 80115be:	68e9      	ldr	r1, [r5, #12]
 80115c0:	4681      	mov	r9, r0
 80115c2:	4638      	mov	r0, r7
 80115c4:	f7fc f808 	bl	800d5d8 <ucdr_serialize_uint32_t>
 80115c8:	68eb      	ldr	r3, [r5, #12]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d0eb      	beq.n	80115a6 <uxr_serialize_ActivityInfoVariant+0x3e>
 80115ce:	b320      	cbz	r0, 801161a <uxr_serialize_ActivityInfoVariant+0xb2>
 80115d0:	f105 080c 	add.w	r8, r5, #12
 80115d4:	2600      	movs	r6, #0
 80115d6:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 80115da:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 80115de:	f89a 1010 	ldrb.w	r1, [sl, #16]
 80115e2:	4638      	mov	r0, r7
 80115e4:	f7fb fde2 	bl	800d1ac <ucdr_serialize_uint8_t>
 80115e8:	2800      	cmp	r0, #0
 80115ea:	d053      	beq.n	8011694 <uxr_serialize_ActivityInfoVariant+0x12c>
 80115ec:	f89a 3010 	ldrb.w	r3, [sl, #16]
 80115f0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80115f4:	0074      	lsls	r4, r6, #1
 80115f6:	00c9      	lsls	r1, r1, #3
 80115f8:	2b03      	cmp	r3, #3
 80115fa:	d854      	bhi.n	80116a6 <uxr_serialize_ActivityInfoVariant+0x13e>
 80115fc:	e8df f003 	tbb	[pc, r3]
 8011600:	02102132 	.word	0x02102132
 8011604:	4441      	add	r1, r8
 8011606:	4638      	mov	r0, r7
 8011608:	6889      	ldr	r1, [r1, #8]
 801160a:	f004 fda3 	bl	8016154 <ucdr_serialize_string>
 801160e:	68ea      	ldr	r2, [r5, #12]
 8011610:	3601      	adds	r6, #1
 8011612:	4296      	cmp	r6, r2
 8011614:	d242      	bcs.n	801169c <uxr_serialize_ActivityInfoVariant+0x134>
 8011616:	2800      	cmp	r0, #0
 8011618:	d1dd      	bne.n	80115d6 <uxr_serialize_ActivityInfoVariant+0x6e>
 801161a:	f04f 0900 	mov.w	r9, #0
 801161e:	e7b4      	b.n	801158a <uxr_serialize_ActivityInfoVariant+0x22>
 8011620:	3108      	adds	r1, #8
 8011622:	4441      	add	r1, r8
 8011624:	2210      	movs	r2, #16
 8011626:	4638      	mov	r0, r7
 8011628:	f004 fc74 	bl	8015f14 <ucdr_serialize_array_uint8_t>
 801162c:	4434      	add	r4, r6
 801162e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8011632:	4604      	mov	r4, r0
 8011634:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011636:	4638      	mov	r0, r7
 8011638:	f7fb ffce 	bl	800d5d8 <ucdr_serialize_uint32_t>
 801163c:	4020      	ands	r0, r4
 801163e:	b2c0      	uxtb	r0, r0
 8011640:	e7e5      	b.n	801160e <uxr_serialize_ActivityInfoVariant+0xa6>
 8011642:	3108      	adds	r1, #8
 8011644:	4441      	add	r1, r8
 8011646:	2204      	movs	r2, #4
 8011648:	4638      	mov	r0, r7
 801164a:	f004 fc63 	bl	8015f14 <ucdr_serialize_array_uint8_t>
 801164e:	4434      	add	r4, r6
 8011650:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8011654:	4604      	mov	r4, r0
 8011656:	8b19      	ldrh	r1, [r3, #24]
 8011658:	4638      	mov	r0, r7
 801165a:	f7fb fdd3 	bl	800d204 <ucdr_serialize_uint16_t>
 801165e:	4020      	ands	r0, r4
 8011660:	b2c0      	uxtb	r0, r0
 8011662:	e7d4      	b.n	801160e <uxr_serialize_ActivityInfoVariant+0xa6>
 8011664:	3108      	adds	r1, #8
 8011666:	4441      	add	r1, r8
 8011668:	2202      	movs	r2, #2
 801166a:	4638      	mov	r0, r7
 801166c:	f004 fc52 	bl	8015f14 <ucdr_serialize_array_uint8_t>
 8011670:	4434      	add	r4, r6
 8011672:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8011676:	4604      	mov	r4, r0
 8011678:	7d99      	ldrb	r1, [r3, #22]
 801167a:	4638      	mov	r0, r7
 801167c:	f7fb fd96 	bl	800d1ac <ucdr_serialize_uint8_t>
 8011680:	4020      	ands	r0, r4
 8011682:	b2c0      	uxtb	r0, r0
 8011684:	e7c3      	b.n	801160e <uxr_serialize_ActivityInfoVariant+0xa6>
 8011686:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801168a:	4638      	mov	r0, r7
 801168c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011690:	f7fc bac8 	b.w	800dc24 <ucdr_serialize_int16_t>
 8011694:	68ea      	ldr	r2, [r5, #12]
 8011696:	3601      	adds	r6, #1
 8011698:	42b2      	cmp	r2, r6
 801169a:	d8be      	bhi.n	801161a <uxr_serialize_ActivityInfoVariant+0xb2>
 801169c:	ea09 0900 	and.w	r9, r9, r0
 80116a0:	fa5f f989 	uxtb.w	r9, r9
 80116a4:	e771      	b.n	801158a <uxr_serialize_ActivityInfoVariant+0x22>
 80116a6:	68eb      	ldr	r3, [r5, #12]
 80116a8:	3601      	adds	r6, #1
 80116aa:	429e      	cmp	r6, r3
 80116ac:	f10a 0a18 	add.w	sl, sl, #24
 80116b0:	d395      	bcc.n	80115de <uxr_serialize_ActivityInfoVariant+0x76>
 80116b2:	e76a      	b.n	801158a <uxr_serialize_ActivityInfoVariant+0x22>

080116b4 <uxr_deserialize_BaseObjectReply>:
 80116b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116b8:	2202      	movs	r2, #2
 80116ba:	4606      	mov	r6, r0
 80116bc:	460f      	mov	r7, r1
 80116be:	f004 fc8d 	bl	8015fdc <ucdr_deserialize_array_uint8_t>
 80116c2:	2202      	movs	r2, #2
 80116c4:	18b9      	adds	r1, r7, r2
 80116c6:	4605      	mov	r5, r0
 80116c8:	4630      	mov	r0, r6
 80116ca:	f004 fc87 	bl	8015fdc <ucdr_deserialize_array_uint8_t>
 80116ce:	1d39      	adds	r1, r7, #4
 80116d0:	4680      	mov	r8, r0
 80116d2:	4630      	mov	r0, r6
 80116d4:	f7fb fd80 	bl	800d1d8 <ucdr_deserialize_uint8_t>
 80116d8:	1d79      	adds	r1, r7, #5
 80116da:	4604      	mov	r4, r0
 80116dc:	4630      	mov	r0, r6
 80116de:	f7fb fd7b 	bl	800d1d8 <ucdr_deserialize_uint8_t>
 80116e2:	ea05 0508 	and.w	r5, r5, r8
 80116e6:	402c      	ands	r4, r5
 80116e8:	4020      	ands	r0, r4
 80116ea:	b2c0      	uxtb	r0, r0
 80116ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080116f0 <uxr_serialize_ReadSpecification>:
 80116f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116f4:	460e      	mov	r6, r1
 80116f6:	7809      	ldrb	r1, [r1, #0]
 80116f8:	4607      	mov	r7, r0
 80116fa:	f7fb fd57 	bl	800d1ac <ucdr_serialize_uint8_t>
 80116fe:	7871      	ldrb	r1, [r6, #1]
 8011700:	4604      	mov	r4, r0
 8011702:	4638      	mov	r0, r7
 8011704:	f7fb fd52 	bl	800d1ac <ucdr_serialize_uint8_t>
 8011708:	78b1      	ldrb	r1, [r6, #2]
 801170a:	4004      	ands	r4, r0
 801170c:	4638      	mov	r0, r7
 801170e:	f7fb fd1f 	bl	800d150 <ucdr_serialize_bool>
 8011712:	78b3      	ldrb	r3, [r6, #2]
 8011714:	b2e4      	uxtb	r4, r4
 8011716:	4004      	ands	r4, r0
 8011718:	b94b      	cbnz	r3, 801172e <uxr_serialize_ReadSpecification+0x3e>
 801171a:	7a31      	ldrb	r1, [r6, #8]
 801171c:	4638      	mov	r0, r7
 801171e:	f7fb fd17 	bl	800d150 <ucdr_serialize_bool>
 8011722:	7a33      	ldrb	r3, [r6, #8]
 8011724:	4004      	ands	r4, r0
 8011726:	b943      	cbnz	r3, 801173a <uxr_serialize_ReadSpecification+0x4a>
 8011728:	4620      	mov	r0, r4
 801172a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801172e:	6871      	ldr	r1, [r6, #4]
 8011730:	4638      	mov	r0, r7
 8011732:	f004 fd0f 	bl	8016154 <ucdr_serialize_string>
 8011736:	4004      	ands	r4, r0
 8011738:	e7ef      	b.n	801171a <uxr_serialize_ReadSpecification+0x2a>
 801173a:	8971      	ldrh	r1, [r6, #10]
 801173c:	4638      	mov	r0, r7
 801173e:	f7fb fd61 	bl	800d204 <ucdr_serialize_uint16_t>
 8011742:	89b1      	ldrh	r1, [r6, #12]
 8011744:	4605      	mov	r5, r0
 8011746:	4638      	mov	r0, r7
 8011748:	f7fb fd5c 	bl	800d204 <ucdr_serialize_uint16_t>
 801174c:	89f1      	ldrh	r1, [r6, #14]
 801174e:	4005      	ands	r5, r0
 8011750:	4638      	mov	r0, r7
 8011752:	f7fb fd57 	bl	800d204 <ucdr_serialize_uint16_t>
 8011756:	8a31      	ldrh	r1, [r6, #16]
 8011758:	4680      	mov	r8, r0
 801175a:	4638      	mov	r0, r7
 801175c:	f7fb fd52 	bl	800d204 <ucdr_serialize_uint16_t>
 8011760:	b2ed      	uxtb	r5, r5
 8011762:	4025      	ands	r5, r4
 8011764:	ea08 0505 	and.w	r5, r8, r5
 8011768:	ea00 0405 	and.w	r4, r0, r5
 801176c:	4620      	mov	r0, r4
 801176e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011772:	bf00      	nop

08011774 <uxr_serialize_CREATE_CLIENT_Payload>:
 8011774:	f7ff ba16 	b.w	8010ba4 <uxr_serialize_CLIENT_Representation>

08011778 <uxr_serialize_CREATE_Payload>:
 8011778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801177a:	2202      	movs	r2, #2
 801177c:	4607      	mov	r7, r0
 801177e:	460e      	mov	r6, r1
 8011780:	f004 fbc8 	bl	8015f14 <ucdr_serialize_array_uint8_t>
 8011784:	2202      	movs	r2, #2
 8011786:	18b1      	adds	r1, r6, r2
 8011788:	4605      	mov	r5, r0
 801178a:	4638      	mov	r0, r7
 801178c:	f004 fbc2 	bl	8015f14 <ucdr_serialize_array_uint8_t>
 8011790:	7931      	ldrb	r1, [r6, #4]
 8011792:	4604      	mov	r4, r0
 8011794:	4638      	mov	r0, r7
 8011796:	f7fb fd09 	bl	800d1ac <ucdr_serialize_uint8_t>
 801179a:	b170      	cbz	r0, 80117ba <uxr_serialize_CREATE_Payload+0x42>
 801179c:	7933      	ldrb	r3, [r6, #4]
 801179e:	402c      	ands	r4, r5
 80117a0:	3b01      	subs	r3, #1
 80117a2:	b2e4      	uxtb	r4, r4
 80117a4:	2b0d      	cmp	r3, #13
 80117a6:	d809      	bhi.n	80117bc <uxr_serialize_CREATE_Payload+0x44>
 80117a8:	e8df f003 	tbb	[pc, r3]
 80117ac:	23230a4c 	.word	0x23230a4c
 80117b0:	0a0a0a0a 	.word	0x0a0a0a0a
 80117b4:	12121208 	.word	0x12121208
 80117b8:	3e45      	.short	0x3e45
 80117ba:	2400      	movs	r4, #0
 80117bc:	4620      	mov	r0, r4
 80117be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117c0:	f106 0108 	add.w	r1, r6, #8
 80117c4:	4638      	mov	r0, r7
 80117c6:	f7ff faf3 	bl	8010db0 <uxr_serialize_DATAWRITER_Representation>
 80117ca:	4004      	ands	r4, r0
 80117cc:	4620      	mov	r0, r4
 80117ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117d0:	7a31      	ldrb	r1, [r6, #8]
 80117d2:	4638      	mov	r0, r7
 80117d4:	f7fb fcea 	bl	800d1ac <ucdr_serialize_uint8_t>
 80117d8:	2800      	cmp	r0, #0
 80117da:	d0ee      	beq.n	80117ba <uxr_serialize_CREATE_Payload+0x42>
 80117dc:	7a33      	ldrb	r3, [r6, #8]
 80117de:	2b01      	cmp	r3, #1
 80117e0:	d001      	beq.n	80117e6 <uxr_serialize_CREATE_Payload+0x6e>
 80117e2:	2b02      	cmp	r3, #2
 80117e4:	d1ea      	bne.n	80117bc <uxr_serialize_CREATE_Payload+0x44>
 80117e6:	68f1      	ldr	r1, [r6, #12]
 80117e8:	4638      	mov	r0, r7
 80117ea:	f004 fcb3 	bl	8016154 <ucdr_serialize_string>
 80117ee:	4004      	ands	r4, r0
 80117f0:	e7e4      	b.n	80117bc <uxr_serialize_CREATE_Payload+0x44>
 80117f2:	7a31      	ldrb	r1, [r6, #8]
 80117f4:	4638      	mov	r0, r7
 80117f6:	f7fb fcd9 	bl	800d1ac <ucdr_serialize_uint8_t>
 80117fa:	4605      	mov	r5, r0
 80117fc:	b158      	cbz	r0, 8011816 <uxr_serialize_CREATE_Payload+0x9e>
 80117fe:	7a33      	ldrb	r3, [r6, #8]
 8011800:	2b02      	cmp	r3, #2
 8011802:	d034      	beq.n	801186e <uxr_serialize_CREATE_Payload+0xf6>
 8011804:	2b03      	cmp	r3, #3
 8011806:	d106      	bne.n	8011816 <uxr_serialize_CREATE_Payload+0x9e>
 8011808:	68f2      	ldr	r2, [r6, #12]
 801180a:	f106 0110 	add.w	r1, r6, #16
 801180e:	4638      	mov	r0, r7
 8011810:	f004 fc74 	bl	80160fc <ucdr_serialize_sequence_uint8_t>
 8011814:	4605      	mov	r5, r0
 8011816:	2202      	movs	r2, #2
 8011818:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 801181c:	4638      	mov	r0, r7
 801181e:	f004 fb79 	bl	8015f14 <ucdr_serialize_array_uint8_t>
 8011822:	4028      	ands	r0, r5
 8011824:	4004      	ands	r4, r0
 8011826:	e7c9      	b.n	80117bc <uxr_serialize_CREATE_Payload+0x44>
 8011828:	f106 0108 	add.w	r1, r6, #8
 801182c:	4638      	mov	r0, r7
 801182e:	f7ff f9b9 	bl	8010ba4 <uxr_serialize_CLIENT_Representation>
 8011832:	4004      	ands	r4, r0
 8011834:	e7c2      	b.n	80117bc <uxr_serialize_CREATE_Payload+0x44>
 8011836:	f106 0108 	add.w	r1, r6, #8
 801183a:	4638      	mov	r0, r7
 801183c:	f7ff fa6e 	bl	8010d1c <uxr_serialize_AGENT_Representation>
 8011840:	4004      	ands	r4, r0
 8011842:	e7bb      	b.n	80117bc <uxr_serialize_CREATE_Payload+0x44>
 8011844:	7a31      	ldrb	r1, [r6, #8]
 8011846:	4638      	mov	r0, r7
 8011848:	f7fb fcb0 	bl	800d1ac <ucdr_serialize_uint8_t>
 801184c:	4605      	mov	r5, r0
 801184e:	b130      	cbz	r0, 801185e <uxr_serialize_CREATE_Payload+0xe6>
 8011850:	7a33      	ldrb	r3, [r6, #8]
 8011852:	2b02      	cmp	r3, #2
 8011854:	d011      	beq.n	801187a <uxr_serialize_CREATE_Payload+0x102>
 8011856:	2b03      	cmp	r3, #3
 8011858:	d015      	beq.n	8011886 <uxr_serialize_CREATE_Payload+0x10e>
 801185a:	2b01      	cmp	r3, #1
 801185c:	d00d      	beq.n	801187a <uxr_serialize_CREATE_Payload+0x102>
 801185e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8011862:	4638      	mov	r0, r7
 8011864:	f7fc f9de 	bl	800dc24 <ucdr_serialize_int16_t>
 8011868:	4028      	ands	r0, r5
 801186a:	4004      	ands	r4, r0
 801186c:	e7a6      	b.n	80117bc <uxr_serialize_CREATE_Payload+0x44>
 801186e:	68f1      	ldr	r1, [r6, #12]
 8011870:	4638      	mov	r0, r7
 8011872:	f004 fc6f 	bl	8016154 <ucdr_serialize_string>
 8011876:	4605      	mov	r5, r0
 8011878:	e7cd      	b.n	8011816 <uxr_serialize_CREATE_Payload+0x9e>
 801187a:	68f1      	ldr	r1, [r6, #12]
 801187c:	4638      	mov	r0, r7
 801187e:	f004 fc69 	bl	8016154 <ucdr_serialize_string>
 8011882:	4605      	mov	r5, r0
 8011884:	e7eb      	b.n	801185e <uxr_serialize_CREATE_Payload+0xe6>
 8011886:	68f2      	ldr	r2, [r6, #12]
 8011888:	f106 0110 	add.w	r1, r6, #16
 801188c:	4638      	mov	r0, r7
 801188e:	f004 fc35 	bl	80160fc <ucdr_serialize_sequence_uint8_t>
 8011892:	4605      	mov	r5, r0
 8011894:	e7e3      	b.n	801185e <uxr_serialize_CREATE_Payload+0xe6>
 8011896:	bf00      	nop

08011898 <uxr_deserialize_GET_INFO_Payload>:
 8011898:	b570      	push	{r4, r5, r6, lr}
 801189a:	2202      	movs	r2, #2
 801189c:	4605      	mov	r5, r0
 801189e:	460e      	mov	r6, r1
 80118a0:	f004 fb9c 	bl	8015fdc <ucdr_deserialize_array_uint8_t>
 80118a4:	2202      	movs	r2, #2
 80118a6:	18b1      	adds	r1, r6, r2
 80118a8:	4604      	mov	r4, r0
 80118aa:	4628      	mov	r0, r5
 80118ac:	f004 fb96 	bl	8015fdc <ucdr_deserialize_array_uint8_t>
 80118b0:	1d31      	adds	r1, r6, #4
 80118b2:	4004      	ands	r4, r0
 80118b4:	4628      	mov	r0, r5
 80118b6:	f7fb ffbf 	bl	800d838 <ucdr_deserialize_uint32_t>
 80118ba:	b2e4      	uxtb	r4, r4
 80118bc:	4020      	ands	r0, r4
 80118be:	bd70      	pop	{r4, r5, r6, pc}

080118c0 <uxr_serialize_DELETE_Payload>:
 80118c0:	b570      	push	{r4, r5, r6, lr}
 80118c2:	2202      	movs	r2, #2
 80118c4:	4605      	mov	r5, r0
 80118c6:	460e      	mov	r6, r1
 80118c8:	f004 fb24 	bl	8015f14 <ucdr_serialize_array_uint8_t>
 80118cc:	2202      	movs	r2, #2
 80118ce:	4604      	mov	r4, r0
 80118d0:	18b1      	adds	r1, r6, r2
 80118d2:	4628      	mov	r0, r5
 80118d4:	f004 fb1e 	bl	8015f14 <ucdr_serialize_array_uint8_t>
 80118d8:	4020      	ands	r0, r4
 80118da:	b2c0      	uxtb	r0, r0
 80118dc:	bd70      	pop	{r4, r5, r6, pc}
 80118de:	bf00      	nop

080118e0 <uxr_deserialize_STATUS_AGENT_Payload>:
 80118e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118e4:	4605      	mov	r5, r0
 80118e6:	460e      	mov	r6, r1
 80118e8:	f7fb fc76 	bl	800d1d8 <ucdr_deserialize_uint8_t>
 80118ec:	1c71      	adds	r1, r6, #1
 80118ee:	4604      	mov	r4, r0
 80118f0:	4628      	mov	r0, r5
 80118f2:	f7fb fc71 	bl	800d1d8 <ucdr_deserialize_uint8_t>
 80118f6:	2204      	movs	r2, #4
 80118f8:	18b1      	adds	r1, r6, r2
 80118fa:	4680      	mov	r8, r0
 80118fc:	4628      	mov	r0, r5
 80118fe:	f004 fb6d 	bl	8015fdc <ucdr_deserialize_array_uint8_t>
 8011902:	f106 0108 	add.w	r1, r6, #8
 8011906:	4607      	mov	r7, r0
 8011908:	2202      	movs	r2, #2
 801190a:	4628      	mov	r0, r5
 801190c:	f004 fb66 	bl	8015fdc <ucdr_deserialize_array_uint8_t>
 8011910:	ea04 0308 	and.w	r3, r4, r8
 8011914:	b2db      	uxtb	r3, r3
 8011916:	ea03 0407 	and.w	r4, r3, r7
 801191a:	2202      	movs	r2, #2
 801191c:	4607      	mov	r7, r0
 801191e:	f106 010a 	add.w	r1, r6, #10
 8011922:	4628      	mov	r0, r5
 8011924:	f004 fb5a 	bl	8015fdc <ucdr_deserialize_array_uint8_t>
 8011928:	f106 010c 	add.w	r1, r6, #12
 801192c:	4603      	mov	r3, r0
 801192e:	4628      	mov	r0, r5
 8011930:	461d      	mov	r5, r3
 8011932:	f7fb fc23 	bl	800d17c <ucdr_deserialize_bool>
 8011936:	403c      	ands	r4, r7
 8011938:	4025      	ands	r5, r4
 801193a:	4028      	ands	r0, r5
 801193c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011940 <uxr_deserialize_STATUS_Payload>:
 8011940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011944:	2202      	movs	r2, #2
 8011946:	4606      	mov	r6, r0
 8011948:	460f      	mov	r7, r1
 801194a:	f004 fb47 	bl	8015fdc <ucdr_deserialize_array_uint8_t>
 801194e:	2202      	movs	r2, #2
 8011950:	18b9      	adds	r1, r7, r2
 8011952:	4605      	mov	r5, r0
 8011954:	4630      	mov	r0, r6
 8011956:	f004 fb41 	bl	8015fdc <ucdr_deserialize_array_uint8_t>
 801195a:	1d39      	adds	r1, r7, #4
 801195c:	4680      	mov	r8, r0
 801195e:	4630      	mov	r0, r6
 8011960:	f7fb fc3a 	bl	800d1d8 <ucdr_deserialize_uint8_t>
 8011964:	1d79      	adds	r1, r7, #5
 8011966:	4604      	mov	r4, r0
 8011968:	4630      	mov	r0, r6
 801196a:	f7fb fc35 	bl	800d1d8 <ucdr_deserialize_uint8_t>
 801196e:	ea05 0508 	and.w	r5, r5, r8
 8011972:	402c      	ands	r4, r5
 8011974:	4020      	ands	r0, r4
 8011976:	b2c0      	uxtb	r0, r0
 8011978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801197c <uxr_serialize_INFO_Payload>:
 801197c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011980:	2202      	movs	r2, #2
 8011982:	460c      	mov	r4, r1
 8011984:	4605      	mov	r5, r0
 8011986:	f004 fac5 	bl	8015f14 <ucdr_serialize_array_uint8_t>
 801198a:	2202      	movs	r2, #2
 801198c:	18a1      	adds	r1, r4, r2
 801198e:	4680      	mov	r8, r0
 8011990:	4628      	mov	r0, r5
 8011992:	f004 fabf 	bl	8015f14 <ucdr_serialize_array_uint8_t>
 8011996:	7921      	ldrb	r1, [r4, #4]
 8011998:	4607      	mov	r7, r0
 801199a:	4628      	mov	r0, r5
 801199c:	f7fb fc06 	bl	800d1ac <ucdr_serialize_uint8_t>
 80119a0:	7961      	ldrb	r1, [r4, #5]
 80119a2:	4606      	mov	r6, r0
 80119a4:	4628      	mov	r0, r5
 80119a6:	f7fb fc01 	bl	800d1ac <ucdr_serialize_uint8_t>
 80119aa:	ea08 0807 	and.w	r8, r8, r7
 80119ae:	ea06 0608 	and.w	r6, r6, r8
 80119b2:	4006      	ands	r6, r0
 80119b4:	7a21      	ldrb	r1, [r4, #8]
 80119b6:	4628      	mov	r0, r5
 80119b8:	f7fb fbca 	bl	800d150 <ucdr_serialize_bool>
 80119bc:	7a23      	ldrb	r3, [r4, #8]
 80119be:	b2f7      	uxtb	r7, r6
 80119c0:	4606      	mov	r6, r0
 80119c2:	b96b      	cbnz	r3, 80119e0 <uxr_serialize_INFO_Payload+0x64>
 80119c4:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 80119c8:	4628      	mov	r0, r5
 80119ca:	f7fb fbc1 	bl	800d150 <ucdr_serialize_bool>
 80119ce:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 80119d2:	4030      	ands	r0, r6
 80119d4:	b2c6      	uxtb	r6, r0
 80119d6:	b983      	cbnz	r3, 80119fa <uxr_serialize_INFO_Payload+0x7e>
 80119d8:	ea06 0007 	and.w	r0, r6, r7
 80119dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119e0:	7b21      	ldrb	r1, [r4, #12]
 80119e2:	4628      	mov	r0, r5
 80119e4:	f7fb fbe2 	bl	800d1ac <ucdr_serialize_uint8_t>
 80119e8:	b188      	cbz	r0, 8011a0e <uxr_serialize_INFO_Payload+0x92>
 80119ea:	f104 010c 	add.w	r1, r4, #12
 80119ee:	4628      	mov	r0, r5
 80119f0:	f7ff fa06 	bl	8010e00 <uxr_serialize_ObjectVariant.part.0>
 80119f4:	4030      	ands	r0, r6
 80119f6:	b2c6      	uxtb	r6, r0
 80119f8:	e7e4      	b.n	80119c4 <uxr_serialize_INFO_Payload+0x48>
 80119fa:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 80119fe:	4628      	mov	r0, r5
 8011a00:	f7ff fdb2 	bl	8011568 <uxr_serialize_ActivityInfoVariant>
 8011a04:	4006      	ands	r6, r0
 8011a06:	ea06 0007 	and.w	r0, r6, r7
 8011a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a0e:	4606      	mov	r6, r0
 8011a10:	e7d8      	b.n	80119c4 <uxr_serialize_INFO_Payload+0x48>
 8011a12:	bf00      	nop

08011a14 <uxr_serialize_READ_DATA_Payload>:
 8011a14:	b570      	push	{r4, r5, r6, lr}
 8011a16:	2202      	movs	r2, #2
 8011a18:	4605      	mov	r5, r0
 8011a1a:	460e      	mov	r6, r1
 8011a1c:	f004 fa7a 	bl	8015f14 <ucdr_serialize_array_uint8_t>
 8011a20:	2202      	movs	r2, #2
 8011a22:	18b1      	adds	r1, r6, r2
 8011a24:	4604      	mov	r4, r0
 8011a26:	4628      	mov	r0, r5
 8011a28:	f004 fa74 	bl	8015f14 <ucdr_serialize_array_uint8_t>
 8011a2c:	1d31      	adds	r1, r6, #4
 8011a2e:	4004      	ands	r4, r0
 8011a30:	4628      	mov	r0, r5
 8011a32:	f7ff fe5d 	bl	80116f0 <uxr_serialize_ReadSpecification>
 8011a36:	b2e4      	uxtb	r4, r4
 8011a38:	4020      	ands	r0, r4
 8011a3a:	bd70      	pop	{r4, r5, r6, pc}

08011a3c <uxr_serialize_WRITE_DATA_Payload_Data>:
 8011a3c:	b570      	push	{r4, r5, r6, lr}
 8011a3e:	2202      	movs	r2, #2
 8011a40:	4605      	mov	r5, r0
 8011a42:	460e      	mov	r6, r1
 8011a44:	f004 fa66 	bl	8015f14 <ucdr_serialize_array_uint8_t>
 8011a48:	2202      	movs	r2, #2
 8011a4a:	4604      	mov	r4, r0
 8011a4c:	18b1      	adds	r1, r6, r2
 8011a4e:	4628      	mov	r0, r5
 8011a50:	f004 fa60 	bl	8015f14 <ucdr_serialize_array_uint8_t>
 8011a54:	4020      	ands	r0, r4
 8011a56:	b2c0      	uxtb	r0, r0
 8011a58:	bd70      	pop	{r4, r5, r6, pc}
 8011a5a:	bf00      	nop

08011a5c <uxr_serialize_ACKNACK_Payload>:
 8011a5c:	b570      	push	{r4, r5, r6, lr}
 8011a5e:	460c      	mov	r4, r1
 8011a60:	460e      	mov	r6, r1
 8011a62:	f834 1b02 	ldrh.w	r1, [r4], #2
 8011a66:	4605      	mov	r5, r0
 8011a68:	f7fb fbcc 	bl	800d204 <ucdr_serialize_uint16_t>
 8011a6c:	2202      	movs	r2, #2
 8011a6e:	4621      	mov	r1, r4
 8011a70:	4604      	mov	r4, r0
 8011a72:	4628      	mov	r0, r5
 8011a74:	f004 fa4e 	bl	8015f14 <ucdr_serialize_array_uint8_t>
 8011a78:	7931      	ldrb	r1, [r6, #4]
 8011a7a:	4004      	ands	r4, r0
 8011a7c:	4628      	mov	r0, r5
 8011a7e:	f7fb fb95 	bl	800d1ac <ucdr_serialize_uint8_t>
 8011a82:	b2e4      	uxtb	r4, r4
 8011a84:	4020      	ands	r0, r4
 8011a86:	bd70      	pop	{r4, r5, r6, pc}

08011a88 <uxr_deserialize_ACKNACK_Payload>:
 8011a88:	b570      	push	{r4, r5, r6, lr}
 8011a8a:	4605      	mov	r5, r0
 8011a8c:	460e      	mov	r6, r1
 8011a8e:	f7fb fcb9 	bl	800d404 <ucdr_deserialize_uint16_t>
 8011a92:	2202      	movs	r2, #2
 8011a94:	18b1      	adds	r1, r6, r2
 8011a96:	4604      	mov	r4, r0
 8011a98:	4628      	mov	r0, r5
 8011a9a:	f004 fa9f 	bl	8015fdc <ucdr_deserialize_array_uint8_t>
 8011a9e:	1d31      	adds	r1, r6, #4
 8011aa0:	4004      	ands	r4, r0
 8011aa2:	4628      	mov	r0, r5
 8011aa4:	f7fb fb98 	bl	800d1d8 <ucdr_deserialize_uint8_t>
 8011aa8:	b2e4      	uxtb	r4, r4
 8011aaa:	4020      	ands	r0, r4
 8011aac:	bd70      	pop	{r4, r5, r6, pc}
 8011aae:	bf00      	nop

08011ab0 <uxr_serialize_HEARTBEAT_Payload>:
 8011ab0:	b570      	push	{r4, r5, r6, lr}
 8011ab2:	460d      	mov	r5, r1
 8011ab4:	8809      	ldrh	r1, [r1, #0]
 8011ab6:	4606      	mov	r6, r0
 8011ab8:	f7fb fba4 	bl	800d204 <ucdr_serialize_uint16_t>
 8011abc:	8869      	ldrh	r1, [r5, #2]
 8011abe:	4604      	mov	r4, r0
 8011ac0:	4630      	mov	r0, r6
 8011ac2:	f7fb fb9f 	bl	800d204 <ucdr_serialize_uint16_t>
 8011ac6:	7929      	ldrb	r1, [r5, #4]
 8011ac8:	4004      	ands	r4, r0
 8011aca:	4630      	mov	r0, r6
 8011acc:	f7fb fb6e 	bl	800d1ac <ucdr_serialize_uint8_t>
 8011ad0:	b2e4      	uxtb	r4, r4
 8011ad2:	4020      	ands	r0, r4
 8011ad4:	bd70      	pop	{r4, r5, r6, pc}
 8011ad6:	bf00      	nop

08011ad8 <uxr_deserialize_HEARTBEAT_Payload>:
 8011ad8:	b570      	push	{r4, r5, r6, lr}
 8011ada:	4605      	mov	r5, r0
 8011adc:	460e      	mov	r6, r1
 8011ade:	f7fb fc91 	bl	800d404 <ucdr_deserialize_uint16_t>
 8011ae2:	1cb1      	adds	r1, r6, #2
 8011ae4:	4604      	mov	r4, r0
 8011ae6:	4628      	mov	r0, r5
 8011ae8:	f7fb fc8c 	bl	800d404 <ucdr_deserialize_uint16_t>
 8011aec:	1d31      	adds	r1, r6, #4
 8011aee:	4004      	ands	r4, r0
 8011af0:	4628      	mov	r0, r5
 8011af2:	f7fb fb71 	bl	800d1d8 <ucdr_deserialize_uint8_t>
 8011af6:	b2e4      	uxtb	r4, r4
 8011af8:	4020      	ands	r0, r4
 8011afa:	bd70      	pop	{r4, r5, r6, pc}

08011afc <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8011afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b00:	4605      	mov	r5, r0
 8011b02:	460e      	mov	r6, r1
 8011b04:	f7fc fa1a 	bl	800df3c <ucdr_deserialize_int32_t>
 8011b08:	1d31      	adds	r1, r6, #4
 8011b0a:	4607      	mov	r7, r0
 8011b0c:	4628      	mov	r0, r5
 8011b0e:	f7fb fe93 	bl	800d838 <ucdr_deserialize_uint32_t>
 8011b12:	f106 0108 	add.w	r1, r6, #8
 8011b16:	4680      	mov	r8, r0
 8011b18:	4628      	mov	r0, r5
 8011b1a:	f7fc fa0f 	bl	800df3c <ucdr_deserialize_int32_t>
 8011b1e:	f106 010c 	add.w	r1, r6, #12
 8011b22:	4604      	mov	r4, r0
 8011b24:	4628      	mov	r0, r5
 8011b26:	f7fb fe87 	bl	800d838 <ucdr_deserialize_uint32_t>
 8011b2a:	ea07 0708 	and.w	r7, r7, r8
 8011b2e:	403c      	ands	r4, r7
 8011b30:	f106 0110 	add.w	r1, r6, #16
 8011b34:	4004      	ands	r4, r0
 8011b36:	4628      	mov	r0, r5
 8011b38:	f7fc fa00 	bl	800df3c <ucdr_deserialize_int32_t>
 8011b3c:	f106 0114 	add.w	r1, r6, #20
 8011b40:	4607      	mov	r7, r0
 8011b42:	4628      	mov	r0, r5
 8011b44:	f7fb fe78 	bl	800d838 <ucdr_deserialize_uint32_t>
 8011b48:	b2e4      	uxtb	r4, r4
 8011b4a:	403c      	ands	r4, r7
 8011b4c:	4020      	ands	r0, r4
 8011b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b52:	bf00      	nop

08011b54 <uxr_serialize_SampleIdentity>:
 8011b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b58:	220c      	movs	r2, #12
 8011b5a:	4604      	mov	r4, r0
 8011b5c:	460d      	mov	r5, r1
 8011b5e:	f004 f9d9 	bl	8015f14 <ucdr_serialize_array_uint8_t>
 8011b62:	2203      	movs	r2, #3
 8011b64:	f105 010c 	add.w	r1, r5, #12
 8011b68:	4607      	mov	r7, r0
 8011b6a:	4620      	mov	r0, r4
 8011b6c:	f004 f9d2 	bl	8015f14 <ucdr_serialize_array_uint8_t>
 8011b70:	7be9      	ldrb	r1, [r5, #15]
 8011b72:	4680      	mov	r8, r0
 8011b74:	4620      	mov	r0, r4
 8011b76:	f7fb fb19 	bl	800d1ac <ucdr_serialize_uint8_t>
 8011b7a:	6929      	ldr	r1, [r5, #16]
 8011b7c:	4606      	mov	r6, r0
 8011b7e:	4620      	mov	r0, r4
 8011b80:	f7fc f944 	bl	800de0c <ucdr_serialize_int32_t>
 8011b84:	6969      	ldr	r1, [r5, #20]
 8011b86:	4603      	mov	r3, r0
 8011b88:	4620      	mov	r0, r4
 8011b8a:	ea07 0708 	and.w	r7, r7, r8
 8011b8e:	461c      	mov	r4, r3
 8011b90:	f7fb fd22 	bl	800d5d8 <ucdr_serialize_uint32_t>
 8011b94:	403e      	ands	r6, r7
 8011b96:	4034      	ands	r4, r6
 8011b98:	4020      	ands	r0, r4
 8011b9a:	b2c0      	uxtb	r0, r0
 8011b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011ba0 <uxr_deserialize_SampleIdentity>:
 8011ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ba4:	220c      	movs	r2, #12
 8011ba6:	4604      	mov	r4, r0
 8011ba8:	460d      	mov	r5, r1
 8011baa:	f004 fa17 	bl	8015fdc <ucdr_deserialize_array_uint8_t>
 8011bae:	2203      	movs	r2, #3
 8011bb0:	f105 010c 	add.w	r1, r5, #12
 8011bb4:	4607      	mov	r7, r0
 8011bb6:	4620      	mov	r0, r4
 8011bb8:	f004 fa10 	bl	8015fdc <ucdr_deserialize_array_uint8_t>
 8011bbc:	f105 010f 	add.w	r1, r5, #15
 8011bc0:	4680      	mov	r8, r0
 8011bc2:	4620      	mov	r0, r4
 8011bc4:	f7fb fb08 	bl	800d1d8 <ucdr_deserialize_uint8_t>
 8011bc8:	f105 0110 	add.w	r1, r5, #16
 8011bcc:	4606      	mov	r6, r0
 8011bce:	4620      	mov	r0, r4
 8011bd0:	f7fc f9b4 	bl	800df3c <ucdr_deserialize_int32_t>
 8011bd4:	f105 0114 	add.w	r1, r5, #20
 8011bd8:	4603      	mov	r3, r0
 8011bda:	4620      	mov	r0, r4
 8011bdc:	ea07 0708 	and.w	r7, r7, r8
 8011be0:	461c      	mov	r4, r3
 8011be2:	f7fb fe29 	bl	800d838 <ucdr_deserialize_uint32_t>
 8011be6:	403e      	ands	r6, r7
 8011be8:	4034      	ands	r4, r6
 8011bea:	4020      	ands	r0, r4
 8011bec:	b2c0      	uxtb	r0, r0
 8011bee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bf2:	bf00      	nop

08011bf4 <rcl_client_get_rmw_handle>:
 8011bf4:	b118      	cbz	r0, 8011bfe <rcl_client_get_rmw_handle+0xa>
 8011bf6:	6800      	ldr	r0, [r0, #0]
 8011bf8:	b108      	cbz	r0, 8011bfe <rcl_client_get_rmw_handle+0xa>
 8011bfa:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011bfe:	4770      	bx	lr

08011c00 <rcl_send_request>:
 8011c00:	b570      	push	{r4, r5, r6, lr}
 8011c02:	b082      	sub	sp, #8
 8011c04:	b1e8      	cbz	r0, 8011c42 <rcl_send_request+0x42>
 8011c06:	4604      	mov	r4, r0
 8011c08:	6800      	ldr	r0, [r0, #0]
 8011c0a:	b1d0      	cbz	r0, 8011c42 <rcl_send_request+0x42>
 8011c0c:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8011c10:	b1bb      	cbz	r3, 8011c42 <rcl_send_request+0x42>
 8011c12:	460e      	mov	r6, r1
 8011c14:	b1d1      	cbz	r1, 8011c4c <rcl_send_request+0x4c>
 8011c16:	4615      	mov	r5, r2
 8011c18:	b1c2      	cbz	r2, 8011c4c <rcl_send_request+0x4c>
 8011c1a:	2105      	movs	r1, #5
 8011c1c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8011c20:	f002 fe82 	bl	8014928 <__atomic_load_8>
 8011c24:	6823      	ldr	r3, [r4, #0]
 8011c26:	e9c5 0100 	strd	r0, r1, [r5]
 8011c2a:	462a      	mov	r2, r5
 8011c2c:	4631      	mov	r1, r6
 8011c2e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011c32:	f003 fd8d 	bl	8015750 <rmw_send_request>
 8011c36:	4606      	mov	r6, r0
 8011c38:	b160      	cbz	r0, 8011c54 <rcl_send_request+0x54>
 8011c3a:	2601      	movs	r6, #1
 8011c3c:	4630      	mov	r0, r6
 8011c3e:	b002      	add	sp, #8
 8011c40:	bd70      	pop	{r4, r5, r6, pc}
 8011c42:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8011c46:	4630      	mov	r0, r6
 8011c48:	b002      	add	sp, #8
 8011c4a:	bd70      	pop	{r4, r5, r6, pc}
 8011c4c:	260b      	movs	r6, #11
 8011c4e:	4630      	mov	r0, r6
 8011c50:	b002      	add	sp, #8
 8011c52:	bd70      	pop	{r4, r5, r6, pc}
 8011c54:	6820      	ldr	r0, [r4, #0]
 8011c56:	2105      	movs	r1, #5
 8011c58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011c5c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8011c60:	9100      	str	r1, [sp, #0]
 8011c62:	f002 fecd 	bl	8014a00 <__atomic_exchange_8>
 8011c66:	4630      	mov	r0, r6
 8011c68:	b002      	add	sp, #8
 8011c6a:	bd70      	pop	{r4, r5, r6, pc}
 8011c6c:	0000      	movs	r0, r0
	...

08011c70 <rcl_take_response>:
 8011c70:	b570      	push	{r4, r5, r6, lr}
 8011c72:	468e      	mov	lr, r1
 8011c74:	460c      	mov	r4, r1
 8011c76:	4616      	mov	r6, r2
 8011c78:	4605      	mov	r5, r0
 8011c7a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011c7e:	b08c      	sub	sp, #48	@ 0x30
 8011c80:	f10d 0c18 	add.w	ip, sp, #24
 8011c84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011c88:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011c8c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011c90:	b35d      	cbz	r5, 8011cea <rcl_take_response+0x7a>
 8011c92:	682b      	ldr	r3, [r5, #0]
 8011c94:	b34b      	cbz	r3, 8011cea <rcl_take_response+0x7a>
 8011c96:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011c9a:	b330      	cbz	r0, 8011cea <rcl_take_response+0x7a>
 8011c9c:	b346      	cbz	r6, 8011cf0 <rcl_take_response+0x80>
 8011c9e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8011cf8 <rcl_take_response+0x88>
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	f88d 3007 	strb.w	r3, [sp, #7]
 8011ca8:	4632      	mov	r2, r6
 8011caa:	f10d 0307 	add.w	r3, sp, #7
 8011cae:	a902      	add	r1, sp, #8
 8011cb0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011cb4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011cb8:	f003 fe52 	bl	8015960 <rmw_take_response>
 8011cbc:	4605      	mov	r5, r0
 8011cbe:	b9c8      	cbnz	r0, 8011cf4 <rcl_take_response+0x84>
 8011cc0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011cc4:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8011cc8:	2a00      	cmp	r2, #0
 8011cca:	bf08      	it	eq
 8011ccc:	461d      	moveq	r5, r3
 8011cce:	f10d 0e18 	add.w	lr, sp, #24
 8011cd2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011cd6:	46a4      	mov	ip, r4
 8011cd8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011cdc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011ce0:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011ce4:	4628      	mov	r0, r5
 8011ce6:	b00c      	add	sp, #48	@ 0x30
 8011ce8:	bd70      	pop	{r4, r5, r6, pc}
 8011cea:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8011cee:	e7ee      	b.n	8011cce <rcl_take_response+0x5e>
 8011cf0:	250b      	movs	r5, #11
 8011cf2:	e7ec      	b.n	8011cce <rcl_take_response+0x5e>
 8011cf4:	2501      	movs	r5, #1
 8011cf6:	e7ea      	b.n	8011cce <rcl_take_response+0x5e>
	...

08011d00 <rcl_client_is_valid>:
 8011d00:	b130      	cbz	r0, 8011d10 <rcl_client_is_valid+0x10>
 8011d02:	6800      	ldr	r0, [r0, #0]
 8011d04:	b120      	cbz	r0, 8011d10 <rcl_client_is_valid+0x10>
 8011d06:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011d0a:	3800      	subs	r0, #0
 8011d0c:	bf18      	it	ne
 8011d0e:	2001      	movne	r0, #1
 8011d10:	4770      	bx	lr
 8011d12:	bf00      	nop

08011d14 <rcl_convert_rmw_ret_to_rcl_ret>:
 8011d14:	280b      	cmp	r0, #11
 8011d16:	dc0d      	bgt.n	8011d34 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8011d18:	2800      	cmp	r0, #0
 8011d1a:	db09      	blt.n	8011d30 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8011d1c:	280b      	cmp	r0, #11
 8011d1e:	d807      	bhi.n	8011d30 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8011d20:	e8df f000 	tbb	[pc, r0]
 8011d24:	07060607 	.word	0x07060607
 8011d28:	06060606 	.word	0x06060606
 8011d2c:	07070606 	.word	0x07070606
 8011d30:	2001      	movs	r0, #1
 8011d32:	4770      	bx	lr
 8011d34:	28cb      	cmp	r0, #203	@ 0xcb
 8011d36:	bf18      	it	ne
 8011d38:	2001      	movne	r0, #1
 8011d3a:	4770      	bx	lr

08011d3c <rcl_get_zero_initialized_context>:
 8011d3c:	4a03      	ldr	r2, [pc, #12]	@ (8011d4c <rcl_get_zero_initialized_context+0x10>)
 8011d3e:	4603      	mov	r3, r0
 8011d40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011d44:	e883 0003 	stmia.w	r3, {r0, r1}
 8011d48:	4618      	mov	r0, r3
 8011d4a:	4770      	bx	lr
 8011d4c:	080191c0 	.word	0x080191c0

08011d50 <rcl_context_is_valid>:
 8011d50:	b118      	cbz	r0, 8011d5a <rcl_context_is_valid+0xa>
 8011d52:	6840      	ldr	r0, [r0, #4]
 8011d54:	3800      	subs	r0, #0
 8011d56:	bf18      	it	ne
 8011d58:	2001      	movne	r0, #1
 8011d5a:	4770      	bx	lr

08011d5c <__cleanup_context>:
 8011d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d60:	4606      	mov	r6, r0
 8011d62:	6800      	ldr	r0, [r0, #0]
 8011d64:	2300      	movs	r3, #0
 8011d66:	6073      	str	r3, [r6, #4]
 8011d68:	2800      	cmp	r0, #0
 8011d6a:	d049      	beq.n	8011e00 <__cleanup_context+0xa4>
 8011d6c:	6947      	ldr	r7, [r0, #20]
 8011d6e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8011d72:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8011d76:	b137      	cbz	r7, 8011d86 <__cleanup_context+0x2a>
 8011d78:	3014      	adds	r0, #20
 8011d7a:	f7f8 fd55 	bl	800a828 <rcl_init_options_fini>
 8011d7e:	4607      	mov	r7, r0
 8011d80:	2800      	cmp	r0, #0
 8011d82:	d144      	bne.n	8011e0e <__cleanup_context+0xb2>
 8011d84:	6830      	ldr	r0, [r6, #0]
 8011d86:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011d88:	b143      	cbz	r3, 8011d9c <__cleanup_context+0x40>
 8011d8a:	3028      	adds	r0, #40	@ 0x28
 8011d8c:	f7fa f980 	bl	800c090 <rmw_context_fini>
 8011d90:	b118      	cbz	r0, 8011d9a <__cleanup_context+0x3e>
 8011d92:	2f00      	cmp	r7, #0
 8011d94:	d03e      	beq.n	8011e14 <__cleanup_context+0xb8>
 8011d96:	f7f9 feb3 	bl	800bb00 <rcutils_reset_error>
 8011d9a:	6830      	ldr	r0, [r6, #0]
 8011d9c:	6a03      	ldr	r3, [r0, #32]
 8011d9e:	b1db      	cbz	r3, 8011dd8 <__cleanup_context+0x7c>
 8011da0:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8011da4:	2a01      	cmp	r2, #1
 8011da6:	f17c 0100 	sbcs.w	r1, ip, #0
 8011daa:	db11      	blt.n	8011dd0 <__cleanup_context+0x74>
 8011dac:	2400      	movs	r4, #0
 8011dae:	4625      	mov	r5, r4
 8011db0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011db4:	4649      	mov	r1, r9
 8011db6:	b1b8      	cbz	r0, 8011de8 <__cleanup_context+0x8c>
 8011db8:	47c0      	blx	r8
 8011dba:	6833      	ldr	r3, [r6, #0]
 8011dbc:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8011dc0:	3401      	adds	r4, #1
 8011dc2:	f145 0500 	adc.w	r5, r5, #0
 8011dc6:	4294      	cmp	r4, r2
 8011dc8:	eb75 010c 	sbcs.w	r1, r5, ip
 8011dcc:	6a1b      	ldr	r3, [r3, #32]
 8011dce:	dbef      	blt.n	8011db0 <__cleanup_context+0x54>
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	4649      	mov	r1, r9
 8011dd4:	47c0      	blx	r8
 8011dd6:	6830      	ldr	r0, [r6, #0]
 8011dd8:	4649      	mov	r1, r9
 8011dda:	47c0      	blx	r8
 8011ddc:	2300      	movs	r3, #0
 8011dde:	e9c6 3300 	strd	r3, r3, [r6]
 8011de2:	4638      	mov	r0, r7
 8011de4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011de8:	3401      	adds	r4, #1
 8011dea:	f145 0500 	adc.w	r5, r5, #0
 8011dee:	4294      	cmp	r4, r2
 8011df0:	eb75 010c 	sbcs.w	r1, r5, ip
 8011df4:	dbdc      	blt.n	8011db0 <__cleanup_context+0x54>
 8011df6:	4618      	mov	r0, r3
 8011df8:	4649      	mov	r1, r9
 8011dfa:	47c0      	blx	r8
 8011dfc:	6830      	ldr	r0, [r6, #0]
 8011dfe:	e7eb      	b.n	8011dd8 <__cleanup_context+0x7c>
 8011e00:	4607      	mov	r7, r0
 8011e02:	2300      	movs	r3, #0
 8011e04:	e9c6 3300 	strd	r3, r3, [r6]
 8011e08:	4638      	mov	r0, r7
 8011e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e0e:	f7f9 fe77 	bl	800bb00 <rcutils_reset_error>
 8011e12:	e7b7      	b.n	8011d84 <__cleanup_context+0x28>
 8011e14:	f7ff ff7e 	bl	8011d14 <rcl_convert_rmw_ret_to_rcl_ret>
 8011e18:	4607      	mov	r7, r0
 8011e1a:	e7bc      	b.n	8011d96 <__cleanup_context+0x3a>

08011e1c <rcl_init>:
 8011e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e20:	1e05      	subs	r5, r0, #0
 8011e22:	b09e      	sub	sp, #120	@ 0x78
 8011e24:	460e      	mov	r6, r1
 8011e26:	4690      	mov	r8, r2
 8011e28:	461f      	mov	r7, r3
 8011e2a:	f340 809c 	ble.w	8011f66 <rcl_init+0x14a>
 8011e2e:	2900      	cmp	r1, #0
 8011e30:	f000 809c 	beq.w	8011f6c <rcl_init+0x150>
 8011e34:	f1a1 0e04 	sub.w	lr, r1, #4
 8011e38:	f04f 0c00 	mov.w	ip, #0
 8011e3c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8011e40:	f10c 0c01 	add.w	ip, ip, #1
 8011e44:	2c00      	cmp	r4, #0
 8011e46:	f000 8091 	beq.w	8011f6c <rcl_init+0x150>
 8011e4a:	4565      	cmp	r5, ip
 8011e4c:	d1f6      	bne.n	8011e3c <rcl_init+0x20>
 8011e4e:	f1b8 0f00 	cmp.w	r8, #0
 8011e52:	f000 808b 	beq.w	8011f6c <rcl_init+0x150>
 8011e56:	f8d8 4000 	ldr.w	r4, [r8]
 8011e5a:	2c00      	cmp	r4, #0
 8011e5c:	f000 8086 	beq.w	8011f6c <rcl_init+0x150>
 8011e60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011e62:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8011e66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011e6a:	6823      	ldr	r3, [r4, #0]
 8011e6c:	f8cc 3000 	str.w	r3, [ip]
 8011e70:	a819      	add	r0, sp, #100	@ 0x64
 8011e72:	f7f9 fe1f 	bl	800bab4 <rcutils_allocator_is_valid>
 8011e76:	2800      	cmp	r0, #0
 8011e78:	d078      	beq.n	8011f6c <rcl_init+0x150>
 8011e7a:	2f00      	cmp	r7, #0
 8011e7c:	d076      	beq.n	8011f6c <rcl_init+0x150>
 8011e7e:	683b      	ldr	r3, [r7, #0]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d178      	bne.n	8011f76 <rcl_init+0x15a>
 8011e84:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8011e88:	2178      	movs	r1, #120	@ 0x78
 8011e8a:	2001      	movs	r0, #1
 8011e8c:	4798      	blx	r3
 8011e8e:	4604      	mov	r4, r0
 8011e90:	6038      	str	r0, [r7, #0]
 8011e92:	2800      	cmp	r0, #0
 8011e94:	f000 80b6 	beq.w	8012004 <rcl_init+0x1e8>
 8011e98:	a802      	add	r0, sp, #8
 8011e9a:	f003 f895 	bl	8014fc8 <rmw_get_zero_initialized_context>
 8011e9e:	a902      	add	r1, sp, #8
 8011ea0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8011ea4:	2250      	movs	r2, #80	@ 0x50
 8011ea6:	ac19      	add	r4, sp, #100	@ 0x64
 8011ea8:	f005 ff5f 	bl	8017d6a <memcpy>
 8011eac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011eae:	f8d7 e000 	ldr.w	lr, [r7]
 8011eb2:	46f4      	mov	ip, lr
 8011eb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011eb8:	6823      	ldr	r3, [r4, #0]
 8011eba:	f8cc 3000 	str.w	r3, [ip]
 8011ebe:	f10e 0114 	add.w	r1, lr, #20
 8011ec2:	4640      	mov	r0, r8
 8011ec4:	f7f8 fcda 	bl	800a87c <rcl_init_options_copy>
 8011ec8:	4604      	mov	r4, r0
 8011eca:	2800      	cmp	r0, #0
 8011ecc:	d144      	bne.n	8011f58 <rcl_init+0x13c>
 8011ece:	f8d7 9000 	ldr.w	r9, [r7]
 8011ed2:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8011ed6:	f8c9 0020 	str.w	r0, [r9, #32]
 8011eda:	f8c9 5018 	str.w	r5, [r9, #24]
 8011ede:	f8c9 801c 	str.w	r8, [r9, #28]
 8011ee2:	2d00      	cmp	r5, #0
 8011ee4:	d04e      	beq.n	8011f84 <rcl_init+0x168>
 8011ee6:	2e00      	cmp	r6, #0
 8011ee8:	d04c      	beq.n	8011f84 <rcl_init+0x168>
 8011eea:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8011eee:	2104      	movs	r1, #4
 8011ef0:	4628      	mov	r0, r5
 8011ef2:	4798      	blx	r3
 8011ef4:	f8c9 0020 	str.w	r0, [r9, #32]
 8011ef8:	f8d7 9000 	ldr.w	r9, [r7]
 8011efc:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8011f00:	46ca      	mov	sl, r9
 8011f02:	b343      	cbz	r3, 8011f56 <rcl_init+0x13a>
 8011f04:	2d01      	cmp	r5, #1
 8011f06:	f178 0300 	sbcs.w	r3, r8, #0
 8011f0a:	db3b      	blt.n	8011f84 <rcl_init+0x168>
 8011f0c:	2400      	movs	r4, #0
 8011f0e:	3e04      	subs	r6, #4
 8011f10:	46a1      	mov	r9, r4
 8011f12:	e00b      	b.n	8011f2c <rcl_init+0x110>
 8011f14:	6831      	ldr	r1, [r6, #0]
 8011f16:	f005 ff28 	bl	8017d6a <memcpy>
 8011f1a:	3401      	adds	r4, #1
 8011f1c:	f149 0900 	adc.w	r9, r9, #0
 8011f20:	45c8      	cmp	r8, r9
 8011f22:	bf08      	it	eq
 8011f24:	42a5      	cmpeq	r5, r4
 8011f26:	d02b      	beq.n	8011f80 <rcl_init+0x164>
 8011f28:	f8d7 a000 	ldr.w	sl, [r7]
 8011f2c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8011f30:	f7ee f980 	bl	8000234 <strlen>
 8011f34:	1c42      	adds	r2, r0, #1
 8011f36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011f38:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8011f3a:	f8da a020 	ldr.w	sl, [sl, #32]
 8011f3e:	9201      	str	r2, [sp, #4]
 8011f40:	4610      	mov	r0, r2
 8011f42:	4798      	blx	r3
 8011f44:	683b      	ldr	r3, [r7, #0]
 8011f46:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8011f4a:	6a1b      	ldr	r3, [r3, #32]
 8011f4c:	9a01      	ldr	r2, [sp, #4]
 8011f4e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8011f52:	2800      	cmp	r0, #0
 8011f54:	d1de      	bne.n	8011f14 <rcl_init+0xf8>
 8011f56:	240a      	movs	r4, #10
 8011f58:	4638      	mov	r0, r7
 8011f5a:	f7ff feff 	bl	8011d5c <__cleanup_context>
 8011f5e:	4620      	mov	r0, r4
 8011f60:	b01e      	add	sp, #120	@ 0x78
 8011f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f66:	2900      	cmp	r1, #0
 8011f68:	f43f af71 	beq.w	8011e4e <rcl_init+0x32>
 8011f6c:	240b      	movs	r4, #11
 8011f6e:	4620      	mov	r0, r4
 8011f70:	b01e      	add	sp, #120	@ 0x78
 8011f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f76:	2464      	movs	r4, #100	@ 0x64
 8011f78:	4620      	mov	r0, r4
 8011f7a:	b01e      	add	sp, #120	@ 0x78
 8011f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f80:	f8d7 9000 	ldr.w	r9, [r7]
 8011f84:	4926      	ldr	r1, [pc, #152]	@ (8012020 <rcl_init+0x204>)
 8011f86:	680b      	ldr	r3, [r1, #0]
 8011f88:	3301      	adds	r3, #1
 8011f8a:	d036      	beq.n	8011ffa <rcl_init+0x1de>
 8011f8c:	600b      	str	r3, [r1, #0]
 8011f8e:	461a      	mov	r2, r3
 8011f90:	2400      	movs	r4, #0
 8011f92:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8011f96:	607b      	str	r3, [r7, #4]
 8011f98:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8011f9a:	3301      	adds	r3, #1
 8011f9c:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8011fa0:	d034      	beq.n	801200c <rcl_init+0x1f0>
 8011fa2:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8011fa6:	b93b      	cbnz	r3, 8011fb8 <rcl_init+0x19c>
 8011fa8:	3030      	adds	r0, #48	@ 0x30
 8011faa:	f000 f83b 	bl	8012024 <rcl_get_localhost_only>
 8011fae:	4604      	mov	r4, r0
 8011fb0:	2800      	cmp	r0, #0
 8011fb2:	d1d1      	bne.n	8011f58 <rcl_init+0x13c>
 8011fb4:	683b      	ldr	r3, [r7, #0]
 8011fb6:	6958      	ldr	r0, [r3, #20]
 8011fb8:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8011fba:	aa18      	add	r2, sp, #96	@ 0x60
 8011fbc:	a917      	add	r1, sp, #92	@ 0x5c
 8011fbe:	f001 f94d 	bl	801325c <rcl_validate_enclave_name>
 8011fc2:	4604      	mov	r4, r0
 8011fc4:	2800      	cmp	r0, #0
 8011fc6:	d1c7      	bne.n	8011f58 <rcl_init+0x13c>
 8011fc8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011fca:	b9eb      	cbnz	r3, 8012008 <rcl_init+0x1ec>
 8011fcc:	6839      	ldr	r1, [r7, #0]
 8011fce:	694b      	ldr	r3, [r1, #20]
 8011fd0:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8011fd2:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8011fd6:	f000 fb3f 	bl	8012658 <rcl_get_security_options_from_environment>
 8011fda:	4604      	mov	r4, r0
 8011fdc:	2800      	cmp	r0, #0
 8011fde:	d1bb      	bne.n	8011f58 <rcl_init+0x13c>
 8011fe0:	6839      	ldr	r1, [r7, #0]
 8011fe2:	6948      	ldr	r0, [r1, #20]
 8011fe4:	3128      	adds	r1, #40	@ 0x28
 8011fe6:	3018      	adds	r0, #24
 8011fe8:	f7f9 ff1c 	bl	800be24 <rmw_init>
 8011fec:	4604      	mov	r4, r0
 8011fee:	2800      	cmp	r0, #0
 8011ff0:	d0bd      	beq.n	8011f6e <rcl_init+0x152>
 8011ff2:	f7ff fe8f 	bl	8011d14 <rcl_convert_rmw_ret_to_rcl_ret>
 8011ff6:	4604      	mov	r4, r0
 8011ff8:	e7ae      	b.n	8011f58 <rcl_init+0x13c>
 8011ffa:	2201      	movs	r2, #1
 8011ffc:	461c      	mov	r4, r3
 8011ffe:	600a      	str	r2, [r1, #0]
 8012000:	4613      	mov	r3, r2
 8012002:	e7c6      	b.n	8011f92 <rcl_init+0x176>
 8012004:	240a      	movs	r4, #10
 8012006:	e7b2      	b.n	8011f6e <rcl_init+0x152>
 8012008:	2401      	movs	r4, #1
 801200a:	e7a5      	b.n	8011f58 <rcl_init+0x13c>
 801200c:	3024      	adds	r0, #36	@ 0x24
 801200e:	f004 fe21 	bl	8016c54 <rcl_get_default_domain_id>
 8012012:	4604      	mov	r4, r0
 8012014:	2800      	cmp	r0, #0
 8012016:	d19f      	bne.n	8011f58 <rcl_init+0x13c>
 8012018:	683b      	ldr	r3, [r7, #0]
 801201a:	6958      	ldr	r0, [r3, #20]
 801201c:	e7c1      	b.n	8011fa2 <rcl_init+0x186>
 801201e:	bf00      	nop
 8012020:	2000abf0 	.word	0x2000abf0

08012024 <rcl_get_localhost_only>:
 8012024:	b510      	push	{r4, lr}
 8012026:	b082      	sub	sp, #8
 8012028:	2300      	movs	r3, #0
 801202a:	9301      	str	r3, [sp, #4]
 801202c:	b1b8      	cbz	r0, 801205e <rcl_get_localhost_only+0x3a>
 801202e:	4604      	mov	r4, r0
 8012030:	a901      	add	r1, sp, #4
 8012032:	480c      	ldr	r0, [pc, #48]	@ (8012064 <rcl_get_localhost_only+0x40>)
 8012034:	f002 fd1c 	bl	8014a70 <rcutils_get_env>
 8012038:	b110      	cbz	r0, 8012040 <rcl_get_localhost_only+0x1c>
 801203a:	2001      	movs	r0, #1
 801203c:	b002      	add	sp, #8
 801203e:	bd10      	pop	{r4, pc}
 8012040:	9b01      	ldr	r3, [sp, #4]
 8012042:	b113      	cbz	r3, 801204a <rcl_get_localhost_only+0x26>
 8012044:	781a      	ldrb	r2, [r3, #0]
 8012046:	2a31      	cmp	r2, #49	@ 0x31
 8012048:	d004      	beq.n	8012054 <rcl_get_localhost_only+0x30>
 801204a:	2302      	movs	r3, #2
 801204c:	2000      	movs	r0, #0
 801204e:	7023      	strb	r3, [r4, #0]
 8012050:	b002      	add	sp, #8
 8012052:	bd10      	pop	{r4, pc}
 8012054:	785b      	ldrb	r3, [r3, #1]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d1f7      	bne.n	801204a <rcl_get_localhost_only+0x26>
 801205a:	2301      	movs	r3, #1
 801205c:	e7f6      	b.n	801204c <rcl_get_localhost_only+0x28>
 801205e:	200b      	movs	r0, #11
 8012060:	b002      	add	sp, #8
 8012062:	bd10      	pop	{r4, pc}
 8012064:	080191c8 	.word	0x080191c8

08012068 <rcl_get_zero_initialized_node>:
 8012068:	4a03      	ldr	r2, [pc, #12]	@ (8012078 <rcl_get_zero_initialized_node+0x10>)
 801206a:	4603      	mov	r3, r0
 801206c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012070:	e883 0003 	stmia.w	r3, {r0, r1}
 8012074:	4618      	mov	r0, r3
 8012076:	4770      	bx	lr
 8012078:	080191e4 	.word	0x080191e4

0801207c <rcl_node_init>:
 801207c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012080:	b0a9      	sub	sp, #164	@ 0xa4
 8012082:	4604      	mov	r4, r0
 8012084:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8012088:	a823      	add	r0, sp, #140	@ 0x8c
 801208a:	460e      	mov	r6, r1
 801208c:	4615      	mov	r5, r2
 801208e:	461f      	mov	r7, r3
 8012090:	f005 f854 	bl	801713c <rcl_guard_condition_get_default_options>
 8012094:	f1b8 0f00 	cmp.w	r8, #0
 8012098:	f000 80e6 	beq.w	8012268 <rcl_node_init+0x1ec>
 801209c:	4640      	mov	r0, r8
 801209e:	f7f9 fd09 	bl	800bab4 <rcutils_allocator_is_valid>
 80120a2:	2800      	cmp	r0, #0
 80120a4:	f000 80e0 	beq.w	8012268 <rcl_node_init+0x1ec>
 80120a8:	2e00      	cmp	r6, #0
 80120aa:	f000 80dd 	beq.w	8012268 <rcl_node_init+0x1ec>
 80120ae:	2d00      	cmp	r5, #0
 80120b0:	f000 80da 	beq.w	8012268 <rcl_node_init+0x1ec>
 80120b4:	2c00      	cmp	r4, #0
 80120b6:	f000 80d7 	beq.w	8012268 <rcl_node_init+0x1ec>
 80120ba:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80120be:	f1b9 0f00 	cmp.w	r9, #0
 80120c2:	f040 80fd 	bne.w	80122c0 <rcl_node_init+0x244>
 80120c6:	2f00      	cmp	r7, #0
 80120c8:	f000 80ce 	beq.w	8012268 <rcl_node_init+0x1ec>
 80120cc:	4638      	mov	r0, r7
 80120ce:	f7ff fe3f 	bl	8011d50 <rcl_context_is_valid>
 80120d2:	4682      	mov	sl, r0
 80120d4:	2800      	cmp	r0, #0
 80120d6:	f000 80cd 	beq.w	8012274 <rcl_node_init+0x1f8>
 80120da:	464a      	mov	r2, r9
 80120dc:	a922      	add	r1, sp, #136	@ 0x88
 80120de:	4630      	mov	r0, r6
 80120e0:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 80120e4:	f003 f90e 	bl	8015304 <rmw_validate_node_name>
 80120e8:	4681      	mov	r9, r0
 80120ea:	2800      	cmp	r0, #0
 80120ec:	f040 80be 	bne.w	801226c <rcl_node_init+0x1f0>
 80120f0:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80120f2:	2800      	cmp	r0, #0
 80120f4:	f040 80f0 	bne.w	80122d8 <rcl_node_init+0x25c>
 80120f8:	4628      	mov	r0, r5
 80120fa:	f7ee f89b 	bl	8000234 <strlen>
 80120fe:	2800      	cmp	r0, #0
 8012100:	f040 80bb 	bne.w	801227a <rcl_node_init+0x1fe>
 8012104:	4d7c      	ldr	r5, [pc, #496]	@ (80122f8 <rcl_node_init+0x27c>)
 8012106:	a922      	add	r1, sp, #136	@ 0x88
 8012108:	2200      	movs	r2, #0
 801210a:	4628      	mov	r0, r5
 801210c:	f003 f8dc 	bl	80152c8 <rmw_validate_namespace>
 8012110:	4681      	mov	r9, r0
 8012112:	2800      	cmp	r0, #0
 8012114:	f040 80aa 	bne.w	801226c <rcl_node_init+0x1f0>
 8012118:	4682      	mov	sl, r0
 801211a:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801211c:	2800      	cmp	r0, #0
 801211e:	f040 80e0 	bne.w	80122e2 <rcl_node_init+0x266>
 8012122:	f8d8 3000 	ldr.w	r3, [r8]
 8012126:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801212a:	2078      	movs	r0, #120	@ 0x78
 801212c:	4798      	blx	r3
 801212e:	4681      	mov	r9, r0
 8012130:	6060      	str	r0, [r4, #4]
 8012132:	2800      	cmp	r0, #0
 8012134:	f000 80ca 	beq.w	80122cc <rcl_node_init+0x250>
 8012138:	2200      	movs	r2, #0
 801213a:	2300      	movs	r3, #0
 801213c:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8012140:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8012144:	a808      	add	r0, sp, #32
 8012146:	f000 f907 	bl	8012358 <rcl_node_get_default_options>
 801214a:	a908      	add	r1, sp, #32
 801214c:	4648      	mov	r0, r9
 801214e:	2268      	movs	r2, #104	@ 0x68
 8012150:	f005 fe0b 	bl	8017d6a <memcpy>
 8012154:	6861      	ldr	r1, [r4, #4]
 8012156:	6027      	str	r7, [r4, #0]
 8012158:	4640      	mov	r0, r8
 801215a:	f000 f90b 	bl	8012374 <rcl_node_options_copy>
 801215e:	2800      	cmp	r0, #0
 8012160:	d158      	bne.n	8012214 <rcl_node_init+0x198>
 8012162:	4628      	mov	r0, r5
 8012164:	f7ee f866 	bl	8000234 <strlen>
 8012168:	4428      	add	r0, r5
 801216a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801216e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8012172:	2b2f      	cmp	r3, #47	@ 0x2f
 8012174:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012178:	9300      	str	r3, [sp, #0]
 801217a:	bf0c      	ite	eq
 801217c:	4b5f      	ldreq	r3, [pc, #380]	@ (80122fc <rcl_node_init+0x280>)
 801217e:	4b60      	ldrne	r3, [pc, #384]	@ (8012300 <rcl_node_init+0x284>)
 8012180:	9302      	str	r3, [sp, #8]
 8012182:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012186:	9301      	str	r3, [sp, #4]
 8012188:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801218c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8012190:	f002 fc96 	bl	8014ac0 <rcutils_format_string_limit>
 8012194:	6823      	ldr	r3, [r4, #0]
 8012196:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 801219a:	6818      	ldr	r0, [r3, #0]
 801219c:	4631      	mov	r1, r6
 801219e:	3028      	adds	r0, #40	@ 0x28
 80121a0:	462a      	mov	r2, r5
 80121a2:	6866      	ldr	r6, [r4, #4]
 80121a4:	f7fa f820 	bl	800c1e8 <rmw_create_node>
 80121a8:	6863      	ldr	r3, [r4, #4]
 80121aa:	66b0      	str	r0, [r6, #104]	@ 0x68
 80121ac:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80121ae:	2800      	cmp	r0, #0
 80121b0:	d032      	beq.n	8012218 <rcl_node_init+0x19c>
 80121b2:	f7fa f8ad 	bl	800c310 <rmw_node_get_graph_guard_condition>
 80121b6:	4681      	mov	r9, r0
 80121b8:	b360      	cbz	r0, 8012214 <rcl_node_init+0x198>
 80121ba:	f8d8 3000 	ldr.w	r3, [r8]
 80121be:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80121c2:	6866      	ldr	r6, [r4, #4]
 80121c4:	2008      	movs	r0, #8
 80121c6:	4798      	blx	r3
 80121c8:	6863      	ldr	r3, [r4, #4]
 80121ca:	66f0      	str	r0, [r6, #108]	@ 0x6c
 80121cc:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 80121d0:	f1bb 0f00 	cmp.w	fp, #0
 80121d4:	d020      	beq.n	8012218 <rcl_node_init+0x19c>
 80121d6:	a806      	add	r0, sp, #24
 80121d8:	f004 fed4 	bl	8016f84 <rcl_get_zero_initialized_guard_condition>
 80121dc:	a806      	add	r0, sp, #24
 80121de:	c803      	ldmia	r0, {r0, r1}
 80121e0:	6863      	ldr	r3, [r4, #4]
 80121e2:	46c4      	mov	ip, r8
 80121e4:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 80121e8:	e88b 0003 	stmia.w	fp, {r0, r1}
 80121ec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80121f0:	ae23      	add	r6, sp, #140	@ 0x8c
 80121f2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80121f4:	f8dc 3000 	ldr.w	r3, [ip]
 80121f8:	6033      	str	r3, [r6, #0]
 80121fa:	ab28      	add	r3, sp, #160	@ 0xa0
 80121fc:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8012200:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8012204:	4649      	mov	r1, r9
 8012206:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012208:	463a      	mov	r2, r7
 801220a:	4670      	mov	r0, lr
 801220c:	f004 ff10 	bl	8017030 <rcl_guard_condition_init_from_rmw>
 8012210:	4681      	mov	r9, r0
 8012212:	b328      	cbz	r0, 8012260 <rcl_node_init+0x1e4>
 8012214:	6863      	ldr	r3, [r4, #4]
 8012216:	b1f3      	cbz	r3, 8012256 <rcl_node_init+0x1da>
 8012218:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801221a:	b128      	cbz	r0, 8012228 <rcl_node_init+0x1ac>
 801221c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012220:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012224:	4798      	blx	r3
 8012226:	6863      	ldr	r3, [r4, #4]
 8012228:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801222a:	b110      	cbz	r0, 8012232 <rcl_node_init+0x1b6>
 801222c:	f7f9 fff4 	bl	800c218 <rmw_destroy_node>
 8012230:	6863      	ldr	r3, [r4, #4]
 8012232:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8012234:	b148      	cbz	r0, 801224a <rcl_node_init+0x1ce>
 8012236:	f004 ff5b 	bl	80170f0 <rcl_guard_condition_fini>
 801223a:	6863      	ldr	r3, [r4, #4]
 801223c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012240:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8012242:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012246:	4798      	blx	r3
 8012248:	6863      	ldr	r3, [r4, #4]
 801224a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801224e:	4618      	mov	r0, r3
 8012250:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012254:	4798      	blx	r3
 8012256:	2300      	movs	r3, #0
 8012258:	e9c4 3300 	strd	r3, r3, [r4]
 801225c:	f04f 0901 	mov.w	r9, #1
 8012260:	f1ba 0f00 	cmp.w	sl, #0
 8012264:	d125      	bne.n	80122b2 <rcl_node_init+0x236>
 8012266:	e001      	b.n	801226c <rcl_node_init+0x1f0>
 8012268:	f04f 090b 	mov.w	r9, #11
 801226c:	4648      	mov	r0, r9
 801226e:	b029      	add	sp, #164	@ 0xa4
 8012270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012274:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8012278:	e7f8      	b.n	801226c <rcl_node_init+0x1f0>
 801227a:	782b      	ldrb	r3, [r5, #0]
 801227c:	2b2f      	cmp	r3, #47	@ 0x2f
 801227e:	f43f af42 	beq.w	8012106 <rcl_node_init+0x8a>
 8012282:	9503      	str	r5, [sp, #12]
 8012284:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8012288:	9300      	str	r3, [sp, #0]
 801228a:	4b1e      	ldr	r3, [pc, #120]	@ (8012304 <rcl_node_init+0x288>)
 801228c:	9302      	str	r3, [sp, #8]
 801228e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012292:	9301      	str	r3, [sp, #4]
 8012294:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8012298:	f002 fc12 	bl	8014ac0 <rcutils_format_string_limit>
 801229c:	4605      	mov	r5, r0
 801229e:	b340      	cbz	r0, 80122f2 <rcl_node_init+0x276>
 80122a0:	2200      	movs	r2, #0
 80122a2:	a922      	add	r1, sp, #136	@ 0x88
 80122a4:	9222      	str	r2, [sp, #136]	@ 0x88
 80122a6:	f003 f80f 	bl	80152c8 <rmw_validate_namespace>
 80122aa:	4681      	mov	r9, r0
 80122ac:	2800      	cmp	r0, #0
 80122ae:	f43f af34 	beq.w	801211a <rcl_node_init+0x9e>
 80122b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80122b6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80122ba:	4628      	mov	r0, r5
 80122bc:	4798      	blx	r3
 80122be:	e7d5      	b.n	801226c <rcl_node_init+0x1f0>
 80122c0:	f04f 0964 	mov.w	r9, #100	@ 0x64
 80122c4:	4648      	mov	r0, r9
 80122c6:	b029      	add	sp, #164	@ 0xa4
 80122c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122cc:	f04f 090a 	mov.w	r9, #10
 80122d0:	f1ba 0f00 	cmp.w	sl, #0
 80122d4:	d1ed      	bne.n	80122b2 <rcl_node_init+0x236>
 80122d6:	e7c9      	b.n	801226c <rcl_node_init+0x1f0>
 80122d8:	f003 f866 	bl	80153a8 <rmw_node_name_validation_result_string>
 80122dc:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 80122e0:	e7c4      	b.n	801226c <rcl_node_init+0x1f0>
 80122e2:	f003 f803 	bl	80152ec <rmw_namespace_validation_result_string>
 80122e6:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 80122ea:	f1ba 0f00 	cmp.w	sl, #0
 80122ee:	d1e0      	bne.n	80122b2 <rcl_node_init+0x236>
 80122f0:	e7bc      	b.n	801226c <rcl_node_init+0x1f0>
 80122f2:	f04f 090a 	mov.w	r9, #10
 80122f6:	e7b9      	b.n	801226c <rcl_node_init+0x1f0>
 80122f8:	08018e18 	.word	0x08018e18
 80122fc:	08018e64 	.word	0x08018e64
 8012300:	08018e1c 	.word	0x08018e1c
 8012304:	080191e0 	.word	0x080191e0

08012308 <rcl_node_is_valid>:
 8012308:	b130      	cbz	r0, 8012318 <rcl_node_is_valid+0x10>
 801230a:	6843      	ldr	r3, [r0, #4]
 801230c:	b123      	cbz	r3, 8012318 <rcl_node_is_valid+0x10>
 801230e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012310:	b113      	cbz	r3, 8012318 <rcl_node_is_valid+0x10>
 8012312:	6800      	ldr	r0, [r0, #0]
 8012314:	f7ff bd1c 	b.w	8011d50 <rcl_context_is_valid>
 8012318:	2000      	movs	r0, #0
 801231a:	4770      	bx	lr

0801231c <rcl_node_get_name>:
 801231c:	b120      	cbz	r0, 8012328 <rcl_node_get_name+0xc>
 801231e:	6840      	ldr	r0, [r0, #4]
 8012320:	b110      	cbz	r0, 8012328 <rcl_node_get_name+0xc>
 8012322:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8012324:	b100      	cbz	r0, 8012328 <rcl_node_get_name+0xc>
 8012326:	6880      	ldr	r0, [r0, #8]
 8012328:	4770      	bx	lr
 801232a:	bf00      	nop

0801232c <rcl_node_get_namespace>:
 801232c:	b120      	cbz	r0, 8012338 <rcl_node_get_namespace+0xc>
 801232e:	6840      	ldr	r0, [r0, #4]
 8012330:	b110      	cbz	r0, 8012338 <rcl_node_get_namespace+0xc>
 8012332:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8012334:	b100      	cbz	r0, 8012338 <rcl_node_get_namespace+0xc>
 8012336:	68c0      	ldr	r0, [r0, #12]
 8012338:	4770      	bx	lr
 801233a:	bf00      	nop

0801233c <rcl_node_get_options>:
 801233c:	b128      	cbz	r0, 801234a <rcl_node_get_options+0xe>
 801233e:	6840      	ldr	r0, [r0, #4]
 8012340:	b118      	cbz	r0, 801234a <rcl_node_get_options+0xe>
 8012342:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8012344:	2b00      	cmp	r3, #0
 8012346:	bf08      	it	eq
 8012348:	2000      	moveq	r0, #0
 801234a:	4770      	bx	lr

0801234c <rcl_node_get_rmw_handle>:
 801234c:	b110      	cbz	r0, 8012354 <rcl_node_get_rmw_handle+0x8>
 801234e:	6840      	ldr	r0, [r0, #4]
 8012350:	b100      	cbz	r0, 8012354 <rcl_node_get_rmw_handle+0x8>
 8012352:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8012354:	4770      	bx	lr
 8012356:	bf00      	nop

08012358 <rcl_node_get_default_options>:
 8012358:	b510      	push	{r4, lr}
 801235a:	2268      	movs	r2, #104	@ 0x68
 801235c:	4604      	mov	r4, r0
 801235e:	2100      	movs	r1, #0
 8012360:	f005 fc3a 	bl	8017bd8 <memset>
 8012364:	4620      	mov	r0, r4
 8012366:	f7f9 fb97 	bl	800ba98 <rcutils_get_default_allocator>
 801236a:	2301      	movs	r3, #1
 801236c:	7523      	strb	r3, [r4, #20]
 801236e:	4620      	mov	r0, r4
 8012370:	bd10      	pop	{r4, pc}
 8012372:	bf00      	nop

08012374 <rcl_node_options_copy>:
 8012374:	b1d0      	cbz	r0, 80123ac <rcl_node_options_copy+0x38>
 8012376:	b570      	push	{r4, r5, r6, lr}
 8012378:	460c      	mov	r4, r1
 801237a:	b1a9      	cbz	r1, 80123a8 <rcl_node_options_copy+0x34>
 801237c:	4288      	cmp	r0, r1
 801237e:	4684      	mov	ip, r0
 8012380:	d012      	beq.n	80123a8 <rcl_node_options_copy+0x34>
 8012382:	4605      	mov	r5, r0
 8012384:	8a86      	ldrh	r6, [r0, #20]
 8012386:	468e      	mov	lr, r1
 8012388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801238a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801238e:	682b      	ldr	r3, [r5, #0]
 8012390:	f8ce 3000 	str.w	r3, [lr]
 8012394:	f10c 0118 	add.w	r1, ip, #24
 8012398:	2250      	movs	r2, #80	@ 0x50
 801239a:	82a6      	strh	r6, [r4, #20]
 801239c:	f104 0018 	add.w	r0, r4, #24
 80123a0:	f005 fce3 	bl	8017d6a <memcpy>
 80123a4:	2000      	movs	r0, #0
 80123a6:	bd70      	pop	{r4, r5, r6, pc}
 80123a8:	200b      	movs	r0, #11
 80123aa:	bd70      	pop	{r4, r5, r6, pc}
 80123ac:	200b      	movs	r0, #11
 80123ae:	4770      	bx	lr

080123b0 <rcl_node_resolve_name>:
 80123b0:	b082      	sub	sp, #8
 80123b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123b6:	b091      	sub	sp, #68	@ 0x44
 80123b8:	ac1a      	add	r4, sp, #104	@ 0x68
 80123ba:	e884 000c 	stmia.w	r4, {r2, r3}
 80123be:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 80123c2:	2800      	cmp	r0, #0
 80123c4:	d03b      	beq.n	801243e <rcl_node_resolve_name+0x8e>
 80123c6:	460c      	mov	r4, r1
 80123c8:	4605      	mov	r5, r0
 80123ca:	f7ff ffb7 	bl	801233c <rcl_node_get_options>
 80123ce:	2800      	cmp	r0, #0
 80123d0:	d037      	beq.n	8012442 <rcl_node_resolve_name+0x92>
 80123d2:	4628      	mov	r0, r5
 80123d4:	f7ff ffa2 	bl	801231c <rcl_node_get_name>
 80123d8:	4606      	mov	r6, r0
 80123da:	4628      	mov	r0, r5
 80123dc:	f7ff ffa6 	bl	801232c <rcl_node_get_namespace>
 80123e0:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 80123e4:	4681      	mov	r9, r0
 80123e6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80123ea:	ad0b      	add	r5, sp, #44	@ 0x2c
 80123ec:	46ac      	mov	ip, r5
 80123ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80123f2:	f8de 3000 	ldr.w	r3, [lr]
 80123f6:	f8cc 3000 	str.w	r3, [ip]
 80123fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80123fc:	b1fb      	cbz	r3, 801243e <rcl_node_resolve_name+0x8e>
 80123fe:	468a      	mov	sl, r1
 8012400:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8012404:	f002 fcb4 	bl	8014d70 <rcutils_get_zero_initialized_string_map>
 8012408:	ab10      	add	r3, sp, #64	@ 0x40
 801240a:	9008      	str	r0, [sp, #32]
 801240c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8012410:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012414:	2100      	movs	r1, #0
 8012416:	e895 000c 	ldmia.w	r5, {r2, r3}
 801241a:	a808      	add	r0, sp, #32
 801241c:	f002 fd20 	bl	8014e60 <rcutils_string_map_init>
 8012420:	4607      	mov	r7, r0
 8012422:	b180      	cbz	r0, 8012446 <rcl_node_resolve_name+0x96>
 8012424:	f7f9 fb54 	bl	800bad0 <rcutils_get_error_string>
 8012428:	f7f9 fb6a 	bl	800bb00 <rcutils_reset_error>
 801242c:	2f0a      	cmp	r7, #10
 801242e:	bf18      	it	ne
 8012430:	2701      	movne	r7, #1
 8012432:	4638      	mov	r0, r7
 8012434:	b011      	add	sp, #68	@ 0x44
 8012436:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801243a:	b002      	add	sp, #8
 801243c:	4770      	bx	lr
 801243e:	270b      	movs	r7, #11
 8012440:	e7f7      	b.n	8012432 <rcl_node_resolve_name+0x82>
 8012442:	2701      	movs	r7, #1
 8012444:	e7f5      	b.n	8012432 <rcl_node_resolve_name+0x82>
 8012446:	9009      	str	r0, [sp, #36]	@ 0x24
 8012448:	9007      	str	r0, [sp, #28]
 801244a:	a808      	add	r0, sp, #32
 801244c:	f004 fd94 	bl	8016f78 <rcl_get_default_topic_name_substitutions>
 8012450:	4607      	mov	r7, r0
 8012452:	b1a8      	cbz	r0, 8012480 <rcl_node_resolve_name+0xd0>
 8012454:	280a      	cmp	r0, #10
 8012456:	9c07      	ldr	r4, [sp, #28]
 8012458:	d000      	beq.n	801245c <rcl_node_resolve_name+0xac>
 801245a:	2701      	movs	r7, #1
 801245c:	a808      	add	r0, sp, #32
 801245e:	f002 fd3f 	bl	8014ee0 <rcutils_string_map_fini>
 8012462:	2800      	cmp	r0, #0
 8012464:	d13d      	bne.n	80124e2 <rcl_node_resolve_name+0x132>
 8012466:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012468:	4659      	mov	r1, fp
 801246a:	47d0      	blx	sl
 801246c:	4659      	mov	r1, fp
 801246e:	4620      	mov	r0, r4
 8012470:	47d0      	blx	sl
 8012472:	f1b8 0f00 	cmp.w	r8, #0
 8012476:	d0dc      	beq.n	8012432 <rcl_node_resolve_name+0x82>
 8012478:	2f67      	cmp	r7, #103	@ 0x67
 801247a:	bf08      	it	eq
 801247c:	2768      	moveq	r7, #104	@ 0x68
 801247e:	e7d8      	b.n	8012432 <rcl_node_resolve_name+0x82>
 8012480:	ab09      	add	r3, sp, #36	@ 0x24
 8012482:	9305      	str	r3, [sp, #20]
 8012484:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012486:	46ec      	mov	ip, sp
 8012488:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801248c:	682b      	ldr	r3, [r5, #0]
 801248e:	f8cc 3000 	str.w	r3, [ip]
 8012492:	464a      	mov	r2, r9
 8012494:	4631      	mov	r1, r6
 8012496:	4620      	mov	r0, r4
 8012498:	ab08      	add	r3, sp, #32
 801249a:	f004 fc0f 	bl	8016cbc <rcl_expand_topic_name>
 801249e:	4607      	mov	r7, r0
 80124a0:	b9b8      	cbnz	r0, 80124d2 <rcl_node_resolve_name+0x122>
 80124a2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80124a4:	9009      	str	r0, [sp, #36]	@ 0x24
 80124a6:	4602      	mov	r2, r0
 80124a8:	a90a      	add	r1, sp, #40	@ 0x28
 80124aa:	4620      	mov	r0, r4
 80124ac:	f002 fe48 	bl	8015140 <rmw_validate_full_topic_name>
 80124b0:	b988      	cbnz	r0, 80124d6 <rcl_node_resolve_name+0x126>
 80124b2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80124b4:	b9d5      	cbnz	r5, 80124ec <rcl_node_resolve_name+0x13c>
 80124b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80124b8:	a808      	add	r0, sp, #32
 80124ba:	601c      	str	r4, [r3, #0]
 80124bc:	f002 fd10 	bl	8014ee0 <rcutils_string_map_fini>
 80124c0:	4607      	mov	r7, r0
 80124c2:	b1a8      	cbz	r0, 80124f0 <rcl_node_resolve_name+0x140>
 80124c4:	f7f9 fb04 	bl	800bad0 <rcutils_get_error_string>
 80124c8:	462c      	mov	r4, r5
 80124ca:	f7f9 fb19 	bl	800bb00 <rcutils_reset_error>
 80124ce:	2701      	movs	r7, #1
 80124d0:	e7c9      	b.n	8012466 <rcl_node_resolve_name+0xb6>
 80124d2:	9c07      	ldr	r4, [sp, #28]
 80124d4:	e7c2      	b.n	801245c <rcl_node_resolve_name+0xac>
 80124d6:	f7f9 fafb 	bl	800bad0 <rcutils_get_error_string>
 80124da:	2701      	movs	r7, #1
 80124dc:	f7f9 fb10 	bl	800bb00 <rcutils_reset_error>
 80124e0:	e7bc      	b.n	801245c <rcl_node_resolve_name+0xac>
 80124e2:	f7f9 faf5 	bl	800bad0 <rcutils_get_error_string>
 80124e6:	f7f9 fb0b 	bl	800bb00 <rcutils_reset_error>
 80124ea:	e7bc      	b.n	8012466 <rcl_node_resolve_name+0xb6>
 80124ec:	2767      	movs	r7, #103	@ 0x67
 80124ee:	e7b5      	b.n	801245c <rcl_node_resolve_name+0xac>
 80124f0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80124f2:	4659      	mov	r1, fp
 80124f4:	47d0      	blx	sl
 80124f6:	4659      	mov	r1, fp
 80124f8:	4638      	mov	r0, r7
 80124fa:	47d0      	blx	sl
 80124fc:	e799      	b.n	8012432 <rcl_node_resolve_name+0x82>
 80124fe:	bf00      	nop

08012500 <exact_match_lookup>:
 8012500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012502:	f102 0708 	add.w	r7, r2, #8
 8012506:	460b      	mov	r3, r1
 8012508:	4614      	mov	r4, r2
 801250a:	4606      	mov	r6, r0
 801250c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8012510:	b085      	sub	sp, #20
 8012512:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012516:	4618      	mov	r0, r3
 8012518:	4919      	ldr	r1, [pc, #100]	@ (8012580 <exact_match_lookup+0x80>)
 801251a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801251e:	f002 fac1 	bl	8014aa4 <rcutils_join_path>
 8012522:	7833      	ldrb	r3, [r6, #0]
 8012524:	2b2f      	cmp	r3, #47	@ 0x2f
 8012526:	4605      	mov	r5, r0
 8012528:	d023      	beq.n	8012572 <exact_match_lookup+0x72>
 801252a:	f104 030c 	add.w	r3, r4, #12
 801252e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012532:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012536:	1c70      	adds	r0, r6, #1
 8012538:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801253c:	f002 fab8 	bl	8014ab0 <rcutils_to_native_path>
 8012540:	4606      	mov	r6, r0
 8012542:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8012546:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801254a:	4631      	mov	r1, r6
 801254c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8012550:	4628      	mov	r0, r5
 8012552:	f002 faa7 	bl	8014aa4 <rcutils_join_path>
 8012556:	6862      	ldr	r2, [r4, #4]
 8012558:	6921      	ldr	r1, [r4, #16]
 801255a:	4603      	mov	r3, r0
 801255c:	4630      	mov	r0, r6
 801255e:	461e      	mov	r6, r3
 8012560:	4790      	blx	r2
 8012562:	4628      	mov	r0, r5
 8012564:	6863      	ldr	r3, [r4, #4]
 8012566:	6921      	ldr	r1, [r4, #16]
 8012568:	4798      	blx	r3
 801256a:	4635      	mov	r5, r6
 801256c:	4628      	mov	r0, r5
 801256e:	b005      	add	sp, #20
 8012570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012572:	7873      	ldrb	r3, [r6, #1]
 8012574:	2b00      	cmp	r3, #0
 8012576:	d1d8      	bne.n	801252a <exact_match_lookup+0x2a>
 8012578:	4628      	mov	r0, r5
 801257a:	b005      	add	sp, #20
 801257c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801257e:	bf00      	nop
 8012580:	08019228 	.word	0x08019228

08012584 <rcl_get_secure_root>:
 8012584:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012588:	b085      	sub	sp, #20
 801258a:	b168      	cbz	r0, 80125a8 <rcl_get_secure_root+0x24>
 801258c:	4607      	mov	r7, r0
 801258e:	4608      	mov	r0, r1
 8012590:	460c      	mov	r4, r1
 8012592:	f7f9 fa8f 	bl	800bab4 <rcutils_allocator_is_valid>
 8012596:	b138      	cbz	r0, 80125a8 <rcl_get_secure_root+0x24>
 8012598:	2300      	movs	r3, #0
 801259a:	482d      	ldr	r0, [pc, #180]	@ (8012650 <rcl_get_secure_root+0xcc>)
 801259c:	9303      	str	r3, [sp, #12]
 801259e:	a903      	add	r1, sp, #12
 80125a0:	f002 fa66 	bl	8014a70 <rcutils_get_env>
 80125a4:	4605      	mov	r5, r0
 80125a6:	b120      	cbz	r0, 80125b2 <rcl_get_secure_root+0x2e>
 80125a8:	2500      	movs	r5, #0
 80125aa:	4628      	mov	r0, r5
 80125ac:	b005      	add	sp, #20
 80125ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80125b2:	9b03      	ldr	r3, [sp, #12]
 80125b4:	781a      	ldrb	r2, [r3, #0]
 80125b6:	2a00      	cmp	r2, #0
 80125b8:	d0f6      	beq.n	80125a8 <rcl_get_secure_root+0x24>
 80125ba:	f104 090c 	add.w	r9, r4, #12
 80125be:	e899 0003 	ldmia.w	r9, {r0, r1}
 80125c2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80125c6:	4618      	mov	r0, r3
 80125c8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80125cc:	f002 fb92 	bl	8014cf4 <rcutils_strdup>
 80125d0:	4680      	mov	r8, r0
 80125d2:	2800      	cmp	r0, #0
 80125d4:	d0e8      	beq.n	80125a8 <rcl_get_secure_root+0x24>
 80125d6:	481f      	ldr	r0, [pc, #124]	@ (8012654 <rcl_get_secure_root+0xd0>)
 80125d8:	9503      	str	r5, [sp, #12]
 80125da:	a903      	add	r1, sp, #12
 80125dc:	f002 fa48 	bl	8014a70 <rcutils_get_env>
 80125e0:	b160      	cbz	r0, 80125fc <rcl_get_secure_root+0x78>
 80125e2:	2600      	movs	r6, #0
 80125e4:	6863      	ldr	r3, [r4, #4]
 80125e6:	6921      	ldr	r1, [r4, #16]
 80125e8:	4630      	mov	r0, r6
 80125ea:	4798      	blx	r3
 80125ec:	4640      	mov	r0, r8
 80125ee:	6863      	ldr	r3, [r4, #4]
 80125f0:	6921      	ldr	r1, [r4, #16]
 80125f2:	4798      	blx	r3
 80125f4:	4628      	mov	r0, r5
 80125f6:	b005      	add	sp, #20
 80125f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80125fc:	9b03      	ldr	r3, [sp, #12]
 80125fe:	781e      	ldrb	r6, [r3, #0]
 8012600:	b1f6      	cbz	r6, 8012640 <rcl_get_secure_root+0xbc>
 8012602:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012606:	e88d 0003 	stmia.w	sp, {r0, r1}
 801260a:	4618      	mov	r0, r3
 801260c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012610:	f002 fb70 	bl	8014cf4 <rcutils_strdup>
 8012614:	4606      	mov	r6, r0
 8012616:	2800      	cmp	r0, #0
 8012618:	d0e3      	beq.n	80125e2 <rcl_get_secure_root+0x5e>
 801261a:	4622      	mov	r2, r4
 801261c:	4641      	mov	r1, r8
 801261e:	f7ff ff6f 	bl	8012500 <exact_match_lookup>
 8012622:	4605      	mov	r5, r0
 8012624:	2d00      	cmp	r5, #0
 8012626:	d0dd      	beq.n	80125e4 <rcl_get_secure_root+0x60>
 8012628:	4628      	mov	r0, r5
 801262a:	f002 fa39 	bl	8014aa0 <rcutils_is_directory>
 801262e:	4603      	mov	r3, r0
 8012630:	2800      	cmp	r0, #0
 8012632:	d1d7      	bne.n	80125e4 <rcl_get_secure_root+0x60>
 8012634:	4628      	mov	r0, r5
 8012636:	6921      	ldr	r1, [r4, #16]
 8012638:	461d      	mov	r5, r3
 801263a:	6863      	ldr	r3, [r4, #4]
 801263c:	4798      	blx	r3
 801263e:	e7d1      	b.n	80125e4 <rcl_get_secure_root+0x60>
 8012640:	4622      	mov	r2, r4
 8012642:	4638      	mov	r0, r7
 8012644:	4641      	mov	r1, r8
 8012646:	f7ff ff5b 	bl	8012500 <exact_match_lookup>
 801264a:	4605      	mov	r5, r0
 801264c:	e7ea      	b.n	8012624 <rcl_get_secure_root+0xa0>
 801264e:	bf00      	nop
 8012650:	08019234 	.word	0x08019234
 8012654:	0801924c 	.word	0x0801924c

08012658 <rcl_get_security_options_from_environment>:
 8012658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801265c:	b082      	sub	sp, #8
 801265e:	2300      	movs	r3, #0
 8012660:	4606      	mov	r6, r0
 8012662:	460f      	mov	r7, r1
 8012664:	4820      	ldr	r0, [pc, #128]	@ (80126e8 <rcl_get_security_options_from_environment+0x90>)
 8012666:	9301      	str	r3, [sp, #4]
 8012668:	a901      	add	r1, sp, #4
 801266a:	4690      	mov	r8, r2
 801266c:	f002 fa00 	bl	8014a70 <rcutils_get_env>
 8012670:	b120      	cbz	r0, 801267c <rcl_get_security_options_from_environment+0x24>
 8012672:	2501      	movs	r5, #1
 8012674:	4628      	mov	r0, r5
 8012676:	b002      	add	sp, #8
 8012678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801267c:	491b      	ldr	r1, [pc, #108]	@ (80126ec <rcl_get_security_options_from_environment+0x94>)
 801267e:	4604      	mov	r4, r0
 8012680:	9801      	ldr	r0, [sp, #4]
 8012682:	f7ed fdcd 	bl	8000220 <strcmp>
 8012686:	4605      	mov	r5, r0
 8012688:	b9e8      	cbnz	r0, 80126c6 <rcl_get_security_options_from_environment+0x6e>
 801268a:	9001      	str	r0, [sp, #4]
 801268c:	f1b8 0f00 	cmp.w	r8, #0
 8012690:	d020      	beq.n	80126d4 <rcl_get_security_options_from_environment+0x7c>
 8012692:	4817      	ldr	r0, [pc, #92]	@ (80126f0 <rcl_get_security_options_from_environment+0x98>)
 8012694:	a901      	add	r1, sp, #4
 8012696:	f002 f9eb 	bl	8014a70 <rcutils_get_env>
 801269a:	2800      	cmp	r0, #0
 801269c:	d1e9      	bne.n	8012672 <rcl_get_security_options_from_environment+0x1a>
 801269e:	4915      	ldr	r1, [pc, #84]	@ (80126f4 <rcl_get_security_options_from_environment+0x9c>)
 80126a0:	9801      	ldr	r0, [sp, #4]
 80126a2:	f7ed fdbd 	bl	8000220 <strcmp>
 80126a6:	fab0 f080 	clz	r0, r0
 80126aa:	0940      	lsrs	r0, r0, #5
 80126ac:	f888 0000 	strb.w	r0, [r8]
 80126b0:	4639      	mov	r1, r7
 80126b2:	4630      	mov	r0, r6
 80126b4:	f7ff ff66 	bl	8012584 <rcl_get_secure_root>
 80126b8:	b170      	cbz	r0, 80126d8 <rcl_get_security_options_from_environment+0x80>
 80126ba:	f8c8 0004 	str.w	r0, [r8, #4]
 80126be:	4628      	mov	r0, r5
 80126c0:	b002      	add	sp, #8
 80126c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126c6:	4625      	mov	r5, r4
 80126c8:	4628      	mov	r0, r5
 80126ca:	f888 4000 	strb.w	r4, [r8]
 80126ce:	b002      	add	sp, #8
 80126d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126d4:	250b      	movs	r5, #11
 80126d6:	e7cd      	b.n	8012674 <rcl_get_security_options_from_environment+0x1c>
 80126d8:	f898 5000 	ldrb.w	r5, [r8]
 80126dc:	f1a5 0501 	sub.w	r5, r5, #1
 80126e0:	fab5 f585 	clz	r5, r5
 80126e4:	096d      	lsrs	r5, r5, #5
 80126e6:	e7c5      	b.n	8012674 <rcl_get_security_options_from_environment+0x1c>
 80126e8:	080191ec 	.word	0x080191ec
 80126ec:	08019200 	.word	0x08019200
 80126f0:	08019208 	.word	0x08019208
 80126f4:	08019220 	.word	0x08019220

080126f8 <rcl_service_get_rmw_handle>:
 80126f8:	b118      	cbz	r0, 8012702 <rcl_service_get_rmw_handle+0xa>
 80126fa:	6800      	ldr	r0, [r0, #0]
 80126fc:	b108      	cbz	r0, 8012702 <rcl_service_get_rmw_handle+0xa>
 80126fe:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012702:	4770      	bx	lr

08012704 <rcl_take_request>:
 8012704:	b570      	push	{r4, r5, r6, lr}
 8012706:	468e      	mov	lr, r1
 8012708:	460c      	mov	r4, r1
 801270a:	4616      	mov	r6, r2
 801270c:	4605      	mov	r5, r0
 801270e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012712:	b08c      	sub	sp, #48	@ 0x30
 8012714:	f10d 0c18 	add.w	ip, sp, #24
 8012718:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801271c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012720:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012724:	b30d      	cbz	r5, 801276a <rcl_take_request+0x66>
 8012726:	682b      	ldr	r3, [r5, #0]
 8012728:	b1fb      	cbz	r3, 801276a <rcl_take_request+0x66>
 801272a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801272e:	b1e0      	cbz	r0, 801276a <rcl_take_request+0x66>
 8012730:	b336      	cbz	r6, 8012780 <rcl_take_request+0x7c>
 8012732:	2300      	movs	r3, #0
 8012734:	f88d 3007 	strb.w	r3, [sp, #7]
 8012738:	4632      	mov	r2, r6
 801273a:	f10d 0307 	add.w	r3, sp, #7
 801273e:	a902      	add	r1, sp, #8
 8012740:	f003 f854 	bl	80157ec <rmw_take_request>
 8012744:	4605      	mov	r5, r0
 8012746:	b198      	cbz	r0, 8012770 <rcl_take_request+0x6c>
 8012748:	280a      	cmp	r0, #10
 801274a:	bf18      	it	ne
 801274c:	2501      	movne	r5, #1
 801274e:	f10d 0e18 	add.w	lr, sp, #24
 8012752:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012756:	46a4      	mov	ip, r4
 8012758:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801275c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012760:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012764:	4628      	mov	r0, r5
 8012766:	b00c      	add	sp, #48	@ 0x30
 8012768:	bd70      	pop	{r4, r5, r6, pc}
 801276a:	f44f 7516 	mov.w	r5, #600	@ 0x258
 801276e:	e7ee      	b.n	801274e <rcl_take_request+0x4a>
 8012770:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012774:	f240 2359 	movw	r3, #601	@ 0x259
 8012778:	2a00      	cmp	r2, #0
 801277a:	bf08      	it	eq
 801277c:	461d      	moveq	r5, r3
 801277e:	e7e6      	b.n	801274e <rcl_take_request+0x4a>
 8012780:	250b      	movs	r5, #11
 8012782:	e7e4      	b.n	801274e <rcl_take_request+0x4a>

08012784 <rcl_send_response>:
 8012784:	b170      	cbz	r0, 80127a4 <rcl_send_response+0x20>
 8012786:	6800      	ldr	r0, [r0, #0]
 8012788:	b160      	cbz	r0, 80127a4 <rcl_send_response+0x20>
 801278a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801278e:	b148      	cbz	r0, 80127a4 <rcl_send_response+0x20>
 8012790:	b159      	cbz	r1, 80127aa <rcl_send_response+0x26>
 8012792:	b510      	push	{r4, lr}
 8012794:	b15a      	cbz	r2, 80127ae <rcl_send_response+0x2a>
 8012796:	f003 f887 	bl	80158a8 <rmw_send_response>
 801279a:	b110      	cbz	r0, 80127a2 <rcl_send_response+0x1e>
 801279c:	2802      	cmp	r0, #2
 801279e:	bf18      	it	ne
 80127a0:	2001      	movne	r0, #1
 80127a2:	bd10      	pop	{r4, pc}
 80127a4:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80127a8:	4770      	bx	lr
 80127aa:	200b      	movs	r0, #11
 80127ac:	4770      	bx	lr
 80127ae:	200b      	movs	r0, #11
 80127b0:	bd10      	pop	{r4, pc}
 80127b2:	bf00      	nop

080127b4 <rcl_service_is_valid>:
 80127b4:	b130      	cbz	r0, 80127c4 <rcl_service_is_valid+0x10>
 80127b6:	6800      	ldr	r0, [r0, #0]
 80127b8:	b120      	cbz	r0, 80127c4 <rcl_service_is_valid+0x10>
 80127ba:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80127be:	3800      	subs	r0, #0
 80127c0:	bf18      	it	ne
 80127c2:	2001      	movne	r0, #1
 80127c4:	4770      	bx	lr
 80127c6:	bf00      	nop

080127c8 <rcl_get_zero_initialized_subscription>:
 80127c8:	4b01      	ldr	r3, [pc, #4]	@ (80127d0 <rcl_get_zero_initialized_subscription+0x8>)
 80127ca:	6818      	ldr	r0, [r3, #0]
 80127cc:	4770      	bx	lr
 80127ce:	bf00      	nop
 80127d0:	0801926c 	.word	0x0801926c

080127d4 <rcl_subscription_init>:
 80127d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80127d8:	b089      	sub	sp, #36	@ 0x24
 80127da:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80127dc:	b1d6      	cbz	r6, 8012814 <rcl_subscription_init+0x40>
 80127de:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 80127e2:	4604      	mov	r4, r0
 80127e4:	4648      	mov	r0, r9
 80127e6:	460d      	mov	r5, r1
 80127e8:	4690      	mov	r8, r2
 80127ea:	461f      	mov	r7, r3
 80127ec:	f7f9 f962 	bl	800bab4 <rcutils_allocator_is_valid>
 80127f0:	b180      	cbz	r0, 8012814 <rcl_subscription_init+0x40>
 80127f2:	b17c      	cbz	r4, 8012814 <rcl_subscription_init+0x40>
 80127f4:	4628      	mov	r0, r5
 80127f6:	f7ff fd87 	bl	8012308 <rcl_node_is_valid>
 80127fa:	2800      	cmp	r0, #0
 80127fc:	d054      	beq.n	80128a8 <rcl_subscription_init+0xd4>
 80127fe:	f1b8 0f00 	cmp.w	r8, #0
 8012802:	d007      	beq.n	8012814 <rcl_subscription_init+0x40>
 8012804:	b137      	cbz	r7, 8012814 <rcl_subscription_init+0x40>
 8012806:	6823      	ldr	r3, [r4, #0]
 8012808:	b14b      	cbz	r3, 801281e <rcl_subscription_init+0x4a>
 801280a:	2764      	movs	r7, #100	@ 0x64
 801280c:	4638      	mov	r0, r7
 801280e:	b009      	add	sp, #36	@ 0x24
 8012810:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012814:	270b      	movs	r7, #11
 8012816:	4638      	mov	r0, r7
 8012818:	b009      	add	sp, #36	@ 0x24
 801281a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801281e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8012822:	aa07      	add	r2, sp, #28
 8012824:	9205      	str	r2, [sp, #20]
 8012826:	9307      	str	r3, [sp, #28]
 8012828:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 801282c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012830:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012834:	4639      	mov	r1, r7
 8012836:	e899 000c 	ldmia.w	r9, {r2, r3}
 801283a:	4628      	mov	r0, r5
 801283c:	f7ff fdb8 	bl	80123b0 <rcl_node_resolve_name>
 8012840:	4607      	mov	r7, r0
 8012842:	2800      	cmp	r0, #0
 8012844:	d15f      	bne.n	8012906 <rcl_subscription_init+0x132>
 8012846:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 801284a:	21c8      	movs	r1, #200	@ 0xc8
 801284c:	2001      	movs	r0, #1
 801284e:	4798      	blx	r3
 8012850:	6020      	str	r0, [r4, #0]
 8012852:	2800      	cmp	r0, #0
 8012854:	d05d      	beq.n	8012912 <rcl_subscription_init+0x13e>
 8012856:	4628      	mov	r0, r5
 8012858:	f7ff fd78 	bl	801234c <rcl_node_get_rmw_handle>
 801285c:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8012860:	9300      	str	r3, [sp, #0]
 8012862:	9a07      	ldr	r2, [sp, #28]
 8012864:	6827      	ldr	r7, [r4, #0]
 8012866:	4641      	mov	r1, r8
 8012868:	4633      	mov	r3, r6
 801286a:	f7f9 ff3f 	bl	800c6ec <rmw_create_subscription>
 801286e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 8012872:	6827      	ldr	r7, [r4, #0]
 8012874:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8012878:	b348      	cbz	r0, 80128ce <rcl_subscription_init+0xfa>
 801287a:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 801287e:	f7fa f817 	bl	800c8b0 <rmw_subscription_get_actual_qos>
 8012882:	4607      	mov	r7, r0
 8012884:	b9a8      	cbnz	r0, 80128b2 <rcl_subscription_init+0xde>
 8012886:	6820      	ldr	r0, [r4, #0]
 8012888:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 801288c:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 8012890:	2270      	movs	r2, #112	@ 0x70
 8012892:	4631      	mov	r1, r6
 8012894:	f005 fa69 	bl	8017d6a <memcpy>
 8012898:	9807      	ldr	r0, [sp, #28]
 801289a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 801289c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 801289e:	4798      	blx	r3
 80128a0:	4638      	mov	r0, r7
 80128a2:	b009      	add	sp, #36	@ 0x24
 80128a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128a8:	27c8      	movs	r7, #200	@ 0xc8
 80128aa:	4638      	mov	r0, r7
 80128ac:	b009      	add	sp, #36	@ 0x24
 80128ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80128b2:	6827      	ldr	r7, [r4, #0]
 80128b4:	b32f      	cbz	r7, 8012902 <rcl_subscription_init+0x12e>
 80128b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80128ba:	b14b      	cbz	r3, 80128d0 <rcl_subscription_init+0xfc>
 80128bc:	4628      	mov	r0, r5
 80128be:	f7ff fd45 	bl	801234c <rcl_node_get_rmw_handle>
 80128c2:	6823      	ldr	r3, [r4, #0]
 80128c4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80128c8:	f7fa f802 	bl	800c8d0 <rmw_destroy_subscription>
 80128cc:	6827      	ldr	r7, [r4, #0]
 80128ce:	b197      	cbz	r7, 80128f6 <rcl_subscription_init+0x122>
 80128d0:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 80128d4:	4628      	mov	r0, r5
 80128d6:	f7f9 f8ed 	bl	800bab4 <rcutils_allocator_is_valid>
 80128da:	b158      	cbz	r0, 80128f4 <rcl_subscription_init+0x120>
 80128dc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80128de:	b148      	cbz	r0, 80128f4 <rcl_subscription_init+0x120>
 80128e0:	4629      	mov	r1, r5
 80128e2:	f002 fb81 	bl	8014fe8 <rmw_subscription_content_filter_options_fini>
 80128e6:	4605      	mov	r5, r0
 80128e8:	b9b8      	cbnz	r0, 801291a <rcl_subscription_init+0x146>
 80128ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80128ec:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80128ee:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80128f0:	4798      	blx	r3
 80128f2:	66fd      	str	r5, [r7, #108]	@ 0x6c
 80128f4:	6827      	ldr	r7, [r4, #0]
 80128f6:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 80128f8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 80128fa:	4638      	mov	r0, r7
 80128fc:	4798      	blx	r3
 80128fe:	2300      	movs	r3, #0
 8012900:	6023      	str	r3, [r4, #0]
 8012902:	2701      	movs	r7, #1
 8012904:	e7c8      	b.n	8012898 <rcl_subscription_init+0xc4>
 8012906:	2867      	cmp	r0, #103	@ 0x67
 8012908:	d0c6      	beq.n	8012898 <rcl_subscription_init+0xc4>
 801290a:	2869      	cmp	r0, #105	@ 0x69
 801290c:	d003      	beq.n	8012916 <rcl_subscription_init+0x142>
 801290e:	280a      	cmp	r0, #10
 8012910:	d1f7      	bne.n	8012902 <rcl_subscription_init+0x12e>
 8012912:	270a      	movs	r7, #10
 8012914:	e7c0      	b.n	8012898 <rcl_subscription_init+0xc4>
 8012916:	2767      	movs	r7, #103	@ 0x67
 8012918:	e7be      	b.n	8012898 <rcl_subscription_init+0xc4>
 801291a:	f7ff f9fb 	bl	8011d14 <rcl_convert_rmw_ret_to_rcl_ret>
 801291e:	6827      	ldr	r7, [r4, #0]
 8012920:	e7e9      	b.n	80128f6 <rcl_subscription_init+0x122>
 8012922:	bf00      	nop

08012924 <rcl_subscription_get_default_options>:
 8012924:	b570      	push	{r4, r5, r6, lr}
 8012926:	4d14      	ldr	r5, [pc, #80]	@ (8012978 <rcl_subscription_get_default_options+0x54>)
 8012928:	4914      	ldr	r1, [pc, #80]	@ (801297c <rcl_subscription_get_default_options+0x58>)
 801292a:	b08a      	sub	sp, #40	@ 0x28
 801292c:	4604      	mov	r4, r0
 801292e:	2250      	movs	r2, #80	@ 0x50
 8012930:	4628      	mov	r0, r5
 8012932:	f005 fa1a 	bl	8017d6a <memcpy>
 8012936:	a804      	add	r0, sp, #16
 8012938:	f7f9 f8ae 	bl	800ba98 <rcutils_get_default_allocator>
 801293c:	f10d 0c10 	add.w	ip, sp, #16
 8012940:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012944:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8012948:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801294c:	466e      	mov	r6, sp
 801294e:	f8dc 3000 	ldr.w	r3, [ip]
 8012952:	f8ce 3000 	str.w	r3, [lr]
 8012956:	4630      	mov	r0, r6
 8012958:	f002 fb60 	bl	801501c <rmw_get_default_subscription_options>
 801295c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8012960:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8012964:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012968:	2270      	movs	r2, #112	@ 0x70
 801296a:	4629      	mov	r1, r5
 801296c:	4620      	mov	r0, r4
 801296e:	f005 f9fc 	bl	8017d6a <memcpy>
 8012972:	4620      	mov	r0, r4
 8012974:	b00a      	add	sp, #40	@ 0x28
 8012976:	bd70      	pop	{r4, r5, r6, pc}
 8012978:	2000abf8 	.word	0x2000abf8
 801297c:	08019270 	.word	0x08019270

08012980 <rcl_take>:
 8012980:	2800      	cmp	r0, #0
 8012982:	d04a      	beq.n	8012a1a <rcl_take+0x9a>
 8012984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012988:	4604      	mov	r4, r0
 801298a:	6800      	ldr	r0, [r0, #0]
 801298c:	b0a4      	sub	sp, #144	@ 0x90
 801298e:	2800      	cmp	r0, #0
 8012990:	d03b      	beq.n	8012a0a <rcl_take+0x8a>
 8012992:	461f      	mov	r7, r3
 8012994:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8012998:	2b00      	cmp	r3, #0
 801299a:	d036      	beq.n	8012a0a <rcl_take+0x8a>
 801299c:	460e      	mov	r6, r1
 801299e:	2900      	cmp	r1, #0
 80129a0:	d039      	beq.n	8012a16 <rcl_take+0x96>
 80129a2:	4615      	mov	r5, r2
 80129a4:	2a00      	cmp	r2, #0
 80129a6:	d03c      	beq.n	8012a22 <rcl_take+0xa2>
 80129a8:	a802      	add	r0, sp, #8
 80129aa:	f002 fbc1 	bl	8015130 <rmw_get_zero_initialized_message_info>
 80129ae:	f10d 0c08 	add.w	ip, sp, #8
 80129b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80129b6:	46ae      	mov	lr, r5
 80129b8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80129bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80129c0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80129c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80129c8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80129cc:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80129d0:	f04f 0800 	mov.w	r8, #0
 80129d4:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80129d8:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 80129dc:	6822      	ldr	r2, [r4, #0]
 80129de:	462b      	mov	r3, r5
 80129e0:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 80129e4:	9700      	str	r7, [sp, #0]
 80129e6:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 80129ea:	4631      	mov	r1, r6
 80129ec:	f003 f802 	bl	80159f4 <rmw_take_with_info>
 80129f0:	4603      	mov	r3, r0
 80129f2:	b9c0      	cbnz	r0, 8012a26 <rcl_take+0xa6>
 80129f4:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 80129f8:	f240 1291 	movw	r2, #401	@ 0x191
 80129fc:	2900      	cmp	r1, #0
 80129fe:	bf08      	it	eq
 8012a00:	4613      	moveq	r3, r2
 8012a02:	4618      	mov	r0, r3
 8012a04:	b024      	add	sp, #144	@ 0x90
 8012a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a0a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8012a0e:	4618      	mov	r0, r3
 8012a10:	b024      	add	sp, #144	@ 0x90
 8012a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a16:	230b      	movs	r3, #11
 8012a18:	e7f3      	b.n	8012a02 <rcl_take+0x82>
 8012a1a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8012a1e:	4618      	mov	r0, r3
 8012a20:	4770      	bx	lr
 8012a22:	ad14      	add	r5, sp, #80	@ 0x50
 8012a24:	e7c0      	b.n	80129a8 <rcl_take+0x28>
 8012a26:	f7ff f975 	bl	8011d14 <rcl_convert_rmw_ret_to_rcl_ret>
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	e7e9      	b.n	8012a02 <rcl_take+0x82>
 8012a2e:	bf00      	nop

08012a30 <rcl_subscription_get_rmw_handle>:
 8012a30:	b118      	cbz	r0, 8012a3a <rcl_subscription_get_rmw_handle+0xa>
 8012a32:	6800      	ldr	r0, [r0, #0]
 8012a34:	b108      	cbz	r0, 8012a3a <rcl_subscription_get_rmw_handle+0xa>
 8012a36:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8012a3a:	4770      	bx	lr

08012a3c <rcl_subscription_is_valid>:
 8012a3c:	b130      	cbz	r0, 8012a4c <rcl_subscription_is_valid+0x10>
 8012a3e:	6800      	ldr	r0, [r0, #0]
 8012a40:	b120      	cbz	r0, 8012a4c <rcl_subscription_is_valid+0x10>
 8012a42:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8012a46:	3800      	subs	r0, #0
 8012a48:	bf18      	it	ne
 8012a4a:	2001      	movne	r0, #1
 8012a4c:	4770      	bx	lr
 8012a4e:	bf00      	nop

08012a50 <rcl_get_system_time>:
 8012a50:	4608      	mov	r0, r1
 8012a52:	f7f9 b871 	b.w	800bb38 <rcutils_system_time_now>
 8012a56:	bf00      	nop

08012a58 <rcl_get_steady_time>:
 8012a58:	4608      	mov	r0, r1
 8012a5a:	f7f9 b895 	b.w	800bb88 <rcutils_steady_time_now>
 8012a5e:	bf00      	nop

08012a60 <rcl_get_ros_time>:
 8012a60:	7a03      	ldrb	r3, [r0, #8]
 8012a62:	b510      	push	{r4, lr}
 8012a64:	460c      	mov	r4, r1
 8012a66:	b133      	cbz	r3, 8012a76 <rcl_get_ros_time+0x16>
 8012a68:	2105      	movs	r1, #5
 8012a6a:	f001 ff5d 	bl	8014928 <__atomic_load_8>
 8012a6e:	e9c4 0100 	strd	r0, r1, [r4]
 8012a72:	2000      	movs	r0, #0
 8012a74:	bd10      	pop	{r4, pc}
 8012a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a7a:	4608      	mov	r0, r1
 8012a7c:	f7f9 b85c 	b.w	800bb38 <rcutils_system_time_now>

08012a80 <rcl_clock_init>:
 8012a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a82:	4605      	mov	r5, r0
 8012a84:	4610      	mov	r0, r2
 8012a86:	4614      	mov	r4, r2
 8012a88:	460e      	mov	r6, r1
 8012a8a:	f7f9 f813 	bl	800bab4 <rcutils_allocator_is_valid>
 8012a8e:	b128      	cbz	r0, 8012a9c <rcl_clock_init+0x1c>
 8012a90:	2d03      	cmp	r5, #3
 8012a92:	d803      	bhi.n	8012a9c <rcl_clock_init+0x1c>
 8012a94:	e8df f005 	tbb	[pc, r5]
 8012a98:	06532e1d 	.word	0x06532e1d
 8012a9c:	f04f 0c0b 	mov.w	ip, #11
 8012aa0:	4660      	mov	r0, ip
 8012aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012aa4:	2e00      	cmp	r6, #0
 8012aa6:	d0f9      	beq.n	8012a9c <rcl_clock_init+0x1c>
 8012aa8:	2c00      	cmp	r4, #0
 8012aaa:	d0f7      	beq.n	8012a9c <rcl_clock_init+0x1c>
 8012aac:	2300      	movs	r3, #0
 8012aae:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012ab2:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8012b68 <rcl_clock_init+0xe8>
 8012ab6:	6133      	str	r3, [r6, #16]
 8012ab8:	f106 0514 	add.w	r5, r6, #20
 8012abc:	469c      	mov	ip, r3
 8012abe:	2703      	movs	r7, #3
 8012ac0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012ac2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012ac4:	6823      	ldr	r3, [r4, #0]
 8012ac6:	602b      	str	r3, [r5, #0]
 8012ac8:	7037      	strb	r7, [r6, #0]
 8012aca:	f8c6 e00c 	str.w	lr, [r6, #12]
 8012ace:	4660      	mov	r0, ip
 8012ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ad2:	2e00      	cmp	r6, #0
 8012ad4:	d0e2      	beq.n	8012a9c <rcl_clock_init+0x1c>
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	7033      	strb	r3, [r6, #0]
 8012ada:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012ade:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8012ae2:	469c      	mov	ip, r3
 8012ae4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012ae6:	f106 0514 	add.w	r5, r6, #20
 8012aea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012aec:	6823      	ldr	r3, [r4, #0]
 8012aee:	602b      	str	r3, [r5, #0]
 8012af0:	4660      	mov	r0, ip
 8012af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012af4:	2e00      	cmp	r6, #0
 8012af6:	d0d1      	beq.n	8012a9c <rcl_clock_init+0x1c>
 8012af8:	2c00      	cmp	r4, #0
 8012afa:	d0cf      	beq.n	8012a9c <rcl_clock_init+0x1c>
 8012afc:	2700      	movs	r7, #0
 8012afe:	7037      	strb	r7, [r6, #0]
 8012b00:	46a4      	mov	ip, r4
 8012b02:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012b06:	f106 0514 	add.w	r5, r6, #20
 8012b0a:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8012b0e:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8012b12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012b14:	f8dc 3000 	ldr.w	r3, [ip]
 8012b18:	602b      	str	r3, [r5, #0]
 8012b1a:	6921      	ldr	r1, [r4, #16]
 8012b1c:	6823      	ldr	r3, [r4, #0]
 8012b1e:	2010      	movs	r0, #16
 8012b20:	4798      	blx	r3
 8012b22:	6130      	str	r0, [r6, #16]
 8012b24:	b1d0      	cbz	r0, 8012b5c <rcl_clock_init+0xdc>
 8012b26:	2200      	movs	r2, #0
 8012b28:	2300      	movs	r3, #0
 8012b2a:	e9c0 2300 	strd	r2, r3, [r0]
 8012b2e:	2301      	movs	r3, #1
 8012b30:	7207      	strb	r7, [r0, #8]
 8012b32:	4a0c      	ldr	r2, [pc, #48]	@ (8012b64 <rcl_clock_init+0xe4>)
 8012b34:	7033      	strb	r3, [r6, #0]
 8012b36:	46bc      	mov	ip, r7
 8012b38:	60f2      	str	r2, [r6, #12]
 8012b3a:	4660      	mov	r0, ip
 8012b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b3e:	2e00      	cmp	r6, #0
 8012b40:	d0ac      	beq.n	8012a9c <rcl_clock_init+0x1c>
 8012b42:	2c00      	cmp	r4, #0
 8012b44:	d0aa      	beq.n	8012a9c <rcl_clock_init+0x1c>
 8012b46:	2300      	movs	r3, #0
 8012b48:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012b4c:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8012b6c <rcl_clock_init+0xec>
 8012b50:	6133      	str	r3, [r6, #16]
 8012b52:	f106 0514 	add.w	r5, r6, #20
 8012b56:	469c      	mov	ip, r3
 8012b58:	2702      	movs	r7, #2
 8012b5a:	e7b1      	b.n	8012ac0 <rcl_clock_init+0x40>
 8012b5c:	f04f 0c0a 	mov.w	ip, #10
 8012b60:	e79e      	b.n	8012aa0 <rcl_clock_init+0x20>
 8012b62:	bf00      	nop
 8012b64:	08012a61 	.word	0x08012a61
 8012b68:	08012a59 	.word	0x08012a59
 8012b6c:	08012a51 	.word	0x08012a51

08012b70 <rcl_clock_get_now>:
 8012b70:	b140      	cbz	r0, 8012b84 <rcl_clock_get_now+0x14>
 8012b72:	b139      	cbz	r1, 8012b84 <rcl_clock_get_now+0x14>
 8012b74:	7803      	ldrb	r3, [r0, #0]
 8012b76:	b11b      	cbz	r3, 8012b80 <rcl_clock_get_now+0x10>
 8012b78:	68c3      	ldr	r3, [r0, #12]
 8012b7a:	b10b      	cbz	r3, 8012b80 <rcl_clock_get_now+0x10>
 8012b7c:	6900      	ldr	r0, [r0, #16]
 8012b7e:	4718      	bx	r3
 8012b80:	2001      	movs	r0, #1
 8012b82:	4770      	bx	lr
 8012b84:	200b      	movs	r0, #11
 8012b86:	4770      	bx	lr

08012b88 <rcl_clock_add_jump_callback>:
 8012b88:	b082      	sub	sp, #8
 8012b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b8e:	a906      	add	r1, sp, #24
 8012b90:	e881 000c 	stmia.w	r1, {r2, r3}
 8012b94:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8012b98:	b320      	cbz	r0, 8012be4 <rcl_clock_add_jump_callback+0x5c>
 8012b9a:	4604      	mov	r4, r0
 8012b9c:	3014      	adds	r0, #20
 8012b9e:	f7f8 ff89 	bl	800bab4 <rcutils_allocator_is_valid>
 8012ba2:	b1f8      	cbz	r0, 8012be4 <rcl_clock_add_jump_callback+0x5c>
 8012ba4:	b1f6      	cbz	r6, 8012be4 <rcl_clock_add_jump_callback+0x5c>
 8012ba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	db1b      	blt.n	8012be4 <rcl_clock_add_jump_callback+0x5c>
 8012bac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8012bb0:	2a01      	cmp	r2, #1
 8012bb2:	f173 0300 	sbcs.w	r3, r3, #0
 8012bb6:	da15      	bge.n	8012be4 <rcl_clock_add_jump_callback+0x5c>
 8012bb8:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8012bbc:	2f00      	cmp	r7, #0
 8012bbe:	d042      	beq.n	8012c46 <rcl_clock_add_jump_callback+0xbe>
 8012bc0:	2300      	movs	r3, #0
 8012bc2:	4602      	mov	r2, r0
 8012bc4:	e003      	b.n	8012bce <rcl_clock_add_jump_callback+0x46>
 8012bc6:	42bb      	cmp	r3, r7
 8012bc8:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8012bcc:	d011      	beq.n	8012bf2 <rcl_clock_add_jump_callback+0x6a>
 8012bce:	6811      	ldr	r1, [r2, #0]
 8012bd0:	42b1      	cmp	r1, r6
 8012bd2:	f103 0301 	add.w	r3, r3, #1
 8012bd6:	d1f6      	bne.n	8012bc6 <rcl_clock_add_jump_callback+0x3e>
 8012bd8:	6a11      	ldr	r1, [r2, #32]
 8012bda:	42a9      	cmp	r1, r5
 8012bdc:	d1f3      	bne.n	8012bc6 <rcl_clock_add_jump_callback+0x3e>
 8012bde:	f04f 0e01 	mov.w	lr, #1
 8012be2:	e001      	b.n	8012be8 <rcl_clock_add_jump_callback+0x60>
 8012be4:	f04f 0e0b 	mov.w	lr, #11
 8012be8:	4670      	mov	r0, lr
 8012bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012bee:	b002      	add	sp, #8
 8012bf0:	4770      	bx	lr
 8012bf2:	3301      	adds	r3, #1
 8012bf4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8012bf8:	00d9      	lsls	r1, r3, #3
 8012bfa:	69e3      	ldr	r3, [r4, #28]
 8012bfc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8012bfe:	4798      	blx	r3
 8012c00:	b1f0      	cbz	r0, 8012c40 <rcl_clock_add_jump_callback+0xb8>
 8012c02:	68a3      	ldr	r3, [r4, #8]
 8012c04:	6060      	str	r0, [r4, #4]
 8012c06:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8012c0a:	f10d 0c18 	add.w	ip, sp, #24
 8012c0e:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8012c12:	f103 0801 	add.w	r8, r3, #1
 8012c16:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8012c1a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012c1e:	f106 0708 	add.w	r7, r6, #8
 8012c22:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012c24:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8012c28:	f04f 0e00 	mov.w	lr, #0
 8012c2c:	e887 0003 	stmia.w	r7, {r0, r1}
 8012c30:	6235      	str	r5, [r6, #32]
 8012c32:	4670      	mov	r0, lr
 8012c34:	f8c4 8008 	str.w	r8, [r4, #8]
 8012c38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c3c:	b002      	add	sp, #8
 8012c3e:	4770      	bx	lr
 8012c40:	f04f 0e0a 	mov.w	lr, #10
 8012c44:	e7d0      	b.n	8012be8 <rcl_clock_add_jump_callback+0x60>
 8012c46:	2128      	movs	r1, #40	@ 0x28
 8012c48:	e7d7      	b.n	8012bfa <rcl_clock_add_jump_callback+0x72>
 8012c4a:	bf00      	nop

08012c4c <rcl_clock_remove_jump_callback>:
 8012c4c:	2800      	cmp	r0, #0
 8012c4e:	d057      	beq.n	8012d00 <rcl_clock_remove_jump_callback+0xb4>
 8012c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c54:	4605      	mov	r5, r0
 8012c56:	3014      	adds	r0, #20
 8012c58:	4688      	mov	r8, r1
 8012c5a:	4692      	mov	sl, r2
 8012c5c:	f7f8 ff2a 	bl	800bab4 <rcutils_allocator_is_valid>
 8012c60:	2800      	cmp	r0, #0
 8012c62:	d03b      	beq.n	8012cdc <rcl_clock_remove_jump_callback+0x90>
 8012c64:	f1b8 0f00 	cmp.w	r8, #0
 8012c68:	d038      	beq.n	8012cdc <rcl_clock_remove_jump_callback+0x90>
 8012c6a:	68ae      	ldr	r6, [r5, #8]
 8012c6c:	b166      	cbz	r6, 8012c88 <rcl_clock_remove_jump_callback+0x3c>
 8012c6e:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8012c72:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8012c76:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 8012c7a:	464c      	mov	r4, r9
 8012c7c:	6823      	ldr	r3, [r4, #0]
 8012c7e:	4543      	cmp	r3, r8
 8012c80:	d005      	beq.n	8012c8e <rcl_clock_remove_jump_callback+0x42>
 8012c82:	3428      	adds	r4, #40	@ 0x28
 8012c84:	42a7      	cmp	r7, r4
 8012c86:	d1f9      	bne.n	8012c7c <rcl_clock_remove_jump_callback+0x30>
 8012c88:	2001      	movs	r0, #1
 8012c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c8e:	6a23      	ldr	r3, [r4, #32]
 8012c90:	3428      	adds	r4, #40	@ 0x28
 8012c92:	42bc      	cmp	r4, r7
 8012c94:	d02d      	beq.n	8012cf2 <rcl_clock_remove_jump_callback+0xa6>
 8012c96:	4553      	cmp	r3, sl
 8012c98:	d1f0      	bne.n	8012c7c <rcl_clock_remove_jump_callback+0x30>
 8012c9a:	46a6      	mov	lr, r4
 8012c9c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012ca0:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8012ca4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012ca8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012cac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012cb0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012cb4:	3428      	adds	r4, #40	@ 0x28
 8012cb6:	42a7      	cmp	r7, r4
 8012cb8:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012cbc:	d1ed      	bne.n	8012c9a <rcl_clock_remove_jump_callback+0x4e>
 8012cbe:	3e01      	subs	r6, #1
 8012cc0:	60ae      	str	r6, [r5, #8]
 8012cc2:	b176      	cbz	r6, 8012ce2 <rcl_clock_remove_jump_callback+0x96>
 8012cc4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8012cc8:	69eb      	ldr	r3, [r5, #28]
 8012cca:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8012ccc:	00f1      	lsls	r1, r6, #3
 8012cce:	4648      	mov	r0, r9
 8012cd0:	4798      	blx	r3
 8012cd2:	b1b8      	cbz	r0, 8012d04 <rcl_clock_remove_jump_callback+0xb8>
 8012cd4:	6068      	str	r0, [r5, #4]
 8012cd6:	2000      	movs	r0, #0
 8012cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cdc:	200b      	movs	r0, #11
 8012cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ce2:	4648      	mov	r0, r9
 8012ce4:	69ab      	ldr	r3, [r5, #24]
 8012ce6:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8012ce8:	4798      	blx	r3
 8012cea:	606e      	str	r6, [r5, #4]
 8012cec:	4630      	mov	r0, r6
 8012cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cf2:	4553      	cmp	r3, sl
 8012cf4:	d1c8      	bne.n	8012c88 <rcl_clock_remove_jump_callback+0x3c>
 8012cf6:	3e01      	subs	r6, #1
 8012cf8:	60ae      	str	r6, [r5, #8]
 8012cfa:	2e00      	cmp	r6, #0
 8012cfc:	d1e2      	bne.n	8012cc4 <rcl_clock_remove_jump_callback+0x78>
 8012cfe:	e7f0      	b.n	8012ce2 <rcl_clock_remove_jump_callback+0x96>
 8012d00:	200b      	movs	r0, #11
 8012d02:	4770      	bx	lr
 8012d04:	200a      	movs	r0, #10
 8012d06:	e7ea      	b.n	8012cde <rcl_clock_remove_jump_callback+0x92>

08012d08 <_rcl_timer_time_jump>:
 8012d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d0c:	4605      	mov	r5, r0
 8012d0e:	b084      	sub	sp, #16
 8012d10:	4614      	mov	r4, r2
 8012d12:	b131      	cbz	r1, 8012d22 <_rcl_timer_time_jump+0x1a>
 8012d14:	7803      	ldrb	r3, [r0, #0]
 8012d16:	3b02      	subs	r3, #2
 8012d18:	2b01      	cmp	r3, #1
 8012d1a:	d93f      	bls.n	8012d9c <_rcl_timer_time_jump+0x94>
 8012d1c:	b004      	add	sp, #16
 8012d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d22:	6813      	ldr	r3, [r2, #0]
 8012d24:	a902      	add	r1, sp, #8
 8012d26:	6818      	ldr	r0, [r3, #0]
 8012d28:	f7ff ff22 	bl	8012b70 <rcl_clock_get_now>
 8012d2c:	2800      	cmp	r0, #0
 8012d2e:	d1f5      	bne.n	8012d1c <_rcl_timer_time_jump+0x14>
 8012d30:	6820      	ldr	r0, [r4, #0]
 8012d32:	2105      	movs	r1, #5
 8012d34:	3020      	adds	r0, #32
 8012d36:	f001 fdf7 	bl	8014928 <__atomic_load_8>
 8012d3a:	6823      	ldr	r3, [r4, #0]
 8012d3c:	4681      	mov	r9, r0
 8012d3e:	4688      	mov	r8, r1
 8012d40:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8012d44:	2105      	movs	r1, #5
 8012d46:	f001 fdef 	bl	8014928 <__atomic_load_8>
 8012d4a:	4607      	mov	r7, r0
 8012d4c:	6820      	ldr	r0, [r4, #0]
 8012d4e:	460e      	mov	r6, r1
 8012d50:	3018      	adds	r0, #24
 8012d52:	2105      	movs	r1, #5
 8012d54:	f001 fde8 	bl	8014928 <__atomic_load_8>
 8012d58:	782b      	ldrb	r3, [r5, #0]
 8012d5a:	9a02      	ldr	r2, [sp, #8]
 8012d5c:	3b02      	subs	r3, #2
 8012d5e:	2b01      	cmp	r3, #1
 8012d60:	460d      	mov	r5, r1
 8012d62:	9b03      	ldr	r3, [sp, #12]
 8012d64:	4682      	mov	sl, r0
 8012d66:	d937      	bls.n	8012dd8 <_rcl_timer_time_jump+0xd0>
 8012d68:	42ba      	cmp	r2, r7
 8012d6a:	eb73 0106 	sbcs.w	r1, r3, r6
 8012d6e:	da5f      	bge.n	8012e30 <_rcl_timer_time_jump+0x128>
 8012d70:	454a      	cmp	r2, r9
 8012d72:	eb73 0108 	sbcs.w	r1, r3, r8
 8012d76:	dad1      	bge.n	8012d1c <_rcl_timer_time_jump+0x14>
 8012d78:	6820      	ldr	r0, [r4, #0]
 8012d7a:	eb1a 0202 	adds.w	r2, sl, r2
 8012d7e:	eb43 0305 	adc.w	r3, r3, r5
 8012d82:	2505      	movs	r5, #5
 8012d84:	3028      	adds	r0, #40	@ 0x28
 8012d86:	9500      	str	r5, [sp, #0]
 8012d88:	f001 fe04 	bl	8014994 <__atomic_store_8>
 8012d8c:	6820      	ldr	r0, [r4, #0]
 8012d8e:	9500      	str	r5, [sp, #0]
 8012d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012d94:	3020      	adds	r0, #32
 8012d96:	f001 fdfd 	bl	8014994 <__atomic_store_8>
 8012d9a:	e7bf      	b.n	8012d1c <_rcl_timer_time_jump+0x14>
 8012d9c:	6813      	ldr	r3, [r2, #0]
 8012d9e:	a902      	add	r1, sp, #8
 8012da0:	6818      	ldr	r0, [r3, #0]
 8012da2:	f7ff fee5 	bl	8012b70 <rcl_clock_get_now>
 8012da6:	2800      	cmp	r0, #0
 8012da8:	d1b8      	bne.n	8012d1c <_rcl_timer_time_jump+0x14>
 8012daa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012dae:	4313      	orrs	r3, r2
 8012db0:	d0b4      	beq.n	8012d1c <_rcl_timer_time_jump+0x14>
 8012db2:	6820      	ldr	r0, [r4, #0]
 8012db4:	2105      	movs	r1, #5
 8012db6:	3028      	adds	r0, #40	@ 0x28
 8012db8:	f001 fdb6 	bl	8014928 <__atomic_load_8>
 8012dbc:	9d02      	ldr	r5, [sp, #8]
 8012dbe:	9b03      	ldr	r3, [sp, #12]
 8012dc0:	4602      	mov	r2, r0
 8012dc2:	6820      	ldr	r0, [r4, #0]
 8012dc4:	1b52      	subs	r2, r2, r5
 8012dc6:	f04f 0405 	mov.w	r4, #5
 8012dca:	9400      	str	r4, [sp, #0]
 8012dcc:	eb61 0303 	sbc.w	r3, r1, r3
 8012dd0:	3030      	adds	r0, #48	@ 0x30
 8012dd2:	f001 fddf 	bl	8014994 <__atomic_store_8>
 8012dd6:	e7a1      	b.n	8012d1c <_rcl_timer_time_jump+0x14>
 8012dd8:	4313      	orrs	r3, r2
 8012dda:	d09f      	beq.n	8012d1c <_rcl_timer_time_jump+0x14>
 8012ddc:	6820      	ldr	r0, [r4, #0]
 8012dde:	f04f 0805 	mov.w	r8, #5
 8012de2:	2300      	movs	r3, #0
 8012de4:	f8cd 8000 	str.w	r8, [sp]
 8012de8:	3030      	adds	r0, #48	@ 0x30
 8012dea:	2200      	movs	r2, #0
 8012dec:	f001 fe08 	bl	8014a00 <__atomic_exchange_8>
 8012df0:	ea51 0300 	orrs.w	r3, r1, r0
 8012df4:	4606      	mov	r6, r0
 8012df6:	460f      	mov	r7, r1
 8012df8:	d090      	beq.n	8012d1c <_rcl_timer_time_jump+0x14>
 8012dfa:	9a02      	ldr	r2, [sp, #8]
 8012dfc:	9b03      	ldr	r3, [sp, #12]
 8012dfe:	f8cd 8000 	str.w	r8, [sp]
 8012e02:	1a12      	subs	r2, r2, r0
 8012e04:	6820      	ldr	r0, [r4, #0]
 8012e06:	eb63 0301 	sbc.w	r3, r3, r1
 8012e0a:	eb12 020a 	adds.w	r2, r2, sl
 8012e0e:	eb43 0305 	adc.w	r3, r3, r5
 8012e12:	3028      	adds	r0, #40	@ 0x28
 8012e14:	f001 fdbe 	bl	8014994 <__atomic_store_8>
 8012e18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012e1c:	f8cd 8000 	str.w	r8, [sp]
 8012e20:	6820      	ldr	r0, [r4, #0]
 8012e22:	1b92      	subs	r2, r2, r6
 8012e24:	eb63 0307 	sbc.w	r3, r3, r7
 8012e28:	3020      	adds	r0, #32
 8012e2a:	f001 fdb3 	bl	8014994 <__atomic_store_8>
 8012e2e:	e775      	b.n	8012d1c <_rcl_timer_time_jump+0x14>
 8012e30:	6820      	ldr	r0, [r4, #0]
 8012e32:	3008      	adds	r0, #8
 8012e34:	f004 f99e 	bl	8017174 <rcl_trigger_guard_condition>
 8012e38:	e770      	b.n	8012d1c <_rcl_timer_time_jump+0x14>
 8012e3a:	bf00      	nop

08012e3c <rcl_get_zero_initialized_timer>:
 8012e3c:	4b01      	ldr	r3, [pc, #4]	@ (8012e44 <rcl_get_zero_initialized_timer+0x8>)
 8012e3e:	6818      	ldr	r0, [r3, #0]
 8012e40:	4770      	bx	lr
 8012e42:	bf00      	nop
 8012e44:	080192c0 	.word	0x080192c0

08012e48 <rcl_timer_init>:
 8012e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e4c:	b0aa      	sub	sp, #168	@ 0xa8
 8012e4e:	4604      	mov	r4, r0
 8012e50:	a835      	add	r0, sp, #212	@ 0xd4
 8012e52:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 8012e56:	460d      	mov	r5, r1
 8012e58:	4692      	mov	sl, r2
 8012e5a:	f7f8 fe2b 	bl	800bab4 <rcutils_allocator_is_valid>
 8012e5e:	2800      	cmp	r0, #0
 8012e60:	d064      	beq.n	8012f2c <rcl_timer_init+0xe4>
 8012e62:	2c00      	cmp	r4, #0
 8012e64:	d062      	beq.n	8012f2c <rcl_timer_init+0xe4>
 8012e66:	2d00      	cmp	r5, #0
 8012e68:	d060      	beq.n	8012f2c <rcl_timer_init+0xe4>
 8012e6a:	2f00      	cmp	r7, #0
 8012e6c:	db5e      	blt.n	8012f2c <rcl_timer_init+0xe4>
 8012e6e:	6823      	ldr	r3, [r4, #0]
 8012e70:	b123      	cbz	r3, 8012e7c <rcl_timer_init+0x34>
 8012e72:	2664      	movs	r6, #100	@ 0x64
 8012e74:	4630      	mov	r0, r6
 8012e76:	b02a      	add	sp, #168	@ 0xa8
 8012e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e7c:	a908      	add	r1, sp, #32
 8012e7e:	4628      	mov	r0, r5
 8012e80:	f7ff fe76 	bl	8012b70 <rcl_clock_get_now>
 8012e84:	4606      	mov	r6, r0
 8012e86:	2800      	cmp	r0, #0
 8012e88:	d1f4      	bne.n	8012e74 <rcl_timer_init+0x2c>
 8012e8a:	ae06      	add	r6, sp, #24
 8012e8c:	4630      	mov	r0, r6
 8012e8e:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 8012e92:	f004 f877 	bl	8016f84 <rcl_get_zero_initialized_guard_condition>
 8012e96:	e896 0003 	ldmia.w	r6, {r0, r1}
 8012e9a:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 8012e9e:	ae0b      	add	r6, sp, #44	@ 0x2c
 8012ea0:	e889 0003 	stmia.w	r9, {r0, r1}
 8012ea4:	4630      	mov	r0, r6
 8012ea6:	f004 f949 	bl	801713c <rcl_guard_condition_get_default_options>
 8012eaa:	ab0d      	add	r3, sp, #52	@ 0x34
 8012eac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012eb0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012eb4:	4651      	mov	r1, sl
 8012eb6:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012eba:	4648      	mov	r0, r9
 8012ebc:	f004 f86c 	bl	8016f98 <rcl_guard_condition_init>
 8012ec0:	4606      	mov	r6, r0
 8012ec2:	2800      	cmp	r0, #0
 8012ec4:	d1d6      	bne.n	8012e74 <rcl_timer_init+0x2c>
 8012ec6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012ec8:	781b      	ldrb	r3, [r3, #0]
 8012eca:	2b01      	cmp	r3, #1
 8012ecc:	d033      	beq.n	8012f36 <rcl_timer_init+0xee>
 8012ece:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8012ed0:	911a      	str	r1, [sp, #104]	@ 0x68
 8012ed2:	4642      	mov	r2, r8
 8012ed4:	463b      	mov	r3, r7
 8012ed6:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8012eda:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012ede:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8012f90 <rcl_timer_init+0x148>
 8012ee2:	eb12 0008 	adds.w	r0, r2, r8
 8012ee6:	eb47 0103 	adc.w	r1, r7, r3
 8012eea:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 8012eee:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8012ef2:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8012ef6:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8012efa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012efe:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8012f02:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012f06:	f8de 3000 	ldr.w	r3, [lr]
 8012f0a:	f8cc 3000 	str.w	r3, [ip]
 8012f0e:	f04f 0a00 	mov.w	sl, #0
 8012f12:	4619      	mov	r1, r3
 8012f14:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8012f18:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8012f1a:	2050      	movs	r0, #80	@ 0x50
 8012f1c:	4798      	blx	r3
 8012f1e:	6020      	str	r0, [r4, #0]
 8012f20:	b358      	cbz	r0, 8012f7a <rcl_timer_init+0x132>
 8012f22:	2250      	movs	r2, #80	@ 0x50
 8012f24:	a916      	add	r1, sp, #88	@ 0x58
 8012f26:	f004 ff20 	bl	8017d6a <memcpy>
 8012f2a:	e7a3      	b.n	8012e74 <rcl_timer_init+0x2c>
 8012f2c:	260b      	movs	r6, #11
 8012f2e:	4630      	mov	r0, r6
 8012f30:	b02a      	add	sp, #168	@ 0xa8
 8012f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f36:	2001      	movs	r0, #1
 8012f38:	2100      	movs	r1, #0
 8012f3a:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8012f3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012f42:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8012f46:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8012f4a:	4a13      	ldr	r2, [pc, #76]	@ (8012f98 <rcl_timer_init+0x150>)
 8012f4c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8012f50:	9405      	str	r4, [sp, #20]
 8012f52:	9204      	str	r2, [sp, #16]
 8012f54:	ab12      	add	r3, sp, #72	@ 0x48
 8012f56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012f58:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8012f5c:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8012f60:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8012f64:	4628      	mov	r0, r5
 8012f66:	f7ff fe0f 	bl	8012b88 <rcl_clock_add_jump_callback>
 8012f6a:	4682      	mov	sl, r0
 8012f6c:	2800      	cmp	r0, #0
 8012f6e:	d0ae      	beq.n	8012ece <rcl_timer_init+0x86>
 8012f70:	4648      	mov	r0, r9
 8012f72:	f004 f8bd 	bl	80170f0 <rcl_guard_condition_fini>
 8012f76:	4656      	mov	r6, sl
 8012f78:	e77c      	b.n	8012e74 <rcl_timer_init+0x2c>
 8012f7a:	4648      	mov	r0, r9
 8012f7c:	f004 f8b8 	bl	80170f0 <rcl_guard_condition_fini>
 8012f80:	4905      	ldr	r1, [pc, #20]	@ (8012f98 <rcl_timer_init+0x150>)
 8012f82:	4622      	mov	r2, r4
 8012f84:	4628      	mov	r0, r5
 8012f86:	f7ff fe61 	bl	8012c4c <rcl_clock_remove_jump_callback>
 8012f8a:	260a      	movs	r6, #10
 8012f8c:	e772      	b.n	8012e74 <rcl_timer_init+0x2c>
 8012f8e:	bf00      	nop
	...
 8012f98:	08012d09 	.word	0x08012d09

08012f9c <rcl_timer_call>:
 8012f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fa0:	b087      	sub	sp, #28
 8012fa2:	2800      	cmp	r0, #0
 8012fa4:	d06d      	beq.n	8013082 <rcl_timer_call+0xe6>
 8012fa6:	6803      	ldr	r3, [r0, #0]
 8012fa8:	4604      	mov	r4, r0
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d063      	beq.n	8013076 <rcl_timer_call+0xda>
 8012fae:	f3bf 8f5b 	dmb	ish
 8012fb2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8012fb6:	f3bf 8f5b 	dmb	ish
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d150      	bne.n	8013060 <rcl_timer_call+0xc4>
 8012fbe:	6803      	ldr	r3, [r0, #0]
 8012fc0:	a904      	add	r1, sp, #16
 8012fc2:	6818      	ldr	r0, [r3, #0]
 8012fc4:	f7ff fdd4 	bl	8012b70 <rcl_clock_get_now>
 8012fc8:	4605      	mov	r5, r0
 8012fca:	2800      	cmp	r0, #0
 8012fcc:	d14a      	bne.n	8013064 <rcl_timer_call+0xc8>
 8012fce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	db4a      	blt.n	801306c <rcl_timer_call+0xd0>
 8012fd6:	6820      	ldr	r0, [r4, #0]
 8012fd8:	f04f 0a05 	mov.w	sl, #5
 8012fdc:	f8cd a000 	str.w	sl, [sp]
 8012fe0:	3020      	adds	r0, #32
 8012fe2:	f001 fd0d 	bl	8014a00 <__atomic_exchange_8>
 8012fe6:	6823      	ldr	r3, [r4, #0]
 8012fe8:	f3bf 8f5b 	dmb	ish
 8012fec:	4680      	mov	r8, r0
 8012fee:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8012ff2:	f3bf 8f5b 	dmb	ish
 8012ff6:	6820      	ldr	r0, [r4, #0]
 8012ff8:	4689      	mov	r9, r1
 8012ffa:	3028      	adds	r0, #40	@ 0x28
 8012ffc:	4651      	mov	r1, sl
 8012ffe:	f001 fc93 	bl	8014928 <__atomic_load_8>
 8013002:	4606      	mov	r6, r0
 8013004:	6820      	ldr	r0, [r4, #0]
 8013006:	460f      	mov	r7, r1
 8013008:	3018      	adds	r0, #24
 801300a:	4651      	mov	r1, sl
 801300c:	f001 fc8c 	bl	8014928 <__atomic_load_8>
 8013010:	1836      	adds	r6, r6, r0
 8013012:	4602      	mov	r2, r0
 8013014:	4682      	mov	sl, r0
 8013016:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 801301a:	eb47 0701 	adc.w	r7, r7, r1
 801301e:	4286      	cmp	r6, r0
 8013020:	460b      	mov	r3, r1
 8013022:	eb77 010c 	sbcs.w	r1, r7, ip
 8013026:	da04      	bge.n	8013032 <rcl_timer_call+0x96>
 8013028:	ea53 0102 	orrs.w	r1, r3, r2
 801302c:	d12e      	bne.n	801308c <rcl_timer_call+0xf0>
 801302e:	4606      	mov	r6, r0
 8013030:	4667      	mov	r7, ip
 8013032:	6820      	ldr	r0, [r4, #0]
 8013034:	2105      	movs	r1, #5
 8013036:	4632      	mov	r2, r6
 8013038:	463b      	mov	r3, r7
 801303a:	3028      	adds	r0, #40	@ 0x28
 801303c:	9100      	str	r1, [sp, #0]
 801303e:	f001 fca9 	bl	8014994 <__atomic_store_8>
 8013042:	f1bb 0f00 	cmp.w	fp, #0
 8013046:	d00d      	beq.n	8013064 <rcl_timer_call+0xc8>
 8013048:	9a04      	ldr	r2, [sp, #16]
 801304a:	9b05      	ldr	r3, [sp, #20]
 801304c:	ebb2 0208 	subs.w	r2, r2, r8
 8013050:	4620      	mov	r0, r4
 8013052:	eb63 0309 	sbc.w	r3, r3, r9
 8013056:	47d8      	blx	fp
 8013058:	4628      	mov	r0, r5
 801305a:	b007      	add	sp, #28
 801305c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013060:	f240 3521 	movw	r5, #801	@ 0x321
 8013064:	4628      	mov	r0, r5
 8013066:	b007      	add	sp, #28
 8013068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801306c:	2501      	movs	r5, #1
 801306e:	4628      	mov	r0, r5
 8013070:	b007      	add	sp, #28
 8013072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013076:	f44f 7548 	mov.w	r5, #800	@ 0x320
 801307a:	4628      	mov	r0, r5
 801307c:	b007      	add	sp, #28
 801307e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013082:	250b      	movs	r5, #11
 8013084:	4628      	mov	r0, r5
 8013086:	b007      	add	sp, #28
 8013088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801308c:	1b80      	subs	r0, r0, r6
 801308e:	eb6c 0107 	sbc.w	r1, ip, r7
 8013092:	3801      	subs	r0, #1
 8013094:	f161 0100 	sbc.w	r1, r1, #0
 8013098:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801309c:	f7ed fd16 	bl	8000acc <__aeabi_ldivmod>
 80130a0:	9b02      	ldr	r3, [sp, #8]
 80130a2:	3001      	adds	r0, #1
 80130a4:	f141 0100 	adc.w	r1, r1, #0
 80130a8:	fb00 f303 	mul.w	r3, r0, r3
 80130ac:	fb01 330a 	mla	r3, r1, sl, r3
 80130b0:	fba0 0a0a 	umull	r0, sl, r0, sl
 80130b4:	1986      	adds	r6, r0, r6
 80130b6:	4453      	add	r3, sl
 80130b8:	eb43 0707 	adc.w	r7, r3, r7
 80130bc:	e7b9      	b.n	8013032 <rcl_timer_call+0x96>
 80130be:	bf00      	nop

080130c0 <rcl_timer_is_ready>:
 80130c0:	b570      	push	{r4, r5, r6, lr}
 80130c2:	b082      	sub	sp, #8
 80130c4:	b378      	cbz	r0, 8013126 <rcl_timer_is_ready+0x66>
 80130c6:	6803      	ldr	r3, [r0, #0]
 80130c8:	4604      	mov	r4, r0
 80130ca:	b383      	cbz	r3, 801312e <rcl_timer_is_ready+0x6e>
 80130cc:	460d      	mov	r5, r1
 80130ce:	b351      	cbz	r1, 8013126 <rcl_timer_is_ready+0x66>
 80130d0:	f3bf 8f5b 	dmb	ish
 80130d4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80130d8:	f3bf 8f5b 	dmb	ish
 80130dc:	b953      	cbnz	r3, 80130f4 <rcl_timer_is_ready+0x34>
 80130de:	6803      	ldr	r3, [r0, #0]
 80130e0:	4669      	mov	r1, sp
 80130e2:	6818      	ldr	r0, [r3, #0]
 80130e4:	f7ff fd44 	bl	8012b70 <rcl_clock_get_now>
 80130e8:	4606      	mov	r6, r0
 80130ea:	b140      	cbz	r0, 80130fe <rcl_timer_is_ready+0x3e>
 80130ec:	f240 3321 	movw	r3, #801	@ 0x321
 80130f0:	4298      	cmp	r0, r3
 80130f2:	d101      	bne.n	80130f8 <rcl_timer_is_ready+0x38>
 80130f4:	2600      	movs	r6, #0
 80130f6:	702e      	strb	r6, [r5, #0]
 80130f8:	4630      	mov	r0, r6
 80130fa:	b002      	add	sp, #8
 80130fc:	bd70      	pop	{r4, r5, r6, pc}
 80130fe:	6820      	ldr	r0, [r4, #0]
 8013100:	2105      	movs	r1, #5
 8013102:	3028      	adds	r0, #40	@ 0x28
 8013104:	f001 fc10 	bl	8014928 <__atomic_load_8>
 8013108:	9b00      	ldr	r3, [sp, #0]
 801310a:	1ac0      	subs	r0, r0, r3
 801310c:	9b01      	ldr	r3, [sp, #4]
 801310e:	eb61 0103 	sbc.w	r1, r1, r3
 8013112:	2801      	cmp	r0, #1
 8013114:	f171 0300 	sbcs.w	r3, r1, #0
 8013118:	bfb4      	ite	lt
 801311a:	2301      	movlt	r3, #1
 801311c:	2300      	movge	r3, #0
 801311e:	4630      	mov	r0, r6
 8013120:	702b      	strb	r3, [r5, #0]
 8013122:	b002      	add	sp, #8
 8013124:	bd70      	pop	{r4, r5, r6, pc}
 8013126:	260b      	movs	r6, #11
 8013128:	4630      	mov	r0, r6
 801312a:	b002      	add	sp, #8
 801312c:	bd70      	pop	{r4, r5, r6, pc}
 801312e:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8013132:	e7e1      	b.n	80130f8 <rcl_timer_is_ready+0x38>

08013134 <rcl_timer_get_time_until_next_call>:
 8013134:	b570      	push	{r4, r5, r6, lr}
 8013136:	b082      	sub	sp, #8
 8013138:	b330      	cbz	r0, 8013188 <rcl_timer_get_time_until_next_call+0x54>
 801313a:	6803      	ldr	r3, [r0, #0]
 801313c:	4604      	mov	r4, r0
 801313e:	b33b      	cbz	r3, 8013190 <rcl_timer_get_time_until_next_call+0x5c>
 8013140:	460d      	mov	r5, r1
 8013142:	b309      	cbz	r1, 8013188 <rcl_timer_get_time_until_next_call+0x54>
 8013144:	f3bf 8f5b 	dmb	ish
 8013148:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801314c:	f3bf 8f5b 	dmb	ish
 8013150:	b9ab      	cbnz	r3, 801317e <rcl_timer_get_time_until_next_call+0x4a>
 8013152:	6803      	ldr	r3, [r0, #0]
 8013154:	4669      	mov	r1, sp
 8013156:	6818      	ldr	r0, [r3, #0]
 8013158:	f7ff fd0a 	bl	8012b70 <rcl_clock_get_now>
 801315c:	4606      	mov	r6, r0
 801315e:	b958      	cbnz	r0, 8013178 <rcl_timer_get_time_until_next_call+0x44>
 8013160:	6820      	ldr	r0, [r4, #0]
 8013162:	2105      	movs	r1, #5
 8013164:	3028      	adds	r0, #40	@ 0x28
 8013166:	f001 fbdf 	bl	8014928 <__atomic_load_8>
 801316a:	9b00      	ldr	r3, [sp, #0]
 801316c:	1ac0      	subs	r0, r0, r3
 801316e:	9b01      	ldr	r3, [sp, #4]
 8013170:	6028      	str	r0, [r5, #0]
 8013172:	eb61 0103 	sbc.w	r1, r1, r3
 8013176:	6069      	str	r1, [r5, #4]
 8013178:	4630      	mov	r0, r6
 801317a:	b002      	add	sp, #8
 801317c:	bd70      	pop	{r4, r5, r6, pc}
 801317e:	f240 3621 	movw	r6, #801	@ 0x321
 8013182:	4630      	mov	r0, r6
 8013184:	b002      	add	sp, #8
 8013186:	bd70      	pop	{r4, r5, r6, pc}
 8013188:	260b      	movs	r6, #11
 801318a:	4630      	mov	r0, r6
 801318c:	b002      	add	sp, #8
 801318e:	bd70      	pop	{r4, r5, r6, pc}
 8013190:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8013194:	e7f0      	b.n	8013178 <rcl_timer_get_time_until_next_call+0x44>
 8013196:	bf00      	nop

08013198 <rcl_timer_get_guard_condition>:
 8013198:	b130      	cbz	r0, 80131a8 <rcl_timer_get_guard_condition+0x10>
 801319a:	6800      	ldr	r0, [r0, #0]
 801319c:	b120      	cbz	r0, 80131a8 <rcl_timer_get_guard_condition+0x10>
 801319e:	68c3      	ldr	r3, [r0, #12]
 80131a0:	b10b      	cbz	r3, 80131a6 <rcl_timer_get_guard_condition+0xe>
 80131a2:	3008      	adds	r0, #8
 80131a4:	4770      	bx	lr
 80131a6:	4618      	mov	r0, r3
 80131a8:	4770      	bx	lr
 80131aa:	bf00      	nop

080131ac <rcl_validate_enclave_name_with_size>:
 80131ac:	b378      	cbz	r0, 801320e <rcl_validate_enclave_name_with_size+0x62>
 80131ae:	b570      	push	{r4, r5, r6, lr}
 80131b0:	4615      	mov	r5, r2
 80131b2:	b0c2      	sub	sp, #264	@ 0x108
 80131b4:	b302      	cbz	r2, 80131f8 <rcl_validate_enclave_name_with_size+0x4c>
 80131b6:	461e      	mov	r6, r3
 80131b8:	466a      	mov	r2, sp
 80131ba:	ab01      	add	r3, sp, #4
 80131bc:	460c      	mov	r4, r1
 80131be:	f002 f835 	bl	801522c <rmw_validate_namespace_with_size>
 80131c2:	4684      	mov	ip, r0
 80131c4:	b9e8      	cbnz	r0, 8013202 <rcl_validate_enclave_name_with_size+0x56>
 80131c6:	9b00      	ldr	r3, [sp, #0]
 80131c8:	b923      	cbnz	r3, 80131d4 <rcl_validate_enclave_name_with_size+0x28>
 80131ca:	2300      	movs	r3, #0
 80131cc:	602b      	str	r3, [r5, #0]
 80131ce:	4660      	mov	r0, ip
 80131d0:	b042      	add	sp, #264	@ 0x108
 80131d2:	bd70      	pop	{r4, r5, r6, pc}
 80131d4:	2b07      	cmp	r3, #7
 80131d6:	d007      	beq.n	80131e8 <rcl_validate_enclave_name_with_size+0x3c>
 80131d8:	1e5a      	subs	r2, r3, #1
 80131da:	2a05      	cmp	r2, #5
 80131dc:	d833      	bhi.n	8013246 <rcl_validate_enclave_name_with_size+0x9a>
 80131de:	e8df f002 	tbb	[pc, r2]
 80131e2:	2c2f      	.short	0x2c2f
 80131e4:	1a232629 	.word	0x1a232629
 80131e8:	2cff      	cmp	r4, #255	@ 0xff
 80131ea:	d9ee      	bls.n	80131ca <rcl_validate_enclave_name_with_size+0x1e>
 80131ec:	602b      	str	r3, [r5, #0]
 80131ee:	2e00      	cmp	r6, #0
 80131f0:	d0ed      	beq.n	80131ce <rcl_validate_enclave_name_with_size+0x22>
 80131f2:	23fe      	movs	r3, #254	@ 0xfe
 80131f4:	6033      	str	r3, [r6, #0]
 80131f6:	e7ea      	b.n	80131ce <rcl_validate_enclave_name_with_size+0x22>
 80131f8:	f04f 0c0b 	mov.w	ip, #11
 80131fc:	4660      	mov	r0, ip
 80131fe:	b042      	add	sp, #264	@ 0x108
 8013200:	bd70      	pop	{r4, r5, r6, pc}
 8013202:	f7fe fd87 	bl	8011d14 <rcl_convert_rmw_ret_to_rcl_ret>
 8013206:	4684      	mov	ip, r0
 8013208:	4660      	mov	r0, ip
 801320a:	b042      	add	sp, #264	@ 0x108
 801320c:	bd70      	pop	{r4, r5, r6, pc}
 801320e:	f04f 0c0b 	mov.w	ip, #11
 8013212:	4660      	mov	r0, ip
 8013214:	4770      	bx	lr
 8013216:	2306      	movs	r3, #6
 8013218:	602b      	str	r3, [r5, #0]
 801321a:	2e00      	cmp	r6, #0
 801321c:	d0d7      	beq.n	80131ce <rcl_validate_enclave_name_with_size+0x22>
 801321e:	9b01      	ldr	r3, [sp, #4]
 8013220:	6033      	str	r3, [r6, #0]
 8013222:	4660      	mov	r0, ip
 8013224:	b042      	add	sp, #264	@ 0x108
 8013226:	bd70      	pop	{r4, r5, r6, pc}
 8013228:	2305      	movs	r3, #5
 801322a:	602b      	str	r3, [r5, #0]
 801322c:	e7f5      	b.n	801321a <rcl_validate_enclave_name_with_size+0x6e>
 801322e:	2304      	movs	r3, #4
 8013230:	602b      	str	r3, [r5, #0]
 8013232:	e7f2      	b.n	801321a <rcl_validate_enclave_name_with_size+0x6e>
 8013234:	2303      	movs	r3, #3
 8013236:	602b      	str	r3, [r5, #0]
 8013238:	e7ef      	b.n	801321a <rcl_validate_enclave_name_with_size+0x6e>
 801323a:	2302      	movs	r3, #2
 801323c:	602b      	str	r3, [r5, #0]
 801323e:	e7ec      	b.n	801321a <rcl_validate_enclave_name_with_size+0x6e>
 8013240:	2301      	movs	r3, #1
 8013242:	602b      	str	r3, [r5, #0]
 8013244:	e7e9      	b.n	801321a <rcl_validate_enclave_name_with_size+0x6e>
 8013246:	4a04      	ldr	r2, [pc, #16]	@ (8013258 <rcl_validate_enclave_name_with_size+0xac>)
 8013248:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801324c:	a802      	add	r0, sp, #8
 801324e:	f001 fd25 	bl	8014c9c <rcutils_snprintf>
 8013252:	f04f 0c01 	mov.w	ip, #1
 8013256:	e7ba      	b.n	80131ce <rcl_validate_enclave_name_with_size+0x22>
 8013258:	080192c4 	.word	0x080192c4

0801325c <rcl_validate_enclave_name>:
 801325c:	b168      	cbz	r0, 801327a <rcl_validate_enclave_name+0x1e>
 801325e:	b570      	push	{r4, r5, r6, lr}
 8013260:	460d      	mov	r5, r1
 8013262:	4616      	mov	r6, r2
 8013264:	4604      	mov	r4, r0
 8013266:	f7ec ffe5 	bl	8000234 <strlen>
 801326a:	4633      	mov	r3, r6
 801326c:	4601      	mov	r1, r0
 801326e:	462a      	mov	r2, r5
 8013270:	4620      	mov	r0, r4
 8013272:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013276:	f7ff bf99 	b.w	80131ac <rcl_validate_enclave_name_with_size>
 801327a:	200b      	movs	r0, #11
 801327c:	4770      	bx	lr
 801327e:	bf00      	nop

08013280 <rcl_get_zero_initialized_wait_set>:
 8013280:	b510      	push	{r4, lr}
 8013282:	4c08      	ldr	r4, [pc, #32]	@ (80132a4 <rcl_get_zero_initialized_wait_set+0x24>)
 8013284:	4686      	mov	lr, r0
 8013286:	4684      	mov	ip, r0
 8013288:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801328a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801328e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013290:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013296:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801329a:	6823      	ldr	r3, [r4, #0]
 801329c:	f8cc 3000 	str.w	r3, [ip]
 80132a0:	4670      	mov	r0, lr
 80132a2:	bd10      	pop	{r4, pc}
 80132a4:	08019324 	.word	0x08019324

080132a8 <rcl_wait_set_is_valid>:
 80132a8:	b118      	cbz	r0, 80132b2 <rcl_wait_set_is_valid+0xa>
 80132aa:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80132ac:	3800      	subs	r0, #0
 80132ae:	bf18      	it	ne
 80132b0:	2001      	movne	r0, #1
 80132b2:	4770      	bx	lr

080132b4 <rcl_wait_set_fini>:
 80132b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132b8:	b082      	sub	sp, #8
 80132ba:	2800      	cmp	r0, #0
 80132bc:	f000 8095 	beq.w	80133ea <rcl_wait_set_fini+0x136>
 80132c0:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80132c2:	4604      	mov	r4, r0
 80132c4:	2e00      	cmp	r6, #0
 80132c6:	f000 808c 	beq.w	80133e2 <rcl_wait_set_fini+0x12e>
 80132ca:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 80132cc:	f002 fd68 	bl	8015da0 <rmw_destroy_wait_set>
 80132d0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80132d2:	1e06      	subs	r6, r0, #0
 80132d4:	bf18      	it	ne
 80132d6:	f44f 7661 	movne.w	r6, #900	@ 0x384
 80132da:	2d00      	cmp	r5, #0
 80132dc:	f000 8081 	beq.w	80133e2 <rcl_wait_set_fini+0x12e>
 80132e0:	6820      	ldr	r0, [r4, #0]
 80132e2:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80132e6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80132e8:	2700      	movs	r7, #0
 80132ea:	6067      	str	r7, [r4, #4]
 80132ec:	602f      	str	r7, [r5, #0]
 80132ee:	b120      	cbz	r0, 80132fa <rcl_wait_set_fini+0x46>
 80132f0:	9101      	str	r1, [sp, #4]
 80132f2:	47c0      	blx	r8
 80132f4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80132f6:	9901      	ldr	r1, [sp, #4]
 80132f8:	6027      	str	r7, [r4, #0]
 80132fa:	68a8      	ldr	r0, [r5, #8]
 80132fc:	b120      	cbz	r0, 8013308 <rcl_wait_set_fini+0x54>
 80132fe:	47c0      	blx	r8
 8013300:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013302:	2300      	movs	r3, #0
 8013304:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8013308:	68a0      	ldr	r0, [r4, #8]
 801330a:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801330c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801330e:	f04f 0800 	mov.w	r8, #0
 8013312:	f8c4 800c 	str.w	r8, [r4, #12]
 8013316:	f8c5 800c 	str.w	r8, [r5, #12]
 801331a:	b128      	cbz	r0, 8013328 <rcl_wait_set_fini+0x74>
 801331c:	47b8      	blx	r7
 801331e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013320:	f8c4 8008 	str.w	r8, [r4, #8]
 8013324:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8013326:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013328:	6968      	ldr	r0, [r5, #20]
 801332a:	f04f 0800 	mov.w	r8, #0
 801332e:	f8c5 8010 	str.w	r8, [r5, #16]
 8013332:	b128      	cbz	r0, 8013340 <rcl_wait_set_fini+0x8c>
 8013334:	47b8      	blx	r7
 8013336:	f8c5 8014 	str.w	r8, [r5, #20]
 801333a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801333c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801333e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013340:	6920      	ldr	r0, [r4, #16]
 8013342:	f04f 0800 	mov.w	r8, #0
 8013346:	f8c4 8014 	str.w	r8, [r4, #20]
 801334a:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 801334e:	b128      	cbz	r0, 801335c <rcl_wait_set_fini+0xa8>
 8013350:	47b8      	blx	r7
 8013352:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013354:	f8c4 8010 	str.w	r8, [r4, #16]
 8013358:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801335a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801335c:	69a0      	ldr	r0, [r4, #24]
 801335e:	f04f 0800 	mov.w	r8, #0
 8013362:	f8c4 801c 	str.w	r8, [r4, #28]
 8013366:	f8c5 8018 	str.w	r8, [r5, #24]
 801336a:	b128      	cbz	r0, 8013378 <rcl_wait_set_fini+0xc4>
 801336c:	9101      	str	r1, [sp, #4]
 801336e:	47b8      	blx	r7
 8013370:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013372:	9901      	ldr	r1, [sp, #4]
 8013374:	f8c4 8018 	str.w	r8, [r4, #24]
 8013378:	6a28      	ldr	r0, [r5, #32]
 801337a:	b120      	cbz	r0, 8013386 <rcl_wait_set_fini+0xd2>
 801337c:	47b8      	blx	r7
 801337e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013380:	2300      	movs	r3, #0
 8013382:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8013386:	6a20      	ldr	r0, [r4, #32]
 8013388:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801338c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801338e:	2700      	movs	r7, #0
 8013390:	6267      	str	r7, [r4, #36]	@ 0x24
 8013392:	626f      	str	r7, [r5, #36]	@ 0x24
 8013394:	b120      	cbz	r0, 80133a0 <rcl_wait_set_fini+0xec>
 8013396:	9101      	str	r1, [sp, #4]
 8013398:	47c0      	blx	r8
 801339a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801339c:	9901      	ldr	r1, [sp, #4]
 801339e:	6227      	str	r7, [r4, #32]
 80133a0:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80133a2:	b120      	cbz	r0, 80133ae <rcl_wait_set_fini+0xfa>
 80133a4:	47c0      	blx	r8
 80133a6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80133a8:	2300      	movs	r3, #0
 80133aa:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80133ae:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80133b0:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80133b4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80133b6:	2700      	movs	r7, #0
 80133b8:	62e7      	str	r7, [r4, #44]	@ 0x2c
 80133ba:	632f      	str	r7, [r5, #48]	@ 0x30
 80133bc:	b120      	cbz	r0, 80133c8 <rcl_wait_set_fini+0x114>
 80133be:	9101      	str	r1, [sp, #4]
 80133c0:	47c0      	blx	r8
 80133c2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80133c4:	9901      	ldr	r1, [sp, #4]
 80133c6:	62a7      	str	r7, [r4, #40]	@ 0x28
 80133c8:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80133ca:	b120      	cbz	r0, 80133d6 <rcl_wait_set_fini+0x122>
 80133cc:	47c0      	blx	r8
 80133ce:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80133d0:	2300      	movs	r3, #0
 80133d2:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 80133d6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80133d8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80133da:	4628      	mov	r0, r5
 80133dc:	4798      	blx	r3
 80133de:	2300      	movs	r3, #0
 80133e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80133e2:	4630      	mov	r0, r6
 80133e4:	b002      	add	sp, #8
 80133e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133ea:	260b      	movs	r6, #11
 80133ec:	4630      	mov	r0, r6
 80133ee:	b002      	add	sp, #8
 80133f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080133f4 <rcl_wait_set_add_subscription>:
 80133f4:	b318      	cbz	r0, 801343e <rcl_wait_set_add_subscription+0x4a>
 80133f6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80133f8:	b570      	push	{r4, r5, r6, lr}
 80133fa:	4604      	mov	r4, r0
 80133fc:	b30b      	cbz	r3, 8013442 <rcl_wait_set_add_subscription+0x4e>
 80133fe:	b319      	cbz	r1, 8013448 <rcl_wait_set_add_subscription+0x54>
 8013400:	681d      	ldr	r5, [r3, #0]
 8013402:	6840      	ldr	r0, [r0, #4]
 8013404:	4285      	cmp	r5, r0
 8013406:	d217      	bcs.n	8013438 <rcl_wait_set_add_subscription+0x44>
 8013408:	6820      	ldr	r0, [r4, #0]
 801340a:	1c6e      	adds	r6, r5, #1
 801340c:	601e      	str	r6, [r3, #0]
 801340e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013412:	b102      	cbz	r2, 8013416 <rcl_wait_set_add_subscription+0x22>
 8013414:	6015      	str	r5, [r2, #0]
 8013416:	4608      	mov	r0, r1
 8013418:	f7ff fb0a 	bl	8012a30 <rcl_subscription_get_rmw_handle>
 801341c:	b150      	cbz	r0, 8013434 <rcl_wait_set_add_subscription+0x40>
 801341e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013420:	6842      	ldr	r2, [r0, #4]
 8013422:	689b      	ldr	r3, [r3, #8]
 8013424:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013428:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801342a:	6853      	ldr	r3, [r2, #4]
 801342c:	3301      	adds	r3, #1
 801342e:	2000      	movs	r0, #0
 8013430:	6053      	str	r3, [r2, #4]
 8013432:	bd70      	pop	{r4, r5, r6, pc}
 8013434:	2001      	movs	r0, #1
 8013436:	bd70      	pop	{r4, r5, r6, pc}
 8013438:	f240 3086 	movw	r0, #902	@ 0x386
 801343c:	bd70      	pop	{r4, r5, r6, pc}
 801343e:	200b      	movs	r0, #11
 8013440:	4770      	bx	lr
 8013442:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013446:	bd70      	pop	{r4, r5, r6, pc}
 8013448:	200b      	movs	r0, #11
 801344a:	bd70      	pop	{r4, r5, r6, pc}

0801344c <rcl_wait_set_clear>:
 801344c:	2800      	cmp	r0, #0
 801344e:	d073      	beq.n	8013538 <rcl_wait_set_clear+0xec>
 8013450:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013452:	b510      	push	{r4, lr}
 8013454:	4604      	mov	r4, r0
 8013456:	2b00      	cmp	r3, #0
 8013458:	d070      	beq.n	801353c <rcl_wait_set_clear+0xf0>
 801345a:	6800      	ldr	r0, [r0, #0]
 801345c:	b138      	cbz	r0, 801346e <rcl_wait_set_clear+0x22>
 801345e:	6862      	ldr	r2, [r4, #4]
 8013460:	2100      	movs	r1, #0
 8013462:	0092      	lsls	r2, r2, #2
 8013464:	f004 fbb8 	bl	8017bd8 <memset>
 8013468:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801346a:	2200      	movs	r2, #0
 801346c:	601a      	str	r2, [r3, #0]
 801346e:	68a0      	ldr	r0, [r4, #8]
 8013470:	b138      	cbz	r0, 8013482 <rcl_wait_set_clear+0x36>
 8013472:	68e2      	ldr	r2, [r4, #12]
 8013474:	2100      	movs	r1, #0
 8013476:	0092      	lsls	r2, r2, #2
 8013478:	f004 fbae 	bl	8017bd8 <memset>
 801347c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801347e:	2200      	movs	r2, #0
 8013480:	60da      	str	r2, [r3, #12]
 8013482:	69a0      	ldr	r0, [r4, #24]
 8013484:	b138      	cbz	r0, 8013496 <rcl_wait_set_clear+0x4a>
 8013486:	69e2      	ldr	r2, [r4, #28]
 8013488:	2100      	movs	r1, #0
 801348a:	0092      	lsls	r2, r2, #2
 801348c:	f004 fba4 	bl	8017bd8 <memset>
 8013490:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013492:	2200      	movs	r2, #0
 8013494:	619a      	str	r2, [r3, #24]
 8013496:	6a20      	ldr	r0, [r4, #32]
 8013498:	b138      	cbz	r0, 80134aa <rcl_wait_set_clear+0x5e>
 801349a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801349c:	2100      	movs	r1, #0
 801349e:	0092      	lsls	r2, r2, #2
 80134a0:	f004 fb9a 	bl	8017bd8 <memset>
 80134a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80134a6:	2200      	movs	r2, #0
 80134a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80134aa:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80134ac:	b138      	cbz	r0, 80134be <rcl_wait_set_clear+0x72>
 80134ae:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80134b0:	2100      	movs	r1, #0
 80134b2:	0092      	lsls	r2, r2, #2
 80134b4:	f004 fb90 	bl	8017bd8 <memset>
 80134b8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80134ba:	2200      	movs	r2, #0
 80134bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80134be:	6920      	ldr	r0, [r4, #16]
 80134c0:	b138      	cbz	r0, 80134d2 <rcl_wait_set_clear+0x86>
 80134c2:	6962      	ldr	r2, [r4, #20]
 80134c4:	2100      	movs	r1, #0
 80134c6:	0092      	lsls	r2, r2, #2
 80134c8:	f004 fb86 	bl	8017bd8 <memset>
 80134cc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80134ce:	2200      	movs	r2, #0
 80134d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80134d2:	6898      	ldr	r0, [r3, #8]
 80134d4:	b138      	cbz	r0, 80134e6 <rcl_wait_set_clear+0x9a>
 80134d6:	685a      	ldr	r2, [r3, #4]
 80134d8:	2100      	movs	r1, #0
 80134da:	0092      	lsls	r2, r2, #2
 80134dc:	f004 fb7c 	bl	8017bd8 <memset>
 80134e0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80134e2:	2200      	movs	r2, #0
 80134e4:	605a      	str	r2, [r3, #4]
 80134e6:	6958      	ldr	r0, [r3, #20]
 80134e8:	b138      	cbz	r0, 80134fa <rcl_wait_set_clear+0xae>
 80134ea:	691a      	ldr	r2, [r3, #16]
 80134ec:	2100      	movs	r1, #0
 80134ee:	0092      	lsls	r2, r2, #2
 80134f0:	f004 fb72 	bl	8017bd8 <memset>
 80134f4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80134f6:	2200      	movs	r2, #0
 80134f8:	611a      	str	r2, [r3, #16]
 80134fa:	6a18      	ldr	r0, [r3, #32]
 80134fc:	b138      	cbz	r0, 801350e <rcl_wait_set_clear+0xc2>
 80134fe:	69da      	ldr	r2, [r3, #28]
 8013500:	2100      	movs	r1, #0
 8013502:	0092      	lsls	r2, r2, #2
 8013504:	f004 fb68 	bl	8017bd8 <memset>
 8013508:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801350a:	2200      	movs	r2, #0
 801350c:	61da      	str	r2, [r3, #28]
 801350e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8013510:	b138      	cbz	r0, 8013522 <rcl_wait_set_clear+0xd6>
 8013512:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013514:	2100      	movs	r1, #0
 8013516:	0092      	lsls	r2, r2, #2
 8013518:	f004 fb5e 	bl	8017bd8 <memset>
 801351c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801351e:	2200      	movs	r2, #0
 8013520:	629a      	str	r2, [r3, #40]	@ 0x28
 8013522:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8013524:	b138      	cbz	r0, 8013536 <rcl_wait_set_clear+0xea>
 8013526:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013528:	2100      	movs	r1, #0
 801352a:	0092      	lsls	r2, r2, #2
 801352c:	f004 fb54 	bl	8017bd8 <memset>
 8013530:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013532:	2000      	movs	r0, #0
 8013534:	6358      	str	r0, [r3, #52]	@ 0x34
 8013536:	bd10      	pop	{r4, pc}
 8013538:	200b      	movs	r0, #11
 801353a:	4770      	bx	lr
 801353c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013540:	bd10      	pop	{r4, pc}
 8013542:	bf00      	nop

08013544 <rcl_wait_set_resize>:
 8013544:	2800      	cmp	r0, #0
 8013546:	f000 8185 	beq.w	8013854 <rcl_wait_set_resize+0x310>
 801354a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801354e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8013550:	b083      	sub	sp, #12
 8013552:	4605      	mov	r5, r0
 8013554:	2c00      	cmp	r4, #0
 8013556:	f000 817f 	beq.w	8013858 <rcl_wait_set_resize+0x314>
 801355a:	f04f 0900 	mov.w	r9, #0
 801355e:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8013562:	461f      	mov	r7, r3
 8013564:	4688      	mov	r8, r1
 8013566:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 801356a:	4616      	mov	r6, r2
 801356c:	f8c0 9004 	str.w	r9, [r0, #4]
 8013570:	f8c4 9000 	str.w	r9, [r4]
 8013574:	2900      	cmp	r1, #0
 8013576:	f000 80bd 	beq.w	80136f4 <rcl_wait_set_resize+0x1b0>
 801357a:	008c      	lsls	r4, r1, #2
 801357c:	6800      	ldr	r0, [r0, #0]
 801357e:	9301      	str	r3, [sp, #4]
 8013580:	4652      	mov	r2, sl
 8013582:	4621      	mov	r1, r4
 8013584:	4798      	blx	r3
 8013586:	9b01      	ldr	r3, [sp, #4]
 8013588:	6028      	str	r0, [r5, #0]
 801358a:	2800      	cmp	r0, #0
 801358c:	f000 80cb 	beq.w	8013726 <rcl_wait_set_resize+0x1e2>
 8013590:	4622      	mov	r2, r4
 8013592:	4649      	mov	r1, r9
 8013594:	9301      	str	r3, [sp, #4]
 8013596:	f004 fb1f 	bl	8017bd8 <memset>
 801359a:	f8c5 8004 	str.w	r8, [r5, #4]
 801359e:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 80135a2:	9b01      	ldr	r3, [sp, #4]
 80135a4:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80135a8:	f8c8 9004 	str.w	r9, [r8, #4]
 80135ac:	4652      	mov	r2, sl
 80135ae:	4621      	mov	r1, r4
 80135b0:	4798      	blx	r3
 80135b2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80135b4:	f8c8 0008 	str.w	r0, [r8, #8]
 80135b8:	689b      	ldr	r3, [r3, #8]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	f000 80ac 	beq.w	8013718 <rcl_wait_set_resize+0x1d4>
 80135c0:	4622      	mov	r2, r4
 80135c2:	4649      	mov	r1, r9
 80135c4:	4618      	mov	r0, r3
 80135c6:	f004 fb07 	bl	8017bd8 <memset>
 80135ca:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80135cc:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80135d0:	f04f 0800 	mov.w	r8, #0
 80135d4:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 80135d8:	f8c5 800c 	str.w	r8, [r5, #12]
 80135dc:	f8c4 800c 	str.w	r8, [r4, #12]
 80135e0:	2e00      	cmp	r6, #0
 80135e2:	f040 80a4 	bne.w	801372e <rcl_wait_set_resize+0x1ea>
 80135e6:	68a8      	ldr	r0, [r5, #8]
 80135e8:	b128      	cbz	r0, 80135f6 <rcl_wait_set_resize+0xb2>
 80135ea:	4649      	mov	r1, r9
 80135ec:	4790      	blx	r2
 80135ee:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80135f0:	60ae      	str	r6, [r5, #8]
 80135f2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80135f6:	f04f 0800 	mov.w	r8, #0
 80135fa:	19f6      	adds	r6, r6, r7
 80135fc:	f8c4 8010 	str.w	r8, [r4, #16]
 8013600:	f040 80ac 	bne.w	801375c <rcl_wait_set_resize+0x218>
 8013604:	6960      	ldr	r0, [r4, #20]
 8013606:	b130      	cbz	r0, 8013616 <rcl_wait_set_resize+0xd2>
 8013608:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801360a:	4649      	mov	r1, r9
 801360c:	4798      	blx	r3
 801360e:	6166      	str	r6, [r4, #20]
 8013610:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013612:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013616:	2600      	movs	r6, #0
 8013618:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801361c:	616e      	str	r6, [r5, #20]
 801361e:	6426      	str	r6, [r4, #64]	@ 0x40
 8013620:	2f00      	cmp	r7, #0
 8013622:	f040 80ad 	bne.w	8013780 <rcl_wait_set_resize+0x23c>
 8013626:	6928      	ldr	r0, [r5, #16]
 8013628:	b138      	cbz	r0, 801363a <rcl_wait_set_resize+0xf6>
 801362a:	4649      	mov	r1, r9
 801362c:	47d0      	blx	sl
 801362e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013630:	612f      	str	r7, [r5, #16]
 8013632:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8013636:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801363a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801363c:	2600      	movs	r6, #0
 801363e:	61ee      	str	r6, [r5, #28]
 8013640:	61a6      	str	r6, [r4, #24]
 8013642:	2b00      	cmp	r3, #0
 8013644:	f040 80af 	bne.w	80137a6 <rcl_wait_set_resize+0x262>
 8013648:	69a8      	ldr	r0, [r5, #24]
 801364a:	b120      	cbz	r0, 8013656 <rcl_wait_set_resize+0x112>
 801364c:	4649      	mov	r1, r9
 801364e:	47d0      	blx	sl
 8013650:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013652:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013654:	61ab      	str	r3, [r5, #24]
 8013656:	6a20      	ldr	r0, [r4, #32]
 8013658:	b128      	cbz	r0, 8013666 <rcl_wait_set_resize+0x122>
 801365a:	4649      	mov	r1, r9
 801365c:	47d0      	blx	sl
 801365e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013660:	2300      	movs	r3, #0
 8013662:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8013666:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013668:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801366a:	2600      	movs	r6, #0
 801366c:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8013670:	626e      	str	r6, [r5, #36]	@ 0x24
 8013672:	6266      	str	r6, [r4, #36]	@ 0x24
 8013674:	2b00      	cmp	r3, #0
 8013676:	f000 80b6 	beq.w	80137e6 <rcl_wait_set_resize+0x2a2>
 801367a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801367e:	6a28      	ldr	r0, [r5, #32]
 8013680:	463a      	mov	r2, r7
 8013682:	4651      	mov	r1, sl
 8013684:	47c8      	blx	r9
 8013686:	6228      	str	r0, [r5, #32]
 8013688:	2800      	cmp	r0, #0
 801368a:	d04c      	beq.n	8013726 <rcl_wait_set_resize+0x1e2>
 801368c:	4652      	mov	r2, sl
 801368e:	4631      	mov	r1, r6
 8013690:	f004 faa2 	bl	8017bd8 <memset>
 8013694:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013696:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013698:	626b      	str	r3, [r5, #36]	@ 0x24
 801369a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801369c:	62a6      	str	r6, [r4, #40]	@ 0x28
 801369e:	463a      	mov	r2, r7
 80136a0:	4651      	mov	r1, sl
 80136a2:	47c8      	blx	r9
 80136a4:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80136a6:	62e0      	str	r0, [r4, #44]	@ 0x2c
 80136a8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80136aa:	2c00      	cmp	r4, #0
 80136ac:	f000 80f0 	beq.w	8013890 <rcl_wait_set_resize+0x34c>
 80136b0:	4620      	mov	r0, r4
 80136b2:	4652      	mov	r2, sl
 80136b4:	4631      	mov	r1, r6
 80136b6:	f004 fa8f 	bl	8017bd8 <memset>
 80136ba:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80136bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80136be:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80136c0:	2600      	movs	r6, #0
 80136c2:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80136c6:	62ee      	str	r6, [r5, #44]	@ 0x2c
 80136c8:	6326      	str	r6, [r4, #48]	@ 0x30
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	f040 809d 	bne.w	801380a <rcl_wait_set_resize+0x2c6>
 80136d0:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80136d2:	b120      	cbz	r0, 80136de <rcl_wait_set_resize+0x19a>
 80136d4:	4639      	mov	r1, r7
 80136d6:	47c0      	blx	r8
 80136d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80136da:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80136dc:	62ab      	str	r3, [r5, #40]	@ 0x28
 80136de:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80136e0:	b310      	cbz	r0, 8013728 <rcl_wait_set_resize+0x1e4>
 80136e2:	4639      	mov	r1, r7
 80136e4:	47c0      	blx	r8
 80136e6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80136e8:	2000      	movs	r0, #0
 80136ea:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 80136ee:	b003      	add	sp, #12
 80136f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136f4:	6800      	ldr	r0, [r0, #0]
 80136f6:	b120      	cbz	r0, 8013702 <rcl_wait_set_resize+0x1be>
 80136f8:	4651      	mov	r1, sl
 80136fa:	47d8      	blx	fp
 80136fc:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80136fe:	f8c5 8000 	str.w	r8, [r5]
 8013702:	68a0      	ldr	r0, [r4, #8]
 8013704:	2800      	cmp	r0, #0
 8013706:	f43f af61 	beq.w	80135cc <rcl_wait_set_resize+0x88>
 801370a:	4651      	mov	r1, sl
 801370c:	47d8      	blx	fp
 801370e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013710:	2300      	movs	r3, #0
 8013712:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8013716:	e759      	b.n	80135cc <rcl_wait_set_resize+0x88>
 8013718:	6828      	ldr	r0, [r5, #0]
 801371a:	9301      	str	r3, [sp, #4]
 801371c:	4651      	mov	r1, sl
 801371e:	47d8      	blx	fp
 8013720:	9b01      	ldr	r3, [sp, #4]
 8013722:	e9c5 3300 	strd	r3, r3, [r5]
 8013726:	200a      	movs	r0, #10
 8013728:	b003      	add	sp, #12
 801372a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801372e:	00b4      	lsls	r4, r6, #2
 8013730:	68a8      	ldr	r0, [r5, #8]
 8013732:	464a      	mov	r2, r9
 8013734:	4621      	mov	r1, r4
 8013736:	4798      	blx	r3
 8013738:	60a8      	str	r0, [r5, #8]
 801373a:	2800      	cmp	r0, #0
 801373c:	d0f3      	beq.n	8013726 <rcl_wait_set_resize+0x1e2>
 801373e:	4622      	mov	r2, r4
 8013740:	4641      	mov	r1, r8
 8013742:	f004 fa49 	bl	8017bd8 <memset>
 8013746:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013748:	60ee      	str	r6, [r5, #12]
 801374a:	f04f 0800 	mov.w	r8, #0
 801374e:	19f6      	adds	r6, r6, r7
 8013750:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013754:	f8c4 8010 	str.w	r8, [r4, #16]
 8013758:	f43f af54 	beq.w	8013604 <rcl_wait_set_resize+0xc0>
 801375c:	00b6      	lsls	r6, r6, #2
 801375e:	464a      	mov	r2, r9
 8013760:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8013762:	6960      	ldr	r0, [r4, #20]
 8013764:	4631      	mov	r1, r6
 8013766:	4798      	blx	r3
 8013768:	4681      	mov	r9, r0
 801376a:	6160      	str	r0, [r4, #20]
 801376c:	2800      	cmp	r0, #0
 801376e:	d076      	beq.n	801385e <rcl_wait_set_resize+0x31a>
 8013770:	4632      	mov	r2, r6
 8013772:	4641      	mov	r1, r8
 8013774:	f004 fa30 	bl	8017bd8 <memset>
 8013778:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801377a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801377e:	e74a      	b.n	8013616 <rcl_wait_set_resize+0xd2>
 8013780:	00bc      	lsls	r4, r7, #2
 8013782:	6928      	ldr	r0, [r5, #16]
 8013784:	464a      	mov	r2, r9
 8013786:	4621      	mov	r1, r4
 8013788:	47c0      	blx	r8
 801378a:	6128      	str	r0, [r5, #16]
 801378c:	2800      	cmp	r0, #0
 801378e:	d0ca      	beq.n	8013726 <rcl_wait_set_resize+0x1e2>
 8013790:	4622      	mov	r2, r4
 8013792:	4631      	mov	r1, r6
 8013794:	f004 fa20 	bl	8017bd8 <memset>
 8013798:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801379a:	616f      	str	r7, [r5, #20]
 801379c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80137a0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80137a4:	e749      	b.n	801363a <rcl_wait_set_resize+0xf6>
 80137a6:	009c      	lsls	r4, r3, #2
 80137a8:	69a8      	ldr	r0, [r5, #24]
 80137aa:	464a      	mov	r2, r9
 80137ac:	4621      	mov	r1, r4
 80137ae:	47c0      	blx	r8
 80137b0:	61a8      	str	r0, [r5, #24]
 80137b2:	2800      	cmp	r0, #0
 80137b4:	d0b7      	beq.n	8013726 <rcl_wait_set_resize+0x1e2>
 80137b6:	4622      	mov	r2, r4
 80137b8:	4631      	mov	r1, r6
 80137ba:	f004 fa0d 	bl	8017bd8 <memset>
 80137be:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 80137c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80137c2:	61eb      	str	r3, [r5, #28]
 80137c4:	6a38      	ldr	r0, [r7, #32]
 80137c6:	61fe      	str	r6, [r7, #28]
 80137c8:	464a      	mov	r2, r9
 80137ca:	4621      	mov	r1, r4
 80137cc:	47c0      	blx	r8
 80137ce:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80137d0:	6238      	str	r0, [r7, #32]
 80137d2:	6a1f      	ldr	r7, [r3, #32]
 80137d4:	2f00      	cmp	r7, #0
 80137d6:	d054      	beq.n	8013882 <rcl_wait_set_resize+0x33e>
 80137d8:	4622      	mov	r2, r4
 80137da:	4631      	mov	r1, r6
 80137dc:	4638      	mov	r0, r7
 80137de:	f004 f9fb 	bl	8017bd8 <memset>
 80137e2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80137e4:	e73f      	b.n	8013666 <rcl_wait_set_resize+0x122>
 80137e6:	6a28      	ldr	r0, [r5, #32]
 80137e8:	b120      	cbz	r0, 80137f4 <rcl_wait_set_resize+0x2b0>
 80137ea:	4639      	mov	r1, r7
 80137ec:	47c0      	blx	r8
 80137ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80137f0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80137f2:	622b      	str	r3, [r5, #32]
 80137f4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80137f6:	2800      	cmp	r0, #0
 80137f8:	f43f af60 	beq.w	80136bc <rcl_wait_set_resize+0x178>
 80137fc:	4639      	mov	r1, r7
 80137fe:	47c0      	blx	r8
 8013800:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013802:	2300      	movs	r3, #0
 8013804:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8013808:	e758      	b.n	80136bc <rcl_wait_set_resize+0x178>
 801380a:	009c      	lsls	r4, r3, #2
 801380c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801380e:	463a      	mov	r2, r7
 8013810:	4621      	mov	r1, r4
 8013812:	47c8      	blx	r9
 8013814:	62a8      	str	r0, [r5, #40]	@ 0x28
 8013816:	2800      	cmp	r0, #0
 8013818:	d085      	beq.n	8013726 <rcl_wait_set_resize+0x1e2>
 801381a:	4622      	mov	r2, r4
 801381c:	4631      	mov	r1, r6
 801381e:	f004 f9db 	bl	8017bd8 <memset>
 8013822:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8013826:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013828:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801382a:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801382e:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8013832:	463a      	mov	r2, r7
 8013834:	4621      	mov	r1, r4
 8013836:	47c8      	blx	r9
 8013838:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801383a:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801383e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013840:	b36b      	cbz	r3, 801389e <rcl_wait_set_resize+0x35a>
 8013842:	4622      	mov	r2, r4
 8013844:	4631      	mov	r1, r6
 8013846:	4618      	mov	r0, r3
 8013848:	f004 f9c6 	bl	8017bd8 <memset>
 801384c:	4630      	mov	r0, r6
 801384e:	b003      	add	sp, #12
 8013850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013854:	200b      	movs	r0, #11
 8013856:	4770      	bx	lr
 8013858:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801385c:	e764      	b.n	8013728 <rcl_wait_set_resize+0x1e4>
 801385e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013860:	68a8      	ldr	r0, [r5, #8]
 8013862:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8013864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013866:	4798      	blx	r3
 8013868:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801386a:	6928      	ldr	r0, [r5, #16]
 801386c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801386e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8013870:	f8c5 900c 	str.w	r9, [r5, #12]
 8013874:	f8c5 9008 	str.w	r9, [r5, #8]
 8013878:	4790      	blx	r2
 801387a:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801387e:	200a      	movs	r0, #10
 8013880:	e752      	b.n	8013728 <rcl_wait_set_resize+0x1e4>
 8013882:	69a8      	ldr	r0, [r5, #24]
 8013884:	4649      	mov	r1, r9
 8013886:	47d0      	blx	sl
 8013888:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801388c:	200a      	movs	r0, #10
 801388e:	e74b      	b.n	8013728 <rcl_wait_set_resize+0x1e4>
 8013890:	6a28      	ldr	r0, [r5, #32]
 8013892:	4639      	mov	r1, r7
 8013894:	47c0      	blx	r8
 8013896:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801389a:	200a      	movs	r0, #10
 801389c:	e744      	b.n	8013728 <rcl_wait_set_resize+0x1e4>
 801389e:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80138a0:	9301      	str	r3, [sp, #4]
 80138a2:	4639      	mov	r1, r7
 80138a4:	47c0      	blx	r8
 80138a6:	9b01      	ldr	r3, [sp, #4]
 80138a8:	200a      	movs	r0, #10
 80138aa:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80138ae:	e73b      	b.n	8013728 <rcl_wait_set_resize+0x1e4>

080138b0 <rcl_wait_set_init>:
 80138b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138b4:	b084      	sub	sp, #16
 80138b6:	4604      	mov	r4, r0
 80138b8:	a810      	add	r0, sp, #64	@ 0x40
 80138ba:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 80138be:	460f      	mov	r7, r1
 80138c0:	4690      	mov	r8, r2
 80138c2:	4699      	mov	r9, r3
 80138c4:	f7f8 f8f6 	bl	800bab4 <rcutils_allocator_is_valid>
 80138c8:	2800      	cmp	r0, #0
 80138ca:	d06b      	beq.n	80139a4 <rcl_wait_set_init+0xf4>
 80138cc:	2c00      	cmp	r4, #0
 80138ce:	d069      	beq.n	80139a4 <rcl_wait_set_init+0xf4>
 80138d0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80138d2:	b125      	cbz	r5, 80138de <rcl_wait_set_init+0x2e>
 80138d4:	2564      	movs	r5, #100	@ 0x64
 80138d6:	4628      	mov	r0, r5
 80138d8:	b004      	add	sp, #16
 80138da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138de:	f1ba 0f00 	cmp.w	sl, #0
 80138e2:	d05f      	beq.n	80139a4 <rcl_wait_set_init+0xf4>
 80138e4:	4650      	mov	r0, sl
 80138e6:	f7fe fa33 	bl	8011d50 <rcl_context_is_valid>
 80138ea:	2800      	cmp	r0, #0
 80138ec:	d067      	beq.n	80139be <rcl_wait_set_init+0x10e>
 80138ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80138f0:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80138f2:	205c      	movs	r0, #92	@ 0x5c
 80138f4:	4798      	blx	r3
 80138f6:	6320      	str	r0, [r4, #48]	@ 0x30
 80138f8:	2800      	cmp	r0, #0
 80138fa:	d062      	beq.n	80139c2 <rcl_wait_set_init+0x112>
 80138fc:	4629      	mov	r1, r5
 80138fe:	225c      	movs	r2, #92	@ 0x5c
 8013900:	f004 f96a 	bl	8017bd8 <memset>
 8013904:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8013908:	eb03 0e02 	add.w	lr, r3, r2
 801390c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801390e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8013910:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8013914:	449e      	add	lr, r3
 8013916:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801391a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801391e:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8013922:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8013926:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 801392a:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 801392e:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8013932:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8013936:	f8da a000 	ldr.w	sl, [sl]
 801393a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801393c:	44c6      	add	lr, r8
 801393e:	f8dc 3000 	ldr.w	r3, [ip]
 8013942:	602b      	str	r3, [r5, #0]
 8013944:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8013948:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 801394c:	f002 fa1e 	bl	8015d8c <rmw_create_wait_set>
 8013950:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013952:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8013954:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8013956:	b350      	cbz	r0, 80139ae <rcl_wait_set_init+0xfe>
 8013958:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801395a:	9302      	str	r3, [sp, #8]
 801395c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801395e:	9301      	str	r3, [sp, #4]
 8013960:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013962:	9300      	str	r3, [sp, #0]
 8013964:	4642      	mov	r2, r8
 8013966:	464b      	mov	r3, r9
 8013968:	4639      	mov	r1, r7
 801396a:	4620      	mov	r0, r4
 801396c:	f7ff fdea 	bl	8013544 <rcl_wait_set_resize>
 8013970:	4605      	mov	r5, r0
 8013972:	2800      	cmp	r0, #0
 8013974:	d0af      	beq.n	80138d6 <rcl_wait_set_init+0x26>
 8013976:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013978:	bb2b      	cbnz	r3, 80139c6 <rcl_wait_set_init+0x116>
 801397a:	2600      	movs	r6, #0
 801397c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8013980:	9600      	str	r6, [sp, #0]
 8013982:	4633      	mov	r3, r6
 8013984:	4632      	mov	r2, r6
 8013986:	4631      	mov	r1, r6
 8013988:	4620      	mov	r0, r4
 801398a:	f7ff fddb 	bl	8013544 <rcl_wait_set_resize>
 801398e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8013990:	2800      	cmp	r0, #0
 8013992:	d0a0      	beq.n	80138d6 <rcl_wait_set_init+0x26>
 8013994:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8013996:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8013998:	4798      	blx	r3
 801399a:	4628      	mov	r0, r5
 801399c:	6326      	str	r6, [r4, #48]	@ 0x30
 801399e:	b004      	add	sp, #16
 80139a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139a4:	250b      	movs	r5, #11
 80139a6:	4628      	mov	r0, r5
 80139a8:	b004      	add	sp, #16
 80139aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139ae:	2501      	movs	r5, #1
 80139b0:	f002 f9f6 	bl	8015da0 <rmw_destroy_wait_set>
 80139b4:	2800      	cmp	r0, #0
 80139b6:	bf18      	it	ne
 80139b8:	f44f 7561 	movne.w	r5, #900	@ 0x384
 80139bc:	e7dd      	b.n	801397a <rcl_wait_set_init+0xca>
 80139be:	2565      	movs	r5, #101	@ 0x65
 80139c0:	e789      	b.n	80138d6 <rcl_wait_set_init+0x26>
 80139c2:	250a      	movs	r5, #10
 80139c4:	e787      	b.n	80138d6 <rcl_wait_set_init+0x26>
 80139c6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80139c8:	e7f2      	b.n	80139b0 <rcl_wait_set_init+0x100>
 80139ca:	bf00      	nop

080139cc <rcl_wait_set_add_guard_condition>:
 80139cc:	b318      	cbz	r0, 8013a16 <rcl_wait_set_add_guard_condition+0x4a>
 80139ce:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80139d0:	b570      	push	{r4, r5, r6, lr}
 80139d2:	4604      	mov	r4, r0
 80139d4:	b30b      	cbz	r3, 8013a1a <rcl_wait_set_add_guard_condition+0x4e>
 80139d6:	b319      	cbz	r1, 8013a20 <rcl_wait_set_add_guard_condition+0x54>
 80139d8:	68dd      	ldr	r5, [r3, #12]
 80139da:	68c0      	ldr	r0, [r0, #12]
 80139dc:	4285      	cmp	r5, r0
 80139de:	d217      	bcs.n	8013a10 <rcl_wait_set_add_guard_condition+0x44>
 80139e0:	68a0      	ldr	r0, [r4, #8]
 80139e2:	1c6e      	adds	r6, r5, #1
 80139e4:	60de      	str	r6, [r3, #12]
 80139e6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80139ea:	b102      	cbz	r2, 80139ee <rcl_wait_set_add_guard_condition+0x22>
 80139ec:	6015      	str	r5, [r2, #0]
 80139ee:	4608      	mov	r0, r1
 80139f0:	f003 fbd0 	bl	8017194 <rcl_guard_condition_get_rmw_handle>
 80139f4:	b150      	cbz	r0, 8013a0c <rcl_wait_set_add_guard_condition+0x40>
 80139f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80139f8:	6842      	ldr	r2, [r0, #4]
 80139fa:	695b      	ldr	r3, [r3, #20]
 80139fc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013a00:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013a02:	6913      	ldr	r3, [r2, #16]
 8013a04:	3301      	adds	r3, #1
 8013a06:	2000      	movs	r0, #0
 8013a08:	6113      	str	r3, [r2, #16]
 8013a0a:	bd70      	pop	{r4, r5, r6, pc}
 8013a0c:	2001      	movs	r0, #1
 8013a0e:	bd70      	pop	{r4, r5, r6, pc}
 8013a10:	f240 3086 	movw	r0, #902	@ 0x386
 8013a14:	bd70      	pop	{r4, r5, r6, pc}
 8013a16:	200b      	movs	r0, #11
 8013a18:	4770      	bx	lr
 8013a1a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013a1e:	bd70      	pop	{r4, r5, r6, pc}
 8013a20:	200b      	movs	r0, #11
 8013a22:	bd70      	pop	{r4, r5, r6, pc}

08013a24 <rcl_wait_set_add_timer>:
 8013a24:	b328      	cbz	r0, 8013a72 <rcl_wait_set_add_timer+0x4e>
 8013a26:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013a28:	b570      	push	{r4, r5, r6, lr}
 8013a2a:	4604      	mov	r4, r0
 8013a2c:	b31b      	cbz	r3, 8013a76 <rcl_wait_set_add_timer+0x52>
 8013a2e:	b329      	cbz	r1, 8013a7c <rcl_wait_set_add_timer+0x58>
 8013a30:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8013a32:	6965      	ldr	r5, [r4, #20]
 8013a34:	42a8      	cmp	r0, r5
 8013a36:	d219      	bcs.n	8013a6c <rcl_wait_set_add_timer+0x48>
 8013a38:	6925      	ldr	r5, [r4, #16]
 8013a3a:	1c46      	adds	r6, r0, #1
 8013a3c:	641e      	str	r6, [r3, #64]	@ 0x40
 8013a3e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8013a42:	b102      	cbz	r2, 8013a46 <rcl_wait_set_add_timer+0x22>
 8013a44:	6010      	str	r0, [r2, #0]
 8013a46:	4608      	mov	r0, r1
 8013a48:	f7ff fba6 	bl	8013198 <rcl_timer_get_guard_condition>
 8013a4c:	b168      	cbz	r0, 8013a6a <rcl_wait_set_add_timer+0x46>
 8013a4e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013a50:	68e3      	ldr	r3, [r4, #12]
 8013a52:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8013a54:	3b01      	subs	r3, #1
 8013a56:	441d      	add	r5, r3
 8013a58:	f003 fb9c 	bl	8017194 <rcl_guard_condition_get_rmw_handle>
 8013a5c:	b180      	cbz	r0, 8013a80 <rcl_wait_set_add_timer+0x5c>
 8013a5e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013a60:	6842      	ldr	r2, [r0, #4]
 8013a62:	695b      	ldr	r3, [r3, #20]
 8013a64:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013a68:	2000      	movs	r0, #0
 8013a6a:	bd70      	pop	{r4, r5, r6, pc}
 8013a6c:	f240 3086 	movw	r0, #902	@ 0x386
 8013a70:	bd70      	pop	{r4, r5, r6, pc}
 8013a72:	200b      	movs	r0, #11
 8013a74:	4770      	bx	lr
 8013a76:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013a7a:	bd70      	pop	{r4, r5, r6, pc}
 8013a7c:	200b      	movs	r0, #11
 8013a7e:	bd70      	pop	{r4, r5, r6, pc}
 8013a80:	2001      	movs	r0, #1
 8013a82:	bd70      	pop	{r4, r5, r6, pc}

08013a84 <rcl_wait_set_add_client>:
 8013a84:	b318      	cbz	r0, 8013ace <rcl_wait_set_add_client+0x4a>
 8013a86:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013a88:	b570      	push	{r4, r5, r6, lr}
 8013a8a:	4604      	mov	r4, r0
 8013a8c:	b30b      	cbz	r3, 8013ad2 <rcl_wait_set_add_client+0x4e>
 8013a8e:	b319      	cbz	r1, 8013ad8 <rcl_wait_set_add_client+0x54>
 8013a90:	699d      	ldr	r5, [r3, #24]
 8013a92:	69c0      	ldr	r0, [r0, #28]
 8013a94:	4285      	cmp	r5, r0
 8013a96:	d217      	bcs.n	8013ac8 <rcl_wait_set_add_client+0x44>
 8013a98:	69a0      	ldr	r0, [r4, #24]
 8013a9a:	1c6e      	adds	r6, r5, #1
 8013a9c:	619e      	str	r6, [r3, #24]
 8013a9e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013aa2:	b102      	cbz	r2, 8013aa6 <rcl_wait_set_add_client+0x22>
 8013aa4:	6015      	str	r5, [r2, #0]
 8013aa6:	4608      	mov	r0, r1
 8013aa8:	f7fe f8a4 	bl	8011bf4 <rcl_client_get_rmw_handle>
 8013aac:	b150      	cbz	r0, 8013ac4 <rcl_wait_set_add_client+0x40>
 8013aae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013ab0:	6842      	ldr	r2, [r0, #4]
 8013ab2:	6a1b      	ldr	r3, [r3, #32]
 8013ab4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013ab8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013aba:	69d3      	ldr	r3, [r2, #28]
 8013abc:	3301      	adds	r3, #1
 8013abe:	2000      	movs	r0, #0
 8013ac0:	61d3      	str	r3, [r2, #28]
 8013ac2:	bd70      	pop	{r4, r5, r6, pc}
 8013ac4:	2001      	movs	r0, #1
 8013ac6:	bd70      	pop	{r4, r5, r6, pc}
 8013ac8:	f240 3086 	movw	r0, #902	@ 0x386
 8013acc:	bd70      	pop	{r4, r5, r6, pc}
 8013ace:	200b      	movs	r0, #11
 8013ad0:	4770      	bx	lr
 8013ad2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013ad6:	bd70      	pop	{r4, r5, r6, pc}
 8013ad8:	200b      	movs	r0, #11
 8013ada:	bd70      	pop	{r4, r5, r6, pc}

08013adc <rcl_wait_set_add_service>:
 8013adc:	b318      	cbz	r0, 8013b26 <rcl_wait_set_add_service+0x4a>
 8013ade:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013ae0:	b570      	push	{r4, r5, r6, lr}
 8013ae2:	4604      	mov	r4, r0
 8013ae4:	b30b      	cbz	r3, 8013b2a <rcl_wait_set_add_service+0x4e>
 8013ae6:	b319      	cbz	r1, 8013b30 <rcl_wait_set_add_service+0x54>
 8013ae8:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8013aea:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8013aec:	4285      	cmp	r5, r0
 8013aee:	d217      	bcs.n	8013b20 <rcl_wait_set_add_service+0x44>
 8013af0:	6a20      	ldr	r0, [r4, #32]
 8013af2:	1c6e      	adds	r6, r5, #1
 8013af4:	625e      	str	r6, [r3, #36]	@ 0x24
 8013af6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013afa:	b102      	cbz	r2, 8013afe <rcl_wait_set_add_service+0x22>
 8013afc:	6015      	str	r5, [r2, #0]
 8013afe:	4608      	mov	r0, r1
 8013b00:	f7fe fdfa 	bl	80126f8 <rcl_service_get_rmw_handle>
 8013b04:	b150      	cbz	r0, 8013b1c <rcl_wait_set_add_service+0x40>
 8013b06:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013b08:	6842      	ldr	r2, [r0, #4]
 8013b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b0c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013b10:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013b12:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8013b14:	3301      	adds	r3, #1
 8013b16:	2000      	movs	r0, #0
 8013b18:	6293      	str	r3, [r2, #40]	@ 0x28
 8013b1a:	bd70      	pop	{r4, r5, r6, pc}
 8013b1c:	2001      	movs	r0, #1
 8013b1e:	bd70      	pop	{r4, r5, r6, pc}
 8013b20:	f240 3086 	movw	r0, #902	@ 0x386
 8013b24:	bd70      	pop	{r4, r5, r6, pc}
 8013b26:	200b      	movs	r0, #11
 8013b28:	4770      	bx	lr
 8013b2a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013b2e:	bd70      	pop	{r4, r5, r6, pc}
 8013b30:	200b      	movs	r0, #11
 8013b32:	bd70      	pop	{r4, r5, r6, pc}
 8013b34:	0000      	movs	r0, r0
	...

08013b38 <rcl_wait>:
 8013b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b3c:	ed2d 8b02 	vpush	{d8}
 8013b40:	b08d      	sub	sp, #52	@ 0x34
 8013b42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013b46:	2800      	cmp	r0, #0
 8013b48:	f000 8143 	beq.w	8013dd2 <rcl_wait+0x29a>
 8013b4c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8013b4e:	4605      	mov	r5, r0
 8013b50:	2e00      	cmp	r6, #0
 8013b52:	f000 8112 	beq.w	8013d7a <rcl_wait+0x242>
 8013b56:	6843      	ldr	r3, [r0, #4]
 8013b58:	b983      	cbnz	r3, 8013b7c <rcl_wait+0x44>
 8013b5a:	68eb      	ldr	r3, [r5, #12]
 8013b5c:	b973      	cbnz	r3, 8013b7c <rcl_wait+0x44>
 8013b5e:	696b      	ldr	r3, [r5, #20]
 8013b60:	b963      	cbnz	r3, 8013b7c <rcl_wait+0x44>
 8013b62:	69eb      	ldr	r3, [r5, #28]
 8013b64:	b953      	cbnz	r3, 8013b7c <rcl_wait+0x44>
 8013b66:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8013b68:	b943      	cbnz	r3, 8013b7c <rcl_wait+0x44>
 8013b6a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8013b6c:	b933      	cbnz	r3, 8013b7c <rcl_wait+0x44>
 8013b6e:	f240 3085 	movw	r0, #901	@ 0x385
 8013b72:	b00d      	add	sp, #52	@ 0x34
 8013b74:	ecbd 8b02 	vpop	{d8}
 8013b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b7c:	9b04      	ldr	r3, [sp, #16]
 8013b7e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8013b80:	2b01      	cmp	r3, #1
 8013b82:	9b05      	ldr	r3, [sp, #20]
 8013b84:	f173 0300 	sbcs.w	r3, r3, #0
 8013b88:	f2c0 80f0 	blt.w	8013d6c <rcl_wait+0x234>
 8013b8c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8013b90:	4643      	mov	r3, r8
 8013b92:	2a00      	cmp	r2, #0
 8013b94:	f000 8133 	beq.w	8013dfe <rcl_wait+0x2c6>
 8013b98:	2400      	movs	r4, #0
 8013b9a:	4613      	mov	r3, r2
 8013b9c:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8013e10 <rcl_wait+0x2d8>
 8013ba0:	46a2      	mov	sl, r4
 8013ba2:	46a3      	mov	fp, r4
 8013ba4:	f240 3921 	movw	r9, #801	@ 0x321
 8013ba8:	4632      	mov	r2, r6
 8013baa:	e014      	b.n	8013bd6 <rcl_wait+0x9e>
 8013bac:	2800      	cmp	r0, #0
 8013bae:	d1e0      	bne.n	8013b72 <rcl_wait+0x3a>
 8013bb0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013bb4:	4542      	cmp	r2, r8
 8013bb6:	eb73 0107 	sbcs.w	r1, r3, r7
 8013bba:	da03      	bge.n	8013bc4 <rcl_wait+0x8c>
 8013bbc:	4690      	mov	r8, r2
 8013bbe:	461f      	mov	r7, r3
 8013bc0:	f04f 0b01 	mov.w	fp, #1
 8013bc4:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8013bc6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013bc8:	3401      	adds	r4, #1
 8013bca:	f14a 0a00 	adc.w	sl, sl, #0
 8013bce:	429c      	cmp	r4, r3
 8013bd0:	f17a 0100 	sbcs.w	r1, sl, #0
 8013bd4:	d228      	bcs.n	8013c28 <rcl_wait+0xf0>
 8013bd6:	6928      	ldr	r0, [r5, #16]
 8013bd8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013bdc:	a908      	add	r1, sp, #32
 8013bde:	00a6      	lsls	r6, r4, #2
 8013be0:	2800      	cmp	r0, #0
 8013be2:	d0f1      	beq.n	8013bc8 <rcl_wait+0x90>
 8013be4:	68eb      	ldr	r3, [r5, #12]
 8013be6:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8013bea:	4423      	add	r3, r4
 8013bec:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8013bf0:	f1be 0f00 	cmp.w	lr, #0
 8013bf4:	d006      	beq.n	8013c04 <rcl_wait+0xcc>
 8013bf6:	6913      	ldr	r3, [r2, #16]
 8013bf8:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8013bfc:	3301      	adds	r3, #1
 8013bfe:	6113      	str	r3, [r2, #16]
 8013c00:	692b      	ldr	r3, [r5, #16]
 8013c02:	5998      	ldr	r0, [r3, r6]
 8013c04:	ed8d 8b08 	vstr	d8, [sp, #32]
 8013c08:	f7ff fa94 	bl	8013134 <rcl_timer_get_time_until_next_call>
 8013c0c:	4548      	cmp	r0, r9
 8013c0e:	d1cd      	bne.n	8013bac <rcl_wait+0x74>
 8013c10:	692b      	ldr	r3, [r5, #16]
 8013c12:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8013c14:	2100      	movs	r1, #0
 8013c16:	5199      	str	r1, [r3, r6]
 8013c18:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013c1a:	3401      	adds	r4, #1
 8013c1c:	f14a 0a00 	adc.w	sl, sl, #0
 8013c20:	429c      	cmp	r4, r3
 8013c22:	f17a 0100 	sbcs.w	r1, sl, #0
 8013c26:	d3d6      	bcc.n	8013bd6 <rcl_wait+0x9e>
 8013c28:	4616      	mov	r6, r2
 8013c2a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8013c2e:	4313      	orrs	r3, r2
 8013c30:	46d9      	mov	r9, fp
 8013c32:	f040 80a9 	bne.w	8013d88 <rcl_wait+0x250>
 8013c36:	2300      	movs	r3, #0
 8013c38:	2200      	movs	r2, #0
 8013c3a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013c3e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8013c42:	ab08      	add	r3, sp, #32
 8013c44:	9302      	str	r3, [sp, #8]
 8013c46:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8013c48:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8013c4c:	e9cd 3200 	strd	r3, r2, [sp]
 8013c50:	f106 0110 	add.w	r1, r6, #16
 8013c54:	f106 031c 	add.w	r3, r6, #28
 8013c58:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8013c5c:	1d30      	adds	r0, r6, #4
 8013c5e:	f001 ff1d 	bl	8015a9c <rmw_wait>
 8013c62:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013c64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013c66:	4680      	mov	r8, r0
 8013c68:	b1ca      	cbz	r2, 8013c9e <rcl_wait+0x166>
 8013c6a:	2400      	movs	r4, #0
 8013c6c:	4627      	mov	r7, r4
 8013c6e:	692a      	ldr	r2, [r5, #16]
 8013c70:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8013c74:	f10d 011f 	add.w	r1, sp, #31
 8013c78:	00a6      	lsls	r6, r4, #2
 8013c7a:	b160      	cbz	r0, 8013c96 <rcl_wait+0x15e>
 8013c7c:	f88d 701f 	strb.w	r7, [sp, #31]
 8013c80:	f7ff fa1e 	bl	80130c0 <rcl_timer_is_ready>
 8013c84:	2800      	cmp	r0, #0
 8013c86:	f47f af74 	bne.w	8013b72 <rcl_wait+0x3a>
 8013c8a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8013c8e:	b90b      	cbnz	r3, 8013c94 <rcl_wait+0x15c>
 8013c90:	692a      	ldr	r2, [r5, #16]
 8013c92:	5193      	str	r3, [r2, r6]
 8013c94:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013c96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013c98:	3401      	adds	r4, #1
 8013c9a:	42a2      	cmp	r2, r4
 8013c9c:	d8e7      	bhi.n	8013c6e <rcl_wait+0x136>
 8013c9e:	f038 0002 	bics.w	r0, r8, #2
 8013ca2:	f040 8090 	bne.w	8013dc6 <rcl_wait+0x28e>
 8013ca6:	686e      	ldr	r6, [r5, #4]
 8013ca8:	4602      	mov	r2, r0
 8013caa:	b91e      	cbnz	r6, 8013cb4 <rcl_wait+0x17c>
 8013cac:	e00d      	b.n	8013cca <rcl_wait+0x192>
 8013cae:	3201      	adds	r2, #1
 8013cb0:	42b2      	cmp	r2, r6
 8013cb2:	d00a      	beq.n	8013cca <rcl_wait+0x192>
 8013cb4:	6899      	ldr	r1, [r3, #8]
 8013cb6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013cba:	2900      	cmp	r1, #0
 8013cbc:	d1f7      	bne.n	8013cae <rcl_wait+0x176>
 8013cbe:	682c      	ldr	r4, [r5, #0]
 8013cc0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013cc4:	3201      	adds	r2, #1
 8013cc6:	42b2      	cmp	r2, r6
 8013cc8:	d1f4      	bne.n	8013cb4 <rcl_wait+0x17c>
 8013cca:	68ee      	ldr	r6, [r5, #12]
 8013ccc:	2200      	movs	r2, #0
 8013cce:	b91e      	cbnz	r6, 8013cd8 <rcl_wait+0x1a0>
 8013cd0:	e00d      	b.n	8013cee <rcl_wait+0x1b6>
 8013cd2:	3201      	adds	r2, #1
 8013cd4:	42b2      	cmp	r2, r6
 8013cd6:	d00a      	beq.n	8013cee <rcl_wait+0x1b6>
 8013cd8:	6959      	ldr	r1, [r3, #20]
 8013cda:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013cde:	2900      	cmp	r1, #0
 8013ce0:	d1f7      	bne.n	8013cd2 <rcl_wait+0x19a>
 8013ce2:	68ac      	ldr	r4, [r5, #8]
 8013ce4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013ce8:	3201      	adds	r2, #1
 8013cea:	42b2      	cmp	r2, r6
 8013cec:	d1f4      	bne.n	8013cd8 <rcl_wait+0x1a0>
 8013cee:	69ee      	ldr	r6, [r5, #28]
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	b91e      	cbnz	r6, 8013cfc <rcl_wait+0x1c4>
 8013cf4:	e00d      	b.n	8013d12 <rcl_wait+0x1da>
 8013cf6:	3201      	adds	r2, #1
 8013cf8:	42b2      	cmp	r2, r6
 8013cfa:	d00a      	beq.n	8013d12 <rcl_wait+0x1da>
 8013cfc:	6a19      	ldr	r1, [r3, #32]
 8013cfe:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013d02:	2900      	cmp	r1, #0
 8013d04:	d1f7      	bne.n	8013cf6 <rcl_wait+0x1be>
 8013d06:	69ac      	ldr	r4, [r5, #24]
 8013d08:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013d0c:	3201      	adds	r2, #1
 8013d0e:	42b2      	cmp	r2, r6
 8013d10:	d1f4      	bne.n	8013cfc <rcl_wait+0x1c4>
 8013d12:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8013d14:	2200      	movs	r2, #0
 8013d16:	b91e      	cbnz	r6, 8013d20 <rcl_wait+0x1e8>
 8013d18:	e00d      	b.n	8013d36 <rcl_wait+0x1fe>
 8013d1a:	3201      	adds	r2, #1
 8013d1c:	4296      	cmp	r6, r2
 8013d1e:	d00a      	beq.n	8013d36 <rcl_wait+0x1fe>
 8013d20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8013d22:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013d26:	2900      	cmp	r1, #0
 8013d28:	d1f7      	bne.n	8013d1a <rcl_wait+0x1e2>
 8013d2a:	6a2c      	ldr	r4, [r5, #32]
 8013d2c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013d30:	3201      	adds	r2, #1
 8013d32:	4296      	cmp	r6, r2
 8013d34:	d1f4      	bne.n	8013d20 <rcl_wait+0x1e8>
 8013d36:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8013d38:	2200      	movs	r2, #0
 8013d3a:	b91e      	cbnz	r6, 8013d44 <rcl_wait+0x20c>
 8013d3c:	e00d      	b.n	8013d5a <rcl_wait+0x222>
 8013d3e:	3201      	adds	r2, #1
 8013d40:	42b2      	cmp	r2, r6
 8013d42:	d00a      	beq.n	8013d5a <rcl_wait+0x222>
 8013d44:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8013d46:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013d4a:	2900      	cmp	r1, #0
 8013d4c:	d1f7      	bne.n	8013d3e <rcl_wait+0x206>
 8013d4e:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8013d50:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013d54:	3201      	adds	r2, #1
 8013d56:	42b2      	cmp	r2, r6
 8013d58:	d1f4      	bne.n	8013d44 <rcl_wait+0x20c>
 8013d5a:	f1b8 0f02 	cmp.w	r8, #2
 8013d5e:	f47f af08 	bne.w	8013b72 <rcl_wait+0x3a>
 8013d62:	464b      	mov	r3, r9
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	bf08      	it	eq
 8013d68:	2002      	moveq	r0, #2
 8013d6a:	e702      	b.n	8013b72 <rcl_wait+0x3a>
 8013d6c:	2a00      	cmp	r2, #0
 8013d6e:	d03a      	beq.n	8013de6 <rcl_wait+0x2ae>
 8013d70:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8013d74:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8013d78:	e70e      	b.n	8013b98 <rcl_wait+0x60>
 8013d7a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013d7e:	b00d      	add	sp, #52	@ 0x34
 8013d80:	ecbd 8b02 	vpop	{d8}
 8013d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d88:	9b04      	ldr	r3, [sp, #16]
 8013d8a:	2b01      	cmp	r3, #1
 8013d8c:	9b05      	ldr	r3, [sp, #20]
 8013d8e:	f173 0300 	sbcs.w	r3, r3, #0
 8013d92:	db24      	blt.n	8013dde <rcl_wait+0x2a6>
 8013d94:	2f00      	cmp	r7, #0
 8013d96:	bfbc      	itt	lt
 8013d98:	f04f 0800 	movlt.w	r8, #0
 8013d9c:	4647      	movlt	r7, r8
 8013d9e:	a31e      	add	r3, pc, #120	@ (adr r3, 8013e18 <rcl_wait+0x2e0>)
 8013da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013da4:	4640      	mov	r0, r8
 8013da6:	4639      	mov	r1, r7
 8013da8:	f7ec fe90 	bl	8000acc <__aeabi_ldivmod>
 8013dac:	a31a      	add	r3, pc, #104	@ (adr r3, 8013e18 <rcl_wait+0x2e0>)
 8013dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013db2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013db6:	4640      	mov	r0, r8
 8013db8:	4639      	mov	r1, r7
 8013dba:	f7ec fe87 	bl	8000acc <__aeabi_ldivmod>
 8013dbe:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8013dc2:	ab08      	add	r3, sp, #32
 8013dc4:	e73e      	b.n	8013c44 <rcl_wait+0x10c>
 8013dc6:	2001      	movs	r0, #1
 8013dc8:	b00d      	add	sp, #52	@ 0x34
 8013dca:	ecbd 8b02 	vpop	{d8}
 8013dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dd2:	200b      	movs	r0, #11
 8013dd4:	b00d      	add	sp, #52	@ 0x34
 8013dd6:	ecbd 8b02 	vpop	{d8}
 8013dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dde:	465b      	mov	r3, fp
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d1d7      	bne.n	8013d94 <rcl_wait+0x25c>
 8013de4:	e72e      	b.n	8013c44 <rcl_wait+0x10c>
 8013de6:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8013dea:	430b      	orrs	r3, r1
 8013dec:	bf08      	it	eq
 8013dee:	4691      	moveq	r9, r2
 8013df0:	f43f af21 	beq.w	8013c36 <rcl_wait+0xfe>
 8013df4:	9b04      	ldr	r3, [sp, #16]
 8013df6:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8013dfa:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8013dfe:	2b01      	cmp	r3, #1
 8013e00:	9b05      	ldr	r3, [sp, #20]
 8013e02:	f173 0300 	sbcs.w	r3, r3, #0
 8013e06:	f04f 0300 	mov.w	r3, #0
 8013e0a:	4699      	mov	r9, r3
 8013e0c:	dac2      	bge.n	8013d94 <rcl_wait+0x25c>
 8013e0e:	e719      	b.n	8013c44 <rcl_wait+0x10c>
 8013e10:	ffffffff 	.word	0xffffffff
 8013e14:	7fffffff 	.word	0x7fffffff
 8013e18:	3b9aca00 	.word	0x3b9aca00
 8013e1c:	00000000 	.word	0x00000000

08013e20 <rcl_action_take_goal_response>:
 8013e20:	2800      	cmp	r0, #0
 8013e22:	d039      	beq.n	8013e98 <rcl_action_take_goal_response+0x78>
 8013e24:	b570      	push	{r4, r5, r6, lr}
 8013e26:	4604      	mov	r4, r0
 8013e28:	6800      	ldr	r0, [r0, #0]
 8013e2a:	b380      	cbz	r0, 8013e8e <rcl_action_take_goal_response+0x6e>
 8013e2c:	460d      	mov	r5, r1
 8013e2e:	4616      	mov	r6, r2
 8013e30:	f7fd ff66 	bl	8011d00 <rcl_client_is_valid>
 8013e34:	b330      	cbz	r0, 8013e84 <rcl_action_take_goal_response+0x64>
 8013e36:	6820      	ldr	r0, [r4, #0]
 8013e38:	3004      	adds	r0, #4
 8013e3a:	f7fd ff61 	bl	8011d00 <rcl_client_is_valid>
 8013e3e:	b308      	cbz	r0, 8013e84 <rcl_action_take_goal_response+0x64>
 8013e40:	6820      	ldr	r0, [r4, #0]
 8013e42:	3008      	adds	r0, #8
 8013e44:	f7fd ff5c 	bl	8011d00 <rcl_client_is_valid>
 8013e48:	b1e0      	cbz	r0, 8013e84 <rcl_action_take_goal_response+0x64>
 8013e4a:	6820      	ldr	r0, [r4, #0]
 8013e4c:	300c      	adds	r0, #12
 8013e4e:	f7fe fdf5 	bl	8012a3c <rcl_subscription_is_valid>
 8013e52:	b1b8      	cbz	r0, 8013e84 <rcl_action_take_goal_response+0x64>
 8013e54:	6820      	ldr	r0, [r4, #0]
 8013e56:	3010      	adds	r0, #16
 8013e58:	f7fe fdf0 	bl	8012a3c <rcl_subscription_is_valid>
 8013e5c:	b190      	cbz	r0, 8013e84 <rcl_action_take_goal_response+0x64>
 8013e5e:	b1cd      	cbz	r5, 8013e94 <rcl_action_take_goal_response+0x74>
 8013e60:	b1c6      	cbz	r6, 8013e94 <rcl_action_take_goal_response+0x74>
 8013e62:	6820      	ldr	r0, [r4, #0]
 8013e64:	4632      	mov	r2, r6
 8013e66:	4629      	mov	r1, r5
 8013e68:	f7fd ff02 	bl	8011c70 <rcl_take_response>
 8013e6c:	b148      	cbz	r0, 8013e82 <rcl_action_take_goal_response+0x62>
 8013e6e:	280a      	cmp	r0, #10
 8013e70:	d007      	beq.n	8013e82 <rcl_action_take_goal_response+0x62>
 8013e72:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013e76:	f640 0337 	movw	r3, #2103	@ 0x837
 8013e7a:	4290      	cmp	r0, r2
 8013e7c:	bf0c      	ite	eq
 8013e7e:	4618      	moveq	r0, r3
 8013e80:	2001      	movne	r0, #1
 8013e82:	bd70      	pop	{r4, r5, r6, pc}
 8013e84:	f7f7 fe3c 	bl	800bb00 <rcutils_reset_error>
 8013e88:	f640 0036 	movw	r0, #2102	@ 0x836
 8013e8c:	bd70      	pop	{r4, r5, r6, pc}
 8013e8e:	f640 0036 	movw	r0, #2102	@ 0x836
 8013e92:	bd70      	pop	{r4, r5, r6, pc}
 8013e94:	200b      	movs	r0, #11
 8013e96:	bd70      	pop	{r4, r5, r6, pc}
 8013e98:	f640 0036 	movw	r0, #2102	@ 0x836
 8013e9c:	4770      	bx	lr
 8013e9e:	bf00      	nop

08013ea0 <rcl_action_send_result_request>:
 8013ea0:	b390      	cbz	r0, 8013f08 <rcl_action_send_result_request+0x68>
 8013ea2:	b570      	push	{r4, r5, r6, lr}
 8013ea4:	4604      	mov	r4, r0
 8013ea6:	6800      	ldr	r0, [r0, #0]
 8013ea8:	b348      	cbz	r0, 8013efe <rcl_action_send_result_request+0x5e>
 8013eaa:	460d      	mov	r5, r1
 8013eac:	4616      	mov	r6, r2
 8013eae:	f7fd ff27 	bl	8011d00 <rcl_client_is_valid>
 8013eb2:	b1f8      	cbz	r0, 8013ef4 <rcl_action_send_result_request+0x54>
 8013eb4:	6820      	ldr	r0, [r4, #0]
 8013eb6:	3004      	adds	r0, #4
 8013eb8:	f7fd ff22 	bl	8011d00 <rcl_client_is_valid>
 8013ebc:	b1d0      	cbz	r0, 8013ef4 <rcl_action_send_result_request+0x54>
 8013ebe:	6820      	ldr	r0, [r4, #0]
 8013ec0:	3008      	adds	r0, #8
 8013ec2:	f7fd ff1d 	bl	8011d00 <rcl_client_is_valid>
 8013ec6:	b1a8      	cbz	r0, 8013ef4 <rcl_action_send_result_request+0x54>
 8013ec8:	6820      	ldr	r0, [r4, #0]
 8013eca:	300c      	adds	r0, #12
 8013ecc:	f7fe fdb6 	bl	8012a3c <rcl_subscription_is_valid>
 8013ed0:	b180      	cbz	r0, 8013ef4 <rcl_action_send_result_request+0x54>
 8013ed2:	6820      	ldr	r0, [r4, #0]
 8013ed4:	3010      	adds	r0, #16
 8013ed6:	f7fe fdb1 	bl	8012a3c <rcl_subscription_is_valid>
 8013eda:	b158      	cbz	r0, 8013ef4 <rcl_action_send_result_request+0x54>
 8013edc:	b195      	cbz	r5, 8013f04 <rcl_action_send_result_request+0x64>
 8013ede:	b18e      	cbz	r6, 8013f04 <rcl_action_send_result_request+0x64>
 8013ee0:	6820      	ldr	r0, [r4, #0]
 8013ee2:	4632      	mov	r2, r6
 8013ee4:	4629      	mov	r1, r5
 8013ee6:	3008      	adds	r0, #8
 8013ee8:	f7fd fe8a 	bl	8011c00 <rcl_send_request>
 8013eec:	3800      	subs	r0, #0
 8013eee:	bf18      	it	ne
 8013ef0:	2001      	movne	r0, #1
 8013ef2:	bd70      	pop	{r4, r5, r6, pc}
 8013ef4:	f7f7 fe04 	bl	800bb00 <rcutils_reset_error>
 8013ef8:	f640 0036 	movw	r0, #2102	@ 0x836
 8013efc:	bd70      	pop	{r4, r5, r6, pc}
 8013efe:	f640 0036 	movw	r0, #2102	@ 0x836
 8013f02:	bd70      	pop	{r4, r5, r6, pc}
 8013f04:	200b      	movs	r0, #11
 8013f06:	bd70      	pop	{r4, r5, r6, pc}
 8013f08:	f640 0036 	movw	r0, #2102	@ 0x836
 8013f0c:	4770      	bx	lr
 8013f0e:	bf00      	nop

08013f10 <rcl_action_take_result_response>:
 8013f10:	2800      	cmp	r0, #0
 8013f12:	d03a      	beq.n	8013f8a <rcl_action_take_result_response+0x7a>
 8013f14:	b570      	push	{r4, r5, r6, lr}
 8013f16:	4604      	mov	r4, r0
 8013f18:	6800      	ldr	r0, [r0, #0]
 8013f1a:	b388      	cbz	r0, 8013f80 <rcl_action_take_result_response+0x70>
 8013f1c:	460d      	mov	r5, r1
 8013f1e:	4616      	mov	r6, r2
 8013f20:	f7fd feee 	bl	8011d00 <rcl_client_is_valid>
 8013f24:	b338      	cbz	r0, 8013f76 <rcl_action_take_result_response+0x66>
 8013f26:	6820      	ldr	r0, [r4, #0]
 8013f28:	3004      	adds	r0, #4
 8013f2a:	f7fd fee9 	bl	8011d00 <rcl_client_is_valid>
 8013f2e:	b310      	cbz	r0, 8013f76 <rcl_action_take_result_response+0x66>
 8013f30:	6820      	ldr	r0, [r4, #0]
 8013f32:	3008      	adds	r0, #8
 8013f34:	f7fd fee4 	bl	8011d00 <rcl_client_is_valid>
 8013f38:	b1e8      	cbz	r0, 8013f76 <rcl_action_take_result_response+0x66>
 8013f3a:	6820      	ldr	r0, [r4, #0]
 8013f3c:	300c      	adds	r0, #12
 8013f3e:	f7fe fd7d 	bl	8012a3c <rcl_subscription_is_valid>
 8013f42:	b1c0      	cbz	r0, 8013f76 <rcl_action_take_result_response+0x66>
 8013f44:	6820      	ldr	r0, [r4, #0]
 8013f46:	3010      	adds	r0, #16
 8013f48:	f7fe fd78 	bl	8012a3c <rcl_subscription_is_valid>
 8013f4c:	b198      	cbz	r0, 8013f76 <rcl_action_take_result_response+0x66>
 8013f4e:	b1d5      	cbz	r5, 8013f86 <rcl_action_take_result_response+0x76>
 8013f50:	b1ce      	cbz	r6, 8013f86 <rcl_action_take_result_response+0x76>
 8013f52:	6820      	ldr	r0, [r4, #0]
 8013f54:	4632      	mov	r2, r6
 8013f56:	4629      	mov	r1, r5
 8013f58:	3008      	adds	r0, #8
 8013f5a:	f7fd fe89 	bl	8011c70 <rcl_take_response>
 8013f5e:	b148      	cbz	r0, 8013f74 <rcl_action_take_result_response+0x64>
 8013f60:	280a      	cmp	r0, #10
 8013f62:	d007      	beq.n	8013f74 <rcl_action_take_result_response+0x64>
 8013f64:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013f68:	f640 0337 	movw	r3, #2103	@ 0x837
 8013f6c:	4290      	cmp	r0, r2
 8013f6e:	bf0c      	ite	eq
 8013f70:	4618      	moveq	r0, r3
 8013f72:	2001      	movne	r0, #1
 8013f74:	bd70      	pop	{r4, r5, r6, pc}
 8013f76:	f7f7 fdc3 	bl	800bb00 <rcutils_reset_error>
 8013f7a:	f640 0036 	movw	r0, #2102	@ 0x836
 8013f7e:	bd70      	pop	{r4, r5, r6, pc}
 8013f80:	f640 0036 	movw	r0, #2102	@ 0x836
 8013f84:	bd70      	pop	{r4, r5, r6, pc}
 8013f86:	200b      	movs	r0, #11
 8013f88:	bd70      	pop	{r4, r5, r6, pc}
 8013f8a:	f640 0036 	movw	r0, #2102	@ 0x836
 8013f8e:	4770      	bx	lr

08013f90 <rcl_action_take_cancel_response>:
 8013f90:	2800      	cmp	r0, #0
 8013f92:	d03a      	beq.n	801400a <rcl_action_take_cancel_response+0x7a>
 8013f94:	b570      	push	{r4, r5, r6, lr}
 8013f96:	4604      	mov	r4, r0
 8013f98:	6800      	ldr	r0, [r0, #0]
 8013f9a:	b388      	cbz	r0, 8014000 <rcl_action_take_cancel_response+0x70>
 8013f9c:	460d      	mov	r5, r1
 8013f9e:	4616      	mov	r6, r2
 8013fa0:	f7fd feae 	bl	8011d00 <rcl_client_is_valid>
 8013fa4:	b338      	cbz	r0, 8013ff6 <rcl_action_take_cancel_response+0x66>
 8013fa6:	6820      	ldr	r0, [r4, #0]
 8013fa8:	3004      	adds	r0, #4
 8013faa:	f7fd fea9 	bl	8011d00 <rcl_client_is_valid>
 8013fae:	b310      	cbz	r0, 8013ff6 <rcl_action_take_cancel_response+0x66>
 8013fb0:	6820      	ldr	r0, [r4, #0]
 8013fb2:	3008      	adds	r0, #8
 8013fb4:	f7fd fea4 	bl	8011d00 <rcl_client_is_valid>
 8013fb8:	b1e8      	cbz	r0, 8013ff6 <rcl_action_take_cancel_response+0x66>
 8013fba:	6820      	ldr	r0, [r4, #0]
 8013fbc:	300c      	adds	r0, #12
 8013fbe:	f7fe fd3d 	bl	8012a3c <rcl_subscription_is_valid>
 8013fc2:	b1c0      	cbz	r0, 8013ff6 <rcl_action_take_cancel_response+0x66>
 8013fc4:	6820      	ldr	r0, [r4, #0]
 8013fc6:	3010      	adds	r0, #16
 8013fc8:	f7fe fd38 	bl	8012a3c <rcl_subscription_is_valid>
 8013fcc:	b198      	cbz	r0, 8013ff6 <rcl_action_take_cancel_response+0x66>
 8013fce:	b1d5      	cbz	r5, 8014006 <rcl_action_take_cancel_response+0x76>
 8013fd0:	b1ce      	cbz	r6, 8014006 <rcl_action_take_cancel_response+0x76>
 8013fd2:	6820      	ldr	r0, [r4, #0]
 8013fd4:	4632      	mov	r2, r6
 8013fd6:	4629      	mov	r1, r5
 8013fd8:	3004      	adds	r0, #4
 8013fda:	f7fd fe49 	bl	8011c70 <rcl_take_response>
 8013fde:	b148      	cbz	r0, 8013ff4 <rcl_action_take_cancel_response+0x64>
 8013fe0:	280a      	cmp	r0, #10
 8013fe2:	d007      	beq.n	8013ff4 <rcl_action_take_cancel_response+0x64>
 8013fe4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013fe8:	f640 0337 	movw	r3, #2103	@ 0x837
 8013fec:	4290      	cmp	r0, r2
 8013fee:	bf0c      	ite	eq
 8013ff0:	4618      	moveq	r0, r3
 8013ff2:	2001      	movne	r0, #1
 8013ff4:	bd70      	pop	{r4, r5, r6, pc}
 8013ff6:	f7f7 fd83 	bl	800bb00 <rcutils_reset_error>
 8013ffa:	f640 0036 	movw	r0, #2102	@ 0x836
 8013ffe:	bd70      	pop	{r4, r5, r6, pc}
 8014000:	f640 0036 	movw	r0, #2102	@ 0x836
 8014004:	bd70      	pop	{r4, r5, r6, pc}
 8014006:	200b      	movs	r0, #11
 8014008:	bd70      	pop	{r4, r5, r6, pc}
 801400a:	f640 0036 	movw	r0, #2102	@ 0x836
 801400e:	4770      	bx	lr

08014010 <rcl_action_take_feedback>:
 8014010:	2800      	cmp	r0, #0
 8014012:	d038      	beq.n	8014086 <rcl_action_take_feedback+0x76>
 8014014:	b530      	push	{r4, r5, lr}
 8014016:	4604      	mov	r4, r0
 8014018:	6800      	ldr	r0, [r0, #0]
 801401a:	b091      	sub	sp, #68	@ 0x44
 801401c:	b378      	cbz	r0, 801407e <rcl_action_take_feedback+0x6e>
 801401e:	460d      	mov	r5, r1
 8014020:	f7fd fe6e 	bl	8011d00 <rcl_client_is_valid>
 8014024:	b328      	cbz	r0, 8014072 <rcl_action_take_feedback+0x62>
 8014026:	6820      	ldr	r0, [r4, #0]
 8014028:	3004      	adds	r0, #4
 801402a:	f7fd fe69 	bl	8011d00 <rcl_client_is_valid>
 801402e:	b300      	cbz	r0, 8014072 <rcl_action_take_feedback+0x62>
 8014030:	6820      	ldr	r0, [r4, #0]
 8014032:	3008      	adds	r0, #8
 8014034:	f7fd fe64 	bl	8011d00 <rcl_client_is_valid>
 8014038:	b1d8      	cbz	r0, 8014072 <rcl_action_take_feedback+0x62>
 801403a:	6820      	ldr	r0, [r4, #0]
 801403c:	300c      	adds	r0, #12
 801403e:	f7fe fcfd 	bl	8012a3c <rcl_subscription_is_valid>
 8014042:	b1b0      	cbz	r0, 8014072 <rcl_action_take_feedback+0x62>
 8014044:	6820      	ldr	r0, [r4, #0]
 8014046:	3010      	adds	r0, #16
 8014048:	f7fe fcf8 	bl	8012a3c <rcl_subscription_is_valid>
 801404c:	b188      	cbz	r0, 8014072 <rcl_action_take_feedback+0x62>
 801404e:	b1ed      	cbz	r5, 801408c <rcl_action_take_feedback+0x7c>
 8014050:	6820      	ldr	r0, [r4, #0]
 8014052:	2300      	movs	r3, #0
 8014054:	466a      	mov	r2, sp
 8014056:	4629      	mov	r1, r5
 8014058:	300c      	adds	r0, #12
 801405a:	f7fe fc91 	bl	8012980 <rcl_take>
 801405e:	b160      	cbz	r0, 801407a <rcl_action_take_feedback+0x6a>
 8014060:	f240 1391 	movw	r3, #401	@ 0x191
 8014064:	4298      	cmp	r0, r3
 8014066:	d014      	beq.n	8014092 <rcl_action_take_feedback+0x82>
 8014068:	280a      	cmp	r0, #10
 801406a:	bf18      	it	ne
 801406c:	2001      	movne	r0, #1
 801406e:	b011      	add	sp, #68	@ 0x44
 8014070:	bd30      	pop	{r4, r5, pc}
 8014072:	f7f7 fd45 	bl	800bb00 <rcutils_reset_error>
 8014076:	f640 0036 	movw	r0, #2102	@ 0x836
 801407a:	b011      	add	sp, #68	@ 0x44
 801407c:	bd30      	pop	{r4, r5, pc}
 801407e:	f640 0036 	movw	r0, #2102	@ 0x836
 8014082:	b011      	add	sp, #68	@ 0x44
 8014084:	bd30      	pop	{r4, r5, pc}
 8014086:	f640 0036 	movw	r0, #2102	@ 0x836
 801408a:	4770      	bx	lr
 801408c:	200b      	movs	r0, #11
 801408e:	b011      	add	sp, #68	@ 0x44
 8014090:	bd30      	pop	{r4, r5, pc}
 8014092:	f640 0037 	movw	r0, #2103	@ 0x837
 8014096:	e7f0      	b.n	801407a <rcl_action_take_feedback+0x6a>

08014098 <rcl_action_wait_set_add_action_client>:
 8014098:	2800      	cmp	r0, #0
 801409a:	d048      	beq.n	801412e <rcl_action_wait_set_add_action_client+0x96>
 801409c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801409e:	460c      	mov	r4, r1
 80140a0:	2900      	cmp	r1, #0
 80140a2:	d03c      	beq.n	801411e <rcl_action_wait_set_add_action_client+0x86>
 80140a4:	4605      	mov	r5, r0
 80140a6:	6808      	ldr	r0, [r1, #0]
 80140a8:	2800      	cmp	r0, #0
 80140aa:	d038      	beq.n	801411e <rcl_action_wait_set_add_action_client+0x86>
 80140ac:	4617      	mov	r7, r2
 80140ae:	461e      	mov	r6, r3
 80140b0:	f7fd fe26 	bl	8011d00 <rcl_client_is_valid>
 80140b4:	b3b0      	cbz	r0, 8014124 <rcl_action_wait_set_add_action_client+0x8c>
 80140b6:	6820      	ldr	r0, [r4, #0]
 80140b8:	3004      	adds	r0, #4
 80140ba:	f7fd fe21 	bl	8011d00 <rcl_client_is_valid>
 80140be:	b388      	cbz	r0, 8014124 <rcl_action_wait_set_add_action_client+0x8c>
 80140c0:	6820      	ldr	r0, [r4, #0]
 80140c2:	3008      	adds	r0, #8
 80140c4:	f7fd fe1c 	bl	8011d00 <rcl_client_is_valid>
 80140c8:	b360      	cbz	r0, 8014124 <rcl_action_wait_set_add_action_client+0x8c>
 80140ca:	6820      	ldr	r0, [r4, #0]
 80140cc:	300c      	adds	r0, #12
 80140ce:	f7fe fcb5 	bl	8012a3c <rcl_subscription_is_valid>
 80140d2:	b338      	cbz	r0, 8014124 <rcl_action_wait_set_add_action_client+0x8c>
 80140d4:	6820      	ldr	r0, [r4, #0]
 80140d6:	3010      	adds	r0, #16
 80140d8:	f7fe fcb0 	bl	8012a3c <rcl_subscription_is_valid>
 80140dc:	b310      	cbz	r0, 8014124 <rcl_action_wait_set_add_action_client+0x8c>
 80140de:	6821      	ldr	r1, [r4, #0]
 80140e0:	4628      	mov	r0, r5
 80140e2:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 80140e6:	f7ff fccd 	bl	8013a84 <rcl_wait_set_add_client>
 80140ea:	b9b8      	cbnz	r0, 801411c <rcl_action_wait_set_add_action_client+0x84>
 80140ec:	6821      	ldr	r1, [r4, #0]
 80140ee:	4628      	mov	r0, r5
 80140f0:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 80140f4:	3104      	adds	r1, #4
 80140f6:	f7ff fcc5 	bl	8013a84 <rcl_wait_set_add_client>
 80140fa:	b978      	cbnz	r0, 801411c <rcl_action_wait_set_add_action_client+0x84>
 80140fc:	6821      	ldr	r1, [r4, #0]
 80140fe:	4628      	mov	r0, r5
 8014100:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8014104:	3108      	adds	r1, #8
 8014106:	f7ff fcbd 	bl	8013a84 <rcl_wait_set_add_client>
 801410a:	b938      	cbnz	r0, 801411c <rcl_action_wait_set_add_action_client+0x84>
 801410c:	6821      	ldr	r1, [r4, #0]
 801410e:	4628      	mov	r0, r5
 8014110:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8014114:	310c      	adds	r1, #12
 8014116:	f7ff f96d 	bl	80133f4 <rcl_wait_set_add_subscription>
 801411a:	b158      	cbz	r0, 8014134 <rcl_action_wait_set_add_action_client+0x9c>
 801411c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801411e:	f640 0036 	movw	r0, #2102	@ 0x836
 8014122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014124:	f7f7 fcec 	bl	800bb00 <rcutils_reset_error>
 8014128:	f640 0036 	movw	r0, #2102	@ 0x836
 801412c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801412e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014132:	4770      	bx	lr
 8014134:	6821      	ldr	r1, [r4, #0]
 8014136:	4628      	mov	r0, r5
 8014138:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801413c:	3110      	adds	r1, #16
 801413e:	f7ff f959 	bl	80133f4 <rcl_wait_set_add_subscription>
 8014142:	2800      	cmp	r0, #0
 8014144:	d1ea      	bne.n	801411c <rcl_action_wait_set_add_action_client+0x84>
 8014146:	b11f      	cbz	r7, 8014150 <rcl_action_wait_set_add_action_client+0xb8>
 8014148:	6823      	ldr	r3, [r4, #0]
 801414a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801414e:	603b      	str	r3, [r7, #0]
 8014150:	2e00      	cmp	r6, #0
 8014152:	d0e3      	beq.n	801411c <rcl_action_wait_set_add_action_client+0x84>
 8014154:	6823      	ldr	r3, [r4, #0]
 8014156:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801415a:	6033      	str	r3, [r6, #0]
 801415c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801415e:	bf00      	nop

08014160 <rcl_action_client_wait_set_get_entities_ready>:
 8014160:	2800      	cmp	r0, #0
 8014162:	f000 808d 	beq.w	8014280 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8014166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801416a:	460c      	mov	r4, r1
 801416c:	2900      	cmp	r1, #0
 801416e:	d077      	beq.n	8014260 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8014170:	4605      	mov	r5, r0
 8014172:	6808      	ldr	r0, [r1, #0]
 8014174:	2800      	cmp	r0, #0
 8014176:	d073      	beq.n	8014260 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8014178:	4616      	mov	r6, r2
 801417a:	461f      	mov	r7, r3
 801417c:	f7fd fdc0 	bl	8011d00 <rcl_client_is_valid>
 8014180:	2800      	cmp	r0, #0
 8014182:	d071      	beq.n	8014268 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014184:	6820      	ldr	r0, [r4, #0]
 8014186:	3004      	adds	r0, #4
 8014188:	f7fd fdba 	bl	8011d00 <rcl_client_is_valid>
 801418c:	2800      	cmp	r0, #0
 801418e:	d06b      	beq.n	8014268 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014190:	6820      	ldr	r0, [r4, #0]
 8014192:	3008      	adds	r0, #8
 8014194:	f7fd fdb4 	bl	8011d00 <rcl_client_is_valid>
 8014198:	2800      	cmp	r0, #0
 801419a:	d065      	beq.n	8014268 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801419c:	6820      	ldr	r0, [r4, #0]
 801419e:	300c      	adds	r0, #12
 80141a0:	f7fe fc4c 	bl	8012a3c <rcl_subscription_is_valid>
 80141a4:	2800      	cmp	r0, #0
 80141a6:	d05f      	beq.n	8014268 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80141a8:	6820      	ldr	r0, [r4, #0]
 80141aa:	3010      	adds	r0, #16
 80141ac:	f7fe fc46 	bl	8012a3c <rcl_subscription_is_valid>
 80141b0:	2800      	cmp	r0, #0
 80141b2:	d059      	beq.n	8014268 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80141b4:	2e00      	cmp	r6, #0
 80141b6:	d060      	beq.n	801427a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80141b8:	2f00      	cmp	r7, #0
 80141ba:	d05e      	beq.n	801427a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80141bc:	9b06      	ldr	r3, [sp, #24]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d05b      	beq.n	801427a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80141c2:	9b07      	ldr	r3, [sp, #28]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d058      	beq.n	801427a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80141c8:	9b08      	ldr	r3, [sp, #32]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d055      	beq.n	801427a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80141ce:	6823      	ldr	r3, [r4, #0]
 80141d0:	686a      	ldr	r2, [r5, #4]
 80141d2:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 80141d6:	428a      	cmp	r2, r1
 80141d8:	d94c      	bls.n	8014274 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80141da:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 80141de:	4282      	cmp	r2, r0
 80141e0:	d948      	bls.n	8014274 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80141e2:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 80141e6:	69ea      	ldr	r2, [r5, #28]
 80141e8:	42a2      	cmp	r2, r4
 80141ea:	d943      	bls.n	8014274 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80141ec:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 80141f0:	4562      	cmp	r2, ip
 80141f2:	d93f      	bls.n	8014274 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80141f4:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 80141f8:	4572      	cmp	r2, lr
 80141fa:	d93b      	bls.n	8014274 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80141fc:	69aa      	ldr	r2, [r5, #24]
 80141fe:	682d      	ldr	r5, [r5, #0]
 8014200:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 8014204:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8014208:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801420c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8014210:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8014214:	f103 0c0c 	add.w	ip, r3, #12
 8014218:	eba5 050c 	sub.w	r5, r5, ip
 801421c:	fab5 f585 	clz	r5, r5
 8014220:	096d      	lsrs	r5, r5, #5
 8014222:	7035      	strb	r5, [r6, #0]
 8014224:	f103 0510 	add.w	r5, r3, #16
 8014228:	1b64      	subs	r4, r4, r5
 801422a:	fab4 f484 	clz	r4, r4
 801422e:	0964      	lsrs	r4, r4, #5
 8014230:	703c      	strb	r4, [r7, #0]
 8014232:	eba3 0008 	sub.w	r0, r3, r8
 8014236:	1d1c      	adds	r4, r3, #4
 8014238:	3308      	adds	r3, #8
 801423a:	1ad3      	subs	r3, r2, r3
 801423c:	fab0 f080 	clz	r0, r0
 8014240:	9a06      	ldr	r2, [sp, #24]
 8014242:	0940      	lsrs	r0, r0, #5
 8014244:	1b09      	subs	r1, r1, r4
 8014246:	7010      	strb	r0, [r2, #0]
 8014248:	fab1 f181 	clz	r1, r1
 801424c:	9a07      	ldr	r2, [sp, #28]
 801424e:	0949      	lsrs	r1, r1, #5
 8014250:	7011      	strb	r1, [r2, #0]
 8014252:	fab3 f383 	clz	r3, r3
 8014256:	9a08      	ldr	r2, [sp, #32]
 8014258:	095b      	lsrs	r3, r3, #5
 801425a:	2000      	movs	r0, #0
 801425c:	7013      	strb	r3, [r2, #0]
 801425e:	e001      	b.n	8014264 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8014260:	f640 0036 	movw	r0, #2102	@ 0x836
 8014264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014268:	f7f7 fc4a 	bl	800bb00 <rcutils_reset_error>
 801426c:	f640 0036 	movw	r0, #2102	@ 0x836
 8014270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014274:	2001      	movs	r0, #1
 8014276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801427a:	200b      	movs	r0, #11
 801427c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014280:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014284:	4770      	bx	lr
 8014286:	bf00      	nop

08014288 <rcl_action_take_goal_request>:
 8014288:	2800      	cmp	r0, #0
 801428a:	d039      	beq.n	8014300 <rcl_action_take_goal_request+0x78>
 801428c:	b570      	push	{r4, r5, r6, lr}
 801428e:	4604      	mov	r4, r0
 8014290:	6800      	ldr	r0, [r0, #0]
 8014292:	b380      	cbz	r0, 80142f6 <rcl_action_take_goal_request+0x6e>
 8014294:	460d      	mov	r5, r1
 8014296:	4616      	mov	r6, r2
 8014298:	f7fe fa8c 	bl	80127b4 <rcl_service_is_valid>
 801429c:	b330      	cbz	r0, 80142ec <rcl_action_take_goal_request+0x64>
 801429e:	6820      	ldr	r0, [r4, #0]
 80142a0:	3004      	adds	r0, #4
 80142a2:	f7fe fa87 	bl	80127b4 <rcl_service_is_valid>
 80142a6:	b308      	cbz	r0, 80142ec <rcl_action_take_goal_request+0x64>
 80142a8:	6820      	ldr	r0, [r4, #0]
 80142aa:	3008      	adds	r0, #8
 80142ac:	f7fe fa82 	bl	80127b4 <rcl_service_is_valid>
 80142b0:	b1e0      	cbz	r0, 80142ec <rcl_action_take_goal_request+0x64>
 80142b2:	6820      	ldr	r0, [r4, #0]
 80142b4:	300c      	adds	r0, #12
 80142b6:	f7f6 fc43 	bl	800ab40 <rcl_publisher_is_valid>
 80142ba:	b1b8      	cbz	r0, 80142ec <rcl_action_take_goal_request+0x64>
 80142bc:	6820      	ldr	r0, [r4, #0]
 80142be:	3010      	adds	r0, #16
 80142c0:	f7f6 fc3e 	bl	800ab40 <rcl_publisher_is_valid>
 80142c4:	b190      	cbz	r0, 80142ec <rcl_action_take_goal_request+0x64>
 80142c6:	b1cd      	cbz	r5, 80142fc <rcl_action_take_goal_request+0x74>
 80142c8:	b1c6      	cbz	r6, 80142fc <rcl_action_take_goal_request+0x74>
 80142ca:	6820      	ldr	r0, [r4, #0]
 80142cc:	4632      	mov	r2, r6
 80142ce:	4629      	mov	r1, r5
 80142d0:	f7fe fa18 	bl	8012704 <rcl_take_request>
 80142d4:	b148      	cbz	r0, 80142ea <rcl_action_take_goal_request+0x62>
 80142d6:	280a      	cmp	r0, #10
 80142d8:	d007      	beq.n	80142ea <rcl_action_take_goal_request+0x62>
 80142da:	f240 2259 	movw	r2, #601	@ 0x259
 80142de:	f640 0399 	movw	r3, #2201	@ 0x899
 80142e2:	4290      	cmp	r0, r2
 80142e4:	bf0c      	ite	eq
 80142e6:	4618      	moveq	r0, r3
 80142e8:	2001      	movne	r0, #1
 80142ea:	bd70      	pop	{r4, r5, r6, pc}
 80142ec:	f7f7 fc08 	bl	800bb00 <rcutils_reset_error>
 80142f0:	f640 0098 	movw	r0, #2200	@ 0x898
 80142f4:	bd70      	pop	{r4, r5, r6, pc}
 80142f6:	f640 0098 	movw	r0, #2200	@ 0x898
 80142fa:	bd70      	pop	{r4, r5, r6, pc}
 80142fc:	200b      	movs	r0, #11
 80142fe:	bd70      	pop	{r4, r5, r6, pc}
 8014300:	f640 0098 	movw	r0, #2200	@ 0x898
 8014304:	4770      	bx	lr
 8014306:	bf00      	nop

08014308 <rcl_action_send_goal_response>:
 8014308:	b390      	cbz	r0, 8014370 <rcl_action_send_goal_response+0x68>
 801430a:	b570      	push	{r4, r5, r6, lr}
 801430c:	4604      	mov	r4, r0
 801430e:	6800      	ldr	r0, [r0, #0]
 8014310:	b348      	cbz	r0, 8014366 <rcl_action_send_goal_response+0x5e>
 8014312:	460d      	mov	r5, r1
 8014314:	4616      	mov	r6, r2
 8014316:	f7fe fa4d 	bl	80127b4 <rcl_service_is_valid>
 801431a:	b1f8      	cbz	r0, 801435c <rcl_action_send_goal_response+0x54>
 801431c:	6820      	ldr	r0, [r4, #0]
 801431e:	3004      	adds	r0, #4
 8014320:	f7fe fa48 	bl	80127b4 <rcl_service_is_valid>
 8014324:	b1d0      	cbz	r0, 801435c <rcl_action_send_goal_response+0x54>
 8014326:	6820      	ldr	r0, [r4, #0]
 8014328:	3008      	adds	r0, #8
 801432a:	f7fe fa43 	bl	80127b4 <rcl_service_is_valid>
 801432e:	b1a8      	cbz	r0, 801435c <rcl_action_send_goal_response+0x54>
 8014330:	6820      	ldr	r0, [r4, #0]
 8014332:	300c      	adds	r0, #12
 8014334:	f7f6 fc04 	bl	800ab40 <rcl_publisher_is_valid>
 8014338:	b180      	cbz	r0, 801435c <rcl_action_send_goal_response+0x54>
 801433a:	6820      	ldr	r0, [r4, #0]
 801433c:	3010      	adds	r0, #16
 801433e:	f7f6 fbff 	bl	800ab40 <rcl_publisher_is_valid>
 8014342:	b158      	cbz	r0, 801435c <rcl_action_send_goal_response+0x54>
 8014344:	b195      	cbz	r5, 801436c <rcl_action_send_goal_response+0x64>
 8014346:	b18e      	cbz	r6, 801436c <rcl_action_send_goal_response+0x64>
 8014348:	6820      	ldr	r0, [r4, #0]
 801434a:	4632      	mov	r2, r6
 801434c:	4629      	mov	r1, r5
 801434e:	f7fe fa19 	bl	8012784 <rcl_send_response>
 8014352:	b110      	cbz	r0, 801435a <rcl_action_send_goal_response+0x52>
 8014354:	2802      	cmp	r0, #2
 8014356:	bf18      	it	ne
 8014358:	2001      	movne	r0, #1
 801435a:	bd70      	pop	{r4, r5, r6, pc}
 801435c:	f7f7 fbd0 	bl	800bb00 <rcutils_reset_error>
 8014360:	f640 0098 	movw	r0, #2200	@ 0x898
 8014364:	bd70      	pop	{r4, r5, r6, pc}
 8014366:	f640 0098 	movw	r0, #2200	@ 0x898
 801436a:	bd70      	pop	{r4, r5, r6, pc}
 801436c:	200b      	movs	r0, #11
 801436e:	bd70      	pop	{r4, r5, r6, pc}
 8014370:	f640 0098 	movw	r0, #2200	@ 0x898
 8014374:	4770      	bx	lr
 8014376:	bf00      	nop

08014378 <rcl_action_take_result_request>:
 8014378:	2800      	cmp	r0, #0
 801437a:	d03a      	beq.n	80143f2 <rcl_action_take_result_request+0x7a>
 801437c:	b570      	push	{r4, r5, r6, lr}
 801437e:	4604      	mov	r4, r0
 8014380:	6800      	ldr	r0, [r0, #0]
 8014382:	b388      	cbz	r0, 80143e8 <rcl_action_take_result_request+0x70>
 8014384:	460d      	mov	r5, r1
 8014386:	4616      	mov	r6, r2
 8014388:	f7fe fa14 	bl	80127b4 <rcl_service_is_valid>
 801438c:	b338      	cbz	r0, 80143de <rcl_action_take_result_request+0x66>
 801438e:	6820      	ldr	r0, [r4, #0]
 8014390:	3004      	adds	r0, #4
 8014392:	f7fe fa0f 	bl	80127b4 <rcl_service_is_valid>
 8014396:	b310      	cbz	r0, 80143de <rcl_action_take_result_request+0x66>
 8014398:	6820      	ldr	r0, [r4, #0]
 801439a:	3008      	adds	r0, #8
 801439c:	f7fe fa0a 	bl	80127b4 <rcl_service_is_valid>
 80143a0:	b1e8      	cbz	r0, 80143de <rcl_action_take_result_request+0x66>
 80143a2:	6820      	ldr	r0, [r4, #0]
 80143a4:	300c      	adds	r0, #12
 80143a6:	f7f6 fbcb 	bl	800ab40 <rcl_publisher_is_valid>
 80143aa:	b1c0      	cbz	r0, 80143de <rcl_action_take_result_request+0x66>
 80143ac:	6820      	ldr	r0, [r4, #0]
 80143ae:	3010      	adds	r0, #16
 80143b0:	f7f6 fbc6 	bl	800ab40 <rcl_publisher_is_valid>
 80143b4:	b198      	cbz	r0, 80143de <rcl_action_take_result_request+0x66>
 80143b6:	b1d5      	cbz	r5, 80143ee <rcl_action_take_result_request+0x76>
 80143b8:	b1ce      	cbz	r6, 80143ee <rcl_action_take_result_request+0x76>
 80143ba:	6820      	ldr	r0, [r4, #0]
 80143bc:	4632      	mov	r2, r6
 80143be:	4629      	mov	r1, r5
 80143c0:	3008      	adds	r0, #8
 80143c2:	f7fe f99f 	bl	8012704 <rcl_take_request>
 80143c6:	b148      	cbz	r0, 80143dc <rcl_action_take_result_request+0x64>
 80143c8:	280a      	cmp	r0, #10
 80143ca:	d007      	beq.n	80143dc <rcl_action_take_result_request+0x64>
 80143cc:	f240 2259 	movw	r2, #601	@ 0x259
 80143d0:	f640 0399 	movw	r3, #2201	@ 0x899
 80143d4:	4290      	cmp	r0, r2
 80143d6:	bf0c      	ite	eq
 80143d8:	4618      	moveq	r0, r3
 80143da:	2001      	movne	r0, #1
 80143dc:	bd70      	pop	{r4, r5, r6, pc}
 80143de:	f7f7 fb8f 	bl	800bb00 <rcutils_reset_error>
 80143e2:	f640 0098 	movw	r0, #2200	@ 0x898
 80143e6:	bd70      	pop	{r4, r5, r6, pc}
 80143e8:	f640 0098 	movw	r0, #2200	@ 0x898
 80143ec:	bd70      	pop	{r4, r5, r6, pc}
 80143ee:	200b      	movs	r0, #11
 80143f0:	bd70      	pop	{r4, r5, r6, pc}
 80143f2:	f640 0098 	movw	r0, #2200	@ 0x898
 80143f6:	4770      	bx	lr

080143f8 <rcl_action_take_cancel_request>:
 80143f8:	2800      	cmp	r0, #0
 80143fa:	d03a      	beq.n	8014472 <rcl_action_take_cancel_request+0x7a>
 80143fc:	b570      	push	{r4, r5, r6, lr}
 80143fe:	4604      	mov	r4, r0
 8014400:	6800      	ldr	r0, [r0, #0]
 8014402:	b388      	cbz	r0, 8014468 <rcl_action_take_cancel_request+0x70>
 8014404:	460d      	mov	r5, r1
 8014406:	4616      	mov	r6, r2
 8014408:	f7fe f9d4 	bl	80127b4 <rcl_service_is_valid>
 801440c:	b338      	cbz	r0, 801445e <rcl_action_take_cancel_request+0x66>
 801440e:	6820      	ldr	r0, [r4, #0]
 8014410:	3004      	adds	r0, #4
 8014412:	f7fe f9cf 	bl	80127b4 <rcl_service_is_valid>
 8014416:	b310      	cbz	r0, 801445e <rcl_action_take_cancel_request+0x66>
 8014418:	6820      	ldr	r0, [r4, #0]
 801441a:	3008      	adds	r0, #8
 801441c:	f7fe f9ca 	bl	80127b4 <rcl_service_is_valid>
 8014420:	b1e8      	cbz	r0, 801445e <rcl_action_take_cancel_request+0x66>
 8014422:	6820      	ldr	r0, [r4, #0]
 8014424:	300c      	adds	r0, #12
 8014426:	f7f6 fb8b 	bl	800ab40 <rcl_publisher_is_valid>
 801442a:	b1c0      	cbz	r0, 801445e <rcl_action_take_cancel_request+0x66>
 801442c:	6820      	ldr	r0, [r4, #0]
 801442e:	3010      	adds	r0, #16
 8014430:	f7f6 fb86 	bl	800ab40 <rcl_publisher_is_valid>
 8014434:	b198      	cbz	r0, 801445e <rcl_action_take_cancel_request+0x66>
 8014436:	b1d5      	cbz	r5, 801446e <rcl_action_take_cancel_request+0x76>
 8014438:	b1ce      	cbz	r6, 801446e <rcl_action_take_cancel_request+0x76>
 801443a:	6820      	ldr	r0, [r4, #0]
 801443c:	4632      	mov	r2, r6
 801443e:	4629      	mov	r1, r5
 8014440:	3004      	adds	r0, #4
 8014442:	f7fe f95f 	bl	8012704 <rcl_take_request>
 8014446:	b148      	cbz	r0, 801445c <rcl_action_take_cancel_request+0x64>
 8014448:	280a      	cmp	r0, #10
 801444a:	d007      	beq.n	801445c <rcl_action_take_cancel_request+0x64>
 801444c:	f240 2259 	movw	r2, #601	@ 0x259
 8014450:	f640 0399 	movw	r3, #2201	@ 0x899
 8014454:	4290      	cmp	r0, r2
 8014456:	bf0c      	ite	eq
 8014458:	4618      	moveq	r0, r3
 801445a:	2001      	movne	r0, #1
 801445c:	bd70      	pop	{r4, r5, r6, pc}
 801445e:	f7f7 fb4f 	bl	800bb00 <rcutils_reset_error>
 8014462:	f640 0098 	movw	r0, #2200	@ 0x898
 8014466:	bd70      	pop	{r4, r5, r6, pc}
 8014468:	f640 0098 	movw	r0, #2200	@ 0x898
 801446c:	bd70      	pop	{r4, r5, r6, pc}
 801446e:	200b      	movs	r0, #11
 8014470:	bd70      	pop	{r4, r5, r6, pc}
 8014472:	f640 0098 	movw	r0, #2200	@ 0x898
 8014476:	4770      	bx	lr

08014478 <rcl_action_send_cancel_response>:
 8014478:	b398      	cbz	r0, 80144e2 <rcl_action_send_cancel_response+0x6a>
 801447a:	b570      	push	{r4, r5, r6, lr}
 801447c:	4604      	mov	r4, r0
 801447e:	6800      	ldr	r0, [r0, #0]
 8014480:	b350      	cbz	r0, 80144d8 <rcl_action_send_cancel_response+0x60>
 8014482:	460d      	mov	r5, r1
 8014484:	4616      	mov	r6, r2
 8014486:	f7fe f995 	bl	80127b4 <rcl_service_is_valid>
 801448a:	b300      	cbz	r0, 80144ce <rcl_action_send_cancel_response+0x56>
 801448c:	6820      	ldr	r0, [r4, #0]
 801448e:	3004      	adds	r0, #4
 8014490:	f7fe f990 	bl	80127b4 <rcl_service_is_valid>
 8014494:	b1d8      	cbz	r0, 80144ce <rcl_action_send_cancel_response+0x56>
 8014496:	6820      	ldr	r0, [r4, #0]
 8014498:	3008      	adds	r0, #8
 801449a:	f7fe f98b 	bl	80127b4 <rcl_service_is_valid>
 801449e:	b1b0      	cbz	r0, 80144ce <rcl_action_send_cancel_response+0x56>
 80144a0:	6820      	ldr	r0, [r4, #0]
 80144a2:	300c      	adds	r0, #12
 80144a4:	f7f6 fb4c 	bl	800ab40 <rcl_publisher_is_valid>
 80144a8:	b188      	cbz	r0, 80144ce <rcl_action_send_cancel_response+0x56>
 80144aa:	6820      	ldr	r0, [r4, #0]
 80144ac:	3010      	adds	r0, #16
 80144ae:	f7f6 fb47 	bl	800ab40 <rcl_publisher_is_valid>
 80144b2:	b160      	cbz	r0, 80144ce <rcl_action_send_cancel_response+0x56>
 80144b4:	b19d      	cbz	r5, 80144de <rcl_action_send_cancel_response+0x66>
 80144b6:	b196      	cbz	r6, 80144de <rcl_action_send_cancel_response+0x66>
 80144b8:	6820      	ldr	r0, [r4, #0]
 80144ba:	4632      	mov	r2, r6
 80144bc:	4629      	mov	r1, r5
 80144be:	3004      	adds	r0, #4
 80144c0:	f7fe f960 	bl	8012784 <rcl_send_response>
 80144c4:	b110      	cbz	r0, 80144cc <rcl_action_send_cancel_response+0x54>
 80144c6:	2802      	cmp	r0, #2
 80144c8:	bf18      	it	ne
 80144ca:	2001      	movne	r0, #1
 80144cc:	bd70      	pop	{r4, r5, r6, pc}
 80144ce:	f7f7 fb17 	bl	800bb00 <rcutils_reset_error>
 80144d2:	f640 0098 	movw	r0, #2200	@ 0x898
 80144d6:	bd70      	pop	{r4, r5, r6, pc}
 80144d8:	f640 0098 	movw	r0, #2200	@ 0x898
 80144dc:	bd70      	pop	{r4, r5, r6, pc}
 80144de:	200b      	movs	r0, #11
 80144e0:	bd70      	pop	{r4, r5, r6, pc}
 80144e2:	f640 0098 	movw	r0, #2200	@ 0x898
 80144e6:	4770      	bx	lr

080144e8 <rcl_action_wait_set_add_action_server>:
 80144e8:	2800      	cmp	r0, #0
 80144ea:	d04d      	beq.n	8014588 <rcl_action_wait_set_add_action_server+0xa0>
 80144ec:	b570      	push	{r4, r5, r6, lr}
 80144ee:	460c      	mov	r4, r1
 80144f0:	b159      	cbz	r1, 801450a <rcl_action_wait_set_add_action_server+0x22>
 80144f2:	4605      	mov	r5, r0
 80144f4:	6808      	ldr	r0, [r1, #0]
 80144f6:	b140      	cbz	r0, 801450a <rcl_action_wait_set_add_action_server+0x22>
 80144f8:	4616      	mov	r6, r2
 80144fa:	f7fe f95b 	bl	80127b4 <rcl_service_is_valid>
 80144fe:	b120      	cbz	r0, 801450a <rcl_action_wait_set_add_action_server+0x22>
 8014500:	6820      	ldr	r0, [r4, #0]
 8014502:	3004      	adds	r0, #4
 8014504:	f7fe f956 	bl	80127b4 <rcl_service_is_valid>
 8014508:	b910      	cbnz	r0, 8014510 <rcl_action_wait_set_add_action_server+0x28>
 801450a:	f640 0098 	movw	r0, #2200	@ 0x898
 801450e:	bd70      	pop	{r4, r5, r6, pc}
 8014510:	6820      	ldr	r0, [r4, #0]
 8014512:	3008      	adds	r0, #8
 8014514:	f7fe f94e 	bl	80127b4 <rcl_service_is_valid>
 8014518:	2800      	cmp	r0, #0
 801451a:	d0f6      	beq.n	801450a <rcl_action_wait_set_add_action_server+0x22>
 801451c:	6820      	ldr	r0, [r4, #0]
 801451e:	300c      	adds	r0, #12
 8014520:	f7f6 fb26 	bl	800ab70 <rcl_publisher_is_valid_except_context>
 8014524:	2800      	cmp	r0, #0
 8014526:	d0f0      	beq.n	801450a <rcl_action_wait_set_add_action_server+0x22>
 8014528:	6820      	ldr	r0, [r4, #0]
 801452a:	3010      	adds	r0, #16
 801452c:	f7f6 fb20 	bl	800ab70 <rcl_publisher_is_valid_except_context>
 8014530:	2800      	cmp	r0, #0
 8014532:	d0ea      	beq.n	801450a <rcl_action_wait_set_add_action_server+0x22>
 8014534:	6821      	ldr	r1, [r4, #0]
 8014536:	4628      	mov	r0, r5
 8014538:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801453c:	f7ff face 	bl	8013adc <rcl_wait_set_add_service>
 8014540:	2800      	cmp	r0, #0
 8014542:	d1e4      	bne.n	801450e <rcl_action_wait_set_add_action_server+0x26>
 8014544:	6821      	ldr	r1, [r4, #0]
 8014546:	4628      	mov	r0, r5
 8014548:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801454c:	3104      	adds	r1, #4
 801454e:	f7ff fac5 	bl	8013adc <rcl_wait_set_add_service>
 8014552:	2800      	cmp	r0, #0
 8014554:	d1db      	bne.n	801450e <rcl_action_wait_set_add_action_server+0x26>
 8014556:	6821      	ldr	r1, [r4, #0]
 8014558:	4628      	mov	r0, r5
 801455a:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801455e:	3108      	adds	r1, #8
 8014560:	f7ff fabc 	bl	8013adc <rcl_wait_set_add_service>
 8014564:	2800      	cmp	r0, #0
 8014566:	d1d2      	bne.n	801450e <rcl_action_wait_set_add_action_server+0x26>
 8014568:	6821      	ldr	r1, [r4, #0]
 801456a:	4628      	mov	r0, r5
 801456c:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8014570:	3114      	adds	r1, #20
 8014572:	f7ff fa57 	bl	8013a24 <rcl_wait_set_add_timer>
 8014576:	2800      	cmp	r0, #0
 8014578:	d1c9      	bne.n	801450e <rcl_action_wait_set_add_action_server+0x26>
 801457a:	2e00      	cmp	r6, #0
 801457c:	d0c7      	beq.n	801450e <rcl_action_wait_set_add_action_server+0x26>
 801457e:	6823      	ldr	r3, [r4, #0]
 8014580:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8014584:	6033      	str	r3, [r6, #0]
 8014586:	bd70      	pop	{r4, r5, r6, pc}
 8014588:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801458c:	4770      	bx	lr
 801458e:	bf00      	nop

08014590 <rcl_action_server_wait_set_get_entities_ready>:
 8014590:	2800      	cmp	r0, #0
 8014592:	d05a      	beq.n	801464a <rcl_action_server_wait_set_get_entities_ready+0xba>
 8014594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014596:	460c      	mov	r4, r1
 8014598:	b161      	cbz	r1, 80145b4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801459a:	4605      	mov	r5, r0
 801459c:	6808      	ldr	r0, [r1, #0]
 801459e:	b148      	cbz	r0, 80145b4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80145a0:	4616      	mov	r6, r2
 80145a2:	461f      	mov	r7, r3
 80145a4:	f7fe f906 	bl	80127b4 <rcl_service_is_valid>
 80145a8:	b120      	cbz	r0, 80145b4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80145aa:	6820      	ldr	r0, [r4, #0]
 80145ac:	3004      	adds	r0, #4
 80145ae:	f7fe f901 	bl	80127b4 <rcl_service_is_valid>
 80145b2:	b910      	cbnz	r0, 80145ba <rcl_action_server_wait_set_get_entities_ready+0x2a>
 80145b4:	f640 0098 	movw	r0, #2200	@ 0x898
 80145b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145ba:	6820      	ldr	r0, [r4, #0]
 80145bc:	3008      	adds	r0, #8
 80145be:	f7fe f8f9 	bl	80127b4 <rcl_service_is_valid>
 80145c2:	2800      	cmp	r0, #0
 80145c4:	d0f6      	beq.n	80145b4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80145c6:	6820      	ldr	r0, [r4, #0]
 80145c8:	300c      	adds	r0, #12
 80145ca:	f7f6 fad1 	bl	800ab70 <rcl_publisher_is_valid_except_context>
 80145ce:	2800      	cmp	r0, #0
 80145d0:	d0f0      	beq.n	80145b4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80145d2:	6820      	ldr	r0, [r4, #0]
 80145d4:	3010      	adds	r0, #16
 80145d6:	f7f6 facb 	bl	800ab70 <rcl_publisher_is_valid_except_context>
 80145da:	2800      	cmp	r0, #0
 80145dc:	d0ea      	beq.n	80145b4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80145de:	b3be      	cbz	r6, 8014650 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80145e0:	b3b7      	cbz	r7, 8014650 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80145e2:	9b06      	ldr	r3, [sp, #24]
 80145e4:	b3a3      	cbz	r3, 8014650 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80145e6:	9b07      	ldr	r3, [sp, #28]
 80145e8:	b393      	cbz	r3, 8014650 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80145ea:	6821      	ldr	r1, [r4, #0]
 80145ec:	692a      	ldr	r2, [r5, #16]
 80145ee:	6a2c      	ldr	r4, [r5, #32]
 80145f0:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 80145f4:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80145f8:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80145fc:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8014600:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 8014604:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8014608:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801460c:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8014610:	1a64      	subs	r4, r4, r1
 8014612:	fab4 f484 	clz	r4, r4
 8014616:	0964      	lsrs	r4, r4, #5
 8014618:	7034      	strb	r4, [r6, #0]
 801461a:	1d0c      	adds	r4, r1, #4
 801461c:	1b1b      	subs	r3, r3, r4
 801461e:	fab3 f383 	clz	r3, r3
 8014622:	095b      	lsrs	r3, r3, #5
 8014624:	f101 0408 	add.w	r4, r1, #8
 8014628:	703b      	strb	r3, [r7, #0]
 801462a:	f101 0314 	add.w	r3, r1, #20
 801462e:	1b01      	subs	r1, r0, r4
 8014630:	1ad3      	subs	r3, r2, r3
 8014632:	fab1 f181 	clz	r1, r1
 8014636:	9a06      	ldr	r2, [sp, #24]
 8014638:	0949      	lsrs	r1, r1, #5
 801463a:	7011      	strb	r1, [r2, #0]
 801463c:	fab3 f383 	clz	r3, r3
 8014640:	9a07      	ldr	r2, [sp, #28]
 8014642:	095b      	lsrs	r3, r3, #5
 8014644:	2000      	movs	r0, #0
 8014646:	7013      	strb	r3, [r2, #0]
 8014648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801464a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801464e:	4770      	bx	lr
 8014650:	200b      	movs	r0, #11
 8014652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014654 <_execute_event_handler>:
 8014654:	2002      	movs	r0, #2
 8014656:	4770      	bx	lr

08014658 <_cancel_goal_event_handler>:
 8014658:	2003      	movs	r0, #3
 801465a:	4770      	bx	lr

0801465c <_succeed_event_handler>:
 801465c:	2004      	movs	r0, #4
 801465e:	4770      	bx	lr

08014660 <_abort_event_handler>:
 8014660:	2006      	movs	r0, #6
 8014662:	4770      	bx	lr

08014664 <_canceled_event_handler>:
 8014664:	2005      	movs	r0, #5
 8014666:	4770      	bx	lr

08014668 <rcl_action_transition_goal_state>:
 8014668:	b2c2      	uxtb	r2, r0
 801466a:	2a06      	cmp	r2, #6
 801466c:	d80c      	bhi.n	8014688 <rcl_action_transition_goal_state+0x20>
 801466e:	2904      	cmp	r1, #4
 8014670:	d80a      	bhi.n	8014688 <rcl_action_transition_goal_state+0x20>
 8014672:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8014676:	b410      	push	{r4}
 8014678:	1853      	adds	r3, r2, r1
 801467a:	4c06      	ldr	r4, [pc, #24]	@ (8014694 <rcl_action_transition_goal_state+0x2c>)
 801467c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8014680:	b123      	cbz	r3, 801468c <rcl_action_transition_goal_state+0x24>
 8014682:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014686:	4718      	bx	r3
 8014688:	2000      	movs	r0, #0
 801468a:	4770      	bx	lr
 801468c:	2000      	movs	r0, #0
 801468e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014692:	4770      	bx	lr
 8014694:	08019358 	.word	0x08019358

08014698 <rcl_action_get_zero_initialized_cancel_response>:
 8014698:	b510      	push	{r4, lr}
 801469a:	4c07      	ldr	r4, [pc, #28]	@ (80146b8 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801469c:	4686      	mov	lr, r0
 801469e:	4684      	mov	ip, r0
 80146a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80146a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80146a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80146a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80146ac:	6823      	ldr	r3, [r4, #0]
 80146ae:	f8cc 3000 	str.w	r3, [ip]
 80146b2:	4670      	mov	r0, lr
 80146b4:	bd10      	pop	{r4, pc}
 80146b6:	bf00      	nop
 80146b8:	080193e4 	.word	0x080193e4

080146bc <rclc_action_send_result_request>:
 80146bc:	b1d0      	cbz	r0, 80146f4 <rclc_action_send_result_request+0x38>
 80146be:	b500      	push	{lr}
 80146c0:	4684      	mov	ip, r0
 80146c2:	b087      	sub	sp, #28
 80146c4:	f8d0 0009 	ldr.w	r0, [r0, #9]
 80146c8:	f8dc 100d 	ldr.w	r1, [ip, #13]
 80146cc:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80146d0:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80146d4:	f10d 0e08 	add.w	lr, sp, #8
 80146d8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80146dc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80146e0:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 80146e4:	a902      	add	r1, sp, #8
 80146e6:	3010      	adds	r0, #16
 80146e8:	f7ff fbda 	bl	8013ea0 <rcl_action_send_result_request>
 80146ec:	b920      	cbnz	r0, 80146f8 <rclc_action_send_result_request+0x3c>
 80146ee:	b007      	add	sp, #28
 80146f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80146f4:	200b      	movs	r0, #11
 80146f6:	4770      	bx	lr
 80146f8:	9001      	str	r0, [sp, #4]
 80146fa:	f7f7 fa01 	bl	800bb00 <rcutils_reset_error>
 80146fe:	9801      	ldr	r0, [sp, #4]
 8014700:	b007      	add	sp, #28
 8014702:	f85d fb04 	ldr.w	pc, [sp], #4
 8014706:	bf00      	nop

08014708 <rclc_action_take_goal_handle>:
 8014708:	b160      	cbz	r0, 8014724 <rclc_action_take_goal_handle+0x1c>
 801470a:	6883      	ldr	r3, [r0, #8]
 801470c:	b143      	cbz	r3, 8014720 <rclc_action_take_goal_handle+0x18>
 801470e:	6819      	ldr	r1, [r3, #0]
 8014710:	6081      	str	r1, [r0, #8]
 8014712:	2200      	movs	r2, #0
 8014714:	721a      	strb	r2, [r3, #8]
 8014716:	68c1      	ldr	r1, [r0, #12]
 8014718:	6019      	str	r1, [r3, #0]
 801471a:	621a      	str	r2, [r3, #32]
 801471c:	849a      	strh	r2, [r3, #36]	@ 0x24
 801471e:	60c3      	str	r3, [r0, #12]
 8014720:	4618      	mov	r0, r3
 8014722:	4770      	bx	lr
 8014724:	4603      	mov	r3, r0
 8014726:	e7fb      	b.n	8014720 <rclc_action_take_goal_handle+0x18>

08014728 <rclc_action_remove_used_goal_handle>:
 8014728:	b180      	cbz	r0, 801474c <rclc_action_remove_used_goal_handle+0x24>
 801472a:	b179      	cbz	r1, 801474c <rclc_action_remove_used_goal_handle+0x24>
 801472c:	68c3      	ldr	r3, [r0, #12]
 801472e:	4299      	cmp	r1, r3
 8014730:	d00d      	beq.n	801474e <rclc_action_remove_used_goal_handle+0x26>
 8014732:	b12b      	cbz	r3, 8014740 <rclc_action_remove_used_goal_handle+0x18>
 8014734:	681a      	ldr	r2, [r3, #0]
 8014736:	4291      	cmp	r1, r2
 8014738:	d003      	beq.n	8014742 <rclc_action_remove_used_goal_handle+0x1a>
 801473a:	4613      	mov	r3, r2
 801473c:	2b00      	cmp	r3, #0
 801473e:	d1f9      	bne.n	8014734 <rclc_action_remove_used_goal_handle+0xc>
 8014740:	4770      	bx	lr
 8014742:	680a      	ldr	r2, [r1, #0]
 8014744:	601a      	str	r2, [r3, #0]
 8014746:	6883      	ldr	r3, [r0, #8]
 8014748:	600b      	str	r3, [r1, #0]
 801474a:	6081      	str	r1, [r0, #8]
 801474c:	4770      	bx	lr
 801474e:	680b      	ldr	r3, [r1, #0]
 8014750:	60c3      	str	r3, [r0, #12]
 8014752:	e7f8      	b.n	8014746 <rclc_action_remove_used_goal_handle+0x1e>

08014754 <rclc_action_find_goal_handle_by_uuid>:
 8014754:	b538      	push	{r3, r4, r5, lr}
 8014756:	b180      	cbz	r0, 801477a <rclc_action_find_goal_handle_by_uuid+0x26>
 8014758:	460d      	mov	r5, r1
 801475a:	b181      	cbz	r1, 801477e <rclc_action_find_goal_handle_by_uuid+0x2a>
 801475c:	68c4      	ldr	r4, [r0, #12]
 801475e:	b914      	cbnz	r4, 8014766 <rclc_action_find_goal_handle_by_uuid+0x12>
 8014760:	e009      	b.n	8014776 <rclc_action_find_goal_handle_by_uuid+0x22>
 8014762:	6824      	ldr	r4, [r4, #0]
 8014764:	b13c      	cbz	r4, 8014776 <rclc_action_find_goal_handle_by_uuid+0x22>
 8014766:	f104 0009 	add.w	r0, r4, #9
 801476a:	2210      	movs	r2, #16
 801476c:	4629      	mov	r1, r5
 801476e:	f003 fa09 	bl	8017b84 <memcmp>
 8014772:	2800      	cmp	r0, #0
 8014774:	d1f5      	bne.n	8014762 <rclc_action_find_goal_handle_by_uuid+0xe>
 8014776:	4620      	mov	r0, r4
 8014778:	bd38      	pop	{r3, r4, r5, pc}
 801477a:	4604      	mov	r4, r0
 801477c:	e7fb      	b.n	8014776 <rclc_action_find_goal_handle_by_uuid+0x22>
 801477e:	460c      	mov	r4, r1
 8014780:	e7f9      	b.n	8014776 <rclc_action_find_goal_handle_by_uuid+0x22>
 8014782:	bf00      	nop

08014784 <rclc_action_find_first_handle_by_status>:
 8014784:	b140      	cbz	r0, 8014798 <rclc_action_find_first_handle_by_status+0x14>
 8014786:	68c0      	ldr	r0, [r0, #12]
 8014788:	b910      	cbnz	r0, 8014790 <rclc_action_find_first_handle_by_status+0xc>
 801478a:	e005      	b.n	8014798 <rclc_action_find_first_handle_by_status+0x14>
 801478c:	6800      	ldr	r0, [r0, #0]
 801478e:	b118      	cbz	r0, 8014798 <rclc_action_find_first_handle_by_status+0x14>
 8014790:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8014794:	428b      	cmp	r3, r1
 8014796:	d1f9      	bne.n	801478c <rclc_action_find_first_handle_by_status+0x8>
 8014798:	4770      	bx	lr
 801479a:	bf00      	nop

0801479c <rclc_action_find_first_terminated_handle>:
 801479c:	b140      	cbz	r0, 80147b0 <rclc_action_find_first_terminated_handle+0x14>
 801479e:	68c0      	ldr	r0, [r0, #12]
 80147a0:	b910      	cbnz	r0, 80147a8 <rclc_action_find_first_terminated_handle+0xc>
 80147a2:	e005      	b.n	80147b0 <rclc_action_find_first_terminated_handle+0x14>
 80147a4:	6800      	ldr	r0, [r0, #0]
 80147a6:	b118      	cbz	r0, 80147b0 <rclc_action_find_first_terminated_handle+0x14>
 80147a8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80147ac:	2b03      	cmp	r3, #3
 80147ae:	ddf9      	ble.n	80147a4 <rclc_action_find_first_terminated_handle+0x8>
 80147b0:	4770      	bx	lr
 80147b2:	bf00      	nop

080147b4 <rclc_action_find_handle_by_goal_request_sequence_number>:
 80147b4:	b170      	cbz	r0, 80147d4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80147b6:	68c0      	ldr	r0, [r0, #12]
 80147b8:	b160      	cbz	r0, 80147d4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80147ba:	b410      	push	{r4}
 80147bc:	e001      	b.n	80147c2 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 80147be:	6800      	ldr	r0, [r0, #0]
 80147c0:	b128      	cbz	r0, 80147ce <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 80147c2:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 80147c6:	4299      	cmp	r1, r3
 80147c8:	bf08      	it	eq
 80147ca:	4294      	cmpeq	r4, r2
 80147cc:	d1f7      	bne.n	80147be <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 80147ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147d2:	4770      	bx	lr
 80147d4:	4770      	bx	lr
 80147d6:	bf00      	nop

080147d8 <rclc_action_find_handle_by_result_request_sequence_number>:
 80147d8:	b170      	cbz	r0, 80147f8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80147da:	68c0      	ldr	r0, [r0, #12]
 80147dc:	b160      	cbz	r0, 80147f8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80147de:	b410      	push	{r4}
 80147e0:	e001      	b.n	80147e6 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80147e2:	6800      	ldr	r0, [r0, #0]
 80147e4:	b128      	cbz	r0, 80147f2 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80147e6:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 80147ea:	4299      	cmp	r1, r3
 80147ec:	bf08      	it	eq
 80147ee:	4294      	cmpeq	r4, r2
 80147f0:	d1f7      	bne.n	80147e2 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 80147f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147f6:	4770      	bx	lr
 80147f8:	4770      	bx	lr
 80147fa:	bf00      	nop

080147fc <rclc_action_find_handle_by_cancel_request_sequence_number>:
 80147fc:	b170      	cbz	r0, 801481c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80147fe:	68c0      	ldr	r0, [r0, #12]
 8014800:	b160      	cbz	r0, 801481c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8014802:	b410      	push	{r4}
 8014804:	e001      	b.n	801480a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8014806:	6800      	ldr	r0, [r0, #0]
 8014808:	b128      	cbz	r0, 8014816 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801480a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801480e:	4299      	cmp	r1, r3
 8014810:	bf08      	it	eq
 8014812:	4294      	cmpeq	r4, r2
 8014814:	d1f7      	bne.n	8014806 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8014816:	f85d 4b04 	ldr.w	r4, [sp], #4
 801481a:	4770      	bx	lr
 801481c:	4770      	bx	lr
 801481e:	bf00      	nop

08014820 <rclc_action_find_first_handle_with_goal_response>:
 8014820:	b140      	cbz	r0, 8014834 <rclc_action_find_first_handle_with_goal_response+0x14>
 8014822:	68c0      	ldr	r0, [r0, #12]
 8014824:	b910      	cbnz	r0, 801482c <rclc_action_find_first_handle_with_goal_response+0xc>
 8014826:	e005      	b.n	8014834 <rclc_action_find_first_handle_with_goal_response+0x14>
 8014828:	6800      	ldr	r0, [r0, #0]
 801482a:	b118      	cbz	r0, 8014834 <rclc_action_find_first_handle_with_goal_response+0x14>
 801482c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d0f9      	beq.n	8014828 <rclc_action_find_first_handle_with_goal_response+0x8>
 8014834:	4770      	bx	lr
 8014836:	bf00      	nop

08014838 <rclc_action_find_first_handle_with_result_response>:
 8014838:	b140      	cbz	r0, 801484c <rclc_action_find_first_handle_with_result_response+0x14>
 801483a:	68c0      	ldr	r0, [r0, #12]
 801483c:	b910      	cbnz	r0, 8014844 <rclc_action_find_first_handle_with_result_response+0xc>
 801483e:	e005      	b.n	801484c <rclc_action_find_first_handle_with_result_response+0x14>
 8014840:	6800      	ldr	r0, [r0, #0]
 8014842:	b118      	cbz	r0, 801484c <rclc_action_find_first_handle_with_result_response+0x14>
 8014844:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8014848:	2b00      	cmp	r3, #0
 801484a:	d0f9      	beq.n	8014840 <rclc_action_find_first_handle_with_result_response+0x8>
 801484c:	4770      	bx	lr
 801484e:	bf00      	nop

08014850 <rclc_action_server_response_goal_request>:
 8014850:	b198      	cbz	r0, 801487a <rclc_action_server_response_goal_request+0x2a>
 8014852:	b510      	push	{r4, lr}
 8014854:	6844      	ldr	r4, [r0, #4]
 8014856:	b086      	sub	sp, #24
 8014858:	2200      	movs	r2, #0
 801485a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801485e:	460b      	mov	r3, r1
 8014860:	9205      	str	r2, [sp, #20]
 8014862:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8014866:	aa03      	add	r2, sp, #12
 8014868:	f104 0010 	add.w	r0, r4, #16
 801486c:	f88d 300c 	strb.w	r3, [sp, #12]
 8014870:	f7ff fd4a 	bl	8014308 <rcl_action_send_goal_response>
 8014874:	b918      	cbnz	r0, 801487e <rclc_action_server_response_goal_request+0x2e>
 8014876:	b006      	add	sp, #24
 8014878:	bd10      	pop	{r4, pc}
 801487a:	200b      	movs	r0, #11
 801487c:	4770      	bx	lr
 801487e:	9001      	str	r0, [sp, #4]
 8014880:	f7f7 f93e 	bl	800bb00 <rcutils_reset_error>
 8014884:	9801      	ldr	r0, [sp, #4]
 8014886:	b006      	add	sp, #24
 8014888:	bd10      	pop	{r4, pc}
 801488a:	bf00      	nop
 801488c:	0000      	movs	r0, r0
	...

08014890 <rclc_action_server_goal_cancel_accept>:
 8014890:	b310      	cbz	r0, 80148d8 <rclc_action_server_goal_cancel_accept+0x48>
 8014892:	b510      	push	{r4, lr}
 8014894:	b090      	sub	sp, #64	@ 0x40
 8014896:	4604      	mov	r4, r0
 8014898:	a806      	add	r0, sp, #24
 801489a:	f7ff fefd 	bl	8014698 <rcl_action_get_zero_initialized_cancel_response>
 801489e:	2300      	movs	r3, #0
 80148a0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 80148a4:	f8d4 100d 	ldr.w	r1, [r4, #13]
 80148a8:	f8d4 2011 	ldr.w	r2, [r4, #17]
 80148ac:	f88d 3018 	strb.w	r3, [sp, #24]
 80148b0:	f8d4 3015 	ldr.w	r3, [r4, #21]
 80148b4:	f8cd d01c 	str.w	sp, [sp, #28]
 80148b8:	46ec      	mov	ip, sp
 80148ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80148be:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 80148e0 <rclc_action_server_goal_cancel_accept+0x50>
 80148c2:	6860      	ldr	r0, [r4, #4]
 80148c4:	aa06      	add	r2, sp, #24
 80148c6:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 80148ca:	3010      	adds	r0, #16
 80148cc:	ed8d 7b08 	vstr	d7, [sp, #32]
 80148d0:	f7ff fdd2 	bl	8014478 <rcl_action_send_cancel_response>
 80148d4:	b010      	add	sp, #64	@ 0x40
 80148d6:	bd10      	pop	{r4, pc}
 80148d8:	200b      	movs	r0, #11
 80148da:	4770      	bx	lr
 80148dc:	f3af 8000 	nop.w
 80148e0:	00000001 	.word	0x00000001
 80148e4:	00000001 	.word	0x00000001

080148e8 <rclc_action_server_goal_cancel_reject>:
 80148e8:	b082      	sub	sp, #8
 80148ea:	b530      	push	{r4, r5, lr}
 80148ec:	b08b      	sub	sp, #44	@ 0x2c
 80148ee:	ac0e      	add	r4, sp, #56	@ 0x38
 80148f0:	e884 000c 	stmia.w	r4, {r2, r3}
 80148f4:	b188      	cbz	r0, 801491a <rclc_action_server_goal_cancel_reject+0x32>
 80148f6:	4604      	mov	r4, r0
 80148f8:	a801      	add	r0, sp, #4
 80148fa:	460d      	mov	r5, r1
 80148fc:	f7ff fecc 	bl	8014698 <rcl_action_get_zero_initialized_cancel_response>
 8014900:	aa01      	add	r2, sp, #4
 8014902:	a90e      	add	r1, sp, #56	@ 0x38
 8014904:	f104 0010 	add.w	r0, r4, #16
 8014908:	f88d 5004 	strb.w	r5, [sp, #4]
 801490c:	f7ff fdb4 	bl	8014478 <rcl_action_send_cancel_response>
 8014910:	b00b      	add	sp, #44	@ 0x2c
 8014912:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014916:	b002      	add	sp, #8
 8014918:	4770      	bx	lr
 801491a:	200b      	movs	r0, #11
 801491c:	b00b      	add	sp, #44	@ 0x2c
 801491e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014922:	b002      	add	sp, #8
 8014924:	4770      	bx	lr
 8014926:	bf00      	nop

08014928 <__atomic_load_8>:
 8014928:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801492c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8014930:	4a15      	ldr	r2, [pc, #84]	@ (8014988 <__atomic_load_8+0x60>)
 8014932:	4b16      	ldr	r3, [pc, #88]	@ (801498c <__atomic_load_8+0x64>)
 8014934:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8014938:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801493c:	fb02 f101 	mul.w	r1, r2, r1
 8014940:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8014944:	fba3 2301 	umull	r2, r3, r3, r1
 8014948:	091b      	lsrs	r3, r3, #4
 801494a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801494e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8014952:	b4d0      	push	{r4, r6, r7}
 8014954:	4c0e      	ldr	r4, [pc, #56]	@ (8014990 <__atomic_load_8+0x68>)
 8014956:	1ac9      	subs	r1, r1, r3
 8014958:	1862      	adds	r2, r4, r1
 801495a:	f04f 0c01 	mov.w	ip, #1
 801495e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8014962:	e8c2 cf46 	strexb	r6, ip, [r2]
 8014966:	2e00      	cmp	r6, #0
 8014968:	d1f9      	bne.n	801495e <__atomic_load_8+0x36>
 801496a:	f3bf 8f5b 	dmb	ish
 801496e:	b2db      	uxtb	r3, r3
 8014970:	2b00      	cmp	r3, #0
 8014972:	d1f4      	bne.n	801495e <__atomic_load_8+0x36>
 8014974:	e9d0 6700 	ldrd	r6, r7, [r0]
 8014978:	f3bf 8f5b 	dmb	ish
 801497c:	5463      	strb	r3, [r4, r1]
 801497e:	4630      	mov	r0, r6
 8014980:	4639      	mov	r1, r7
 8014982:	bcd0      	pop	{r4, r6, r7}
 8014984:	4770      	bx	lr
 8014986:	bf00      	nop
 8014988:	27d4eb2d 	.word	0x27d4eb2d
 801498c:	b21642c9 	.word	0xb21642c9
 8014990:	2000ac68 	.word	0x2000ac68

08014994 <__atomic_store_8>:
 8014994:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8014998:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 801499c:	b570      	push	{r4, r5, r6, lr}
 801499e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80149a2:	4c14      	ldr	r4, [pc, #80]	@ (80149f4 <__atomic_store_8+0x60>)
 80149a4:	4d14      	ldr	r5, [pc, #80]	@ (80149f8 <__atomic_store_8+0x64>)
 80149a6:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80149aa:	fb04 f101 	mul.w	r1, r4, r1
 80149ae:	4c13      	ldr	r4, [pc, #76]	@ (80149fc <__atomic_store_8+0x68>)
 80149b0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80149b4:	fba4 4e01 	umull	r4, lr, r4, r1
 80149b8:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 80149bc:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 80149c0:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 80149c4:	eba1 0e0e 	sub.w	lr, r1, lr
 80149c8:	eb05 0c0e 	add.w	ip, r5, lr
 80149cc:	f04f 0401 	mov.w	r4, #1
 80149d0:	e8dc 1f4f 	ldrexb	r1, [ip]
 80149d4:	e8cc 4f46 	strexb	r6, r4, [ip]
 80149d8:	2e00      	cmp	r6, #0
 80149da:	d1f9      	bne.n	80149d0 <__atomic_store_8+0x3c>
 80149dc:	f3bf 8f5b 	dmb	ish
 80149e0:	b2c9      	uxtb	r1, r1
 80149e2:	2900      	cmp	r1, #0
 80149e4:	d1f4      	bne.n	80149d0 <__atomic_store_8+0x3c>
 80149e6:	e9c0 2300 	strd	r2, r3, [r0]
 80149ea:	f3bf 8f5b 	dmb	ish
 80149ee:	f805 100e 	strb.w	r1, [r5, lr]
 80149f2:	bd70      	pop	{r4, r5, r6, pc}
 80149f4:	27d4eb2d 	.word	0x27d4eb2d
 80149f8:	2000ac68 	.word	0x2000ac68
 80149fc:	b21642c9 	.word	0xb21642c9

08014a00 <__atomic_exchange_8>:
 8014a00:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8014a04:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8014a08:	4916      	ldr	r1, [pc, #88]	@ (8014a64 <__atomic_exchange_8+0x64>)
 8014a0a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8014a0e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8014a12:	fb01 fc0c 	mul.w	ip, r1, ip
 8014a16:	4914      	ldr	r1, [pc, #80]	@ (8014a68 <__atomic_exchange_8+0x68>)
 8014a18:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8014a1c:	b570      	push	{r4, r5, r6, lr}
 8014a1e:	4605      	mov	r5, r0
 8014a20:	fba1 010c 	umull	r0, r1, r1, ip
 8014a24:	0909      	lsrs	r1, r1, #4
 8014a26:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8014a2a:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8014a2e:	4e0f      	ldr	r6, [pc, #60]	@ (8014a6c <__atomic_exchange_8+0x6c>)
 8014a30:	ebac 0c01 	sub.w	ip, ip, r1
 8014a34:	eb06 010c 	add.w	r1, r6, ip
 8014a38:	f04f 0e01 	mov.w	lr, #1
 8014a3c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8014a40:	e8c1 ef40 	strexb	r0, lr, [r1]
 8014a44:	2800      	cmp	r0, #0
 8014a46:	d1f9      	bne.n	8014a3c <__atomic_exchange_8+0x3c>
 8014a48:	f3bf 8f5b 	dmb	ish
 8014a4c:	b2e4      	uxtb	r4, r4
 8014a4e:	2c00      	cmp	r4, #0
 8014a50:	d1f4      	bne.n	8014a3c <__atomic_exchange_8+0x3c>
 8014a52:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014a56:	e9c5 2300 	strd	r2, r3, [r5]
 8014a5a:	f3bf 8f5b 	dmb	ish
 8014a5e:	f806 400c 	strb.w	r4, [r6, ip]
 8014a62:	bd70      	pop	{r4, r5, r6, pc}
 8014a64:	27d4eb2d 	.word	0x27d4eb2d
 8014a68:	b21642c9 	.word	0xb21642c9
 8014a6c:	2000ac68 	.word	0x2000ac68

08014a70 <rcutils_get_env>:
 8014a70:	b168      	cbz	r0, 8014a8e <rcutils_get_env+0x1e>
 8014a72:	b510      	push	{r4, lr}
 8014a74:	460c      	mov	r4, r1
 8014a76:	b129      	cbz	r1, 8014a84 <rcutils_get_env+0x14>
 8014a78:	f002 fce0 	bl	801743c <getenv>
 8014a7c:	b120      	cbz	r0, 8014a88 <rcutils_get_env+0x18>
 8014a7e:	6020      	str	r0, [r4, #0]
 8014a80:	2000      	movs	r0, #0
 8014a82:	bd10      	pop	{r4, pc}
 8014a84:	4803      	ldr	r0, [pc, #12]	@ (8014a94 <rcutils_get_env+0x24>)
 8014a86:	bd10      	pop	{r4, pc}
 8014a88:	4b03      	ldr	r3, [pc, #12]	@ (8014a98 <rcutils_get_env+0x28>)
 8014a8a:	6023      	str	r3, [r4, #0]
 8014a8c:	bd10      	pop	{r4, pc}
 8014a8e:	4803      	ldr	r0, [pc, #12]	@ (8014a9c <rcutils_get_env+0x2c>)
 8014a90:	4770      	bx	lr
 8014a92:	bf00      	nop
 8014a94:	08019424 	.word	0x08019424
 8014a98:	08019548 	.word	0x08019548
 8014a9c:	08019408 	.word	0x08019408

08014aa0 <rcutils_is_directory>:
 8014aa0:	2000      	movs	r0, #0
 8014aa2:	4770      	bx	lr

08014aa4 <rcutils_join_path>:
 8014aa4:	b082      	sub	sp, #8
 8014aa6:	e88d 000c 	stmia.w	sp, {r2, r3}
 8014aaa:	2000      	movs	r0, #0
 8014aac:	b002      	add	sp, #8
 8014aae:	4770      	bx	lr

08014ab0 <rcutils_to_native_path>:
 8014ab0:	b084      	sub	sp, #16
 8014ab2:	a801      	add	r0, sp, #4
 8014ab4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8014ab8:	b004      	add	sp, #16
 8014aba:	2000      	movs	r0, #0
 8014abc:	4770      	bx	lr
 8014abe:	bf00      	nop

08014ac0 <rcutils_format_string_limit>:
 8014ac0:	b40f      	push	{r0, r1, r2, r3}
 8014ac2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ac4:	b083      	sub	sp, #12
 8014ac6:	ac08      	add	r4, sp, #32
 8014ac8:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8014aca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014ace:	b34e      	cbz	r6, 8014b24 <rcutils_format_string_limit+0x64>
 8014ad0:	a808      	add	r0, sp, #32
 8014ad2:	f7f6 ffef 	bl	800bab4 <rcutils_allocator_is_valid>
 8014ad6:	b328      	cbz	r0, 8014b24 <rcutils_format_string_limit+0x64>
 8014ad8:	2100      	movs	r1, #0
 8014ada:	ab0f      	add	r3, sp, #60	@ 0x3c
 8014adc:	4632      	mov	r2, r6
 8014ade:	4608      	mov	r0, r1
 8014ae0:	e9cd 3300 	strd	r3, r3, [sp]
 8014ae4:	f000 f8f4 	bl	8014cd0 <rcutils_vsnprintf>
 8014ae8:	1c43      	adds	r3, r0, #1
 8014aea:	4605      	mov	r5, r0
 8014aec:	d01a      	beq.n	8014b24 <rcutils_format_string_limit+0x64>
 8014aee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014af0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014af2:	1c47      	adds	r7, r0, #1
 8014af4:	429f      	cmp	r7, r3
 8014af6:	bf84      	itt	hi
 8014af8:	461f      	movhi	r7, r3
 8014afa:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8014afe:	4638      	mov	r0, r7
 8014b00:	9b08      	ldr	r3, [sp, #32]
 8014b02:	4798      	blx	r3
 8014b04:	4604      	mov	r4, r0
 8014b06:	b168      	cbz	r0, 8014b24 <rcutils_format_string_limit+0x64>
 8014b08:	9b01      	ldr	r3, [sp, #4]
 8014b0a:	4632      	mov	r2, r6
 8014b0c:	4639      	mov	r1, r7
 8014b0e:	f000 f8df 	bl	8014cd0 <rcutils_vsnprintf>
 8014b12:	2800      	cmp	r0, #0
 8014b14:	db02      	blt.n	8014b1c <rcutils_format_string_limit+0x5c>
 8014b16:	2300      	movs	r3, #0
 8014b18:	5563      	strb	r3, [r4, r5]
 8014b1a:	e004      	b.n	8014b26 <rcutils_format_string_limit+0x66>
 8014b1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b1e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014b20:	4620      	mov	r0, r4
 8014b22:	4798      	blx	r3
 8014b24:	2400      	movs	r4, #0
 8014b26:	4620      	mov	r0, r4
 8014b28:	b003      	add	sp, #12
 8014b2a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014b2e:	b004      	add	sp, #16
 8014b30:	4770      	bx	lr
 8014b32:	bf00      	nop

08014b34 <rcutils_repl_str>:
 8014b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b38:	ed2d 8b02 	vpush	{d8}
 8014b3c:	b087      	sub	sp, #28
 8014b3e:	4680      	mov	r8, r0
 8014b40:	4608      	mov	r0, r1
 8014b42:	f8cd 8004 	str.w	r8, [sp, #4]
 8014b46:	ee08 2a10 	vmov	s16, r2
 8014b4a:	468a      	mov	sl, r1
 8014b4c:	4699      	mov	r9, r3
 8014b4e:	f7eb fb71 	bl	8000234 <strlen>
 8014b52:	2600      	movs	r6, #0
 8014b54:	4647      	mov	r7, r8
 8014b56:	9002      	str	r0, [sp, #8]
 8014b58:	46b3      	mov	fp, r6
 8014b5a:	2510      	movs	r5, #16
 8014b5c:	46b0      	mov	r8, r6
 8014b5e:	e01d      	b.n	8014b9c <rcutils_repl_str+0x68>
 8014b60:	f10b 0b01 	add.w	fp, fp, #1
 8014b64:	455e      	cmp	r6, fp
 8014b66:	d211      	bcs.n	8014b8c <rcutils_repl_str+0x58>
 8014b68:	442e      	add	r6, r5
 8014b6a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014b6e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8014b72:	00b1      	lsls	r1, r6, #2
 8014b74:	4798      	blx	r3
 8014b76:	2800      	cmp	r0, #0
 8014b78:	f000 8088 	beq.w	8014c8c <rcutils_repl_str+0x158>
 8014b7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014b80:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8014b84:	4680      	mov	r8, r0
 8014b86:	bf28      	it	cs
 8014b88:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8014b8c:	9a01      	ldr	r2, [sp, #4]
 8014b8e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8014b92:	1aa2      	subs	r2, r4, r2
 8014b94:	f843 2c04 	str.w	r2, [r3, #-4]
 8014b98:	9b02      	ldr	r3, [sp, #8]
 8014b9a:	18e7      	adds	r7, r4, r3
 8014b9c:	4651      	mov	r1, sl
 8014b9e:	4638      	mov	r0, r7
 8014ba0:	f003 f841 	bl	8017c26 <strstr>
 8014ba4:	4604      	mov	r4, r0
 8014ba6:	4640      	mov	r0, r8
 8014ba8:	2c00      	cmp	r4, #0
 8014baa:	d1d9      	bne.n	8014b60 <rcutils_repl_str+0x2c>
 8014bac:	46b8      	mov	r8, r7
 8014bae:	4607      	mov	r7, r0
 8014bb0:	4640      	mov	r0, r8
 8014bb2:	f7eb fb3f 	bl	8000234 <strlen>
 8014bb6:	9b01      	ldr	r3, [sp, #4]
 8014bb8:	eba8 0303 	sub.w	r3, r8, r3
 8014bbc:	181c      	adds	r4, r3, r0
 8014bbe:	9404      	str	r4, [sp, #16]
 8014bc0:	f1bb 0f00 	cmp.w	fp, #0
 8014bc4:	d04a      	beq.n	8014c5c <rcutils_repl_str+0x128>
 8014bc6:	ee18 0a10 	vmov	r0, s16
 8014bca:	f7eb fb33 	bl	8000234 <strlen>
 8014bce:	9b02      	ldr	r3, [sp, #8]
 8014bd0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014bd4:	1ac3      	subs	r3, r0, r3
 8014bd6:	fb0b 4303 	mla	r3, fp, r3, r4
 8014bda:	461a      	mov	r2, r3
 8014bdc:	9305      	str	r3, [sp, #20]
 8014bde:	4606      	mov	r6, r0
 8014be0:	f8d9 3000 	ldr.w	r3, [r9]
 8014be4:	1c50      	adds	r0, r2, #1
 8014be6:	4798      	blx	r3
 8014be8:	9003      	str	r0, [sp, #12]
 8014bea:	2800      	cmp	r0, #0
 8014bec:	d04f      	beq.n	8014c8e <rcutils_repl_str+0x15a>
 8014bee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014bf2:	683a      	ldr	r2, [r7, #0]
 8014bf4:	4641      	mov	r1, r8
 8014bf6:	f003 f8b8 	bl	8017d6a <memcpy>
 8014bfa:	683d      	ldr	r5, [r7, #0]
 8014bfc:	9b03      	ldr	r3, [sp, #12]
 8014bfe:	9701      	str	r7, [sp, #4]
 8014c00:	46ba      	mov	sl, r7
 8014c02:	441d      	add	r5, r3
 8014c04:	9f02      	ldr	r7, [sp, #8]
 8014c06:	f8cd 9008 	str.w	r9, [sp, #8]
 8014c0a:	2401      	movs	r4, #1
 8014c0c:	46d1      	mov	r9, sl
 8014c0e:	ee18 aa10 	vmov	sl, s16
 8014c12:	e00a      	b.n	8014c2a <rcutils_repl_str+0xf6>
 8014c14:	f8d9 5000 	ldr.w	r5, [r9]
 8014c18:	1aaa      	subs	r2, r5, r2
 8014c1a:	1885      	adds	r5, r0, r2
 8014c1c:	f003 f8a5 	bl	8017d6a <memcpy>
 8014c20:	45a3      	cmp	fp, r4
 8014c22:	f104 0201 	add.w	r2, r4, #1
 8014c26:	d935      	bls.n	8014c94 <rcutils_repl_str+0x160>
 8014c28:	4614      	mov	r4, r2
 8014c2a:	4632      	mov	r2, r6
 8014c2c:	4651      	mov	r1, sl
 8014c2e:	4628      	mov	r0, r5
 8014c30:	f003 f89b 	bl	8017d6a <memcpy>
 8014c34:	f859 2b04 	ldr.w	r2, [r9], #4
 8014c38:	45a3      	cmp	fp, r4
 8014c3a:	443a      	add	r2, r7
 8014c3c:	eb05 0006 	add.w	r0, r5, r6
 8014c40:	eb08 0102 	add.w	r1, r8, r2
 8014c44:	d1e6      	bne.n	8014c14 <rcutils_repl_str+0xe0>
 8014c46:	9b04      	ldr	r3, [sp, #16]
 8014c48:	1a9a      	subs	r2, r3, r2
 8014c4a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8014c4e:	f003 f88c 	bl	8017d6a <memcpy>
 8014c52:	9a03      	ldr	r2, [sp, #12]
 8014c54:	9905      	ldr	r1, [sp, #20]
 8014c56:	2300      	movs	r3, #0
 8014c58:	5453      	strb	r3, [r2, r1]
 8014c5a:	e00b      	b.n	8014c74 <rcutils_repl_str+0x140>
 8014c5c:	4620      	mov	r0, r4
 8014c5e:	f8d9 3000 	ldr.w	r3, [r9]
 8014c62:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014c66:	3001      	adds	r0, #1
 8014c68:	4798      	blx	r3
 8014c6a:	9003      	str	r0, [sp, #12]
 8014c6c:	b110      	cbz	r0, 8014c74 <rcutils_repl_str+0x140>
 8014c6e:	9901      	ldr	r1, [sp, #4]
 8014c70:	f003 f873 	bl	8017d5a <strcpy>
 8014c74:	4638      	mov	r0, r7
 8014c76:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014c7a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014c7e:	4798      	blx	r3
 8014c80:	9803      	ldr	r0, [sp, #12]
 8014c82:	b007      	add	sp, #28
 8014c84:	ecbd 8b02 	vpop	{d8}
 8014c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c8c:	4647      	mov	r7, r8
 8014c8e:	2300      	movs	r3, #0
 8014c90:	9303      	str	r3, [sp, #12]
 8014c92:	e7ef      	b.n	8014c74 <rcutils_repl_str+0x140>
 8014c94:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8014c98:	e7db      	b.n	8014c52 <rcutils_repl_str+0x11e>
 8014c9a:	bf00      	nop

08014c9c <rcutils_snprintf>:
 8014c9c:	b40c      	push	{r2, r3}
 8014c9e:	b530      	push	{r4, r5, lr}
 8014ca0:	b083      	sub	sp, #12
 8014ca2:	ab06      	add	r3, sp, #24
 8014ca4:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ca8:	9301      	str	r3, [sp, #4]
 8014caa:	b152      	cbz	r2, 8014cc2 <rcutils_snprintf+0x26>
 8014cac:	b138      	cbz	r0, 8014cbe <rcutils_snprintf+0x22>
 8014cae:	b141      	cbz	r1, 8014cc2 <rcutils_snprintf+0x26>
 8014cb0:	f002 ff5a 	bl	8017b68 <vsniprintf>
 8014cb4:	b003      	add	sp, #12
 8014cb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014cba:	b002      	add	sp, #8
 8014cbc:	4770      	bx	lr
 8014cbe:	2900      	cmp	r1, #0
 8014cc0:	d0f6      	beq.n	8014cb0 <rcutils_snprintf+0x14>
 8014cc2:	f003 f81d 	bl	8017d00 <__errno>
 8014cc6:	2316      	movs	r3, #22
 8014cc8:	6003      	str	r3, [r0, #0]
 8014cca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014cce:	e7f1      	b.n	8014cb4 <rcutils_snprintf+0x18>

08014cd0 <rcutils_vsnprintf>:
 8014cd0:	b570      	push	{r4, r5, r6, lr}
 8014cd2:	b13a      	cbz	r2, 8014ce4 <rcutils_vsnprintf+0x14>
 8014cd4:	b120      	cbz	r0, 8014ce0 <rcutils_vsnprintf+0x10>
 8014cd6:	b129      	cbz	r1, 8014ce4 <rcutils_vsnprintf+0x14>
 8014cd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014cdc:	f002 bf44 	b.w	8017b68 <vsniprintf>
 8014ce0:	2900      	cmp	r1, #0
 8014ce2:	d0f9      	beq.n	8014cd8 <rcutils_vsnprintf+0x8>
 8014ce4:	f003 f80c 	bl	8017d00 <__errno>
 8014ce8:	2316      	movs	r3, #22
 8014cea:	6003      	str	r3, [r0, #0]
 8014cec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014cf0:	bd70      	pop	{r4, r5, r6, pc}
 8014cf2:	bf00      	nop

08014cf4 <rcutils_strdup>:
 8014cf4:	b084      	sub	sp, #16
 8014cf6:	b570      	push	{r4, r5, r6, lr}
 8014cf8:	b082      	sub	sp, #8
 8014cfa:	ac07      	add	r4, sp, #28
 8014cfc:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8014d00:	4605      	mov	r5, r0
 8014d02:	b1b0      	cbz	r0, 8014d32 <rcutils_strdup+0x3e>
 8014d04:	f7eb fa96 	bl	8000234 <strlen>
 8014d08:	1c42      	adds	r2, r0, #1
 8014d0a:	9b07      	ldr	r3, [sp, #28]
 8014d0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014d0e:	9201      	str	r2, [sp, #4]
 8014d10:	4606      	mov	r6, r0
 8014d12:	4610      	mov	r0, r2
 8014d14:	4798      	blx	r3
 8014d16:	4604      	mov	r4, r0
 8014d18:	b128      	cbz	r0, 8014d26 <rcutils_strdup+0x32>
 8014d1a:	9a01      	ldr	r2, [sp, #4]
 8014d1c:	4629      	mov	r1, r5
 8014d1e:	f003 f824 	bl	8017d6a <memcpy>
 8014d22:	2300      	movs	r3, #0
 8014d24:	55a3      	strb	r3, [r4, r6]
 8014d26:	4620      	mov	r0, r4
 8014d28:	b002      	add	sp, #8
 8014d2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014d2e:	b004      	add	sp, #16
 8014d30:	4770      	bx	lr
 8014d32:	4604      	mov	r4, r0
 8014d34:	e7f7      	b.n	8014d26 <rcutils_strdup+0x32>
 8014d36:	bf00      	nop

08014d38 <rcutils_strndup>:
 8014d38:	b082      	sub	sp, #8
 8014d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d3c:	ac06      	add	r4, sp, #24
 8014d3e:	e884 000c 	stmia.w	r4, {r2, r3}
 8014d42:	4605      	mov	r5, r0
 8014d44:	b188      	cbz	r0, 8014d6a <rcutils_strndup+0x32>
 8014d46:	1c4f      	adds	r7, r1, #1
 8014d48:	460e      	mov	r6, r1
 8014d4a:	4638      	mov	r0, r7
 8014d4c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8014d4e:	4790      	blx	r2
 8014d50:	4604      	mov	r4, r0
 8014d52:	b128      	cbz	r0, 8014d60 <rcutils_strndup+0x28>
 8014d54:	463a      	mov	r2, r7
 8014d56:	4629      	mov	r1, r5
 8014d58:	f003 f807 	bl	8017d6a <memcpy>
 8014d5c:	2300      	movs	r3, #0
 8014d5e:	55a3      	strb	r3, [r4, r6]
 8014d60:	4620      	mov	r0, r4
 8014d62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014d66:	b002      	add	sp, #8
 8014d68:	4770      	bx	lr
 8014d6a:	4604      	mov	r4, r0
 8014d6c:	e7f8      	b.n	8014d60 <rcutils_strndup+0x28>
 8014d6e:	bf00      	nop

08014d70 <rcutils_get_zero_initialized_string_map>:
 8014d70:	4b01      	ldr	r3, [pc, #4]	@ (8014d78 <rcutils_get_zero_initialized_string_map+0x8>)
 8014d72:	2000      	movs	r0, #0
 8014d74:	6018      	str	r0, [r3, #0]
 8014d76:	4770      	bx	lr
 8014d78:	2000ac80 	.word	0x2000ac80

08014d7c <rcutils_string_map_reserve>:
 8014d7c:	2800      	cmp	r0, #0
 8014d7e:	d05f      	beq.n	8014e40 <rcutils_string_map_reserve+0xc4>
 8014d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d84:	460c      	mov	r4, r1
 8014d86:	6801      	ldr	r1, [r0, #0]
 8014d88:	b082      	sub	sp, #8
 8014d8a:	4605      	mov	r5, r0
 8014d8c:	b129      	cbz	r1, 8014d9a <rcutils_string_map_reserve+0x1e>
 8014d8e:	68cb      	ldr	r3, [r1, #12]
 8014d90:	42a3      	cmp	r3, r4
 8014d92:	d906      	bls.n	8014da2 <rcutils_string_map_reserve+0x26>
 8014d94:	461c      	mov	r4, r3
 8014d96:	2900      	cmp	r1, #0
 8014d98:	d1f9      	bne.n	8014d8e <rcutils_string_map_reserve+0x12>
 8014d9a:	201f      	movs	r0, #31
 8014d9c:	b002      	add	sp, #8
 8014d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014da2:	688b      	ldr	r3, [r1, #8]
 8014da4:	42a3      	cmp	r3, r4
 8014da6:	d047      	beq.n	8014e38 <rcutils_string_map_reserve+0xbc>
 8014da8:	6a0e      	ldr	r6, [r1, #32]
 8014daa:	2c00      	cmp	r4, #0
 8014dac:	d034      	beq.n	8014e18 <rcutils_string_map_reserve+0x9c>
 8014dae:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8014db2:	d243      	bcs.n	8014e3c <rcutils_string_map_reserve+0xc0>
 8014db4:	00a7      	lsls	r7, r4, #2
 8014db6:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8014dba:	6808      	ldr	r0, [r1, #0]
 8014dbc:	4632      	mov	r2, r6
 8014dbe:	4639      	mov	r1, r7
 8014dc0:	47c0      	blx	r8
 8014dc2:	2800      	cmp	r0, #0
 8014dc4:	d03a      	beq.n	8014e3c <rcutils_string_map_reserve+0xc0>
 8014dc6:	682b      	ldr	r3, [r5, #0]
 8014dc8:	4632      	mov	r2, r6
 8014dca:	6018      	str	r0, [r3, #0]
 8014dcc:	4639      	mov	r1, r7
 8014dce:	6858      	ldr	r0, [r3, #4]
 8014dd0:	47c0      	blx	r8
 8014dd2:	2800      	cmp	r0, #0
 8014dd4:	d032      	beq.n	8014e3c <rcutils_string_map_reserve+0xc0>
 8014dd6:	682d      	ldr	r5, [r5, #0]
 8014dd8:	68ab      	ldr	r3, [r5, #8]
 8014dda:	6068      	str	r0, [r5, #4]
 8014ddc:	42a3      	cmp	r3, r4
 8014dde:	d226      	bcs.n	8014e2e <rcutils_string_map_reserve+0xb2>
 8014de0:	682a      	ldr	r2, [r5, #0]
 8014de2:	eb00 0c07 	add.w	ip, r0, r7
 8014de6:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8014dea:	45e6      	cmp	lr, ip
 8014dec:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8014df0:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8014df4:	d203      	bcs.n	8014dfe <rcutils_string_map_reserve+0x82>
 8014df6:	eb02 0c07 	add.w	ip, r2, r7
 8014dfa:	4566      	cmp	r6, ip
 8014dfc:	d322      	bcc.n	8014e44 <rcutils_string_map_reserve+0xc8>
 8014dfe:	1ae3      	subs	r3, r4, r3
 8014e00:	009a      	lsls	r2, r3, #2
 8014e02:	4670      	mov	r0, lr
 8014e04:	2100      	movs	r1, #0
 8014e06:	9201      	str	r2, [sp, #4]
 8014e08:	f002 fee6 	bl	8017bd8 <memset>
 8014e0c:	9a01      	ldr	r2, [sp, #4]
 8014e0e:	2100      	movs	r1, #0
 8014e10:	4630      	mov	r0, r6
 8014e12:	f002 fee1 	bl	8017bd8 <memset>
 8014e16:	e00a      	b.n	8014e2e <rcutils_string_map_reserve+0xb2>
 8014e18:	694f      	ldr	r7, [r1, #20]
 8014e1a:	6808      	ldr	r0, [r1, #0]
 8014e1c:	4631      	mov	r1, r6
 8014e1e:	47b8      	blx	r7
 8014e20:	682b      	ldr	r3, [r5, #0]
 8014e22:	4631      	mov	r1, r6
 8014e24:	6858      	ldr	r0, [r3, #4]
 8014e26:	601c      	str	r4, [r3, #0]
 8014e28:	47b8      	blx	r7
 8014e2a:	682d      	ldr	r5, [r5, #0]
 8014e2c:	606c      	str	r4, [r5, #4]
 8014e2e:	2000      	movs	r0, #0
 8014e30:	60ac      	str	r4, [r5, #8]
 8014e32:	b002      	add	sp, #8
 8014e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e38:	2000      	movs	r0, #0
 8014e3a:	e7af      	b.n	8014d9c <rcutils_string_map_reserve+0x20>
 8014e3c:	200a      	movs	r0, #10
 8014e3e:	e7ad      	b.n	8014d9c <rcutils_string_map_reserve+0x20>
 8014e40:	200b      	movs	r0, #11
 8014e42:	4770      	bx	lr
 8014e44:	1f0b      	subs	r3, r1, #4
 8014e46:	4418      	add	r0, r3
 8014e48:	4413      	add	r3, r2
 8014e4a:	3a04      	subs	r2, #4
 8014e4c:	4417      	add	r7, r2
 8014e4e:	2200      	movs	r2, #0
 8014e50:	f843 2f04 	str.w	r2, [r3, #4]!
 8014e54:	42bb      	cmp	r3, r7
 8014e56:	f840 2f04 	str.w	r2, [r0, #4]!
 8014e5a:	d1f9      	bne.n	8014e50 <rcutils_string_map_reserve+0xd4>
 8014e5c:	e7e7      	b.n	8014e2e <rcutils_string_map_reserve+0xb2>
 8014e5e:	bf00      	nop

08014e60 <rcutils_string_map_init>:
 8014e60:	b082      	sub	sp, #8
 8014e62:	b570      	push	{r4, r5, r6, lr}
 8014e64:	ac04      	add	r4, sp, #16
 8014e66:	e884 000c 	stmia.w	r4, {r2, r3}
 8014e6a:	b380      	cbz	r0, 8014ece <rcutils_string_map_init+0x6e>
 8014e6c:	6806      	ldr	r6, [r0, #0]
 8014e6e:	4604      	mov	r4, r0
 8014e70:	b12e      	cbz	r6, 8014e7e <rcutils_string_map_init+0x1e>
 8014e72:	251e      	movs	r5, #30
 8014e74:	4628      	mov	r0, r5
 8014e76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014e7a:	b002      	add	sp, #8
 8014e7c:	4770      	bx	lr
 8014e7e:	a804      	add	r0, sp, #16
 8014e80:	460d      	mov	r5, r1
 8014e82:	f7f6 fe17 	bl	800bab4 <rcutils_allocator_is_valid>
 8014e86:	b310      	cbz	r0, 8014ece <rcutils_string_map_init+0x6e>
 8014e88:	9b04      	ldr	r3, [sp, #16]
 8014e8a:	9908      	ldr	r1, [sp, #32]
 8014e8c:	2024      	movs	r0, #36	@ 0x24
 8014e8e:	4798      	blx	r3
 8014e90:	6020      	str	r0, [r4, #0]
 8014e92:	b310      	cbz	r0, 8014eda <rcutils_string_map_init+0x7a>
 8014e94:	f10d 0e10 	add.w	lr, sp, #16
 8014e98:	e9c0 6600 	strd	r6, r6, [r0]
 8014e9c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8014ea0:	f100 0c10 	add.w	ip, r0, #16
 8014ea4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014ea8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014eac:	f8de 3000 	ldr.w	r3, [lr]
 8014eb0:	f8cc 3000 	str.w	r3, [ip]
 8014eb4:	4629      	mov	r1, r5
 8014eb6:	4620      	mov	r0, r4
 8014eb8:	f7ff ff60 	bl	8014d7c <rcutils_string_map_reserve>
 8014ebc:	4605      	mov	r5, r0
 8014ebe:	2800      	cmp	r0, #0
 8014ec0:	d0d8      	beq.n	8014e74 <rcutils_string_map_init+0x14>
 8014ec2:	9b05      	ldr	r3, [sp, #20]
 8014ec4:	9908      	ldr	r1, [sp, #32]
 8014ec6:	6820      	ldr	r0, [r4, #0]
 8014ec8:	4798      	blx	r3
 8014eca:	6026      	str	r6, [r4, #0]
 8014ecc:	e7d2      	b.n	8014e74 <rcutils_string_map_init+0x14>
 8014ece:	250b      	movs	r5, #11
 8014ed0:	4628      	mov	r0, r5
 8014ed2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014ed6:	b002      	add	sp, #8
 8014ed8:	4770      	bx	lr
 8014eda:	250a      	movs	r5, #10
 8014edc:	e7ca      	b.n	8014e74 <rcutils_string_map_init+0x14>
 8014ede:	bf00      	nop

08014ee0 <rcutils_string_map_fini>:
 8014ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ee4:	b082      	sub	sp, #8
 8014ee6:	2800      	cmp	r0, #0
 8014ee8:	d03a      	beq.n	8014f60 <rcutils_string_map_fini+0x80>
 8014eea:	6804      	ldr	r4, [r0, #0]
 8014eec:	4606      	mov	r6, r0
 8014eee:	2c00      	cmp	r4, #0
 8014ef0:	d032      	beq.n	8014f58 <rcutils_string_map_fini+0x78>
 8014ef2:	68a3      	ldr	r3, [r4, #8]
 8014ef4:	b32b      	cbz	r3, 8014f42 <rcutils_string_map_fini+0x62>
 8014ef6:	2500      	movs	r5, #0
 8014ef8:	6822      	ldr	r2, [r4, #0]
 8014efa:	462f      	mov	r7, r5
 8014efc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014f00:	b1e0      	cbz	r0, 8014f3c <rcutils_string_map_fini+0x5c>
 8014f02:	6a21      	ldr	r1, [r4, #32]
 8014f04:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8014f08:	9101      	str	r1, [sp, #4]
 8014f0a:	47c0      	blx	r8
 8014f0c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014f10:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8014f14:	9901      	ldr	r1, [sp, #4]
 8014f16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014f1a:	47c0      	blx	r8
 8014f1c:	68e3      	ldr	r3, [r4, #12]
 8014f1e:	6862      	ldr	r2, [r4, #4]
 8014f20:	3b01      	subs	r3, #1
 8014f22:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8014f26:	60e3      	str	r3, [r4, #12]
 8014f28:	6834      	ldr	r4, [r6, #0]
 8014f2a:	68a3      	ldr	r3, [r4, #8]
 8014f2c:	3501      	adds	r5, #1
 8014f2e:	429d      	cmp	r5, r3
 8014f30:	d207      	bcs.n	8014f42 <rcutils_string_map_fini+0x62>
 8014f32:	6822      	ldr	r2, [r4, #0]
 8014f34:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014f38:	2800      	cmp	r0, #0
 8014f3a:	d1e2      	bne.n	8014f02 <rcutils_string_map_fini+0x22>
 8014f3c:	3501      	adds	r5, #1
 8014f3e:	429d      	cmp	r5, r3
 8014f40:	d3dc      	bcc.n	8014efc <rcutils_string_map_fini+0x1c>
 8014f42:	2100      	movs	r1, #0
 8014f44:	4630      	mov	r0, r6
 8014f46:	f7ff ff19 	bl	8014d7c <rcutils_string_map_reserve>
 8014f4a:	4604      	mov	r4, r0
 8014f4c:	b920      	cbnz	r0, 8014f58 <rcutils_string_map_fini+0x78>
 8014f4e:	6830      	ldr	r0, [r6, #0]
 8014f50:	6943      	ldr	r3, [r0, #20]
 8014f52:	6a01      	ldr	r1, [r0, #32]
 8014f54:	4798      	blx	r3
 8014f56:	6034      	str	r4, [r6, #0]
 8014f58:	4620      	mov	r0, r4
 8014f5a:	b002      	add	sp, #8
 8014f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f60:	240b      	movs	r4, #11
 8014f62:	4620      	mov	r0, r4
 8014f64:	b002      	add	sp, #8
 8014f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f6a:	bf00      	nop

08014f6c <rcutils_string_map_getn>:
 8014f6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f70:	b300      	cbz	r0, 8014fb4 <rcutils_string_map_getn+0x48>
 8014f72:	6807      	ldr	r7, [r0, #0]
 8014f74:	b1ff      	cbz	r7, 8014fb6 <rcutils_string_map_getn+0x4a>
 8014f76:	4688      	mov	r8, r1
 8014f78:	b1e1      	cbz	r1, 8014fb4 <rcutils_string_map_getn+0x48>
 8014f7a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8014f7e:	683e      	ldr	r6, [r7, #0]
 8014f80:	f1ba 0f00 	cmp.w	sl, #0
 8014f84:	d016      	beq.n	8014fb4 <rcutils_string_map_getn+0x48>
 8014f86:	4691      	mov	r9, r2
 8014f88:	3e04      	subs	r6, #4
 8014f8a:	2400      	movs	r4, #0
 8014f8c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8014f90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014f94:	4628      	mov	r0, r5
 8014f96:	3401      	adds	r4, #1
 8014f98:	b155      	cbz	r5, 8014fb0 <rcutils_string_map_getn+0x44>
 8014f9a:	f7eb f94b 	bl	8000234 <strlen>
 8014f9e:	4548      	cmp	r0, r9
 8014fa0:	4602      	mov	r2, r0
 8014fa2:	4629      	mov	r1, r5
 8014fa4:	bf38      	it	cc
 8014fa6:	464a      	movcc	r2, r9
 8014fa8:	4640      	mov	r0, r8
 8014faa:	f002 fe2a 	bl	8017c02 <strncmp>
 8014fae:	b128      	cbz	r0, 8014fbc <rcutils_string_map_getn+0x50>
 8014fb0:	45a2      	cmp	sl, r4
 8014fb2:	d1eb      	bne.n	8014f8c <rcutils_string_map_getn+0x20>
 8014fb4:	2700      	movs	r7, #0
 8014fb6:	4638      	mov	r0, r7
 8014fb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	f853 700b 	ldr.w	r7, [r3, fp]
 8014fc2:	4638      	mov	r0, r7
 8014fc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014fc8 <rmw_get_zero_initialized_context>:
 8014fc8:	b510      	push	{r4, lr}
 8014fca:	4604      	mov	r4, r0
 8014fcc:	3010      	adds	r0, #16
 8014fce:	f7f6 fe03 	bl	800bbd8 <rmw_get_zero_initialized_init_options>
 8014fd2:	2300      	movs	r3, #0
 8014fd4:	2000      	movs	r0, #0
 8014fd6:	2100      	movs	r1, #0
 8014fd8:	e9c4 0100 	strd	r0, r1, [r4]
 8014fdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8014fe0:	60a3      	str	r3, [r4, #8]
 8014fe2:	4620      	mov	r0, r4
 8014fe4:	bd10      	pop	{r4, pc}
 8014fe6:	bf00      	nop

08014fe8 <rmw_subscription_content_filter_options_fini>:
 8014fe8:	b1b0      	cbz	r0, 8015018 <rmw_subscription_content_filter_options_fini+0x30>
 8014fea:	b538      	push	{r3, r4, r5, lr}
 8014fec:	4604      	mov	r4, r0
 8014fee:	4608      	mov	r0, r1
 8014ff0:	460d      	mov	r5, r1
 8014ff2:	f7f6 fd5f 	bl	800bab4 <rcutils_allocator_is_valid>
 8014ff6:	b168      	cbz	r0, 8015014 <rmw_subscription_content_filter_options_fini+0x2c>
 8014ff8:	6820      	ldr	r0, [r4, #0]
 8014ffa:	b120      	cbz	r0, 8015006 <rmw_subscription_content_filter_options_fini+0x1e>
 8014ffc:	686b      	ldr	r3, [r5, #4]
 8014ffe:	6929      	ldr	r1, [r5, #16]
 8015000:	4798      	blx	r3
 8015002:	2300      	movs	r3, #0
 8015004:	6023      	str	r3, [r4, #0]
 8015006:	1d20      	adds	r0, r4, #4
 8015008:	f002 f99c 	bl	8017344 <rcutils_string_array_fini>
 801500c:	3800      	subs	r0, #0
 801500e:	bf18      	it	ne
 8015010:	2001      	movne	r0, #1
 8015012:	bd38      	pop	{r3, r4, r5, pc}
 8015014:	200b      	movs	r0, #11
 8015016:	bd38      	pop	{r3, r4, r5, pc}
 8015018:	200b      	movs	r0, #11
 801501a:	4770      	bx	lr

0801501c <rmw_get_default_subscription_options>:
 801501c:	2200      	movs	r2, #0
 801501e:	e9c0 2200 	strd	r2, r2, [r0]
 8015022:	6082      	str	r2, [r0, #8]
 8015024:	4770      	bx	lr
 8015026:	bf00      	nop

08015028 <rmw_time_equal>:
 8015028:	b4f0      	push	{r4, r5, r6, r7}
 801502a:	b084      	sub	sp, #16
 801502c:	ac04      	add	r4, sp, #16
 801502e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8015032:	4603      	mov	r3, r0
 8015034:	4924      	ldr	r1, [pc, #144]	@ (80150c8 <rmw_time_equal+0xa0>)
 8015036:	9e03      	ldr	r6, [sp, #12]
 8015038:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801503c:	2202      	movs	r2, #2
 801503e:	4299      	cmp	r1, r3
 8015040:	41aa      	sbcs	r2, r5
 8015042:	d330      	bcc.n	80150a6 <rmw_time_equal+0x7e>
 8015044:	4c21      	ldr	r4, [pc, #132]	@ (80150cc <rmw_time_equal+0xa4>)
 8015046:	fba3 3204 	umull	r3, r2, r3, r4
 801504a:	fb04 2205 	mla	r2, r4, r5, r2
 801504e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015052:	43dd      	mvns	r5, r3
 8015054:	1a8c      	subs	r4, r1, r2
 8015056:	4285      	cmp	r5, r0
 8015058:	41b4      	sbcs	r4, r6
 801505a:	d332      	bcc.n	80150c2 <rmw_time_equal+0x9a>
 801505c:	eb10 0c03 	adds.w	ip, r0, r3
 8015060:	eb42 0106 	adc.w	r1, r2, r6
 8015064:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8015068:	4817      	ldr	r0, [pc, #92]	@ (80150c8 <rmw_time_equal+0xa0>)
 801506a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801506c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801506e:	2202      	movs	r2, #2
 8015070:	4298      	cmp	r0, r3
 8015072:	41b2      	sbcs	r2, r6
 8015074:	d31c      	bcc.n	80150b0 <rmw_time_equal+0x88>
 8015076:	4c15      	ldr	r4, [pc, #84]	@ (80150cc <rmw_time_equal+0xa4>)
 8015078:	fba3 3204 	umull	r3, r2, r3, r4
 801507c:	fb04 2206 	mla	r2, r4, r6, r2
 8015080:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8015084:	43de      	mvns	r6, r3
 8015086:	1a84      	subs	r4, r0, r2
 8015088:	42ae      	cmp	r6, r5
 801508a:	41bc      	sbcs	r4, r7
 801508c:	d315      	bcc.n	80150ba <rmw_time_equal+0x92>
 801508e:	195b      	adds	r3, r3, r5
 8015090:	eb42 0207 	adc.w	r2, r2, r7
 8015094:	428a      	cmp	r2, r1
 8015096:	bf08      	it	eq
 8015098:	4563      	cmpeq	r3, ip
 801509a:	bf0c      	ite	eq
 801509c:	2001      	moveq	r0, #1
 801509e:	2000      	movne	r0, #0
 80150a0:	b004      	add	sp, #16
 80150a2:	bcf0      	pop	{r4, r5, r6, r7}
 80150a4:	4770      	bx	lr
 80150a6:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80150aa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80150ae:	e7d9      	b.n	8015064 <rmw_time_equal+0x3c>
 80150b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80150b4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80150b8:	e7ec      	b.n	8015094 <rmw_time_equal+0x6c>
 80150ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80150be:	4602      	mov	r2, r0
 80150c0:	e7e8      	b.n	8015094 <rmw_time_equal+0x6c>
 80150c2:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80150c6:	e7cd      	b.n	8015064 <rmw_time_equal+0x3c>
 80150c8:	25c17d04 	.word	0x25c17d04
 80150cc:	3b9aca00 	.word	0x3b9aca00

080150d0 <rmw_time_total_nsec>:
 80150d0:	b470      	push	{r4, r5, r6}
 80150d2:	b085      	sub	sp, #20
 80150d4:	ac04      	add	r4, sp, #16
 80150d6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80150da:	4603      	mov	r3, r0
 80150dc:	4912      	ldr	r1, [pc, #72]	@ (8015128 <rmw_time_total_nsec+0x58>)
 80150de:	9e03      	ldr	r6, [sp, #12]
 80150e0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80150e4:	2202      	movs	r2, #2
 80150e6:	4299      	cmp	r1, r3
 80150e8:	41aa      	sbcs	r2, r5
 80150ea:	d311      	bcc.n	8015110 <rmw_time_total_nsec+0x40>
 80150ec:	4c0f      	ldr	r4, [pc, #60]	@ (801512c <rmw_time_total_nsec+0x5c>)
 80150ee:	fba3 3204 	umull	r3, r2, r3, r4
 80150f2:	fb04 2205 	mla	r2, r4, r5, r2
 80150f6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80150fa:	43dd      	mvns	r5, r3
 80150fc:	1a8c      	subs	r4, r1, r2
 80150fe:	4285      	cmp	r5, r0
 8015100:	41b4      	sbcs	r4, r6
 8015102:	d30c      	bcc.n	801511e <rmw_time_total_nsec+0x4e>
 8015104:	1818      	adds	r0, r3, r0
 8015106:	eb42 0106 	adc.w	r1, r2, r6
 801510a:	b005      	add	sp, #20
 801510c:	bc70      	pop	{r4, r5, r6}
 801510e:	4770      	bx	lr
 8015110:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015114:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015118:	b005      	add	sp, #20
 801511a:	bc70      	pop	{r4, r5, r6}
 801511c:	4770      	bx	lr
 801511e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015122:	b005      	add	sp, #20
 8015124:	bc70      	pop	{r4, r5, r6}
 8015126:	4770      	bx	lr
 8015128:	25c17d04 	.word	0x25c17d04
 801512c:	3b9aca00 	.word	0x3b9aca00

08015130 <rmw_get_zero_initialized_message_info>:
 8015130:	b510      	push	{r4, lr}
 8015132:	2240      	movs	r2, #64	@ 0x40
 8015134:	4604      	mov	r4, r0
 8015136:	2100      	movs	r1, #0
 8015138:	f002 fd4e 	bl	8017bd8 <memset>
 801513c:	4620      	mov	r0, r4
 801513e:	bd10      	pop	{r4, pc}

08015140 <rmw_validate_full_topic_name>:
 8015140:	2800      	cmp	r0, #0
 8015142:	d057      	beq.n	80151f4 <rmw_validate_full_topic_name+0xb4>
 8015144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015148:	460d      	mov	r5, r1
 801514a:	2900      	cmp	r1, #0
 801514c:	d054      	beq.n	80151f8 <rmw_validate_full_topic_name+0xb8>
 801514e:	4616      	mov	r6, r2
 8015150:	4604      	mov	r4, r0
 8015152:	f7eb f86f 	bl	8000234 <strlen>
 8015156:	b148      	cbz	r0, 801516c <rmw_validate_full_topic_name+0x2c>
 8015158:	7823      	ldrb	r3, [r4, #0]
 801515a:	2b2f      	cmp	r3, #47	@ 0x2f
 801515c:	d00d      	beq.n	801517a <rmw_validate_full_topic_name+0x3a>
 801515e:	2302      	movs	r3, #2
 8015160:	602b      	str	r3, [r5, #0]
 8015162:	b13e      	cbz	r6, 8015174 <rmw_validate_full_topic_name+0x34>
 8015164:	2000      	movs	r0, #0
 8015166:	6030      	str	r0, [r6, #0]
 8015168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801516c:	2301      	movs	r3, #1
 801516e:	602b      	str	r3, [r5, #0]
 8015170:	2e00      	cmp	r6, #0
 8015172:	d1f7      	bne.n	8015164 <rmw_validate_full_topic_name+0x24>
 8015174:	2000      	movs	r0, #0
 8015176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801517a:	1e43      	subs	r3, r0, #1
 801517c:	5ce2      	ldrb	r2, [r4, r3]
 801517e:	2a2f      	cmp	r2, #47	@ 0x2f
 8015180:	d03c      	beq.n	80151fc <rmw_validate_full_topic_name+0xbc>
 8015182:	1e63      	subs	r3, r4, #1
 8015184:	eb03 0800 	add.w	r8, r3, r0
 8015188:	f1c4 0e01 	rsb	lr, r4, #1
 801518c:	eb0e 0703 	add.w	r7, lr, r3
 8015190:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8015194:	f021 0220 	bic.w	r2, r1, #32
 8015198:	3a41      	subs	r2, #65	@ 0x41
 801519a:	2a19      	cmp	r2, #25
 801519c:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 80151a0:	d90b      	bls.n	80151ba <rmw_validate_full_topic_name+0x7a>
 80151a2:	295f      	cmp	r1, #95	@ 0x5f
 80151a4:	d009      	beq.n	80151ba <rmw_validate_full_topic_name+0x7a>
 80151a6:	f1bc 0f0a 	cmp.w	ip, #10
 80151aa:	d906      	bls.n	80151ba <rmw_validate_full_topic_name+0x7a>
 80151ac:	2304      	movs	r3, #4
 80151ae:	602b      	str	r3, [r5, #0]
 80151b0:	2e00      	cmp	r6, #0
 80151b2:	d0df      	beq.n	8015174 <rmw_validate_full_topic_name+0x34>
 80151b4:	6037      	str	r7, [r6, #0]
 80151b6:	2000      	movs	r0, #0
 80151b8:	e7d6      	b.n	8015168 <rmw_validate_full_topic_name+0x28>
 80151ba:	4543      	cmp	r3, r8
 80151bc:	d1e6      	bne.n	801518c <rmw_validate_full_topic_name+0x4c>
 80151be:	4f1a      	ldr	r7, [pc, #104]	@ (8015228 <rmw_validate_full_topic_name+0xe8>)
 80151c0:	2301      	movs	r3, #1
 80151c2:	e004      	b.n	80151ce <rmw_validate_full_topic_name+0x8e>
 80151c4:	4298      	cmp	r0, r3
 80151c6:	f104 0401 	add.w	r4, r4, #1
 80151ca:	d91c      	bls.n	8015206 <rmw_validate_full_topic_name+0xc6>
 80151cc:	4613      	mov	r3, r2
 80151ce:	4298      	cmp	r0, r3
 80151d0:	f103 0201 	add.w	r2, r3, #1
 80151d4:	d0f6      	beq.n	80151c4 <rmw_validate_full_topic_name+0x84>
 80151d6:	7821      	ldrb	r1, [r4, #0]
 80151d8:	292f      	cmp	r1, #47	@ 0x2f
 80151da:	d1f3      	bne.n	80151c4 <rmw_validate_full_topic_name+0x84>
 80151dc:	7861      	ldrb	r1, [r4, #1]
 80151de:	292f      	cmp	r1, #47	@ 0x2f
 80151e0:	d01c      	beq.n	801521c <rmw_validate_full_topic_name+0xdc>
 80151e2:	5dc9      	ldrb	r1, [r1, r7]
 80151e4:	0749      	lsls	r1, r1, #29
 80151e6:	d5ed      	bpl.n	80151c4 <rmw_validate_full_topic_name+0x84>
 80151e8:	2206      	movs	r2, #6
 80151ea:	602a      	str	r2, [r5, #0]
 80151ec:	2e00      	cmp	r6, #0
 80151ee:	d0c1      	beq.n	8015174 <rmw_validate_full_topic_name+0x34>
 80151f0:	6033      	str	r3, [r6, #0]
 80151f2:	e7bf      	b.n	8015174 <rmw_validate_full_topic_name+0x34>
 80151f4:	200b      	movs	r0, #11
 80151f6:	4770      	bx	lr
 80151f8:	200b      	movs	r0, #11
 80151fa:	e7b5      	b.n	8015168 <rmw_validate_full_topic_name+0x28>
 80151fc:	2203      	movs	r2, #3
 80151fe:	602a      	str	r2, [r5, #0]
 8015200:	2e00      	cmp	r6, #0
 8015202:	d1f5      	bne.n	80151f0 <rmw_validate_full_topic_name+0xb0>
 8015204:	e7b6      	b.n	8015174 <rmw_validate_full_topic_name+0x34>
 8015206:	28f7      	cmp	r0, #247	@ 0xf7
 8015208:	d802      	bhi.n	8015210 <rmw_validate_full_topic_name+0xd0>
 801520a:	2000      	movs	r0, #0
 801520c:	6028      	str	r0, [r5, #0]
 801520e:	e7ab      	b.n	8015168 <rmw_validate_full_topic_name+0x28>
 8015210:	2307      	movs	r3, #7
 8015212:	602b      	str	r3, [r5, #0]
 8015214:	2e00      	cmp	r6, #0
 8015216:	d0ad      	beq.n	8015174 <rmw_validate_full_topic_name+0x34>
 8015218:	23f6      	movs	r3, #246	@ 0xf6
 801521a:	e7e9      	b.n	80151f0 <rmw_validate_full_topic_name+0xb0>
 801521c:	2205      	movs	r2, #5
 801521e:	602a      	str	r2, [r5, #0]
 8015220:	2e00      	cmp	r6, #0
 8015222:	d1e5      	bne.n	80151f0 <rmw_validate_full_topic_name+0xb0>
 8015224:	e7a6      	b.n	8015174 <rmw_validate_full_topic_name+0x34>
 8015226:	bf00      	nop
 8015228:	08019838 	.word	0x08019838

0801522c <rmw_validate_namespace_with_size>:
 801522c:	b340      	cbz	r0, 8015280 <rmw_validate_namespace_with_size+0x54>
 801522e:	b570      	push	{r4, r5, r6, lr}
 8015230:	4614      	mov	r4, r2
 8015232:	b0c2      	sub	sp, #264	@ 0x108
 8015234:	b332      	cbz	r2, 8015284 <rmw_validate_namespace_with_size+0x58>
 8015236:	2901      	cmp	r1, #1
 8015238:	460d      	mov	r5, r1
 801523a:	461e      	mov	r6, r3
 801523c:	d102      	bne.n	8015244 <rmw_validate_namespace_with_size+0x18>
 801523e:	7803      	ldrb	r3, [r0, #0]
 8015240:	2b2f      	cmp	r3, #47	@ 0x2f
 8015242:	d012      	beq.n	801526a <rmw_validate_namespace_with_size+0x3e>
 8015244:	aa01      	add	r2, sp, #4
 8015246:	4669      	mov	r1, sp
 8015248:	f7ff ff7a 	bl	8015140 <rmw_validate_full_topic_name>
 801524c:	b978      	cbnz	r0, 801526e <rmw_validate_namespace_with_size+0x42>
 801524e:	9b00      	ldr	r3, [sp, #0]
 8015250:	b14b      	cbz	r3, 8015266 <rmw_validate_namespace_with_size+0x3a>
 8015252:	2b07      	cmp	r3, #7
 8015254:	d007      	beq.n	8015266 <rmw_validate_namespace_with_size+0x3a>
 8015256:	1e5a      	subs	r2, r3, #1
 8015258:	2a05      	cmp	r2, #5
 801525a:	d82b      	bhi.n	80152b4 <rmw_validate_namespace_with_size+0x88>
 801525c:	e8df f002 	tbb	[pc, r2]
 8015260:	1e212427 	.word	0x1e212427
 8015264:	141b      	.short	0x141b
 8015266:	2df5      	cmp	r5, #245	@ 0xf5
 8015268:	d803      	bhi.n	8015272 <rmw_validate_namespace_with_size+0x46>
 801526a:	2000      	movs	r0, #0
 801526c:	6020      	str	r0, [r4, #0]
 801526e:	b042      	add	sp, #264	@ 0x108
 8015270:	bd70      	pop	{r4, r5, r6, pc}
 8015272:	2307      	movs	r3, #7
 8015274:	6023      	str	r3, [r4, #0]
 8015276:	2e00      	cmp	r6, #0
 8015278:	d0f9      	beq.n	801526e <rmw_validate_namespace_with_size+0x42>
 801527a:	23f4      	movs	r3, #244	@ 0xf4
 801527c:	6033      	str	r3, [r6, #0]
 801527e:	e7f6      	b.n	801526e <rmw_validate_namespace_with_size+0x42>
 8015280:	200b      	movs	r0, #11
 8015282:	4770      	bx	lr
 8015284:	200b      	movs	r0, #11
 8015286:	e7f2      	b.n	801526e <rmw_validate_namespace_with_size+0x42>
 8015288:	2306      	movs	r3, #6
 801528a:	6023      	str	r3, [r4, #0]
 801528c:	2e00      	cmp	r6, #0
 801528e:	d0ee      	beq.n	801526e <rmw_validate_namespace_with_size+0x42>
 8015290:	9b01      	ldr	r3, [sp, #4]
 8015292:	6033      	str	r3, [r6, #0]
 8015294:	e7eb      	b.n	801526e <rmw_validate_namespace_with_size+0x42>
 8015296:	2305      	movs	r3, #5
 8015298:	6023      	str	r3, [r4, #0]
 801529a:	e7f7      	b.n	801528c <rmw_validate_namespace_with_size+0x60>
 801529c:	2304      	movs	r3, #4
 801529e:	6023      	str	r3, [r4, #0]
 80152a0:	e7f4      	b.n	801528c <rmw_validate_namespace_with_size+0x60>
 80152a2:	2303      	movs	r3, #3
 80152a4:	6023      	str	r3, [r4, #0]
 80152a6:	e7f1      	b.n	801528c <rmw_validate_namespace_with_size+0x60>
 80152a8:	2302      	movs	r3, #2
 80152aa:	6023      	str	r3, [r4, #0]
 80152ac:	e7ee      	b.n	801528c <rmw_validate_namespace_with_size+0x60>
 80152ae:	2301      	movs	r3, #1
 80152b0:	6023      	str	r3, [r4, #0]
 80152b2:	e7eb      	b.n	801528c <rmw_validate_namespace_with_size+0x60>
 80152b4:	4a03      	ldr	r2, [pc, #12]	@ (80152c4 <rmw_validate_namespace_with_size+0x98>)
 80152b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80152ba:	a802      	add	r0, sp, #8
 80152bc:	f7ff fcee 	bl	8014c9c <rcutils_snprintf>
 80152c0:	2001      	movs	r0, #1
 80152c2:	e7d4      	b.n	801526e <rmw_validate_namespace_with_size+0x42>
 80152c4:	08019440 	.word	0x08019440

080152c8 <rmw_validate_namespace>:
 80152c8:	b168      	cbz	r0, 80152e6 <rmw_validate_namespace+0x1e>
 80152ca:	b570      	push	{r4, r5, r6, lr}
 80152cc:	460d      	mov	r5, r1
 80152ce:	4616      	mov	r6, r2
 80152d0:	4604      	mov	r4, r0
 80152d2:	f7ea ffaf 	bl	8000234 <strlen>
 80152d6:	4633      	mov	r3, r6
 80152d8:	4601      	mov	r1, r0
 80152da:	462a      	mov	r2, r5
 80152dc:	4620      	mov	r0, r4
 80152de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80152e2:	f7ff bfa3 	b.w	801522c <rmw_validate_namespace_with_size>
 80152e6:	200b      	movs	r0, #11
 80152e8:	4770      	bx	lr
 80152ea:	bf00      	nop

080152ec <rmw_namespace_validation_result_string>:
 80152ec:	2807      	cmp	r0, #7
 80152ee:	bf9a      	itte	ls
 80152f0:	4b02      	ldrls	r3, [pc, #8]	@ (80152fc <rmw_namespace_validation_result_string+0x10>)
 80152f2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80152f6:	4802      	ldrhi	r0, [pc, #8]	@ (8015300 <rmw_namespace_validation_result_string+0x14>)
 80152f8:	4770      	bx	lr
 80152fa:	bf00      	nop
 80152fc:	08019638 	.word	0x08019638
 8015300:	08019490 	.word	0x08019490

08015304 <rmw_validate_node_name>:
 8015304:	2800      	cmp	r0, #0
 8015306:	d03b      	beq.n	8015380 <rmw_validate_node_name+0x7c>
 8015308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801530c:	460d      	mov	r5, r1
 801530e:	2900      	cmp	r1, #0
 8015310:	d038      	beq.n	8015384 <rmw_validate_node_name+0x80>
 8015312:	4616      	mov	r6, r2
 8015314:	4604      	mov	r4, r0
 8015316:	f7ea ff8d 	bl	8000234 <strlen>
 801531a:	b1e0      	cbz	r0, 8015356 <rmw_validate_node_name+0x52>
 801531c:	1e63      	subs	r3, r4, #1
 801531e:	eb03 0800 	add.w	r8, r3, r0
 8015322:	f1c4 0101 	rsb	r1, r4, #1
 8015326:	18cf      	adds	r7, r1, r3
 8015328:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801532c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8015330:	f02e 0c20 	bic.w	ip, lr, #32
 8015334:	2a09      	cmp	r2, #9
 8015336:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801533a:	d914      	bls.n	8015366 <rmw_validate_node_name+0x62>
 801533c:	f1bc 0f19 	cmp.w	ip, #25
 8015340:	d911      	bls.n	8015366 <rmw_validate_node_name+0x62>
 8015342:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8015346:	d00e      	beq.n	8015366 <rmw_validate_node_name+0x62>
 8015348:	2302      	movs	r3, #2
 801534a:	602b      	str	r3, [r5, #0]
 801534c:	b106      	cbz	r6, 8015350 <rmw_validate_node_name+0x4c>
 801534e:	6037      	str	r7, [r6, #0]
 8015350:	2000      	movs	r0, #0
 8015352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015356:	2301      	movs	r3, #1
 8015358:	602b      	str	r3, [r5, #0]
 801535a:	2e00      	cmp	r6, #0
 801535c:	d0f8      	beq.n	8015350 <rmw_validate_node_name+0x4c>
 801535e:	2000      	movs	r0, #0
 8015360:	6030      	str	r0, [r6, #0]
 8015362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015366:	4543      	cmp	r3, r8
 8015368:	d1dd      	bne.n	8015326 <rmw_validate_node_name+0x22>
 801536a:	7822      	ldrb	r2, [r4, #0]
 801536c:	4b0d      	ldr	r3, [pc, #52]	@ (80153a4 <rmw_validate_node_name+0xa0>)
 801536e:	5cd3      	ldrb	r3, [r2, r3]
 8015370:	f013 0304 	ands.w	r3, r3, #4
 8015374:	d110      	bne.n	8015398 <rmw_validate_node_name+0x94>
 8015376:	28ff      	cmp	r0, #255	@ 0xff
 8015378:	d806      	bhi.n	8015388 <rmw_validate_node_name+0x84>
 801537a:	602b      	str	r3, [r5, #0]
 801537c:	4618      	mov	r0, r3
 801537e:	e7e8      	b.n	8015352 <rmw_validate_node_name+0x4e>
 8015380:	200b      	movs	r0, #11
 8015382:	4770      	bx	lr
 8015384:	200b      	movs	r0, #11
 8015386:	e7e4      	b.n	8015352 <rmw_validate_node_name+0x4e>
 8015388:	2204      	movs	r2, #4
 801538a:	602a      	str	r2, [r5, #0]
 801538c:	2e00      	cmp	r6, #0
 801538e:	d0df      	beq.n	8015350 <rmw_validate_node_name+0x4c>
 8015390:	22fe      	movs	r2, #254	@ 0xfe
 8015392:	6032      	str	r2, [r6, #0]
 8015394:	4618      	mov	r0, r3
 8015396:	e7dc      	b.n	8015352 <rmw_validate_node_name+0x4e>
 8015398:	2303      	movs	r3, #3
 801539a:	602b      	str	r3, [r5, #0]
 801539c:	2e00      	cmp	r6, #0
 801539e:	d1de      	bne.n	801535e <rmw_validate_node_name+0x5a>
 80153a0:	e7d6      	b.n	8015350 <rmw_validate_node_name+0x4c>
 80153a2:	bf00      	nop
 80153a4:	08019838 	.word	0x08019838

080153a8 <rmw_node_name_validation_result_string>:
 80153a8:	2804      	cmp	r0, #4
 80153aa:	bf9a      	itte	ls
 80153ac:	4b02      	ldrls	r3, [pc, #8]	@ (80153b8 <rmw_node_name_validation_result_string+0x10>)
 80153ae:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80153b2:	4802      	ldrhi	r0, [pc, #8]	@ (80153bc <rmw_node_name_validation_result_string+0x14>)
 80153b4:	4770      	bx	lr
 80153b6:	bf00      	nop
 80153b8:	08019744 	.word	0x08019744
 80153bc:	08019658 	.word	0x08019658

080153c0 <on_status>:
 80153c0:	b082      	sub	sp, #8
 80153c2:	b002      	add	sp, #8
 80153c4:	4770      	bx	lr
 80153c6:	bf00      	nop

080153c8 <on_topic>:
 80153c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153cc:	4a22      	ldr	r2, [pc, #136]	@ (8015458 <on_topic+0x90>)
 80153ce:	b094      	sub	sp, #80	@ 0x50
 80153d0:	6812      	ldr	r2, [r2, #0]
 80153d2:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 80153d4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80153d8:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 80153dc:	b3c2      	cbz	r2, 8015450 <on_topic+0x88>
 80153de:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 80153e2:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 80153e6:	e001      	b.n	80153ec <on_topic+0x24>
 80153e8:	6852      	ldr	r2, [r2, #4]
 80153ea:	b38a      	cbz	r2, 8015450 <on_topic+0x88>
 80153ec:	6894      	ldr	r4, [r2, #8]
 80153ee:	8aa3      	ldrh	r3, [r4, #20]
 80153f0:	428b      	cmp	r3, r1
 80153f2:	d1f9      	bne.n	80153e8 <on_topic+0x20>
 80153f4:	7da3      	ldrb	r3, [r4, #22]
 80153f6:	4283      	cmp	r3, r0
 80153f8:	d1f6      	bne.n	80153e8 <on_topic+0x20>
 80153fa:	2248      	movs	r2, #72	@ 0x48
 80153fc:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8015400:	4668      	mov	r0, sp
 8015402:	f002 fcb2 	bl	8017d6a <memcpy>
 8015406:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801540a:	cb0c      	ldmia	r3, {r2, r3}
 801540c:	4620      	mov	r0, r4
 801540e:	f7f7 fcb9 	bl	800cd84 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015412:	4607      	mov	r7, r0
 8015414:	b1e0      	cbz	r0, 8015450 <on_topic+0x88>
 8015416:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801541a:	4632      	mov	r2, r6
 801541c:	4628      	mov	r0, r5
 801541e:	f108 0110 	add.w	r1, r8, #16
 8015422:	f000 fddb 	bl	8015fdc <ucdr_deserialize_array_uint8_t>
 8015426:	b930      	cbnz	r0, 8015436 <on_topic+0x6e>
 8015428:	480c      	ldr	r0, [pc, #48]	@ (801545c <on_topic+0x94>)
 801542a:	4639      	mov	r1, r7
 801542c:	b014      	add	sp, #80	@ 0x50
 801542e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015432:	f000 b8bd 	b.w	80155b0 <put_memory>
 8015436:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801543a:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801543e:	f000 fcc3 	bl	8015dc8 <rmw_uros_epoch_nanos>
 8015442:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8015446:	2305      	movs	r3, #5
 8015448:	e942 0102 	strd	r0, r1, [r2, #-8]
 801544c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8015450:	b014      	add	sp, #80	@ 0x50
 8015452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015456:	bf00      	nop
 8015458:	2000abbc 	.word	0x2000abbc
 801545c:	2000abac 	.word	0x2000abac

08015460 <on_request>:
 8015460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015464:	4823      	ldr	r0, [pc, #140]	@ (80154f4 <on_request+0x94>)
 8015466:	b094      	sub	sp, #80	@ 0x50
 8015468:	6800      	ldr	r0, [r0, #0]
 801546a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801546c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015470:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015472:	2800      	cmp	r0, #0
 8015474:	d03b      	beq.n	80154ee <on_request+0x8e>
 8015476:	461d      	mov	r5, r3
 8015478:	e001      	b.n	801547e <on_request+0x1e>
 801547a:	6840      	ldr	r0, [r0, #4]
 801547c:	b3b8      	cbz	r0, 80154ee <on_request+0x8e>
 801547e:	6884      	ldr	r4, [r0, #8]
 8015480:	8b21      	ldrh	r1, [r4, #24]
 8015482:	4291      	cmp	r1, r2
 8015484:	d1f9      	bne.n	801547a <on_request+0x1a>
 8015486:	2248      	movs	r2, #72	@ 0x48
 8015488:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801548c:	4668      	mov	r0, sp
 801548e:	f002 fc6c 	bl	8017d6a <memcpy>
 8015492:	f104 0320 	add.w	r3, r4, #32
 8015496:	cb0c      	ldmia	r3, {r2, r3}
 8015498:	4620      	mov	r0, r4
 801549a:	f7f7 fc73 	bl	800cd84 <rmw_uxrce_get_static_input_buffer_for_entity>
 801549e:	4680      	mov	r8, r0
 80154a0:	b328      	cbz	r0, 80154ee <on_request+0x8e>
 80154a2:	4638      	mov	r0, r7
 80154a4:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80154a8:	4632      	mov	r2, r6
 80154aa:	f107 0110 	add.w	r1, r7, #16
 80154ae:	f000 fd95 	bl	8015fdc <ucdr_deserialize_array_uint8_t>
 80154b2:	b930      	cbnz	r0, 80154c2 <on_request+0x62>
 80154b4:	4810      	ldr	r0, [pc, #64]	@ (80154f8 <on_request+0x98>)
 80154b6:	4641      	mov	r1, r8
 80154b8:	b014      	add	sp, #80	@ 0x50
 80154ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80154be:	f000 b877 	b.w	80155b0 <put_memory>
 80154c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80154c4:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 80154c8:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80154cc:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80154d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80154d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80154d8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80154dc:	f000 fc74 	bl	8015dc8 <rmw_uros_epoch_nanos>
 80154e0:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80154e4:	2303      	movs	r3, #3
 80154e6:	e942 0102 	strd	r0, r1, [r2, #-8]
 80154ea:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80154ee:	b014      	add	sp, #80	@ 0x50
 80154f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154f4:	2000ab8c 	.word	0x2000ab8c
 80154f8:	2000abac 	.word	0x2000abac

080154fc <on_reply>:
 80154fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015500:	4821      	ldr	r0, [pc, #132]	@ (8015588 <on_reply+0x8c>)
 8015502:	b094      	sub	sp, #80	@ 0x50
 8015504:	6800      	ldr	r0, [r0, #0]
 8015506:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8015508:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801550c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801550e:	b3b8      	cbz	r0, 8015580 <on_reply+0x84>
 8015510:	461d      	mov	r5, r3
 8015512:	e001      	b.n	8015518 <on_reply+0x1c>
 8015514:	6840      	ldr	r0, [r0, #4]
 8015516:	b398      	cbz	r0, 8015580 <on_reply+0x84>
 8015518:	6884      	ldr	r4, [r0, #8]
 801551a:	8b21      	ldrh	r1, [r4, #24]
 801551c:	4291      	cmp	r1, r2
 801551e:	d1f9      	bne.n	8015514 <on_reply+0x18>
 8015520:	2248      	movs	r2, #72	@ 0x48
 8015522:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8015526:	4668      	mov	r0, sp
 8015528:	f002 fc1f 	bl	8017d6a <memcpy>
 801552c:	f104 0320 	add.w	r3, r4, #32
 8015530:	cb0c      	ldmia	r3, {r2, r3}
 8015532:	4620      	mov	r0, r4
 8015534:	f7f7 fc26 	bl	800cd84 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015538:	4680      	mov	r8, r0
 801553a:	b308      	cbz	r0, 8015580 <on_reply+0x84>
 801553c:	4638      	mov	r0, r7
 801553e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8015542:	4632      	mov	r2, r6
 8015544:	f107 0110 	add.w	r1, r7, #16
 8015548:	f000 fd48 	bl	8015fdc <ucdr_deserialize_array_uint8_t>
 801554c:	b930      	cbnz	r0, 801555c <on_reply+0x60>
 801554e:	480f      	ldr	r0, [pc, #60]	@ (801558c <on_reply+0x90>)
 8015550:	4641      	mov	r1, r8
 8015552:	b014      	add	sp, #80	@ 0x50
 8015554:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015558:	f000 b82a 	b.w	80155b0 <put_memory>
 801555c:	2200      	movs	r2, #0
 801555e:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8015562:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8015566:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801556a:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801556e:	f000 fc2b 	bl	8015dc8 <rmw_uros_epoch_nanos>
 8015572:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8015576:	2304      	movs	r3, #4
 8015578:	e942 0102 	strd	r0, r1, [r2, #-8]
 801557c:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8015580:	b014      	add	sp, #80	@ 0x50
 8015582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015586:	bf00      	nop
 8015588:	2000629c 	.word	0x2000629c
 801558c:	2000abac 	.word	0x2000abac

08015590 <get_memory>:
 8015590:	4603      	mov	r3, r0
 8015592:	6840      	ldr	r0, [r0, #4]
 8015594:	b158      	cbz	r0, 80155ae <get_memory+0x1e>
 8015596:	6842      	ldr	r2, [r0, #4]
 8015598:	605a      	str	r2, [r3, #4]
 801559a:	b10a      	cbz	r2, 80155a0 <get_memory+0x10>
 801559c:	2100      	movs	r1, #0
 801559e:	6011      	str	r1, [r2, #0]
 80155a0:	681a      	ldr	r2, [r3, #0]
 80155a2:	6042      	str	r2, [r0, #4]
 80155a4:	b102      	cbz	r2, 80155a8 <get_memory+0x18>
 80155a6:	6010      	str	r0, [r2, #0]
 80155a8:	2200      	movs	r2, #0
 80155aa:	6002      	str	r2, [r0, #0]
 80155ac:	6018      	str	r0, [r3, #0]
 80155ae:	4770      	bx	lr

080155b0 <put_memory>:
 80155b0:	680b      	ldr	r3, [r1, #0]
 80155b2:	b10b      	cbz	r3, 80155b8 <put_memory+0x8>
 80155b4:	684a      	ldr	r2, [r1, #4]
 80155b6:	605a      	str	r2, [r3, #4]
 80155b8:	684a      	ldr	r2, [r1, #4]
 80155ba:	b102      	cbz	r2, 80155be <put_memory+0xe>
 80155bc:	6013      	str	r3, [r2, #0]
 80155be:	6803      	ldr	r3, [r0, #0]
 80155c0:	428b      	cmp	r3, r1
 80155c2:	6843      	ldr	r3, [r0, #4]
 80155c4:	bf08      	it	eq
 80155c6:	6002      	streq	r2, [r0, #0]
 80155c8:	604b      	str	r3, [r1, #4]
 80155ca:	b103      	cbz	r3, 80155ce <put_memory+0x1e>
 80155cc:	6019      	str	r1, [r3, #0]
 80155ce:	2300      	movs	r3, #0
 80155d0:	600b      	str	r3, [r1, #0]
 80155d2:	6041      	str	r1, [r0, #4]
 80155d4:	4770      	bx	lr
 80155d6:	bf00      	nop

080155d8 <rmw_destroy_client>:
 80155d8:	b570      	push	{r4, r5, r6, lr}
 80155da:	b128      	cbz	r0, 80155e8 <rmw_destroy_client+0x10>
 80155dc:	4604      	mov	r4, r0
 80155de:	6800      	ldr	r0, [r0, #0]
 80155e0:	460d      	mov	r5, r1
 80155e2:	f7f7 fd43 	bl	800d06c <is_uxrce_rmw_identifier_valid>
 80155e6:	b910      	cbnz	r0, 80155ee <rmw_destroy_client+0x16>
 80155e8:	2401      	movs	r4, #1
 80155ea:	4620      	mov	r0, r4
 80155ec:	bd70      	pop	{r4, r5, r6, pc}
 80155ee:	6863      	ldr	r3, [r4, #4]
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d0f9      	beq.n	80155e8 <rmw_destroy_client+0x10>
 80155f4:	2d00      	cmp	r5, #0
 80155f6:	d0f7      	beq.n	80155e8 <rmw_destroy_client+0x10>
 80155f8:	6828      	ldr	r0, [r5, #0]
 80155fa:	f7f7 fd37 	bl	800d06c <is_uxrce_rmw_identifier_valid>
 80155fe:	2800      	cmp	r0, #0
 8015600:	d0f2      	beq.n	80155e8 <rmw_destroy_client+0x10>
 8015602:	686e      	ldr	r6, [r5, #4]
 8015604:	2e00      	cmp	r6, #0
 8015606:	d0ef      	beq.n	80155e8 <rmw_destroy_client+0x10>
 8015608:	6864      	ldr	r4, [r4, #4]
 801560a:	6932      	ldr	r2, [r6, #16]
 801560c:	6920      	ldr	r0, [r4, #16]
 801560e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015612:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015616:	6819      	ldr	r1, [r3, #0]
 8015618:	f7f9 f912 	bl	800e840 <uxr_buffer_cancel_data>
 801561c:	4602      	mov	r2, r0
 801561e:	6920      	ldr	r0, [r4, #16]
 8015620:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015624:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015628:	f7f7 fca0 	bl	800cf6c <run_xrce_session>
 801562c:	6920      	ldr	r0, [r4, #16]
 801562e:	6932      	ldr	r2, [r6, #16]
 8015630:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015634:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015638:	6819      	ldr	r1, [r3, #0]
 801563a:	f7f8 fdd3 	bl	800e1e4 <uxr_buffer_delete_entity>
 801563e:	4602      	mov	r2, r0
 8015640:	6920      	ldr	r0, [r4, #16]
 8015642:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015646:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801564a:	f7f7 fc8f 	bl	800cf6c <run_xrce_session>
 801564e:	2800      	cmp	r0, #0
 8015650:	4628      	mov	r0, r5
 8015652:	bf14      	ite	ne
 8015654:	2400      	movne	r4, #0
 8015656:	2402      	moveq	r4, #2
 8015658:	f7f7 fb72 	bl	800cd40 <rmw_uxrce_fini_client_memory>
 801565c:	e7c5      	b.n	80155ea <rmw_destroy_client+0x12>
 801565e:	bf00      	nop

08015660 <rmw_get_implementation_identifier>:
 8015660:	4b01      	ldr	r3, [pc, #4]	@ (8015668 <rmw_get_implementation_identifier+0x8>)
 8015662:	6818      	ldr	r0, [r3, #0]
 8015664:	4770      	bx	lr
 8015666:	bf00      	nop
 8015668:	08019770 	.word	0x08019770

0801566c <create_topic>:
 801566c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015670:	4605      	mov	r5, r0
 8015672:	b084      	sub	sp, #16
 8015674:	4822      	ldr	r0, [pc, #136]	@ (8015700 <create_topic+0x94>)
 8015676:	460f      	mov	r7, r1
 8015678:	4616      	mov	r6, r2
 801567a:	f7ff ff89 	bl	8015590 <get_memory>
 801567e:	4604      	mov	r4, r0
 8015680:	2800      	cmp	r0, #0
 8015682:	d039      	beq.n	80156f8 <create_topic+0x8c>
 8015684:	692b      	ldr	r3, [r5, #16]
 8015686:	6884      	ldr	r4, [r0, #8]
 8015688:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8015708 <create_topic+0x9c>
 801568c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015690:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8015694:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8015698:	1c42      	adds	r2, r0, #1
 801569a:	2102      	movs	r1, #2
 801569c:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80156a0:	f7f9 f864 	bl	800e76c <uxr_object_id>
 80156a4:	223c      	movs	r2, #60	@ 0x3c
 80156a6:	6120      	str	r0, [r4, #16]
 80156a8:	4641      	mov	r1, r8
 80156aa:	4638      	mov	r0, r7
 80156ac:	f7f7 fcc4 	bl	800d038 <generate_topic_name>
 80156b0:	b1f0      	cbz	r0, 80156f0 <create_topic+0x84>
 80156b2:	4f14      	ldr	r7, [pc, #80]	@ (8015704 <create_topic+0x98>)
 80156b4:	4630      	mov	r0, r6
 80156b6:	2264      	movs	r2, #100	@ 0x64
 80156b8:	4639      	mov	r1, r7
 80156ba:	f7f7 fc8d 	bl	800cfd8 <generate_type_name>
 80156be:	b1b8      	cbz	r0, 80156f0 <create_topic+0x84>
 80156c0:	6928      	ldr	r0, [r5, #16]
 80156c2:	2306      	movs	r3, #6
 80156c4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 80156c8:	f8cd 8000 	str.w	r8, [sp]
 80156cc:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80156d0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80156d4:	6811      	ldr	r1, [r2, #0]
 80156d6:	696b      	ldr	r3, [r5, #20]
 80156d8:	6922      	ldr	r2, [r4, #16]
 80156da:	f7f8 fe01 	bl	800e2e0 <uxr_buffer_create_topic_bin>
 80156de:	4602      	mov	r2, r0
 80156e0:	6928      	ldr	r0, [r5, #16]
 80156e2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80156e6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80156ea:	f7f7 fc3f 	bl	800cf6c <run_xrce_session>
 80156ee:	b918      	cbnz	r0, 80156f8 <create_topic+0x8c>
 80156f0:	4620      	mov	r0, r4
 80156f2:	f7f7 fb3b 	bl	800cd6c <rmw_uxrce_fini_topic_memory>
 80156f6:	2400      	movs	r4, #0
 80156f8:	4620      	mov	r0, r4
 80156fa:	b004      	add	sp, #16
 80156fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015700:	2000abcc 	.word	0x2000abcc
 8015704:	2000acc0 	.word	0x2000acc0
 8015708:	2000ac84 	.word	0x2000ac84

0801570c <destroy_topic>:
 801570c:	b538      	push	{r3, r4, r5, lr}
 801570e:	6985      	ldr	r5, [r0, #24]
 8015710:	b1d5      	cbz	r5, 8015748 <destroy_topic+0x3c>
 8015712:	4604      	mov	r4, r0
 8015714:	6928      	ldr	r0, [r5, #16]
 8015716:	6922      	ldr	r2, [r4, #16]
 8015718:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801571c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015720:	6819      	ldr	r1, [r3, #0]
 8015722:	f7f8 fd5f 	bl	800e1e4 <uxr_buffer_delete_entity>
 8015726:	4602      	mov	r2, r0
 8015728:	6928      	ldr	r0, [r5, #16]
 801572a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801572e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015732:	f7f7 fc1b 	bl	800cf6c <run_xrce_session>
 8015736:	2800      	cmp	r0, #0
 8015738:	4620      	mov	r0, r4
 801573a:	bf14      	ite	ne
 801573c:	2400      	movne	r4, #0
 801573e:	2402      	moveq	r4, #2
 8015740:	f7f7 fb14 	bl	800cd6c <rmw_uxrce_fini_topic_memory>
 8015744:	4620      	mov	r0, r4
 8015746:	bd38      	pop	{r3, r4, r5, pc}
 8015748:	2401      	movs	r4, #1
 801574a:	4620      	mov	r0, r4
 801574c:	bd38      	pop	{r3, r4, r5, pc}
 801574e:	bf00      	nop

08015750 <rmw_send_request>:
 8015750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015754:	4604      	mov	r4, r0
 8015756:	6800      	ldr	r0, [r0, #0]
 8015758:	b08b      	sub	sp, #44	@ 0x2c
 801575a:	460e      	mov	r6, r1
 801575c:	4615      	mov	r5, r2
 801575e:	b128      	cbz	r0, 801576c <rmw_send_request+0x1c>
 8015760:	4b21      	ldr	r3, [pc, #132]	@ (80157e8 <rmw_send_request+0x98>)
 8015762:	6819      	ldr	r1, [r3, #0]
 8015764:	f7ea fd5c 	bl	8000220 <strcmp>
 8015768:	2800      	cmp	r0, #0
 801576a:	d139      	bne.n	80157e0 <rmw_send_request+0x90>
 801576c:	6864      	ldr	r4, [r4, #4]
 801576e:	6963      	ldr	r3, [r4, #20]
 8015770:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8015774:	689b      	ldr	r3, [r3, #8]
 8015776:	4798      	blx	r3
 8015778:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801577c:	4630      	mov	r0, r6
 801577e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015782:	4798      	blx	r3
 8015784:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015788:	9000      	str	r0, [sp, #0]
 801578a:	6922      	ldr	r2, [r4, #16]
 801578c:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801578e:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8015792:	ab02      	add	r3, sp, #8
 8015794:	f7fb f8a6 	bl	80108e4 <uxr_prepare_output_stream>
 8015798:	2700      	movs	r7, #0
 801579a:	6028      	str	r0, [r5, #0]
 801579c:	606f      	str	r7, [r5, #4]
 801579e:	b198      	cbz	r0, 80157c8 <rmw_send_request+0x78>
 80157a0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80157a4:	a902      	add	r1, sp, #8
 80157a6:	4630      	mov	r0, r6
 80157a8:	4798      	blx	r3
 80157aa:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 80157ae:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80157b2:	2b01      	cmp	r3, #1
 80157b4:	d00c      	beq.n	80157d0 <rmw_send_request+0x80>
 80157b6:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80157b8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80157bc:	f7f9 fe14 	bl	800f3e8 <uxr_run_session_until_confirm_delivery>
 80157c0:	4638      	mov	r0, r7
 80157c2:	b00b      	add	sp, #44	@ 0x2c
 80157c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80157c8:	2001      	movs	r0, #1
 80157ca:	b00b      	add	sp, #44	@ 0x2c
 80157cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80157d0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80157d4:	f7f9 fa48 	bl	800ec68 <uxr_flash_output_streams>
 80157d8:	4638      	mov	r0, r7
 80157da:	b00b      	add	sp, #44	@ 0x2c
 80157dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80157e0:	200c      	movs	r0, #12
 80157e2:	b00b      	add	sp, #44	@ 0x2c
 80157e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80157e8:	08019770 	.word	0x08019770

080157ec <rmw_take_request>:
 80157ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80157f0:	4605      	mov	r5, r0
 80157f2:	6800      	ldr	r0, [r0, #0]
 80157f4:	b089      	sub	sp, #36	@ 0x24
 80157f6:	460c      	mov	r4, r1
 80157f8:	4690      	mov	r8, r2
 80157fa:	461e      	mov	r6, r3
 80157fc:	b128      	cbz	r0, 801580a <rmw_take_request+0x1e>
 80157fe:	4b28      	ldr	r3, [pc, #160]	@ (80158a0 <rmw_take_request+0xb4>)
 8015800:	6819      	ldr	r1, [r3, #0]
 8015802:	f7ea fd0d 	bl	8000220 <strcmp>
 8015806:	2800      	cmp	r0, #0
 8015808:	d146      	bne.n	8015898 <rmw_take_request+0xac>
 801580a:	b10e      	cbz	r6, 8015810 <rmw_take_request+0x24>
 801580c:	2300      	movs	r3, #0
 801580e:	7033      	strb	r3, [r6, #0]
 8015810:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8015814:	f7f7 fb2c 	bl	800ce70 <rmw_uxrce_clean_expired_static_input_buffer>
 8015818:	4648      	mov	r0, r9
 801581a:	f7f7 fb03 	bl	800ce24 <rmw_uxrce_find_static_input_buffer_by_owner>
 801581e:	4607      	mov	r7, r0
 8015820:	b3b0      	cbz	r0, 8015890 <rmw_take_request+0xa4>
 8015822:	6885      	ldr	r5, [r0, #8]
 8015824:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8015828:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 801582c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8015830:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8015834:	7423      	strb	r3, [r4, #16]
 8015836:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 801583a:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 801583e:	74e2      	strb	r2, [r4, #19]
 8015840:	f8a4 3011 	strh.w	r3, [r4, #17]
 8015844:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8015848:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 801584c:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8015850:	61e1      	str	r1, [r4, #28]
 8015852:	6162      	str	r2, [r4, #20]
 8015854:	61a3      	str	r3, [r4, #24]
 8015856:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801585a:	689b      	ldr	r3, [r3, #8]
 801585c:	4798      	blx	r3
 801585e:	6844      	ldr	r4, [r0, #4]
 8015860:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8015864:	f105 0110 	add.w	r1, r5, #16
 8015868:	4668      	mov	r0, sp
 801586a:	f7f8 fc4b 	bl	800e104 <ucdr_init_buffer>
 801586e:	68e3      	ldr	r3, [r4, #12]
 8015870:	4641      	mov	r1, r8
 8015872:	4668      	mov	r0, sp
 8015874:	4798      	blx	r3
 8015876:	4639      	mov	r1, r7
 8015878:	4604      	mov	r4, r0
 801587a:	480a      	ldr	r0, [pc, #40]	@ (80158a4 <rmw_take_request+0xb8>)
 801587c:	f7ff fe98 	bl	80155b0 <put_memory>
 8015880:	b106      	cbz	r6, 8015884 <rmw_take_request+0x98>
 8015882:	7034      	strb	r4, [r6, #0]
 8015884:	f084 0001 	eor.w	r0, r4, #1
 8015888:	b2c0      	uxtb	r0, r0
 801588a:	b009      	add	sp, #36	@ 0x24
 801588c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015890:	2001      	movs	r0, #1
 8015892:	b009      	add	sp, #36	@ 0x24
 8015894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015898:	200c      	movs	r0, #12
 801589a:	b009      	add	sp, #36	@ 0x24
 801589c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80158a0:	08019770 	.word	0x08019770
 80158a4:	2000abac 	.word	0x2000abac

080158a8 <rmw_send_response>:
 80158a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80158aa:	4605      	mov	r5, r0
 80158ac:	6800      	ldr	r0, [r0, #0]
 80158ae:	b091      	sub	sp, #68	@ 0x44
 80158b0:	460c      	mov	r4, r1
 80158b2:	4616      	mov	r6, r2
 80158b4:	b128      	cbz	r0, 80158c2 <rmw_send_response+0x1a>
 80158b6:	4b29      	ldr	r3, [pc, #164]	@ (801595c <rmw_send_response+0xb4>)
 80158b8:	6819      	ldr	r1, [r3, #0]
 80158ba:	f7ea fcb1 	bl	8000220 <strcmp>
 80158be:	2800      	cmp	r0, #0
 80158c0:	d141      	bne.n	8015946 <rmw_send_response+0x9e>
 80158c2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80158c6:	9306      	str	r3, [sp, #24]
 80158c8:	4623      	mov	r3, r4
 80158ca:	9207      	str	r2, [sp, #28]
 80158cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80158d0:	686d      	ldr	r5, [r5, #4]
 80158d2:	789b      	ldrb	r3, [r3, #2]
 80158d4:	68a1      	ldr	r1, [r4, #8]
 80158d6:	f88d 2017 	strb.w	r2, [sp, #23]
 80158da:	f88d 3016 	strb.w	r3, [sp, #22]
 80158de:	68e2      	ldr	r2, [r4, #12]
 80158e0:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80158e4:	6860      	ldr	r0, [r4, #4]
 80158e6:	f8ad 3014 	strh.w	r3, [sp, #20]
 80158ea:	ab02      	add	r3, sp, #8
 80158ec:	c307      	stmia	r3!, {r0, r1, r2}
 80158ee:	696b      	ldr	r3, [r5, #20]
 80158f0:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 80158f2:	68db      	ldr	r3, [r3, #12]
 80158f4:	4798      	blx	r3
 80158f6:	6844      	ldr	r4, [r0, #4]
 80158f8:	4630      	mov	r0, r6
 80158fa:	6923      	ldr	r3, [r4, #16]
 80158fc:	4798      	blx	r3
 80158fe:	f100 0318 	add.w	r3, r0, #24
 8015902:	6938      	ldr	r0, [r7, #16]
 8015904:	9300      	str	r3, [sp, #0]
 8015906:	692a      	ldr	r2, [r5, #16]
 8015908:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801590a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801590e:	ab08      	add	r3, sp, #32
 8015910:	f7fa ffe8 	bl	80108e4 <uxr_prepare_output_stream>
 8015914:	b910      	cbnz	r0, 801591c <rmw_send_response+0x74>
 8015916:	2001      	movs	r0, #1
 8015918:	b011      	add	sp, #68	@ 0x44
 801591a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801591c:	a902      	add	r1, sp, #8
 801591e:	a808      	add	r0, sp, #32
 8015920:	f7fc f918 	bl	8011b54 <uxr_serialize_SampleIdentity>
 8015924:	68a3      	ldr	r3, [r4, #8]
 8015926:	a908      	add	r1, sp, #32
 8015928:	4630      	mov	r0, r6
 801592a:	4798      	blx	r3
 801592c:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8015930:	6938      	ldr	r0, [r7, #16]
 8015932:	2b01      	cmp	r3, #1
 8015934:	d00a      	beq.n	801594c <rmw_send_response+0xa4>
 8015936:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8015938:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801593c:	f7f9 fd54 	bl	800f3e8 <uxr_run_session_until_confirm_delivery>
 8015940:	2000      	movs	r0, #0
 8015942:	b011      	add	sp, #68	@ 0x44
 8015944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015946:	200c      	movs	r0, #12
 8015948:	b011      	add	sp, #68	@ 0x44
 801594a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801594c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015950:	f7f9 f98a 	bl	800ec68 <uxr_flash_output_streams>
 8015954:	2000      	movs	r0, #0
 8015956:	b011      	add	sp, #68	@ 0x44
 8015958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801595a:	bf00      	nop
 801595c:	08019770 	.word	0x08019770

08015960 <rmw_take_response>:
 8015960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015964:	4604      	mov	r4, r0
 8015966:	6800      	ldr	r0, [r0, #0]
 8015968:	b088      	sub	sp, #32
 801596a:	4688      	mov	r8, r1
 801596c:	4617      	mov	r7, r2
 801596e:	461d      	mov	r5, r3
 8015970:	b120      	cbz	r0, 801597c <rmw_take_response+0x1c>
 8015972:	4b1e      	ldr	r3, [pc, #120]	@ (80159ec <rmw_take_response+0x8c>)
 8015974:	6819      	ldr	r1, [r3, #0]
 8015976:	f7ea fc53 	bl	8000220 <strcmp>
 801597a:	bb78      	cbnz	r0, 80159dc <rmw_take_response+0x7c>
 801597c:	b10d      	cbz	r5, 8015982 <rmw_take_response+0x22>
 801597e:	2300      	movs	r3, #0
 8015980:	702b      	strb	r3, [r5, #0]
 8015982:	6864      	ldr	r4, [r4, #4]
 8015984:	f7f7 fa74 	bl	800ce70 <rmw_uxrce_clean_expired_static_input_buffer>
 8015988:	4620      	mov	r0, r4
 801598a:	f7f7 fa4b 	bl	800ce24 <rmw_uxrce_find_static_input_buffer_by_owner>
 801598e:	4606      	mov	r6, r0
 8015990:	b340      	cbz	r0, 80159e4 <rmw_take_response+0x84>
 8015992:	6963      	ldr	r3, [r4, #20]
 8015994:	6884      	ldr	r4, [r0, #8]
 8015996:	68db      	ldr	r3, [r3, #12]
 8015998:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 801599c:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80159a0:	e9c8 0108 	strd	r0, r1, [r8, #32]
 80159a4:	4798      	blx	r3
 80159a6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80159aa:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 80159ae:	f104 0110 	add.w	r1, r4, #16
 80159b2:	4668      	mov	r0, sp
 80159b4:	f7f8 fba6 	bl	800e104 <ucdr_init_buffer>
 80159b8:	4639      	mov	r1, r7
 80159ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80159be:	4668      	mov	r0, sp
 80159c0:	4798      	blx	r3
 80159c2:	4631      	mov	r1, r6
 80159c4:	4604      	mov	r4, r0
 80159c6:	480a      	ldr	r0, [pc, #40]	@ (80159f0 <rmw_take_response+0x90>)
 80159c8:	f7ff fdf2 	bl	80155b0 <put_memory>
 80159cc:	b105      	cbz	r5, 80159d0 <rmw_take_response+0x70>
 80159ce:	702c      	strb	r4, [r5, #0]
 80159d0:	f084 0001 	eor.w	r0, r4, #1
 80159d4:	b2c0      	uxtb	r0, r0
 80159d6:	b008      	add	sp, #32
 80159d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159dc:	200c      	movs	r0, #12
 80159de:	b008      	add	sp, #32
 80159e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159e4:	2001      	movs	r0, #1
 80159e6:	b008      	add	sp, #32
 80159e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159ec:	08019770 	.word	0x08019770
 80159f0:	2000abac 	.word	0x2000abac

080159f4 <rmw_take_with_info>:
 80159f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159f6:	4604      	mov	r4, r0
 80159f8:	6800      	ldr	r0, [r0, #0]
 80159fa:	b089      	sub	sp, #36	@ 0x24
 80159fc:	460f      	mov	r7, r1
 80159fe:	4615      	mov	r5, r2
 8015a00:	b128      	cbz	r0, 8015a0e <rmw_take_with_info+0x1a>
 8015a02:	4b24      	ldr	r3, [pc, #144]	@ (8015a94 <rmw_take_with_info+0xa0>)
 8015a04:	6819      	ldr	r1, [r3, #0]
 8015a06:	f7ea fc0b 	bl	8000220 <strcmp>
 8015a0a:	2800      	cmp	r0, #0
 8015a0c:	d13e      	bne.n	8015a8c <rmw_take_with_info+0x98>
 8015a0e:	b305      	cbz	r5, 8015a52 <rmw_take_with_info+0x5e>
 8015a10:	6864      	ldr	r4, [r4, #4]
 8015a12:	2300      	movs	r3, #0
 8015a14:	702b      	strb	r3, [r5, #0]
 8015a16:	f7f7 fa2b 	bl	800ce70 <rmw_uxrce_clean_expired_static_input_buffer>
 8015a1a:	4620      	mov	r0, r4
 8015a1c:	f7f7 fa02 	bl	800ce24 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015a20:	4606      	mov	r6, r0
 8015a22:	b1f0      	cbz	r0, 8015a62 <rmw_take_with_info+0x6e>
 8015a24:	6881      	ldr	r1, [r0, #8]
 8015a26:	4668      	mov	r0, sp
 8015a28:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8015a2c:	3110      	adds	r1, #16
 8015a2e:	f7f8 fb69 	bl	800e104 <ucdr_init_buffer>
 8015a32:	69a3      	ldr	r3, [r4, #24]
 8015a34:	4639      	mov	r1, r7
 8015a36:	68db      	ldr	r3, [r3, #12]
 8015a38:	4668      	mov	r0, sp
 8015a3a:	4798      	blx	r3
 8015a3c:	4631      	mov	r1, r6
 8015a3e:	4604      	mov	r4, r0
 8015a40:	4815      	ldr	r0, [pc, #84]	@ (8015a98 <rmw_take_with_info+0xa4>)
 8015a42:	f7ff fdb5 	bl	80155b0 <put_memory>
 8015a46:	702c      	strb	r4, [r5, #0]
 8015a48:	f084 0001 	eor.w	r0, r4, #1
 8015a4c:	b2c0      	uxtb	r0, r0
 8015a4e:	b009      	add	sp, #36	@ 0x24
 8015a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a52:	6864      	ldr	r4, [r4, #4]
 8015a54:	f7f7 fa0c 	bl	800ce70 <rmw_uxrce_clean_expired_static_input_buffer>
 8015a58:	4620      	mov	r0, r4
 8015a5a:	f7f7 f9e3 	bl	800ce24 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015a5e:	4605      	mov	r5, r0
 8015a60:	b910      	cbnz	r0, 8015a68 <rmw_take_with_info+0x74>
 8015a62:	2001      	movs	r0, #1
 8015a64:	b009      	add	sp, #36	@ 0x24
 8015a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a68:	68a9      	ldr	r1, [r5, #8]
 8015a6a:	4668      	mov	r0, sp
 8015a6c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8015a70:	3110      	adds	r1, #16
 8015a72:	f7f8 fb47 	bl	800e104 <ucdr_init_buffer>
 8015a76:	69a3      	ldr	r3, [r4, #24]
 8015a78:	4639      	mov	r1, r7
 8015a7a:	68db      	ldr	r3, [r3, #12]
 8015a7c:	4668      	mov	r0, sp
 8015a7e:	4798      	blx	r3
 8015a80:	4629      	mov	r1, r5
 8015a82:	4604      	mov	r4, r0
 8015a84:	4804      	ldr	r0, [pc, #16]	@ (8015a98 <rmw_take_with_info+0xa4>)
 8015a86:	f7ff fd93 	bl	80155b0 <put_memory>
 8015a8a:	e7dd      	b.n	8015a48 <rmw_take_with_info+0x54>
 8015a8c:	200c      	movs	r0, #12
 8015a8e:	b009      	add	sp, #36	@ 0x24
 8015a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a92:	bf00      	nop
 8015a94:	08019770 	.word	0x08019770
 8015a98:	2000abac 	.word	0x2000abac

08015a9c <rmw_wait>:
 8015a9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015aa0:	b089      	sub	sp, #36	@ 0x24
 8015aa2:	4605      	mov	r5, r0
 8015aa4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8015aa6:	460e      	mov	r6, r1
 8015aa8:	4698      	mov	r8, r3
 8015aaa:	4691      	mov	r9, r2
 8015aac:	2a00      	cmp	r2, #0
 8015aae:	f000 810a 	beq.w	8015cc6 <rmw_wait+0x22a>
 8015ab2:	b16c      	cbz	r4, 8015ad0 <rmw_wait+0x34>
 8015ab4:	4bae      	ldr	r3, [pc, #696]	@ (8015d70 <rmw_wait+0x2d4>)
 8015ab6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015ab8:	af04      	add	r7, sp, #16
 8015aba:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8015abe:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015ac2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015ac6:	f7ff faaf 	bl	8015028 <rmw_time_equal>
 8015aca:	2800      	cmp	r0, #0
 8015acc:	f000 8127 	beq.w	8015d1e <rmw_wait+0x282>
 8015ad0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8015ad4:	f7f7 f9cc 	bl	800ce70 <rmw_uxrce_clean_expired_static_input_buffer>
 8015ad8:	4ba6      	ldr	r3, [pc, #664]	@ (8015d74 <rmw_wait+0x2d8>)
 8015ada:	681c      	ldr	r4, [r3, #0]
 8015adc:	b14c      	cbz	r4, 8015af2 <rmw_wait+0x56>
 8015ade:	4623      	mov	r3, r4
 8015ae0:	2100      	movs	r1, #0
 8015ae2:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8015ae6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015aea:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d1f7      	bne.n	8015ae2 <rmw_wait+0x46>
 8015af2:	f1b9 0f00 	cmp.w	r9, #0
 8015af6:	d011      	beq.n	8015b1c <rmw_wait+0x80>
 8015af8:	f8d9 1000 	ldr.w	r1, [r9]
 8015afc:	b171      	cbz	r1, 8015b1c <rmw_wait+0x80>
 8015afe:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8015b02:	2300      	movs	r3, #0
 8015b04:	2001      	movs	r0, #1
 8015b06:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015b0a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8015b0c:	6912      	ldr	r2, [r2, #16]
 8015b0e:	3301      	adds	r3, #1
 8015b10:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015b14:	4299      	cmp	r1, r3
 8015b16:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015b1a:	d1f4      	bne.n	8015b06 <rmw_wait+0x6a>
 8015b1c:	f1b8 0f00 	cmp.w	r8, #0
 8015b20:	d011      	beq.n	8015b46 <rmw_wait+0xaa>
 8015b22:	f8d8 1000 	ldr.w	r1, [r8]
 8015b26:	b171      	cbz	r1, 8015b46 <rmw_wait+0xaa>
 8015b28:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8015b2c:	2300      	movs	r3, #0
 8015b2e:	2001      	movs	r0, #1
 8015b30:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015b34:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8015b36:	6912      	ldr	r2, [r2, #16]
 8015b38:	3301      	adds	r3, #1
 8015b3a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015b3e:	4299      	cmp	r1, r3
 8015b40:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015b44:	d1f4      	bne.n	8015b30 <rmw_wait+0x94>
 8015b46:	b185      	cbz	r5, 8015b6a <rmw_wait+0xce>
 8015b48:	6829      	ldr	r1, [r5, #0]
 8015b4a:	b171      	cbz	r1, 8015b6a <rmw_wait+0xce>
 8015b4c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8015b50:	2300      	movs	r3, #0
 8015b52:	2001      	movs	r0, #1
 8015b54:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015b58:	6a12      	ldr	r2, [r2, #32]
 8015b5a:	6912      	ldr	r2, [r2, #16]
 8015b5c:	3301      	adds	r3, #1
 8015b5e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015b62:	4299      	cmp	r1, r3
 8015b64:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015b68:	d1f4      	bne.n	8015b54 <rmw_wait+0xb8>
 8015b6a:	b34c      	cbz	r4, 8015bc0 <rmw_wait+0x124>
 8015b6c:	4622      	mov	r2, r4
 8015b6e:	2300      	movs	r3, #0
 8015b70:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8015b74:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8015b78:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8015b7c:	440b      	add	r3, r1
 8015b7e:	b2db      	uxtb	r3, r3
 8015b80:	2a00      	cmp	r2, #0
 8015b82:	d1f5      	bne.n	8015b70 <rmw_wait+0xd4>
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	f000 8084 	beq.w	8015c92 <rmw_wait+0x1f6>
 8015b8a:	1c7a      	adds	r2, r7, #1
 8015b8c:	d00d      	beq.n	8015baa <rmw_wait+0x10e>
 8015b8e:	ee07 7a90 	vmov	s15, r7
 8015b92:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015b96:	ee07 3a90 	vmov	s15, r3
 8015b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015ba2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8015ba6:	ee17 7a90 	vmov	r7, s15
 8015baa:	68a0      	ldr	r0, [r4, #8]
 8015bac:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8015bb0:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	f040 8090 	bne.w	8015cda <rmw_wait+0x23e>
 8015bba:	6864      	ldr	r4, [r4, #4]
 8015bbc:	2c00      	cmp	r4, #0
 8015bbe:	d1f4      	bne.n	8015baa <rmw_wait+0x10e>
 8015bc0:	f1b9 0f00 	cmp.w	r9, #0
 8015bc4:	f000 80bc 	beq.w	8015d40 <rmw_wait+0x2a4>
 8015bc8:	f8d9 7000 	ldr.w	r7, [r9]
 8015bcc:	2f00      	cmp	r7, #0
 8015bce:	f000 808e 	beq.w	8015cee <rmw_wait+0x252>
 8015bd2:	2400      	movs	r4, #0
 8015bd4:	4627      	mov	r7, r4
 8015bd6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015bda:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015bde:	f7f7 f921 	bl	800ce24 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015be2:	2800      	cmp	r0, #0
 8015be4:	d05f      	beq.n	8015ca6 <rmw_wait+0x20a>
 8015be6:	f8d9 3000 	ldr.w	r3, [r9]
 8015bea:	3401      	adds	r4, #1
 8015bec:	42a3      	cmp	r3, r4
 8015bee:	f04f 0701 	mov.w	r7, #1
 8015bf2:	d8f0      	bhi.n	8015bd6 <rmw_wait+0x13a>
 8015bf4:	f1b8 0f00 	cmp.w	r8, #0
 8015bf8:	d012      	beq.n	8015c20 <rmw_wait+0x184>
 8015bfa:	f8d8 3000 	ldr.w	r3, [r8]
 8015bfe:	b17b      	cbz	r3, 8015c20 <rmw_wait+0x184>
 8015c00:	2400      	movs	r4, #0
 8015c02:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015c06:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015c0a:	f7f7 f90b 	bl	800ce24 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015c0e:	2800      	cmp	r0, #0
 8015c10:	d051      	beq.n	8015cb6 <rmw_wait+0x21a>
 8015c12:	f8d8 3000 	ldr.w	r3, [r8]
 8015c16:	3401      	adds	r4, #1
 8015c18:	42a3      	cmp	r3, r4
 8015c1a:	f04f 0701 	mov.w	r7, #1
 8015c1e:	d8f0      	bhi.n	8015c02 <rmw_wait+0x166>
 8015c20:	b1dd      	cbz	r5, 8015c5a <rmw_wait+0x1be>
 8015c22:	682b      	ldr	r3, [r5, #0]
 8015c24:	b1cb      	cbz	r3, 8015c5a <rmw_wait+0x1be>
 8015c26:	2400      	movs	r4, #0
 8015c28:	686b      	ldr	r3, [r5, #4]
 8015c2a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015c2e:	f7f7 f8f9 	bl	800ce24 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015c32:	b158      	cbz	r0, 8015c4c <rmw_wait+0x1b0>
 8015c34:	682b      	ldr	r3, [r5, #0]
 8015c36:	3401      	adds	r4, #1
 8015c38:	42a3      	cmp	r3, r4
 8015c3a:	d969      	bls.n	8015d10 <rmw_wait+0x274>
 8015c3c:	686b      	ldr	r3, [r5, #4]
 8015c3e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015c42:	2701      	movs	r7, #1
 8015c44:	f7f7 f8ee 	bl	800ce24 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015c48:	2800      	cmp	r0, #0
 8015c4a:	d1f3      	bne.n	8015c34 <rmw_wait+0x198>
 8015c4c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8015c50:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015c54:	3401      	adds	r4, #1
 8015c56:	42a3      	cmp	r3, r4
 8015c58:	d8e6      	bhi.n	8015c28 <rmw_wait+0x18c>
 8015c5a:	b1a6      	cbz	r6, 8015c86 <rmw_wait+0x1ea>
 8015c5c:	6834      	ldr	r4, [r6, #0]
 8015c5e:	b194      	cbz	r4, 8015c86 <rmw_wait+0x1ea>
 8015c60:	2300      	movs	r3, #0
 8015c62:	461d      	mov	r5, r3
 8015c64:	e004      	b.n	8015c70 <rmw_wait+0x1d4>
 8015c66:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8015c6a:	3301      	adds	r3, #1
 8015c6c:	42a3      	cmp	r3, r4
 8015c6e:	d00a      	beq.n	8015c86 <rmw_wait+0x1ea>
 8015c70:	6870      	ldr	r0, [r6, #4]
 8015c72:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8015c76:	7c0a      	ldrb	r2, [r1, #16]
 8015c78:	2a00      	cmp	r2, #0
 8015c7a:	d0f4      	beq.n	8015c66 <rmw_wait+0x1ca>
 8015c7c:	3301      	adds	r3, #1
 8015c7e:	42a3      	cmp	r3, r4
 8015c80:	740d      	strb	r5, [r1, #16]
 8015c82:	4617      	mov	r7, r2
 8015c84:	d1f4      	bne.n	8015c70 <rmw_wait+0x1d4>
 8015c86:	2f00      	cmp	r7, #0
 8015c88:	d03e      	beq.n	8015d08 <rmw_wait+0x26c>
 8015c8a:	2000      	movs	r0, #0
 8015c8c:	b009      	add	sp, #36	@ 0x24
 8015c8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c92:	68a0      	ldr	r0, [r4, #8]
 8015c94:	2100      	movs	r1, #0
 8015c96:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015c9a:	f7f9 fb6b 	bl	800f374 <uxr_run_session_timeout>
 8015c9e:	6864      	ldr	r4, [r4, #4]
 8015ca0:	2c00      	cmp	r4, #0
 8015ca2:	d1f6      	bne.n	8015c92 <rmw_wait+0x1f6>
 8015ca4:	e78c      	b.n	8015bc0 <rmw_wait+0x124>
 8015ca6:	e9d9 3200 	ldrd	r3, r2, [r9]
 8015caa:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015cae:	3401      	adds	r4, #1
 8015cb0:	42a3      	cmp	r3, r4
 8015cb2:	d890      	bhi.n	8015bd6 <rmw_wait+0x13a>
 8015cb4:	e79e      	b.n	8015bf4 <rmw_wait+0x158>
 8015cb6:	e9d8 3200 	ldrd	r3, r2, [r8]
 8015cba:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015cbe:	3401      	adds	r4, #1
 8015cc0:	429c      	cmp	r4, r3
 8015cc2:	d39e      	bcc.n	8015c02 <rmw_wait+0x166>
 8015cc4:	e7ac      	b.n	8015c20 <rmw_wait+0x184>
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	f47f aef3 	bne.w	8015ab2 <rmw_wait+0x16>
 8015ccc:	2800      	cmp	r0, #0
 8015cce:	f47f aef0 	bne.w	8015ab2 <rmw_wait+0x16>
 8015cd2:	2900      	cmp	r1, #0
 8015cd4:	f47f aeed 	bne.w	8015ab2 <rmw_wait+0x16>
 8015cd8:	e7d7      	b.n	8015c8a <rmw_wait+0x1ee>
 8015cda:	4639      	mov	r1, r7
 8015cdc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015ce0:	f7f9 fb62 	bl	800f3a8 <uxr_run_session_until_data>
 8015ce4:	6864      	ldr	r4, [r4, #4]
 8015ce6:	2c00      	cmp	r4, #0
 8015ce8:	f47f af5f 	bne.w	8015baa <rmw_wait+0x10e>
 8015cec:	e768      	b.n	8015bc0 <rmw_wait+0x124>
 8015cee:	f1b8 0f00 	cmp.w	r8, #0
 8015cf2:	d032      	beq.n	8015d5a <rmw_wait+0x2be>
 8015cf4:	f8d8 3000 	ldr.w	r3, [r8]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d181      	bne.n	8015c00 <rmw_wait+0x164>
 8015cfc:	461f      	mov	r7, r3
 8015cfe:	2d00      	cmp	r5, #0
 8015d00:	d18f      	bne.n	8015c22 <rmw_wait+0x186>
 8015d02:	462f      	mov	r7, r5
 8015d04:	2e00      	cmp	r6, #0
 8015d06:	d1a9      	bne.n	8015c5c <rmw_wait+0x1c0>
 8015d08:	2002      	movs	r0, #2
 8015d0a:	b009      	add	sp, #36	@ 0x24
 8015d0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d10:	2e00      	cmp	r6, #0
 8015d12:	d0ba      	beq.n	8015c8a <rmw_wait+0x1ee>
 8015d14:	6834      	ldr	r4, [r6, #0]
 8015d16:	2701      	movs	r7, #1
 8015d18:	2c00      	cmp	r4, #0
 8015d1a:	d1a1      	bne.n	8015c60 <rmw_wait+0x1c4>
 8015d1c:	e7b5      	b.n	8015c8a <rmw_wait+0x1ee>
 8015d1e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015d22:	f7ff f9d5 	bl	80150d0 <rmw_time_total_nsec>
 8015d26:	2300      	movs	r3, #0
 8015d28:	4a13      	ldr	r2, [pc, #76]	@ (8015d78 <rmw_wait+0x2dc>)
 8015d2a:	f7ea ff1f 	bl	8000b6c <__aeabi_uldivmod>
 8015d2e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8015d32:	f171 0300 	sbcs.w	r3, r1, #0
 8015d36:	4607      	mov	r7, r0
 8015d38:	bfa8      	it	ge
 8015d3a:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8015d3e:	e6c9      	b.n	8015ad4 <rmw_wait+0x38>
 8015d40:	f1b8 0f00 	cmp.w	r8, #0
 8015d44:	d009      	beq.n	8015d5a <rmw_wait+0x2be>
 8015d46:	f8d8 3000 	ldr.w	r3, [r8]
 8015d4a:	464f      	mov	r7, r9
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	f47f af57 	bne.w	8015c00 <rmw_wait+0x164>
 8015d52:	2d00      	cmp	r5, #0
 8015d54:	f47f af65 	bne.w	8015c22 <rmw_wait+0x186>
 8015d58:	e7d3      	b.n	8015d02 <rmw_wait+0x266>
 8015d5a:	b17d      	cbz	r5, 8015d7c <rmw_wait+0x2e0>
 8015d5c:	682b      	ldr	r3, [r5, #0]
 8015d5e:	4647      	mov	r7, r8
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	f47f af60 	bne.w	8015c26 <rmw_wait+0x18a>
 8015d66:	2e00      	cmp	r6, #0
 8015d68:	f47f af78 	bne.w	8015c5c <rmw_wait+0x1c0>
 8015d6c:	e7cc      	b.n	8015d08 <rmw_wait+0x26c>
 8015d6e:	bf00      	nop
 8015d70:	08018c10 	.word	0x08018c10
 8015d74:	2000ab9c 	.word	0x2000ab9c
 8015d78:	000f4240 	.word	0x000f4240
 8015d7c:	2e00      	cmp	r6, #0
 8015d7e:	d0c3      	beq.n	8015d08 <rmw_wait+0x26c>
 8015d80:	6834      	ldr	r4, [r6, #0]
 8015d82:	462f      	mov	r7, r5
 8015d84:	2c00      	cmp	r4, #0
 8015d86:	f47f af6b 	bne.w	8015c60 <rmw_wait+0x1c4>
 8015d8a:	e7bd      	b.n	8015d08 <rmw_wait+0x26c>

08015d8c <rmw_create_wait_set>:
 8015d8c:	b508      	push	{r3, lr}
 8015d8e:	4803      	ldr	r0, [pc, #12]	@ (8015d9c <rmw_create_wait_set+0x10>)
 8015d90:	f7ff fbfe 	bl	8015590 <get_memory>
 8015d94:	b108      	cbz	r0, 8015d9a <rmw_create_wait_set+0xe>
 8015d96:	6880      	ldr	r0, [r0, #8]
 8015d98:	3010      	adds	r0, #16
 8015d9a:	bd08      	pop	{r3, pc}
 8015d9c:	2000abdc 	.word	0x2000abdc

08015da0 <rmw_destroy_wait_set>:
 8015da0:	b508      	push	{r3, lr}
 8015da2:	4b08      	ldr	r3, [pc, #32]	@ (8015dc4 <rmw_destroy_wait_set+0x24>)
 8015da4:	6819      	ldr	r1, [r3, #0]
 8015da6:	b911      	cbnz	r1, 8015dae <rmw_destroy_wait_set+0xe>
 8015da8:	e00a      	b.n	8015dc0 <rmw_destroy_wait_set+0x20>
 8015daa:	6849      	ldr	r1, [r1, #4]
 8015dac:	b141      	cbz	r1, 8015dc0 <rmw_destroy_wait_set+0x20>
 8015dae:	688b      	ldr	r3, [r1, #8]
 8015db0:	3310      	adds	r3, #16
 8015db2:	4298      	cmp	r0, r3
 8015db4:	d1f9      	bne.n	8015daa <rmw_destroy_wait_set+0xa>
 8015db6:	4803      	ldr	r0, [pc, #12]	@ (8015dc4 <rmw_destroy_wait_set+0x24>)
 8015db8:	f7ff fbfa 	bl	80155b0 <put_memory>
 8015dbc:	2000      	movs	r0, #0
 8015dbe:	bd08      	pop	{r3, pc}
 8015dc0:	2001      	movs	r0, #1
 8015dc2:	bd08      	pop	{r3, pc}
 8015dc4:	2000abdc 	.word	0x2000abdc

08015dc8 <rmw_uros_epoch_nanos>:
 8015dc8:	4b05      	ldr	r3, [pc, #20]	@ (8015de0 <rmw_uros_epoch_nanos+0x18>)
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	b123      	cbz	r3, 8015dd8 <rmw_uros_epoch_nanos+0x10>
 8015dce:	6898      	ldr	r0, [r3, #8]
 8015dd0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015dd4:	f7f8 bf3e 	b.w	800ec54 <uxr_epoch_nanos>
 8015dd8:	2000      	movs	r0, #0
 8015dda:	2100      	movs	r1, #0
 8015ddc:	4770      	bx	lr
 8015dde:	bf00      	nop
 8015de0:	2000ab9c 	.word	0x2000ab9c

08015de4 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8015de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015de8:	6805      	ldr	r5, [r0, #0]
 8015dea:	4604      	mov	r4, r0
 8015dec:	4628      	mov	r0, r5
 8015dee:	460e      	mov	r6, r1
 8015df0:	f7ea fa16 	bl	8000220 <strcmp>
 8015df4:	b1c8      	cbz	r0, 8015e2a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8015df6:	4b11      	ldr	r3, [pc, #68]	@ (8015e3c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	429d      	cmp	r5, r3
 8015dfc:	d112      	bne.n	8015e24 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8015dfe:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8015e02:	f8d8 4000 	ldr.w	r4, [r8]
 8015e06:	b16c      	cbz	r4, 8015e24 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8015e08:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8015e0c:	2700      	movs	r7, #0
 8015e0e:	3d04      	subs	r5, #4
 8015e10:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8015e14:	4631      	mov	r1, r6
 8015e16:	f7ea fa03 	bl	8000220 <strcmp>
 8015e1a:	00bb      	lsls	r3, r7, #2
 8015e1c:	b140      	cbz	r0, 8015e30 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8015e1e:	3701      	adds	r7, #1
 8015e20:	42bc      	cmp	r4, r7
 8015e22:	d1f5      	bne.n	8015e10 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8015e24:	2000      	movs	r0, #0
 8015e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e2a:	4620      	mov	r0, r4
 8015e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e30:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015e34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015e38:	58d3      	ldr	r3, [r2, r3]
 8015e3a:	4718      	bx	r3
 8015e3c:	200000ac 	.word	0x200000ac

08015e40 <std_msgs__msg__Int32__init>:
 8015e40:	3800      	subs	r0, #0
 8015e42:	bf18      	it	ne
 8015e44:	2001      	movne	r0, #1
 8015e46:	4770      	bx	lr

08015e48 <std_msgs__msg__Int32__fini>:
 8015e48:	4770      	bx	lr
 8015e4a:	bf00      	nop

08015e4c <ucdr_serialize_endian_array_char>:
 8015e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e50:	4619      	mov	r1, r3
 8015e52:	461f      	mov	r7, r3
 8015e54:	4605      	mov	r5, r0
 8015e56:	4690      	mov	r8, r2
 8015e58:	f7f8 f900 	bl	800e05c <ucdr_check_buffer_available_for>
 8015e5c:	b9e0      	cbnz	r0, 8015e98 <ucdr_serialize_endian_array_char+0x4c>
 8015e5e:	463e      	mov	r6, r7
 8015e60:	e009      	b.n	8015e76 <ucdr_serialize_endian_array_char+0x2a>
 8015e62:	68a8      	ldr	r0, [r5, #8]
 8015e64:	f001 ff81 	bl	8017d6a <memcpy>
 8015e68:	68ab      	ldr	r3, [r5, #8]
 8015e6a:	6928      	ldr	r0, [r5, #16]
 8015e6c:	4423      	add	r3, r4
 8015e6e:	4420      	add	r0, r4
 8015e70:	1b36      	subs	r6, r6, r4
 8015e72:	60ab      	str	r3, [r5, #8]
 8015e74:	6128      	str	r0, [r5, #16]
 8015e76:	4631      	mov	r1, r6
 8015e78:	2201      	movs	r2, #1
 8015e7a:	4628      	mov	r0, r5
 8015e7c:	f7f8 f976 	bl	800e16c <ucdr_check_final_buffer_behavior_array>
 8015e80:	1bb9      	subs	r1, r7, r6
 8015e82:	4441      	add	r1, r8
 8015e84:	4604      	mov	r4, r0
 8015e86:	4602      	mov	r2, r0
 8015e88:	2800      	cmp	r0, #0
 8015e8a:	d1ea      	bne.n	8015e62 <ucdr_serialize_endian_array_char+0x16>
 8015e8c:	2301      	movs	r3, #1
 8015e8e:	7da8      	ldrb	r0, [r5, #22]
 8015e90:	756b      	strb	r3, [r5, #21]
 8015e92:	4058      	eors	r0, r3
 8015e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e98:	463a      	mov	r2, r7
 8015e9a:	68a8      	ldr	r0, [r5, #8]
 8015e9c:	4641      	mov	r1, r8
 8015e9e:	f001 ff64 	bl	8017d6a <memcpy>
 8015ea2:	68aa      	ldr	r2, [r5, #8]
 8015ea4:	692b      	ldr	r3, [r5, #16]
 8015ea6:	443a      	add	r2, r7
 8015ea8:	443b      	add	r3, r7
 8015eaa:	60aa      	str	r2, [r5, #8]
 8015eac:	612b      	str	r3, [r5, #16]
 8015eae:	e7ed      	b.n	8015e8c <ucdr_serialize_endian_array_char+0x40>

08015eb0 <ucdr_deserialize_endian_array_char>:
 8015eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015eb4:	4619      	mov	r1, r3
 8015eb6:	461f      	mov	r7, r3
 8015eb8:	4605      	mov	r5, r0
 8015eba:	4690      	mov	r8, r2
 8015ebc:	f7f8 f8ce 	bl	800e05c <ucdr_check_buffer_available_for>
 8015ec0:	b9e0      	cbnz	r0, 8015efc <ucdr_deserialize_endian_array_char+0x4c>
 8015ec2:	463e      	mov	r6, r7
 8015ec4:	e009      	b.n	8015eda <ucdr_deserialize_endian_array_char+0x2a>
 8015ec6:	68a9      	ldr	r1, [r5, #8]
 8015ec8:	f001 ff4f 	bl	8017d6a <memcpy>
 8015ecc:	68ab      	ldr	r3, [r5, #8]
 8015ece:	6928      	ldr	r0, [r5, #16]
 8015ed0:	4423      	add	r3, r4
 8015ed2:	4420      	add	r0, r4
 8015ed4:	1b36      	subs	r6, r6, r4
 8015ed6:	60ab      	str	r3, [r5, #8]
 8015ed8:	6128      	str	r0, [r5, #16]
 8015eda:	2201      	movs	r2, #1
 8015edc:	4631      	mov	r1, r6
 8015ede:	4628      	mov	r0, r5
 8015ee0:	f7f8 f944 	bl	800e16c <ucdr_check_final_buffer_behavior_array>
 8015ee4:	4604      	mov	r4, r0
 8015ee6:	1bb8      	subs	r0, r7, r6
 8015ee8:	4440      	add	r0, r8
 8015eea:	4622      	mov	r2, r4
 8015eec:	2c00      	cmp	r4, #0
 8015eee:	d1ea      	bne.n	8015ec6 <ucdr_deserialize_endian_array_char+0x16>
 8015ef0:	2301      	movs	r3, #1
 8015ef2:	7da8      	ldrb	r0, [r5, #22]
 8015ef4:	756b      	strb	r3, [r5, #21]
 8015ef6:	4058      	eors	r0, r3
 8015ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015efc:	463a      	mov	r2, r7
 8015efe:	68a9      	ldr	r1, [r5, #8]
 8015f00:	4640      	mov	r0, r8
 8015f02:	f001 ff32 	bl	8017d6a <memcpy>
 8015f06:	68aa      	ldr	r2, [r5, #8]
 8015f08:	692b      	ldr	r3, [r5, #16]
 8015f0a:	443a      	add	r2, r7
 8015f0c:	443b      	add	r3, r7
 8015f0e:	60aa      	str	r2, [r5, #8]
 8015f10:	612b      	str	r3, [r5, #16]
 8015f12:	e7ed      	b.n	8015ef0 <ucdr_deserialize_endian_array_char+0x40>

08015f14 <ucdr_serialize_array_uint8_t>:
 8015f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f18:	4688      	mov	r8, r1
 8015f1a:	4611      	mov	r1, r2
 8015f1c:	4617      	mov	r7, r2
 8015f1e:	4605      	mov	r5, r0
 8015f20:	f7f8 f89c 	bl	800e05c <ucdr_check_buffer_available_for>
 8015f24:	b9e0      	cbnz	r0, 8015f60 <ucdr_serialize_array_uint8_t+0x4c>
 8015f26:	463e      	mov	r6, r7
 8015f28:	e009      	b.n	8015f3e <ucdr_serialize_array_uint8_t+0x2a>
 8015f2a:	68a8      	ldr	r0, [r5, #8]
 8015f2c:	f001 ff1d 	bl	8017d6a <memcpy>
 8015f30:	68aa      	ldr	r2, [r5, #8]
 8015f32:	692b      	ldr	r3, [r5, #16]
 8015f34:	4422      	add	r2, r4
 8015f36:	4423      	add	r3, r4
 8015f38:	1b36      	subs	r6, r6, r4
 8015f3a:	60aa      	str	r2, [r5, #8]
 8015f3c:	612b      	str	r3, [r5, #16]
 8015f3e:	4631      	mov	r1, r6
 8015f40:	2201      	movs	r2, #1
 8015f42:	4628      	mov	r0, r5
 8015f44:	f7f8 f912 	bl	800e16c <ucdr_check_final_buffer_behavior_array>
 8015f48:	1bb9      	subs	r1, r7, r6
 8015f4a:	4441      	add	r1, r8
 8015f4c:	4604      	mov	r4, r0
 8015f4e:	4602      	mov	r2, r0
 8015f50:	2800      	cmp	r0, #0
 8015f52:	d1ea      	bne.n	8015f2a <ucdr_serialize_array_uint8_t+0x16>
 8015f54:	2301      	movs	r3, #1
 8015f56:	7da8      	ldrb	r0, [r5, #22]
 8015f58:	756b      	strb	r3, [r5, #21]
 8015f5a:	4058      	eors	r0, r3
 8015f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f60:	463a      	mov	r2, r7
 8015f62:	68a8      	ldr	r0, [r5, #8]
 8015f64:	4641      	mov	r1, r8
 8015f66:	f001 ff00 	bl	8017d6a <memcpy>
 8015f6a:	68aa      	ldr	r2, [r5, #8]
 8015f6c:	692b      	ldr	r3, [r5, #16]
 8015f6e:	443a      	add	r2, r7
 8015f70:	443b      	add	r3, r7
 8015f72:	60aa      	str	r2, [r5, #8]
 8015f74:	612b      	str	r3, [r5, #16]
 8015f76:	e7ed      	b.n	8015f54 <ucdr_serialize_array_uint8_t+0x40>

08015f78 <ucdr_serialize_endian_array_uint8_t>:
 8015f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f7c:	4619      	mov	r1, r3
 8015f7e:	461f      	mov	r7, r3
 8015f80:	4605      	mov	r5, r0
 8015f82:	4690      	mov	r8, r2
 8015f84:	f7f8 f86a 	bl	800e05c <ucdr_check_buffer_available_for>
 8015f88:	b9e0      	cbnz	r0, 8015fc4 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8015f8a:	463e      	mov	r6, r7
 8015f8c:	e009      	b.n	8015fa2 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8015f8e:	68a8      	ldr	r0, [r5, #8]
 8015f90:	f001 feeb 	bl	8017d6a <memcpy>
 8015f94:	68ab      	ldr	r3, [r5, #8]
 8015f96:	6928      	ldr	r0, [r5, #16]
 8015f98:	4423      	add	r3, r4
 8015f9a:	4420      	add	r0, r4
 8015f9c:	1b36      	subs	r6, r6, r4
 8015f9e:	60ab      	str	r3, [r5, #8]
 8015fa0:	6128      	str	r0, [r5, #16]
 8015fa2:	4631      	mov	r1, r6
 8015fa4:	2201      	movs	r2, #1
 8015fa6:	4628      	mov	r0, r5
 8015fa8:	f7f8 f8e0 	bl	800e16c <ucdr_check_final_buffer_behavior_array>
 8015fac:	1bb9      	subs	r1, r7, r6
 8015fae:	4441      	add	r1, r8
 8015fb0:	4604      	mov	r4, r0
 8015fb2:	4602      	mov	r2, r0
 8015fb4:	2800      	cmp	r0, #0
 8015fb6:	d1ea      	bne.n	8015f8e <ucdr_serialize_endian_array_uint8_t+0x16>
 8015fb8:	2301      	movs	r3, #1
 8015fba:	7da8      	ldrb	r0, [r5, #22]
 8015fbc:	756b      	strb	r3, [r5, #21]
 8015fbe:	4058      	eors	r0, r3
 8015fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015fc4:	463a      	mov	r2, r7
 8015fc6:	68a8      	ldr	r0, [r5, #8]
 8015fc8:	4641      	mov	r1, r8
 8015fca:	f001 fece 	bl	8017d6a <memcpy>
 8015fce:	68aa      	ldr	r2, [r5, #8]
 8015fd0:	692b      	ldr	r3, [r5, #16]
 8015fd2:	443a      	add	r2, r7
 8015fd4:	443b      	add	r3, r7
 8015fd6:	60aa      	str	r2, [r5, #8]
 8015fd8:	612b      	str	r3, [r5, #16]
 8015fda:	e7ed      	b.n	8015fb8 <ucdr_serialize_endian_array_uint8_t+0x40>

08015fdc <ucdr_deserialize_array_uint8_t>:
 8015fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fe0:	4688      	mov	r8, r1
 8015fe2:	4611      	mov	r1, r2
 8015fe4:	4617      	mov	r7, r2
 8015fe6:	4605      	mov	r5, r0
 8015fe8:	f7f8 f838 	bl	800e05c <ucdr_check_buffer_available_for>
 8015fec:	b9e0      	cbnz	r0, 8016028 <ucdr_deserialize_array_uint8_t+0x4c>
 8015fee:	463e      	mov	r6, r7
 8015ff0:	e009      	b.n	8016006 <ucdr_deserialize_array_uint8_t+0x2a>
 8015ff2:	68a9      	ldr	r1, [r5, #8]
 8015ff4:	f001 feb9 	bl	8017d6a <memcpy>
 8015ff8:	68aa      	ldr	r2, [r5, #8]
 8015ffa:	692b      	ldr	r3, [r5, #16]
 8015ffc:	4422      	add	r2, r4
 8015ffe:	4423      	add	r3, r4
 8016000:	1b36      	subs	r6, r6, r4
 8016002:	60aa      	str	r2, [r5, #8]
 8016004:	612b      	str	r3, [r5, #16]
 8016006:	2201      	movs	r2, #1
 8016008:	4631      	mov	r1, r6
 801600a:	4628      	mov	r0, r5
 801600c:	f7f8 f8ae 	bl	800e16c <ucdr_check_final_buffer_behavior_array>
 8016010:	4604      	mov	r4, r0
 8016012:	1bb8      	subs	r0, r7, r6
 8016014:	4440      	add	r0, r8
 8016016:	4622      	mov	r2, r4
 8016018:	2c00      	cmp	r4, #0
 801601a:	d1ea      	bne.n	8015ff2 <ucdr_deserialize_array_uint8_t+0x16>
 801601c:	2301      	movs	r3, #1
 801601e:	7da8      	ldrb	r0, [r5, #22]
 8016020:	756b      	strb	r3, [r5, #21]
 8016022:	4058      	eors	r0, r3
 8016024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016028:	463a      	mov	r2, r7
 801602a:	68a9      	ldr	r1, [r5, #8]
 801602c:	4640      	mov	r0, r8
 801602e:	f001 fe9c 	bl	8017d6a <memcpy>
 8016032:	68aa      	ldr	r2, [r5, #8]
 8016034:	692b      	ldr	r3, [r5, #16]
 8016036:	443a      	add	r2, r7
 8016038:	443b      	add	r3, r7
 801603a:	60aa      	str	r2, [r5, #8]
 801603c:	612b      	str	r3, [r5, #16]
 801603e:	e7ed      	b.n	801601c <ucdr_deserialize_array_uint8_t+0x40>

08016040 <ucdr_deserialize_endian_array_uint8_t>:
 8016040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016044:	4619      	mov	r1, r3
 8016046:	461f      	mov	r7, r3
 8016048:	4605      	mov	r5, r0
 801604a:	4690      	mov	r8, r2
 801604c:	f7f8 f806 	bl	800e05c <ucdr_check_buffer_available_for>
 8016050:	b9e0      	cbnz	r0, 801608c <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8016052:	463e      	mov	r6, r7
 8016054:	e009      	b.n	801606a <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8016056:	68a9      	ldr	r1, [r5, #8]
 8016058:	f001 fe87 	bl	8017d6a <memcpy>
 801605c:	68ab      	ldr	r3, [r5, #8]
 801605e:	6928      	ldr	r0, [r5, #16]
 8016060:	4423      	add	r3, r4
 8016062:	4420      	add	r0, r4
 8016064:	1b36      	subs	r6, r6, r4
 8016066:	60ab      	str	r3, [r5, #8]
 8016068:	6128      	str	r0, [r5, #16]
 801606a:	2201      	movs	r2, #1
 801606c:	4631      	mov	r1, r6
 801606e:	4628      	mov	r0, r5
 8016070:	f7f8 f87c 	bl	800e16c <ucdr_check_final_buffer_behavior_array>
 8016074:	4604      	mov	r4, r0
 8016076:	1bb8      	subs	r0, r7, r6
 8016078:	4440      	add	r0, r8
 801607a:	4622      	mov	r2, r4
 801607c:	2c00      	cmp	r4, #0
 801607e:	d1ea      	bne.n	8016056 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8016080:	2301      	movs	r3, #1
 8016082:	7da8      	ldrb	r0, [r5, #22]
 8016084:	756b      	strb	r3, [r5, #21]
 8016086:	4058      	eors	r0, r3
 8016088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801608c:	463a      	mov	r2, r7
 801608e:	68a9      	ldr	r1, [r5, #8]
 8016090:	4640      	mov	r0, r8
 8016092:	f001 fe6a 	bl	8017d6a <memcpy>
 8016096:	68aa      	ldr	r2, [r5, #8]
 8016098:	692b      	ldr	r3, [r5, #16]
 801609a:	443a      	add	r2, r7
 801609c:	443b      	add	r3, r7
 801609e:	60aa      	str	r2, [r5, #8]
 80160a0:	612b      	str	r3, [r5, #16]
 80160a2:	e7ed      	b.n	8016080 <ucdr_deserialize_endian_array_uint8_t+0x40>

080160a4 <ucdr_serialize_sequence_char>:
 80160a4:	b570      	push	{r4, r5, r6, lr}
 80160a6:	4615      	mov	r5, r2
 80160a8:	460e      	mov	r6, r1
 80160aa:	7d01      	ldrb	r1, [r0, #20]
 80160ac:	4604      	mov	r4, r0
 80160ae:	f7f7 fb2b 	bl	800d708 <ucdr_serialize_endian_uint32_t>
 80160b2:	b90d      	cbnz	r5, 80160b8 <ucdr_serialize_sequence_char+0x14>
 80160b4:	2001      	movs	r0, #1
 80160b6:	bd70      	pop	{r4, r5, r6, pc}
 80160b8:	7d21      	ldrb	r1, [r4, #20]
 80160ba:	462b      	mov	r3, r5
 80160bc:	4632      	mov	r2, r6
 80160be:	4620      	mov	r0, r4
 80160c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80160c4:	f7ff bec2 	b.w	8015e4c <ucdr_serialize_endian_array_char>

080160c8 <ucdr_deserialize_sequence_char>:
 80160c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160cc:	461d      	mov	r5, r3
 80160ce:	4616      	mov	r6, r2
 80160d0:	460f      	mov	r7, r1
 80160d2:	461a      	mov	r2, r3
 80160d4:	7d01      	ldrb	r1, [r0, #20]
 80160d6:	4604      	mov	r4, r0
 80160d8:	f7f7 fc3e 	bl	800d958 <ucdr_deserialize_endian_uint32_t>
 80160dc:	682b      	ldr	r3, [r5, #0]
 80160de:	429e      	cmp	r6, r3
 80160e0:	bf3c      	itt	cc
 80160e2:	2201      	movcc	r2, #1
 80160e4:	75a2      	strbcc	r2, [r4, #22]
 80160e6:	b913      	cbnz	r3, 80160ee <ucdr_deserialize_sequence_char+0x26>
 80160e8:	2001      	movs	r0, #1
 80160ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160ee:	7d21      	ldrb	r1, [r4, #20]
 80160f0:	463a      	mov	r2, r7
 80160f2:	4620      	mov	r0, r4
 80160f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80160f8:	f7ff beda 	b.w	8015eb0 <ucdr_deserialize_endian_array_char>

080160fc <ucdr_serialize_sequence_uint8_t>:
 80160fc:	b570      	push	{r4, r5, r6, lr}
 80160fe:	4615      	mov	r5, r2
 8016100:	460e      	mov	r6, r1
 8016102:	7d01      	ldrb	r1, [r0, #20]
 8016104:	4604      	mov	r4, r0
 8016106:	f7f7 faff 	bl	800d708 <ucdr_serialize_endian_uint32_t>
 801610a:	b90d      	cbnz	r5, 8016110 <ucdr_serialize_sequence_uint8_t+0x14>
 801610c:	2001      	movs	r0, #1
 801610e:	bd70      	pop	{r4, r5, r6, pc}
 8016110:	7d21      	ldrb	r1, [r4, #20]
 8016112:	462b      	mov	r3, r5
 8016114:	4632      	mov	r2, r6
 8016116:	4620      	mov	r0, r4
 8016118:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801611c:	f7ff bf2c 	b.w	8015f78 <ucdr_serialize_endian_array_uint8_t>

08016120 <ucdr_deserialize_sequence_uint8_t>:
 8016120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016124:	461d      	mov	r5, r3
 8016126:	4616      	mov	r6, r2
 8016128:	460f      	mov	r7, r1
 801612a:	461a      	mov	r2, r3
 801612c:	7d01      	ldrb	r1, [r0, #20]
 801612e:	4604      	mov	r4, r0
 8016130:	f7f7 fc12 	bl	800d958 <ucdr_deserialize_endian_uint32_t>
 8016134:	682b      	ldr	r3, [r5, #0]
 8016136:	429e      	cmp	r6, r3
 8016138:	bf3c      	itt	cc
 801613a:	2201      	movcc	r2, #1
 801613c:	75a2      	strbcc	r2, [r4, #22]
 801613e:	b913      	cbnz	r3, 8016146 <ucdr_deserialize_sequence_uint8_t+0x26>
 8016140:	2001      	movs	r0, #1
 8016142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016146:	7d21      	ldrb	r1, [r4, #20]
 8016148:	463a      	mov	r2, r7
 801614a:	4620      	mov	r0, r4
 801614c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016150:	f7ff bf76 	b.w	8016040 <ucdr_deserialize_endian_array_uint8_t>

08016154 <ucdr_serialize_string>:
 8016154:	b510      	push	{r4, lr}
 8016156:	b082      	sub	sp, #8
 8016158:	4604      	mov	r4, r0
 801615a:	4608      	mov	r0, r1
 801615c:	9101      	str	r1, [sp, #4]
 801615e:	f7ea f869 	bl	8000234 <strlen>
 8016162:	9901      	ldr	r1, [sp, #4]
 8016164:	1c42      	adds	r2, r0, #1
 8016166:	4620      	mov	r0, r4
 8016168:	b002      	add	sp, #8
 801616a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801616e:	f7ff bf99 	b.w	80160a4 <ucdr_serialize_sequence_char>
 8016172:	bf00      	nop

08016174 <ucdr_deserialize_string>:
 8016174:	b500      	push	{lr}
 8016176:	b083      	sub	sp, #12
 8016178:	ab01      	add	r3, sp, #4
 801617a:	f7ff ffa5 	bl	80160c8 <ucdr_deserialize_sequence_char>
 801617e:	b003      	add	sp, #12
 8016180:	f85d fb04 	ldr.w	pc, [sp], #4

08016184 <uxr_init_input_best_effort_stream>:
 8016184:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016188:	8003      	strh	r3, [r0, #0]
 801618a:	4770      	bx	lr

0801618c <uxr_reset_input_best_effort_stream>:
 801618c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016190:	8003      	strh	r3, [r0, #0]
 8016192:	4770      	bx	lr

08016194 <uxr_receive_best_effort_message>:
 8016194:	b538      	push	{r3, r4, r5, lr}
 8016196:	4604      	mov	r4, r0
 8016198:	8800      	ldrh	r0, [r0, #0]
 801619a:	460d      	mov	r5, r1
 801619c:	f000 fd42 	bl	8016c24 <uxr_seq_num_cmp>
 80161a0:	4603      	mov	r3, r0
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80161a8:	bfb8      	it	lt
 80161aa:	8025      	strhlt	r5, [r4, #0]
 80161ac:	bd38      	pop	{r3, r4, r5, pc}
 80161ae:	bf00      	nop

080161b0 <on_full_input_buffer>:
 80161b0:	b570      	push	{r4, r5, r6, lr}
 80161b2:	4605      	mov	r5, r0
 80161b4:	460c      	mov	r4, r1
 80161b6:	682b      	ldr	r3, [r5, #0]
 80161b8:	6809      	ldr	r1, [r1, #0]
 80161ba:	8920      	ldrh	r0, [r4, #8]
 80161bc:	6862      	ldr	r2, [r4, #4]
 80161be:	fbb2 f2f0 	udiv	r2, r2, r0
 80161c2:	eba3 0c01 	sub.w	ip, r3, r1
 80161c6:	fbbc fcf2 	udiv	ip, ip, r2
 80161ca:	f10c 0c01 	add.w	ip, ip, #1
 80161ce:	fa1f f38c 	uxth.w	r3, ip
 80161d2:	fbb3 f6f0 	udiv	r6, r3, r0
 80161d6:	fb00 3316 	mls	r3, r0, r6, r3
 80161da:	b29b      	uxth	r3, r3
 80161dc:	fb02 f303 	mul.w	r3, r2, r3
 80161e0:	1d18      	adds	r0, r3, #4
 80161e2:	4408      	add	r0, r1
 80161e4:	7d26      	ldrb	r6, [r4, #20]
 80161e6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80161ea:	b116      	cbz	r6, 80161f2 <on_full_input_buffer+0x42>
 80161ec:	2600      	movs	r6, #0
 80161ee:	f840 6c04 	str.w	r6, [r0, #-4]
 80161f2:	2a03      	cmp	r2, #3
 80161f4:	d801      	bhi.n	80161fa <on_full_input_buffer+0x4a>
 80161f6:	2001      	movs	r0, #1
 80161f8:	bd70      	pop	{r4, r5, r6, pc}
 80161fa:	3308      	adds	r3, #8
 80161fc:	4419      	add	r1, r3
 80161fe:	4628      	mov	r0, r5
 8016200:	692b      	ldr	r3, [r5, #16]
 8016202:	3a04      	subs	r2, #4
 8016204:	f7f7 ff76 	bl	800e0f4 <ucdr_init_buffer_origin>
 8016208:	4628      	mov	r0, r5
 801620a:	4903      	ldr	r1, [pc, #12]	@ (8016218 <on_full_input_buffer+0x68>)
 801620c:	4622      	mov	r2, r4
 801620e:	f7f7 ff4d 	bl	800e0ac <ucdr_set_on_full_buffer_callback>
 8016212:	2000      	movs	r0, #0
 8016214:	bd70      	pop	{r4, r5, r6, pc}
 8016216:	bf00      	nop
 8016218:	080161b1 	.word	0x080161b1

0801621c <uxr_init_input_reliable_stream>:
 801621c:	b500      	push	{lr}
 801621e:	e9c0 1200 	strd	r1, r2, [r0]
 8016222:	f04f 0e00 	mov.w	lr, #0
 8016226:	9a01      	ldr	r2, [sp, #4]
 8016228:	8103      	strh	r3, [r0, #8]
 801622a:	6102      	str	r2, [r0, #16]
 801622c:	f880 e014 	strb.w	lr, [r0, #20]
 8016230:	b1d3      	cbz	r3, 8016268 <uxr_init_input_reliable_stream+0x4c>
 8016232:	f8c1 e000 	str.w	lr, [r1]
 8016236:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801623a:	f1bc 0f01 	cmp.w	ip, #1
 801623e:	d913      	bls.n	8016268 <uxr_init_input_reliable_stream+0x4c>
 8016240:	2301      	movs	r3, #1
 8016242:	fbb3 f1fc 	udiv	r1, r3, ip
 8016246:	fb0c 3111 	mls	r1, ip, r1, r3
 801624a:	b289      	uxth	r1, r1
 801624c:	6842      	ldr	r2, [r0, #4]
 801624e:	fbb2 f2fc 	udiv	r2, r2, ip
 8016252:	fb01 f202 	mul.w	r2, r1, r2
 8016256:	6801      	ldr	r1, [r0, #0]
 8016258:	f841 e002 	str.w	lr, [r1, r2]
 801625c:	3301      	adds	r3, #1
 801625e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016262:	b29b      	uxth	r3, r3
 8016264:	459c      	cmp	ip, r3
 8016266:	d8ec      	bhi.n	8016242 <uxr_init_input_reliable_stream+0x26>
 8016268:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801626c:	60c3      	str	r3, [r0, #12]
 801626e:	f85d fb04 	ldr.w	pc, [sp], #4
 8016272:	bf00      	nop

08016274 <uxr_reset_input_reliable_stream>:
 8016274:	8901      	ldrh	r1, [r0, #8]
 8016276:	b1e9      	cbz	r1, 80162b4 <uxr_reset_input_reliable_stream+0x40>
 8016278:	f04f 0c00 	mov.w	ip, #0
 801627c:	b500      	push	{lr}
 801627e:	4663      	mov	r3, ip
 8016280:	46e6      	mov	lr, ip
 8016282:	fbb3 f2f1 	udiv	r2, r3, r1
 8016286:	fb01 3312 	mls	r3, r1, r2, r3
 801628a:	b29b      	uxth	r3, r3
 801628c:	6842      	ldr	r2, [r0, #4]
 801628e:	fbb2 f2f1 	udiv	r2, r2, r1
 8016292:	fb02 f303 	mul.w	r3, r2, r3
 8016296:	6802      	ldr	r2, [r0, #0]
 8016298:	f842 e003 	str.w	lr, [r2, r3]
 801629c:	f10c 0c01 	add.w	ip, ip, #1
 80162a0:	8901      	ldrh	r1, [r0, #8]
 80162a2:	fa1f f38c 	uxth.w	r3, ip
 80162a6:	4299      	cmp	r1, r3
 80162a8:	d8eb      	bhi.n	8016282 <uxr_reset_input_reliable_stream+0xe>
 80162aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80162ae:	60c3      	str	r3, [r0, #12]
 80162b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80162b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80162b8:	60c3      	str	r3, [r0, #12]
 80162ba:	4770      	bx	lr

080162bc <uxr_receive_reliable_message>:
 80162bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80162c0:	4604      	mov	r4, r0
 80162c2:	460d      	mov	r5, r1
 80162c4:	8901      	ldrh	r1, [r0, #8]
 80162c6:	8980      	ldrh	r0, [r0, #12]
 80162c8:	4690      	mov	r8, r2
 80162ca:	461f      	mov	r7, r3
 80162cc:	f000 fca2 	bl	8016c14 <uxr_seq_num_add>
 80162d0:	4629      	mov	r1, r5
 80162d2:	4606      	mov	r6, r0
 80162d4:	89a0      	ldrh	r0, [r4, #12]
 80162d6:	f000 fca5 	bl	8016c24 <uxr_seq_num_cmp>
 80162da:	2800      	cmp	r0, #0
 80162dc:	db0a      	blt.n	80162f4 <uxr_receive_reliable_message+0x38>
 80162de:	2600      	movs	r6, #0
 80162e0:	89e0      	ldrh	r0, [r4, #14]
 80162e2:	4629      	mov	r1, r5
 80162e4:	f000 fc9e 	bl	8016c24 <uxr_seq_num_cmp>
 80162e8:	2800      	cmp	r0, #0
 80162ea:	da00      	bge.n	80162ee <uxr_receive_reliable_message+0x32>
 80162ec:	81e5      	strh	r5, [r4, #14]
 80162ee:	4630      	mov	r0, r6
 80162f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80162f4:	4630      	mov	r0, r6
 80162f6:	4629      	mov	r1, r5
 80162f8:	f000 fc94 	bl	8016c24 <uxr_seq_num_cmp>
 80162fc:	2800      	cmp	r0, #0
 80162fe:	dbee      	blt.n	80162de <uxr_receive_reliable_message+0x22>
 8016300:	6923      	ldr	r3, [r4, #16]
 8016302:	4640      	mov	r0, r8
 8016304:	4798      	blx	r3
 8016306:	2101      	movs	r1, #1
 8016308:	4681      	mov	r9, r0
 801630a:	89a0      	ldrh	r0, [r4, #12]
 801630c:	f000 fc82 	bl	8016c14 <uxr_seq_num_add>
 8016310:	f1b9 0f00 	cmp.w	r9, #0
 8016314:	d101      	bne.n	801631a <uxr_receive_reliable_message+0x5e>
 8016316:	4285      	cmp	r5, r0
 8016318:	d047      	beq.n	80163aa <uxr_receive_reliable_message+0xee>
 801631a:	8922      	ldrh	r2, [r4, #8]
 801631c:	fbb5 f0f2 	udiv	r0, r5, r2
 8016320:	fb02 5010 	mls	r0, r2, r0, r5
 8016324:	b280      	uxth	r0, r0
 8016326:	6863      	ldr	r3, [r4, #4]
 8016328:	fbb3 f3f2 	udiv	r3, r3, r2
 801632c:	fb00 f303 	mul.w	r3, r0, r3
 8016330:	6820      	ldr	r0, [r4, #0]
 8016332:	3304      	adds	r3, #4
 8016334:	4418      	add	r0, r3
 8016336:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801633a:	2b00      	cmp	r3, #0
 801633c:	d1cf      	bne.n	80162de <uxr_receive_reliable_message+0x22>
 801633e:	4641      	mov	r1, r8
 8016340:	463a      	mov	r2, r7
 8016342:	f001 fd12 	bl	8017d6a <memcpy>
 8016346:	8921      	ldrh	r1, [r4, #8]
 8016348:	fbb5 f2f1 	udiv	r2, r5, r1
 801634c:	fb01 5212 	mls	r2, r1, r2, r5
 8016350:	b292      	uxth	r2, r2
 8016352:	6863      	ldr	r3, [r4, #4]
 8016354:	fbb3 f3f1 	udiv	r3, r3, r1
 8016358:	fb02 f303 	mul.w	r3, r2, r3
 801635c:	6822      	ldr	r2, [r4, #0]
 801635e:	50d7      	str	r7, [r2, r3]
 8016360:	9a08      	ldr	r2, [sp, #32]
 8016362:	2301      	movs	r3, #1
 8016364:	7013      	strb	r3, [r2, #0]
 8016366:	f1b9 0f00 	cmp.w	r9, #0
 801636a:	d0b8      	beq.n	80162de <uxr_receive_reliable_message+0x22>
 801636c:	89a6      	ldrh	r6, [r4, #12]
 801636e:	4630      	mov	r0, r6
 8016370:	2101      	movs	r1, #1
 8016372:	f000 fc4f 	bl	8016c14 <uxr_seq_num_add>
 8016376:	8922      	ldrh	r2, [r4, #8]
 8016378:	6863      	ldr	r3, [r4, #4]
 801637a:	fbb3 f3f2 	udiv	r3, r3, r2
 801637e:	4606      	mov	r6, r0
 8016380:	fbb0 f0f2 	udiv	r0, r0, r2
 8016384:	fb02 6010 	mls	r0, r2, r0, r6
 8016388:	b280      	uxth	r0, r0
 801638a:	fb00 f303 	mul.w	r3, r0, r3
 801638e:	6820      	ldr	r0, [r4, #0]
 8016390:	3304      	adds	r3, #4
 8016392:	4418      	add	r0, r3
 8016394:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016398:	2b00      	cmp	r3, #0
 801639a:	d0a0      	beq.n	80162de <uxr_receive_reliable_message+0x22>
 801639c:	6923      	ldr	r3, [r4, #16]
 801639e:	4798      	blx	r3
 80163a0:	2802      	cmp	r0, #2
 80163a2:	d008      	beq.n	80163b6 <uxr_receive_reliable_message+0xfa>
 80163a4:	2801      	cmp	r0, #1
 80163a6:	d0e2      	beq.n	801636e <uxr_receive_reliable_message+0xb2>
 80163a8:	e799      	b.n	80162de <uxr_receive_reliable_message+0x22>
 80163aa:	9b08      	ldr	r3, [sp, #32]
 80163ac:	81a5      	strh	r5, [r4, #12]
 80163ae:	2601      	movs	r6, #1
 80163b0:	f883 9000 	strb.w	r9, [r3]
 80163b4:	e794      	b.n	80162e0 <uxr_receive_reliable_message+0x24>
 80163b6:	2601      	movs	r6, #1
 80163b8:	e792      	b.n	80162e0 <uxr_receive_reliable_message+0x24>
 80163ba:	bf00      	nop

080163bc <uxr_next_input_reliable_buffer_available>:
 80163bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163c0:	4604      	mov	r4, r0
 80163c2:	460f      	mov	r7, r1
 80163c4:	8980      	ldrh	r0, [r0, #12]
 80163c6:	2101      	movs	r1, #1
 80163c8:	4690      	mov	r8, r2
 80163ca:	f000 fc23 	bl	8016c14 <uxr_seq_num_add>
 80163ce:	8922      	ldrh	r2, [r4, #8]
 80163d0:	fbb0 f6f2 	udiv	r6, r0, r2
 80163d4:	fb02 0616 	mls	r6, r2, r6, r0
 80163d8:	b2b6      	uxth	r6, r6
 80163da:	6863      	ldr	r3, [r4, #4]
 80163dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80163e0:	fb06 f303 	mul.w	r3, r6, r3
 80163e4:	6826      	ldr	r6, [r4, #0]
 80163e6:	3304      	adds	r3, #4
 80163e8:	441e      	add	r6, r3
 80163ea:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80163ee:	f1b9 0f00 	cmp.w	r9, #0
 80163f2:	d023      	beq.n	801643c <uxr_next_input_reliable_buffer_available+0x80>
 80163f4:	6923      	ldr	r3, [r4, #16]
 80163f6:	4605      	mov	r5, r0
 80163f8:	4630      	mov	r0, r6
 80163fa:	4798      	blx	r3
 80163fc:	4682      	mov	sl, r0
 80163fe:	b300      	cbz	r0, 8016442 <uxr_next_input_reliable_buffer_available+0x86>
 8016400:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8016404:	2101      	movs	r1, #1
 8016406:	4650      	mov	r0, sl
 8016408:	f000 fc04 	bl	8016c14 <uxr_seq_num_add>
 801640c:	8921      	ldrh	r1, [r4, #8]
 801640e:	fbb0 f2f1 	udiv	r2, r0, r1
 8016412:	4682      	mov	sl, r0
 8016414:	fb01 0212 	mls	r2, r1, r2, r0
 8016418:	e9d4 0300 	ldrd	r0, r3, [r4]
 801641c:	b292      	uxth	r2, r2
 801641e:	fbb3 f3f1 	udiv	r3, r3, r1
 8016422:	fb02 f303 	mul.w	r3, r2, r3
 8016426:	3304      	adds	r3, #4
 8016428:	4418      	add	r0, r3
 801642a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801642e:	b12b      	cbz	r3, 801643c <uxr_next_input_reliable_buffer_available+0x80>
 8016430:	6923      	ldr	r3, [r4, #16]
 8016432:	4798      	blx	r3
 8016434:	2802      	cmp	r0, #2
 8016436:	d01b      	beq.n	8016470 <uxr_next_input_reliable_buffer_available+0xb4>
 8016438:	2801      	cmp	r0, #1
 801643a:	d0e3      	beq.n	8016404 <uxr_next_input_reliable_buffer_available+0x48>
 801643c:	2000      	movs	r0, #0
 801643e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016442:	464a      	mov	r2, r9
 8016444:	4631      	mov	r1, r6
 8016446:	4638      	mov	r0, r7
 8016448:	f7f7 fe5c 	bl	800e104 <ucdr_init_buffer>
 801644c:	8921      	ldrh	r1, [r4, #8]
 801644e:	fbb5 f2f1 	udiv	r2, r5, r1
 8016452:	fb01 5212 	mls	r2, r1, r2, r5
 8016456:	b292      	uxth	r2, r2
 8016458:	6863      	ldr	r3, [r4, #4]
 801645a:	fbb3 f3f1 	udiv	r3, r3, r1
 801645e:	fb02 f303 	mul.w	r3, r2, r3
 8016462:	6822      	ldr	r2, [r4, #0]
 8016464:	f842 a003 	str.w	sl, [r2, r3]
 8016468:	2001      	movs	r0, #1
 801646a:	81a5      	strh	r5, [r4, #12]
 801646c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016470:	8920      	ldrh	r0, [r4, #8]
 8016472:	fbb5 f3f0 	udiv	r3, r5, r0
 8016476:	fb00 5513 	mls	r5, r0, r3, r5
 801647a:	b2ad      	uxth	r5, r5
 801647c:	6863      	ldr	r3, [r4, #4]
 801647e:	fbb3 f3f0 	udiv	r3, r3, r0
 8016482:	fb03 f505 	mul.w	r5, r3, r5
 8016486:	6823      	ldr	r3, [r4, #0]
 8016488:	2000      	movs	r0, #0
 801648a:	5158      	str	r0, [r3, r5]
 801648c:	eb06 0108 	add.w	r1, r6, r8
 8016490:	eba9 0208 	sub.w	r2, r9, r8
 8016494:	4638      	mov	r0, r7
 8016496:	f7f7 fe35 	bl	800e104 <ucdr_init_buffer>
 801649a:	4638      	mov	r0, r7
 801649c:	4903      	ldr	r1, [pc, #12]	@ (80164ac <uxr_next_input_reliable_buffer_available+0xf0>)
 801649e:	4622      	mov	r2, r4
 80164a0:	f7f7 fe04 	bl	800e0ac <ucdr_set_on_full_buffer_callback>
 80164a4:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80164a8:	2001      	movs	r0, #1
 80164aa:	e7c8      	b.n	801643e <uxr_next_input_reliable_buffer_available+0x82>
 80164ac:	080161b1 	.word	0x080161b1

080164b0 <uxr_process_heartbeat>:
 80164b0:	b538      	push	{r3, r4, r5, lr}
 80164b2:	4611      	mov	r1, r2
 80164b4:	4604      	mov	r4, r0
 80164b6:	89c0      	ldrh	r0, [r0, #14]
 80164b8:	4615      	mov	r5, r2
 80164ba:	f000 fbb3 	bl	8016c24 <uxr_seq_num_cmp>
 80164be:	2800      	cmp	r0, #0
 80164c0:	bfb8      	it	lt
 80164c2:	81e5      	strhlt	r5, [r4, #14]
 80164c4:	bd38      	pop	{r3, r4, r5, pc}
 80164c6:	bf00      	nop

080164c8 <uxr_compute_acknack>:
 80164c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80164cc:	8903      	ldrh	r3, [r0, #8]
 80164ce:	8985      	ldrh	r5, [r0, #12]
 80164d0:	4604      	mov	r4, r0
 80164d2:	460e      	mov	r6, r1
 80164d4:	b1d3      	cbz	r3, 801650c <uxr_compute_acknack+0x44>
 80164d6:	4628      	mov	r0, r5
 80164d8:	2701      	movs	r7, #1
 80164da:	e003      	b.n	80164e4 <uxr_compute_acknack+0x1c>
 80164dc:	4567      	cmp	r7, ip
 80164de:	d215      	bcs.n	801650c <uxr_compute_acknack+0x44>
 80164e0:	89a0      	ldrh	r0, [r4, #12]
 80164e2:	3701      	adds	r7, #1
 80164e4:	b2b9      	uxth	r1, r7
 80164e6:	f000 fb95 	bl	8016c14 <uxr_seq_num_add>
 80164ea:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80164ee:	fbb0 f3fc 	udiv	r3, r0, ip
 80164f2:	fb0c 0313 	mls	r3, ip, r3, r0
 80164f6:	b29a      	uxth	r2, r3
 80164f8:	e9d4 1300 	ldrd	r1, r3, [r4]
 80164fc:	fbb3 f3fc 	udiv	r3, r3, ip
 8016500:	fb02 f303 	mul.w	r3, r2, r3
 8016504:	58cb      	ldr	r3, [r1, r3]
 8016506:	2b00      	cmp	r3, #0
 8016508:	d1e8      	bne.n	80164dc <uxr_compute_acknack+0x14>
 801650a:	4605      	mov	r5, r0
 801650c:	8035      	strh	r5, [r6, #0]
 801650e:	2101      	movs	r1, #1
 8016510:	4628      	mov	r0, r5
 8016512:	89e7      	ldrh	r7, [r4, #14]
 8016514:	f000 fb82 	bl	8016c1c <uxr_seq_num_sub>
 8016518:	4601      	mov	r1, r0
 801651a:	4638      	mov	r0, r7
 801651c:	f000 fb7e 	bl	8016c1c <uxr_seq_num_sub>
 8016520:	4605      	mov	r5, r0
 8016522:	b318      	cbz	r0, 801656c <uxr_compute_acknack+0xa4>
 8016524:	f04f 0900 	mov.w	r9, #0
 8016528:	464f      	mov	r7, r9
 801652a:	f04f 0801 	mov.w	r8, #1
 801652e:	fa1f f189 	uxth.w	r1, r9
 8016532:	8830      	ldrh	r0, [r6, #0]
 8016534:	f000 fb6e 	bl	8016c14 <uxr_seq_num_add>
 8016538:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801653c:	fbb0 f3fc 	udiv	r3, r0, ip
 8016540:	e9d4 1200 	ldrd	r1, r2, [r4]
 8016544:	fb03 001c 	mls	r0, r3, ip, r0
 8016548:	b283      	uxth	r3, r0
 801654a:	fbb2 f2fc 	udiv	r2, r2, ip
 801654e:	fb02 f303 	mul.w	r3, r2, r3
 8016552:	fa08 f209 	lsl.w	r2, r8, r9
 8016556:	58cb      	ldr	r3, [r1, r3]
 8016558:	f109 0901 	add.w	r9, r9, #1
 801655c:	b90b      	cbnz	r3, 8016562 <uxr_compute_acknack+0x9a>
 801655e:	4317      	orrs	r7, r2
 8016560:	b2bf      	uxth	r7, r7
 8016562:	454d      	cmp	r5, r9
 8016564:	d1e3      	bne.n	801652e <uxr_compute_acknack+0x66>
 8016566:	4638      	mov	r0, r7
 8016568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801656c:	4607      	mov	r7, r0
 801656e:	4638      	mov	r0, r7
 8016570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016574 <uxr_init_output_best_effort_stream>:
 8016574:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8016578:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801657c:	6001      	str	r1, [r0, #0]
 801657e:	7303      	strb	r3, [r0, #12]
 8016580:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8016584:	4770      	bx	lr
 8016586:	bf00      	nop

08016588 <uxr_reset_output_best_effort_stream>:
 8016588:	7b02      	ldrb	r2, [r0, #12]
 801658a:	6042      	str	r2, [r0, #4]
 801658c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016590:	81c3      	strh	r3, [r0, #14]
 8016592:	4770      	bx	lr

08016594 <uxr_prepare_best_effort_buffer_to_write>:
 8016594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016596:	4604      	mov	r4, r0
 8016598:	b083      	sub	sp, #12
 801659a:	6840      	ldr	r0, [r0, #4]
 801659c:	460d      	mov	r5, r1
 801659e:	4616      	mov	r6, r2
 80165a0:	f7fa f8e0 	bl	8010764 <uxr_submessage_padding>
 80165a4:	6863      	ldr	r3, [r4, #4]
 80165a6:	4418      	add	r0, r3
 80165a8:	68a3      	ldr	r3, [r4, #8]
 80165aa:	1942      	adds	r2, r0, r5
 80165ac:	4293      	cmp	r3, r2
 80165ae:	bf2c      	ite	cs
 80165b0:	2701      	movcs	r7, #1
 80165b2:	2700      	movcc	r7, #0
 80165b4:	d202      	bcs.n	80165bc <uxr_prepare_best_effort_buffer_to_write+0x28>
 80165b6:	4638      	mov	r0, r7
 80165b8:	b003      	add	sp, #12
 80165ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165bc:	9000      	str	r0, [sp, #0]
 80165be:	6821      	ldr	r1, [r4, #0]
 80165c0:	4630      	mov	r0, r6
 80165c2:	2300      	movs	r3, #0
 80165c4:	f7f7 fd8c 	bl	800e0e0 <ucdr_init_buffer_origin_offset>
 80165c8:	6861      	ldr	r1, [r4, #4]
 80165ca:	4638      	mov	r0, r7
 80165cc:	4429      	add	r1, r5
 80165ce:	6061      	str	r1, [r4, #4]
 80165d0:	b003      	add	sp, #12
 80165d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080165d4 <uxr_prepare_best_effort_buffer_to_send>:
 80165d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165d8:	4604      	mov	r4, r0
 80165da:	461d      	mov	r5, r3
 80165dc:	6840      	ldr	r0, [r0, #4]
 80165de:	7b23      	ldrb	r3, [r4, #12]
 80165e0:	4298      	cmp	r0, r3
 80165e2:	bf8c      	ite	hi
 80165e4:	2601      	movhi	r6, #1
 80165e6:	2600      	movls	r6, #0
 80165e8:	d802      	bhi.n	80165f0 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80165ea:	4630      	mov	r0, r6
 80165ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165f0:	4688      	mov	r8, r1
 80165f2:	89e0      	ldrh	r0, [r4, #14]
 80165f4:	2101      	movs	r1, #1
 80165f6:	4617      	mov	r7, r2
 80165f8:	f000 fb0c 	bl	8016c14 <uxr_seq_num_add>
 80165fc:	6823      	ldr	r3, [r4, #0]
 80165fe:	81e0      	strh	r0, [r4, #14]
 8016600:	8028      	strh	r0, [r5, #0]
 8016602:	f8c8 3000 	str.w	r3, [r8]
 8016606:	6863      	ldr	r3, [r4, #4]
 8016608:	603b      	str	r3, [r7, #0]
 801660a:	7b23      	ldrb	r3, [r4, #12]
 801660c:	6063      	str	r3, [r4, #4]
 801660e:	4630      	mov	r0, r6
 8016610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016614 <on_full_output_buffer>:
 8016614:	b538      	push	{r3, r4, r5, lr}
 8016616:	6802      	ldr	r2, [r0, #0]
 8016618:	460c      	mov	r4, r1
 801661a:	6809      	ldr	r1, [r1, #0]
 801661c:	8923      	ldrh	r3, [r4, #8]
 801661e:	eba2 0c01 	sub.w	ip, r2, r1
 8016622:	6862      	ldr	r2, [r4, #4]
 8016624:	fbb2 f2f3 	udiv	r2, r2, r3
 8016628:	fbbc fcf2 	udiv	ip, ip, r2
 801662c:	f10c 0c01 	add.w	ip, ip, #1
 8016630:	fa1f fc8c 	uxth.w	ip, ip
 8016634:	fbbc fef3 	udiv	lr, ip, r3
 8016638:	fb03 c31e 	mls	r3, r3, lr, ip
 801663c:	b29b      	uxth	r3, r3
 801663e:	fb02 f303 	mul.w	r3, r2, r3
 8016642:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8016646:	58ca      	ldr	r2, [r1, r3]
 8016648:	4463      	add	r3, ip
 801664a:	eba2 020c 	sub.w	r2, r2, ip
 801664e:	3308      	adds	r3, #8
 8016650:	4605      	mov	r5, r0
 8016652:	4419      	add	r1, r3
 8016654:	3a04      	subs	r2, #4
 8016656:	6903      	ldr	r3, [r0, #16]
 8016658:	f7f7 fd4c 	bl	800e0f4 <ucdr_init_buffer_origin>
 801665c:	4628      	mov	r0, r5
 801665e:	4903      	ldr	r1, [pc, #12]	@ (801666c <on_full_output_buffer+0x58>)
 8016660:	4622      	mov	r2, r4
 8016662:	f7f7 fd23 	bl	800e0ac <ucdr_set_on_full_buffer_callback>
 8016666:	2000      	movs	r0, #0
 8016668:	bd38      	pop	{r3, r4, r5, pc}
 801666a:	bf00      	nop
 801666c:	08016615 	.word	0x08016615

08016670 <uxr_init_output_reliable_stream>:
 8016670:	b410      	push	{r4}
 8016672:	f89d c004 	ldrb.w	ip, [sp, #4]
 8016676:	8103      	strh	r3, [r0, #8]
 8016678:	e9c0 1200 	strd	r1, r2, [r0]
 801667c:	f880 c00c 	strb.w	ip, [r0, #12]
 8016680:	b1d3      	cbz	r3, 80166b8 <uxr_init_output_reliable_stream+0x48>
 8016682:	f8c1 c000 	str.w	ip, [r1]
 8016686:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801668a:	f1bc 0f01 	cmp.w	ip, #1
 801668e:	d913      	bls.n	80166b8 <uxr_init_output_reliable_stream+0x48>
 8016690:	2301      	movs	r3, #1
 8016692:	fbb3 f1fc 	udiv	r1, r3, ip
 8016696:	fb0c 3111 	mls	r1, ip, r1, r3
 801669a:	b289      	uxth	r1, r1
 801669c:	6842      	ldr	r2, [r0, #4]
 801669e:	6804      	ldr	r4, [r0, #0]
 80166a0:	fbb2 f2fc 	udiv	r2, r2, ip
 80166a4:	fb01 f202 	mul.w	r2, r1, r2
 80166a8:	7b01      	ldrb	r1, [r0, #12]
 80166aa:	50a1      	str	r1, [r4, r2]
 80166ac:	3301      	adds	r3, #1
 80166ae:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80166b2:	b29b      	uxth	r3, r3
 80166b4:	459c      	cmp	ip, r3
 80166b6:	d8ec      	bhi.n	8016692 <uxr_init_output_reliable_stream+0x22>
 80166b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80166bc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80166c0:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80166c4:	4905      	ldr	r1, [pc, #20]	@ (80166dc <uxr_init_output_reliable_stream+0x6c>)
 80166c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80166ca:	f8c0 100e 	str.w	r1, [r0, #14]
 80166ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80166d2:	2300      	movs	r3, #0
 80166d4:	8242      	strh	r2, [r0, #18]
 80166d6:	8403      	strh	r3, [r0, #32]
 80166d8:	4770      	bx	lr
 80166da:	bf00      	nop
 80166dc:	ffff0000 	.word	0xffff0000

080166e0 <uxr_reset_output_reliable_stream>:
 80166e0:	8901      	ldrh	r1, [r0, #8]
 80166e2:	b1b1      	cbz	r1, 8016712 <uxr_reset_output_reliable_stream+0x32>
 80166e4:	f04f 0c00 	mov.w	ip, #0
 80166e8:	4663      	mov	r3, ip
 80166ea:	fbb3 f2f1 	udiv	r2, r3, r1
 80166ee:	fb01 3312 	mls	r3, r1, r2, r3
 80166f2:	b29b      	uxth	r3, r3
 80166f4:	6842      	ldr	r2, [r0, #4]
 80166f6:	fbb2 f2f1 	udiv	r2, r2, r1
 80166fa:	6801      	ldr	r1, [r0, #0]
 80166fc:	fb02 f303 	mul.w	r3, r2, r3
 8016700:	7b02      	ldrb	r2, [r0, #12]
 8016702:	50ca      	str	r2, [r1, r3]
 8016704:	f10c 0c01 	add.w	ip, ip, #1
 8016708:	8901      	ldrh	r1, [r0, #8]
 801670a:	fa1f f38c 	uxth.w	r3, ip
 801670e:	4299      	cmp	r1, r3
 8016710:	d8eb      	bhi.n	80166ea <uxr_reset_output_reliable_stream+0xa>
 8016712:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016716:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801671a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801671e:	4904      	ldr	r1, [pc, #16]	@ (8016730 <uxr_reset_output_reliable_stream+0x50>)
 8016720:	f8c0 100e 	str.w	r1, [r0, #14]
 8016724:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016728:	2300      	movs	r3, #0
 801672a:	8242      	strh	r2, [r0, #18]
 801672c:	8403      	strh	r3, [r0, #32]
 801672e:	4770      	bx	lr
 8016730:	ffff0000 	.word	0xffff0000

08016734 <uxr_prepare_reliable_buffer_to_write>:
 8016734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016738:	4604      	mov	r4, r0
 801673a:	b091      	sub	sp, #68	@ 0x44
 801673c:	8900      	ldrh	r0, [r0, #8]
 801673e:	89e6      	ldrh	r6, [r4, #14]
 8016740:	6823      	ldr	r3, [r4, #0]
 8016742:	9204      	str	r2, [sp, #16]
 8016744:	fbb6 f2f0 	udiv	r2, r6, r0
 8016748:	fb00 6212 	mls	r2, r0, r2, r6
 801674c:	b292      	uxth	r2, r2
 801674e:	6865      	ldr	r5, [r4, #4]
 8016750:	fbb5 f5f0 	udiv	r5, r5, r0
 8016754:	fb05 3202 	mla	r2, r5, r2, r3
 8016758:	3204      	adds	r2, #4
 801675a:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801675e:	f894 900c 	ldrb.w	r9, [r4, #12]
 8016762:	9203      	str	r2, [sp, #12]
 8016764:	468b      	mov	fp, r1
 8016766:	1f2f      	subs	r7, r5, #4
 8016768:	2800      	cmp	r0, #0
 801676a:	f000 814c 	beq.w	8016a06 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801676e:	f04f 0c00 	mov.w	ip, #0
 8016772:	46e2      	mov	sl, ip
 8016774:	4661      	mov	r1, ip
 8016776:	fbb1 f2f0 	udiv	r2, r1, r0
 801677a:	fb00 1212 	mls	r2, r0, r2, r1
 801677e:	b292      	uxth	r2, r2
 8016780:	fb05 f202 	mul.w	r2, r5, r2
 8016784:	f10c 0c01 	add.w	ip, ip, #1
 8016788:	589a      	ldr	r2, [r3, r2]
 801678a:	454a      	cmp	r2, r9
 801678c:	bf08      	it	eq
 801678e:	f10a 0a01 	addeq.w	sl, sl, #1
 8016792:	fa1f f18c 	uxth.w	r1, ip
 8016796:	bf08      	it	eq
 8016798:	fa1f fa8a 	uxtheq.w	sl, sl
 801679c:	4281      	cmp	r1, r0
 801679e:	d3ea      	bcc.n	8016776 <uxr_prepare_reliable_buffer_to_write+0x42>
 80167a0:	4640      	mov	r0, r8
 80167a2:	2104      	movs	r1, #4
 80167a4:	f8cd a014 	str.w	sl, [sp, #20]
 80167a8:	f7f7 fcb0 	bl	800e10c <ucdr_alignment>
 80167ac:	4480      	add	r8, r0
 80167ae:	eb08 020b 	add.w	r2, r8, fp
 80167b2:	42ba      	cmp	r2, r7
 80167b4:	f240 80cd 	bls.w	8016952 <uxr_prepare_reliable_buffer_to_write+0x21e>
 80167b8:	7b22      	ldrb	r2, [r4, #12]
 80167ba:	445a      	add	r2, fp
 80167bc:	42ba      	cmp	r2, r7
 80167be:	f240 80b5 	bls.w	801692c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80167c2:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 80167c6:	33fc      	adds	r3, #252	@ 0xfc
 80167c8:	b2ba      	uxth	r2, r7
 80167ca:	4413      	add	r3, r2
 80167cc:	b29b      	uxth	r3, r3
 80167ce:	fb0a f903 	mul.w	r9, sl, r3
 80167d2:	45d9      	cmp	r9, fp
 80167d4:	9305      	str	r3, [sp, #20]
 80167d6:	9306      	str	r3, [sp, #24]
 80167d8:	f0c0 80b7 	bcc.w	801694a <uxr_prepare_reliable_buffer_to_write+0x216>
 80167dc:	f108 0304 	add.w	r3, r8, #4
 80167e0:	42bb      	cmp	r3, r7
 80167e2:	f080 80db 	bcs.w	801699c <uxr_prepare_reliable_buffer_to_write+0x268>
 80167e6:	f1a2 0904 	sub.w	r9, r2, #4
 80167ea:	eba9 0908 	sub.w	r9, r9, r8
 80167ee:	9b05      	ldr	r3, [sp, #20]
 80167f0:	fa1f f989 	uxth.w	r9, r9
 80167f4:	ebab 0b09 	sub.w	fp, fp, r9
 80167f8:	fbbb f2f3 	udiv	r2, fp, r3
 80167fc:	fb03 b312 	mls	r3, r3, r2, fp
 8016800:	2b00      	cmp	r3, #0
 8016802:	f000 80c8 	beq.w	8016996 <uxr_prepare_reliable_buffer_to_write+0x262>
 8016806:	3201      	adds	r2, #1
 8016808:	b292      	uxth	r2, r2
 801680a:	9306      	str	r3, [sp, #24]
 801680c:	4552      	cmp	r2, sl
 801680e:	f200 809c 	bhi.w	801694a <uxr_prepare_reliable_buffer_to_write+0x216>
 8016812:	f10d 0b20 	add.w	fp, sp, #32
 8016816:	2a00      	cmp	r2, #0
 8016818:	d042      	beq.n	80168a0 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801681a:	f8cd 801c 	str.w	r8, [sp, #28]
 801681e:	f04f 0a00 	mov.w	sl, #0
 8016822:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8016826:	9505      	str	r5, [sp, #20]
 8016828:	f10d 0b20 	add.w	fp, sp, #32
 801682c:	4615      	mov	r5, r2
 801682e:	e000      	b.n	8016832 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8016830:	46c1      	mov	r9, r8
 8016832:	8920      	ldrh	r0, [r4, #8]
 8016834:	fbb6 f2f0 	udiv	r2, r6, r0
 8016838:	fb00 6112 	mls	r1, r0, r2, r6
 801683c:	b28a      	uxth	r2, r1
 801683e:	6863      	ldr	r3, [r4, #4]
 8016840:	fbb3 f1f0 	udiv	r1, r3, r0
 8016844:	6823      	ldr	r3, [r4, #0]
 8016846:	fb02 f101 	mul.w	r1, r2, r1
 801684a:	3104      	adds	r1, #4
 801684c:	4419      	add	r1, r3
 801684e:	4658      	mov	r0, fp
 8016850:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8016854:	9200      	str	r2, [sp, #0]
 8016856:	2300      	movs	r3, #0
 8016858:	463a      	mov	r2, r7
 801685a:	f7f7 fc41 	bl	800e0e0 <ucdr_init_buffer_origin_offset>
 801685e:	464a      	mov	r2, r9
 8016860:	2300      	movs	r3, #0
 8016862:	210d      	movs	r1, #13
 8016864:	4658      	mov	r0, fp
 8016866:	f7f9 ff3d 	bl	80106e4 <uxr_buffer_submessage_header>
 801686a:	8921      	ldrh	r1, [r4, #8]
 801686c:	fbb6 f2f1 	udiv	r2, r6, r1
 8016870:	fb01 6212 	mls	r2, r1, r2, r6
 8016874:	b292      	uxth	r2, r2
 8016876:	6863      	ldr	r3, [r4, #4]
 8016878:	fbb3 f3f1 	udiv	r3, r3, r1
 801687c:	fb02 f303 	mul.w	r3, r2, r3
 8016880:	6822      	ldr	r2, [r4, #0]
 8016882:	4630      	mov	r0, r6
 8016884:	50d7      	str	r7, [r2, r3]
 8016886:	2101      	movs	r1, #1
 8016888:	f000 f9c4 	bl	8016c14 <uxr_seq_num_add>
 801688c:	f10a 0a01 	add.w	sl, sl, #1
 8016890:	fa1f f38a 	uxth.w	r3, sl
 8016894:	429d      	cmp	r5, r3
 8016896:	4606      	mov	r6, r0
 8016898:	d8ca      	bhi.n	8016830 <uxr_prepare_reliable_buffer_to_write+0xfc>
 801689a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801689e:	9d05      	ldr	r5, [sp, #20]
 80168a0:	8920      	ldrh	r0, [r4, #8]
 80168a2:	fbb6 f3f0 	udiv	r3, r6, r0
 80168a6:	fb00 6313 	mls	r3, r0, r3, r6
 80168aa:	b299      	uxth	r1, r3
 80168ac:	6863      	ldr	r3, [r4, #4]
 80168ae:	fbb3 f3f0 	udiv	r3, r3, r0
 80168b2:	fb01 f303 	mul.w	r3, r1, r3
 80168b6:	6821      	ldr	r1, [r4, #0]
 80168b8:	3304      	adds	r3, #4
 80168ba:	4419      	add	r1, r3
 80168bc:	463a      	mov	r2, r7
 80168be:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80168c2:	9000      	str	r0, [sp, #0]
 80168c4:	2300      	movs	r3, #0
 80168c6:	4658      	mov	r0, fp
 80168c8:	f7f7 fc0a 	bl	800e0e0 <ucdr_init_buffer_origin_offset>
 80168cc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80168d0:	4658      	mov	r0, fp
 80168d2:	fa1f f289 	uxth.w	r2, r9
 80168d6:	2302      	movs	r3, #2
 80168d8:	210d      	movs	r1, #13
 80168da:	f7f9 ff03 	bl	80106e4 <uxr_buffer_submessage_header>
 80168de:	9b03      	ldr	r3, [sp, #12]
 80168e0:	8927      	ldrh	r7, [r4, #8]
 80168e2:	7b20      	ldrb	r0, [r4, #12]
 80168e4:	f108 0104 	add.w	r1, r8, #4
 80168e8:	440b      	add	r3, r1
 80168ea:	4619      	mov	r1, r3
 80168ec:	fbb6 f3f7 	udiv	r3, r6, r7
 80168f0:	fb07 6313 	mls	r3, r7, r3, r6
 80168f4:	f1a5 0208 	sub.w	r2, r5, #8
 80168f8:	b29d      	uxth	r5, r3
 80168fa:	3004      	adds	r0, #4
 80168fc:	6863      	ldr	r3, [r4, #4]
 80168fe:	fbb3 f3f7 	udiv	r3, r3, r7
 8016902:	fb05 f303 	mul.w	r3, r5, r3
 8016906:	6825      	ldr	r5, [r4, #0]
 8016908:	4448      	add	r0, r9
 801690a:	50e8      	str	r0, [r5, r3]
 801690c:	9d04      	ldr	r5, [sp, #16]
 801690e:	eba2 0208 	sub.w	r2, r2, r8
 8016912:	4628      	mov	r0, r5
 8016914:	f7f7 fbf6 	bl	800e104 <ucdr_init_buffer>
 8016918:	4628      	mov	r0, r5
 801691a:	493c      	ldr	r1, [pc, #240]	@ (8016a0c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801691c:	4622      	mov	r2, r4
 801691e:	f7f7 fbc5 	bl	800e0ac <ucdr_set_on_full_buffer_callback>
 8016922:	2001      	movs	r0, #1
 8016924:	81e6      	strh	r6, [r4, #14]
 8016926:	b011      	add	sp, #68	@ 0x44
 8016928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801692c:	2101      	movs	r1, #1
 801692e:	89e0      	ldrh	r0, [r4, #14]
 8016930:	f000 f970 	bl	8016c14 <uxr_seq_num_add>
 8016934:	8921      	ldrh	r1, [r4, #8]
 8016936:	4605      	mov	r5, r0
 8016938:	8a60      	ldrh	r0, [r4, #18]
 801693a:	f000 f96b 	bl	8016c14 <uxr_seq_num_add>
 801693e:	4601      	mov	r1, r0
 8016940:	4628      	mov	r0, r5
 8016942:	f000 f96f 	bl	8016c24 <uxr_seq_num_cmp>
 8016946:	2800      	cmp	r0, #0
 8016948:	dd42      	ble.n	80169d0 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801694a:	2000      	movs	r0, #0
 801694c:	b011      	add	sp, #68	@ 0x44
 801694e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016952:	8921      	ldrh	r1, [r4, #8]
 8016954:	8a60      	ldrh	r0, [r4, #18]
 8016956:	9205      	str	r2, [sp, #20]
 8016958:	f000 f95c 	bl	8016c14 <uxr_seq_num_add>
 801695c:	4601      	mov	r1, r0
 801695e:	4630      	mov	r0, r6
 8016960:	f000 f960 	bl	8016c24 <uxr_seq_num_cmp>
 8016964:	2800      	cmp	r0, #0
 8016966:	9a05      	ldr	r2, [sp, #20]
 8016968:	dcef      	bgt.n	801694a <uxr_prepare_reliable_buffer_to_write+0x216>
 801696a:	8927      	ldrh	r7, [r4, #8]
 801696c:	fbb6 f3f7 	udiv	r3, r6, r7
 8016970:	fb07 6313 	mls	r3, r7, r3, r6
 8016974:	b29d      	uxth	r5, r3
 8016976:	6863      	ldr	r3, [r4, #4]
 8016978:	6824      	ldr	r4, [r4, #0]
 801697a:	fbb3 f3f7 	udiv	r3, r3, r7
 801697e:	fb05 f303 	mul.w	r3, r5, r3
 8016982:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8016986:	50e2      	str	r2, [r4, r3]
 8016988:	2300      	movs	r3, #0
 801698a:	f8cd 8000 	str.w	r8, [sp]
 801698e:	f7f7 fba7 	bl	800e0e0 <ucdr_init_buffer_origin_offset>
 8016992:	2001      	movs	r0, #1
 8016994:	e7da      	b.n	801694c <uxr_prepare_reliable_buffer_to_write+0x218>
 8016996:	b293      	uxth	r3, r2
 8016998:	461a      	mov	r2, r3
 801699a:	e737      	b.n	801680c <uxr_prepare_reliable_buffer_to_write+0xd8>
 801699c:	4630      	mov	r0, r6
 801699e:	2101      	movs	r1, #1
 80169a0:	9207      	str	r2, [sp, #28]
 80169a2:	f000 f937 	bl	8016c14 <uxr_seq_num_add>
 80169a6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80169aa:	fbb0 f1fc 	udiv	r1, r0, ip
 80169ae:	fb0c 0111 	mls	r1, ip, r1, r0
 80169b2:	4606      	mov	r6, r0
 80169b4:	b288      	uxth	r0, r1
 80169b6:	6863      	ldr	r3, [r4, #4]
 80169b8:	fbb3 f1fc 	udiv	r1, r3, ip
 80169bc:	6823      	ldr	r3, [r4, #0]
 80169be:	9a07      	ldr	r2, [sp, #28]
 80169c0:	fb00 f101 	mul.w	r1, r0, r1
 80169c4:	3104      	adds	r1, #4
 80169c6:	440b      	add	r3, r1
 80169c8:	9303      	str	r3, [sp, #12]
 80169ca:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80169ce:	e70a      	b.n	80167e6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 80169d0:	8921      	ldrh	r1, [r4, #8]
 80169d2:	fbb5 f3f1 	udiv	r3, r5, r1
 80169d6:	fb01 5313 	mls	r3, r1, r3, r5
 80169da:	b29a      	uxth	r2, r3
 80169dc:	6863      	ldr	r3, [r4, #4]
 80169de:	fbb3 f3f1 	udiv	r3, r3, r1
 80169e2:	6821      	ldr	r1, [r4, #0]
 80169e4:	9804      	ldr	r0, [sp, #16]
 80169e6:	fb02 f303 	mul.w	r3, r2, r3
 80169ea:	3304      	adds	r3, #4
 80169ec:	7b22      	ldrb	r2, [r4, #12]
 80169ee:	4419      	add	r1, r3
 80169f0:	445a      	add	r2, fp
 80169f2:	f841 2c04 	str.w	r2, [r1, #-4]
 80169f6:	7b23      	ldrb	r3, [r4, #12]
 80169f8:	9300      	str	r3, [sp, #0]
 80169fa:	2300      	movs	r3, #0
 80169fc:	f7f7 fb70 	bl	800e0e0 <ucdr_init_buffer_origin_offset>
 8016a00:	81e5      	strh	r5, [r4, #14]
 8016a02:	2001      	movs	r0, #1
 8016a04:	e7a2      	b.n	801694c <uxr_prepare_reliable_buffer_to_write+0x218>
 8016a06:	4682      	mov	sl, r0
 8016a08:	e6ca      	b.n	80167a0 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8016a0a:	bf00      	nop
 8016a0c:	08016615 	.word	0x08016615

08016a10 <uxr_prepare_next_reliable_buffer_to_send>:
 8016a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a12:	4604      	mov	r4, r0
 8016a14:	460f      	mov	r7, r1
 8016a16:	8a00      	ldrh	r0, [r0, #16]
 8016a18:	2101      	movs	r1, #1
 8016a1a:	4616      	mov	r6, r2
 8016a1c:	461d      	mov	r5, r3
 8016a1e:	f000 f8f9 	bl	8016c14 <uxr_seq_num_add>
 8016a22:	8028      	strh	r0, [r5, #0]
 8016a24:	8922      	ldrh	r2, [r4, #8]
 8016a26:	fbb0 f3f2 	udiv	r3, r0, r2
 8016a2a:	fb02 0c13 	mls	ip, r2, r3, r0
 8016a2e:	fa1f fc8c 	uxth.w	ip, ip
 8016a32:	6863      	ldr	r3, [r4, #4]
 8016a34:	fbb3 f3f2 	udiv	r3, r3, r2
 8016a38:	fb0c fc03 	mul.w	ip, ip, r3
 8016a3c:	6823      	ldr	r3, [r4, #0]
 8016a3e:	89e1      	ldrh	r1, [r4, #14]
 8016a40:	f10c 0c04 	add.w	ip, ip, #4
 8016a44:	4463      	add	r3, ip
 8016a46:	603b      	str	r3, [r7, #0]
 8016a48:	6823      	ldr	r3, [r4, #0]
 8016a4a:	449c      	add	ip, r3
 8016a4c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8016a50:	6033      	str	r3, [r6, #0]
 8016a52:	f000 f8e7 	bl	8016c24 <uxr_seq_num_cmp>
 8016a56:	2800      	cmp	r0, #0
 8016a58:	dd01      	ble.n	8016a5e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8016a5a:	2000      	movs	r0, #0
 8016a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a5e:	7b23      	ldrb	r3, [r4, #12]
 8016a60:	6832      	ldr	r2, [r6, #0]
 8016a62:	429a      	cmp	r2, r3
 8016a64:	d9f9      	bls.n	8016a5a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016a66:	8a61      	ldrh	r1, [r4, #18]
 8016a68:	8a20      	ldrh	r0, [r4, #16]
 8016a6a:	f000 f8d7 	bl	8016c1c <uxr_seq_num_sub>
 8016a6e:	8923      	ldrh	r3, [r4, #8]
 8016a70:	4283      	cmp	r3, r0
 8016a72:	d0f2      	beq.n	8016a5a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016a74:	8828      	ldrh	r0, [r5, #0]
 8016a76:	89e3      	ldrh	r3, [r4, #14]
 8016a78:	8220      	strh	r0, [r4, #16]
 8016a7a:	4298      	cmp	r0, r3
 8016a7c:	d001      	beq.n	8016a82 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8016a7e:	2001      	movs	r0, #1
 8016a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a82:	2101      	movs	r1, #1
 8016a84:	f000 f8c6 	bl	8016c14 <uxr_seq_num_add>
 8016a88:	81e0      	strh	r0, [r4, #14]
 8016a8a:	2001      	movs	r0, #1
 8016a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a8e:	bf00      	nop

08016a90 <uxr_update_output_stream_heartbeat_timestamp>:
 8016a90:	b570      	push	{r4, r5, r6, lr}
 8016a92:	8a01      	ldrh	r1, [r0, #16]
 8016a94:	4604      	mov	r4, r0
 8016a96:	8a40      	ldrh	r0, [r0, #18]
 8016a98:	4615      	mov	r5, r2
 8016a9a:	461e      	mov	r6, r3
 8016a9c:	f000 f8c2 	bl	8016c24 <uxr_seq_num_cmp>
 8016aa0:	2800      	cmp	r0, #0
 8016aa2:	db07      	blt.n	8016ab4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8016aa4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016aa8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016aac:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8016ab0:	2000      	movs	r0, #0
 8016ab2:	bd70      	pop	{r4, r5, r6, pc}
 8016ab4:	f894 0020 	ldrb.w	r0, [r4, #32]
 8016ab8:	b940      	cbnz	r0, 8016acc <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8016aba:	2301      	movs	r3, #1
 8016abc:	f884 3020 	strb.w	r3, [r4, #32]
 8016ac0:	3564      	adds	r5, #100	@ 0x64
 8016ac2:	f146 0600 	adc.w	r6, r6, #0
 8016ac6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8016aca:	bd70      	pop	{r4, r5, r6, pc}
 8016acc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8016ad0:	4295      	cmp	r5, r2
 8016ad2:	eb76 0303 	sbcs.w	r3, r6, r3
 8016ad6:	bfa5      	ittet	ge
 8016ad8:	3001      	addge	r0, #1
 8016ada:	f884 0020 	strbge.w	r0, [r4, #32]
 8016ade:	2000      	movlt	r0, #0
 8016ae0:	2001      	movge	r0, #1
 8016ae2:	e7ed      	b.n	8016ac0 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08016ae4 <uxr_begin_output_nack_buffer_it>:
 8016ae4:	8a40      	ldrh	r0, [r0, #18]
 8016ae6:	4770      	bx	lr

08016ae8 <uxr_next_reliable_nack_buffer_to_send>:
 8016ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016aec:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8016af0:	b082      	sub	sp, #8
 8016af2:	f1b8 0f00 	cmp.w	r8, #0
 8016af6:	d011      	beq.n	8016b1c <uxr_next_reliable_nack_buffer_to_send+0x34>
 8016af8:	4604      	mov	r4, r0
 8016afa:	8818      	ldrh	r0, [r3, #0]
 8016afc:	460e      	mov	r6, r1
 8016afe:	4617      	mov	r7, r2
 8016b00:	461d      	mov	r5, r3
 8016b02:	2101      	movs	r1, #1
 8016b04:	f000 f886 	bl	8016c14 <uxr_seq_num_add>
 8016b08:	8028      	strh	r0, [r5, #0]
 8016b0a:	8a21      	ldrh	r1, [r4, #16]
 8016b0c:	f000 f88a 	bl	8016c24 <uxr_seq_num_cmp>
 8016b10:	2800      	cmp	r0, #0
 8016b12:	dd07      	ble.n	8016b24 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8016b14:	f04f 0800 	mov.w	r8, #0
 8016b18:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8016b1c:	4640      	mov	r0, r8
 8016b1e:	b002      	add	sp, #8
 8016b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b24:	8921      	ldrh	r1, [r4, #8]
 8016b26:	8828      	ldrh	r0, [r5, #0]
 8016b28:	6823      	ldr	r3, [r4, #0]
 8016b2a:	fbb0 f2f1 	udiv	r2, r0, r1
 8016b2e:	fb01 0c12 	mls	ip, r1, r2, r0
 8016b32:	fa1f f28c 	uxth.w	r2, ip
 8016b36:	9301      	str	r3, [sp, #4]
 8016b38:	6863      	ldr	r3, [r4, #4]
 8016b3a:	fbb3 fcf1 	udiv	ip, r3, r1
 8016b3e:	9b01      	ldr	r3, [sp, #4]
 8016b40:	fb02 fc0c 	mul.w	ip, r2, ip
 8016b44:	f10c 0c04 	add.w	ip, ip, #4
 8016b48:	4463      	add	r3, ip
 8016b4a:	6033      	str	r3, [r6, #0]
 8016b4c:	6823      	ldr	r3, [r4, #0]
 8016b4e:	4463      	add	r3, ip
 8016b50:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016b54:	603b      	str	r3, [r7, #0]
 8016b56:	7b22      	ldrb	r2, [r4, #12]
 8016b58:	429a      	cmp	r2, r3
 8016b5a:	d0d2      	beq.n	8016b02 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8016b5c:	4640      	mov	r0, r8
 8016b5e:	b002      	add	sp, #8
 8016b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016b64 <uxr_process_acknack>:
 8016b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b66:	4604      	mov	r4, r0
 8016b68:	460e      	mov	r6, r1
 8016b6a:	4610      	mov	r0, r2
 8016b6c:	2101      	movs	r1, #1
 8016b6e:	f000 f855 	bl	8016c1c <uxr_seq_num_sub>
 8016b72:	8a61      	ldrh	r1, [r4, #18]
 8016b74:	f000 f852 	bl	8016c1c <uxr_seq_num_sub>
 8016b78:	b1c0      	cbz	r0, 8016bac <uxr_process_acknack+0x48>
 8016b7a:	4605      	mov	r5, r0
 8016b7c:	2700      	movs	r7, #0
 8016b7e:	2101      	movs	r1, #1
 8016b80:	8a60      	ldrh	r0, [r4, #18]
 8016b82:	f000 f847 	bl	8016c14 <uxr_seq_num_add>
 8016b86:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016b8a:	fbb0 f1fc 	udiv	r1, r0, ip
 8016b8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016b92:	fb0c 0111 	mls	r1, ip, r1, r0
 8016b96:	b289      	uxth	r1, r1
 8016b98:	3701      	adds	r7, #1
 8016b9a:	fbb3 f3fc 	udiv	r3, r3, ip
 8016b9e:	fb01 f303 	mul.w	r3, r1, r3
 8016ba2:	42bd      	cmp	r5, r7
 8016ba4:	7b21      	ldrb	r1, [r4, #12]
 8016ba6:	8260      	strh	r0, [r4, #18]
 8016ba8:	50d1      	str	r1, [r2, r3]
 8016baa:	d1e8      	bne.n	8016b7e <uxr_process_acknack+0x1a>
 8016bac:	3e00      	subs	r6, #0
 8016bae:	f04f 0300 	mov.w	r3, #0
 8016bb2:	bf18      	it	ne
 8016bb4:	2601      	movne	r6, #1
 8016bb6:	f884 3020 	strb.w	r3, [r4, #32]
 8016bba:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8016bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016bc0 <uxr_is_output_up_to_date>:
 8016bc0:	8a01      	ldrh	r1, [r0, #16]
 8016bc2:	8a40      	ldrh	r0, [r0, #18]
 8016bc4:	b508      	push	{r3, lr}
 8016bc6:	f000 f82d 	bl	8016c24 <uxr_seq_num_cmp>
 8016bca:	fab0 f080 	clz	r0, r0
 8016bce:	0940      	lsrs	r0, r0, #5
 8016bd0:	bd08      	pop	{r3, pc}
 8016bd2:	bf00      	nop

08016bd4 <get_available_free_slots>:
 8016bd4:	8902      	ldrh	r2, [r0, #8]
 8016bd6:	b1da      	cbz	r2, 8016c10 <get_available_free_slots+0x3c>
 8016bd8:	b530      	push	{r4, r5, lr}
 8016bda:	2100      	movs	r1, #0
 8016bdc:	6843      	ldr	r3, [r0, #4]
 8016bde:	6805      	ldr	r5, [r0, #0]
 8016be0:	7b04      	ldrb	r4, [r0, #12]
 8016be2:	fbb3 fef2 	udiv	lr, r3, r2
 8016be6:	4608      	mov	r0, r1
 8016be8:	460b      	mov	r3, r1
 8016bea:	fbb3 fcf2 	udiv	ip, r3, r2
 8016bee:	fb02 331c 	mls	r3, r2, ip, r3
 8016bf2:	b29b      	uxth	r3, r3
 8016bf4:	fb0e f303 	mul.w	r3, lr, r3
 8016bf8:	3101      	adds	r1, #1
 8016bfa:	f855 c003 	ldr.w	ip, [r5, r3]
 8016bfe:	4564      	cmp	r4, ip
 8016c00:	bf08      	it	eq
 8016c02:	3001      	addeq	r0, #1
 8016c04:	b28b      	uxth	r3, r1
 8016c06:	bf08      	it	eq
 8016c08:	b280      	uxtheq	r0, r0
 8016c0a:	4293      	cmp	r3, r2
 8016c0c:	d3ed      	bcc.n	8016bea <get_available_free_slots+0x16>
 8016c0e:	bd30      	pop	{r4, r5, pc}
 8016c10:	4610      	mov	r0, r2
 8016c12:	4770      	bx	lr

08016c14 <uxr_seq_num_add>:
 8016c14:	4408      	add	r0, r1
 8016c16:	b280      	uxth	r0, r0
 8016c18:	4770      	bx	lr
 8016c1a:	bf00      	nop

08016c1c <uxr_seq_num_sub>:
 8016c1c:	1a40      	subs	r0, r0, r1
 8016c1e:	b280      	uxth	r0, r0
 8016c20:	4770      	bx	lr
 8016c22:	bf00      	nop

08016c24 <uxr_seq_num_cmp>:
 8016c24:	4288      	cmp	r0, r1
 8016c26:	d011      	beq.n	8016c4c <uxr_seq_num_cmp+0x28>
 8016c28:	d309      	bcc.n	8016c3e <uxr_seq_num_cmp+0x1a>
 8016c2a:	4288      	cmp	r0, r1
 8016c2c:	d910      	bls.n	8016c50 <uxr_seq_num_cmp+0x2c>
 8016c2e:	1a40      	subs	r0, r0, r1
 8016c30:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8016c34:	bfd4      	ite	le
 8016c36:	2001      	movle	r0, #1
 8016c38:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8016c3c:	4770      	bx	lr
 8016c3e:	1a0b      	subs	r3, r1, r0
 8016c40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016c44:	daf1      	bge.n	8016c2a <uxr_seq_num_cmp+0x6>
 8016c46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016c4a:	4770      	bx	lr
 8016c4c:	2000      	movs	r0, #0
 8016c4e:	4770      	bx	lr
 8016c50:	2001      	movs	r0, #1
 8016c52:	4770      	bx	lr

08016c54 <rcl_get_default_domain_id>:
 8016c54:	b530      	push	{r4, r5, lr}
 8016c56:	b083      	sub	sp, #12
 8016c58:	2300      	movs	r3, #0
 8016c5a:	9300      	str	r3, [sp, #0]
 8016c5c:	b1d0      	cbz	r0, 8016c94 <rcl_get_default_domain_id+0x40>
 8016c5e:	4604      	mov	r4, r0
 8016c60:	4669      	mov	r1, sp
 8016c62:	4815      	ldr	r0, [pc, #84]	@ (8016cb8 <rcl_get_default_domain_id+0x64>)
 8016c64:	f7fd ff04 	bl	8014a70 <rcutils_get_env>
 8016c68:	4602      	mov	r2, r0
 8016c6a:	b110      	cbz	r0, 8016c72 <rcl_get_default_domain_id+0x1e>
 8016c6c:	2001      	movs	r0, #1
 8016c6e:	b003      	add	sp, #12
 8016c70:	bd30      	pop	{r4, r5, pc}
 8016c72:	9b00      	ldr	r3, [sp, #0]
 8016c74:	b18b      	cbz	r3, 8016c9a <rcl_get_default_domain_id+0x46>
 8016c76:	7818      	ldrb	r0, [r3, #0]
 8016c78:	2800      	cmp	r0, #0
 8016c7a:	d0f8      	beq.n	8016c6e <rcl_get_default_domain_id+0x1a>
 8016c7c:	a901      	add	r1, sp, #4
 8016c7e:	4618      	mov	r0, r3
 8016c80:	9201      	str	r2, [sp, #4]
 8016c82:	f000 fdf1 	bl	8017868 <strtoul>
 8016c86:	4605      	mov	r5, r0
 8016c88:	b150      	cbz	r0, 8016ca0 <rcl_get_default_domain_id+0x4c>
 8016c8a:	1c43      	adds	r3, r0, #1
 8016c8c:	d00d      	beq.n	8016caa <rcl_get_default_domain_id+0x56>
 8016c8e:	6025      	str	r5, [r4, #0]
 8016c90:	2000      	movs	r0, #0
 8016c92:	e7ec      	b.n	8016c6e <rcl_get_default_domain_id+0x1a>
 8016c94:	200b      	movs	r0, #11
 8016c96:	b003      	add	sp, #12
 8016c98:	bd30      	pop	{r4, r5, pc}
 8016c9a:	4618      	mov	r0, r3
 8016c9c:	b003      	add	sp, #12
 8016c9e:	bd30      	pop	{r4, r5, pc}
 8016ca0:	9b01      	ldr	r3, [sp, #4]
 8016ca2:	781b      	ldrb	r3, [r3, #0]
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d0f2      	beq.n	8016c8e <rcl_get_default_domain_id+0x3a>
 8016ca8:	e7e0      	b.n	8016c6c <rcl_get_default_domain_id+0x18>
 8016caa:	f001 f829 	bl	8017d00 <__errno>
 8016cae:	6803      	ldr	r3, [r0, #0]
 8016cb0:	2b22      	cmp	r3, #34	@ 0x22
 8016cb2:	d1ec      	bne.n	8016c8e <rcl_get_default_domain_id+0x3a>
 8016cb4:	e7da      	b.n	8016c6c <rcl_get_default_domain_id+0x18>
 8016cb6:	bf00      	nop
 8016cb8:	0801978c 	.word	0x0801978c

08016cbc <rcl_expand_topic_name>:
 8016cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cc0:	b08b      	sub	sp, #44	@ 0x2c
 8016cc2:	9306      	str	r3, [sp, #24]
 8016cc4:	2800      	cmp	r0, #0
 8016cc6:	f000 80ad 	beq.w	8016e24 <rcl_expand_topic_name+0x168>
 8016cca:	460e      	mov	r6, r1
 8016ccc:	2900      	cmp	r1, #0
 8016cce:	f000 80a9 	beq.w	8016e24 <rcl_expand_topic_name+0x168>
 8016cd2:	4617      	mov	r7, r2
 8016cd4:	2a00      	cmp	r2, #0
 8016cd6:	f000 80a5 	beq.w	8016e24 <rcl_expand_topic_name+0x168>
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	f000 80a2 	beq.w	8016e24 <rcl_expand_topic_name+0x168>
 8016ce0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	f000 809e 	beq.w	8016e24 <rcl_expand_topic_name+0x168>
 8016ce8:	2200      	movs	r2, #0
 8016cea:	a909      	add	r1, sp, #36	@ 0x24
 8016cec:	4680      	mov	r8, r0
 8016cee:	f000 fa57 	bl	80171a0 <rcl_validate_topic_name>
 8016cf2:	4604      	mov	r4, r0
 8016cf4:	2800      	cmp	r0, #0
 8016cf6:	f040 8096 	bne.w	8016e26 <rcl_expand_topic_name+0x16a>
 8016cfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	f040 809a 	bne.w	8016e36 <rcl_expand_topic_name+0x17a>
 8016d02:	4602      	mov	r2, r0
 8016d04:	a909      	add	r1, sp, #36	@ 0x24
 8016d06:	4630      	mov	r0, r6
 8016d08:	f7fe fafc 	bl	8015304 <rmw_validate_node_name>
 8016d0c:	2800      	cmp	r0, #0
 8016d0e:	f040 808e 	bne.w	8016e2e <rcl_expand_topic_name+0x172>
 8016d12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016d14:	2a00      	cmp	r2, #0
 8016d16:	f040 8093 	bne.w	8016e40 <rcl_expand_topic_name+0x184>
 8016d1a:	a909      	add	r1, sp, #36	@ 0x24
 8016d1c:	4638      	mov	r0, r7
 8016d1e:	f7fe fad3 	bl	80152c8 <rmw_validate_namespace>
 8016d22:	2800      	cmp	r0, #0
 8016d24:	f040 8083 	bne.w	8016e2e <rcl_expand_topic_name+0x172>
 8016d28:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8016d2a:	2c00      	cmp	r4, #0
 8016d2c:	f040 80ed 	bne.w	8016f0a <rcl_expand_topic_name+0x24e>
 8016d30:	217b      	movs	r1, #123	@ 0x7b
 8016d32:	4640      	mov	r0, r8
 8016d34:	f000 ff58 	bl	8017be8 <strchr>
 8016d38:	f898 3000 	ldrb.w	r3, [r8]
 8016d3c:	2b2f      	cmp	r3, #47	@ 0x2f
 8016d3e:	4605      	mov	r5, r0
 8016d40:	f000 809e 	beq.w	8016e80 <rcl_expand_topic_name+0x1c4>
 8016d44:	2b7e      	cmp	r3, #126	@ 0x7e
 8016d46:	f040 80a2 	bne.w	8016e8e <rcl_expand_topic_name+0x1d2>
 8016d4a:	4638      	mov	r0, r7
 8016d4c:	f7e9 fa72 	bl	8000234 <strlen>
 8016d50:	4a82      	ldr	r2, [pc, #520]	@ (8016f5c <rcl_expand_topic_name+0x2a0>)
 8016d52:	4b83      	ldr	r3, [pc, #524]	@ (8016f60 <rcl_expand_topic_name+0x2a4>)
 8016d54:	2801      	cmp	r0, #1
 8016d56:	bf18      	it	ne
 8016d58:	4613      	movne	r3, r2
 8016d5a:	9302      	str	r3, [sp, #8]
 8016d5c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8016d5e:	9300      	str	r3, [sp, #0]
 8016d60:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8016d64:	f108 0301 	add.w	r3, r8, #1
 8016d68:	9305      	str	r3, [sp, #20]
 8016d6a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016d6e:	9301      	str	r3, [sp, #4]
 8016d70:	ab14      	add	r3, sp, #80	@ 0x50
 8016d72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016d74:	f7fd fea4 	bl	8014ac0 <rcutils_format_string_limit>
 8016d78:	4682      	mov	sl, r0
 8016d7a:	2800      	cmp	r0, #0
 8016d7c:	f000 80c7 	beq.w	8016f0e <rcl_expand_topic_name+0x252>
 8016d80:	2d00      	cmp	r5, #0
 8016d82:	f000 80a2 	beq.w	8016eca <rcl_expand_topic_name+0x20e>
 8016d86:	217b      	movs	r1, #123	@ 0x7b
 8016d88:	f000 ff2e 	bl	8017be8 <strchr>
 8016d8c:	46d1      	mov	r9, sl
 8016d8e:	4605      	mov	r5, r0
 8016d90:	9407      	str	r4, [sp, #28]
 8016d92:	46d3      	mov	fp, sl
 8016d94:	464c      	mov	r4, r9
 8016d96:	2d00      	cmp	r5, #0
 8016d98:	f000 80be 	beq.w	8016f18 <rcl_expand_topic_name+0x25c>
 8016d9c:	217d      	movs	r1, #125	@ 0x7d
 8016d9e:	4620      	mov	r0, r4
 8016da0:	f000 ff22 	bl	8017be8 <strchr>
 8016da4:	eba0 0905 	sub.w	r9, r0, r5
 8016da8:	f109 0a01 	add.w	sl, r9, #1
 8016dac:	486d      	ldr	r0, [pc, #436]	@ (8016f64 <rcl_expand_topic_name+0x2a8>)
 8016dae:	4652      	mov	r2, sl
 8016db0:	4629      	mov	r1, r5
 8016db2:	f000 ff26 	bl	8017c02 <strncmp>
 8016db6:	2800      	cmp	r0, #0
 8016db8:	d067      	beq.n	8016e8a <rcl_expand_topic_name+0x1ce>
 8016dba:	486b      	ldr	r0, [pc, #428]	@ (8016f68 <rcl_expand_topic_name+0x2ac>)
 8016dbc:	4652      	mov	r2, sl
 8016dbe:	4629      	mov	r1, r5
 8016dc0:	f000 ff1f 	bl	8017c02 <strncmp>
 8016dc4:	b130      	cbz	r0, 8016dd4 <rcl_expand_topic_name+0x118>
 8016dc6:	4869      	ldr	r0, [pc, #420]	@ (8016f6c <rcl_expand_topic_name+0x2b0>)
 8016dc8:	4652      	mov	r2, sl
 8016dca:	4629      	mov	r1, r5
 8016dcc:	f000 ff19 	bl	8017c02 <strncmp>
 8016dd0:	2800      	cmp	r0, #0
 8016dd2:	d137      	bne.n	8016e44 <rcl_expand_topic_name+0x188>
 8016dd4:	46b9      	mov	r9, r7
 8016dd6:	ab16      	add	r3, sp, #88	@ 0x58
 8016dd8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016ddc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016de0:	ab14      	add	r3, sp, #80	@ 0x50
 8016de2:	4628      	mov	r0, r5
 8016de4:	cb0c      	ldmia	r3, {r2, r3}
 8016de6:	4651      	mov	r1, sl
 8016de8:	f7fd ffa6 	bl	8014d38 <rcutils_strndup>
 8016dec:	4605      	mov	r5, r0
 8016dee:	2800      	cmp	r0, #0
 8016df0:	f000 809c 	beq.w	8016f2c <rcl_expand_topic_name+0x270>
 8016df4:	464a      	mov	r2, r9
 8016df6:	4620      	mov	r0, r4
 8016df8:	ab14      	add	r3, sp, #80	@ 0x50
 8016dfa:	4629      	mov	r1, r5
 8016dfc:	f7fd fe9a 	bl	8014b34 <rcutils_repl_str>
 8016e00:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016e02:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016e04:	4604      	mov	r4, r0
 8016e06:	4628      	mov	r0, r5
 8016e08:	4798      	blx	r3
 8016e0a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016e0c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016e0e:	4658      	mov	r0, fp
 8016e10:	4798      	blx	r3
 8016e12:	2c00      	cmp	r4, #0
 8016e14:	d07b      	beq.n	8016f0e <rcl_expand_topic_name+0x252>
 8016e16:	217b      	movs	r1, #123	@ 0x7b
 8016e18:	4620      	mov	r0, r4
 8016e1a:	f000 fee5 	bl	8017be8 <strchr>
 8016e1e:	46a3      	mov	fp, r4
 8016e20:	4605      	mov	r5, r0
 8016e22:	e7b8      	b.n	8016d96 <rcl_expand_topic_name+0xda>
 8016e24:	240b      	movs	r4, #11
 8016e26:	4620      	mov	r0, r4
 8016e28:	b00b      	add	sp, #44	@ 0x2c
 8016e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e2e:	f7fa ff71 	bl	8011d14 <rcl_convert_rmw_ret_to_rcl_ret>
 8016e32:	4604      	mov	r4, r0
 8016e34:	e7f7      	b.n	8016e26 <rcl_expand_topic_name+0x16a>
 8016e36:	2467      	movs	r4, #103	@ 0x67
 8016e38:	4620      	mov	r0, r4
 8016e3a:	b00b      	add	sp, #44	@ 0x2c
 8016e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e40:	24c9      	movs	r4, #201	@ 0xc9
 8016e42:	e7f0      	b.n	8016e26 <rcl_expand_topic_name+0x16a>
 8016e44:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8016e48:	9806      	ldr	r0, [sp, #24]
 8016e4a:	1c69      	adds	r1, r5, #1
 8016e4c:	f7fe f88e 	bl	8014f6c <rcutils_string_map_getn>
 8016e50:	4681      	mov	r9, r0
 8016e52:	2800      	cmp	r0, #0
 8016e54:	d1bf      	bne.n	8016dd6 <rcl_expand_topic_name+0x11a>
 8016e56:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016e58:	aa16      	add	r2, sp, #88	@ 0x58
 8016e5a:	6018      	str	r0, [r3, #0]
 8016e5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8016e5e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016e62:	ab14      	add	r3, sp, #80	@ 0x50
 8016e64:	cb0c      	ldmia	r3, {r2, r3}
 8016e66:	4651      	mov	r1, sl
 8016e68:	4628      	mov	r0, r5
 8016e6a:	f7fd ff65 	bl	8014d38 <rcutils_strndup>
 8016e6e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016e70:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016e72:	4798      	blx	r3
 8016e74:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016e76:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016e78:	4658      	mov	r0, fp
 8016e7a:	2469      	movs	r4, #105	@ 0x69
 8016e7c:	4798      	blx	r3
 8016e7e:	e7d2      	b.n	8016e26 <rcl_expand_topic_name+0x16a>
 8016e80:	2800      	cmp	r0, #0
 8016e82:	d05b      	beq.n	8016f3c <rcl_expand_topic_name+0x280>
 8016e84:	46c1      	mov	r9, r8
 8016e86:	46a2      	mov	sl, r4
 8016e88:	e782      	b.n	8016d90 <rcl_expand_topic_name+0xd4>
 8016e8a:	46b1      	mov	r9, r6
 8016e8c:	e7a3      	b.n	8016dd6 <rcl_expand_topic_name+0x11a>
 8016e8e:	2800      	cmp	r0, #0
 8016e90:	d1f8      	bne.n	8016e84 <rcl_expand_topic_name+0x1c8>
 8016e92:	4638      	mov	r0, r7
 8016e94:	f7e9 f9ce 	bl	8000234 <strlen>
 8016e98:	4a35      	ldr	r2, [pc, #212]	@ (8016f70 <rcl_expand_topic_name+0x2b4>)
 8016e9a:	4b36      	ldr	r3, [pc, #216]	@ (8016f74 <rcl_expand_topic_name+0x2b8>)
 8016e9c:	f8cd 8010 	str.w	r8, [sp, #16]
 8016ea0:	2801      	cmp	r0, #1
 8016ea2:	bf18      	it	ne
 8016ea4:	4613      	movne	r3, r2
 8016ea6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8016eaa:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8016eae:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016eb0:	9703      	str	r7, [sp, #12]
 8016eb2:	9200      	str	r2, [sp, #0]
 8016eb4:	ab14      	add	r3, sp, #80	@ 0x50
 8016eb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016eb8:	f7fd fe02 	bl	8014ac0 <rcutils_format_string_limit>
 8016ebc:	4682      	mov	sl, r0
 8016ebe:	4653      	mov	r3, sl
 8016ec0:	b32b      	cbz	r3, 8016f0e <rcl_expand_topic_name+0x252>
 8016ec2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016ec4:	f8c3 a000 	str.w	sl, [r3]
 8016ec8:	e7ad      	b.n	8016e26 <rcl_expand_topic_name+0x16a>
 8016eca:	f89a 3000 	ldrb.w	r3, [sl]
 8016ece:	2b2f      	cmp	r3, #47	@ 0x2f
 8016ed0:	d0f7      	beq.n	8016ec2 <rcl_expand_topic_name+0x206>
 8016ed2:	4638      	mov	r0, r7
 8016ed4:	f7e9 f9ae 	bl	8000234 <strlen>
 8016ed8:	4a25      	ldr	r2, [pc, #148]	@ (8016f70 <rcl_expand_topic_name+0x2b4>)
 8016eda:	4b26      	ldr	r3, [pc, #152]	@ (8016f74 <rcl_expand_topic_name+0x2b8>)
 8016edc:	f8cd a010 	str.w	sl, [sp, #16]
 8016ee0:	2801      	cmp	r0, #1
 8016ee2:	bf18      	it	ne
 8016ee4:	4613      	movne	r3, r2
 8016ee6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8016eea:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8016eee:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016ef0:	9703      	str	r7, [sp, #12]
 8016ef2:	9200      	str	r2, [sp, #0]
 8016ef4:	ab14      	add	r3, sp, #80	@ 0x50
 8016ef6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016ef8:	f7fd fde2 	bl	8014ac0 <rcutils_format_string_limit>
 8016efc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016efe:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016f00:	4605      	mov	r5, r0
 8016f02:	4650      	mov	r0, sl
 8016f04:	4798      	blx	r3
 8016f06:	46aa      	mov	sl, r5
 8016f08:	e7d9      	b.n	8016ebe <rcl_expand_topic_name+0x202>
 8016f0a:	24ca      	movs	r4, #202	@ 0xca
 8016f0c:	e78b      	b.n	8016e26 <rcl_expand_topic_name+0x16a>
 8016f0e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016f10:	2300      	movs	r3, #0
 8016f12:	6013      	str	r3, [r2, #0]
 8016f14:	240a      	movs	r4, #10
 8016f16:	e786      	b.n	8016e26 <rcl_expand_topic_name+0x16a>
 8016f18:	465b      	mov	r3, fp
 8016f1a:	9c07      	ldr	r4, [sp, #28]
 8016f1c:	46da      	mov	sl, fp
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d1d3      	bne.n	8016eca <rcl_expand_topic_name+0x20e>
 8016f22:	f898 3000 	ldrb.w	r3, [r8]
 8016f26:	2b2f      	cmp	r3, #47	@ 0x2f
 8016f28:	d0cb      	beq.n	8016ec2 <rcl_expand_topic_name+0x206>
 8016f2a:	e7b2      	b.n	8016e92 <rcl_expand_topic_name+0x1d6>
 8016f2c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8016f30:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016f32:	6015      	str	r5, [r2, #0]
 8016f34:	4658      	mov	r0, fp
 8016f36:	4798      	blx	r3
 8016f38:	240a      	movs	r4, #10
 8016f3a:	e774      	b.n	8016e26 <rcl_expand_topic_name+0x16a>
 8016f3c:	ab17      	add	r3, sp, #92	@ 0x5c
 8016f3e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016f42:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016f46:	ab14      	add	r3, sp, #80	@ 0x50
 8016f48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016f4a:	4640      	mov	r0, r8
 8016f4c:	f7fd fed2 	bl	8014cf4 <rcutils_strdup>
 8016f50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016f52:	2800      	cmp	r0, #0
 8016f54:	6018      	str	r0, [r3, #0]
 8016f56:	bf08      	it	eq
 8016f58:	240a      	moveq	r4, #10
 8016f5a:	e764      	b.n	8016e26 <rcl_expand_topic_name+0x16a>
 8016f5c:	0801979c 	.word	0x0801979c
 8016f60:	08018e54 	.word	0x08018e54
 8016f64:	080197a4 	.word	0x080197a4
 8016f68:	080197ac 	.word	0x080197ac
 8016f6c:	080197b4 	.word	0x080197b4
 8016f70:	08018e1c 	.word	0x08018e1c
 8016f74:	08018e64 	.word	0x08018e64

08016f78 <rcl_get_default_topic_name_substitutions>:
 8016f78:	2800      	cmp	r0, #0
 8016f7a:	bf0c      	ite	eq
 8016f7c:	200b      	moveq	r0, #11
 8016f7e:	2000      	movne	r0, #0
 8016f80:	4770      	bx	lr
 8016f82:	bf00      	nop

08016f84 <rcl_get_zero_initialized_guard_condition>:
 8016f84:	4a03      	ldr	r2, [pc, #12]	@ (8016f94 <rcl_get_zero_initialized_guard_condition+0x10>)
 8016f86:	4603      	mov	r3, r0
 8016f88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016f8c:	e883 0003 	stmia.w	r3, {r0, r1}
 8016f90:	4618      	mov	r0, r3
 8016f92:	4770      	bx	lr
 8016f94:	080197c0 	.word	0x080197c0

08016f98 <rcl_guard_condition_init>:
 8016f98:	b082      	sub	sp, #8
 8016f9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f9c:	b087      	sub	sp, #28
 8016f9e:	ac0c      	add	r4, sp, #48	@ 0x30
 8016fa0:	e884 000c 	stmia.w	r4, {r2, r3}
 8016fa4:	46a6      	mov	lr, r4
 8016fa6:	460d      	mov	r5, r1
 8016fa8:	4604      	mov	r4, r0
 8016faa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016fae:	f10d 0c04 	add.w	ip, sp, #4
 8016fb2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016fb6:	f8de 3000 	ldr.w	r3, [lr]
 8016fba:	f8cc 3000 	str.w	r3, [ip]
 8016fbe:	a801      	add	r0, sp, #4
 8016fc0:	f7f4 fd78 	bl	800bab4 <rcutils_allocator_is_valid>
 8016fc4:	b338      	cbz	r0, 8017016 <rcl_guard_condition_init+0x7e>
 8016fc6:	b334      	cbz	r4, 8017016 <rcl_guard_condition_init+0x7e>
 8016fc8:	6866      	ldr	r6, [r4, #4]
 8016fca:	b9ee      	cbnz	r6, 8017008 <rcl_guard_condition_init+0x70>
 8016fcc:	b31d      	cbz	r5, 8017016 <rcl_guard_condition_init+0x7e>
 8016fce:	4628      	mov	r0, r5
 8016fd0:	f7fa febe 	bl	8011d50 <rcl_context_is_valid>
 8016fd4:	b308      	cbz	r0, 801701a <rcl_guard_condition_init+0x82>
 8016fd6:	9b01      	ldr	r3, [sp, #4]
 8016fd8:	9905      	ldr	r1, [sp, #20]
 8016fda:	201c      	movs	r0, #28
 8016fdc:	4798      	blx	r3
 8016fde:	4607      	mov	r7, r0
 8016fe0:	6060      	str	r0, [r4, #4]
 8016fe2:	b310      	cbz	r0, 801702a <rcl_guard_condition_init+0x92>
 8016fe4:	6828      	ldr	r0, [r5, #0]
 8016fe6:	3028      	adds	r0, #40	@ 0x28
 8016fe8:	f000 f9d4 	bl	8017394 <rmw_create_guard_condition>
 8016fec:	6038      	str	r0, [r7, #0]
 8016fee:	6860      	ldr	r0, [r4, #4]
 8016ff0:	6805      	ldr	r5, [r0, #0]
 8016ff2:	b1a5      	cbz	r5, 801701e <rcl_guard_condition_init+0x86>
 8016ff4:	2301      	movs	r3, #1
 8016ff6:	ac01      	add	r4, sp, #4
 8016ff8:	7103      	strb	r3, [r0, #4]
 8016ffa:	f100 0708 	add.w	r7, r0, #8
 8016ffe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017000:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8017002:	6823      	ldr	r3, [r4, #0]
 8017004:	603b      	str	r3, [r7, #0]
 8017006:	e000      	b.n	801700a <rcl_guard_condition_init+0x72>
 8017008:	2664      	movs	r6, #100	@ 0x64
 801700a:	4630      	mov	r0, r6
 801700c:	b007      	add	sp, #28
 801700e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017012:	b002      	add	sp, #8
 8017014:	4770      	bx	lr
 8017016:	260b      	movs	r6, #11
 8017018:	e7f7      	b.n	801700a <rcl_guard_condition_init+0x72>
 801701a:	2665      	movs	r6, #101	@ 0x65
 801701c:	e7f5      	b.n	801700a <rcl_guard_condition_init+0x72>
 801701e:	9b02      	ldr	r3, [sp, #8]
 8017020:	9905      	ldr	r1, [sp, #20]
 8017022:	4798      	blx	r3
 8017024:	2601      	movs	r6, #1
 8017026:	6065      	str	r5, [r4, #4]
 8017028:	e7ef      	b.n	801700a <rcl_guard_condition_init+0x72>
 801702a:	260a      	movs	r6, #10
 801702c:	e7ed      	b.n	801700a <rcl_guard_condition_init+0x72>
 801702e:	bf00      	nop

08017030 <rcl_guard_condition_init_from_rmw>:
 8017030:	b082      	sub	sp, #8
 8017032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017036:	b086      	sub	sp, #24
 8017038:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801703c:	4604      	mov	r4, r0
 801703e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8017042:	460e      	mov	r6, r1
 8017044:	4617      	mov	r7, r2
 8017046:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801704a:	f10d 0e04 	add.w	lr, sp, #4
 801704e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017052:	f8dc 3000 	ldr.w	r3, [ip]
 8017056:	f8ce 3000 	str.w	r3, [lr]
 801705a:	a801      	add	r0, sp, #4
 801705c:	f7f4 fd2a 	bl	800bab4 <rcutils_allocator_is_valid>
 8017060:	b350      	cbz	r0, 80170b8 <rcl_guard_condition_init_from_rmw+0x88>
 8017062:	b34c      	cbz	r4, 80170b8 <rcl_guard_condition_init_from_rmw+0x88>
 8017064:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8017068:	f1b8 0f00 	cmp.w	r8, #0
 801706c:	d11e      	bne.n	80170ac <rcl_guard_condition_init_from_rmw+0x7c>
 801706e:	b31f      	cbz	r7, 80170b8 <rcl_guard_condition_init_from_rmw+0x88>
 8017070:	4638      	mov	r0, r7
 8017072:	f7fa fe6d 	bl	8011d50 <rcl_context_is_valid>
 8017076:	b328      	cbz	r0, 80170c4 <rcl_guard_condition_init_from_rmw+0x94>
 8017078:	9b01      	ldr	r3, [sp, #4]
 801707a:	9905      	ldr	r1, [sp, #20]
 801707c:	201c      	movs	r0, #28
 801707e:	4798      	blx	r3
 8017080:	4605      	mov	r5, r0
 8017082:	6060      	str	r0, [r4, #4]
 8017084:	b358      	cbz	r0, 80170de <rcl_guard_condition_init_from_rmw+0xae>
 8017086:	b1fe      	cbz	r6, 80170c8 <rcl_guard_condition_init_from_rmw+0x98>
 8017088:	6006      	str	r6, [r0, #0]
 801708a:	f880 8004 	strb.w	r8, [r0, #4]
 801708e:	ac01      	add	r4, sp, #4
 8017090:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017092:	f105 0c08 	add.w	ip, r5, #8
 8017096:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801709a:	6823      	ldr	r3, [r4, #0]
 801709c:	f8cc 3000 	str.w	r3, [ip]
 80170a0:	2000      	movs	r0, #0
 80170a2:	b006      	add	sp, #24
 80170a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80170a8:	b002      	add	sp, #8
 80170aa:	4770      	bx	lr
 80170ac:	2064      	movs	r0, #100	@ 0x64
 80170ae:	b006      	add	sp, #24
 80170b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80170b4:	b002      	add	sp, #8
 80170b6:	4770      	bx	lr
 80170b8:	200b      	movs	r0, #11
 80170ba:	b006      	add	sp, #24
 80170bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80170c0:	b002      	add	sp, #8
 80170c2:	4770      	bx	lr
 80170c4:	2065      	movs	r0, #101	@ 0x65
 80170c6:	e7f2      	b.n	80170ae <rcl_guard_condition_init_from_rmw+0x7e>
 80170c8:	6838      	ldr	r0, [r7, #0]
 80170ca:	3028      	adds	r0, #40	@ 0x28
 80170cc:	f000 f962 	bl	8017394 <rmw_create_guard_condition>
 80170d0:	6028      	str	r0, [r5, #0]
 80170d2:	6865      	ldr	r5, [r4, #4]
 80170d4:	682e      	ldr	r6, [r5, #0]
 80170d6:	b126      	cbz	r6, 80170e2 <rcl_guard_condition_init_from_rmw+0xb2>
 80170d8:	2301      	movs	r3, #1
 80170da:	712b      	strb	r3, [r5, #4]
 80170dc:	e7d7      	b.n	801708e <rcl_guard_condition_init_from_rmw+0x5e>
 80170de:	200a      	movs	r0, #10
 80170e0:	e7e5      	b.n	80170ae <rcl_guard_condition_init_from_rmw+0x7e>
 80170e2:	4628      	mov	r0, r5
 80170e4:	9b02      	ldr	r3, [sp, #8]
 80170e6:	9905      	ldr	r1, [sp, #20]
 80170e8:	4798      	blx	r3
 80170ea:	6066      	str	r6, [r4, #4]
 80170ec:	2001      	movs	r0, #1
 80170ee:	e7de      	b.n	80170ae <rcl_guard_condition_init_from_rmw+0x7e>

080170f0 <rcl_guard_condition_fini>:
 80170f0:	b570      	push	{r4, r5, r6, lr}
 80170f2:	b082      	sub	sp, #8
 80170f4:	b1f0      	cbz	r0, 8017134 <rcl_guard_condition_fini+0x44>
 80170f6:	6843      	ldr	r3, [r0, #4]
 80170f8:	4604      	mov	r4, r0
 80170fa:	b163      	cbz	r3, 8017116 <rcl_guard_condition_fini+0x26>
 80170fc:	6818      	ldr	r0, [r3, #0]
 80170fe:	68de      	ldr	r6, [r3, #12]
 8017100:	6999      	ldr	r1, [r3, #24]
 8017102:	b160      	cbz	r0, 801711e <rcl_guard_condition_fini+0x2e>
 8017104:	791d      	ldrb	r5, [r3, #4]
 8017106:	b965      	cbnz	r5, 8017122 <rcl_guard_condition_fini+0x32>
 8017108:	4618      	mov	r0, r3
 801710a:	47b0      	blx	r6
 801710c:	2300      	movs	r3, #0
 801710e:	4628      	mov	r0, r5
 8017110:	6063      	str	r3, [r4, #4]
 8017112:	b002      	add	sp, #8
 8017114:	bd70      	pop	{r4, r5, r6, pc}
 8017116:	461d      	mov	r5, r3
 8017118:	4628      	mov	r0, r5
 801711a:	b002      	add	sp, #8
 801711c:	bd70      	pop	{r4, r5, r6, pc}
 801711e:	4605      	mov	r5, r0
 8017120:	e7f2      	b.n	8017108 <rcl_guard_condition_fini+0x18>
 8017122:	9101      	str	r1, [sp, #4]
 8017124:	f000 f94a 	bl	80173bc <rmw_destroy_guard_condition>
 8017128:	1e05      	subs	r5, r0, #0
 801712a:	6863      	ldr	r3, [r4, #4]
 801712c:	9901      	ldr	r1, [sp, #4]
 801712e:	bf18      	it	ne
 8017130:	2501      	movne	r5, #1
 8017132:	e7e9      	b.n	8017108 <rcl_guard_condition_fini+0x18>
 8017134:	250b      	movs	r5, #11
 8017136:	4628      	mov	r0, r5
 8017138:	b002      	add	sp, #8
 801713a:	bd70      	pop	{r4, r5, r6, pc}

0801713c <rcl_guard_condition_get_default_options>:
 801713c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801713e:	b087      	sub	sp, #28
 8017140:	4606      	mov	r6, r0
 8017142:	4668      	mov	r0, sp
 8017144:	f7f4 fca8 	bl	800ba98 <rcutils_get_default_allocator>
 8017148:	4b09      	ldr	r3, [pc, #36]	@ (8017170 <rcl_guard_condition_get_default_options+0x34>)
 801714a:	46ee      	mov	lr, sp
 801714c:	469c      	mov	ip, r3
 801714e:	461d      	mov	r5, r3
 8017150:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017154:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017158:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801715a:	4634      	mov	r4, r6
 801715c:	f8de 7000 	ldr.w	r7, [lr]
 8017160:	f8cc 7000 	str.w	r7, [ip]
 8017164:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017166:	4630      	mov	r0, r6
 8017168:	6027      	str	r7, [r4, #0]
 801716a:	b007      	add	sp, #28
 801716c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801716e:	bf00      	nop
 8017170:	2000ad24 	.word	0x2000ad24

08017174 <rcl_trigger_guard_condition>:
 8017174:	b148      	cbz	r0, 801718a <rcl_trigger_guard_condition+0x16>
 8017176:	b508      	push	{r3, lr}
 8017178:	6843      	ldr	r3, [r0, #4]
 801717a:	b143      	cbz	r3, 801718e <rcl_trigger_guard_condition+0x1a>
 801717c:	6818      	ldr	r0, [r3, #0]
 801717e:	f000 f931 	bl	80173e4 <rmw_trigger_guard_condition>
 8017182:	3800      	subs	r0, #0
 8017184:	bf18      	it	ne
 8017186:	2001      	movne	r0, #1
 8017188:	bd08      	pop	{r3, pc}
 801718a:	200b      	movs	r0, #11
 801718c:	4770      	bx	lr
 801718e:	200b      	movs	r0, #11
 8017190:	bd08      	pop	{r3, pc}
 8017192:	bf00      	nop

08017194 <rcl_guard_condition_get_rmw_handle>:
 8017194:	b110      	cbz	r0, 801719c <rcl_guard_condition_get_rmw_handle+0x8>
 8017196:	6840      	ldr	r0, [r0, #4]
 8017198:	b100      	cbz	r0, 801719c <rcl_guard_condition_get_rmw_handle+0x8>
 801719a:	6800      	ldr	r0, [r0, #0]
 801719c:	4770      	bx	lr
 801719e:	bf00      	nop

080171a0 <rcl_validate_topic_name>:
 80171a0:	2800      	cmp	r0, #0
 80171a2:	d07a      	beq.n	801729a <rcl_validate_topic_name+0xfa>
 80171a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80171a8:	460e      	mov	r6, r1
 80171aa:	2900      	cmp	r1, #0
 80171ac:	d07c      	beq.n	80172a8 <rcl_validate_topic_name+0x108>
 80171ae:	4617      	mov	r7, r2
 80171b0:	4605      	mov	r5, r0
 80171b2:	f7e9 f83f 	bl	8000234 <strlen>
 80171b6:	b1b0      	cbz	r0, 80171e6 <rcl_validate_topic_name+0x46>
 80171b8:	f895 9000 	ldrb.w	r9, [r5]
 80171bc:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8017340 <rcl_validate_topic_name+0x1a0>
 80171c0:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80171c4:	f013 0304 	ands.w	r3, r3, #4
 80171c8:	d169      	bne.n	801729e <rcl_validate_topic_name+0xfe>
 80171ca:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80171ce:	f815 2008 	ldrb.w	r2, [r5, r8]
 80171d2:	2a2f      	cmp	r2, #47	@ 0x2f
 80171d4:	d10e      	bne.n	80171f4 <rcl_validate_topic_name+0x54>
 80171d6:	2202      	movs	r2, #2
 80171d8:	6032      	str	r2, [r6, #0]
 80171da:	b36f      	cbz	r7, 8017238 <rcl_validate_topic_name+0x98>
 80171dc:	f8c7 8000 	str.w	r8, [r7]
 80171e0:	4618      	mov	r0, r3
 80171e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171e6:	2301      	movs	r3, #1
 80171e8:	6033      	str	r3, [r6, #0]
 80171ea:	b32f      	cbz	r7, 8017238 <rcl_validate_topic_name+0x98>
 80171ec:	2000      	movs	r0, #0
 80171ee:	6038      	str	r0, [r7, #0]
 80171f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171f4:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 80171f8:	461c      	mov	r4, r3
 80171fa:	4619      	mov	r1, r3
 80171fc:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8017200:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8017204:	f1be 0f09 	cmp.w	lr, #9
 8017208:	d919      	bls.n	801723e <rcl_validate_topic_name+0x9e>
 801720a:	f022 0e20 	bic.w	lr, r2, #32
 801720e:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8017212:	f1be 0f19 	cmp.w	lr, #25
 8017216:	d912      	bls.n	801723e <rcl_validate_topic_name+0x9e>
 8017218:	2a5f      	cmp	r2, #95	@ 0x5f
 801721a:	d019      	beq.n	8017250 <rcl_validate_topic_name+0xb0>
 801721c:	2a2f      	cmp	r2, #47	@ 0x2f
 801721e:	d051      	beq.n	80172c4 <rcl_validate_topic_name+0x124>
 8017220:	2a7e      	cmp	r2, #126	@ 0x7e
 8017222:	d048      	beq.n	80172b6 <rcl_validate_topic_name+0x116>
 8017224:	2a7b      	cmp	r2, #123	@ 0x7b
 8017226:	d054      	beq.n	80172d2 <rcl_validate_topic_name+0x132>
 8017228:	2a7d      	cmp	r2, #125	@ 0x7d
 801722a:	d161      	bne.n	80172f0 <rcl_validate_topic_name+0x150>
 801722c:	2c00      	cmp	r4, #0
 801722e:	d155      	bne.n	80172dc <rcl_validate_topic_name+0x13c>
 8017230:	2305      	movs	r3, #5
 8017232:	6033      	str	r3, [r6, #0]
 8017234:	b107      	cbz	r7, 8017238 <rcl_validate_topic_name+0x98>
 8017236:	6039      	str	r1, [r7, #0]
 8017238:	2000      	movs	r0, #0
 801723a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801723e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017242:	0752      	lsls	r2, r2, #29
 8017244:	d504      	bpl.n	8017250 <rcl_validate_topic_name+0xb0>
 8017246:	b11c      	cbz	r4, 8017250 <rcl_validate_topic_name+0xb0>
 8017248:	b111      	cbz	r1, 8017250 <rcl_validate_topic_name+0xb0>
 801724a:	1e4a      	subs	r2, r1, #1
 801724c:	429a      	cmp	r2, r3
 801724e:	d02d      	beq.n	80172ac <rcl_validate_topic_name+0x10c>
 8017250:	3101      	adds	r1, #1
 8017252:	4288      	cmp	r0, r1
 8017254:	d1d2      	bne.n	80171fc <rcl_validate_topic_name+0x5c>
 8017256:	2c00      	cmp	r4, #0
 8017258:	d145      	bne.n	80172e6 <rcl_validate_topic_name+0x146>
 801725a:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801725e:	d04f      	beq.n	8017300 <rcl_validate_topic_name+0x160>
 8017260:	4620      	mov	r0, r4
 8017262:	2301      	movs	r3, #1
 8017264:	e006      	b.n	8017274 <rcl_validate_topic_name+0xd4>
 8017266:	428b      	cmp	r3, r1
 8017268:	f105 0501 	add.w	r5, r5, #1
 801726c:	f103 0201 	add.w	r2, r3, #1
 8017270:	d236      	bcs.n	80172e0 <rcl_validate_topic_name+0x140>
 8017272:	4613      	mov	r3, r2
 8017274:	4580      	cmp	r8, r0
 8017276:	f100 0001 	add.w	r0, r0, #1
 801727a:	d0f4      	beq.n	8017266 <rcl_validate_topic_name+0xc6>
 801727c:	782a      	ldrb	r2, [r5, #0]
 801727e:	2a2f      	cmp	r2, #47	@ 0x2f
 8017280:	d1f1      	bne.n	8017266 <rcl_validate_topic_name+0xc6>
 8017282:	786a      	ldrb	r2, [r5, #1]
 8017284:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017288:	0754      	lsls	r4, r2, #29
 801728a:	d5ec      	bpl.n	8017266 <rcl_validate_topic_name+0xc6>
 801728c:	2204      	movs	r2, #4
 801728e:	6032      	str	r2, [r6, #0]
 8017290:	2f00      	cmp	r7, #0
 8017292:	d0d1      	beq.n	8017238 <rcl_validate_topic_name+0x98>
 8017294:	603b      	str	r3, [r7, #0]
 8017296:	2000      	movs	r0, #0
 8017298:	e7aa      	b.n	80171f0 <rcl_validate_topic_name+0x50>
 801729a:	200b      	movs	r0, #11
 801729c:	4770      	bx	lr
 801729e:	2304      	movs	r3, #4
 80172a0:	6033      	str	r3, [r6, #0]
 80172a2:	2f00      	cmp	r7, #0
 80172a4:	d1a2      	bne.n	80171ec <rcl_validate_topic_name+0x4c>
 80172a6:	e7c7      	b.n	8017238 <rcl_validate_topic_name+0x98>
 80172a8:	200b      	movs	r0, #11
 80172aa:	e7a1      	b.n	80171f0 <rcl_validate_topic_name+0x50>
 80172ac:	2309      	movs	r3, #9
 80172ae:	6033      	str	r3, [r6, #0]
 80172b0:	2f00      	cmp	r7, #0
 80172b2:	d1c0      	bne.n	8017236 <rcl_validate_topic_name+0x96>
 80172b4:	e7c0      	b.n	8017238 <rcl_validate_topic_name+0x98>
 80172b6:	2900      	cmp	r1, #0
 80172b8:	d0ca      	beq.n	8017250 <rcl_validate_topic_name+0xb0>
 80172ba:	2306      	movs	r3, #6
 80172bc:	6033      	str	r3, [r6, #0]
 80172be:	2f00      	cmp	r7, #0
 80172c0:	d1b9      	bne.n	8017236 <rcl_validate_topic_name+0x96>
 80172c2:	e7b9      	b.n	8017238 <rcl_validate_topic_name+0x98>
 80172c4:	2c00      	cmp	r4, #0
 80172c6:	d0c3      	beq.n	8017250 <rcl_validate_topic_name+0xb0>
 80172c8:	2308      	movs	r3, #8
 80172ca:	6033      	str	r3, [r6, #0]
 80172cc:	2f00      	cmp	r7, #0
 80172ce:	d1b2      	bne.n	8017236 <rcl_validate_topic_name+0x96>
 80172d0:	e7b2      	b.n	8017238 <rcl_validate_topic_name+0x98>
 80172d2:	2c00      	cmp	r4, #0
 80172d4:	d1f8      	bne.n	80172c8 <rcl_validate_topic_name+0x128>
 80172d6:	460b      	mov	r3, r1
 80172d8:	2401      	movs	r4, #1
 80172da:	e7b9      	b.n	8017250 <rcl_validate_topic_name+0xb0>
 80172dc:	2400      	movs	r4, #0
 80172de:	e7b7      	b.n	8017250 <rcl_validate_topic_name+0xb0>
 80172e0:	2000      	movs	r0, #0
 80172e2:	6030      	str	r0, [r6, #0]
 80172e4:	e784      	b.n	80171f0 <rcl_validate_topic_name+0x50>
 80172e6:	2205      	movs	r2, #5
 80172e8:	6032      	str	r2, [r6, #0]
 80172ea:	2f00      	cmp	r7, #0
 80172ec:	d1d2      	bne.n	8017294 <rcl_validate_topic_name+0xf4>
 80172ee:	e7a3      	b.n	8017238 <rcl_validate_topic_name+0x98>
 80172f0:	2c00      	cmp	r4, #0
 80172f2:	bf14      	ite	ne
 80172f4:	2308      	movne	r3, #8
 80172f6:	2303      	moveq	r3, #3
 80172f8:	6033      	str	r3, [r6, #0]
 80172fa:	2f00      	cmp	r7, #0
 80172fc:	d19b      	bne.n	8017236 <rcl_validate_topic_name+0x96>
 80172fe:	e79b      	b.n	8017238 <rcl_validate_topic_name+0x98>
 8017300:	2301      	movs	r3, #1
 8017302:	e00a      	b.n	801731a <rcl_validate_topic_name+0x17a>
 8017304:	2c01      	cmp	r4, #1
 8017306:	d013      	beq.n	8017330 <rcl_validate_topic_name+0x190>
 8017308:	4299      	cmp	r1, r3
 801730a:	f104 0401 	add.w	r4, r4, #1
 801730e:	f105 0501 	add.w	r5, r5, #1
 8017312:	f103 0201 	add.w	r2, r3, #1
 8017316:	d9e3      	bls.n	80172e0 <rcl_validate_topic_name+0x140>
 8017318:	4613      	mov	r3, r2
 801731a:	45a0      	cmp	r8, r4
 801731c:	d0f4      	beq.n	8017308 <rcl_validate_topic_name+0x168>
 801731e:	782a      	ldrb	r2, [r5, #0]
 8017320:	2a2f      	cmp	r2, #47	@ 0x2f
 8017322:	d1ef      	bne.n	8017304 <rcl_validate_topic_name+0x164>
 8017324:	786a      	ldrb	r2, [r5, #1]
 8017326:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801732a:	0752      	lsls	r2, r2, #29
 801732c:	d5ec      	bpl.n	8017308 <rcl_validate_topic_name+0x168>
 801732e:	e7ad      	b.n	801728c <rcl_validate_topic_name+0xec>
 8017330:	2307      	movs	r3, #7
 8017332:	6033      	str	r3, [r6, #0]
 8017334:	2f00      	cmp	r7, #0
 8017336:	f43f af7f 	beq.w	8017238 <rcl_validate_topic_name+0x98>
 801733a:	603c      	str	r4, [r7, #0]
 801733c:	2000      	movs	r0, #0
 801733e:	e757      	b.n	80171f0 <rcl_validate_topic_name+0x50>
 8017340:	08019838 	.word	0x08019838

08017344 <rcutils_string_array_fini>:
 8017344:	b320      	cbz	r0, 8017390 <rcutils_string_array_fini+0x4c>
 8017346:	b570      	push	{r4, r5, r6, lr}
 8017348:	4604      	mov	r4, r0
 801734a:	6840      	ldr	r0, [r0, #4]
 801734c:	b1d8      	cbz	r0, 8017386 <rcutils_string_array_fini+0x42>
 801734e:	f104 0008 	add.w	r0, r4, #8
 8017352:	f7f4 fbaf 	bl	800bab4 <rcutils_allocator_is_valid>
 8017356:	b1b8      	cbz	r0, 8017388 <rcutils_string_array_fini+0x44>
 8017358:	6823      	ldr	r3, [r4, #0]
 801735a:	b1bb      	cbz	r3, 801738c <rcutils_string_array_fini+0x48>
 801735c:	2500      	movs	r5, #0
 801735e:	6860      	ldr	r0, [r4, #4]
 8017360:	462e      	mov	r6, r5
 8017362:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8017366:	68e3      	ldr	r3, [r4, #12]
 8017368:	69a1      	ldr	r1, [r4, #24]
 801736a:	4798      	blx	r3
 801736c:	e9d4 3000 	ldrd	r3, r0, [r4]
 8017370:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8017374:	3501      	adds	r5, #1
 8017376:	429d      	cmp	r5, r3
 8017378:	d3f3      	bcc.n	8017362 <rcutils_string_array_fini+0x1e>
 801737a:	68e3      	ldr	r3, [r4, #12]
 801737c:	69a1      	ldr	r1, [r4, #24]
 801737e:	4798      	blx	r3
 8017380:	2000      	movs	r0, #0
 8017382:	e9c4 0000 	strd	r0, r0, [r4]
 8017386:	bd70      	pop	{r4, r5, r6, pc}
 8017388:	200b      	movs	r0, #11
 801738a:	bd70      	pop	{r4, r5, r6, pc}
 801738c:	6860      	ldr	r0, [r4, #4]
 801738e:	e7f4      	b.n	801737a <rcutils_string_array_fini+0x36>
 8017390:	200b      	movs	r0, #11
 8017392:	4770      	bx	lr

08017394 <rmw_create_guard_condition>:
 8017394:	b538      	push	{r3, r4, r5, lr}
 8017396:	4605      	mov	r5, r0
 8017398:	4807      	ldr	r0, [pc, #28]	@ (80173b8 <rmw_create_guard_condition+0x24>)
 801739a:	f7fe f8f9 	bl	8015590 <get_memory>
 801739e:	b148      	cbz	r0, 80173b4 <rmw_create_guard_condition+0x20>
 80173a0:	6884      	ldr	r4, [r0, #8]
 80173a2:	2300      	movs	r3, #0
 80173a4:	7423      	strb	r3, [r4, #16]
 80173a6:	61e5      	str	r5, [r4, #28]
 80173a8:	f7fe f95a 	bl	8015660 <rmw_get_implementation_identifier>
 80173ac:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80173b0:	f104 0014 	add.w	r0, r4, #20
 80173b4:	bd38      	pop	{r3, r4, r5, pc}
 80173b6:	bf00      	nop
 80173b8:	2000ab4c 	.word	0x2000ab4c

080173bc <rmw_destroy_guard_condition>:
 80173bc:	b508      	push	{r3, lr}
 80173be:	4b08      	ldr	r3, [pc, #32]	@ (80173e0 <rmw_destroy_guard_condition+0x24>)
 80173c0:	6819      	ldr	r1, [r3, #0]
 80173c2:	b911      	cbnz	r1, 80173ca <rmw_destroy_guard_condition+0xe>
 80173c4:	e00a      	b.n	80173dc <rmw_destroy_guard_condition+0x20>
 80173c6:	6849      	ldr	r1, [r1, #4]
 80173c8:	b141      	cbz	r1, 80173dc <rmw_destroy_guard_condition+0x20>
 80173ca:	688b      	ldr	r3, [r1, #8]
 80173cc:	3314      	adds	r3, #20
 80173ce:	4298      	cmp	r0, r3
 80173d0:	d1f9      	bne.n	80173c6 <rmw_destroy_guard_condition+0xa>
 80173d2:	4803      	ldr	r0, [pc, #12]	@ (80173e0 <rmw_destroy_guard_condition+0x24>)
 80173d4:	f7fe f8ec 	bl	80155b0 <put_memory>
 80173d8:	2000      	movs	r0, #0
 80173da:	bd08      	pop	{r3, pc}
 80173dc:	2001      	movs	r0, #1
 80173de:	bd08      	pop	{r3, pc}
 80173e0:	2000ab4c 	.word	0x2000ab4c

080173e4 <rmw_trigger_guard_condition>:
 80173e4:	b160      	cbz	r0, 8017400 <rmw_trigger_guard_condition+0x1c>
 80173e6:	b510      	push	{r4, lr}
 80173e8:	4604      	mov	r4, r0
 80173ea:	6800      	ldr	r0, [r0, #0]
 80173ec:	f7f5 fe3e 	bl	800d06c <is_uxrce_rmw_identifier_valid>
 80173f0:	b908      	cbnz	r0, 80173f6 <rmw_trigger_guard_condition+0x12>
 80173f2:	2001      	movs	r0, #1
 80173f4:	bd10      	pop	{r4, pc}
 80173f6:	6863      	ldr	r3, [r4, #4]
 80173f8:	2201      	movs	r2, #1
 80173fa:	741a      	strb	r2, [r3, #16]
 80173fc:	2000      	movs	r0, #0
 80173fe:	bd10      	pop	{r4, pc}
 8017400:	2001      	movs	r0, #1
 8017402:	4770      	bx	lr

08017404 <calloc>:
 8017404:	4b02      	ldr	r3, [pc, #8]	@ (8017410 <calloc+0xc>)
 8017406:	460a      	mov	r2, r1
 8017408:	4601      	mov	r1, r0
 801740a:	6818      	ldr	r0, [r3, #0]
 801740c:	f000 b802 	b.w	8017414 <_calloc_r>
 8017410:	200000c0 	.word	0x200000c0

08017414 <_calloc_r>:
 8017414:	b570      	push	{r4, r5, r6, lr}
 8017416:	fba1 5402 	umull	r5, r4, r1, r2
 801741a:	b93c      	cbnz	r4, 801742c <_calloc_r+0x18>
 801741c:	4629      	mov	r1, r5
 801741e:	f000 f887 	bl	8017530 <_malloc_r>
 8017422:	4606      	mov	r6, r0
 8017424:	b928      	cbnz	r0, 8017432 <_calloc_r+0x1e>
 8017426:	2600      	movs	r6, #0
 8017428:	4630      	mov	r0, r6
 801742a:	bd70      	pop	{r4, r5, r6, pc}
 801742c:	220c      	movs	r2, #12
 801742e:	6002      	str	r2, [r0, #0]
 8017430:	e7f9      	b.n	8017426 <_calloc_r+0x12>
 8017432:	462a      	mov	r2, r5
 8017434:	4621      	mov	r1, r4
 8017436:	f000 fbcf 	bl	8017bd8 <memset>
 801743a:	e7f5      	b.n	8017428 <_calloc_r+0x14>

0801743c <getenv>:
 801743c:	b507      	push	{r0, r1, r2, lr}
 801743e:	4b04      	ldr	r3, [pc, #16]	@ (8017450 <getenv+0x14>)
 8017440:	4601      	mov	r1, r0
 8017442:	aa01      	add	r2, sp, #4
 8017444:	6818      	ldr	r0, [r3, #0]
 8017446:	f000 f805 	bl	8017454 <_findenv_r>
 801744a:	b003      	add	sp, #12
 801744c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017450:	200000c0 	.word	0x200000c0

08017454 <_findenv_r>:
 8017454:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017458:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80174c8 <_findenv_r+0x74>
 801745c:	4606      	mov	r6, r0
 801745e:	4689      	mov	r9, r1
 8017460:	4617      	mov	r7, r2
 8017462:	f000 fcaf 	bl	8017dc4 <__env_lock>
 8017466:	f8da 4000 	ldr.w	r4, [sl]
 801746a:	b134      	cbz	r4, 801747a <_findenv_r+0x26>
 801746c:	464b      	mov	r3, r9
 801746e:	4698      	mov	r8, r3
 8017470:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017474:	b13a      	cbz	r2, 8017486 <_findenv_r+0x32>
 8017476:	2a3d      	cmp	r2, #61	@ 0x3d
 8017478:	d1f9      	bne.n	801746e <_findenv_r+0x1a>
 801747a:	4630      	mov	r0, r6
 801747c:	f000 fca8 	bl	8017dd0 <__env_unlock>
 8017480:	2000      	movs	r0, #0
 8017482:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017486:	eba8 0809 	sub.w	r8, r8, r9
 801748a:	46a3      	mov	fp, r4
 801748c:	f854 0b04 	ldr.w	r0, [r4], #4
 8017490:	2800      	cmp	r0, #0
 8017492:	d0f2      	beq.n	801747a <_findenv_r+0x26>
 8017494:	4642      	mov	r2, r8
 8017496:	4649      	mov	r1, r9
 8017498:	f000 fbb3 	bl	8017c02 <strncmp>
 801749c:	2800      	cmp	r0, #0
 801749e:	d1f4      	bne.n	801748a <_findenv_r+0x36>
 80174a0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80174a4:	eb03 0508 	add.w	r5, r3, r8
 80174a8:	f813 3008 	ldrb.w	r3, [r3, r8]
 80174ac:	2b3d      	cmp	r3, #61	@ 0x3d
 80174ae:	d1ec      	bne.n	801748a <_findenv_r+0x36>
 80174b0:	f8da 3000 	ldr.w	r3, [sl]
 80174b4:	ebab 0303 	sub.w	r3, fp, r3
 80174b8:	109b      	asrs	r3, r3, #2
 80174ba:	4630      	mov	r0, r6
 80174bc:	603b      	str	r3, [r7, #0]
 80174be:	f000 fc87 	bl	8017dd0 <__env_unlock>
 80174c2:	1c68      	adds	r0, r5, #1
 80174c4:	e7dd      	b.n	8017482 <_findenv_r+0x2e>
 80174c6:	bf00      	nop
 80174c8:	20000000 	.word	0x20000000

080174cc <malloc>:
 80174cc:	4b02      	ldr	r3, [pc, #8]	@ (80174d8 <malloc+0xc>)
 80174ce:	4601      	mov	r1, r0
 80174d0:	6818      	ldr	r0, [r3, #0]
 80174d2:	f000 b82d 	b.w	8017530 <_malloc_r>
 80174d6:	bf00      	nop
 80174d8:	200000c0 	.word	0x200000c0

080174dc <free>:
 80174dc:	4b02      	ldr	r3, [pc, #8]	@ (80174e8 <free+0xc>)
 80174de:	4601      	mov	r1, r0
 80174e0:	6818      	ldr	r0, [r3, #0]
 80174e2:	f000 bc7b 	b.w	8017ddc <_free_r>
 80174e6:	bf00      	nop
 80174e8:	200000c0 	.word	0x200000c0

080174ec <sbrk_aligned>:
 80174ec:	b570      	push	{r4, r5, r6, lr}
 80174ee:	4e0f      	ldr	r6, [pc, #60]	@ (801752c <sbrk_aligned+0x40>)
 80174f0:	460c      	mov	r4, r1
 80174f2:	6831      	ldr	r1, [r6, #0]
 80174f4:	4605      	mov	r5, r0
 80174f6:	b911      	cbnz	r1, 80174fe <sbrk_aligned+0x12>
 80174f8:	f000 fbe0 	bl	8017cbc <_sbrk_r>
 80174fc:	6030      	str	r0, [r6, #0]
 80174fe:	4621      	mov	r1, r4
 8017500:	4628      	mov	r0, r5
 8017502:	f000 fbdb 	bl	8017cbc <_sbrk_r>
 8017506:	1c43      	adds	r3, r0, #1
 8017508:	d103      	bne.n	8017512 <sbrk_aligned+0x26>
 801750a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801750e:	4620      	mov	r0, r4
 8017510:	bd70      	pop	{r4, r5, r6, pc}
 8017512:	1cc4      	adds	r4, r0, #3
 8017514:	f024 0403 	bic.w	r4, r4, #3
 8017518:	42a0      	cmp	r0, r4
 801751a:	d0f8      	beq.n	801750e <sbrk_aligned+0x22>
 801751c:	1a21      	subs	r1, r4, r0
 801751e:	4628      	mov	r0, r5
 8017520:	f000 fbcc 	bl	8017cbc <_sbrk_r>
 8017524:	3001      	adds	r0, #1
 8017526:	d1f2      	bne.n	801750e <sbrk_aligned+0x22>
 8017528:	e7ef      	b.n	801750a <sbrk_aligned+0x1e>
 801752a:	bf00      	nop
 801752c:	2000ad38 	.word	0x2000ad38

08017530 <_malloc_r>:
 8017530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017534:	1ccd      	adds	r5, r1, #3
 8017536:	f025 0503 	bic.w	r5, r5, #3
 801753a:	3508      	adds	r5, #8
 801753c:	2d0c      	cmp	r5, #12
 801753e:	bf38      	it	cc
 8017540:	250c      	movcc	r5, #12
 8017542:	2d00      	cmp	r5, #0
 8017544:	4606      	mov	r6, r0
 8017546:	db01      	blt.n	801754c <_malloc_r+0x1c>
 8017548:	42a9      	cmp	r1, r5
 801754a:	d904      	bls.n	8017556 <_malloc_r+0x26>
 801754c:	230c      	movs	r3, #12
 801754e:	6033      	str	r3, [r6, #0]
 8017550:	2000      	movs	r0, #0
 8017552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017556:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801762c <_malloc_r+0xfc>
 801755a:	f000 f869 	bl	8017630 <__malloc_lock>
 801755e:	f8d8 3000 	ldr.w	r3, [r8]
 8017562:	461c      	mov	r4, r3
 8017564:	bb44      	cbnz	r4, 80175b8 <_malloc_r+0x88>
 8017566:	4629      	mov	r1, r5
 8017568:	4630      	mov	r0, r6
 801756a:	f7ff ffbf 	bl	80174ec <sbrk_aligned>
 801756e:	1c43      	adds	r3, r0, #1
 8017570:	4604      	mov	r4, r0
 8017572:	d158      	bne.n	8017626 <_malloc_r+0xf6>
 8017574:	f8d8 4000 	ldr.w	r4, [r8]
 8017578:	4627      	mov	r7, r4
 801757a:	2f00      	cmp	r7, #0
 801757c:	d143      	bne.n	8017606 <_malloc_r+0xd6>
 801757e:	2c00      	cmp	r4, #0
 8017580:	d04b      	beq.n	801761a <_malloc_r+0xea>
 8017582:	6823      	ldr	r3, [r4, #0]
 8017584:	4639      	mov	r1, r7
 8017586:	4630      	mov	r0, r6
 8017588:	eb04 0903 	add.w	r9, r4, r3
 801758c:	f000 fb96 	bl	8017cbc <_sbrk_r>
 8017590:	4581      	cmp	r9, r0
 8017592:	d142      	bne.n	801761a <_malloc_r+0xea>
 8017594:	6821      	ldr	r1, [r4, #0]
 8017596:	1a6d      	subs	r5, r5, r1
 8017598:	4629      	mov	r1, r5
 801759a:	4630      	mov	r0, r6
 801759c:	f7ff ffa6 	bl	80174ec <sbrk_aligned>
 80175a0:	3001      	adds	r0, #1
 80175a2:	d03a      	beq.n	801761a <_malloc_r+0xea>
 80175a4:	6823      	ldr	r3, [r4, #0]
 80175a6:	442b      	add	r3, r5
 80175a8:	6023      	str	r3, [r4, #0]
 80175aa:	f8d8 3000 	ldr.w	r3, [r8]
 80175ae:	685a      	ldr	r2, [r3, #4]
 80175b0:	bb62      	cbnz	r2, 801760c <_malloc_r+0xdc>
 80175b2:	f8c8 7000 	str.w	r7, [r8]
 80175b6:	e00f      	b.n	80175d8 <_malloc_r+0xa8>
 80175b8:	6822      	ldr	r2, [r4, #0]
 80175ba:	1b52      	subs	r2, r2, r5
 80175bc:	d420      	bmi.n	8017600 <_malloc_r+0xd0>
 80175be:	2a0b      	cmp	r2, #11
 80175c0:	d917      	bls.n	80175f2 <_malloc_r+0xc2>
 80175c2:	1961      	adds	r1, r4, r5
 80175c4:	42a3      	cmp	r3, r4
 80175c6:	6025      	str	r5, [r4, #0]
 80175c8:	bf18      	it	ne
 80175ca:	6059      	strne	r1, [r3, #4]
 80175cc:	6863      	ldr	r3, [r4, #4]
 80175ce:	bf08      	it	eq
 80175d0:	f8c8 1000 	streq.w	r1, [r8]
 80175d4:	5162      	str	r2, [r4, r5]
 80175d6:	604b      	str	r3, [r1, #4]
 80175d8:	4630      	mov	r0, r6
 80175da:	f000 f82f 	bl	801763c <__malloc_unlock>
 80175de:	f104 000b 	add.w	r0, r4, #11
 80175e2:	1d23      	adds	r3, r4, #4
 80175e4:	f020 0007 	bic.w	r0, r0, #7
 80175e8:	1ac2      	subs	r2, r0, r3
 80175ea:	bf1c      	itt	ne
 80175ec:	1a1b      	subne	r3, r3, r0
 80175ee:	50a3      	strne	r3, [r4, r2]
 80175f0:	e7af      	b.n	8017552 <_malloc_r+0x22>
 80175f2:	6862      	ldr	r2, [r4, #4]
 80175f4:	42a3      	cmp	r3, r4
 80175f6:	bf0c      	ite	eq
 80175f8:	f8c8 2000 	streq.w	r2, [r8]
 80175fc:	605a      	strne	r2, [r3, #4]
 80175fe:	e7eb      	b.n	80175d8 <_malloc_r+0xa8>
 8017600:	4623      	mov	r3, r4
 8017602:	6864      	ldr	r4, [r4, #4]
 8017604:	e7ae      	b.n	8017564 <_malloc_r+0x34>
 8017606:	463c      	mov	r4, r7
 8017608:	687f      	ldr	r7, [r7, #4]
 801760a:	e7b6      	b.n	801757a <_malloc_r+0x4a>
 801760c:	461a      	mov	r2, r3
 801760e:	685b      	ldr	r3, [r3, #4]
 8017610:	42a3      	cmp	r3, r4
 8017612:	d1fb      	bne.n	801760c <_malloc_r+0xdc>
 8017614:	2300      	movs	r3, #0
 8017616:	6053      	str	r3, [r2, #4]
 8017618:	e7de      	b.n	80175d8 <_malloc_r+0xa8>
 801761a:	230c      	movs	r3, #12
 801761c:	6033      	str	r3, [r6, #0]
 801761e:	4630      	mov	r0, r6
 8017620:	f000 f80c 	bl	801763c <__malloc_unlock>
 8017624:	e794      	b.n	8017550 <_malloc_r+0x20>
 8017626:	6005      	str	r5, [r0, #0]
 8017628:	e7d6      	b.n	80175d8 <_malloc_r+0xa8>
 801762a:	bf00      	nop
 801762c:	2000ad3c 	.word	0x2000ad3c

08017630 <__malloc_lock>:
 8017630:	4801      	ldr	r0, [pc, #4]	@ (8017638 <__malloc_lock+0x8>)
 8017632:	f000 bb90 	b.w	8017d56 <__retarget_lock_acquire_recursive>
 8017636:	bf00      	nop
 8017638:	2000ae81 	.word	0x2000ae81

0801763c <__malloc_unlock>:
 801763c:	4801      	ldr	r0, [pc, #4]	@ (8017644 <__malloc_unlock+0x8>)
 801763e:	f000 bb8b 	b.w	8017d58 <__retarget_lock_release_recursive>
 8017642:	bf00      	nop
 8017644:	2000ae81 	.word	0x2000ae81

08017648 <srand>:
 8017648:	b538      	push	{r3, r4, r5, lr}
 801764a:	4b10      	ldr	r3, [pc, #64]	@ (801768c <srand+0x44>)
 801764c:	681d      	ldr	r5, [r3, #0]
 801764e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017650:	4604      	mov	r4, r0
 8017652:	b9b3      	cbnz	r3, 8017682 <srand+0x3a>
 8017654:	2018      	movs	r0, #24
 8017656:	f7ff ff39 	bl	80174cc <malloc>
 801765a:	4602      	mov	r2, r0
 801765c:	6328      	str	r0, [r5, #48]	@ 0x30
 801765e:	b920      	cbnz	r0, 801766a <srand+0x22>
 8017660:	4b0b      	ldr	r3, [pc, #44]	@ (8017690 <srand+0x48>)
 8017662:	480c      	ldr	r0, [pc, #48]	@ (8017694 <srand+0x4c>)
 8017664:	2146      	movs	r1, #70	@ 0x46
 8017666:	f000 fb8f 	bl	8017d88 <__assert_func>
 801766a:	490b      	ldr	r1, [pc, #44]	@ (8017698 <srand+0x50>)
 801766c:	4b0b      	ldr	r3, [pc, #44]	@ (801769c <srand+0x54>)
 801766e:	e9c0 1300 	strd	r1, r3, [r0]
 8017672:	4b0b      	ldr	r3, [pc, #44]	@ (80176a0 <srand+0x58>)
 8017674:	6083      	str	r3, [r0, #8]
 8017676:	230b      	movs	r3, #11
 8017678:	8183      	strh	r3, [r0, #12]
 801767a:	2100      	movs	r1, #0
 801767c:	2001      	movs	r0, #1
 801767e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017682:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017684:	2200      	movs	r2, #0
 8017686:	611c      	str	r4, [r3, #16]
 8017688:	615a      	str	r2, [r3, #20]
 801768a:	bd38      	pop	{r3, r4, r5, pc}
 801768c:	200000c0 	.word	0x200000c0
 8017690:	080197c8 	.word	0x080197c8
 8017694:	080197df 	.word	0x080197df
 8017698:	abcd330e 	.word	0xabcd330e
 801769c:	e66d1234 	.word	0xe66d1234
 80176a0:	0005deec 	.word	0x0005deec

080176a4 <rand>:
 80176a4:	4b16      	ldr	r3, [pc, #88]	@ (8017700 <rand+0x5c>)
 80176a6:	b510      	push	{r4, lr}
 80176a8:	681c      	ldr	r4, [r3, #0]
 80176aa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80176ac:	b9b3      	cbnz	r3, 80176dc <rand+0x38>
 80176ae:	2018      	movs	r0, #24
 80176b0:	f7ff ff0c 	bl	80174cc <malloc>
 80176b4:	4602      	mov	r2, r0
 80176b6:	6320      	str	r0, [r4, #48]	@ 0x30
 80176b8:	b920      	cbnz	r0, 80176c4 <rand+0x20>
 80176ba:	4b12      	ldr	r3, [pc, #72]	@ (8017704 <rand+0x60>)
 80176bc:	4812      	ldr	r0, [pc, #72]	@ (8017708 <rand+0x64>)
 80176be:	2152      	movs	r1, #82	@ 0x52
 80176c0:	f000 fb62 	bl	8017d88 <__assert_func>
 80176c4:	4911      	ldr	r1, [pc, #68]	@ (801770c <rand+0x68>)
 80176c6:	4b12      	ldr	r3, [pc, #72]	@ (8017710 <rand+0x6c>)
 80176c8:	e9c0 1300 	strd	r1, r3, [r0]
 80176cc:	4b11      	ldr	r3, [pc, #68]	@ (8017714 <rand+0x70>)
 80176ce:	6083      	str	r3, [r0, #8]
 80176d0:	230b      	movs	r3, #11
 80176d2:	8183      	strh	r3, [r0, #12]
 80176d4:	2100      	movs	r1, #0
 80176d6:	2001      	movs	r0, #1
 80176d8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80176dc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80176de:	480e      	ldr	r0, [pc, #56]	@ (8017718 <rand+0x74>)
 80176e0:	690b      	ldr	r3, [r1, #16]
 80176e2:	694c      	ldr	r4, [r1, #20]
 80176e4:	4a0d      	ldr	r2, [pc, #52]	@ (801771c <rand+0x78>)
 80176e6:	4358      	muls	r0, r3
 80176e8:	fb02 0004 	mla	r0, r2, r4, r0
 80176ec:	fba3 3202 	umull	r3, r2, r3, r2
 80176f0:	3301      	adds	r3, #1
 80176f2:	eb40 0002 	adc.w	r0, r0, r2
 80176f6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80176fa:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80176fe:	bd10      	pop	{r4, pc}
 8017700:	200000c0 	.word	0x200000c0
 8017704:	080197c8 	.word	0x080197c8
 8017708:	080197df 	.word	0x080197df
 801770c:	abcd330e 	.word	0xabcd330e
 8017710:	e66d1234 	.word	0xe66d1234
 8017714:	0005deec 	.word	0x0005deec
 8017718:	5851f42d 	.word	0x5851f42d
 801771c:	4c957f2d 	.word	0x4c957f2d

08017720 <realloc>:
 8017720:	4b02      	ldr	r3, [pc, #8]	@ (801772c <realloc+0xc>)
 8017722:	460a      	mov	r2, r1
 8017724:	4601      	mov	r1, r0
 8017726:	6818      	ldr	r0, [r3, #0]
 8017728:	f000 b802 	b.w	8017730 <_realloc_r>
 801772c:	200000c0 	.word	0x200000c0

08017730 <_realloc_r>:
 8017730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017734:	4680      	mov	r8, r0
 8017736:	4615      	mov	r5, r2
 8017738:	460c      	mov	r4, r1
 801773a:	b921      	cbnz	r1, 8017746 <_realloc_r+0x16>
 801773c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017740:	4611      	mov	r1, r2
 8017742:	f7ff bef5 	b.w	8017530 <_malloc_r>
 8017746:	b92a      	cbnz	r2, 8017754 <_realloc_r+0x24>
 8017748:	f000 fb48 	bl	8017ddc <_free_r>
 801774c:	2400      	movs	r4, #0
 801774e:	4620      	mov	r0, r4
 8017750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017754:	f000 fb8c 	bl	8017e70 <_malloc_usable_size_r>
 8017758:	4285      	cmp	r5, r0
 801775a:	4606      	mov	r6, r0
 801775c:	d802      	bhi.n	8017764 <_realloc_r+0x34>
 801775e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017762:	d8f4      	bhi.n	801774e <_realloc_r+0x1e>
 8017764:	4629      	mov	r1, r5
 8017766:	4640      	mov	r0, r8
 8017768:	f7ff fee2 	bl	8017530 <_malloc_r>
 801776c:	4607      	mov	r7, r0
 801776e:	2800      	cmp	r0, #0
 8017770:	d0ec      	beq.n	801774c <_realloc_r+0x1c>
 8017772:	42b5      	cmp	r5, r6
 8017774:	462a      	mov	r2, r5
 8017776:	4621      	mov	r1, r4
 8017778:	bf28      	it	cs
 801777a:	4632      	movcs	r2, r6
 801777c:	f000 faf5 	bl	8017d6a <memcpy>
 8017780:	4621      	mov	r1, r4
 8017782:	4640      	mov	r0, r8
 8017784:	f000 fb2a 	bl	8017ddc <_free_r>
 8017788:	463c      	mov	r4, r7
 801778a:	e7e0      	b.n	801774e <_realloc_r+0x1e>

0801778c <_strtoul_l.constprop.0>:
 801778c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017790:	4e34      	ldr	r6, [pc, #208]	@ (8017864 <_strtoul_l.constprop.0+0xd8>)
 8017792:	4686      	mov	lr, r0
 8017794:	460d      	mov	r5, r1
 8017796:	4628      	mov	r0, r5
 8017798:	f815 4b01 	ldrb.w	r4, [r5], #1
 801779c:	5d37      	ldrb	r7, [r6, r4]
 801779e:	f017 0708 	ands.w	r7, r7, #8
 80177a2:	d1f8      	bne.n	8017796 <_strtoul_l.constprop.0+0xa>
 80177a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80177a6:	d12f      	bne.n	8017808 <_strtoul_l.constprop.0+0x7c>
 80177a8:	782c      	ldrb	r4, [r5, #0]
 80177aa:	2701      	movs	r7, #1
 80177ac:	1c85      	adds	r5, r0, #2
 80177ae:	f033 0010 	bics.w	r0, r3, #16
 80177b2:	d109      	bne.n	80177c8 <_strtoul_l.constprop.0+0x3c>
 80177b4:	2c30      	cmp	r4, #48	@ 0x30
 80177b6:	d12c      	bne.n	8017812 <_strtoul_l.constprop.0+0x86>
 80177b8:	7828      	ldrb	r0, [r5, #0]
 80177ba:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80177be:	2858      	cmp	r0, #88	@ 0x58
 80177c0:	d127      	bne.n	8017812 <_strtoul_l.constprop.0+0x86>
 80177c2:	786c      	ldrb	r4, [r5, #1]
 80177c4:	2310      	movs	r3, #16
 80177c6:	3502      	adds	r5, #2
 80177c8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80177cc:	2600      	movs	r6, #0
 80177ce:	fbb8 f8f3 	udiv	r8, r8, r3
 80177d2:	fb03 f908 	mul.w	r9, r3, r8
 80177d6:	ea6f 0909 	mvn.w	r9, r9
 80177da:	4630      	mov	r0, r6
 80177dc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80177e0:	f1bc 0f09 	cmp.w	ip, #9
 80177e4:	d81c      	bhi.n	8017820 <_strtoul_l.constprop.0+0x94>
 80177e6:	4664      	mov	r4, ip
 80177e8:	42a3      	cmp	r3, r4
 80177ea:	dd2a      	ble.n	8017842 <_strtoul_l.constprop.0+0xb6>
 80177ec:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80177f0:	d007      	beq.n	8017802 <_strtoul_l.constprop.0+0x76>
 80177f2:	4580      	cmp	r8, r0
 80177f4:	d322      	bcc.n	801783c <_strtoul_l.constprop.0+0xb0>
 80177f6:	d101      	bne.n	80177fc <_strtoul_l.constprop.0+0x70>
 80177f8:	45a1      	cmp	r9, r4
 80177fa:	db1f      	blt.n	801783c <_strtoul_l.constprop.0+0xb0>
 80177fc:	fb00 4003 	mla	r0, r0, r3, r4
 8017800:	2601      	movs	r6, #1
 8017802:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017806:	e7e9      	b.n	80177dc <_strtoul_l.constprop.0+0x50>
 8017808:	2c2b      	cmp	r4, #43	@ 0x2b
 801780a:	bf04      	itt	eq
 801780c:	782c      	ldrbeq	r4, [r5, #0]
 801780e:	1c85      	addeq	r5, r0, #2
 8017810:	e7cd      	b.n	80177ae <_strtoul_l.constprop.0+0x22>
 8017812:	2b00      	cmp	r3, #0
 8017814:	d1d8      	bne.n	80177c8 <_strtoul_l.constprop.0+0x3c>
 8017816:	2c30      	cmp	r4, #48	@ 0x30
 8017818:	bf0c      	ite	eq
 801781a:	2308      	moveq	r3, #8
 801781c:	230a      	movne	r3, #10
 801781e:	e7d3      	b.n	80177c8 <_strtoul_l.constprop.0+0x3c>
 8017820:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8017824:	f1bc 0f19 	cmp.w	ip, #25
 8017828:	d801      	bhi.n	801782e <_strtoul_l.constprop.0+0xa2>
 801782a:	3c37      	subs	r4, #55	@ 0x37
 801782c:	e7dc      	b.n	80177e8 <_strtoul_l.constprop.0+0x5c>
 801782e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8017832:	f1bc 0f19 	cmp.w	ip, #25
 8017836:	d804      	bhi.n	8017842 <_strtoul_l.constprop.0+0xb6>
 8017838:	3c57      	subs	r4, #87	@ 0x57
 801783a:	e7d5      	b.n	80177e8 <_strtoul_l.constprop.0+0x5c>
 801783c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8017840:	e7df      	b.n	8017802 <_strtoul_l.constprop.0+0x76>
 8017842:	1c73      	adds	r3, r6, #1
 8017844:	d106      	bne.n	8017854 <_strtoul_l.constprop.0+0xc8>
 8017846:	2322      	movs	r3, #34	@ 0x22
 8017848:	f8ce 3000 	str.w	r3, [lr]
 801784c:	4630      	mov	r0, r6
 801784e:	b932      	cbnz	r2, 801785e <_strtoul_l.constprop.0+0xd2>
 8017850:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017854:	b107      	cbz	r7, 8017858 <_strtoul_l.constprop.0+0xcc>
 8017856:	4240      	negs	r0, r0
 8017858:	2a00      	cmp	r2, #0
 801785a:	d0f9      	beq.n	8017850 <_strtoul_l.constprop.0+0xc4>
 801785c:	b106      	cbz	r6, 8017860 <_strtoul_l.constprop.0+0xd4>
 801785e:	1e69      	subs	r1, r5, #1
 8017860:	6011      	str	r1, [r2, #0]
 8017862:	e7f5      	b.n	8017850 <_strtoul_l.constprop.0+0xc4>
 8017864:	08019838 	.word	0x08019838

08017868 <strtoul>:
 8017868:	4613      	mov	r3, r2
 801786a:	460a      	mov	r2, r1
 801786c:	4601      	mov	r1, r0
 801786e:	4802      	ldr	r0, [pc, #8]	@ (8017878 <strtoul+0x10>)
 8017870:	6800      	ldr	r0, [r0, #0]
 8017872:	f7ff bf8b 	b.w	801778c <_strtoul_l.constprop.0>
 8017876:	bf00      	nop
 8017878:	200000c0 	.word	0x200000c0

0801787c <std>:
 801787c:	2300      	movs	r3, #0
 801787e:	b510      	push	{r4, lr}
 8017880:	4604      	mov	r4, r0
 8017882:	e9c0 3300 	strd	r3, r3, [r0]
 8017886:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801788a:	6083      	str	r3, [r0, #8]
 801788c:	8181      	strh	r1, [r0, #12]
 801788e:	6643      	str	r3, [r0, #100]	@ 0x64
 8017890:	81c2      	strh	r2, [r0, #14]
 8017892:	6183      	str	r3, [r0, #24]
 8017894:	4619      	mov	r1, r3
 8017896:	2208      	movs	r2, #8
 8017898:	305c      	adds	r0, #92	@ 0x5c
 801789a:	f000 f99d 	bl	8017bd8 <memset>
 801789e:	4b0d      	ldr	r3, [pc, #52]	@ (80178d4 <std+0x58>)
 80178a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80178a2:	4b0d      	ldr	r3, [pc, #52]	@ (80178d8 <std+0x5c>)
 80178a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80178a6:	4b0d      	ldr	r3, [pc, #52]	@ (80178dc <std+0x60>)
 80178a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80178aa:	4b0d      	ldr	r3, [pc, #52]	@ (80178e0 <std+0x64>)
 80178ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80178ae:	4b0d      	ldr	r3, [pc, #52]	@ (80178e4 <std+0x68>)
 80178b0:	6224      	str	r4, [r4, #32]
 80178b2:	429c      	cmp	r4, r3
 80178b4:	d006      	beq.n	80178c4 <std+0x48>
 80178b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80178ba:	4294      	cmp	r4, r2
 80178bc:	d002      	beq.n	80178c4 <std+0x48>
 80178be:	33d0      	adds	r3, #208	@ 0xd0
 80178c0:	429c      	cmp	r4, r3
 80178c2:	d105      	bne.n	80178d0 <std+0x54>
 80178c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80178c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80178cc:	f000 ba42 	b.w	8017d54 <__retarget_lock_init_recursive>
 80178d0:	bd10      	pop	{r4, pc}
 80178d2:	bf00      	nop
 80178d4:	08017a8d 	.word	0x08017a8d
 80178d8:	08017aaf 	.word	0x08017aaf
 80178dc:	08017ae7 	.word	0x08017ae7
 80178e0:	08017b0b 	.word	0x08017b0b
 80178e4:	2000ad40 	.word	0x2000ad40

080178e8 <stdio_exit_handler>:
 80178e8:	4a02      	ldr	r2, [pc, #8]	@ (80178f4 <stdio_exit_handler+0xc>)
 80178ea:	4903      	ldr	r1, [pc, #12]	@ (80178f8 <stdio_exit_handler+0x10>)
 80178ec:	4803      	ldr	r0, [pc, #12]	@ (80178fc <stdio_exit_handler+0x14>)
 80178ee:	f000 b869 	b.w	80179c4 <_fwalk_sglue>
 80178f2:	bf00      	nop
 80178f4:	200000b4 	.word	0x200000b4
 80178f8:	080187d9 	.word	0x080187d9
 80178fc:	200000c4 	.word	0x200000c4

08017900 <cleanup_stdio>:
 8017900:	6841      	ldr	r1, [r0, #4]
 8017902:	4b0c      	ldr	r3, [pc, #48]	@ (8017934 <cleanup_stdio+0x34>)
 8017904:	4299      	cmp	r1, r3
 8017906:	b510      	push	{r4, lr}
 8017908:	4604      	mov	r4, r0
 801790a:	d001      	beq.n	8017910 <cleanup_stdio+0x10>
 801790c:	f000 ff64 	bl	80187d8 <_fflush_r>
 8017910:	68a1      	ldr	r1, [r4, #8]
 8017912:	4b09      	ldr	r3, [pc, #36]	@ (8017938 <cleanup_stdio+0x38>)
 8017914:	4299      	cmp	r1, r3
 8017916:	d002      	beq.n	801791e <cleanup_stdio+0x1e>
 8017918:	4620      	mov	r0, r4
 801791a:	f000 ff5d 	bl	80187d8 <_fflush_r>
 801791e:	68e1      	ldr	r1, [r4, #12]
 8017920:	4b06      	ldr	r3, [pc, #24]	@ (801793c <cleanup_stdio+0x3c>)
 8017922:	4299      	cmp	r1, r3
 8017924:	d004      	beq.n	8017930 <cleanup_stdio+0x30>
 8017926:	4620      	mov	r0, r4
 8017928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801792c:	f000 bf54 	b.w	80187d8 <_fflush_r>
 8017930:	bd10      	pop	{r4, pc}
 8017932:	bf00      	nop
 8017934:	2000ad40 	.word	0x2000ad40
 8017938:	2000ada8 	.word	0x2000ada8
 801793c:	2000ae10 	.word	0x2000ae10

08017940 <global_stdio_init.part.0>:
 8017940:	b510      	push	{r4, lr}
 8017942:	4b0b      	ldr	r3, [pc, #44]	@ (8017970 <global_stdio_init.part.0+0x30>)
 8017944:	4c0b      	ldr	r4, [pc, #44]	@ (8017974 <global_stdio_init.part.0+0x34>)
 8017946:	4a0c      	ldr	r2, [pc, #48]	@ (8017978 <global_stdio_init.part.0+0x38>)
 8017948:	601a      	str	r2, [r3, #0]
 801794a:	4620      	mov	r0, r4
 801794c:	2200      	movs	r2, #0
 801794e:	2104      	movs	r1, #4
 8017950:	f7ff ff94 	bl	801787c <std>
 8017954:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017958:	2201      	movs	r2, #1
 801795a:	2109      	movs	r1, #9
 801795c:	f7ff ff8e 	bl	801787c <std>
 8017960:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017964:	2202      	movs	r2, #2
 8017966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801796a:	2112      	movs	r1, #18
 801796c:	f7ff bf86 	b.w	801787c <std>
 8017970:	2000ae78 	.word	0x2000ae78
 8017974:	2000ad40 	.word	0x2000ad40
 8017978:	080178e9 	.word	0x080178e9

0801797c <__sfp_lock_acquire>:
 801797c:	4801      	ldr	r0, [pc, #4]	@ (8017984 <__sfp_lock_acquire+0x8>)
 801797e:	f000 b9ea 	b.w	8017d56 <__retarget_lock_acquire_recursive>
 8017982:	bf00      	nop
 8017984:	2000ae82 	.word	0x2000ae82

08017988 <__sfp_lock_release>:
 8017988:	4801      	ldr	r0, [pc, #4]	@ (8017990 <__sfp_lock_release+0x8>)
 801798a:	f000 b9e5 	b.w	8017d58 <__retarget_lock_release_recursive>
 801798e:	bf00      	nop
 8017990:	2000ae82 	.word	0x2000ae82

08017994 <__sinit>:
 8017994:	b510      	push	{r4, lr}
 8017996:	4604      	mov	r4, r0
 8017998:	f7ff fff0 	bl	801797c <__sfp_lock_acquire>
 801799c:	6a23      	ldr	r3, [r4, #32]
 801799e:	b11b      	cbz	r3, 80179a8 <__sinit+0x14>
 80179a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80179a4:	f7ff bff0 	b.w	8017988 <__sfp_lock_release>
 80179a8:	4b04      	ldr	r3, [pc, #16]	@ (80179bc <__sinit+0x28>)
 80179aa:	6223      	str	r3, [r4, #32]
 80179ac:	4b04      	ldr	r3, [pc, #16]	@ (80179c0 <__sinit+0x2c>)
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	d1f5      	bne.n	80179a0 <__sinit+0xc>
 80179b4:	f7ff ffc4 	bl	8017940 <global_stdio_init.part.0>
 80179b8:	e7f2      	b.n	80179a0 <__sinit+0xc>
 80179ba:	bf00      	nop
 80179bc:	08017901 	.word	0x08017901
 80179c0:	2000ae78 	.word	0x2000ae78

080179c4 <_fwalk_sglue>:
 80179c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80179c8:	4607      	mov	r7, r0
 80179ca:	4688      	mov	r8, r1
 80179cc:	4614      	mov	r4, r2
 80179ce:	2600      	movs	r6, #0
 80179d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80179d4:	f1b9 0901 	subs.w	r9, r9, #1
 80179d8:	d505      	bpl.n	80179e6 <_fwalk_sglue+0x22>
 80179da:	6824      	ldr	r4, [r4, #0]
 80179dc:	2c00      	cmp	r4, #0
 80179de:	d1f7      	bne.n	80179d0 <_fwalk_sglue+0xc>
 80179e0:	4630      	mov	r0, r6
 80179e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80179e6:	89ab      	ldrh	r3, [r5, #12]
 80179e8:	2b01      	cmp	r3, #1
 80179ea:	d907      	bls.n	80179fc <_fwalk_sglue+0x38>
 80179ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80179f0:	3301      	adds	r3, #1
 80179f2:	d003      	beq.n	80179fc <_fwalk_sglue+0x38>
 80179f4:	4629      	mov	r1, r5
 80179f6:	4638      	mov	r0, r7
 80179f8:	47c0      	blx	r8
 80179fa:	4306      	orrs	r6, r0
 80179fc:	3568      	adds	r5, #104	@ 0x68
 80179fe:	e7e9      	b.n	80179d4 <_fwalk_sglue+0x10>

08017a00 <iprintf>:
 8017a00:	b40f      	push	{r0, r1, r2, r3}
 8017a02:	b507      	push	{r0, r1, r2, lr}
 8017a04:	4906      	ldr	r1, [pc, #24]	@ (8017a20 <iprintf+0x20>)
 8017a06:	ab04      	add	r3, sp, #16
 8017a08:	6808      	ldr	r0, [r1, #0]
 8017a0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8017a0e:	6881      	ldr	r1, [r0, #8]
 8017a10:	9301      	str	r3, [sp, #4]
 8017a12:	f000 fbb7 	bl	8018184 <_vfiprintf_r>
 8017a16:	b003      	add	sp, #12
 8017a18:	f85d eb04 	ldr.w	lr, [sp], #4
 8017a1c:	b004      	add	sp, #16
 8017a1e:	4770      	bx	lr
 8017a20:	200000c0 	.word	0x200000c0

08017a24 <sniprintf>:
 8017a24:	b40c      	push	{r2, r3}
 8017a26:	b530      	push	{r4, r5, lr}
 8017a28:	4b17      	ldr	r3, [pc, #92]	@ (8017a88 <sniprintf+0x64>)
 8017a2a:	1e0c      	subs	r4, r1, #0
 8017a2c:	681d      	ldr	r5, [r3, #0]
 8017a2e:	b09d      	sub	sp, #116	@ 0x74
 8017a30:	da08      	bge.n	8017a44 <sniprintf+0x20>
 8017a32:	238b      	movs	r3, #139	@ 0x8b
 8017a34:	602b      	str	r3, [r5, #0]
 8017a36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017a3a:	b01d      	add	sp, #116	@ 0x74
 8017a3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017a40:	b002      	add	sp, #8
 8017a42:	4770      	bx	lr
 8017a44:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017a48:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017a4c:	bf14      	ite	ne
 8017a4e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8017a52:	4623      	moveq	r3, r4
 8017a54:	9304      	str	r3, [sp, #16]
 8017a56:	9307      	str	r3, [sp, #28]
 8017a58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017a5c:	9002      	str	r0, [sp, #8]
 8017a5e:	9006      	str	r0, [sp, #24]
 8017a60:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017a64:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8017a66:	ab21      	add	r3, sp, #132	@ 0x84
 8017a68:	a902      	add	r1, sp, #8
 8017a6a:	4628      	mov	r0, r5
 8017a6c:	9301      	str	r3, [sp, #4]
 8017a6e:	f000 fa63 	bl	8017f38 <_svfiprintf_r>
 8017a72:	1c43      	adds	r3, r0, #1
 8017a74:	bfbc      	itt	lt
 8017a76:	238b      	movlt	r3, #139	@ 0x8b
 8017a78:	602b      	strlt	r3, [r5, #0]
 8017a7a:	2c00      	cmp	r4, #0
 8017a7c:	d0dd      	beq.n	8017a3a <sniprintf+0x16>
 8017a7e:	9b02      	ldr	r3, [sp, #8]
 8017a80:	2200      	movs	r2, #0
 8017a82:	701a      	strb	r2, [r3, #0]
 8017a84:	e7d9      	b.n	8017a3a <sniprintf+0x16>
 8017a86:	bf00      	nop
 8017a88:	200000c0 	.word	0x200000c0

08017a8c <__sread>:
 8017a8c:	b510      	push	{r4, lr}
 8017a8e:	460c      	mov	r4, r1
 8017a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a94:	f000 f900 	bl	8017c98 <_read_r>
 8017a98:	2800      	cmp	r0, #0
 8017a9a:	bfab      	itete	ge
 8017a9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017a9e:	89a3      	ldrhlt	r3, [r4, #12]
 8017aa0:	181b      	addge	r3, r3, r0
 8017aa2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017aa6:	bfac      	ite	ge
 8017aa8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017aaa:	81a3      	strhlt	r3, [r4, #12]
 8017aac:	bd10      	pop	{r4, pc}

08017aae <__swrite>:
 8017aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ab2:	461f      	mov	r7, r3
 8017ab4:	898b      	ldrh	r3, [r1, #12]
 8017ab6:	05db      	lsls	r3, r3, #23
 8017ab8:	4605      	mov	r5, r0
 8017aba:	460c      	mov	r4, r1
 8017abc:	4616      	mov	r6, r2
 8017abe:	d505      	bpl.n	8017acc <__swrite+0x1e>
 8017ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ac4:	2302      	movs	r3, #2
 8017ac6:	2200      	movs	r2, #0
 8017ac8:	f000 f8d4 	bl	8017c74 <_lseek_r>
 8017acc:	89a3      	ldrh	r3, [r4, #12]
 8017ace:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017ad2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017ad6:	81a3      	strh	r3, [r4, #12]
 8017ad8:	4632      	mov	r2, r6
 8017ada:	463b      	mov	r3, r7
 8017adc:	4628      	mov	r0, r5
 8017ade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017ae2:	f000 b8fb 	b.w	8017cdc <_write_r>

08017ae6 <__sseek>:
 8017ae6:	b510      	push	{r4, lr}
 8017ae8:	460c      	mov	r4, r1
 8017aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017aee:	f000 f8c1 	bl	8017c74 <_lseek_r>
 8017af2:	1c43      	adds	r3, r0, #1
 8017af4:	89a3      	ldrh	r3, [r4, #12]
 8017af6:	bf15      	itete	ne
 8017af8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017afa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017afe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017b02:	81a3      	strheq	r3, [r4, #12]
 8017b04:	bf18      	it	ne
 8017b06:	81a3      	strhne	r3, [r4, #12]
 8017b08:	bd10      	pop	{r4, pc}

08017b0a <__sclose>:
 8017b0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017b0e:	f000 b8a1 	b.w	8017c54 <_close_r>

08017b12 <_vsniprintf_r>:
 8017b12:	b530      	push	{r4, r5, lr}
 8017b14:	4614      	mov	r4, r2
 8017b16:	2c00      	cmp	r4, #0
 8017b18:	b09b      	sub	sp, #108	@ 0x6c
 8017b1a:	4605      	mov	r5, r0
 8017b1c:	461a      	mov	r2, r3
 8017b1e:	da05      	bge.n	8017b2c <_vsniprintf_r+0x1a>
 8017b20:	238b      	movs	r3, #139	@ 0x8b
 8017b22:	6003      	str	r3, [r0, #0]
 8017b24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017b28:	b01b      	add	sp, #108	@ 0x6c
 8017b2a:	bd30      	pop	{r4, r5, pc}
 8017b2c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017b30:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017b34:	bf14      	ite	ne
 8017b36:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8017b3a:	4623      	moveq	r3, r4
 8017b3c:	9302      	str	r3, [sp, #8]
 8017b3e:	9305      	str	r3, [sp, #20]
 8017b40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017b44:	9100      	str	r1, [sp, #0]
 8017b46:	9104      	str	r1, [sp, #16]
 8017b48:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017b4c:	4669      	mov	r1, sp
 8017b4e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017b50:	f000 f9f2 	bl	8017f38 <_svfiprintf_r>
 8017b54:	1c43      	adds	r3, r0, #1
 8017b56:	bfbc      	itt	lt
 8017b58:	238b      	movlt	r3, #139	@ 0x8b
 8017b5a:	602b      	strlt	r3, [r5, #0]
 8017b5c:	2c00      	cmp	r4, #0
 8017b5e:	d0e3      	beq.n	8017b28 <_vsniprintf_r+0x16>
 8017b60:	9b00      	ldr	r3, [sp, #0]
 8017b62:	2200      	movs	r2, #0
 8017b64:	701a      	strb	r2, [r3, #0]
 8017b66:	e7df      	b.n	8017b28 <_vsniprintf_r+0x16>

08017b68 <vsniprintf>:
 8017b68:	b507      	push	{r0, r1, r2, lr}
 8017b6a:	9300      	str	r3, [sp, #0]
 8017b6c:	4613      	mov	r3, r2
 8017b6e:	460a      	mov	r2, r1
 8017b70:	4601      	mov	r1, r0
 8017b72:	4803      	ldr	r0, [pc, #12]	@ (8017b80 <vsniprintf+0x18>)
 8017b74:	6800      	ldr	r0, [r0, #0]
 8017b76:	f7ff ffcc 	bl	8017b12 <_vsniprintf_r>
 8017b7a:	b003      	add	sp, #12
 8017b7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017b80:	200000c0 	.word	0x200000c0

08017b84 <memcmp>:
 8017b84:	b510      	push	{r4, lr}
 8017b86:	3901      	subs	r1, #1
 8017b88:	4402      	add	r2, r0
 8017b8a:	4290      	cmp	r0, r2
 8017b8c:	d101      	bne.n	8017b92 <memcmp+0xe>
 8017b8e:	2000      	movs	r0, #0
 8017b90:	e005      	b.n	8017b9e <memcmp+0x1a>
 8017b92:	7803      	ldrb	r3, [r0, #0]
 8017b94:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017b98:	42a3      	cmp	r3, r4
 8017b9a:	d001      	beq.n	8017ba0 <memcmp+0x1c>
 8017b9c:	1b18      	subs	r0, r3, r4
 8017b9e:	bd10      	pop	{r4, pc}
 8017ba0:	3001      	adds	r0, #1
 8017ba2:	e7f2      	b.n	8017b8a <memcmp+0x6>

08017ba4 <memmove>:
 8017ba4:	4288      	cmp	r0, r1
 8017ba6:	b510      	push	{r4, lr}
 8017ba8:	eb01 0402 	add.w	r4, r1, r2
 8017bac:	d902      	bls.n	8017bb4 <memmove+0x10>
 8017bae:	4284      	cmp	r4, r0
 8017bb0:	4623      	mov	r3, r4
 8017bb2:	d807      	bhi.n	8017bc4 <memmove+0x20>
 8017bb4:	1e43      	subs	r3, r0, #1
 8017bb6:	42a1      	cmp	r1, r4
 8017bb8:	d008      	beq.n	8017bcc <memmove+0x28>
 8017bba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017bbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017bc2:	e7f8      	b.n	8017bb6 <memmove+0x12>
 8017bc4:	4402      	add	r2, r0
 8017bc6:	4601      	mov	r1, r0
 8017bc8:	428a      	cmp	r2, r1
 8017bca:	d100      	bne.n	8017bce <memmove+0x2a>
 8017bcc:	bd10      	pop	{r4, pc}
 8017bce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017bd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017bd6:	e7f7      	b.n	8017bc8 <memmove+0x24>

08017bd8 <memset>:
 8017bd8:	4402      	add	r2, r0
 8017bda:	4603      	mov	r3, r0
 8017bdc:	4293      	cmp	r3, r2
 8017bde:	d100      	bne.n	8017be2 <memset+0xa>
 8017be0:	4770      	bx	lr
 8017be2:	f803 1b01 	strb.w	r1, [r3], #1
 8017be6:	e7f9      	b.n	8017bdc <memset+0x4>

08017be8 <strchr>:
 8017be8:	b2c9      	uxtb	r1, r1
 8017bea:	4603      	mov	r3, r0
 8017bec:	4618      	mov	r0, r3
 8017bee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017bf2:	b112      	cbz	r2, 8017bfa <strchr+0x12>
 8017bf4:	428a      	cmp	r2, r1
 8017bf6:	d1f9      	bne.n	8017bec <strchr+0x4>
 8017bf8:	4770      	bx	lr
 8017bfa:	2900      	cmp	r1, #0
 8017bfc:	bf18      	it	ne
 8017bfe:	2000      	movne	r0, #0
 8017c00:	4770      	bx	lr

08017c02 <strncmp>:
 8017c02:	b510      	push	{r4, lr}
 8017c04:	b16a      	cbz	r2, 8017c22 <strncmp+0x20>
 8017c06:	3901      	subs	r1, #1
 8017c08:	1884      	adds	r4, r0, r2
 8017c0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017c0e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017c12:	429a      	cmp	r2, r3
 8017c14:	d103      	bne.n	8017c1e <strncmp+0x1c>
 8017c16:	42a0      	cmp	r0, r4
 8017c18:	d001      	beq.n	8017c1e <strncmp+0x1c>
 8017c1a:	2a00      	cmp	r2, #0
 8017c1c:	d1f5      	bne.n	8017c0a <strncmp+0x8>
 8017c1e:	1ad0      	subs	r0, r2, r3
 8017c20:	bd10      	pop	{r4, pc}
 8017c22:	4610      	mov	r0, r2
 8017c24:	e7fc      	b.n	8017c20 <strncmp+0x1e>

08017c26 <strstr>:
 8017c26:	780a      	ldrb	r2, [r1, #0]
 8017c28:	b570      	push	{r4, r5, r6, lr}
 8017c2a:	b96a      	cbnz	r2, 8017c48 <strstr+0x22>
 8017c2c:	bd70      	pop	{r4, r5, r6, pc}
 8017c2e:	429a      	cmp	r2, r3
 8017c30:	d109      	bne.n	8017c46 <strstr+0x20>
 8017c32:	460c      	mov	r4, r1
 8017c34:	4605      	mov	r5, r0
 8017c36:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d0f6      	beq.n	8017c2c <strstr+0x6>
 8017c3e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8017c42:	429e      	cmp	r6, r3
 8017c44:	d0f7      	beq.n	8017c36 <strstr+0x10>
 8017c46:	3001      	adds	r0, #1
 8017c48:	7803      	ldrb	r3, [r0, #0]
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	d1ef      	bne.n	8017c2e <strstr+0x8>
 8017c4e:	4618      	mov	r0, r3
 8017c50:	e7ec      	b.n	8017c2c <strstr+0x6>
	...

08017c54 <_close_r>:
 8017c54:	b538      	push	{r3, r4, r5, lr}
 8017c56:	4d06      	ldr	r5, [pc, #24]	@ (8017c70 <_close_r+0x1c>)
 8017c58:	2300      	movs	r3, #0
 8017c5a:	4604      	mov	r4, r0
 8017c5c:	4608      	mov	r0, r1
 8017c5e:	602b      	str	r3, [r5, #0]
 8017c60:	f7ea fa40 	bl	80020e4 <_close>
 8017c64:	1c43      	adds	r3, r0, #1
 8017c66:	d102      	bne.n	8017c6e <_close_r+0x1a>
 8017c68:	682b      	ldr	r3, [r5, #0]
 8017c6a:	b103      	cbz	r3, 8017c6e <_close_r+0x1a>
 8017c6c:	6023      	str	r3, [r4, #0]
 8017c6e:	bd38      	pop	{r3, r4, r5, pc}
 8017c70:	2000ae7c 	.word	0x2000ae7c

08017c74 <_lseek_r>:
 8017c74:	b538      	push	{r3, r4, r5, lr}
 8017c76:	4d07      	ldr	r5, [pc, #28]	@ (8017c94 <_lseek_r+0x20>)
 8017c78:	4604      	mov	r4, r0
 8017c7a:	4608      	mov	r0, r1
 8017c7c:	4611      	mov	r1, r2
 8017c7e:	2200      	movs	r2, #0
 8017c80:	602a      	str	r2, [r5, #0]
 8017c82:	461a      	mov	r2, r3
 8017c84:	f7ea fa55 	bl	8002132 <_lseek>
 8017c88:	1c43      	adds	r3, r0, #1
 8017c8a:	d102      	bne.n	8017c92 <_lseek_r+0x1e>
 8017c8c:	682b      	ldr	r3, [r5, #0]
 8017c8e:	b103      	cbz	r3, 8017c92 <_lseek_r+0x1e>
 8017c90:	6023      	str	r3, [r4, #0]
 8017c92:	bd38      	pop	{r3, r4, r5, pc}
 8017c94:	2000ae7c 	.word	0x2000ae7c

08017c98 <_read_r>:
 8017c98:	b538      	push	{r3, r4, r5, lr}
 8017c9a:	4d07      	ldr	r5, [pc, #28]	@ (8017cb8 <_read_r+0x20>)
 8017c9c:	4604      	mov	r4, r0
 8017c9e:	4608      	mov	r0, r1
 8017ca0:	4611      	mov	r1, r2
 8017ca2:	2200      	movs	r2, #0
 8017ca4:	602a      	str	r2, [r5, #0]
 8017ca6:	461a      	mov	r2, r3
 8017ca8:	f7ea f9e3 	bl	8002072 <_read>
 8017cac:	1c43      	adds	r3, r0, #1
 8017cae:	d102      	bne.n	8017cb6 <_read_r+0x1e>
 8017cb0:	682b      	ldr	r3, [r5, #0]
 8017cb2:	b103      	cbz	r3, 8017cb6 <_read_r+0x1e>
 8017cb4:	6023      	str	r3, [r4, #0]
 8017cb6:	bd38      	pop	{r3, r4, r5, pc}
 8017cb8:	2000ae7c 	.word	0x2000ae7c

08017cbc <_sbrk_r>:
 8017cbc:	b538      	push	{r3, r4, r5, lr}
 8017cbe:	4d06      	ldr	r5, [pc, #24]	@ (8017cd8 <_sbrk_r+0x1c>)
 8017cc0:	2300      	movs	r3, #0
 8017cc2:	4604      	mov	r4, r0
 8017cc4:	4608      	mov	r0, r1
 8017cc6:	602b      	str	r3, [r5, #0]
 8017cc8:	f7ea fa40 	bl	800214c <_sbrk>
 8017ccc:	1c43      	adds	r3, r0, #1
 8017cce:	d102      	bne.n	8017cd6 <_sbrk_r+0x1a>
 8017cd0:	682b      	ldr	r3, [r5, #0]
 8017cd2:	b103      	cbz	r3, 8017cd6 <_sbrk_r+0x1a>
 8017cd4:	6023      	str	r3, [r4, #0]
 8017cd6:	bd38      	pop	{r3, r4, r5, pc}
 8017cd8:	2000ae7c 	.word	0x2000ae7c

08017cdc <_write_r>:
 8017cdc:	b538      	push	{r3, r4, r5, lr}
 8017cde:	4d07      	ldr	r5, [pc, #28]	@ (8017cfc <_write_r+0x20>)
 8017ce0:	4604      	mov	r4, r0
 8017ce2:	4608      	mov	r0, r1
 8017ce4:	4611      	mov	r1, r2
 8017ce6:	2200      	movs	r2, #0
 8017ce8:	602a      	str	r2, [r5, #0]
 8017cea:	461a      	mov	r2, r3
 8017cec:	f7ea f9de 	bl	80020ac <_write>
 8017cf0:	1c43      	adds	r3, r0, #1
 8017cf2:	d102      	bne.n	8017cfa <_write_r+0x1e>
 8017cf4:	682b      	ldr	r3, [r5, #0]
 8017cf6:	b103      	cbz	r3, 8017cfa <_write_r+0x1e>
 8017cf8:	6023      	str	r3, [r4, #0]
 8017cfa:	bd38      	pop	{r3, r4, r5, pc}
 8017cfc:	2000ae7c 	.word	0x2000ae7c

08017d00 <__errno>:
 8017d00:	4b01      	ldr	r3, [pc, #4]	@ (8017d08 <__errno+0x8>)
 8017d02:	6818      	ldr	r0, [r3, #0]
 8017d04:	4770      	bx	lr
 8017d06:	bf00      	nop
 8017d08:	200000c0 	.word	0x200000c0

08017d0c <__libc_init_array>:
 8017d0c:	b570      	push	{r4, r5, r6, lr}
 8017d0e:	4d0d      	ldr	r5, [pc, #52]	@ (8017d44 <__libc_init_array+0x38>)
 8017d10:	4c0d      	ldr	r4, [pc, #52]	@ (8017d48 <__libc_init_array+0x3c>)
 8017d12:	1b64      	subs	r4, r4, r5
 8017d14:	10a4      	asrs	r4, r4, #2
 8017d16:	2600      	movs	r6, #0
 8017d18:	42a6      	cmp	r6, r4
 8017d1a:	d109      	bne.n	8017d30 <__libc_init_array+0x24>
 8017d1c:	4d0b      	ldr	r5, [pc, #44]	@ (8017d4c <__libc_init_array+0x40>)
 8017d1e:	4c0c      	ldr	r4, [pc, #48]	@ (8017d50 <__libc_init_array+0x44>)
 8017d20:	f000 fef8 	bl	8018b14 <_init>
 8017d24:	1b64      	subs	r4, r4, r5
 8017d26:	10a4      	asrs	r4, r4, #2
 8017d28:	2600      	movs	r6, #0
 8017d2a:	42a6      	cmp	r6, r4
 8017d2c:	d105      	bne.n	8017d3a <__libc_init_array+0x2e>
 8017d2e:	bd70      	pop	{r4, r5, r6, pc}
 8017d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8017d34:	4798      	blx	r3
 8017d36:	3601      	adds	r6, #1
 8017d38:	e7ee      	b.n	8017d18 <__libc_init_array+0xc>
 8017d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8017d3e:	4798      	blx	r3
 8017d40:	3601      	adds	r6, #1
 8017d42:	e7f2      	b.n	8017d2a <__libc_init_array+0x1e>
 8017d44:	080199b0 	.word	0x080199b0
 8017d48:	080199b0 	.word	0x080199b0
 8017d4c:	080199b0 	.word	0x080199b0
 8017d50:	080199b8 	.word	0x080199b8

08017d54 <__retarget_lock_init_recursive>:
 8017d54:	4770      	bx	lr

08017d56 <__retarget_lock_acquire_recursive>:
 8017d56:	4770      	bx	lr

08017d58 <__retarget_lock_release_recursive>:
 8017d58:	4770      	bx	lr

08017d5a <strcpy>:
 8017d5a:	4603      	mov	r3, r0
 8017d5c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017d60:	f803 2b01 	strb.w	r2, [r3], #1
 8017d64:	2a00      	cmp	r2, #0
 8017d66:	d1f9      	bne.n	8017d5c <strcpy+0x2>
 8017d68:	4770      	bx	lr

08017d6a <memcpy>:
 8017d6a:	440a      	add	r2, r1
 8017d6c:	4291      	cmp	r1, r2
 8017d6e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8017d72:	d100      	bne.n	8017d76 <memcpy+0xc>
 8017d74:	4770      	bx	lr
 8017d76:	b510      	push	{r4, lr}
 8017d78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017d7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017d80:	4291      	cmp	r1, r2
 8017d82:	d1f9      	bne.n	8017d78 <memcpy+0xe>
 8017d84:	bd10      	pop	{r4, pc}
	...

08017d88 <__assert_func>:
 8017d88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017d8a:	4614      	mov	r4, r2
 8017d8c:	461a      	mov	r2, r3
 8017d8e:	4b09      	ldr	r3, [pc, #36]	@ (8017db4 <__assert_func+0x2c>)
 8017d90:	681b      	ldr	r3, [r3, #0]
 8017d92:	4605      	mov	r5, r0
 8017d94:	68d8      	ldr	r0, [r3, #12]
 8017d96:	b954      	cbnz	r4, 8017dae <__assert_func+0x26>
 8017d98:	4b07      	ldr	r3, [pc, #28]	@ (8017db8 <__assert_func+0x30>)
 8017d9a:	461c      	mov	r4, r3
 8017d9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017da0:	9100      	str	r1, [sp, #0]
 8017da2:	462b      	mov	r3, r5
 8017da4:	4905      	ldr	r1, [pc, #20]	@ (8017dbc <__assert_func+0x34>)
 8017da6:	f000 fd3f 	bl	8018828 <fiprintf>
 8017daa:	f000 fde3 	bl	8018974 <abort>
 8017dae:	4b04      	ldr	r3, [pc, #16]	@ (8017dc0 <__assert_func+0x38>)
 8017db0:	e7f4      	b.n	8017d9c <__assert_func+0x14>
 8017db2:	bf00      	nop
 8017db4:	200000c0 	.word	0x200000c0
 8017db8:	08019973 	.word	0x08019973
 8017dbc:	08019945 	.word	0x08019945
 8017dc0:	08019938 	.word	0x08019938

08017dc4 <__env_lock>:
 8017dc4:	4801      	ldr	r0, [pc, #4]	@ (8017dcc <__env_lock+0x8>)
 8017dc6:	f7ff bfc6 	b.w	8017d56 <__retarget_lock_acquire_recursive>
 8017dca:	bf00      	nop
 8017dcc:	2000ae80 	.word	0x2000ae80

08017dd0 <__env_unlock>:
 8017dd0:	4801      	ldr	r0, [pc, #4]	@ (8017dd8 <__env_unlock+0x8>)
 8017dd2:	f7ff bfc1 	b.w	8017d58 <__retarget_lock_release_recursive>
 8017dd6:	bf00      	nop
 8017dd8:	2000ae80 	.word	0x2000ae80

08017ddc <_free_r>:
 8017ddc:	b538      	push	{r3, r4, r5, lr}
 8017dde:	4605      	mov	r5, r0
 8017de0:	2900      	cmp	r1, #0
 8017de2:	d041      	beq.n	8017e68 <_free_r+0x8c>
 8017de4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017de8:	1f0c      	subs	r4, r1, #4
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	bfb8      	it	lt
 8017dee:	18e4      	addlt	r4, r4, r3
 8017df0:	f7ff fc1e 	bl	8017630 <__malloc_lock>
 8017df4:	4a1d      	ldr	r2, [pc, #116]	@ (8017e6c <_free_r+0x90>)
 8017df6:	6813      	ldr	r3, [r2, #0]
 8017df8:	b933      	cbnz	r3, 8017e08 <_free_r+0x2c>
 8017dfa:	6063      	str	r3, [r4, #4]
 8017dfc:	6014      	str	r4, [r2, #0]
 8017dfe:	4628      	mov	r0, r5
 8017e00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017e04:	f7ff bc1a 	b.w	801763c <__malloc_unlock>
 8017e08:	42a3      	cmp	r3, r4
 8017e0a:	d908      	bls.n	8017e1e <_free_r+0x42>
 8017e0c:	6820      	ldr	r0, [r4, #0]
 8017e0e:	1821      	adds	r1, r4, r0
 8017e10:	428b      	cmp	r3, r1
 8017e12:	bf01      	itttt	eq
 8017e14:	6819      	ldreq	r1, [r3, #0]
 8017e16:	685b      	ldreq	r3, [r3, #4]
 8017e18:	1809      	addeq	r1, r1, r0
 8017e1a:	6021      	streq	r1, [r4, #0]
 8017e1c:	e7ed      	b.n	8017dfa <_free_r+0x1e>
 8017e1e:	461a      	mov	r2, r3
 8017e20:	685b      	ldr	r3, [r3, #4]
 8017e22:	b10b      	cbz	r3, 8017e28 <_free_r+0x4c>
 8017e24:	42a3      	cmp	r3, r4
 8017e26:	d9fa      	bls.n	8017e1e <_free_r+0x42>
 8017e28:	6811      	ldr	r1, [r2, #0]
 8017e2a:	1850      	adds	r0, r2, r1
 8017e2c:	42a0      	cmp	r0, r4
 8017e2e:	d10b      	bne.n	8017e48 <_free_r+0x6c>
 8017e30:	6820      	ldr	r0, [r4, #0]
 8017e32:	4401      	add	r1, r0
 8017e34:	1850      	adds	r0, r2, r1
 8017e36:	4283      	cmp	r3, r0
 8017e38:	6011      	str	r1, [r2, #0]
 8017e3a:	d1e0      	bne.n	8017dfe <_free_r+0x22>
 8017e3c:	6818      	ldr	r0, [r3, #0]
 8017e3e:	685b      	ldr	r3, [r3, #4]
 8017e40:	6053      	str	r3, [r2, #4]
 8017e42:	4408      	add	r0, r1
 8017e44:	6010      	str	r0, [r2, #0]
 8017e46:	e7da      	b.n	8017dfe <_free_r+0x22>
 8017e48:	d902      	bls.n	8017e50 <_free_r+0x74>
 8017e4a:	230c      	movs	r3, #12
 8017e4c:	602b      	str	r3, [r5, #0]
 8017e4e:	e7d6      	b.n	8017dfe <_free_r+0x22>
 8017e50:	6820      	ldr	r0, [r4, #0]
 8017e52:	1821      	adds	r1, r4, r0
 8017e54:	428b      	cmp	r3, r1
 8017e56:	bf04      	itt	eq
 8017e58:	6819      	ldreq	r1, [r3, #0]
 8017e5a:	685b      	ldreq	r3, [r3, #4]
 8017e5c:	6063      	str	r3, [r4, #4]
 8017e5e:	bf04      	itt	eq
 8017e60:	1809      	addeq	r1, r1, r0
 8017e62:	6021      	streq	r1, [r4, #0]
 8017e64:	6054      	str	r4, [r2, #4]
 8017e66:	e7ca      	b.n	8017dfe <_free_r+0x22>
 8017e68:	bd38      	pop	{r3, r4, r5, pc}
 8017e6a:	bf00      	nop
 8017e6c:	2000ad3c 	.word	0x2000ad3c

08017e70 <_malloc_usable_size_r>:
 8017e70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017e74:	1f18      	subs	r0, r3, #4
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	bfbc      	itt	lt
 8017e7a:	580b      	ldrlt	r3, [r1, r0]
 8017e7c:	18c0      	addlt	r0, r0, r3
 8017e7e:	4770      	bx	lr

08017e80 <__ssputs_r>:
 8017e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e84:	688e      	ldr	r6, [r1, #8]
 8017e86:	461f      	mov	r7, r3
 8017e88:	42be      	cmp	r6, r7
 8017e8a:	680b      	ldr	r3, [r1, #0]
 8017e8c:	4682      	mov	sl, r0
 8017e8e:	460c      	mov	r4, r1
 8017e90:	4690      	mov	r8, r2
 8017e92:	d82d      	bhi.n	8017ef0 <__ssputs_r+0x70>
 8017e94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017e98:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017e9c:	d026      	beq.n	8017eec <__ssputs_r+0x6c>
 8017e9e:	6965      	ldr	r5, [r4, #20]
 8017ea0:	6909      	ldr	r1, [r1, #16]
 8017ea2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017ea6:	eba3 0901 	sub.w	r9, r3, r1
 8017eaa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017eae:	1c7b      	adds	r3, r7, #1
 8017eb0:	444b      	add	r3, r9
 8017eb2:	106d      	asrs	r5, r5, #1
 8017eb4:	429d      	cmp	r5, r3
 8017eb6:	bf38      	it	cc
 8017eb8:	461d      	movcc	r5, r3
 8017eba:	0553      	lsls	r3, r2, #21
 8017ebc:	d527      	bpl.n	8017f0e <__ssputs_r+0x8e>
 8017ebe:	4629      	mov	r1, r5
 8017ec0:	f7ff fb36 	bl	8017530 <_malloc_r>
 8017ec4:	4606      	mov	r6, r0
 8017ec6:	b360      	cbz	r0, 8017f22 <__ssputs_r+0xa2>
 8017ec8:	6921      	ldr	r1, [r4, #16]
 8017eca:	464a      	mov	r2, r9
 8017ecc:	f7ff ff4d 	bl	8017d6a <memcpy>
 8017ed0:	89a3      	ldrh	r3, [r4, #12]
 8017ed2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017ed6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017eda:	81a3      	strh	r3, [r4, #12]
 8017edc:	6126      	str	r6, [r4, #16]
 8017ede:	6165      	str	r5, [r4, #20]
 8017ee0:	444e      	add	r6, r9
 8017ee2:	eba5 0509 	sub.w	r5, r5, r9
 8017ee6:	6026      	str	r6, [r4, #0]
 8017ee8:	60a5      	str	r5, [r4, #8]
 8017eea:	463e      	mov	r6, r7
 8017eec:	42be      	cmp	r6, r7
 8017eee:	d900      	bls.n	8017ef2 <__ssputs_r+0x72>
 8017ef0:	463e      	mov	r6, r7
 8017ef2:	6820      	ldr	r0, [r4, #0]
 8017ef4:	4632      	mov	r2, r6
 8017ef6:	4641      	mov	r1, r8
 8017ef8:	f7ff fe54 	bl	8017ba4 <memmove>
 8017efc:	68a3      	ldr	r3, [r4, #8]
 8017efe:	1b9b      	subs	r3, r3, r6
 8017f00:	60a3      	str	r3, [r4, #8]
 8017f02:	6823      	ldr	r3, [r4, #0]
 8017f04:	4433      	add	r3, r6
 8017f06:	6023      	str	r3, [r4, #0]
 8017f08:	2000      	movs	r0, #0
 8017f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f0e:	462a      	mov	r2, r5
 8017f10:	f7ff fc0e 	bl	8017730 <_realloc_r>
 8017f14:	4606      	mov	r6, r0
 8017f16:	2800      	cmp	r0, #0
 8017f18:	d1e0      	bne.n	8017edc <__ssputs_r+0x5c>
 8017f1a:	6921      	ldr	r1, [r4, #16]
 8017f1c:	4650      	mov	r0, sl
 8017f1e:	f7ff ff5d 	bl	8017ddc <_free_r>
 8017f22:	230c      	movs	r3, #12
 8017f24:	f8ca 3000 	str.w	r3, [sl]
 8017f28:	89a3      	ldrh	r3, [r4, #12]
 8017f2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017f2e:	81a3      	strh	r3, [r4, #12]
 8017f30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017f34:	e7e9      	b.n	8017f0a <__ssputs_r+0x8a>
	...

08017f38 <_svfiprintf_r>:
 8017f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f3c:	4698      	mov	r8, r3
 8017f3e:	898b      	ldrh	r3, [r1, #12]
 8017f40:	061b      	lsls	r3, r3, #24
 8017f42:	b09d      	sub	sp, #116	@ 0x74
 8017f44:	4607      	mov	r7, r0
 8017f46:	460d      	mov	r5, r1
 8017f48:	4614      	mov	r4, r2
 8017f4a:	d510      	bpl.n	8017f6e <_svfiprintf_r+0x36>
 8017f4c:	690b      	ldr	r3, [r1, #16]
 8017f4e:	b973      	cbnz	r3, 8017f6e <_svfiprintf_r+0x36>
 8017f50:	2140      	movs	r1, #64	@ 0x40
 8017f52:	f7ff faed 	bl	8017530 <_malloc_r>
 8017f56:	6028      	str	r0, [r5, #0]
 8017f58:	6128      	str	r0, [r5, #16]
 8017f5a:	b930      	cbnz	r0, 8017f6a <_svfiprintf_r+0x32>
 8017f5c:	230c      	movs	r3, #12
 8017f5e:	603b      	str	r3, [r7, #0]
 8017f60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017f64:	b01d      	add	sp, #116	@ 0x74
 8017f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f6a:	2340      	movs	r3, #64	@ 0x40
 8017f6c:	616b      	str	r3, [r5, #20]
 8017f6e:	2300      	movs	r3, #0
 8017f70:	9309      	str	r3, [sp, #36]	@ 0x24
 8017f72:	2320      	movs	r3, #32
 8017f74:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017f78:	f8cd 800c 	str.w	r8, [sp, #12]
 8017f7c:	2330      	movs	r3, #48	@ 0x30
 8017f7e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801811c <_svfiprintf_r+0x1e4>
 8017f82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017f86:	f04f 0901 	mov.w	r9, #1
 8017f8a:	4623      	mov	r3, r4
 8017f8c:	469a      	mov	sl, r3
 8017f8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017f92:	b10a      	cbz	r2, 8017f98 <_svfiprintf_r+0x60>
 8017f94:	2a25      	cmp	r2, #37	@ 0x25
 8017f96:	d1f9      	bne.n	8017f8c <_svfiprintf_r+0x54>
 8017f98:	ebba 0b04 	subs.w	fp, sl, r4
 8017f9c:	d00b      	beq.n	8017fb6 <_svfiprintf_r+0x7e>
 8017f9e:	465b      	mov	r3, fp
 8017fa0:	4622      	mov	r2, r4
 8017fa2:	4629      	mov	r1, r5
 8017fa4:	4638      	mov	r0, r7
 8017fa6:	f7ff ff6b 	bl	8017e80 <__ssputs_r>
 8017faa:	3001      	adds	r0, #1
 8017fac:	f000 80a7 	beq.w	80180fe <_svfiprintf_r+0x1c6>
 8017fb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017fb2:	445a      	add	r2, fp
 8017fb4:	9209      	str	r2, [sp, #36]	@ 0x24
 8017fb6:	f89a 3000 	ldrb.w	r3, [sl]
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	f000 809f 	beq.w	80180fe <_svfiprintf_r+0x1c6>
 8017fc0:	2300      	movs	r3, #0
 8017fc2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017fc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017fca:	f10a 0a01 	add.w	sl, sl, #1
 8017fce:	9304      	str	r3, [sp, #16]
 8017fd0:	9307      	str	r3, [sp, #28]
 8017fd2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017fd6:	931a      	str	r3, [sp, #104]	@ 0x68
 8017fd8:	4654      	mov	r4, sl
 8017fda:	2205      	movs	r2, #5
 8017fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017fe0:	484e      	ldr	r0, [pc, #312]	@ (801811c <_svfiprintf_r+0x1e4>)
 8017fe2:	f7e8 f935 	bl	8000250 <memchr>
 8017fe6:	9a04      	ldr	r2, [sp, #16]
 8017fe8:	b9d8      	cbnz	r0, 8018022 <_svfiprintf_r+0xea>
 8017fea:	06d0      	lsls	r0, r2, #27
 8017fec:	bf44      	itt	mi
 8017fee:	2320      	movmi	r3, #32
 8017ff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017ff4:	0711      	lsls	r1, r2, #28
 8017ff6:	bf44      	itt	mi
 8017ff8:	232b      	movmi	r3, #43	@ 0x2b
 8017ffa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017ffe:	f89a 3000 	ldrb.w	r3, [sl]
 8018002:	2b2a      	cmp	r3, #42	@ 0x2a
 8018004:	d015      	beq.n	8018032 <_svfiprintf_r+0xfa>
 8018006:	9a07      	ldr	r2, [sp, #28]
 8018008:	4654      	mov	r4, sl
 801800a:	2000      	movs	r0, #0
 801800c:	f04f 0c0a 	mov.w	ip, #10
 8018010:	4621      	mov	r1, r4
 8018012:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018016:	3b30      	subs	r3, #48	@ 0x30
 8018018:	2b09      	cmp	r3, #9
 801801a:	d94b      	bls.n	80180b4 <_svfiprintf_r+0x17c>
 801801c:	b1b0      	cbz	r0, 801804c <_svfiprintf_r+0x114>
 801801e:	9207      	str	r2, [sp, #28]
 8018020:	e014      	b.n	801804c <_svfiprintf_r+0x114>
 8018022:	eba0 0308 	sub.w	r3, r0, r8
 8018026:	fa09 f303 	lsl.w	r3, r9, r3
 801802a:	4313      	orrs	r3, r2
 801802c:	9304      	str	r3, [sp, #16]
 801802e:	46a2      	mov	sl, r4
 8018030:	e7d2      	b.n	8017fd8 <_svfiprintf_r+0xa0>
 8018032:	9b03      	ldr	r3, [sp, #12]
 8018034:	1d19      	adds	r1, r3, #4
 8018036:	681b      	ldr	r3, [r3, #0]
 8018038:	9103      	str	r1, [sp, #12]
 801803a:	2b00      	cmp	r3, #0
 801803c:	bfbb      	ittet	lt
 801803e:	425b      	neglt	r3, r3
 8018040:	f042 0202 	orrlt.w	r2, r2, #2
 8018044:	9307      	strge	r3, [sp, #28]
 8018046:	9307      	strlt	r3, [sp, #28]
 8018048:	bfb8      	it	lt
 801804a:	9204      	strlt	r2, [sp, #16]
 801804c:	7823      	ldrb	r3, [r4, #0]
 801804e:	2b2e      	cmp	r3, #46	@ 0x2e
 8018050:	d10a      	bne.n	8018068 <_svfiprintf_r+0x130>
 8018052:	7863      	ldrb	r3, [r4, #1]
 8018054:	2b2a      	cmp	r3, #42	@ 0x2a
 8018056:	d132      	bne.n	80180be <_svfiprintf_r+0x186>
 8018058:	9b03      	ldr	r3, [sp, #12]
 801805a:	1d1a      	adds	r2, r3, #4
 801805c:	681b      	ldr	r3, [r3, #0]
 801805e:	9203      	str	r2, [sp, #12]
 8018060:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018064:	3402      	adds	r4, #2
 8018066:	9305      	str	r3, [sp, #20]
 8018068:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801812c <_svfiprintf_r+0x1f4>
 801806c:	7821      	ldrb	r1, [r4, #0]
 801806e:	2203      	movs	r2, #3
 8018070:	4650      	mov	r0, sl
 8018072:	f7e8 f8ed 	bl	8000250 <memchr>
 8018076:	b138      	cbz	r0, 8018088 <_svfiprintf_r+0x150>
 8018078:	9b04      	ldr	r3, [sp, #16]
 801807a:	eba0 000a 	sub.w	r0, r0, sl
 801807e:	2240      	movs	r2, #64	@ 0x40
 8018080:	4082      	lsls	r2, r0
 8018082:	4313      	orrs	r3, r2
 8018084:	3401      	adds	r4, #1
 8018086:	9304      	str	r3, [sp, #16]
 8018088:	f814 1b01 	ldrb.w	r1, [r4], #1
 801808c:	4824      	ldr	r0, [pc, #144]	@ (8018120 <_svfiprintf_r+0x1e8>)
 801808e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018092:	2206      	movs	r2, #6
 8018094:	f7e8 f8dc 	bl	8000250 <memchr>
 8018098:	2800      	cmp	r0, #0
 801809a:	d036      	beq.n	801810a <_svfiprintf_r+0x1d2>
 801809c:	4b21      	ldr	r3, [pc, #132]	@ (8018124 <_svfiprintf_r+0x1ec>)
 801809e:	bb1b      	cbnz	r3, 80180e8 <_svfiprintf_r+0x1b0>
 80180a0:	9b03      	ldr	r3, [sp, #12]
 80180a2:	3307      	adds	r3, #7
 80180a4:	f023 0307 	bic.w	r3, r3, #7
 80180a8:	3308      	adds	r3, #8
 80180aa:	9303      	str	r3, [sp, #12]
 80180ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80180ae:	4433      	add	r3, r6
 80180b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80180b2:	e76a      	b.n	8017f8a <_svfiprintf_r+0x52>
 80180b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80180b8:	460c      	mov	r4, r1
 80180ba:	2001      	movs	r0, #1
 80180bc:	e7a8      	b.n	8018010 <_svfiprintf_r+0xd8>
 80180be:	2300      	movs	r3, #0
 80180c0:	3401      	adds	r4, #1
 80180c2:	9305      	str	r3, [sp, #20]
 80180c4:	4619      	mov	r1, r3
 80180c6:	f04f 0c0a 	mov.w	ip, #10
 80180ca:	4620      	mov	r0, r4
 80180cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80180d0:	3a30      	subs	r2, #48	@ 0x30
 80180d2:	2a09      	cmp	r2, #9
 80180d4:	d903      	bls.n	80180de <_svfiprintf_r+0x1a6>
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	d0c6      	beq.n	8018068 <_svfiprintf_r+0x130>
 80180da:	9105      	str	r1, [sp, #20]
 80180dc:	e7c4      	b.n	8018068 <_svfiprintf_r+0x130>
 80180de:	fb0c 2101 	mla	r1, ip, r1, r2
 80180e2:	4604      	mov	r4, r0
 80180e4:	2301      	movs	r3, #1
 80180e6:	e7f0      	b.n	80180ca <_svfiprintf_r+0x192>
 80180e8:	ab03      	add	r3, sp, #12
 80180ea:	9300      	str	r3, [sp, #0]
 80180ec:	462a      	mov	r2, r5
 80180ee:	4b0e      	ldr	r3, [pc, #56]	@ (8018128 <_svfiprintf_r+0x1f0>)
 80180f0:	a904      	add	r1, sp, #16
 80180f2:	4638      	mov	r0, r7
 80180f4:	f3af 8000 	nop.w
 80180f8:	1c42      	adds	r2, r0, #1
 80180fa:	4606      	mov	r6, r0
 80180fc:	d1d6      	bne.n	80180ac <_svfiprintf_r+0x174>
 80180fe:	89ab      	ldrh	r3, [r5, #12]
 8018100:	065b      	lsls	r3, r3, #25
 8018102:	f53f af2d 	bmi.w	8017f60 <_svfiprintf_r+0x28>
 8018106:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018108:	e72c      	b.n	8017f64 <_svfiprintf_r+0x2c>
 801810a:	ab03      	add	r3, sp, #12
 801810c:	9300      	str	r3, [sp, #0]
 801810e:	462a      	mov	r2, r5
 8018110:	4b05      	ldr	r3, [pc, #20]	@ (8018128 <_svfiprintf_r+0x1f0>)
 8018112:	a904      	add	r1, sp, #16
 8018114:	4638      	mov	r0, r7
 8018116:	f000 f9bb 	bl	8018490 <_printf_i>
 801811a:	e7ed      	b.n	80180f8 <_svfiprintf_r+0x1c0>
 801811c:	08019974 	.word	0x08019974
 8018120:	0801997e 	.word	0x0801997e
 8018124:	00000000 	.word	0x00000000
 8018128:	08017e81 	.word	0x08017e81
 801812c:	0801997a 	.word	0x0801997a

08018130 <__sfputc_r>:
 8018130:	6893      	ldr	r3, [r2, #8]
 8018132:	3b01      	subs	r3, #1
 8018134:	2b00      	cmp	r3, #0
 8018136:	b410      	push	{r4}
 8018138:	6093      	str	r3, [r2, #8]
 801813a:	da08      	bge.n	801814e <__sfputc_r+0x1e>
 801813c:	6994      	ldr	r4, [r2, #24]
 801813e:	42a3      	cmp	r3, r4
 8018140:	db01      	blt.n	8018146 <__sfputc_r+0x16>
 8018142:	290a      	cmp	r1, #10
 8018144:	d103      	bne.n	801814e <__sfputc_r+0x1e>
 8018146:	f85d 4b04 	ldr.w	r4, [sp], #4
 801814a:	f000 bb7f 	b.w	801884c <__swbuf_r>
 801814e:	6813      	ldr	r3, [r2, #0]
 8018150:	1c58      	adds	r0, r3, #1
 8018152:	6010      	str	r0, [r2, #0]
 8018154:	7019      	strb	r1, [r3, #0]
 8018156:	4608      	mov	r0, r1
 8018158:	f85d 4b04 	ldr.w	r4, [sp], #4
 801815c:	4770      	bx	lr

0801815e <__sfputs_r>:
 801815e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018160:	4606      	mov	r6, r0
 8018162:	460f      	mov	r7, r1
 8018164:	4614      	mov	r4, r2
 8018166:	18d5      	adds	r5, r2, r3
 8018168:	42ac      	cmp	r4, r5
 801816a:	d101      	bne.n	8018170 <__sfputs_r+0x12>
 801816c:	2000      	movs	r0, #0
 801816e:	e007      	b.n	8018180 <__sfputs_r+0x22>
 8018170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018174:	463a      	mov	r2, r7
 8018176:	4630      	mov	r0, r6
 8018178:	f7ff ffda 	bl	8018130 <__sfputc_r>
 801817c:	1c43      	adds	r3, r0, #1
 801817e:	d1f3      	bne.n	8018168 <__sfputs_r+0xa>
 8018180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018184 <_vfiprintf_r>:
 8018184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018188:	460d      	mov	r5, r1
 801818a:	b09d      	sub	sp, #116	@ 0x74
 801818c:	4614      	mov	r4, r2
 801818e:	4698      	mov	r8, r3
 8018190:	4606      	mov	r6, r0
 8018192:	b118      	cbz	r0, 801819c <_vfiprintf_r+0x18>
 8018194:	6a03      	ldr	r3, [r0, #32]
 8018196:	b90b      	cbnz	r3, 801819c <_vfiprintf_r+0x18>
 8018198:	f7ff fbfc 	bl	8017994 <__sinit>
 801819c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801819e:	07d9      	lsls	r1, r3, #31
 80181a0:	d405      	bmi.n	80181ae <_vfiprintf_r+0x2a>
 80181a2:	89ab      	ldrh	r3, [r5, #12]
 80181a4:	059a      	lsls	r2, r3, #22
 80181a6:	d402      	bmi.n	80181ae <_vfiprintf_r+0x2a>
 80181a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80181aa:	f7ff fdd4 	bl	8017d56 <__retarget_lock_acquire_recursive>
 80181ae:	89ab      	ldrh	r3, [r5, #12]
 80181b0:	071b      	lsls	r3, r3, #28
 80181b2:	d501      	bpl.n	80181b8 <_vfiprintf_r+0x34>
 80181b4:	692b      	ldr	r3, [r5, #16]
 80181b6:	b99b      	cbnz	r3, 80181e0 <_vfiprintf_r+0x5c>
 80181b8:	4629      	mov	r1, r5
 80181ba:	4630      	mov	r0, r6
 80181bc:	f000 fb84 	bl	80188c8 <__swsetup_r>
 80181c0:	b170      	cbz	r0, 80181e0 <_vfiprintf_r+0x5c>
 80181c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80181c4:	07dc      	lsls	r4, r3, #31
 80181c6:	d504      	bpl.n	80181d2 <_vfiprintf_r+0x4e>
 80181c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80181cc:	b01d      	add	sp, #116	@ 0x74
 80181ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181d2:	89ab      	ldrh	r3, [r5, #12]
 80181d4:	0598      	lsls	r0, r3, #22
 80181d6:	d4f7      	bmi.n	80181c8 <_vfiprintf_r+0x44>
 80181d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80181da:	f7ff fdbd 	bl	8017d58 <__retarget_lock_release_recursive>
 80181de:	e7f3      	b.n	80181c8 <_vfiprintf_r+0x44>
 80181e0:	2300      	movs	r3, #0
 80181e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80181e4:	2320      	movs	r3, #32
 80181e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80181ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80181ee:	2330      	movs	r3, #48	@ 0x30
 80181f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80183a0 <_vfiprintf_r+0x21c>
 80181f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80181f8:	f04f 0901 	mov.w	r9, #1
 80181fc:	4623      	mov	r3, r4
 80181fe:	469a      	mov	sl, r3
 8018200:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018204:	b10a      	cbz	r2, 801820a <_vfiprintf_r+0x86>
 8018206:	2a25      	cmp	r2, #37	@ 0x25
 8018208:	d1f9      	bne.n	80181fe <_vfiprintf_r+0x7a>
 801820a:	ebba 0b04 	subs.w	fp, sl, r4
 801820e:	d00b      	beq.n	8018228 <_vfiprintf_r+0xa4>
 8018210:	465b      	mov	r3, fp
 8018212:	4622      	mov	r2, r4
 8018214:	4629      	mov	r1, r5
 8018216:	4630      	mov	r0, r6
 8018218:	f7ff ffa1 	bl	801815e <__sfputs_r>
 801821c:	3001      	adds	r0, #1
 801821e:	f000 80a7 	beq.w	8018370 <_vfiprintf_r+0x1ec>
 8018222:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018224:	445a      	add	r2, fp
 8018226:	9209      	str	r2, [sp, #36]	@ 0x24
 8018228:	f89a 3000 	ldrb.w	r3, [sl]
 801822c:	2b00      	cmp	r3, #0
 801822e:	f000 809f 	beq.w	8018370 <_vfiprintf_r+0x1ec>
 8018232:	2300      	movs	r3, #0
 8018234:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018238:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801823c:	f10a 0a01 	add.w	sl, sl, #1
 8018240:	9304      	str	r3, [sp, #16]
 8018242:	9307      	str	r3, [sp, #28]
 8018244:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018248:	931a      	str	r3, [sp, #104]	@ 0x68
 801824a:	4654      	mov	r4, sl
 801824c:	2205      	movs	r2, #5
 801824e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018252:	4853      	ldr	r0, [pc, #332]	@ (80183a0 <_vfiprintf_r+0x21c>)
 8018254:	f7e7 fffc 	bl	8000250 <memchr>
 8018258:	9a04      	ldr	r2, [sp, #16]
 801825a:	b9d8      	cbnz	r0, 8018294 <_vfiprintf_r+0x110>
 801825c:	06d1      	lsls	r1, r2, #27
 801825e:	bf44      	itt	mi
 8018260:	2320      	movmi	r3, #32
 8018262:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018266:	0713      	lsls	r3, r2, #28
 8018268:	bf44      	itt	mi
 801826a:	232b      	movmi	r3, #43	@ 0x2b
 801826c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018270:	f89a 3000 	ldrb.w	r3, [sl]
 8018274:	2b2a      	cmp	r3, #42	@ 0x2a
 8018276:	d015      	beq.n	80182a4 <_vfiprintf_r+0x120>
 8018278:	9a07      	ldr	r2, [sp, #28]
 801827a:	4654      	mov	r4, sl
 801827c:	2000      	movs	r0, #0
 801827e:	f04f 0c0a 	mov.w	ip, #10
 8018282:	4621      	mov	r1, r4
 8018284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018288:	3b30      	subs	r3, #48	@ 0x30
 801828a:	2b09      	cmp	r3, #9
 801828c:	d94b      	bls.n	8018326 <_vfiprintf_r+0x1a2>
 801828e:	b1b0      	cbz	r0, 80182be <_vfiprintf_r+0x13a>
 8018290:	9207      	str	r2, [sp, #28]
 8018292:	e014      	b.n	80182be <_vfiprintf_r+0x13a>
 8018294:	eba0 0308 	sub.w	r3, r0, r8
 8018298:	fa09 f303 	lsl.w	r3, r9, r3
 801829c:	4313      	orrs	r3, r2
 801829e:	9304      	str	r3, [sp, #16]
 80182a0:	46a2      	mov	sl, r4
 80182a2:	e7d2      	b.n	801824a <_vfiprintf_r+0xc6>
 80182a4:	9b03      	ldr	r3, [sp, #12]
 80182a6:	1d19      	adds	r1, r3, #4
 80182a8:	681b      	ldr	r3, [r3, #0]
 80182aa:	9103      	str	r1, [sp, #12]
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	bfbb      	ittet	lt
 80182b0:	425b      	neglt	r3, r3
 80182b2:	f042 0202 	orrlt.w	r2, r2, #2
 80182b6:	9307      	strge	r3, [sp, #28]
 80182b8:	9307      	strlt	r3, [sp, #28]
 80182ba:	bfb8      	it	lt
 80182bc:	9204      	strlt	r2, [sp, #16]
 80182be:	7823      	ldrb	r3, [r4, #0]
 80182c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80182c2:	d10a      	bne.n	80182da <_vfiprintf_r+0x156>
 80182c4:	7863      	ldrb	r3, [r4, #1]
 80182c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80182c8:	d132      	bne.n	8018330 <_vfiprintf_r+0x1ac>
 80182ca:	9b03      	ldr	r3, [sp, #12]
 80182cc:	1d1a      	adds	r2, r3, #4
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	9203      	str	r2, [sp, #12]
 80182d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80182d6:	3402      	adds	r4, #2
 80182d8:	9305      	str	r3, [sp, #20]
 80182da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80183b0 <_vfiprintf_r+0x22c>
 80182de:	7821      	ldrb	r1, [r4, #0]
 80182e0:	2203      	movs	r2, #3
 80182e2:	4650      	mov	r0, sl
 80182e4:	f7e7 ffb4 	bl	8000250 <memchr>
 80182e8:	b138      	cbz	r0, 80182fa <_vfiprintf_r+0x176>
 80182ea:	9b04      	ldr	r3, [sp, #16]
 80182ec:	eba0 000a 	sub.w	r0, r0, sl
 80182f0:	2240      	movs	r2, #64	@ 0x40
 80182f2:	4082      	lsls	r2, r0
 80182f4:	4313      	orrs	r3, r2
 80182f6:	3401      	adds	r4, #1
 80182f8:	9304      	str	r3, [sp, #16]
 80182fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80182fe:	4829      	ldr	r0, [pc, #164]	@ (80183a4 <_vfiprintf_r+0x220>)
 8018300:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018304:	2206      	movs	r2, #6
 8018306:	f7e7 ffa3 	bl	8000250 <memchr>
 801830a:	2800      	cmp	r0, #0
 801830c:	d03f      	beq.n	801838e <_vfiprintf_r+0x20a>
 801830e:	4b26      	ldr	r3, [pc, #152]	@ (80183a8 <_vfiprintf_r+0x224>)
 8018310:	bb1b      	cbnz	r3, 801835a <_vfiprintf_r+0x1d6>
 8018312:	9b03      	ldr	r3, [sp, #12]
 8018314:	3307      	adds	r3, #7
 8018316:	f023 0307 	bic.w	r3, r3, #7
 801831a:	3308      	adds	r3, #8
 801831c:	9303      	str	r3, [sp, #12]
 801831e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018320:	443b      	add	r3, r7
 8018322:	9309      	str	r3, [sp, #36]	@ 0x24
 8018324:	e76a      	b.n	80181fc <_vfiprintf_r+0x78>
 8018326:	fb0c 3202 	mla	r2, ip, r2, r3
 801832a:	460c      	mov	r4, r1
 801832c:	2001      	movs	r0, #1
 801832e:	e7a8      	b.n	8018282 <_vfiprintf_r+0xfe>
 8018330:	2300      	movs	r3, #0
 8018332:	3401      	adds	r4, #1
 8018334:	9305      	str	r3, [sp, #20]
 8018336:	4619      	mov	r1, r3
 8018338:	f04f 0c0a 	mov.w	ip, #10
 801833c:	4620      	mov	r0, r4
 801833e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018342:	3a30      	subs	r2, #48	@ 0x30
 8018344:	2a09      	cmp	r2, #9
 8018346:	d903      	bls.n	8018350 <_vfiprintf_r+0x1cc>
 8018348:	2b00      	cmp	r3, #0
 801834a:	d0c6      	beq.n	80182da <_vfiprintf_r+0x156>
 801834c:	9105      	str	r1, [sp, #20]
 801834e:	e7c4      	b.n	80182da <_vfiprintf_r+0x156>
 8018350:	fb0c 2101 	mla	r1, ip, r1, r2
 8018354:	4604      	mov	r4, r0
 8018356:	2301      	movs	r3, #1
 8018358:	e7f0      	b.n	801833c <_vfiprintf_r+0x1b8>
 801835a:	ab03      	add	r3, sp, #12
 801835c:	9300      	str	r3, [sp, #0]
 801835e:	462a      	mov	r2, r5
 8018360:	4b12      	ldr	r3, [pc, #72]	@ (80183ac <_vfiprintf_r+0x228>)
 8018362:	a904      	add	r1, sp, #16
 8018364:	4630      	mov	r0, r6
 8018366:	f3af 8000 	nop.w
 801836a:	4607      	mov	r7, r0
 801836c:	1c78      	adds	r0, r7, #1
 801836e:	d1d6      	bne.n	801831e <_vfiprintf_r+0x19a>
 8018370:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018372:	07d9      	lsls	r1, r3, #31
 8018374:	d405      	bmi.n	8018382 <_vfiprintf_r+0x1fe>
 8018376:	89ab      	ldrh	r3, [r5, #12]
 8018378:	059a      	lsls	r2, r3, #22
 801837a:	d402      	bmi.n	8018382 <_vfiprintf_r+0x1fe>
 801837c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801837e:	f7ff fceb 	bl	8017d58 <__retarget_lock_release_recursive>
 8018382:	89ab      	ldrh	r3, [r5, #12]
 8018384:	065b      	lsls	r3, r3, #25
 8018386:	f53f af1f 	bmi.w	80181c8 <_vfiprintf_r+0x44>
 801838a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801838c:	e71e      	b.n	80181cc <_vfiprintf_r+0x48>
 801838e:	ab03      	add	r3, sp, #12
 8018390:	9300      	str	r3, [sp, #0]
 8018392:	462a      	mov	r2, r5
 8018394:	4b05      	ldr	r3, [pc, #20]	@ (80183ac <_vfiprintf_r+0x228>)
 8018396:	a904      	add	r1, sp, #16
 8018398:	4630      	mov	r0, r6
 801839a:	f000 f879 	bl	8018490 <_printf_i>
 801839e:	e7e4      	b.n	801836a <_vfiprintf_r+0x1e6>
 80183a0:	08019974 	.word	0x08019974
 80183a4:	0801997e 	.word	0x0801997e
 80183a8:	00000000 	.word	0x00000000
 80183ac:	0801815f 	.word	0x0801815f
 80183b0:	0801997a 	.word	0x0801997a

080183b4 <_printf_common>:
 80183b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80183b8:	4616      	mov	r6, r2
 80183ba:	4698      	mov	r8, r3
 80183bc:	688a      	ldr	r2, [r1, #8]
 80183be:	690b      	ldr	r3, [r1, #16]
 80183c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80183c4:	4293      	cmp	r3, r2
 80183c6:	bfb8      	it	lt
 80183c8:	4613      	movlt	r3, r2
 80183ca:	6033      	str	r3, [r6, #0]
 80183cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80183d0:	4607      	mov	r7, r0
 80183d2:	460c      	mov	r4, r1
 80183d4:	b10a      	cbz	r2, 80183da <_printf_common+0x26>
 80183d6:	3301      	adds	r3, #1
 80183d8:	6033      	str	r3, [r6, #0]
 80183da:	6823      	ldr	r3, [r4, #0]
 80183dc:	0699      	lsls	r1, r3, #26
 80183de:	bf42      	ittt	mi
 80183e0:	6833      	ldrmi	r3, [r6, #0]
 80183e2:	3302      	addmi	r3, #2
 80183e4:	6033      	strmi	r3, [r6, #0]
 80183e6:	6825      	ldr	r5, [r4, #0]
 80183e8:	f015 0506 	ands.w	r5, r5, #6
 80183ec:	d106      	bne.n	80183fc <_printf_common+0x48>
 80183ee:	f104 0a19 	add.w	sl, r4, #25
 80183f2:	68e3      	ldr	r3, [r4, #12]
 80183f4:	6832      	ldr	r2, [r6, #0]
 80183f6:	1a9b      	subs	r3, r3, r2
 80183f8:	42ab      	cmp	r3, r5
 80183fa:	dc26      	bgt.n	801844a <_printf_common+0x96>
 80183fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018400:	6822      	ldr	r2, [r4, #0]
 8018402:	3b00      	subs	r3, #0
 8018404:	bf18      	it	ne
 8018406:	2301      	movne	r3, #1
 8018408:	0692      	lsls	r2, r2, #26
 801840a:	d42b      	bmi.n	8018464 <_printf_common+0xb0>
 801840c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018410:	4641      	mov	r1, r8
 8018412:	4638      	mov	r0, r7
 8018414:	47c8      	blx	r9
 8018416:	3001      	adds	r0, #1
 8018418:	d01e      	beq.n	8018458 <_printf_common+0xa4>
 801841a:	6823      	ldr	r3, [r4, #0]
 801841c:	6922      	ldr	r2, [r4, #16]
 801841e:	f003 0306 	and.w	r3, r3, #6
 8018422:	2b04      	cmp	r3, #4
 8018424:	bf02      	ittt	eq
 8018426:	68e5      	ldreq	r5, [r4, #12]
 8018428:	6833      	ldreq	r3, [r6, #0]
 801842a:	1aed      	subeq	r5, r5, r3
 801842c:	68a3      	ldr	r3, [r4, #8]
 801842e:	bf0c      	ite	eq
 8018430:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018434:	2500      	movne	r5, #0
 8018436:	4293      	cmp	r3, r2
 8018438:	bfc4      	itt	gt
 801843a:	1a9b      	subgt	r3, r3, r2
 801843c:	18ed      	addgt	r5, r5, r3
 801843e:	2600      	movs	r6, #0
 8018440:	341a      	adds	r4, #26
 8018442:	42b5      	cmp	r5, r6
 8018444:	d11a      	bne.n	801847c <_printf_common+0xc8>
 8018446:	2000      	movs	r0, #0
 8018448:	e008      	b.n	801845c <_printf_common+0xa8>
 801844a:	2301      	movs	r3, #1
 801844c:	4652      	mov	r2, sl
 801844e:	4641      	mov	r1, r8
 8018450:	4638      	mov	r0, r7
 8018452:	47c8      	blx	r9
 8018454:	3001      	adds	r0, #1
 8018456:	d103      	bne.n	8018460 <_printf_common+0xac>
 8018458:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801845c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018460:	3501      	adds	r5, #1
 8018462:	e7c6      	b.n	80183f2 <_printf_common+0x3e>
 8018464:	18e1      	adds	r1, r4, r3
 8018466:	1c5a      	adds	r2, r3, #1
 8018468:	2030      	movs	r0, #48	@ 0x30
 801846a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801846e:	4422      	add	r2, r4
 8018470:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018474:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018478:	3302      	adds	r3, #2
 801847a:	e7c7      	b.n	801840c <_printf_common+0x58>
 801847c:	2301      	movs	r3, #1
 801847e:	4622      	mov	r2, r4
 8018480:	4641      	mov	r1, r8
 8018482:	4638      	mov	r0, r7
 8018484:	47c8      	blx	r9
 8018486:	3001      	adds	r0, #1
 8018488:	d0e6      	beq.n	8018458 <_printf_common+0xa4>
 801848a:	3601      	adds	r6, #1
 801848c:	e7d9      	b.n	8018442 <_printf_common+0x8e>
	...

08018490 <_printf_i>:
 8018490:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018494:	7e0f      	ldrb	r7, [r1, #24]
 8018496:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018498:	2f78      	cmp	r7, #120	@ 0x78
 801849a:	4691      	mov	r9, r2
 801849c:	4680      	mov	r8, r0
 801849e:	460c      	mov	r4, r1
 80184a0:	469a      	mov	sl, r3
 80184a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80184a6:	d807      	bhi.n	80184b8 <_printf_i+0x28>
 80184a8:	2f62      	cmp	r7, #98	@ 0x62
 80184aa:	d80a      	bhi.n	80184c2 <_printf_i+0x32>
 80184ac:	2f00      	cmp	r7, #0
 80184ae:	f000 80d2 	beq.w	8018656 <_printf_i+0x1c6>
 80184b2:	2f58      	cmp	r7, #88	@ 0x58
 80184b4:	f000 80b9 	beq.w	801862a <_printf_i+0x19a>
 80184b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80184bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80184c0:	e03a      	b.n	8018538 <_printf_i+0xa8>
 80184c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80184c6:	2b15      	cmp	r3, #21
 80184c8:	d8f6      	bhi.n	80184b8 <_printf_i+0x28>
 80184ca:	a101      	add	r1, pc, #4	@ (adr r1, 80184d0 <_printf_i+0x40>)
 80184cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80184d0:	08018529 	.word	0x08018529
 80184d4:	0801853d 	.word	0x0801853d
 80184d8:	080184b9 	.word	0x080184b9
 80184dc:	080184b9 	.word	0x080184b9
 80184e0:	080184b9 	.word	0x080184b9
 80184e4:	080184b9 	.word	0x080184b9
 80184e8:	0801853d 	.word	0x0801853d
 80184ec:	080184b9 	.word	0x080184b9
 80184f0:	080184b9 	.word	0x080184b9
 80184f4:	080184b9 	.word	0x080184b9
 80184f8:	080184b9 	.word	0x080184b9
 80184fc:	0801863d 	.word	0x0801863d
 8018500:	08018567 	.word	0x08018567
 8018504:	080185f7 	.word	0x080185f7
 8018508:	080184b9 	.word	0x080184b9
 801850c:	080184b9 	.word	0x080184b9
 8018510:	0801865f 	.word	0x0801865f
 8018514:	080184b9 	.word	0x080184b9
 8018518:	08018567 	.word	0x08018567
 801851c:	080184b9 	.word	0x080184b9
 8018520:	080184b9 	.word	0x080184b9
 8018524:	080185ff 	.word	0x080185ff
 8018528:	6833      	ldr	r3, [r6, #0]
 801852a:	1d1a      	adds	r2, r3, #4
 801852c:	681b      	ldr	r3, [r3, #0]
 801852e:	6032      	str	r2, [r6, #0]
 8018530:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018534:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018538:	2301      	movs	r3, #1
 801853a:	e09d      	b.n	8018678 <_printf_i+0x1e8>
 801853c:	6833      	ldr	r3, [r6, #0]
 801853e:	6820      	ldr	r0, [r4, #0]
 8018540:	1d19      	adds	r1, r3, #4
 8018542:	6031      	str	r1, [r6, #0]
 8018544:	0606      	lsls	r6, r0, #24
 8018546:	d501      	bpl.n	801854c <_printf_i+0xbc>
 8018548:	681d      	ldr	r5, [r3, #0]
 801854a:	e003      	b.n	8018554 <_printf_i+0xc4>
 801854c:	0645      	lsls	r5, r0, #25
 801854e:	d5fb      	bpl.n	8018548 <_printf_i+0xb8>
 8018550:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018554:	2d00      	cmp	r5, #0
 8018556:	da03      	bge.n	8018560 <_printf_i+0xd0>
 8018558:	232d      	movs	r3, #45	@ 0x2d
 801855a:	426d      	negs	r5, r5
 801855c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018560:	4859      	ldr	r0, [pc, #356]	@ (80186c8 <_printf_i+0x238>)
 8018562:	230a      	movs	r3, #10
 8018564:	e011      	b.n	801858a <_printf_i+0xfa>
 8018566:	6821      	ldr	r1, [r4, #0]
 8018568:	6833      	ldr	r3, [r6, #0]
 801856a:	0608      	lsls	r0, r1, #24
 801856c:	f853 5b04 	ldr.w	r5, [r3], #4
 8018570:	d402      	bmi.n	8018578 <_printf_i+0xe8>
 8018572:	0649      	lsls	r1, r1, #25
 8018574:	bf48      	it	mi
 8018576:	b2ad      	uxthmi	r5, r5
 8018578:	2f6f      	cmp	r7, #111	@ 0x6f
 801857a:	4853      	ldr	r0, [pc, #332]	@ (80186c8 <_printf_i+0x238>)
 801857c:	6033      	str	r3, [r6, #0]
 801857e:	bf14      	ite	ne
 8018580:	230a      	movne	r3, #10
 8018582:	2308      	moveq	r3, #8
 8018584:	2100      	movs	r1, #0
 8018586:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801858a:	6866      	ldr	r6, [r4, #4]
 801858c:	60a6      	str	r6, [r4, #8]
 801858e:	2e00      	cmp	r6, #0
 8018590:	bfa2      	ittt	ge
 8018592:	6821      	ldrge	r1, [r4, #0]
 8018594:	f021 0104 	bicge.w	r1, r1, #4
 8018598:	6021      	strge	r1, [r4, #0]
 801859a:	b90d      	cbnz	r5, 80185a0 <_printf_i+0x110>
 801859c:	2e00      	cmp	r6, #0
 801859e:	d04b      	beq.n	8018638 <_printf_i+0x1a8>
 80185a0:	4616      	mov	r6, r2
 80185a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80185a6:	fb03 5711 	mls	r7, r3, r1, r5
 80185aa:	5dc7      	ldrb	r7, [r0, r7]
 80185ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80185b0:	462f      	mov	r7, r5
 80185b2:	42bb      	cmp	r3, r7
 80185b4:	460d      	mov	r5, r1
 80185b6:	d9f4      	bls.n	80185a2 <_printf_i+0x112>
 80185b8:	2b08      	cmp	r3, #8
 80185ba:	d10b      	bne.n	80185d4 <_printf_i+0x144>
 80185bc:	6823      	ldr	r3, [r4, #0]
 80185be:	07df      	lsls	r7, r3, #31
 80185c0:	d508      	bpl.n	80185d4 <_printf_i+0x144>
 80185c2:	6923      	ldr	r3, [r4, #16]
 80185c4:	6861      	ldr	r1, [r4, #4]
 80185c6:	4299      	cmp	r1, r3
 80185c8:	bfde      	ittt	le
 80185ca:	2330      	movle	r3, #48	@ 0x30
 80185cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80185d0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80185d4:	1b92      	subs	r2, r2, r6
 80185d6:	6122      	str	r2, [r4, #16]
 80185d8:	f8cd a000 	str.w	sl, [sp]
 80185dc:	464b      	mov	r3, r9
 80185de:	aa03      	add	r2, sp, #12
 80185e0:	4621      	mov	r1, r4
 80185e2:	4640      	mov	r0, r8
 80185e4:	f7ff fee6 	bl	80183b4 <_printf_common>
 80185e8:	3001      	adds	r0, #1
 80185ea:	d14a      	bne.n	8018682 <_printf_i+0x1f2>
 80185ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80185f0:	b004      	add	sp, #16
 80185f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80185f6:	6823      	ldr	r3, [r4, #0]
 80185f8:	f043 0320 	orr.w	r3, r3, #32
 80185fc:	6023      	str	r3, [r4, #0]
 80185fe:	4833      	ldr	r0, [pc, #204]	@ (80186cc <_printf_i+0x23c>)
 8018600:	2778      	movs	r7, #120	@ 0x78
 8018602:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018606:	6823      	ldr	r3, [r4, #0]
 8018608:	6831      	ldr	r1, [r6, #0]
 801860a:	061f      	lsls	r7, r3, #24
 801860c:	f851 5b04 	ldr.w	r5, [r1], #4
 8018610:	d402      	bmi.n	8018618 <_printf_i+0x188>
 8018612:	065f      	lsls	r7, r3, #25
 8018614:	bf48      	it	mi
 8018616:	b2ad      	uxthmi	r5, r5
 8018618:	6031      	str	r1, [r6, #0]
 801861a:	07d9      	lsls	r1, r3, #31
 801861c:	bf44      	itt	mi
 801861e:	f043 0320 	orrmi.w	r3, r3, #32
 8018622:	6023      	strmi	r3, [r4, #0]
 8018624:	b11d      	cbz	r5, 801862e <_printf_i+0x19e>
 8018626:	2310      	movs	r3, #16
 8018628:	e7ac      	b.n	8018584 <_printf_i+0xf4>
 801862a:	4827      	ldr	r0, [pc, #156]	@ (80186c8 <_printf_i+0x238>)
 801862c:	e7e9      	b.n	8018602 <_printf_i+0x172>
 801862e:	6823      	ldr	r3, [r4, #0]
 8018630:	f023 0320 	bic.w	r3, r3, #32
 8018634:	6023      	str	r3, [r4, #0]
 8018636:	e7f6      	b.n	8018626 <_printf_i+0x196>
 8018638:	4616      	mov	r6, r2
 801863a:	e7bd      	b.n	80185b8 <_printf_i+0x128>
 801863c:	6833      	ldr	r3, [r6, #0]
 801863e:	6825      	ldr	r5, [r4, #0]
 8018640:	6961      	ldr	r1, [r4, #20]
 8018642:	1d18      	adds	r0, r3, #4
 8018644:	6030      	str	r0, [r6, #0]
 8018646:	062e      	lsls	r6, r5, #24
 8018648:	681b      	ldr	r3, [r3, #0]
 801864a:	d501      	bpl.n	8018650 <_printf_i+0x1c0>
 801864c:	6019      	str	r1, [r3, #0]
 801864e:	e002      	b.n	8018656 <_printf_i+0x1c6>
 8018650:	0668      	lsls	r0, r5, #25
 8018652:	d5fb      	bpl.n	801864c <_printf_i+0x1bc>
 8018654:	8019      	strh	r1, [r3, #0]
 8018656:	2300      	movs	r3, #0
 8018658:	6123      	str	r3, [r4, #16]
 801865a:	4616      	mov	r6, r2
 801865c:	e7bc      	b.n	80185d8 <_printf_i+0x148>
 801865e:	6833      	ldr	r3, [r6, #0]
 8018660:	1d1a      	adds	r2, r3, #4
 8018662:	6032      	str	r2, [r6, #0]
 8018664:	681e      	ldr	r6, [r3, #0]
 8018666:	6862      	ldr	r2, [r4, #4]
 8018668:	2100      	movs	r1, #0
 801866a:	4630      	mov	r0, r6
 801866c:	f7e7 fdf0 	bl	8000250 <memchr>
 8018670:	b108      	cbz	r0, 8018676 <_printf_i+0x1e6>
 8018672:	1b80      	subs	r0, r0, r6
 8018674:	6060      	str	r0, [r4, #4]
 8018676:	6863      	ldr	r3, [r4, #4]
 8018678:	6123      	str	r3, [r4, #16]
 801867a:	2300      	movs	r3, #0
 801867c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018680:	e7aa      	b.n	80185d8 <_printf_i+0x148>
 8018682:	6923      	ldr	r3, [r4, #16]
 8018684:	4632      	mov	r2, r6
 8018686:	4649      	mov	r1, r9
 8018688:	4640      	mov	r0, r8
 801868a:	47d0      	blx	sl
 801868c:	3001      	adds	r0, #1
 801868e:	d0ad      	beq.n	80185ec <_printf_i+0x15c>
 8018690:	6823      	ldr	r3, [r4, #0]
 8018692:	079b      	lsls	r3, r3, #30
 8018694:	d413      	bmi.n	80186be <_printf_i+0x22e>
 8018696:	68e0      	ldr	r0, [r4, #12]
 8018698:	9b03      	ldr	r3, [sp, #12]
 801869a:	4298      	cmp	r0, r3
 801869c:	bfb8      	it	lt
 801869e:	4618      	movlt	r0, r3
 80186a0:	e7a6      	b.n	80185f0 <_printf_i+0x160>
 80186a2:	2301      	movs	r3, #1
 80186a4:	4632      	mov	r2, r6
 80186a6:	4649      	mov	r1, r9
 80186a8:	4640      	mov	r0, r8
 80186aa:	47d0      	blx	sl
 80186ac:	3001      	adds	r0, #1
 80186ae:	d09d      	beq.n	80185ec <_printf_i+0x15c>
 80186b0:	3501      	adds	r5, #1
 80186b2:	68e3      	ldr	r3, [r4, #12]
 80186b4:	9903      	ldr	r1, [sp, #12]
 80186b6:	1a5b      	subs	r3, r3, r1
 80186b8:	42ab      	cmp	r3, r5
 80186ba:	dcf2      	bgt.n	80186a2 <_printf_i+0x212>
 80186bc:	e7eb      	b.n	8018696 <_printf_i+0x206>
 80186be:	2500      	movs	r5, #0
 80186c0:	f104 0619 	add.w	r6, r4, #25
 80186c4:	e7f5      	b.n	80186b2 <_printf_i+0x222>
 80186c6:	bf00      	nop
 80186c8:	08019985 	.word	0x08019985
 80186cc:	08019996 	.word	0x08019996

080186d0 <__sflush_r>:
 80186d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80186d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186d8:	0716      	lsls	r6, r2, #28
 80186da:	4605      	mov	r5, r0
 80186dc:	460c      	mov	r4, r1
 80186de:	d454      	bmi.n	801878a <__sflush_r+0xba>
 80186e0:	684b      	ldr	r3, [r1, #4]
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	dc02      	bgt.n	80186ec <__sflush_r+0x1c>
 80186e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	dd48      	ble.n	801877e <__sflush_r+0xae>
 80186ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80186ee:	2e00      	cmp	r6, #0
 80186f0:	d045      	beq.n	801877e <__sflush_r+0xae>
 80186f2:	2300      	movs	r3, #0
 80186f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80186f8:	682f      	ldr	r7, [r5, #0]
 80186fa:	6a21      	ldr	r1, [r4, #32]
 80186fc:	602b      	str	r3, [r5, #0]
 80186fe:	d030      	beq.n	8018762 <__sflush_r+0x92>
 8018700:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018702:	89a3      	ldrh	r3, [r4, #12]
 8018704:	0759      	lsls	r1, r3, #29
 8018706:	d505      	bpl.n	8018714 <__sflush_r+0x44>
 8018708:	6863      	ldr	r3, [r4, #4]
 801870a:	1ad2      	subs	r2, r2, r3
 801870c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801870e:	b10b      	cbz	r3, 8018714 <__sflush_r+0x44>
 8018710:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018712:	1ad2      	subs	r2, r2, r3
 8018714:	2300      	movs	r3, #0
 8018716:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018718:	6a21      	ldr	r1, [r4, #32]
 801871a:	4628      	mov	r0, r5
 801871c:	47b0      	blx	r6
 801871e:	1c43      	adds	r3, r0, #1
 8018720:	89a3      	ldrh	r3, [r4, #12]
 8018722:	d106      	bne.n	8018732 <__sflush_r+0x62>
 8018724:	6829      	ldr	r1, [r5, #0]
 8018726:	291d      	cmp	r1, #29
 8018728:	d82b      	bhi.n	8018782 <__sflush_r+0xb2>
 801872a:	4a2a      	ldr	r2, [pc, #168]	@ (80187d4 <__sflush_r+0x104>)
 801872c:	410a      	asrs	r2, r1
 801872e:	07d6      	lsls	r6, r2, #31
 8018730:	d427      	bmi.n	8018782 <__sflush_r+0xb2>
 8018732:	2200      	movs	r2, #0
 8018734:	6062      	str	r2, [r4, #4]
 8018736:	04d9      	lsls	r1, r3, #19
 8018738:	6922      	ldr	r2, [r4, #16]
 801873a:	6022      	str	r2, [r4, #0]
 801873c:	d504      	bpl.n	8018748 <__sflush_r+0x78>
 801873e:	1c42      	adds	r2, r0, #1
 8018740:	d101      	bne.n	8018746 <__sflush_r+0x76>
 8018742:	682b      	ldr	r3, [r5, #0]
 8018744:	b903      	cbnz	r3, 8018748 <__sflush_r+0x78>
 8018746:	6560      	str	r0, [r4, #84]	@ 0x54
 8018748:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801874a:	602f      	str	r7, [r5, #0]
 801874c:	b1b9      	cbz	r1, 801877e <__sflush_r+0xae>
 801874e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018752:	4299      	cmp	r1, r3
 8018754:	d002      	beq.n	801875c <__sflush_r+0x8c>
 8018756:	4628      	mov	r0, r5
 8018758:	f7ff fb40 	bl	8017ddc <_free_r>
 801875c:	2300      	movs	r3, #0
 801875e:	6363      	str	r3, [r4, #52]	@ 0x34
 8018760:	e00d      	b.n	801877e <__sflush_r+0xae>
 8018762:	2301      	movs	r3, #1
 8018764:	4628      	mov	r0, r5
 8018766:	47b0      	blx	r6
 8018768:	4602      	mov	r2, r0
 801876a:	1c50      	adds	r0, r2, #1
 801876c:	d1c9      	bne.n	8018702 <__sflush_r+0x32>
 801876e:	682b      	ldr	r3, [r5, #0]
 8018770:	2b00      	cmp	r3, #0
 8018772:	d0c6      	beq.n	8018702 <__sflush_r+0x32>
 8018774:	2b1d      	cmp	r3, #29
 8018776:	d001      	beq.n	801877c <__sflush_r+0xac>
 8018778:	2b16      	cmp	r3, #22
 801877a:	d11e      	bne.n	80187ba <__sflush_r+0xea>
 801877c:	602f      	str	r7, [r5, #0]
 801877e:	2000      	movs	r0, #0
 8018780:	e022      	b.n	80187c8 <__sflush_r+0xf8>
 8018782:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018786:	b21b      	sxth	r3, r3
 8018788:	e01b      	b.n	80187c2 <__sflush_r+0xf2>
 801878a:	690f      	ldr	r7, [r1, #16]
 801878c:	2f00      	cmp	r7, #0
 801878e:	d0f6      	beq.n	801877e <__sflush_r+0xae>
 8018790:	0793      	lsls	r3, r2, #30
 8018792:	680e      	ldr	r6, [r1, #0]
 8018794:	bf08      	it	eq
 8018796:	694b      	ldreq	r3, [r1, #20]
 8018798:	600f      	str	r7, [r1, #0]
 801879a:	bf18      	it	ne
 801879c:	2300      	movne	r3, #0
 801879e:	eba6 0807 	sub.w	r8, r6, r7
 80187a2:	608b      	str	r3, [r1, #8]
 80187a4:	f1b8 0f00 	cmp.w	r8, #0
 80187a8:	dde9      	ble.n	801877e <__sflush_r+0xae>
 80187aa:	6a21      	ldr	r1, [r4, #32]
 80187ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80187ae:	4643      	mov	r3, r8
 80187b0:	463a      	mov	r2, r7
 80187b2:	4628      	mov	r0, r5
 80187b4:	47b0      	blx	r6
 80187b6:	2800      	cmp	r0, #0
 80187b8:	dc08      	bgt.n	80187cc <__sflush_r+0xfc>
 80187ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80187be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80187c2:	81a3      	strh	r3, [r4, #12]
 80187c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80187c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187cc:	4407      	add	r7, r0
 80187ce:	eba8 0800 	sub.w	r8, r8, r0
 80187d2:	e7e7      	b.n	80187a4 <__sflush_r+0xd4>
 80187d4:	dfbffffe 	.word	0xdfbffffe

080187d8 <_fflush_r>:
 80187d8:	b538      	push	{r3, r4, r5, lr}
 80187da:	690b      	ldr	r3, [r1, #16]
 80187dc:	4605      	mov	r5, r0
 80187de:	460c      	mov	r4, r1
 80187e0:	b913      	cbnz	r3, 80187e8 <_fflush_r+0x10>
 80187e2:	2500      	movs	r5, #0
 80187e4:	4628      	mov	r0, r5
 80187e6:	bd38      	pop	{r3, r4, r5, pc}
 80187e8:	b118      	cbz	r0, 80187f2 <_fflush_r+0x1a>
 80187ea:	6a03      	ldr	r3, [r0, #32]
 80187ec:	b90b      	cbnz	r3, 80187f2 <_fflush_r+0x1a>
 80187ee:	f7ff f8d1 	bl	8017994 <__sinit>
 80187f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	d0f3      	beq.n	80187e2 <_fflush_r+0xa>
 80187fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80187fc:	07d0      	lsls	r0, r2, #31
 80187fe:	d404      	bmi.n	801880a <_fflush_r+0x32>
 8018800:	0599      	lsls	r1, r3, #22
 8018802:	d402      	bmi.n	801880a <_fflush_r+0x32>
 8018804:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018806:	f7ff faa6 	bl	8017d56 <__retarget_lock_acquire_recursive>
 801880a:	4628      	mov	r0, r5
 801880c:	4621      	mov	r1, r4
 801880e:	f7ff ff5f 	bl	80186d0 <__sflush_r>
 8018812:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018814:	07da      	lsls	r2, r3, #31
 8018816:	4605      	mov	r5, r0
 8018818:	d4e4      	bmi.n	80187e4 <_fflush_r+0xc>
 801881a:	89a3      	ldrh	r3, [r4, #12]
 801881c:	059b      	lsls	r3, r3, #22
 801881e:	d4e1      	bmi.n	80187e4 <_fflush_r+0xc>
 8018820:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018822:	f7ff fa99 	bl	8017d58 <__retarget_lock_release_recursive>
 8018826:	e7dd      	b.n	80187e4 <_fflush_r+0xc>

08018828 <fiprintf>:
 8018828:	b40e      	push	{r1, r2, r3}
 801882a:	b503      	push	{r0, r1, lr}
 801882c:	4601      	mov	r1, r0
 801882e:	ab03      	add	r3, sp, #12
 8018830:	4805      	ldr	r0, [pc, #20]	@ (8018848 <fiprintf+0x20>)
 8018832:	f853 2b04 	ldr.w	r2, [r3], #4
 8018836:	6800      	ldr	r0, [r0, #0]
 8018838:	9301      	str	r3, [sp, #4]
 801883a:	f7ff fca3 	bl	8018184 <_vfiprintf_r>
 801883e:	b002      	add	sp, #8
 8018840:	f85d eb04 	ldr.w	lr, [sp], #4
 8018844:	b003      	add	sp, #12
 8018846:	4770      	bx	lr
 8018848:	200000c0 	.word	0x200000c0

0801884c <__swbuf_r>:
 801884c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801884e:	460e      	mov	r6, r1
 8018850:	4614      	mov	r4, r2
 8018852:	4605      	mov	r5, r0
 8018854:	b118      	cbz	r0, 801885e <__swbuf_r+0x12>
 8018856:	6a03      	ldr	r3, [r0, #32]
 8018858:	b90b      	cbnz	r3, 801885e <__swbuf_r+0x12>
 801885a:	f7ff f89b 	bl	8017994 <__sinit>
 801885e:	69a3      	ldr	r3, [r4, #24]
 8018860:	60a3      	str	r3, [r4, #8]
 8018862:	89a3      	ldrh	r3, [r4, #12]
 8018864:	071a      	lsls	r2, r3, #28
 8018866:	d501      	bpl.n	801886c <__swbuf_r+0x20>
 8018868:	6923      	ldr	r3, [r4, #16]
 801886a:	b943      	cbnz	r3, 801887e <__swbuf_r+0x32>
 801886c:	4621      	mov	r1, r4
 801886e:	4628      	mov	r0, r5
 8018870:	f000 f82a 	bl	80188c8 <__swsetup_r>
 8018874:	b118      	cbz	r0, 801887e <__swbuf_r+0x32>
 8018876:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801887a:	4638      	mov	r0, r7
 801887c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801887e:	6823      	ldr	r3, [r4, #0]
 8018880:	6922      	ldr	r2, [r4, #16]
 8018882:	1a98      	subs	r0, r3, r2
 8018884:	6963      	ldr	r3, [r4, #20]
 8018886:	b2f6      	uxtb	r6, r6
 8018888:	4283      	cmp	r3, r0
 801888a:	4637      	mov	r7, r6
 801888c:	dc05      	bgt.n	801889a <__swbuf_r+0x4e>
 801888e:	4621      	mov	r1, r4
 8018890:	4628      	mov	r0, r5
 8018892:	f7ff ffa1 	bl	80187d8 <_fflush_r>
 8018896:	2800      	cmp	r0, #0
 8018898:	d1ed      	bne.n	8018876 <__swbuf_r+0x2a>
 801889a:	68a3      	ldr	r3, [r4, #8]
 801889c:	3b01      	subs	r3, #1
 801889e:	60a3      	str	r3, [r4, #8]
 80188a0:	6823      	ldr	r3, [r4, #0]
 80188a2:	1c5a      	adds	r2, r3, #1
 80188a4:	6022      	str	r2, [r4, #0]
 80188a6:	701e      	strb	r6, [r3, #0]
 80188a8:	6962      	ldr	r2, [r4, #20]
 80188aa:	1c43      	adds	r3, r0, #1
 80188ac:	429a      	cmp	r2, r3
 80188ae:	d004      	beq.n	80188ba <__swbuf_r+0x6e>
 80188b0:	89a3      	ldrh	r3, [r4, #12]
 80188b2:	07db      	lsls	r3, r3, #31
 80188b4:	d5e1      	bpl.n	801887a <__swbuf_r+0x2e>
 80188b6:	2e0a      	cmp	r6, #10
 80188b8:	d1df      	bne.n	801887a <__swbuf_r+0x2e>
 80188ba:	4621      	mov	r1, r4
 80188bc:	4628      	mov	r0, r5
 80188be:	f7ff ff8b 	bl	80187d8 <_fflush_r>
 80188c2:	2800      	cmp	r0, #0
 80188c4:	d0d9      	beq.n	801887a <__swbuf_r+0x2e>
 80188c6:	e7d6      	b.n	8018876 <__swbuf_r+0x2a>

080188c8 <__swsetup_r>:
 80188c8:	b538      	push	{r3, r4, r5, lr}
 80188ca:	4b29      	ldr	r3, [pc, #164]	@ (8018970 <__swsetup_r+0xa8>)
 80188cc:	4605      	mov	r5, r0
 80188ce:	6818      	ldr	r0, [r3, #0]
 80188d0:	460c      	mov	r4, r1
 80188d2:	b118      	cbz	r0, 80188dc <__swsetup_r+0x14>
 80188d4:	6a03      	ldr	r3, [r0, #32]
 80188d6:	b90b      	cbnz	r3, 80188dc <__swsetup_r+0x14>
 80188d8:	f7ff f85c 	bl	8017994 <__sinit>
 80188dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80188e0:	0719      	lsls	r1, r3, #28
 80188e2:	d422      	bmi.n	801892a <__swsetup_r+0x62>
 80188e4:	06da      	lsls	r2, r3, #27
 80188e6:	d407      	bmi.n	80188f8 <__swsetup_r+0x30>
 80188e8:	2209      	movs	r2, #9
 80188ea:	602a      	str	r2, [r5, #0]
 80188ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80188f0:	81a3      	strh	r3, [r4, #12]
 80188f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80188f6:	e033      	b.n	8018960 <__swsetup_r+0x98>
 80188f8:	0758      	lsls	r0, r3, #29
 80188fa:	d512      	bpl.n	8018922 <__swsetup_r+0x5a>
 80188fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80188fe:	b141      	cbz	r1, 8018912 <__swsetup_r+0x4a>
 8018900:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018904:	4299      	cmp	r1, r3
 8018906:	d002      	beq.n	801890e <__swsetup_r+0x46>
 8018908:	4628      	mov	r0, r5
 801890a:	f7ff fa67 	bl	8017ddc <_free_r>
 801890e:	2300      	movs	r3, #0
 8018910:	6363      	str	r3, [r4, #52]	@ 0x34
 8018912:	89a3      	ldrh	r3, [r4, #12]
 8018914:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018918:	81a3      	strh	r3, [r4, #12]
 801891a:	2300      	movs	r3, #0
 801891c:	6063      	str	r3, [r4, #4]
 801891e:	6923      	ldr	r3, [r4, #16]
 8018920:	6023      	str	r3, [r4, #0]
 8018922:	89a3      	ldrh	r3, [r4, #12]
 8018924:	f043 0308 	orr.w	r3, r3, #8
 8018928:	81a3      	strh	r3, [r4, #12]
 801892a:	6923      	ldr	r3, [r4, #16]
 801892c:	b94b      	cbnz	r3, 8018942 <__swsetup_r+0x7a>
 801892e:	89a3      	ldrh	r3, [r4, #12]
 8018930:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018934:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018938:	d003      	beq.n	8018942 <__swsetup_r+0x7a>
 801893a:	4621      	mov	r1, r4
 801893c:	4628      	mov	r0, r5
 801893e:	f000 f846 	bl	80189ce <__smakebuf_r>
 8018942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018946:	f013 0201 	ands.w	r2, r3, #1
 801894a:	d00a      	beq.n	8018962 <__swsetup_r+0x9a>
 801894c:	2200      	movs	r2, #0
 801894e:	60a2      	str	r2, [r4, #8]
 8018950:	6962      	ldr	r2, [r4, #20]
 8018952:	4252      	negs	r2, r2
 8018954:	61a2      	str	r2, [r4, #24]
 8018956:	6922      	ldr	r2, [r4, #16]
 8018958:	b942      	cbnz	r2, 801896c <__swsetup_r+0xa4>
 801895a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801895e:	d1c5      	bne.n	80188ec <__swsetup_r+0x24>
 8018960:	bd38      	pop	{r3, r4, r5, pc}
 8018962:	0799      	lsls	r1, r3, #30
 8018964:	bf58      	it	pl
 8018966:	6962      	ldrpl	r2, [r4, #20]
 8018968:	60a2      	str	r2, [r4, #8]
 801896a:	e7f4      	b.n	8018956 <__swsetup_r+0x8e>
 801896c:	2000      	movs	r0, #0
 801896e:	e7f7      	b.n	8018960 <__swsetup_r+0x98>
 8018970:	200000c0 	.word	0x200000c0

08018974 <abort>:
 8018974:	b508      	push	{r3, lr}
 8018976:	2006      	movs	r0, #6
 8018978:	f000 f88e 	bl	8018a98 <raise>
 801897c:	2001      	movs	r0, #1
 801897e:	f7e9 fb6d 	bl	800205c <_exit>

08018982 <__swhatbuf_r>:
 8018982:	b570      	push	{r4, r5, r6, lr}
 8018984:	460c      	mov	r4, r1
 8018986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801898a:	2900      	cmp	r1, #0
 801898c:	b096      	sub	sp, #88	@ 0x58
 801898e:	4615      	mov	r5, r2
 8018990:	461e      	mov	r6, r3
 8018992:	da0d      	bge.n	80189b0 <__swhatbuf_r+0x2e>
 8018994:	89a3      	ldrh	r3, [r4, #12]
 8018996:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801899a:	f04f 0100 	mov.w	r1, #0
 801899e:	bf14      	ite	ne
 80189a0:	2340      	movne	r3, #64	@ 0x40
 80189a2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80189a6:	2000      	movs	r0, #0
 80189a8:	6031      	str	r1, [r6, #0]
 80189aa:	602b      	str	r3, [r5, #0]
 80189ac:	b016      	add	sp, #88	@ 0x58
 80189ae:	bd70      	pop	{r4, r5, r6, pc}
 80189b0:	466a      	mov	r2, sp
 80189b2:	f000 f879 	bl	8018aa8 <_fstat_r>
 80189b6:	2800      	cmp	r0, #0
 80189b8:	dbec      	blt.n	8018994 <__swhatbuf_r+0x12>
 80189ba:	9901      	ldr	r1, [sp, #4]
 80189bc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80189c0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80189c4:	4259      	negs	r1, r3
 80189c6:	4159      	adcs	r1, r3
 80189c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80189cc:	e7eb      	b.n	80189a6 <__swhatbuf_r+0x24>

080189ce <__smakebuf_r>:
 80189ce:	898b      	ldrh	r3, [r1, #12]
 80189d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80189d2:	079d      	lsls	r5, r3, #30
 80189d4:	4606      	mov	r6, r0
 80189d6:	460c      	mov	r4, r1
 80189d8:	d507      	bpl.n	80189ea <__smakebuf_r+0x1c>
 80189da:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80189de:	6023      	str	r3, [r4, #0]
 80189e0:	6123      	str	r3, [r4, #16]
 80189e2:	2301      	movs	r3, #1
 80189e4:	6163      	str	r3, [r4, #20]
 80189e6:	b003      	add	sp, #12
 80189e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80189ea:	ab01      	add	r3, sp, #4
 80189ec:	466a      	mov	r2, sp
 80189ee:	f7ff ffc8 	bl	8018982 <__swhatbuf_r>
 80189f2:	9f00      	ldr	r7, [sp, #0]
 80189f4:	4605      	mov	r5, r0
 80189f6:	4639      	mov	r1, r7
 80189f8:	4630      	mov	r0, r6
 80189fa:	f7fe fd99 	bl	8017530 <_malloc_r>
 80189fe:	b948      	cbnz	r0, 8018a14 <__smakebuf_r+0x46>
 8018a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a04:	059a      	lsls	r2, r3, #22
 8018a06:	d4ee      	bmi.n	80189e6 <__smakebuf_r+0x18>
 8018a08:	f023 0303 	bic.w	r3, r3, #3
 8018a0c:	f043 0302 	orr.w	r3, r3, #2
 8018a10:	81a3      	strh	r3, [r4, #12]
 8018a12:	e7e2      	b.n	80189da <__smakebuf_r+0xc>
 8018a14:	89a3      	ldrh	r3, [r4, #12]
 8018a16:	6020      	str	r0, [r4, #0]
 8018a18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018a1c:	81a3      	strh	r3, [r4, #12]
 8018a1e:	9b01      	ldr	r3, [sp, #4]
 8018a20:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018a24:	b15b      	cbz	r3, 8018a3e <__smakebuf_r+0x70>
 8018a26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018a2a:	4630      	mov	r0, r6
 8018a2c:	f000 f84e 	bl	8018acc <_isatty_r>
 8018a30:	b128      	cbz	r0, 8018a3e <__smakebuf_r+0x70>
 8018a32:	89a3      	ldrh	r3, [r4, #12]
 8018a34:	f023 0303 	bic.w	r3, r3, #3
 8018a38:	f043 0301 	orr.w	r3, r3, #1
 8018a3c:	81a3      	strh	r3, [r4, #12]
 8018a3e:	89a3      	ldrh	r3, [r4, #12]
 8018a40:	431d      	orrs	r5, r3
 8018a42:	81a5      	strh	r5, [r4, #12]
 8018a44:	e7cf      	b.n	80189e6 <__smakebuf_r+0x18>

08018a46 <_raise_r>:
 8018a46:	291f      	cmp	r1, #31
 8018a48:	b538      	push	{r3, r4, r5, lr}
 8018a4a:	4605      	mov	r5, r0
 8018a4c:	460c      	mov	r4, r1
 8018a4e:	d904      	bls.n	8018a5a <_raise_r+0x14>
 8018a50:	2316      	movs	r3, #22
 8018a52:	6003      	str	r3, [r0, #0]
 8018a54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018a58:	bd38      	pop	{r3, r4, r5, pc}
 8018a5a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8018a5c:	b112      	cbz	r2, 8018a64 <_raise_r+0x1e>
 8018a5e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018a62:	b94b      	cbnz	r3, 8018a78 <_raise_r+0x32>
 8018a64:	4628      	mov	r0, r5
 8018a66:	f000 f853 	bl	8018b10 <_getpid_r>
 8018a6a:	4622      	mov	r2, r4
 8018a6c:	4601      	mov	r1, r0
 8018a6e:	4628      	mov	r0, r5
 8018a70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018a74:	f000 b83a 	b.w	8018aec <_kill_r>
 8018a78:	2b01      	cmp	r3, #1
 8018a7a:	d00a      	beq.n	8018a92 <_raise_r+0x4c>
 8018a7c:	1c59      	adds	r1, r3, #1
 8018a7e:	d103      	bne.n	8018a88 <_raise_r+0x42>
 8018a80:	2316      	movs	r3, #22
 8018a82:	6003      	str	r3, [r0, #0]
 8018a84:	2001      	movs	r0, #1
 8018a86:	e7e7      	b.n	8018a58 <_raise_r+0x12>
 8018a88:	2100      	movs	r1, #0
 8018a8a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018a8e:	4620      	mov	r0, r4
 8018a90:	4798      	blx	r3
 8018a92:	2000      	movs	r0, #0
 8018a94:	e7e0      	b.n	8018a58 <_raise_r+0x12>
	...

08018a98 <raise>:
 8018a98:	4b02      	ldr	r3, [pc, #8]	@ (8018aa4 <raise+0xc>)
 8018a9a:	4601      	mov	r1, r0
 8018a9c:	6818      	ldr	r0, [r3, #0]
 8018a9e:	f7ff bfd2 	b.w	8018a46 <_raise_r>
 8018aa2:	bf00      	nop
 8018aa4:	200000c0 	.word	0x200000c0

08018aa8 <_fstat_r>:
 8018aa8:	b538      	push	{r3, r4, r5, lr}
 8018aaa:	4d07      	ldr	r5, [pc, #28]	@ (8018ac8 <_fstat_r+0x20>)
 8018aac:	2300      	movs	r3, #0
 8018aae:	4604      	mov	r4, r0
 8018ab0:	4608      	mov	r0, r1
 8018ab2:	4611      	mov	r1, r2
 8018ab4:	602b      	str	r3, [r5, #0]
 8018ab6:	f7e9 fb21 	bl	80020fc <_fstat>
 8018aba:	1c43      	adds	r3, r0, #1
 8018abc:	d102      	bne.n	8018ac4 <_fstat_r+0x1c>
 8018abe:	682b      	ldr	r3, [r5, #0]
 8018ac0:	b103      	cbz	r3, 8018ac4 <_fstat_r+0x1c>
 8018ac2:	6023      	str	r3, [r4, #0]
 8018ac4:	bd38      	pop	{r3, r4, r5, pc}
 8018ac6:	bf00      	nop
 8018ac8:	2000ae7c 	.word	0x2000ae7c

08018acc <_isatty_r>:
 8018acc:	b538      	push	{r3, r4, r5, lr}
 8018ace:	4d06      	ldr	r5, [pc, #24]	@ (8018ae8 <_isatty_r+0x1c>)
 8018ad0:	2300      	movs	r3, #0
 8018ad2:	4604      	mov	r4, r0
 8018ad4:	4608      	mov	r0, r1
 8018ad6:	602b      	str	r3, [r5, #0]
 8018ad8:	f7e9 fb20 	bl	800211c <_isatty>
 8018adc:	1c43      	adds	r3, r0, #1
 8018ade:	d102      	bne.n	8018ae6 <_isatty_r+0x1a>
 8018ae0:	682b      	ldr	r3, [r5, #0]
 8018ae2:	b103      	cbz	r3, 8018ae6 <_isatty_r+0x1a>
 8018ae4:	6023      	str	r3, [r4, #0]
 8018ae6:	bd38      	pop	{r3, r4, r5, pc}
 8018ae8:	2000ae7c 	.word	0x2000ae7c

08018aec <_kill_r>:
 8018aec:	b538      	push	{r3, r4, r5, lr}
 8018aee:	4d07      	ldr	r5, [pc, #28]	@ (8018b0c <_kill_r+0x20>)
 8018af0:	2300      	movs	r3, #0
 8018af2:	4604      	mov	r4, r0
 8018af4:	4608      	mov	r0, r1
 8018af6:	4611      	mov	r1, r2
 8018af8:	602b      	str	r3, [r5, #0]
 8018afa:	f7e9 fa9f 	bl	800203c <_kill>
 8018afe:	1c43      	adds	r3, r0, #1
 8018b00:	d102      	bne.n	8018b08 <_kill_r+0x1c>
 8018b02:	682b      	ldr	r3, [r5, #0]
 8018b04:	b103      	cbz	r3, 8018b08 <_kill_r+0x1c>
 8018b06:	6023      	str	r3, [r4, #0]
 8018b08:	bd38      	pop	{r3, r4, r5, pc}
 8018b0a:	bf00      	nop
 8018b0c:	2000ae7c 	.word	0x2000ae7c

08018b10 <_getpid_r>:
 8018b10:	f7e9 ba8c 	b.w	800202c <_getpid>

08018b14 <_init>:
 8018b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b16:	bf00      	nop
 8018b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018b1a:	bc08      	pop	{r3}
 8018b1c:	469e      	mov	lr, r3
 8018b1e:	4770      	bx	lr

08018b20 <_fini>:
 8018b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b22:	bf00      	nop
 8018b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018b26:	bc08      	pop	{r3}
 8018b28:	469e      	mov	lr, r3
 8018b2a:	4770      	bx	lr
