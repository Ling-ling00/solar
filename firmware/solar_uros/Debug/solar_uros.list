
solar_uros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ad3c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e78  0801af20  0801af20  0001bf20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bd98  0801bd98  0001d110  2**0
                  CONTENTS
  4 .ARM          00000008  0801bd98  0801bd98  0001cd98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bda0  0801bda0  0001d110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801bda0  0801bda0  0001cda0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801bda8  0801bda8  0001cda8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000110  20000000  0801bdac  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000aff4  20000110  0801bebc  0001d110  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000b104  0801bebc  0001e104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001d110  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025d5b  00000000  00000000  0001d140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c84  00000000  00000000  00042e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e40  00000000  00000000  00047b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001785  00000000  00000000  00049960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c183  00000000  00000000  0004b0e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024b44  00000000  00000000  00077268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001158e8  00000000  00000000  0009bdac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001b1694  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008ef4  00000000  00000000  001b170c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001ba600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000110 	.word	0x20000110
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801af04 	.word	0x0801af04

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000114 	.word	0x20000114
 800021c:	0801af04 	.word	0x0801af04

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__aeabi_d2uiz>:
 8000a8c:	004a      	lsls	r2, r1, #1
 8000a8e:	d211      	bcs.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a94:	d211      	bcs.n	8000aba <__aeabi_d2uiz+0x2e>
 8000a96:	d50d      	bpl.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a98:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d40e      	bmi.n	8000ac0 <__aeabi_d2uiz+0x34>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d102      	bne.n	8000ac6 <__aeabi_d2uiz+0x3a>
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac4:	4770      	bx	lr
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	4770      	bx	lr

08000acc <__aeabi_ldivmod>:
 8000acc:	b97b      	cbnz	r3, 8000aee <__aeabi_ldivmod+0x22>
 8000ace:	b972      	cbnz	r2, 8000aee <__aeabi_ldivmod+0x22>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bfbe      	ittt	lt
 8000ad4:	2000      	movlt	r0, #0
 8000ad6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ada:	e006      	blt.n	8000aea <__aeabi_ldivmod+0x1e>
 8000adc:	bf08      	it	eq
 8000ade:	2800      	cmpeq	r0, #0
 8000ae0:	bf1c      	itt	ne
 8000ae2:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ae6:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000aea:	f000 b9b5 	b.w	8000e58 <__aeabi_idiv0>
 8000aee:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000af6:	2900      	cmp	r1, #0
 8000af8:	db09      	blt.n	8000b0e <__aeabi_ldivmod+0x42>
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	db1a      	blt.n	8000b34 <__aeabi_ldivmod+0x68>
 8000afe:	f000 f84d 	bl	8000b9c <__udivmoddi4>
 8000b02:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b0a:	b004      	add	sp, #16
 8000b0c:	4770      	bx	lr
 8000b0e:	4240      	negs	r0, r0
 8000b10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	db1b      	blt.n	8000b50 <__aeabi_ldivmod+0x84>
 8000b18:	f000 f840 	bl	8000b9c <__udivmoddi4>
 8000b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b24:	b004      	add	sp, #16
 8000b26:	4240      	negs	r0, r0
 8000b28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b2c:	4252      	negs	r2, r2
 8000b2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b32:	4770      	bx	lr
 8000b34:	4252      	negs	r2, r2
 8000b36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b3a:	f000 f82f 	bl	8000b9c <__udivmoddi4>
 8000b3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b46:	b004      	add	sp, #16
 8000b48:	4240      	negs	r0, r0
 8000b4a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b4e:	4770      	bx	lr
 8000b50:	4252      	negs	r2, r2
 8000b52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b56:	f000 f821 	bl	8000b9c <__udivmoddi4>
 8000b5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b62:	b004      	add	sp, #16
 8000b64:	4252      	negs	r2, r2
 8000b66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b80:	f000 b96a 	b.w	8000e58 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	460c      	mov	r4, r1
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d14e      	bne.n	8000c46 <__udivmoddi4+0xaa>
 8000ba8:	4694      	mov	ip, r2
 8000baa:	458c      	cmp	ip, r1
 8000bac:	4686      	mov	lr, r0
 8000bae:	fab2 f282 	clz	r2, r2
 8000bb2:	d962      	bls.n	8000c7a <__udivmoddi4+0xde>
 8000bb4:	b14a      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb6:	f1c2 0320 	rsb	r3, r2, #32
 8000bba:	4091      	lsls	r1, r2
 8000bbc:	fa20 f303 	lsr.w	r3, r0, r3
 8000bc0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc4:	4319      	orrs	r1, r3
 8000bc6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bce:	fa1f f68c 	uxth.w	r6, ip
 8000bd2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bd6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bda:	fb07 1114 	mls	r1, r7, r4, r1
 8000bde:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be2:	fb04 f106 	mul.w	r1, r4, r6
 8000be6:	4299      	cmp	r1, r3
 8000be8:	d90a      	bls.n	8000c00 <__udivmoddi4+0x64>
 8000bea:	eb1c 0303 	adds.w	r3, ip, r3
 8000bee:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000bf2:	f080 8112 	bcs.w	8000e1a <__udivmoddi4+0x27e>
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	f240 810f 	bls.w	8000e1a <__udivmoddi4+0x27e>
 8000bfc:	3c02      	subs	r4, #2
 8000bfe:	4463      	add	r3, ip
 8000c00:	1a59      	subs	r1, r3, r1
 8000c02:	fa1f f38e 	uxth.w	r3, lr
 8000c06:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c0a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c12:	fb00 f606 	mul.w	r6, r0, r6
 8000c16:	429e      	cmp	r6, r3
 8000c18:	d90a      	bls.n	8000c30 <__udivmoddi4+0x94>
 8000c1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c22:	f080 80fc 	bcs.w	8000e1e <__udivmoddi4+0x282>
 8000c26:	429e      	cmp	r6, r3
 8000c28:	f240 80f9 	bls.w	8000e1e <__udivmoddi4+0x282>
 8000c2c:	4463      	add	r3, ip
 8000c2e:	3802      	subs	r0, #2
 8000c30:	1b9b      	subs	r3, r3, r6
 8000c32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c36:	2100      	movs	r1, #0
 8000c38:	b11d      	cbz	r5, 8000c42 <__udivmoddi4+0xa6>
 8000c3a:	40d3      	lsrs	r3, r2
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d905      	bls.n	8000c56 <__udivmoddi4+0xba>
 8000c4a:	b10d      	cbz	r5, 8000c50 <__udivmoddi4+0xb4>
 8000c4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c50:	2100      	movs	r1, #0
 8000c52:	4608      	mov	r0, r1
 8000c54:	e7f5      	b.n	8000c42 <__udivmoddi4+0xa6>
 8000c56:	fab3 f183 	clz	r1, r3
 8000c5a:	2900      	cmp	r1, #0
 8000c5c:	d146      	bne.n	8000cec <__udivmoddi4+0x150>
 8000c5e:	42a3      	cmp	r3, r4
 8000c60:	d302      	bcc.n	8000c68 <__udivmoddi4+0xcc>
 8000c62:	4290      	cmp	r0, r2
 8000c64:	f0c0 80f0 	bcc.w	8000e48 <__udivmoddi4+0x2ac>
 8000c68:	1a86      	subs	r6, r0, r2
 8000c6a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c6e:	2001      	movs	r0, #1
 8000c70:	2d00      	cmp	r5, #0
 8000c72:	d0e6      	beq.n	8000c42 <__udivmoddi4+0xa6>
 8000c74:	e9c5 6300 	strd	r6, r3, [r5]
 8000c78:	e7e3      	b.n	8000c42 <__udivmoddi4+0xa6>
 8000c7a:	2a00      	cmp	r2, #0
 8000c7c:	f040 8090 	bne.w	8000da0 <__udivmoddi4+0x204>
 8000c80:	eba1 040c 	sub.w	r4, r1, ip
 8000c84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c88:	fa1f f78c 	uxth.w	r7, ip
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c96:	fb08 4416 	mls	r4, r8, r6, r4
 8000c9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c9e:	fb07 f006 	mul.w	r0, r7, r6
 8000ca2:	4298      	cmp	r0, r3
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x11c>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x11a>
 8000cb0:	4298      	cmp	r0, r3
 8000cb2:	f200 80cd 	bhi.w	8000e50 <__udivmoddi4+0x2b4>
 8000cb6:	4626      	mov	r6, r4
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	fa1f f38e 	uxth.w	r3, lr
 8000cbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cc2:	fb08 4410 	mls	r4, r8, r0, r4
 8000cc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cca:	fb00 f707 	mul.w	r7, r0, r7
 8000cce:	429f      	cmp	r7, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x148>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x146>
 8000cdc:	429f      	cmp	r7, r3
 8000cde:	f200 80b0 	bhi.w	8000e42 <__udivmoddi4+0x2a6>
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	1bdb      	subs	r3, r3, r7
 8000ce6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cea:	e7a5      	b.n	8000c38 <__udivmoddi4+0x9c>
 8000cec:	f1c1 0620 	rsb	r6, r1, #32
 8000cf0:	408b      	lsls	r3, r1
 8000cf2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cf6:	431f      	orrs	r7, r3
 8000cf8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cfc:	fa04 f301 	lsl.w	r3, r4, r1
 8000d00:	ea43 030c 	orr.w	r3, r3, ip
 8000d04:	40f4      	lsrs	r4, r6
 8000d06:	fa00 f801 	lsl.w	r8, r0, r1
 8000d0a:	0c38      	lsrs	r0, r7, #16
 8000d0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d10:	fbb4 fef0 	udiv	lr, r4, r0
 8000d14:	fa1f fc87 	uxth.w	ip, r7
 8000d18:	fb00 441e 	mls	r4, r0, lr, r4
 8000d1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d20:	fb0e f90c 	mul.w	r9, lr, ip
 8000d24:	45a1      	cmp	r9, r4
 8000d26:	fa02 f201 	lsl.w	r2, r2, r1
 8000d2a:	d90a      	bls.n	8000d42 <__udivmoddi4+0x1a6>
 8000d2c:	193c      	adds	r4, r7, r4
 8000d2e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d32:	f080 8084 	bcs.w	8000e3e <__udivmoddi4+0x2a2>
 8000d36:	45a1      	cmp	r9, r4
 8000d38:	f240 8081 	bls.w	8000e3e <__udivmoddi4+0x2a2>
 8000d3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d40:	443c      	add	r4, r7
 8000d42:	eba4 0409 	sub.w	r4, r4, r9
 8000d46:	fa1f f983 	uxth.w	r9, r3
 8000d4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	d907      	bls.n	8000d6e <__udivmoddi4+0x1d2>
 8000d5e:	193c      	adds	r4, r7, r4
 8000d60:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d64:	d267      	bcs.n	8000e36 <__udivmoddi4+0x29a>
 8000d66:	45a4      	cmp	ip, r4
 8000d68:	d965      	bls.n	8000e36 <__udivmoddi4+0x29a>
 8000d6a:	3b02      	subs	r3, #2
 8000d6c:	443c      	add	r4, r7
 8000d6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d72:	fba0 9302 	umull	r9, r3, r0, r2
 8000d76:	eba4 040c 	sub.w	r4, r4, ip
 8000d7a:	429c      	cmp	r4, r3
 8000d7c:	46ce      	mov	lr, r9
 8000d7e:	469c      	mov	ip, r3
 8000d80:	d351      	bcc.n	8000e26 <__udivmoddi4+0x28a>
 8000d82:	d04e      	beq.n	8000e22 <__udivmoddi4+0x286>
 8000d84:	b155      	cbz	r5, 8000d9c <__udivmoddi4+0x200>
 8000d86:	ebb8 030e 	subs.w	r3, r8, lr
 8000d8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d92:	40cb      	lsrs	r3, r1
 8000d94:	431e      	orrs	r6, r3
 8000d96:	40cc      	lsrs	r4, r1
 8000d98:	e9c5 6400 	strd	r6, r4, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	e750      	b.n	8000c42 <__udivmoddi4+0xa6>
 8000da0:	f1c2 0320 	rsb	r3, r2, #32
 8000da4:	fa20 f103 	lsr.w	r1, r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	fa24 f303 	lsr.w	r3, r4, r3
 8000db0:	4094      	lsls	r4, r2
 8000db2:	430c      	orrs	r4, r1
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dbc:	fa1f f78c 	uxth.w	r7, ip
 8000dc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc4:	fb08 3110 	mls	r1, r8, r0, r3
 8000dc8:	0c23      	lsrs	r3, r4, #16
 8000dca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dce:	fb00 f107 	mul.w	r1, r0, r7
 8000dd2:	4299      	cmp	r1, r3
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x24c>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000dde:	d22c      	bcs.n	8000e3a <__udivmoddi4+0x29e>
 8000de0:	4299      	cmp	r1, r3
 8000de2:	d92a      	bls.n	8000e3a <__udivmoddi4+0x29e>
 8000de4:	3802      	subs	r0, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000df0:	fb08 3311 	mls	r3, r8, r1, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb01 f307 	mul.w	r3, r1, r7
 8000dfc:	42a3      	cmp	r3, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x276>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e08:	d213      	bcs.n	8000e32 <__udivmoddi4+0x296>
 8000e0a:	42a3      	cmp	r3, r4
 8000e0c:	d911      	bls.n	8000e32 <__udivmoddi4+0x296>
 8000e0e:	3902      	subs	r1, #2
 8000e10:	4464      	add	r4, ip
 8000e12:	1ae4      	subs	r4, r4, r3
 8000e14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e18:	e739      	b.n	8000c8e <__udivmoddi4+0xf2>
 8000e1a:	4604      	mov	r4, r0
 8000e1c:	e6f0      	b.n	8000c00 <__udivmoddi4+0x64>
 8000e1e:	4608      	mov	r0, r1
 8000e20:	e706      	b.n	8000c30 <__udivmoddi4+0x94>
 8000e22:	45c8      	cmp	r8, r9
 8000e24:	d2ae      	bcs.n	8000d84 <__udivmoddi4+0x1e8>
 8000e26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e2e:	3801      	subs	r0, #1
 8000e30:	e7a8      	b.n	8000d84 <__udivmoddi4+0x1e8>
 8000e32:	4631      	mov	r1, r6
 8000e34:	e7ed      	b.n	8000e12 <__udivmoddi4+0x276>
 8000e36:	4603      	mov	r3, r0
 8000e38:	e799      	b.n	8000d6e <__udivmoddi4+0x1d2>
 8000e3a:	4630      	mov	r0, r6
 8000e3c:	e7d4      	b.n	8000de8 <__udivmoddi4+0x24c>
 8000e3e:	46d6      	mov	lr, sl
 8000e40:	e77f      	b.n	8000d42 <__udivmoddi4+0x1a6>
 8000e42:	4463      	add	r3, ip
 8000e44:	3802      	subs	r0, #2
 8000e46:	e74d      	b.n	8000ce4 <__udivmoddi4+0x148>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	4623      	mov	r3, r4
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	e70f      	b.n	8000c70 <__udivmoddi4+0xd4>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	e730      	b.n	8000cb8 <__udivmoddi4+0x11c>
 8000e56:	bf00      	nop

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	4613      	mov	r3, r2
 8000e68:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e9c <PWM_init+0x40>)
 8000e6e:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	88fa      	ldrh	r2, [r7, #6]
 8000e7a:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 8000e82:	68b8      	ldr	r0, [r7, #8]
 8000e84:	f005 ff14 	bl	8006cb0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8000e88:	88fb      	ldrh	r3, [r7, #6]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	68b8      	ldr	r0, [r7, #8]
 8000e8e:	f006 f859 	bl	8006f44 <HAL_TIM_PWM_Start>
}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	0a21fe80 	.word	0x0a21fe80

08000ea0 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 8000ea0:	b5b0      	push	{r4, r5, r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	ed87 0a02 	vstr	s0, [r7, #8]
 8000eac:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8000eb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000eb4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ebc:	d137      	bne.n	8000f2e <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	889b      	ldrh	r3, [r3, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d105      	bne.n	8000ed2 <PWM_write_duty+0x32>
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8000ed0:	e0e1      	b.n	8001096 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	889b      	ldrh	r3, [r3, #4]
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	d105      	bne.n	8000ee6 <PWM_write_duty+0x46>
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	6393      	str	r3, [r2, #56]	@ 0x38
 8000ee4:	e0d7      	b.n	8001096 <PWM_write_duty+0x1f6>
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	889b      	ldrh	r3, [r3, #4]
 8000eea:	2b08      	cmp	r3, #8
 8000eec:	d105      	bne.n	8000efa <PWM_write_duty+0x5a>
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000ef8:	e0cd      	b.n	8001096 <PWM_write_duty+0x1f6>
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	889b      	ldrh	r3, [r3, #4]
 8000efe:	2b0c      	cmp	r3, #12
 8000f00:	d105      	bne.n	8000f0e <PWM_write_duty+0x6e>
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	2300      	movs	r3, #0
 8000f0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f0c:	e0c3      	b.n	8001096 <PWM_write_duty+0x1f6>
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	889b      	ldrh	r3, [r3, #4]
 8000f12:	2b10      	cmp	r3, #16
 8000f14:	d105      	bne.n	8000f22 <PWM_write_duty+0x82>
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f20:	e0b9      	b.n	8001096 <PWM_write_duty+0x1f6>
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	2300      	movs	r3, #0
 8000f2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000f2c:	e0b3      	b.n	8001096 <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	691b      	ldr	r3, [r3, #16]
 8000f32:	ee07 3a90 	vmov	s15, r3
 8000f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000f3a:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f46:	ee17 2a90 	vmov	r2, s15
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000f56:	33fe      	adds	r3, #254	@ 0xfe
 8000f58:	4a51      	ldr	r2, [pc, #324]	@ (80010a0 <PWM_write_duty+0x200>)
 8000f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5e:	0bdb      	lsrs	r3, r3, #15
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	3b01      	subs	r3, #1
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	ee07 3a90 	vmov	s15, r3
 8000f72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	899b      	ldrh	r3, [r3, #12]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000f88:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f9c:	ee17 3a90 	vmov	r3, s15
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	89db      	ldrh	r3, [r3, #14]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff faf2 	bl	8000594 <__aeabi_i2d>
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	460d      	mov	r5, r1
 8000fb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fb8:	eef0 7ae7 	vabs.f32	s15, s15
 8000fbc:	ee17 0a90 	vmov	r0, s15
 8000fc0:	f7ff fafa 	bl	80005b8 <__aeabi_f2d>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4620      	mov	r0, r4
 8000fca:	4629      	mov	r1, r5
 8000fcc:	f7ff fb4c 	bl	8000668 <__aeabi_dmul>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	4610      	mov	r0, r2
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f04f 0200 	mov.w	r2, #0
 8000fdc:	4b31      	ldr	r3, [pc, #196]	@ (80010a4 <PWM_write_duty+0x204>)
 8000fde:	f7ff fc6d 	bl	80008bc <__aeabi_ddiv>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f7ff fd4f 	bl	8000a8c <__aeabi_d2uiz>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	899a      	ldrh	r2, [r3, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	89da      	ldrh	r2, [r3, #14]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	89da      	ldrh	r2, [r3, #14]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	889b      	ldrh	r3, [r3, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d106      	bne.n	8001030 <PWM_write_duty+0x190>
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	68fa      	ldr	r2, [r7, #12]
 800102a:	6952      	ldr	r2, [r2, #20]
 800102c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800102e:	e032      	b.n	8001096 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	889b      	ldrh	r3, [r3, #4]
 8001034:	2b04      	cmp	r3, #4
 8001036:	d106      	bne.n	8001046 <PWM_write_duty+0x1a6>
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001044:	e027      	b.n	8001096 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	889b      	ldrh	r3, [r3, #4]
 800104a:	2b08      	cmp	r3, #8
 800104c:	d106      	bne.n	800105c <PWM_write_duty+0x1bc>
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800105a:	e01c      	b.n	8001096 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	889b      	ldrh	r3, [r3, #4]
 8001060:	2b0c      	cmp	r3, #12
 8001062:	d106      	bne.n	8001072 <PWM_write_duty+0x1d2>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001070:	e011      	b.n	8001096 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	889b      	ldrh	r3, [r3, #4]
 8001076:	2b10      	cmp	r3, #16
 8001078:	d106      	bne.n	8001088 <PWM_write_duty+0x1e8>
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8001086:	e006      	b.n	8001096 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001094:	e7ff      	b.n	8001096 <PWM_write_duty+0x1f6>
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bdb0      	pop	{r4, r5, r7, pc}
 800109e:	bf00      	nop
 80010a0:	80008001 	.word	0x80008001
 80010a4:	40590000 	.word	0x40590000

080010a8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010ac:	f3bf 8f4f 	dsb	sy
}
 80010b0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80010b2:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <__NVIC_SystemReset+0x24>)
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80010ba:	4904      	ldr	r1, [pc, #16]	@ (80010cc <__NVIC_SystemReset+0x24>)
 80010bc:	4b04      	ldr	r3, [pc, #16]	@ (80010d0 <__NVIC_SystemReset+0x28>)
 80010be:	4313      	orrs	r3, r2
 80010c0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80010c2:	f3bf 8f4f 	dsb	sy
}
 80010c6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <__NVIC_SystemReset+0x20>
 80010cc:	e000ed00 	.word	0xe000ed00
 80010d0:	05fa0004 	.word	0x05fa0004

080010d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d8:	f002 f94f 	bl	800337a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010dc:	f000 f852 	bl	8001184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e0:	f000 fabc 	bl	800165c <MX_GPIO_Init>
  MX_DMA_Init();
 80010e4:	f000 fa68 	bl	80015b8 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80010e8:	f000 f918 	bl	800131c <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 80010ec:	f000 f960 	bl	80013b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80010f0:	f000 f9e0 	bl	80014b4 <MX_TIM3_Init>
  MX_I2C1_Init();
 80010f4:	f000 f892 	bl	800121c <MX_I2C1_Init>
  MX_I2C3_Init();
 80010f8:	f000 f8d0 	bl	800129c <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  PWM_init(&BrushMTR, &htim2, TIM_CHANNEL_1);
 80010fc:	2200      	movs	r2, #0
 80010fe:	4918      	ldr	r1, [pc, #96]	@ (8001160 <main+0x8c>)
 8001100:	4818      	ldr	r0, [pc, #96]	@ (8001164 <main+0x90>)
 8001102:	f7ff feab 	bl	8000e5c <PWM_init>
  PWM_init(&WaterPump, &htim2, TIM_CHANNEL_2);
 8001106:	2204      	movs	r2, #4
 8001108:	4915      	ldr	r1, [pc, #84]	@ (8001160 <main+0x8c>)
 800110a:	4817      	ldr	r0, [pc, #92]	@ (8001168 <main+0x94>)
 800110c:	f7ff fea6 	bl	8000e5c <PWM_init>
  PWM_init(&BrushUD2, &htim3, TIM_CHANNEL_1);
 8001110:	2200      	movs	r2, #0
 8001112:	4916      	ldr	r1, [pc, #88]	@ (800116c <main+0x98>)
 8001114:	4816      	ldr	r0, [pc, #88]	@ (8001170 <main+0x9c>)
 8001116:	f7ff fea1 	bl	8000e5c <PWM_init>
  PWM_init(&BrushUD, &htim3, TIM_CHANNEL_2);
 800111a:	2204      	movs	r2, #4
 800111c:	4913      	ldr	r1, [pc, #76]	@ (800116c <main+0x98>)
 800111e:	4815      	ldr	r0, [pc, #84]	@ (8001174 <main+0xa0>)
 8001120:	f7ff fe9c 	bl	8000e5c <PWM_init>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001124:	2100      	movs	r1, #0
 8001126:	480e      	ldr	r0, [pc, #56]	@ (8001160 <main+0x8c>)
 8001128:	f005 ff0c 	bl	8006f44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800112c:	2104      	movs	r1, #4
 800112e:	480c      	ldr	r0, [pc, #48]	@ (8001160 <main+0x8c>)
 8001130:	f005 ff08 	bl	8006f44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001134:	2100      	movs	r1, #0
 8001136:	480d      	ldr	r0, [pc, #52]	@ (800116c <main+0x98>)
 8001138:	f005 ff04 	bl	8006f44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800113c:	2104      	movs	r1, #4
 800113e:	480b      	ldr	r0, [pc, #44]	@ (800116c <main+0x98>)
 8001140:	f005 ff00 	bl	8006f44 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001144:	f008 ff56 	bl	8009ff4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001148:	4a0b      	ldr	r2, [pc, #44]	@ (8001178 <main+0xa4>)
 800114a:	2100      	movs	r1, #0
 800114c:	480b      	ldr	r0, [pc, #44]	@ (800117c <main+0xa8>)
 800114e:	f008 ff9b 	bl	800a088 <osThreadNew>
 8001152:	4603      	mov	r3, r0
 8001154:	4a0a      	ldr	r2, [pc, #40]	@ (8001180 <main+0xac>)
 8001156:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001158:	f008 ff70 	bl	800a03c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <main+0x88>
 8001160:	200004a8 	.word	0x200004a8
 8001164:	200035ac 	.word	0x200035ac
 8001168:	20003594 	.word	0x20003594
 800116c:	200004f4 	.word	0x200004f4
 8001170:	200035dc 	.word	0x200035dc
 8001174:	200035c4 	.word	0x200035c4
 8001178:	0801b010 	.word	0x0801b010
 800117c:	08001e85 	.word	0x08001e85
 8001180:	20000540 	.word	0x20000540

08001184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b094      	sub	sp, #80	@ 0x50
 8001188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118a:	f107 0318 	add.w	r3, r7, #24
 800118e:	2238      	movs	r2, #56	@ 0x38
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f018 ff18 	bl	8019fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80011a6:	2000      	movs	r0, #0
 80011a8:	f004 fcc8 	bl	8005b3c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ac:	2302      	movs	r3, #2
 80011ae:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b6:	2340      	movs	r3, #64	@ 0x40
 80011b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ba:	2302      	movs	r3, #2
 80011bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011be:	2302      	movs	r3, #2
 80011c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80011c2:	2304      	movs	r3, #4
 80011c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80011c6:	2355      	movs	r3, #85	@ 0x55
 80011c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011ca:	2302      	movs	r3, #2
 80011cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011ce:	2302      	movs	r3, #2
 80011d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011d2:	2302      	movs	r3, #2
 80011d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d6:	f107 0318 	add.w	r3, r7, #24
 80011da:	4618      	mov	r0, r3
 80011dc:	f004 fd62 	bl	8005ca4 <HAL_RCC_OscConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011e6:	f000 ff71 	bl	80020cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ea:	230f      	movs	r3, #15
 80011ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ee:	2303      	movs	r3, #3
 80011f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	2104      	movs	r1, #4
 8001202:	4618      	mov	r0, r3
 8001204:	f005 f860 	bl	80062c8 <HAL_RCC_ClockConfig>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800120e:	f000 ff5d 	bl	80020cc <Error_Handler>
  }
}
 8001212:	bf00      	nop
 8001214:	3750      	adds	r7, #80	@ 0x50
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001220:	4b1b      	ldr	r3, [pc, #108]	@ (8001290 <MX_I2C1_Init+0x74>)
 8001222:	4a1c      	ldr	r2, [pc, #112]	@ (8001294 <MX_I2C1_Init+0x78>)
 8001224:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8001226:	4b1a      	ldr	r3, [pc, #104]	@ (8001290 <MX_I2C1_Init+0x74>)
 8001228:	4a1b      	ldr	r2, [pc, #108]	@ (8001298 <MX_I2C1_Init+0x7c>)
 800122a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800122c:	4b18      	ldr	r3, [pc, #96]	@ (8001290 <MX_I2C1_Init+0x74>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001232:	4b17      	ldr	r3, [pc, #92]	@ (8001290 <MX_I2C1_Init+0x74>)
 8001234:	2201      	movs	r2, #1
 8001236:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001238:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <MX_I2C1_Init+0x74>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800123e:	4b14      	ldr	r3, [pc, #80]	@ (8001290 <MX_I2C1_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001244:	4b12      	ldr	r3, [pc, #72]	@ (8001290 <MX_I2C1_Init+0x74>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800124a:	4b11      	ldr	r3, [pc, #68]	@ (8001290 <MX_I2C1_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001250:	4b0f      	ldr	r3, [pc, #60]	@ (8001290 <MX_I2C1_Init+0x74>)
 8001252:	2200      	movs	r2, #0
 8001254:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001256:	480e      	ldr	r0, [pc, #56]	@ (8001290 <MX_I2C1_Init+0x74>)
 8001258:	f002 fec7 	bl	8003fea <HAL_I2C_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001262:	f000 ff33 	bl	80020cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001266:	2100      	movs	r1, #0
 8001268:	4809      	ldr	r0, [pc, #36]	@ (8001290 <MX_I2C1_Init+0x74>)
 800126a:	f004 fbcf 	bl	8005a0c <HAL_I2CEx_ConfigAnalogFilter>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001274:	f000 ff2a 	bl	80020cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001278:	2100      	movs	r1, #0
 800127a:	4805      	ldr	r0, [pc, #20]	@ (8001290 <MX_I2C1_Init+0x74>)
 800127c:	f004 fc11 	bl	8005aa2 <HAL_I2CEx_ConfigDigitalFilter>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001286:	f000 ff21 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	2000012c 	.word	0x2000012c
 8001294:	40005400 	.word	0x40005400
 8001298:	40b285c2 	.word	0x40b285c2

0800129c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80012a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001310 <MX_I2C3_Init+0x74>)
 80012a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001314 <MX_I2C3_Init+0x78>)
 80012a4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x40B285C2;
 80012a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001310 <MX_I2C3_Init+0x74>)
 80012a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001318 <MX_I2C3_Init+0x7c>)
 80012aa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80012ac:	4b18      	ldr	r3, [pc, #96]	@ (8001310 <MX_I2C3_Init+0x74>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012b2:	4b17      	ldr	r3, [pc, #92]	@ (8001310 <MX_I2C3_Init+0x74>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b8:	4b15      	ldr	r3, [pc, #84]	@ (8001310 <MX_I2C3_Init+0x74>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80012be:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <MX_I2C3_Init+0x74>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012c4:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <MX_I2C3_Init+0x74>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ca:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <MX_I2C3_Init+0x74>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <MX_I2C3_Init+0x74>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80012d6:	480e      	ldr	r0, [pc, #56]	@ (8001310 <MX_I2C3_Init+0x74>)
 80012d8:	f002 fe87 	bl	8003fea <HAL_I2C_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80012e2:	f000 fef3 	bl	80020cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012e6:	2100      	movs	r1, #0
 80012e8:	4809      	ldr	r0, [pc, #36]	@ (8001310 <MX_I2C3_Init+0x74>)
 80012ea:	f004 fb8f 	bl	8005a0c <HAL_I2CEx_ConfigAnalogFilter>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80012f4:	f000 feea 	bl	80020cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80012f8:	2100      	movs	r1, #0
 80012fa:	4805      	ldr	r0, [pc, #20]	@ (8001310 <MX_I2C3_Init+0x74>)
 80012fc:	f004 fbd1 	bl	8005aa2 <HAL_I2CEx_ConfigDigitalFilter>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001306:	f000 fee1 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000180 	.word	0x20000180
 8001314:	40007800 	.word	0x40007800
 8001318:	40b285c2 	.word	0x40b285c2

0800131c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001320:	4b21      	ldr	r3, [pc, #132]	@ (80013a8 <MX_LPUART1_UART_Init+0x8c>)
 8001322:	4a22      	ldr	r2, [pc, #136]	@ (80013ac <MX_LPUART1_UART_Init+0x90>)
 8001324:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001326:	4b20      	ldr	r3, [pc, #128]	@ (80013a8 <MX_LPUART1_UART_Init+0x8c>)
 8001328:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800132c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800132e:	4b1e      	ldr	r3, [pc, #120]	@ (80013a8 <MX_LPUART1_UART_Init+0x8c>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001334:	4b1c      	ldr	r3, [pc, #112]	@ (80013a8 <MX_LPUART1_UART_Init+0x8c>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800133a:	4b1b      	ldr	r3, [pc, #108]	@ (80013a8 <MX_LPUART1_UART_Init+0x8c>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001340:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <MX_LPUART1_UART_Init+0x8c>)
 8001342:	220c      	movs	r2, #12
 8001344:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001346:	4b18      	ldr	r3, [pc, #96]	@ (80013a8 <MX_LPUART1_UART_Init+0x8c>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800134c:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <MX_LPUART1_UART_Init+0x8c>)
 800134e:	2200      	movs	r2, #0
 8001350:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001352:	4b15      	ldr	r3, [pc, #84]	@ (80013a8 <MX_LPUART1_UART_Init+0x8c>)
 8001354:	2200      	movs	r2, #0
 8001356:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001358:	4b13      	ldr	r3, [pc, #76]	@ (80013a8 <MX_LPUART1_UART_Init+0x8c>)
 800135a:	2200      	movs	r2, #0
 800135c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800135e:	4812      	ldr	r0, [pc, #72]	@ (80013a8 <MX_LPUART1_UART_Init+0x8c>)
 8001360:	f007 f820 	bl	80083a4 <HAL_UART_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800136a:	f000 feaf 	bl	80020cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800136e:	2100      	movs	r1, #0
 8001370:	480d      	ldr	r0, [pc, #52]	@ (80013a8 <MX_LPUART1_UART_Init+0x8c>)
 8001372:	f008 fd30 	bl	8009dd6 <HAL_UARTEx_SetTxFifoThreshold>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800137c:	f000 fea6 	bl	80020cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001380:	2100      	movs	r1, #0
 8001382:	4809      	ldr	r0, [pc, #36]	@ (80013a8 <MX_LPUART1_UART_Init+0x8c>)
 8001384:	f008 fd65 	bl	8009e52 <HAL_UARTEx_SetRxFifoThreshold>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800138e:	f000 fe9d 	bl	80020cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001392:	4805      	ldr	r0, [pc, #20]	@ (80013a8 <MX_LPUART1_UART_Init+0x8c>)
 8001394:	f008 fce6 	bl	8009d64 <HAL_UARTEx_DisableFifoMode>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800139e:	f000 fe95 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000354 	.word	0x20000354
 80013ac:	40008000 	.word	0x40008000

080013b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08e      	sub	sp, #56	@ 0x38
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c4:	f107 031c 	add.w	r3, r7, #28
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013d0:	463b      	mov	r3, r7
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
 80013dc:	611a      	str	r2, [r3, #16]
 80013de:	615a      	str	r2, [r3, #20]
 80013e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013e2:	4b33      	ldr	r3, [pc, #204]	@ (80014b0 <MX_TIM2_Init+0x100>)
 80013e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80013ea:	4b31      	ldr	r3, [pc, #196]	@ (80014b0 <MX_TIM2_Init+0x100>)
 80013ec:	22a9      	movs	r2, #169	@ 0xa9
 80013ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f0:	4b2f      	ldr	r3, [pc, #188]	@ (80014b0 <MX_TIM2_Init+0x100>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80013f6:	4b2e      	ldr	r3, [pc, #184]	@ (80014b0 <MX_TIM2_Init+0x100>)
 80013f8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fe:	4b2c      	ldr	r3, [pc, #176]	@ (80014b0 <MX_TIM2_Init+0x100>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001404:	4b2a      	ldr	r3, [pc, #168]	@ (80014b0 <MX_TIM2_Init+0x100>)
 8001406:	2200      	movs	r2, #0
 8001408:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800140a:	4829      	ldr	r0, [pc, #164]	@ (80014b0 <MX_TIM2_Init+0x100>)
 800140c:	f005 fbf8 	bl	8006c00 <HAL_TIM_Base_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001416:	f000 fe59 	bl	80020cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800141a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800141e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001420:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001424:	4619      	mov	r1, r3
 8001426:	4822      	ldr	r0, [pc, #136]	@ (80014b0 <MX_TIM2_Init+0x100>)
 8001428:	f006 f902 	bl	8007630 <HAL_TIM_ConfigClockSource>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001432:	f000 fe4b 	bl	80020cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001436:	481e      	ldr	r0, [pc, #120]	@ (80014b0 <MX_TIM2_Init+0x100>)
 8001438:	f005 fd22 	bl	8006e80 <HAL_TIM_PWM_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001442:	f000 fe43 	bl	80020cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800144e:	f107 031c 	add.w	r3, r7, #28
 8001452:	4619      	mov	r1, r3
 8001454:	4816      	ldr	r0, [pc, #88]	@ (80014b0 <MX_TIM2_Init+0x100>)
 8001456:	f006 fec9 	bl	80081ec <HAL_TIMEx_MasterConfigSynchronization>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001460:	f000 fe34 	bl	80020cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001464:	2360      	movs	r3, #96	@ 0x60
 8001466:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800146c:	2300      	movs	r3, #0
 800146e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001474:	463b      	mov	r3, r7
 8001476:	2200      	movs	r2, #0
 8001478:	4619      	mov	r1, r3
 800147a:	480d      	ldr	r0, [pc, #52]	@ (80014b0 <MX_TIM2_Init+0x100>)
 800147c:	f005 ffc4 	bl	8007408 <HAL_TIM_PWM_ConfigChannel>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001486:	f000 fe21 	bl	80020cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800148a:	463b      	mov	r3, r7
 800148c:	2204      	movs	r2, #4
 800148e:	4619      	mov	r1, r3
 8001490:	4807      	ldr	r0, [pc, #28]	@ (80014b0 <MX_TIM2_Init+0x100>)
 8001492:	f005 ffb9 	bl	8007408 <HAL_TIM_PWM_ConfigChannel>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800149c:	f000 fe16 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014a0:	4803      	ldr	r0, [pc, #12]	@ (80014b0 <MX_TIM2_Init+0x100>)
 80014a2:	f001 f8a5 	bl	80025f0 <HAL_TIM_MspPostInit>

}
 80014a6:	bf00      	nop
 80014a8:	3738      	adds	r7, #56	@ 0x38
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200004a8 	.word	0x200004a8

080014b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08e      	sub	sp, #56	@ 0x38
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c8:	f107 031c 	add.w	r3, r7, #28
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014d4:	463b      	mov	r3, r7
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
 80014e0:	611a      	str	r2, [r3, #16]
 80014e2:	615a      	str	r2, [r3, #20]
 80014e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014e6:	4b32      	ldr	r3, [pc, #200]	@ (80015b0 <MX_TIM3_Init+0xfc>)
 80014e8:	4a32      	ldr	r2, [pc, #200]	@ (80015b4 <MX_TIM3_Init+0x100>)
 80014ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 80014ec:	4b30      	ldr	r3, [pc, #192]	@ (80015b0 <MX_TIM3_Init+0xfc>)
 80014ee:	22a9      	movs	r2, #169	@ 0xa9
 80014f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f2:	4b2f      	ldr	r3, [pc, #188]	@ (80015b0 <MX_TIM3_Init+0xfc>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80014f8:	4b2d      	ldr	r3, [pc, #180]	@ (80015b0 <MX_TIM3_Init+0xfc>)
 80014fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001500:	4b2b      	ldr	r3, [pc, #172]	@ (80015b0 <MX_TIM3_Init+0xfc>)
 8001502:	2200      	movs	r2, #0
 8001504:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001506:	4b2a      	ldr	r3, [pc, #168]	@ (80015b0 <MX_TIM3_Init+0xfc>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800150c:	4828      	ldr	r0, [pc, #160]	@ (80015b0 <MX_TIM3_Init+0xfc>)
 800150e:	f005 fb77 	bl	8006c00 <HAL_TIM_Base_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001518:	f000 fdd8 	bl	80020cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800151c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001520:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001522:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001526:	4619      	mov	r1, r3
 8001528:	4821      	ldr	r0, [pc, #132]	@ (80015b0 <MX_TIM3_Init+0xfc>)
 800152a:	f006 f881 	bl	8007630 <HAL_TIM_ConfigClockSource>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001534:	f000 fdca 	bl	80020cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001538:	481d      	ldr	r0, [pc, #116]	@ (80015b0 <MX_TIM3_Init+0xfc>)
 800153a:	f005 fca1 	bl	8006e80 <HAL_TIM_PWM_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001544:	f000 fdc2 	bl	80020cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	4619      	mov	r1, r3
 8001556:	4816      	ldr	r0, [pc, #88]	@ (80015b0 <MX_TIM3_Init+0xfc>)
 8001558:	f006 fe48 	bl	80081ec <HAL_TIMEx_MasterConfigSynchronization>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001562:	f000 fdb3 	bl	80020cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001566:	2360      	movs	r3, #96	@ 0x60
 8001568:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001576:	463b      	mov	r3, r7
 8001578:	2200      	movs	r2, #0
 800157a:	4619      	mov	r1, r3
 800157c:	480c      	ldr	r0, [pc, #48]	@ (80015b0 <MX_TIM3_Init+0xfc>)
 800157e:	f005 ff43 	bl	8007408 <HAL_TIM_PWM_ConfigChannel>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001588:	f000 fda0 	bl	80020cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800158c:	463b      	mov	r3, r7
 800158e:	2204      	movs	r2, #4
 8001590:	4619      	mov	r1, r3
 8001592:	4807      	ldr	r0, [pc, #28]	@ (80015b0 <MX_TIM3_Init+0xfc>)
 8001594:	f005 ff38 	bl	8007408 <HAL_TIM_PWM_ConfigChannel>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800159e:	f000 fd95 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015a2:	4803      	ldr	r0, [pc, #12]	@ (80015b0 <MX_TIM3_Init+0xfc>)
 80015a4:	f001 f824 	bl	80025f0 <HAL_TIM_MspPostInit>

}
 80015a8:	bf00      	nop
 80015aa:	3738      	adds	r7, #56	@ 0x38
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	200004f4 	.word	0x200004f4
 80015b4:	40000400 	.word	0x40000400

080015b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80015be:	4b26      	ldr	r3, [pc, #152]	@ (8001658 <MX_DMA_Init+0xa0>)
 80015c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015c2:	4a25      	ldr	r2, [pc, #148]	@ (8001658 <MX_DMA_Init+0xa0>)
 80015c4:	f043 0304 	orr.w	r3, r3, #4
 80015c8:	6493      	str	r3, [r2, #72]	@ 0x48
 80015ca:	4b23      	ldr	r3, [pc, #140]	@ (8001658 <MX_DMA_Init+0xa0>)
 80015cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015ce:	f003 0304 	and.w	r3, r3, #4
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015d6:	4b20      	ldr	r3, [pc, #128]	@ (8001658 <MX_DMA_Init+0xa0>)
 80015d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015da:	4a1f      	ldr	r2, [pc, #124]	@ (8001658 <MX_DMA_Init+0xa0>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6493      	str	r3, [r2, #72]	@ 0x48
 80015e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001658 <MX_DMA_Init+0xa0>)
 80015e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2105      	movs	r1, #5
 80015f2:	200b      	movs	r0, #11
 80015f4:	f001 ffb0 	bl	8003558 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80015f8:	200b      	movs	r0, #11
 80015fa:	f001 ffc7 	bl	800358c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2105      	movs	r1, #5
 8001602:	200c      	movs	r0, #12
 8001604:	f001 ffa8 	bl	8003558 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001608:	200c      	movs	r0, #12
 800160a:	f001 ffbf 	bl	800358c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2105      	movs	r1, #5
 8001612:	200d      	movs	r0, #13
 8001614:	f001 ffa0 	bl	8003558 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001618:	200d      	movs	r0, #13
 800161a:	f001 ffb7 	bl	800358c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	2105      	movs	r1, #5
 8001622:	200e      	movs	r0, #14
 8001624:	f001 ff98 	bl	8003558 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001628:	200e      	movs	r0, #14
 800162a:	f001 ffaf 	bl	800358c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	2105      	movs	r1, #5
 8001632:	200f      	movs	r0, #15
 8001634:	f001 ff90 	bl	8003558 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001638:	200f      	movs	r0, #15
 800163a:	f001 ffa7 	bl	800358c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2105      	movs	r1, #5
 8001642:	2010      	movs	r0, #16
 8001644:	f001 ff88 	bl	8003558 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001648:	2010      	movs	r0, #16
 800164a:	f001 ff9f 	bl	800358c <HAL_NVIC_EnableIRQ>

}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40021000 	.word	0x40021000

0800165c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	@ 0x28
 8001660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
 8001670:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001672:	4b37      	ldr	r3, [pc, #220]	@ (8001750 <MX_GPIO_Init+0xf4>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001676:	4a36      	ldr	r2, [pc, #216]	@ (8001750 <MX_GPIO_Init+0xf4>)
 8001678:	f043 0304 	orr.w	r3, r3, #4
 800167c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800167e:	4b34      	ldr	r3, [pc, #208]	@ (8001750 <MX_GPIO_Init+0xf4>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800168a:	4b31      	ldr	r3, [pc, #196]	@ (8001750 <MX_GPIO_Init+0xf4>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168e:	4a30      	ldr	r2, [pc, #192]	@ (8001750 <MX_GPIO_Init+0xf4>)
 8001690:	f043 0320 	orr.w	r3, r3, #32
 8001694:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001696:	4b2e      	ldr	r3, [pc, #184]	@ (8001750 <MX_GPIO_Init+0xf4>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169a:	f003 0320 	and.w	r3, r3, #32
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001750 <MX_GPIO_Init+0xf4>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a6:	4a2a      	ldr	r2, [pc, #168]	@ (8001750 <MX_GPIO_Init+0xf4>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ae:	4b28      	ldr	r3, [pc, #160]	@ (8001750 <MX_GPIO_Init+0xf4>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	4b25      	ldr	r3, [pc, #148]	@ (8001750 <MX_GPIO_Init+0xf4>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016be:	4a24      	ldr	r2, [pc, #144]	@ (8001750 <MX_GPIO_Init+0xf4>)
 80016c0:	f043 0302 	orr.w	r3, r3, #2
 80016c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016c6:	4b22      	ldr	r3, [pc, #136]	@ (8001750 <MX_GPIO_Init+0xf4>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80016d2:	2200      	movs	r2, #0
 80016d4:	f240 6181 	movw	r1, #1665	@ 0x681
 80016d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016dc:	f002 fc4a 	bl	8003f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016e6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	4619      	mov	r1, r3
 80016f6:	4817      	ldr	r0, [pc, #92]	@ (8001754 <MX_GPIO_Init+0xf8>)
 80016f8:	f002 faa2 	bl	8003c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA7 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10;
 80016fc:	f240 6381 	movw	r3, #1665	@ 0x681
 8001700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001702:	2301      	movs	r3, #1
 8001704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170a:	2300      	movs	r3, #0
 800170c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001718:	f002 fa92 	bl	8003c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800171c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001720:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001722:	2300      	movs	r3, #0
 8001724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001734:	f002 fa84 	bl	8003c40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001738:	2200      	movs	r2, #0
 800173a:	2105      	movs	r1, #5
 800173c:	2028      	movs	r0, #40	@ 0x28
 800173e:	f001 ff0b 	bl	8003558 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001742:	2028      	movs	r0, #40	@ 0x28
 8001744:	f001 ff22 	bl	800358c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001748:	bf00      	nop
 800174a:	3728      	adds	r7, #40	@ 0x28
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40021000 	.word	0x40021000
 8001754:	48000800 	.word	0x48000800

08001758 <timer_callback>:
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 8001758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800175c:	b088      	sub	sp, #32
 800175e:	af00      	add	r7, sp, #0
 8001760:	60f8      	str	r0, [r7, #12]
 8001762:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 8128 	beq.w	80019be <timer_callback+0x266>
		BrusheMotorControlled();
 800176e:	f000 f94d 	bl	8001a0c <BrusheMotorControlled>
		BrushUpDownMode();
 8001772:	f000 f99b 	bl	8001aac <BrushUpDownMode>
		Omron_check();
 8001776:	f000 fac7 	bl	8001d08 <Omron_check>
		WaterPumpControlled();
 800177a:	f000 f96f 	bl	8001a5c <WaterPumpControlled>


		eepromExampleReadFlag = 1;
 800177e:	4b98      	ldr	r3, [pc, #608]	@ (80019e0 <timer_callback+0x288>)
 8001780:	2201      	movs	r2, #1
 8001782:	701a      	strb	r2, [r3, #0]
		eepromExampleReadFlag2 = 1;
 8001784:	4b97      	ldr	r3, [pc, #604]	@ (80019e4 <timer_callback+0x28c>)
 8001786:	2201      	movs	r2, #1
 8001788:	701a      	strb	r2, [r3, #0]
	  EEPROMReadExample(eepromDataReadBack);
 800178a:	4897      	ldr	r0, [pc, #604]	@ (80019e8 <timer_callback+0x290>)
 800178c:	f000 fb32 	bl	8001df4 <EEPROMReadExample>
	  EEPROMReadExample2(eepromDataReadBack2);
 8001790:	4896      	ldr	r0, [pc, #600]	@ (80019ec <timer_callback+0x294>)
 8001792:	f000 fb53 	bl	8001e3c <EEPROMReadExample2>
		timestamp = HAL_GetTick();
 8001796:	f001 fe1b 	bl	80033d0 <HAL_GetTick>
 800179a:	4603      	mov	r3, r0
 800179c:	2200      	movs	r2, #0
 800179e:	469a      	mov	sl, r3
 80017a0:	4693      	mov	fp, r2
 80017a2:	4b93      	ldr	r3, [pc, #588]	@ (80019f0 <timer_callback+0x298>)
 80017a4:	e9c3 ab00 	strd	sl, fp, [r3]
	  for (int i = 0; i < 16; i++) {
 80017a8:	2300      	movs	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]
 80017ac:	e03a      	b.n	8001824 <timer_callback+0xcc>
		  // Select byte: 0 for i=0..7, 1 for i=8..15
		  uint8_t byteIndex = i / 8;
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	da00      	bge.n	80017b6 <timer_callback+0x5e>
 80017b4:	3307      	adds	r3, #7
 80017b6:	10db      	asrs	r3, r3, #3
 80017b8:	76fb      	strb	r3, [r7, #27]
		  uint8_t bitIndex = 7 - (i % 8);  // MSB first
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	425a      	negs	r2, r3
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	f002 0207 	and.w	r2, r2, #7
 80017c6:	bf58      	it	pl
 80017c8:	4253      	negpl	r3, r2
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	f1c3 0307 	rsb	r3, r3, #7
 80017d0:	76bb      	strb	r3, [r7, #26]

		  check[i] = ((eepromDataReadBack[byteIndex] >> bitIndex) & 0x01) ? '1' : '0';
 80017d2:	7efb      	ldrb	r3, [r7, #27]
 80017d4:	4a84      	ldr	r2, [pc, #528]	@ (80019e8 <timer_callback+0x290>)
 80017d6:	5cd3      	ldrb	r3, [r2, r3]
 80017d8:	461a      	mov	r2, r3
 80017da:	7ebb      	ldrb	r3, [r7, #26]
 80017dc:	fa42 f303 	asr.w	r3, r2, r3
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <timer_callback+0x94>
 80017e8:	2131      	movs	r1, #49	@ 0x31
 80017ea:	e000      	b.n	80017ee <timer_callback+0x96>
 80017ec:	2130      	movs	r1, #48	@ 0x30
 80017ee:	4a81      	ldr	r2, [pc, #516]	@ (80019f4 <timer_callback+0x29c>)
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	4413      	add	r3, r2
 80017f4:	460a      	mov	r2, r1
 80017f6:	701a      	strb	r2, [r3, #0]
		  check2[i] = ((eepromDataReadBack2[byteIndex] >> bitIndex) & 0x01) ? '1' : '0';
 80017f8:	7efb      	ldrb	r3, [r7, #27]
 80017fa:	4a7c      	ldr	r2, [pc, #496]	@ (80019ec <timer_callback+0x294>)
 80017fc:	5cd3      	ldrb	r3, [r2, r3]
 80017fe:	461a      	mov	r2, r3
 8001800:	7ebb      	ldrb	r3, [r7, #26]
 8001802:	fa42 f303 	asr.w	r3, r2, r3
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <timer_callback+0xba>
 800180e:	2131      	movs	r1, #49	@ 0x31
 8001810:	e000      	b.n	8001814 <timer_callback+0xbc>
 8001812:	2130      	movs	r1, #48	@ 0x30
 8001814:	4a78      	ldr	r2, [pc, #480]	@ (80019f8 <timer_callback+0x2a0>)
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	4413      	add	r3, r2
 800181a:	460a      	mov	r2, r1
 800181c:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < 16; i++) {
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3301      	adds	r3, #1
 8001822:	61fb      	str	r3, [r7, #28]
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	2b0f      	cmp	r3, #15
 8001828:	ddc1      	ble.n	80017ae <timer_callback+0x56>
	  }
	  check[16] = '\0';  // Null-terminate
 800182a:	4b72      	ldr	r3, [pc, #456]	@ (80019f4 <timer_callback+0x29c>)
 800182c:	2200      	movs	r2, #0
 800182e:	741a      	strb	r2, [r3, #16]
	  check2[16] = '\0';
 8001830:	4b71      	ldr	r3, [pc, #452]	@ (80019f8 <timer_callback+0x2a0>)
 8001832:	2200      	movs	r2, #0
 8001834:	741a      	strb	r2, [r3, #16]
	  encoder = ((check[11] - 48) * 1000 ) + ((check[12] - 48) * 800 ) + ((check[13] - 48) * 400 )
 8001836:	4b6f      	ldr	r3, [pc, #444]	@ (80019f4 <timer_callback+0x29c>)
 8001838:	7adb      	ldrb	r3, [r3, #11]
 800183a:	3b30      	subs	r3, #48	@ 0x30
 800183c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001840:	fb03 f202 	mul.w	r2, r3, r2
 8001844:	4b6b      	ldr	r3, [pc, #428]	@ (80019f4 <timer_callback+0x29c>)
 8001846:	7b1b      	ldrb	r3, [r3, #12]
 8001848:	3b30      	subs	r3, #48	@ 0x30
 800184a:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800184e:	fb01 f303 	mul.w	r3, r1, r3
 8001852:	441a      	add	r2, r3
 8001854:	4b67      	ldr	r3, [pc, #412]	@ (80019f4 <timer_callback+0x29c>)
 8001856:	7b5b      	ldrb	r3, [r3, #13]
 8001858:	3b30      	subs	r3, #48	@ 0x30
 800185a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800185e:	fb01 f303 	mul.w	r3, r1, r3
 8001862:	441a      	add	r2, r3
		+ ((check[14] - 48) * 200 ) + ((check[15] - 48) * 100 ) + ((check[0] - 48) * 80 ) +
 8001864:	4b63      	ldr	r3, [pc, #396]	@ (80019f4 <timer_callback+0x29c>)
 8001866:	7b9b      	ldrb	r3, [r3, #14]
 8001868:	3b30      	subs	r3, #48	@ 0x30
 800186a:	21c8      	movs	r1, #200	@ 0xc8
 800186c:	fb01 f303 	mul.w	r3, r1, r3
 8001870:	441a      	add	r2, r3
 8001872:	4b60      	ldr	r3, [pc, #384]	@ (80019f4 <timer_callback+0x29c>)
 8001874:	7bdb      	ldrb	r3, [r3, #15]
 8001876:	3b30      	subs	r3, #48	@ 0x30
 8001878:	2164      	movs	r1, #100	@ 0x64
 800187a:	fb01 f303 	mul.w	r3, r1, r3
 800187e:	18d1      	adds	r1, r2, r3
 8001880:	4b5c      	ldr	r3, [pc, #368]	@ (80019f4 <timer_callback+0x29c>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001888:	4613      	mov	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	011b      	lsls	r3, r3, #4
 8001890:	4419      	add	r1, r3
		((check[1] - 48) * 40 ) + ((check[2] - 48) * 20 ) + ((check[3] - 48) * 10 ) +
 8001892:	4b58      	ldr	r3, [pc, #352]	@ (80019f4 <timer_callback+0x29c>)
 8001894:	785b      	ldrb	r3, [r3, #1]
 8001896:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
		+ ((check[14] - 48) * 200 ) + ((check[15] - 48) * 100 ) + ((check[0] - 48) * 80 ) +
 80018a2:	4419      	add	r1, r3
		((check[1] - 48) * 40 ) + ((check[2] - 48) * 20 ) + ((check[3] - 48) * 10 ) +
 80018a4:	4b53      	ldr	r3, [pc, #332]	@ (80019f4 <timer_callback+0x29c>)
 80018a6:	789b      	ldrb	r3, [r3, #2]
 80018a8:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4419      	add	r1, r3
 80018b6:	4b4f      	ldr	r3, [pc, #316]	@ (80019f4 <timer_callback+0x29c>)
 80018b8:	78db      	ldrb	r3, [r3, #3]
 80018ba:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80018be:	4613      	mov	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	18ca      	adds	r2, r1, r3
		((check[4] - 48) * 8 ) + ((check[5] - 48) * 4 ) + ((check[6] - 48) * 2 )
 80018c8:	4b4a      	ldr	r3, [pc, #296]	@ (80019f4 <timer_callback+0x29c>)
 80018ca:	791b      	ldrb	r3, [r3, #4]
 80018cc:	3b30      	subs	r3, #48	@ 0x30
 80018ce:	00db      	lsls	r3, r3, #3
		((check[1] - 48) * 40 ) + ((check[2] - 48) * 20 ) + ((check[3] - 48) * 10 ) +
 80018d0:	441a      	add	r2, r3
		((check[4] - 48) * 8 ) + ((check[5] - 48) * 4 ) + ((check[6] - 48) * 2 )
 80018d2:	4b48      	ldr	r3, [pc, #288]	@ (80019f4 <timer_callback+0x29c>)
 80018d4:	795b      	ldrb	r3, [r3, #5]
 80018d6:	3b30      	subs	r3, #48	@ 0x30
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	441a      	add	r2, r3
 80018dc:	4b45      	ldr	r3, [pc, #276]	@ (80019f4 <timer_callback+0x29c>)
 80018de:	799b      	ldrb	r3, [r3, #6]
 80018e0:	3b30      	subs	r3, #48	@ 0x30
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	441a      	add	r2, r3
	 + ((check[7] - 48) * 1 ) ;
 80018e6:	4b43      	ldr	r3, [pc, #268]	@ (80019f4 <timer_callback+0x29c>)
 80018e8:	79db      	ldrb	r3, [r3, #7]
 80018ea:	3b30      	subs	r3, #48	@ 0x30
 80018ec:	4413      	add	r3, r2
 80018ee:	17da      	asrs	r2, r3, #31
 80018f0:	4698      	mov	r8, r3
 80018f2:	4691      	mov	r9, r2
	  encoder = ((check[11] - 48) * 1000 ) + ((check[12] - 48) * 800 ) + ((check[13] - 48) * 400 )
 80018f4:	4b41      	ldr	r3, [pc, #260]	@ (80019fc <timer_callback+0x2a4>)
 80018f6:	e9c3 8900 	strd	r8, r9, [r3]
	  encoder2 = ((check2[11] - 48) * 1000 ) + ((check2[12] - 48) * 800 ) + ((check2[13] - 48) * 400 )
 80018fa:	4b3f      	ldr	r3, [pc, #252]	@ (80019f8 <timer_callback+0x2a0>)
 80018fc:	7adb      	ldrb	r3, [r3, #11]
 80018fe:	3b30      	subs	r3, #48	@ 0x30
 8001900:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001904:	fb03 f202 	mul.w	r2, r3, r2
 8001908:	4b3b      	ldr	r3, [pc, #236]	@ (80019f8 <timer_callback+0x2a0>)
 800190a:	7b1b      	ldrb	r3, [r3, #12]
 800190c:	3b30      	subs	r3, #48	@ 0x30
 800190e:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8001912:	fb01 f303 	mul.w	r3, r1, r3
 8001916:	441a      	add	r2, r3
 8001918:	4b37      	ldr	r3, [pc, #220]	@ (80019f8 <timer_callback+0x2a0>)
 800191a:	7b5b      	ldrb	r3, [r3, #13]
 800191c:	3b30      	subs	r3, #48	@ 0x30
 800191e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001922:	fb01 f303 	mul.w	r3, r1, r3
 8001926:	441a      	add	r2, r3
				+ ((check2[14] - 48) * 200 ) + ((check2[15] - 48) * 100 ) + ((check2[0] - 48) * 80 ) +
 8001928:	4b33      	ldr	r3, [pc, #204]	@ (80019f8 <timer_callback+0x2a0>)
 800192a:	7b9b      	ldrb	r3, [r3, #14]
 800192c:	3b30      	subs	r3, #48	@ 0x30
 800192e:	21c8      	movs	r1, #200	@ 0xc8
 8001930:	fb01 f303 	mul.w	r3, r1, r3
 8001934:	441a      	add	r2, r3
 8001936:	4b30      	ldr	r3, [pc, #192]	@ (80019f8 <timer_callback+0x2a0>)
 8001938:	7bdb      	ldrb	r3, [r3, #15]
 800193a:	3b30      	subs	r3, #48	@ 0x30
 800193c:	2164      	movs	r1, #100	@ 0x64
 800193e:	fb01 f303 	mul.w	r3, r1, r3
 8001942:	18d1      	adds	r1, r2, r3
 8001944:	4b2c      	ldr	r3, [pc, #176]	@ (80019f8 <timer_callback+0x2a0>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	011b      	lsls	r3, r3, #4
 8001954:	4419      	add	r1, r3
				((check2[1] - 48) * 40 ) + ((check2[2] - 48) * 20 ) + ((check2[3] - 48) * 10 ) +
 8001956:	4b28      	ldr	r3, [pc, #160]	@ (80019f8 <timer_callback+0x2a0>)
 8001958:	785b      	ldrb	r3, [r3, #1]
 800195a:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
				+ ((check2[14] - 48) * 200 ) + ((check2[15] - 48) * 100 ) + ((check2[0] - 48) * 80 ) +
 8001966:	4419      	add	r1, r3
				((check2[1] - 48) * 40 ) + ((check2[2] - 48) * 20 ) + ((check2[3] - 48) * 10 ) +
 8001968:	4b23      	ldr	r3, [pc, #140]	@ (80019f8 <timer_callback+0x2a0>)
 800196a:	789b      	ldrb	r3, [r3, #2]
 800196c:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001970:	4613      	mov	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4419      	add	r1, r3
 800197a:	4b1f      	ldr	r3, [pc, #124]	@ (80019f8 <timer_callback+0x2a0>)
 800197c:	78db      	ldrb	r3, [r3, #3]
 800197e:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	18ca      	adds	r2, r1, r3
				((check2[4] - 48) * 8 ) + ((check2[5] - 48) * 4 ) + ((check2[6] - 48) * 2 )
 800198c:	4b1a      	ldr	r3, [pc, #104]	@ (80019f8 <timer_callback+0x2a0>)
 800198e:	791b      	ldrb	r3, [r3, #4]
 8001990:	3b30      	subs	r3, #48	@ 0x30
 8001992:	00db      	lsls	r3, r3, #3
				((check2[1] - 48) * 40 ) + ((check2[2] - 48) * 20 ) + ((check2[3] - 48) * 10 ) +
 8001994:	441a      	add	r2, r3
				((check2[4] - 48) * 8 ) + ((check2[5] - 48) * 4 ) + ((check2[6] - 48) * 2 )
 8001996:	4b18      	ldr	r3, [pc, #96]	@ (80019f8 <timer_callback+0x2a0>)
 8001998:	795b      	ldrb	r3, [r3, #5]
 800199a:	3b30      	subs	r3, #48	@ 0x30
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	441a      	add	r2, r3
 80019a0:	4b15      	ldr	r3, [pc, #84]	@ (80019f8 <timer_callback+0x2a0>)
 80019a2:	799b      	ldrb	r3, [r3, #6]
 80019a4:	3b30      	subs	r3, #48	@ 0x30
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	441a      	add	r2, r3
			 + ((check2[7] - 48) * 1 ) ;
 80019aa:	4b13      	ldr	r3, [pc, #76]	@ (80019f8 <timer_callback+0x2a0>)
 80019ac:	79db      	ldrb	r3, [r3, #7]
 80019ae:	3b30      	subs	r3, #48	@ 0x30
 80019b0:	4413      	add	r3, r2
 80019b2:	17da      	asrs	r2, r3, #31
 80019b4:	461c      	mov	r4, r3
 80019b6:	4615      	mov	r5, r2
	  encoder2 = ((check2[11] - 48) * 1000 ) + ((check2[12] - 48) * 800 ) + ((check2[13] - 48) * 400 )
 80019b8:	4b11      	ldr	r3, [pc, #68]	@ (8001a00 <timer_callback+0x2a8>)
 80019ba:	e9c3 4500 	strd	r4, r5, [r3]
	  //	    ((check[5] - 48) * 4 )
	  //	    ((check[6] - 48) * 2 )
	  //	    ((check[7] - 48) * 1 )

	}
	rcl_ret_t ret = rcl_publish(&publisher, &msg_pub, NULL);
 80019be:	2200      	movs	r2, #0
 80019c0:	4910      	ldr	r1, [pc, #64]	@ (8001a04 <timer_callback+0x2ac>)
 80019c2:	4811      	ldr	r0, [pc, #68]	@ (8001a08 <timer_callback+0x2b0>)
 80019c4:	f00b fa90 	bl	800cee8 <rcl_publish>
 80019c8:	6178      	str	r0, [r7, #20]
	if (ret != RCL_RET_OK)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <timer_callback+0x27c>
	{
		NVIC_SystemReset();
 80019d0:	f7ff fb6a 	bl	80010a8 <__NVIC_SystemReset>
	}
}
 80019d4:	bf00      	nop
 80019d6:	3720      	adds	r7, #32
 80019d8:	46bd      	mov	sp, r7
 80019da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019de:	bf00      	nop
 80019e0:	20003618 	.word	0x20003618
 80019e4:	20003640 	.word	0x20003640
 80019e8:	2000361c 	.word	0x2000361c
 80019ec:	20003644 	.word	0x20003644
 80019f0:	20003610 	.word	0x20003610
 80019f4:	20003620 	.word	0x20003620
 80019f8:	20003648 	.word	0x20003648
 80019fc:	20003638 	.word	0x20003638
 8001a00:	20003660 	.word	0x20003660
 8001a04:	2000349c 	.word	0x2000349c
 8001a08:	20003498 	.word	0x20003498

08001a0c <BrusheMotorControlled>:

void BrusheMotorControlled()
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
	if (Brush)
 8001a10:	4b0d      	ldr	r3, [pc, #52]	@ (8001a48 <BrusheMotorControlled+0x3c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00e      	beq.n	8001a36 <BrusheMotorControlled+0x2a>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a22:	f002 faa7 	bl	8003f74 <HAL_GPIO_WritePin>
		PWM_write_duty(&BrushMTR, 2000, 100);
 8001a26:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8001a4c <BrusheMotorControlled+0x40>
 8001a2a:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8001a50 <BrusheMotorControlled+0x44>
 8001a2e:	4809      	ldr	r0, [pc, #36]	@ (8001a54 <BrusheMotorControlled+0x48>)
 8001a30:	f7ff fa36 	bl	8000ea0 <PWM_write_duty>
	}
	else
	{
		PWM_write_duty(&BrushMTR, 2000, 0);
	}
}
 8001a34:	e006      	b.n	8001a44 <BrusheMotorControlled+0x38>
		PWM_write_duty(&BrushMTR, 2000, 0);
 8001a36:	eddf 0a08 	vldr	s1, [pc, #32]	@ 8001a58 <BrusheMotorControlled+0x4c>
 8001a3a:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8001a50 <BrusheMotorControlled+0x44>
 8001a3e:	4805      	ldr	r0, [pc, #20]	@ (8001a54 <BrusheMotorControlled+0x48>)
 8001a40:	f7ff fa2e 	bl	8000ea0 <PWM_write_duty>
}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20003588 	.word	0x20003588
 8001a4c:	42c80000 	.word	0x42c80000
 8001a50:	44fa0000 	.word	0x44fa0000
 8001a54:	200035ac 	.word	0x200035ac
 8001a58:	00000000 	.word	0x00000000

08001a5c <WaterPumpControlled>:
void WaterPumpControlled()
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
	if (Water)
 8001a60:	4b0d      	ldr	r3, [pc, #52]	@ (8001a98 <WaterPumpControlled+0x3c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00d      	beq.n	8001a84 <WaterPumpControlled+0x28>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a70:	f002 fa80 	bl	8003f74 <HAL_GPIO_WritePin>
		PWM_write_duty(&WaterPump, 2000, 100);
 8001a74:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8001a9c <WaterPumpControlled+0x40>
 8001a78:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8001aa0 <WaterPumpControlled+0x44>
 8001a7c:	4809      	ldr	r0, [pc, #36]	@ (8001aa4 <WaterPumpControlled+0x48>)
 8001a7e:	f7ff fa0f 	bl	8000ea0 <PWM_write_duty>
	}
	else
	{
		PWM_write_duty(&WaterPump, 2000, 0);
	}
}
 8001a82:	e006      	b.n	8001a92 <WaterPumpControlled+0x36>
		PWM_write_duty(&WaterPump, 2000, 0);
 8001a84:	eddf 0a08 	vldr	s1, [pc, #32]	@ 8001aa8 <WaterPumpControlled+0x4c>
 8001a88:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8001aa0 <WaterPumpControlled+0x44>
 8001a8c:	4805      	ldr	r0, [pc, #20]	@ (8001aa4 <WaterPumpControlled+0x48>)
 8001a8e:	f7ff fa07 	bl	8000ea0 <PWM_write_duty>
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	2000358c 	.word	0x2000358c
 8001a9c:	42c80000 	.word	0x42c80000
 8001aa0:	44fa0000 	.word	0x44fa0000
 8001aa4:	20003594 	.word	0x20003594
 8001aa8:	00000000 	.word	0x00000000

08001aac <BrushUpDownMode>:
void BrushUpDownMode()
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
	// PA10 DIR1 , PA4 PWM1
	// PA7 DIR2 ,PA6 PWM2

	if (Servo_switch == 1)
 8001ab0:	4b8b      	ldr	r3, [pc, #556]	@ (8001ce0 <BrushUpDownMode+0x234>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d12c      	bne.n	8001b12 <BrushUpDownMode+0x66>
	{
		if (HAL_GetTick() < timestamp_servo + 200)
 8001ab8:	f001 fc8a 	bl	80033d0 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	4b89      	ldr	r3, [pc, #548]	@ (8001ce4 <BrushUpDownMode+0x238>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	33c8      	adds	r3, #200	@ 0xc8
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d21b      	bcs.n	8001b00 <BrushUpDownMode+0x54>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1); // 1 == up , -1 == down
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ace:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ad2:	f002 fa4f 	bl	8003f74 <HAL_GPIO_WritePin>
			PWM_write_duty(&BrushUD, 998, 50);
 8001ad6:	eddf 0a84 	vldr	s1, [pc, #528]	@ 8001ce8 <BrushUpDownMode+0x23c>
 8001ada:	ed9f 0a84 	vldr	s0, [pc, #528]	@ 8001cec <BrushUpDownMode+0x240>
 8001ade:	4884      	ldr	r0, [pc, #528]	@ (8001cf0 <BrushUpDownMode+0x244>)
 8001ae0:	f7ff f9de 	bl	8000ea0 <PWM_write_duty>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2180      	movs	r1, #128	@ 0x80
 8001ae8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aec:	f002 fa42 	bl	8003f74 <HAL_GPIO_WritePin>
			PWM_write_duty(&BrushUD2, 998, 50);
 8001af0:	eddf 0a7d 	vldr	s1, [pc, #500]	@ 8001ce8 <BrushUpDownMode+0x23c>
 8001af4:	ed9f 0a7d 	vldr	s0, [pc, #500]	@ 8001cec <BrushUpDownMode+0x240>
 8001af8:	487e      	ldr	r0, [pc, #504]	@ (8001cf4 <BrushUpDownMode+0x248>)
 8001afa:	f7ff f9d1 	bl	8000ea0 <PWM_write_duty>
		timestamp_servo4 = HAL_GetTick();
		PWM_write_duty(&BrushUD2, 998, 0);
		PWM_write_duty(&BrushUD, 998, 0);
	}

}
 8001afe:	e0ec      	b.n	8001cda <BrushUpDownMode+0x22e>
			Servo_switch = 0;
 8001b00:	4b77      	ldr	r3, [pc, #476]	@ (8001ce0 <BrushUpDownMode+0x234>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
			timestamp_servo = HAL_GetTick();
 8001b06:	f001 fc63 	bl	80033d0 <HAL_GetTick>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	4a75      	ldr	r2, [pc, #468]	@ (8001ce4 <BrushUpDownMode+0x238>)
 8001b0e:	6013      	str	r3, [r2, #0]
}
 8001b10:	e0e3      	b.n	8001cda <BrushUpDownMode+0x22e>
	else if (Servo_switch == -1)
 8001b12:	4b73      	ldr	r3, [pc, #460]	@ (8001ce0 <BrushUpDownMode+0x234>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001b1a:	d12c      	bne.n	8001b76 <BrushUpDownMode+0xca>
		if (HAL_GetTick() < timestamp_servo2 + 200)
 8001b1c:	f001 fc58 	bl	80033d0 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	4b75      	ldr	r3, [pc, #468]	@ (8001cf8 <BrushUpDownMode+0x24c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	33c8      	adds	r3, #200	@ 0xc8
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d21b      	bcs.n	8001b64 <BrushUpDownMode+0xb8>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b36:	f002 fa1d 	bl	8003f74 <HAL_GPIO_WritePin>
			PWM_write_duty(&BrushUD, 998, 50);
 8001b3a:	eddf 0a6b 	vldr	s1, [pc, #428]	@ 8001ce8 <BrushUpDownMode+0x23c>
 8001b3e:	ed9f 0a6b 	vldr	s0, [pc, #428]	@ 8001cec <BrushUpDownMode+0x240>
 8001b42:	486b      	ldr	r0, [pc, #428]	@ (8001cf0 <BrushUpDownMode+0x244>)
 8001b44:	f7ff f9ac 	bl	8000ea0 <PWM_write_duty>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	2180      	movs	r1, #128	@ 0x80
 8001b4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b50:	f002 fa10 	bl	8003f74 <HAL_GPIO_WritePin>
			PWM_write_duty(&BrushUD2, 998, 50);
 8001b54:	eddf 0a64 	vldr	s1, [pc, #400]	@ 8001ce8 <BrushUpDownMode+0x23c>
 8001b58:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 8001cec <BrushUpDownMode+0x240>
 8001b5c:	4865      	ldr	r0, [pc, #404]	@ (8001cf4 <BrushUpDownMode+0x248>)
 8001b5e:	f7ff f99f 	bl	8000ea0 <PWM_write_duty>
}
 8001b62:	e0ba      	b.n	8001cda <BrushUpDownMode+0x22e>
			Servo_switch = 0;
 8001b64:	4b5e      	ldr	r3, [pc, #376]	@ (8001ce0 <BrushUpDownMode+0x234>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
			timestamp_servo2 = HAL_GetTick();
 8001b6a:	f001 fc31 	bl	80033d0 <HAL_GetTick>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	4a61      	ldr	r2, [pc, #388]	@ (8001cf8 <BrushUpDownMode+0x24c>)
 8001b72:	6013      	str	r3, [r2, #0]
}
 8001b74:	e0b1      	b.n	8001cda <BrushUpDownMode+0x22e>
	else if (Servo_switch == 2)
 8001b76:	4b5a      	ldr	r3, [pc, #360]	@ (8001ce0 <BrushUpDownMode+0x234>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d11f      	bne.n	8001bbe <BrushUpDownMode+0x112>
		if (HAL_GetTick() < timestamp_servo + 200)
 8001b7e:	f001 fc27 	bl	80033d0 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	4b57      	ldr	r3, [pc, #348]	@ (8001ce4 <BrushUpDownMode+0x238>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	33c8      	adds	r3, #200	@ 0xc8
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d20e      	bcs.n	8001bac <BrushUpDownMode+0x100>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1); // 1 == up , -1 == down
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b98:	f002 f9ec 	bl	8003f74 <HAL_GPIO_WritePin>
			PWM_write_duty(&BrushUD, 998, 50);
 8001b9c:	eddf 0a52 	vldr	s1, [pc, #328]	@ 8001ce8 <BrushUpDownMode+0x23c>
 8001ba0:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 8001cec <BrushUpDownMode+0x240>
 8001ba4:	4852      	ldr	r0, [pc, #328]	@ (8001cf0 <BrushUpDownMode+0x244>)
 8001ba6:	f7ff f97b 	bl	8000ea0 <PWM_write_duty>
}
 8001baa:	e096      	b.n	8001cda <BrushUpDownMode+0x22e>
			Servo_switch = 0;
 8001bac:	4b4c      	ldr	r3, [pc, #304]	@ (8001ce0 <BrushUpDownMode+0x234>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
			timestamp_servo = HAL_GetTick();
 8001bb2:	f001 fc0d 	bl	80033d0 <HAL_GetTick>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	4a4a      	ldr	r2, [pc, #296]	@ (8001ce4 <BrushUpDownMode+0x238>)
 8001bba:	6013      	str	r3, [r2, #0]
}
 8001bbc:	e08d      	b.n	8001cda <BrushUpDownMode+0x22e>
	else if (Servo_switch == -2)
 8001bbe:	4b48      	ldr	r3, [pc, #288]	@ (8001ce0 <BrushUpDownMode+0x234>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f113 0f02 	cmn.w	r3, #2
 8001bc6:	d11f      	bne.n	8001c08 <BrushUpDownMode+0x15c>
		if (HAL_GetTick() < timestamp_servo2 + 200)
 8001bc8:	f001 fc02 	bl	80033d0 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	4b4a      	ldr	r3, [pc, #296]	@ (8001cf8 <BrushUpDownMode+0x24c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	33c8      	adds	r3, #200	@ 0xc8
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d20e      	bcs.n	8001bf6 <BrushUpDownMode+0x14a>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001be2:	f002 f9c7 	bl	8003f74 <HAL_GPIO_WritePin>
			PWM_write_duty(&BrushUD, 998, 50);
 8001be6:	eddf 0a40 	vldr	s1, [pc, #256]	@ 8001ce8 <BrushUpDownMode+0x23c>
 8001bea:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 8001cec <BrushUpDownMode+0x240>
 8001bee:	4840      	ldr	r0, [pc, #256]	@ (8001cf0 <BrushUpDownMode+0x244>)
 8001bf0:	f7ff f956 	bl	8000ea0 <PWM_write_duty>
}
 8001bf4:	e071      	b.n	8001cda <BrushUpDownMode+0x22e>
			Servo_switch = 0;
 8001bf6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ce0 <BrushUpDownMode+0x234>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
			timestamp_servo2 = HAL_GetTick();
 8001bfc:	f001 fbe8 	bl	80033d0 <HAL_GetTick>
 8001c00:	4603      	mov	r3, r0
 8001c02:	4a3d      	ldr	r2, [pc, #244]	@ (8001cf8 <BrushUpDownMode+0x24c>)
 8001c04:	6013      	str	r3, [r2, #0]
}
 8001c06:	e068      	b.n	8001cda <BrushUpDownMode+0x22e>
	else if (Servo_switch == 3)
 8001c08:	4b35      	ldr	r3, [pc, #212]	@ (8001ce0 <BrushUpDownMode+0x234>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b03      	cmp	r3, #3
 8001c0e:	d11e      	bne.n	8001c4e <BrushUpDownMode+0x1a2>
		if (HAL_GetTick() < timestamp_servo + 200)
 8001c10:	f001 fbde 	bl	80033d0 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	4b33      	ldr	r3, [pc, #204]	@ (8001ce4 <BrushUpDownMode+0x238>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	33c8      	adds	r3, #200	@ 0xc8
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d20d      	bcs.n	8001c3c <BrushUpDownMode+0x190>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0); // 1 == up , -1 == down
 8001c20:	2200      	movs	r2, #0
 8001c22:	2180      	movs	r1, #128	@ 0x80
 8001c24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c28:	f002 f9a4 	bl	8003f74 <HAL_GPIO_WritePin>
			PWM_write_duty(&BrushUD2, 998, 50);
 8001c2c:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 8001ce8 <BrushUpDownMode+0x23c>
 8001c30:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8001cec <BrushUpDownMode+0x240>
 8001c34:	482f      	ldr	r0, [pc, #188]	@ (8001cf4 <BrushUpDownMode+0x248>)
 8001c36:	f7ff f933 	bl	8000ea0 <PWM_write_duty>
}
 8001c3a:	e04e      	b.n	8001cda <BrushUpDownMode+0x22e>
			Servo_switch = 0;
 8001c3c:	4b28      	ldr	r3, [pc, #160]	@ (8001ce0 <BrushUpDownMode+0x234>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
			timestamp_servo = HAL_GetTick();
 8001c42:	f001 fbc5 	bl	80033d0 <HAL_GetTick>
 8001c46:	4603      	mov	r3, r0
 8001c48:	4a26      	ldr	r2, [pc, #152]	@ (8001ce4 <BrushUpDownMode+0x238>)
 8001c4a:	6013      	str	r3, [r2, #0]
}
 8001c4c:	e045      	b.n	8001cda <BrushUpDownMode+0x22e>
	else if (Servo_switch == -3)
 8001c4e:	4b24      	ldr	r3, [pc, #144]	@ (8001ce0 <BrushUpDownMode+0x234>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f113 0f03 	cmn.w	r3, #3
 8001c56:	d11e      	bne.n	8001c96 <BrushUpDownMode+0x1ea>
		if (HAL_GetTick() < timestamp_servo2 + 200)
 8001c58:	f001 fbba 	bl	80033d0 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	4b26      	ldr	r3, [pc, #152]	@ (8001cf8 <BrushUpDownMode+0x24c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	33c8      	adds	r3, #200	@ 0xc8
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d20d      	bcs.n	8001c84 <BrushUpDownMode+0x1d8>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8001c68:	2201      	movs	r2, #1
 8001c6a:	2180      	movs	r1, #128	@ 0x80
 8001c6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c70:	f002 f980 	bl	8003f74 <HAL_GPIO_WritePin>
			PWM_write_duty(&BrushUD2, 998, 50);
 8001c74:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8001ce8 <BrushUpDownMode+0x23c>
 8001c78:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8001cec <BrushUpDownMode+0x240>
 8001c7c:	481d      	ldr	r0, [pc, #116]	@ (8001cf4 <BrushUpDownMode+0x248>)
 8001c7e:	f7ff f90f 	bl	8000ea0 <PWM_write_duty>
}
 8001c82:	e02a      	b.n	8001cda <BrushUpDownMode+0x22e>
			Servo_switch = 0;
 8001c84:	4b16      	ldr	r3, [pc, #88]	@ (8001ce0 <BrushUpDownMode+0x234>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
			timestamp_servo2 = HAL_GetTick();
 8001c8a:	f001 fba1 	bl	80033d0 <HAL_GetTick>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4a19      	ldr	r2, [pc, #100]	@ (8001cf8 <BrushUpDownMode+0x24c>)
 8001c92:	6013      	str	r3, [r2, #0]
}
 8001c94:	e021      	b.n	8001cda <BrushUpDownMode+0x22e>
		timestamp_servo = HAL_GetTick();
 8001c96:	f001 fb9b 	bl	80033d0 <HAL_GetTick>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	4a11      	ldr	r2, [pc, #68]	@ (8001ce4 <BrushUpDownMode+0x238>)
 8001c9e:	6013      	str	r3, [r2, #0]
		timestamp_servo2 = HAL_GetTick();
 8001ca0:	f001 fb96 	bl	80033d0 <HAL_GetTick>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	4a14      	ldr	r2, [pc, #80]	@ (8001cf8 <BrushUpDownMode+0x24c>)
 8001ca8:	6013      	str	r3, [r2, #0]
		timestamp_servo3 = HAL_GetTick();
 8001caa:	f001 fb91 	bl	80033d0 <HAL_GetTick>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	4a12      	ldr	r2, [pc, #72]	@ (8001cfc <BrushUpDownMode+0x250>)
 8001cb2:	6013      	str	r3, [r2, #0]
		timestamp_servo4 = HAL_GetTick();
 8001cb4:	f001 fb8c 	bl	80033d0 <HAL_GetTick>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	4a11      	ldr	r2, [pc, #68]	@ (8001d00 <BrushUpDownMode+0x254>)
 8001cbc:	6013      	str	r3, [r2, #0]
		PWM_write_duty(&BrushUD2, 998, 0);
 8001cbe:	eddf 0a11 	vldr	s1, [pc, #68]	@ 8001d04 <BrushUpDownMode+0x258>
 8001cc2:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8001cec <BrushUpDownMode+0x240>
 8001cc6:	480b      	ldr	r0, [pc, #44]	@ (8001cf4 <BrushUpDownMode+0x248>)
 8001cc8:	f7ff f8ea 	bl	8000ea0 <PWM_write_duty>
		PWM_write_duty(&BrushUD, 998, 0);
 8001ccc:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8001d04 <BrushUpDownMode+0x258>
 8001cd0:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8001cec <BrushUpDownMode+0x240>
 8001cd4:	4806      	ldr	r0, [pc, #24]	@ (8001cf0 <BrushUpDownMode+0x244>)
 8001cd6:	f7ff f8e3 	bl	8000ea0 <PWM_write_duty>
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20003590 	.word	0x20003590
 8001ce4:	200035f8 	.word	0x200035f8
 8001ce8:	42480000 	.word	0x42480000
 8001cec:	44798000 	.word	0x44798000
 8001cf0:	200035c4 	.word	0x200035c4
 8001cf4:	200035dc 	.word	0x200035dc
 8001cf8:	200035fc 	.word	0x200035fc
 8001cfc:	20003600 	.word	0x20003600
 8001d00:	20003604 	.word	0x20003604
 8001d04:	00000000 	.word	0x00000000

08001d08 <Omron_check>:

void Omron_check()
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 1)
 8001d0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d16:	f002 f915 	bl	8003f44 <HAL_GPIO_ReadPin>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d119      	bne.n	8001d54 <Omron_check+0x4c>
	{
		if (HAL_GetTick() > timestamp_omron + 2000){
 8001d20:	f001 fb56 	bl	80033d0 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	4b15      	ldr	r3, [pc, #84]	@ (8001d7c <Omron_check+0x74>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d920      	bls.n	8001d74 <Omron_check+0x6c>
			std_msgs__msg__Int32 msg;

			// Set message value
			msg.data = 1;
 8001d32:	2301      	movs	r3, #1
 8001d34:	607b      	str	r3, [r7, #4]
			Omron = 1;
 8001d36:	4b12      	ldr	r3, [pc, #72]	@ (8001d80 <Omron_check+0x78>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
			// Publish message
			rcl_publish(&omron_publisher, &msg, NULL);
 8001d3c:	1d3b      	adds	r3, r7, #4
 8001d3e:	2200      	movs	r2, #0
 8001d40:	4619      	mov	r1, r3
 8001d42:	4810      	ldr	r0, [pc, #64]	@ (8001d84 <Omron_check+0x7c>)
 8001d44:	f00b f8d0 	bl	800cee8 <rcl_publish>
			timestamp_omron = HAL_GetTick();
 8001d48:	f001 fb42 	bl	80033d0 <HAL_GetTick>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	4a0b      	ldr	r2, [pc, #44]	@ (8001d7c <Omron_check+0x74>)
 8001d50:	6013      	str	r3, [r2, #0]
		msg.data = 0;
		Omron = 0;
		// Publish message
		rcl_publish(&omron_publisher, &msg, NULL);
	}
}
 8001d52:	e00f      	b.n	8001d74 <Omron_check+0x6c>
		timestamp_omron  = HAL_GetTick();
 8001d54:	f001 fb3c 	bl	80033d0 <HAL_GetTick>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	4a08      	ldr	r2, [pc, #32]	@ (8001d7c <Omron_check+0x74>)
 8001d5c:	6013      	str	r3, [r2, #0]
		msg.data = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	603b      	str	r3, [r7, #0]
		Omron = 0;
 8001d62:	4b07      	ldr	r3, [pc, #28]	@ (8001d80 <Omron_check+0x78>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
		rcl_publish(&omron_publisher, &msg, NULL);
 8001d68:	463b      	mov	r3, r7
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4805      	ldr	r0, [pc, #20]	@ (8001d84 <Omron_check+0x7c>)
 8001d70:	f00b f8ba 	bl	800cee8 <rcl_publish>
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20003608 	.word	0x20003608
 8001d80:	200035f4 	.word	0x200035f4
 8001d84:	200034a0 	.word	0x200034a0

08001d88 <subscription_callback_servo>:

void subscription_callback_servo(const void * msgin)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32 *)msgin;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	60fb      	str	r3, [r7, #12]
	Servo_switch = msg->data;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a03      	ldr	r2, [pc, #12]	@ (8001da8 <subscription_callback_servo+0x20>)
 8001d9a:	6013      	str	r3, [r2, #0]
	// 0 = do nothing
	// 1 and -1 , 1 == 1 up , -1 == 1 down
	// 2 and -2
}
 8001d9c:	bf00      	nop
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	20003590 	.word	0x20003590

08001dac <subscription_callback_Brush>:

void subscription_callback_Brush(const void * msgin)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32 *)msgin;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	60fb      	str	r3, [r7, #12]
	Brush = msg->data;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a03      	ldr	r2, [pc, #12]	@ (8001dcc <subscription_callback_Brush+0x20>)
 8001dbe:	6013      	str	r3, [r2, #0]
}
 8001dc0:	bf00      	nop
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	20003588 	.word	0x20003588

08001dd0 <subscription_callback_Water>:

void subscription_callback_Water(const void * msgin)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32 *)msgin;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	60fb      	str	r3, [r7, #12]
	Water = msg->data;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a03      	ldr	r2, [pc, #12]	@ (8001df0 <subscription_callback_Water+0x20>)
 8001de2:	6013      	str	r3, [r2, #0]
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	2000358c 	.word	0x2000358c

08001df4 <EEPROMReadExample>:

void EEPROMReadExample(uint8_t *Rdata) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af02      	add	r7, sp, #8
 8001dfa:	6078      	str	r0, [r7, #4]
	if (eepromExampleReadFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8001dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8001e34 <EEPROMReadExample+0x40>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d012      	beq.n	8001e2a <EEPROMReadExample+0x36>
 8001e04:	4b0c      	ldr	r3, [pc, #48]	@ (8001e38 <EEPROMReadExample+0x44>)
 8001e06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b20      	cmp	r3, #32
 8001e0e:	d10c      	bne.n	8001e2a <EEPROMReadExample+0x36>
//		HAL_I2C_Mem_Read_IT(&hi2c1, 0x40, 0x12, I2C_MEMADD_SIZE_8BIT, Rdata, 2);
		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x12, I2C_MEMADD_SIZE_8BIT, Rdata, 2);
 8001e10:	2302      	movs	r3, #2
 8001e12:	9301      	str	r3, [sp, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	2301      	movs	r3, #1
 8001e1a:	2212      	movs	r2, #18
 8001e1c:	2140      	movs	r1, #64	@ 0x40
 8001e1e:	4806      	ldr	r0, [pc, #24]	@ (8001e38 <EEPROMReadExample+0x44>)
 8001e20:	f002 f97e 	bl	8004120 <HAL_I2C_Mem_Read_IT>
//		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x12, I2C_MEMADD_SIZE_16BIT, Rdata, 2);
		eepromExampleReadFlag = 0;
 8001e24:	4b03      	ldr	r3, [pc, #12]	@ (8001e34 <EEPROMReadExample+0x40>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]


	}
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20003618 	.word	0x20003618
 8001e38:	2000012c 	.word	0x2000012c

08001e3c <EEPROMReadExample2>:
void EEPROMReadExample2(uint8_t *Rdata) {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af02      	add	r7, sp, #8
 8001e42:	6078      	str	r0, [r7, #4]
	if (eepromExampleReadFlag2 && hi2c3.State == HAL_I2C_STATE_READY) {
 8001e44:	4b0d      	ldr	r3, [pc, #52]	@ (8001e7c <EEPROMReadExample2+0x40>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d012      	beq.n	8001e72 <EEPROMReadExample2+0x36>
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e80 <EEPROMReadExample2+0x44>)
 8001e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b20      	cmp	r3, #32
 8001e56:	d10c      	bne.n	8001e72 <EEPROMReadExample2+0x36>
//		HAL_I2C_Mem_Read_IT(&hi2c1, 0x40, 0x12, I2C_MEMADD_SIZE_8BIT, Rdata, 2);
		HAL_I2C_Mem_Read_IT(&hi2c3, EEPROM_ADDR2, 0x12, I2C_MEMADD_SIZE_8BIT, Rdata, 2);
 8001e58:	2302      	movs	r3, #2
 8001e5a:	9301      	str	r3, [sp, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	2301      	movs	r3, #1
 8001e62:	2212      	movs	r2, #18
 8001e64:	2148      	movs	r1, #72	@ 0x48
 8001e66:	4806      	ldr	r0, [pc, #24]	@ (8001e80 <EEPROMReadExample2+0x44>)
 8001e68:	f002 f95a 	bl	8004120 <HAL_I2C_Mem_Read_IT>
//		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x12, I2C_MEMADD_SIZE_16BIT, Rdata, 2);
		eepromExampleReadFlag2 = 0;
 8001e6c:	4b03      	ldr	r3, [pc, #12]	@ (8001e7c <EEPROMReadExample2+0x40>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	701a      	strb	r2, [r3, #0]


	}
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20003640 	.word	0x20003640
 8001e80:	20000180 	.word	0x20000180

08001e84 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001e84:	b5b0      	push	{r4, r5, r7, lr}
 8001e86:	b0b2      	sub	sp, #200	@ 0xc8
 8001e88:	af02      	add	r7, sp, #8
 8001e8a:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
  /* USER CODE BEGIN 5 */
		rmw_uros_set_custom_transport(
 8001e8e:	4b61      	ldr	r3, [pc, #388]	@ (8002014 <StartDefaultTask+0x190>)
 8001e90:	9301      	str	r3, [sp, #4]
 8001e92:	4b61      	ldr	r3, [pc, #388]	@ (8002018 <StartDefaultTask+0x194>)
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	4b61      	ldr	r3, [pc, #388]	@ (800201c <StartDefaultTask+0x198>)
 8001e98:	4a61      	ldr	r2, [pc, #388]	@ (8002020 <StartDefaultTask+0x19c>)
 8001e9a:	4962      	ldr	r1, [pc, #392]	@ (8002024 <StartDefaultTask+0x1a0>)
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	f00c f8ab 	bl	800dff8 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

		rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001ea2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f00b ffc2 	bl	800de30 <rcutils_get_zero_initialized_allocator>
		freeRTOS_allocator.allocate = microros_allocate;
 8001eac:	4b5e      	ldr	r3, [pc, #376]	@ (8002028 <StartDefaultTask+0x1a4>)
 8001eae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		freeRTOS_allocator.deallocate = microros_deallocate;
 8001eb2:	4b5e      	ldr	r3, [pc, #376]	@ (800202c <StartDefaultTask+0x1a8>)
 8001eb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		freeRTOS_allocator.reallocate = microros_reallocate;
 8001eb8:	4b5d      	ldr	r3, [pc, #372]	@ (8002030 <StartDefaultTask+0x1ac>)
 8001eba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
		freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 8001ebe:	4b5d      	ldr	r3, [pc, #372]	@ (8002034 <StartDefaultTask+0x1b0>)
 8001ec0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

		if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001ec4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f00b ffbf 	bl	800de4c <rcutils_set_default_allocator>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	f083 0301 	eor.w	r3, r3, #1
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d004      	beq.n	8001ee4 <StartDefaultTask+0x60>
		  printf("Error on default allocators (line %d)\n", __LINE__);
 8001eda:	f240 31af 	movw	r1, #943	@ 0x3af
 8001ede:	4856      	ldr	r0, [pc, #344]	@ (8002038 <StartDefaultTask+0x1b4>)
 8001ee0:	f017 ff86 	bl	8019df0 <iprintf>
		}

		// micro-ROS app
		allocator = rcl_get_default_allocator();
 8001ee4:	4c55      	ldr	r4, [pc, #340]	@ (800203c <StartDefaultTask+0x1b8>)
 8001ee6:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001eea:	4618      	mov	r0, r3
 8001eec:	f00b ffcc 	bl	800de88 <rcutils_get_default_allocator>
 8001ef0:	4625      	mov	r5, r4
 8001ef2:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8001ef6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001efa:	6823      	ldr	r3, [r4, #0]
 8001efc:	602b      	str	r3, [r5, #0]

		init_options = rcl_get_zero_initialized_init_options();
 8001efe:	f00a fe23 	bl	800cb48 <rcl_get_zero_initialized_init_options>
 8001f02:	4603      	mov	r3, r0
 8001f04:	4a4e      	ldr	r2, [pc, #312]	@ (8002040 <StartDefaultTask+0x1bc>)
 8001f06:	6013      	str	r3, [r2, #0]
		rcl_init_options_init(&init_options, allocator);
 8001f08:	4b4c      	ldr	r3, [pc, #304]	@ (800203c <StartDefaultTask+0x1b8>)
 8001f0a:	466c      	mov	r4, sp
 8001f0c:	f103 020c 	add.w	r2, r3, #12
 8001f10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f14:	e884 0003 	stmia.w	r4, {r0, r1}
 8001f18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f1a:	4849      	ldr	r0, [pc, #292]	@ (8002040 <StartDefaultTask+0x1bc>)
 8001f1c:	f00a fe16 	bl	800cb4c <rcl_init_options_init>
		rcl_init_options_set_domain_id(&init_options, 1);
 8001f20:	2101      	movs	r1, #1
 8001f22:	4847      	ldr	r0, [pc, #284]	@ (8002040 <StartDefaultTask+0x1bc>)
 8001f24:	f00a ff0e 	bl	800cd44 <rcl_init_options_set_domain_id>

		// Initialize rclc support object with custom options
		rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8001f28:	4b44      	ldr	r3, [pc, #272]	@ (800203c <StartDefaultTask+0x1b8>)
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	4b44      	ldr	r3, [pc, #272]	@ (8002040 <StartDefaultTask+0x1bc>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2100      	movs	r1, #0
 8001f32:	4844      	ldr	r0, [pc, #272]	@ (8002044 <StartDefaultTask+0x1c0>)
 8001f34:	f00b fe6c 	bl	800dc10 <rclc_support_init_with_options>

		// Create node
		rclc_node_init_default(&node, "cubemx_node", "", &support);
 8001f38:	4b42      	ldr	r3, [pc, #264]	@ (8002044 <StartDefaultTask+0x1c0>)
 8001f3a:	4a43      	ldr	r2, [pc, #268]	@ (8002048 <StartDefaultTask+0x1c4>)
 8001f3c:	4943      	ldr	r1, [pc, #268]	@ (800204c <StartDefaultTask+0x1c8>)
 8001f3e:	4844      	ldr	r0, [pc, #272]	@ (8002050 <StartDefaultTask+0x1cc>)
 8001f40:	f00b fe9a 	bl	800dc78 <rclc_node_init_default>

		// Create timer
		rclc_timer_init_default(&timer, &support, RCL_MS_TO_NS(10), timer_callback);
 8001f44:	4b43      	ldr	r3, [pc, #268]	@ (8002054 <StartDefaultTask+0x1d0>)
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	4a43      	ldr	r2, [pc, #268]	@ (8002058 <StartDefaultTask+0x1d4>)
 8001f4a:	f04f 0300 	mov.w	r3, #0
 8001f4e:	493d      	ldr	r1, [pc, #244]	@ (8002044 <StartDefaultTask+0x1c0>)
 8001f50:	4842      	ldr	r0, [pc, #264]	@ (800205c <StartDefaultTask+0x1d8>)
 8001f52:	f00b ff35 	bl	800ddc0 <rclc_timer_init_default>

		// Create subscriber
		rclc_subscription_init_default(
 8001f56:	f00d fa9b 	bl	800f490 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	4b40      	ldr	r3, [pc, #256]	@ (8002060 <StartDefaultTask+0x1dc>)
 8001f5e:	493c      	ldr	r1, [pc, #240]	@ (8002050 <StartDefaultTask+0x1cc>)
 8001f60:	4840      	ldr	r0, [pc, #256]	@ (8002064 <StartDefaultTask+0x1e0>)
 8001f62:	f00b fef9 	bl	800dd58 <rclc_subscription_init_default>
			&subscriber_servo,
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			"cubemx_publisher_servo");

		rclc_subscription_init_default(
 8001f66:	f00d fa93 	bl	800f490 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	4b3e      	ldr	r3, [pc, #248]	@ (8002068 <StartDefaultTask+0x1e4>)
 8001f6e:	4938      	ldr	r1, [pc, #224]	@ (8002050 <StartDefaultTask+0x1cc>)
 8001f70:	483e      	ldr	r0, [pc, #248]	@ (800206c <StartDefaultTask+0x1e8>)
 8001f72:	f00b fef1 	bl	800dd58 <rclc_subscription_init_default>
			&subscriber_Brush,
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			"cubemx_publisher_Brush");

		rclc_subscription_init_default(
 8001f76:	f00d fa8b 	bl	800f490 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	4b3c      	ldr	r3, [pc, #240]	@ (8002070 <StartDefaultTask+0x1ec>)
 8001f7e:	4934      	ldr	r1, [pc, #208]	@ (8002050 <StartDefaultTask+0x1cc>)
 8001f80:	483c      	ldr	r0, [pc, #240]	@ (8002074 <StartDefaultTask+0x1f0>)
 8001f82:	f00b fee9 	bl	800dd58 <rclc_subscription_init_default>
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			"cubemx_publisher_Water");

		// create publisher
		rclc_publisher_init_default(
 8001f86:	f00d fa83 	bl	800f490 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	4b3a      	ldr	r3, [pc, #232]	@ (8002078 <StartDefaultTask+0x1f4>)
 8001f8e:	4930      	ldr	r1, [pc, #192]	@ (8002050 <StartDefaultTask+0x1cc>)
 8001f90:	483a      	ldr	r0, [pc, #232]	@ (800207c <StartDefaultTask+0x1f8>)
 8001f92:	f00b fead 	bl	800dcf0 <rclc_publisher_init_default>
			&publisher,
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			"cubemx_publisher");

		rclc_publisher_init_default(
 8001f96:	f00d fa7b 	bl	800f490 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	4b38      	ldr	r3, [pc, #224]	@ (8002080 <StartDefaultTask+0x1fc>)
 8001f9e:	492c      	ldr	r1, [pc, #176]	@ (8002050 <StartDefaultTask+0x1cc>)
 8001fa0:	4838      	ldr	r0, [pc, #224]	@ (8002084 <StartDefaultTask+0x200>)
 8001fa2:	f00b fea5 	bl	800dcf0 <rclc_publisher_init_default>
			&omron_publisher,
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
			"cubemx_publisher_Omron");

		msg_pub.data = 0;
 8001fa6:	4b38      	ldr	r3, [pc, #224]	@ (8002088 <StartDefaultTask+0x204>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]

		// Initialize the executor
		executor = rclc_executor_get_zero_initialized_executor();
 8001fac:	4c37      	ldr	r4, [pc, #220]	@ (800208c <StartDefaultTask+0x208>)
 8001fae:	463b      	mov	r3, r7
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f00b fb27 	bl	800d604 <rclc_executor_get_zero_initialized_executor>
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	463b      	mov	r3, r7
 8001fba:	2288      	movs	r2, #136	@ 0x88
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f018 f8cc 	bl	801a15a <memcpy>
		rclc_executor_init(&executor, &support.context, 4, &allocator);
 8001fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800203c <StartDefaultTask+0x1b8>)
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	491f      	ldr	r1, [pc, #124]	@ (8002044 <StartDefaultTask+0x1c0>)
 8001fc8:	4830      	ldr	r0, [pc, #192]	@ (800208c <StartDefaultTask+0x208>)
 8001fca:	f00b fb25 	bl	800d618 <rclc_executor_init>
		rclc_executor_add_timer(&executor, &timer);
 8001fce:	4923      	ldr	r1, [pc, #140]	@ (800205c <StartDefaultTask+0x1d8>)
 8001fd0:	482e      	ldr	r0, [pc, #184]	@ (800208c <StartDefaultTask+0x208>)
 8001fd2:	f00b fbc5 	bl	800d760 <rclc_executor_add_timer>
		rclc_executor_add_subscription(&executor, &subscriber_servo, &msg_servo, subscription_callback_servo, ON_NEW_DATA);
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	4b2d      	ldr	r3, [pc, #180]	@ (8002090 <StartDefaultTask+0x20c>)
 8001fdc:	4a2d      	ldr	r2, [pc, #180]	@ (8002094 <StartDefaultTask+0x210>)
 8001fde:	4921      	ldr	r1, [pc, #132]	@ (8002064 <StartDefaultTask+0x1e0>)
 8001fe0:	482a      	ldr	r0, [pc, #168]	@ (800208c <StartDefaultTask+0x208>)
 8001fe2:	f00b fb89 	bl	800d6f8 <rclc_executor_add_subscription>
		rclc_executor_add_subscription(&executor, &subscriber_Brush, &msg_Brush, subscription_callback_Brush, ON_NEW_DATA);
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	4b2b      	ldr	r3, [pc, #172]	@ (8002098 <StartDefaultTask+0x214>)
 8001fec:	4a2b      	ldr	r2, [pc, #172]	@ (800209c <StartDefaultTask+0x218>)
 8001fee:	491f      	ldr	r1, [pc, #124]	@ (800206c <StartDefaultTask+0x1e8>)
 8001ff0:	4826      	ldr	r0, [pc, #152]	@ (800208c <StartDefaultTask+0x208>)
 8001ff2:	f00b fb81 	bl	800d6f8 <rclc_executor_add_subscription>
		rclc_executor_add_subscription(&executor, &subscriber_Water, &msg_Water, subscription_callback_Water, ON_NEW_DATA);
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	4b29      	ldr	r3, [pc, #164]	@ (80020a0 <StartDefaultTask+0x21c>)
 8001ffc:	4a29      	ldr	r2, [pc, #164]	@ (80020a4 <StartDefaultTask+0x220>)
 8001ffe:	491d      	ldr	r1, [pc, #116]	@ (8002074 <StartDefaultTask+0x1f0>)
 8002000:	4822      	ldr	r0, [pc, #136]	@ (800208c <StartDefaultTask+0x208>)
 8002002:	f00b fb79 	bl	800d6f8 <rclc_executor_add_subscription>
		rclc_executor_spin(&executor);
 8002006:	4821      	ldr	r0, [pc, #132]	@ (800208c <StartDefaultTask+0x208>)
 8002008:	f00b fdc0 	bl	800db8c <rclc_executor_spin>

		for(;;)
		{
			osDelay(10);
 800200c:	200a      	movs	r0, #10
 800200e:	f008 f8cd 	bl	800a1ac <osDelay>
 8002012:	e7fb      	b.n	800200c <StartDefaultTask+0x188>
 8002014:	08003281 	.word	0x08003281
 8002018:	0800321d 	.word	0x0800321d
 800201c:	080031fd 	.word	0x080031fd
 8002020:	080031d1 	.word	0x080031d1
 8002024:	20000354 	.word	0x20000354
 8002028:	08002f05 	.word	0x08002f05
 800202c:	08002f49 	.word	0x08002f49
 8002030:	08002f81 	.word	0x08002f81
 8002034:	08002fed 	.word	0x08002fed
 8002038:	0801af2c 	.word	0x0801af2c
 800203c:	200034dc 	.word	0x200034dc
 8002040:	200034f8 	.word	0x200034f8
 8002044:	200034a8 	.word	0x200034a8
 8002048:	0801af54 	.word	0x0801af54
 800204c:	0801af58 	.word	0x0801af58
 8002050:	200034f0 	.word	0x200034f0
 8002054:	08001759 	.word	0x08001759
 8002058:	00989680 	.word	0x00989680
 800205c:	200034a4 	.word	0x200034a4
 8002060:	0801af64 	.word	0x0801af64
 8002064:	20003480 	.word	0x20003480
 8002068:	0801af7c 	.word	0x0801af7c
 800206c:	20003488 	.word	0x20003488
 8002070:	0801af94 	.word	0x0801af94
 8002074:	20003490 	.word	0x20003490
 8002078:	0801afac 	.word	0x0801afac
 800207c:	20003498 	.word	0x20003498
 8002080:	0801afc0 	.word	0x0801afc0
 8002084:	200034a0 	.word	0x200034a0
 8002088:	2000349c 	.word	0x2000349c
 800208c:	20003500 	.word	0x20003500
 8002090:	08001d89 	.word	0x08001d89
 8002094:	20003484 	.word	0x20003484
 8002098:	08001dad 	.word	0x08001dad
 800209c:	2000348c 	.word	0x2000348c
 80020a0:	08001dd1 	.word	0x08001dd1
 80020a4:	20003494 	.word	0x20003494

080020a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a04      	ldr	r2, [pc, #16]	@ (80020c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d101      	bne.n	80020be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020ba:	f001 f977 	bl	80033ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40012c00 	.word	0x40012c00

080020cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80020d0:	b672      	cpsid	i
}
 80020d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020d4:	bf00      	nop
 80020d6:	e7fd      	b.n	80020d4 <Error_Handler+0x8>

080020d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020de:	4b12      	ldr	r3, [pc, #72]	@ (8002128 <HAL_MspInit+0x50>)
 80020e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020e2:	4a11      	ldr	r2, [pc, #68]	@ (8002128 <HAL_MspInit+0x50>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80020ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002128 <HAL_MspInit+0x50>)
 80020ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	607b      	str	r3, [r7, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002128 <HAL_MspInit+0x50>)
 80020f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fa:	4a0b      	ldr	r2, [pc, #44]	@ (8002128 <HAL_MspInit+0x50>)
 80020fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002100:	6593      	str	r3, [r2, #88]	@ 0x58
 8002102:	4b09      	ldr	r3, [pc, #36]	@ (8002128 <HAL_MspInit+0x50>)
 8002104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800210a:	603b      	str	r3, [r7, #0]
 800210c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	210f      	movs	r1, #15
 8002112:	f06f 0001 	mvn.w	r0, #1
 8002116:	f001 fa1f 	bl	8003558 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800211a:	f003 fdb3 	bl	8005c84 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40021000 	.word	0x40021000

0800212c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b0a0      	sub	sp, #128	@ 0x80
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002134:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002144:	f107 0318 	add.w	r3, r7, #24
 8002148:	2254      	movs	r2, #84	@ 0x54
 800214a:	2100      	movs	r1, #0
 800214c:	4618      	mov	r0, r3
 800214e:	f017 ff3b 	bl	8019fc8 <memset>
  if(hi2c->Instance==I2C1)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4aa1      	ldr	r2, [pc, #644]	@ (80023dc <HAL_I2C_MspInit+0x2b0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	f040 809a 	bne.w	8002292 <HAL_I2C_MspInit+0x166>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800215e:	2340      	movs	r3, #64	@ 0x40
 8002160:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002162:	2300      	movs	r3, #0
 8002164:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002166:	f107 0318 	add.w	r3, r7, #24
 800216a:	4618      	mov	r0, r3
 800216c:	f004 fafa 	bl	8006764 <HAL_RCCEx_PeriphCLKConfig>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002176:	f7ff ffa9 	bl	80020cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800217a:	4b99      	ldr	r3, [pc, #612]	@ (80023e0 <HAL_I2C_MspInit+0x2b4>)
 800217c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800217e:	4a98      	ldr	r2, [pc, #608]	@ (80023e0 <HAL_I2C_MspInit+0x2b4>)
 8002180:	f043 0302 	orr.w	r3, r3, #2
 8002184:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002186:	4b96      	ldr	r3, [pc, #600]	@ (80023e0 <HAL_I2C_MspInit+0x2b4>)
 8002188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002192:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002196:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002198:	2312      	movs	r3, #18
 800219a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a0:	2300      	movs	r3, #0
 80021a2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021a4:	2304      	movs	r3, #4
 80021a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80021ac:	4619      	mov	r1, r3
 80021ae:	488d      	ldr	r0, [pc, #564]	@ (80023e4 <HAL_I2C_MspInit+0x2b8>)
 80021b0:	f001 fd46 	bl	8003c40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021b4:	4b8a      	ldr	r3, [pc, #552]	@ (80023e0 <HAL_I2C_MspInit+0x2b4>)
 80021b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b8:	4a89      	ldr	r2, [pc, #548]	@ (80023e0 <HAL_I2C_MspInit+0x2b4>)
 80021ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021be:	6593      	str	r3, [r2, #88]	@ 0x58
 80021c0:	4b87      	ldr	r3, [pc, #540]	@ (80023e0 <HAL_I2C_MspInit+0x2b4>)
 80021c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel5;
 80021cc:	4b86      	ldr	r3, [pc, #536]	@ (80023e8 <HAL_I2C_MspInit+0x2bc>)
 80021ce:	4a87      	ldr	r2, [pc, #540]	@ (80023ec <HAL_I2C_MspInit+0x2c0>)
 80021d0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80021d2:	4b85      	ldr	r3, [pc, #532]	@ (80023e8 <HAL_I2C_MspInit+0x2bc>)
 80021d4:	2210      	movs	r2, #16
 80021d6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021d8:	4b83      	ldr	r3, [pc, #524]	@ (80023e8 <HAL_I2C_MspInit+0x2bc>)
 80021da:	2200      	movs	r2, #0
 80021dc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021de:	4b82      	ldr	r3, [pc, #520]	@ (80023e8 <HAL_I2C_MspInit+0x2bc>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021e4:	4b80      	ldr	r3, [pc, #512]	@ (80023e8 <HAL_I2C_MspInit+0x2bc>)
 80021e6:	2280      	movs	r2, #128	@ 0x80
 80021e8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021ea:	4b7f      	ldr	r3, [pc, #508]	@ (80023e8 <HAL_I2C_MspInit+0x2bc>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021f0:	4b7d      	ldr	r3, [pc, #500]	@ (80023e8 <HAL_I2C_MspInit+0x2bc>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80021f6:	4b7c      	ldr	r3, [pc, #496]	@ (80023e8 <HAL_I2C_MspInit+0x2bc>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021fc:	4b7a      	ldr	r3, [pc, #488]	@ (80023e8 <HAL_I2C_MspInit+0x2bc>)
 80021fe:	2200      	movs	r2, #0
 8002200:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002202:	4879      	ldr	r0, [pc, #484]	@ (80023e8 <HAL_I2C_MspInit+0x2bc>)
 8002204:	f001 f9d0 	bl	80035a8 <HAL_DMA_Init>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_I2C_MspInit+0xe6>
    {
      Error_Handler();
 800220e:	f7ff ff5d 	bl	80020cc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a74      	ldr	r2, [pc, #464]	@ (80023e8 <HAL_I2C_MspInit+0x2bc>)
 8002216:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002218:	4a73      	ldr	r2, [pc, #460]	@ (80023e8 <HAL_I2C_MspInit+0x2bc>)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800221e:	4b74      	ldr	r3, [pc, #464]	@ (80023f0 <HAL_I2C_MspInit+0x2c4>)
 8002220:	4a74      	ldr	r2, [pc, #464]	@ (80023f4 <HAL_I2C_MspInit+0x2c8>)
 8002222:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002224:	4b72      	ldr	r3, [pc, #456]	@ (80023f0 <HAL_I2C_MspInit+0x2c4>)
 8002226:	2211      	movs	r2, #17
 8002228:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800222a:	4b71      	ldr	r3, [pc, #452]	@ (80023f0 <HAL_I2C_MspInit+0x2c4>)
 800222c:	2210      	movs	r2, #16
 800222e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002230:	4b6f      	ldr	r3, [pc, #444]	@ (80023f0 <HAL_I2C_MspInit+0x2c4>)
 8002232:	2200      	movs	r2, #0
 8002234:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002236:	4b6e      	ldr	r3, [pc, #440]	@ (80023f0 <HAL_I2C_MspInit+0x2c4>)
 8002238:	2280      	movs	r2, #128	@ 0x80
 800223a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800223c:	4b6c      	ldr	r3, [pc, #432]	@ (80023f0 <HAL_I2C_MspInit+0x2c4>)
 800223e:	2200      	movs	r2, #0
 8002240:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002242:	4b6b      	ldr	r3, [pc, #428]	@ (80023f0 <HAL_I2C_MspInit+0x2c4>)
 8002244:	2200      	movs	r2, #0
 8002246:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002248:	4b69      	ldr	r3, [pc, #420]	@ (80023f0 <HAL_I2C_MspInit+0x2c4>)
 800224a:	2200      	movs	r2, #0
 800224c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800224e:	4b68      	ldr	r3, [pc, #416]	@ (80023f0 <HAL_I2C_MspInit+0x2c4>)
 8002250:	2200      	movs	r2, #0
 8002252:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002254:	4866      	ldr	r0, [pc, #408]	@ (80023f0 <HAL_I2C_MspInit+0x2c4>)
 8002256:	f001 f9a7 	bl	80035a8 <HAL_DMA_Init>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <HAL_I2C_MspInit+0x138>
    {
      Error_Handler();
 8002260:	f7ff ff34 	bl	80020cc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a62      	ldr	r2, [pc, #392]	@ (80023f0 <HAL_I2C_MspInit+0x2c4>)
 8002268:	639a      	str	r2, [r3, #56]	@ 0x38
 800226a:	4a61      	ldr	r2, [pc, #388]	@ (80023f0 <HAL_I2C_MspInit+0x2c4>)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002270:	2200      	movs	r2, #0
 8002272:	2105      	movs	r1, #5
 8002274:	201f      	movs	r0, #31
 8002276:	f001 f96f 	bl	8003558 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800227a:	201f      	movs	r0, #31
 800227c:	f001 f986 	bl	800358c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002280:	2200      	movs	r2, #0
 8002282:	2105      	movs	r1, #5
 8002284:	2020      	movs	r0, #32
 8002286:	f001 f967 	bl	8003558 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800228a:	2020      	movs	r0, #32
 800228c:	f001 f97e 	bl	800358c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002290:	e09f      	b.n	80023d2 <HAL_I2C_MspInit+0x2a6>
  else if(hi2c->Instance==I2C3)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a58      	ldr	r2, [pc, #352]	@ (80023f8 <HAL_I2C_MspInit+0x2cc>)
 8002298:	4293      	cmp	r3, r2
 800229a:	f040 809a 	bne.w	80023d2 <HAL_I2C_MspInit+0x2a6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800229e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80022a4:	2300      	movs	r3, #0
 80022a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022a8:	f107 0318 	add.w	r3, r7, #24
 80022ac:	4618      	mov	r0, r3
 80022ae:	f004 fa59 	bl	8006764 <HAL_RCCEx_PeriphCLKConfig>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_I2C_MspInit+0x190>
      Error_Handler();
 80022b8:	f7ff ff08 	bl	80020cc <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022bc:	4b48      	ldr	r3, [pc, #288]	@ (80023e0 <HAL_I2C_MspInit+0x2b4>)
 80022be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c0:	4a47      	ldr	r2, [pc, #284]	@ (80023e0 <HAL_I2C_MspInit+0x2b4>)
 80022c2:	f043 0304 	orr.w	r3, r3, #4
 80022c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022c8:	4b45      	ldr	r3, [pc, #276]	@ (80023e0 <HAL_I2C_MspInit+0x2b4>)
 80022ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022d4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80022d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022da:	2312      	movs	r3, #18
 80022dc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e2:	2300      	movs	r3, #0
 80022e4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80022e6:	2308      	movs	r3, #8
 80022e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ea:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80022ee:	4619      	mov	r1, r3
 80022f0:	4842      	ldr	r0, [pc, #264]	@ (80023fc <HAL_I2C_MspInit+0x2d0>)
 80022f2:	f001 fca5 	bl	8003c40 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80022f6:	4b3a      	ldr	r3, [pc, #232]	@ (80023e0 <HAL_I2C_MspInit+0x2b4>)
 80022f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fa:	4a39      	ldr	r2, [pc, #228]	@ (80023e0 <HAL_I2C_MspInit+0x2b4>)
 80022fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002300:	6593      	str	r3, [r2, #88]	@ 0x58
 8002302:	4b37      	ldr	r3, [pc, #220]	@ (80023e0 <HAL_I2C_MspInit+0x2b4>)
 8002304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002306:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_rx.Instance = DMA1_Channel3;
 800230e:	4b3c      	ldr	r3, [pc, #240]	@ (8002400 <HAL_I2C_MspInit+0x2d4>)
 8002310:	4a3c      	ldr	r2, [pc, #240]	@ (8002404 <HAL_I2C_MspInit+0x2d8>)
 8002312:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 8002314:	4b3a      	ldr	r3, [pc, #232]	@ (8002400 <HAL_I2C_MspInit+0x2d4>)
 8002316:	2214      	movs	r2, #20
 8002318:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800231a:	4b39      	ldr	r3, [pc, #228]	@ (8002400 <HAL_I2C_MspInit+0x2d4>)
 800231c:	2200      	movs	r2, #0
 800231e:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002320:	4b37      	ldr	r3, [pc, #220]	@ (8002400 <HAL_I2C_MspInit+0x2d4>)
 8002322:	2200      	movs	r2, #0
 8002324:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002326:	4b36      	ldr	r3, [pc, #216]	@ (8002400 <HAL_I2C_MspInit+0x2d4>)
 8002328:	2280      	movs	r2, #128	@ 0x80
 800232a:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800232c:	4b34      	ldr	r3, [pc, #208]	@ (8002400 <HAL_I2C_MspInit+0x2d4>)
 800232e:	2200      	movs	r2, #0
 8002330:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002332:	4b33      	ldr	r3, [pc, #204]	@ (8002400 <HAL_I2C_MspInit+0x2d4>)
 8002334:	2200      	movs	r2, #0
 8002336:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8002338:	4b31      	ldr	r3, [pc, #196]	@ (8002400 <HAL_I2C_MspInit+0x2d4>)
 800233a:	2200      	movs	r2, #0
 800233c:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800233e:	4b30      	ldr	r3, [pc, #192]	@ (8002400 <HAL_I2C_MspInit+0x2d4>)
 8002340:	2200      	movs	r2, #0
 8002342:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8002344:	482e      	ldr	r0, [pc, #184]	@ (8002400 <HAL_I2C_MspInit+0x2d4>)
 8002346:	f001 f92f 	bl	80035a8 <HAL_DMA_Init>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <HAL_I2C_MspInit+0x228>
      Error_Handler();
 8002350:	f7ff febc 	bl	80020cc <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a2a      	ldr	r2, [pc, #168]	@ (8002400 <HAL_I2C_MspInit+0x2d4>)
 8002358:	63da      	str	r2, [r3, #60]	@ 0x3c
 800235a:	4a29      	ldr	r2, [pc, #164]	@ (8002400 <HAL_I2C_MspInit+0x2d4>)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_i2c3_tx.Instance = DMA1_Channel4;
 8002360:	4b29      	ldr	r3, [pc, #164]	@ (8002408 <HAL_I2C_MspInit+0x2dc>)
 8002362:	4a2a      	ldr	r2, [pc, #168]	@ (800240c <HAL_I2C_MspInit+0x2e0>)
 8002364:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_I2C3_TX;
 8002366:	4b28      	ldr	r3, [pc, #160]	@ (8002408 <HAL_I2C_MspInit+0x2dc>)
 8002368:	2215      	movs	r2, #21
 800236a:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800236c:	4b26      	ldr	r3, [pc, #152]	@ (8002408 <HAL_I2C_MspInit+0x2dc>)
 800236e:	2210      	movs	r2, #16
 8002370:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002372:	4b25      	ldr	r3, [pc, #148]	@ (8002408 <HAL_I2C_MspInit+0x2dc>)
 8002374:	2200      	movs	r2, #0
 8002376:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002378:	4b23      	ldr	r3, [pc, #140]	@ (8002408 <HAL_I2C_MspInit+0x2dc>)
 800237a:	2280      	movs	r2, #128	@ 0x80
 800237c:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800237e:	4b22      	ldr	r3, [pc, #136]	@ (8002408 <HAL_I2C_MspInit+0x2dc>)
 8002380:	2200      	movs	r2, #0
 8002382:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002384:	4b20      	ldr	r3, [pc, #128]	@ (8002408 <HAL_I2C_MspInit+0x2dc>)
 8002386:	2200      	movs	r2, #0
 8002388:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 800238a:	4b1f      	ldr	r3, [pc, #124]	@ (8002408 <HAL_I2C_MspInit+0x2dc>)
 800238c:	2200      	movs	r2, #0
 800238e:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002390:	4b1d      	ldr	r3, [pc, #116]	@ (8002408 <HAL_I2C_MspInit+0x2dc>)
 8002392:	2200      	movs	r2, #0
 8002394:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8002396:	481c      	ldr	r0, [pc, #112]	@ (8002408 <HAL_I2C_MspInit+0x2dc>)
 8002398:	f001 f906 	bl	80035a8 <HAL_DMA_Init>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_I2C_MspInit+0x27a>
      Error_Handler();
 80023a2:	f7ff fe93 	bl	80020cc <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a17      	ldr	r2, [pc, #92]	@ (8002408 <HAL_I2C_MspInit+0x2dc>)
 80023aa:	639a      	str	r2, [r3, #56]	@ 0x38
 80023ac:	4a16      	ldr	r2, [pc, #88]	@ (8002408 <HAL_I2C_MspInit+0x2dc>)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 80023b2:	2200      	movs	r2, #0
 80023b4:	2105      	movs	r1, #5
 80023b6:	205c      	movs	r0, #92	@ 0x5c
 80023b8:	f001 f8ce 	bl	8003558 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80023bc:	205c      	movs	r0, #92	@ 0x5c
 80023be:	f001 f8e5 	bl	800358c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 80023c2:	2200      	movs	r2, #0
 80023c4:	2105      	movs	r1, #5
 80023c6:	205d      	movs	r0, #93	@ 0x5d
 80023c8:	f001 f8c6 	bl	8003558 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80023cc:	205d      	movs	r0, #93	@ 0x5d
 80023ce:	f001 f8dd 	bl	800358c <HAL_NVIC_EnableIRQ>
}
 80023d2:	bf00      	nop
 80023d4:	3780      	adds	r7, #128	@ 0x80
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40005400 	.word	0x40005400
 80023e0:	40021000 	.word	0x40021000
 80023e4:	48000400 	.word	0x48000400
 80023e8:	200001d4 	.word	0x200001d4
 80023ec:	40020058 	.word	0x40020058
 80023f0:	20000234 	.word	0x20000234
 80023f4:	4002006c 	.word	0x4002006c
 80023f8:	40007800 	.word	0x40007800
 80023fc:	48000800 	.word	0x48000800
 8002400:	20000294 	.word	0x20000294
 8002404:	40020030 	.word	0x40020030
 8002408:	200002f4 	.word	0x200002f4
 800240c:	40020044 	.word	0x40020044

08002410 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b09e      	sub	sp, #120	@ 0x78
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002418:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	609a      	str	r2, [r3, #8]
 8002424:	60da      	str	r2, [r3, #12]
 8002426:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002428:	f107 0310 	add.w	r3, r7, #16
 800242c:	2254      	movs	r2, #84	@ 0x54
 800242e:	2100      	movs	r1, #0
 8002430:	4618      	mov	r0, r3
 8002432:	f017 fdc9 	bl	8019fc8 <memset>
  if(huart->Instance==LPUART1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a4e      	ldr	r2, [pc, #312]	@ (8002574 <HAL_UART_MspInit+0x164>)
 800243c:	4293      	cmp	r3, r2
 800243e:	f040 8094 	bne.w	800256a <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002442:	2320      	movs	r3, #32
 8002444:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002446:	2300      	movs	r3, #0
 8002448:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800244a:	f107 0310 	add.w	r3, r7, #16
 800244e:	4618      	mov	r0, r3
 8002450:	f004 f988 	bl	8006764 <HAL_RCCEx_PeriphCLKConfig>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800245a:	f7ff fe37 	bl	80020cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800245e:	4b46      	ldr	r3, [pc, #280]	@ (8002578 <HAL_UART_MspInit+0x168>)
 8002460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002462:	4a45      	ldr	r2, [pc, #276]	@ (8002578 <HAL_UART_MspInit+0x168>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800246a:	4b43      	ldr	r3, [pc, #268]	@ (8002578 <HAL_UART_MspInit+0x168>)
 800246c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002476:	4b40      	ldr	r3, [pc, #256]	@ (8002578 <HAL_UART_MspInit+0x168>)
 8002478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800247a:	4a3f      	ldr	r2, [pc, #252]	@ (8002578 <HAL_UART_MspInit+0x168>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002482:	4b3d      	ldr	r3, [pc, #244]	@ (8002578 <HAL_UART_MspInit+0x168>)
 8002484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	60bb      	str	r3, [r7, #8]
 800248c:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800248e:	230c      	movs	r3, #12
 8002490:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002492:	2302      	movs	r3, #2
 8002494:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249a:	2300      	movs	r3, #0
 800249c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800249e:	230c      	movs	r3, #12
 80024a0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80024a6:	4619      	mov	r1, r3
 80024a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024ac:	f001 fbc8 	bl	8003c40 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 80024b0:	4b32      	ldr	r3, [pc, #200]	@ (800257c <HAL_UART_MspInit+0x16c>)
 80024b2:	4a33      	ldr	r2, [pc, #204]	@ (8002580 <HAL_UART_MspInit+0x170>)
 80024b4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80024b6:	4b31      	ldr	r3, [pc, #196]	@ (800257c <HAL_UART_MspInit+0x16c>)
 80024b8:	2223      	movs	r2, #35	@ 0x23
 80024ba:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024bc:	4b2f      	ldr	r3, [pc, #188]	@ (800257c <HAL_UART_MspInit+0x16c>)
 80024be:	2210      	movs	r2, #16
 80024c0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024c2:	4b2e      	ldr	r3, [pc, #184]	@ (800257c <HAL_UART_MspInit+0x16c>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024c8:	4b2c      	ldr	r3, [pc, #176]	@ (800257c <HAL_UART_MspInit+0x16c>)
 80024ca:	2280      	movs	r2, #128	@ 0x80
 80024cc:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024ce:	4b2b      	ldr	r3, [pc, #172]	@ (800257c <HAL_UART_MspInit+0x16c>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024d4:	4b29      	ldr	r3, [pc, #164]	@ (800257c <HAL_UART_MspInit+0x16c>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80024da:	4b28      	ldr	r3, [pc, #160]	@ (800257c <HAL_UART_MspInit+0x16c>)
 80024dc:	2200      	movs	r2, #0
 80024de:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80024e0:	4b26      	ldr	r3, [pc, #152]	@ (800257c <HAL_UART_MspInit+0x16c>)
 80024e2:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80024e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80024e8:	4824      	ldr	r0, [pc, #144]	@ (800257c <HAL_UART_MspInit+0x16c>)
 80024ea:	f001 f85d 	bl	80035a8 <HAL_DMA_Init>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 80024f4:	f7ff fdea 	bl	80020cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a20      	ldr	r2, [pc, #128]	@ (800257c <HAL_UART_MspInit+0x16c>)
 80024fc:	67da      	str	r2, [r3, #124]	@ 0x7c
 80024fe:	4a1f      	ldr	r2, [pc, #124]	@ (800257c <HAL_UART_MspInit+0x16c>)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8002504:	4b1f      	ldr	r3, [pc, #124]	@ (8002584 <HAL_UART_MspInit+0x174>)
 8002506:	4a20      	ldr	r2, [pc, #128]	@ (8002588 <HAL_UART_MspInit+0x178>)
 8002508:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800250a:	4b1e      	ldr	r3, [pc, #120]	@ (8002584 <HAL_UART_MspInit+0x174>)
 800250c:	2222      	movs	r2, #34	@ 0x22
 800250e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002510:	4b1c      	ldr	r3, [pc, #112]	@ (8002584 <HAL_UART_MspInit+0x174>)
 8002512:	2200      	movs	r2, #0
 8002514:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002516:	4b1b      	ldr	r3, [pc, #108]	@ (8002584 <HAL_UART_MspInit+0x174>)
 8002518:	2200      	movs	r2, #0
 800251a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800251c:	4b19      	ldr	r3, [pc, #100]	@ (8002584 <HAL_UART_MspInit+0x174>)
 800251e:	2280      	movs	r2, #128	@ 0x80
 8002520:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002522:	4b18      	ldr	r3, [pc, #96]	@ (8002584 <HAL_UART_MspInit+0x174>)
 8002524:	2200      	movs	r2, #0
 8002526:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002528:	4b16      	ldr	r3, [pc, #88]	@ (8002584 <HAL_UART_MspInit+0x174>)
 800252a:	2200      	movs	r2, #0
 800252c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 800252e:	4b15      	ldr	r3, [pc, #84]	@ (8002584 <HAL_UART_MspInit+0x174>)
 8002530:	2220      	movs	r2, #32
 8002532:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002534:	4b13      	ldr	r3, [pc, #76]	@ (8002584 <HAL_UART_MspInit+0x174>)
 8002536:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 800253a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800253c:	4811      	ldr	r0, [pc, #68]	@ (8002584 <HAL_UART_MspInit+0x174>)
 800253e:	f001 f833 	bl	80035a8 <HAL_DMA_Init>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8002548:	f7ff fdc0 	bl	80020cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a0d      	ldr	r2, [pc, #52]	@ (8002584 <HAL_UART_MspInit+0x174>)
 8002550:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002554:	4a0b      	ldr	r2, [pc, #44]	@ (8002584 <HAL_UART_MspInit+0x174>)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 800255a:	2200      	movs	r2, #0
 800255c:	2105      	movs	r1, #5
 800255e:	205b      	movs	r0, #91	@ 0x5b
 8002560:	f000 fffa 	bl	8003558 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002564:	205b      	movs	r0, #91	@ 0x5b
 8002566:	f001 f811 	bl	800358c <HAL_NVIC_EnableIRQ>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 800256a:	bf00      	nop
 800256c:	3778      	adds	r7, #120	@ 0x78
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40008000 	.word	0x40008000
 8002578:	40021000 	.word	0x40021000
 800257c:	200003e8 	.word	0x200003e8
 8002580:	40020008 	.word	0x40020008
 8002584:	20000448 	.word	0x20000448
 8002588:	4002001c 	.word	0x4002001c

0800258c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800259c:	d10c      	bne.n	80025b8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800259e:	4b12      	ldr	r3, [pc, #72]	@ (80025e8 <HAL_TIM_Base_MspInit+0x5c>)
 80025a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a2:	4a11      	ldr	r2, [pc, #68]	@ (80025e8 <HAL_TIM_Base_MspInit+0x5c>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80025aa:	4b0f      	ldr	r3, [pc, #60]	@ (80025e8 <HAL_TIM_Base_MspInit+0x5c>)
 80025ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80025b6:	e010      	b.n	80025da <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a0b      	ldr	r2, [pc, #44]	@ (80025ec <HAL_TIM_Base_MspInit+0x60>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d10b      	bne.n	80025da <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025c2:	4b09      	ldr	r3, [pc, #36]	@ (80025e8 <HAL_TIM_Base_MspInit+0x5c>)
 80025c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c6:	4a08      	ldr	r2, [pc, #32]	@ (80025e8 <HAL_TIM_Base_MspInit+0x5c>)
 80025c8:	f043 0302 	orr.w	r3, r3, #2
 80025cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80025ce:	4b06      	ldr	r3, [pc, #24]	@ (80025e8 <HAL_TIM_Base_MspInit+0x5c>)
 80025d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	60bb      	str	r3, [r7, #8]
 80025d8:	68bb      	ldr	r3, [r7, #8]
}
 80025da:	bf00      	nop
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40000400 	.word	0x40000400

080025f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08a      	sub	sp, #40	@ 0x28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f8:	f107 0314 	add.w	r3, r7, #20
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	605a      	str	r2, [r3, #4]
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	60da      	str	r2, [r3, #12]
 8002606:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002610:	d11d      	bne.n	800264e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002612:	4b22      	ldr	r3, [pc, #136]	@ (800269c <HAL_TIM_MspPostInit+0xac>)
 8002614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002616:	4a21      	ldr	r2, [pc, #132]	@ (800269c <HAL_TIM_MspPostInit+0xac>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800261e:	4b1f      	ldr	r3, [pc, #124]	@ (800269c <HAL_TIM_MspPostInit+0xac>)
 8002620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	613b      	str	r3, [r7, #16]
 8002628:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800262a:	2322      	movs	r3, #34	@ 0x22
 800262c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262e:	2302      	movs	r3, #2
 8002630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002636:	2300      	movs	r3, #0
 8002638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800263a:	2301      	movs	r3, #1
 800263c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800263e:	f107 0314 	add.w	r3, r7, #20
 8002642:	4619      	mov	r1, r3
 8002644:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002648:	f001 fafa 	bl	8003c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800264c:	e021      	b.n	8002692 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a13      	ldr	r2, [pc, #76]	@ (80026a0 <HAL_TIM_MspPostInit+0xb0>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d11c      	bne.n	8002692 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002658:	4b10      	ldr	r3, [pc, #64]	@ (800269c <HAL_TIM_MspPostInit+0xac>)
 800265a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800265c:	4a0f      	ldr	r2, [pc, #60]	@ (800269c <HAL_TIM_MspPostInit+0xac>)
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002664:	4b0d      	ldr	r3, [pc, #52]	@ (800269c <HAL_TIM_MspPostInit+0xac>)
 8002666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002670:	2350      	movs	r3, #80	@ 0x50
 8002672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002674:	2302      	movs	r3, #2
 8002676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267c:	2300      	movs	r3, #0
 800267e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002680:	2302      	movs	r3, #2
 8002682:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002684:	f107 0314 	add.w	r3, r7, #20
 8002688:	4619      	mov	r1, r3
 800268a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800268e:	f001 fad7 	bl	8003c40 <HAL_GPIO_Init>
}
 8002692:	bf00      	nop
 8002694:	3728      	adds	r7, #40	@ 0x28
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40021000 	.word	0x40021000
 80026a0:	40000400 	.word	0x40000400

080026a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08c      	sub	sp, #48	@ 0x30
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80026b4:	4b2c      	ldr	r3, [pc, #176]	@ (8002768 <HAL_InitTick+0xc4>)
 80026b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002768 <HAL_InitTick+0xc4>)
 80026ba:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80026be:	6613      	str	r3, [r2, #96]	@ 0x60
 80026c0:	4b29      	ldr	r3, [pc, #164]	@ (8002768 <HAL_InitTick+0xc4>)
 80026c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026cc:	f107 020c 	add.w	r2, r7, #12
 80026d0:	f107 0310 	add.w	r3, r7, #16
 80026d4:	4611      	mov	r1, r2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f003 ffcc 	bl	8006674 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80026dc:	f003 ffb4 	bl	8006648 <HAL_RCC_GetPCLK2Freq>
 80026e0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80026e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e4:	4a21      	ldr	r2, [pc, #132]	@ (800276c <HAL_InitTick+0xc8>)
 80026e6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ea:	0c9b      	lsrs	r3, r3, #18
 80026ec:	3b01      	subs	r3, #1
 80026ee:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80026f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002770 <HAL_InitTick+0xcc>)
 80026f2:	4a20      	ldr	r2, [pc, #128]	@ (8002774 <HAL_InitTick+0xd0>)
 80026f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80026f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002770 <HAL_InitTick+0xcc>)
 80026f8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80026fc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80026fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002770 <HAL_InitTick+0xcc>)
 8002700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002702:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002704:	4b1a      	ldr	r3, [pc, #104]	@ (8002770 <HAL_InitTick+0xcc>)
 8002706:	2200      	movs	r2, #0
 8002708:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800270a:	4b19      	ldr	r3, [pc, #100]	@ (8002770 <HAL_InitTick+0xcc>)
 800270c:	2200      	movs	r2, #0
 800270e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8002710:	4817      	ldr	r0, [pc, #92]	@ (8002770 <HAL_InitTick+0xcc>)
 8002712:	f004 fa75 	bl	8006c00 <HAL_TIM_Base_Init>
 8002716:	4603      	mov	r3, r0
 8002718:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800271c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002720:	2b00      	cmp	r3, #0
 8002722:	d11b      	bne.n	800275c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002724:	4812      	ldr	r0, [pc, #72]	@ (8002770 <HAL_InitTick+0xcc>)
 8002726:	f004 fb33 	bl	8006d90 <HAL_TIM_Base_Start_IT>
 800272a:	4603      	mov	r3, r0
 800272c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002730:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002734:	2b00      	cmp	r3, #0
 8002736:	d111      	bne.n	800275c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002738:	2019      	movs	r0, #25
 800273a:	f000 ff27 	bl	800358c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b0f      	cmp	r3, #15
 8002742:	d808      	bhi.n	8002756 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002744:	2200      	movs	r2, #0
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	2019      	movs	r0, #25
 800274a:	f000 ff05 	bl	8003558 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800274e:	4a0a      	ldr	r2, [pc, #40]	@ (8002778 <HAL_InitTick+0xd4>)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	e002      	b.n	800275c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800275c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002760:	4618      	mov	r0, r3
 8002762:	3730      	adds	r7, #48	@ 0x30
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40021000 	.word	0x40021000
 800276c:	431bde83 	.word	0x431bde83
 8002770:	20003668 	.word	0x20003668
 8002774:	40012c00 	.word	0x40012c00
 8002778:	20000008 	.word	0x20000008

0800277c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002780:	bf00      	nop
 8002782:	e7fd      	b.n	8002780 <NMI_Handler+0x4>

08002784 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002788:	bf00      	nop
 800278a:	e7fd      	b.n	8002788 <HardFault_Handler+0x4>

0800278c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002790:	bf00      	nop
 8002792:	e7fd      	b.n	8002790 <MemManage_Handler+0x4>

08002794 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002798:	bf00      	nop
 800279a:	e7fd      	b.n	8002798 <BusFault_Handler+0x4>

0800279c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027a0:	bf00      	nop
 80027a2:	e7fd      	b.n	80027a0 <UsageFault_Handler+0x4>

080027a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
	...

080027b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80027b8:	4802      	ldr	r0, [pc, #8]	@ (80027c4 <DMA1_Channel1_IRQHandler+0x10>)
 80027ba:	f001 f8d8 	bl	800396e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	200003e8 	.word	0x200003e8

080027c8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80027cc:	4802      	ldr	r0, [pc, #8]	@ (80027d8 <DMA1_Channel2_IRQHandler+0x10>)
 80027ce:	f001 f8ce 	bl	800396e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000448 	.word	0x20000448

080027dc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 80027e0:	4802      	ldr	r0, [pc, #8]	@ (80027ec <DMA1_Channel3_IRQHandler+0x10>)
 80027e2:	f001 f8c4 	bl	800396e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000294 	.word	0x20000294

080027f0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 80027f4:	4802      	ldr	r0, [pc, #8]	@ (8002800 <DMA1_Channel4_IRQHandler+0x10>)
 80027f6:	f001 f8ba 	bl	800396e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	200002f4 	.word	0x200002f4

08002804 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002808:	4802      	ldr	r0, [pc, #8]	@ (8002814 <DMA1_Channel5_IRQHandler+0x10>)
 800280a:	f001 f8b0 	bl	800396e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	200001d4 	.word	0x200001d4

08002818 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800281c:	4802      	ldr	r0, [pc, #8]	@ (8002828 <DMA1_Channel6_IRQHandler+0x10>)
 800281e:	f001 f8a6 	bl	800396e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20000234 	.word	0x20000234

0800282c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002830:	4802      	ldr	r0, [pc, #8]	@ (800283c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002832:	f004 fc99 	bl	8007168 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20003668 	.word	0x20003668

08002840 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002844:	4802      	ldr	r0, [pc, #8]	@ (8002850 <I2C1_EV_IRQHandler+0x10>)
 8002846:	f001 fcf1 	bl	800422c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	2000012c 	.word	0x2000012c

08002854 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002858:	4802      	ldr	r0, [pc, #8]	@ (8002864 <I2C1_ER_IRQHandler+0x10>)
 800285a:	f001 fd01 	bl	8004260 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	2000012c 	.word	0x2000012c

08002868 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800286c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002870:	f001 fb98 	bl	8003fa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}

08002878 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800287c:	4802      	ldr	r0, [pc, #8]	@ (8002888 <LPUART1_IRQHandler+0x10>)
 800287e:	f005 ff43 	bl	8008708 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000354 	.word	0x20000354

0800288c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt / I2C3 wake-up interrupt through EXTI line 27.
  */
void I2C3_EV_IRQHandler(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8002890:	4802      	ldr	r0, [pc, #8]	@ (800289c <I2C3_EV_IRQHandler+0x10>)
 8002892:	f001 fccb 	bl	800422c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	20000180 	.word	0x20000180

080028a0 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 80028a4:	4802      	ldr	r0, [pc, #8]	@ (80028b0 <I2C3_ER_IRQHandler+0x10>)
 80028a6:	f001 fcdb 	bl	8004260 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000180 	.word	0x20000180

080028b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return 1;
 80028b8:	2301      	movs	r3, #1
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <_kill>:

int _kill(int pid, int sig)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028ce:	f017 fc0f 	bl	801a0f0 <__errno>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2216      	movs	r2, #22
 80028d6:	601a      	str	r2, [r3, #0]
  return -1;
 80028d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <_exit>:

void _exit (int status)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7ff ffe7 	bl	80028c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80028f6:	bf00      	nop
 80028f8:	e7fd      	b.n	80028f6 <_exit+0x12>

080028fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b086      	sub	sp, #24
 80028fe:	af00      	add	r7, sp, #0
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	e00a      	b.n	8002922 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800290c:	f3af 8000 	nop.w
 8002910:	4601      	mov	r1, r0
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	60ba      	str	r2, [r7, #8]
 8002918:	b2ca      	uxtb	r2, r1
 800291a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	3301      	adds	r3, #1
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	429a      	cmp	r2, r3
 8002928:	dbf0      	blt.n	800290c <_read+0x12>
  }

  return len;
 800292a:	687b      	ldr	r3, [r7, #4]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	e009      	b.n	800295a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	60ba      	str	r2, [r7, #8]
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	3301      	adds	r3, #1
 8002958:	617b      	str	r3, [r7, #20]
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	429a      	cmp	r2, r3
 8002960:	dbf1      	blt.n	8002946 <_write+0x12>
  }
  return len;
 8002962:	687b      	ldr	r3, [r7, #4]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <_close>:

int _close(int file)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002974:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002978:	4618      	mov	r0, r3
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002994:	605a      	str	r2, [r3, #4]
  return 0;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <_isatty>:

int _isatty(int file)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029ac:	2301      	movs	r3, #1
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b085      	sub	sp, #20
 80029be:	af00      	add	r7, sp, #0
 80029c0:	60f8      	str	r0, [r7, #12]
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029dc:	4a14      	ldr	r2, [pc, #80]	@ (8002a30 <_sbrk+0x5c>)
 80029de:	4b15      	ldr	r3, [pc, #84]	@ (8002a34 <_sbrk+0x60>)
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029e8:	4b13      	ldr	r3, [pc, #76]	@ (8002a38 <_sbrk+0x64>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d102      	bne.n	80029f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029f0:	4b11      	ldr	r3, [pc, #68]	@ (8002a38 <_sbrk+0x64>)
 80029f2:	4a12      	ldr	r2, [pc, #72]	@ (8002a3c <_sbrk+0x68>)
 80029f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029f6:	4b10      	ldr	r3, [pc, #64]	@ (8002a38 <_sbrk+0x64>)
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4413      	add	r3, r2
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d207      	bcs.n	8002a14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a04:	f017 fb74 	bl	801a0f0 <__errno>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	220c      	movs	r2, #12
 8002a0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a12:	e009      	b.n	8002a28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a14:	4b08      	ldr	r3, [pc, #32]	@ (8002a38 <_sbrk+0x64>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a1a:	4b07      	ldr	r3, [pc, #28]	@ (8002a38 <_sbrk+0x64>)
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4413      	add	r3, r2
 8002a22:	4a05      	ldr	r2, [pc, #20]	@ (8002a38 <_sbrk+0x64>)
 8002a24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a26:	68fb      	ldr	r3, [r7, #12]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	20020000 	.word	0x20020000
 8002a34:	00000400 	.word	0x00000400
 8002a38:	200036b8 	.word	0x200036b8
 8002a3c:	2000b108 	.word	0x2000b108

08002a40 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002a44:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <SystemInit+0x20>)
 8002a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a4a:	4a05      	ldr	r2, [pc, #20]	@ (8002a60 <SystemInit+0x20>)
 8002a4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a54:	bf00      	nop
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	e000ed00 	.word	0xe000ed00

08002a64 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08a      	sub	sp, #40	@ 0x28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002a70:	f008 fbde 	bl	800b230 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002a74:	4b5a      	ldr	r3, [pc, #360]	@ (8002be0 <pvPortMallocMicroROS+0x17c>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8002a7c:	f000 f986 	bl	8002d8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002a80:	4b58      	ldr	r3, [pc, #352]	@ (8002be4 <pvPortMallocMicroROS+0x180>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f040 8090 	bne.w	8002bae <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d01e      	beq.n	8002ad2 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8002a94:	2208      	movs	r2, #8
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4413      	add	r3, r2
 8002a9a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d015      	beq.n	8002ad2 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f023 0307 	bic.w	r3, r3, #7
 8002aac:	3308      	adds	r3, #8
 8002aae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00b      	beq.n	8002ad2 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002abe:	f383 8811 	msr	BASEPRI, r3
 8002ac2:	f3bf 8f6f 	isb	sy
 8002ac6:	f3bf 8f4f 	dsb	sy
 8002aca:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002acc:	bf00      	nop
 8002ace:	bf00      	nop
 8002ad0:	e7fd      	b.n	8002ace <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d06a      	beq.n	8002bae <pvPortMallocMicroROS+0x14a>
 8002ad8:	4b43      	ldr	r3, [pc, #268]	@ (8002be8 <pvPortMallocMicroROS+0x184>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d865      	bhi.n	8002bae <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002ae2:	4b42      	ldr	r3, [pc, #264]	@ (8002bec <pvPortMallocMicroROS+0x188>)
 8002ae4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002ae6:	4b41      	ldr	r3, [pc, #260]	@ (8002bec <pvPortMallocMicroROS+0x188>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002aec:	e004      	b.n	8002af8 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8002aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d903      	bls.n	8002b0a <pvPortMallocMicroROS+0xa6>
 8002b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f1      	bne.n	8002aee <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002b0a:	4b35      	ldr	r3, [pc, #212]	@ (8002be0 <pvPortMallocMicroROS+0x17c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d04c      	beq.n	8002bae <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2208      	movs	r2, #8
 8002b1a:	4413      	add	r3, r2
 8002b1c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	1ad2      	subs	r2, r2, r3
 8002b2e:	2308      	movs	r3, #8
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d920      	bls.n	8002b78 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00b      	beq.n	8002b60 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8002b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b4c:	f383 8811 	msr	BASEPRI, r3
 8002b50:	f3bf 8f6f 	isb	sy
 8002b54:	f3bf 8f4f 	dsb	sy
 8002b58:	613b      	str	r3, [r7, #16]
}
 8002b5a:	bf00      	nop
 8002b5c:	bf00      	nop
 8002b5e:	e7fd      	b.n	8002b5c <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	1ad2      	subs	r2, r2, r3
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002b72:	69b8      	ldr	r0, [r7, #24]
 8002b74:	f000 f96c 	bl	8002e50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002b78:	4b1b      	ldr	r3, [pc, #108]	@ (8002be8 <pvPortMallocMicroROS+0x184>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	4a19      	ldr	r2, [pc, #100]	@ (8002be8 <pvPortMallocMicroROS+0x184>)
 8002b84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002b86:	4b18      	ldr	r3, [pc, #96]	@ (8002be8 <pvPortMallocMicroROS+0x184>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	4b19      	ldr	r3, [pc, #100]	@ (8002bf0 <pvPortMallocMicroROS+0x18c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d203      	bcs.n	8002b9a <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002b92:	4b15      	ldr	r3, [pc, #84]	@ (8002be8 <pvPortMallocMicroROS+0x184>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a16      	ldr	r2, [pc, #88]	@ (8002bf0 <pvPortMallocMicroROS+0x18c>)
 8002b98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	4b11      	ldr	r3, [pc, #68]	@ (8002be4 <pvPortMallocMicroROS+0x180>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002bae:	f008 fb4d 	bl	800b24c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00b      	beq.n	8002bd4 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8002bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bc0:	f383 8811 	msr	BASEPRI, r3
 8002bc4:	f3bf 8f6f 	isb	sy
 8002bc8:	f3bf 8f4f 	dsb	sy
 8002bcc:	60fb      	str	r3, [r7, #12]
}
 8002bce:	bf00      	nop
 8002bd0:	bf00      	nop
 8002bd2:	e7fd      	b.n	8002bd0 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8002bd4:	69fb      	ldr	r3, [r7, #28]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3728      	adds	r7, #40	@ 0x28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	200042c4 	.word	0x200042c4
 8002be4:	200042d0 	.word	0x200042d0
 8002be8:	200042c8 	.word	0x200042c8
 8002bec:	200042bc 	.word	0x200042bc
 8002bf0:	200042cc 	.word	0x200042cc

08002bf4 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d04a      	beq.n	8002c9c <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002c06:	2308      	movs	r3, #8
 8002c08:	425b      	negs	r3, r3
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	4b22      	ldr	r3, [pc, #136]	@ (8002ca4 <vPortFreeMicroROS+0xb0>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10b      	bne.n	8002c3a <vPortFreeMicroROS+0x46>
	__asm volatile
 8002c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c26:	f383 8811 	msr	BASEPRI, r3
 8002c2a:	f3bf 8f6f 	isb	sy
 8002c2e:	f3bf 8f4f 	dsb	sy
 8002c32:	60fb      	str	r3, [r7, #12]
}
 8002c34:	bf00      	nop
 8002c36:	bf00      	nop
 8002c38:	e7fd      	b.n	8002c36 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00b      	beq.n	8002c5a <vPortFreeMicroROS+0x66>
	__asm volatile
 8002c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c46:	f383 8811 	msr	BASEPRI, r3
 8002c4a:	f3bf 8f6f 	isb	sy
 8002c4e:	f3bf 8f4f 	dsb	sy
 8002c52:	60bb      	str	r3, [r7, #8]
}
 8002c54:	bf00      	nop
 8002c56:	bf00      	nop
 8002c58:	e7fd      	b.n	8002c56 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	4b11      	ldr	r3, [pc, #68]	@ (8002ca4 <vPortFreeMicroROS+0xb0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4013      	ands	r3, r2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d019      	beq.n	8002c9c <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d115      	bne.n	8002c9c <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca4 <vPortFreeMicroROS+0xb0>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	401a      	ands	r2, r3
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002c80:	f008 fad6 	bl	800b230 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	4b07      	ldr	r3, [pc, #28]	@ (8002ca8 <vPortFreeMicroROS+0xb4>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	4a06      	ldr	r2, [pc, #24]	@ (8002ca8 <vPortFreeMicroROS+0xb4>)
 8002c90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002c92:	6938      	ldr	r0, [r7, #16]
 8002c94:	f000 f8dc 	bl	8002e50 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002c98:	f008 fad8 	bl	800b24c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002c9c:	bf00      	nop
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	200042d0 	.word	0x200042d0
 8002ca8:	200042c8 	.word	0x200042c8

08002cac <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8002cac:	b480      	push	{r7}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8002cb8:	2308      	movs	r3, #8
 8002cba:	425b      	negs	r3, r3
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	4b06      	ldr	r3, [pc, #24]	@ (8002ce4 <getBlockSize+0x38>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	60fb      	str	r3, [r7, #12]

	return count;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	371c      	adds	r7, #28
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	200042d0 	.word	0x200042d0

08002ce8 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8002cf2:	f008 fa9d 	bl	800b230 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8002cf6:	6838      	ldr	r0, [r7, #0]
 8002cf8:	f7ff feb4 	bl	8002a64 <pvPortMallocMicroROS>
 8002cfc:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d017      	beq.n	8002d34 <pvPortReallocMicroROS+0x4c>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d014      	beq.n	8002d34 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7ff ffce 	bl	8002cac <getBlockSize>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2208      	movs	r2, #8
 8002d14:	1a9b      	subs	r3, r3, r2
 8002d16:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d201      	bcs.n	8002d24 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	68b8      	ldr	r0, [r7, #8]
 8002d2a:	f017 fa16 	bl	801a15a <memcpy>

		vPortFreeMicroROS(pv);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7ff ff60 	bl	8002bf4 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8002d34:	f008 fa8a 	bl	800b24c <xTaskResumeAll>

	return newmem;
 8002d38:	68bb      	ldr	r3, [r7, #8]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b086      	sub	sp, #24
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8002d4c:	f008 fa70 	bl	800b230 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	fb02 f303 	mul.w	r3, r2, r3
 8002d58:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8002d5a:	6978      	ldr	r0, [r7, #20]
 8002d5c:	f7ff fe82 	bl	8002a64 <pvPortMallocMicroROS>
 8002d60:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	613b      	str	r3, [r7, #16]

  	while(count--)
 8002d66:	e004      	b.n	8002d72 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1c5a      	adds	r2, r3, #1
 8002d6c:	613a      	str	r2, [r7, #16]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	1e5a      	subs	r2, r3, #1
 8002d76:	617a      	str	r2, [r7, #20]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1f5      	bne.n	8002d68 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8002d7c:	f008 fa66 	bl	800b24c <xTaskResumeAll>
  	return mem;
 8002d80:	68fb      	ldr	r3, [r7, #12]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002d92:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002d96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002d98:	4b27      	ldr	r3, [pc, #156]	@ (8002e38 <prvHeapInit+0xac>)
 8002d9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00c      	beq.n	8002dc0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	3307      	adds	r3, #7
 8002daa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f023 0307 	bic.w	r3, r3, #7
 8002db2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	4a1f      	ldr	r2, [pc, #124]	@ (8002e38 <prvHeapInit+0xac>)
 8002dbc:	4413      	add	r3, r2
 8002dbe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8002e3c <prvHeapInit+0xb0>)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002dca:	4b1c      	ldr	r3, [pc, #112]	@ (8002e3c <prvHeapInit+0xb0>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002dd8:	2208      	movs	r2, #8
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f023 0307 	bic.w	r3, r3, #7
 8002de6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4a15      	ldr	r2, [pc, #84]	@ (8002e40 <prvHeapInit+0xb4>)
 8002dec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002dee:	4b14      	ldr	r3, [pc, #80]	@ (8002e40 <prvHeapInit+0xb4>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2200      	movs	r2, #0
 8002df4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002df6:	4b12      	ldr	r3, [pc, #72]	@ (8002e40 <prvHeapInit+0xb4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	1ad2      	subs	r2, r2, r3
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e40 <prvHeapInit+0xb4>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	4a0a      	ldr	r2, [pc, #40]	@ (8002e44 <prvHeapInit+0xb8>)
 8002e1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	4a09      	ldr	r2, [pc, #36]	@ (8002e48 <prvHeapInit+0xbc>)
 8002e22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002e24:	4b09      	ldr	r3, [pc, #36]	@ (8002e4c <prvHeapInit+0xc0>)
 8002e26:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002e2a:	601a      	str	r2, [r3, #0]
}
 8002e2c:	bf00      	nop
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	200036bc 	.word	0x200036bc
 8002e3c:	200042bc 	.word	0x200042bc
 8002e40:	200042c4 	.word	0x200042c4
 8002e44:	200042cc 	.word	0x200042cc
 8002e48:	200042c8 	.word	0x200042c8
 8002e4c:	200042d0 	.word	0x200042d0

08002e50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002e58:	4b28      	ldr	r3, [pc, #160]	@ (8002efc <prvInsertBlockIntoFreeList+0xac>)
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	e002      	b.n	8002e64 <prvInsertBlockIntoFreeList+0x14>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d8f7      	bhi.n	8002e5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	4413      	add	r3, r2
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d108      	bne.n	8002e92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	441a      	add	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	441a      	add	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d118      	bne.n	8002ed8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	4b15      	ldr	r3, [pc, #84]	@ (8002f00 <prvInsertBlockIntoFreeList+0xb0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d00d      	beq.n	8002ece <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	441a      	add	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	e008      	b.n	8002ee0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002ece:	4b0c      	ldr	r3, [pc, #48]	@ (8002f00 <prvInsertBlockIntoFreeList+0xb0>)
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	e003      	b.n	8002ee0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d002      	beq.n	8002eee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002eee:	bf00      	nop
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	200042bc 	.word	0x200042bc
 8002f00:	200042c4 	.word	0x200042c4

08002f04 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002f40 <microros_allocate+0x3c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4413      	add	r3, r2
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4b09      	ldr	r3, [pc, #36]	@ (8002f40 <microros_allocate+0x3c>)
 8002f1c:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002f1e:	4b09      	ldr	r3, [pc, #36]	@ (8002f44 <microros_allocate+0x40>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	461a      	mov	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4413      	add	r3, r2
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4b06      	ldr	r3, [pc, #24]	@ (8002f44 <microros_allocate+0x40>)
 8002f2c:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff fd98 	bl	8002a64 <pvPortMallocMicroROS>
 8002f34:	4603      	mov	r3, r0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	200042d4 	.word	0x200042d4
 8002f44:	200042d8 	.word	0x200042d8

08002f48 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00c      	beq.n	8002f72 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f7ff fea7 	bl	8002cac <getBlockSize>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	4a06      	ldr	r2, [pc, #24]	@ (8002f7c <microros_deallocate+0x34>)
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	4b04      	ldr	r3, [pc, #16]	@ (8002f7c <microros_deallocate+0x34>)
 8002f6a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7ff fe41 	bl	8002bf4 <vPortFreeMicroROS>
  }
}
 8002f72:	bf00      	nop
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	200042d8 	.word	0x200042d8

08002f80 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002f8c:	4b15      	ldr	r3, [pc, #84]	@ (8002fe4 <microros_reallocate+0x64>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	461a      	mov	r2, r3
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	4413      	add	r3, r2
 8002f96:	461a      	mov	r2, r3
 8002f98:	4b12      	ldr	r3, [pc, #72]	@ (8002fe4 <microros_reallocate+0x64>)
 8002f9a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002f9c:	4b12      	ldr	r3, [pc, #72]	@ (8002fe8 <microros_reallocate+0x68>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8002fe8 <microros_reallocate+0x68>)
 8002faa:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d104      	bne.n	8002fbc <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002fb2:	68b8      	ldr	r0, [r7, #8]
 8002fb4:	f7ff fd56 	bl	8002a64 <pvPortMallocMicroROS>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	e00e      	b.n	8002fda <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f7ff fe75 	bl	8002cac <getBlockSize>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	4a08      	ldr	r2, [pc, #32]	@ (8002fe8 <microros_reallocate+0x68>)
 8002fc6:	6812      	ldr	r2, [r2, #0]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	461a      	mov	r2, r3
 8002fcc:	4b06      	ldr	r3, [pc, #24]	@ (8002fe8 <microros_reallocate+0x68>)
 8002fce:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002fd0:	68b9      	ldr	r1, [r7, #8]
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f7ff fe88 	bl	8002ce8 <pvPortReallocMicroROS>
 8002fd8:	4603      	mov	r3, r0
  }
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	200042d4 	.word	0x200042d4
 8002fe8:	200042d8 	.word	0x200042d8

08002fec <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	fb02 f303 	mul.w	r3, r2, r3
 8003000:	4a0c      	ldr	r2, [pc, #48]	@ (8003034 <microros_zero_allocate+0x48>)
 8003002:	6812      	ldr	r2, [r2, #0]
 8003004:	4413      	add	r3, r2
 8003006:	461a      	mov	r2, r3
 8003008:	4b0a      	ldr	r3, [pc, #40]	@ (8003034 <microros_zero_allocate+0x48>)
 800300a:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	fb02 f303 	mul.w	r3, r2, r3
 8003014:	4a08      	ldr	r2, [pc, #32]	@ (8003038 <microros_zero_allocate+0x4c>)
 8003016:	6812      	ldr	r2, [r2, #0]
 8003018:	4413      	add	r3, r2
 800301a:	461a      	mov	r2, r3
 800301c:	4b06      	ldr	r3, [pc, #24]	@ (8003038 <microros_zero_allocate+0x4c>)
 800301e:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f7ff fe8d 	bl	8002d42 <pvPortCallocMicroROS>
 8003028:	4603      	mov	r3, r0
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	200042d4 	.word	0x200042d4
 8003038:	200042d8 	.word	0x200042d8
 800303c:	00000000 	.word	0x00000000

08003040 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8003040:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003044:	b086      	sub	sp, #24
 8003046:	af00      	add	r7, sp, #0
 8003048:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800304c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8003052:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003056:	a320      	add	r3, pc, #128	@ (adr r3, 80030d8 <UTILS_NanosecondsToTimespec+0x98>)
 8003058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305c:	f7fd fd36 	bl	8000acc <__aeabi_ldivmod>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800306a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800306e:	a31a      	add	r3, pc, #104	@ (adr r3, 80030d8 <UTILS_NanosecondsToTimespec+0x98>)
 8003070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003074:	f7fd fd2a 	bl	8000acc <__aeabi_ldivmod>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	da20      	bge.n	80030c6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	4a11      	ldr	r2, [pc, #68]	@ (80030d0 <UTILS_NanosecondsToTimespec+0x90>)
 800308a:	fb82 1203 	smull	r1, r2, r2, r3
 800308e:	1712      	asrs	r2, r2, #28
 8003090:	17db      	asrs	r3, r3, #31
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	3301      	adds	r3, #1
 8003096:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309e:	6979      	ldr	r1, [r7, #20]
 80030a0:	17c8      	asrs	r0, r1, #31
 80030a2:	460c      	mov	r4, r1
 80030a4:	4605      	mov	r5, r0
 80030a6:	ebb2 0804 	subs.w	r8, r2, r4
 80030aa:	eb63 0905 	sbc.w	r9, r3, r5
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	4906      	ldr	r1, [pc, #24]	@ (80030d4 <UTILS_NanosecondsToTimespec+0x94>)
 80030bc:	fb01 f303 	mul.w	r3, r1, r3
 80030c0:	441a      	add	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	609a      	str	r2, [r3, #8]
    }
}
 80030c6:	bf00      	nop
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80030d0:	44b82fa1 	.word	0x44b82fa1
 80030d4:	3b9aca00 	.word	0x3b9aca00
 80030d8:	3b9aca00 	.word	0x3b9aca00
 80030dc:	00000000 	.word	0x00000000

080030e0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80030e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030e4:	b08e      	sub	sp, #56	@ 0x38
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80030ea:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80030ec:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80030f0:	2300      	movs	r3, #0
 80030f2:	6013      	str	r3, [r2, #0]
 80030f4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8003102:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003106:	4618      	mov	r0, r3
 8003108:	f008 fb1c 	bl	800b744 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800310c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800310e:	17da      	asrs	r2, r3, #31
 8003110:	61bb      	str	r3, [r7, #24]
 8003112:	61fa      	str	r2, [r7, #28]
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	f04f 0300 	mov.w	r3, #0
 800311c:	69b9      	ldr	r1, [r7, #24]
 800311e:	000b      	movs	r3, r1
 8003120:	2200      	movs	r2, #0
 8003122:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8003126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003128:	2200      	movs	r2, #0
 800312a:	461c      	mov	r4, r3
 800312c:	4615      	mov	r5, r2
 800312e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003132:	1911      	adds	r1, r2, r4
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	416b      	adcs	r3, r5
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800313e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8003142:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	f04f 0400 	mov.w	r4, #0
 800314e:	f04f 0500 	mov.w	r5, #0
 8003152:	015d      	lsls	r5, r3, #5
 8003154:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003158:	0154      	lsls	r4, r2, #5
 800315a:	4622      	mov	r2, r4
 800315c:	462b      	mov	r3, r5
 800315e:	ebb2 0800 	subs.w	r8, r2, r0
 8003162:	eb63 0901 	sbc.w	r9, r3, r1
 8003166:	f04f 0200 	mov.w	r2, #0
 800316a:	f04f 0300 	mov.w	r3, #0
 800316e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8003172:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8003176:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800317a:	4690      	mov	r8, r2
 800317c:	4699      	mov	r9, r3
 800317e:	eb18 0a00 	adds.w	sl, r8, r0
 8003182:	eb49 0b01 	adc.w	fp, r9, r1
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003192:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003196:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800319a:	ebb2 040a 	subs.w	r4, r2, sl
 800319e:	603c      	str	r4, [r7, #0]
 80031a0:	eb63 030b 	sbc.w	r3, r3, fp
 80031a4:	607b      	str	r3, [r7, #4]
 80031a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031aa:	4623      	mov	r3, r4
 80031ac:	181b      	adds	r3, r3, r0
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	462b      	mov	r3, r5
 80031b2:	eb41 0303 	adc.w	r3, r1, r3
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	6a3a      	ldr	r2, [r7, #32]
 80031ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031be:	f7ff ff3f 	bl	8003040 <UTILS_NanosecondsToTimespec>

    return 0;
 80031c2:	2300      	movs	r3, #0
 80031c4:	4618      	mov	r0, r3
 80031c6:	3738      	adds	r7, #56	@ 0x38
 80031c8:	46bd      	mov	sp, r7
 80031ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080031d0 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80031de:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80031e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80031e4:	4904      	ldr	r1, [pc, #16]	@ (80031f8 <cubemx_transport_open+0x28>)
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f005 f9ac 	bl	8008544 <HAL_UART_Receive_DMA>
    return true;
 80031ec:	2301      	movs	r3, #1
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	200042dc 	.word	0x200042dc

080031fc <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800320a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f005 f9e5 	bl	80085dc <HAL_UART_DMAStop>
    return true;
 8003212:	2301      	movs	r3, #1
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
 8003228:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8003230:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003238:	2b20      	cmp	r3, #32
 800323a:	d11b      	bne.n	8003274 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	b29b      	uxth	r3, r3
 8003240:	461a      	mov	r2, r3
 8003242:	68b9      	ldr	r1, [r7, #8]
 8003244:	6978      	ldr	r0, [r7, #20]
 8003246:	f005 f8fd 	bl	8008444 <HAL_UART_Transmit_DMA>
 800324a:	4603      	mov	r3, r0
 800324c:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800324e:	e002      	b.n	8003256 <cubemx_transport_write+0x3a>
            osDelay(1);
 8003250:	2001      	movs	r0, #1
 8003252:	f006 ffab 	bl	800a1ac <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8003256:	7cfb      	ldrb	r3, [r7, #19]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d104      	bne.n	8003266 <cubemx_transport_write+0x4a>
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003262:	2b20      	cmp	r3, #32
 8003264:	d1f4      	bne.n	8003250 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 8003266:	7cfb      	ldrb	r3, [r7, #19]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <cubemx_transport_write+0x54>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	e002      	b.n	8003276 <cubemx_transport_write+0x5a>
 8003270:	2300      	movs	r3, #0
 8003272:	e000      	b.n	8003276 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8003274:	2300      	movs	r3, #0
    }
}
 8003276:	4618      	mov	r0, r3
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
	...

08003280 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8003294:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8003296:	2300      	movs	r3, #0
 8003298:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800329a:	b672      	cpsid	i
}
 800329c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80032ac:	4a1b      	ldr	r2, [pc, #108]	@ (800331c <cubemx_transport_read+0x9c>)
 80032ae:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80032b0:	b662      	cpsie	i
}
 80032b2:	bf00      	nop
        __enable_irq();
        ms_used++;
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	3301      	adds	r3, #1
 80032b8:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80032ba:	2001      	movs	r0, #1
 80032bc:	f006 ff76 	bl	800a1ac <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80032c0:	4b17      	ldr	r3, [pc, #92]	@ (8003320 <cubemx_transport_read+0xa0>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	4b15      	ldr	r3, [pc, #84]	@ (800331c <cubemx_transport_read+0x9c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d103      	bne.n	80032d4 <cubemx_transport_read+0x54>
 80032cc:	69fa      	ldr	r2, [r7, #28]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	dbe2      	blt.n	800329a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80032d8:	e011      	b.n	80032fe <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 80032da:	4b11      	ldr	r3, [pc, #68]	@ (8003320 <cubemx_transport_read+0xa0>)
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68b9      	ldr	r1, [r7, #8]
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	440b      	add	r3, r1
 80032e4:	490f      	ldr	r1, [pc, #60]	@ (8003324 <cubemx_transport_read+0xa4>)
 80032e6:	5c8a      	ldrb	r2, [r1, r2]
 80032e8:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80032ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003320 <cubemx_transport_read+0xa0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	3301      	adds	r3, #1
 80032f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032f4:	4a0a      	ldr	r2, [pc, #40]	@ (8003320 <cubemx_transport_read+0xa0>)
 80032f6:	6013      	str	r3, [r2, #0]
        wrote++;
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	3301      	adds	r3, #1
 80032fc:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80032fe:	4b08      	ldr	r3, [pc, #32]	@ (8003320 <cubemx_transport_read+0xa0>)
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	4b06      	ldr	r3, [pc, #24]	@ (800331c <cubemx_transport_read+0x9c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d003      	beq.n	8003312 <cubemx_transport_read+0x92>
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	429a      	cmp	r2, r3
 8003310:	d3e3      	bcc.n	80032da <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8003312:	69bb      	ldr	r3, [r7, #24]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3720      	adds	r7, #32
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	20004ae0 	.word	0x20004ae0
 8003320:	20004adc 	.word	0x20004adc
 8003324:	200042dc 	.word	0x200042dc

08003328 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003328:	480d      	ldr	r0, [pc, #52]	@ (8003360 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800332a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800332c:	f7ff fb88 	bl	8002a40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003330:	480c      	ldr	r0, [pc, #48]	@ (8003364 <LoopForever+0x6>)
  ldr r1, =_edata
 8003332:	490d      	ldr	r1, [pc, #52]	@ (8003368 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003334:	4a0d      	ldr	r2, [pc, #52]	@ (800336c <LoopForever+0xe>)
  movs r3, #0
 8003336:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003338:	e002      	b.n	8003340 <LoopCopyDataInit>

0800333a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800333a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800333c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800333e:	3304      	adds	r3, #4

08003340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003344:	d3f9      	bcc.n	800333a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003346:	4a0a      	ldr	r2, [pc, #40]	@ (8003370 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003348:	4c0a      	ldr	r4, [pc, #40]	@ (8003374 <LoopForever+0x16>)
  movs r3, #0
 800334a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800334c:	e001      	b.n	8003352 <LoopFillZerobss>

0800334e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800334e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003350:	3204      	adds	r2, #4

08003352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003354:	d3fb      	bcc.n	800334e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003356:	f016 fed1 	bl	801a0fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800335a:	f7fd febb 	bl	80010d4 <main>

0800335e <LoopForever>:

LoopForever:
    b LoopForever
 800335e:	e7fe      	b.n	800335e <LoopForever>
  ldr   r0, =_estack
 8003360:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003368:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 800336c:	0801bdac 	.word	0x0801bdac
  ldr r2, =_sbss
 8003370:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8003374:	2000b104 	.word	0x2000b104

08003378 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003378:	e7fe      	b.n	8003378 <ADC1_2_IRQHandler>

0800337a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b082      	sub	sp, #8
 800337e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003384:	2003      	movs	r0, #3
 8003386:	f000 f8dc 	bl	8003542 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800338a:	200f      	movs	r0, #15
 800338c:	f7ff f98a 	bl	80026a4 <HAL_InitTick>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	71fb      	strb	r3, [r7, #7]
 800339a:	e001      	b.n	80033a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800339c:	f7fe fe9c 	bl	80020d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033a0:	79fb      	ldrb	r3, [r7, #7]

}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
	...

080033ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033b0:	4b05      	ldr	r3, [pc, #20]	@ (80033c8 <HAL_IncTick+0x1c>)
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	4b05      	ldr	r3, [pc, #20]	@ (80033cc <HAL_IncTick+0x20>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4413      	add	r3, r2
 80033ba:	4a03      	ldr	r2, [pc, #12]	@ (80033c8 <HAL_IncTick+0x1c>)
 80033bc:	6013      	str	r3, [r2, #0]
}
 80033be:	bf00      	nop
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	20004ae4 	.word	0x20004ae4
 80033cc:	2000000c 	.word	0x2000000c

080033d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  return uwTick;
 80033d4:	4b03      	ldr	r3, [pc, #12]	@ (80033e4 <HAL_GetTick+0x14>)
 80033d6:	681b      	ldr	r3, [r3, #0]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	20004ae4 	.word	0x20004ae4

080033e8 <__NVIC_SetPriorityGrouping>:
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033f8:	4b0c      	ldr	r3, [pc, #48]	@ (800342c <__NVIC_SetPriorityGrouping+0x44>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003404:	4013      	ands	r3, r2
 8003406:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003410:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003414:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800341a:	4a04      	ldr	r2, [pc, #16]	@ (800342c <__NVIC_SetPriorityGrouping+0x44>)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	60d3      	str	r3, [r2, #12]
}
 8003420:	bf00      	nop
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	e000ed00 	.word	0xe000ed00

08003430 <__NVIC_GetPriorityGrouping>:
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003434:	4b04      	ldr	r3, [pc, #16]	@ (8003448 <__NVIC_GetPriorityGrouping+0x18>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	0a1b      	lsrs	r3, r3, #8
 800343a:	f003 0307 	and.w	r3, r3, #7
}
 800343e:	4618      	mov	r0, r3
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	e000ed00 	.word	0xe000ed00

0800344c <__NVIC_EnableIRQ>:
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345a:	2b00      	cmp	r3, #0
 800345c:	db0b      	blt.n	8003476 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	f003 021f 	and.w	r2, r3, #31
 8003464:	4907      	ldr	r1, [pc, #28]	@ (8003484 <__NVIC_EnableIRQ+0x38>)
 8003466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346a:	095b      	lsrs	r3, r3, #5
 800346c:	2001      	movs	r0, #1
 800346e:	fa00 f202 	lsl.w	r2, r0, r2
 8003472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	e000e100 	.word	0xe000e100

08003488 <__NVIC_SetPriority>:
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	4603      	mov	r3, r0
 8003490:	6039      	str	r1, [r7, #0]
 8003492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003498:	2b00      	cmp	r3, #0
 800349a:	db0a      	blt.n	80034b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	490c      	ldr	r1, [pc, #48]	@ (80034d4 <__NVIC_SetPriority+0x4c>)
 80034a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a6:	0112      	lsls	r2, r2, #4
 80034a8:	b2d2      	uxtb	r2, r2
 80034aa:	440b      	add	r3, r1
 80034ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80034b0:	e00a      	b.n	80034c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	4908      	ldr	r1, [pc, #32]	@ (80034d8 <__NVIC_SetPriority+0x50>)
 80034b8:	79fb      	ldrb	r3, [r7, #7]
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	3b04      	subs	r3, #4
 80034c0:	0112      	lsls	r2, r2, #4
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	440b      	add	r3, r1
 80034c6:	761a      	strb	r2, [r3, #24]
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	e000e100 	.word	0xe000e100
 80034d8:	e000ed00 	.word	0xe000ed00

080034dc <NVIC_EncodePriority>:
{
 80034dc:	b480      	push	{r7}
 80034de:	b089      	sub	sp, #36	@ 0x24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f1c3 0307 	rsb	r3, r3, #7
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	bf28      	it	cs
 80034fa:	2304      	movcs	r3, #4
 80034fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	3304      	adds	r3, #4
 8003502:	2b06      	cmp	r3, #6
 8003504:	d902      	bls.n	800350c <NVIC_EncodePriority+0x30>
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	3b03      	subs	r3, #3
 800350a:	e000      	b.n	800350e <NVIC_EncodePriority+0x32>
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003510:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	43da      	mvns	r2, r3
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	401a      	ands	r2, r3
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003524:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	fa01 f303 	lsl.w	r3, r1, r3
 800352e:	43d9      	mvns	r1, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003534:	4313      	orrs	r3, r2
}
 8003536:	4618      	mov	r0, r3
 8003538:	3724      	adds	r7, #36	@ 0x24
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b082      	sub	sp, #8
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff ff4c 	bl	80033e8 <__NVIC_SetPriorityGrouping>
}
 8003550:	bf00      	nop
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
 8003564:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003566:	f7ff ff63 	bl	8003430 <__NVIC_GetPriorityGrouping>
 800356a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	68b9      	ldr	r1, [r7, #8]
 8003570:	6978      	ldr	r0, [r7, #20]
 8003572:	f7ff ffb3 	bl	80034dc <NVIC_EncodePriority>
 8003576:	4602      	mov	r2, r0
 8003578:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800357c:	4611      	mov	r1, r2
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff ff82 	bl	8003488 <__NVIC_SetPriority>
}
 8003584:	bf00      	nop
 8003586:	3718      	adds	r7, #24
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff ff56 	bl	800344c <__NVIC_EnableIRQ>
}
 80035a0:	bf00      	nop
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e08d      	b.n	80036d6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	461a      	mov	r2, r3
 80035c0:	4b47      	ldr	r3, [pc, #284]	@ (80036e0 <HAL_DMA_Init+0x138>)
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d80f      	bhi.n	80035e6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	4b45      	ldr	r3, [pc, #276]	@ (80036e4 <HAL_DMA_Init+0x13c>)
 80035ce:	4413      	add	r3, r2
 80035d0:	4a45      	ldr	r2, [pc, #276]	@ (80036e8 <HAL_DMA_Init+0x140>)
 80035d2:	fba2 2303 	umull	r2, r3, r2, r3
 80035d6:	091b      	lsrs	r3, r3, #4
 80035d8:	009a      	lsls	r2, r3, #2
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a42      	ldr	r2, [pc, #264]	@ (80036ec <HAL_DMA_Init+0x144>)
 80035e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80035e4:	e00e      	b.n	8003604 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	4b40      	ldr	r3, [pc, #256]	@ (80036f0 <HAL_DMA_Init+0x148>)
 80035ee:	4413      	add	r3, r2
 80035f0:	4a3d      	ldr	r2, [pc, #244]	@ (80036e8 <HAL_DMA_Init+0x140>)
 80035f2:	fba2 2303 	umull	r2, r3, r2, r3
 80035f6:	091b      	lsrs	r3, r3, #4
 80035f8:	009a      	lsls	r2, r3, #2
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a3c      	ldr	r2, [pc, #240]	@ (80036f4 <HAL_DMA_Init+0x14c>)
 8003602:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800361a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800361e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003628:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003634:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003640:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fa90 	bl	8003b7c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003664:	d102      	bne.n	800366c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003680:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d010      	beq.n	80036ac <HAL_DMA_Init+0x104>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b04      	cmp	r3, #4
 8003690:	d80c      	bhi.n	80036ac <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 fab0 	bl	8003bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80036a8:	605a      	str	r2, [r3, #4]
 80036aa:	e008      	b.n	80036be <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40020407 	.word	0x40020407
 80036e4:	bffdfff8 	.word	0xbffdfff8
 80036e8:	cccccccd 	.word	0xcccccccd
 80036ec:	40020000 	.word	0x40020000
 80036f0:	bffdfbf8 	.word	0xbffdfbf8
 80036f4:	40020400 	.word	0x40020400

080036f8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
 8003704:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_DMA_Start_IT+0x20>
 8003714:	2302      	movs	r3, #2
 8003716:	e066      	b.n	80037e6 <HAL_DMA_Start_IT+0xee>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b01      	cmp	r3, #1
 800372a:	d155      	bne.n	80037d8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0201 	bic.w	r2, r2, #1
 8003748:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	68b9      	ldr	r1, [r7, #8]
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f9d5 	bl	8003b00 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800375a:	2b00      	cmp	r3, #0
 800375c:	d008      	beq.n	8003770 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f042 020e 	orr.w	r2, r2, #14
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	e00f      	b.n	8003790 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0204 	bic.w	r2, r2, #4
 800377e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 020a 	orr.w	r2, r2, #10
 800378e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d007      	beq.n	80037ae <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037ac:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d007      	beq.n	80037c6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037c4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0201 	orr.w	r2, r2, #1
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	e005      	b.n	80037e4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80037e0:	2302      	movs	r3, #2
 80037e2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80037e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3718      	adds	r7, #24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b085      	sub	sp, #20
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d005      	beq.n	8003812 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2204      	movs	r2, #4
 800380a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	73fb      	strb	r3, [r7, #15]
 8003810:	e037      	b.n	8003882 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 020e 	bic.w	r2, r2, #14
 8003820:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800382c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003830:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0201 	bic.w	r2, r2, #1
 8003840:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003846:	f003 021f 	and.w	r2, r3, #31
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384e:	2101      	movs	r1, #1
 8003850:	fa01 f202 	lsl.w	r2, r1, r2
 8003854:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800385e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00c      	beq.n	8003882 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003872:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003876:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003880:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003892:	7bfb      	ldrb	r3, [r7, #15]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038a8:	2300      	movs	r3, #0
 80038aa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d00d      	beq.n	80038d4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2204      	movs	r2, #4
 80038bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	73fb      	strb	r3, [r7, #15]
 80038d2:	e047      	b.n	8003964 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 020e 	bic.w	r2, r2, #14
 80038e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0201 	bic.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003902:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003908:	f003 021f 	and.w	r2, r3, #31
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003910:	2101      	movs	r1, #1
 8003912:	fa01 f202 	lsl.w	r2, r1, r2
 8003916:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003920:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00c      	beq.n	8003944 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003934:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003938:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003942:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	4798      	blx	r3
    }
  }
  return status;
 8003964:	7bfb      	ldrb	r3, [r7, #15]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b084      	sub	sp, #16
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398a:	f003 031f 	and.w	r3, r3, #31
 800398e:	2204      	movs	r2, #4
 8003990:	409a      	lsls	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4013      	ands	r3, r2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d026      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x7a>
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d021      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0320 	and.w	r3, r3, #32
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d107      	bne.n	80039c2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0204 	bic.w	r2, r2, #4
 80039c0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c6:	f003 021f 	and.w	r2, r3, #31
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ce:	2104      	movs	r1, #4
 80039d0:	fa01 f202 	lsl.w	r2, r1, r2
 80039d4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d071      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80039e6:	e06c      	b.n	8003ac2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ec:	f003 031f 	and.w	r3, r3, #31
 80039f0:	2202      	movs	r2, #2
 80039f2:	409a      	lsls	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4013      	ands	r3, r2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d02e      	beq.n	8003a5a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d029      	beq.n	8003a5a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0320 	and.w	r3, r3, #32
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10b      	bne.n	8003a2c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 020a 	bic.w	r2, r2, #10
 8003a22:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a30:	f003 021f 	and.w	r2, r3, #31
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a38:	2102      	movs	r1, #2
 8003a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a3e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d038      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003a58:	e033      	b.n	8003ac2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5e:	f003 031f 	and.w	r3, r3, #31
 8003a62:	2208      	movs	r2, #8
 8003a64:	409a      	lsls	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d02a      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	f003 0308 	and.w	r3, r3, #8
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d025      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 020e 	bic.w	r2, r2, #14
 8003a86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8c:	f003 021f 	and.w	r2, r3, #31
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a94:	2101      	movs	r1, #1
 8003a96:	fa01 f202 	lsl.w	r2, r1, r2
 8003a9a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d004      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ac2:	bf00      	nop
 8003ac4:	bf00      	nop
}
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ada:	b2db      	uxtb	r3, r3
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
 8003b0c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b16:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d004      	beq.n	8003b2a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003b28:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b2e:	f003 021f 	and.w	r2, r3, #31
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b36:	2101      	movs	r1, #1
 8003b38:	fa01 f202 	lsl.w	r2, r1, r2
 8003b3c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	2b10      	cmp	r3, #16
 8003b4c:	d108      	bne.n	8003b60 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b5e:	e007      	b.n	8003b70 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	60da      	str	r2, [r3, #12]
}
 8003b70:	bf00      	nop
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	461a      	mov	r2, r3
 8003b8a:	4b16      	ldr	r3, [pc, #88]	@ (8003be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d802      	bhi.n	8003b96 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003b90:	4b15      	ldr	r3, [pc, #84]	@ (8003be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003b92:	617b      	str	r3, [r7, #20]
 8003b94:	e001      	b.n	8003b9a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003b96:	4b15      	ldr	r3, [pc, #84]	@ (8003bec <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003b98:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	3b08      	subs	r3, #8
 8003ba6:	4a12      	ldr	r2, [pc, #72]	@ (8003bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bac:	091b      	lsrs	r3, r3, #4
 8003bae:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb4:	089b      	lsrs	r3, r3, #2
 8003bb6:	009a      	lsls	r2, r3, #2
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	4413      	add	r3, r2
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a0b      	ldr	r2, [pc, #44]	@ (8003bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003bc6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f003 031f 	and.w	r3, r3, #31
 8003bce:	2201      	movs	r2, #1
 8003bd0:	409a      	lsls	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003bd6:	bf00      	nop
 8003bd8:	371c      	adds	r7, #28
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40020407 	.word	0x40020407
 8003be8:	40020800 	.word	0x40020800
 8003bec:	40020820 	.word	0x40020820
 8003bf0:	cccccccd 	.word	0xcccccccd
 8003bf4:	40020880 	.word	0x40020880

08003bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003c0c:	4413      	add	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	461a      	mov	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a08      	ldr	r2, [pc, #32]	@ (8003c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c1a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	f003 031f 	and.w	r3, r3, #31
 8003c24:	2201      	movs	r2, #1
 8003c26:	409a      	lsls	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003c2c:	bf00      	nop
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	1000823f 	.word	0x1000823f
 8003c3c:	40020940 	.word	0x40020940

08003c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c4e:	e15a      	b.n	8003f06 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	2101      	movs	r1, #1
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 814c 	beq.w	8003f00 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f003 0303 	and.w	r3, r3, #3
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d005      	beq.n	8003c80 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d130      	bne.n	8003ce2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	2203      	movs	r2, #3
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	43db      	mvns	r3, r3
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	4013      	ands	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	68da      	ldr	r2, [r3, #12]
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbe:	43db      	mvns	r3, r3
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	091b      	lsrs	r3, r3, #4
 8003ccc:	f003 0201 	and.w	r2, r3, #1
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	2b03      	cmp	r3, #3
 8003cec:	d017      	beq.n	8003d1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	2203      	movs	r2, #3
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	4013      	ands	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d123      	bne.n	8003d72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	08da      	lsrs	r2, r3, #3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	3208      	adds	r2, #8
 8003d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	220f      	movs	r2, #15
 8003d42:	fa02 f303 	lsl.w	r3, r2, r3
 8003d46:	43db      	mvns	r3, r3
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	691a      	ldr	r2, [r3, #16]
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	08da      	lsrs	r2, r3, #3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3208      	adds	r2, #8
 8003d6c:	6939      	ldr	r1, [r7, #16]
 8003d6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	2203      	movs	r2, #3
 8003d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d82:	43db      	mvns	r3, r3
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	4013      	ands	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f003 0203 	and.w	r2, r3, #3
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 80a6 	beq.w	8003f00 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003db4:	4b5b      	ldr	r3, [pc, #364]	@ (8003f24 <HAL_GPIO_Init+0x2e4>)
 8003db6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003db8:	4a5a      	ldr	r2, [pc, #360]	@ (8003f24 <HAL_GPIO_Init+0x2e4>)
 8003dba:	f043 0301 	orr.w	r3, r3, #1
 8003dbe:	6613      	str	r3, [r2, #96]	@ 0x60
 8003dc0:	4b58      	ldr	r3, [pc, #352]	@ (8003f24 <HAL_GPIO_Init+0x2e4>)
 8003dc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dcc:	4a56      	ldr	r2, [pc, #344]	@ (8003f28 <HAL_GPIO_Init+0x2e8>)
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	089b      	lsrs	r3, r3, #2
 8003dd2:	3302      	adds	r3, #2
 8003dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f003 0303 	and.w	r3, r3, #3
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	220f      	movs	r2, #15
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	43db      	mvns	r3, r3
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	4013      	ands	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003df6:	d01f      	beq.n	8003e38 <HAL_GPIO_Init+0x1f8>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a4c      	ldr	r2, [pc, #304]	@ (8003f2c <HAL_GPIO_Init+0x2ec>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d019      	beq.n	8003e34 <HAL_GPIO_Init+0x1f4>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a4b      	ldr	r2, [pc, #300]	@ (8003f30 <HAL_GPIO_Init+0x2f0>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d013      	beq.n	8003e30 <HAL_GPIO_Init+0x1f0>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a4a      	ldr	r2, [pc, #296]	@ (8003f34 <HAL_GPIO_Init+0x2f4>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d00d      	beq.n	8003e2c <HAL_GPIO_Init+0x1ec>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a49      	ldr	r2, [pc, #292]	@ (8003f38 <HAL_GPIO_Init+0x2f8>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d007      	beq.n	8003e28 <HAL_GPIO_Init+0x1e8>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a48      	ldr	r2, [pc, #288]	@ (8003f3c <HAL_GPIO_Init+0x2fc>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d101      	bne.n	8003e24 <HAL_GPIO_Init+0x1e4>
 8003e20:	2305      	movs	r3, #5
 8003e22:	e00a      	b.n	8003e3a <HAL_GPIO_Init+0x1fa>
 8003e24:	2306      	movs	r3, #6
 8003e26:	e008      	b.n	8003e3a <HAL_GPIO_Init+0x1fa>
 8003e28:	2304      	movs	r3, #4
 8003e2a:	e006      	b.n	8003e3a <HAL_GPIO_Init+0x1fa>
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e004      	b.n	8003e3a <HAL_GPIO_Init+0x1fa>
 8003e30:	2302      	movs	r3, #2
 8003e32:	e002      	b.n	8003e3a <HAL_GPIO_Init+0x1fa>
 8003e34:	2301      	movs	r3, #1
 8003e36:	e000      	b.n	8003e3a <HAL_GPIO_Init+0x1fa>
 8003e38:	2300      	movs	r3, #0
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	f002 0203 	and.w	r2, r2, #3
 8003e40:	0092      	lsls	r2, r2, #2
 8003e42:	4093      	lsls	r3, r2
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e4a:	4937      	ldr	r1, [pc, #220]	@ (8003f28 <HAL_GPIO_Init+0x2e8>)
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	089b      	lsrs	r3, r3, #2
 8003e50:	3302      	adds	r3, #2
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e58:	4b39      	ldr	r3, [pc, #228]	@ (8003f40 <HAL_GPIO_Init+0x300>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	43db      	mvns	r3, r3
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4013      	ands	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e7c:	4a30      	ldr	r2, [pc, #192]	@ (8003f40 <HAL_GPIO_Init+0x300>)
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e82:	4b2f      	ldr	r3, [pc, #188]	@ (8003f40 <HAL_GPIO_Init+0x300>)
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ea6:	4a26      	ldr	r2, [pc, #152]	@ (8003f40 <HAL_GPIO_Init+0x300>)
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003eac:	4b24      	ldr	r3, [pc, #144]	@ (8003f40 <HAL_GPIO_Init+0x300>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	43db      	mvns	r3, r3
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ed0:	4a1b      	ldr	r2, [pc, #108]	@ (8003f40 <HAL_GPIO_Init+0x300>)
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8003f40 <HAL_GPIO_Init+0x300>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003efa:	4a11      	ldr	r2, [pc, #68]	@ (8003f40 <HAL_GPIO_Init+0x300>)
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	3301      	adds	r3, #1
 8003f04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f47f ae9d 	bne.w	8003c50 <HAL_GPIO_Init+0x10>
  }
}
 8003f16:	bf00      	nop
 8003f18:	bf00      	nop
 8003f1a:	371c      	adds	r7, #28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	40021000 	.word	0x40021000
 8003f28:	40010000 	.word	0x40010000
 8003f2c:	48000400 	.word	0x48000400
 8003f30:	48000800 	.word	0x48000800
 8003f34:	48000c00 	.word	0x48000c00
 8003f38:	48001000 	.word	0x48001000
 8003f3c:	48001400 	.word	0x48001400
 8003f40:	40010400 	.word	0x40010400

08003f44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	691a      	ldr	r2, [r3, #16]
 8003f54:	887b      	ldrh	r3, [r7, #2]
 8003f56:	4013      	ands	r3, r2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d002      	beq.n	8003f62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	73fb      	strb	r3, [r7, #15]
 8003f60:	e001      	b.n	8003f66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f62:	2300      	movs	r3, #0
 8003f64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	807b      	strh	r3, [r7, #2]
 8003f80:	4613      	mov	r3, r2
 8003f82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f84:	787b      	ldrb	r3, [r7, #1]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f8a:	887a      	ldrh	r2, [r7, #2]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f90:	e002      	b.n	8003f98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f92:	887a      	ldrh	r2, [r7, #2]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	4603      	mov	r3, r0
 8003fac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003fae:	4b08      	ldr	r3, [pc, #32]	@ (8003fd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fb0:	695a      	ldr	r2, [r3, #20]
 8003fb2:	88fb      	ldrh	r3, [r7, #6]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d006      	beq.n	8003fc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fba:	4a05      	ldr	r2, [pc, #20]	@ (8003fd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fbc:	88fb      	ldrh	r3, [r7, #6]
 8003fbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fc0:	88fb      	ldrh	r3, [r7, #6]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 f806 	bl	8003fd4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fc8:	bf00      	nop
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40010400 	.word	0x40010400

08003fd4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b082      	sub	sp, #8
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e08d      	b.n	8004118 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d106      	bne.n	8004016 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7fe f88b 	bl	800212c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2224      	movs	r2, #36	@ 0x24
 800401a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0201 	bic.w	r2, r2, #1
 800402c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800403a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800404a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d107      	bne.n	8004064 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004060:	609a      	str	r2, [r3, #8]
 8004062:	e006      	b.n	8004072 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004070:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	2b02      	cmp	r3, #2
 8004078:	d108      	bne.n	800408c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004088:	605a      	str	r2, [r3, #4]
 800408a:	e007      	b.n	800409c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800409a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6812      	ldr	r2, [r2, #0]
 80040a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80040aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040ae:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68da      	ldr	r2, [r3, #12]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040be:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691a      	ldr	r2, [r3, #16]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69d9      	ldr	r1, [r3, #28]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1a      	ldr	r2, [r3, #32]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f042 0201 	orr.w	r2, r2, #1
 80040f8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2220      	movs	r2, #32
 8004104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af02      	add	r7, sp, #8
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	4608      	mov	r0, r1
 800412a:	4611      	mov	r1, r2
 800412c:	461a      	mov	r2, r3
 800412e:	4603      	mov	r3, r0
 8004130:	817b      	strh	r3, [r7, #10]
 8004132:	460b      	mov	r3, r1
 8004134:	813b      	strh	r3, [r7, #8]
 8004136:	4613      	mov	r3, r2
 8004138:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b20      	cmp	r3, #32
 8004144:	d166      	bne.n	8004214 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d002      	beq.n	8004152 <HAL_I2C_Mem_Read_IT+0x32>
 800414c:	8bbb      	ldrh	r3, [r7, #28]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d105      	bne.n	800415e <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004158:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e05b      	b.n	8004216 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004168:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800416c:	d101      	bne.n	8004172 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800416e:	2302      	movs	r3, #2
 8004170:	e051      	b.n	8004216 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <HAL_I2C_Mem_Read_IT+0x60>
 800417c:	2302      	movs	r3, #2
 800417e:	e04a      	b.n	8004216 <HAL_I2C_Mem_Read_IT+0xf6>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2222      	movs	r2, #34	@ 0x22
 800418c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2240      	movs	r2, #64	@ 0x40
 8004194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8bba      	ldrh	r2, [r7, #28]
 80041a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	4a1c      	ldr	r2, [pc, #112]	@ (8004220 <HAL_I2C_Mem_Read_IT+0x100>)
 80041ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004224 <HAL_I2C_Mem_Read_IT+0x104>)
 80041b4:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 80041b6:	897a      	ldrh	r2, [r7, #10]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041bc:	88fb      	ldrh	r3, [r7, #6]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d109      	bne.n	80041d6 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041c2:	893b      	ldrh	r3, [r7, #8]
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80041d2:	651a      	str	r2, [r3, #80]	@ 0x50
 80041d4:	e00b      	b.n	80041ee <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041d6:	893b      	ldrh	r3, [r7, #8]
 80041d8:	0a1b      	lsrs	r3, r3, #8
 80041da:	b29b      	uxth	r3, r3
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80041e4:	893b      	ldrh	r3, [r7, #8]
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	461a      	mov	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80041ee:	88fb      	ldrh	r3, [r7, #6]
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	8979      	ldrh	r1, [r7, #10]
 80041f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004228 <HAL_I2C_Mem_Read_IT+0x108>)
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	2300      	movs	r3, #0
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f001 faf2 	bl	80057e4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004208:	2101      	movs	r1, #1
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f001 fb1c 	bl	8005848 <I2C_Enable_IRQ>

    return HAL_OK;
 8004210:	2300      	movs	r3, #0
 8004212:	e000      	b.n	8004216 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8004214:	2302      	movs	r3, #2
  }
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	ffff0000 	.word	0xffff0000
 8004224:	080043e9 	.word	0x080043e9
 8004228:	80002000 	.word	0x80002000

0800422c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	68f9      	ldr	r1, [r7, #12]
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	4798      	blx	r3
  }
}
 8004258:	bf00      	nop
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00f      	beq.n	80042a2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004290:	f043 0201 	orr.w	r2, r3, #1
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80042a0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00f      	beq.n	80042cc <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ba:	f043 0208 	orr.w	r2, r3, #8
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80042ca:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00f      	beq.n	80042f6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00a      	beq.n	80042f6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e4:	f043 0202 	orr.w	r2, r3, #2
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042f4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f003 030b 	and.w	r3, r3, #11
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8004306:	68f9      	ldr	r1, [r7, #12]
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f001 f911 	bl	8005530 <I2C_ITError>
  }
}
 800430e:	bf00      	nop
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
 800436e:	460b      	mov	r3, r1
 8004370:	70fb      	strb	r3, [r7, #3]
 8004372:	4613      	mov	r3, r2
 8004374:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004376:	bf00      	nop
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
	...

080043e8 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b088      	sub	sp, #32
 80043ec:	af02      	add	r7, sp, #8
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80043f4:	4b8d      	ldr	r3, [pc, #564]	@ (800462c <I2C_Mem_ISR_IT+0x244>)
 80043f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004402:	2b01      	cmp	r3, #1
 8004404:	d101      	bne.n	800440a <I2C_Mem_ISR_IT+0x22>
 8004406:	2302      	movs	r3, #2
 8004408:	e10c      	b.n	8004624 <I2C_Mem_ISR_IT+0x23c>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f003 0310 	and.w	r3, r3, #16
 8004418:	2b00      	cmp	r3, #0
 800441a:	d012      	beq.n	8004442 <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00d      	beq.n	8004442 <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2210      	movs	r2, #16
 800442c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004432:	f043 0204 	orr.w	r2, r3, #4
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800443a:	68f8      	ldr	r0, [r7, #12]
 800443c:	f001 f98f 	bl	800575e <I2C_Flush_TXDR>
 8004440:	e0dd      	b.n	80045fe <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b00      	cmp	r3, #0
 800444a:	d022      	beq.n	8004492 <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004452:	2b00      	cmp	r3, #0
 8004454:	d01d      	beq.n	8004492 <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f023 0304 	bic.w	r3, r3, #4
 800445c:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004470:	1c5a      	adds	r2, r3, #1
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800447a:	3b01      	subs	r3, #1
 800447c:	b29a      	uxth	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004486:	b29b      	uxth	r3, r3
 8004488:	3b01      	subs	r3, #1
 800448a:	b29a      	uxth	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004490:	e0b5      	b.n	80045fe <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d02c      	beq.n	80044f6 <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d027      	beq.n	80044f6 <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044ae:	d118      	bne.n	80044e2 <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b4:	781a      	ldrb	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c0:	1c5a      	adds	r2, r3, #1
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ca:	3b01      	subs	r3, #1
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80044e0:	e08d      	b.n	80045fe <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80044ea:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80044f2:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80044f4:	e083      	b.n	80045fe <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d03c      	beq.n	800457a <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8004506:	2b00      	cmp	r3, #0
 8004508:	d037      	beq.n	800457a <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800450e:	b29b      	uxth	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	d02c      	beq.n	800456e <I2C_Mem_ISR_IT+0x186>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004518:	2b00      	cmp	r3, #0
 800451a:	d128      	bne.n	800456e <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004520:	b29b      	uxth	r3, r3
 8004522:	2bff      	cmp	r3, #255	@ 0xff
 8004524:	d910      	bls.n	8004548 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	22ff      	movs	r2, #255	@ 0xff
 800452a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004530:	b299      	uxth	r1, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004536:	b2da      	uxtb	r2, r3
 8004538:	2300      	movs	r3, #0
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f001 f94f 	bl	80057e4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004546:	e017      	b.n	8004578 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800454c:	b29a      	uxth	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004556:	b299      	uxth	r1, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800455c:	b2da      	uxtb	r2, r3
 800455e:	2300      	movs	r3, #0
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f001 f93c 	bl	80057e4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800456c:	e004      	b.n	8004578 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800456e:	2140      	movs	r1, #64	@ 0x40
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 ffdd 	bl	8005530 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004576:	e042      	b.n	80045fe <I2C_Mem_ISR_IT+0x216>
 8004578:	e041      	b.n	80045fe <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004580:	2b00      	cmp	r3, #0
 8004582:	d03c      	beq.n	80045fe <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800458a:	2b00      	cmp	r3, #0
 800458c:	d037      	beq.n	80045fe <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800458e:	2101      	movs	r1, #1
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f001 f9dd 	bl	8005950 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004596:	2102      	movs	r1, #2
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f001 f955 	bl	8005848 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b22      	cmp	r3, #34	@ 0x22
 80045a8:	d101      	bne.n	80045ae <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 80045aa:	4b21      	ldr	r3, [pc, #132]	@ (8004630 <I2C_Mem_ISR_IT+0x248>)
 80045ac:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	2bff      	cmp	r3, #255	@ 0xff
 80045b6:	d910      	bls.n	80045da <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	22ff      	movs	r2, #255	@ 0xff
 80045bc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045c2:	b299      	uxth	r1, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f001 f906 	bl	80057e4 <I2C_TransferConfig>
 80045d8:	e011      	b.n	80045fe <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045de:	b29a      	uxth	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045e8:	b299      	uxth	r1, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f001 f8f3 	bl	80057e4 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f003 0320 	and.w	r3, r3, #32
 8004604:	2b00      	cmp	r3, #0
 8004606:	d008      	beq.n	800461a <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8004612:	6939      	ldr	r1, [r7, #16]
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 fd0b 	bl	8005030 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3718      	adds	r7, #24
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	80002000 	.word	0x80002000
 8004630:	80002400 	.word	0x80002400

08004634 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004644:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004650:	2b01      	cmp	r3, #1
 8004652:	d101      	bne.n	8004658 <I2C_Slave_ISR_IT+0x24>
 8004654:	2302      	movs	r3, #2
 8004656:	e0e2      	b.n	800481e <I2C_Slave_ISR_IT+0x1ea>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	f003 0320 	and.w	r3, r3, #32
 8004666:	2b00      	cmp	r3, #0
 8004668:	d009      	beq.n	800467e <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004670:	2b00      	cmp	r3, #0
 8004672:	d004      	beq.n	800467e <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004674:	6939      	ldr	r1, [r7, #16]
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 fda2 	bl	80051c0 <I2C_ITSlaveCplt>
 800467c:	e0ca      	b.n	8004814 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	f003 0310 	and.w	r3, r3, #16
 8004684:	2b00      	cmp	r3, #0
 8004686:	d04b      	beq.n	8004720 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800468e:	2b00      	cmp	r3, #0
 8004690:	d046      	beq.n	8004720 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004696:	b29b      	uxth	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	d128      	bne.n	80046ee <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b28      	cmp	r3, #40	@ 0x28
 80046a6:	d108      	bne.n	80046ba <I2C_Slave_ISR_IT+0x86>
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046ae:	d104      	bne.n	80046ba <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80046b0:	6939      	ldr	r1, [r7, #16]
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 fee8 	bl	8005488 <I2C_ITListenCplt>
 80046b8:	e031      	b.n	800471e <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b29      	cmp	r3, #41	@ 0x29
 80046c4:	d10e      	bne.n	80046e4 <I2C_Slave_ISR_IT+0xb0>
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046cc:	d00a      	beq.n	80046e4 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2210      	movs	r2, #16
 80046d4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f001 f841 	bl	800575e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 fc4b 	bl	8004f78 <I2C_ITSlaveSeqCplt>
 80046e2:	e01c      	b.n	800471e <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2210      	movs	r2, #16
 80046ea:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80046ec:	e08f      	b.n	800480e <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2210      	movs	r2, #16
 80046f4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046fa:	f043 0204 	orr.w	r2, r3, #4
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <I2C_Slave_ISR_IT+0xdc>
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800470e:	d17e      	bne.n	800480e <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004714:	4619      	mov	r1, r3
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 ff0a 	bl	8005530 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800471c:	e077      	b.n	800480e <I2C_Slave_ISR_IT+0x1da>
 800471e:	e076      	b.n	800480e <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	2b00      	cmp	r3, #0
 8004728:	d02f      	beq.n	800478a <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004730:	2b00      	cmp	r3, #0
 8004732:	d02a      	beq.n	800478a <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004738:	b29b      	uxth	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d018      	beq.n	8004770 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004748:	b2d2      	uxtb	r2, r2
 800474a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004750:	1c5a      	adds	r2, r3, #1
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800475a:	3b01      	subs	r3, #1
 800475c:	b29a      	uxth	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004766:	b29b      	uxth	r3, r3
 8004768:	3b01      	subs	r3, #1
 800476a:	b29a      	uxth	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004774:	b29b      	uxth	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d14b      	bne.n	8004812 <I2C_Slave_ISR_IT+0x1de>
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004780:	d047      	beq.n	8004812 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 fbf8 	bl	8004f78 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004788:	e043      	b.n	8004812 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b00      	cmp	r3, #0
 8004792:	d009      	beq.n	80047a8 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800479a:	2b00      	cmp	r3, #0
 800479c:	d004      	beq.n	80047a8 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800479e:	6939      	ldr	r1, [r7, #16]
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 fb28 	bl	8004df6 <I2C_ITAddrCplt>
 80047a6:	e035      	b.n	8004814 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d030      	beq.n	8004814 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d02b      	beq.n	8004814 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d018      	beq.n	80047f8 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ca:	781a      	ldrb	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d6:	1c5a      	adds	r2, r3, #1
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	3b01      	subs	r3, #1
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ee:	3b01      	subs	r3, #1
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80047f6:	e00d      	b.n	8004814 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047fe:	d002      	beq.n	8004806 <I2C_Slave_ISR_IT+0x1d2>
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d106      	bne.n	8004814 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f000 fbb6 	bl	8004f78 <I2C_ITSlaveSeqCplt>
 800480c:	e002      	b.n	8004814 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800480e:	bf00      	nop
 8004810:	e000      	b.n	8004814 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8004812:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b088      	sub	sp, #32
 800482a:	af02      	add	r7, sp, #8
 800482c:	60f8      	str	r0, [r7, #12]
 800482e:	60b9      	str	r1, [r7, #8]
 8004830:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004838:	2b01      	cmp	r3, #1
 800483a:	d101      	bne.n	8004840 <I2C_Master_ISR_DMA+0x1a>
 800483c:	2302      	movs	r3, #2
 800483e:	e0d9      	b.n	80049f4 <I2C_Master_ISR_DMA+0x1ce>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	f003 0310 	and.w	r3, r3, #16
 800484e:	2b00      	cmp	r3, #0
 8004850:	d016      	beq.n	8004880 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004858:	2b00      	cmp	r3, #0
 800485a:	d011      	beq.n	8004880 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2210      	movs	r2, #16
 8004862:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004868:	f043 0204 	orr.w	r2, r3, #4
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004870:	2120      	movs	r1, #32
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 ffe8 	bl	8005848 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 ff70 	bl	800575e <I2C_Flush_TXDR>
 800487e:	e0b4      	b.n	80049ea <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004886:	2b00      	cmp	r3, #0
 8004888:	d071      	beq.n	800496e <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004890:	2b00      	cmp	r3, #0
 8004892:	d06c      	beq.n	800496e <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048a2:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d04e      	beq.n	800494c <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048ba:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	2bff      	cmp	r3, #255	@ 0xff
 80048c4:	d906      	bls.n	80048d4 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	22ff      	movs	r2, #255	@ 0xff
 80048ca:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80048cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80048d0:	617b      	str	r3, [r7, #20]
 80048d2:	e010      	b.n	80048f6 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048d8:	b29a      	uxth	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80048e6:	d003      	beq.n	80048f0 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ec:	617b      	str	r3, [r7, #20]
 80048ee:	e002      	b.n	80048f6 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80048f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048f4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	8a79      	ldrh	r1, [r7, #18]
 80048fe:	2300      	movs	r3, #0
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f000 ff6d 	bl	80057e4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b22      	cmp	r3, #34	@ 0x22
 8004926:	d108      	bne.n	800493a <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004936:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004938:	e057      	b.n	80049ea <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004948:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800494a:	e04e      	b.n	80049ea <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004956:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800495a:	d003      	beq.n	8004964 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 face 	bl	8004efe <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004962:	e042      	b.n	80049ea <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004964:	2140      	movs	r1, #64	@ 0x40
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 fde2 	bl	8005530 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800496c:	e03d      	b.n	80049ea <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004974:	2b00      	cmp	r3, #0
 8004976:	d028      	beq.n	80049ca <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800497e:	2b00      	cmp	r3, #0
 8004980:	d023      	beq.n	80049ca <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004986:	b29b      	uxth	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	d119      	bne.n	80049c0 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004996:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800499a:	d025      	beq.n	80049e8 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80049a4:	d108      	bne.n	80049b8 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049b4:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80049b6:	e017      	b.n	80049e8 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 faa0 	bl	8004efe <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80049be:	e013      	b.n	80049e8 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80049c0:	2140      	movs	r1, #64	@ 0x40
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 fdb4 	bl	8005530 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80049c8:	e00e      	b.n	80049e8 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	f003 0320 	and.w	r3, r3, #32
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00a      	beq.n	80049ea <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d005      	beq.n	80049ea <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80049de:	68b9      	ldr	r1, [r7, #8]
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 fb25 	bl	8005030 <I2C_ITMasterCplt>
 80049e6:	e000      	b.n	80049ea <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80049e8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3718      	adds	r7, #24
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b088      	sub	sp, #32
 8004a00:	af02      	add	r7, sp, #8
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8004a08:	4b8d      	ldr	r3, [pc, #564]	@ (8004c40 <I2C_Mem_ISR_DMA+0x244>)
 8004a0a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d101      	bne.n	8004a1a <I2C_Mem_ISR_DMA+0x1e>
 8004a16:	2302      	movs	r3, #2
 8004a18:	e10e      	b.n	8004c38 <I2C_Mem_ISR_DMA+0x23c>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f003 0310 	and.w	r3, r3, #16
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d016      	beq.n	8004a5a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d011      	beq.n	8004a5a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2210      	movs	r2, #16
 8004a3c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a42:	f043 0204 	orr.w	r2, r3, #4
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004a4a:	2120      	movs	r1, #32
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 fefb 	bl	8005848 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f000 fe83 	bl	800575e <I2C_Flush_TXDR>
 8004a58:	e0e9      	b.n	8004c2e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00e      	beq.n	8004a82 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d009      	beq.n	8004a82 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a76:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a7e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004a80:	e0d5      	b.n	8004c2e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d05f      	beq.n	8004b4c <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d05a      	beq.n	8004b4c <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004a96:	2101      	movs	r1, #1
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 ff59 	bl	8005950 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004a9e:	2110      	movs	r1, #16
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f000 fed1 	bl	8005848 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d048      	beq.n	8004b42 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	2bff      	cmp	r3, #255	@ 0xff
 8004ab8:	d910      	bls.n	8004adc <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	22ff      	movs	r2, #255	@ 0xff
 8004abe:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ac4:	b299      	uxth	r1, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	2300      	movs	r3, #0
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 fe85 	bl	80057e4 <I2C_TransferConfig>
 8004ada:	e011      	b.n	8004b00 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aea:	b299      	uxth	r1, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	2300      	movs	r3, #0
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 fe72 	bl	80057e4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b22      	cmp	r3, #34	@ 0x22
 8004b1c:	d108      	bne.n	8004b30 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b2c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004b2e:	e07e      	b.n	8004c2e <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b3e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004b40:	e075      	b.n	8004c2e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004b42:	2140      	movs	r1, #64	@ 0x40
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 fcf3 	bl	8005530 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004b4a:	e070      	b.n	8004c2e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d05d      	beq.n	8004c12 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d058      	beq.n	8004c12 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004b60:	2101      	movs	r1, #1
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 fef4 	bl	8005950 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004b68:	2110      	movs	r1, #16
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 fe6c 	bl	8005848 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b22      	cmp	r3, #34	@ 0x22
 8004b7a:	d101      	bne.n	8004b80 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8004b7c:	4b31      	ldr	r3, [pc, #196]	@ (8004c44 <I2C_Mem_ISR_DMA+0x248>)
 8004b7e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	2bff      	cmp	r3, #255	@ 0xff
 8004b88:	d910      	bls.n	8004bac <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	22ff      	movs	r2, #255	@ 0xff
 8004b8e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b94:	b299      	uxth	r1, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b9a:	b2da      	uxtb	r2, r3
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f000 fe1d 	bl	80057e4 <I2C_TransferConfig>
 8004baa:	e011      	b.n	8004bd0 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bba:	b299      	uxth	r1, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 fe0a 	bl	80057e4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b22      	cmp	r3, #34	@ 0x22
 8004bec:	d108      	bne.n	8004c00 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004bfc:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004bfe:	e016      	b.n	8004c2e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c0e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c10:	e00d      	b.n	8004c2e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	f003 0320 	and.w	r3, r3, #32
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d008      	beq.n	8004c2e <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004c26:	68b9      	ldr	r1, [r7, #8]
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 fa01 	bl	8005030 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	80002000 	.word	0x80002000
 8004c44:	80002400 	.word	0x80002400

08004c48 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b088      	sub	sp, #32
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c58:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d101      	bne.n	8004c6c <I2C_Slave_ISR_DMA+0x24>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	e0c0      	b.n	8004dee <I2C_Slave_ISR_DMA+0x1a6>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f003 0320 	and.w	r3, r3, #32
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d009      	beq.n	8004c92 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d004      	beq.n	8004c92 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004c88:	68b9      	ldr	r1, [r7, #8]
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f000 fa98 	bl	80051c0 <I2C_ITSlaveCplt>
 8004c90:	e0a8      	b.n	8004de4 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	f003 0310 	and.w	r3, r3, #16
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 8095 	beq.w	8004dc8 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 808f 	beq.w	8004dc8 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d104      	bne.n	8004cbe <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d07d      	beq.n	8004dba <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00c      	beq.n	8004ce0 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d007      	beq.n	8004ce0 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00c      	beq.n	8004d02 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d007      	beq.n	8004d02 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d128      	bne.n	8004d5a <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b28      	cmp	r3, #40	@ 0x28
 8004d12:	d108      	bne.n	8004d26 <I2C_Slave_ISR_DMA+0xde>
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004d1a:	d104      	bne.n	8004d26 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004d1c:	68b9      	ldr	r1, [r7, #8]
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f000 fbb2 	bl	8005488 <I2C_ITListenCplt>
 8004d24:	e048      	b.n	8004db8 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b29      	cmp	r3, #41	@ 0x29
 8004d30:	d10e      	bne.n	8004d50 <I2C_Slave_ISR_DMA+0x108>
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004d38:	d00a      	beq.n	8004d50 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2210      	movs	r2, #16
 8004d40:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f000 fd0b 	bl	800575e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f000 f915 	bl	8004f78 <I2C_ITSlaveSeqCplt>
 8004d4e:	e033      	b.n	8004db8 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2210      	movs	r2, #16
 8004d56:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004d58:	e034      	b.n	8004dc4 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2210      	movs	r2, #16
 8004d60:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d66:	f043 0204 	orr.w	r2, r3, #4
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d74:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d003      	beq.n	8004d84 <I2C_Slave_ISR_DMA+0x13c>
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d82:	d11f      	bne.n	8004dc4 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004d84:	7dfb      	ldrb	r3, [r7, #23]
 8004d86:	2b21      	cmp	r3, #33	@ 0x21
 8004d88:	d002      	beq.n	8004d90 <I2C_Slave_ISR_DMA+0x148>
 8004d8a:	7dfb      	ldrb	r3, [r7, #23]
 8004d8c:	2b29      	cmp	r3, #41	@ 0x29
 8004d8e:	d103      	bne.n	8004d98 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2221      	movs	r2, #33	@ 0x21
 8004d94:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d96:	e008      	b.n	8004daa <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004d98:	7dfb      	ldrb	r3, [r7, #23]
 8004d9a:	2b22      	cmp	r3, #34	@ 0x22
 8004d9c:	d002      	beq.n	8004da4 <I2C_Slave_ISR_DMA+0x15c>
 8004d9e:	7dfb      	ldrb	r3, [r7, #23]
 8004da0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004da2:	d102      	bne.n	8004daa <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2222      	movs	r2, #34	@ 0x22
 8004da8:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dae:	4619      	mov	r1, r3
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 fbbd 	bl	8005530 <I2C_ITError>
      if (treatdmanack == 1U)
 8004db6:	e005      	b.n	8004dc4 <I2C_Slave_ISR_DMA+0x17c>
 8004db8:	e004      	b.n	8004dc4 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2210      	movs	r2, #16
 8004dc0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004dc2:	e00f      	b.n	8004de4 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8004dc4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004dc6:	e00d      	b.n	8004de4 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f003 0308 	and.w	r3, r3, #8
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d008      	beq.n	8004de4 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004ddc:	68b9      	ldr	r1, [r7, #8]
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 f809 	bl	8004df6 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3720      	adds	r7, #32
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b084      	sub	sp, #16
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
 8004dfe:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e0c:	2b28      	cmp	r3, #40	@ 0x28
 8004e0e:	d16a      	bne.n	8004ee6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	0c1b      	lsrs	r3, r3, #16
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	0c1b      	lsrs	r3, r3, #16
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004e2e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e3c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004e4a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d138      	bne.n	8004ec6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004e54:	897b      	ldrh	r3, [r7, #10]
 8004e56:	09db      	lsrs	r3, r3, #7
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	89bb      	ldrh	r3, [r7, #12]
 8004e5c:	4053      	eors	r3, r2
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	f003 0306 	and.w	r3, r3, #6
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d11c      	bne.n	8004ea2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004e68:	897b      	ldrh	r3, [r7, #10]
 8004e6a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e70:	1c5a      	adds	r2, r3, #1
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d13b      	bne.n	8004ef6 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2208      	movs	r2, #8
 8004e8a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004e94:	89ba      	ldrh	r2, [r7, #12]
 8004e96:	7bfb      	ldrb	r3, [r7, #15]
 8004e98:	4619      	mov	r1, r3
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7ff fa63 	bl	8004366 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004ea0:	e029      	b.n	8004ef6 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004ea2:	893b      	ldrh	r3, [r7, #8]
 8004ea4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004ea6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fd50 	bl	8005950 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004eb8:	89ba      	ldrh	r2, [r7, #12]
 8004eba:	7bfb      	ldrb	r3, [r7, #15]
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7ff fa51 	bl	8004366 <HAL_I2C_AddrCallback>
}
 8004ec4:	e017      	b.n	8004ef6 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004ec6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fd40 	bl	8005950 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004ed8:	89ba      	ldrh	r2, [r7, #12]
 8004eda:	7bfb      	ldrb	r3, [r7, #15]
 8004edc:	4619      	mov	r1, r3
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7ff fa41 	bl	8004366 <HAL_I2C_AddrCallback>
}
 8004ee4:	e007      	b.n	8004ef6 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2208      	movs	r2, #8
 8004eec:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8004ef6:	bf00      	nop
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b082      	sub	sp, #8
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b21      	cmp	r3, #33	@ 0x21
 8004f18:	d115      	bne.n	8004f46 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2211      	movs	r2, #17
 8004f26:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004f2e:	2101      	movs	r1, #1
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 fd0d 	bl	8005950 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7ff f9e9 	bl	8004316 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f44:	e014      	b.n	8004f70 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2212      	movs	r2, #18
 8004f52:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004f5a:	2102      	movs	r1, #2
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fcf7 	bl	8005950 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7ff f9dd 	bl	800432a <HAL_I2C_MasterRxCpltCallback>
}
 8004f70:	bf00      	nop
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d008      	beq.n	8004fac <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	e00c      	b.n	8004fc6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d007      	beq.n	8004fc6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004fc4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b29      	cmp	r3, #41	@ 0x29
 8004fd0:	d112      	bne.n	8004ff8 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2228      	movs	r2, #40	@ 0x28
 8004fd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2221      	movs	r2, #33	@ 0x21
 8004fde:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fcb4 	bl	8005950 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7ff f9a4 	bl	800433e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004ff6:	e017      	b.n	8005028 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b2a      	cmp	r3, #42	@ 0x2a
 8005002:	d111      	bne.n	8005028 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2228      	movs	r2, #40	@ 0x28
 8005008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2222      	movs	r2, #34	@ 0x22
 8005010:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005012:	2102      	movs	r1, #2
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 fc9b 	bl	8005950 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f7ff f995 	bl	8004352 <HAL_I2C_SlaveRxCpltCallback>
}
 8005028:	bf00      	nop
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2220      	movs	r2, #32
 8005044:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b21      	cmp	r3, #33	@ 0x21
 8005050:	d107      	bne.n	8005062 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005052:	2101      	movs	r1, #1
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 fc7b 	bl	8005950 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2211      	movs	r2, #17
 800505e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005060:	e00c      	b.n	800507c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b22      	cmp	r3, #34	@ 0x22
 800506c:	d106      	bne.n	800507c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800506e:	2102      	movs	r1, #2
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 fc6d 	bl	8005950 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2212      	movs	r2, #18
 800507a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6859      	ldr	r1, [r3, #4]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	4b4c      	ldr	r3, [pc, #304]	@ (80051b8 <I2C_ITMasterCplt+0x188>)
 8005088:	400b      	ands	r3, r1
 800508a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a49      	ldr	r2, [pc, #292]	@ (80051bc <I2C_ITMasterCplt+0x18c>)
 8005096:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f003 0310 	and.w	r3, r3, #16
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d009      	beq.n	80050b6 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2210      	movs	r2, #16
 80050a8:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ae:	f043 0204 	orr.w	r2, r3, #4
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b60      	cmp	r3, #96	@ 0x60
 80050c0:	d10a      	bne.n	80050d8 <I2C_ITMasterCplt+0xa8>
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d005      	beq.n	80050d8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80050d6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 fb40 	bl	800575e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050e2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b60      	cmp	r3, #96	@ 0x60
 80050ee:	d002      	beq.n	80050f6 <I2C_ITMasterCplt+0xc6>
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d006      	beq.n	8005104 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050fa:	4619      	mov	r1, r3
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 fa17 	bl	8005530 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005102:	e054      	b.n	80051ae <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b21      	cmp	r3, #33	@ 0x21
 800510e:	d124      	bne.n	800515a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2220      	movs	r2, #32
 8005114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b40      	cmp	r3, #64	@ 0x40
 8005128:	d10b      	bne.n	8005142 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7ff f92b 	bl	8004396 <HAL_I2C_MemTxCpltCallback>
}
 8005140:	e035      	b.n	80051ae <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7ff f8df 	bl	8004316 <HAL_I2C_MasterTxCpltCallback>
}
 8005158:	e029      	b.n	80051ae <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b22      	cmp	r3, #34	@ 0x22
 8005164:	d123      	bne.n	80051ae <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2220      	movs	r2, #32
 800516a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b40      	cmp	r3, #64	@ 0x40
 800517e:	d10b      	bne.n	8005198 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7ff f90a 	bl	80043aa <HAL_I2C_MemRxCpltCallback>
}
 8005196:	e00a      	b.n	80051ae <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7ff f8be 	bl	800432a <HAL_I2C_MasterRxCpltCallback>
}
 80051ae:	bf00      	nop
 80051b0:	3718      	adds	r7, #24
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	fe00e800 	.word	0xfe00e800
 80051bc:	ffff0000 	.word	0xffff0000

080051c0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051da:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051e2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2220      	movs	r2, #32
 80051ea:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80051ec:	7afb      	ldrb	r3, [r7, #11]
 80051ee:	2b21      	cmp	r3, #33	@ 0x21
 80051f0:	d002      	beq.n	80051f8 <I2C_ITSlaveCplt+0x38>
 80051f2:	7afb      	ldrb	r3, [r7, #11]
 80051f4:	2b29      	cmp	r3, #41	@ 0x29
 80051f6:	d108      	bne.n	800520a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80051f8:	f248 0101 	movw	r1, #32769	@ 0x8001
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 fba7 	bl	8005950 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2221      	movs	r2, #33	@ 0x21
 8005206:	631a      	str	r2, [r3, #48]	@ 0x30
 8005208:	e019      	b.n	800523e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800520a:	7afb      	ldrb	r3, [r7, #11]
 800520c:	2b22      	cmp	r3, #34	@ 0x22
 800520e:	d002      	beq.n	8005216 <I2C_ITSlaveCplt+0x56>
 8005210:	7afb      	ldrb	r3, [r7, #11]
 8005212:	2b2a      	cmp	r3, #42	@ 0x2a
 8005214:	d108      	bne.n	8005228 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005216:	f248 0102 	movw	r1, #32770	@ 0x8002
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 fb98 	bl	8005950 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2222      	movs	r2, #34	@ 0x22
 8005224:	631a      	str	r2, [r3, #48]	@ 0x30
 8005226:	e00a      	b.n	800523e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005228:	7afb      	ldrb	r3, [r7, #11]
 800522a:	2b28      	cmp	r3, #40	@ 0x28
 800522c:	d107      	bne.n	800523e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800522e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 fb8c 	bl	8005950 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800524c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6859      	ldr	r1, [r3, #4]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	4b89      	ldr	r3, [pc, #548]	@ (8005480 <I2C_ITSlaveCplt+0x2c0>)
 800525a:	400b      	ands	r3, r1
 800525c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fa7d 	bl	800575e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d013      	beq.n	8005296 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800527c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005282:	2b00      	cmp	r3, #0
 8005284:	d01f      	beq.n	80052c6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	b29a      	uxth	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005294:	e017      	b.n	80052c6 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d012      	beq.n	80052c6 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80052ae:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d006      	beq.n	80052c6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d020      	beq.n	8005312 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f023 0304 	bic.w	r3, r3, #4
 80052d6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00c      	beq.n	8005312 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052fc:	3b01      	subs	r3, #1
 80052fe:	b29a      	uxth	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005308:	b29b      	uxth	r3, r3
 800530a:	3b01      	subs	r3, #1
 800530c:	b29a      	uxth	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005316:	b29b      	uxth	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	d005      	beq.n	8005328 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005320:	f043 0204 	orr.w	r2, r3, #4
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f003 0310 	and.w	r3, r3, #16
 800532e:	2b00      	cmp	r3, #0
 8005330:	d049      	beq.n	80053c6 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005338:	2b00      	cmp	r3, #0
 800533a:	d044      	beq.n	80053c6 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005340:	b29b      	uxth	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d128      	bne.n	8005398 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b28      	cmp	r3, #40	@ 0x28
 8005350:	d108      	bne.n	8005364 <I2C_ITSlaveCplt+0x1a4>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005358:	d104      	bne.n	8005364 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800535a:	6979      	ldr	r1, [r7, #20]
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f893 	bl	8005488 <I2C_ITListenCplt>
 8005362:	e030      	b.n	80053c6 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b29      	cmp	r3, #41	@ 0x29
 800536e:	d10e      	bne.n	800538e <I2C_ITSlaveCplt+0x1ce>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005376:	d00a      	beq.n	800538e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2210      	movs	r2, #16
 800537e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f9ec 	bl	800575e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7ff fdf6 	bl	8004f78 <I2C_ITSlaveSeqCplt>
 800538c:	e01b      	b.n	80053c6 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2210      	movs	r2, #16
 8005394:	61da      	str	r2, [r3, #28]
 8005396:	e016      	b.n	80053c6 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2210      	movs	r2, #16
 800539e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a4:	f043 0204 	orr.w	r2, r3, #4
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <I2C_ITSlaveCplt+0x1fa>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053b8:	d105      	bne.n	80053c6 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053be:	4619      	mov	r1, r3
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 f8b5 	bl	8005530 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d010      	beq.n	80053fe <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053e0:	4619      	mov	r1, r3
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f8a4 	bl	8005530 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b28      	cmp	r3, #40	@ 0x28
 80053f2:	d141      	bne.n	8005478 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80053f4:	6979      	ldr	r1, [r7, #20]
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f846 	bl	8005488 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80053fc:	e03c      	b.n	8005478 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005402:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005406:	d014      	beq.n	8005432 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7ff fdb5 	bl	8004f78 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a1c      	ldr	r2, [pc, #112]	@ (8005484 <I2C_ITSlaveCplt+0x2c4>)
 8005412:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2220      	movs	r2, #32
 8005418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7fe ffa9 	bl	8004382 <HAL_I2C_ListenCpltCallback>
}
 8005430:	e022      	b.n	8005478 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b22      	cmp	r3, #34	@ 0x22
 800543c:	d10e      	bne.n	800545c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2220      	movs	r2, #32
 8005442:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f7fe ff7c 	bl	8004352 <HAL_I2C_SlaveRxCpltCallback>
}
 800545a:	e00d      	b.n	8005478 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2220      	movs	r2, #32
 8005460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7fe ff63 	bl	800433e <HAL_I2C_SlaveTxCpltCallback>
}
 8005478:	bf00      	nop
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	fe00e800 	.word	0xfe00e800
 8005484:	ffff0000 	.word	0xffff0000

08005488 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a25      	ldr	r2, [pc, #148]	@ (800552c <I2C_ITListenCplt+0xa4>)
 8005496:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2220      	movs	r2, #32
 80054a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	f003 0304 	and.w	r3, r3, #4
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d022      	beq.n	8005504 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c8:	b2d2      	uxtb	r2, r2
 80054ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d0:	1c5a      	adds	r2, r3, #1
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d012      	beq.n	8005504 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054e2:	3b01      	subs	r3, #1
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	3b01      	subs	r3, #1
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054fc:	f043 0204 	orr.w	r2, r3, #4
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005504:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 fa21 	bl	8005950 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2210      	movs	r2, #16
 8005514:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7fe ff2f 	bl	8004382 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005524:	bf00      	nop
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	ffff0000 	.word	0xffff0000

08005530 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005540:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a6d      	ldr	r2, [pc, #436]	@ (8005704 <I2C_ITError+0x1d4>)
 800554e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	431a      	orrs	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005562:	7bfb      	ldrb	r3, [r7, #15]
 8005564:	2b28      	cmp	r3, #40	@ 0x28
 8005566:	d005      	beq.n	8005574 <I2C_ITError+0x44>
 8005568:	7bfb      	ldrb	r3, [r7, #15]
 800556a:	2b29      	cmp	r3, #41	@ 0x29
 800556c:	d002      	beq.n	8005574 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800556e:	7bfb      	ldrb	r3, [r7, #15]
 8005570:	2b2a      	cmp	r3, #42	@ 0x2a
 8005572:	d10b      	bne.n	800558c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005574:	2103      	movs	r1, #3
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f9ea 	bl	8005950 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2228      	movs	r2, #40	@ 0x28
 8005580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a60      	ldr	r2, [pc, #384]	@ (8005708 <I2C_ITError+0x1d8>)
 8005588:	635a      	str	r2, [r3, #52]	@ 0x34
 800558a:	e030      	b.n	80055ee <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800558c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 f9dd 	bl	8005950 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f8e1 	bl	800575e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b60      	cmp	r3, #96	@ 0x60
 80055a6:	d01f      	beq.n	80055e8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2220      	movs	r2, #32
 80055ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	f003 0320 	and.w	r3, r3, #32
 80055ba:	2b20      	cmp	r3, #32
 80055bc:	d114      	bne.n	80055e8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	f003 0310 	and.w	r3, r3, #16
 80055c8:	2b10      	cmp	r3, #16
 80055ca:	d109      	bne.n	80055e0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2210      	movs	r2, #16
 80055d2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055d8:	f043 0204 	orr.w	r2, r3, #4
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2220      	movs	r2, #32
 80055e6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055f2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d039      	beq.n	8005670 <I2C_ITError+0x140>
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2b11      	cmp	r3, #17
 8005600:	d002      	beq.n	8005608 <I2C_ITError+0xd8>
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	2b21      	cmp	r3, #33	@ 0x21
 8005606:	d133      	bne.n	8005670 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005612:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005616:	d107      	bne.n	8005628 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005626:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800562c:	4618      	mov	r0, r3
 800562e:	f7fe fa4d 	bl	8003acc <HAL_DMA_GetState>
 8005632:	4603      	mov	r3, r0
 8005634:	2b01      	cmp	r3, #1
 8005636:	d017      	beq.n	8005668 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800563c:	4a33      	ldr	r2, [pc, #204]	@ (800570c <I2C_ITError+0x1dc>)
 800563e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800564c:	4618      	mov	r0, r3
 800564e:	f7fe f927 	bl	80038a0 <HAL_DMA_Abort_IT>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d04d      	beq.n	80056f4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800565c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005662:	4610      	mov	r0, r2
 8005664:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005666:	e045      	b.n	80056f4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f851 	bl	8005710 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800566e:	e041      	b.n	80056f4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005674:	2b00      	cmp	r3, #0
 8005676:	d039      	beq.n	80056ec <I2C_ITError+0x1bc>
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	2b12      	cmp	r3, #18
 800567c:	d002      	beq.n	8005684 <I2C_ITError+0x154>
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	2b22      	cmp	r3, #34	@ 0x22
 8005682:	d133      	bne.n	80056ec <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800568e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005692:	d107      	bne.n	80056a4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80056a2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7fe fa0f 	bl	8003acc <HAL_DMA_GetState>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d017      	beq.n	80056e4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056b8:	4a14      	ldr	r2, [pc, #80]	@ (800570c <I2C_ITError+0x1dc>)
 80056ba:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7fe f8e9 	bl	80038a0 <HAL_DMA_Abort_IT>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d011      	beq.n	80056f8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80056de:	4610      	mov	r0, r2
 80056e0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80056e2:	e009      	b.n	80056f8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f813 	bl	8005710 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80056ea:	e005      	b.n	80056f8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 f80f 	bl	8005710 <I2C_TreatErrorCallback>
  }
}
 80056f2:	e002      	b.n	80056fa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80056f4:	bf00      	nop
 80056f6:	e000      	b.n	80056fa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80056f8:	bf00      	nop
}
 80056fa:	bf00      	nop
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	ffff0000 	.word	0xffff0000
 8005708:	08004635 	.word	0x08004635
 800570c:	080057a7 	.word	0x080057a7

08005710 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b60      	cmp	r3, #96	@ 0x60
 8005722:	d10e      	bne.n	8005742 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2220      	movs	r2, #32
 8005728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7fe fe49 	bl	80043d2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005740:	e009      	b.n	8005756 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f7fe fe34 	bl	80043be <HAL_I2C_ErrorCallback>
}
 8005756:	bf00      	nop
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800575e:	b480      	push	{r7}
 8005760:	b083      	sub	sp, #12
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b02      	cmp	r3, #2
 8005772:	d103      	bne.n	800577c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2200      	movs	r2, #0
 800577a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b01      	cmp	r3, #1
 8005788:	d007      	beq.n	800579a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	699a      	ldr	r2, [r3, #24]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f042 0201 	orr.w	r2, r2, #1
 8005798:	619a      	str	r2, [r3, #24]
  }
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr

080057a6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b084      	sub	sp, #16
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d003      	beq.n	80057c4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c0:	2200      	movs	r2, #0
 80057c2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d003      	beq.n	80057d4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057d0:	2200      	movs	r2, #0
 80057d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f7ff ff9b 	bl	8005710 <I2C_TreatErrorCallback>
}
 80057da:	bf00      	nop
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
	...

080057e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b087      	sub	sp, #28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	607b      	str	r3, [r7, #4]
 80057ee:	460b      	mov	r3, r1
 80057f0:	817b      	strh	r3, [r7, #10]
 80057f2:	4613      	mov	r3, r2
 80057f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057f6:	897b      	ldrh	r3, [r7, #10]
 80057f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80057fc:	7a7b      	ldrb	r3, [r7, #9]
 80057fe:	041b      	lsls	r3, r3, #16
 8005800:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005804:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	4313      	orrs	r3, r2
 800580e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005812:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	0d5b      	lsrs	r3, r3, #21
 800581e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005822:	4b08      	ldr	r3, [pc, #32]	@ (8005844 <I2C_TransferConfig+0x60>)
 8005824:	430b      	orrs	r3, r1
 8005826:	43db      	mvns	r3, r3
 8005828:	ea02 0103 	and.w	r1, r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	430a      	orrs	r2, r1
 8005834:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005836:	bf00      	nop
 8005838:	371c      	adds	r7, #28
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	03ff63ff 	.word	0x03ff63ff

08005848 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005854:	2300      	movs	r3, #0
 8005856:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800585c:	4a39      	ldr	r2, [pc, #228]	@ (8005944 <I2C_Enable_IRQ+0xfc>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d032      	beq.n	80058c8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005866:	4a38      	ldr	r2, [pc, #224]	@ (8005948 <I2C_Enable_IRQ+0x100>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d02d      	beq.n	80058c8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005870:	4a36      	ldr	r2, [pc, #216]	@ (800594c <I2C_Enable_IRQ+0x104>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d028      	beq.n	80058c8 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005876:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800587a:	2b00      	cmp	r3, #0
 800587c:	da03      	bge.n	8005886 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005884:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005886:	887b      	ldrh	r3, [r7, #2]
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005896:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005898:	887b      	ldrh	r3, [r7, #2]
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80058a8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80058aa:	887b      	ldrh	r3, [r7, #2]
 80058ac:	2b10      	cmp	r3, #16
 80058ae:	d103      	bne.n	80058b8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80058b6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80058b8:	887b      	ldrh	r3, [r7, #2]
 80058ba:	2b20      	cmp	r3, #32
 80058bc:	d133      	bne.n	8005926 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f043 0320 	orr.w	r3, r3, #32
 80058c4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80058c6:	e02e      	b.n	8005926 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80058c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	da03      	bge.n	80058d8 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80058d6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80058d8:	887b      	ldrh	r3, [r7, #2]
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80058e8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80058ea:	887b      	ldrh	r3, [r7, #2]
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d003      	beq.n	80058fc <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80058fa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80058fc:	887b      	ldrh	r3, [r7, #2]
 80058fe:	2b10      	cmp	r3, #16
 8005900:	d103      	bne.n	800590a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005908:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800590a:	887b      	ldrh	r3, [r7, #2]
 800590c:	2b20      	cmp	r3, #32
 800590e:	d103      	bne.n	8005918 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005916:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005918:	887b      	ldrh	r3, [r7, #2]
 800591a:	2b40      	cmp	r3, #64	@ 0x40
 800591c:	d103      	bne.n	8005926 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005924:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6819      	ldr	r1, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	430a      	orrs	r2, r1
 8005934:	601a      	str	r2, [r3, #0]
}
 8005936:	bf00      	nop
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	08004827 	.word	0x08004827
 8005948:	08004c49 	.word	0x08004c49
 800594c:	080049fd 	.word	0x080049fd

08005950 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	460b      	mov	r3, r1
 800595a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800595c:	2300      	movs	r3, #0
 800595e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005960:	887b      	ldrh	r3, [r7, #2]
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00f      	beq.n	800598a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8005970:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005978:	b2db      	uxtb	r3, r3
 800597a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800597e:	2b28      	cmp	r3, #40	@ 0x28
 8005980:	d003      	beq.n	800598a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005988:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800598a:	887b      	ldrh	r3, [r7, #2]
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00f      	beq.n	80059b4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800599a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80059a8:	2b28      	cmp	r3, #40	@ 0x28
 80059aa:	d003      	beq.n	80059b4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80059b2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80059b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	da03      	bge.n	80059c4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80059c2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80059c4:	887b      	ldrh	r3, [r7, #2]
 80059c6:	2b10      	cmp	r3, #16
 80059c8:	d103      	bne.n	80059d2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80059d0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80059d2:	887b      	ldrh	r3, [r7, #2]
 80059d4:	2b20      	cmp	r3, #32
 80059d6:	d103      	bne.n	80059e0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f043 0320 	orr.w	r3, r3, #32
 80059de:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80059e0:	887b      	ldrh	r3, [r7, #2]
 80059e2:	2b40      	cmp	r3, #64	@ 0x40
 80059e4:	d103      	bne.n	80059ee <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059ec:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6819      	ldr	r1, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	43da      	mvns	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	400a      	ands	r2, r1
 80059fe:	601a      	str	r2, [r3, #0]
}
 8005a00:	bf00      	nop
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b20      	cmp	r3, #32
 8005a20:	d138      	bne.n	8005a94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d101      	bne.n	8005a30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	e032      	b.n	8005a96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2224      	movs	r2, #36	@ 0x24
 8005a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f022 0201 	bic.w	r2, r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005a5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6819      	ldr	r1, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f042 0201 	orr.w	r2, r2, #1
 8005a7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2220      	movs	r2, #32
 8005a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005a90:	2300      	movs	r3, #0
 8005a92:	e000      	b.n	8005a96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a94:	2302      	movs	r3, #2
  }
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b085      	sub	sp, #20
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	2b20      	cmp	r3, #32
 8005ab6:	d139      	bne.n	8005b2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d101      	bne.n	8005ac6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	e033      	b.n	8005b2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2224      	movs	r2, #36	@ 0x24
 8005ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0201 	bic.w	r2, r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005af4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	021b      	lsls	r3, r3, #8
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f042 0201 	orr.w	r2, r2, #1
 8005b16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	e000      	b.n	8005b2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005b2c:	2302      	movs	r3, #2
  }
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
	...

08005b3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d141      	bne.n	8005bce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b4a:	4b4b      	ldr	r3, [pc, #300]	@ (8005c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005b52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b56:	d131      	bne.n	8005bbc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b58:	4b47      	ldr	r3, [pc, #284]	@ (8005c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b5e:	4a46      	ldr	r2, [pc, #280]	@ (8005c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b68:	4b43      	ldr	r3, [pc, #268]	@ (8005c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005b70:	4a41      	ldr	r2, [pc, #260]	@ (8005c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b78:	4b40      	ldr	r3, [pc, #256]	@ (8005c7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2232      	movs	r2, #50	@ 0x32
 8005b7e:	fb02 f303 	mul.w	r3, r2, r3
 8005b82:	4a3f      	ldr	r2, [pc, #252]	@ (8005c80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005b84:	fba2 2303 	umull	r2, r3, r2, r3
 8005b88:	0c9b      	lsrs	r3, r3, #18
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b8e:	e002      	b.n	8005b96 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	3b01      	subs	r3, #1
 8005b94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b96:	4b38      	ldr	r3, [pc, #224]	@ (8005c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ba2:	d102      	bne.n	8005baa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1f2      	bne.n	8005b90 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005baa:	4b33      	ldr	r3, [pc, #204]	@ (8005c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bb6:	d158      	bne.n	8005c6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e057      	b.n	8005c6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005bbc:	4b2e      	ldr	r3, [pc, #184]	@ (8005c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bc2:	4a2d      	ldr	r2, [pc, #180]	@ (8005c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bc8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005bcc:	e04d      	b.n	8005c6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bd4:	d141      	bne.n	8005c5a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005bd6:	4b28      	ldr	r3, [pc, #160]	@ (8005c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005bde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005be2:	d131      	bne.n	8005c48 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005be4:	4b24      	ldr	r3, [pc, #144]	@ (8005c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bea:	4a23      	ldr	r2, [pc, #140]	@ (8005c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bf0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005bf4:	4b20      	ldr	r3, [pc, #128]	@ (8005c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005bfc:	4a1e      	ldr	r2, [pc, #120]	@ (8005c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005c04:	4b1d      	ldr	r3, [pc, #116]	@ (8005c7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2232      	movs	r2, #50	@ 0x32
 8005c0a:	fb02 f303 	mul.w	r3, r2, r3
 8005c0e:	4a1c      	ldr	r2, [pc, #112]	@ (8005c80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005c10:	fba2 2303 	umull	r2, r3, r2, r3
 8005c14:	0c9b      	lsrs	r3, r3, #18
 8005c16:	3301      	adds	r3, #1
 8005c18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c1a:	e002      	b.n	8005c22 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c22:	4b15      	ldr	r3, [pc, #84]	@ (8005c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c2e:	d102      	bne.n	8005c36 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1f2      	bne.n	8005c1c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005c36:	4b10      	ldr	r3, [pc, #64]	@ (8005c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c42:	d112      	bne.n	8005c6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e011      	b.n	8005c6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c48:	4b0b      	ldr	r3, [pc, #44]	@ (8005c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8005c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005c58:	e007      	b.n	8005c6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005c5a:	4b07      	ldr	r3, [pc, #28]	@ (8005c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005c62:	4a05      	ldr	r2, [pc, #20]	@ (8005c78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005c68:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3714      	adds	r7, #20
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	40007000 	.word	0x40007000
 8005c7c:	20000004 	.word	0x20000004
 8005c80:	431bde83 	.word	0x431bde83

08005c84 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005c84:	b480      	push	{r7}
 8005c86:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005c88:	4b05      	ldr	r3, [pc, #20]	@ (8005ca0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	4a04      	ldr	r2, [pc, #16]	@ (8005ca0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005c8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005c92:	6093      	str	r3, [r2, #8]
}
 8005c94:	bf00      	nop
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	40007000 	.word	0x40007000

08005ca4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b088      	sub	sp, #32
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e2fe      	b.n	80062b4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d075      	beq.n	8005dae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cc2:	4b97      	ldr	r3, [pc, #604]	@ (8005f20 <HAL_RCC_OscConfig+0x27c>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f003 030c 	and.w	r3, r3, #12
 8005cca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ccc:	4b94      	ldr	r3, [pc, #592]	@ (8005f20 <HAL_RCC_OscConfig+0x27c>)
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f003 0303 	and.w	r3, r3, #3
 8005cd4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	2b0c      	cmp	r3, #12
 8005cda:	d102      	bne.n	8005ce2 <HAL_RCC_OscConfig+0x3e>
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	2b03      	cmp	r3, #3
 8005ce0:	d002      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x44>
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	2b08      	cmp	r3, #8
 8005ce6:	d10b      	bne.n	8005d00 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ce8:	4b8d      	ldr	r3, [pc, #564]	@ (8005f20 <HAL_RCC_OscConfig+0x27c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d05b      	beq.n	8005dac <HAL_RCC_OscConfig+0x108>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d157      	bne.n	8005dac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e2d9      	b.n	80062b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d08:	d106      	bne.n	8005d18 <HAL_RCC_OscConfig+0x74>
 8005d0a:	4b85      	ldr	r3, [pc, #532]	@ (8005f20 <HAL_RCC_OscConfig+0x27c>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a84      	ldr	r2, [pc, #528]	@ (8005f20 <HAL_RCC_OscConfig+0x27c>)
 8005d10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d14:	6013      	str	r3, [r2, #0]
 8005d16:	e01d      	b.n	8005d54 <HAL_RCC_OscConfig+0xb0>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d20:	d10c      	bne.n	8005d3c <HAL_RCC_OscConfig+0x98>
 8005d22:	4b7f      	ldr	r3, [pc, #508]	@ (8005f20 <HAL_RCC_OscConfig+0x27c>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a7e      	ldr	r2, [pc, #504]	@ (8005f20 <HAL_RCC_OscConfig+0x27c>)
 8005d28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d2c:	6013      	str	r3, [r2, #0]
 8005d2e:	4b7c      	ldr	r3, [pc, #496]	@ (8005f20 <HAL_RCC_OscConfig+0x27c>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a7b      	ldr	r2, [pc, #492]	@ (8005f20 <HAL_RCC_OscConfig+0x27c>)
 8005d34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d38:	6013      	str	r3, [r2, #0]
 8005d3a:	e00b      	b.n	8005d54 <HAL_RCC_OscConfig+0xb0>
 8005d3c:	4b78      	ldr	r3, [pc, #480]	@ (8005f20 <HAL_RCC_OscConfig+0x27c>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a77      	ldr	r2, [pc, #476]	@ (8005f20 <HAL_RCC_OscConfig+0x27c>)
 8005d42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d46:	6013      	str	r3, [r2, #0]
 8005d48:	4b75      	ldr	r3, [pc, #468]	@ (8005f20 <HAL_RCC_OscConfig+0x27c>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a74      	ldr	r2, [pc, #464]	@ (8005f20 <HAL_RCC_OscConfig+0x27c>)
 8005d4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d013      	beq.n	8005d84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d5c:	f7fd fb38 	bl	80033d0 <HAL_GetTick>
 8005d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d62:	e008      	b.n	8005d76 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d64:	f7fd fb34 	bl	80033d0 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	2b64      	cmp	r3, #100	@ 0x64
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e29e      	b.n	80062b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d76:	4b6a      	ldr	r3, [pc, #424]	@ (8005f20 <HAL_RCC_OscConfig+0x27c>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d0f0      	beq.n	8005d64 <HAL_RCC_OscConfig+0xc0>
 8005d82:	e014      	b.n	8005dae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d84:	f7fd fb24 	bl	80033d0 <HAL_GetTick>
 8005d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d8a:	e008      	b.n	8005d9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d8c:	f7fd fb20 	bl	80033d0 <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	2b64      	cmp	r3, #100	@ 0x64
 8005d98:	d901      	bls.n	8005d9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e28a      	b.n	80062b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d9e:	4b60      	ldr	r3, [pc, #384]	@ (8005f20 <HAL_RCC_OscConfig+0x27c>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1f0      	bne.n	8005d8c <HAL_RCC_OscConfig+0xe8>
 8005daa:	e000      	b.n	8005dae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0302 	and.w	r3, r3, #2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d075      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dba:	4b59      	ldr	r3, [pc, #356]	@ (8005f20 <HAL_RCC_OscConfig+0x27c>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f003 030c 	and.w	r3, r3, #12
 8005dc2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005dc4:	4b56      	ldr	r3, [pc, #344]	@ (8005f20 <HAL_RCC_OscConfig+0x27c>)
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	f003 0303 	and.w	r3, r3, #3
 8005dcc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	2b0c      	cmp	r3, #12
 8005dd2:	d102      	bne.n	8005dda <HAL_RCC_OscConfig+0x136>
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d002      	beq.n	8005de0 <HAL_RCC_OscConfig+0x13c>
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	2b04      	cmp	r3, #4
 8005dde:	d11f      	bne.n	8005e20 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005de0:	4b4f      	ldr	r3, [pc, #316]	@ (8005f20 <HAL_RCC_OscConfig+0x27c>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d005      	beq.n	8005df8 <HAL_RCC_OscConfig+0x154>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e25d      	b.n	80062b4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005df8:	4b49      	ldr	r3, [pc, #292]	@ (8005f20 <HAL_RCC_OscConfig+0x27c>)
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	061b      	lsls	r3, r3, #24
 8005e06:	4946      	ldr	r1, [pc, #280]	@ (8005f20 <HAL_RCC_OscConfig+0x27c>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005e0c:	4b45      	ldr	r3, [pc, #276]	@ (8005f24 <HAL_RCC_OscConfig+0x280>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7fc fc47 	bl	80026a4 <HAL_InitTick>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d043      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e249      	b.n	80062b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d023      	beq.n	8005e70 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e28:	4b3d      	ldr	r3, [pc, #244]	@ (8005f20 <HAL_RCC_OscConfig+0x27c>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a3c      	ldr	r2, [pc, #240]	@ (8005f20 <HAL_RCC_OscConfig+0x27c>)
 8005e2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e34:	f7fd facc 	bl	80033d0 <HAL_GetTick>
 8005e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e3a:	e008      	b.n	8005e4e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e3c:	f7fd fac8 	bl	80033d0 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d901      	bls.n	8005e4e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e232      	b.n	80062b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e4e:	4b34      	ldr	r3, [pc, #208]	@ (8005f20 <HAL_RCC_OscConfig+0x27c>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d0f0      	beq.n	8005e3c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e5a:	4b31      	ldr	r3, [pc, #196]	@ (8005f20 <HAL_RCC_OscConfig+0x27c>)
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	061b      	lsls	r3, r3, #24
 8005e68:	492d      	ldr	r1, [pc, #180]	@ (8005f20 <HAL_RCC_OscConfig+0x27c>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	604b      	str	r3, [r1, #4]
 8005e6e:	e01a      	b.n	8005ea6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e70:	4b2b      	ldr	r3, [pc, #172]	@ (8005f20 <HAL_RCC_OscConfig+0x27c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a2a      	ldr	r2, [pc, #168]	@ (8005f20 <HAL_RCC_OscConfig+0x27c>)
 8005e76:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e7c:	f7fd faa8 	bl	80033d0 <HAL_GetTick>
 8005e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e82:	e008      	b.n	8005e96 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e84:	f7fd faa4 	bl	80033d0 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d901      	bls.n	8005e96 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e20e      	b.n	80062b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e96:	4b22      	ldr	r3, [pc, #136]	@ (8005f20 <HAL_RCC_OscConfig+0x27c>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1f0      	bne.n	8005e84 <HAL_RCC_OscConfig+0x1e0>
 8005ea2:	e000      	b.n	8005ea6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ea4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0308 	and.w	r3, r3, #8
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d041      	beq.n	8005f36 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d01c      	beq.n	8005ef4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005eba:	4b19      	ldr	r3, [pc, #100]	@ (8005f20 <HAL_RCC_OscConfig+0x27c>)
 8005ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ec0:	4a17      	ldr	r2, [pc, #92]	@ (8005f20 <HAL_RCC_OscConfig+0x27c>)
 8005ec2:	f043 0301 	orr.w	r3, r3, #1
 8005ec6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eca:	f7fd fa81 	bl	80033d0 <HAL_GetTick>
 8005ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ed0:	e008      	b.n	8005ee4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ed2:	f7fd fa7d 	bl	80033d0 <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d901      	bls.n	8005ee4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e1e7      	b.n	80062b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8005f20 <HAL_RCC_OscConfig+0x27c>)
 8005ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d0ef      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x22e>
 8005ef2:	e020      	b.n	8005f36 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8005f20 <HAL_RCC_OscConfig+0x27c>)
 8005ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005efa:	4a09      	ldr	r2, [pc, #36]	@ (8005f20 <HAL_RCC_OscConfig+0x27c>)
 8005efc:	f023 0301 	bic.w	r3, r3, #1
 8005f00:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f04:	f7fd fa64 	bl	80033d0 <HAL_GetTick>
 8005f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f0a:	e00d      	b.n	8005f28 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f0c:	f7fd fa60 	bl	80033d0 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d906      	bls.n	8005f28 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e1ca      	b.n	80062b4 <HAL_RCC_OscConfig+0x610>
 8005f1e:	bf00      	nop
 8005f20:	40021000 	.word	0x40021000
 8005f24:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f28:	4b8c      	ldr	r3, [pc, #560]	@ (800615c <HAL_RCC_OscConfig+0x4b8>)
 8005f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1ea      	bne.n	8005f0c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0304 	and.w	r3, r3, #4
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f000 80a6 	beq.w	8006090 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f44:	2300      	movs	r3, #0
 8005f46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005f48:	4b84      	ldr	r3, [pc, #528]	@ (800615c <HAL_RCC_OscConfig+0x4b8>)
 8005f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d101      	bne.n	8005f58 <HAL_RCC_OscConfig+0x2b4>
 8005f54:	2301      	movs	r3, #1
 8005f56:	e000      	b.n	8005f5a <HAL_RCC_OscConfig+0x2b6>
 8005f58:	2300      	movs	r3, #0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00d      	beq.n	8005f7a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f5e:	4b7f      	ldr	r3, [pc, #508]	@ (800615c <HAL_RCC_OscConfig+0x4b8>)
 8005f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f62:	4a7e      	ldr	r2, [pc, #504]	@ (800615c <HAL_RCC_OscConfig+0x4b8>)
 8005f64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f68:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f6a:	4b7c      	ldr	r3, [pc, #496]	@ (800615c <HAL_RCC_OscConfig+0x4b8>)
 8005f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f72:	60fb      	str	r3, [r7, #12]
 8005f74:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005f76:	2301      	movs	r3, #1
 8005f78:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f7a:	4b79      	ldr	r3, [pc, #484]	@ (8006160 <HAL_RCC_OscConfig+0x4bc>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d118      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f86:	4b76      	ldr	r3, [pc, #472]	@ (8006160 <HAL_RCC_OscConfig+0x4bc>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a75      	ldr	r2, [pc, #468]	@ (8006160 <HAL_RCC_OscConfig+0x4bc>)
 8005f8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f92:	f7fd fa1d 	bl	80033d0 <HAL_GetTick>
 8005f96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f98:	e008      	b.n	8005fac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f9a:	f7fd fa19 	bl	80033d0 <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d901      	bls.n	8005fac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e183      	b.n	80062b4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fac:	4b6c      	ldr	r3, [pc, #432]	@ (8006160 <HAL_RCC_OscConfig+0x4bc>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d0f0      	beq.n	8005f9a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d108      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x32e>
 8005fc0:	4b66      	ldr	r3, [pc, #408]	@ (800615c <HAL_RCC_OscConfig+0x4b8>)
 8005fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fc6:	4a65      	ldr	r2, [pc, #404]	@ (800615c <HAL_RCC_OscConfig+0x4b8>)
 8005fc8:	f043 0301 	orr.w	r3, r3, #1
 8005fcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005fd0:	e024      	b.n	800601c <HAL_RCC_OscConfig+0x378>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	2b05      	cmp	r3, #5
 8005fd8:	d110      	bne.n	8005ffc <HAL_RCC_OscConfig+0x358>
 8005fda:	4b60      	ldr	r3, [pc, #384]	@ (800615c <HAL_RCC_OscConfig+0x4b8>)
 8005fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fe0:	4a5e      	ldr	r2, [pc, #376]	@ (800615c <HAL_RCC_OscConfig+0x4b8>)
 8005fe2:	f043 0304 	orr.w	r3, r3, #4
 8005fe6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005fea:	4b5c      	ldr	r3, [pc, #368]	@ (800615c <HAL_RCC_OscConfig+0x4b8>)
 8005fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ff0:	4a5a      	ldr	r2, [pc, #360]	@ (800615c <HAL_RCC_OscConfig+0x4b8>)
 8005ff2:	f043 0301 	orr.w	r3, r3, #1
 8005ff6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ffa:	e00f      	b.n	800601c <HAL_RCC_OscConfig+0x378>
 8005ffc:	4b57      	ldr	r3, [pc, #348]	@ (800615c <HAL_RCC_OscConfig+0x4b8>)
 8005ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006002:	4a56      	ldr	r2, [pc, #344]	@ (800615c <HAL_RCC_OscConfig+0x4b8>)
 8006004:	f023 0301 	bic.w	r3, r3, #1
 8006008:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800600c:	4b53      	ldr	r3, [pc, #332]	@ (800615c <HAL_RCC_OscConfig+0x4b8>)
 800600e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006012:	4a52      	ldr	r2, [pc, #328]	@ (800615c <HAL_RCC_OscConfig+0x4b8>)
 8006014:	f023 0304 	bic.w	r3, r3, #4
 8006018:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d016      	beq.n	8006052 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006024:	f7fd f9d4 	bl	80033d0 <HAL_GetTick>
 8006028:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800602a:	e00a      	b.n	8006042 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800602c:	f7fd f9d0 	bl	80033d0 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800603a:	4293      	cmp	r3, r2
 800603c:	d901      	bls.n	8006042 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e138      	b.n	80062b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006042:	4b46      	ldr	r3, [pc, #280]	@ (800615c <HAL_RCC_OscConfig+0x4b8>)
 8006044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006048:	f003 0302 	and.w	r3, r3, #2
 800604c:	2b00      	cmp	r3, #0
 800604e:	d0ed      	beq.n	800602c <HAL_RCC_OscConfig+0x388>
 8006050:	e015      	b.n	800607e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006052:	f7fd f9bd 	bl	80033d0 <HAL_GetTick>
 8006056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006058:	e00a      	b.n	8006070 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800605a:	f7fd f9b9 	bl	80033d0 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006068:	4293      	cmp	r3, r2
 800606a:	d901      	bls.n	8006070 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e121      	b.n	80062b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006070:	4b3a      	ldr	r3, [pc, #232]	@ (800615c <HAL_RCC_OscConfig+0x4b8>)
 8006072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1ed      	bne.n	800605a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800607e:	7ffb      	ldrb	r3, [r7, #31]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d105      	bne.n	8006090 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006084:	4b35      	ldr	r3, [pc, #212]	@ (800615c <HAL_RCC_OscConfig+0x4b8>)
 8006086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006088:	4a34      	ldr	r2, [pc, #208]	@ (800615c <HAL_RCC_OscConfig+0x4b8>)
 800608a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800608e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0320 	and.w	r3, r3, #32
 8006098:	2b00      	cmp	r3, #0
 800609a:	d03c      	beq.n	8006116 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d01c      	beq.n	80060de <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80060a4:	4b2d      	ldr	r3, [pc, #180]	@ (800615c <HAL_RCC_OscConfig+0x4b8>)
 80060a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060aa:	4a2c      	ldr	r2, [pc, #176]	@ (800615c <HAL_RCC_OscConfig+0x4b8>)
 80060ac:	f043 0301 	orr.w	r3, r3, #1
 80060b0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060b4:	f7fd f98c 	bl	80033d0 <HAL_GetTick>
 80060b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80060ba:	e008      	b.n	80060ce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060bc:	f7fd f988 	bl	80033d0 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e0f2      	b.n	80062b4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80060ce:	4b23      	ldr	r3, [pc, #140]	@ (800615c <HAL_RCC_OscConfig+0x4b8>)
 80060d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060d4:	f003 0302 	and.w	r3, r3, #2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d0ef      	beq.n	80060bc <HAL_RCC_OscConfig+0x418>
 80060dc:	e01b      	b.n	8006116 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80060de:	4b1f      	ldr	r3, [pc, #124]	@ (800615c <HAL_RCC_OscConfig+0x4b8>)
 80060e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060e4:	4a1d      	ldr	r2, [pc, #116]	@ (800615c <HAL_RCC_OscConfig+0x4b8>)
 80060e6:	f023 0301 	bic.w	r3, r3, #1
 80060ea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ee:	f7fd f96f 	bl	80033d0 <HAL_GetTick>
 80060f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80060f4:	e008      	b.n	8006108 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060f6:	f7fd f96b 	bl	80033d0 <HAL_GetTick>
 80060fa:	4602      	mov	r2, r0
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	2b02      	cmp	r3, #2
 8006102:	d901      	bls.n	8006108 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e0d5      	b.n	80062b4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006108:	4b14      	ldr	r3, [pc, #80]	@ (800615c <HAL_RCC_OscConfig+0x4b8>)
 800610a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800610e:	f003 0302 	and.w	r3, r3, #2
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1ef      	bne.n	80060f6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	2b00      	cmp	r3, #0
 800611c:	f000 80c9 	beq.w	80062b2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006120:	4b0e      	ldr	r3, [pc, #56]	@ (800615c <HAL_RCC_OscConfig+0x4b8>)
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f003 030c 	and.w	r3, r3, #12
 8006128:	2b0c      	cmp	r3, #12
 800612a:	f000 8083 	beq.w	8006234 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	2b02      	cmp	r3, #2
 8006134:	d15e      	bne.n	80061f4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006136:	4b09      	ldr	r3, [pc, #36]	@ (800615c <HAL_RCC_OscConfig+0x4b8>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a08      	ldr	r2, [pc, #32]	@ (800615c <HAL_RCC_OscConfig+0x4b8>)
 800613c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006140:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006142:	f7fd f945 	bl	80033d0 <HAL_GetTick>
 8006146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006148:	e00c      	b.n	8006164 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800614a:	f7fd f941 	bl	80033d0 <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	2b02      	cmp	r3, #2
 8006156:	d905      	bls.n	8006164 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e0ab      	b.n	80062b4 <HAL_RCC_OscConfig+0x610>
 800615c:	40021000 	.word	0x40021000
 8006160:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006164:	4b55      	ldr	r3, [pc, #340]	@ (80062bc <HAL_RCC_OscConfig+0x618>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1ec      	bne.n	800614a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006170:	4b52      	ldr	r3, [pc, #328]	@ (80062bc <HAL_RCC_OscConfig+0x618>)
 8006172:	68da      	ldr	r2, [r3, #12]
 8006174:	4b52      	ldr	r3, [pc, #328]	@ (80062c0 <HAL_RCC_OscConfig+0x61c>)
 8006176:	4013      	ands	r3, r2
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	6a11      	ldr	r1, [r2, #32]
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006180:	3a01      	subs	r2, #1
 8006182:	0112      	lsls	r2, r2, #4
 8006184:	4311      	orrs	r1, r2
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800618a:	0212      	lsls	r2, r2, #8
 800618c:	4311      	orrs	r1, r2
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006192:	0852      	lsrs	r2, r2, #1
 8006194:	3a01      	subs	r2, #1
 8006196:	0552      	lsls	r2, r2, #21
 8006198:	4311      	orrs	r1, r2
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800619e:	0852      	lsrs	r2, r2, #1
 80061a0:	3a01      	subs	r2, #1
 80061a2:	0652      	lsls	r2, r2, #25
 80061a4:	4311      	orrs	r1, r2
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80061aa:	06d2      	lsls	r2, r2, #27
 80061ac:	430a      	orrs	r2, r1
 80061ae:	4943      	ldr	r1, [pc, #268]	@ (80062bc <HAL_RCC_OscConfig+0x618>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061b4:	4b41      	ldr	r3, [pc, #260]	@ (80062bc <HAL_RCC_OscConfig+0x618>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a40      	ldr	r2, [pc, #256]	@ (80062bc <HAL_RCC_OscConfig+0x618>)
 80061ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80061be:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80061c0:	4b3e      	ldr	r3, [pc, #248]	@ (80062bc <HAL_RCC_OscConfig+0x618>)
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	4a3d      	ldr	r2, [pc, #244]	@ (80062bc <HAL_RCC_OscConfig+0x618>)
 80061c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80061ca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061cc:	f7fd f900 	bl	80033d0 <HAL_GetTick>
 80061d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061d2:	e008      	b.n	80061e6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061d4:	f7fd f8fc 	bl	80033d0 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d901      	bls.n	80061e6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e066      	b.n	80062b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061e6:	4b35      	ldr	r3, [pc, #212]	@ (80062bc <HAL_RCC_OscConfig+0x618>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d0f0      	beq.n	80061d4 <HAL_RCC_OscConfig+0x530>
 80061f2:	e05e      	b.n	80062b2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061f4:	4b31      	ldr	r3, [pc, #196]	@ (80062bc <HAL_RCC_OscConfig+0x618>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a30      	ldr	r2, [pc, #192]	@ (80062bc <HAL_RCC_OscConfig+0x618>)
 80061fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006200:	f7fd f8e6 	bl	80033d0 <HAL_GetTick>
 8006204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006206:	e008      	b.n	800621a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006208:	f7fd f8e2 	bl	80033d0 <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	2b02      	cmp	r3, #2
 8006214:	d901      	bls.n	800621a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e04c      	b.n	80062b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800621a:	4b28      	ldr	r3, [pc, #160]	@ (80062bc <HAL_RCC_OscConfig+0x618>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1f0      	bne.n	8006208 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006226:	4b25      	ldr	r3, [pc, #148]	@ (80062bc <HAL_RCC_OscConfig+0x618>)
 8006228:	68da      	ldr	r2, [r3, #12]
 800622a:	4924      	ldr	r1, [pc, #144]	@ (80062bc <HAL_RCC_OscConfig+0x618>)
 800622c:	4b25      	ldr	r3, [pc, #148]	@ (80062c4 <HAL_RCC_OscConfig+0x620>)
 800622e:	4013      	ands	r3, r2
 8006230:	60cb      	str	r3, [r1, #12]
 8006232:	e03e      	b.n	80062b2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	69db      	ldr	r3, [r3, #28]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d101      	bne.n	8006240 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e039      	b.n	80062b4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006240:	4b1e      	ldr	r3, [pc, #120]	@ (80062bc <HAL_RCC_OscConfig+0x618>)
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f003 0203 	and.w	r2, r3, #3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a1b      	ldr	r3, [r3, #32]
 8006250:	429a      	cmp	r2, r3
 8006252:	d12c      	bne.n	80062ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625e:	3b01      	subs	r3, #1
 8006260:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006262:	429a      	cmp	r2, r3
 8006264:	d123      	bne.n	80062ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006270:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006272:	429a      	cmp	r2, r3
 8006274:	d11b      	bne.n	80062ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006280:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006282:	429a      	cmp	r2, r3
 8006284:	d113      	bne.n	80062ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006290:	085b      	lsrs	r3, r3, #1
 8006292:	3b01      	subs	r3, #1
 8006294:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006296:	429a      	cmp	r2, r3
 8006298:	d109      	bne.n	80062ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062a4:	085b      	lsrs	r3, r3, #1
 80062a6:	3b01      	subs	r3, #1
 80062a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d001      	beq.n	80062b2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e000      	b.n	80062b4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3720      	adds	r7, #32
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	40021000 	.word	0x40021000
 80062c0:	019f800c 	.word	0x019f800c
 80062c4:	feeefffc 	.word	0xfeeefffc

080062c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80062d2:	2300      	movs	r3, #0
 80062d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e11e      	b.n	800651e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062e0:	4b91      	ldr	r3, [pc, #580]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 030f 	and.w	r3, r3, #15
 80062e8:	683a      	ldr	r2, [r7, #0]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d910      	bls.n	8006310 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ee:	4b8e      	ldr	r3, [pc, #568]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f023 020f 	bic.w	r2, r3, #15
 80062f6:	498c      	ldr	r1, [pc, #560]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062fe:	4b8a      	ldr	r3, [pc, #552]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 030f 	and.w	r3, r3, #15
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	429a      	cmp	r2, r3
 800630a:	d001      	beq.n	8006310 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e106      	b.n	800651e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	2b00      	cmp	r3, #0
 800631a:	d073      	beq.n	8006404 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	2b03      	cmp	r3, #3
 8006322:	d129      	bne.n	8006378 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006324:	4b81      	ldr	r3, [pc, #516]	@ (800652c <HAL_RCC_ClockConfig+0x264>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e0f4      	b.n	800651e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006334:	f000 f9d0 	bl	80066d8 <RCC_GetSysClockFreqFromPLLSource>
 8006338:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	4a7c      	ldr	r2, [pc, #496]	@ (8006530 <HAL_RCC_ClockConfig+0x268>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d93f      	bls.n	80063c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006342:	4b7a      	ldr	r3, [pc, #488]	@ (800652c <HAL_RCC_ClockConfig+0x264>)
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d009      	beq.n	8006362 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006356:	2b00      	cmp	r3, #0
 8006358:	d033      	beq.n	80063c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800635e:	2b00      	cmp	r3, #0
 8006360:	d12f      	bne.n	80063c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006362:	4b72      	ldr	r3, [pc, #456]	@ (800652c <HAL_RCC_ClockConfig+0x264>)
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800636a:	4a70      	ldr	r2, [pc, #448]	@ (800652c <HAL_RCC_ClockConfig+0x264>)
 800636c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006370:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006372:	2380      	movs	r3, #128	@ 0x80
 8006374:	617b      	str	r3, [r7, #20]
 8006376:	e024      	b.n	80063c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	2b02      	cmp	r3, #2
 800637e:	d107      	bne.n	8006390 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006380:	4b6a      	ldr	r3, [pc, #424]	@ (800652c <HAL_RCC_ClockConfig+0x264>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d109      	bne.n	80063a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e0c6      	b.n	800651e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006390:	4b66      	ldr	r3, [pc, #408]	@ (800652c <HAL_RCC_ClockConfig+0x264>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e0be      	b.n	800651e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80063a0:	f000 f8ce 	bl	8006540 <HAL_RCC_GetSysClockFreq>
 80063a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	4a61      	ldr	r2, [pc, #388]	@ (8006530 <HAL_RCC_ClockConfig+0x268>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d909      	bls.n	80063c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80063ae:	4b5f      	ldr	r3, [pc, #380]	@ (800652c <HAL_RCC_ClockConfig+0x264>)
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063b6:	4a5d      	ldr	r2, [pc, #372]	@ (800652c <HAL_RCC_ClockConfig+0x264>)
 80063b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80063be:	2380      	movs	r3, #128	@ 0x80
 80063c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80063c2:	4b5a      	ldr	r3, [pc, #360]	@ (800652c <HAL_RCC_ClockConfig+0x264>)
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f023 0203 	bic.w	r2, r3, #3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	4957      	ldr	r1, [pc, #348]	@ (800652c <HAL_RCC_ClockConfig+0x264>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063d4:	f7fc fffc 	bl	80033d0 <HAL_GetTick>
 80063d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063da:	e00a      	b.n	80063f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063dc:	f7fc fff8 	bl	80033d0 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d901      	bls.n	80063f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e095      	b.n	800651e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063f2:	4b4e      	ldr	r3, [pc, #312]	@ (800652c <HAL_RCC_ClockConfig+0x264>)
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f003 020c 	and.w	r2, r3, #12
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	429a      	cmp	r2, r3
 8006402:	d1eb      	bne.n	80063dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0302 	and.w	r3, r3, #2
 800640c:	2b00      	cmp	r3, #0
 800640e:	d023      	beq.n	8006458 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0304 	and.w	r3, r3, #4
 8006418:	2b00      	cmp	r3, #0
 800641a:	d005      	beq.n	8006428 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800641c:	4b43      	ldr	r3, [pc, #268]	@ (800652c <HAL_RCC_ClockConfig+0x264>)
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	4a42      	ldr	r2, [pc, #264]	@ (800652c <HAL_RCC_ClockConfig+0x264>)
 8006422:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006426:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0308 	and.w	r3, r3, #8
 8006430:	2b00      	cmp	r3, #0
 8006432:	d007      	beq.n	8006444 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006434:	4b3d      	ldr	r3, [pc, #244]	@ (800652c <HAL_RCC_ClockConfig+0x264>)
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800643c:	4a3b      	ldr	r2, [pc, #236]	@ (800652c <HAL_RCC_ClockConfig+0x264>)
 800643e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006442:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006444:	4b39      	ldr	r3, [pc, #228]	@ (800652c <HAL_RCC_ClockConfig+0x264>)
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	4936      	ldr	r1, [pc, #216]	@ (800652c <HAL_RCC_ClockConfig+0x264>)
 8006452:	4313      	orrs	r3, r2
 8006454:	608b      	str	r3, [r1, #8]
 8006456:	e008      	b.n	800646a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	2b80      	cmp	r3, #128	@ 0x80
 800645c:	d105      	bne.n	800646a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800645e:	4b33      	ldr	r3, [pc, #204]	@ (800652c <HAL_RCC_ClockConfig+0x264>)
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	4a32      	ldr	r2, [pc, #200]	@ (800652c <HAL_RCC_ClockConfig+0x264>)
 8006464:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006468:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800646a:	4b2f      	ldr	r3, [pc, #188]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 030f 	and.w	r3, r3, #15
 8006472:	683a      	ldr	r2, [r7, #0]
 8006474:	429a      	cmp	r2, r3
 8006476:	d21d      	bcs.n	80064b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006478:	4b2b      	ldr	r3, [pc, #172]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f023 020f 	bic.w	r2, r3, #15
 8006480:	4929      	ldr	r1, [pc, #164]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	4313      	orrs	r3, r2
 8006486:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006488:	f7fc ffa2 	bl	80033d0 <HAL_GetTick>
 800648c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800648e:	e00a      	b.n	80064a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006490:	f7fc ff9e 	bl	80033d0 <HAL_GetTick>
 8006494:	4602      	mov	r2, r0
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800649e:	4293      	cmp	r3, r2
 80064a0:	d901      	bls.n	80064a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e03b      	b.n	800651e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064a6:	4b20      	ldr	r3, [pc, #128]	@ (8006528 <HAL_RCC_ClockConfig+0x260>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 030f 	and.w	r3, r3, #15
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d1ed      	bne.n	8006490 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0304 	and.w	r3, r3, #4
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d008      	beq.n	80064d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064c0:	4b1a      	ldr	r3, [pc, #104]	@ (800652c <HAL_RCC_ClockConfig+0x264>)
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	4917      	ldr	r1, [pc, #92]	@ (800652c <HAL_RCC_ClockConfig+0x264>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 0308 	and.w	r3, r3, #8
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d009      	beq.n	80064f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064de:	4b13      	ldr	r3, [pc, #76]	@ (800652c <HAL_RCC_ClockConfig+0x264>)
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	00db      	lsls	r3, r3, #3
 80064ec:	490f      	ldr	r1, [pc, #60]	@ (800652c <HAL_RCC_ClockConfig+0x264>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80064f2:	f000 f825 	bl	8006540 <HAL_RCC_GetSysClockFreq>
 80064f6:	4602      	mov	r2, r0
 80064f8:	4b0c      	ldr	r3, [pc, #48]	@ (800652c <HAL_RCC_ClockConfig+0x264>)
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	091b      	lsrs	r3, r3, #4
 80064fe:	f003 030f 	and.w	r3, r3, #15
 8006502:	490c      	ldr	r1, [pc, #48]	@ (8006534 <HAL_RCC_ClockConfig+0x26c>)
 8006504:	5ccb      	ldrb	r3, [r1, r3]
 8006506:	f003 031f 	and.w	r3, r3, #31
 800650a:	fa22 f303 	lsr.w	r3, r2, r3
 800650e:	4a0a      	ldr	r2, [pc, #40]	@ (8006538 <HAL_RCC_ClockConfig+0x270>)
 8006510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006512:	4b0a      	ldr	r3, [pc, #40]	@ (800653c <HAL_RCC_ClockConfig+0x274>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4618      	mov	r0, r3
 8006518:	f7fc f8c4 	bl	80026a4 <HAL_InitTick>
 800651c:	4603      	mov	r3, r0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3718      	adds	r7, #24
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	40022000 	.word	0x40022000
 800652c:	40021000 	.word	0x40021000
 8006530:	04c4b400 	.word	0x04c4b400
 8006534:	0801b034 	.word	0x0801b034
 8006538:	20000004 	.word	0x20000004
 800653c:	20000008 	.word	0x20000008

08006540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006540:	b480      	push	{r7}
 8006542:	b087      	sub	sp, #28
 8006544:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006546:	4b2c      	ldr	r3, [pc, #176]	@ (80065f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f003 030c 	and.w	r3, r3, #12
 800654e:	2b04      	cmp	r3, #4
 8006550:	d102      	bne.n	8006558 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006552:	4b2a      	ldr	r3, [pc, #168]	@ (80065fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006554:	613b      	str	r3, [r7, #16]
 8006556:	e047      	b.n	80065e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006558:	4b27      	ldr	r3, [pc, #156]	@ (80065f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	f003 030c 	and.w	r3, r3, #12
 8006560:	2b08      	cmp	r3, #8
 8006562:	d102      	bne.n	800656a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006564:	4b26      	ldr	r3, [pc, #152]	@ (8006600 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006566:	613b      	str	r3, [r7, #16]
 8006568:	e03e      	b.n	80065e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800656a:	4b23      	ldr	r3, [pc, #140]	@ (80065f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f003 030c 	and.w	r3, r3, #12
 8006572:	2b0c      	cmp	r3, #12
 8006574:	d136      	bne.n	80065e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006576:	4b20      	ldr	r3, [pc, #128]	@ (80065f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	f003 0303 	and.w	r3, r3, #3
 800657e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006580:	4b1d      	ldr	r3, [pc, #116]	@ (80065f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	091b      	lsrs	r3, r3, #4
 8006586:	f003 030f 	and.w	r3, r3, #15
 800658a:	3301      	adds	r3, #1
 800658c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2b03      	cmp	r3, #3
 8006592:	d10c      	bne.n	80065ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006594:	4a1a      	ldr	r2, [pc, #104]	@ (8006600 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	fbb2 f3f3 	udiv	r3, r2, r3
 800659c:	4a16      	ldr	r2, [pc, #88]	@ (80065f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800659e:	68d2      	ldr	r2, [r2, #12]
 80065a0:	0a12      	lsrs	r2, r2, #8
 80065a2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80065a6:	fb02 f303 	mul.w	r3, r2, r3
 80065aa:	617b      	str	r3, [r7, #20]
      break;
 80065ac:	e00c      	b.n	80065c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065ae:	4a13      	ldr	r2, [pc, #76]	@ (80065fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b6:	4a10      	ldr	r2, [pc, #64]	@ (80065f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065b8:	68d2      	ldr	r2, [r2, #12]
 80065ba:	0a12      	lsrs	r2, r2, #8
 80065bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80065c0:	fb02 f303 	mul.w	r3, r2, r3
 80065c4:	617b      	str	r3, [r7, #20]
      break;
 80065c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80065c8:	4b0b      	ldr	r3, [pc, #44]	@ (80065f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	0e5b      	lsrs	r3, r3, #25
 80065ce:	f003 0303 	and.w	r3, r3, #3
 80065d2:	3301      	adds	r3, #1
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e0:	613b      	str	r3, [r7, #16]
 80065e2:	e001      	b.n	80065e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80065e4:	2300      	movs	r3, #0
 80065e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80065e8:	693b      	ldr	r3, [r7, #16]
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	371c      	adds	r7, #28
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	40021000 	.word	0x40021000
 80065fc:	00f42400 	.word	0x00f42400
 8006600:	016e3600 	.word	0x016e3600

08006604 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006604:	b480      	push	{r7}
 8006606:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006608:	4b03      	ldr	r3, [pc, #12]	@ (8006618 <HAL_RCC_GetHCLKFreq+0x14>)
 800660a:	681b      	ldr	r3, [r3, #0]
}
 800660c:	4618      	mov	r0, r3
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	20000004 	.word	0x20000004

0800661c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006620:	f7ff fff0 	bl	8006604 <HAL_RCC_GetHCLKFreq>
 8006624:	4602      	mov	r2, r0
 8006626:	4b06      	ldr	r3, [pc, #24]	@ (8006640 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	0a1b      	lsrs	r3, r3, #8
 800662c:	f003 0307 	and.w	r3, r3, #7
 8006630:	4904      	ldr	r1, [pc, #16]	@ (8006644 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006632:	5ccb      	ldrb	r3, [r1, r3]
 8006634:	f003 031f 	and.w	r3, r3, #31
 8006638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800663c:	4618      	mov	r0, r3
 800663e:	bd80      	pop	{r7, pc}
 8006640:	40021000 	.word	0x40021000
 8006644:	0801b044 	.word	0x0801b044

08006648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800664c:	f7ff ffda 	bl	8006604 <HAL_RCC_GetHCLKFreq>
 8006650:	4602      	mov	r2, r0
 8006652:	4b06      	ldr	r3, [pc, #24]	@ (800666c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	0adb      	lsrs	r3, r3, #11
 8006658:	f003 0307 	and.w	r3, r3, #7
 800665c:	4904      	ldr	r1, [pc, #16]	@ (8006670 <HAL_RCC_GetPCLK2Freq+0x28>)
 800665e:	5ccb      	ldrb	r3, [r1, r3]
 8006660:	f003 031f 	and.w	r3, r3, #31
 8006664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006668:	4618      	mov	r0, r3
 800666a:	bd80      	pop	{r7, pc}
 800666c:	40021000 	.word	0x40021000
 8006670:	0801b044 	.word	0x0801b044

08006674 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	220f      	movs	r2, #15
 8006682:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8006684:	4b12      	ldr	r3, [pc, #72]	@ (80066d0 <HAL_RCC_GetClockConfig+0x5c>)
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f003 0203 	and.w	r2, r3, #3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8006690:	4b0f      	ldr	r3, [pc, #60]	@ (80066d0 <HAL_RCC_GetClockConfig+0x5c>)
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800669c:	4b0c      	ldr	r3, [pc, #48]	@ (80066d0 <HAL_RCC_GetClockConfig+0x5c>)
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80066a8:	4b09      	ldr	r3, [pc, #36]	@ (80066d0 <HAL_RCC_GetClockConfig+0x5c>)
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	08db      	lsrs	r3, r3, #3
 80066ae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80066b6:	4b07      	ldr	r3, [pc, #28]	@ (80066d4 <HAL_RCC_GetClockConfig+0x60>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 020f 	and.w	r2, r3, #15
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	601a      	str	r2, [r3, #0]
}
 80066c2:	bf00      	nop
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	40021000 	.word	0x40021000
 80066d4:	40022000 	.word	0x40022000

080066d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80066d8:	b480      	push	{r7}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80066de:	4b1e      	ldr	r3, [pc, #120]	@ (8006758 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	f003 0303 	and.w	r3, r3, #3
 80066e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006758 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	091b      	lsrs	r3, r3, #4
 80066ee:	f003 030f 	and.w	r3, r3, #15
 80066f2:	3301      	adds	r3, #1
 80066f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	2b03      	cmp	r3, #3
 80066fa:	d10c      	bne.n	8006716 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066fc:	4a17      	ldr	r2, [pc, #92]	@ (800675c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	fbb2 f3f3 	udiv	r3, r2, r3
 8006704:	4a14      	ldr	r2, [pc, #80]	@ (8006758 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006706:	68d2      	ldr	r2, [r2, #12]
 8006708:	0a12      	lsrs	r2, r2, #8
 800670a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800670e:	fb02 f303 	mul.w	r3, r2, r3
 8006712:	617b      	str	r3, [r7, #20]
    break;
 8006714:	e00c      	b.n	8006730 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006716:	4a12      	ldr	r2, [pc, #72]	@ (8006760 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	fbb2 f3f3 	udiv	r3, r2, r3
 800671e:	4a0e      	ldr	r2, [pc, #56]	@ (8006758 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006720:	68d2      	ldr	r2, [r2, #12]
 8006722:	0a12      	lsrs	r2, r2, #8
 8006724:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006728:	fb02 f303 	mul.w	r3, r2, r3
 800672c:	617b      	str	r3, [r7, #20]
    break;
 800672e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006730:	4b09      	ldr	r3, [pc, #36]	@ (8006758 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	0e5b      	lsrs	r3, r3, #25
 8006736:	f003 0303 	and.w	r3, r3, #3
 800673a:	3301      	adds	r3, #1
 800673c:	005b      	lsls	r3, r3, #1
 800673e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	fbb2 f3f3 	udiv	r3, r2, r3
 8006748:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800674a:	687b      	ldr	r3, [r7, #4]
}
 800674c:	4618      	mov	r0, r3
 800674e:	371c      	adds	r7, #28
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	40021000 	.word	0x40021000
 800675c:	016e3600 	.word	0x016e3600
 8006760:	00f42400 	.word	0x00f42400

08006764 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b086      	sub	sp, #24
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800676c:	2300      	movs	r3, #0
 800676e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006770:	2300      	movs	r3, #0
 8006772:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 8098 	beq.w	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006782:	2300      	movs	r3, #0
 8006784:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006786:	4b43      	ldr	r3, [pc, #268]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800678a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10d      	bne.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006792:	4b40      	ldr	r3, [pc, #256]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006796:	4a3f      	ldr	r2, [pc, #252]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800679c:	6593      	str	r3, [r2, #88]	@ 0x58
 800679e:	4b3d      	ldr	r3, [pc, #244]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067a6:	60bb      	str	r3, [r7, #8]
 80067a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067aa:	2301      	movs	r3, #1
 80067ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067ae:	4b3a      	ldr	r3, [pc, #232]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a39      	ldr	r2, [pc, #228]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80067b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067ba:	f7fc fe09 	bl	80033d0 <HAL_GetTick>
 80067be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067c0:	e009      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067c2:	f7fc fe05 	bl	80033d0 <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d902      	bls.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	74fb      	strb	r3, [r7, #19]
        break;
 80067d4:	e005      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067d6:	4b30      	ldr	r3, [pc, #192]	@ (8006898 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d0ef      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80067e2:	7cfb      	ldrb	r3, [r7, #19]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d159      	bne.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80067e8:	4b2a      	ldr	r3, [pc, #168]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d01e      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	429a      	cmp	r2, r3
 8006802:	d019      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006804:	4b23      	ldr	r3, [pc, #140]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800680a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800680e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006810:	4b20      	ldr	r3, [pc, #128]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006816:	4a1f      	ldr	r2, [pc, #124]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006818:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800681c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006820:	4b1c      	ldr	r3, [pc, #112]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006826:	4a1b      	ldr	r2, [pc, #108]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006828:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800682c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006830:	4a18      	ldr	r2, [pc, #96]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f003 0301 	and.w	r3, r3, #1
 800683e:	2b00      	cmp	r3, #0
 8006840:	d016      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006842:	f7fc fdc5 	bl	80033d0 <HAL_GetTick>
 8006846:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006848:	e00b      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800684a:	f7fc fdc1 	bl	80033d0 <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006858:	4293      	cmp	r3, r2
 800685a:	d902      	bls.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	74fb      	strb	r3, [r7, #19]
            break;
 8006860:	e006      	b.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006862:	4b0c      	ldr	r3, [pc, #48]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006868:	f003 0302 	and.w	r3, r3, #2
 800686c:	2b00      	cmp	r3, #0
 800686e:	d0ec      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006870:	7cfb      	ldrb	r3, [r7, #19]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10b      	bne.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006876:	4b07      	ldr	r3, [pc, #28]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800687c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006884:	4903      	ldr	r1, [pc, #12]	@ (8006894 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006886:	4313      	orrs	r3, r2
 8006888:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800688c:	e008      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800688e:	7cfb      	ldrb	r3, [r7, #19]
 8006890:	74bb      	strb	r3, [r7, #18]
 8006892:	e005      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006894:	40021000 	.word	0x40021000
 8006898:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800689c:	7cfb      	ldrb	r3, [r7, #19]
 800689e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068a0:	7c7b      	ldrb	r3, [r7, #17]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d105      	bne.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068a6:	4ba7      	ldr	r3, [pc, #668]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068aa:	4aa6      	ldr	r2, [pc, #664]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068b0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0301 	and.w	r3, r3, #1
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00a      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068be:	4ba1      	ldr	r3, [pc, #644]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068c4:	f023 0203 	bic.w	r2, r3, #3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	499d      	ldr	r1, [pc, #628]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0302 	and.w	r3, r3, #2
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00a      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80068e0:	4b98      	ldr	r3, [pc, #608]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068e6:	f023 020c 	bic.w	r2, r3, #12
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	4995      	ldr	r1, [pc, #596]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0304 	and.w	r3, r3, #4
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00a      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006902:	4b90      	ldr	r3, [pc, #576]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006908:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	498c      	ldr	r1, [pc, #560]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006912:	4313      	orrs	r3, r2
 8006914:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0308 	and.w	r3, r3, #8
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00a      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006924:	4b87      	ldr	r3, [pc, #540]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800692a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	4984      	ldr	r1, [pc, #528]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006934:	4313      	orrs	r3, r2
 8006936:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0310 	and.w	r3, r3, #16
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00a      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006946:	4b7f      	ldr	r3, [pc, #508]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800694c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	695b      	ldr	r3, [r3, #20]
 8006954:	497b      	ldr	r1, [pc, #492]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006956:	4313      	orrs	r3, r2
 8006958:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0320 	and.w	r3, r3, #32
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00a      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006968:	4b76      	ldr	r3, [pc, #472]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800696a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800696e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	4973      	ldr	r1, [pc, #460]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006978:	4313      	orrs	r3, r2
 800697a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00a      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800698a:	4b6e      	ldr	r3, [pc, #440]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800698c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006990:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	69db      	ldr	r3, [r3, #28]
 8006998:	496a      	ldr	r1, [pc, #424]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800699a:	4313      	orrs	r3, r2
 800699c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00a      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80069ac:	4b65      	ldr	r3, [pc, #404]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069b2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	4962      	ldr	r1, [pc, #392]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00a      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80069ce:	4b5d      	ldr	r3, [pc, #372]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069dc:	4959      	ldr	r1, [pc, #356]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00a      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80069f0:	4b54      	ldr	r3, [pc, #336]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80069f6:	f023 0203 	bic.w	r2, r3, #3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069fe:	4951      	ldr	r1, [pc, #324]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a00:	4313      	orrs	r3, r2
 8006a02:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00a      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a12:	4b4c      	ldr	r3, [pc, #304]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a18:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a20:	4948      	ldr	r1, [pc, #288]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a22:	4313      	orrs	r3, r2
 8006a24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d015      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a34:	4b43      	ldr	r3, [pc, #268]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a42:	4940      	ldr	r1, [pc, #256]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a52:	d105      	bne.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a54:	4b3b      	ldr	r3, [pc, #236]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	4a3a      	ldr	r2, [pc, #232]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a5e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d015      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006a6c:	4b35      	ldr	r3, [pc, #212]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a72:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a7a:	4932      	ldr	r1, [pc, #200]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a8a:	d105      	bne.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	4a2c      	ldr	r2, [pc, #176]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a96:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d015      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006aa4:	4b27      	ldr	r3, [pc, #156]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aaa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab2:	4924      	ldr	r1, [pc, #144]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006abe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ac2:	d105      	bne.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ac4:	4b1f      	ldr	r3, [pc, #124]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	4a1e      	ldr	r2, [pc, #120]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ace:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d015      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006adc:	4b19      	ldr	r3, [pc, #100]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ae2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aea:	4916      	ldr	r1, [pc, #88]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006af6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006afa:	d105      	bne.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006afc:	4b11      	ldr	r3, [pc, #68]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	4a10      	ldr	r2, [pc, #64]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b06:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d019      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b14:	4b0b      	ldr	r3, [pc, #44]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b22:	4908      	ldr	r1, [pc, #32]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b24:	4313      	orrs	r3, r2
 8006b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b32:	d109      	bne.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b34:	4b03      	ldr	r3, [pc, #12]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	4a02      	ldr	r2, [pc, #8]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b3e:	60d3      	str	r3, [r2, #12]
 8006b40:	e002      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006b42:	bf00      	nop
 8006b44:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d015      	beq.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006b54:	4b29      	ldr	r3, [pc, #164]	@ (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b5a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b62:	4926      	ldr	r1, [pc, #152]	@ (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b64:	4313      	orrs	r3, r2
 8006b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b72:	d105      	bne.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006b74:	4b21      	ldr	r3, [pc, #132]	@ (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	4a20      	ldr	r2, [pc, #128]	@ (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b7e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d015      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b92:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b9a:	4918      	ldr	r1, [pc, #96]	@ (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006baa:	d105      	bne.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006bac:	4b13      	ldr	r3, [pc, #76]	@ (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	4a12      	ldr	r2, [pc, #72]	@ (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006bb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bb6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d015      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006bc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006bca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bd2:	490a      	ldr	r1, [pc, #40]	@ (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bde:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006be2:	d105      	bne.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006be4:	4b05      	ldr	r3, [pc, #20]	@ (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	4a04      	ldr	r2, [pc, #16]	@ (8006bfc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006bea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006bf0:	7cbb      	ldrb	r3, [r7, #18]
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3718      	adds	r7, #24
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	40021000 	.word	0x40021000

08006c00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d101      	bne.n	8006c12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e049      	b.n	8006ca6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d106      	bne.n	8006c2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f7fb fcb0 	bl	800258c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	3304      	adds	r3, #4
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	4610      	mov	r0, r2
 8006c40:	f000 fe34 	bl	80078ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
	...

08006cb0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d001      	beq.n	8006cc8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e04c      	b.n	8006d62 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2202      	movs	r2, #2
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a26      	ldr	r2, [pc, #152]	@ (8006d70 <HAL_TIM_Base_Start+0xc0>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d022      	beq.n	8006d20 <HAL_TIM_Base_Start+0x70>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ce2:	d01d      	beq.n	8006d20 <HAL_TIM_Base_Start+0x70>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a22      	ldr	r2, [pc, #136]	@ (8006d74 <HAL_TIM_Base_Start+0xc4>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d018      	beq.n	8006d20 <HAL_TIM_Base_Start+0x70>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a21      	ldr	r2, [pc, #132]	@ (8006d78 <HAL_TIM_Base_Start+0xc8>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d013      	beq.n	8006d20 <HAL_TIM_Base_Start+0x70>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a1f      	ldr	r2, [pc, #124]	@ (8006d7c <HAL_TIM_Base_Start+0xcc>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d00e      	beq.n	8006d20 <HAL_TIM_Base_Start+0x70>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a1e      	ldr	r2, [pc, #120]	@ (8006d80 <HAL_TIM_Base_Start+0xd0>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d009      	beq.n	8006d20 <HAL_TIM_Base_Start+0x70>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a1c      	ldr	r2, [pc, #112]	@ (8006d84 <HAL_TIM_Base_Start+0xd4>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d004      	beq.n	8006d20 <HAL_TIM_Base_Start+0x70>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a1b      	ldr	r2, [pc, #108]	@ (8006d88 <HAL_TIM_Base_Start+0xd8>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d115      	bne.n	8006d4c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689a      	ldr	r2, [r3, #8]
 8006d26:	4b19      	ldr	r3, [pc, #100]	@ (8006d8c <HAL_TIM_Base_Start+0xdc>)
 8006d28:	4013      	ands	r3, r2
 8006d2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2b06      	cmp	r3, #6
 8006d30:	d015      	beq.n	8006d5e <HAL_TIM_Base_Start+0xae>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d38:	d011      	beq.n	8006d5e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f042 0201 	orr.w	r2, r2, #1
 8006d48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d4a:	e008      	b.n	8006d5e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f042 0201 	orr.w	r2, r2, #1
 8006d5a:	601a      	str	r2, [r3, #0]
 8006d5c:	e000      	b.n	8006d60 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	40012c00 	.word	0x40012c00
 8006d74:	40000400 	.word	0x40000400
 8006d78:	40000800 	.word	0x40000800
 8006d7c:	40000c00 	.word	0x40000c00
 8006d80:	40013400 	.word	0x40013400
 8006d84:	40014000 	.word	0x40014000
 8006d88:	40015000 	.word	0x40015000
 8006d8c:	00010007 	.word	0x00010007

08006d90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d001      	beq.n	8006da8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e054      	b.n	8006e52 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2202      	movs	r2, #2
 8006dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68da      	ldr	r2, [r3, #12]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f042 0201 	orr.w	r2, r2, #1
 8006dbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a26      	ldr	r2, [pc, #152]	@ (8006e60 <HAL_TIM_Base_Start_IT+0xd0>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d022      	beq.n	8006e10 <HAL_TIM_Base_Start_IT+0x80>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dd2:	d01d      	beq.n	8006e10 <HAL_TIM_Base_Start_IT+0x80>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a22      	ldr	r2, [pc, #136]	@ (8006e64 <HAL_TIM_Base_Start_IT+0xd4>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d018      	beq.n	8006e10 <HAL_TIM_Base_Start_IT+0x80>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a21      	ldr	r2, [pc, #132]	@ (8006e68 <HAL_TIM_Base_Start_IT+0xd8>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d013      	beq.n	8006e10 <HAL_TIM_Base_Start_IT+0x80>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a1f      	ldr	r2, [pc, #124]	@ (8006e6c <HAL_TIM_Base_Start_IT+0xdc>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d00e      	beq.n	8006e10 <HAL_TIM_Base_Start_IT+0x80>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a1e      	ldr	r2, [pc, #120]	@ (8006e70 <HAL_TIM_Base_Start_IT+0xe0>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d009      	beq.n	8006e10 <HAL_TIM_Base_Start_IT+0x80>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a1c      	ldr	r2, [pc, #112]	@ (8006e74 <HAL_TIM_Base_Start_IT+0xe4>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d004      	beq.n	8006e10 <HAL_TIM_Base_Start_IT+0x80>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a1b      	ldr	r2, [pc, #108]	@ (8006e78 <HAL_TIM_Base_Start_IT+0xe8>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d115      	bne.n	8006e3c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	689a      	ldr	r2, [r3, #8]
 8006e16:	4b19      	ldr	r3, [pc, #100]	@ (8006e7c <HAL_TIM_Base_Start_IT+0xec>)
 8006e18:	4013      	ands	r3, r2
 8006e1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2b06      	cmp	r3, #6
 8006e20:	d015      	beq.n	8006e4e <HAL_TIM_Base_Start_IT+0xbe>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e28:	d011      	beq.n	8006e4e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f042 0201 	orr.w	r2, r2, #1
 8006e38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e3a:	e008      	b.n	8006e4e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f042 0201 	orr.w	r2, r2, #1
 8006e4a:	601a      	str	r2, [r3, #0]
 8006e4c:	e000      	b.n	8006e50 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3714      	adds	r7, #20
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	40012c00 	.word	0x40012c00
 8006e64:	40000400 	.word	0x40000400
 8006e68:	40000800 	.word	0x40000800
 8006e6c:	40000c00 	.word	0x40000c00
 8006e70:	40013400 	.word	0x40013400
 8006e74:	40014000 	.word	0x40014000
 8006e78:	40015000 	.word	0x40015000
 8006e7c:	00010007 	.word	0x00010007

08006e80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d101      	bne.n	8006e92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e049      	b.n	8006f26 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d106      	bne.n	8006eac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 f841 	bl	8006f2e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2202      	movs	r2, #2
 8006eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	3304      	adds	r3, #4
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	4610      	mov	r0, r2
 8006ec0:	f000 fcf4 	bl	80078ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3708      	adds	r7, #8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b083      	sub	sp, #12
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006f36:	bf00      	nop
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
	...

08006f44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d109      	bne.n	8006f68 <HAL_TIM_PWM_Start+0x24>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	bf14      	ite	ne
 8006f60:	2301      	movne	r3, #1
 8006f62:	2300      	moveq	r3, #0
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	e03c      	b.n	8006fe2 <HAL_TIM_PWM_Start+0x9e>
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	2b04      	cmp	r3, #4
 8006f6c:	d109      	bne.n	8006f82 <HAL_TIM_PWM_Start+0x3e>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	bf14      	ite	ne
 8006f7a:	2301      	movne	r3, #1
 8006f7c:	2300      	moveq	r3, #0
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	e02f      	b.n	8006fe2 <HAL_TIM_PWM_Start+0x9e>
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b08      	cmp	r3, #8
 8006f86:	d109      	bne.n	8006f9c <HAL_TIM_PWM_Start+0x58>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	bf14      	ite	ne
 8006f94:	2301      	movne	r3, #1
 8006f96:	2300      	moveq	r3, #0
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	e022      	b.n	8006fe2 <HAL_TIM_PWM_Start+0x9e>
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	2b0c      	cmp	r3, #12
 8006fa0:	d109      	bne.n	8006fb6 <HAL_TIM_PWM_Start+0x72>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	bf14      	ite	ne
 8006fae:	2301      	movne	r3, #1
 8006fb0:	2300      	moveq	r3, #0
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	e015      	b.n	8006fe2 <HAL_TIM_PWM_Start+0x9e>
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	2b10      	cmp	r3, #16
 8006fba:	d109      	bne.n	8006fd0 <HAL_TIM_PWM_Start+0x8c>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	bf14      	ite	ne
 8006fc8:	2301      	movne	r3, #1
 8006fca:	2300      	moveq	r3, #0
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	e008      	b.n	8006fe2 <HAL_TIM_PWM_Start+0x9e>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	bf14      	ite	ne
 8006fdc:	2301      	movne	r3, #1
 8006fde:	2300      	moveq	r3, #0
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d001      	beq.n	8006fea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e0a6      	b.n	8007138 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d104      	bne.n	8006ffa <HAL_TIM_PWM_Start+0xb6>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ff8:	e023      	b.n	8007042 <HAL_TIM_PWM_Start+0xfe>
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2b04      	cmp	r3, #4
 8006ffe:	d104      	bne.n	800700a <HAL_TIM_PWM_Start+0xc6>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2202      	movs	r2, #2
 8007004:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007008:	e01b      	b.n	8007042 <HAL_TIM_PWM_Start+0xfe>
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b08      	cmp	r3, #8
 800700e:	d104      	bne.n	800701a <HAL_TIM_PWM_Start+0xd6>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2202      	movs	r2, #2
 8007014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007018:	e013      	b.n	8007042 <HAL_TIM_PWM_Start+0xfe>
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b0c      	cmp	r3, #12
 800701e:	d104      	bne.n	800702a <HAL_TIM_PWM_Start+0xe6>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2202      	movs	r2, #2
 8007024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007028:	e00b      	b.n	8007042 <HAL_TIM_PWM_Start+0xfe>
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	2b10      	cmp	r3, #16
 800702e:	d104      	bne.n	800703a <HAL_TIM_PWM_Start+0xf6>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007038:	e003      	b.n	8007042 <HAL_TIM_PWM_Start+0xfe>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2202      	movs	r2, #2
 800703e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2201      	movs	r2, #1
 8007048:	6839      	ldr	r1, [r7, #0]
 800704a:	4618      	mov	r0, r3
 800704c:	f001 f8a8 	bl	80081a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a3a      	ldr	r2, [pc, #232]	@ (8007140 <HAL_TIM_PWM_Start+0x1fc>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d018      	beq.n	800708c <HAL_TIM_PWM_Start+0x148>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a39      	ldr	r2, [pc, #228]	@ (8007144 <HAL_TIM_PWM_Start+0x200>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d013      	beq.n	800708c <HAL_TIM_PWM_Start+0x148>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a37      	ldr	r2, [pc, #220]	@ (8007148 <HAL_TIM_PWM_Start+0x204>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d00e      	beq.n	800708c <HAL_TIM_PWM_Start+0x148>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a36      	ldr	r2, [pc, #216]	@ (800714c <HAL_TIM_PWM_Start+0x208>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d009      	beq.n	800708c <HAL_TIM_PWM_Start+0x148>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a34      	ldr	r2, [pc, #208]	@ (8007150 <HAL_TIM_PWM_Start+0x20c>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d004      	beq.n	800708c <HAL_TIM_PWM_Start+0x148>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a33      	ldr	r2, [pc, #204]	@ (8007154 <HAL_TIM_PWM_Start+0x210>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d101      	bne.n	8007090 <HAL_TIM_PWM_Start+0x14c>
 800708c:	2301      	movs	r3, #1
 800708e:	e000      	b.n	8007092 <HAL_TIM_PWM_Start+0x14e>
 8007090:	2300      	movs	r3, #0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d007      	beq.n	80070a6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80070a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a25      	ldr	r2, [pc, #148]	@ (8007140 <HAL_TIM_PWM_Start+0x1fc>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d022      	beq.n	80070f6 <HAL_TIM_PWM_Start+0x1b2>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070b8:	d01d      	beq.n	80070f6 <HAL_TIM_PWM_Start+0x1b2>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a26      	ldr	r2, [pc, #152]	@ (8007158 <HAL_TIM_PWM_Start+0x214>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d018      	beq.n	80070f6 <HAL_TIM_PWM_Start+0x1b2>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a24      	ldr	r2, [pc, #144]	@ (800715c <HAL_TIM_PWM_Start+0x218>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d013      	beq.n	80070f6 <HAL_TIM_PWM_Start+0x1b2>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a23      	ldr	r2, [pc, #140]	@ (8007160 <HAL_TIM_PWM_Start+0x21c>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d00e      	beq.n	80070f6 <HAL_TIM_PWM_Start+0x1b2>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a19      	ldr	r2, [pc, #100]	@ (8007144 <HAL_TIM_PWM_Start+0x200>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d009      	beq.n	80070f6 <HAL_TIM_PWM_Start+0x1b2>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a18      	ldr	r2, [pc, #96]	@ (8007148 <HAL_TIM_PWM_Start+0x204>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d004      	beq.n	80070f6 <HAL_TIM_PWM_Start+0x1b2>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a18      	ldr	r2, [pc, #96]	@ (8007154 <HAL_TIM_PWM_Start+0x210>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d115      	bne.n	8007122 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	689a      	ldr	r2, [r3, #8]
 80070fc:	4b19      	ldr	r3, [pc, #100]	@ (8007164 <HAL_TIM_PWM_Start+0x220>)
 80070fe:	4013      	ands	r3, r2
 8007100:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2b06      	cmp	r3, #6
 8007106:	d015      	beq.n	8007134 <HAL_TIM_PWM_Start+0x1f0>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800710e:	d011      	beq.n	8007134 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f042 0201 	orr.w	r2, r2, #1
 800711e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007120:	e008      	b.n	8007134 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f042 0201 	orr.w	r2, r2, #1
 8007130:	601a      	str	r2, [r3, #0]
 8007132:	e000      	b.n	8007136 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007134:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	40012c00 	.word	0x40012c00
 8007144:	40013400 	.word	0x40013400
 8007148:	40014000 	.word	0x40014000
 800714c:	40014400 	.word	0x40014400
 8007150:	40014800 	.word	0x40014800
 8007154:	40015000 	.word	0x40015000
 8007158:	40000400 	.word	0x40000400
 800715c:	40000800 	.word	0x40000800
 8007160:	40000c00 	.word	0x40000c00
 8007164:	00010007 	.word	0x00010007

08007168 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	f003 0302 	and.w	r3, r3, #2
 8007186:	2b00      	cmp	r3, #0
 8007188:	d020      	beq.n	80071cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f003 0302 	and.w	r3, r3, #2
 8007190:	2b00      	cmp	r3, #0
 8007192:	d01b      	beq.n	80071cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f06f 0202 	mvn.w	r2, #2
 800719c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	f003 0303 	and.w	r3, r3, #3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d003      	beq.n	80071ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 fb5c 	bl	8007870 <HAL_TIM_IC_CaptureCallback>
 80071b8:	e005      	b.n	80071c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fb4e 	bl	800785c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fb5f 	bl	8007884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	f003 0304 	and.w	r3, r3, #4
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d020      	beq.n	8007218 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f003 0304 	and.w	r3, r3, #4
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d01b      	beq.n	8007218 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f06f 0204 	mvn.w	r2, #4
 80071e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2202      	movs	r2, #2
 80071ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d003      	beq.n	8007206 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 fb36 	bl	8007870 <HAL_TIM_IC_CaptureCallback>
 8007204:	e005      	b.n	8007212 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fb28 	bl	800785c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 fb39 	bl	8007884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	f003 0308 	and.w	r3, r3, #8
 800721e:	2b00      	cmp	r3, #0
 8007220:	d020      	beq.n	8007264 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f003 0308 	and.w	r3, r3, #8
 8007228:	2b00      	cmp	r3, #0
 800722a:	d01b      	beq.n	8007264 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f06f 0208 	mvn.w	r2, #8
 8007234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2204      	movs	r2, #4
 800723a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	f003 0303 	and.w	r3, r3, #3
 8007246:	2b00      	cmp	r3, #0
 8007248:	d003      	beq.n	8007252 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fb10 	bl	8007870 <HAL_TIM_IC_CaptureCallback>
 8007250:	e005      	b.n	800725e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fb02 	bl	800785c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 fb13 	bl	8007884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	f003 0310 	and.w	r3, r3, #16
 800726a:	2b00      	cmp	r3, #0
 800726c:	d020      	beq.n	80072b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f003 0310 	and.w	r3, r3, #16
 8007274:	2b00      	cmp	r3, #0
 8007276:	d01b      	beq.n	80072b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f06f 0210 	mvn.w	r2, #16
 8007280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2208      	movs	r2, #8
 8007286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	69db      	ldr	r3, [r3, #28]
 800728e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007292:	2b00      	cmp	r3, #0
 8007294:	d003      	beq.n	800729e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 faea 	bl	8007870 <HAL_TIM_IC_CaptureCallback>
 800729c:	e005      	b.n	80072aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 fadc 	bl	800785c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 faed 	bl	8007884 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	f003 0301 	and.w	r3, r3, #1
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00c      	beq.n	80072d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f003 0301 	and.w	r3, r3, #1
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d007      	beq.n	80072d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f06f 0201 	mvn.w	r2, #1
 80072cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7fa feea 	bl	80020a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d104      	bne.n	80072e8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00c      	beq.n	8007302 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d007      	beq.n	8007302 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80072fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f001 f815 	bl	800832c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00c      	beq.n	8007326 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007312:	2b00      	cmp	r3, #0
 8007314:	d007      	beq.n	8007326 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800731e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f001 f80d 	bl	8008340 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00c      	beq.n	800734a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007336:	2b00      	cmp	r3, #0
 8007338:	d007      	beq.n	800734a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 faa7 	bl	8007898 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	f003 0320 	and.w	r3, r3, #32
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00c      	beq.n	800736e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f003 0320 	and.w	r3, r3, #32
 800735a:	2b00      	cmp	r3, #0
 800735c:	d007      	beq.n	800736e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f06f 0220 	mvn.w	r2, #32
 8007366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 ffd5 	bl	8008318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00c      	beq.n	8007392 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800737e:	2b00      	cmp	r3, #0
 8007380:	d007      	beq.n	8007392 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800738a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 ffe1 	bl	8008354 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00c      	beq.n	80073b6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d007      	beq.n	80073b6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80073ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 ffd9 	bl	8008368 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00c      	beq.n	80073da <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d007      	beq.n	80073da <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80073d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 ffd1 	bl	800837c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00c      	beq.n	80073fe <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d007      	beq.n	80073fe <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80073f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 ffc9 	bl	8008390 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073fe:	bf00      	nop
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
	...

08007408 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b086      	sub	sp, #24
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007414:	2300      	movs	r3, #0
 8007416:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800741e:	2b01      	cmp	r3, #1
 8007420:	d101      	bne.n	8007426 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007422:	2302      	movs	r3, #2
 8007424:	e0ff      	b.n	8007626 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2201      	movs	r2, #1
 800742a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2b14      	cmp	r3, #20
 8007432:	f200 80f0 	bhi.w	8007616 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007436:	a201      	add	r2, pc, #4	@ (adr r2, 800743c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743c:	08007491 	.word	0x08007491
 8007440:	08007617 	.word	0x08007617
 8007444:	08007617 	.word	0x08007617
 8007448:	08007617 	.word	0x08007617
 800744c:	080074d1 	.word	0x080074d1
 8007450:	08007617 	.word	0x08007617
 8007454:	08007617 	.word	0x08007617
 8007458:	08007617 	.word	0x08007617
 800745c:	08007513 	.word	0x08007513
 8007460:	08007617 	.word	0x08007617
 8007464:	08007617 	.word	0x08007617
 8007468:	08007617 	.word	0x08007617
 800746c:	08007553 	.word	0x08007553
 8007470:	08007617 	.word	0x08007617
 8007474:	08007617 	.word	0x08007617
 8007478:	08007617 	.word	0x08007617
 800747c:	08007595 	.word	0x08007595
 8007480:	08007617 	.word	0x08007617
 8007484:	08007617 	.word	0x08007617
 8007488:	08007617 	.word	0x08007617
 800748c:	080075d5 	.word	0x080075d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68b9      	ldr	r1, [r7, #8]
 8007496:	4618      	mov	r0, r3
 8007498:	f000 fabc 	bl	8007a14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	699a      	ldr	r2, [r3, #24]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f042 0208 	orr.w	r2, r2, #8
 80074aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	699a      	ldr	r2, [r3, #24]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f022 0204 	bic.w	r2, r2, #4
 80074ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	6999      	ldr	r1, [r3, #24]
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	691a      	ldr	r2, [r3, #16]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	430a      	orrs	r2, r1
 80074cc:	619a      	str	r2, [r3, #24]
      break;
 80074ce:	e0a5      	b.n	800761c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68b9      	ldr	r1, [r7, #8]
 80074d6:	4618      	mov	r0, r3
 80074d8:	f000 fb36 	bl	8007b48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	699a      	ldr	r2, [r3, #24]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80074ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	699a      	ldr	r2, [r3, #24]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6999      	ldr	r1, [r3, #24]
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	021a      	lsls	r2, r3, #8
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	430a      	orrs	r2, r1
 800750e:	619a      	str	r2, [r3, #24]
      break;
 8007510:	e084      	b.n	800761c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68b9      	ldr	r1, [r7, #8]
 8007518:	4618      	mov	r0, r3
 800751a:	f000 fba9 	bl	8007c70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	69da      	ldr	r2, [r3, #28]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f042 0208 	orr.w	r2, r2, #8
 800752c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	69da      	ldr	r2, [r3, #28]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f022 0204 	bic.w	r2, r2, #4
 800753c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	69d9      	ldr	r1, [r3, #28]
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	691a      	ldr	r2, [r3, #16]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	430a      	orrs	r2, r1
 800754e:	61da      	str	r2, [r3, #28]
      break;
 8007550:	e064      	b.n	800761c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68b9      	ldr	r1, [r7, #8]
 8007558:	4618      	mov	r0, r3
 800755a:	f000 fc1b 	bl	8007d94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	69da      	ldr	r2, [r3, #28]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800756c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	69da      	ldr	r2, [r3, #28]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800757c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	69d9      	ldr	r1, [r3, #28]
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	021a      	lsls	r2, r3, #8
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	430a      	orrs	r2, r1
 8007590:	61da      	str	r2, [r3, #28]
      break;
 8007592:	e043      	b.n	800761c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68b9      	ldr	r1, [r7, #8]
 800759a:	4618      	mov	r0, r3
 800759c:	f000 fc8e 	bl	8007ebc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f042 0208 	orr.w	r2, r2, #8
 80075ae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f022 0204 	bic.w	r2, r2, #4
 80075be:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	691a      	ldr	r2, [r3, #16]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	430a      	orrs	r2, r1
 80075d0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80075d2:	e023      	b.n	800761c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68b9      	ldr	r1, [r7, #8]
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 fcd8 	bl	8007f90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075fe:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	021a      	lsls	r2, r3, #8
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	430a      	orrs	r2, r1
 8007612:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007614:	e002      	b.n	800761c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	75fb      	strb	r3, [r7, #23]
      break;
 800761a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007624:	7dfb      	ldrb	r3, [r7, #23]
}
 8007626:	4618      	mov	r0, r3
 8007628:	3718      	adds	r7, #24
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop

08007630 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800763a:	2300      	movs	r3, #0
 800763c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007644:	2b01      	cmp	r3, #1
 8007646:	d101      	bne.n	800764c <HAL_TIM_ConfigClockSource+0x1c>
 8007648:	2302      	movs	r3, #2
 800764a:	e0f6      	b.n	800783a <HAL_TIM_ConfigClockSource+0x20a>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2202      	movs	r2, #2
 8007658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800766a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800766e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007676:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68ba      	ldr	r2, [r7, #8]
 800767e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a6f      	ldr	r2, [pc, #444]	@ (8007844 <HAL_TIM_ConfigClockSource+0x214>)
 8007686:	4293      	cmp	r3, r2
 8007688:	f000 80c1 	beq.w	800780e <HAL_TIM_ConfigClockSource+0x1de>
 800768c:	4a6d      	ldr	r2, [pc, #436]	@ (8007844 <HAL_TIM_ConfigClockSource+0x214>)
 800768e:	4293      	cmp	r3, r2
 8007690:	f200 80c6 	bhi.w	8007820 <HAL_TIM_ConfigClockSource+0x1f0>
 8007694:	4a6c      	ldr	r2, [pc, #432]	@ (8007848 <HAL_TIM_ConfigClockSource+0x218>)
 8007696:	4293      	cmp	r3, r2
 8007698:	f000 80b9 	beq.w	800780e <HAL_TIM_ConfigClockSource+0x1de>
 800769c:	4a6a      	ldr	r2, [pc, #424]	@ (8007848 <HAL_TIM_ConfigClockSource+0x218>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	f200 80be 	bhi.w	8007820 <HAL_TIM_ConfigClockSource+0x1f0>
 80076a4:	4a69      	ldr	r2, [pc, #420]	@ (800784c <HAL_TIM_ConfigClockSource+0x21c>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	f000 80b1 	beq.w	800780e <HAL_TIM_ConfigClockSource+0x1de>
 80076ac:	4a67      	ldr	r2, [pc, #412]	@ (800784c <HAL_TIM_ConfigClockSource+0x21c>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	f200 80b6 	bhi.w	8007820 <HAL_TIM_ConfigClockSource+0x1f0>
 80076b4:	4a66      	ldr	r2, [pc, #408]	@ (8007850 <HAL_TIM_ConfigClockSource+0x220>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	f000 80a9 	beq.w	800780e <HAL_TIM_ConfigClockSource+0x1de>
 80076bc:	4a64      	ldr	r2, [pc, #400]	@ (8007850 <HAL_TIM_ConfigClockSource+0x220>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	f200 80ae 	bhi.w	8007820 <HAL_TIM_ConfigClockSource+0x1f0>
 80076c4:	4a63      	ldr	r2, [pc, #396]	@ (8007854 <HAL_TIM_ConfigClockSource+0x224>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	f000 80a1 	beq.w	800780e <HAL_TIM_ConfigClockSource+0x1de>
 80076cc:	4a61      	ldr	r2, [pc, #388]	@ (8007854 <HAL_TIM_ConfigClockSource+0x224>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	f200 80a6 	bhi.w	8007820 <HAL_TIM_ConfigClockSource+0x1f0>
 80076d4:	4a60      	ldr	r2, [pc, #384]	@ (8007858 <HAL_TIM_ConfigClockSource+0x228>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	f000 8099 	beq.w	800780e <HAL_TIM_ConfigClockSource+0x1de>
 80076dc:	4a5e      	ldr	r2, [pc, #376]	@ (8007858 <HAL_TIM_ConfigClockSource+0x228>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	f200 809e 	bhi.w	8007820 <HAL_TIM_ConfigClockSource+0x1f0>
 80076e4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80076e8:	f000 8091 	beq.w	800780e <HAL_TIM_ConfigClockSource+0x1de>
 80076ec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80076f0:	f200 8096 	bhi.w	8007820 <HAL_TIM_ConfigClockSource+0x1f0>
 80076f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076f8:	f000 8089 	beq.w	800780e <HAL_TIM_ConfigClockSource+0x1de>
 80076fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007700:	f200 808e 	bhi.w	8007820 <HAL_TIM_ConfigClockSource+0x1f0>
 8007704:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007708:	d03e      	beq.n	8007788 <HAL_TIM_ConfigClockSource+0x158>
 800770a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800770e:	f200 8087 	bhi.w	8007820 <HAL_TIM_ConfigClockSource+0x1f0>
 8007712:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007716:	f000 8086 	beq.w	8007826 <HAL_TIM_ConfigClockSource+0x1f6>
 800771a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800771e:	d87f      	bhi.n	8007820 <HAL_TIM_ConfigClockSource+0x1f0>
 8007720:	2b70      	cmp	r3, #112	@ 0x70
 8007722:	d01a      	beq.n	800775a <HAL_TIM_ConfigClockSource+0x12a>
 8007724:	2b70      	cmp	r3, #112	@ 0x70
 8007726:	d87b      	bhi.n	8007820 <HAL_TIM_ConfigClockSource+0x1f0>
 8007728:	2b60      	cmp	r3, #96	@ 0x60
 800772a:	d050      	beq.n	80077ce <HAL_TIM_ConfigClockSource+0x19e>
 800772c:	2b60      	cmp	r3, #96	@ 0x60
 800772e:	d877      	bhi.n	8007820 <HAL_TIM_ConfigClockSource+0x1f0>
 8007730:	2b50      	cmp	r3, #80	@ 0x50
 8007732:	d03c      	beq.n	80077ae <HAL_TIM_ConfigClockSource+0x17e>
 8007734:	2b50      	cmp	r3, #80	@ 0x50
 8007736:	d873      	bhi.n	8007820 <HAL_TIM_ConfigClockSource+0x1f0>
 8007738:	2b40      	cmp	r3, #64	@ 0x40
 800773a:	d058      	beq.n	80077ee <HAL_TIM_ConfigClockSource+0x1be>
 800773c:	2b40      	cmp	r3, #64	@ 0x40
 800773e:	d86f      	bhi.n	8007820 <HAL_TIM_ConfigClockSource+0x1f0>
 8007740:	2b30      	cmp	r3, #48	@ 0x30
 8007742:	d064      	beq.n	800780e <HAL_TIM_ConfigClockSource+0x1de>
 8007744:	2b30      	cmp	r3, #48	@ 0x30
 8007746:	d86b      	bhi.n	8007820 <HAL_TIM_ConfigClockSource+0x1f0>
 8007748:	2b20      	cmp	r3, #32
 800774a:	d060      	beq.n	800780e <HAL_TIM_ConfigClockSource+0x1de>
 800774c:	2b20      	cmp	r3, #32
 800774e:	d867      	bhi.n	8007820 <HAL_TIM_ConfigClockSource+0x1f0>
 8007750:	2b00      	cmp	r3, #0
 8007752:	d05c      	beq.n	800780e <HAL_TIM_ConfigClockSource+0x1de>
 8007754:	2b10      	cmp	r3, #16
 8007756:	d05a      	beq.n	800780e <HAL_TIM_ConfigClockSource+0x1de>
 8007758:	e062      	b.n	8007820 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800776a:	f000 fcf9 	bl	8008160 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800777c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	609a      	str	r2, [r3, #8]
      break;
 8007786:	e04f      	b.n	8007828 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007798:	f000 fce2 	bl	8008160 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	689a      	ldr	r2, [r3, #8]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80077aa:	609a      	str	r2, [r3, #8]
      break;
 80077ac:	e03c      	b.n	8007828 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077ba:	461a      	mov	r2, r3
 80077bc:	f000 fc54 	bl	8008068 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2150      	movs	r1, #80	@ 0x50
 80077c6:	4618      	mov	r0, r3
 80077c8:	f000 fcad 	bl	8008126 <TIM_ITRx_SetConfig>
      break;
 80077cc:	e02c      	b.n	8007828 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80077da:	461a      	mov	r2, r3
 80077dc:	f000 fc73 	bl	80080c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2160      	movs	r1, #96	@ 0x60
 80077e6:	4618      	mov	r0, r3
 80077e8:	f000 fc9d 	bl	8008126 <TIM_ITRx_SetConfig>
      break;
 80077ec:	e01c      	b.n	8007828 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077fa:	461a      	mov	r2, r3
 80077fc:	f000 fc34 	bl	8008068 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2140      	movs	r1, #64	@ 0x40
 8007806:	4618      	mov	r0, r3
 8007808:	f000 fc8d 	bl	8008126 <TIM_ITRx_SetConfig>
      break;
 800780c:	e00c      	b.n	8007828 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4619      	mov	r1, r3
 8007818:	4610      	mov	r0, r2
 800781a:	f000 fc84 	bl	8008126 <TIM_ITRx_SetConfig>
      break;
 800781e:	e003      	b.n	8007828 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	73fb      	strb	r3, [r7, #15]
      break;
 8007824:	e000      	b.n	8007828 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007826:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007838:	7bfb      	ldrb	r3, [r7, #15]
}
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	00100070 	.word	0x00100070
 8007848:	00100060 	.word	0x00100060
 800784c:	00100050 	.word	0x00100050
 8007850:	00100040 	.word	0x00100040
 8007854:	00100030 	.word	0x00100030
 8007858:	00100020 	.word	0x00100020

0800785c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007864:	bf00      	nop
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800788c:	bf00      	nop
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078a0:	bf00      	nop
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a4c      	ldr	r2, [pc, #304]	@ (80079f0 <TIM_Base_SetConfig+0x144>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d017      	beq.n	80078f4 <TIM_Base_SetConfig+0x48>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078ca:	d013      	beq.n	80078f4 <TIM_Base_SetConfig+0x48>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a49      	ldr	r2, [pc, #292]	@ (80079f4 <TIM_Base_SetConfig+0x148>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d00f      	beq.n	80078f4 <TIM_Base_SetConfig+0x48>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a48      	ldr	r2, [pc, #288]	@ (80079f8 <TIM_Base_SetConfig+0x14c>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d00b      	beq.n	80078f4 <TIM_Base_SetConfig+0x48>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a47      	ldr	r2, [pc, #284]	@ (80079fc <TIM_Base_SetConfig+0x150>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d007      	beq.n	80078f4 <TIM_Base_SetConfig+0x48>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4a46      	ldr	r2, [pc, #280]	@ (8007a00 <TIM_Base_SetConfig+0x154>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d003      	beq.n	80078f4 <TIM_Base_SetConfig+0x48>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a45      	ldr	r2, [pc, #276]	@ (8007a04 <TIM_Base_SetConfig+0x158>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d108      	bne.n	8007906 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	4313      	orrs	r3, r2
 8007904:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a39      	ldr	r2, [pc, #228]	@ (80079f0 <TIM_Base_SetConfig+0x144>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d023      	beq.n	8007956 <TIM_Base_SetConfig+0xaa>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007914:	d01f      	beq.n	8007956 <TIM_Base_SetConfig+0xaa>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a36      	ldr	r2, [pc, #216]	@ (80079f4 <TIM_Base_SetConfig+0x148>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d01b      	beq.n	8007956 <TIM_Base_SetConfig+0xaa>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a35      	ldr	r2, [pc, #212]	@ (80079f8 <TIM_Base_SetConfig+0x14c>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d017      	beq.n	8007956 <TIM_Base_SetConfig+0xaa>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a34      	ldr	r2, [pc, #208]	@ (80079fc <TIM_Base_SetConfig+0x150>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d013      	beq.n	8007956 <TIM_Base_SetConfig+0xaa>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a33      	ldr	r2, [pc, #204]	@ (8007a00 <TIM_Base_SetConfig+0x154>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d00f      	beq.n	8007956 <TIM_Base_SetConfig+0xaa>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4a33      	ldr	r2, [pc, #204]	@ (8007a08 <TIM_Base_SetConfig+0x15c>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d00b      	beq.n	8007956 <TIM_Base_SetConfig+0xaa>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a32      	ldr	r2, [pc, #200]	@ (8007a0c <TIM_Base_SetConfig+0x160>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d007      	beq.n	8007956 <TIM_Base_SetConfig+0xaa>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4a31      	ldr	r2, [pc, #196]	@ (8007a10 <TIM_Base_SetConfig+0x164>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d003      	beq.n	8007956 <TIM_Base_SetConfig+0xaa>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a2c      	ldr	r2, [pc, #176]	@ (8007a04 <TIM_Base_SetConfig+0x158>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d108      	bne.n	8007968 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800795c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	4313      	orrs	r3, r2
 8007966:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	4313      	orrs	r3, r2
 8007974:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	689a      	ldr	r2, [r3, #8]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a18      	ldr	r2, [pc, #96]	@ (80079f0 <TIM_Base_SetConfig+0x144>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d013      	beq.n	80079bc <TIM_Base_SetConfig+0x110>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4a1a      	ldr	r2, [pc, #104]	@ (8007a00 <TIM_Base_SetConfig+0x154>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d00f      	beq.n	80079bc <TIM_Base_SetConfig+0x110>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a1a      	ldr	r2, [pc, #104]	@ (8007a08 <TIM_Base_SetConfig+0x15c>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d00b      	beq.n	80079bc <TIM_Base_SetConfig+0x110>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a19      	ldr	r2, [pc, #100]	@ (8007a0c <TIM_Base_SetConfig+0x160>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d007      	beq.n	80079bc <TIM_Base_SetConfig+0x110>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a18      	ldr	r2, [pc, #96]	@ (8007a10 <TIM_Base_SetConfig+0x164>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d003      	beq.n	80079bc <TIM_Base_SetConfig+0x110>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a13      	ldr	r2, [pc, #76]	@ (8007a04 <TIM_Base_SetConfig+0x158>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d103      	bne.n	80079c4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	691a      	ldr	r2, [r3, #16]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d105      	bne.n	80079e2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	f023 0201 	bic.w	r2, r3, #1
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	611a      	str	r2, [r3, #16]
  }
}
 80079e2:	bf00      	nop
 80079e4:	3714      	adds	r7, #20
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	40012c00 	.word	0x40012c00
 80079f4:	40000400 	.word	0x40000400
 80079f8:	40000800 	.word	0x40000800
 80079fc:	40000c00 	.word	0x40000c00
 8007a00:	40013400 	.word	0x40013400
 8007a04:	40015000 	.word	0x40015000
 8007a08:	40014000 	.word	0x40014000
 8007a0c:	40014400 	.word	0x40014400
 8007a10:	40014800 	.word	0x40014800

08007a14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b087      	sub	sp, #28
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6a1b      	ldr	r3, [r3, #32]
 8007a28:	f023 0201 	bic.w	r2, r3, #1
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f023 0303 	bic.w	r3, r3, #3
 8007a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f023 0302 	bic.w	r3, r3, #2
 8007a60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a30      	ldr	r2, [pc, #192]	@ (8007b30 <TIM_OC1_SetConfig+0x11c>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d013      	beq.n	8007a9c <TIM_OC1_SetConfig+0x88>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a2f      	ldr	r2, [pc, #188]	@ (8007b34 <TIM_OC1_SetConfig+0x120>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d00f      	beq.n	8007a9c <TIM_OC1_SetConfig+0x88>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a2e      	ldr	r2, [pc, #184]	@ (8007b38 <TIM_OC1_SetConfig+0x124>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d00b      	beq.n	8007a9c <TIM_OC1_SetConfig+0x88>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a2d      	ldr	r2, [pc, #180]	@ (8007b3c <TIM_OC1_SetConfig+0x128>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d007      	beq.n	8007a9c <TIM_OC1_SetConfig+0x88>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a2c      	ldr	r2, [pc, #176]	@ (8007b40 <TIM_OC1_SetConfig+0x12c>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d003      	beq.n	8007a9c <TIM_OC1_SetConfig+0x88>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a2b      	ldr	r2, [pc, #172]	@ (8007b44 <TIM_OC1_SetConfig+0x130>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d10c      	bne.n	8007ab6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	f023 0308 	bic.w	r3, r3, #8
 8007aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	697a      	ldr	r2, [r7, #20]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	f023 0304 	bic.w	r3, r3, #4
 8007ab4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b30 <TIM_OC1_SetConfig+0x11c>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d013      	beq.n	8007ae6 <TIM_OC1_SetConfig+0xd2>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a1c      	ldr	r2, [pc, #112]	@ (8007b34 <TIM_OC1_SetConfig+0x120>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d00f      	beq.n	8007ae6 <TIM_OC1_SetConfig+0xd2>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8007b38 <TIM_OC1_SetConfig+0x124>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d00b      	beq.n	8007ae6 <TIM_OC1_SetConfig+0xd2>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a1a      	ldr	r2, [pc, #104]	@ (8007b3c <TIM_OC1_SetConfig+0x128>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d007      	beq.n	8007ae6 <TIM_OC1_SetConfig+0xd2>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a19      	ldr	r2, [pc, #100]	@ (8007b40 <TIM_OC1_SetConfig+0x12c>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d003      	beq.n	8007ae6 <TIM_OC1_SetConfig+0xd2>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a18      	ldr	r2, [pc, #96]	@ (8007b44 <TIM_OC1_SetConfig+0x130>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d111      	bne.n	8007b0a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	695b      	ldr	r3, [r3, #20]
 8007afa:	693a      	ldr	r2, [r7, #16]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	699b      	ldr	r3, [r3, #24]
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	693a      	ldr	r2, [r7, #16]
 8007b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	685a      	ldr	r2, [r3, #4]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	697a      	ldr	r2, [r7, #20]
 8007b22:	621a      	str	r2, [r3, #32]
}
 8007b24:	bf00      	nop
 8007b26:	371c      	adds	r7, #28
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr
 8007b30:	40012c00 	.word	0x40012c00
 8007b34:	40013400 	.word	0x40013400
 8007b38:	40014000 	.word	0x40014000
 8007b3c:	40014400 	.word	0x40014400
 8007b40:	40014800 	.word	0x40014800
 8007b44:	40015000 	.word	0x40015000

08007b48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b087      	sub	sp, #28
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a1b      	ldr	r3, [r3, #32]
 8007b5c:	f023 0210 	bic.w	r2, r3, #16
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	021b      	lsls	r3, r3, #8
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	f023 0320 	bic.w	r3, r3, #32
 8007b96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	011b      	lsls	r3, r3, #4
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a2c      	ldr	r2, [pc, #176]	@ (8007c58 <TIM_OC2_SetConfig+0x110>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d007      	beq.n	8007bbc <TIM_OC2_SetConfig+0x74>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a2b      	ldr	r2, [pc, #172]	@ (8007c5c <TIM_OC2_SetConfig+0x114>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d003      	beq.n	8007bbc <TIM_OC2_SetConfig+0x74>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a2a      	ldr	r2, [pc, #168]	@ (8007c60 <TIM_OC2_SetConfig+0x118>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d10d      	bne.n	8007bd8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007bc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	011b      	lsls	r3, r3, #4
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bd6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4a1f      	ldr	r2, [pc, #124]	@ (8007c58 <TIM_OC2_SetConfig+0x110>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d013      	beq.n	8007c08 <TIM_OC2_SetConfig+0xc0>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a1e      	ldr	r2, [pc, #120]	@ (8007c5c <TIM_OC2_SetConfig+0x114>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d00f      	beq.n	8007c08 <TIM_OC2_SetConfig+0xc0>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a1e      	ldr	r2, [pc, #120]	@ (8007c64 <TIM_OC2_SetConfig+0x11c>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d00b      	beq.n	8007c08 <TIM_OC2_SetConfig+0xc0>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a1d      	ldr	r2, [pc, #116]	@ (8007c68 <TIM_OC2_SetConfig+0x120>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d007      	beq.n	8007c08 <TIM_OC2_SetConfig+0xc0>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a1c      	ldr	r2, [pc, #112]	@ (8007c6c <TIM_OC2_SetConfig+0x124>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d003      	beq.n	8007c08 <TIM_OC2_SetConfig+0xc0>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a17      	ldr	r2, [pc, #92]	@ (8007c60 <TIM_OC2_SetConfig+0x118>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d113      	bne.n	8007c30 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	695b      	ldr	r3, [r3, #20]
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	693a      	ldr	r2, [r7, #16]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	693a      	ldr	r2, [r7, #16]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	693a      	ldr	r2, [r7, #16]
 8007c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	685a      	ldr	r2, [r3, #4]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	697a      	ldr	r2, [r7, #20]
 8007c48:	621a      	str	r2, [r3, #32]
}
 8007c4a:	bf00      	nop
 8007c4c:	371c      	adds	r7, #28
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	40012c00 	.word	0x40012c00
 8007c5c:	40013400 	.word	0x40013400
 8007c60:	40015000 	.word	0x40015000
 8007c64:	40014000 	.word	0x40014000
 8007c68:	40014400 	.word	0x40014400
 8007c6c:	40014800 	.word	0x40014800

08007c70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b087      	sub	sp, #28
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a1b      	ldr	r3, [r3, #32]
 8007c84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	69db      	ldr	r3, [r3, #28]
 8007c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f023 0303 	bic.w	r3, r3, #3
 8007caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007cbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	021b      	lsls	r3, r3, #8
 8007cc4:	697a      	ldr	r2, [r7, #20]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a2b      	ldr	r2, [pc, #172]	@ (8007d7c <TIM_OC3_SetConfig+0x10c>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d007      	beq.n	8007ce2 <TIM_OC3_SetConfig+0x72>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4a2a      	ldr	r2, [pc, #168]	@ (8007d80 <TIM_OC3_SetConfig+0x110>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d003      	beq.n	8007ce2 <TIM_OC3_SetConfig+0x72>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a29      	ldr	r2, [pc, #164]	@ (8007d84 <TIM_OC3_SetConfig+0x114>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d10d      	bne.n	8007cfe <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007ce8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	021b      	lsls	r3, r3, #8
 8007cf0:	697a      	ldr	r2, [r7, #20]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a1e      	ldr	r2, [pc, #120]	@ (8007d7c <TIM_OC3_SetConfig+0x10c>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d013      	beq.n	8007d2e <TIM_OC3_SetConfig+0xbe>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a1d      	ldr	r2, [pc, #116]	@ (8007d80 <TIM_OC3_SetConfig+0x110>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d00f      	beq.n	8007d2e <TIM_OC3_SetConfig+0xbe>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4a1d      	ldr	r2, [pc, #116]	@ (8007d88 <TIM_OC3_SetConfig+0x118>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d00b      	beq.n	8007d2e <TIM_OC3_SetConfig+0xbe>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4a1c      	ldr	r2, [pc, #112]	@ (8007d8c <TIM_OC3_SetConfig+0x11c>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d007      	beq.n	8007d2e <TIM_OC3_SetConfig+0xbe>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4a1b      	ldr	r2, [pc, #108]	@ (8007d90 <TIM_OC3_SetConfig+0x120>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d003      	beq.n	8007d2e <TIM_OC3_SetConfig+0xbe>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a16      	ldr	r2, [pc, #88]	@ (8007d84 <TIM_OC3_SetConfig+0x114>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d113      	bne.n	8007d56 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	695b      	ldr	r3, [r3, #20]
 8007d42:	011b      	lsls	r3, r3, #4
 8007d44:	693a      	ldr	r2, [r7, #16]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	699b      	ldr	r3, [r3, #24]
 8007d4e:	011b      	lsls	r3, r3, #4
 8007d50:	693a      	ldr	r2, [r7, #16]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	693a      	ldr	r2, [r7, #16]
 8007d5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	685a      	ldr	r2, [r3, #4]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	697a      	ldr	r2, [r7, #20]
 8007d6e:	621a      	str	r2, [r3, #32]
}
 8007d70:	bf00      	nop
 8007d72:	371c      	adds	r7, #28
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr
 8007d7c:	40012c00 	.word	0x40012c00
 8007d80:	40013400 	.word	0x40013400
 8007d84:	40015000 	.word	0x40015000
 8007d88:	40014000 	.word	0x40014000
 8007d8c:	40014400 	.word	0x40014400
 8007d90:	40014800 	.word	0x40014800

08007d94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b087      	sub	sp, #28
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a1b      	ldr	r3, [r3, #32]
 8007da2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6a1b      	ldr	r3, [r3, #32]
 8007da8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	69db      	ldr	r3, [r3, #28]
 8007dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007dc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007dce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	021b      	lsls	r3, r3, #8
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007de2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	031b      	lsls	r3, r3, #12
 8007dea:	697a      	ldr	r2, [r7, #20]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a2c      	ldr	r2, [pc, #176]	@ (8007ea4 <TIM_OC4_SetConfig+0x110>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d007      	beq.n	8007e08 <TIM_OC4_SetConfig+0x74>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4a2b      	ldr	r2, [pc, #172]	@ (8007ea8 <TIM_OC4_SetConfig+0x114>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d003      	beq.n	8007e08 <TIM_OC4_SetConfig+0x74>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a2a      	ldr	r2, [pc, #168]	@ (8007eac <TIM_OC4_SetConfig+0x118>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d10d      	bne.n	8007e24 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	031b      	lsls	r3, r3, #12
 8007e16:	697a      	ldr	r2, [r7, #20]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4a1f      	ldr	r2, [pc, #124]	@ (8007ea4 <TIM_OC4_SetConfig+0x110>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d013      	beq.n	8007e54 <TIM_OC4_SetConfig+0xc0>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a1e      	ldr	r2, [pc, #120]	@ (8007ea8 <TIM_OC4_SetConfig+0x114>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d00f      	beq.n	8007e54 <TIM_OC4_SetConfig+0xc0>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a1e      	ldr	r2, [pc, #120]	@ (8007eb0 <TIM_OC4_SetConfig+0x11c>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d00b      	beq.n	8007e54 <TIM_OC4_SetConfig+0xc0>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a1d      	ldr	r2, [pc, #116]	@ (8007eb4 <TIM_OC4_SetConfig+0x120>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d007      	beq.n	8007e54 <TIM_OC4_SetConfig+0xc0>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a1c      	ldr	r2, [pc, #112]	@ (8007eb8 <TIM_OC4_SetConfig+0x124>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d003      	beq.n	8007e54 <TIM_OC4_SetConfig+0xc0>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a17      	ldr	r2, [pc, #92]	@ (8007eac <TIM_OC4_SetConfig+0x118>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d113      	bne.n	8007e7c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e5a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007e62:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	695b      	ldr	r3, [r3, #20]
 8007e68:	019b      	lsls	r3, r3, #6
 8007e6a:	693a      	ldr	r2, [r7, #16]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	699b      	ldr	r3, [r3, #24]
 8007e74:	019b      	lsls	r3, r3, #6
 8007e76:	693a      	ldr	r2, [r7, #16]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	693a      	ldr	r2, [r7, #16]
 8007e80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	685a      	ldr	r2, [r3, #4]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	697a      	ldr	r2, [r7, #20]
 8007e94:	621a      	str	r2, [r3, #32]
}
 8007e96:	bf00      	nop
 8007e98:	371c      	adds	r7, #28
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	40012c00 	.word	0x40012c00
 8007ea8:	40013400 	.word	0x40013400
 8007eac:	40015000 	.word	0x40015000
 8007eb0:	40014000 	.word	0x40014000
 8007eb4:	40014400 	.word	0x40014400
 8007eb8:	40014800 	.word	0x40014800

08007ebc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b087      	sub	sp, #28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a1b      	ldr	r3, [r3, #32]
 8007ed0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007eea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007f00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	041b      	lsls	r3, r3, #16
 8007f08:	693a      	ldr	r2, [r7, #16]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a19      	ldr	r2, [pc, #100]	@ (8007f78 <TIM_OC5_SetConfig+0xbc>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d013      	beq.n	8007f3e <TIM_OC5_SetConfig+0x82>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a18      	ldr	r2, [pc, #96]	@ (8007f7c <TIM_OC5_SetConfig+0xc0>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d00f      	beq.n	8007f3e <TIM_OC5_SetConfig+0x82>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a17      	ldr	r2, [pc, #92]	@ (8007f80 <TIM_OC5_SetConfig+0xc4>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d00b      	beq.n	8007f3e <TIM_OC5_SetConfig+0x82>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a16      	ldr	r2, [pc, #88]	@ (8007f84 <TIM_OC5_SetConfig+0xc8>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d007      	beq.n	8007f3e <TIM_OC5_SetConfig+0x82>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a15      	ldr	r2, [pc, #84]	@ (8007f88 <TIM_OC5_SetConfig+0xcc>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d003      	beq.n	8007f3e <TIM_OC5_SetConfig+0x82>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a14      	ldr	r2, [pc, #80]	@ (8007f8c <TIM_OC5_SetConfig+0xd0>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d109      	bne.n	8007f52 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	695b      	ldr	r3, [r3, #20]
 8007f4a:	021b      	lsls	r3, r3, #8
 8007f4c:	697a      	ldr	r2, [r7, #20]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	685a      	ldr	r2, [r3, #4]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	693a      	ldr	r2, [r7, #16]
 8007f6a:	621a      	str	r2, [r3, #32]
}
 8007f6c:	bf00      	nop
 8007f6e:	371c      	adds	r7, #28
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr
 8007f78:	40012c00 	.word	0x40012c00
 8007f7c:	40013400 	.word	0x40013400
 8007f80:	40014000 	.word	0x40014000
 8007f84:	40014400 	.word	0x40014400
 8007f88:	40014800 	.word	0x40014800
 8007f8c:	40015000 	.word	0x40015000

08007f90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b087      	sub	sp, #28
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a1b      	ldr	r3, [r3, #32]
 8007f9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a1b      	ldr	r3, [r3, #32]
 8007fa4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007fbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	021b      	lsls	r3, r3, #8
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007fd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	051b      	lsls	r3, r3, #20
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a1a      	ldr	r2, [pc, #104]	@ (8008050 <TIM_OC6_SetConfig+0xc0>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d013      	beq.n	8008014 <TIM_OC6_SetConfig+0x84>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a19      	ldr	r2, [pc, #100]	@ (8008054 <TIM_OC6_SetConfig+0xc4>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d00f      	beq.n	8008014 <TIM_OC6_SetConfig+0x84>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4a18      	ldr	r2, [pc, #96]	@ (8008058 <TIM_OC6_SetConfig+0xc8>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d00b      	beq.n	8008014 <TIM_OC6_SetConfig+0x84>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	4a17      	ldr	r2, [pc, #92]	@ (800805c <TIM_OC6_SetConfig+0xcc>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d007      	beq.n	8008014 <TIM_OC6_SetConfig+0x84>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a16      	ldr	r2, [pc, #88]	@ (8008060 <TIM_OC6_SetConfig+0xd0>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d003      	beq.n	8008014 <TIM_OC6_SetConfig+0x84>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a15      	ldr	r2, [pc, #84]	@ (8008064 <TIM_OC6_SetConfig+0xd4>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d109      	bne.n	8008028 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800801a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	695b      	ldr	r3, [r3, #20]
 8008020:	029b      	lsls	r3, r3, #10
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	4313      	orrs	r3, r2
 8008026:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	685a      	ldr	r2, [r3, #4]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	693a      	ldr	r2, [r7, #16]
 8008040:	621a      	str	r2, [r3, #32]
}
 8008042:	bf00      	nop
 8008044:	371c      	adds	r7, #28
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	40012c00 	.word	0x40012c00
 8008054:	40013400 	.word	0x40013400
 8008058:	40014000 	.word	0x40014000
 800805c:	40014400 	.word	0x40014400
 8008060:	40014800 	.word	0x40014800
 8008064:	40015000 	.word	0x40015000

08008068 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008068:	b480      	push	{r7}
 800806a:	b087      	sub	sp, #28
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6a1b      	ldr	r3, [r3, #32]
 8008078:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6a1b      	ldr	r3, [r3, #32]
 800807e:	f023 0201 	bic.w	r2, r3, #1
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	699b      	ldr	r3, [r3, #24]
 800808a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	011b      	lsls	r3, r3, #4
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	4313      	orrs	r3, r2
 800809c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	f023 030a 	bic.w	r3, r3, #10
 80080a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	693a      	ldr	r2, [r7, #16]
 80080b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	697a      	ldr	r2, [r7, #20]
 80080b8:	621a      	str	r2, [r3, #32]
}
 80080ba:	bf00      	nop
 80080bc:	371c      	adds	r7, #28
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr

080080c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080c6:	b480      	push	{r7}
 80080c8:	b087      	sub	sp, #28
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	60f8      	str	r0, [r7, #12]
 80080ce:	60b9      	str	r1, [r7, #8]
 80080d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6a1b      	ldr	r3, [r3, #32]
 80080d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6a1b      	ldr	r3, [r3, #32]
 80080dc:	f023 0210 	bic.w	r2, r3, #16
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80080f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	031b      	lsls	r3, r3, #12
 80080f6:	693a      	ldr	r2, [r7, #16]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008102:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	011b      	lsls	r3, r3, #4
 8008108:	697a      	ldr	r2, [r7, #20]
 800810a:	4313      	orrs	r3, r2
 800810c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	693a      	ldr	r2, [r7, #16]
 8008112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	697a      	ldr	r2, [r7, #20]
 8008118:	621a      	str	r2, [r3, #32]
}
 800811a:	bf00      	nop
 800811c:	371c      	adds	r7, #28
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008126:	b480      	push	{r7}
 8008128:	b085      	sub	sp, #20
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
 800812e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800813c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008140:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008142:	683a      	ldr	r2, [r7, #0]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	4313      	orrs	r3, r2
 8008148:	f043 0307 	orr.w	r3, r3, #7
 800814c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	609a      	str	r2, [r3, #8]
}
 8008154:	bf00      	nop
 8008156:	3714      	adds	r7, #20
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008160:	b480      	push	{r7}
 8008162:	b087      	sub	sp, #28
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
 800816c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800817a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	021a      	lsls	r2, r3, #8
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	431a      	orrs	r2, r3
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	4313      	orrs	r3, r2
 8008188:	697a      	ldr	r2, [r7, #20]
 800818a:	4313      	orrs	r3, r2
 800818c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	697a      	ldr	r2, [r7, #20]
 8008192:	609a      	str	r2, [r3, #8]
}
 8008194:	bf00      	nop
 8008196:	371c      	adds	r7, #28
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b087      	sub	sp, #28
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	f003 031f 	and.w	r3, r3, #31
 80081b2:	2201      	movs	r2, #1
 80081b4:	fa02 f303 	lsl.w	r3, r2, r3
 80081b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6a1a      	ldr	r2, [r3, #32]
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	43db      	mvns	r3, r3
 80081c2:	401a      	ands	r2, r3
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6a1a      	ldr	r2, [r3, #32]
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	f003 031f 	and.w	r3, r3, #31
 80081d2:	6879      	ldr	r1, [r7, #4]
 80081d4:	fa01 f303 	lsl.w	r3, r1, r3
 80081d8:	431a      	orrs	r2, r3
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	621a      	str	r2, [r3, #32]
}
 80081de:	bf00      	nop
 80081e0:	371c      	adds	r7, #28
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr
	...

080081ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d101      	bne.n	8008204 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008200:	2302      	movs	r3, #2
 8008202:	e074      	b.n	80082ee <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2202      	movs	r2, #2
 8008210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a34      	ldr	r2, [pc, #208]	@ (80082fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d009      	beq.n	8008242 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a33      	ldr	r2, [pc, #204]	@ (8008300 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d004      	beq.n	8008242 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a31      	ldr	r2, [pc, #196]	@ (8008304 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d108      	bne.n	8008254 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008248:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	68fa      	ldr	r2, [r7, #12]
 8008250:	4313      	orrs	r3, r2
 8008252:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800825a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800825e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	4313      	orrs	r3, r2
 8008268:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a21      	ldr	r2, [pc, #132]	@ (80082fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d022      	beq.n	80082c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008284:	d01d      	beq.n	80082c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a1f      	ldr	r2, [pc, #124]	@ (8008308 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d018      	beq.n	80082c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a1d      	ldr	r2, [pc, #116]	@ (800830c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d013      	beq.n	80082c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a1c      	ldr	r2, [pc, #112]	@ (8008310 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d00e      	beq.n	80082c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a15      	ldr	r2, [pc, #84]	@ (8008300 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d009      	beq.n	80082c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a18      	ldr	r2, [pc, #96]	@ (8008314 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d004      	beq.n	80082c2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a11      	ldr	r2, [pc, #68]	@ (8008304 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d10c      	bne.n	80082dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	68ba      	ldr	r2, [r7, #8]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3714      	adds	r7, #20
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	40012c00 	.word	0x40012c00
 8008300:	40013400 	.word	0x40013400
 8008304:	40015000 	.word	0x40015000
 8008308:	40000400 	.word	0x40000400
 800830c:	40000800 	.word	0x40000800
 8008310:	40000c00 	.word	0x40000c00
 8008314:	40014000 	.word	0x40014000

08008318 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008348:	bf00      	nop
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008370:	bf00      	nop
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008398:	bf00      	nop
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d101      	bne.n	80083b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e042      	b.n	800843c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d106      	bne.n	80083ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f7fa f821 	bl	8002410 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2224      	movs	r2, #36	@ 0x24
 80083d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f022 0201 	bic.w	r2, r2, #1
 80083e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d002      	beq.n	80083f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f001 f806 	bl	8009400 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 fd07 	bl	8008e08 <UART_SetConfig>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d101      	bne.n	8008404 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	e01b      	b.n	800843c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	685a      	ldr	r2, [r3, #4]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008412:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	689a      	ldr	r2, [r3, #8]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008422:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f042 0201 	orr.w	r2, r2, #1
 8008432:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f001 f885 	bl	8009544 <UART_CheckIdleState>
 800843a:	4603      	mov	r3, r0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b08a      	sub	sp, #40	@ 0x28
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	4613      	mov	r3, r2
 8008450:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008458:	2b20      	cmp	r3, #32
 800845a:	d167      	bne.n	800852c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d002      	beq.n	8008468 <HAL_UART_Transmit_DMA+0x24>
 8008462:	88fb      	ldrh	r3, [r7, #6]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d101      	bne.n	800846c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	e060      	b.n	800852e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	68ba      	ldr	r2, [r7, #8]
 8008470:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	88fa      	ldrh	r2, [r7, #6]
 8008476:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	88fa      	ldrh	r2, [r7, #6]
 800847e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2200      	movs	r2, #0
 8008486:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2221      	movs	r2, #33	@ 0x21
 800848e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008496:	2b00      	cmp	r3, #0
 8008498:	d028      	beq.n	80084ec <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800849e:	4a26      	ldr	r2, [pc, #152]	@ (8008538 <HAL_UART_Transmit_DMA+0xf4>)
 80084a0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084a6:	4a25      	ldr	r2, [pc, #148]	@ (800853c <HAL_UART_Transmit_DMA+0xf8>)
 80084a8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084ae:	4a24      	ldr	r2, [pc, #144]	@ (8008540 <HAL_UART_Transmit_DMA+0xfc>)
 80084b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084b6:	2200      	movs	r2, #0
 80084b8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084c2:	4619      	mov	r1, r3
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	3328      	adds	r3, #40	@ 0x28
 80084ca:	461a      	mov	r2, r3
 80084cc:	88fb      	ldrh	r3, [r7, #6]
 80084ce:	f7fb f913 	bl	80036f8 <HAL_DMA_Start_IT>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d009      	beq.n	80084ec <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2210      	movs	r2, #16
 80084dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2220      	movs	r2, #32
 80084e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e020      	b.n	800852e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2240      	movs	r2, #64	@ 0x40
 80084f2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	3308      	adds	r3, #8
 80084fa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	e853 3f00 	ldrex	r3, [r3]
 8008502:	613b      	str	r3, [r7, #16]
   return(result);
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800850a:	627b      	str	r3, [r7, #36]	@ 0x24
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	3308      	adds	r3, #8
 8008512:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008514:	623a      	str	r2, [r7, #32]
 8008516:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008518:	69f9      	ldr	r1, [r7, #28]
 800851a:	6a3a      	ldr	r2, [r7, #32]
 800851c:	e841 2300 	strex	r3, r2, [r1]
 8008520:	61bb      	str	r3, [r7, #24]
   return(result);
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1e5      	bne.n	80084f4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008528:	2300      	movs	r3, #0
 800852a:	e000      	b.n	800852e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800852c:	2302      	movs	r3, #2
  }
}
 800852e:	4618      	mov	r0, r3
 8008530:	3728      	adds	r7, #40	@ 0x28
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	08009a0f 	.word	0x08009a0f
 800853c:	08009aa9 	.word	0x08009aa9
 8008540:	08009c2f 	.word	0x08009c2f

08008544 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b08a      	sub	sp, #40	@ 0x28
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	4613      	mov	r3, r2
 8008550:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008558:	2b20      	cmp	r3, #32
 800855a:	d137      	bne.n	80085cc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d002      	beq.n	8008568 <HAL_UART_Receive_DMA+0x24>
 8008562:	88fb      	ldrh	r3, [r7, #6]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d101      	bne.n	800856c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	e030      	b.n	80085ce <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2200      	movs	r2, #0
 8008570:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a18      	ldr	r2, [pc, #96]	@ (80085d8 <HAL_UART_Receive_DMA+0x94>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d01f      	beq.n	80085bc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008586:	2b00      	cmp	r3, #0
 8008588:	d018      	beq.n	80085bc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	e853 3f00 	ldrex	r3, [r3]
 8008596:	613b      	str	r3, [r7, #16]
   return(result);
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800859e:	627b      	str	r3, [r7, #36]	@ 0x24
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	461a      	mov	r2, r3
 80085a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a8:	623b      	str	r3, [r7, #32]
 80085aa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ac:	69f9      	ldr	r1, [r7, #28]
 80085ae:	6a3a      	ldr	r2, [r7, #32]
 80085b0:	e841 2300 	strex	r3, r2, [r1]
 80085b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d1e6      	bne.n	800858a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80085bc:	88fb      	ldrh	r3, [r7, #6]
 80085be:	461a      	mov	r2, r3
 80085c0:	68b9      	ldr	r1, [r7, #8]
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f001 f8d6 	bl	8009774 <UART_Start_Receive_DMA>
 80085c8:	4603      	mov	r3, r0
 80085ca:	e000      	b.n	80085ce <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80085cc:	2302      	movs	r3, #2
  }
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3728      	adds	r7, #40	@ 0x28
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	40008000 	.word	0x40008000

080085dc <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b090      	sub	sp, #64	@ 0x40
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085f2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085fe:	2b80      	cmp	r3, #128	@ 0x80
 8008600:	d139      	bne.n	8008676 <HAL_UART_DMAStop+0x9a>
 8008602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008604:	2b21      	cmp	r3, #33	@ 0x21
 8008606:	d136      	bne.n	8008676 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	3308      	adds	r3, #8
 800860e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008610:	6a3b      	ldr	r3, [r7, #32]
 8008612:	e853 3f00 	ldrex	r3, [r3]
 8008616:	61fb      	str	r3, [r7, #28]
   return(result);
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800861e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	3308      	adds	r3, #8
 8008626:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008628:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800862a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800862e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008630:	e841 2300 	strex	r3, r2, [r1]
 8008634:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1e5      	bne.n	8008608 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008640:	2b00      	cmp	r3, #0
 8008642:	d015      	beq.n	8008670 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008648:	4618      	mov	r0, r3
 800864a:	f7fb f8d0 	bl	80037ee <HAL_DMA_Abort>
 800864e:	4603      	mov	r3, r0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00d      	beq.n	8008670 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008658:	4618      	mov	r0, r3
 800865a:	f7fb fa45 	bl	8003ae8 <HAL_DMA_GetError>
 800865e:	4603      	mov	r3, r0
 8008660:	2b20      	cmp	r3, #32
 8008662:	d105      	bne.n	8008670 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2210      	movs	r2, #16
 8008668:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800866c:	2303      	movs	r3, #3
 800866e:	e047      	b.n	8008700 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f001 f925 	bl	80098c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008680:	2b40      	cmp	r3, #64	@ 0x40
 8008682:	d13c      	bne.n	80086fe <HAL_UART_DMAStop+0x122>
 8008684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008686:	2b22      	cmp	r3, #34	@ 0x22
 8008688:	d139      	bne.n	80086fe <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	3308      	adds	r3, #8
 8008690:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	e853 3f00 	ldrex	r3, [r3]
 8008698:	60bb      	str	r3, [r7, #8]
   return(result);
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	3308      	adds	r3, #8
 80086a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086aa:	61ba      	str	r2, [r7, #24]
 80086ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ae:	6979      	ldr	r1, [r7, #20]
 80086b0:	69ba      	ldr	r2, [r7, #24]
 80086b2:	e841 2300 	strex	r3, r2, [r1]
 80086b6:	613b      	str	r3, [r7, #16]
   return(result);
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1e5      	bne.n	800868a <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d017      	beq.n	80086f8 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7fb f88d 	bl	80037ee <HAL_DMA_Abort>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00e      	beq.n	80086f8 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7fb fa01 	bl	8003ae8 <HAL_DMA_GetError>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b20      	cmp	r3, #32
 80086ea:	d105      	bne.n	80086f8 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2210      	movs	r2, #16
 80086f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80086f4:	2303      	movs	r3, #3
 80086f6:	e003      	b.n	8008700 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f001 f922 	bl	8009942 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	3740      	adds	r7, #64	@ 0x40
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b0ba      	sub	sp, #232	@ 0xe8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	69db      	ldr	r3, [r3, #28]
 8008716:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800872e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008732:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008736:	4013      	ands	r3, r2
 8008738:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800873c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008740:	2b00      	cmp	r3, #0
 8008742:	d11b      	bne.n	800877c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008748:	f003 0320 	and.w	r3, r3, #32
 800874c:	2b00      	cmp	r3, #0
 800874e:	d015      	beq.n	800877c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008754:	f003 0320 	and.w	r3, r3, #32
 8008758:	2b00      	cmp	r3, #0
 800875a:	d105      	bne.n	8008768 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800875c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008760:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008764:	2b00      	cmp	r3, #0
 8008766:	d009      	beq.n	800877c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800876c:	2b00      	cmp	r3, #0
 800876e:	f000 8300 	beq.w	8008d72 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	4798      	blx	r3
      }
      return;
 800877a:	e2fa      	b.n	8008d72 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800877c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008780:	2b00      	cmp	r3, #0
 8008782:	f000 8123 	beq.w	80089cc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008786:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800878a:	4b8d      	ldr	r3, [pc, #564]	@ (80089c0 <HAL_UART_IRQHandler+0x2b8>)
 800878c:	4013      	ands	r3, r2
 800878e:	2b00      	cmp	r3, #0
 8008790:	d106      	bne.n	80087a0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008792:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008796:	4b8b      	ldr	r3, [pc, #556]	@ (80089c4 <HAL_UART_IRQHandler+0x2bc>)
 8008798:	4013      	ands	r3, r2
 800879a:	2b00      	cmp	r3, #0
 800879c:	f000 8116 	beq.w	80089cc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80087a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087a4:	f003 0301 	and.w	r3, r3, #1
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d011      	beq.n	80087d0 <HAL_UART_IRQHandler+0xc8>
 80087ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d00b      	beq.n	80087d0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2201      	movs	r2, #1
 80087be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087c6:	f043 0201 	orr.w	r2, r3, #1
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087d4:	f003 0302 	and.w	r3, r3, #2
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d011      	beq.n	8008800 <HAL_UART_IRQHandler+0xf8>
 80087dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087e0:	f003 0301 	and.w	r3, r3, #1
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00b      	beq.n	8008800 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2202      	movs	r2, #2
 80087ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087f6:	f043 0204 	orr.w	r2, r3, #4
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008804:	f003 0304 	and.w	r3, r3, #4
 8008808:	2b00      	cmp	r3, #0
 800880a:	d011      	beq.n	8008830 <HAL_UART_IRQHandler+0x128>
 800880c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008810:	f003 0301 	and.w	r3, r3, #1
 8008814:	2b00      	cmp	r3, #0
 8008816:	d00b      	beq.n	8008830 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2204      	movs	r2, #4
 800881e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008826:	f043 0202 	orr.w	r2, r3, #2
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008834:	f003 0308 	and.w	r3, r3, #8
 8008838:	2b00      	cmp	r3, #0
 800883a:	d017      	beq.n	800886c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800883c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008840:	f003 0320 	and.w	r3, r3, #32
 8008844:	2b00      	cmp	r3, #0
 8008846:	d105      	bne.n	8008854 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008848:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800884c:	4b5c      	ldr	r3, [pc, #368]	@ (80089c0 <HAL_UART_IRQHandler+0x2b8>)
 800884e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00b      	beq.n	800886c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2208      	movs	r2, #8
 800885a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008862:	f043 0208 	orr.w	r2, r3, #8
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800886c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008870:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008874:	2b00      	cmp	r3, #0
 8008876:	d012      	beq.n	800889e <HAL_UART_IRQHandler+0x196>
 8008878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800887c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008880:	2b00      	cmp	r3, #0
 8008882:	d00c      	beq.n	800889e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800888c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008894:	f043 0220 	orr.w	r2, r3, #32
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f000 8266 	beq.w	8008d76 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80088aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088ae:	f003 0320 	and.w	r3, r3, #32
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d013      	beq.n	80088de <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80088b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088ba:	f003 0320 	and.w	r3, r3, #32
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d105      	bne.n	80088ce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80088c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d007      	beq.n	80088de <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d003      	beq.n	80088de <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088f2:	2b40      	cmp	r3, #64	@ 0x40
 80088f4:	d005      	beq.n	8008902 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80088f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80088fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d054      	beq.n	80089ac <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f001 f81d 	bl	8009942 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008912:	2b40      	cmp	r3, #64	@ 0x40
 8008914:	d146      	bne.n	80089a4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	3308      	adds	r3, #8
 800891c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008920:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008924:	e853 3f00 	ldrex	r3, [r3]
 8008928:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800892c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008930:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008934:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	3308      	adds	r3, #8
 800893e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008942:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008946:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800894e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008952:	e841 2300 	strex	r3, r2, [r1]
 8008956:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800895a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800895e:	2b00      	cmp	r3, #0
 8008960:	d1d9      	bne.n	8008916 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008968:	2b00      	cmp	r3, #0
 800896a:	d017      	beq.n	800899c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008972:	4a15      	ldr	r2, [pc, #84]	@ (80089c8 <HAL_UART_IRQHandler+0x2c0>)
 8008974:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800897c:	4618      	mov	r0, r3
 800897e:	f7fa ff8f 	bl	80038a0 <HAL_DMA_Abort_IT>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d019      	beq.n	80089bc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800898e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008996:	4610      	mov	r0, r2
 8008998:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800899a:	e00f      	b.n	80089bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 fa1d 	bl	8008ddc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089a2:	e00b      	b.n	80089bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fa19 	bl	8008ddc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089aa:	e007      	b.n	80089bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 fa15 	bl	8008ddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80089ba:	e1dc      	b.n	8008d76 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089bc:	bf00      	nop
    return;
 80089be:	e1da      	b.n	8008d76 <HAL_UART_IRQHandler+0x66e>
 80089c0:	10000001 	.word	0x10000001
 80089c4:	04000120 	.word	0x04000120
 80089c8:	08009caf 	.word	0x08009caf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	f040 8170 	bne.w	8008cb6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80089d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089da:	f003 0310 	and.w	r3, r3, #16
 80089de:	2b00      	cmp	r3, #0
 80089e0:	f000 8169 	beq.w	8008cb6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80089e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089e8:	f003 0310 	and.w	r3, r3, #16
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f000 8162 	beq.w	8008cb6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2210      	movs	r2, #16
 80089f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a04:	2b40      	cmp	r3, #64	@ 0x40
 8008a06:	f040 80d8 	bne.w	8008bba <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f000 80af 	beq.w	8008b80 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008a28:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	f080 80a7 	bcs.w	8008b80 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a38:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f003 0320 	and.w	r3, r3, #32
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	f040 8087 	bne.w	8008b5e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008a5c:	e853 3f00 	ldrex	r3, [r3]
 8008a60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008a64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008a68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	461a      	mov	r2, r3
 8008a76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008a7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008a7e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a82:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008a86:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008a8a:	e841 2300 	strex	r3, r2, [r1]
 8008a8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008a92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1da      	bne.n	8008a50 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	3308      	adds	r3, #8
 8008aa0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008aa4:	e853 3f00 	ldrex	r3, [r3]
 8008aa8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008aaa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008aac:	f023 0301 	bic.w	r3, r3, #1
 8008ab0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	3308      	adds	r3, #8
 8008aba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008abe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008ac2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008ac6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008aca:	e841 2300 	strex	r3, r2, [r1]
 8008ace:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008ad0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d1e1      	bne.n	8008a9a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	3308      	adds	r3, #8
 8008adc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ade:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ae0:	e853 3f00 	ldrex	r3, [r3]
 8008ae4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008ae6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ae8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008aec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	3308      	adds	r3, #8
 8008af6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008afa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008afc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008b00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008b02:	e841 2300 	strex	r3, r2, [r1]
 8008b06:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008b08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d1e3      	bne.n	8008ad6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2220      	movs	r2, #32
 8008b12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b24:	e853 3f00 	ldrex	r3, [r3]
 8008b28:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008b2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b2c:	f023 0310 	bic.w	r3, r3, #16
 8008b30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	461a      	mov	r2, r3
 8008b3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b40:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008b44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b46:	e841 2300 	strex	r3, r2, [r1]
 8008b4a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008b4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1e4      	bne.n	8008b1c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7fa fe48 	bl	80037ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2202      	movs	r2, #2
 8008b62:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	1ad3      	subs	r3, r2, r3
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	4619      	mov	r1, r3
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 f939 	bl	8008df0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008b7e:	e0fc      	b.n	8008d7a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008b86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	f040 80f5 	bne.w	8008d7a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f003 0320 	and.w	r3, r3, #32
 8008b9e:	2b20      	cmp	r3, #32
 8008ba0:	f040 80eb 	bne.w	8008d7a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2202      	movs	r2, #2
 8008ba8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f91c 	bl	8008df0 <HAL_UARTEx_RxEventCallback>
      return;
 8008bb8:	e0df      	b.n	8008d7a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	1ad3      	subs	r3, r2, r3
 8008bca:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	f000 80d1 	beq.w	8008d7e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8008bdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f000 80cc 	beq.w	8008d7e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bee:	e853 3f00 	ldrex	r3, [r3]
 8008bf2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bf6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008bfa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	461a      	mov	r2, r3
 8008c04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c08:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c0a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c10:	e841 2300 	strex	r3, r2, [r1]
 8008c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1e4      	bne.n	8008be6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	3308      	adds	r3, #8
 8008c22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c26:	e853 3f00 	ldrex	r3, [r3]
 8008c2a:	623b      	str	r3, [r7, #32]
   return(result);
 8008c2c:	6a3b      	ldr	r3, [r7, #32]
 8008c2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c32:	f023 0301 	bic.w	r3, r3, #1
 8008c36:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	3308      	adds	r3, #8
 8008c40:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008c44:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c4c:	e841 2300 	strex	r3, r2, [r1]
 8008c50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d1e1      	bne.n	8008c1c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2220      	movs	r2, #32
 8008c5c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	e853 3f00 	ldrex	r3, [r3]
 8008c78:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f023 0310 	bic.w	r3, r3, #16
 8008c80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	461a      	mov	r2, r3
 8008c8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008c8e:	61fb      	str	r3, [r7, #28]
 8008c90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c92:	69b9      	ldr	r1, [r7, #24]
 8008c94:	69fa      	ldr	r2, [r7, #28]
 8008c96:	e841 2300 	strex	r3, r2, [r1]
 8008c9a:	617b      	str	r3, [r7, #20]
   return(result);
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d1e4      	bne.n	8008c6c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2202      	movs	r2, #2
 8008ca6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ca8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008cac:	4619      	mov	r1, r3
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 f89e 	bl	8008df0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008cb4:	e063      	b.n	8008d7e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00e      	beq.n	8008ce0 <HAL_UART_IRQHandler+0x5d8>
 8008cc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d008      	beq.n	8008ce0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008cd6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f001 f825 	bl	8009d28 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008cde:	e051      	b.n	8008d84 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d014      	beq.n	8008d16 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d105      	bne.n	8008d04 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008cf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cfc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d008      	beq.n	8008d16 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d03a      	beq.n	8008d82 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	4798      	blx	r3
    }
    return;
 8008d14:	e035      	b.n	8008d82 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d009      	beq.n	8008d36 <HAL_UART_IRQHandler+0x62e>
 8008d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d003      	beq.n	8008d36 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 ffcf 	bl	8009cd2 <UART_EndTransmit_IT>
    return;
 8008d34:	e026      	b.n	8008d84 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d009      	beq.n	8008d56 <HAL_UART_IRQHandler+0x64e>
 8008d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d46:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d003      	beq.n	8008d56 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 fffe 	bl	8009d50 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d54:	e016      	b.n	8008d84 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d5a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d010      	beq.n	8008d84 <HAL_UART_IRQHandler+0x67c>
 8008d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	da0c      	bge.n	8008d84 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 ffe6 	bl	8009d3c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d70:	e008      	b.n	8008d84 <HAL_UART_IRQHandler+0x67c>
      return;
 8008d72:	bf00      	nop
 8008d74:	e006      	b.n	8008d84 <HAL_UART_IRQHandler+0x67c>
    return;
 8008d76:	bf00      	nop
 8008d78:	e004      	b.n	8008d84 <HAL_UART_IRQHandler+0x67c>
      return;
 8008d7a:	bf00      	nop
 8008d7c:	e002      	b.n	8008d84 <HAL_UART_IRQHandler+0x67c>
      return;
 8008d7e:	bf00      	nop
 8008d80:	e000      	b.n	8008d84 <HAL_UART_IRQHandler+0x67c>
    return;
 8008d82:	bf00      	nop
  }
}
 8008d84:	37e8      	adds	r7, #232	@ 0xe8
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop

08008d8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008da8:	bf00      	nop
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008dbc:	bf00      	nop
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008dd0:	bf00      	nop
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008de4:	bf00      	nop
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	460b      	mov	r3, r1
 8008dfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008dfc:	bf00      	nop
 8008dfe:	370c      	adds	r7, #12
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e0c:	b08c      	sub	sp, #48	@ 0x30
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e12:	2300      	movs	r3, #0
 8008e14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	689a      	ldr	r2, [r3, #8]
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	431a      	orrs	r2, r3
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	695b      	ldr	r3, [r3, #20]
 8008e26:	431a      	orrs	r2, r3
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	69db      	ldr	r3, [r3, #28]
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	4baa      	ldr	r3, [pc, #680]	@ (80090e0 <UART_SetConfig+0x2d8>)
 8008e38:	4013      	ands	r3, r2
 8008e3a:	697a      	ldr	r2, [r7, #20]
 8008e3c:	6812      	ldr	r2, [r2, #0]
 8008e3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e40:	430b      	orrs	r3, r1
 8008e42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	68da      	ldr	r2, [r3, #12]
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	430a      	orrs	r2, r1
 8008e58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	699b      	ldr	r3, [r3, #24]
 8008e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a9f      	ldr	r2, [pc, #636]	@ (80090e4 <UART_SetConfig+0x2dc>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d004      	beq.n	8008e74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	6a1b      	ldr	r3, [r3, #32]
 8008e6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e70:	4313      	orrs	r3, r2
 8008e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008e7e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008e82:	697a      	ldr	r2, [r7, #20]
 8008e84:	6812      	ldr	r2, [r2, #0]
 8008e86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e88:	430b      	orrs	r3, r1
 8008e8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e92:	f023 010f 	bic.w	r1, r3, #15
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	430a      	orrs	r2, r1
 8008ea0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a90      	ldr	r2, [pc, #576]	@ (80090e8 <UART_SetConfig+0x2e0>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d125      	bne.n	8008ef8 <UART_SetConfig+0xf0>
 8008eac:	4b8f      	ldr	r3, [pc, #572]	@ (80090ec <UART_SetConfig+0x2e4>)
 8008eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008eb2:	f003 0303 	and.w	r3, r3, #3
 8008eb6:	2b03      	cmp	r3, #3
 8008eb8:	d81a      	bhi.n	8008ef0 <UART_SetConfig+0xe8>
 8008eba:	a201      	add	r2, pc, #4	@ (adr r2, 8008ec0 <UART_SetConfig+0xb8>)
 8008ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec0:	08008ed1 	.word	0x08008ed1
 8008ec4:	08008ee1 	.word	0x08008ee1
 8008ec8:	08008ed9 	.word	0x08008ed9
 8008ecc:	08008ee9 	.word	0x08008ee9
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ed6:	e116      	b.n	8009106 <UART_SetConfig+0x2fe>
 8008ed8:	2302      	movs	r3, #2
 8008eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ede:	e112      	b.n	8009106 <UART_SetConfig+0x2fe>
 8008ee0:	2304      	movs	r3, #4
 8008ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ee6:	e10e      	b.n	8009106 <UART_SetConfig+0x2fe>
 8008ee8:	2308      	movs	r3, #8
 8008eea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008eee:	e10a      	b.n	8009106 <UART_SetConfig+0x2fe>
 8008ef0:	2310      	movs	r3, #16
 8008ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ef6:	e106      	b.n	8009106 <UART_SetConfig+0x2fe>
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a7c      	ldr	r2, [pc, #496]	@ (80090f0 <UART_SetConfig+0x2e8>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d138      	bne.n	8008f74 <UART_SetConfig+0x16c>
 8008f02:	4b7a      	ldr	r3, [pc, #488]	@ (80090ec <UART_SetConfig+0x2e4>)
 8008f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f08:	f003 030c 	and.w	r3, r3, #12
 8008f0c:	2b0c      	cmp	r3, #12
 8008f0e:	d82d      	bhi.n	8008f6c <UART_SetConfig+0x164>
 8008f10:	a201      	add	r2, pc, #4	@ (adr r2, 8008f18 <UART_SetConfig+0x110>)
 8008f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f16:	bf00      	nop
 8008f18:	08008f4d 	.word	0x08008f4d
 8008f1c:	08008f6d 	.word	0x08008f6d
 8008f20:	08008f6d 	.word	0x08008f6d
 8008f24:	08008f6d 	.word	0x08008f6d
 8008f28:	08008f5d 	.word	0x08008f5d
 8008f2c:	08008f6d 	.word	0x08008f6d
 8008f30:	08008f6d 	.word	0x08008f6d
 8008f34:	08008f6d 	.word	0x08008f6d
 8008f38:	08008f55 	.word	0x08008f55
 8008f3c:	08008f6d 	.word	0x08008f6d
 8008f40:	08008f6d 	.word	0x08008f6d
 8008f44:	08008f6d 	.word	0x08008f6d
 8008f48:	08008f65 	.word	0x08008f65
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f52:	e0d8      	b.n	8009106 <UART_SetConfig+0x2fe>
 8008f54:	2302      	movs	r3, #2
 8008f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f5a:	e0d4      	b.n	8009106 <UART_SetConfig+0x2fe>
 8008f5c:	2304      	movs	r3, #4
 8008f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f62:	e0d0      	b.n	8009106 <UART_SetConfig+0x2fe>
 8008f64:	2308      	movs	r3, #8
 8008f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f6a:	e0cc      	b.n	8009106 <UART_SetConfig+0x2fe>
 8008f6c:	2310      	movs	r3, #16
 8008f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f72:	e0c8      	b.n	8009106 <UART_SetConfig+0x2fe>
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a5e      	ldr	r2, [pc, #376]	@ (80090f4 <UART_SetConfig+0x2ec>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d125      	bne.n	8008fca <UART_SetConfig+0x1c2>
 8008f7e:	4b5b      	ldr	r3, [pc, #364]	@ (80090ec <UART_SetConfig+0x2e4>)
 8008f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f84:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008f88:	2b30      	cmp	r3, #48	@ 0x30
 8008f8a:	d016      	beq.n	8008fba <UART_SetConfig+0x1b2>
 8008f8c:	2b30      	cmp	r3, #48	@ 0x30
 8008f8e:	d818      	bhi.n	8008fc2 <UART_SetConfig+0x1ba>
 8008f90:	2b20      	cmp	r3, #32
 8008f92:	d00a      	beq.n	8008faa <UART_SetConfig+0x1a2>
 8008f94:	2b20      	cmp	r3, #32
 8008f96:	d814      	bhi.n	8008fc2 <UART_SetConfig+0x1ba>
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d002      	beq.n	8008fa2 <UART_SetConfig+0x19a>
 8008f9c:	2b10      	cmp	r3, #16
 8008f9e:	d008      	beq.n	8008fb2 <UART_SetConfig+0x1aa>
 8008fa0:	e00f      	b.n	8008fc2 <UART_SetConfig+0x1ba>
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fa8:	e0ad      	b.n	8009106 <UART_SetConfig+0x2fe>
 8008faa:	2302      	movs	r3, #2
 8008fac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fb0:	e0a9      	b.n	8009106 <UART_SetConfig+0x2fe>
 8008fb2:	2304      	movs	r3, #4
 8008fb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fb8:	e0a5      	b.n	8009106 <UART_SetConfig+0x2fe>
 8008fba:	2308      	movs	r3, #8
 8008fbc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fc0:	e0a1      	b.n	8009106 <UART_SetConfig+0x2fe>
 8008fc2:	2310      	movs	r3, #16
 8008fc4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fc8:	e09d      	b.n	8009106 <UART_SetConfig+0x2fe>
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a4a      	ldr	r2, [pc, #296]	@ (80090f8 <UART_SetConfig+0x2f0>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d125      	bne.n	8009020 <UART_SetConfig+0x218>
 8008fd4:	4b45      	ldr	r3, [pc, #276]	@ (80090ec <UART_SetConfig+0x2e4>)
 8008fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fda:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008fde:	2bc0      	cmp	r3, #192	@ 0xc0
 8008fe0:	d016      	beq.n	8009010 <UART_SetConfig+0x208>
 8008fe2:	2bc0      	cmp	r3, #192	@ 0xc0
 8008fe4:	d818      	bhi.n	8009018 <UART_SetConfig+0x210>
 8008fe6:	2b80      	cmp	r3, #128	@ 0x80
 8008fe8:	d00a      	beq.n	8009000 <UART_SetConfig+0x1f8>
 8008fea:	2b80      	cmp	r3, #128	@ 0x80
 8008fec:	d814      	bhi.n	8009018 <UART_SetConfig+0x210>
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d002      	beq.n	8008ff8 <UART_SetConfig+0x1f0>
 8008ff2:	2b40      	cmp	r3, #64	@ 0x40
 8008ff4:	d008      	beq.n	8009008 <UART_SetConfig+0x200>
 8008ff6:	e00f      	b.n	8009018 <UART_SetConfig+0x210>
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ffe:	e082      	b.n	8009106 <UART_SetConfig+0x2fe>
 8009000:	2302      	movs	r3, #2
 8009002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009006:	e07e      	b.n	8009106 <UART_SetConfig+0x2fe>
 8009008:	2304      	movs	r3, #4
 800900a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800900e:	e07a      	b.n	8009106 <UART_SetConfig+0x2fe>
 8009010:	2308      	movs	r3, #8
 8009012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009016:	e076      	b.n	8009106 <UART_SetConfig+0x2fe>
 8009018:	2310      	movs	r3, #16
 800901a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800901e:	e072      	b.n	8009106 <UART_SetConfig+0x2fe>
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a35      	ldr	r2, [pc, #212]	@ (80090fc <UART_SetConfig+0x2f4>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d12a      	bne.n	8009080 <UART_SetConfig+0x278>
 800902a:	4b30      	ldr	r3, [pc, #192]	@ (80090ec <UART_SetConfig+0x2e4>)
 800902c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009030:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009034:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009038:	d01a      	beq.n	8009070 <UART_SetConfig+0x268>
 800903a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800903e:	d81b      	bhi.n	8009078 <UART_SetConfig+0x270>
 8009040:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009044:	d00c      	beq.n	8009060 <UART_SetConfig+0x258>
 8009046:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800904a:	d815      	bhi.n	8009078 <UART_SetConfig+0x270>
 800904c:	2b00      	cmp	r3, #0
 800904e:	d003      	beq.n	8009058 <UART_SetConfig+0x250>
 8009050:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009054:	d008      	beq.n	8009068 <UART_SetConfig+0x260>
 8009056:	e00f      	b.n	8009078 <UART_SetConfig+0x270>
 8009058:	2300      	movs	r3, #0
 800905a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800905e:	e052      	b.n	8009106 <UART_SetConfig+0x2fe>
 8009060:	2302      	movs	r3, #2
 8009062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009066:	e04e      	b.n	8009106 <UART_SetConfig+0x2fe>
 8009068:	2304      	movs	r3, #4
 800906a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800906e:	e04a      	b.n	8009106 <UART_SetConfig+0x2fe>
 8009070:	2308      	movs	r3, #8
 8009072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009076:	e046      	b.n	8009106 <UART_SetConfig+0x2fe>
 8009078:	2310      	movs	r3, #16
 800907a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800907e:	e042      	b.n	8009106 <UART_SetConfig+0x2fe>
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a17      	ldr	r2, [pc, #92]	@ (80090e4 <UART_SetConfig+0x2dc>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d13a      	bne.n	8009100 <UART_SetConfig+0x2f8>
 800908a:	4b18      	ldr	r3, [pc, #96]	@ (80090ec <UART_SetConfig+0x2e4>)
 800908c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009090:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009094:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009098:	d01a      	beq.n	80090d0 <UART_SetConfig+0x2c8>
 800909a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800909e:	d81b      	bhi.n	80090d8 <UART_SetConfig+0x2d0>
 80090a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090a4:	d00c      	beq.n	80090c0 <UART_SetConfig+0x2b8>
 80090a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80090aa:	d815      	bhi.n	80090d8 <UART_SetConfig+0x2d0>
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d003      	beq.n	80090b8 <UART_SetConfig+0x2b0>
 80090b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090b4:	d008      	beq.n	80090c8 <UART_SetConfig+0x2c0>
 80090b6:	e00f      	b.n	80090d8 <UART_SetConfig+0x2d0>
 80090b8:	2300      	movs	r3, #0
 80090ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090be:	e022      	b.n	8009106 <UART_SetConfig+0x2fe>
 80090c0:	2302      	movs	r3, #2
 80090c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090c6:	e01e      	b.n	8009106 <UART_SetConfig+0x2fe>
 80090c8:	2304      	movs	r3, #4
 80090ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090ce:	e01a      	b.n	8009106 <UART_SetConfig+0x2fe>
 80090d0:	2308      	movs	r3, #8
 80090d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090d6:	e016      	b.n	8009106 <UART_SetConfig+0x2fe>
 80090d8:	2310      	movs	r3, #16
 80090da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090de:	e012      	b.n	8009106 <UART_SetConfig+0x2fe>
 80090e0:	cfff69f3 	.word	0xcfff69f3
 80090e4:	40008000 	.word	0x40008000
 80090e8:	40013800 	.word	0x40013800
 80090ec:	40021000 	.word	0x40021000
 80090f0:	40004400 	.word	0x40004400
 80090f4:	40004800 	.word	0x40004800
 80090f8:	40004c00 	.word	0x40004c00
 80090fc:	40005000 	.word	0x40005000
 8009100:	2310      	movs	r3, #16
 8009102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4aae      	ldr	r2, [pc, #696]	@ (80093c4 <UART_SetConfig+0x5bc>)
 800910c:	4293      	cmp	r3, r2
 800910e:	f040 8097 	bne.w	8009240 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009112:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009116:	2b08      	cmp	r3, #8
 8009118:	d823      	bhi.n	8009162 <UART_SetConfig+0x35a>
 800911a:	a201      	add	r2, pc, #4	@ (adr r2, 8009120 <UART_SetConfig+0x318>)
 800911c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009120:	08009145 	.word	0x08009145
 8009124:	08009163 	.word	0x08009163
 8009128:	0800914d 	.word	0x0800914d
 800912c:	08009163 	.word	0x08009163
 8009130:	08009153 	.word	0x08009153
 8009134:	08009163 	.word	0x08009163
 8009138:	08009163 	.word	0x08009163
 800913c:	08009163 	.word	0x08009163
 8009140:	0800915b 	.word	0x0800915b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009144:	f7fd fa6a 	bl	800661c <HAL_RCC_GetPCLK1Freq>
 8009148:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800914a:	e010      	b.n	800916e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800914c:	4b9e      	ldr	r3, [pc, #632]	@ (80093c8 <UART_SetConfig+0x5c0>)
 800914e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009150:	e00d      	b.n	800916e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009152:	f7fd f9f5 	bl	8006540 <HAL_RCC_GetSysClockFreq>
 8009156:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009158:	e009      	b.n	800916e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800915a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800915e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009160:	e005      	b.n	800916e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009162:	2300      	movs	r3, #0
 8009164:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800916c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800916e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009170:	2b00      	cmp	r3, #0
 8009172:	f000 8130 	beq.w	80093d6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800917a:	4a94      	ldr	r2, [pc, #592]	@ (80093cc <UART_SetConfig+0x5c4>)
 800917c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009180:	461a      	mov	r2, r3
 8009182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009184:	fbb3 f3f2 	udiv	r3, r3, r2
 8009188:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	685a      	ldr	r2, [r3, #4]
 800918e:	4613      	mov	r3, r2
 8009190:	005b      	lsls	r3, r3, #1
 8009192:	4413      	add	r3, r2
 8009194:	69ba      	ldr	r2, [r7, #24]
 8009196:	429a      	cmp	r2, r3
 8009198:	d305      	bcc.n	80091a6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091a0:	69ba      	ldr	r2, [r7, #24]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d903      	bls.n	80091ae <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80091ac:	e113      	b.n	80093d6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b0:	2200      	movs	r2, #0
 80091b2:	60bb      	str	r3, [r7, #8]
 80091b4:	60fa      	str	r2, [r7, #12]
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ba:	4a84      	ldr	r2, [pc, #528]	@ (80093cc <UART_SetConfig+0x5c4>)
 80091bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	2200      	movs	r2, #0
 80091c4:	603b      	str	r3, [r7, #0]
 80091c6:	607a      	str	r2, [r7, #4]
 80091c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80091d0:	f7f7 fccc 	bl	8000b6c <__aeabi_uldivmod>
 80091d4:	4602      	mov	r2, r0
 80091d6:	460b      	mov	r3, r1
 80091d8:	4610      	mov	r0, r2
 80091da:	4619      	mov	r1, r3
 80091dc:	f04f 0200 	mov.w	r2, #0
 80091e0:	f04f 0300 	mov.w	r3, #0
 80091e4:	020b      	lsls	r3, r1, #8
 80091e6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80091ea:	0202      	lsls	r2, r0, #8
 80091ec:	6979      	ldr	r1, [r7, #20]
 80091ee:	6849      	ldr	r1, [r1, #4]
 80091f0:	0849      	lsrs	r1, r1, #1
 80091f2:	2000      	movs	r0, #0
 80091f4:	460c      	mov	r4, r1
 80091f6:	4605      	mov	r5, r0
 80091f8:	eb12 0804 	adds.w	r8, r2, r4
 80091fc:	eb43 0905 	adc.w	r9, r3, r5
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	469a      	mov	sl, r3
 8009208:	4693      	mov	fp, r2
 800920a:	4652      	mov	r2, sl
 800920c:	465b      	mov	r3, fp
 800920e:	4640      	mov	r0, r8
 8009210:	4649      	mov	r1, r9
 8009212:	f7f7 fcab 	bl	8000b6c <__aeabi_uldivmod>
 8009216:	4602      	mov	r2, r0
 8009218:	460b      	mov	r3, r1
 800921a:	4613      	mov	r3, r2
 800921c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800921e:	6a3b      	ldr	r3, [r7, #32]
 8009220:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009224:	d308      	bcc.n	8009238 <UART_SetConfig+0x430>
 8009226:	6a3b      	ldr	r3, [r7, #32]
 8009228:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800922c:	d204      	bcs.n	8009238 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	6a3a      	ldr	r2, [r7, #32]
 8009234:	60da      	str	r2, [r3, #12]
 8009236:	e0ce      	b.n	80093d6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800923e:	e0ca      	b.n	80093d6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	69db      	ldr	r3, [r3, #28]
 8009244:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009248:	d166      	bne.n	8009318 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800924a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800924e:	2b08      	cmp	r3, #8
 8009250:	d827      	bhi.n	80092a2 <UART_SetConfig+0x49a>
 8009252:	a201      	add	r2, pc, #4	@ (adr r2, 8009258 <UART_SetConfig+0x450>)
 8009254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009258:	0800927d 	.word	0x0800927d
 800925c:	08009285 	.word	0x08009285
 8009260:	0800928d 	.word	0x0800928d
 8009264:	080092a3 	.word	0x080092a3
 8009268:	08009293 	.word	0x08009293
 800926c:	080092a3 	.word	0x080092a3
 8009270:	080092a3 	.word	0x080092a3
 8009274:	080092a3 	.word	0x080092a3
 8009278:	0800929b 	.word	0x0800929b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800927c:	f7fd f9ce 	bl	800661c <HAL_RCC_GetPCLK1Freq>
 8009280:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009282:	e014      	b.n	80092ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009284:	f7fd f9e0 	bl	8006648 <HAL_RCC_GetPCLK2Freq>
 8009288:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800928a:	e010      	b.n	80092ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800928c:	4b4e      	ldr	r3, [pc, #312]	@ (80093c8 <UART_SetConfig+0x5c0>)
 800928e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009290:	e00d      	b.n	80092ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009292:	f7fd f955 	bl	8006540 <HAL_RCC_GetSysClockFreq>
 8009296:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009298:	e009      	b.n	80092ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800929a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800929e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80092a0:	e005      	b.n	80092ae <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80092a2:	2300      	movs	r3, #0
 80092a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80092ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80092ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f000 8090 	beq.w	80093d6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092ba:	4a44      	ldr	r2, [pc, #272]	@ (80093cc <UART_SetConfig+0x5c4>)
 80092bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092c0:	461a      	mov	r2, r3
 80092c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80092c8:	005a      	lsls	r2, r3, #1
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	085b      	lsrs	r3, r3, #1
 80092d0:	441a      	add	r2, r3
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80092da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092dc:	6a3b      	ldr	r3, [r7, #32]
 80092de:	2b0f      	cmp	r3, #15
 80092e0:	d916      	bls.n	8009310 <UART_SetConfig+0x508>
 80092e2:	6a3b      	ldr	r3, [r7, #32]
 80092e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092e8:	d212      	bcs.n	8009310 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80092ea:	6a3b      	ldr	r3, [r7, #32]
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	f023 030f 	bic.w	r3, r3, #15
 80092f2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80092f4:	6a3b      	ldr	r3, [r7, #32]
 80092f6:	085b      	lsrs	r3, r3, #1
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	f003 0307 	and.w	r3, r3, #7
 80092fe:	b29a      	uxth	r2, r3
 8009300:	8bfb      	ldrh	r3, [r7, #30]
 8009302:	4313      	orrs	r3, r2
 8009304:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	8bfa      	ldrh	r2, [r7, #30]
 800930c:	60da      	str	r2, [r3, #12]
 800930e:	e062      	b.n	80093d6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009310:	2301      	movs	r3, #1
 8009312:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009316:	e05e      	b.n	80093d6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009318:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800931c:	2b08      	cmp	r3, #8
 800931e:	d828      	bhi.n	8009372 <UART_SetConfig+0x56a>
 8009320:	a201      	add	r2, pc, #4	@ (adr r2, 8009328 <UART_SetConfig+0x520>)
 8009322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009326:	bf00      	nop
 8009328:	0800934d 	.word	0x0800934d
 800932c:	08009355 	.word	0x08009355
 8009330:	0800935d 	.word	0x0800935d
 8009334:	08009373 	.word	0x08009373
 8009338:	08009363 	.word	0x08009363
 800933c:	08009373 	.word	0x08009373
 8009340:	08009373 	.word	0x08009373
 8009344:	08009373 	.word	0x08009373
 8009348:	0800936b 	.word	0x0800936b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800934c:	f7fd f966 	bl	800661c <HAL_RCC_GetPCLK1Freq>
 8009350:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009352:	e014      	b.n	800937e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009354:	f7fd f978 	bl	8006648 <HAL_RCC_GetPCLK2Freq>
 8009358:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800935a:	e010      	b.n	800937e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800935c:	4b1a      	ldr	r3, [pc, #104]	@ (80093c8 <UART_SetConfig+0x5c0>)
 800935e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009360:	e00d      	b.n	800937e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009362:	f7fd f8ed 	bl	8006540 <HAL_RCC_GetSysClockFreq>
 8009366:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009368:	e009      	b.n	800937e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800936a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800936e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009370:	e005      	b.n	800937e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009372:	2300      	movs	r3, #0
 8009374:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009376:	2301      	movs	r3, #1
 8009378:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800937c:	bf00      	nop
    }

    if (pclk != 0U)
 800937e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009380:	2b00      	cmp	r3, #0
 8009382:	d028      	beq.n	80093d6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009388:	4a10      	ldr	r2, [pc, #64]	@ (80093cc <UART_SetConfig+0x5c4>)
 800938a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800938e:	461a      	mov	r2, r3
 8009390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009392:	fbb3 f2f2 	udiv	r2, r3, r2
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	085b      	lsrs	r3, r3, #1
 800939c:	441a      	add	r2, r3
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80093a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093a8:	6a3b      	ldr	r3, [r7, #32]
 80093aa:	2b0f      	cmp	r3, #15
 80093ac:	d910      	bls.n	80093d0 <UART_SetConfig+0x5c8>
 80093ae:	6a3b      	ldr	r3, [r7, #32]
 80093b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093b4:	d20c      	bcs.n	80093d0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80093b6:	6a3b      	ldr	r3, [r7, #32]
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	60da      	str	r2, [r3, #12]
 80093c0:	e009      	b.n	80093d6 <UART_SetConfig+0x5ce>
 80093c2:	bf00      	nop
 80093c4:	40008000 	.word	0x40008000
 80093c8:	00f42400 	.word	0x00f42400
 80093cc:	0801b04c 	.word	0x0801b04c
      }
      else
      {
        ret = HAL_ERROR;
 80093d0:	2301      	movs	r3, #1
 80093d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	2201      	movs	r2, #1
 80093da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	2201      	movs	r2, #1
 80093e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	2200      	movs	r2, #0
 80093ea:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	2200      	movs	r2, #0
 80093f0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80093f2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3730      	adds	r7, #48	@ 0x30
 80093fa:	46bd      	mov	sp, r7
 80093fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009400 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800940c:	f003 0308 	and.w	r3, r3, #8
 8009410:	2b00      	cmp	r3, #0
 8009412:	d00a      	beq.n	800942a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	430a      	orrs	r2, r1
 8009428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800942e:	f003 0301 	and.w	r3, r3, #1
 8009432:	2b00      	cmp	r3, #0
 8009434:	d00a      	beq.n	800944c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	430a      	orrs	r2, r1
 800944a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009450:	f003 0302 	and.w	r3, r3, #2
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00a      	beq.n	800946e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	430a      	orrs	r2, r1
 800946c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009472:	f003 0304 	and.w	r3, r3, #4
 8009476:	2b00      	cmp	r3, #0
 8009478:	d00a      	beq.n	8009490 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	430a      	orrs	r2, r1
 800948e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009494:	f003 0310 	and.w	r3, r3, #16
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00a      	beq.n	80094b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	430a      	orrs	r2, r1
 80094b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094b6:	f003 0320 	and.w	r3, r3, #32
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00a      	beq.n	80094d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	430a      	orrs	r2, r1
 80094d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d01a      	beq.n	8009516 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	430a      	orrs	r2, r1
 80094f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094fe:	d10a      	bne.n	8009516 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	430a      	orrs	r2, r1
 8009514:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800951a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00a      	beq.n	8009538 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	430a      	orrs	r2, r1
 8009536:	605a      	str	r2, [r3, #4]
  }
}
 8009538:	bf00      	nop
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b098      	sub	sp, #96	@ 0x60
 8009548:	af02      	add	r7, sp, #8
 800954a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009554:	f7f9 ff3c 	bl	80033d0 <HAL_GetTick>
 8009558:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f003 0308 	and.w	r3, r3, #8
 8009564:	2b08      	cmp	r3, #8
 8009566:	d12f      	bne.n	80095c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009568:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800956c:	9300      	str	r3, [sp, #0]
 800956e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009570:	2200      	movs	r2, #0
 8009572:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 f88e 	bl	8009698 <UART_WaitOnFlagUntilTimeout>
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d022      	beq.n	80095c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800958a:	e853 3f00 	ldrex	r3, [r3]
 800958e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009592:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009596:	653b      	str	r3, [r7, #80]	@ 0x50
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	461a      	mov	r2, r3
 800959e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80095a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80095a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095a8:	e841 2300 	strex	r3, r2, [r1]
 80095ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80095ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d1e6      	bne.n	8009582 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2220      	movs	r2, #32
 80095b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2200      	movs	r2, #0
 80095c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095c4:	2303      	movs	r3, #3
 80095c6:	e063      	b.n	8009690 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f003 0304 	and.w	r3, r3, #4
 80095d2:	2b04      	cmp	r3, #4
 80095d4:	d149      	bne.n	800966a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095de:	2200      	movs	r2, #0
 80095e0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 f857 	bl	8009698 <UART_WaitOnFlagUntilTimeout>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d03c      	beq.n	800966a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f8:	e853 3f00 	ldrex	r3, [r3]
 80095fc:	623b      	str	r3, [r7, #32]
   return(result);
 80095fe:	6a3b      	ldr	r3, [r7, #32]
 8009600:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009604:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	461a      	mov	r2, r3
 800960c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800960e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009610:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009612:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009614:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009616:	e841 2300 	strex	r3, r2, [r1]
 800961a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800961c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800961e:	2b00      	cmp	r3, #0
 8009620:	d1e6      	bne.n	80095f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	3308      	adds	r3, #8
 8009628:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	e853 3f00 	ldrex	r3, [r3]
 8009630:	60fb      	str	r3, [r7, #12]
   return(result);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f023 0301 	bic.w	r3, r3, #1
 8009638:	64bb      	str	r3, [r7, #72]	@ 0x48
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	3308      	adds	r3, #8
 8009640:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009642:	61fa      	str	r2, [r7, #28]
 8009644:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009646:	69b9      	ldr	r1, [r7, #24]
 8009648:	69fa      	ldr	r2, [r7, #28]
 800964a:	e841 2300 	strex	r3, r2, [r1]
 800964e:	617b      	str	r3, [r7, #20]
   return(result);
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d1e5      	bne.n	8009622 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2220      	movs	r2, #32
 800965a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009666:	2303      	movs	r3, #3
 8009668:	e012      	b.n	8009690 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2220      	movs	r2, #32
 800966e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2220      	movs	r2, #32
 8009676:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	3758      	adds	r7, #88	@ 0x58
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	603b      	str	r3, [r7, #0]
 80096a4:	4613      	mov	r3, r2
 80096a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096a8:	e04f      	b.n	800974a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096aa:	69bb      	ldr	r3, [r7, #24]
 80096ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096b0:	d04b      	beq.n	800974a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096b2:	f7f9 fe8d 	bl	80033d0 <HAL_GetTick>
 80096b6:	4602      	mov	r2, r0
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	1ad3      	subs	r3, r2, r3
 80096bc:	69ba      	ldr	r2, [r7, #24]
 80096be:	429a      	cmp	r2, r3
 80096c0:	d302      	bcc.n	80096c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d101      	bne.n	80096cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80096c8:	2303      	movs	r3, #3
 80096ca:	e04e      	b.n	800976a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f003 0304 	and.w	r3, r3, #4
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d037      	beq.n	800974a <UART_WaitOnFlagUntilTimeout+0xb2>
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	2b80      	cmp	r3, #128	@ 0x80
 80096de:	d034      	beq.n	800974a <UART_WaitOnFlagUntilTimeout+0xb2>
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	2b40      	cmp	r3, #64	@ 0x40
 80096e4:	d031      	beq.n	800974a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	69db      	ldr	r3, [r3, #28]
 80096ec:	f003 0308 	and.w	r3, r3, #8
 80096f0:	2b08      	cmp	r3, #8
 80096f2:	d110      	bne.n	8009716 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	2208      	movs	r2, #8
 80096fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80096fc:	68f8      	ldr	r0, [r7, #12]
 80096fe:	f000 f920 	bl	8009942 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2208      	movs	r2, #8
 8009706:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2200      	movs	r2, #0
 800970e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009712:	2301      	movs	r3, #1
 8009714:	e029      	b.n	800976a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	69db      	ldr	r3, [r3, #28]
 800971c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009720:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009724:	d111      	bne.n	800974a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800972e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009730:	68f8      	ldr	r0, [r7, #12]
 8009732:	f000 f906 	bl	8009942 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2220      	movs	r2, #32
 800973a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2200      	movs	r2, #0
 8009742:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009746:	2303      	movs	r3, #3
 8009748:	e00f      	b.n	800976a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	69da      	ldr	r2, [r3, #28]
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	4013      	ands	r3, r2
 8009754:	68ba      	ldr	r2, [r7, #8]
 8009756:	429a      	cmp	r2, r3
 8009758:	bf0c      	ite	eq
 800975a:	2301      	moveq	r3, #1
 800975c:	2300      	movne	r3, #0
 800975e:	b2db      	uxtb	r3, r3
 8009760:	461a      	mov	r2, r3
 8009762:	79fb      	ldrb	r3, [r7, #7]
 8009764:	429a      	cmp	r2, r3
 8009766:	d0a0      	beq.n	80096aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
	...

08009774 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b096      	sub	sp, #88	@ 0x58
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	4613      	mov	r3, r2
 8009780:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	68ba      	ldr	r2, [r7, #8]
 8009786:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	88fa      	ldrh	r2, [r7, #6]
 800978c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2200      	movs	r2, #0
 8009794:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2222      	movs	r2, #34	@ 0x22
 800979c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d02d      	beq.n	8009806 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097b0:	4a40      	ldr	r2, [pc, #256]	@ (80098b4 <UART_Start_Receive_DMA+0x140>)
 80097b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097ba:	4a3f      	ldr	r2, [pc, #252]	@ (80098b8 <UART_Start_Receive_DMA+0x144>)
 80097bc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097c4:	4a3d      	ldr	r2, [pc, #244]	@ (80098bc <UART_Start_Receive_DMA+0x148>)
 80097c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097ce:	2200      	movs	r2, #0
 80097d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	3324      	adds	r3, #36	@ 0x24
 80097de:	4619      	mov	r1, r3
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097e4:	461a      	mov	r2, r3
 80097e6:	88fb      	ldrh	r3, [r7, #6]
 80097e8:	f7f9 ff86 	bl	80036f8 <HAL_DMA_Start_IT>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d009      	beq.n	8009806 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2210      	movs	r2, #16
 80097f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2220      	movs	r2, #32
 80097fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	e051      	b.n	80098aa <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	691b      	ldr	r3, [r3, #16]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d018      	beq.n	8009840 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009814:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009816:	e853 3f00 	ldrex	r3, [r3]
 800981a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800981c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800981e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009822:	657b      	str	r3, [r7, #84]	@ 0x54
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	461a      	mov	r2, r3
 800982a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800982c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800982e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009830:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009832:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009834:	e841 2300 	strex	r3, r2, [r1]
 8009838:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800983a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800983c:	2b00      	cmp	r3, #0
 800983e:	d1e6      	bne.n	800980e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	3308      	adds	r3, #8
 8009846:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800984a:	e853 3f00 	ldrex	r3, [r3]
 800984e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009852:	f043 0301 	orr.w	r3, r3, #1
 8009856:	653b      	str	r3, [r7, #80]	@ 0x50
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	3308      	adds	r3, #8
 800985e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009860:	637a      	str	r2, [r7, #52]	@ 0x34
 8009862:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009864:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009866:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009868:	e841 2300 	strex	r3, r2, [r1]
 800986c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800986e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009870:	2b00      	cmp	r3, #0
 8009872:	d1e5      	bne.n	8009840 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	3308      	adds	r3, #8
 800987a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	e853 3f00 	ldrex	r3, [r3]
 8009882:	613b      	str	r3, [r7, #16]
   return(result);
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800988a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	3308      	adds	r3, #8
 8009892:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009894:	623a      	str	r2, [r7, #32]
 8009896:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009898:	69f9      	ldr	r1, [r7, #28]
 800989a:	6a3a      	ldr	r2, [r7, #32]
 800989c:	e841 2300 	strex	r3, r2, [r1]
 80098a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d1e5      	bne.n	8009874 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3758      	adds	r7, #88	@ 0x58
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	08009ac5 	.word	0x08009ac5
 80098b8:	08009bf1 	.word	0x08009bf1
 80098bc:	08009c2f 	.word	0x08009c2f

080098c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b08f      	sub	sp, #60	@ 0x3c
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ce:	6a3b      	ldr	r3, [r7, #32]
 80098d0:	e853 3f00 	ldrex	r3, [r3]
 80098d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80098d6:	69fb      	ldr	r3, [r7, #28]
 80098d8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80098dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	461a      	mov	r2, r3
 80098e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80098e8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098ee:	e841 2300 	strex	r3, r2, [r1]
 80098f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80098f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d1e6      	bne.n	80098c8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	3308      	adds	r3, #8
 8009900:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	e853 3f00 	ldrex	r3, [r3]
 8009908:	60bb      	str	r3, [r7, #8]
   return(result);
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009910:	633b      	str	r3, [r7, #48]	@ 0x30
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	3308      	adds	r3, #8
 8009918:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800991a:	61ba      	str	r2, [r7, #24]
 800991c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800991e:	6979      	ldr	r1, [r7, #20]
 8009920:	69ba      	ldr	r2, [r7, #24]
 8009922:	e841 2300 	strex	r3, r2, [r1]
 8009926:	613b      	str	r3, [r7, #16]
   return(result);
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d1e5      	bne.n	80098fa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2220      	movs	r2, #32
 8009932:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009936:	bf00      	nop
 8009938:	373c      	adds	r7, #60	@ 0x3c
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr

08009942 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009942:	b480      	push	{r7}
 8009944:	b095      	sub	sp, #84	@ 0x54
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009952:	e853 3f00 	ldrex	r3, [r3]
 8009956:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800995a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800995e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	461a      	mov	r2, r3
 8009966:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009968:	643b      	str	r3, [r7, #64]	@ 0x40
 800996a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800996c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800996e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009970:	e841 2300 	strex	r3, r2, [r1]
 8009974:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009978:	2b00      	cmp	r3, #0
 800997a:	d1e6      	bne.n	800994a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	3308      	adds	r3, #8
 8009982:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009984:	6a3b      	ldr	r3, [r7, #32]
 8009986:	e853 3f00 	ldrex	r3, [r3]
 800998a:	61fb      	str	r3, [r7, #28]
   return(result);
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009992:	f023 0301 	bic.w	r3, r3, #1
 8009996:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	3308      	adds	r3, #8
 800999e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80099a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80099a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099a8:	e841 2300 	strex	r3, r2, [r1]
 80099ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80099ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d1e3      	bne.n	800997c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d118      	bne.n	80099ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	e853 3f00 	ldrex	r3, [r3]
 80099c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	f023 0310 	bic.w	r3, r3, #16
 80099d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	461a      	mov	r2, r3
 80099d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099da:	61bb      	str	r3, [r7, #24]
 80099dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099de:	6979      	ldr	r1, [r7, #20]
 80099e0:	69ba      	ldr	r2, [r7, #24]
 80099e2:	e841 2300 	strex	r3, r2, [r1]
 80099e6:	613b      	str	r3, [r7, #16]
   return(result);
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d1e6      	bne.n	80099bc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2220      	movs	r2, #32
 80099f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2200      	movs	r2, #0
 80099fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009a02:	bf00      	nop
 8009a04:	3754      	adds	r7, #84	@ 0x54
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr

08009a0e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b090      	sub	sp, #64	@ 0x40
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f003 0320 	and.w	r3, r3, #32
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d137      	bne.n	8009a9a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	3308      	adds	r3, #8
 8009a38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a3c:	e853 3f00 	ldrex	r3, [r3]
 8009a40:	623b      	str	r3, [r7, #32]
   return(result);
 8009a42:	6a3b      	ldr	r3, [r7, #32]
 8009a44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009a4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	3308      	adds	r3, #8
 8009a50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009a52:	633a      	str	r2, [r7, #48]	@ 0x30
 8009a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a5a:	e841 2300 	strex	r3, r2, [r1]
 8009a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d1e5      	bne.n	8009a32 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	e853 3f00 	ldrex	r3, [r3]
 8009a72:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	461a      	mov	r2, r3
 8009a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a84:	61fb      	str	r3, [r7, #28]
 8009a86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a88:	69b9      	ldr	r1, [r7, #24]
 8009a8a:	69fa      	ldr	r2, [r7, #28]
 8009a8c:	e841 2300 	strex	r3, r2, [r1]
 8009a90:	617b      	str	r3, [r7, #20]
   return(result);
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d1e6      	bne.n	8009a66 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009a98:	e002      	b.n	8009aa0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009a9a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009a9c:	f7ff f976 	bl	8008d8c <HAL_UART_TxCpltCallback>
}
 8009aa0:	bf00      	nop
 8009aa2:	3740      	adds	r7, #64	@ 0x40
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b084      	sub	sp, #16
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ab4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009ab6:	68f8      	ldr	r0, [r7, #12]
 8009ab8:	f7ff f972 	bl	8008da0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009abc:	bf00      	nop
 8009abe:	3710      	adds	r7, #16
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b09c      	sub	sp, #112	@ 0x70
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ad0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f003 0320 	and.w	r3, r3, #32
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d171      	bne.n	8009bc4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8009ae0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ae8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009af0:	e853 3f00 	ldrex	r3, [r3]
 8009af4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009af6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009af8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009afc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009afe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	461a      	mov	r2, r3
 8009b04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009b06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009b08:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009b0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009b0e:	e841 2300 	strex	r3, r2, [r1]
 8009b12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009b14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d1e6      	bne.n	8009ae8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	3308      	adds	r3, #8
 8009b20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b24:	e853 3f00 	ldrex	r3, [r3]
 8009b28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b2c:	f023 0301 	bic.w	r3, r3, #1
 8009b30:	667b      	str	r3, [r7, #100]	@ 0x64
 8009b32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	3308      	adds	r3, #8
 8009b38:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009b3a:	647a      	str	r2, [r7, #68]	@ 0x44
 8009b3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b42:	e841 2300 	strex	r3, r2, [r1]
 8009b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d1e5      	bne.n	8009b1a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	3308      	adds	r3, #8
 8009b54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b58:	e853 3f00 	ldrex	r3, [r3]
 8009b5c:	623b      	str	r3, [r7, #32]
   return(result);
 8009b5e:	6a3b      	ldr	r3, [r7, #32]
 8009b60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b64:	663b      	str	r3, [r7, #96]	@ 0x60
 8009b66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	3308      	adds	r3, #8
 8009b6c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009b6e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b76:	e841 2300 	strex	r3, r2, [r1]
 8009b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d1e5      	bne.n	8009b4e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009b82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b84:	2220      	movs	r2, #32
 8009b86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d118      	bne.n	8009bc4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	e853 3f00 	ldrex	r3, [r3]
 8009b9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f023 0310 	bic.w	r3, r3, #16
 8009ba6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009ba8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	461a      	mov	r2, r3
 8009bae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009bb0:	61fb      	str	r3, [r7, #28]
 8009bb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb4:	69b9      	ldr	r1, [r7, #24]
 8009bb6:	69fa      	ldr	r2, [r7, #28]
 8009bb8:	e841 2300 	strex	r3, r2, [r1]
 8009bbc:	617b      	str	r3, [r7, #20]
   return(result);
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d1e6      	bne.n	8009b92 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009bc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d107      	bne.n	8009be2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009bd8:	4619      	mov	r1, r3
 8009bda:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009bdc:	f7ff f908 	bl	8008df0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009be0:	e002      	b.n	8009be8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009be2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009be4:	f7ff f8e6 	bl	8008db4 <HAL_UART_RxCpltCallback>
}
 8009be8:	bf00      	nop
 8009bea:	3770      	adds	r7, #112	@ 0x70
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bfc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2201      	movs	r2, #1
 8009c02:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d109      	bne.n	8009c20 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c12:	085b      	lsrs	r3, r3, #1
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	4619      	mov	r1, r3
 8009c18:	68f8      	ldr	r0, [r7, #12]
 8009c1a:	f7ff f8e9 	bl	8008df0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c1e:	e002      	b.n	8009c26 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009c20:	68f8      	ldr	r0, [r7, #12]
 8009c22:	f7ff f8d1 	bl	8008dc8 <HAL_UART_RxHalfCpltCallback>
}
 8009c26:	bf00      	nop
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b086      	sub	sp, #24
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c3a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c42:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c4a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c56:	2b80      	cmp	r3, #128	@ 0x80
 8009c58:	d109      	bne.n	8009c6e <UART_DMAError+0x40>
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	2b21      	cmp	r3, #33	@ 0x21
 8009c5e:	d106      	bne.n	8009c6e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	2200      	movs	r2, #0
 8009c64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009c68:	6978      	ldr	r0, [r7, #20]
 8009c6a:	f7ff fe29 	bl	80098c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c78:	2b40      	cmp	r3, #64	@ 0x40
 8009c7a:	d109      	bne.n	8009c90 <UART_DMAError+0x62>
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2b22      	cmp	r3, #34	@ 0x22
 8009c80:	d106      	bne.n	8009c90 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	2200      	movs	r2, #0
 8009c86:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009c8a:	6978      	ldr	r0, [r7, #20]
 8009c8c:	f7ff fe59 	bl	8009942 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c96:	f043 0210 	orr.w	r2, r3, #16
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ca0:	6978      	ldr	r0, [r7, #20]
 8009ca2:	f7ff f89b 	bl	8008ddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ca6:	bf00      	nop
 8009ca8:	3718      	adds	r7, #24
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b084      	sub	sp, #16
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009cc4:	68f8      	ldr	r0, [r7, #12]
 8009cc6:	f7ff f889 	bl	8008ddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009cca:	bf00      	nop
 8009ccc:	3710      	adds	r7, #16
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}

08009cd2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b088      	sub	sp, #32
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	e853 3f00 	ldrex	r3, [r3]
 8009ce6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009cee:	61fb      	str	r3, [r7, #28]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	69fb      	ldr	r3, [r7, #28]
 8009cf8:	61bb      	str	r3, [r7, #24]
 8009cfa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfc:	6979      	ldr	r1, [r7, #20]
 8009cfe:	69ba      	ldr	r2, [r7, #24]
 8009d00:	e841 2300 	strex	r3, r2, [r1]
 8009d04:	613b      	str	r3, [r7, #16]
   return(result);
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d1e6      	bne.n	8009cda <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2220      	movs	r2, #32
 8009d10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f7ff f836 	bl	8008d8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d20:	bf00      	nop
 8009d22:	3720      	adds	r7, #32
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009d30:	bf00      	nop
 8009d32:	370c      	adds	r7, #12
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009d44:	bf00      	nop
 8009d46:	370c      	adds	r7, #12
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009d58:	bf00      	nop
 8009d5a:	370c      	adds	r7, #12
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr

08009d64 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	d101      	bne.n	8009d7a <HAL_UARTEx_DisableFifoMode+0x16>
 8009d76:	2302      	movs	r3, #2
 8009d78:	e027      	b.n	8009dca <HAL_UARTEx_DisableFifoMode+0x66>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2224      	movs	r2, #36	@ 0x24
 8009d86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f022 0201 	bic.w	r2, r2, #1
 8009da0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009da8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2200      	movs	r2, #0
 8009dae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	68fa      	ldr	r2, [r7, #12]
 8009db6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2220      	movs	r2, #32
 8009dbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009dc8:	2300      	movs	r3, #0
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3714      	adds	r7, #20
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr

08009dd6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009dd6:	b580      	push	{r7, lr}
 8009dd8:	b084      	sub	sp, #16
 8009dda:	af00      	add	r7, sp, #0
 8009ddc:	6078      	str	r0, [r7, #4]
 8009dde:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d101      	bne.n	8009dee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009dea:	2302      	movs	r3, #2
 8009dec:	e02d      	b.n	8009e4a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2201      	movs	r2, #1
 8009df2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2224      	movs	r2, #36	@ 0x24
 8009dfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f022 0201 	bic.w	r2, r2, #1
 8009e14:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	683a      	ldr	r2, [r7, #0]
 8009e26:	430a      	orrs	r2, r1
 8009e28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 f850 	bl	8009ed0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	68fa      	ldr	r2, [r7, #12]
 8009e36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2220      	movs	r2, #32
 8009e3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e48:	2300      	movs	r3, #0
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3710      	adds	r7, #16
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e52:	b580      	push	{r7, lr}
 8009e54:	b084      	sub	sp, #16
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
 8009e5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d101      	bne.n	8009e6a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009e66:	2302      	movs	r3, #2
 8009e68:	e02d      	b.n	8009ec6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2224      	movs	r2, #36	@ 0x24
 8009e76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f022 0201 	bic.w	r2, r2, #1
 8009e90:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	683a      	ldr	r2, [r7, #0]
 8009ea2:	430a      	orrs	r2, r1
 8009ea4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 f812 	bl	8009ed0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2220      	movs	r2, #32
 8009eb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
	...

08009ed0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b085      	sub	sp, #20
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d108      	bne.n	8009ef2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2201      	movs	r2, #1
 8009eec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009ef0:	e031      	b.n	8009f56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009ef2:	2308      	movs	r3, #8
 8009ef4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009ef6:	2308      	movs	r3, #8
 8009ef8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	689b      	ldr	r3, [r3, #8]
 8009f00:	0e5b      	lsrs	r3, r3, #25
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	f003 0307 	and.w	r3, r3, #7
 8009f08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	0f5b      	lsrs	r3, r3, #29
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	f003 0307 	and.w	r3, r3, #7
 8009f18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f1a:	7bbb      	ldrb	r3, [r7, #14]
 8009f1c:	7b3a      	ldrb	r2, [r7, #12]
 8009f1e:	4911      	ldr	r1, [pc, #68]	@ (8009f64 <UARTEx_SetNbDataToProcess+0x94>)
 8009f20:	5c8a      	ldrb	r2, [r1, r2]
 8009f22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009f26:	7b3a      	ldrb	r2, [r7, #12]
 8009f28:	490f      	ldr	r1, [pc, #60]	@ (8009f68 <UARTEx_SetNbDataToProcess+0x98>)
 8009f2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f30:	b29a      	uxth	r2, r3
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f38:	7bfb      	ldrb	r3, [r7, #15]
 8009f3a:	7b7a      	ldrb	r2, [r7, #13]
 8009f3c:	4909      	ldr	r1, [pc, #36]	@ (8009f64 <UARTEx_SetNbDataToProcess+0x94>)
 8009f3e:	5c8a      	ldrb	r2, [r1, r2]
 8009f40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009f44:	7b7a      	ldrb	r2, [r7, #13]
 8009f46:	4908      	ldr	r1, [pc, #32]	@ (8009f68 <UARTEx_SetNbDataToProcess+0x98>)
 8009f48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f4e:	b29a      	uxth	r2, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009f56:	bf00      	nop
 8009f58:	3714      	adds	r7, #20
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	0801b064 	.word	0x0801b064
 8009f68:	0801b06c 	.word	0x0801b06c

08009f6c <__NVIC_SetPriority>:
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	4603      	mov	r3, r0
 8009f74:	6039      	str	r1, [r7, #0]
 8009f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	db0a      	blt.n	8009f96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	b2da      	uxtb	r2, r3
 8009f84:	490c      	ldr	r1, [pc, #48]	@ (8009fb8 <__NVIC_SetPriority+0x4c>)
 8009f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f8a:	0112      	lsls	r2, r2, #4
 8009f8c:	b2d2      	uxtb	r2, r2
 8009f8e:	440b      	add	r3, r1
 8009f90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009f94:	e00a      	b.n	8009fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	b2da      	uxtb	r2, r3
 8009f9a:	4908      	ldr	r1, [pc, #32]	@ (8009fbc <__NVIC_SetPriority+0x50>)
 8009f9c:	79fb      	ldrb	r3, [r7, #7]
 8009f9e:	f003 030f 	and.w	r3, r3, #15
 8009fa2:	3b04      	subs	r3, #4
 8009fa4:	0112      	lsls	r2, r2, #4
 8009fa6:	b2d2      	uxtb	r2, r2
 8009fa8:	440b      	add	r3, r1
 8009faa:	761a      	strb	r2, [r3, #24]
}
 8009fac:	bf00      	nop
 8009fae:	370c      	adds	r7, #12
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr
 8009fb8:	e000e100 	.word	0xe000e100
 8009fbc:	e000ed00 	.word	0xe000ed00

08009fc0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009fc4:	4b05      	ldr	r3, [pc, #20]	@ (8009fdc <SysTick_Handler+0x1c>)
 8009fc6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009fc8:	f001 fd40 	bl	800ba4c <xTaskGetSchedulerState>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d001      	beq.n	8009fd6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009fd2:	f002 fb39 	bl	800c648 <xPortSysTickHandler>
  }
}
 8009fd6:	bf00      	nop
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	e000e010 	.word	0xe000e010

08009fe0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	f06f 0004 	mvn.w	r0, #4
 8009fea:	f7ff ffbf 	bl	8009f6c <__NVIC_SetPriority>
#endif
}
 8009fee:	bf00      	nop
 8009ff0:	bd80      	pop	{r7, pc}
	...

08009ff4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ffa:	f3ef 8305 	mrs	r3, IPSR
 8009ffe:	603b      	str	r3, [r7, #0]
  return(result);
 800a000:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a002:	2b00      	cmp	r3, #0
 800a004:	d003      	beq.n	800a00e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a006:	f06f 0305 	mvn.w	r3, #5
 800a00a:	607b      	str	r3, [r7, #4]
 800a00c:	e00c      	b.n	800a028 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a00e:	4b0a      	ldr	r3, [pc, #40]	@ (800a038 <osKernelInitialize+0x44>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d105      	bne.n	800a022 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a016:	4b08      	ldr	r3, [pc, #32]	@ (800a038 <osKernelInitialize+0x44>)
 800a018:	2201      	movs	r2, #1
 800a01a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a01c:	2300      	movs	r3, #0
 800a01e:	607b      	str	r3, [r7, #4]
 800a020:	e002      	b.n	800a028 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a022:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a026:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a028:	687b      	ldr	r3, [r7, #4]
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	370c      	adds	r7, #12
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	20004ae8 	.word	0x20004ae8

0800a03c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a042:	f3ef 8305 	mrs	r3, IPSR
 800a046:	603b      	str	r3, [r7, #0]
  return(result);
 800a048:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d003      	beq.n	800a056 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a04e:	f06f 0305 	mvn.w	r3, #5
 800a052:	607b      	str	r3, [r7, #4]
 800a054:	e010      	b.n	800a078 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a056:	4b0b      	ldr	r3, [pc, #44]	@ (800a084 <osKernelStart+0x48>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d109      	bne.n	800a072 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a05e:	f7ff ffbf 	bl	8009fe0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a062:	4b08      	ldr	r3, [pc, #32]	@ (800a084 <osKernelStart+0x48>)
 800a064:	2202      	movs	r2, #2
 800a066:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a068:	f001 f87a 	bl	800b160 <vTaskStartScheduler>
      stat = osOK;
 800a06c:	2300      	movs	r3, #0
 800a06e:	607b      	str	r3, [r7, #4]
 800a070:	e002      	b.n	800a078 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a072:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a076:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a078:	687b      	ldr	r3, [r7, #4]
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3708      	adds	r7, #8
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	20004ae8 	.word	0x20004ae8

0800a088 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a088:	b580      	push	{r7, lr}
 800a08a:	b08e      	sub	sp, #56	@ 0x38
 800a08c:	af04      	add	r7, sp, #16
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	60b9      	str	r1, [r7, #8]
 800a092:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a094:	2300      	movs	r3, #0
 800a096:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a098:	f3ef 8305 	mrs	r3, IPSR
 800a09c:	617b      	str	r3, [r7, #20]
  return(result);
 800a09e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d17e      	bne.n	800a1a2 <osThreadNew+0x11a>
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d07b      	beq.n	800a1a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a0aa:	2380      	movs	r3, #128	@ 0x80
 800a0ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a0ae:	2318      	movs	r3, #24
 800a0b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a0b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a0ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d045      	beq.n	800a14e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d002      	beq.n	800a0d0 <osThreadNew+0x48>
        name = attr->name;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	699b      	ldr	r3, [r3, #24]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d002      	beq.n	800a0de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	699b      	ldr	r3, [r3, #24]
 800a0dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a0de:	69fb      	ldr	r3, [r7, #28]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d008      	beq.n	800a0f6 <osThreadNew+0x6e>
 800a0e4:	69fb      	ldr	r3, [r7, #28]
 800a0e6:	2b38      	cmp	r3, #56	@ 0x38
 800a0e8:	d805      	bhi.n	800a0f6 <osThreadNew+0x6e>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	f003 0301 	and.w	r3, r3, #1
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d001      	beq.n	800a0fa <osThreadNew+0x72>
        return (NULL);
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	e054      	b.n	800a1a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	695b      	ldr	r3, [r3, #20]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d003      	beq.n	800a10a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	695b      	ldr	r3, [r3, #20]
 800a106:	089b      	lsrs	r3, r3, #2
 800a108:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	689b      	ldr	r3, [r3, #8]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d00e      	beq.n	800a130 <osThreadNew+0xa8>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	68db      	ldr	r3, [r3, #12]
 800a116:	2b5b      	cmp	r3, #91	@ 0x5b
 800a118:	d90a      	bls.n	800a130 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d006      	beq.n	800a130 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	695b      	ldr	r3, [r3, #20]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d002      	beq.n	800a130 <osThreadNew+0xa8>
        mem = 1;
 800a12a:	2301      	movs	r3, #1
 800a12c:	61bb      	str	r3, [r7, #24]
 800a12e:	e010      	b.n	800a152 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	689b      	ldr	r3, [r3, #8]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d10c      	bne.n	800a152 <osThreadNew+0xca>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	68db      	ldr	r3, [r3, #12]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d108      	bne.n	800a152 <osThreadNew+0xca>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	691b      	ldr	r3, [r3, #16]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d104      	bne.n	800a152 <osThreadNew+0xca>
          mem = 0;
 800a148:	2300      	movs	r3, #0
 800a14a:	61bb      	str	r3, [r7, #24]
 800a14c:	e001      	b.n	800a152 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a14e:	2300      	movs	r3, #0
 800a150:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	2b01      	cmp	r3, #1
 800a156:	d110      	bne.n	800a17a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a160:	9202      	str	r2, [sp, #8]
 800a162:	9301      	str	r3, [sp, #4]
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	9300      	str	r3, [sp, #0]
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	6a3a      	ldr	r2, [r7, #32]
 800a16c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a16e:	68f8      	ldr	r0, [r7, #12]
 800a170:	f000 fe1a 	bl	800ada8 <xTaskCreateStatic>
 800a174:	4603      	mov	r3, r0
 800a176:	613b      	str	r3, [r7, #16]
 800a178:	e013      	b.n	800a1a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d110      	bne.n	800a1a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a180:	6a3b      	ldr	r3, [r7, #32]
 800a182:	b29a      	uxth	r2, r3
 800a184:	f107 0310 	add.w	r3, r7, #16
 800a188:	9301      	str	r3, [sp, #4]
 800a18a:	69fb      	ldr	r3, [r7, #28]
 800a18c:	9300      	str	r3, [sp, #0]
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a192:	68f8      	ldr	r0, [r7, #12]
 800a194:	f000 fe68 	bl	800ae68 <xTaskCreate>
 800a198:	4603      	mov	r3, r0
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d001      	beq.n	800a1a2 <osThreadNew+0x11a>
            hTask = NULL;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a1a2:	693b      	ldr	r3, [r7, #16]
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3728      	adds	r7, #40	@ 0x28
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1b4:	f3ef 8305 	mrs	r3, IPSR
 800a1b8:	60bb      	str	r3, [r7, #8]
  return(result);
 800a1ba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d003      	beq.n	800a1c8 <osDelay+0x1c>
    stat = osErrorISR;
 800a1c0:	f06f 0305 	mvn.w	r3, #5
 800a1c4:	60fb      	str	r3, [r7, #12]
 800a1c6:	e007      	b.n	800a1d8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d002      	beq.n	800a1d8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 ff8e 	bl	800b0f4 <vTaskDelay>
    }
  }

  return (stat);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3710      	adds	r7, #16
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
	...

0800a1e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a1e4:	b480      	push	{r7}
 800a1e6:	b085      	sub	sp, #20
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	60b9      	str	r1, [r7, #8]
 800a1ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	4a07      	ldr	r2, [pc, #28]	@ (800a210 <vApplicationGetIdleTaskMemory+0x2c>)
 800a1f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	4a06      	ldr	r2, [pc, #24]	@ (800a214 <vApplicationGetIdleTaskMemory+0x30>)
 800a1fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2280      	movs	r2, #128	@ 0x80
 800a200:	601a      	str	r2, [r3, #0]
}
 800a202:	bf00      	nop
 800a204:	3714      	adds	r7, #20
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	20004aec 	.word	0x20004aec
 800a214:	20004b48 	.word	0x20004b48

0800a218 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a218:	b480      	push	{r7}
 800a21a:	b085      	sub	sp, #20
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	4a07      	ldr	r2, [pc, #28]	@ (800a244 <vApplicationGetTimerTaskMemory+0x2c>)
 800a228:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	4a06      	ldr	r2, [pc, #24]	@ (800a248 <vApplicationGetTimerTaskMemory+0x30>)
 800a22e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a236:	601a      	str	r2, [r3, #0]
}
 800a238:	bf00      	nop
 800a23a:	3714      	adds	r7, #20
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr
 800a244:	20004d48 	.word	0x20004d48
 800a248:	20004da4 	.word	0x20004da4

0800a24c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f103 0208 	add.w	r2, r3, #8
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a264:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f103 0208 	add.w	r2, r3, #8
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f103 0208 	add.w	r2, r3, #8
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2200      	movs	r2, #0
 800a27e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a280:	bf00      	nop
 800a282:	370c      	adds	r7, #12
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a29a:	bf00      	nop
 800a29c:	370c      	adds	r7, #12
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr

0800a2a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a2a6:	b480      	push	{r7}
 800a2a8:	b085      	sub	sp, #20
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
 800a2ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	689a      	ldr	r2, [r3, #8]
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	683a      	ldr	r2, [r7, #0]
 800a2ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	683a      	ldr	r2, [r7, #0]
 800a2d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	1c5a      	adds	r2, r3, #1
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	601a      	str	r2, [r3, #0]
}
 800a2e2:	bf00      	nop
 800a2e4:	3714      	adds	r7, #20
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr

0800a2ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a2ee:	b480      	push	{r7}
 800a2f0:	b085      	sub	sp, #20
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
 800a2f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a304:	d103      	bne.n	800a30e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	691b      	ldr	r3, [r3, #16]
 800a30a:	60fb      	str	r3, [r7, #12]
 800a30c:	e00c      	b.n	800a328 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	3308      	adds	r3, #8
 800a312:	60fb      	str	r3, [r7, #12]
 800a314:	e002      	b.n	800a31c <vListInsert+0x2e>
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	60fb      	str	r3, [r7, #12]
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	68ba      	ldr	r2, [r7, #8]
 800a324:	429a      	cmp	r2, r3
 800a326:	d2f6      	bcs.n	800a316 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	685a      	ldr	r2, [r3, #4]
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	683a      	ldr	r2, [r7, #0]
 800a336:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	68fa      	ldr	r2, [r7, #12]
 800a33c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	683a      	ldr	r2, [r7, #0]
 800a342:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	687a      	ldr	r2, [r7, #4]
 800a348:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	1c5a      	adds	r2, r3, #1
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	601a      	str	r2, [r3, #0]
}
 800a354:	bf00      	nop
 800a356:	3714      	adds	r7, #20
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a360:	b480      	push	{r7}
 800a362:	b085      	sub	sp, #20
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	691b      	ldr	r3, [r3, #16]
 800a36c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	6892      	ldr	r2, [r2, #8]
 800a376:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	6852      	ldr	r2, [r2, #4]
 800a380:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	429a      	cmp	r2, r3
 800a38a:	d103      	bne.n	800a394 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	689a      	ldr	r2, [r3, #8]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2200      	movs	r2, #0
 800a398:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	1e5a      	subs	r2, r3, #1
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3714      	adds	r7, #20
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b084      	sub	sp, #16
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d10b      	bne.n	800a3e0 <xQueueGenericReset+0x2c>
	__asm volatile
 800a3c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3cc:	f383 8811 	msr	BASEPRI, r3
 800a3d0:	f3bf 8f6f 	isb	sy
 800a3d4:	f3bf 8f4f 	dsb	sy
 800a3d8:	60bb      	str	r3, [r7, #8]
}
 800a3da:	bf00      	nop
 800a3dc:	bf00      	nop
 800a3de:	e7fd      	b.n	800a3dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a3e0:	f002 f8a2 	bl	800c528 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3ec:	68f9      	ldr	r1, [r7, #12]
 800a3ee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a3f0:	fb01 f303 	mul.w	r3, r1, r3
 800a3f4:	441a      	add	r2, r3
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a410:	3b01      	subs	r3, #1
 800a412:	68f9      	ldr	r1, [r7, #12]
 800a414:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a416:	fb01 f303 	mul.w	r3, r1, r3
 800a41a:	441a      	add	r2, r3
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	22ff      	movs	r2, #255	@ 0xff
 800a424:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	22ff      	movs	r2, #255	@ 0xff
 800a42c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d114      	bne.n	800a460 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	691b      	ldr	r3, [r3, #16]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d01a      	beq.n	800a474 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	3310      	adds	r3, #16
 800a442:	4618      	mov	r0, r3
 800a444:	f001 f91a 	bl	800b67c <xTaskRemoveFromEventList>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d012      	beq.n	800a474 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a44e:	4b0d      	ldr	r3, [pc, #52]	@ (800a484 <xQueueGenericReset+0xd0>)
 800a450:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a454:	601a      	str	r2, [r3, #0]
 800a456:	f3bf 8f4f 	dsb	sy
 800a45a:	f3bf 8f6f 	isb	sy
 800a45e:	e009      	b.n	800a474 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	3310      	adds	r3, #16
 800a464:	4618      	mov	r0, r3
 800a466:	f7ff fef1 	bl	800a24c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	3324      	adds	r3, #36	@ 0x24
 800a46e:	4618      	mov	r0, r3
 800a470:	f7ff feec 	bl	800a24c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a474:	f002 f88a 	bl	800c58c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a478:	2301      	movs	r3, #1
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3710      	adds	r7, #16
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	e000ed04 	.word	0xe000ed04

0800a488 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b08e      	sub	sp, #56	@ 0x38
 800a48c:	af02      	add	r7, sp, #8
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	607a      	str	r2, [r7, #4]
 800a494:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d10b      	bne.n	800a4b4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a49c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a0:	f383 8811 	msr	BASEPRI, r3
 800a4a4:	f3bf 8f6f 	isb	sy
 800a4a8:	f3bf 8f4f 	dsb	sy
 800a4ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a4ae:	bf00      	nop
 800a4b0:	bf00      	nop
 800a4b2:	e7fd      	b.n	800a4b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d10b      	bne.n	800a4d2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a4ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4be:	f383 8811 	msr	BASEPRI, r3
 800a4c2:	f3bf 8f6f 	isb	sy
 800a4c6:	f3bf 8f4f 	dsb	sy
 800a4ca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a4cc:	bf00      	nop
 800a4ce:	bf00      	nop
 800a4d0:	e7fd      	b.n	800a4ce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d002      	beq.n	800a4de <xQueueGenericCreateStatic+0x56>
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d001      	beq.n	800a4e2 <xQueueGenericCreateStatic+0x5a>
 800a4de:	2301      	movs	r3, #1
 800a4e0:	e000      	b.n	800a4e4 <xQueueGenericCreateStatic+0x5c>
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d10b      	bne.n	800a500 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a4e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ec:	f383 8811 	msr	BASEPRI, r3
 800a4f0:	f3bf 8f6f 	isb	sy
 800a4f4:	f3bf 8f4f 	dsb	sy
 800a4f8:	623b      	str	r3, [r7, #32]
}
 800a4fa:	bf00      	nop
 800a4fc:	bf00      	nop
 800a4fe:	e7fd      	b.n	800a4fc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d102      	bne.n	800a50c <xQueueGenericCreateStatic+0x84>
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d101      	bne.n	800a510 <xQueueGenericCreateStatic+0x88>
 800a50c:	2301      	movs	r3, #1
 800a50e:	e000      	b.n	800a512 <xQueueGenericCreateStatic+0x8a>
 800a510:	2300      	movs	r3, #0
 800a512:	2b00      	cmp	r3, #0
 800a514:	d10b      	bne.n	800a52e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a51a:	f383 8811 	msr	BASEPRI, r3
 800a51e:	f3bf 8f6f 	isb	sy
 800a522:	f3bf 8f4f 	dsb	sy
 800a526:	61fb      	str	r3, [r7, #28]
}
 800a528:	bf00      	nop
 800a52a:	bf00      	nop
 800a52c:	e7fd      	b.n	800a52a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a52e:	2350      	movs	r3, #80	@ 0x50
 800a530:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	2b50      	cmp	r3, #80	@ 0x50
 800a536:	d00b      	beq.n	800a550 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a53c:	f383 8811 	msr	BASEPRI, r3
 800a540:	f3bf 8f6f 	isb	sy
 800a544:	f3bf 8f4f 	dsb	sy
 800a548:	61bb      	str	r3, [r7, #24]
}
 800a54a:	bf00      	nop
 800a54c:	bf00      	nop
 800a54e:	e7fd      	b.n	800a54c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a550:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d00d      	beq.n	800a578 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a55c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a55e:	2201      	movs	r2, #1
 800a560:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a564:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a56a:	9300      	str	r3, [sp, #0]
 800a56c:	4613      	mov	r3, r2
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	68b9      	ldr	r1, [r7, #8]
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f000 f805 	bl	800a582 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3730      	adds	r7, #48	@ 0x30
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}

0800a582 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a582:	b580      	push	{r7, lr}
 800a584:	b084      	sub	sp, #16
 800a586:	af00      	add	r7, sp, #0
 800a588:	60f8      	str	r0, [r7, #12]
 800a58a:	60b9      	str	r1, [r7, #8]
 800a58c:	607a      	str	r2, [r7, #4]
 800a58e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d103      	bne.n	800a59e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a596:	69bb      	ldr	r3, [r7, #24]
 800a598:	69ba      	ldr	r2, [r7, #24]
 800a59a:	601a      	str	r2, [r3, #0]
 800a59c:	e002      	b.n	800a5a4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a59e:	69bb      	ldr	r3, [r7, #24]
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a5a4:	69bb      	ldr	r3, [r7, #24]
 800a5a6:	68fa      	ldr	r2, [r7, #12]
 800a5a8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	68ba      	ldr	r2, [r7, #8]
 800a5ae:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a5b0:	2101      	movs	r1, #1
 800a5b2:	69b8      	ldr	r0, [r7, #24]
 800a5b4:	f7ff fefe 	bl	800a3b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	78fa      	ldrb	r2, [r7, #3]
 800a5bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a5c0:	bf00      	nop
 800a5c2:	3710      	adds	r7, #16
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b08e      	sub	sp, #56	@ 0x38
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	607a      	str	r2, [r7, #4]
 800a5d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d10b      	bne.n	800a5fc <xQueueGenericSend+0x34>
	__asm volatile
 800a5e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5e8:	f383 8811 	msr	BASEPRI, r3
 800a5ec:	f3bf 8f6f 	isb	sy
 800a5f0:	f3bf 8f4f 	dsb	sy
 800a5f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a5f6:	bf00      	nop
 800a5f8:	bf00      	nop
 800a5fa:	e7fd      	b.n	800a5f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d103      	bne.n	800a60a <xQueueGenericSend+0x42>
 800a602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a606:	2b00      	cmp	r3, #0
 800a608:	d101      	bne.n	800a60e <xQueueGenericSend+0x46>
 800a60a:	2301      	movs	r3, #1
 800a60c:	e000      	b.n	800a610 <xQueueGenericSend+0x48>
 800a60e:	2300      	movs	r3, #0
 800a610:	2b00      	cmp	r3, #0
 800a612:	d10b      	bne.n	800a62c <xQueueGenericSend+0x64>
	__asm volatile
 800a614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a618:	f383 8811 	msr	BASEPRI, r3
 800a61c:	f3bf 8f6f 	isb	sy
 800a620:	f3bf 8f4f 	dsb	sy
 800a624:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a626:	bf00      	nop
 800a628:	bf00      	nop
 800a62a:	e7fd      	b.n	800a628 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	2b02      	cmp	r3, #2
 800a630:	d103      	bne.n	800a63a <xQueueGenericSend+0x72>
 800a632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a636:	2b01      	cmp	r3, #1
 800a638:	d101      	bne.n	800a63e <xQueueGenericSend+0x76>
 800a63a:	2301      	movs	r3, #1
 800a63c:	e000      	b.n	800a640 <xQueueGenericSend+0x78>
 800a63e:	2300      	movs	r3, #0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d10b      	bne.n	800a65c <xQueueGenericSend+0x94>
	__asm volatile
 800a644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a648:	f383 8811 	msr	BASEPRI, r3
 800a64c:	f3bf 8f6f 	isb	sy
 800a650:	f3bf 8f4f 	dsb	sy
 800a654:	623b      	str	r3, [r7, #32]
}
 800a656:	bf00      	nop
 800a658:	bf00      	nop
 800a65a:	e7fd      	b.n	800a658 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a65c:	f001 f9f6 	bl	800ba4c <xTaskGetSchedulerState>
 800a660:	4603      	mov	r3, r0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d102      	bne.n	800a66c <xQueueGenericSend+0xa4>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d101      	bne.n	800a670 <xQueueGenericSend+0xa8>
 800a66c:	2301      	movs	r3, #1
 800a66e:	e000      	b.n	800a672 <xQueueGenericSend+0xaa>
 800a670:	2300      	movs	r3, #0
 800a672:	2b00      	cmp	r3, #0
 800a674:	d10b      	bne.n	800a68e <xQueueGenericSend+0xc6>
	__asm volatile
 800a676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a67a:	f383 8811 	msr	BASEPRI, r3
 800a67e:	f3bf 8f6f 	isb	sy
 800a682:	f3bf 8f4f 	dsb	sy
 800a686:	61fb      	str	r3, [r7, #28]
}
 800a688:	bf00      	nop
 800a68a:	bf00      	nop
 800a68c:	e7fd      	b.n	800a68a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a68e:	f001 ff4b 	bl	800c528 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a694:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d302      	bcc.n	800a6a4 <xQueueGenericSend+0xdc>
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	2b02      	cmp	r3, #2
 800a6a2:	d129      	bne.n	800a6f8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a6a4:	683a      	ldr	r2, [r7, #0]
 800a6a6:	68b9      	ldr	r1, [r7, #8]
 800a6a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a6aa:	f000 fa0f 	bl	800aacc <prvCopyDataToQueue>
 800a6ae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d010      	beq.n	800a6da <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ba:	3324      	adds	r3, #36	@ 0x24
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f000 ffdd 	bl	800b67c <xTaskRemoveFromEventList>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d013      	beq.n	800a6f0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a6c8:	4b3f      	ldr	r3, [pc, #252]	@ (800a7c8 <xQueueGenericSend+0x200>)
 800a6ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6ce:	601a      	str	r2, [r3, #0]
 800a6d0:	f3bf 8f4f 	dsb	sy
 800a6d4:	f3bf 8f6f 	isb	sy
 800a6d8:	e00a      	b.n	800a6f0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a6da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d007      	beq.n	800a6f0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a6e0:	4b39      	ldr	r3, [pc, #228]	@ (800a7c8 <xQueueGenericSend+0x200>)
 800a6e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6e6:	601a      	str	r2, [r3, #0]
 800a6e8:	f3bf 8f4f 	dsb	sy
 800a6ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a6f0:	f001 ff4c 	bl	800c58c <vPortExitCritical>
				return pdPASS;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	e063      	b.n	800a7c0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d103      	bne.n	800a706 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a6fe:	f001 ff45 	bl	800c58c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a702:	2300      	movs	r3, #0
 800a704:	e05c      	b.n	800a7c0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d106      	bne.n	800a71a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a70c:	f107 0314 	add.w	r3, r7, #20
 800a710:	4618      	mov	r0, r3
 800a712:	f001 f83f 	bl	800b794 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a716:	2301      	movs	r3, #1
 800a718:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a71a:	f001 ff37 	bl	800c58c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a71e:	f000 fd87 	bl	800b230 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a722:	f001 ff01 	bl	800c528 <vPortEnterCritical>
 800a726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a728:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a72c:	b25b      	sxtb	r3, r3
 800a72e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a732:	d103      	bne.n	800a73c <xQueueGenericSend+0x174>
 800a734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a736:	2200      	movs	r2, #0
 800a738:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a73c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a73e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a742:	b25b      	sxtb	r3, r3
 800a744:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a748:	d103      	bne.n	800a752 <xQueueGenericSend+0x18a>
 800a74a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a74c:	2200      	movs	r2, #0
 800a74e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a752:	f001 ff1b 	bl	800c58c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a756:	1d3a      	adds	r2, r7, #4
 800a758:	f107 0314 	add.w	r3, r7, #20
 800a75c:	4611      	mov	r1, r2
 800a75e:	4618      	mov	r0, r3
 800a760:	f001 f82e 	bl	800b7c0 <xTaskCheckForTimeOut>
 800a764:	4603      	mov	r3, r0
 800a766:	2b00      	cmp	r3, #0
 800a768:	d124      	bne.n	800a7b4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a76a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a76c:	f000 faa6 	bl	800acbc <prvIsQueueFull>
 800a770:	4603      	mov	r3, r0
 800a772:	2b00      	cmp	r3, #0
 800a774:	d018      	beq.n	800a7a8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a778:	3310      	adds	r3, #16
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	4611      	mov	r1, r2
 800a77e:	4618      	mov	r0, r3
 800a780:	f000 ff2a 	bl	800b5d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a784:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a786:	f000 fa31 	bl	800abec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a78a:	f000 fd5f 	bl	800b24c <xTaskResumeAll>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	f47f af7c 	bne.w	800a68e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a796:	4b0c      	ldr	r3, [pc, #48]	@ (800a7c8 <xQueueGenericSend+0x200>)
 800a798:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a79c:	601a      	str	r2, [r3, #0]
 800a79e:	f3bf 8f4f 	dsb	sy
 800a7a2:	f3bf 8f6f 	isb	sy
 800a7a6:	e772      	b.n	800a68e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a7a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7aa:	f000 fa1f 	bl	800abec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7ae:	f000 fd4d 	bl	800b24c <xTaskResumeAll>
 800a7b2:	e76c      	b.n	800a68e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a7b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7b6:	f000 fa19 	bl	800abec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7ba:	f000 fd47 	bl	800b24c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a7be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3738      	adds	r7, #56	@ 0x38
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	e000ed04 	.word	0xe000ed04

0800a7cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b090      	sub	sp, #64	@ 0x40
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	60b9      	str	r1, [r7, #8]
 800a7d6:	607a      	str	r2, [r7, #4]
 800a7d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a7de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d10b      	bne.n	800a7fc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a7e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7e8:	f383 8811 	msr	BASEPRI, r3
 800a7ec:	f3bf 8f6f 	isb	sy
 800a7f0:	f3bf 8f4f 	dsb	sy
 800a7f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a7f6:	bf00      	nop
 800a7f8:	bf00      	nop
 800a7fa:	e7fd      	b.n	800a7f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d103      	bne.n	800a80a <xQueueGenericSendFromISR+0x3e>
 800a802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a806:	2b00      	cmp	r3, #0
 800a808:	d101      	bne.n	800a80e <xQueueGenericSendFromISR+0x42>
 800a80a:	2301      	movs	r3, #1
 800a80c:	e000      	b.n	800a810 <xQueueGenericSendFromISR+0x44>
 800a80e:	2300      	movs	r3, #0
 800a810:	2b00      	cmp	r3, #0
 800a812:	d10b      	bne.n	800a82c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a818:	f383 8811 	msr	BASEPRI, r3
 800a81c:	f3bf 8f6f 	isb	sy
 800a820:	f3bf 8f4f 	dsb	sy
 800a824:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a826:	bf00      	nop
 800a828:	bf00      	nop
 800a82a:	e7fd      	b.n	800a828 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	2b02      	cmp	r3, #2
 800a830:	d103      	bne.n	800a83a <xQueueGenericSendFromISR+0x6e>
 800a832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a836:	2b01      	cmp	r3, #1
 800a838:	d101      	bne.n	800a83e <xQueueGenericSendFromISR+0x72>
 800a83a:	2301      	movs	r3, #1
 800a83c:	e000      	b.n	800a840 <xQueueGenericSendFromISR+0x74>
 800a83e:	2300      	movs	r3, #0
 800a840:	2b00      	cmp	r3, #0
 800a842:	d10b      	bne.n	800a85c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a848:	f383 8811 	msr	BASEPRI, r3
 800a84c:	f3bf 8f6f 	isb	sy
 800a850:	f3bf 8f4f 	dsb	sy
 800a854:	623b      	str	r3, [r7, #32]
}
 800a856:	bf00      	nop
 800a858:	bf00      	nop
 800a85a:	e7fd      	b.n	800a858 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a85c:	f001 ff44 	bl	800c6e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a860:	f3ef 8211 	mrs	r2, BASEPRI
 800a864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a868:	f383 8811 	msr	BASEPRI, r3
 800a86c:	f3bf 8f6f 	isb	sy
 800a870:	f3bf 8f4f 	dsb	sy
 800a874:	61fa      	str	r2, [r7, #28]
 800a876:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a878:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a87a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a87c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a87e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a884:	429a      	cmp	r2, r3
 800a886:	d302      	bcc.n	800a88e <xQueueGenericSendFromISR+0xc2>
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	2b02      	cmp	r3, #2
 800a88c:	d12f      	bne.n	800a8ee <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a88e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a890:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a894:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a89a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a89c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a89e:	683a      	ldr	r2, [r7, #0]
 800a8a0:	68b9      	ldr	r1, [r7, #8]
 800a8a2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a8a4:	f000 f912 	bl	800aacc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a8a8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a8ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a8b0:	d112      	bne.n	800a8d8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d016      	beq.n	800a8e8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8bc:	3324      	adds	r3, #36	@ 0x24
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f000 fedc 	bl	800b67c <xTaskRemoveFromEventList>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d00e      	beq.n	800a8e8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d00b      	beq.n	800a8e8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	601a      	str	r2, [r3, #0]
 800a8d6:	e007      	b.n	800a8e8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a8d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a8dc:	3301      	adds	r3, #1
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	b25a      	sxtb	r2, r3
 800a8e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a8ec:	e001      	b.n	800a8f2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8f4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a8fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a8fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a900:	4618      	mov	r0, r3
 800a902:	3740      	adds	r7, #64	@ 0x40
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b08c      	sub	sp, #48	@ 0x30
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a914:	2300      	movs	r3, #0
 800a916:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a91c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d10b      	bne.n	800a93a <xQueueReceive+0x32>
	__asm volatile
 800a922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a926:	f383 8811 	msr	BASEPRI, r3
 800a92a:	f3bf 8f6f 	isb	sy
 800a92e:	f3bf 8f4f 	dsb	sy
 800a932:	623b      	str	r3, [r7, #32]
}
 800a934:	bf00      	nop
 800a936:	bf00      	nop
 800a938:	e7fd      	b.n	800a936 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d103      	bne.n	800a948 <xQueueReceive+0x40>
 800a940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a944:	2b00      	cmp	r3, #0
 800a946:	d101      	bne.n	800a94c <xQueueReceive+0x44>
 800a948:	2301      	movs	r3, #1
 800a94a:	e000      	b.n	800a94e <xQueueReceive+0x46>
 800a94c:	2300      	movs	r3, #0
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d10b      	bne.n	800a96a <xQueueReceive+0x62>
	__asm volatile
 800a952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a956:	f383 8811 	msr	BASEPRI, r3
 800a95a:	f3bf 8f6f 	isb	sy
 800a95e:	f3bf 8f4f 	dsb	sy
 800a962:	61fb      	str	r3, [r7, #28]
}
 800a964:	bf00      	nop
 800a966:	bf00      	nop
 800a968:	e7fd      	b.n	800a966 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a96a:	f001 f86f 	bl	800ba4c <xTaskGetSchedulerState>
 800a96e:	4603      	mov	r3, r0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d102      	bne.n	800a97a <xQueueReceive+0x72>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d101      	bne.n	800a97e <xQueueReceive+0x76>
 800a97a:	2301      	movs	r3, #1
 800a97c:	e000      	b.n	800a980 <xQueueReceive+0x78>
 800a97e:	2300      	movs	r3, #0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d10b      	bne.n	800a99c <xQueueReceive+0x94>
	__asm volatile
 800a984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a988:	f383 8811 	msr	BASEPRI, r3
 800a98c:	f3bf 8f6f 	isb	sy
 800a990:	f3bf 8f4f 	dsb	sy
 800a994:	61bb      	str	r3, [r7, #24]
}
 800a996:	bf00      	nop
 800a998:	bf00      	nop
 800a99a:	e7fd      	b.n	800a998 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a99c:	f001 fdc4 	bl	800c528 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9a4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d01f      	beq.n	800a9ec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a9ac:	68b9      	ldr	r1, [r7, #8]
 800a9ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a9b0:	f000 f8f6 	bl	800aba0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a9b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b6:	1e5a      	subs	r2, r3, #1
 800a9b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9be:	691b      	ldr	r3, [r3, #16]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d00f      	beq.n	800a9e4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9c6:	3310      	adds	r3, #16
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f000 fe57 	bl	800b67c <xTaskRemoveFromEventList>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d007      	beq.n	800a9e4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a9d4:	4b3c      	ldr	r3, [pc, #240]	@ (800aac8 <xQueueReceive+0x1c0>)
 800a9d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9da:	601a      	str	r2, [r3, #0]
 800a9dc:	f3bf 8f4f 	dsb	sy
 800a9e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a9e4:	f001 fdd2 	bl	800c58c <vPortExitCritical>
				return pdPASS;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	e069      	b.n	800aac0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d103      	bne.n	800a9fa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a9f2:	f001 fdcb 	bl	800c58c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	e062      	b.n	800aac0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d106      	bne.n	800aa0e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa00:	f107 0310 	add.w	r3, r7, #16
 800aa04:	4618      	mov	r0, r3
 800aa06:	f000 fec5 	bl	800b794 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa0e:	f001 fdbd 	bl	800c58c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa12:	f000 fc0d 	bl	800b230 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa16:	f001 fd87 	bl	800c528 <vPortEnterCritical>
 800aa1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aa20:	b25b      	sxtb	r3, r3
 800aa22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa26:	d103      	bne.n	800aa30 <xQueueReceive+0x128>
 800aa28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aa36:	b25b      	sxtb	r3, r3
 800aa38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa3c:	d103      	bne.n	800aa46 <xQueueReceive+0x13e>
 800aa3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa40:	2200      	movs	r2, #0
 800aa42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa46:	f001 fda1 	bl	800c58c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa4a:	1d3a      	adds	r2, r7, #4
 800aa4c:	f107 0310 	add.w	r3, r7, #16
 800aa50:	4611      	mov	r1, r2
 800aa52:	4618      	mov	r0, r3
 800aa54:	f000 feb4 	bl	800b7c0 <xTaskCheckForTimeOut>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d123      	bne.n	800aaa6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa60:	f000 f916 	bl	800ac90 <prvIsQueueEmpty>
 800aa64:	4603      	mov	r3, r0
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d017      	beq.n	800aa9a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa6c:	3324      	adds	r3, #36	@ 0x24
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	4611      	mov	r1, r2
 800aa72:	4618      	mov	r0, r3
 800aa74:	f000 fdb0 	bl	800b5d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa7a:	f000 f8b7 	bl	800abec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa7e:	f000 fbe5 	bl	800b24c <xTaskResumeAll>
 800aa82:	4603      	mov	r3, r0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d189      	bne.n	800a99c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800aa88:	4b0f      	ldr	r3, [pc, #60]	@ (800aac8 <xQueueReceive+0x1c0>)
 800aa8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa8e:	601a      	str	r2, [r3, #0]
 800aa90:	f3bf 8f4f 	dsb	sy
 800aa94:	f3bf 8f6f 	isb	sy
 800aa98:	e780      	b.n	800a99c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aa9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa9c:	f000 f8a6 	bl	800abec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aaa0:	f000 fbd4 	bl	800b24c <xTaskResumeAll>
 800aaa4:	e77a      	b.n	800a99c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aaa6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aaa8:	f000 f8a0 	bl	800abec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aaac:	f000 fbce 	bl	800b24c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aab0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aab2:	f000 f8ed 	bl	800ac90 <prvIsQueueEmpty>
 800aab6:	4603      	mov	r3, r0
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	f43f af6f 	beq.w	800a99c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aabe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3730      	adds	r7, #48	@ 0x30
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}
 800aac8:	e000ed04 	.word	0xe000ed04

0800aacc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b086      	sub	sp, #24
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aad8:	2300      	movs	r3, #0
 800aada:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aae0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d10d      	bne.n	800ab06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d14d      	bne.n	800ab8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	689b      	ldr	r3, [r3, #8]
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f000 ffc6 	bl	800ba88 <xTaskPriorityDisinherit>
 800aafc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2200      	movs	r2, #0
 800ab02:	609a      	str	r2, [r3, #8]
 800ab04:	e043      	b.n	800ab8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d119      	bne.n	800ab40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6858      	ldr	r0, [r3, #4]
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab14:	461a      	mov	r2, r3
 800ab16:	68b9      	ldr	r1, [r7, #8]
 800ab18:	f00f fb1f 	bl	801a15a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	685a      	ldr	r2, [r3, #4]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab24:	441a      	add	r2, r3
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	685a      	ldr	r2, [r3, #4]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d32b      	bcc.n	800ab8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681a      	ldr	r2, [r3, #0]
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	605a      	str	r2, [r3, #4]
 800ab3e:	e026      	b.n	800ab8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	68d8      	ldr	r0, [r3, #12]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab48:	461a      	mov	r2, r3
 800ab4a:	68b9      	ldr	r1, [r7, #8]
 800ab4c:	f00f fb05 	bl	801a15a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	68da      	ldr	r2, [r3, #12]
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab58:	425b      	negs	r3, r3
 800ab5a:	441a      	add	r2, r3
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	68da      	ldr	r2, [r3, #12]
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d207      	bcs.n	800ab7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	689a      	ldr	r2, [r3, #8]
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab74:	425b      	negs	r3, r3
 800ab76:	441a      	add	r2, r3
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2b02      	cmp	r3, #2
 800ab80:	d105      	bne.n	800ab8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d002      	beq.n	800ab8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	3b01      	subs	r3, #1
 800ab8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	1c5a      	adds	r2, r3, #1
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ab96:	697b      	ldr	r3, [r7, #20]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3718      	adds	r7, #24
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d018      	beq.n	800abe4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	68da      	ldr	r2, [r3, #12]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abba:	441a      	add	r2, r3
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	68da      	ldr	r2, [r3, #12]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	689b      	ldr	r3, [r3, #8]
 800abc8:	429a      	cmp	r2, r3
 800abca:	d303      	bcc.n	800abd4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	68d9      	ldr	r1, [r3, #12]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abdc:	461a      	mov	r2, r3
 800abde:	6838      	ldr	r0, [r7, #0]
 800abe0:	f00f fabb 	bl	801a15a <memcpy>
	}
}
 800abe4:	bf00      	nop
 800abe6:	3708      	adds	r7, #8
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}

0800abec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b084      	sub	sp, #16
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800abf4:	f001 fc98 	bl	800c528 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800abfe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac00:	e011      	b.n	800ac26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d012      	beq.n	800ac30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	3324      	adds	r3, #36	@ 0x24
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f000 fd34 	bl	800b67c <xTaskRemoveFromEventList>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d001      	beq.n	800ac1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ac1a:	f000 fe35 	bl	800b888 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ac1e:	7bfb      	ldrb	r3, [r7, #15]
 800ac20:	3b01      	subs	r3, #1
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	dce9      	bgt.n	800ac02 <prvUnlockQueue+0x16>
 800ac2e:	e000      	b.n	800ac32 <prvUnlockQueue+0x46>
					break;
 800ac30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	22ff      	movs	r2, #255	@ 0xff
 800ac36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ac3a:	f001 fca7 	bl	800c58c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ac3e:	f001 fc73 	bl	800c528 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac4a:	e011      	b.n	800ac70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	691b      	ldr	r3, [r3, #16]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d012      	beq.n	800ac7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	3310      	adds	r3, #16
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f000 fd0f 	bl	800b67c <xTaskRemoveFromEventList>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d001      	beq.n	800ac68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ac64:	f000 fe10 	bl	800b888 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ac68:	7bbb      	ldrb	r3, [r7, #14]
 800ac6a:	3b01      	subs	r3, #1
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	dce9      	bgt.n	800ac4c <prvUnlockQueue+0x60>
 800ac78:	e000      	b.n	800ac7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ac7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	22ff      	movs	r2, #255	@ 0xff
 800ac80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ac84:	f001 fc82 	bl	800c58c <vPortExitCritical>
}
 800ac88:	bf00      	nop
 800ac8a:	3710      	adds	r7, #16
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac98:	f001 fc46 	bl	800c528 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d102      	bne.n	800acaa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aca4:	2301      	movs	r3, #1
 800aca6:	60fb      	str	r3, [r7, #12]
 800aca8:	e001      	b.n	800acae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800acaa:	2300      	movs	r3, #0
 800acac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800acae:	f001 fc6d 	bl	800c58c <vPortExitCritical>

	return xReturn;
 800acb2:	68fb      	ldr	r3, [r7, #12]
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3710      	adds	r7, #16
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800acc4:	f001 fc30 	bl	800c528 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d102      	bne.n	800acda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800acd4:	2301      	movs	r3, #1
 800acd6:	60fb      	str	r3, [r7, #12]
 800acd8:	e001      	b.n	800acde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800acda:	2300      	movs	r3, #0
 800acdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800acde:	f001 fc55 	bl	800c58c <vPortExitCritical>

	return xReturn;
 800ace2:	68fb      	ldr	r3, [r7, #12]
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3710      	adds	r7, #16
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800acec:	b480      	push	{r7}
 800acee:	b085      	sub	sp, #20
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800acf6:	2300      	movs	r3, #0
 800acf8:	60fb      	str	r3, [r7, #12]
 800acfa:	e014      	b.n	800ad26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800acfc:	4a0f      	ldr	r2, [pc, #60]	@ (800ad3c <vQueueAddToRegistry+0x50>)
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d10b      	bne.n	800ad20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ad08:	490c      	ldr	r1, [pc, #48]	@ (800ad3c <vQueueAddToRegistry+0x50>)
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	683a      	ldr	r2, [r7, #0]
 800ad0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ad12:	4a0a      	ldr	r2, [pc, #40]	@ (800ad3c <vQueueAddToRegistry+0x50>)
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	00db      	lsls	r3, r3, #3
 800ad18:	4413      	add	r3, r2
 800ad1a:	687a      	ldr	r2, [r7, #4]
 800ad1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ad1e:	e006      	b.n	800ad2e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	3301      	adds	r3, #1
 800ad24:	60fb      	str	r3, [r7, #12]
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2b07      	cmp	r3, #7
 800ad2a:	d9e7      	bls.n	800acfc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ad2c:	bf00      	nop
 800ad2e:	bf00      	nop
 800ad30:	3714      	adds	r7, #20
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr
 800ad3a:	bf00      	nop
 800ad3c:	200051a4 	.word	0x200051a4

0800ad40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b086      	sub	sp, #24
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	60f8      	str	r0, [r7, #12]
 800ad48:	60b9      	str	r1, [r7, #8]
 800ad4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ad50:	f001 fbea 	bl	800c528 <vPortEnterCritical>
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ad5a:	b25b      	sxtb	r3, r3
 800ad5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad60:	d103      	bne.n	800ad6a <vQueueWaitForMessageRestricted+0x2a>
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	2200      	movs	r2, #0
 800ad66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ad70:	b25b      	sxtb	r3, r3
 800ad72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad76:	d103      	bne.n	800ad80 <vQueueWaitForMessageRestricted+0x40>
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ad80:	f001 fc04 	bl	800c58c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d106      	bne.n	800ad9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	3324      	adds	r3, #36	@ 0x24
 800ad90:	687a      	ldr	r2, [r7, #4]
 800ad92:	68b9      	ldr	r1, [r7, #8]
 800ad94:	4618      	mov	r0, r3
 800ad96:	f000 fc45 	bl	800b624 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ad9a:	6978      	ldr	r0, [r7, #20]
 800ad9c:	f7ff ff26 	bl	800abec <prvUnlockQueue>
	}
 800ada0:	bf00      	nop
 800ada2:	3718      	adds	r7, #24
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b08e      	sub	sp, #56	@ 0x38
 800adac:	af04      	add	r7, sp, #16
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	607a      	str	r2, [r7, #4]
 800adb4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800adb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d10b      	bne.n	800add4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800adbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adc0:	f383 8811 	msr	BASEPRI, r3
 800adc4:	f3bf 8f6f 	isb	sy
 800adc8:	f3bf 8f4f 	dsb	sy
 800adcc:	623b      	str	r3, [r7, #32]
}
 800adce:	bf00      	nop
 800add0:	bf00      	nop
 800add2:	e7fd      	b.n	800add0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800add4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800add6:	2b00      	cmp	r3, #0
 800add8:	d10b      	bne.n	800adf2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800adda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adde:	f383 8811 	msr	BASEPRI, r3
 800ade2:	f3bf 8f6f 	isb	sy
 800ade6:	f3bf 8f4f 	dsb	sy
 800adea:	61fb      	str	r3, [r7, #28]
}
 800adec:	bf00      	nop
 800adee:	bf00      	nop
 800adf0:	e7fd      	b.n	800adee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800adf2:	235c      	movs	r3, #92	@ 0x5c
 800adf4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	2b5c      	cmp	r3, #92	@ 0x5c
 800adfa:	d00b      	beq.n	800ae14 <xTaskCreateStatic+0x6c>
	__asm volatile
 800adfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae00:	f383 8811 	msr	BASEPRI, r3
 800ae04:	f3bf 8f6f 	isb	sy
 800ae08:	f3bf 8f4f 	dsb	sy
 800ae0c:	61bb      	str	r3, [r7, #24]
}
 800ae0e:	bf00      	nop
 800ae10:	bf00      	nop
 800ae12:	e7fd      	b.n	800ae10 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ae14:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ae16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d01e      	beq.n	800ae5a <xTaskCreateStatic+0xb2>
 800ae1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d01b      	beq.n	800ae5a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae24:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ae26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ae2a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ae2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae2e:	2202      	movs	r2, #2
 800ae30:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ae34:	2300      	movs	r3, #0
 800ae36:	9303      	str	r3, [sp, #12]
 800ae38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae3a:	9302      	str	r3, [sp, #8]
 800ae3c:	f107 0314 	add.w	r3, r7, #20
 800ae40:	9301      	str	r3, [sp, #4]
 800ae42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae44:	9300      	str	r3, [sp, #0]
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	68b9      	ldr	r1, [r7, #8]
 800ae4c:	68f8      	ldr	r0, [r7, #12]
 800ae4e:	f000 f850 	bl	800aef2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae52:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ae54:	f000 f8de 	bl	800b014 <prvAddNewTaskToReadyList>
 800ae58:	e001      	b.n	800ae5e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ae5e:	697b      	ldr	r3, [r7, #20]
	}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3728      	adds	r7, #40	@ 0x28
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b08c      	sub	sp, #48	@ 0x30
 800ae6c:	af04      	add	r7, sp, #16
 800ae6e:	60f8      	str	r0, [r7, #12]
 800ae70:	60b9      	str	r1, [r7, #8]
 800ae72:	603b      	str	r3, [r7, #0]
 800ae74:	4613      	mov	r3, r2
 800ae76:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ae78:	88fb      	ldrh	r3, [r7, #6]
 800ae7a:	009b      	lsls	r3, r3, #2
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f001 fc75 	bl	800c76c <pvPortMalloc>
 800ae82:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d00e      	beq.n	800aea8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ae8a:	205c      	movs	r0, #92	@ 0x5c
 800ae8c:	f001 fc6e 	bl	800c76c <pvPortMalloc>
 800ae90:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ae92:	69fb      	ldr	r3, [r7, #28]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d003      	beq.n	800aea0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ae98:	69fb      	ldr	r3, [r7, #28]
 800ae9a:	697a      	ldr	r2, [r7, #20]
 800ae9c:	631a      	str	r2, [r3, #48]	@ 0x30
 800ae9e:	e005      	b.n	800aeac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aea0:	6978      	ldr	r0, [r7, #20]
 800aea2:	f001 fd31 	bl	800c908 <vPortFree>
 800aea6:	e001      	b.n	800aeac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aeac:	69fb      	ldr	r3, [r7, #28]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d017      	beq.n	800aee2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aeb2:	69fb      	ldr	r3, [r7, #28]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aeba:	88fa      	ldrh	r2, [r7, #6]
 800aebc:	2300      	movs	r3, #0
 800aebe:	9303      	str	r3, [sp, #12]
 800aec0:	69fb      	ldr	r3, [r7, #28]
 800aec2:	9302      	str	r3, [sp, #8]
 800aec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aec6:	9301      	str	r3, [sp, #4]
 800aec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeca:	9300      	str	r3, [sp, #0]
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	68b9      	ldr	r1, [r7, #8]
 800aed0:	68f8      	ldr	r0, [r7, #12]
 800aed2:	f000 f80e 	bl	800aef2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aed6:	69f8      	ldr	r0, [r7, #28]
 800aed8:	f000 f89c 	bl	800b014 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aedc:	2301      	movs	r3, #1
 800aede:	61bb      	str	r3, [r7, #24]
 800aee0:	e002      	b.n	800aee8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aee2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aee6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aee8:	69bb      	ldr	r3, [r7, #24]
	}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3720      	adds	r7, #32
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b088      	sub	sp, #32
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	60f8      	str	r0, [r7, #12]
 800aefa:	60b9      	str	r1, [r7, #8]
 800aefc:	607a      	str	r2, [r7, #4]
 800aefe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800af00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af02:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	009b      	lsls	r3, r3, #2
 800af08:	461a      	mov	r2, r3
 800af0a:	21a5      	movs	r1, #165	@ 0xa5
 800af0c:	f00f f85c 	bl	8019fc8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800af10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800af1a:	3b01      	subs	r3, #1
 800af1c:	009b      	lsls	r3, r3, #2
 800af1e:	4413      	add	r3, r2
 800af20:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800af22:	69bb      	ldr	r3, [r7, #24]
 800af24:	f023 0307 	bic.w	r3, r3, #7
 800af28:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800af2a:	69bb      	ldr	r3, [r7, #24]
 800af2c:	f003 0307 	and.w	r3, r3, #7
 800af30:	2b00      	cmp	r3, #0
 800af32:	d00b      	beq.n	800af4c <prvInitialiseNewTask+0x5a>
	__asm volatile
 800af34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af38:	f383 8811 	msr	BASEPRI, r3
 800af3c:	f3bf 8f6f 	isb	sy
 800af40:	f3bf 8f4f 	dsb	sy
 800af44:	617b      	str	r3, [r7, #20]
}
 800af46:	bf00      	nop
 800af48:	bf00      	nop
 800af4a:	e7fd      	b.n	800af48 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d01f      	beq.n	800af92 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af52:	2300      	movs	r3, #0
 800af54:	61fb      	str	r3, [r7, #28]
 800af56:	e012      	b.n	800af7e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800af58:	68ba      	ldr	r2, [r7, #8]
 800af5a:	69fb      	ldr	r3, [r7, #28]
 800af5c:	4413      	add	r3, r2
 800af5e:	7819      	ldrb	r1, [r3, #0]
 800af60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af62:	69fb      	ldr	r3, [r7, #28]
 800af64:	4413      	add	r3, r2
 800af66:	3334      	adds	r3, #52	@ 0x34
 800af68:	460a      	mov	r2, r1
 800af6a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800af6c:	68ba      	ldr	r2, [r7, #8]
 800af6e:	69fb      	ldr	r3, [r7, #28]
 800af70:	4413      	add	r3, r2
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d006      	beq.n	800af86 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af78:	69fb      	ldr	r3, [r7, #28]
 800af7a:	3301      	adds	r3, #1
 800af7c:	61fb      	str	r3, [r7, #28]
 800af7e:	69fb      	ldr	r3, [r7, #28]
 800af80:	2b0f      	cmp	r3, #15
 800af82:	d9e9      	bls.n	800af58 <prvInitialiseNewTask+0x66>
 800af84:	e000      	b.n	800af88 <prvInitialiseNewTask+0x96>
			{
				break;
 800af86:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800af88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af8a:	2200      	movs	r2, #0
 800af8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800af90:	e003      	b.n	800af9a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800af92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af94:	2200      	movs	r2, #0
 800af96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800af9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af9c:	2b37      	cmp	r3, #55	@ 0x37
 800af9e:	d901      	bls.n	800afa4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800afa0:	2337      	movs	r3, #55	@ 0x37
 800afa2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800afa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800afa8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800afaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800afae:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800afb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb2:	2200      	movs	r2, #0
 800afb4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800afb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb8:	3304      	adds	r3, #4
 800afba:	4618      	mov	r0, r3
 800afbc:	f7ff f966 	bl	800a28c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800afc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afc2:	3318      	adds	r3, #24
 800afc4:	4618      	mov	r0, r3
 800afc6:	f7ff f961 	bl	800a28c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800afca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afd2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800afd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afd8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800afda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afde:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800afe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afe2:	2200      	movs	r2, #0
 800afe4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800afe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afe8:	2200      	movs	r2, #0
 800afea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800afee:	683a      	ldr	r2, [r7, #0]
 800aff0:	68f9      	ldr	r1, [r7, #12]
 800aff2:	69b8      	ldr	r0, [r7, #24]
 800aff4:	f001 f966 	bl	800c2c4 <pxPortInitialiseStack>
 800aff8:	4602      	mov	r2, r0
 800affa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800affc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800affe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b000:	2b00      	cmp	r3, #0
 800b002:	d002      	beq.n	800b00a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b006:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b008:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b00a:	bf00      	nop
 800b00c:	3720      	adds	r7, #32
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}
	...

0800b014 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b01c:	f001 fa84 	bl	800c528 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b020:	4b2d      	ldr	r3, [pc, #180]	@ (800b0d8 <prvAddNewTaskToReadyList+0xc4>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	3301      	adds	r3, #1
 800b026:	4a2c      	ldr	r2, [pc, #176]	@ (800b0d8 <prvAddNewTaskToReadyList+0xc4>)
 800b028:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b02a:	4b2c      	ldr	r3, [pc, #176]	@ (800b0dc <prvAddNewTaskToReadyList+0xc8>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d109      	bne.n	800b046 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b032:	4a2a      	ldr	r2, [pc, #168]	@ (800b0dc <prvAddNewTaskToReadyList+0xc8>)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b038:	4b27      	ldr	r3, [pc, #156]	@ (800b0d8 <prvAddNewTaskToReadyList+0xc4>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	d110      	bne.n	800b062 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b040:	f000 fc46 	bl	800b8d0 <prvInitialiseTaskLists>
 800b044:	e00d      	b.n	800b062 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b046:	4b26      	ldr	r3, [pc, #152]	@ (800b0e0 <prvAddNewTaskToReadyList+0xcc>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d109      	bne.n	800b062 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b04e:	4b23      	ldr	r3, [pc, #140]	@ (800b0dc <prvAddNewTaskToReadyList+0xc8>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b058:	429a      	cmp	r2, r3
 800b05a:	d802      	bhi.n	800b062 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b05c:	4a1f      	ldr	r2, [pc, #124]	@ (800b0dc <prvAddNewTaskToReadyList+0xc8>)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b062:	4b20      	ldr	r3, [pc, #128]	@ (800b0e4 <prvAddNewTaskToReadyList+0xd0>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	3301      	adds	r3, #1
 800b068:	4a1e      	ldr	r2, [pc, #120]	@ (800b0e4 <prvAddNewTaskToReadyList+0xd0>)
 800b06a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b06c:	4b1d      	ldr	r3, [pc, #116]	@ (800b0e4 <prvAddNewTaskToReadyList+0xd0>)
 800b06e:	681a      	ldr	r2, [r3, #0]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b078:	4b1b      	ldr	r3, [pc, #108]	@ (800b0e8 <prvAddNewTaskToReadyList+0xd4>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d903      	bls.n	800b088 <prvAddNewTaskToReadyList+0x74>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b084:	4a18      	ldr	r2, [pc, #96]	@ (800b0e8 <prvAddNewTaskToReadyList+0xd4>)
 800b086:	6013      	str	r3, [r2, #0]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b08c:	4613      	mov	r3, r2
 800b08e:	009b      	lsls	r3, r3, #2
 800b090:	4413      	add	r3, r2
 800b092:	009b      	lsls	r3, r3, #2
 800b094:	4a15      	ldr	r2, [pc, #84]	@ (800b0ec <prvAddNewTaskToReadyList+0xd8>)
 800b096:	441a      	add	r2, r3
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	3304      	adds	r3, #4
 800b09c:	4619      	mov	r1, r3
 800b09e:	4610      	mov	r0, r2
 800b0a0:	f7ff f901 	bl	800a2a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b0a4:	f001 fa72 	bl	800c58c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b0a8:	4b0d      	ldr	r3, [pc, #52]	@ (800b0e0 <prvAddNewTaskToReadyList+0xcc>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d00e      	beq.n	800b0ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b0b0:	4b0a      	ldr	r3, [pc, #40]	@ (800b0dc <prvAddNewTaskToReadyList+0xc8>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d207      	bcs.n	800b0ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b0be:	4b0c      	ldr	r3, [pc, #48]	@ (800b0f0 <prvAddNewTaskToReadyList+0xdc>)
 800b0c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0c4:	601a      	str	r2, [r3, #0]
 800b0c6:	f3bf 8f4f 	dsb	sy
 800b0ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0ce:	bf00      	nop
 800b0d0:	3708      	adds	r7, #8
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
 800b0d6:	bf00      	nop
 800b0d8:	200056b8 	.word	0x200056b8
 800b0dc:	200051e4 	.word	0x200051e4
 800b0e0:	200056c4 	.word	0x200056c4
 800b0e4:	200056d4 	.word	0x200056d4
 800b0e8:	200056c0 	.word	0x200056c0
 800b0ec:	200051e8 	.word	0x200051e8
 800b0f0:	e000ed04 	.word	0xe000ed04

0800b0f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d018      	beq.n	800b138 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b106:	4b14      	ldr	r3, [pc, #80]	@ (800b158 <vTaskDelay+0x64>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d00b      	beq.n	800b126 <vTaskDelay+0x32>
	__asm volatile
 800b10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b112:	f383 8811 	msr	BASEPRI, r3
 800b116:	f3bf 8f6f 	isb	sy
 800b11a:	f3bf 8f4f 	dsb	sy
 800b11e:	60bb      	str	r3, [r7, #8]
}
 800b120:	bf00      	nop
 800b122:	bf00      	nop
 800b124:	e7fd      	b.n	800b122 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b126:	f000 f883 	bl	800b230 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b12a:	2100      	movs	r1, #0
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 fd1b 	bl	800bb68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b132:	f000 f88b 	bl	800b24c <xTaskResumeAll>
 800b136:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d107      	bne.n	800b14e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b13e:	4b07      	ldr	r3, [pc, #28]	@ (800b15c <vTaskDelay+0x68>)
 800b140:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b144:	601a      	str	r2, [r3, #0]
 800b146:	f3bf 8f4f 	dsb	sy
 800b14a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b14e:	bf00      	nop
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	200056e0 	.word	0x200056e0
 800b15c:	e000ed04 	.word	0xe000ed04

0800b160 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b08a      	sub	sp, #40	@ 0x28
 800b164:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b166:	2300      	movs	r3, #0
 800b168:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b16a:	2300      	movs	r3, #0
 800b16c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b16e:	463a      	mov	r2, r7
 800b170:	1d39      	adds	r1, r7, #4
 800b172:	f107 0308 	add.w	r3, r7, #8
 800b176:	4618      	mov	r0, r3
 800b178:	f7ff f834 	bl	800a1e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b17c:	6839      	ldr	r1, [r7, #0]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	68ba      	ldr	r2, [r7, #8]
 800b182:	9202      	str	r2, [sp, #8]
 800b184:	9301      	str	r3, [sp, #4]
 800b186:	2300      	movs	r3, #0
 800b188:	9300      	str	r3, [sp, #0]
 800b18a:	2300      	movs	r3, #0
 800b18c:	460a      	mov	r2, r1
 800b18e:	4922      	ldr	r1, [pc, #136]	@ (800b218 <vTaskStartScheduler+0xb8>)
 800b190:	4822      	ldr	r0, [pc, #136]	@ (800b21c <vTaskStartScheduler+0xbc>)
 800b192:	f7ff fe09 	bl	800ada8 <xTaskCreateStatic>
 800b196:	4603      	mov	r3, r0
 800b198:	4a21      	ldr	r2, [pc, #132]	@ (800b220 <vTaskStartScheduler+0xc0>)
 800b19a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b19c:	4b20      	ldr	r3, [pc, #128]	@ (800b220 <vTaskStartScheduler+0xc0>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d002      	beq.n	800b1aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	617b      	str	r3, [r7, #20]
 800b1a8:	e001      	b.n	800b1ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d102      	bne.n	800b1ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b1b4:	f000 fd2c 	bl	800bc10 <xTimerCreateTimerTask>
 800b1b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d116      	bne.n	800b1ee <vTaskStartScheduler+0x8e>
	__asm volatile
 800b1c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1c4:	f383 8811 	msr	BASEPRI, r3
 800b1c8:	f3bf 8f6f 	isb	sy
 800b1cc:	f3bf 8f4f 	dsb	sy
 800b1d0:	613b      	str	r3, [r7, #16]
}
 800b1d2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b1d4:	4b13      	ldr	r3, [pc, #76]	@ (800b224 <vTaskStartScheduler+0xc4>)
 800b1d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b1da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b1dc:	4b12      	ldr	r3, [pc, #72]	@ (800b228 <vTaskStartScheduler+0xc8>)
 800b1de:	2201      	movs	r2, #1
 800b1e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b1e2:	4b12      	ldr	r3, [pc, #72]	@ (800b22c <vTaskStartScheduler+0xcc>)
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b1e8:	f001 f8fa 	bl	800c3e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b1ec:	e00f      	b.n	800b20e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b1f4:	d10b      	bne.n	800b20e <vTaskStartScheduler+0xae>
	__asm volatile
 800b1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1fa:	f383 8811 	msr	BASEPRI, r3
 800b1fe:	f3bf 8f6f 	isb	sy
 800b202:	f3bf 8f4f 	dsb	sy
 800b206:	60fb      	str	r3, [r7, #12]
}
 800b208:	bf00      	nop
 800b20a:	bf00      	nop
 800b20c:	e7fd      	b.n	800b20a <vTaskStartScheduler+0xaa>
}
 800b20e:	bf00      	nop
 800b210:	3718      	adds	r7, #24
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop
 800b218:	0801afd8 	.word	0x0801afd8
 800b21c:	0800b8a1 	.word	0x0800b8a1
 800b220:	200056dc 	.word	0x200056dc
 800b224:	200056d8 	.word	0x200056d8
 800b228:	200056c4 	.word	0x200056c4
 800b22c:	200056bc 	.word	0x200056bc

0800b230 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b230:	b480      	push	{r7}
 800b232:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b234:	4b04      	ldr	r3, [pc, #16]	@ (800b248 <vTaskSuspendAll+0x18>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	3301      	adds	r3, #1
 800b23a:	4a03      	ldr	r2, [pc, #12]	@ (800b248 <vTaskSuspendAll+0x18>)
 800b23c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b23e:	bf00      	nop
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr
 800b248:	200056e0 	.word	0x200056e0

0800b24c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b084      	sub	sp, #16
 800b250:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b252:	2300      	movs	r3, #0
 800b254:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b256:	2300      	movs	r3, #0
 800b258:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b25a:	4b42      	ldr	r3, [pc, #264]	@ (800b364 <xTaskResumeAll+0x118>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d10b      	bne.n	800b27a <xTaskResumeAll+0x2e>
	__asm volatile
 800b262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b266:	f383 8811 	msr	BASEPRI, r3
 800b26a:	f3bf 8f6f 	isb	sy
 800b26e:	f3bf 8f4f 	dsb	sy
 800b272:	603b      	str	r3, [r7, #0]
}
 800b274:	bf00      	nop
 800b276:	bf00      	nop
 800b278:	e7fd      	b.n	800b276 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b27a:	f001 f955 	bl	800c528 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b27e:	4b39      	ldr	r3, [pc, #228]	@ (800b364 <xTaskResumeAll+0x118>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	3b01      	subs	r3, #1
 800b284:	4a37      	ldr	r2, [pc, #220]	@ (800b364 <xTaskResumeAll+0x118>)
 800b286:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b288:	4b36      	ldr	r3, [pc, #216]	@ (800b364 <xTaskResumeAll+0x118>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d162      	bne.n	800b356 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b290:	4b35      	ldr	r3, [pc, #212]	@ (800b368 <xTaskResumeAll+0x11c>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d05e      	beq.n	800b356 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b298:	e02f      	b.n	800b2fa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b29a:	4b34      	ldr	r3, [pc, #208]	@ (800b36c <xTaskResumeAll+0x120>)
 800b29c:	68db      	ldr	r3, [r3, #12]
 800b29e:	68db      	ldr	r3, [r3, #12]
 800b2a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	3318      	adds	r3, #24
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7ff f85a 	bl	800a360 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	3304      	adds	r3, #4
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f7ff f855 	bl	800a360 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2ba:	4b2d      	ldr	r3, [pc, #180]	@ (800b370 <xTaskResumeAll+0x124>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d903      	bls.n	800b2ca <xTaskResumeAll+0x7e>
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2c6:	4a2a      	ldr	r2, [pc, #168]	@ (800b370 <xTaskResumeAll+0x124>)
 800b2c8:	6013      	str	r3, [r2, #0]
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2ce:	4613      	mov	r3, r2
 800b2d0:	009b      	lsls	r3, r3, #2
 800b2d2:	4413      	add	r3, r2
 800b2d4:	009b      	lsls	r3, r3, #2
 800b2d6:	4a27      	ldr	r2, [pc, #156]	@ (800b374 <xTaskResumeAll+0x128>)
 800b2d8:	441a      	add	r2, r3
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	3304      	adds	r3, #4
 800b2de:	4619      	mov	r1, r3
 800b2e0:	4610      	mov	r0, r2
 800b2e2:	f7fe ffe0 	bl	800a2a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2ea:	4b23      	ldr	r3, [pc, #140]	@ (800b378 <xTaskResumeAll+0x12c>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d302      	bcc.n	800b2fa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b2f4:	4b21      	ldr	r3, [pc, #132]	@ (800b37c <xTaskResumeAll+0x130>)
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2fa:	4b1c      	ldr	r3, [pc, #112]	@ (800b36c <xTaskResumeAll+0x120>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d1cb      	bne.n	800b29a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d001      	beq.n	800b30c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b308:	f000 fb80 	bl	800ba0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b30c:	4b1c      	ldr	r3, [pc, #112]	@ (800b380 <xTaskResumeAll+0x134>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d010      	beq.n	800b33a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b318:	f000 f846 	bl	800b3a8 <xTaskIncrementTick>
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d002      	beq.n	800b328 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b322:	4b16      	ldr	r3, [pc, #88]	@ (800b37c <xTaskResumeAll+0x130>)
 800b324:	2201      	movs	r2, #1
 800b326:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	3b01      	subs	r3, #1
 800b32c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d1f1      	bne.n	800b318 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b334:	4b12      	ldr	r3, [pc, #72]	@ (800b380 <xTaskResumeAll+0x134>)
 800b336:	2200      	movs	r2, #0
 800b338:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b33a:	4b10      	ldr	r3, [pc, #64]	@ (800b37c <xTaskResumeAll+0x130>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d009      	beq.n	800b356 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b342:	2301      	movs	r3, #1
 800b344:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b346:	4b0f      	ldr	r3, [pc, #60]	@ (800b384 <xTaskResumeAll+0x138>)
 800b348:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b34c:	601a      	str	r2, [r3, #0]
 800b34e:	f3bf 8f4f 	dsb	sy
 800b352:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b356:	f001 f919 	bl	800c58c <vPortExitCritical>

	return xAlreadyYielded;
 800b35a:	68bb      	ldr	r3, [r7, #8]
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3710      	adds	r7, #16
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}
 800b364:	200056e0 	.word	0x200056e0
 800b368:	200056b8 	.word	0x200056b8
 800b36c:	20005678 	.word	0x20005678
 800b370:	200056c0 	.word	0x200056c0
 800b374:	200051e8 	.word	0x200051e8
 800b378:	200051e4 	.word	0x200051e4
 800b37c:	200056cc 	.word	0x200056cc
 800b380:	200056c8 	.word	0x200056c8
 800b384:	e000ed04 	.word	0xe000ed04

0800b388 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b388:	b480      	push	{r7}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b38e:	4b05      	ldr	r3, [pc, #20]	@ (800b3a4 <xTaskGetTickCount+0x1c>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b394:	687b      	ldr	r3, [r7, #4]
}
 800b396:	4618      	mov	r0, r3
 800b398:	370c      	adds	r7, #12
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr
 800b3a2:	bf00      	nop
 800b3a4:	200056bc 	.word	0x200056bc

0800b3a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b086      	sub	sp, #24
 800b3ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3b2:	4b4f      	ldr	r3, [pc, #316]	@ (800b4f0 <xTaskIncrementTick+0x148>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	f040 8090 	bne.w	800b4dc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b3bc:	4b4d      	ldr	r3, [pc, #308]	@ (800b4f4 <xTaskIncrementTick+0x14c>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b3c4:	4a4b      	ldr	r2, [pc, #300]	@ (800b4f4 <xTaskIncrementTick+0x14c>)
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d121      	bne.n	800b414 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b3d0:	4b49      	ldr	r3, [pc, #292]	@ (800b4f8 <xTaskIncrementTick+0x150>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d00b      	beq.n	800b3f2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b3da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3de:	f383 8811 	msr	BASEPRI, r3
 800b3e2:	f3bf 8f6f 	isb	sy
 800b3e6:	f3bf 8f4f 	dsb	sy
 800b3ea:	603b      	str	r3, [r7, #0]
}
 800b3ec:	bf00      	nop
 800b3ee:	bf00      	nop
 800b3f0:	e7fd      	b.n	800b3ee <xTaskIncrementTick+0x46>
 800b3f2:	4b41      	ldr	r3, [pc, #260]	@ (800b4f8 <xTaskIncrementTick+0x150>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	60fb      	str	r3, [r7, #12]
 800b3f8:	4b40      	ldr	r3, [pc, #256]	@ (800b4fc <xTaskIncrementTick+0x154>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	4a3e      	ldr	r2, [pc, #248]	@ (800b4f8 <xTaskIncrementTick+0x150>)
 800b3fe:	6013      	str	r3, [r2, #0]
 800b400:	4a3e      	ldr	r2, [pc, #248]	@ (800b4fc <xTaskIncrementTick+0x154>)
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	6013      	str	r3, [r2, #0]
 800b406:	4b3e      	ldr	r3, [pc, #248]	@ (800b500 <xTaskIncrementTick+0x158>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	3301      	adds	r3, #1
 800b40c:	4a3c      	ldr	r2, [pc, #240]	@ (800b500 <xTaskIncrementTick+0x158>)
 800b40e:	6013      	str	r3, [r2, #0]
 800b410:	f000 fafc 	bl	800ba0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b414:	4b3b      	ldr	r3, [pc, #236]	@ (800b504 <xTaskIncrementTick+0x15c>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	693a      	ldr	r2, [r7, #16]
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d349      	bcc.n	800b4b2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b41e:	4b36      	ldr	r3, [pc, #216]	@ (800b4f8 <xTaskIncrementTick+0x150>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d104      	bne.n	800b432 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b428:	4b36      	ldr	r3, [pc, #216]	@ (800b504 <xTaskIncrementTick+0x15c>)
 800b42a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b42e:	601a      	str	r2, [r3, #0]
					break;
 800b430:	e03f      	b.n	800b4b2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b432:	4b31      	ldr	r3, [pc, #196]	@ (800b4f8 <xTaskIncrementTick+0x150>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	68db      	ldr	r3, [r3, #12]
 800b43a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b442:	693a      	ldr	r2, [r7, #16]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	429a      	cmp	r2, r3
 800b448:	d203      	bcs.n	800b452 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b44a:	4a2e      	ldr	r2, [pc, #184]	@ (800b504 <xTaskIncrementTick+0x15c>)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b450:	e02f      	b.n	800b4b2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	3304      	adds	r3, #4
 800b456:	4618      	mov	r0, r3
 800b458:	f7fe ff82 	bl	800a360 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b460:	2b00      	cmp	r3, #0
 800b462:	d004      	beq.n	800b46e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	3318      	adds	r3, #24
 800b468:	4618      	mov	r0, r3
 800b46a:	f7fe ff79 	bl	800a360 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b472:	4b25      	ldr	r3, [pc, #148]	@ (800b508 <xTaskIncrementTick+0x160>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	429a      	cmp	r2, r3
 800b478:	d903      	bls.n	800b482 <xTaskIncrementTick+0xda>
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b47e:	4a22      	ldr	r2, [pc, #136]	@ (800b508 <xTaskIncrementTick+0x160>)
 800b480:	6013      	str	r3, [r2, #0]
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b486:	4613      	mov	r3, r2
 800b488:	009b      	lsls	r3, r3, #2
 800b48a:	4413      	add	r3, r2
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	4a1f      	ldr	r2, [pc, #124]	@ (800b50c <xTaskIncrementTick+0x164>)
 800b490:	441a      	add	r2, r3
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	3304      	adds	r3, #4
 800b496:	4619      	mov	r1, r3
 800b498:	4610      	mov	r0, r2
 800b49a:	f7fe ff04 	bl	800a2a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4a2:	4b1b      	ldr	r3, [pc, #108]	@ (800b510 <xTaskIncrementTick+0x168>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d3b8      	bcc.n	800b41e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4b0:	e7b5      	b.n	800b41e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b4b2:	4b17      	ldr	r3, [pc, #92]	@ (800b510 <xTaskIncrementTick+0x168>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4b8:	4914      	ldr	r1, [pc, #80]	@ (800b50c <xTaskIncrementTick+0x164>)
 800b4ba:	4613      	mov	r3, r2
 800b4bc:	009b      	lsls	r3, r3, #2
 800b4be:	4413      	add	r3, r2
 800b4c0:	009b      	lsls	r3, r3, #2
 800b4c2:	440b      	add	r3, r1
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d901      	bls.n	800b4ce <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b4ce:	4b11      	ldr	r3, [pc, #68]	@ (800b514 <xTaskIncrementTick+0x16c>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d007      	beq.n	800b4e6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	617b      	str	r3, [r7, #20]
 800b4da:	e004      	b.n	800b4e6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b4dc:	4b0e      	ldr	r3, [pc, #56]	@ (800b518 <xTaskIncrementTick+0x170>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	4a0d      	ldr	r2, [pc, #52]	@ (800b518 <xTaskIncrementTick+0x170>)
 800b4e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b4e6:	697b      	ldr	r3, [r7, #20]
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3718      	adds	r7, #24
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}
 800b4f0:	200056e0 	.word	0x200056e0
 800b4f4:	200056bc 	.word	0x200056bc
 800b4f8:	20005670 	.word	0x20005670
 800b4fc:	20005674 	.word	0x20005674
 800b500:	200056d0 	.word	0x200056d0
 800b504:	200056d8 	.word	0x200056d8
 800b508:	200056c0 	.word	0x200056c0
 800b50c:	200051e8 	.word	0x200051e8
 800b510:	200051e4 	.word	0x200051e4
 800b514:	200056cc 	.word	0x200056cc
 800b518:	200056c8 	.word	0x200056c8

0800b51c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b51c:	b480      	push	{r7}
 800b51e:	b085      	sub	sp, #20
 800b520:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b522:	4b28      	ldr	r3, [pc, #160]	@ (800b5c4 <vTaskSwitchContext+0xa8>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d003      	beq.n	800b532 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b52a:	4b27      	ldr	r3, [pc, #156]	@ (800b5c8 <vTaskSwitchContext+0xac>)
 800b52c:	2201      	movs	r2, #1
 800b52e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b530:	e042      	b.n	800b5b8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b532:	4b25      	ldr	r3, [pc, #148]	@ (800b5c8 <vTaskSwitchContext+0xac>)
 800b534:	2200      	movs	r2, #0
 800b536:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b538:	4b24      	ldr	r3, [pc, #144]	@ (800b5cc <vTaskSwitchContext+0xb0>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	60fb      	str	r3, [r7, #12]
 800b53e:	e011      	b.n	800b564 <vTaskSwitchContext+0x48>
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d10b      	bne.n	800b55e <vTaskSwitchContext+0x42>
	__asm volatile
 800b546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b54a:	f383 8811 	msr	BASEPRI, r3
 800b54e:	f3bf 8f6f 	isb	sy
 800b552:	f3bf 8f4f 	dsb	sy
 800b556:	607b      	str	r3, [r7, #4]
}
 800b558:	bf00      	nop
 800b55a:	bf00      	nop
 800b55c:	e7fd      	b.n	800b55a <vTaskSwitchContext+0x3e>
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	3b01      	subs	r3, #1
 800b562:	60fb      	str	r3, [r7, #12]
 800b564:	491a      	ldr	r1, [pc, #104]	@ (800b5d0 <vTaskSwitchContext+0xb4>)
 800b566:	68fa      	ldr	r2, [r7, #12]
 800b568:	4613      	mov	r3, r2
 800b56a:	009b      	lsls	r3, r3, #2
 800b56c:	4413      	add	r3, r2
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	440b      	add	r3, r1
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d0e3      	beq.n	800b540 <vTaskSwitchContext+0x24>
 800b578:	68fa      	ldr	r2, [r7, #12]
 800b57a:	4613      	mov	r3, r2
 800b57c:	009b      	lsls	r3, r3, #2
 800b57e:	4413      	add	r3, r2
 800b580:	009b      	lsls	r3, r3, #2
 800b582:	4a13      	ldr	r2, [pc, #76]	@ (800b5d0 <vTaskSwitchContext+0xb4>)
 800b584:	4413      	add	r3, r2
 800b586:	60bb      	str	r3, [r7, #8]
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	685a      	ldr	r2, [r3, #4]
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	605a      	str	r2, [r3, #4]
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	685a      	ldr	r2, [r3, #4]
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	3308      	adds	r3, #8
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d104      	bne.n	800b5a8 <vTaskSwitchContext+0x8c>
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	685a      	ldr	r2, [r3, #4]
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	605a      	str	r2, [r3, #4]
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	685b      	ldr	r3, [r3, #4]
 800b5ac:	68db      	ldr	r3, [r3, #12]
 800b5ae:	4a09      	ldr	r2, [pc, #36]	@ (800b5d4 <vTaskSwitchContext+0xb8>)
 800b5b0:	6013      	str	r3, [r2, #0]
 800b5b2:	4a06      	ldr	r2, [pc, #24]	@ (800b5cc <vTaskSwitchContext+0xb0>)
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	6013      	str	r3, [r2, #0]
}
 800b5b8:	bf00      	nop
 800b5ba:	3714      	adds	r7, #20
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr
 800b5c4:	200056e0 	.word	0x200056e0
 800b5c8:	200056cc 	.word	0x200056cc
 800b5cc:	200056c0 	.word	0x200056c0
 800b5d0:	200051e8 	.word	0x200051e8
 800b5d4:	200051e4 	.word	0x200051e4

0800b5d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d10b      	bne.n	800b600 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b5e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ec:	f383 8811 	msr	BASEPRI, r3
 800b5f0:	f3bf 8f6f 	isb	sy
 800b5f4:	f3bf 8f4f 	dsb	sy
 800b5f8:	60fb      	str	r3, [r7, #12]
}
 800b5fa:	bf00      	nop
 800b5fc:	bf00      	nop
 800b5fe:	e7fd      	b.n	800b5fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b600:	4b07      	ldr	r3, [pc, #28]	@ (800b620 <vTaskPlaceOnEventList+0x48>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	3318      	adds	r3, #24
 800b606:	4619      	mov	r1, r3
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f7fe fe70 	bl	800a2ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b60e:	2101      	movs	r1, #1
 800b610:	6838      	ldr	r0, [r7, #0]
 800b612:	f000 faa9 	bl	800bb68 <prvAddCurrentTaskToDelayedList>
}
 800b616:	bf00      	nop
 800b618:	3710      	adds	r7, #16
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	200051e4 	.word	0x200051e4

0800b624 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b624:	b580      	push	{r7, lr}
 800b626:	b086      	sub	sp, #24
 800b628:	af00      	add	r7, sp, #0
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d10b      	bne.n	800b64e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b63a:	f383 8811 	msr	BASEPRI, r3
 800b63e:	f3bf 8f6f 	isb	sy
 800b642:	f3bf 8f4f 	dsb	sy
 800b646:	617b      	str	r3, [r7, #20]
}
 800b648:	bf00      	nop
 800b64a:	bf00      	nop
 800b64c:	e7fd      	b.n	800b64a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b64e:	4b0a      	ldr	r3, [pc, #40]	@ (800b678 <vTaskPlaceOnEventListRestricted+0x54>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	3318      	adds	r3, #24
 800b654:	4619      	mov	r1, r3
 800b656:	68f8      	ldr	r0, [r7, #12]
 800b658:	f7fe fe25 	bl	800a2a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d002      	beq.n	800b668 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b662:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b666:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b668:	6879      	ldr	r1, [r7, #4]
 800b66a:	68b8      	ldr	r0, [r7, #8]
 800b66c:	f000 fa7c 	bl	800bb68 <prvAddCurrentTaskToDelayedList>
	}
 800b670:	bf00      	nop
 800b672:	3718      	adds	r7, #24
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}
 800b678:	200051e4 	.word	0x200051e4

0800b67c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b086      	sub	sp, #24
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	68db      	ldr	r3, [r3, #12]
 800b688:	68db      	ldr	r3, [r3, #12]
 800b68a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d10b      	bne.n	800b6aa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b696:	f383 8811 	msr	BASEPRI, r3
 800b69a:	f3bf 8f6f 	isb	sy
 800b69e:	f3bf 8f4f 	dsb	sy
 800b6a2:	60fb      	str	r3, [r7, #12]
}
 800b6a4:	bf00      	nop
 800b6a6:	bf00      	nop
 800b6a8:	e7fd      	b.n	800b6a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	3318      	adds	r3, #24
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7fe fe56 	bl	800a360 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6b4:	4b1d      	ldr	r3, [pc, #116]	@ (800b72c <xTaskRemoveFromEventList+0xb0>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d11d      	bne.n	800b6f8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	3304      	adds	r3, #4
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f7fe fe4d 	bl	800a360 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6ca:	4b19      	ldr	r3, [pc, #100]	@ (800b730 <xTaskRemoveFromEventList+0xb4>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	d903      	bls.n	800b6da <xTaskRemoveFromEventList+0x5e>
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6d6:	4a16      	ldr	r2, [pc, #88]	@ (800b730 <xTaskRemoveFromEventList+0xb4>)
 800b6d8:	6013      	str	r3, [r2, #0]
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6de:	4613      	mov	r3, r2
 800b6e0:	009b      	lsls	r3, r3, #2
 800b6e2:	4413      	add	r3, r2
 800b6e4:	009b      	lsls	r3, r3, #2
 800b6e6:	4a13      	ldr	r2, [pc, #76]	@ (800b734 <xTaskRemoveFromEventList+0xb8>)
 800b6e8:	441a      	add	r2, r3
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	3304      	adds	r3, #4
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	4610      	mov	r0, r2
 800b6f2:	f7fe fdd8 	bl	800a2a6 <vListInsertEnd>
 800b6f6:	e005      	b.n	800b704 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	3318      	adds	r3, #24
 800b6fc:	4619      	mov	r1, r3
 800b6fe:	480e      	ldr	r0, [pc, #56]	@ (800b738 <xTaskRemoveFromEventList+0xbc>)
 800b700:	f7fe fdd1 	bl	800a2a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b708:	4b0c      	ldr	r3, [pc, #48]	@ (800b73c <xTaskRemoveFromEventList+0xc0>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b70e:	429a      	cmp	r2, r3
 800b710:	d905      	bls.n	800b71e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b712:	2301      	movs	r3, #1
 800b714:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b716:	4b0a      	ldr	r3, [pc, #40]	@ (800b740 <xTaskRemoveFromEventList+0xc4>)
 800b718:	2201      	movs	r2, #1
 800b71a:	601a      	str	r2, [r3, #0]
 800b71c:	e001      	b.n	800b722 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b71e:	2300      	movs	r3, #0
 800b720:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b722:	697b      	ldr	r3, [r7, #20]
}
 800b724:	4618      	mov	r0, r3
 800b726:	3718      	adds	r7, #24
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}
 800b72c:	200056e0 	.word	0x200056e0
 800b730:	200056c0 	.word	0x200056c0
 800b734:	200051e8 	.word	0x200051e8
 800b738:	20005678 	.word	0x20005678
 800b73c:	200051e4 	.word	0x200051e4
 800b740:	200056cc 	.word	0x200056cc

0800b744 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d10b      	bne.n	800b76a <vTaskSetTimeOutState+0x26>
	__asm volatile
 800b752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b756:	f383 8811 	msr	BASEPRI, r3
 800b75a:	f3bf 8f6f 	isb	sy
 800b75e:	f3bf 8f4f 	dsb	sy
 800b762:	60fb      	str	r3, [r7, #12]
}
 800b764:	bf00      	nop
 800b766:	bf00      	nop
 800b768:	e7fd      	b.n	800b766 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800b76a:	f000 fedd 	bl	800c528 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b76e:	4b07      	ldr	r3, [pc, #28]	@ (800b78c <vTaskSetTimeOutState+0x48>)
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800b776:	4b06      	ldr	r3, [pc, #24]	@ (800b790 <vTaskSetTimeOutState+0x4c>)
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800b77e:	f000 ff05 	bl	800c58c <vPortExitCritical>
}
 800b782:	bf00      	nop
 800b784:	3710      	adds	r7, #16
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
 800b78a:	bf00      	nop
 800b78c:	200056d0 	.word	0x200056d0
 800b790:	200056bc 	.word	0x200056bc

0800b794 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b794:	b480      	push	{r7}
 800b796:	b083      	sub	sp, #12
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b79c:	4b06      	ldr	r3, [pc, #24]	@ (800b7b8 <vTaskInternalSetTimeOutState+0x24>)
 800b79e:	681a      	ldr	r2, [r3, #0]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b7a4:	4b05      	ldr	r3, [pc, #20]	@ (800b7bc <vTaskInternalSetTimeOutState+0x28>)
 800b7a6:	681a      	ldr	r2, [r3, #0]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	605a      	str	r2, [r3, #4]
}
 800b7ac:	bf00      	nop
 800b7ae:	370c      	adds	r7, #12
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr
 800b7b8:	200056d0 	.word	0x200056d0
 800b7bc:	200056bc 	.word	0x200056bc

0800b7c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b088      	sub	sp, #32
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d10b      	bne.n	800b7e8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b7d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7d4:	f383 8811 	msr	BASEPRI, r3
 800b7d8:	f3bf 8f6f 	isb	sy
 800b7dc:	f3bf 8f4f 	dsb	sy
 800b7e0:	613b      	str	r3, [r7, #16]
}
 800b7e2:	bf00      	nop
 800b7e4:	bf00      	nop
 800b7e6:	e7fd      	b.n	800b7e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d10b      	bne.n	800b806 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b7ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7f2:	f383 8811 	msr	BASEPRI, r3
 800b7f6:	f3bf 8f6f 	isb	sy
 800b7fa:	f3bf 8f4f 	dsb	sy
 800b7fe:	60fb      	str	r3, [r7, #12]
}
 800b800:	bf00      	nop
 800b802:	bf00      	nop
 800b804:	e7fd      	b.n	800b802 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b806:	f000 fe8f 	bl	800c528 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b80a:	4b1d      	ldr	r3, [pc, #116]	@ (800b880 <xTaskCheckForTimeOut+0xc0>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	69ba      	ldr	r2, [r7, #24]
 800b816:	1ad3      	subs	r3, r2, r3
 800b818:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b822:	d102      	bne.n	800b82a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b824:	2300      	movs	r3, #0
 800b826:	61fb      	str	r3, [r7, #28]
 800b828:	e023      	b.n	800b872 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	4b15      	ldr	r3, [pc, #84]	@ (800b884 <xTaskCheckForTimeOut+0xc4>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	429a      	cmp	r2, r3
 800b834:	d007      	beq.n	800b846 <xTaskCheckForTimeOut+0x86>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	69ba      	ldr	r2, [r7, #24]
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d302      	bcc.n	800b846 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b840:	2301      	movs	r3, #1
 800b842:	61fb      	str	r3, [r7, #28]
 800b844:	e015      	b.n	800b872 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	697a      	ldr	r2, [r7, #20]
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d20b      	bcs.n	800b868 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	681a      	ldr	r2, [r3, #0]
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	1ad2      	subs	r2, r2, r3
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f7ff ff99 	bl	800b794 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b862:	2300      	movs	r3, #0
 800b864:	61fb      	str	r3, [r7, #28]
 800b866:	e004      	b.n	800b872 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	2200      	movs	r2, #0
 800b86c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b86e:	2301      	movs	r3, #1
 800b870:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b872:	f000 fe8b 	bl	800c58c <vPortExitCritical>

	return xReturn;
 800b876:	69fb      	ldr	r3, [r7, #28]
}
 800b878:	4618      	mov	r0, r3
 800b87a:	3720      	adds	r7, #32
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}
 800b880:	200056bc 	.word	0x200056bc
 800b884:	200056d0 	.word	0x200056d0

0800b888 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b888:	b480      	push	{r7}
 800b88a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b88c:	4b03      	ldr	r3, [pc, #12]	@ (800b89c <vTaskMissedYield+0x14>)
 800b88e:	2201      	movs	r2, #1
 800b890:	601a      	str	r2, [r3, #0]
}
 800b892:	bf00      	nop
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr
 800b89c:	200056cc 	.word	0x200056cc

0800b8a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b082      	sub	sp, #8
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b8a8:	f000 f852 	bl	800b950 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b8ac:	4b06      	ldr	r3, [pc, #24]	@ (800b8c8 <prvIdleTask+0x28>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	d9f9      	bls.n	800b8a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b8b4:	4b05      	ldr	r3, [pc, #20]	@ (800b8cc <prvIdleTask+0x2c>)
 800b8b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8ba:	601a      	str	r2, [r3, #0]
 800b8bc:	f3bf 8f4f 	dsb	sy
 800b8c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b8c4:	e7f0      	b.n	800b8a8 <prvIdleTask+0x8>
 800b8c6:	bf00      	nop
 800b8c8:	200051e8 	.word	0x200051e8
 800b8cc:	e000ed04 	.word	0xe000ed04

0800b8d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	607b      	str	r3, [r7, #4]
 800b8da:	e00c      	b.n	800b8f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b8dc:	687a      	ldr	r2, [r7, #4]
 800b8de:	4613      	mov	r3, r2
 800b8e0:	009b      	lsls	r3, r3, #2
 800b8e2:	4413      	add	r3, r2
 800b8e4:	009b      	lsls	r3, r3, #2
 800b8e6:	4a12      	ldr	r2, [pc, #72]	@ (800b930 <prvInitialiseTaskLists+0x60>)
 800b8e8:	4413      	add	r3, r2
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7fe fcae 	bl	800a24c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	607b      	str	r3, [r7, #4]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2b37      	cmp	r3, #55	@ 0x37
 800b8fa:	d9ef      	bls.n	800b8dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b8fc:	480d      	ldr	r0, [pc, #52]	@ (800b934 <prvInitialiseTaskLists+0x64>)
 800b8fe:	f7fe fca5 	bl	800a24c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b902:	480d      	ldr	r0, [pc, #52]	@ (800b938 <prvInitialiseTaskLists+0x68>)
 800b904:	f7fe fca2 	bl	800a24c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b908:	480c      	ldr	r0, [pc, #48]	@ (800b93c <prvInitialiseTaskLists+0x6c>)
 800b90a:	f7fe fc9f 	bl	800a24c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b90e:	480c      	ldr	r0, [pc, #48]	@ (800b940 <prvInitialiseTaskLists+0x70>)
 800b910:	f7fe fc9c 	bl	800a24c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b914:	480b      	ldr	r0, [pc, #44]	@ (800b944 <prvInitialiseTaskLists+0x74>)
 800b916:	f7fe fc99 	bl	800a24c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b91a:	4b0b      	ldr	r3, [pc, #44]	@ (800b948 <prvInitialiseTaskLists+0x78>)
 800b91c:	4a05      	ldr	r2, [pc, #20]	@ (800b934 <prvInitialiseTaskLists+0x64>)
 800b91e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b920:	4b0a      	ldr	r3, [pc, #40]	@ (800b94c <prvInitialiseTaskLists+0x7c>)
 800b922:	4a05      	ldr	r2, [pc, #20]	@ (800b938 <prvInitialiseTaskLists+0x68>)
 800b924:	601a      	str	r2, [r3, #0]
}
 800b926:	bf00      	nop
 800b928:	3708      	adds	r7, #8
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}
 800b92e:	bf00      	nop
 800b930:	200051e8 	.word	0x200051e8
 800b934:	20005648 	.word	0x20005648
 800b938:	2000565c 	.word	0x2000565c
 800b93c:	20005678 	.word	0x20005678
 800b940:	2000568c 	.word	0x2000568c
 800b944:	200056a4 	.word	0x200056a4
 800b948:	20005670 	.word	0x20005670
 800b94c:	20005674 	.word	0x20005674

0800b950 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b956:	e019      	b.n	800b98c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b958:	f000 fde6 	bl	800c528 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b95c:	4b10      	ldr	r3, [pc, #64]	@ (800b9a0 <prvCheckTasksWaitingTermination+0x50>)
 800b95e:	68db      	ldr	r3, [r3, #12]
 800b960:	68db      	ldr	r3, [r3, #12]
 800b962:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	3304      	adds	r3, #4
 800b968:	4618      	mov	r0, r3
 800b96a:	f7fe fcf9 	bl	800a360 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b96e:	4b0d      	ldr	r3, [pc, #52]	@ (800b9a4 <prvCheckTasksWaitingTermination+0x54>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	3b01      	subs	r3, #1
 800b974:	4a0b      	ldr	r2, [pc, #44]	@ (800b9a4 <prvCheckTasksWaitingTermination+0x54>)
 800b976:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b978:	4b0b      	ldr	r3, [pc, #44]	@ (800b9a8 <prvCheckTasksWaitingTermination+0x58>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	3b01      	subs	r3, #1
 800b97e:	4a0a      	ldr	r2, [pc, #40]	@ (800b9a8 <prvCheckTasksWaitingTermination+0x58>)
 800b980:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b982:	f000 fe03 	bl	800c58c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f000 f810 	bl	800b9ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b98c:	4b06      	ldr	r3, [pc, #24]	@ (800b9a8 <prvCheckTasksWaitingTermination+0x58>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d1e1      	bne.n	800b958 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b994:	bf00      	nop
 800b996:	bf00      	nop
 800b998:	3708      	adds	r7, #8
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	2000568c 	.word	0x2000568c
 800b9a4:	200056b8 	.word	0x200056b8
 800b9a8:	200056a0 	.word	0x200056a0

0800b9ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b084      	sub	sp, #16
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d108      	bne.n	800b9d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f000 ffa0 	bl	800c908 <vPortFree>
				vPortFree( pxTCB );
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f000 ff9d 	bl	800c908 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b9ce:	e019      	b.n	800ba04 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b9d6:	2b01      	cmp	r3, #1
 800b9d8:	d103      	bne.n	800b9e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f000 ff94 	bl	800c908 <vPortFree>
	}
 800b9e0:	e010      	b.n	800ba04 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b9e8:	2b02      	cmp	r3, #2
 800b9ea:	d00b      	beq.n	800ba04 <prvDeleteTCB+0x58>
	__asm volatile
 800b9ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9f0:	f383 8811 	msr	BASEPRI, r3
 800b9f4:	f3bf 8f6f 	isb	sy
 800b9f8:	f3bf 8f4f 	dsb	sy
 800b9fc:	60fb      	str	r3, [r7, #12]
}
 800b9fe:	bf00      	nop
 800ba00:	bf00      	nop
 800ba02:	e7fd      	b.n	800ba00 <prvDeleteTCB+0x54>
	}
 800ba04:	bf00      	nop
 800ba06:	3710      	adds	r7, #16
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b083      	sub	sp, #12
 800ba10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba12:	4b0c      	ldr	r3, [pc, #48]	@ (800ba44 <prvResetNextTaskUnblockTime+0x38>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d104      	bne.n	800ba26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ba1c:	4b0a      	ldr	r3, [pc, #40]	@ (800ba48 <prvResetNextTaskUnblockTime+0x3c>)
 800ba1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ba22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ba24:	e008      	b.n	800ba38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba26:	4b07      	ldr	r3, [pc, #28]	@ (800ba44 <prvResetNextTaskUnblockTime+0x38>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	68db      	ldr	r3, [r3, #12]
 800ba2c:	68db      	ldr	r3, [r3, #12]
 800ba2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	4a04      	ldr	r2, [pc, #16]	@ (800ba48 <prvResetNextTaskUnblockTime+0x3c>)
 800ba36:	6013      	str	r3, [r2, #0]
}
 800ba38:	bf00      	nop
 800ba3a:	370c      	adds	r7, #12
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba42:	4770      	bx	lr
 800ba44:	20005670 	.word	0x20005670
 800ba48:	200056d8 	.word	0x200056d8

0800ba4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b083      	sub	sp, #12
 800ba50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ba52:	4b0b      	ldr	r3, [pc, #44]	@ (800ba80 <xTaskGetSchedulerState+0x34>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d102      	bne.n	800ba60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	607b      	str	r3, [r7, #4]
 800ba5e:	e008      	b.n	800ba72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba60:	4b08      	ldr	r3, [pc, #32]	@ (800ba84 <xTaskGetSchedulerState+0x38>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d102      	bne.n	800ba6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ba68:	2302      	movs	r3, #2
 800ba6a:	607b      	str	r3, [r7, #4]
 800ba6c:	e001      	b.n	800ba72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ba72:	687b      	ldr	r3, [r7, #4]
	}
 800ba74:	4618      	mov	r0, r3
 800ba76:	370c      	adds	r7, #12
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr
 800ba80:	200056c4 	.word	0x200056c4
 800ba84:	200056e0 	.word	0x200056e0

0800ba88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b086      	sub	sp, #24
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ba94:	2300      	movs	r3, #0
 800ba96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d058      	beq.n	800bb50 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ba9e:	4b2f      	ldr	r3, [pc, #188]	@ (800bb5c <xTaskPriorityDisinherit+0xd4>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	693a      	ldr	r2, [r7, #16]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d00b      	beq.n	800bac0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800baa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baac:	f383 8811 	msr	BASEPRI, r3
 800bab0:	f3bf 8f6f 	isb	sy
 800bab4:	f3bf 8f4f 	dsb	sy
 800bab8:	60fb      	str	r3, [r7, #12]
}
 800baba:	bf00      	nop
 800babc:	bf00      	nop
 800babe:	e7fd      	b.n	800babc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d10b      	bne.n	800bae0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bacc:	f383 8811 	msr	BASEPRI, r3
 800bad0:	f3bf 8f6f 	isb	sy
 800bad4:	f3bf 8f4f 	dsb	sy
 800bad8:	60bb      	str	r3, [r7, #8]
}
 800bada:	bf00      	nop
 800badc:	bf00      	nop
 800bade:	e7fd      	b.n	800badc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bae4:	1e5a      	subs	r2, r3, #1
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d02c      	beq.n	800bb50 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d128      	bne.n	800bb50 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	3304      	adds	r3, #4
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7fe fc2c 	bl	800a360 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb14:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb20:	4b0f      	ldr	r3, [pc, #60]	@ (800bb60 <xTaskPriorityDisinherit+0xd8>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d903      	bls.n	800bb30 <xTaskPriorityDisinherit+0xa8>
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb2c:	4a0c      	ldr	r2, [pc, #48]	@ (800bb60 <xTaskPriorityDisinherit+0xd8>)
 800bb2e:	6013      	str	r3, [r2, #0]
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb34:	4613      	mov	r3, r2
 800bb36:	009b      	lsls	r3, r3, #2
 800bb38:	4413      	add	r3, r2
 800bb3a:	009b      	lsls	r3, r3, #2
 800bb3c:	4a09      	ldr	r2, [pc, #36]	@ (800bb64 <xTaskPriorityDisinherit+0xdc>)
 800bb3e:	441a      	add	r2, r3
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	3304      	adds	r3, #4
 800bb44:	4619      	mov	r1, r3
 800bb46:	4610      	mov	r0, r2
 800bb48:	f7fe fbad 	bl	800a2a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bb50:	697b      	ldr	r3, [r7, #20]
	}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3718      	adds	r7, #24
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
 800bb5a:	bf00      	nop
 800bb5c:	200051e4 	.word	0x200051e4
 800bb60:	200056c0 	.word	0x200056c0
 800bb64:	200051e8 	.word	0x200051e8

0800bb68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b084      	sub	sp, #16
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bb72:	4b21      	ldr	r3, [pc, #132]	@ (800bbf8 <prvAddCurrentTaskToDelayedList+0x90>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb78:	4b20      	ldr	r3, [pc, #128]	@ (800bbfc <prvAddCurrentTaskToDelayedList+0x94>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	3304      	adds	r3, #4
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f7fe fbee 	bl	800a360 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb8a:	d10a      	bne.n	800bba2 <prvAddCurrentTaskToDelayedList+0x3a>
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d007      	beq.n	800bba2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb92:	4b1a      	ldr	r3, [pc, #104]	@ (800bbfc <prvAddCurrentTaskToDelayedList+0x94>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	3304      	adds	r3, #4
 800bb98:	4619      	mov	r1, r3
 800bb9a:	4819      	ldr	r0, [pc, #100]	@ (800bc00 <prvAddCurrentTaskToDelayedList+0x98>)
 800bb9c:	f7fe fb83 	bl	800a2a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bba0:	e026      	b.n	800bbf0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bba2:	68fa      	ldr	r2, [r7, #12]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	4413      	add	r3, r2
 800bba8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bbaa:	4b14      	ldr	r3, [pc, #80]	@ (800bbfc <prvAddCurrentTaskToDelayedList+0x94>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	68ba      	ldr	r2, [r7, #8]
 800bbb0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bbb2:	68ba      	ldr	r2, [r7, #8]
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d209      	bcs.n	800bbce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbba:	4b12      	ldr	r3, [pc, #72]	@ (800bc04 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bbbc:	681a      	ldr	r2, [r3, #0]
 800bbbe:	4b0f      	ldr	r3, [pc, #60]	@ (800bbfc <prvAddCurrentTaskToDelayedList+0x94>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	3304      	adds	r3, #4
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	4610      	mov	r0, r2
 800bbc8:	f7fe fb91 	bl	800a2ee <vListInsert>
}
 800bbcc:	e010      	b.n	800bbf0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbce:	4b0e      	ldr	r3, [pc, #56]	@ (800bc08 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bbd0:	681a      	ldr	r2, [r3, #0]
 800bbd2:	4b0a      	ldr	r3, [pc, #40]	@ (800bbfc <prvAddCurrentTaskToDelayedList+0x94>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	3304      	adds	r3, #4
 800bbd8:	4619      	mov	r1, r3
 800bbda:	4610      	mov	r0, r2
 800bbdc:	f7fe fb87 	bl	800a2ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bbe0:	4b0a      	ldr	r3, [pc, #40]	@ (800bc0c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	68ba      	ldr	r2, [r7, #8]
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d202      	bcs.n	800bbf0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bbea:	4a08      	ldr	r2, [pc, #32]	@ (800bc0c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	6013      	str	r3, [r2, #0]
}
 800bbf0:	bf00      	nop
 800bbf2:	3710      	adds	r7, #16
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	200056bc 	.word	0x200056bc
 800bbfc:	200051e4 	.word	0x200051e4
 800bc00:	200056a4 	.word	0x200056a4
 800bc04:	20005674 	.word	0x20005674
 800bc08:	20005670 	.word	0x20005670
 800bc0c:	200056d8 	.word	0x200056d8

0800bc10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b08a      	sub	sp, #40	@ 0x28
 800bc14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bc16:	2300      	movs	r3, #0
 800bc18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bc1a:	f000 fb13 	bl	800c244 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bc1e:	4b1d      	ldr	r3, [pc, #116]	@ (800bc94 <xTimerCreateTimerTask+0x84>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d021      	beq.n	800bc6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bc26:	2300      	movs	r3, #0
 800bc28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bc2e:	1d3a      	adds	r2, r7, #4
 800bc30:	f107 0108 	add.w	r1, r7, #8
 800bc34:	f107 030c 	add.w	r3, r7, #12
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f7fe faed 	bl	800a218 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bc3e:	6879      	ldr	r1, [r7, #4]
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	68fa      	ldr	r2, [r7, #12]
 800bc44:	9202      	str	r2, [sp, #8]
 800bc46:	9301      	str	r3, [sp, #4]
 800bc48:	2302      	movs	r3, #2
 800bc4a:	9300      	str	r3, [sp, #0]
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	460a      	mov	r2, r1
 800bc50:	4911      	ldr	r1, [pc, #68]	@ (800bc98 <xTimerCreateTimerTask+0x88>)
 800bc52:	4812      	ldr	r0, [pc, #72]	@ (800bc9c <xTimerCreateTimerTask+0x8c>)
 800bc54:	f7ff f8a8 	bl	800ada8 <xTaskCreateStatic>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	4a11      	ldr	r2, [pc, #68]	@ (800bca0 <xTimerCreateTimerTask+0x90>)
 800bc5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bc5e:	4b10      	ldr	r3, [pc, #64]	@ (800bca0 <xTimerCreateTimerTask+0x90>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d001      	beq.n	800bc6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bc66:	2301      	movs	r3, #1
 800bc68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d10b      	bne.n	800bc88 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bc70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc74:	f383 8811 	msr	BASEPRI, r3
 800bc78:	f3bf 8f6f 	isb	sy
 800bc7c:	f3bf 8f4f 	dsb	sy
 800bc80:	613b      	str	r3, [r7, #16]
}
 800bc82:	bf00      	nop
 800bc84:	bf00      	nop
 800bc86:	e7fd      	b.n	800bc84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bc88:	697b      	ldr	r3, [r7, #20]
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3718      	adds	r7, #24
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop
 800bc94:	20005714 	.word	0x20005714
 800bc98:	0801afe0 	.word	0x0801afe0
 800bc9c:	0800bddd 	.word	0x0800bddd
 800bca0:	20005718 	.word	0x20005718

0800bca4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b08a      	sub	sp, #40	@ 0x28
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	60f8      	str	r0, [r7, #12]
 800bcac:	60b9      	str	r1, [r7, #8]
 800bcae:	607a      	str	r2, [r7, #4]
 800bcb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d10b      	bne.n	800bcd4 <xTimerGenericCommand+0x30>
	__asm volatile
 800bcbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcc0:	f383 8811 	msr	BASEPRI, r3
 800bcc4:	f3bf 8f6f 	isb	sy
 800bcc8:	f3bf 8f4f 	dsb	sy
 800bccc:	623b      	str	r3, [r7, #32]
}
 800bcce:	bf00      	nop
 800bcd0:	bf00      	nop
 800bcd2:	e7fd      	b.n	800bcd0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bcd4:	4b19      	ldr	r3, [pc, #100]	@ (800bd3c <xTimerGenericCommand+0x98>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d02a      	beq.n	800bd32 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	2b05      	cmp	r3, #5
 800bcec:	dc18      	bgt.n	800bd20 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bcee:	f7ff fead 	bl	800ba4c <xTaskGetSchedulerState>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	2b02      	cmp	r3, #2
 800bcf6:	d109      	bne.n	800bd0c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bcf8:	4b10      	ldr	r3, [pc, #64]	@ (800bd3c <xTimerGenericCommand+0x98>)
 800bcfa:	6818      	ldr	r0, [r3, #0]
 800bcfc:	f107 0110 	add.w	r1, r7, #16
 800bd00:	2300      	movs	r3, #0
 800bd02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd04:	f7fe fc60 	bl	800a5c8 <xQueueGenericSend>
 800bd08:	6278      	str	r0, [r7, #36]	@ 0x24
 800bd0a:	e012      	b.n	800bd32 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bd0c:	4b0b      	ldr	r3, [pc, #44]	@ (800bd3c <xTimerGenericCommand+0x98>)
 800bd0e:	6818      	ldr	r0, [r3, #0]
 800bd10:	f107 0110 	add.w	r1, r7, #16
 800bd14:	2300      	movs	r3, #0
 800bd16:	2200      	movs	r2, #0
 800bd18:	f7fe fc56 	bl	800a5c8 <xQueueGenericSend>
 800bd1c:	6278      	str	r0, [r7, #36]	@ 0x24
 800bd1e:	e008      	b.n	800bd32 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bd20:	4b06      	ldr	r3, [pc, #24]	@ (800bd3c <xTimerGenericCommand+0x98>)
 800bd22:	6818      	ldr	r0, [r3, #0]
 800bd24:	f107 0110 	add.w	r1, r7, #16
 800bd28:	2300      	movs	r3, #0
 800bd2a:	683a      	ldr	r2, [r7, #0]
 800bd2c:	f7fe fd4e 	bl	800a7cc <xQueueGenericSendFromISR>
 800bd30:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bd32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3728      	adds	r7, #40	@ 0x28
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}
 800bd3c:	20005714 	.word	0x20005714

0800bd40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b088      	sub	sp, #32
 800bd44:	af02      	add	r7, sp, #8
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd4a:	4b23      	ldr	r3, [pc, #140]	@ (800bdd8 <prvProcessExpiredTimer+0x98>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	68db      	ldr	r3, [r3, #12]
 800bd50:	68db      	ldr	r3, [r3, #12]
 800bd52:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	3304      	adds	r3, #4
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f7fe fb01 	bl	800a360 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd64:	f003 0304 	and.w	r3, r3, #4
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d023      	beq.n	800bdb4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	699a      	ldr	r2, [r3, #24]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	18d1      	adds	r1, r2, r3
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	683a      	ldr	r2, [r7, #0]
 800bd78:	6978      	ldr	r0, [r7, #20]
 800bd7a:	f000 f8d5 	bl	800bf28 <prvInsertTimerInActiveList>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d020      	beq.n	800bdc6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bd84:	2300      	movs	r3, #0
 800bd86:	9300      	str	r3, [sp, #0]
 800bd88:	2300      	movs	r3, #0
 800bd8a:	687a      	ldr	r2, [r7, #4]
 800bd8c:	2100      	movs	r1, #0
 800bd8e:	6978      	ldr	r0, [r7, #20]
 800bd90:	f7ff ff88 	bl	800bca4 <xTimerGenericCommand>
 800bd94:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d114      	bne.n	800bdc6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bd9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bda0:	f383 8811 	msr	BASEPRI, r3
 800bda4:	f3bf 8f6f 	isb	sy
 800bda8:	f3bf 8f4f 	dsb	sy
 800bdac:	60fb      	str	r3, [r7, #12]
}
 800bdae:	bf00      	nop
 800bdb0:	bf00      	nop
 800bdb2:	e7fd      	b.n	800bdb0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bdba:	f023 0301 	bic.w	r3, r3, #1
 800bdbe:	b2da      	uxtb	r2, r3
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	6a1b      	ldr	r3, [r3, #32]
 800bdca:	6978      	ldr	r0, [r7, #20]
 800bdcc:	4798      	blx	r3
}
 800bdce:	bf00      	nop
 800bdd0:	3718      	adds	r7, #24
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	2000570c 	.word	0x2000570c

0800bddc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bde4:	f107 0308 	add.w	r3, r7, #8
 800bde8:	4618      	mov	r0, r3
 800bdea:	f000 f859 	bl	800bea0 <prvGetNextExpireTime>
 800bdee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	68f8      	ldr	r0, [r7, #12]
 800bdf6:	f000 f805 	bl	800be04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bdfa:	f000 f8d7 	bl	800bfac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bdfe:	bf00      	nop
 800be00:	e7f0      	b.n	800bde4 <prvTimerTask+0x8>
	...

0800be04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800be0e:	f7ff fa0f 	bl	800b230 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be12:	f107 0308 	add.w	r3, r7, #8
 800be16:	4618      	mov	r0, r3
 800be18:	f000 f866 	bl	800bee8 <prvSampleTimeNow>
 800be1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d130      	bne.n	800be86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d10a      	bne.n	800be40 <prvProcessTimerOrBlockTask+0x3c>
 800be2a:	687a      	ldr	r2, [r7, #4]
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	429a      	cmp	r2, r3
 800be30:	d806      	bhi.n	800be40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800be32:	f7ff fa0b 	bl	800b24c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800be36:	68f9      	ldr	r1, [r7, #12]
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f7ff ff81 	bl	800bd40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800be3e:	e024      	b.n	800be8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d008      	beq.n	800be58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800be46:	4b13      	ldr	r3, [pc, #76]	@ (800be94 <prvProcessTimerOrBlockTask+0x90>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d101      	bne.n	800be54 <prvProcessTimerOrBlockTask+0x50>
 800be50:	2301      	movs	r3, #1
 800be52:	e000      	b.n	800be56 <prvProcessTimerOrBlockTask+0x52>
 800be54:	2300      	movs	r3, #0
 800be56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800be58:	4b0f      	ldr	r3, [pc, #60]	@ (800be98 <prvProcessTimerOrBlockTask+0x94>)
 800be5a:	6818      	ldr	r0, [r3, #0]
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	1ad3      	subs	r3, r2, r3
 800be62:	683a      	ldr	r2, [r7, #0]
 800be64:	4619      	mov	r1, r3
 800be66:	f7fe ff6b 	bl	800ad40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800be6a:	f7ff f9ef 	bl	800b24c <xTaskResumeAll>
 800be6e:	4603      	mov	r3, r0
 800be70:	2b00      	cmp	r3, #0
 800be72:	d10a      	bne.n	800be8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800be74:	4b09      	ldr	r3, [pc, #36]	@ (800be9c <prvProcessTimerOrBlockTask+0x98>)
 800be76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be7a:	601a      	str	r2, [r3, #0]
 800be7c:	f3bf 8f4f 	dsb	sy
 800be80:	f3bf 8f6f 	isb	sy
}
 800be84:	e001      	b.n	800be8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800be86:	f7ff f9e1 	bl	800b24c <xTaskResumeAll>
}
 800be8a:	bf00      	nop
 800be8c:	3710      	adds	r7, #16
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
 800be92:	bf00      	nop
 800be94:	20005710 	.word	0x20005710
 800be98:	20005714 	.word	0x20005714
 800be9c:	e000ed04 	.word	0xe000ed04

0800bea0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bea0:	b480      	push	{r7}
 800bea2:	b085      	sub	sp, #20
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bea8:	4b0e      	ldr	r3, [pc, #56]	@ (800bee4 <prvGetNextExpireTime+0x44>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d101      	bne.n	800beb6 <prvGetNextExpireTime+0x16>
 800beb2:	2201      	movs	r2, #1
 800beb4:	e000      	b.n	800beb8 <prvGetNextExpireTime+0x18>
 800beb6:	2200      	movs	r2, #0
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d105      	bne.n	800bed0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bec4:	4b07      	ldr	r3, [pc, #28]	@ (800bee4 <prvGetNextExpireTime+0x44>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	68db      	ldr	r3, [r3, #12]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	60fb      	str	r3, [r7, #12]
 800bece:	e001      	b.n	800bed4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bed0:	2300      	movs	r3, #0
 800bed2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bed4:	68fb      	ldr	r3, [r7, #12]
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3714      	adds	r7, #20
 800beda:	46bd      	mov	sp, r7
 800bedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee0:	4770      	bx	lr
 800bee2:	bf00      	nop
 800bee4:	2000570c 	.word	0x2000570c

0800bee8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b084      	sub	sp, #16
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bef0:	f7ff fa4a 	bl	800b388 <xTaskGetTickCount>
 800bef4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bef6:	4b0b      	ldr	r3, [pc, #44]	@ (800bf24 <prvSampleTimeNow+0x3c>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	68fa      	ldr	r2, [r7, #12]
 800befc:	429a      	cmp	r2, r3
 800befe:	d205      	bcs.n	800bf0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bf00:	f000 f93a 	bl	800c178 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2201      	movs	r2, #1
 800bf08:	601a      	str	r2, [r3, #0]
 800bf0a:	e002      	b.n	800bf12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2200      	movs	r2, #0
 800bf10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bf12:	4a04      	ldr	r2, [pc, #16]	@ (800bf24 <prvSampleTimeNow+0x3c>)
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bf18:	68fb      	ldr	r3, [r7, #12]
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3710      	adds	r7, #16
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop
 800bf24:	2000571c 	.word	0x2000571c

0800bf28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b086      	sub	sp, #24
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	60f8      	str	r0, [r7, #12]
 800bf30:	60b9      	str	r1, [r7, #8]
 800bf32:	607a      	str	r2, [r7, #4]
 800bf34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bf36:	2300      	movs	r3, #0
 800bf38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	68ba      	ldr	r2, [r7, #8]
 800bf3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	68fa      	ldr	r2, [r7, #12]
 800bf44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bf46:	68ba      	ldr	r2, [r7, #8]
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d812      	bhi.n	800bf74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf4e:	687a      	ldr	r2, [r7, #4]
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	1ad2      	subs	r2, r2, r3
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	699b      	ldr	r3, [r3, #24]
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d302      	bcc.n	800bf62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	617b      	str	r3, [r7, #20]
 800bf60:	e01b      	b.n	800bf9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bf62:	4b10      	ldr	r3, [pc, #64]	@ (800bfa4 <prvInsertTimerInActiveList+0x7c>)
 800bf64:	681a      	ldr	r2, [r3, #0]
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	3304      	adds	r3, #4
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	4610      	mov	r0, r2
 800bf6e:	f7fe f9be 	bl	800a2ee <vListInsert>
 800bf72:	e012      	b.n	800bf9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bf74:	687a      	ldr	r2, [r7, #4]
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d206      	bcs.n	800bf8a <prvInsertTimerInActiveList+0x62>
 800bf7c:	68ba      	ldr	r2, [r7, #8]
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d302      	bcc.n	800bf8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bf84:	2301      	movs	r3, #1
 800bf86:	617b      	str	r3, [r7, #20]
 800bf88:	e007      	b.n	800bf9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bf8a:	4b07      	ldr	r3, [pc, #28]	@ (800bfa8 <prvInsertTimerInActiveList+0x80>)
 800bf8c:	681a      	ldr	r2, [r3, #0]
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	3304      	adds	r3, #4
 800bf92:	4619      	mov	r1, r3
 800bf94:	4610      	mov	r0, r2
 800bf96:	f7fe f9aa 	bl	800a2ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bf9a:	697b      	ldr	r3, [r7, #20]
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3718      	adds	r7, #24
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}
 800bfa4:	20005710 	.word	0x20005710
 800bfa8:	2000570c 	.word	0x2000570c

0800bfac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b08e      	sub	sp, #56	@ 0x38
 800bfb0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bfb2:	e0ce      	b.n	800c152 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	da19      	bge.n	800bfee <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bfba:	1d3b      	adds	r3, r7, #4
 800bfbc:	3304      	adds	r3, #4
 800bfbe:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bfc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d10b      	bne.n	800bfde <prvProcessReceivedCommands+0x32>
	__asm volatile
 800bfc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfca:	f383 8811 	msr	BASEPRI, r3
 800bfce:	f3bf 8f6f 	isb	sy
 800bfd2:	f3bf 8f4f 	dsb	sy
 800bfd6:	61fb      	str	r3, [r7, #28]
}
 800bfd8:	bf00      	nop
 800bfda:	bf00      	nop
 800bfdc:	e7fd      	b.n	800bfda <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bfde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfe4:	6850      	ldr	r0, [r2, #4]
 800bfe6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bfe8:	6892      	ldr	r2, [r2, #8]
 800bfea:	4611      	mov	r1, r2
 800bfec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	f2c0 80ae 	blt.w	800c152 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bffc:	695b      	ldr	r3, [r3, #20]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d004      	beq.n	800c00c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c004:	3304      	adds	r3, #4
 800c006:	4618      	mov	r0, r3
 800c008:	f7fe f9aa 	bl	800a360 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c00c:	463b      	mov	r3, r7
 800c00e:	4618      	mov	r0, r3
 800c010:	f7ff ff6a 	bl	800bee8 <prvSampleTimeNow>
 800c014:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2b09      	cmp	r3, #9
 800c01a:	f200 8097 	bhi.w	800c14c <prvProcessReceivedCommands+0x1a0>
 800c01e:	a201      	add	r2, pc, #4	@ (adr r2, 800c024 <prvProcessReceivedCommands+0x78>)
 800c020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c024:	0800c04d 	.word	0x0800c04d
 800c028:	0800c04d 	.word	0x0800c04d
 800c02c:	0800c04d 	.word	0x0800c04d
 800c030:	0800c0c3 	.word	0x0800c0c3
 800c034:	0800c0d7 	.word	0x0800c0d7
 800c038:	0800c123 	.word	0x0800c123
 800c03c:	0800c04d 	.word	0x0800c04d
 800c040:	0800c04d 	.word	0x0800c04d
 800c044:	0800c0c3 	.word	0x0800c0c3
 800c048:	0800c0d7 	.word	0x0800c0d7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c04c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c04e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c052:	f043 0301 	orr.w	r3, r3, #1
 800c056:	b2da      	uxtb	r2, r3
 800c058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c05a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c05e:	68ba      	ldr	r2, [r7, #8]
 800c060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c062:	699b      	ldr	r3, [r3, #24]
 800c064:	18d1      	adds	r1, r2, r3
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c06a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c06c:	f7ff ff5c 	bl	800bf28 <prvInsertTimerInActiveList>
 800c070:	4603      	mov	r3, r0
 800c072:	2b00      	cmp	r3, #0
 800c074:	d06c      	beq.n	800c150 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c078:	6a1b      	ldr	r3, [r3, #32]
 800c07a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c07c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c07e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c080:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c084:	f003 0304 	and.w	r3, r3, #4
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d061      	beq.n	800c150 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c08c:	68ba      	ldr	r2, [r7, #8]
 800c08e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c090:	699b      	ldr	r3, [r3, #24]
 800c092:	441a      	add	r2, r3
 800c094:	2300      	movs	r3, #0
 800c096:	9300      	str	r3, [sp, #0]
 800c098:	2300      	movs	r3, #0
 800c09a:	2100      	movs	r1, #0
 800c09c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c09e:	f7ff fe01 	bl	800bca4 <xTimerGenericCommand>
 800c0a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c0a4:	6a3b      	ldr	r3, [r7, #32]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d152      	bne.n	800c150 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c0aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0ae:	f383 8811 	msr	BASEPRI, r3
 800c0b2:	f3bf 8f6f 	isb	sy
 800c0b6:	f3bf 8f4f 	dsb	sy
 800c0ba:	61bb      	str	r3, [r7, #24]
}
 800c0bc:	bf00      	nop
 800c0be:	bf00      	nop
 800c0c0:	e7fd      	b.n	800c0be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0c8:	f023 0301 	bic.w	r3, r3, #1
 800c0cc:	b2da      	uxtb	r2, r3
 800c0ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c0d4:	e03d      	b.n	800c152 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c0d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0dc:	f043 0301 	orr.w	r3, r3, #1
 800c0e0:	b2da      	uxtb	r2, r3
 800c0e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c0e8:	68ba      	ldr	r2, [r7, #8]
 800c0ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0ec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c0ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0f0:	699b      	ldr	r3, [r3, #24]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d10b      	bne.n	800c10e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c0f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0fa:	f383 8811 	msr	BASEPRI, r3
 800c0fe:	f3bf 8f6f 	isb	sy
 800c102:	f3bf 8f4f 	dsb	sy
 800c106:	617b      	str	r3, [r7, #20]
}
 800c108:	bf00      	nop
 800c10a:	bf00      	nop
 800c10c:	e7fd      	b.n	800c10a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c10e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c110:	699a      	ldr	r2, [r3, #24]
 800c112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c114:	18d1      	adds	r1, r2, r3
 800c116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c11a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c11c:	f7ff ff04 	bl	800bf28 <prvInsertTimerInActiveList>
					break;
 800c120:	e017      	b.n	800c152 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c124:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c128:	f003 0302 	and.w	r3, r3, #2
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d103      	bne.n	800c138 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c130:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c132:	f000 fbe9 	bl	800c908 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c136:	e00c      	b.n	800c152 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c13a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c13e:	f023 0301 	bic.w	r3, r3, #1
 800c142:	b2da      	uxtb	r2, r3
 800c144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c146:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c14a:	e002      	b.n	800c152 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c14c:	bf00      	nop
 800c14e:	e000      	b.n	800c152 <prvProcessReceivedCommands+0x1a6>
					break;
 800c150:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c152:	4b08      	ldr	r3, [pc, #32]	@ (800c174 <prvProcessReceivedCommands+0x1c8>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	1d39      	adds	r1, r7, #4
 800c158:	2200      	movs	r2, #0
 800c15a:	4618      	mov	r0, r3
 800c15c:	f7fe fbd4 	bl	800a908 <xQueueReceive>
 800c160:	4603      	mov	r3, r0
 800c162:	2b00      	cmp	r3, #0
 800c164:	f47f af26 	bne.w	800bfb4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c168:	bf00      	nop
 800c16a:	bf00      	nop
 800c16c:	3730      	adds	r7, #48	@ 0x30
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}
 800c172:	bf00      	nop
 800c174:	20005714 	.word	0x20005714

0800c178 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b088      	sub	sp, #32
 800c17c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c17e:	e049      	b.n	800c214 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c180:	4b2e      	ldr	r3, [pc, #184]	@ (800c23c <prvSwitchTimerLists+0xc4>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	68db      	ldr	r3, [r3, #12]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c18a:	4b2c      	ldr	r3, [pc, #176]	@ (800c23c <prvSwitchTimerLists+0xc4>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	68db      	ldr	r3, [r3, #12]
 800c190:	68db      	ldr	r3, [r3, #12]
 800c192:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	3304      	adds	r3, #4
 800c198:	4618      	mov	r0, r3
 800c19a:	f7fe f8e1 	bl	800a360 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	6a1b      	ldr	r3, [r3, #32]
 800c1a2:	68f8      	ldr	r0, [r7, #12]
 800c1a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1ac:	f003 0304 	and.w	r3, r3, #4
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d02f      	beq.n	800c214 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	699b      	ldr	r3, [r3, #24]
 800c1b8:	693a      	ldr	r2, [r7, #16]
 800c1ba:	4413      	add	r3, r2
 800c1bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c1be:	68ba      	ldr	r2, [r7, #8]
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	d90e      	bls.n	800c1e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	68ba      	ldr	r2, [r7, #8]
 800c1ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	68fa      	ldr	r2, [r7, #12]
 800c1d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c1d2:	4b1a      	ldr	r3, [pc, #104]	@ (800c23c <prvSwitchTimerLists+0xc4>)
 800c1d4:	681a      	ldr	r2, [r3, #0]
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	3304      	adds	r3, #4
 800c1da:	4619      	mov	r1, r3
 800c1dc:	4610      	mov	r0, r2
 800c1de:	f7fe f886 	bl	800a2ee <vListInsert>
 800c1e2:	e017      	b.n	800c214 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	9300      	str	r3, [sp, #0]
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	693a      	ldr	r2, [r7, #16]
 800c1ec:	2100      	movs	r1, #0
 800c1ee:	68f8      	ldr	r0, [r7, #12]
 800c1f0:	f7ff fd58 	bl	800bca4 <xTimerGenericCommand>
 800c1f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d10b      	bne.n	800c214 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c1fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c200:	f383 8811 	msr	BASEPRI, r3
 800c204:	f3bf 8f6f 	isb	sy
 800c208:	f3bf 8f4f 	dsb	sy
 800c20c:	603b      	str	r3, [r7, #0]
}
 800c20e:	bf00      	nop
 800c210:	bf00      	nop
 800c212:	e7fd      	b.n	800c210 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c214:	4b09      	ldr	r3, [pc, #36]	@ (800c23c <prvSwitchTimerLists+0xc4>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d1b0      	bne.n	800c180 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c21e:	4b07      	ldr	r3, [pc, #28]	@ (800c23c <prvSwitchTimerLists+0xc4>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c224:	4b06      	ldr	r3, [pc, #24]	@ (800c240 <prvSwitchTimerLists+0xc8>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	4a04      	ldr	r2, [pc, #16]	@ (800c23c <prvSwitchTimerLists+0xc4>)
 800c22a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c22c:	4a04      	ldr	r2, [pc, #16]	@ (800c240 <prvSwitchTimerLists+0xc8>)
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	6013      	str	r3, [r2, #0]
}
 800c232:	bf00      	nop
 800c234:	3718      	adds	r7, #24
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	bf00      	nop
 800c23c:	2000570c 	.word	0x2000570c
 800c240:	20005710 	.word	0x20005710

0800c244 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b082      	sub	sp, #8
 800c248:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c24a:	f000 f96d 	bl	800c528 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c24e:	4b15      	ldr	r3, [pc, #84]	@ (800c2a4 <prvCheckForValidListAndQueue+0x60>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d120      	bne.n	800c298 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c256:	4814      	ldr	r0, [pc, #80]	@ (800c2a8 <prvCheckForValidListAndQueue+0x64>)
 800c258:	f7fd fff8 	bl	800a24c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c25c:	4813      	ldr	r0, [pc, #76]	@ (800c2ac <prvCheckForValidListAndQueue+0x68>)
 800c25e:	f7fd fff5 	bl	800a24c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c262:	4b13      	ldr	r3, [pc, #76]	@ (800c2b0 <prvCheckForValidListAndQueue+0x6c>)
 800c264:	4a10      	ldr	r2, [pc, #64]	@ (800c2a8 <prvCheckForValidListAndQueue+0x64>)
 800c266:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c268:	4b12      	ldr	r3, [pc, #72]	@ (800c2b4 <prvCheckForValidListAndQueue+0x70>)
 800c26a:	4a10      	ldr	r2, [pc, #64]	@ (800c2ac <prvCheckForValidListAndQueue+0x68>)
 800c26c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c26e:	2300      	movs	r3, #0
 800c270:	9300      	str	r3, [sp, #0]
 800c272:	4b11      	ldr	r3, [pc, #68]	@ (800c2b8 <prvCheckForValidListAndQueue+0x74>)
 800c274:	4a11      	ldr	r2, [pc, #68]	@ (800c2bc <prvCheckForValidListAndQueue+0x78>)
 800c276:	2110      	movs	r1, #16
 800c278:	200a      	movs	r0, #10
 800c27a:	f7fe f905 	bl	800a488 <xQueueGenericCreateStatic>
 800c27e:	4603      	mov	r3, r0
 800c280:	4a08      	ldr	r2, [pc, #32]	@ (800c2a4 <prvCheckForValidListAndQueue+0x60>)
 800c282:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c284:	4b07      	ldr	r3, [pc, #28]	@ (800c2a4 <prvCheckForValidListAndQueue+0x60>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d005      	beq.n	800c298 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c28c:	4b05      	ldr	r3, [pc, #20]	@ (800c2a4 <prvCheckForValidListAndQueue+0x60>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	490b      	ldr	r1, [pc, #44]	@ (800c2c0 <prvCheckForValidListAndQueue+0x7c>)
 800c292:	4618      	mov	r0, r3
 800c294:	f7fe fd2a 	bl	800acec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c298:	f000 f978 	bl	800c58c <vPortExitCritical>
}
 800c29c:	bf00      	nop
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}
 800c2a2:	bf00      	nop
 800c2a4:	20005714 	.word	0x20005714
 800c2a8:	200056e4 	.word	0x200056e4
 800c2ac:	200056f8 	.word	0x200056f8
 800c2b0:	2000570c 	.word	0x2000570c
 800c2b4:	20005710 	.word	0x20005710
 800c2b8:	200057c0 	.word	0x200057c0
 800c2bc:	20005720 	.word	0x20005720
 800c2c0:	0801afe8 	.word	0x0801afe8

0800c2c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b085      	sub	sp, #20
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	60f8      	str	r0, [r7, #12]
 800c2cc:	60b9      	str	r1, [r7, #8]
 800c2ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	3b04      	subs	r3, #4
 800c2d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c2dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	3b04      	subs	r3, #4
 800c2e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	f023 0201 	bic.w	r2, r3, #1
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	3b04      	subs	r3, #4
 800c2f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c2f4:	4a0c      	ldr	r2, [pc, #48]	@ (800c328 <pxPortInitialiseStack+0x64>)
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	3b14      	subs	r3, #20
 800c2fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c300:	687a      	ldr	r2, [r7, #4]
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	3b04      	subs	r3, #4
 800c30a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	f06f 0202 	mvn.w	r2, #2
 800c312:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	3b20      	subs	r3, #32
 800c318:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c31a:	68fb      	ldr	r3, [r7, #12]
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	3714      	adds	r7, #20
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr
 800c328:	0800c32d 	.word	0x0800c32d

0800c32c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c32c:	b480      	push	{r7}
 800c32e:	b085      	sub	sp, #20
 800c330:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c332:	2300      	movs	r3, #0
 800c334:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c336:	4b13      	ldr	r3, [pc, #76]	@ (800c384 <prvTaskExitError+0x58>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c33e:	d00b      	beq.n	800c358 <prvTaskExitError+0x2c>
	__asm volatile
 800c340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c344:	f383 8811 	msr	BASEPRI, r3
 800c348:	f3bf 8f6f 	isb	sy
 800c34c:	f3bf 8f4f 	dsb	sy
 800c350:	60fb      	str	r3, [r7, #12]
}
 800c352:	bf00      	nop
 800c354:	bf00      	nop
 800c356:	e7fd      	b.n	800c354 <prvTaskExitError+0x28>
	__asm volatile
 800c358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c35c:	f383 8811 	msr	BASEPRI, r3
 800c360:	f3bf 8f6f 	isb	sy
 800c364:	f3bf 8f4f 	dsb	sy
 800c368:	60bb      	str	r3, [r7, #8]
}
 800c36a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c36c:	bf00      	nop
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d0fc      	beq.n	800c36e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c374:	bf00      	nop
 800c376:	bf00      	nop
 800c378:	3714      	adds	r7, #20
 800c37a:	46bd      	mov	sp, r7
 800c37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c380:	4770      	bx	lr
 800c382:	bf00      	nop
 800c384:	20000010 	.word	0x20000010
	...

0800c390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c390:	4b07      	ldr	r3, [pc, #28]	@ (800c3b0 <pxCurrentTCBConst2>)
 800c392:	6819      	ldr	r1, [r3, #0]
 800c394:	6808      	ldr	r0, [r1, #0]
 800c396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c39a:	f380 8809 	msr	PSP, r0
 800c39e:	f3bf 8f6f 	isb	sy
 800c3a2:	f04f 0000 	mov.w	r0, #0
 800c3a6:	f380 8811 	msr	BASEPRI, r0
 800c3aa:	4770      	bx	lr
 800c3ac:	f3af 8000 	nop.w

0800c3b0 <pxCurrentTCBConst2>:
 800c3b0:	200051e4 	.word	0x200051e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c3b4:	bf00      	nop
 800c3b6:	bf00      	nop

0800c3b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c3b8:	4808      	ldr	r0, [pc, #32]	@ (800c3dc <prvPortStartFirstTask+0x24>)
 800c3ba:	6800      	ldr	r0, [r0, #0]
 800c3bc:	6800      	ldr	r0, [r0, #0]
 800c3be:	f380 8808 	msr	MSP, r0
 800c3c2:	f04f 0000 	mov.w	r0, #0
 800c3c6:	f380 8814 	msr	CONTROL, r0
 800c3ca:	b662      	cpsie	i
 800c3cc:	b661      	cpsie	f
 800c3ce:	f3bf 8f4f 	dsb	sy
 800c3d2:	f3bf 8f6f 	isb	sy
 800c3d6:	df00      	svc	0
 800c3d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c3da:	bf00      	nop
 800c3dc:	e000ed08 	.word	0xe000ed08

0800c3e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b086      	sub	sp, #24
 800c3e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c3e6:	4b47      	ldr	r3, [pc, #284]	@ (800c504 <xPortStartScheduler+0x124>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	4a47      	ldr	r2, [pc, #284]	@ (800c508 <xPortStartScheduler+0x128>)
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	d10b      	bne.n	800c408 <xPortStartScheduler+0x28>
	__asm volatile
 800c3f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3f4:	f383 8811 	msr	BASEPRI, r3
 800c3f8:	f3bf 8f6f 	isb	sy
 800c3fc:	f3bf 8f4f 	dsb	sy
 800c400:	613b      	str	r3, [r7, #16]
}
 800c402:	bf00      	nop
 800c404:	bf00      	nop
 800c406:	e7fd      	b.n	800c404 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c408:	4b3e      	ldr	r3, [pc, #248]	@ (800c504 <xPortStartScheduler+0x124>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	4a3f      	ldr	r2, [pc, #252]	@ (800c50c <xPortStartScheduler+0x12c>)
 800c40e:	4293      	cmp	r3, r2
 800c410:	d10b      	bne.n	800c42a <xPortStartScheduler+0x4a>
	__asm volatile
 800c412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c416:	f383 8811 	msr	BASEPRI, r3
 800c41a:	f3bf 8f6f 	isb	sy
 800c41e:	f3bf 8f4f 	dsb	sy
 800c422:	60fb      	str	r3, [r7, #12]
}
 800c424:	bf00      	nop
 800c426:	bf00      	nop
 800c428:	e7fd      	b.n	800c426 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c42a:	4b39      	ldr	r3, [pc, #228]	@ (800c510 <xPortStartScheduler+0x130>)
 800c42c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	b2db      	uxtb	r3, r3
 800c434:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	22ff      	movs	r2, #255	@ 0xff
 800c43a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	781b      	ldrb	r3, [r3, #0]
 800c440:	b2db      	uxtb	r3, r3
 800c442:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c444:	78fb      	ldrb	r3, [r7, #3]
 800c446:	b2db      	uxtb	r3, r3
 800c448:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c44c:	b2da      	uxtb	r2, r3
 800c44e:	4b31      	ldr	r3, [pc, #196]	@ (800c514 <xPortStartScheduler+0x134>)
 800c450:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c452:	4b31      	ldr	r3, [pc, #196]	@ (800c518 <xPortStartScheduler+0x138>)
 800c454:	2207      	movs	r2, #7
 800c456:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c458:	e009      	b.n	800c46e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c45a:	4b2f      	ldr	r3, [pc, #188]	@ (800c518 <xPortStartScheduler+0x138>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	3b01      	subs	r3, #1
 800c460:	4a2d      	ldr	r2, [pc, #180]	@ (800c518 <xPortStartScheduler+0x138>)
 800c462:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c464:	78fb      	ldrb	r3, [r7, #3]
 800c466:	b2db      	uxtb	r3, r3
 800c468:	005b      	lsls	r3, r3, #1
 800c46a:	b2db      	uxtb	r3, r3
 800c46c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c46e:	78fb      	ldrb	r3, [r7, #3]
 800c470:	b2db      	uxtb	r3, r3
 800c472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c476:	2b80      	cmp	r3, #128	@ 0x80
 800c478:	d0ef      	beq.n	800c45a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c47a:	4b27      	ldr	r3, [pc, #156]	@ (800c518 <xPortStartScheduler+0x138>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f1c3 0307 	rsb	r3, r3, #7
 800c482:	2b04      	cmp	r3, #4
 800c484:	d00b      	beq.n	800c49e <xPortStartScheduler+0xbe>
	__asm volatile
 800c486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c48a:	f383 8811 	msr	BASEPRI, r3
 800c48e:	f3bf 8f6f 	isb	sy
 800c492:	f3bf 8f4f 	dsb	sy
 800c496:	60bb      	str	r3, [r7, #8]
}
 800c498:	bf00      	nop
 800c49a:	bf00      	nop
 800c49c:	e7fd      	b.n	800c49a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c49e:	4b1e      	ldr	r3, [pc, #120]	@ (800c518 <xPortStartScheduler+0x138>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	021b      	lsls	r3, r3, #8
 800c4a4:	4a1c      	ldr	r2, [pc, #112]	@ (800c518 <xPortStartScheduler+0x138>)
 800c4a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c4a8:	4b1b      	ldr	r3, [pc, #108]	@ (800c518 <xPortStartScheduler+0x138>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c4b0:	4a19      	ldr	r2, [pc, #100]	@ (800c518 <xPortStartScheduler+0x138>)
 800c4b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	b2da      	uxtb	r2, r3
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c4bc:	4b17      	ldr	r3, [pc, #92]	@ (800c51c <xPortStartScheduler+0x13c>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	4a16      	ldr	r2, [pc, #88]	@ (800c51c <xPortStartScheduler+0x13c>)
 800c4c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c4c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c4c8:	4b14      	ldr	r3, [pc, #80]	@ (800c51c <xPortStartScheduler+0x13c>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	4a13      	ldr	r2, [pc, #76]	@ (800c51c <xPortStartScheduler+0x13c>)
 800c4ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c4d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c4d4:	f000 f8da 	bl	800c68c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c4d8:	4b11      	ldr	r3, [pc, #68]	@ (800c520 <xPortStartScheduler+0x140>)
 800c4da:	2200      	movs	r2, #0
 800c4dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c4de:	f000 f8f9 	bl	800c6d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c4e2:	4b10      	ldr	r3, [pc, #64]	@ (800c524 <xPortStartScheduler+0x144>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	4a0f      	ldr	r2, [pc, #60]	@ (800c524 <xPortStartScheduler+0x144>)
 800c4e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c4ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c4ee:	f7ff ff63 	bl	800c3b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c4f2:	f7ff f813 	bl	800b51c <vTaskSwitchContext>
	prvTaskExitError();
 800c4f6:	f7ff ff19 	bl	800c32c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c4fa:	2300      	movs	r3, #0
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3718      	adds	r7, #24
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}
 800c504:	e000ed00 	.word	0xe000ed00
 800c508:	410fc271 	.word	0x410fc271
 800c50c:	410fc270 	.word	0x410fc270
 800c510:	e000e400 	.word	0xe000e400
 800c514:	20005810 	.word	0x20005810
 800c518:	20005814 	.word	0x20005814
 800c51c:	e000ed20 	.word	0xe000ed20
 800c520:	20000010 	.word	0x20000010
 800c524:	e000ef34 	.word	0xe000ef34

0800c528 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c528:	b480      	push	{r7}
 800c52a:	b083      	sub	sp, #12
 800c52c:	af00      	add	r7, sp, #0
	__asm volatile
 800c52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c532:	f383 8811 	msr	BASEPRI, r3
 800c536:	f3bf 8f6f 	isb	sy
 800c53a:	f3bf 8f4f 	dsb	sy
 800c53e:	607b      	str	r3, [r7, #4]
}
 800c540:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c542:	4b10      	ldr	r3, [pc, #64]	@ (800c584 <vPortEnterCritical+0x5c>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	3301      	adds	r3, #1
 800c548:	4a0e      	ldr	r2, [pc, #56]	@ (800c584 <vPortEnterCritical+0x5c>)
 800c54a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c54c:	4b0d      	ldr	r3, [pc, #52]	@ (800c584 <vPortEnterCritical+0x5c>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	2b01      	cmp	r3, #1
 800c552:	d110      	bne.n	800c576 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c554:	4b0c      	ldr	r3, [pc, #48]	@ (800c588 <vPortEnterCritical+0x60>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	b2db      	uxtb	r3, r3
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d00b      	beq.n	800c576 <vPortEnterCritical+0x4e>
	__asm volatile
 800c55e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c562:	f383 8811 	msr	BASEPRI, r3
 800c566:	f3bf 8f6f 	isb	sy
 800c56a:	f3bf 8f4f 	dsb	sy
 800c56e:	603b      	str	r3, [r7, #0]
}
 800c570:	bf00      	nop
 800c572:	bf00      	nop
 800c574:	e7fd      	b.n	800c572 <vPortEnterCritical+0x4a>
	}
}
 800c576:	bf00      	nop
 800c578:	370c      	adds	r7, #12
 800c57a:	46bd      	mov	sp, r7
 800c57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c580:	4770      	bx	lr
 800c582:	bf00      	nop
 800c584:	20000010 	.word	0x20000010
 800c588:	e000ed04 	.word	0xe000ed04

0800c58c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c58c:	b480      	push	{r7}
 800c58e:	b083      	sub	sp, #12
 800c590:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c592:	4b12      	ldr	r3, [pc, #72]	@ (800c5dc <vPortExitCritical+0x50>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d10b      	bne.n	800c5b2 <vPortExitCritical+0x26>
	__asm volatile
 800c59a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c59e:	f383 8811 	msr	BASEPRI, r3
 800c5a2:	f3bf 8f6f 	isb	sy
 800c5a6:	f3bf 8f4f 	dsb	sy
 800c5aa:	607b      	str	r3, [r7, #4]
}
 800c5ac:	bf00      	nop
 800c5ae:	bf00      	nop
 800c5b0:	e7fd      	b.n	800c5ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c5b2:	4b0a      	ldr	r3, [pc, #40]	@ (800c5dc <vPortExitCritical+0x50>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	3b01      	subs	r3, #1
 800c5b8:	4a08      	ldr	r2, [pc, #32]	@ (800c5dc <vPortExitCritical+0x50>)
 800c5ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c5bc:	4b07      	ldr	r3, [pc, #28]	@ (800c5dc <vPortExitCritical+0x50>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d105      	bne.n	800c5d0 <vPortExitCritical+0x44>
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	f383 8811 	msr	BASEPRI, r3
}
 800c5ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c5d0:	bf00      	nop
 800c5d2:	370c      	adds	r7, #12
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5da:	4770      	bx	lr
 800c5dc:	20000010 	.word	0x20000010

0800c5e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c5e0:	f3ef 8009 	mrs	r0, PSP
 800c5e4:	f3bf 8f6f 	isb	sy
 800c5e8:	4b15      	ldr	r3, [pc, #84]	@ (800c640 <pxCurrentTCBConst>)
 800c5ea:	681a      	ldr	r2, [r3, #0]
 800c5ec:	f01e 0f10 	tst.w	lr, #16
 800c5f0:	bf08      	it	eq
 800c5f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c5f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5fa:	6010      	str	r0, [r2, #0]
 800c5fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c600:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c604:	f380 8811 	msr	BASEPRI, r0
 800c608:	f3bf 8f4f 	dsb	sy
 800c60c:	f3bf 8f6f 	isb	sy
 800c610:	f7fe ff84 	bl	800b51c <vTaskSwitchContext>
 800c614:	f04f 0000 	mov.w	r0, #0
 800c618:	f380 8811 	msr	BASEPRI, r0
 800c61c:	bc09      	pop	{r0, r3}
 800c61e:	6819      	ldr	r1, [r3, #0]
 800c620:	6808      	ldr	r0, [r1, #0]
 800c622:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c626:	f01e 0f10 	tst.w	lr, #16
 800c62a:	bf08      	it	eq
 800c62c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c630:	f380 8809 	msr	PSP, r0
 800c634:	f3bf 8f6f 	isb	sy
 800c638:	4770      	bx	lr
 800c63a:	bf00      	nop
 800c63c:	f3af 8000 	nop.w

0800c640 <pxCurrentTCBConst>:
 800c640:	200051e4 	.word	0x200051e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c644:	bf00      	nop
 800c646:	bf00      	nop

0800c648 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b082      	sub	sp, #8
 800c64c:	af00      	add	r7, sp, #0
	__asm volatile
 800c64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c652:	f383 8811 	msr	BASEPRI, r3
 800c656:	f3bf 8f6f 	isb	sy
 800c65a:	f3bf 8f4f 	dsb	sy
 800c65e:	607b      	str	r3, [r7, #4]
}
 800c660:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c662:	f7fe fea1 	bl	800b3a8 <xTaskIncrementTick>
 800c666:	4603      	mov	r3, r0
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d003      	beq.n	800c674 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c66c:	4b06      	ldr	r3, [pc, #24]	@ (800c688 <xPortSysTickHandler+0x40>)
 800c66e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c672:	601a      	str	r2, [r3, #0]
 800c674:	2300      	movs	r3, #0
 800c676:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	f383 8811 	msr	BASEPRI, r3
}
 800c67e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c680:	bf00      	nop
 800c682:	3708      	adds	r7, #8
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}
 800c688:	e000ed04 	.word	0xe000ed04

0800c68c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c68c:	b480      	push	{r7}
 800c68e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c690:	4b0b      	ldr	r3, [pc, #44]	@ (800c6c0 <vPortSetupTimerInterrupt+0x34>)
 800c692:	2200      	movs	r2, #0
 800c694:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c696:	4b0b      	ldr	r3, [pc, #44]	@ (800c6c4 <vPortSetupTimerInterrupt+0x38>)
 800c698:	2200      	movs	r2, #0
 800c69a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c69c:	4b0a      	ldr	r3, [pc, #40]	@ (800c6c8 <vPortSetupTimerInterrupt+0x3c>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4a0a      	ldr	r2, [pc, #40]	@ (800c6cc <vPortSetupTimerInterrupt+0x40>)
 800c6a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6a6:	099b      	lsrs	r3, r3, #6
 800c6a8:	4a09      	ldr	r2, [pc, #36]	@ (800c6d0 <vPortSetupTimerInterrupt+0x44>)
 800c6aa:	3b01      	subs	r3, #1
 800c6ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c6ae:	4b04      	ldr	r3, [pc, #16]	@ (800c6c0 <vPortSetupTimerInterrupt+0x34>)
 800c6b0:	2207      	movs	r2, #7
 800c6b2:	601a      	str	r2, [r3, #0]
}
 800c6b4:	bf00      	nop
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6bc:	4770      	bx	lr
 800c6be:	bf00      	nop
 800c6c0:	e000e010 	.word	0xe000e010
 800c6c4:	e000e018 	.word	0xe000e018
 800c6c8:	20000004 	.word	0x20000004
 800c6cc:	10624dd3 	.word	0x10624dd3
 800c6d0:	e000e014 	.word	0xe000e014

0800c6d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c6d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c6e4 <vPortEnableVFP+0x10>
 800c6d8:	6801      	ldr	r1, [r0, #0]
 800c6da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c6de:	6001      	str	r1, [r0, #0]
 800c6e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c6e2:	bf00      	nop
 800c6e4:	e000ed88 	.word	0xe000ed88

0800c6e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b085      	sub	sp, #20
 800c6ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c6ee:	f3ef 8305 	mrs	r3, IPSR
 800c6f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	2b0f      	cmp	r3, #15
 800c6f8:	d915      	bls.n	800c726 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c6fa:	4a18      	ldr	r2, [pc, #96]	@ (800c75c <vPortValidateInterruptPriority+0x74>)
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	4413      	add	r3, r2
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c704:	4b16      	ldr	r3, [pc, #88]	@ (800c760 <vPortValidateInterruptPriority+0x78>)
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	7afa      	ldrb	r2, [r7, #11]
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d20b      	bcs.n	800c726 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c70e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c712:	f383 8811 	msr	BASEPRI, r3
 800c716:	f3bf 8f6f 	isb	sy
 800c71a:	f3bf 8f4f 	dsb	sy
 800c71e:	607b      	str	r3, [r7, #4]
}
 800c720:	bf00      	nop
 800c722:	bf00      	nop
 800c724:	e7fd      	b.n	800c722 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c726:	4b0f      	ldr	r3, [pc, #60]	@ (800c764 <vPortValidateInterruptPriority+0x7c>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c72e:	4b0e      	ldr	r3, [pc, #56]	@ (800c768 <vPortValidateInterruptPriority+0x80>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	429a      	cmp	r2, r3
 800c734:	d90b      	bls.n	800c74e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c73a:	f383 8811 	msr	BASEPRI, r3
 800c73e:	f3bf 8f6f 	isb	sy
 800c742:	f3bf 8f4f 	dsb	sy
 800c746:	603b      	str	r3, [r7, #0]
}
 800c748:	bf00      	nop
 800c74a:	bf00      	nop
 800c74c:	e7fd      	b.n	800c74a <vPortValidateInterruptPriority+0x62>
	}
 800c74e:	bf00      	nop
 800c750:	3714      	adds	r7, #20
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr
 800c75a:	bf00      	nop
 800c75c:	e000e3f0 	.word	0xe000e3f0
 800c760:	20005810 	.word	0x20005810
 800c764:	e000ed0c 	.word	0xe000ed0c
 800c768:	20005814 	.word	0x20005814

0800c76c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b08a      	sub	sp, #40	@ 0x28
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c774:	2300      	movs	r3, #0
 800c776:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c778:	f7fe fd5a 	bl	800b230 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c77c:	4b5c      	ldr	r3, [pc, #368]	@ (800c8f0 <pvPortMalloc+0x184>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d101      	bne.n	800c788 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c784:	f000 f924 	bl	800c9d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c788:	4b5a      	ldr	r3, [pc, #360]	@ (800c8f4 <pvPortMalloc+0x188>)
 800c78a:	681a      	ldr	r2, [r3, #0]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	4013      	ands	r3, r2
 800c790:	2b00      	cmp	r3, #0
 800c792:	f040 8095 	bne.w	800c8c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d01e      	beq.n	800c7da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c79c:	2208      	movs	r2, #8
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	4413      	add	r3, r2
 800c7a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f003 0307 	and.w	r3, r3, #7
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d015      	beq.n	800c7da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f023 0307 	bic.w	r3, r3, #7
 800c7b4:	3308      	adds	r3, #8
 800c7b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f003 0307 	and.w	r3, r3, #7
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d00b      	beq.n	800c7da <pvPortMalloc+0x6e>
	__asm volatile
 800c7c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7c6:	f383 8811 	msr	BASEPRI, r3
 800c7ca:	f3bf 8f6f 	isb	sy
 800c7ce:	f3bf 8f4f 	dsb	sy
 800c7d2:	617b      	str	r3, [r7, #20]
}
 800c7d4:	bf00      	nop
 800c7d6:	bf00      	nop
 800c7d8:	e7fd      	b.n	800c7d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d06f      	beq.n	800c8c0 <pvPortMalloc+0x154>
 800c7e0:	4b45      	ldr	r3, [pc, #276]	@ (800c8f8 <pvPortMalloc+0x18c>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	687a      	ldr	r2, [r7, #4]
 800c7e6:	429a      	cmp	r2, r3
 800c7e8:	d86a      	bhi.n	800c8c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c7ea:	4b44      	ldr	r3, [pc, #272]	@ (800c8fc <pvPortMalloc+0x190>)
 800c7ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c7ee:	4b43      	ldr	r3, [pc, #268]	@ (800c8fc <pvPortMalloc+0x190>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c7f4:	e004      	b.n	800c800 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	687a      	ldr	r2, [r7, #4]
 800c806:	429a      	cmp	r2, r3
 800c808:	d903      	bls.n	800c812 <pvPortMalloc+0xa6>
 800c80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d1f1      	bne.n	800c7f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c812:	4b37      	ldr	r3, [pc, #220]	@ (800c8f0 <pvPortMalloc+0x184>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c818:	429a      	cmp	r2, r3
 800c81a:	d051      	beq.n	800c8c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c81c:	6a3b      	ldr	r3, [r7, #32]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	2208      	movs	r2, #8
 800c822:	4413      	add	r3, r2
 800c824:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c828:	681a      	ldr	r2, [r3, #0]
 800c82a:	6a3b      	ldr	r3, [r7, #32]
 800c82c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c82e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c830:	685a      	ldr	r2, [r3, #4]
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	1ad2      	subs	r2, r2, r3
 800c836:	2308      	movs	r3, #8
 800c838:	005b      	lsls	r3, r3, #1
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d920      	bls.n	800c880 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c83e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	4413      	add	r3, r2
 800c844:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c846:	69bb      	ldr	r3, [r7, #24]
 800c848:	f003 0307 	and.w	r3, r3, #7
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d00b      	beq.n	800c868 <pvPortMalloc+0xfc>
	__asm volatile
 800c850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c854:	f383 8811 	msr	BASEPRI, r3
 800c858:	f3bf 8f6f 	isb	sy
 800c85c:	f3bf 8f4f 	dsb	sy
 800c860:	613b      	str	r3, [r7, #16]
}
 800c862:	bf00      	nop
 800c864:	bf00      	nop
 800c866:	e7fd      	b.n	800c864 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c86a:	685a      	ldr	r2, [r3, #4]
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	1ad2      	subs	r2, r2, r3
 800c870:	69bb      	ldr	r3, [r7, #24]
 800c872:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c87a:	69b8      	ldr	r0, [r7, #24]
 800c87c:	f000 f90a 	bl	800ca94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c880:	4b1d      	ldr	r3, [pc, #116]	@ (800c8f8 <pvPortMalloc+0x18c>)
 800c882:	681a      	ldr	r2, [r3, #0]
 800c884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c886:	685b      	ldr	r3, [r3, #4]
 800c888:	1ad3      	subs	r3, r2, r3
 800c88a:	4a1b      	ldr	r2, [pc, #108]	@ (800c8f8 <pvPortMalloc+0x18c>)
 800c88c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c88e:	4b1a      	ldr	r3, [pc, #104]	@ (800c8f8 <pvPortMalloc+0x18c>)
 800c890:	681a      	ldr	r2, [r3, #0]
 800c892:	4b1b      	ldr	r3, [pc, #108]	@ (800c900 <pvPortMalloc+0x194>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	429a      	cmp	r2, r3
 800c898:	d203      	bcs.n	800c8a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c89a:	4b17      	ldr	r3, [pc, #92]	@ (800c8f8 <pvPortMalloc+0x18c>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	4a18      	ldr	r2, [pc, #96]	@ (800c900 <pvPortMalloc+0x194>)
 800c8a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8a4:	685a      	ldr	r2, [r3, #4]
 800c8a6:	4b13      	ldr	r3, [pc, #76]	@ (800c8f4 <pvPortMalloc+0x188>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	431a      	orrs	r2, r3
 800c8ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c8b6:	4b13      	ldr	r3, [pc, #76]	@ (800c904 <pvPortMalloc+0x198>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	3301      	adds	r3, #1
 800c8bc:	4a11      	ldr	r2, [pc, #68]	@ (800c904 <pvPortMalloc+0x198>)
 800c8be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c8c0:	f7fe fcc4 	bl	800b24c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8c4:	69fb      	ldr	r3, [r7, #28]
 800c8c6:	f003 0307 	and.w	r3, r3, #7
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d00b      	beq.n	800c8e6 <pvPortMalloc+0x17a>
	__asm volatile
 800c8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8d2:	f383 8811 	msr	BASEPRI, r3
 800c8d6:	f3bf 8f6f 	isb	sy
 800c8da:	f3bf 8f4f 	dsb	sy
 800c8de:	60fb      	str	r3, [r7, #12]
}
 800c8e0:	bf00      	nop
 800c8e2:	bf00      	nop
 800c8e4:	e7fd      	b.n	800c8e2 <pvPortMalloc+0x176>
	return pvReturn;
 800c8e6:	69fb      	ldr	r3, [r7, #28]
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3728      	adds	r7, #40	@ 0x28
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}
 800c8f0:	20006420 	.word	0x20006420
 800c8f4:	20006434 	.word	0x20006434
 800c8f8:	20006424 	.word	0x20006424
 800c8fc:	20006418 	.word	0x20006418
 800c900:	20006428 	.word	0x20006428
 800c904:	2000642c 	.word	0x2000642c

0800c908 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b086      	sub	sp, #24
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d04f      	beq.n	800c9ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c91a:	2308      	movs	r3, #8
 800c91c:	425b      	negs	r3, r3
 800c91e:	697a      	ldr	r2, [r7, #20]
 800c920:	4413      	add	r3, r2
 800c922:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	685a      	ldr	r2, [r3, #4]
 800c92c:	4b25      	ldr	r3, [pc, #148]	@ (800c9c4 <vPortFree+0xbc>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	4013      	ands	r3, r2
 800c932:	2b00      	cmp	r3, #0
 800c934:	d10b      	bne.n	800c94e <vPortFree+0x46>
	__asm volatile
 800c936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c93a:	f383 8811 	msr	BASEPRI, r3
 800c93e:	f3bf 8f6f 	isb	sy
 800c942:	f3bf 8f4f 	dsb	sy
 800c946:	60fb      	str	r3, [r7, #12]
}
 800c948:	bf00      	nop
 800c94a:	bf00      	nop
 800c94c:	e7fd      	b.n	800c94a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d00b      	beq.n	800c96e <vPortFree+0x66>
	__asm volatile
 800c956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c95a:	f383 8811 	msr	BASEPRI, r3
 800c95e:	f3bf 8f6f 	isb	sy
 800c962:	f3bf 8f4f 	dsb	sy
 800c966:	60bb      	str	r3, [r7, #8]
}
 800c968:	bf00      	nop
 800c96a:	bf00      	nop
 800c96c:	e7fd      	b.n	800c96a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	685a      	ldr	r2, [r3, #4]
 800c972:	4b14      	ldr	r3, [pc, #80]	@ (800c9c4 <vPortFree+0xbc>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	4013      	ands	r3, r2
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d01e      	beq.n	800c9ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d11a      	bne.n	800c9ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	685a      	ldr	r2, [r3, #4]
 800c988:	4b0e      	ldr	r3, [pc, #56]	@ (800c9c4 <vPortFree+0xbc>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	43db      	mvns	r3, r3
 800c98e:	401a      	ands	r2, r3
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c994:	f7fe fc4c 	bl	800b230 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	685a      	ldr	r2, [r3, #4]
 800c99c:	4b0a      	ldr	r3, [pc, #40]	@ (800c9c8 <vPortFree+0xc0>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4413      	add	r3, r2
 800c9a2:	4a09      	ldr	r2, [pc, #36]	@ (800c9c8 <vPortFree+0xc0>)
 800c9a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c9a6:	6938      	ldr	r0, [r7, #16]
 800c9a8:	f000 f874 	bl	800ca94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c9ac:	4b07      	ldr	r3, [pc, #28]	@ (800c9cc <vPortFree+0xc4>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	3301      	adds	r3, #1
 800c9b2:	4a06      	ldr	r2, [pc, #24]	@ (800c9cc <vPortFree+0xc4>)
 800c9b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c9b6:	f7fe fc49 	bl	800b24c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c9ba:	bf00      	nop
 800c9bc:	3718      	adds	r7, #24
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop
 800c9c4:	20006434 	.word	0x20006434
 800c9c8:	20006424 	.word	0x20006424
 800c9cc:	20006430 	.word	0x20006430

0800c9d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b085      	sub	sp, #20
 800c9d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c9d6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800c9da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c9dc:	4b27      	ldr	r3, [pc, #156]	@ (800ca7c <prvHeapInit+0xac>)
 800c9de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	f003 0307 	and.w	r3, r3, #7
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d00c      	beq.n	800ca04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	3307      	adds	r3, #7
 800c9ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	f023 0307 	bic.w	r3, r3, #7
 800c9f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c9f8:	68ba      	ldr	r2, [r7, #8]
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	1ad3      	subs	r3, r2, r3
 800c9fe:	4a1f      	ldr	r2, [pc, #124]	@ (800ca7c <prvHeapInit+0xac>)
 800ca00:	4413      	add	r3, r2
 800ca02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ca08:	4a1d      	ldr	r2, [pc, #116]	@ (800ca80 <prvHeapInit+0xb0>)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ca0e:	4b1c      	ldr	r3, [pc, #112]	@ (800ca80 <prvHeapInit+0xb0>)
 800ca10:	2200      	movs	r2, #0
 800ca12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	68ba      	ldr	r2, [r7, #8]
 800ca18:	4413      	add	r3, r2
 800ca1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ca1c:	2208      	movs	r2, #8
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	1a9b      	subs	r3, r3, r2
 800ca22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	f023 0307 	bic.w	r3, r3, #7
 800ca2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	4a15      	ldr	r2, [pc, #84]	@ (800ca84 <prvHeapInit+0xb4>)
 800ca30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ca32:	4b14      	ldr	r3, [pc, #80]	@ (800ca84 <prvHeapInit+0xb4>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2200      	movs	r2, #0
 800ca38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ca3a:	4b12      	ldr	r3, [pc, #72]	@ (800ca84 <prvHeapInit+0xb4>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	68fa      	ldr	r2, [r7, #12]
 800ca4a:	1ad2      	subs	r2, r2, r3
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ca50:	4b0c      	ldr	r3, [pc, #48]	@ (800ca84 <prvHeapInit+0xb4>)
 800ca52:	681a      	ldr	r2, [r3, #0]
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	685b      	ldr	r3, [r3, #4]
 800ca5c:	4a0a      	ldr	r2, [pc, #40]	@ (800ca88 <prvHeapInit+0xb8>)
 800ca5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	685b      	ldr	r3, [r3, #4]
 800ca64:	4a09      	ldr	r2, [pc, #36]	@ (800ca8c <prvHeapInit+0xbc>)
 800ca66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ca68:	4b09      	ldr	r3, [pc, #36]	@ (800ca90 <prvHeapInit+0xc0>)
 800ca6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ca6e:	601a      	str	r2, [r3, #0]
}
 800ca70:	bf00      	nop
 800ca72:	3714      	adds	r7, #20
 800ca74:	46bd      	mov	sp, r7
 800ca76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7a:	4770      	bx	lr
 800ca7c:	20005818 	.word	0x20005818
 800ca80:	20006418 	.word	0x20006418
 800ca84:	20006420 	.word	0x20006420
 800ca88:	20006428 	.word	0x20006428
 800ca8c:	20006424 	.word	0x20006424
 800ca90:	20006434 	.word	0x20006434

0800ca94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ca94:	b480      	push	{r7}
 800ca96:	b085      	sub	sp, #20
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ca9c:	4b28      	ldr	r3, [pc, #160]	@ (800cb40 <prvInsertBlockIntoFreeList+0xac>)
 800ca9e:	60fb      	str	r3, [r7, #12]
 800caa0:	e002      	b.n	800caa8 <prvInsertBlockIntoFreeList+0x14>
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	60fb      	str	r3, [r7, #12]
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	687a      	ldr	r2, [r7, #4]
 800caae:	429a      	cmp	r2, r3
 800cab0:	d8f7      	bhi.n	800caa2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	685b      	ldr	r3, [r3, #4]
 800caba:	68ba      	ldr	r2, [r7, #8]
 800cabc:	4413      	add	r3, r2
 800cabe:	687a      	ldr	r2, [r7, #4]
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d108      	bne.n	800cad6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	685a      	ldr	r2, [r3, #4]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	685b      	ldr	r3, [r3, #4]
 800cacc:	441a      	add	r2, r3
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	68ba      	ldr	r2, [r7, #8]
 800cae0:	441a      	add	r2, r3
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	429a      	cmp	r2, r3
 800cae8:	d118      	bne.n	800cb1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681a      	ldr	r2, [r3, #0]
 800caee:	4b15      	ldr	r3, [pc, #84]	@ (800cb44 <prvInsertBlockIntoFreeList+0xb0>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d00d      	beq.n	800cb12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	685a      	ldr	r2, [r3, #4]
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	441a      	add	r2, r3
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	681a      	ldr	r2, [r3, #0]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	601a      	str	r2, [r3, #0]
 800cb10:	e008      	b.n	800cb24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cb12:	4b0c      	ldr	r3, [pc, #48]	@ (800cb44 <prvInsertBlockIntoFreeList+0xb0>)
 800cb14:	681a      	ldr	r2, [r3, #0]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	601a      	str	r2, [r3, #0]
 800cb1a:	e003      	b.n	800cb24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	681a      	ldr	r2, [r3, #0]
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cb24:	68fa      	ldr	r2, [r7, #12]
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d002      	beq.n	800cb32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	687a      	ldr	r2, [r7, #4]
 800cb30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb32:	bf00      	nop
 800cb34:	3714      	adds	r7, #20
 800cb36:	46bd      	mov	sp, r7
 800cb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3c:	4770      	bx	lr
 800cb3e:	bf00      	nop
 800cb40:	20006418 	.word	0x20006418
 800cb44:	20006420 	.word	0x20006420

0800cb48 <rcl_get_zero_initialized_init_options>:
 800cb48:	2000      	movs	r0, #0
 800cb4a:	4770      	bx	lr

0800cb4c <rcl_init_options_init>:
 800cb4c:	b084      	sub	sp, #16
 800cb4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb50:	b097      	sub	sp, #92	@ 0x5c
 800cb52:	ae1d      	add	r6, sp, #116	@ 0x74
 800cb54:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800cb58:	2800      	cmp	r0, #0
 800cb5a:	d058      	beq.n	800cc0e <rcl_init_options_init+0xc2>
 800cb5c:	6803      	ldr	r3, [r0, #0]
 800cb5e:	4605      	mov	r5, r0
 800cb60:	b133      	cbz	r3, 800cb70 <rcl_init_options_init+0x24>
 800cb62:	2464      	movs	r4, #100	@ 0x64
 800cb64:	4620      	mov	r0, r4
 800cb66:	b017      	add	sp, #92	@ 0x5c
 800cb68:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cb6c:	b004      	add	sp, #16
 800cb6e:	4770      	bx	lr
 800cb70:	4630      	mov	r0, r6
 800cb72:	f001 f997 	bl	800dea4 <rcutils_allocator_is_valid>
 800cb76:	2800      	cmp	r0, #0
 800cb78:	d049      	beq.n	800cc0e <rcl_init_options_init+0xc2>
 800cb7a:	46b4      	mov	ip, r6
 800cb7c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cb80:	ac11      	add	r4, sp, #68	@ 0x44
 800cb82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb84:	f8dc 3000 	ldr.w	r3, [ip]
 800cb88:	6023      	str	r3, [r4, #0]
 800cb8a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800cb8c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cb8e:	2050      	movs	r0, #80	@ 0x50
 800cb90:	4798      	blx	r3
 800cb92:	4604      	mov	r4, r0
 800cb94:	6028      	str	r0, [r5, #0]
 800cb96:	2800      	cmp	r0, #0
 800cb98:	d03b      	beq.n	800cc12 <rcl_init_options_init+0xc6>
 800cb9a:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800cb9e:	4686      	mov	lr, r0
 800cba0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cba4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cba8:	f8dc 3000 	ldr.w	r3, [ip]
 800cbac:	f8ce 3000 	str.w	r3, [lr]
 800cbb0:	a802      	add	r0, sp, #8
 800cbb2:	f001 fa09 	bl	800dfc8 <rmw_get_zero_initialized_init_options>
 800cbb6:	f10d 0e08 	add.w	lr, sp, #8
 800cbba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cbbe:	f104 0c18 	add.w	ip, r4, #24
 800cbc2:	682f      	ldr	r7, [r5, #0]
 800cbc4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cbc8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cbcc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cbd0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cbd4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cbd8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800cbdc:	ac20      	add	r4, sp, #128	@ 0x80
 800cbde:	e88c 0003 	stmia.w	ip, {r0, r1}
 800cbe2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800cbe6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800cbea:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800cbee:	f107 0018 	add.w	r0, r7, #24
 800cbf2:	f001 fa17 	bl	800e024 <rmw_init_options_init>
 800cbf6:	4604      	mov	r4, r0
 800cbf8:	2800      	cmp	r0, #0
 800cbfa:	d0b3      	beq.n	800cb64 <rcl_init_options_init+0x18>
 800cbfc:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800cbfe:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800cc00:	6828      	ldr	r0, [r5, #0]
 800cc02:	4798      	blx	r3
 800cc04:	4620      	mov	r0, r4
 800cc06:	f007 fa7d 	bl	8014104 <rcl_convert_rmw_ret_to_rcl_ret>
 800cc0a:	4604      	mov	r4, r0
 800cc0c:	e7aa      	b.n	800cb64 <rcl_init_options_init+0x18>
 800cc0e:	240b      	movs	r4, #11
 800cc10:	e7a8      	b.n	800cb64 <rcl_init_options_init+0x18>
 800cc12:	240a      	movs	r4, #10
 800cc14:	e7a6      	b.n	800cb64 <rcl_init_options_init+0x18>
 800cc16:	bf00      	nop

0800cc18 <rcl_init_options_fini>:
 800cc18:	b530      	push	{r4, r5, lr}
 800cc1a:	b087      	sub	sp, #28
 800cc1c:	b1f0      	cbz	r0, 800cc5c <rcl_init_options_fini+0x44>
 800cc1e:	6803      	ldr	r3, [r0, #0]
 800cc20:	4604      	mov	r4, r0
 800cc22:	b1db      	cbz	r3, 800cc5c <rcl_init_options_fini+0x44>
 800cc24:	469c      	mov	ip, r3
 800cc26:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cc2a:	f10d 0e04 	add.w	lr, sp, #4
 800cc2e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cc32:	f8dc 3000 	ldr.w	r3, [ip]
 800cc36:	f8ce 3000 	str.w	r3, [lr]
 800cc3a:	a801      	add	r0, sp, #4
 800cc3c:	f001 f932 	bl	800dea4 <rcutils_allocator_is_valid>
 800cc40:	b160      	cbz	r0, 800cc5c <rcl_init_options_fini+0x44>
 800cc42:	6820      	ldr	r0, [r4, #0]
 800cc44:	3018      	adds	r0, #24
 800cc46:	f001 fa9d 	bl	800e184 <rmw_init_options_fini>
 800cc4a:	4605      	mov	r5, r0
 800cc4c:	b950      	cbnz	r0, 800cc64 <rcl_init_options_fini+0x4c>
 800cc4e:	6820      	ldr	r0, [r4, #0]
 800cc50:	9b02      	ldr	r3, [sp, #8]
 800cc52:	9905      	ldr	r1, [sp, #20]
 800cc54:	4798      	blx	r3
 800cc56:	4628      	mov	r0, r5
 800cc58:	b007      	add	sp, #28
 800cc5a:	bd30      	pop	{r4, r5, pc}
 800cc5c:	250b      	movs	r5, #11
 800cc5e:	4628      	mov	r0, r5
 800cc60:	b007      	add	sp, #28
 800cc62:	bd30      	pop	{r4, r5, pc}
 800cc64:	f007 fa4e 	bl	8014104 <rcl_convert_rmw_ret_to_rcl_ret>
 800cc68:	4605      	mov	r5, r0
 800cc6a:	e7f8      	b.n	800cc5e <rcl_init_options_fini+0x46>

0800cc6c <rcl_init_options_copy>:
 800cc6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc70:	b094      	sub	sp, #80	@ 0x50
 800cc72:	2800      	cmp	r0, #0
 800cc74:	d058      	beq.n	800cd28 <rcl_init_options_copy+0xbc>
 800cc76:	4604      	mov	r4, r0
 800cc78:	6800      	ldr	r0, [r0, #0]
 800cc7a:	2800      	cmp	r0, #0
 800cc7c:	d054      	beq.n	800cd28 <rcl_init_options_copy+0xbc>
 800cc7e:	460e      	mov	r6, r1
 800cc80:	f001 f910 	bl	800dea4 <rcutils_allocator_is_valid>
 800cc84:	2800      	cmp	r0, #0
 800cc86:	d04f      	beq.n	800cd28 <rcl_init_options_copy+0xbc>
 800cc88:	2e00      	cmp	r6, #0
 800cc8a:	d04d      	beq.n	800cd28 <rcl_init_options_copy+0xbc>
 800cc8c:	6833      	ldr	r3, [r6, #0]
 800cc8e:	b123      	cbz	r3, 800cc9a <rcl_init_options_copy+0x2e>
 800cc90:	2464      	movs	r4, #100	@ 0x64
 800cc92:	4620      	mov	r0, r4
 800cc94:	b014      	add	sp, #80	@ 0x50
 800cc96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc9a:	6827      	ldr	r7, [r4, #0]
 800cc9c:	46bc      	mov	ip, r7
 800cc9e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cca2:	ad0f      	add	r5, sp, #60	@ 0x3c
 800cca4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cca6:	f8dc 3000 	ldr.w	r3, [ip]
 800ccaa:	f8d7 8000 	ldr.w	r8, [r7]
 800ccae:	602b      	str	r3, [r5, #0]
 800ccb0:	4619      	mov	r1, r3
 800ccb2:	2050      	movs	r0, #80	@ 0x50
 800ccb4:	47c0      	blx	r8
 800ccb6:	4605      	mov	r5, r0
 800ccb8:	6030      	str	r0, [r6, #0]
 800ccba:	b3d0      	cbz	r0, 800cd32 <rcl_init_options_copy+0xc6>
 800ccbc:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800ccc0:	4686      	mov	lr, r0
 800ccc2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ccc6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ccca:	f8dc 3000 	ldr.w	r3, [ip]
 800ccce:	f8ce 3000 	str.w	r3, [lr]
 800ccd2:	4668      	mov	r0, sp
 800ccd4:	f001 f978 	bl	800dfc8 <rmw_get_zero_initialized_init_options>
 800ccd8:	46ee      	mov	lr, sp
 800ccda:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ccde:	f105 0c18 	add.w	ip, r5, #24
 800cce2:	6824      	ldr	r4, [r4, #0]
 800cce4:	6835      	ldr	r5, [r6, #0]
 800cce6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ccea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ccee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ccf2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ccf6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ccfa:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ccfe:	e88c 0003 	stmia.w	ip, {r0, r1}
 800cd02:	f104 0018 	add.w	r0, r4, #24
 800cd06:	f105 0118 	add.w	r1, r5, #24
 800cd0a:	f001 f9f3 	bl	800e0f4 <rmw_init_options_copy>
 800cd0e:	4604      	mov	r4, r0
 800cd10:	2800      	cmp	r0, #0
 800cd12:	d0be      	beq.n	800cc92 <rcl_init_options_copy+0x26>
 800cd14:	f001 f8d4 	bl	800dec0 <rcutils_get_error_string>
 800cd18:	f001 f8ea 	bl	800def0 <rcutils_reset_error>
 800cd1c:	4630      	mov	r0, r6
 800cd1e:	f7ff ff7b 	bl	800cc18 <rcl_init_options_fini>
 800cd22:	b140      	cbz	r0, 800cd36 <rcl_init_options_copy+0xca>
 800cd24:	4604      	mov	r4, r0
 800cd26:	e7b4      	b.n	800cc92 <rcl_init_options_copy+0x26>
 800cd28:	240b      	movs	r4, #11
 800cd2a:	4620      	mov	r0, r4
 800cd2c:	b014      	add	sp, #80	@ 0x50
 800cd2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd32:	240a      	movs	r4, #10
 800cd34:	e7ad      	b.n	800cc92 <rcl_init_options_copy+0x26>
 800cd36:	4620      	mov	r0, r4
 800cd38:	b014      	add	sp, #80	@ 0x50
 800cd3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd3e:	f007 b9e1 	b.w	8014104 <rcl_convert_rmw_ret_to_rcl_ret>
 800cd42:	bf00      	nop

0800cd44 <rcl_init_options_set_domain_id>:
 800cd44:	b120      	cbz	r0, 800cd50 <rcl_init_options_set_domain_id+0xc>
 800cd46:	6803      	ldr	r3, [r0, #0]
 800cd48:	b113      	cbz	r3, 800cd50 <rcl_init_options_set_domain_id+0xc>
 800cd4a:	6259      	str	r1, [r3, #36]	@ 0x24
 800cd4c:	2000      	movs	r0, #0
 800cd4e:	4770      	bx	lr
 800cd50:	200b      	movs	r0, #11
 800cd52:	4770      	bx	lr

0800cd54 <rcl_get_zero_initialized_publisher>:
 800cd54:	4b01      	ldr	r3, [pc, #4]	@ (800cd5c <rcl_get_zero_initialized_publisher+0x8>)
 800cd56:	6818      	ldr	r0, [r3, #0]
 800cd58:	4770      	bx	lr
 800cd5a:	bf00      	nop
 800cd5c:	0801b074 	.word	0x0801b074

0800cd60 <rcl_publisher_init>:
 800cd60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd64:	b088      	sub	sp, #32
 800cd66:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800cd68:	2d00      	cmp	r5, #0
 800cd6a:	d069      	beq.n	800ce40 <rcl_publisher_init+0xe0>
 800cd6c:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800cd70:	4604      	mov	r4, r0
 800cd72:	4648      	mov	r0, r9
 800cd74:	460e      	mov	r6, r1
 800cd76:	4690      	mov	r8, r2
 800cd78:	461f      	mov	r7, r3
 800cd7a:	f001 f893 	bl	800dea4 <rcutils_allocator_is_valid>
 800cd7e:	2800      	cmp	r0, #0
 800cd80:	d05e      	beq.n	800ce40 <rcl_publisher_init+0xe0>
 800cd82:	2c00      	cmp	r4, #0
 800cd84:	d05c      	beq.n	800ce40 <rcl_publisher_init+0xe0>
 800cd86:	f8d4 a000 	ldr.w	sl, [r4]
 800cd8a:	f1ba 0f00 	cmp.w	sl, #0
 800cd8e:	d004      	beq.n	800cd9a <rcl_publisher_init+0x3a>
 800cd90:	2764      	movs	r7, #100	@ 0x64
 800cd92:	4638      	mov	r0, r7
 800cd94:	b008      	add	sp, #32
 800cd96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd9a:	4630      	mov	r0, r6
 800cd9c:	f007 fcac 	bl	80146f8 <rcl_node_is_valid>
 800cda0:	2800      	cmp	r0, #0
 800cda2:	d052      	beq.n	800ce4a <rcl_publisher_init+0xea>
 800cda4:	f1b8 0f00 	cmp.w	r8, #0
 800cda8:	d04a      	beq.n	800ce40 <rcl_publisher_init+0xe0>
 800cdaa:	2f00      	cmp	r7, #0
 800cdac:	d048      	beq.n	800ce40 <rcl_publisher_init+0xe0>
 800cdae:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800cdb2:	aa07      	add	r2, sp, #28
 800cdb4:	9205      	str	r2, [sp, #20]
 800cdb6:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800cdba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cdbe:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800cdc2:	f8cd a01c 	str.w	sl, [sp, #28]
 800cdc6:	4639      	mov	r1, r7
 800cdc8:	e899 000c 	ldmia.w	r9, {r2, r3}
 800cdcc:	4630      	mov	r0, r6
 800cdce:	f007 fce7 	bl	80147a0 <rcl_node_resolve_name>
 800cdd2:	4607      	mov	r7, r0
 800cdd4:	2800      	cmp	r0, #0
 800cdd6:	d14f      	bne.n	800ce78 <rcl_publisher_init+0x118>
 800cdd8:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800cdda:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800cddc:	20c8      	movs	r0, #200	@ 0xc8
 800cdde:	4798      	blx	r3
 800cde0:	6020      	str	r0, [r4, #0]
 800cde2:	2800      	cmp	r0, #0
 800cde4:	d04e      	beq.n	800ce84 <rcl_publisher_init+0x124>
 800cde6:	4630      	mov	r0, r6
 800cde8:	f007 fca8 	bl	801473c <rcl_node_get_rmw_handle>
 800cdec:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800cdf0:	9300      	str	r3, [sp, #0]
 800cdf2:	9a07      	ldr	r2, [sp, #28]
 800cdf4:	6827      	ldr	r7, [r4, #0]
 800cdf6:	462b      	mov	r3, r5
 800cdf8:	4641      	mov	r1, r8
 800cdfa:	f001 fceb 	bl	800e7d4 <rmw_create_publisher>
 800cdfe:	6823      	ldr	r3, [r4, #0]
 800ce00:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800ce04:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800ce08:	b370      	cbz	r0, 800ce68 <rcl_publisher_init+0x108>
 800ce0a:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800ce0e:	f001 fdbf 	bl	800e990 <rmw_publisher_get_actual_qos>
 800ce12:	6823      	ldr	r3, [r4, #0]
 800ce14:	4607      	mov	r7, r0
 800ce16:	b9d0      	cbnz	r0, 800ce4e <rcl_publisher_init+0xee>
 800ce18:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800ce1c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800ce20:	4629      	mov	r1, r5
 800ce22:	2270      	movs	r2, #112	@ 0x70
 800ce24:	4618      	mov	r0, r3
 800ce26:	f00d f998 	bl	801a15a <memcpy>
 800ce2a:	6832      	ldr	r2, [r6, #0]
 800ce2c:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800ce30:	9807      	ldr	r0, [sp, #28]
 800ce32:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800ce34:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800ce36:	4798      	blx	r3
 800ce38:	4638      	mov	r0, r7
 800ce3a:	b008      	add	sp, #32
 800ce3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce40:	270b      	movs	r7, #11
 800ce42:	4638      	mov	r0, r7
 800ce44:	b008      	add	sp, #32
 800ce46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce4a:	27c8      	movs	r7, #200	@ 0xc8
 800ce4c:	e7a1      	b.n	800cd92 <rcl_publisher_init+0x32>
 800ce4e:	b18b      	cbz	r3, 800ce74 <rcl_publisher_init+0x114>
 800ce50:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800ce54:	b142      	cbz	r2, 800ce68 <rcl_publisher_init+0x108>
 800ce56:	4630      	mov	r0, r6
 800ce58:	f007 fc70 	bl	801473c <rcl_node_get_rmw_handle>
 800ce5c:	6823      	ldr	r3, [r4, #0]
 800ce5e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800ce62:	f001 fda5 	bl	800e9b0 <rmw_destroy_publisher>
 800ce66:	6823      	ldr	r3, [r4, #0]
 800ce68:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800ce6a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	4790      	blx	r2
 800ce70:	2300      	movs	r3, #0
 800ce72:	6023      	str	r3, [r4, #0]
 800ce74:	2701      	movs	r7, #1
 800ce76:	e7db      	b.n	800ce30 <rcl_publisher_init+0xd0>
 800ce78:	2867      	cmp	r0, #103	@ 0x67
 800ce7a:	d0d9      	beq.n	800ce30 <rcl_publisher_init+0xd0>
 800ce7c:	2869      	cmp	r0, #105	@ 0x69
 800ce7e:	d003      	beq.n	800ce88 <rcl_publisher_init+0x128>
 800ce80:	280a      	cmp	r0, #10
 800ce82:	d1f7      	bne.n	800ce74 <rcl_publisher_init+0x114>
 800ce84:	270a      	movs	r7, #10
 800ce86:	e7d3      	b.n	800ce30 <rcl_publisher_init+0xd0>
 800ce88:	2767      	movs	r7, #103	@ 0x67
 800ce8a:	e7d1      	b.n	800ce30 <rcl_publisher_init+0xd0>

0800ce8c <rcl_publisher_get_default_options>:
 800ce8c:	b570      	push	{r4, r5, r6, lr}
 800ce8e:	4d14      	ldr	r5, [pc, #80]	@ (800cee0 <rcl_publisher_get_default_options+0x54>)
 800ce90:	4914      	ldr	r1, [pc, #80]	@ (800cee4 <rcl_publisher_get_default_options+0x58>)
 800ce92:	b088      	sub	sp, #32
 800ce94:	4604      	mov	r4, r0
 800ce96:	2250      	movs	r2, #80	@ 0x50
 800ce98:	4628      	mov	r0, r5
 800ce9a:	f00d f95e 	bl	801a15a <memcpy>
 800ce9e:	a802      	add	r0, sp, #8
 800cea0:	f000 fff2 	bl	800de88 <rcutils_get_default_allocator>
 800cea4:	f10d 0c08 	add.w	ip, sp, #8
 800cea8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ceac:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800ceb0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ceb4:	466e      	mov	r6, sp
 800ceb6:	f8dc 3000 	ldr.w	r3, [ip]
 800ceba:	f8ce 3000 	str.w	r3, [lr]
 800cebe:	4630      	mov	r0, r6
 800cec0:	f001 f892 	bl	800dfe8 <rmw_get_default_publisher_options>
 800cec4:	e896 0003 	ldmia.w	r6, {r0, r1}
 800cec8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800cecc:	e883 0003 	stmia.w	r3, {r0, r1}
 800ced0:	2270      	movs	r2, #112	@ 0x70
 800ced2:	4629      	mov	r1, r5
 800ced4:	4620      	mov	r0, r4
 800ced6:	f00d f940 	bl	801a15a <memcpy>
 800ceda:	4620      	mov	r0, r4
 800cedc:	b008      	add	sp, #32
 800cede:	bd70      	pop	{r4, r5, r6, pc}
 800cee0:	20006438 	.word	0x20006438
 800cee4:	0801b078 	.word	0x0801b078

0800cee8 <rcl_publish>:
 800cee8:	b1f8      	cbz	r0, 800cf2a <rcl_publish+0x42>
 800ceea:	6803      	ldr	r3, [r0, #0]
 800ceec:	b570      	push	{r4, r5, r6, lr}
 800ceee:	4604      	mov	r4, r0
 800cef0:	b1b3      	cbz	r3, 800cf20 <rcl_publish+0x38>
 800cef2:	4616      	mov	r6, r2
 800cef4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800cef8:	b192      	cbz	r2, 800cf20 <rcl_publish+0x38>
 800cefa:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800cefe:	460d      	mov	r5, r1
 800cf00:	f007 f91e 	bl	8014140 <rcl_context_is_valid>
 800cf04:	b160      	cbz	r0, 800cf20 <rcl_publish+0x38>
 800cf06:	6823      	ldr	r3, [r4, #0]
 800cf08:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800cf0c:	b140      	cbz	r0, 800cf20 <rcl_publish+0x38>
 800cf0e:	b155      	cbz	r5, 800cf26 <rcl_publish+0x3e>
 800cf10:	4632      	mov	r2, r6
 800cf12:	4629      	mov	r1, r5
 800cf14:	f001 fbfe 	bl	800e714 <rmw_publish>
 800cf18:	3800      	subs	r0, #0
 800cf1a:	bf18      	it	ne
 800cf1c:	2001      	movne	r0, #1
 800cf1e:	bd70      	pop	{r4, r5, r6, pc}
 800cf20:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800cf24:	bd70      	pop	{r4, r5, r6, pc}
 800cf26:	200b      	movs	r0, #11
 800cf28:	bd70      	pop	{r4, r5, r6, pc}
 800cf2a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800cf2e:	4770      	bx	lr

0800cf30 <rcl_publisher_is_valid>:
 800cf30:	b1a0      	cbz	r0, 800cf5c <rcl_publisher_is_valid+0x2c>
 800cf32:	6803      	ldr	r3, [r0, #0]
 800cf34:	b510      	push	{r4, lr}
 800cf36:	4604      	mov	r4, r0
 800cf38:	b173      	cbz	r3, 800cf58 <rcl_publisher_is_valid+0x28>
 800cf3a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800cf3e:	b15a      	cbz	r2, 800cf58 <rcl_publisher_is_valid+0x28>
 800cf40:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800cf44:	f007 f8fc 	bl	8014140 <rcl_context_is_valid>
 800cf48:	b130      	cbz	r0, 800cf58 <rcl_publisher_is_valid+0x28>
 800cf4a:	6823      	ldr	r3, [r4, #0]
 800cf4c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800cf50:	3800      	subs	r0, #0
 800cf52:	bf18      	it	ne
 800cf54:	2001      	movne	r0, #1
 800cf56:	bd10      	pop	{r4, pc}
 800cf58:	2000      	movs	r0, #0
 800cf5a:	bd10      	pop	{r4, pc}
 800cf5c:	2000      	movs	r0, #0
 800cf5e:	4770      	bx	lr

0800cf60 <rcl_publisher_is_valid_except_context>:
 800cf60:	b130      	cbz	r0, 800cf70 <rcl_publisher_is_valid_except_context+0x10>
 800cf62:	6800      	ldr	r0, [r0, #0]
 800cf64:	b120      	cbz	r0, 800cf70 <rcl_publisher_is_valid_except_context+0x10>
 800cf66:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800cf6a:	3800      	subs	r0, #0
 800cf6c:	bf18      	it	ne
 800cf6e:	2001      	movne	r0, #1
 800cf70:	4770      	bx	lr
 800cf72:	bf00      	nop

0800cf74 <_rclc_check_for_new_data>:
 800cf74:	2800      	cmp	r0, #0
 800cf76:	d046      	beq.n	800d006 <_rclc_check_for_new_data+0x92>
 800cf78:	b510      	push	{r4, lr}
 800cf7a:	7802      	ldrb	r2, [r0, #0]
 800cf7c:	b084      	sub	sp, #16
 800cf7e:	4603      	mov	r3, r0
 800cf80:	2a0a      	cmp	r2, #10
 800cf82:	d842      	bhi.n	800d00a <_rclc_check_for_new_data+0x96>
 800cf84:	e8df f002 	tbb	[pc, r2]
 800cf88:	14181212 	.word	0x14181212
 800cf8c:	06060614 	.word	0x06060614
 800cf90:	2e1a      	.short	0x2e1a
 800cf92:	16          	.byte	0x16
 800cf93:	00          	.byte	0x00
 800cf94:	6a0a      	ldr	r2, [r1, #32]
 800cf96:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800cf98:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800cf9c:	2000      	movs	r0, #0
 800cf9e:	1a12      	subs	r2, r2, r0
 800cfa0:	bf18      	it	ne
 800cfa2:	2201      	movne	r2, #1
 800cfa4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800cfa8:	b004      	add	sp, #16
 800cfaa:	bd10      	pop	{r4, pc}
 800cfac:	680a      	ldr	r2, [r1, #0]
 800cfae:	e7f2      	b.n	800cf96 <_rclc_check_for_new_data+0x22>
 800cfb0:	698a      	ldr	r2, [r1, #24]
 800cfb2:	e7f0      	b.n	800cf96 <_rclc_check_for_new_data+0x22>
 800cfb4:	688a      	ldr	r2, [r1, #8]
 800cfb6:	e7ee      	b.n	800cf96 <_rclc_check_for_new_data+0x22>
 800cfb8:	690a      	ldr	r2, [r1, #16]
 800cfba:	e7ec      	b.n	800cf96 <_rclc_check_for_new_data+0x22>
 800cfbc:	685c      	ldr	r4, [r3, #4]
 800cfbe:	4608      	mov	r0, r1
 800cfc0:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800cfc4:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800cfc8:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800cfcc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800cfd0:	9300      	str	r3, [sp, #0]
 800cfd2:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800cfd6:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800cfda:	f104 0110 	add.w	r1, r4, #16
 800cfde:	f009 fab7 	bl	8016550 <rcl_action_client_wait_set_get_entities_ready>
 800cfe2:	e7e1      	b.n	800cfa8 <_rclc_check_for_new_data+0x34>
 800cfe4:	685c      	ldr	r4, [r3, #4]
 800cfe6:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800cfea:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800cfee:	e9cd 3200 	strd	r3, r2, [sp]
 800cff2:	4608      	mov	r0, r1
 800cff4:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800cff8:	f104 0220 	add.w	r2, r4, #32
 800cffc:	f104 0110 	add.w	r1, r4, #16
 800d000:	f009 fcbe 	bl	8016980 <rcl_action_server_wait_set_get_entities_ready>
 800d004:	e7d0      	b.n	800cfa8 <_rclc_check_for_new_data+0x34>
 800d006:	200b      	movs	r0, #11
 800d008:	4770      	bx	lr
 800d00a:	2001      	movs	r0, #1
 800d00c:	e7cc      	b.n	800cfa8 <_rclc_check_for_new_data+0x34>
 800d00e:	bf00      	nop

0800d010 <_rclc_take_new_data>:
 800d010:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d012:	b09b      	sub	sp, #108	@ 0x6c
 800d014:	2800      	cmp	r0, #0
 800d016:	f000 8088 	beq.w	800d12a <_rclc_take_new_data+0x11a>
 800d01a:	7803      	ldrb	r3, [r0, #0]
 800d01c:	4604      	mov	r4, r0
 800d01e:	2b0a      	cmp	r3, #10
 800d020:	f200 8167 	bhi.w	800d2f2 <_rclc_take_new_data+0x2e2>
 800d024:	e8df f003 	tbb	[pc, r3]
 800d028:	44152d2d 	.word	0x44152d2d
 800d02c:	19191944 	.word	0x19191944
 800d030:	065a      	.short	0x065a
 800d032:	15          	.byte	0x15
 800d033:	00          	.byte	0x00
 800d034:	6840      	ldr	r0, [r0, #4]
 800d036:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	f040 80b2 	bne.w	800d1a4 <_rclc_take_new_data+0x194>
 800d040:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800d044:	2b00      	cmp	r3, #0
 800d046:	f040 80e4 	bne.w	800d212 <_rclc_take_new_data+0x202>
 800d04a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d16f      	bne.n	800d132 <_rclc_take_new_data+0x122>
 800d052:	2500      	movs	r5, #0
 800d054:	4628      	mov	r0, r5
 800d056:	b01b      	add	sp, #108	@ 0x6c
 800d058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d05a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d05c:	6a0b      	ldr	r3, [r1, #32]
 800d05e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d0f5      	beq.n	800d052 <_rclc_take_new_data+0x42>
 800d066:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800d06a:	f104 0110 	add.w	r1, r4, #16
 800d06e:	f007 fd41 	bl	8014af4 <rcl_take_request>
 800d072:	4605      	mov	r5, r0
 800d074:	2800      	cmp	r0, #0
 800d076:	d0ec      	beq.n	800d052 <_rclc_take_new_data+0x42>
 800d078:	f240 2359 	movw	r3, #601	@ 0x259
 800d07c:	4298      	cmp	r0, r3
 800d07e:	d013      	beq.n	800d0a8 <_rclc_take_new_data+0x98>
 800d080:	e029      	b.n	800d0d6 <_rclc_take_new_data+0xc6>
 800d082:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d084:	680b      	ldr	r3, [r1, #0]
 800d086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d0e1      	beq.n	800d052 <_rclc_take_new_data+0x42>
 800d08e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800d092:	2300      	movs	r3, #0
 800d094:	aa0a      	add	r2, sp, #40	@ 0x28
 800d096:	f007 fe6b 	bl	8014d70 <rcl_take>
 800d09a:	4605      	mov	r5, r0
 800d09c:	2800      	cmp	r0, #0
 800d09e:	d0d9      	beq.n	800d054 <_rclc_take_new_data+0x44>
 800d0a0:	f240 1391 	movw	r3, #401	@ 0x191
 800d0a4:	4298      	cmp	r0, r3
 800d0a6:	d116      	bne.n	800d0d6 <_rclc_take_new_data+0xc6>
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800d0ae:	e7d1      	b.n	800d054 <_rclc_take_new_data+0x44>
 800d0b0:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d0b2:	698b      	ldr	r3, [r1, #24]
 800d0b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d0ca      	beq.n	800d052 <_rclc_take_new_data+0x42>
 800d0bc:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800d0c0:	f104 0110 	add.w	r1, r4, #16
 800d0c4:	f006 ffcc 	bl	8014060 <rcl_take_response>
 800d0c8:	4605      	mov	r5, r0
 800d0ca:	2800      	cmp	r0, #0
 800d0cc:	d0c1      	beq.n	800d052 <_rclc_take_new_data+0x42>
 800d0ce:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800d0d2:	4298      	cmp	r0, r3
 800d0d4:	d0be      	beq.n	800d054 <_rclc_take_new_data+0x44>
 800d0d6:	f000 ff0b 	bl	800def0 <rcutils_reset_error>
 800d0da:	e7bb      	b.n	800d054 <_rclc_take_new_data+0x44>
 800d0dc:	6840      	ldr	r0, [r0, #4]
 800d0de:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d17d      	bne.n	800d1e2 <_rclc_take_new_data+0x1d2>
 800d0e6:	69c3      	ldr	r3, [r0, #28]
 800d0e8:	b11b      	cbz	r3, 800d0f2 <_rclc_take_new_data+0xe2>
 800d0ea:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d144      	bne.n	800d17c <_rclc_take_new_data+0x16c>
 800d0f2:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	f040 80ac 	bne.w	800d254 <_rclc_take_new_data+0x244>
 800d0fc:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800d100:	2b00      	cmp	r3, #0
 800d102:	d0a6      	beq.n	800d052 <_rclc_take_new_data+0x42>
 800d104:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800d106:	a90a      	add	r1, sp, #40	@ 0x28
 800d108:	3010      	adds	r0, #16
 800d10a:	f009 f8f9 	bl	8016300 <rcl_action_take_result_response>
 800d10e:	4605      	mov	r5, r0
 800d110:	2800      	cmp	r0, #0
 800d112:	d1e0      	bne.n	800d0d6 <_rclc_take_new_data+0xc6>
 800d114:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d118:	6860      	ldr	r0, [r4, #4]
 800d11a:	f009 fd55 	bl	8016bc8 <rclc_action_find_handle_by_result_request_sequence_number>
 800d11e:	2800      	cmp	r0, #0
 800d120:	d098      	beq.n	800d054 <_rclc_take_new_data+0x44>
 800d122:	2301      	movs	r3, #1
 800d124:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800d128:	e794      	b.n	800d054 <_rclc_take_new_data+0x44>
 800d12a:	250b      	movs	r5, #11
 800d12c:	4628      	mov	r0, r5
 800d12e:	b01b      	add	sp, #108	@ 0x6c
 800d130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d132:	ae04      	add	r6, sp, #16
 800d134:	aa0a      	add	r2, sp, #40	@ 0x28
 800d136:	3010      	adds	r0, #16
 800d138:	4631      	mov	r1, r6
 800d13a:	f009 fb55 	bl	80167e8 <rcl_action_take_cancel_request>
 800d13e:	4605      	mov	r5, r0
 800d140:	2800      	cmp	r0, #0
 800d142:	d1c8      	bne.n	800d0d6 <_rclc_take_new_data+0xc6>
 800d144:	6860      	ldr	r0, [r4, #4]
 800d146:	a90a      	add	r1, sp, #40	@ 0x28
 800d148:	f009 fcfc 	bl	8016b44 <rclc_action_find_goal_handle_by_uuid>
 800d14c:	4607      	mov	r7, r0
 800d14e:	2800      	cmp	r0, #0
 800d150:	f000 80bb 	beq.w	800d2ca <_rclc_take_new_data+0x2ba>
 800d154:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800d158:	2101      	movs	r1, #1
 800d15a:	f009 fc7d 	bl	8016a58 <rcl_action_transition_goal_state>
 800d15e:	2803      	cmp	r0, #3
 800d160:	4684      	mov	ip, r0
 800d162:	f040 80a7 	bne.w	800d2b4 <_rclc_take_new_data+0x2a4>
 800d166:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d168:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800d16c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d16e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d172:	e884 0003 	stmia.w	r4, {r0, r1}
 800d176:	f887 c008 	strb.w	ip, [r7, #8]
 800d17a:	e76b      	b.n	800d054 <_rclc_take_new_data+0x44>
 800d17c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d17e:	3010      	adds	r0, #16
 800d180:	f009 f93e 	bl	8016400 <rcl_action_take_feedback>
 800d184:	4605      	mov	r5, r0
 800d186:	2800      	cmp	r0, #0
 800d188:	d1a5      	bne.n	800d0d6 <_rclc_take_new_data+0xc6>
 800d18a:	6860      	ldr	r0, [r4, #4]
 800d18c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d18e:	f009 fcd9 	bl	8016b44 <rclc_action_find_goal_handle_by_uuid>
 800d192:	4603      	mov	r3, r0
 800d194:	2800      	cmp	r0, #0
 800d196:	f000 80a3 	beq.w	800d2e0 <_rclc_take_new_data+0x2d0>
 800d19a:	2201      	movs	r2, #1
 800d19c:	6860      	ldr	r0, [r4, #4]
 800d19e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800d1a2:	e7a6      	b.n	800d0f2 <_rclc_take_new_data+0xe2>
 800d1a4:	f009 fca8 	bl	8016af8 <rclc_action_take_goal_handle>
 800d1a8:	4606      	mov	r6, r0
 800d1aa:	6860      	ldr	r0, [r4, #4]
 800d1ac:	2e00      	cmp	r6, #0
 800d1ae:	f43f af47 	beq.w	800d040 <_rclc_take_new_data+0x30>
 800d1b2:	6070      	str	r0, [r6, #4]
 800d1b4:	69f2      	ldr	r2, [r6, #28]
 800d1b6:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800d1ba:	3010      	adds	r0, #16
 800d1bc:	f009 fa5c 	bl	8016678 <rcl_action_take_goal_request>
 800d1c0:	4605      	mov	r5, r0
 800d1c2:	2800      	cmp	r0, #0
 800d1c4:	f040 808e 	bne.w	800d2e4 <_rclc_take_new_data+0x2d4>
 800d1c8:	69f7      	ldr	r7, [r6, #28]
 800d1ca:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d1cc:	7235      	strb	r5, [r6, #8]
 800d1ce:	f8c6 0009 	str.w	r0, [r6, #9]
 800d1d2:	f8c6 100d 	str.w	r1, [r6, #13]
 800d1d6:	6860      	ldr	r0, [r4, #4]
 800d1d8:	f8c6 2011 	str.w	r2, [r6, #17]
 800d1dc:	f8c6 3015 	str.w	r3, [r6, #21]
 800d1e0:	e72e      	b.n	800d040 <_rclc_take_new_data+0x30>
 800d1e2:	aa04      	add	r2, sp, #16
 800d1e4:	a90a      	add	r1, sp, #40	@ 0x28
 800d1e6:	3010      	adds	r0, #16
 800d1e8:	f009 f812 	bl	8016210 <rcl_action_take_goal_response>
 800d1ec:	4605      	mov	r5, r0
 800d1ee:	2800      	cmp	r0, #0
 800d1f0:	f47f af71 	bne.w	800d0d6 <_rclc_take_new_data+0xc6>
 800d1f4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d1f8:	6860      	ldr	r0, [r4, #4]
 800d1fa:	f009 fcd3 	bl	8016ba4 <rclc_action_find_handle_by_goal_request_sequence_number>
 800d1fe:	b130      	cbz	r0, 800d20e <_rclc_take_new_data+0x1fe>
 800d200:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800d204:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800d208:	2201      	movs	r2, #1
 800d20a:	f880 2020 	strb.w	r2, [r0, #32]
 800d20e:	6860      	ldr	r0, [r4, #4]
 800d210:	e769      	b.n	800d0e6 <_rclc_take_new_data+0xd6>
 800d212:	aa04      	add	r2, sp, #16
 800d214:	3010      	adds	r0, #16
 800d216:	a90a      	add	r1, sp, #40	@ 0x28
 800d218:	f009 faa6 	bl	8016768 <rcl_action_take_result_request>
 800d21c:	4605      	mov	r5, r0
 800d21e:	2800      	cmp	r0, #0
 800d220:	f47f af59 	bne.w	800d0d6 <_rclc_take_new_data+0xc6>
 800d224:	6860      	ldr	r0, [r4, #4]
 800d226:	a904      	add	r1, sp, #16
 800d228:	f009 fc8c 	bl	8016b44 <rclc_action_find_goal_handle_by_uuid>
 800d22c:	4607      	mov	r7, r0
 800d22e:	b160      	cbz	r0, 800d24a <_rclc_take_new_data+0x23a>
 800d230:	ad0a      	add	r5, sp, #40	@ 0x28
 800d232:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800d236:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d238:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d23a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d23e:	f04f 0c02 	mov.w	ip, #2
 800d242:	e886 0003 	stmia.w	r6, {r0, r1}
 800d246:	f887 c008 	strb.w	ip, [r7, #8]
 800d24a:	6860      	ldr	r0, [r4, #4]
 800d24c:	2300      	movs	r3, #0
 800d24e:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800d252:	e6fa      	b.n	800d04a <_rclc_take_new_data+0x3a>
 800d254:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800d258:	a90a      	add	r1, sp, #40	@ 0x28
 800d25a:	3010      	adds	r0, #16
 800d25c:	f009 f890 	bl	8016380 <rcl_action_take_cancel_response>
 800d260:	4605      	mov	r5, r0
 800d262:	2800      	cmp	r0, #0
 800d264:	f47f af37 	bne.w	800d0d6 <_rclc_take_new_data+0xc6>
 800d268:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d26c:	6860      	ldr	r0, [r4, #4]
 800d26e:	f009 fcbd 	bl	8016bec <rclc_action_find_handle_by_cancel_request_sequence_number>
 800d272:	4606      	mov	r6, r0
 800d274:	6860      	ldr	r0, [r4, #4]
 800d276:	2e00      	cmp	r6, #0
 800d278:	f43f af40 	beq.w	800d0fc <_rclc_take_new_data+0xec>
 800d27c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d27e:	2701      	movs	r7, #1
 800d280:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800d282:	2b00      	cmp	r3, #0
 800d284:	f43f af3a 	beq.w	800d0fc <_rclc_take_new_data+0xec>
 800d288:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d28a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800d28e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d292:	f009 fc57 	bl	8016b44 <rclc_action_find_goal_handle_by_uuid>
 800d296:	b138      	cbz	r0, 800d2a8 <_rclc_take_new_data+0x298>
 800d298:	6860      	ldr	r0, [r4, #4]
 800d29a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d29c:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800d2a0:	3501      	adds	r5, #1
 800d2a2:	42ab      	cmp	r3, r5
 800d2a4:	d8f0      	bhi.n	800d288 <_rclc_take_new_data+0x278>
 800d2a6:	e729      	b.n	800d0fc <_rclc_take_new_data+0xec>
 800d2a8:	6860      	ldr	r0, [r4, #4]
 800d2aa:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d2ac:	3501      	adds	r5, #1
 800d2ae:	42ab      	cmp	r3, r5
 800d2b0:	d8ea      	bhi.n	800d288 <_rclc_take_new_data+0x278>
 800d2b2:	e723      	b.n	800d0fc <_rclc_take_new_data+0xec>
 800d2b4:	ab06      	add	r3, sp, #24
 800d2b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d2b8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d2bc:	2103      	movs	r1, #3
 800d2be:	e896 000c 	ldmia.w	r6, {r2, r3}
 800d2c2:	6860      	ldr	r0, [r4, #4]
 800d2c4:	f009 fd08 	bl	8016cd8 <rclc_action_server_goal_cancel_reject>
 800d2c8:	e6c4      	b.n	800d054 <_rclc_take_new_data+0x44>
 800d2ca:	ab06      	add	r3, sp, #24
 800d2cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d2ce:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d2d2:	2102      	movs	r1, #2
 800d2d4:	e896 000c 	ldmia.w	r6, {r2, r3}
 800d2d8:	6860      	ldr	r0, [r4, #4]
 800d2da:	f009 fcfd 	bl	8016cd8 <rclc_action_server_goal_cancel_reject>
 800d2de:	e6b9      	b.n	800d054 <_rclc_take_new_data+0x44>
 800d2e0:	6860      	ldr	r0, [r4, #4]
 800d2e2:	e706      	b.n	800d0f2 <_rclc_take_new_data+0xe2>
 800d2e4:	6860      	ldr	r0, [r4, #4]
 800d2e6:	4631      	mov	r1, r6
 800d2e8:	f009 fc16 	bl	8016b18 <rclc_action_remove_used_goal_handle>
 800d2ec:	f000 fe00 	bl	800def0 <rcutils_reset_error>
 800d2f0:	e6b0      	b.n	800d054 <_rclc_take_new_data+0x44>
 800d2f2:	2501      	movs	r5, #1
 800d2f4:	e6ae      	b.n	800d054 <_rclc_take_new_data+0x44>
 800d2f6:	bf00      	nop

0800d2f8 <_rclc_execute.part.0>:
 800d2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2fa:	7803      	ldrb	r3, [r0, #0]
 800d2fc:	b087      	sub	sp, #28
 800d2fe:	4604      	mov	r4, r0
 800d300:	2b0a      	cmp	r3, #10
 800d302:	f200 8136 	bhi.w	800d572 <_rclc_execute.part.0+0x27a>
 800d306:	e8df f003 	tbb	[pc, r3]
 800d30a:	435e      	.short	0x435e
 800d30c:	06a1664f 	.word	0x06a1664f
 800d310:	6c1e0606 	.word	0x6c1e0606
 800d314:	59          	.byte	0x59
 800d315:	00          	.byte	0x00
 800d316:	2b06      	cmp	r3, #6
 800d318:	f000 8122 	beq.w	800d560 <_rclc_execute.part.0+0x268>
 800d31c:	2b07      	cmp	r3, #7
 800d31e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d320:	f040 8118 	bne.w	800d554 <_rclc_execute.part.0+0x25c>
 800d324:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800d328:	6880      	ldr	r0, [r0, #8]
 800d32a:	4798      	blx	r3
 800d32c:	f104 0110 	add.w	r1, r4, #16
 800d330:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800d332:	6860      	ldr	r0, [r4, #4]
 800d334:	f007 fc1e 	bl	8014b74 <rcl_send_response>
 800d338:	2800      	cmp	r0, #0
 800d33a:	d033      	beq.n	800d3a4 <_rclc_execute.part.0+0xac>
 800d33c:	9005      	str	r0, [sp, #20]
 800d33e:	f000 fdd7 	bl	800def0 <rcutils_reset_error>
 800d342:	9805      	ldr	r0, [sp, #20]
 800d344:	e02e      	b.n	800d3a4 <_rclc_execute.part.0+0xac>
 800d346:	6840      	ldr	r0, [r0, #4]
 800d348:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	f000 8086 	beq.w	800d45e <_rclc_execute.part.0+0x166>
 800d352:	2600      	movs	r6, #0
 800d354:	2701      	movs	r7, #1
 800d356:	e004      	b.n	800d362 <_rclc_execute.part.0+0x6a>
 800d358:	f009 fba8 	bl	8016aac <rclc_action_send_result_request>
 800d35c:	b998      	cbnz	r0, 800d386 <_rclc_execute.part.0+0x8e>
 800d35e:	722f      	strb	r7, [r5, #8]
 800d360:	6860      	ldr	r0, [r4, #4]
 800d362:	f009 fc55 	bl	8016c10 <rclc_action_find_first_handle_with_goal_response>
 800d366:	4605      	mov	r5, r0
 800d368:	2800      	cmp	r0, #0
 800d36a:	d077      	beq.n	800d45c <_rclc_execute.part.0+0x164>
 800d36c:	6863      	ldr	r3, [r4, #4]
 800d36e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d370:	699b      	ldr	r3, [r3, #24]
 800d372:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800d376:	f885 6020 	strb.w	r6, [r5, #32]
 800d37a:	4798      	blx	r3
 800d37c:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800d380:	4628      	mov	r0, r5
 800d382:	2b00      	cmp	r3, #0
 800d384:	d1e8      	bne.n	800d358 <_rclc_execute.part.0+0x60>
 800d386:	6860      	ldr	r0, [r4, #4]
 800d388:	4629      	mov	r1, r5
 800d38a:	f009 fbc5 	bl	8016b18 <rclc_action_remove_used_goal_handle>
 800d38e:	e7e7      	b.n	800d360 <_rclc_execute.part.0+0x68>
 800d390:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800d394:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800d398:	2d00      	cmp	r5, #0
 800d39a:	f000 80c9 	beq.w	800d530 <_rclc_execute.part.0+0x238>
 800d39e:	6880      	ldr	r0, [r0, #8]
 800d3a0:	4798      	blx	r3
 800d3a2:	2000      	movs	r0, #0
 800d3a4:	b007      	add	sp, #28
 800d3a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3a8:	6840      	ldr	r0, [r0, #4]
 800d3aa:	f007 ffef 	bl	801538c <rcl_timer_call>
 800d3ae:	f240 3321 	movw	r3, #801	@ 0x321
 800d3b2:	4298      	cmp	r0, r3
 800d3b4:	d004      	beq.n	800d3c0 <_rclc_execute.part.0+0xc8>
 800d3b6:	2800      	cmp	r0, #0
 800d3b8:	d0f4      	beq.n	800d3a4 <_rclc_execute.part.0+0xac>
 800d3ba:	e7bf      	b.n	800d33c <_rclc_execute.part.0+0x44>
 800d3bc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d3be:	4798      	blx	r3
 800d3c0:	2000      	movs	r0, #0
 800d3c2:	b007      	add	sp, #28
 800d3c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3c6:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800d3ca:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d3cc:	b925      	cbnz	r5, 800d3d8 <_rclc_execute.part.0+0xe0>
 800d3ce:	4628      	mov	r0, r5
 800d3d0:	4798      	blx	r3
 800d3d2:	4628      	mov	r0, r5
 800d3d4:	e7e6      	b.n	800d3a4 <_rclc_execute.part.0+0xac>
 800d3d6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d3d8:	68a0      	ldr	r0, [r4, #8]
 800d3da:	4798      	blx	r3
 800d3dc:	2000      	movs	r0, #0
 800d3de:	b007      	add	sp, #28
 800d3e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3e2:	6840      	ldr	r0, [r0, #4]
 800d3e4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800d3e8:	bb3b      	cbnz	r3, 800d43a <_rclc_execute.part.0+0x142>
 800d3ea:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d07b      	beq.n	800d4ea <_rclc_execute.part.0+0x1f2>
 800d3f2:	f640 0634 	movw	r6, #2100	@ 0x834
 800d3f6:	2701      	movs	r7, #1
 800d3f8:	e007      	b.n	800d40a <_rclc_execute.part.0+0x112>
 800d3fa:	4628      	mov	r0, r5
 800d3fc:	f009 fc20 	bl	8016c40 <rclc_action_server_response_goal_request>
 800d400:	6860      	ldr	r0, [r4, #4]
 800d402:	4629      	mov	r1, r5
 800d404:	f009 fb88 	bl	8016b18 <rclc_action_remove_used_goal_handle>
 800d408:	6860      	ldr	r0, [r4, #4]
 800d40a:	2100      	movs	r1, #0
 800d40c:	f009 fbb2 	bl	8016b74 <rclc_action_find_first_handle_by_status>
 800d410:	4605      	mov	r5, r0
 800d412:	2800      	cmp	r0, #0
 800d414:	d066      	beq.n	800d4e4 <_rclc_execute.part.0+0x1ec>
 800d416:	6863      	ldr	r3, [r4, #4]
 800d418:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d41a:	699b      	ldr	r3, [r3, #24]
 800d41c:	4798      	blx	r3
 800d41e:	42b0      	cmp	r0, r6
 800d420:	f04f 0100 	mov.w	r1, #0
 800d424:	d1e9      	bne.n	800d3fa <_rclc_execute.part.0+0x102>
 800d426:	2101      	movs	r1, #1
 800d428:	4628      	mov	r0, r5
 800d42a:	f009 fc09 	bl	8016c40 <rclc_action_server_response_goal_request>
 800d42e:	722f      	strb	r7, [r5, #8]
 800d430:	e7ea      	b.n	800d408 <_rclc_execute.part.0+0x110>
 800d432:	6848      	ldr	r0, [r1, #4]
 800d434:	f009 fb70 	bl	8016b18 <rclc_action_remove_used_goal_handle>
 800d438:	6860      	ldr	r0, [r4, #4]
 800d43a:	f009 fba7 	bl	8016b8c <rclc_action_find_first_terminated_handle>
 800d43e:	4601      	mov	r1, r0
 800d440:	2800      	cmp	r0, #0
 800d442:	d1f6      	bne.n	800d432 <_rclc_execute.part.0+0x13a>
 800d444:	6860      	ldr	r0, [r4, #4]
 800d446:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800d44a:	e7ce      	b.n	800d3ea <_rclc_execute.part.0+0xf2>
 800d44c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d44e:	6880      	ldr	r0, [r0, #8]
 800d450:	f104 0110 	add.w	r1, r4, #16
 800d454:	4798      	blx	r3
 800d456:	2000      	movs	r0, #0
 800d458:	b007      	add	sp, #28
 800d45a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d45c:	6860      	ldr	r0, [r4, #4]
 800d45e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800d462:	b18b      	cbz	r3, 800d488 <_rclc_execute.part.0+0x190>
 800d464:	68c5      	ldr	r5, [r0, #12]
 800d466:	b32d      	cbz	r5, 800d4b4 <_rclc_execute.part.0+0x1bc>
 800d468:	2600      	movs	r6, #0
 800d46a:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800d46e:	b143      	cbz	r3, 800d482 <_rclc_execute.part.0+0x18a>
 800d470:	69c3      	ldr	r3, [r0, #28]
 800d472:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800d476:	b123      	cbz	r3, 800d482 <_rclc_execute.part.0+0x18a>
 800d478:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d47a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d47c:	4628      	mov	r0, r5
 800d47e:	4798      	blx	r3
 800d480:	6860      	ldr	r0, [r4, #4]
 800d482:	682d      	ldr	r5, [r5, #0]
 800d484:	2d00      	cmp	r5, #0
 800d486:	d1f0      	bne.n	800d46a <_rclc_execute.part.0+0x172>
 800d488:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800d48c:	b193      	cbz	r3, 800d4b4 <_rclc_execute.part.0+0x1bc>
 800d48e:	68c5      	ldr	r5, [r0, #12]
 800d490:	b185      	cbz	r5, 800d4b4 <_rclc_execute.part.0+0x1bc>
 800d492:	2600      	movs	r6, #0
 800d494:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800d498:	b14b      	cbz	r3, 800d4ae <_rclc_execute.part.0+0x1b6>
 800d49a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800d49c:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800d4a0:	b12b      	cbz	r3, 800d4ae <_rclc_execute.part.0+0x1b6>
 800d4a2:	4628      	mov	r0, r5
 800d4a4:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800d4a8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d4aa:	4798      	blx	r3
 800d4ac:	6860      	ldr	r0, [r4, #4]
 800d4ae:	682d      	ldr	r5, [r5, #0]
 800d4b0:	2d00      	cmp	r5, #0
 800d4b2:	d1ef      	bne.n	800d494 <_rclc_execute.part.0+0x19c>
 800d4b4:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d081      	beq.n	800d3c0 <_rclc_execute.part.0+0xc8>
 800d4bc:	2700      	movs	r7, #0
 800d4be:	e00b      	b.n	800d4d8 <_rclc_execute.part.0+0x1e0>
 800d4c0:	6863      	ldr	r3, [r4, #4]
 800d4c2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d4c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800d4c6:	6a1e      	ldr	r6, [r3, #32]
 800d4c8:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800d4cc:	47b0      	blx	r6
 800d4ce:	6860      	ldr	r0, [r4, #4]
 800d4d0:	4629      	mov	r1, r5
 800d4d2:	f009 fb21 	bl	8016b18 <rclc_action_remove_used_goal_handle>
 800d4d6:	6860      	ldr	r0, [r4, #4]
 800d4d8:	f009 fba6 	bl	8016c28 <rclc_action_find_first_handle_with_result_response>
 800d4dc:	4605      	mov	r5, r0
 800d4de:	2800      	cmp	r0, #0
 800d4e0:	d1ee      	bne.n	800d4c0 <_rclc_execute.part.0+0x1c8>
 800d4e2:	e76d      	b.n	800d3c0 <_rclc_execute.part.0+0xc8>
 800d4e4:	6860      	ldr	r0, [r4, #4]
 800d4e6:	f880 5020 	strb.w	r5, [r0, #32]
 800d4ea:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	f43f af66 	beq.w	800d3c0 <_rclc_execute.part.0+0xc8>
 800d4f4:	68c5      	ldr	r5, [r0, #12]
 800d4f6:	b1b5      	cbz	r5, 800d526 <_rclc_execute.part.0+0x22e>
 800d4f8:	2602      	movs	r6, #2
 800d4fa:	e001      	b.n	800d500 <_rclc_execute.part.0+0x208>
 800d4fc:	682d      	ldr	r5, [r5, #0]
 800d4fe:	b195      	cbz	r5, 800d526 <_rclc_execute.part.0+0x22e>
 800d500:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800d504:	2b03      	cmp	r3, #3
 800d506:	d1f9      	bne.n	800d4fc <_rclc_execute.part.0+0x204>
 800d508:	69c3      	ldr	r3, [r0, #28]
 800d50a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d50c:	4628      	mov	r0, r5
 800d50e:	4798      	blx	r3
 800d510:	4603      	mov	r3, r0
 800d512:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800d516:	4628      	mov	r0, r5
 800d518:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800d51c:	b163      	cbz	r3, 800d538 <_rclc_execute.part.0+0x240>
 800d51e:	f009 fbaf 	bl	8016c80 <rclc_action_server_goal_cancel_accept>
 800d522:	6860      	ldr	r0, [r4, #4]
 800d524:	e7ea      	b.n	800d4fc <_rclc_execute.part.0+0x204>
 800d526:	2300      	movs	r3, #0
 800d528:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800d52c:	4618      	mov	r0, r3
 800d52e:	e739      	b.n	800d3a4 <_rclc_execute.part.0+0xac>
 800d530:	4628      	mov	r0, r5
 800d532:	4798      	blx	r3
 800d534:	4628      	mov	r0, r5
 800d536:	e735      	b.n	800d3a4 <_rclc_execute.part.0+0xac>
 800d538:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800d53a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d53e:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800d542:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d546:	6860      	ldr	r0, [r4, #4]
 800d548:	2101      	movs	r1, #1
 800d54a:	f009 fbc5 	bl	8016cd8 <rclc_action_server_goal_cancel_reject>
 800d54e:	722e      	strb	r6, [r5, #8]
 800d550:	6860      	ldr	r0, [r4, #4]
 800d552:	e7d3      	b.n	800d4fc <_rclc_execute.part.0+0x204>
 800d554:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d556:	6880      	ldr	r0, [r0, #8]
 800d558:	4798      	blx	r3
 800d55a:	f104 0110 	add.w	r1, r4, #16
 800d55e:	e6e7      	b.n	800d330 <_rclc_execute.part.0+0x38>
 800d560:	f100 0110 	add.w	r1, r0, #16
 800d564:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d566:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800d568:	6880      	ldr	r0, [r0, #8]
 800d56a:	9105      	str	r1, [sp, #20]
 800d56c:	4798      	blx	r3
 800d56e:	9905      	ldr	r1, [sp, #20]
 800d570:	e6de      	b.n	800d330 <_rclc_execute.part.0+0x38>
 800d572:	2001      	movs	r0, #1
 800d574:	e716      	b.n	800d3a4 <_rclc_execute.part.0+0xac>
 800d576:	bf00      	nop

0800d578 <rclc_executor_trigger_any>:
 800d578:	2800      	cmp	r0, #0
 800d57a:	d03f      	beq.n	800d5fc <rclc_executor_trigger_any+0x84>
 800d57c:	2900      	cmp	r1, #0
 800d57e:	d03e      	beq.n	800d5fe <rclc_executor_trigger_any+0x86>
 800d580:	4603      	mov	r3, r0
 800d582:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800d586:	2200      	movs	r2, #0
 800d588:	2800      	cmp	r0, #0
 800d58a:	d037      	beq.n	800d5fc <rclc_executor_trigger_any+0x84>
 800d58c:	b430      	push	{r4, r5}
 800d58e:	f893 c000 	ldrb.w	ip, [r3]
 800d592:	f1bc 0f08 	cmp.w	ip, #8
 800d596:	d11e      	bne.n	800d5d6 <rclc_executor_trigger_any+0x5e>
 800d598:	685c      	ldr	r4, [r3, #4]
 800d59a:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800d59c:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800d5a0:	d105      	bne.n	800d5ae <rclc_executor_trigger_any+0x36>
 800d5a2:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800d5a6:	b910      	cbnz	r0, 800d5ae <rclc_executor_trigger_any+0x36>
 800d5a8:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800d5ac:	b128      	cbz	r0, 800d5ba <rclc_executor_trigger_any+0x42>
 800d5ae:	bc30      	pop	{r4, r5}
 800d5b0:	4770      	bx	lr
 800d5b2:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800d5b6:	2800      	cmp	r0, #0
 800d5b8:	d1f9      	bne.n	800d5ae <rclc_executor_trigger_any+0x36>
 800d5ba:	3201      	adds	r2, #1
 800d5bc:	4291      	cmp	r1, r2
 800d5be:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800d5c2:	d018      	beq.n	800d5f6 <rclc_executor_trigger_any+0x7e>
 800d5c4:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800d5c8:	2800      	cmp	r0, #0
 800d5ca:	d0f0      	beq.n	800d5ae <rclc_executor_trigger_any+0x36>
 800d5cc:	f893 c000 	ldrb.w	ip, [r3]
 800d5d0:	f1bc 0f08 	cmp.w	ip, #8
 800d5d4:	d0e0      	beq.n	800d598 <rclc_executor_trigger_any+0x20>
 800d5d6:	f1bc 0f09 	cmp.w	ip, #9
 800d5da:	d1ea      	bne.n	800d5b2 <rclc_executor_trigger_any+0x3a>
 800d5dc:	685c      	ldr	r4, [r3, #4]
 800d5de:	6a25      	ldr	r5, [r4, #32]
 800d5e0:	2d00      	cmp	r5, #0
 800d5e2:	d1e4      	bne.n	800d5ae <rclc_executor_trigger_any+0x36>
 800d5e4:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800d5e8:	2800      	cmp	r0, #0
 800d5ea:	d1e0      	bne.n	800d5ae <rclc_executor_trigger_any+0x36>
 800d5ec:	3201      	adds	r2, #1
 800d5ee:	4291      	cmp	r1, r2
 800d5f0:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800d5f4:	d1e6      	bne.n	800d5c4 <rclc_executor_trigger_any+0x4c>
 800d5f6:	2000      	movs	r0, #0
 800d5f8:	bc30      	pop	{r4, r5}
 800d5fa:	4770      	bx	lr
 800d5fc:	4770      	bx	lr
 800d5fe:	4608      	mov	r0, r1
 800d600:	4770      	bx	lr
 800d602:	bf00      	nop

0800d604 <rclc_executor_get_zero_initialized_executor>:
 800d604:	b510      	push	{r4, lr}
 800d606:	4903      	ldr	r1, [pc, #12]	@ (800d614 <rclc_executor_get_zero_initialized_executor+0x10>)
 800d608:	4604      	mov	r4, r0
 800d60a:	2288      	movs	r2, #136	@ 0x88
 800d60c:	f00c fda5 	bl	801a15a <memcpy>
 800d610:	4620      	mov	r0, r4
 800d612:	bd10      	pop	{r4, pc}
 800d614:	0801b0c8 	.word	0x0801b0c8

0800d618 <rclc_executor_init>:
 800d618:	2800      	cmp	r0, #0
 800d61a:	d05f      	beq.n	800d6dc <rclc_executor_init+0xc4>
 800d61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d620:	460c      	mov	r4, r1
 800d622:	b0b0      	sub	sp, #192	@ 0xc0
 800d624:	2900      	cmp	r1, #0
 800d626:	d051      	beq.n	800d6cc <rclc_executor_init+0xb4>
 800d628:	4605      	mov	r5, r0
 800d62a:	4618      	mov	r0, r3
 800d62c:	4616      	mov	r6, r2
 800d62e:	461f      	mov	r7, r3
 800d630:	f000 fc38 	bl	800dea4 <rcutils_allocator_is_valid>
 800d634:	2800      	cmp	r0, #0
 800d636:	d049      	beq.n	800d6cc <rclc_executor_init+0xb4>
 800d638:	2e00      	cmp	r6, #0
 800d63a:	d047      	beq.n	800d6cc <rclc_executor_init+0xb4>
 800d63c:	492c      	ldr	r1, [pc, #176]	@ (800d6f0 <rclc_executor_init+0xd8>)
 800d63e:	2288      	movs	r2, #136	@ 0x88
 800d640:	a80e      	add	r0, sp, #56	@ 0x38
 800d642:	f00c fd8a 	bl	801a15a <memcpy>
 800d646:	a90e      	add	r1, sp, #56	@ 0x38
 800d648:	2288      	movs	r2, #136	@ 0x88
 800d64a:	4628      	mov	r0, r5
 800d64c:	f00c fd85 	bl	801a15a <memcpy>
 800d650:	602c      	str	r4, [r5, #0]
 800d652:	4668      	mov	r0, sp
 800d654:	60ae      	str	r6, [r5, #8]
 800d656:	466c      	mov	r4, sp
 800d658:	f008 f80a 	bl	8015670 <rcl_get_zero_initialized_wait_set>
 800d65c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d65e:	f105 0c14 	add.w	ip, r5, #20
 800d662:	f8d7 8000 	ldr.w	r8, [r7]
 800d666:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d66a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d66c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d670:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d672:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d676:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800d6e8 <rclc_executor_init+0xd0>
 800d67a:	6823      	ldr	r3, [r4, #0]
 800d67c:	f8cc 3000 	str.w	r3, [ip]
 800d680:	6939      	ldr	r1, [r7, #16]
 800d682:	612f      	str	r7, [r5, #16]
 800d684:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800d688:	01b0      	lsls	r0, r6, #6
 800d68a:	47c0      	blx	r8
 800d68c:	6068      	str	r0, [r5, #4]
 800d68e:	b338      	cbz	r0, 800d6e0 <rclc_executor_init+0xc8>
 800d690:	2400      	movs	r4, #0
 800d692:	e000      	b.n	800d696 <rclc_executor_init+0x7e>
 800d694:	6868      	ldr	r0, [r5, #4]
 800d696:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800d69a:	4631      	mov	r1, r6
 800d69c:	3401      	adds	r4, #1
 800d69e:	f000 fa9f 	bl	800dbe0 <rclc_executor_handle_init>
 800d6a2:	42a6      	cmp	r6, r4
 800d6a4:	d1f6      	bne.n	800d694 <rclc_executor_init+0x7c>
 800d6a6:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800d6aa:	f000 fa8d 	bl	800dbc8 <rclc_executor_handle_counters_zero_init>
 800d6ae:	4a11      	ldr	r2, [pc, #68]	@ (800d6f4 <rclc_executor_init+0xdc>)
 800d6b0:	686b      	ldr	r3, [r5, #4]
 800d6b2:	2000      	movs	r0, #0
 800d6b4:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800d6b8:	b163      	cbz	r3, 800d6d4 <rclc_executor_init+0xbc>
 800d6ba:	692b      	ldr	r3, [r5, #16]
 800d6bc:	b153      	cbz	r3, 800d6d4 <rclc_executor_init+0xbc>
 800d6be:	68ab      	ldr	r3, [r5, #8]
 800d6c0:	b143      	cbz	r3, 800d6d4 <rclc_executor_init+0xbc>
 800d6c2:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800d6c6:	b030      	add	sp, #192	@ 0xc0
 800d6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6cc:	200b      	movs	r0, #11
 800d6ce:	b030      	add	sp, #192	@ 0xc0
 800d6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	b030      	add	sp, #192	@ 0xc0
 800d6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6dc:	200b      	movs	r0, #11
 800d6de:	4770      	bx	lr
 800d6e0:	200a      	movs	r0, #10
 800d6e2:	e7f4      	b.n	800d6ce <rclc_executor_init+0xb6>
 800d6e4:	f3af 8000 	nop.w
 800d6e8:	3b9aca00 	.word	0x3b9aca00
 800d6ec:	00000000 	.word	0x00000000
 800d6f0:	0801b0c8 	.word	0x0801b0c8
 800d6f4:	0800d579 	.word	0x0800d579

0800d6f8 <rclc_executor_add_subscription>:
 800d6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6fa:	f89d e018 	ldrb.w	lr, [sp, #24]
 800d6fe:	b338      	cbz	r0, 800d750 <rclc_executor_add_subscription+0x58>
 800d700:	b331      	cbz	r1, 800d750 <rclc_executor_add_subscription+0x58>
 800d702:	b32a      	cbz	r2, 800d750 <rclc_executor_add_subscription+0x58>
 800d704:	b323      	cbz	r3, 800d750 <rclc_executor_add_subscription+0x58>
 800d706:	4604      	mov	r4, r0
 800d708:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 800d70c:	42a8      	cmp	r0, r5
 800d70e:	d301      	bcc.n	800d714 <rclc_executor_add_subscription+0x1c>
 800d710:	2001      	movs	r0, #1
 800d712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d714:	6866      	ldr	r6, [r4, #4]
 800d716:	0187      	lsls	r7, r0, #6
 800d718:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 800d71c:	2500      	movs	r5, #0
 800d71e:	55f5      	strb	r5, [r6, r7]
 800d720:	3001      	adds	r0, #1
 800d722:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 800d726:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 800d72a:	2301      	movs	r3, #1
 800d72c:	f104 0514 	add.w	r5, r4, #20
 800d730:	e9cc 1201 	strd	r1, r2, [ip, #4]
 800d734:	f88c e001 	strb.w	lr, [ip, #1]
 800d738:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 800d73c:	60e0      	str	r0, [r4, #12]
 800d73e:	4628      	mov	r0, r5
 800d740:	f007 ffaa 	bl	8015698 <rcl_wait_set_is_valid>
 800d744:	b930      	cbnz	r0, 800d754 <rclc_executor_add_subscription+0x5c>
 800d746:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800d748:	3301      	adds	r3, #1
 800d74a:	2000      	movs	r0, #0
 800d74c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800d74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d750:	200b      	movs	r0, #11
 800d752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d754:	4628      	mov	r0, r5
 800d756:	f007 ffa5 	bl	80156a4 <rcl_wait_set_fini>
 800d75a:	2800      	cmp	r0, #0
 800d75c:	d0f3      	beq.n	800d746 <rclc_executor_add_subscription+0x4e>
 800d75e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d760 <rclc_executor_add_timer>:
 800d760:	b300      	cbz	r0, 800d7a4 <rclc_executor_add_timer+0x44>
 800d762:	b1f9      	cbz	r1, 800d7a4 <rclc_executor_add_timer+0x44>
 800d764:	b538      	push	{r3, r4, r5, lr}
 800d766:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800d76a:	4293      	cmp	r3, r2
 800d76c:	4604      	mov	r4, r0
 800d76e:	d301      	bcc.n	800d774 <rclc_executor_add_timer+0x14>
 800d770:	2001      	movs	r0, #1
 800d772:	bd38      	pop	{r3, r4, r5, pc}
 800d774:	6840      	ldr	r0, [r0, #4]
 800d776:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800d77a:	019d      	lsls	r5, r3, #6
 800d77c:	6051      	str	r1, [r2, #4]
 800d77e:	2102      	movs	r1, #2
 800d780:	5341      	strh	r1, [r0, r5]
 800d782:	3301      	adds	r3, #1
 800d784:	2000      	movs	r0, #0
 800d786:	2101      	movs	r1, #1
 800d788:	f104 0514 	add.w	r5, r4, #20
 800d78c:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800d78e:	8711      	strh	r1, [r2, #56]	@ 0x38
 800d790:	4628      	mov	r0, r5
 800d792:	60e3      	str	r3, [r4, #12]
 800d794:	f007 ff80 	bl	8015698 <rcl_wait_set_is_valid>
 800d798:	b930      	cbnz	r0, 800d7a8 <rclc_executor_add_timer+0x48>
 800d79a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800d79c:	3301      	adds	r3, #1
 800d79e:	2000      	movs	r0, #0
 800d7a0:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800d7a2:	bd38      	pop	{r3, r4, r5, pc}
 800d7a4:	200b      	movs	r0, #11
 800d7a6:	4770      	bx	lr
 800d7a8:	4628      	mov	r0, r5
 800d7aa:	f007 ff7b 	bl	80156a4 <rcl_wait_set_fini>
 800d7ae:	2800      	cmp	r0, #0
 800d7b0:	d0f3      	beq.n	800d79a <rclc_executor_add_timer+0x3a>
 800d7b2:	bd38      	pop	{r3, r4, r5, pc}

0800d7b4 <rclc_executor_prepare>:
 800d7b4:	2800      	cmp	r0, #0
 800d7b6:	d044      	beq.n	800d842 <rclc_executor_prepare+0x8e>
 800d7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7ba:	f100 0514 	add.w	r5, r0, #20
 800d7be:	b09b      	sub	sp, #108	@ 0x6c
 800d7c0:	4604      	mov	r4, r0
 800d7c2:	4628      	mov	r0, r5
 800d7c4:	f007 ff68 	bl	8015698 <rcl_wait_set_is_valid>
 800d7c8:	b110      	cbz	r0, 800d7d0 <rclc_executor_prepare+0x1c>
 800d7ca:	2000      	movs	r0, #0
 800d7cc:	b01b      	add	sp, #108	@ 0x6c
 800d7ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7d0:	4628      	mov	r0, r5
 800d7d2:	f007 ff67 	bl	80156a4 <rcl_wait_set_fini>
 800d7d6:	2800      	cmp	r0, #0
 800d7d8:	d130      	bne.n	800d83c <rclc_executor_prepare+0x88>
 800d7da:	a80c      	add	r0, sp, #48	@ 0x30
 800d7dc:	f007 ff48 	bl	8015670 <rcl_get_zero_initialized_wait_set>
 800d7e0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800d7e4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d7e8:	46ae      	mov	lr, r5
 800d7ea:	6927      	ldr	r7, [r4, #16]
 800d7ec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d7f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d7f4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d7f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d7fc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d800:	f8dc 3000 	ldr.w	r3, [ip]
 800d804:	f8ce 3000 	str.w	r3, [lr]
 800d808:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d80a:	ae04      	add	r6, sp, #16
 800d80c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	6822      	ldr	r2, [r4, #0]
 800d812:	6033      	str	r3, [r6, #0]
 800d814:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d816:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800d818:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800d81c:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800d820:	e9cd 2100 	strd	r2, r1, [sp]
 800d824:	4628      	mov	r0, r5
 800d826:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800d828:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d82a:	f008 fa39 	bl	8015ca0 <rcl_wait_set_init>
 800d82e:	2800      	cmp	r0, #0
 800d830:	d0cc      	beq.n	800d7cc <rclc_executor_prepare+0x18>
 800d832:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d834:	f000 fb5c 	bl	800def0 <rcutils_reset_error>
 800d838:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d83a:	e7c7      	b.n	800d7cc <rclc_executor_prepare+0x18>
 800d83c:	f000 fb58 	bl	800def0 <rcutils_reset_error>
 800d840:	e7cb      	b.n	800d7da <rclc_executor_prepare+0x26>
 800d842:	200b      	movs	r0, #11
 800d844:	4770      	bx	lr
 800d846:	bf00      	nop

0800d848 <rclc_executor_spin_some.part.0>:
 800d848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d84c:	f100 0614 	add.w	r6, r0, #20
 800d850:	b083      	sub	sp, #12
 800d852:	4691      	mov	r9, r2
 800d854:	4698      	mov	r8, r3
 800d856:	4605      	mov	r5, r0
 800d858:	f7ff ffac 	bl	800d7b4 <rclc_executor_prepare>
 800d85c:	4630      	mov	r0, r6
 800d85e:	f007 ffed 	bl	801583c <rcl_wait_set_clear>
 800d862:	4607      	mov	r7, r0
 800d864:	2800      	cmp	r0, #0
 800d866:	f040 80ed 	bne.w	800da44 <rclc_executor_spin_some.part.0+0x1fc>
 800d86a:	68ab      	ldr	r3, [r5, #8]
 800d86c:	4604      	mov	r4, r0
 800d86e:	b303      	cbz	r3, 800d8b2 <rclc_executor_spin_some.part.0+0x6a>
 800d870:	6869      	ldr	r1, [r5, #4]
 800d872:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800d876:	01a2      	lsls	r2, r4, #6
 800d878:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800d87c:	b1cb      	cbz	r3, 800d8b2 <rclc_executor_spin_some.part.0+0x6a>
 800d87e:	5c8b      	ldrb	r3, [r1, r2]
 800d880:	2b0a      	cmp	r3, #10
 800d882:	f200 80d8 	bhi.w	800da36 <rclc_executor_spin_some.part.0+0x1ee>
 800d886:	e8df f003 	tbb	[pc, r3]
 800d88a:	9c9c      	.short	0x9c9c
 800d88c:	068c8ca7 	.word	0x068c8ca7
 800d890:	bdc90606 	.word	0xbdc90606
 800d894:	b2          	.byte	0xb2
 800d895:	00          	.byte	0x00
 800d896:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d89a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d89e:	4630      	mov	r0, r6
 800d8a0:	f008 fb14 	bl	8015ecc <rcl_wait_set_add_service>
 800d8a4:	2800      	cmp	r0, #0
 800d8a6:	f040 8086 	bne.w	800d9b6 <rclc_executor_spin_some.part.0+0x16e>
 800d8aa:	68ab      	ldr	r3, [r5, #8]
 800d8ac:	3401      	adds	r4, #1
 800d8ae:	429c      	cmp	r4, r3
 800d8b0:	d3de      	bcc.n	800d870 <rclc_executor_spin_some.part.0+0x28>
 800d8b2:	4643      	mov	r3, r8
 800d8b4:	464a      	mov	r2, r9
 800d8b6:	4630      	mov	r0, r6
 800d8b8:	f008 fb36 	bl	8015f28 <rcl_wait>
 800d8bc:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	f000 80c7 	beq.w	800da54 <rclc_executor_spin_some.part.0+0x20c>
 800d8c6:	2b01      	cmp	r3, #1
 800d8c8:	f040 80b5 	bne.w	800da36 <rclc_executor_spin_some.part.0+0x1ee>
 800d8cc:	68ab      	ldr	r3, [r5, #8]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	f000 8159 	beq.w	800db86 <rclc_executor_spin_some.part.0+0x33e>
 800d8d4:	2400      	movs	r4, #0
 800d8d6:	46a0      	mov	r8, r4
 800d8d8:	f240 1991 	movw	r9, #401	@ 0x191
 800d8dc:	e00a      	b.n	800d8f4 <rclc_executor_spin_some.part.0+0xac>
 800d8de:	f7ff fb49 	bl	800cf74 <_rclc_check_for_new_data>
 800d8e2:	4604      	mov	r4, r0
 800d8e4:	b110      	cbz	r0, 800d8ec <rclc_executor_spin_some.part.0+0xa4>
 800d8e6:	4548      	cmp	r0, r9
 800d8e8:	f040 80b2 	bne.w	800da50 <rclc_executor_spin_some.part.0+0x208>
 800d8ec:	68ab      	ldr	r3, [r5, #8]
 800d8ee:	4598      	cmp	r8, r3
 800d8f0:	f080 8126 	bcs.w	800db40 <rclc_executor_spin_some.part.0+0x2f8>
 800d8f4:	686a      	ldr	r2, [r5, #4]
 800d8f6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800d8fa:	4631      	mov	r1, r6
 800d8fc:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800d900:	f108 0801 	add.w	r8, r8, #1
 800d904:	f1bc 0f00 	cmp.w	ip, #0
 800d908:	d1e9      	bne.n	800d8de <rclc_executor_spin_some.part.0+0x96>
 800d90a:	4619      	mov	r1, r3
 800d90c:	4610      	mov	r0, r2
 800d90e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800d912:	4798      	blx	r3
 800d914:	2800      	cmp	r0, #0
 800d916:	f000 809b 	beq.w	800da50 <rclc_executor_spin_some.part.0+0x208>
 800d91a:	68ab      	ldr	r3, [r5, #8]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	f000 8097 	beq.w	800da50 <rclc_executor_spin_some.part.0+0x208>
 800d922:	f04f 0800 	mov.w	r8, #0
 800d926:	f240 1991 	movw	r9, #401	@ 0x191
 800d92a:	e009      	b.n	800d940 <rclc_executor_spin_some.part.0+0xf8>
 800d92c:	f7ff fb70 	bl	800d010 <_rclc_take_new_data>
 800d930:	4604      	mov	r4, r0
 800d932:	b110      	cbz	r0, 800d93a <rclc_executor_spin_some.part.0+0xf2>
 800d934:	4548      	cmp	r0, r9
 800d936:	f040 808b 	bne.w	800da50 <rclc_executor_spin_some.part.0+0x208>
 800d93a:	68ab      	ldr	r3, [r5, #8]
 800d93c:	4598      	cmp	r8, r3
 800d93e:	d209      	bcs.n	800d954 <rclc_executor_spin_some.part.0+0x10c>
 800d940:	6868      	ldr	r0, [r5, #4]
 800d942:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800d946:	4631      	mov	r1, r6
 800d948:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800d94c:	f108 0801 	add.w	r8, r8, #1
 800d950:	2a00      	cmp	r2, #0
 800d952:	d1eb      	bne.n	800d92c <rclc_executor_spin_some.part.0+0xe4>
 800d954:	2600      	movs	r6, #0
 800d956:	b97b      	cbnz	r3, 800d978 <rclc_executor_spin_some.part.0+0x130>
 800d958:	e07a      	b.n	800da50 <rclc_executor_spin_some.part.0+0x208>
 800d95a:	f812 200c 	ldrb.w	r2, [r2, ip]
 800d95e:	2a08      	cmp	r2, #8
 800d960:	f000 80fd 	beq.w	800db5e <rclc_executor_spin_some.part.0+0x316>
 800d964:	2a09      	cmp	r2, #9
 800d966:	f000 80ef 	beq.w	800db48 <rclc_executor_spin_some.part.0+0x300>
 800d96a:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800d96e:	b98a      	cbnz	r2, 800d994 <rclc_executor_spin_some.part.0+0x14c>
 800d970:	3601      	adds	r6, #1
 800d972:	429e      	cmp	r6, r3
 800d974:	d262      	bcs.n	800da3c <rclc_executor_spin_some.part.0+0x1f4>
 800d976:	2400      	movs	r4, #0
 800d978:	686a      	ldr	r2, [r5, #4]
 800d97a:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800d97e:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800d982:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800d986:	2900      	cmp	r1, #0
 800d988:	d062      	beq.n	800da50 <rclc_executor_spin_some.part.0+0x208>
 800d98a:	7841      	ldrb	r1, [r0, #1]
 800d98c:	2900      	cmp	r1, #0
 800d98e:	d0e4      	beq.n	800d95a <rclc_executor_spin_some.part.0+0x112>
 800d990:	2901      	cmp	r1, #1
 800d992:	d1ed      	bne.n	800d970 <rclc_executor_spin_some.part.0+0x128>
 800d994:	f7ff fcb0 	bl	800d2f8 <_rclc_execute.part.0>
 800d998:	2800      	cmp	r0, #0
 800d99a:	f040 80b6 	bne.w	800db0a <rclc_executor_spin_some.part.0+0x2c2>
 800d99e:	68ab      	ldr	r3, [r5, #8]
 800d9a0:	e7e6      	b.n	800d970 <rclc_executor_spin_some.part.0+0x128>
 800d9a2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d9a6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d9aa:	4630      	mov	r0, r6
 800d9ac:	f008 fa62 	bl	8015e74 <rcl_wait_set_add_client>
 800d9b0:	2800      	cmp	r0, #0
 800d9b2:	f43f af7a 	beq.w	800d8aa <rclc_executor_spin_some.part.0+0x62>
 800d9b6:	9001      	str	r0, [sp, #4]
 800d9b8:	f000 fa9a 	bl	800def0 <rcutils_reset_error>
 800d9bc:	9801      	ldr	r0, [sp, #4]
 800d9be:	4607      	mov	r7, r0
 800d9c0:	e03c      	b.n	800da3c <rclc_executor_spin_some.part.0+0x1f4>
 800d9c2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d9c6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d9ca:	4630      	mov	r0, r6
 800d9cc:	f007 ff0a 	bl	80157e4 <rcl_wait_set_add_subscription>
 800d9d0:	2800      	cmp	r0, #0
 800d9d2:	f43f af6a 	beq.w	800d8aa <rclc_executor_spin_some.part.0+0x62>
 800d9d6:	e7ee      	b.n	800d9b6 <rclc_executor_spin_some.part.0+0x16e>
 800d9d8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d9dc:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d9e0:	4630      	mov	r0, r6
 800d9e2:	f008 fa17 	bl	8015e14 <rcl_wait_set_add_timer>
 800d9e6:	2800      	cmp	r0, #0
 800d9e8:	f43f af5f 	beq.w	800d8aa <rclc_executor_spin_some.part.0+0x62>
 800d9ec:	e7e3      	b.n	800d9b6 <rclc_executor_spin_some.part.0+0x16e>
 800d9ee:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d9f2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800d9f6:	4630      	mov	r0, r6
 800d9f8:	f008 f9e0 	bl	8015dbc <rcl_wait_set_add_guard_condition>
 800d9fc:	2800      	cmp	r0, #0
 800d9fe:	f43f af54 	beq.w	800d8aa <rclc_executor_spin_some.part.0+0x62>
 800da02:	e7d8      	b.n	800d9b6 <rclc_executor_spin_some.part.0+0x16e>
 800da04:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800da08:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800da0c:	3110      	adds	r1, #16
 800da0e:	4630      	mov	r0, r6
 800da10:	f008 ff62 	bl	80168d8 <rcl_action_wait_set_add_action_server>
 800da14:	2800      	cmp	r0, #0
 800da16:	f43f af48 	beq.w	800d8aa <rclc_executor_spin_some.part.0+0x62>
 800da1a:	e7cc      	b.n	800d9b6 <rclc_executor_spin_some.part.0+0x16e>
 800da1c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800da20:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800da24:	3110      	adds	r1, #16
 800da26:	2300      	movs	r3, #0
 800da28:	4630      	mov	r0, r6
 800da2a:	f008 fd2d 	bl	8016488 <rcl_action_wait_set_add_action_client>
 800da2e:	2800      	cmp	r0, #0
 800da30:	f43f af3b 	beq.w	800d8aa <rclc_executor_spin_some.part.0+0x62>
 800da34:	e7bf      	b.n	800d9b6 <rclc_executor_spin_some.part.0+0x16e>
 800da36:	f000 fa5b 	bl	800def0 <rcutils_reset_error>
 800da3a:	2701      	movs	r7, #1
 800da3c:	4638      	mov	r0, r7
 800da3e:	b003      	add	sp, #12
 800da40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da44:	f000 fa54 	bl	800def0 <rcutils_reset_error>
 800da48:	4638      	mov	r0, r7
 800da4a:	b003      	add	sp, #12
 800da4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da50:	4627      	mov	r7, r4
 800da52:	e7f3      	b.n	800da3c <rclc_executor_spin_some.part.0+0x1f4>
 800da54:	68ab      	ldr	r3, [r5, #8]
 800da56:	2b00      	cmp	r3, #0
 800da58:	f000 8092 	beq.w	800db80 <rclc_executor_spin_some.part.0+0x338>
 800da5c:	2400      	movs	r4, #0
 800da5e:	46a0      	mov	r8, r4
 800da60:	f240 1991 	movw	r9, #401	@ 0x191
 800da64:	e008      	b.n	800da78 <rclc_executor_spin_some.part.0+0x230>
 800da66:	f7ff fa85 	bl	800cf74 <_rclc_check_for_new_data>
 800da6a:	4604      	mov	r4, r0
 800da6c:	b108      	cbz	r0, 800da72 <rclc_executor_spin_some.part.0+0x22a>
 800da6e:	4548      	cmp	r0, r9
 800da70:	d1ee      	bne.n	800da50 <rclc_executor_spin_some.part.0+0x208>
 800da72:	68ab      	ldr	r3, [r5, #8]
 800da74:	4598      	cmp	r8, r3
 800da76:	d265      	bcs.n	800db44 <rclc_executor_spin_some.part.0+0x2fc>
 800da78:	686a      	ldr	r2, [r5, #4]
 800da7a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800da7e:	4631      	mov	r1, r6
 800da80:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800da84:	f108 0801 	add.w	r8, r8, #1
 800da88:	f1bc 0f00 	cmp.w	ip, #0
 800da8c:	d1eb      	bne.n	800da66 <rclc_executor_spin_some.part.0+0x21e>
 800da8e:	4619      	mov	r1, r3
 800da90:	4610      	mov	r0, r2
 800da92:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800da96:	4798      	blx	r3
 800da98:	2800      	cmp	r0, #0
 800da9a:	d0d9      	beq.n	800da50 <rclc_executor_spin_some.part.0+0x208>
 800da9c:	68ab      	ldr	r3, [r5, #8]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d0d6      	beq.n	800da50 <rclc_executor_spin_some.part.0+0x208>
 800daa2:	f04f 0800 	mov.w	r8, #0
 800daa6:	f240 1991 	movw	r9, #401	@ 0x191
 800daaa:	f240 2a59 	movw	sl, #601	@ 0x259
 800daae:	e00e      	b.n	800dace <rclc_executor_spin_some.part.0+0x286>
 800dab0:	f813 300b 	ldrb.w	r3, [r3, fp]
 800dab4:	2b08      	cmp	r3, #8
 800dab6:	d033      	beq.n	800db20 <rclc_executor_spin_some.part.0+0x2d8>
 800dab8:	2b09      	cmp	r3, #9
 800daba:	d028      	beq.n	800db0e <rclc_executor_spin_some.part.0+0x2c6>
 800dabc:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800dac0:	b9fb      	cbnz	r3, 800db02 <rclc_executor_spin_some.part.0+0x2ba>
 800dac2:	68ab      	ldr	r3, [r5, #8]
 800dac4:	f108 0801 	add.w	r8, r8, #1
 800dac8:	4598      	cmp	r8, r3
 800daca:	d2b7      	bcs.n	800da3c <rclc_executor_spin_some.part.0+0x1f4>
 800dacc:	2400      	movs	r4, #0
 800dace:	6868      	ldr	r0, [r5, #4]
 800dad0:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800dad4:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800dad8:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d0b7      	beq.n	800da50 <rclc_executor_spin_some.part.0+0x208>
 800dae0:	4631      	mov	r1, r6
 800dae2:	f7ff fa95 	bl	800d010 <_rclc_take_new_data>
 800dae6:	b118      	cbz	r0, 800daf0 <rclc_executor_spin_some.part.0+0x2a8>
 800dae8:	4548      	cmp	r0, r9
 800daea:	d001      	beq.n	800daf0 <rclc_executor_spin_some.part.0+0x2a8>
 800daec:	4550      	cmp	r0, sl
 800daee:	d10c      	bne.n	800db0a <rclc_executor_spin_some.part.0+0x2c2>
 800daf0:	686b      	ldr	r3, [r5, #4]
 800daf2:	eb13 000b 	adds.w	r0, r3, fp
 800daf6:	d021      	beq.n	800db3c <rclc_executor_spin_some.part.0+0x2f4>
 800daf8:	7842      	ldrb	r2, [r0, #1]
 800dafa:	2a00      	cmp	r2, #0
 800dafc:	d0d8      	beq.n	800dab0 <rclc_executor_spin_some.part.0+0x268>
 800dafe:	2a01      	cmp	r2, #1
 800db00:	d1df      	bne.n	800dac2 <rclc_executor_spin_some.part.0+0x27a>
 800db02:	f7ff fbf9 	bl	800d2f8 <_rclc_execute.part.0>
 800db06:	2800      	cmp	r0, #0
 800db08:	d0db      	beq.n	800dac2 <rclc_executor_spin_some.part.0+0x27a>
 800db0a:	4607      	mov	r7, r0
 800db0c:	e796      	b.n	800da3c <rclc_executor_spin_some.part.0+0x1f4>
 800db0e:	6843      	ldr	r3, [r0, #4]
 800db10:	6a1a      	ldr	r2, [r3, #32]
 800db12:	2a00      	cmp	r2, #0
 800db14:	d1f5      	bne.n	800db02 <rclc_executor_spin_some.part.0+0x2ba>
 800db16:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d0d1      	beq.n	800dac2 <rclc_executor_spin_some.part.0+0x27a>
 800db1e:	e7f0      	b.n	800db02 <rclc_executor_spin_some.part.0+0x2ba>
 800db20:	6843      	ldr	r3, [r0, #4]
 800db22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800db24:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800db28:	d1eb      	bne.n	800db02 <rclc_executor_spin_some.part.0+0x2ba>
 800db2a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800db2e:	2a00      	cmp	r2, #0
 800db30:	d1e7      	bne.n	800db02 <rclc_executor_spin_some.part.0+0x2ba>
 800db32:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800db36:	2b00      	cmp	r3, #0
 800db38:	d0c3      	beq.n	800dac2 <rclc_executor_spin_some.part.0+0x27a>
 800db3a:	e7e2      	b.n	800db02 <rclc_executor_spin_some.part.0+0x2ba>
 800db3c:	270b      	movs	r7, #11
 800db3e:	e77d      	b.n	800da3c <rclc_executor_spin_some.part.0+0x1f4>
 800db40:	686a      	ldr	r2, [r5, #4]
 800db42:	e6e2      	b.n	800d90a <rclc_executor_spin_some.part.0+0xc2>
 800db44:	686a      	ldr	r2, [r5, #4]
 800db46:	e7a2      	b.n	800da8e <rclc_executor_spin_some.part.0+0x246>
 800db48:	6842      	ldr	r2, [r0, #4]
 800db4a:	6a11      	ldr	r1, [r2, #32]
 800db4c:	2900      	cmp	r1, #0
 800db4e:	f47f af21 	bne.w	800d994 <rclc_executor_spin_some.part.0+0x14c>
 800db52:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800db56:	2a00      	cmp	r2, #0
 800db58:	f43f af0a 	beq.w	800d970 <rclc_executor_spin_some.part.0+0x128>
 800db5c:	e71a      	b.n	800d994 <rclc_executor_spin_some.part.0+0x14c>
 800db5e:	6842      	ldr	r2, [r0, #4]
 800db60:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800db62:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800db66:	f47f af15 	bne.w	800d994 <rclc_executor_spin_some.part.0+0x14c>
 800db6a:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800db6e:	2900      	cmp	r1, #0
 800db70:	f47f af10 	bne.w	800d994 <rclc_executor_spin_some.part.0+0x14c>
 800db74:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800db78:	2a00      	cmp	r2, #0
 800db7a:	f43f aef9 	beq.w	800d970 <rclc_executor_spin_some.part.0+0x128>
 800db7e:	e709      	b.n	800d994 <rclc_executor_spin_some.part.0+0x14c>
 800db80:	686a      	ldr	r2, [r5, #4]
 800db82:	461c      	mov	r4, r3
 800db84:	e783      	b.n	800da8e <rclc_executor_spin_some.part.0+0x246>
 800db86:	686a      	ldr	r2, [r5, #4]
 800db88:	461c      	mov	r4, r3
 800db8a:	e6be      	b.n	800d90a <rclc_executor_spin_some.part.0+0xc2>

0800db8c <rclc_executor_spin>:
 800db8c:	b1d0      	cbz	r0, 800dbc4 <rclc_executor_spin+0x38>
 800db8e:	b510      	push	{r4, lr}
 800db90:	4604      	mov	r4, r0
 800db92:	b082      	sub	sp, #8
 800db94:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800db98:	6820      	ldr	r0, [r4, #0]
 800db9a:	e9cd 2300 	strd	r2, r3, [sp]
 800db9e:	f006 facf 	bl	8014140 <rcl_context_is_valid>
 800dba2:	4601      	mov	r1, r0
 800dba4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dba8:	4620      	mov	r0, r4
 800dbaa:	b131      	cbz	r1, 800dbba <rclc_executor_spin+0x2e>
 800dbac:	f7ff fe4c 	bl	800d848 <rclc_executor_spin_some.part.0>
 800dbb0:	f030 0302 	bics.w	r3, r0, #2
 800dbb4:	d0ee      	beq.n	800db94 <rclc_executor_spin+0x8>
 800dbb6:	b002      	add	sp, #8
 800dbb8:	bd10      	pop	{r4, pc}
 800dbba:	f000 f999 	bl	800def0 <rcutils_reset_error>
 800dbbe:	2001      	movs	r0, #1
 800dbc0:	b002      	add	sp, #8
 800dbc2:	bd10      	pop	{r4, pc}
 800dbc4:	200b      	movs	r0, #11
 800dbc6:	4770      	bx	lr

0800dbc8 <rclc_executor_handle_counters_zero_init>:
 800dbc8:	b130      	cbz	r0, 800dbd8 <rclc_executor_handle_counters_zero_init+0x10>
 800dbca:	b508      	push	{r3, lr}
 800dbcc:	2220      	movs	r2, #32
 800dbce:	2100      	movs	r1, #0
 800dbd0:	f00c f9fa 	bl	8019fc8 <memset>
 800dbd4:	2000      	movs	r0, #0
 800dbd6:	bd08      	pop	{r3, pc}
 800dbd8:	200b      	movs	r0, #11
 800dbda:	4770      	bx	lr
 800dbdc:	0000      	movs	r0, r0
	...

0800dbe0 <rclc_executor_handle_init>:
 800dbe0:	b168      	cbz	r0, 800dbfe <rclc_executor_handle_init+0x1e>
 800dbe2:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800dc08 <rclc_executor_handle_init+0x28>
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	220b      	movs	r2, #11
 800dbea:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800dbee:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800dbf2:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800dbf6:	8002      	strh	r2, [r0, #0]
 800dbf8:	8703      	strh	r3, [r0, #56]	@ 0x38
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	4770      	bx	lr
 800dbfe:	200b      	movs	r0, #11
 800dc00:	4770      	bx	lr
 800dc02:	bf00      	nop
 800dc04:	f3af 8000 	nop.w
	...

0800dc10 <rclc_support_init_with_options>:
 800dc10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc14:	b083      	sub	sp, #12
 800dc16:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800dc18:	b340      	cbz	r0, 800dc6c <rclc_support_init_with_options+0x5c>
 800dc1a:	461d      	mov	r5, r3
 800dc1c:	b333      	cbz	r3, 800dc6c <rclc_support_init_with_options+0x5c>
 800dc1e:	b32e      	cbz	r6, 800dc6c <rclc_support_init_with_options+0x5c>
 800dc20:	46e9      	mov	r9, sp
 800dc22:	4604      	mov	r4, r0
 800dc24:	4648      	mov	r0, r9
 800dc26:	460f      	mov	r7, r1
 800dc28:	4690      	mov	r8, r2
 800dc2a:	f006 fa7f 	bl	801412c <rcl_get_zero_initialized_context>
 800dc2e:	e899 0003 	ldmia.w	r9, {r0, r1}
 800dc32:	462a      	mov	r2, r5
 800dc34:	e884 0003 	stmia.w	r4, {r0, r1}
 800dc38:	4623      	mov	r3, r4
 800dc3a:	4641      	mov	r1, r8
 800dc3c:	4638      	mov	r0, r7
 800dc3e:	f006 fae5 	bl	801420c <rcl_init>
 800dc42:	4605      	mov	r5, r0
 800dc44:	b960      	cbnz	r0, 800dc60 <rclc_support_init_with_options+0x50>
 800dc46:	60a6      	str	r6, [r4, #8]
 800dc48:	4632      	mov	r2, r6
 800dc4a:	f104 010c 	add.w	r1, r4, #12
 800dc4e:	2003      	movs	r0, #3
 800dc50:	f007 f90e 	bl	8014e70 <rcl_clock_init>
 800dc54:	4605      	mov	r5, r0
 800dc56:	b918      	cbnz	r0, 800dc60 <rclc_support_init_with_options+0x50>
 800dc58:	4628      	mov	r0, r5
 800dc5a:	b003      	add	sp, #12
 800dc5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc60:	f000 f946 	bl	800def0 <rcutils_reset_error>
 800dc64:	4628      	mov	r0, r5
 800dc66:	b003      	add	sp, #12
 800dc68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc6c:	250b      	movs	r5, #11
 800dc6e:	4628      	mov	r0, r5
 800dc70:	b003      	add	sp, #12
 800dc72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc76:	bf00      	nop

0800dc78 <rclc_node_init_default>:
 800dc78:	b3b8      	cbz	r0, 800dcea <rclc_node_init_default+0x72>
 800dc7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc7e:	460d      	mov	r5, r1
 800dc80:	b0a1      	sub	sp, #132	@ 0x84
 800dc82:	b329      	cbz	r1, 800dcd0 <rclc_node_init_default+0x58>
 800dc84:	4616      	mov	r6, r2
 800dc86:	b31a      	cbz	r2, 800dcd0 <rclc_node_init_default+0x58>
 800dc88:	461f      	mov	r7, r3
 800dc8a:	b30b      	cbz	r3, 800dcd0 <rclc_node_init_default+0x58>
 800dc8c:	f10d 0810 	add.w	r8, sp, #16
 800dc90:	4604      	mov	r4, r0
 800dc92:	4640      	mov	r0, r8
 800dc94:	f006 fbe0 	bl	8014458 <rcl_get_zero_initialized_node>
 800dc98:	e898 0003 	ldmia.w	r8, {r0, r1}
 800dc9c:	f10d 0918 	add.w	r9, sp, #24
 800dca0:	e884 0003 	stmia.w	r4, {r0, r1}
 800dca4:	4648      	mov	r0, r9
 800dca6:	f006 fd4f 	bl	8014748 <rcl_node_get_default_options>
 800dcaa:	4640      	mov	r0, r8
 800dcac:	f006 fbd4 	bl	8014458 <rcl_get_zero_initialized_node>
 800dcb0:	f8cd 9000 	str.w	r9, [sp]
 800dcb4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800dcb8:	463b      	mov	r3, r7
 800dcba:	e884 0003 	stmia.w	r4, {r0, r1}
 800dcbe:	4632      	mov	r2, r6
 800dcc0:	4629      	mov	r1, r5
 800dcc2:	4620      	mov	r0, r4
 800dcc4:	f006 fbd2 	bl	801446c <rcl_node_init>
 800dcc8:	b930      	cbnz	r0, 800dcd8 <rclc_node_init_default+0x60>
 800dcca:	b021      	add	sp, #132	@ 0x84
 800dccc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dcd0:	200b      	movs	r0, #11
 800dcd2:	b021      	add	sp, #132	@ 0x84
 800dcd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dcd8:	9003      	str	r0, [sp, #12]
 800dcda:	f000 f909 	bl	800def0 <rcutils_reset_error>
 800dcde:	f000 f907 	bl	800def0 <rcutils_reset_error>
 800dce2:	9803      	ldr	r0, [sp, #12]
 800dce4:	b021      	add	sp, #132	@ 0x84
 800dce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dcea:	200b      	movs	r0, #11
 800dcec:	4770      	bx	lr
 800dcee:	bf00      	nop

0800dcf0 <rclc_publisher_init_default>:
 800dcf0:	b368      	cbz	r0, 800dd4e <rclc_publisher_init_default+0x5e>
 800dcf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcf6:	460d      	mov	r5, r1
 800dcf8:	b0a0      	sub	sp, #128	@ 0x80
 800dcfa:	b321      	cbz	r1, 800dd46 <rclc_publisher_init_default+0x56>
 800dcfc:	4616      	mov	r6, r2
 800dcfe:	b312      	cbz	r2, 800dd46 <rclc_publisher_init_default+0x56>
 800dd00:	461f      	mov	r7, r3
 800dd02:	b303      	cbz	r3, 800dd46 <rclc_publisher_init_default+0x56>
 800dd04:	4604      	mov	r4, r0
 800dd06:	f7ff f825 	bl	800cd54 <rcl_get_zero_initialized_publisher>
 800dd0a:	f10d 0810 	add.w	r8, sp, #16
 800dd0e:	6020      	str	r0, [r4, #0]
 800dd10:	4640      	mov	r0, r8
 800dd12:	f7ff f8bb 	bl	800ce8c <rcl_publisher_get_default_options>
 800dd16:	490f      	ldr	r1, [pc, #60]	@ (800dd54 <rclc_publisher_init_default+0x64>)
 800dd18:	2250      	movs	r2, #80	@ 0x50
 800dd1a:	4640      	mov	r0, r8
 800dd1c:	f00c fa1d 	bl	801a15a <memcpy>
 800dd20:	f8cd 8000 	str.w	r8, [sp]
 800dd24:	463b      	mov	r3, r7
 800dd26:	4632      	mov	r2, r6
 800dd28:	4629      	mov	r1, r5
 800dd2a:	4620      	mov	r0, r4
 800dd2c:	f7ff f818 	bl	800cd60 <rcl_publisher_init>
 800dd30:	b910      	cbnz	r0, 800dd38 <rclc_publisher_init_default+0x48>
 800dd32:	b020      	add	sp, #128	@ 0x80
 800dd34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd38:	9003      	str	r0, [sp, #12]
 800dd3a:	f000 f8d9 	bl	800def0 <rcutils_reset_error>
 800dd3e:	9803      	ldr	r0, [sp, #12]
 800dd40:	b020      	add	sp, #128	@ 0x80
 800dd42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd46:	200b      	movs	r0, #11
 800dd48:	b020      	add	sp, #128	@ 0x80
 800dd4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd4e:	200b      	movs	r0, #11
 800dd50:	4770      	bx	lr
 800dd52:	bf00      	nop
 800dd54:	0801b150 	.word	0x0801b150

0800dd58 <rclc_subscription_init_default>:
 800dd58:	b368      	cbz	r0, 800ddb6 <rclc_subscription_init_default+0x5e>
 800dd5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd5e:	460d      	mov	r5, r1
 800dd60:	b0a0      	sub	sp, #128	@ 0x80
 800dd62:	b321      	cbz	r1, 800ddae <rclc_subscription_init_default+0x56>
 800dd64:	4616      	mov	r6, r2
 800dd66:	b312      	cbz	r2, 800ddae <rclc_subscription_init_default+0x56>
 800dd68:	461f      	mov	r7, r3
 800dd6a:	b303      	cbz	r3, 800ddae <rclc_subscription_init_default+0x56>
 800dd6c:	4604      	mov	r4, r0
 800dd6e:	f006 ff23 	bl	8014bb8 <rcl_get_zero_initialized_subscription>
 800dd72:	f10d 0810 	add.w	r8, sp, #16
 800dd76:	6020      	str	r0, [r4, #0]
 800dd78:	4640      	mov	r0, r8
 800dd7a:	f006 ffcb 	bl	8014d14 <rcl_subscription_get_default_options>
 800dd7e:	490f      	ldr	r1, [pc, #60]	@ (800ddbc <rclc_subscription_init_default+0x64>)
 800dd80:	2250      	movs	r2, #80	@ 0x50
 800dd82:	4640      	mov	r0, r8
 800dd84:	f00c f9e9 	bl	801a15a <memcpy>
 800dd88:	f8cd 8000 	str.w	r8, [sp]
 800dd8c:	463b      	mov	r3, r7
 800dd8e:	4632      	mov	r2, r6
 800dd90:	4629      	mov	r1, r5
 800dd92:	4620      	mov	r0, r4
 800dd94:	f006 ff16 	bl	8014bc4 <rcl_subscription_init>
 800dd98:	b910      	cbnz	r0, 800dda0 <rclc_subscription_init_default+0x48>
 800dd9a:	b020      	add	sp, #128	@ 0x80
 800dd9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dda0:	9003      	str	r0, [sp, #12]
 800dda2:	f000 f8a5 	bl	800def0 <rcutils_reset_error>
 800dda6:	9803      	ldr	r0, [sp, #12]
 800dda8:	b020      	add	sp, #128	@ 0x80
 800ddaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddae:	200b      	movs	r0, #11
 800ddb0:	b020      	add	sp, #128	@ 0x80
 800ddb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddb6:	200b      	movs	r0, #11
 800ddb8:	4770      	bx	lr
 800ddba:	bf00      	nop
 800ddbc:	0801b1a0 	.word	0x0801b1a0

0800ddc0 <rclc_timer_init_default>:
 800ddc0:	b360      	cbz	r0, 800de1c <rclc_timer_init_default+0x5c>
 800ddc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddc6:	460e      	mov	r6, r1
 800ddc8:	b08a      	sub	sp, #40	@ 0x28
 800ddca:	b319      	cbz	r1, 800de14 <rclc_timer_init_default+0x54>
 800ddcc:	4690      	mov	r8, r2
 800ddce:	461f      	mov	r7, r3
 800ddd0:	4605      	mov	r5, r0
 800ddd2:	f007 fa2b 	bl	801522c <rcl_get_zero_initialized_timer>
 800ddd6:	68b4      	ldr	r4, [r6, #8]
 800ddd8:	6028      	str	r0, [r5, #0]
 800ddda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dddc:	f10d 0c0c 	add.w	ip, sp, #12
 800dde0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dde4:	6823      	ldr	r3, [r4, #0]
 800dde6:	f8cc 3000 	str.w	r3, [ip]
 800ddea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ddec:	9302      	str	r3, [sp, #8]
 800ddee:	e9cd 8700 	strd	r8, r7, [sp]
 800ddf2:	4628      	mov	r0, r5
 800ddf4:	4632      	mov	r2, r6
 800ddf6:	f106 010c 	add.w	r1, r6, #12
 800ddfa:	f007 fa1d 	bl	8015238 <rcl_timer_init>
 800ddfe:	b910      	cbnz	r0, 800de06 <rclc_timer_init_default+0x46>
 800de00:	b00a      	add	sp, #40	@ 0x28
 800de02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de06:	9009      	str	r0, [sp, #36]	@ 0x24
 800de08:	f000 f872 	bl	800def0 <rcutils_reset_error>
 800de0c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800de0e:	b00a      	add	sp, #40	@ 0x28
 800de10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de14:	200b      	movs	r0, #11
 800de16:	b00a      	add	sp, #40	@ 0x28
 800de18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de1c:	200b      	movs	r0, #11
 800de1e:	4770      	bx	lr

0800de20 <__default_zero_allocate>:
 800de20:	f00b bce8 	b.w	80197f4 <calloc>

0800de24 <__default_reallocate>:
 800de24:	f00b be74 	b.w	8019b10 <realloc>

0800de28 <__default_deallocate>:
 800de28:	f00b bd50 	b.w	80198cc <free>

0800de2c <__default_allocate>:
 800de2c:	f00b bd46 	b.w	80198bc <malloc>

0800de30 <rcutils_get_zero_initialized_allocator>:
 800de30:	b510      	push	{r4, lr}
 800de32:	4c05      	ldr	r4, [pc, #20]	@ (800de48 <rcutils_get_zero_initialized_allocator+0x18>)
 800de34:	4686      	mov	lr, r0
 800de36:	4684      	mov	ip, r0
 800de38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800de3a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800de3e:	6823      	ldr	r3, [r4, #0]
 800de40:	f8cc 3000 	str.w	r3, [ip]
 800de44:	4670      	mov	r0, lr
 800de46:	bd10      	pop	{r4, pc}
 800de48:	0801b1f0 	.word	0x0801b1f0

0800de4c <rcutils_set_default_allocator>:
 800de4c:	b1a8      	cbz	r0, 800de7a <rcutils_set_default_allocator+0x2e>
 800de4e:	6802      	ldr	r2, [r0, #0]
 800de50:	b1a2      	cbz	r2, 800de7c <rcutils_set_default_allocator+0x30>
 800de52:	6841      	ldr	r1, [r0, #4]
 800de54:	b1a1      	cbz	r1, 800de80 <rcutils_set_default_allocator+0x34>
 800de56:	b410      	push	{r4}
 800de58:	68c4      	ldr	r4, [r0, #12]
 800de5a:	b164      	cbz	r4, 800de76 <rcutils_set_default_allocator+0x2a>
 800de5c:	6880      	ldr	r0, [r0, #8]
 800de5e:	b138      	cbz	r0, 800de70 <rcutils_set_default_allocator+0x24>
 800de60:	4b08      	ldr	r3, [pc, #32]	@ (800de84 <rcutils_set_default_allocator+0x38>)
 800de62:	601a      	str	r2, [r3, #0]
 800de64:	2200      	movs	r2, #0
 800de66:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800de6a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800de6e:	2001      	movs	r0, #1
 800de70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de74:	4770      	bx	lr
 800de76:	4620      	mov	r0, r4
 800de78:	e7fa      	b.n	800de70 <rcutils_set_default_allocator+0x24>
 800de7a:	4770      	bx	lr
 800de7c:	4610      	mov	r0, r2
 800de7e:	4770      	bx	lr
 800de80:	4608      	mov	r0, r1
 800de82:	4770      	bx	lr
 800de84:	20000014 	.word	0x20000014

0800de88 <rcutils_get_default_allocator>:
 800de88:	b510      	push	{r4, lr}
 800de8a:	4c05      	ldr	r4, [pc, #20]	@ (800dea0 <rcutils_get_default_allocator+0x18>)
 800de8c:	4686      	mov	lr, r0
 800de8e:	4684      	mov	ip, r0
 800de90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800de92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800de96:	6823      	ldr	r3, [r4, #0]
 800de98:	f8cc 3000 	str.w	r3, [ip]
 800de9c:	4670      	mov	r0, lr
 800de9e:	bd10      	pop	{r4, pc}
 800dea0:	20000014 	.word	0x20000014

0800dea4 <rcutils_allocator_is_valid>:
 800dea4:	b158      	cbz	r0, 800debe <rcutils_allocator_is_valid+0x1a>
 800dea6:	6803      	ldr	r3, [r0, #0]
 800dea8:	b143      	cbz	r3, 800debc <rcutils_allocator_is_valid+0x18>
 800deaa:	6843      	ldr	r3, [r0, #4]
 800deac:	b133      	cbz	r3, 800debc <rcutils_allocator_is_valid+0x18>
 800deae:	68c3      	ldr	r3, [r0, #12]
 800deb0:	b123      	cbz	r3, 800debc <rcutils_allocator_is_valid+0x18>
 800deb2:	6880      	ldr	r0, [r0, #8]
 800deb4:	3800      	subs	r0, #0
 800deb6:	bf18      	it	ne
 800deb8:	2001      	movne	r0, #1
 800deba:	4770      	bx	lr
 800debc:	4618      	mov	r0, r3
 800debe:	4770      	bx	lr

0800dec0 <rcutils_get_error_string>:
 800dec0:	4b06      	ldr	r3, [pc, #24]	@ (800dedc <rcutils_get_error_string+0x1c>)
 800dec2:	781b      	ldrb	r3, [r3, #0]
 800dec4:	b13b      	cbz	r3, 800ded6 <rcutils_get_error_string+0x16>
 800dec6:	4b06      	ldr	r3, [pc, #24]	@ (800dee0 <rcutils_get_error_string+0x20>)
 800dec8:	781a      	ldrb	r2, [r3, #0]
 800deca:	b90a      	cbnz	r2, 800ded0 <rcutils_get_error_string+0x10>
 800decc:	2201      	movs	r2, #1
 800dece:	701a      	strb	r2, [r3, #0]
 800ded0:	4b04      	ldr	r3, [pc, #16]	@ (800dee4 <rcutils_get_error_string+0x24>)
 800ded2:	7818      	ldrb	r0, [r3, #0]
 800ded4:	4770      	bx	lr
 800ded6:	4b04      	ldr	r3, [pc, #16]	@ (800dee8 <rcutils_get_error_string+0x28>)
 800ded8:	7818      	ldrb	r0, [r3, #0]
 800deda:	4770      	bx	lr
 800dedc:	200064a8 	.word	0x200064a8
 800dee0:	200064c1 	.word	0x200064c1
 800dee4:	200064c0 	.word	0x200064c0
 800dee8:	0801b204 	.word	0x0801b204
 800deec:	00000000 	.word	0x00000000

0800def0 <rcutils_reset_error>:
 800def0:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800df10 <rcutils_reset_error+0x20>
 800def4:	4a08      	ldr	r2, [pc, #32]	@ (800df18 <rcutils_reset_error+0x28>)
 800def6:	4809      	ldr	r0, [pc, #36]	@ (800df1c <rcutils_reset_error+0x2c>)
 800def8:	4909      	ldr	r1, [pc, #36]	@ (800df20 <rcutils_reset_error+0x30>)
 800defa:	2300      	movs	r3, #0
 800defc:	8013      	strh	r3, [r2, #0]
 800defe:	ed82 7b02 	vstr	d7, [r2, #8]
 800df02:	4a08      	ldr	r2, [pc, #32]	@ (800df24 <rcutils_reset_error+0x34>)
 800df04:	7003      	strb	r3, [r0, #0]
 800df06:	700b      	strb	r3, [r1, #0]
 800df08:	7013      	strb	r3, [r2, #0]
 800df0a:	4770      	bx	lr
 800df0c:	f3af 8000 	nop.w
	...
 800df18:	200064b0 	.word	0x200064b0
 800df1c:	200064c1 	.word	0x200064c1
 800df20:	200064c0 	.word	0x200064c0
 800df24:	200064a8 	.word	0x200064a8

0800df28 <rcutils_system_time_now>:
 800df28:	b308      	cbz	r0, 800df6e <rcutils_system_time_now+0x46>
 800df2a:	b570      	push	{r4, r5, r6, lr}
 800df2c:	b084      	sub	sp, #16
 800df2e:	4604      	mov	r4, r0
 800df30:	4669      	mov	r1, sp
 800df32:	2001      	movs	r0, #1
 800df34:	f7f5 f8d4 	bl	80030e0 <clock_gettime>
 800df38:	e9dd 3500 	ldrd	r3, r5, [sp]
 800df3c:	2d00      	cmp	r5, #0
 800df3e:	db13      	blt.n	800df68 <rcutils_system_time_now+0x40>
 800df40:	9902      	ldr	r1, [sp, #8]
 800df42:	2900      	cmp	r1, #0
 800df44:	db0d      	blt.n	800df62 <rcutils_system_time_now+0x3a>
 800df46:	4e0b      	ldr	r6, [pc, #44]	@ (800df74 <rcutils_system_time_now+0x4c>)
 800df48:	fba3 3206 	umull	r3, r2, r3, r6
 800df4c:	185b      	adds	r3, r3, r1
 800df4e:	fb06 2205 	mla	r2, r6, r5, r2
 800df52:	f04f 0000 	mov.w	r0, #0
 800df56:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800df5a:	e9c4 3200 	strd	r3, r2, [r4]
 800df5e:	b004      	add	sp, #16
 800df60:	bd70      	pop	{r4, r5, r6, pc}
 800df62:	ea53 0205 	orrs.w	r2, r3, r5
 800df66:	d1ee      	bne.n	800df46 <rcutils_system_time_now+0x1e>
 800df68:	2002      	movs	r0, #2
 800df6a:	b004      	add	sp, #16
 800df6c:	bd70      	pop	{r4, r5, r6, pc}
 800df6e:	200b      	movs	r0, #11
 800df70:	4770      	bx	lr
 800df72:	bf00      	nop
 800df74:	3b9aca00 	.word	0x3b9aca00

0800df78 <rcutils_steady_time_now>:
 800df78:	b308      	cbz	r0, 800dfbe <rcutils_steady_time_now+0x46>
 800df7a:	b570      	push	{r4, r5, r6, lr}
 800df7c:	b084      	sub	sp, #16
 800df7e:	4604      	mov	r4, r0
 800df80:	4669      	mov	r1, sp
 800df82:	2000      	movs	r0, #0
 800df84:	f7f5 f8ac 	bl	80030e0 <clock_gettime>
 800df88:	e9dd 3500 	ldrd	r3, r5, [sp]
 800df8c:	2d00      	cmp	r5, #0
 800df8e:	db13      	blt.n	800dfb8 <rcutils_steady_time_now+0x40>
 800df90:	9902      	ldr	r1, [sp, #8]
 800df92:	2900      	cmp	r1, #0
 800df94:	db0d      	blt.n	800dfb2 <rcutils_steady_time_now+0x3a>
 800df96:	4e0b      	ldr	r6, [pc, #44]	@ (800dfc4 <rcutils_steady_time_now+0x4c>)
 800df98:	fba3 3206 	umull	r3, r2, r3, r6
 800df9c:	185b      	adds	r3, r3, r1
 800df9e:	fb06 2205 	mla	r2, r6, r5, r2
 800dfa2:	f04f 0000 	mov.w	r0, #0
 800dfa6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800dfaa:	e9c4 3200 	strd	r3, r2, [r4]
 800dfae:	b004      	add	sp, #16
 800dfb0:	bd70      	pop	{r4, r5, r6, pc}
 800dfb2:	ea53 0205 	orrs.w	r2, r3, r5
 800dfb6:	d1ee      	bne.n	800df96 <rcutils_steady_time_now+0x1e>
 800dfb8:	2002      	movs	r0, #2
 800dfba:	b004      	add	sp, #16
 800dfbc:	bd70      	pop	{r4, r5, r6, pc}
 800dfbe:	200b      	movs	r0, #11
 800dfc0:	4770      	bx	lr
 800dfc2:	bf00      	nop
 800dfc4:	3b9aca00 	.word	0x3b9aca00

0800dfc8 <rmw_get_zero_initialized_init_options>:
 800dfc8:	b510      	push	{r4, lr}
 800dfca:	2238      	movs	r2, #56	@ 0x38
 800dfcc:	4604      	mov	r4, r0
 800dfce:	2100      	movs	r1, #0
 800dfd0:	f00b fffa 	bl	8019fc8 <memset>
 800dfd4:	f104 0010 	add.w	r0, r4, #16
 800dfd8:	f000 f80a 	bl	800dff0 <rmw_get_default_security_options>
 800dfdc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dfe0:	60e3      	str	r3, [r4, #12]
 800dfe2:	4620      	mov	r0, r4
 800dfe4:	bd10      	pop	{r4, pc}
 800dfe6:	bf00      	nop

0800dfe8 <rmw_get_default_publisher_options>:
 800dfe8:	2200      	movs	r2, #0
 800dfea:	6002      	str	r2, [r0, #0]
 800dfec:	7102      	strb	r2, [r0, #4]
 800dfee:	4770      	bx	lr

0800dff0 <rmw_get_default_security_options>:
 800dff0:	2200      	movs	r2, #0
 800dff2:	7002      	strb	r2, [r0, #0]
 800dff4:	6042      	str	r2, [r0, #4]
 800dff6:	4770      	bx	lr

0800dff8 <rmw_uros_set_custom_transport>:
 800dff8:	b470      	push	{r4, r5, r6}
 800dffa:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800dffe:	b162      	cbz	r2, 800e01a <rmw_uros_set_custom_transport+0x22>
 800e000:	b15b      	cbz	r3, 800e01a <rmw_uros_set_custom_transport+0x22>
 800e002:	b155      	cbz	r5, 800e01a <rmw_uros_set_custom_transport+0x22>
 800e004:	b14e      	cbz	r6, 800e01a <rmw_uros_set_custom_transport+0x22>
 800e006:	4c06      	ldr	r4, [pc, #24]	@ (800e020 <rmw_uros_set_custom_transport+0x28>)
 800e008:	7020      	strb	r0, [r4, #0]
 800e00a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800e00e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e012:	6166      	str	r6, [r4, #20]
 800e014:	2000      	movs	r0, #0
 800e016:	bc70      	pop	{r4, r5, r6}
 800e018:	4770      	bx	lr
 800e01a:	200b      	movs	r0, #11
 800e01c:	bc70      	pop	{r4, r5, r6}
 800e01e:	4770      	bx	lr
 800e020:	200064c4 	.word	0x200064c4

0800e024 <rmw_init_options_init>:
 800e024:	b084      	sub	sp, #16
 800e026:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e028:	b083      	sub	sp, #12
 800e02a:	ad09      	add	r5, sp, #36	@ 0x24
 800e02c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800e030:	b130      	cbz	r0, 800e040 <rmw_init_options_init+0x1c>
 800e032:	4604      	mov	r4, r0
 800e034:	4628      	mov	r0, r5
 800e036:	f7ff ff35 	bl	800dea4 <rcutils_allocator_is_valid>
 800e03a:	b108      	cbz	r0, 800e040 <rmw_init_options_init+0x1c>
 800e03c:	68a6      	ldr	r6, [r4, #8]
 800e03e:	b12e      	cbz	r6, 800e04c <rmw_init_options_init+0x28>
 800e040:	200b      	movs	r0, #11
 800e042:	b003      	add	sp, #12
 800e044:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e048:	b004      	add	sp, #16
 800e04a:	4770      	bx	lr
 800e04c:	2200      	movs	r2, #0
 800e04e:	2300      	movs	r3, #0
 800e050:	e9c4 2300 	strd	r2, r3, [r4]
 800e054:	4b22      	ldr	r3, [pc, #136]	@ (800e0e0 <rmw_init_options_init+0xbc>)
 800e056:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800e0f0 <rmw_init_options_init+0xcc>
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	60a3      	str	r3, [r4, #8]
 800e05e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e060:	f104 0c20 	add.w	ip, r4, #32
 800e064:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e068:	466f      	mov	r7, sp
 800e06a:	682b      	ldr	r3, [r5, #0]
 800e06c:	f8cc 3000 	str.w	r3, [ip]
 800e070:	4638      	mov	r0, r7
 800e072:	f8c4 e01c 	str.w	lr, [r4, #28]
 800e076:	60e6      	str	r6, [r4, #12]
 800e078:	f7ff ffba 	bl	800dff0 <rmw_get_default_security_options>
 800e07c:	e897 0003 	ldmia.w	r7, {r0, r1}
 800e080:	f104 0310 	add.w	r3, r4, #16
 800e084:	e883 0003 	stmia.w	r3, {r0, r1}
 800e088:	2203      	movs	r2, #3
 800e08a:	4816      	ldr	r0, [pc, #88]	@ (800e0e4 <rmw_init_options_init+0xc0>)
 800e08c:	4916      	ldr	r1, [pc, #88]	@ (800e0e8 <rmw_init_options_init+0xc4>)
 800e08e:	7626      	strb	r6, [r4, #24]
 800e090:	f000 ff8e 	bl	800efb0 <rmw_uxrce_init_init_options_impl_memory>
 800e094:	4813      	ldr	r0, [pc, #76]	@ (800e0e4 <rmw_init_options_init+0xc0>)
 800e096:	f009 fc73 	bl	8017980 <get_memory>
 800e09a:	b1f0      	cbz	r0, 800e0da <rmw_init_options_init+0xb6>
 800e09c:	4a13      	ldr	r2, [pc, #76]	@ (800e0ec <rmw_init_options_init+0xc8>)
 800e09e:	6883      	ldr	r3, [r0, #8]
 800e0a0:	6851      	ldr	r1, [r2, #4]
 800e0a2:	7810      	ldrb	r0, [r2, #0]
 800e0a4:	6363      	str	r3, [r4, #52]	@ 0x34
 800e0a6:	7418      	strb	r0, [r3, #16]
 800e0a8:	6159      	str	r1, [r3, #20]
 800e0aa:	68d1      	ldr	r1, [r2, #12]
 800e0ac:	61d9      	str	r1, [r3, #28]
 800e0ae:	6911      	ldr	r1, [r2, #16]
 800e0b0:	6219      	str	r1, [r3, #32]
 800e0b2:	6951      	ldr	r1, [r2, #20]
 800e0b4:	6892      	ldr	r2, [r2, #8]
 800e0b6:	619a      	str	r2, [r3, #24]
 800e0b8:	6259      	str	r1, [r3, #36]	@ 0x24
 800e0ba:	f004 fd6b 	bl	8012b94 <uxr_nanos>
 800e0be:	f00b fcbb 	bl	8019a38 <srand>
 800e0c2:	f00b fce7 	bl	8019a94 <rand>
 800e0c6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e0c8:	6298      	str	r0, [r3, #40]	@ 0x28
 800e0ca:	2800      	cmp	r0, #0
 800e0cc:	d0f9      	beq.n	800e0c2 <rmw_init_options_init+0x9e>
 800e0ce:	2000      	movs	r0, #0
 800e0d0:	b003      	add	sp, #12
 800e0d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e0d6:	b004      	add	sp, #16
 800e0d8:	4770      	bx	lr
 800e0da:	2001      	movs	r0, #1
 800e0dc:	e7b1      	b.n	800e042 <rmw_init_options_init+0x1e>
 800e0de:	bf00      	nop
 800e0e0:	0801bb60 	.word	0x0801bb60
 800e0e4:	2000addc 	.word	0x2000addc
 800e0e8:	20006678 	.word	0x20006678
 800e0ec:	200064c4 	.word	0x200064c4
 800e0f0:	0801b208 	.word	0x0801b208

0800e0f4 <rmw_init_options_copy>:
 800e0f4:	b570      	push	{r4, r5, r6, lr}
 800e0f6:	b158      	cbz	r0, 800e110 <rmw_init_options_copy+0x1c>
 800e0f8:	460d      	mov	r5, r1
 800e0fa:	b149      	cbz	r1, 800e110 <rmw_init_options_copy+0x1c>
 800e0fc:	4604      	mov	r4, r0
 800e0fe:	6880      	ldr	r0, [r0, #8]
 800e100:	b120      	cbz	r0, 800e10c <rmw_init_options_copy+0x18>
 800e102:	4b1e      	ldr	r3, [pc, #120]	@ (800e17c <rmw_init_options_copy+0x88>)
 800e104:	6819      	ldr	r1, [r3, #0]
 800e106:	f7f2 f88b 	bl	8000220 <strcmp>
 800e10a:	bb90      	cbnz	r0, 800e172 <rmw_init_options_copy+0x7e>
 800e10c:	68ab      	ldr	r3, [r5, #8]
 800e10e:	b113      	cbz	r3, 800e116 <rmw_init_options_copy+0x22>
 800e110:	250b      	movs	r5, #11
 800e112:	4628      	mov	r0, r5
 800e114:	bd70      	pop	{r4, r5, r6, pc}
 800e116:	4623      	mov	r3, r4
 800e118:	462a      	mov	r2, r5
 800e11a:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800e11e:	f8d3 c000 	ldr.w	ip, [r3]
 800e122:	6858      	ldr	r0, [r3, #4]
 800e124:	6899      	ldr	r1, [r3, #8]
 800e126:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800e12a:	f8c2 e00c 	str.w	lr, [r2, #12]
 800e12e:	3310      	adds	r3, #16
 800e130:	42b3      	cmp	r3, r6
 800e132:	f8c2 c000 	str.w	ip, [r2]
 800e136:	6050      	str	r0, [r2, #4]
 800e138:	6091      	str	r1, [r2, #8]
 800e13a:	f102 0210 	add.w	r2, r2, #16
 800e13e:	d1ee      	bne.n	800e11e <rmw_init_options_copy+0x2a>
 800e140:	6819      	ldr	r1, [r3, #0]
 800e142:	685b      	ldr	r3, [r3, #4]
 800e144:	480e      	ldr	r0, [pc, #56]	@ (800e180 <rmw_init_options_copy+0x8c>)
 800e146:	6053      	str	r3, [r2, #4]
 800e148:	6011      	str	r1, [r2, #0]
 800e14a:	f009 fc19 	bl	8017980 <get_memory>
 800e14e:	b198      	cbz	r0, 800e178 <rmw_init_options_copy+0x84>
 800e150:	6883      	ldr	r3, [r0, #8]
 800e152:	636b      	str	r3, [r5, #52]	@ 0x34
 800e154:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800e156:	f102 0c10 	add.w	ip, r2, #16
 800e15a:	f103 0410 	add.w	r4, r3, #16
 800e15e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e164:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800e168:	2500      	movs	r5, #0
 800e16a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e16e:	4628      	mov	r0, r5
 800e170:	bd70      	pop	{r4, r5, r6, pc}
 800e172:	250c      	movs	r5, #12
 800e174:	4628      	mov	r0, r5
 800e176:	bd70      	pop	{r4, r5, r6, pc}
 800e178:	2501      	movs	r5, #1
 800e17a:	e7ca      	b.n	800e112 <rmw_init_options_copy+0x1e>
 800e17c:	0801bb60 	.word	0x0801bb60
 800e180:	2000addc 	.word	0x2000addc

0800e184 <rmw_init_options_fini>:
 800e184:	2800      	cmp	r0, #0
 800e186:	d03d      	beq.n	800e204 <rmw_init_options_fini+0x80>
 800e188:	b510      	push	{r4, lr}
 800e18a:	4604      	mov	r4, r0
 800e18c:	b08e      	sub	sp, #56	@ 0x38
 800e18e:	3020      	adds	r0, #32
 800e190:	f7ff fe88 	bl	800dea4 <rcutils_allocator_is_valid>
 800e194:	b360      	cbz	r0, 800e1f0 <rmw_init_options_fini+0x6c>
 800e196:	68a0      	ldr	r0, [r4, #8]
 800e198:	b120      	cbz	r0, 800e1a4 <rmw_init_options_fini+0x20>
 800e19a:	4b1c      	ldr	r3, [pc, #112]	@ (800e20c <rmw_init_options_fini+0x88>)
 800e19c:	6819      	ldr	r1, [r3, #0]
 800e19e:	f7f2 f83f 	bl	8000220 <strcmp>
 800e1a2:	bb68      	cbnz	r0, 800e200 <rmw_init_options_fini+0x7c>
 800e1a4:	4b1a      	ldr	r3, [pc, #104]	@ (800e210 <rmw_init_options_fini+0x8c>)
 800e1a6:	6819      	ldr	r1, [r3, #0]
 800e1a8:	b331      	cbz	r1, 800e1f8 <rmw_init_options_fini+0x74>
 800e1aa:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800e1ac:	e001      	b.n	800e1b2 <rmw_init_options_fini+0x2e>
 800e1ae:	6849      	ldr	r1, [r1, #4]
 800e1b0:	b311      	cbz	r1, 800e1f8 <rmw_init_options_fini+0x74>
 800e1b2:	688b      	ldr	r3, [r1, #8]
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d1fa      	bne.n	800e1ae <rmw_init_options_fini+0x2a>
 800e1b8:	4815      	ldr	r0, [pc, #84]	@ (800e210 <rmw_init_options_fini+0x8c>)
 800e1ba:	f009 fbf1 	bl	80179a0 <put_memory>
 800e1be:	4668      	mov	r0, sp
 800e1c0:	f7ff ff02 	bl	800dfc8 <rmw_get_zero_initialized_init_options>
 800e1c4:	46ee      	mov	lr, sp
 800e1c6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e1ca:	46a4      	mov	ip, r4
 800e1cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e1d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e1d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e1d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e1dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e1e0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e1e4:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	b00e      	add	sp, #56	@ 0x38
 800e1ee:	bd10      	pop	{r4, pc}
 800e1f0:	230b      	movs	r3, #11
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	b00e      	add	sp, #56	@ 0x38
 800e1f6:	bd10      	pop	{r4, pc}
 800e1f8:	2301      	movs	r3, #1
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	b00e      	add	sp, #56	@ 0x38
 800e1fe:	bd10      	pop	{r4, pc}
 800e200:	230c      	movs	r3, #12
 800e202:	e7f2      	b.n	800e1ea <rmw_init_options_fini+0x66>
 800e204:	230b      	movs	r3, #11
 800e206:	4618      	mov	r0, r3
 800e208:	4770      	bx	lr
 800e20a:	bf00      	nop
 800e20c:	0801bb60 	.word	0x0801bb60
 800e210:	2000addc 	.word	0x2000addc

0800e214 <rmw_init>:
 800e214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e218:	b083      	sub	sp, #12
 800e21a:	2800      	cmp	r0, #0
 800e21c:	f000 80d3 	beq.w	800e3c6 <rmw_init+0x1b2>
 800e220:	460e      	mov	r6, r1
 800e222:	2900      	cmp	r1, #0
 800e224:	f000 80cf 	beq.w	800e3c6 <rmw_init+0x1b2>
 800e228:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e22a:	4605      	mov	r5, r0
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	f000 80ca 	beq.w	800e3c6 <rmw_init+0x1b2>
 800e232:	4b78      	ldr	r3, [pc, #480]	@ (800e414 <rmw_init+0x200>)
 800e234:	6880      	ldr	r0, [r0, #8]
 800e236:	681f      	ldr	r7, [r3, #0]
 800e238:	b128      	cbz	r0, 800e246 <rmw_init+0x32>
 800e23a:	4639      	mov	r1, r7
 800e23c:	f7f1 fff0 	bl	8000220 <strcmp>
 800e240:	2800      	cmp	r0, #0
 800e242:	f040 80ca 	bne.w	800e3da <rmw_init+0x1c6>
 800e246:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e24a:	4c73      	ldr	r4, [pc, #460]	@ (800e418 <rmw_init+0x204>)
 800e24c:	4973      	ldr	r1, [pc, #460]	@ (800e41c <rmw_init+0x208>)
 800e24e:	4874      	ldr	r0, [pc, #464]	@ (800e420 <rmw_init+0x20c>)
 800e250:	60b7      	str	r7, [r6, #8]
 800e252:	e9c6 2300 	strd	r2, r3, [r6]
 800e256:	68eb      	ldr	r3, [r5, #12]
 800e258:	64b3      	str	r3, [r6, #72]	@ 0x48
 800e25a:	2201      	movs	r2, #1
 800e25c:	f000 fe48 	bl	800eef0 <rmw_uxrce_init_session_memory>
 800e260:	4620      	mov	r0, r4
 800e262:	4970      	ldr	r1, [pc, #448]	@ (800e424 <rmw_init+0x210>)
 800e264:	2204      	movs	r2, #4
 800e266:	f000 fe83 	bl	800ef70 <rmw_uxrce_init_static_input_buffer_memory>
 800e26a:	f04f 0800 	mov.w	r8, #0
 800e26e:	486c      	ldr	r0, [pc, #432]	@ (800e420 <rmw_init+0x20c>)
 800e270:	f884 800d 	strb.w	r8, [r4, #13]
 800e274:	f009 fb84 	bl	8017980 <get_memory>
 800e278:	2800      	cmp	r0, #0
 800e27a:	f000 80a9 	beq.w	800e3d0 <rmw_init+0x1bc>
 800e27e:	6884      	ldr	r4, [r0, #8]
 800e280:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800e282:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800e284:	f890 c010 	ldrb.w	ip, [r0, #16]
 800e288:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800e28c:	9101      	str	r1, [sp, #4]
 800e28e:	6a00      	ldr	r0, [r0, #32]
 800e290:	9000      	str	r0, [sp, #0]
 800e292:	f104 0910 	add.w	r9, r4, #16
 800e296:	4661      	mov	r1, ip
 800e298:	4648      	mov	r0, r9
 800e29a:	f002 fc19 	bl	8010ad0 <uxr_set_custom_transport_callbacks>
 800e29e:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800e2a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e2a6:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800e2aa:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800e2ae:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800e2b2:	495d      	ldr	r1, [pc, #372]	@ (800e428 <rmw_init+0x214>)
 800e2b4:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800e2b8:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800e2bc:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800e2c0:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800e2c4:	4859      	ldr	r0, [pc, #356]	@ (800e42c <rmw_init+0x218>)
 800e2c6:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800e2ca:	2201      	movs	r2, #1
 800e2cc:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800e2ce:	f000 fdef 	bl	800eeb0 <rmw_uxrce_init_node_memory>
 800e2d2:	4957      	ldr	r1, [pc, #348]	@ (800e430 <rmw_init+0x21c>)
 800e2d4:	4857      	ldr	r0, [pc, #348]	@ (800e434 <rmw_init+0x220>)
 800e2d6:	2205      	movs	r2, #5
 800e2d8:	f000 fdca 	bl	800ee70 <rmw_uxrce_init_subscription_memory>
 800e2dc:	4956      	ldr	r1, [pc, #344]	@ (800e438 <rmw_init+0x224>)
 800e2de:	4857      	ldr	r0, [pc, #348]	@ (800e43c <rmw_init+0x228>)
 800e2e0:	220a      	movs	r2, #10
 800e2e2:	f000 fda5 	bl	800ee30 <rmw_uxrce_init_publisher_memory>
 800e2e6:	4956      	ldr	r1, [pc, #344]	@ (800e440 <rmw_init+0x22c>)
 800e2e8:	4856      	ldr	r0, [pc, #344]	@ (800e444 <rmw_init+0x230>)
 800e2ea:	2201      	movs	r2, #1
 800e2ec:	f000 fd60 	bl	800edb0 <rmw_uxrce_init_service_memory>
 800e2f0:	4955      	ldr	r1, [pc, #340]	@ (800e448 <rmw_init+0x234>)
 800e2f2:	4856      	ldr	r0, [pc, #344]	@ (800e44c <rmw_init+0x238>)
 800e2f4:	2201      	movs	r2, #1
 800e2f6:	f000 fd7b 	bl	800edf0 <rmw_uxrce_init_client_memory>
 800e2fa:	4955      	ldr	r1, [pc, #340]	@ (800e450 <rmw_init+0x23c>)
 800e2fc:	4855      	ldr	r0, [pc, #340]	@ (800e454 <rmw_init+0x240>)
 800e2fe:	220f      	movs	r2, #15
 800e300:	f000 fe16 	bl	800ef30 <rmw_uxrce_init_topic_memory>
 800e304:	4954      	ldr	r1, [pc, #336]	@ (800e458 <rmw_init+0x244>)
 800e306:	4855      	ldr	r0, [pc, #340]	@ (800e45c <rmw_init+0x248>)
 800e308:	2203      	movs	r2, #3
 800e30a:	f000 fe51 	bl	800efb0 <rmw_uxrce_init_init_options_impl_memory>
 800e30e:	4954      	ldr	r1, [pc, #336]	@ (800e460 <rmw_init+0x24c>)
 800e310:	4854      	ldr	r0, [pc, #336]	@ (800e464 <rmw_init+0x250>)
 800e312:	2204      	movs	r2, #4
 800e314:	f000 fe6c 	bl	800eff0 <rmw_uxrce_init_wait_set_memory>
 800e318:	4953      	ldr	r1, [pc, #332]	@ (800e468 <rmw_init+0x254>)
 800e31a:	4854      	ldr	r0, [pc, #336]	@ (800e46c <rmw_init+0x258>)
 800e31c:	2204      	movs	r2, #4
 800e31e:	f000 fe87 	bl	800f030 <rmw_uxrce_init_guard_condition_memory>
 800e322:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800e324:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800e326:	4642      	mov	r2, r8
 800e328:	f000 fd2a 	bl	800ed80 <rmw_uxrce_transport_init>
 800e32c:	4607      	mov	r7, r0
 800e32e:	2800      	cmp	r0, #0
 800e330:	d158      	bne.n	800e3e4 <rmw_init+0x1d0>
 800e332:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800e334:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800e338:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e33a:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800e33e:	4628      	mov	r0, r5
 800e340:	f002 fdfa 	bl	8010f38 <uxr_init_session>
 800e344:	494a      	ldr	r1, [pc, #296]	@ (800e470 <rmw_init+0x25c>)
 800e346:	4622      	mov	r2, r4
 800e348:	4628      	mov	r0, r5
 800e34a:	f002 fe19 	bl	8010f80 <uxr_set_topic_callback>
 800e34e:	4949      	ldr	r1, [pc, #292]	@ (800e474 <rmw_init+0x260>)
 800e350:	463a      	mov	r2, r7
 800e352:	4628      	mov	r0, r5
 800e354:	f002 fe10 	bl	8010f78 <uxr_set_status_callback>
 800e358:	4947      	ldr	r1, [pc, #284]	@ (800e478 <rmw_init+0x264>)
 800e35a:	463a      	mov	r2, r7
 800e35c:	4628      	mov	r0, r5
 800e35e:	f002 fe13 	bl	8010f88 <uxr_set_request_callback>
 800e362:	4946      	ldr	r1, [pc, #280]	@ (800e47c <rmw_init+0x268>)
 800e364:	463a      	mov	r2, r7
 800e366:	4628      	mov	r0, r5
 800e368:	f002 fe12 	bl	8010f90 <uxr_set_reply_callback>
 800e36c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800e370:	2304      	movs	r3, #4
 800e372:	0092      	lsls	r2, r2, #2
 800e374:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800e378:	4628      	mov	r0, r5
 800e37a:	f002 fe47 	bl	801100c <uxr_create_input_reliable_stream>
 800e37e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800e382:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800e386:	0092      	lsls	r2, r2, #2
 800e388:	2304      	movs	r3, #4
 800e38a:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800e38e:	4628      	mov	r0, r5
 800e390:	f002 fe14 	bl	8010fbc <uxr_create_output_reliable_stream>
 800e394:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800e398:	4628      	mov	r0, r5
 800e39a:	f002 fe31 	bl	8011000 <uxr_create_input_best_effort_stream>
 800e39e:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800e3a2:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800e3a6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800e3aa:	3114      	adds	r1, #20
 800e3ac:	4628      	mov	r0, r5
 800e3ae:	f002 fdf3 	bl	8010f98 <uxr_create_output_best_effort_stream>
 800e3b2:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800e3b6:	4628      	mov	r0, r5
 800e3b8:	f003 fb7e 	bl	8011ab8 <uxr_create_session>
 800e3bc:	b1f8      	cbz	r0, 800e3fe <rmw_init+0x1ea>
 800e3be:	4638      	mov	r0, r7
 800e3c0:	b003      	add	sp, #12
 800e3c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3c6:	270b      	movs	r7, #11
 800e3c8:	4638      	mov	r0, r7
 800e3ca:	b003      	add	sp, #12
 800e3cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3d0:	2701      	movs	r7, #1
 800e3d2:	4638      	mov	r0, r7
 800e3d4:	b003      	add	sp, #12
 800e3d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3da:	270c      	movs	r7, #12
 800e3dc:	4638      	mov	r0, r7
 800e3de:	b003      	add	sp, #12
 800e3e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3e4:	4648      	mov	r0, r9
 800e3e6:	f002 fbb5 	bl	8010b54 <uxr_close_custom_transport>
 800e3ea:	480d      	ldr	r0, [pc, #52]	@ (800e420 <rmw_init+0x20c>)
 800e3ec:	4621      	mov	r1, r4
 800e3ee:	f009 fad7 	bl	80179a0 <put_memory>
 800e3f2:	4638      	mov	r0, r7
 800e3f4:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800e3f8:	b003      	add	sp, #12
 800e3fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3fe:	4648      	mov	r0, r9
 800e400:	f002 fba8 	bl	8010b54 <uxr_close_custom_transport>
 800e404:	4806      	ldr	r0, [pc, #24]	@ (800e420 <rmw_init+0x20c>)
 800e406:	4621      	mov	r1, r4
 800e408:	f009 faca 	bl	80179a0 <put_memory>
 800e40c:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800e40e:	2701      	movs	r7, #1
 800e410:	e7d5      	b.n	800e3be <rmw_init+0x1aa>
 800e412:	bf00      	nop
 800e414:	0801bb60 	.word	0x0801bb60
 800e418:	2000ae2c 	.word	0x2000ae2c
 800e41c:	200070d8 	.word	0x200070d8
 800e420:	2000ae1c 	.word	0x2000ae1c
 800e424:	20008680 	.word	0x20008680
 800e428:	200066fc 	.word	0x200066fc
 800e42c:	2000adec 	.word	0x2000adec
 800e430:	2000a780 	.word	0x2000a780
 800e434:	2000ae3c 	.word	0x2000ae3c
 800e438:	200067a0 	.word	0x200067a0
 800e43c:	2000adfc 	.word	0x2000adfc
 800e440:	20007010 	.word	0x20007010
 800e444:	2000ae0c 	.word	0x2000ae0c
 800e448:	20006530 	.word	0x20006530
 800e44c:	2000651c 	.word	0x2000651c
 800e450:	2000abb8 	.word	0x2000abb8
 800e454:	2000ae4c 	.word	0x2000ae4c
 800e458:	20006678 	.word	0x20006678
 800e45c:	2000addc 	.word	0x2000addc
 800e460:	2000ad5c 	.word	0x2000ad5c
 800e464:	2000ae5c 	.word	0x2000ae5c
 800e468:	200065f8 	.word	0x200065f8
 800e46c:	2000adcc 	.word	0x2000adcc
 800e470:	080177b9 	.word	0x080177b9
 800e474:	080177b1 	.word	0x080177b1
 800e478:	08017851 	.word	0x08017851
 800e47c:	080178ed 	.word	0x080178ed

0800e480 <rmw_context_fini>:
 800e480:	4b17      	ldr	r3, [pc, #92]	@ (800e4e0 <rmw_context_fini+0x60>)
 800e482:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800e484:	b570      	push	{r4, r5, r6, lr}
 800e486:	681c      	ldr	r4, [r3, #0]
 800e488:	4605      	mov	r5, r0
 800e48a:	b334      	cbz	r4, 800e4da <rmw_context_fini+0x5a>
 800e48c:	2600      	movs	r6, #0
 800e48e:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800e492:	6902      	ldr	r2, [r0, #16]
 800e494:	428a      	cmp	r2, r1
 800e496:	d018      	beq.n	800e4ca <rmw_context_fini+0x4a>
 800e498:	2c00      	cmp	r4, #0
 800e49a:	d1f8      	bne.n	800e48e <rmw_context_fini+0xe>
 800e49c:	b189      	cbz	r1, 800e4c2 <rmw_context_fini+0x42>
 800e49e:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800e4a2:	789b      	ldrb	r3, [r3, #2]
 800e4a4:	2b01      	cmp	r3, #1
 800e4a6:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800e4aa:	bf14      	ite	ne
 800e4ac:	210a      	movne	r1, #10
 800e4ae:	2100      	moveq	r1, #0
 800e4b0:	f003 fada 	bl	8011a68 <uxr_delete_session_retries>
 800e4b4:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800e4b6:	f000 fddb 	bl	800f070 <rmw_uxrce_fini_session_memory>
 800e4ba:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800e4bc:	3010      	adds	r0, #16
 800e4be:	f002 fb49 	bl	8010b54 <uxr_close_custom_transport>
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800e4c6:	4630      	mov	r0, r6
 800e4c8:	bd70      	pop	{r4, r5, r6, pc}
 800e4ca:	3018      	adds	r0, #24
 800e4cc:	f000 f89c 	bl	800e608 <rmw_destroy_node>
 800e4d0:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800e4d2:	4606      	mov	r6, r0
 800e4d4:	2c00      	cmp	r4, #0
 800e4d6:	d1da      	bne.n	800e48e <rmw_context_fini+0xe>
 800e4d8:	e7e0      	b.n	800e49c <rmw_context_fini+0x1c>
 800e4da:	4626      	mov	r6, r4
 800e4dc:	e7de      	b.n	800e49c <rmw_context_fini+0x1c>
 800e4de:	bf00      	nop
 800e4e0:	2000adec 	.word	0x2000adec

0800e4e4 <create_node>:
 800e4e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e4e8:	b083      	sub	sp, #12
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d05f      	beq.n	800e5ae <create_node+0xca>
 800e4ee:	4606      	mov	r6, r0
 800e4f0:	4835      	ldr	r0, [pc, #212]	@ (800e5c8 <create_node+0xe4>)
 800e4f2:	460f      	mov	r7, r1
 800e4f4:	4690      	mov	r8, r2
 800e4f6:	461d      	mov	r5, r3
 800e4f8:	f009 fa42 	bl	8017980 <get_memory>
 800e4fc:	2800      	cmp	r0, #0
 800e4fe:	d056      	beq.n	800e5ae <create_node+0xca>
 800e500:	6884      	ldr	r4, [r0, #8]
 800e502:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800e504:	6123      	str	r3, [r4, #16]
 800e506:	f009 faa3 	bl	8017a50 <rmw_get_implementation_identifier>
 800e50a:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800e50e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800e512:	f8c4 9020 	str.w	r9, [r4, #32]
 800e516:	4630      	mov	r0, r6
 800e518:	f7f1 fe8c 	bl	8000234 <strlen>
 800e51c:	1c42      	adds	r2, r0, #1
 800e51e:	2a3c      	cmp	r2, #60	@ 0x3c
 800e520:	f104 0518 	add.w	r5, r4, #24
 800e524:	d840      	bhi.n	800e5a8 <create_node+0xc4>
 800e526:	4648      	mov	r0, r9
 800e528:	4631      	mov	r1, r6
 800e52a:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800e52e:	f00b fe14 	bl	801a15a <memcpy>
 800e532:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800e536:	4638      	mov	r0, r7
 800e538:	f7f1 fe7c 	bl	8000234 <strlen>
 800e53c:	1c42      	adds	r2, r0, #1
 800e53e:	2a3c      	cmp	r2, #60	@ 0x3c
 800e540:	d832      	bhi.n	800e5a8 <create_node+0xc4>
 800e542:	4639      	mov	r1, r7
 800e544:	4648      	mov	r0, r9
 800e546:	f00b fe08 	bl	801a15a <memcpy>
 800e54a:	6923      	ldr	r3, [r4, #16]
 800e54c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e550:	2101      	movs	r1, #1
 800e552:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800e556:	1842      	adds	r2, r0, r1
 800e558:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800e55c:	f002 fafe 	bl	8010b5c <uxr_object_id>
 800e560:	6160      	str	r0, [r4, #20]
 800e562:	783b      	ldrb	r3, [r7, #0]
 800e564:	2b2f      	cmp	r3, #47	@ 0x2f
 800e566:	d127      	bne.n	800e5b8 <create_node+0xd4>
 800e568:	787b      	ldrb	r3, [r7, #1]
 800e56a:	bb2b      	cbnz	r3, 800e5b8 <create_node+0xd4>
 800e56c:	4a17      	ldr	r2, [pc, #92]	@ (800e5cc <create_node+0xe8>)
 800e56e:	4818      	ldr	r0, [pc, #96]	@ (800e5d0 <create_node+0xec>)
 800e570:	4633      	mov	r3, r6
 800e572:	213c      	movs	r1, #60	@ 0x3c
 800e574:	f00b fc4e 	bl	8019e14 <sniprintf>
 800e578:	6920      	ldr	r0, [r4, #16]
 800e57a:	4915      	ldr	r1, [pc, #84]	@ (800e5d0 <create_node+0xec>)
 800e57c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800e580:	9100      	str	r1, [sp, #0]
 800e582:	2106      	movs	r1, #6
 800e584:	9101      	str	r1, [sp, #4]
 800e586:	6811      	ldr	r1, [r2, #0]
 800e588:	6962      	ldr	r2, [r4, #20]
 800e58a:	fa1f f388 	uxth.w	r3, r8
 800e58e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e592:	f002 f86b 	bl	801066c <uxr_buffer_create_participant_bin>
 800e596:	4602      	mov	r2, r0
 800e598:	6920      	ldr	r0, [r4, #16]
 800e59a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e59e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e5a2:	f000 fedb 	bl	800f35c <run_xrce_session>
 800e5a6:	b918      	cbnz	r0, 800e5b0 <create_node+0xcc>
 800e5a8:	4628      	mov	r0, r5
 800e5aa:	f000 fd67 	bl	800f07c <rmw_uxrce_fini_node_memory>
 800e5ae:	2500      	movs	r5, #0
 800e5b0:	4628      	mov	r0, r5
 800e5b2:	b003      	add	sp, #12
 800e5b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e5b8:	4a06      	ldr	r2, [pc, #24]	@ (800e5d4 <create_node+0xf0>)
 800e5ba:	9600      	str	r6, [sp, #0]
 800e5bc:	463b      	mov	r3, r7
 800e5be:	213c      	movs	r1, #60	@ 0x3c
 800e5c0:	4803      	ldr	r0, [pc, #12]	@ (800e5d0 <create_node+0xec>)
 800e5c2:	f00b fc27 	bl	8019e14 <sniprintf>
 800e5c6:	e7d7      	b.n	800e578 <create_node+0x94>
 800e5c8:	2000adec 	.word	0x2000adec
 800e5cc:	0801b248 	.word	0x0801b248
 800e5d0:	200064e0 	.word	0x200064e0
 800e5d4:	0801b20c 	.word	0x0801b20c

0800e5d8 <rmw_create_node>:
 800e5d8:	b199      	cbz	r1, 800e602 <rmw_create_node+0x2a>
 800e5da:	780b      	ldrb	r3, [r1, #0]
 800e5dc:	468c      	mov	ip, r1
 800e5de:	b183      	cbz	r3, 800e602 <rmw_create_node+0x2a>
 800e5e0:	b410      	push	{r4}
 800e5e2:	4614      	mov	r4, r2
 800e5e4:	b14a      	cbz	r2, 800e5fa <rmw_create_node+0x22>
 800e5e6:	7813      	ldrb	r3, [r2, #0]
 800e5e8:	b13b      	cbz	r3, 800e5fa <rmw_create_node+0x22>
 800e5ea:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800e5ec:	4603      	mov	r3, r0
 800e5ee:	4621      	mov	r1, r4
 800e5f0:	4660      	mov	r0, ip
 800e5f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5f6:	f7ff bf75 	b.w	800e4e4 <create_node>
 800e5fa:	2000      	movs	r0, #0
 800e5fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e600:	4770      	bx	lr
 800e602:	2000      	movs	r0, #0
 800e604:	4770      	bx	lr
 800e606:	bf00      	nop

0800e608 <rmw_destroy_node>:
 800e608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e60a:	b328      	cbz	r0, 800e658 <rmw_destroy_node+0x50>
 800e60c:	4607      	mov	r7, r0
 800e60e:	6800      	ldr	r0, [r0, #0]
 800e610:	b120      	cbz	r0, 800e61c <rmw_destroy_node+0x14>
 800e612:	4b36      	ldr	r3, [pc, #216]	@ (800e6ec <rmw_destroy_node+0xe4>)
 800e614:	6819      	ldr	r1, [r3, #0]
 800e616:	f7f1 fe03 	bl	8000220 <strcmp>
 800e61a:	b9e8      	cbnz	r0, 800e658 <rmw_destroy_node+0x50>
 800e61c:	687d      	ldr	r5, [r7, #4]
 800e61e:	b1dd      	cbz	r5, 800e658 <rmw_destroy_node+0x50>
 800e620:	4b33      	ldr	r3, [pc, #204]	@ (800e6f0 <rmw_destroy_node+0xe8>)
 800e622:	681c      	ldr	r4, [r3, #0]
 800e624:	2c00      	cmp	r4, #0
 800e626:	d05f      	beq.n	800e6e8 <rmw_destroy_node+0xe0>
 800e628:	2600      	movs	r6, #0
 800e62a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e62e:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800e632:	429d      	cmp	r5, r3
 800e634:	d013      	beq.n	800e65e <rmw_destroy_node+0x56>
 800e636:	2c00      	cmp	r4, #0
 800e638:	d1f7      	bne.n	800e62a <rmw_destroy_node+0x22>
 800e63a:	4b2e      	ldr	r3, [pc, #184]	@ (800e6f4 <rmw_destroy_node+0xec>)
 800e63c:	681c      	ldr	r4, [r3, #0]
 800e63e:	b1c4      	cbz	r4, 800e672 <rmw_destroy_node+0x6a>
 800e640:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e644:	6a0b      	ldr	r3, [r1, #32]
 800e646:	429d      	cmp	r5, r3
 800e648:	d1f9      	bne.n	800e63e <rmw_destroy_node+0x36>
 800e64a:	317c      	adds	r1, #124	@ 0x7c
 800e64c:	4638      	mov	r0, r7
 800e64e:	f000 fb37 	bl	800ecc0 <rmw_destroy_subscription>
 800e652:	2801      	cmp	r0, #1
 800e654:	4606      	mov	r6, r0
 800e656:	d1f2      	bne.n	800e63e <rmw_destroy_node+0x36>
 800e658:	2601      	movs	r6, #1
 800e65a:	4630      	mov	r0, r6
 800e65c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e65e:	3184      	adds	r1, #132	@ 0x84
 800e660:	4638      	mov	r0, r7
 800e662:	f000 f9a5 	bl	800e9b0 <rmw_destroy_publisher>
 800e666:	2801      	cmp	r0, #1
 800e668:	4606      	mov	r6, r0
 800e66a:	d0f5      	beq.n	800e658 <rmw_destroy_node+0x50>
 800e66c:	2c00      	cmp	r4, #0
 800e66e:	d1dc      	bne.n	800e62a <rmw_destroy_node+0x22>
 800e670:	e7e3      	b.n	800e63a <rmw_destroy_node+0x32>
 800e672:	4b21      	ldr	r3, [pc, #132]	@ (800e6f8 <rmw_destroy_node+0xf0>)
 800e674:	681c      	ldr	r4, [r3, #0]
 800e676:	b16c      	cbz	r4, 800e694 <rmw_destroy_node+0x8c>
 800e678:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e67c:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800e67e:	429d      	cmp	r5, r3
 800e680:	d1f9      	bne.n	800e676 <rmw_destroy_node+0x6e>
 800e682:	317c      	adds	r1, #124	@ 0x7c
 800e684:	4638      	mov	r0, r7
 800e686:	f000 f9e5 	bl	800ea54 <rmw_destroy_service>
 800e68a:	2801      	cmp	r0, #1
 800e68c:	4606      	mov	r6, r0
 800e68e:	d0e3      	beq.n	800e658 <rmw_destroy_node+0x50>
 800e690:	2c00      	cmp	r4, #0
 800e692:	d1f1      	bne.n	800e678 <rmw_destroy_node+0x70>
 800e694:	4b19      	ldr	r3, [pc, #100]	@ (800e6fc <rmw_destroy_node+0xf4>)
 800e696:	681c      	ldr	r4, [r3, #0]
 800e698:	b16c      	cbz	r4, 800e6b6 <rmw_destroy_node+0xae>
 800e69a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e69e:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800e6a0:	429d      	cmp	r5, r3
 800e6a2:	d1f9      	bne.n	800e698 <rmw_destroy_node+0x90>
 800e6a4:	317c      	adds	r1, #124	@ 0x7c
 800e6a6:	4638      	mov	r0, r7
 800e6a8:	f009 f98e 	bl	80179c8 <rmw_destroy_client>
 800e6ac:	2801      	cmp	r0, #1
 800e6ae:	4606      	mov	r6, r0
 800e6b0:	d0d2      	beq.n	800e658 <rmw_destroy_node+0x50>
 800e6b2:	2c00      	cmp	r4, #0
 800e6b4:	d1f1      	bne.n	800e69a <rmw_destroy_node+0x92>
 800e6b6:	6928      	ldr	r0, [r5, #16]
 800e6b8:	696a      	ldr	r2, [r5, #20]
 800e6ba:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e6be:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e6c2:	6819      	ldr	r1, [r3, #0]
 800e6c4:	f001 ff86 	bl	80105d4 <uxr_buffer_delete_entity>
 800e6c8:	4602      	mov	r2, r0
 800e6ca:	6928      	ldr	r0, [r5, #16]
 800e6cc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e6d0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e6d4:	f000 fe42 	bl	800f35c <run_xrce_session>
 800e6d8:	2800      	cmp	r0, #0
 800e6da:	bf08      	it	eq
 800e6dc:	2602      	moveq	r6, #2
 800e6de:	4638      	mov	r0, r7
 800e6e0:	f000 fccc 	bl	800f07c <rmw_uxrce_fini_node_memory>
 800e6e4:	4630      	mov	r0, r6
 800e6e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6e8:	4626      	mov	r6, r4
 800e6ea:	e7a6      	b.n	800e63a <rmw_destroy_node+0x32>
 800e6ec:	0801bb60 	.word	0x0801bb60
 800e6f0:	2000adfc 	.word	0x2000adfc
 800e6f4:	2000ae3c 	.word	0x2000ae3c
 800e6f8:	2000ae0c 	.word	0x2000ae0c
 800e6fc:	2000651c 	.word	0x2000651c

0800e700 <rmw_node_get_graph_guard_condition>:
 800e700:	6843      	ldr	r3, [r0, #4]
 800e702:	6918      	ldr	r0, [r3, #16]
 800e704:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800e708:	4770      	bx	lr
 800e70a:	bf00      	nop

0800e70c <flush_session>:
 800e70c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800e70e:	f003 b863 	b.w	80117d8 <uxr_run_session_until_confirm_delivery>
 800e712:	bf00      	nop

0800e714 <rmw_publish>:
 800e714:	2800      	cmp	r0, #0
 800e716:	d053      	beq.n	800e7c0 <rmw_publish+0xac>
 800e718:	b570      	push	{r4, r5, r6, lr}
 800e71a:	460d      	mov	r5, r1
 800e71c:	b08e      	sub	sp, #56	@ 0x38
 800e71e:	2900      	cmp	r1, #0
 800e720:	d04b      	beq.n	800e7ba <rmw_publish+0xa6>
 800e722:	4604      	mov	r4, r0
 800e724:	6800      	ldr	r0, [r0, #0]
 800e726:	f000 fe99 	bl	800f45c <is_uxrce_rmw_identifier_valid>
 800e72a:	2800      	cmp	r0, #0
 800e72c:	d045      	beq.n	800e7ba <rmw_publish+0xa6>
 800e72e:	6866      	ldr	r6, [r4, #4]
 800e730:	2e00      	cmp	r6, #0
 800e732:	d042      	beq.n	800e7ba <rmw_publish+0xa6>
 800e734:	69b4      	ldr	r4, [r6, #24]
 800e736:	4628      	mov	r0, r5
 800e738:	6923      	ldr	r3, [r4, #16]
 800e73a:	4798      	blx	r3
 800e73c:	69f3      	ldr	r3, [r6, #28]
 800e73e:	9005      	str	r0, [sp, #20]
 800e740:	b113      	cbz	r3, 800e748 <rmw_publish+0x34>
 800e742:	a805      	add	r0, sp, #20
 800e744:	4798      	blx	r3
 800e746:	9805      	ldr	r0, [sp, #20]
 800e748:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e74c:	691b      	ldr	r3, [r3, #16]
 800e74e:	9000      	str	r0, [sp, #0]
 800e750:	6972      	ldr	r2, [r6, #20]
 800e752:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e754:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e758:	ab06      	add	r3, sp, #24
 800e75a:	f004 fabb 	bl	8012cd4 <uxr_prepare_output_stream>
 800e75e:	b1d8      	cbz	r0, 800e798 <rmw_publish+0x84>
 800e760:	68a3      	ldr	r3, [r4, #8]
 800e762:	a906      	add	r1, sp, #24
 800e764:	4628      	mov	r0, r5
 800e766:	4798      	blx	r3
 800e768:	6a33      	ldr	r3, [r6, #32]
 800e76a:	4604      	mov	r4, r0
 800e76c:	b10b      	cbz	r3, 800e772 <rmw_publish+0x5e>
 800e76e:	a806      	add	r0, sp, #24
 800e770:	4798      	blx	r3
 800e772:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800e776:	2b01      	cmp	r3, #1
 800e778:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e77c:	d022      	beq.n	800e7c4 <rmw_publish+0xb0>
 800e77e:	6918      	ldr	r0, [r3, #16]
 800e780:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800e782:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e786:	f003 f827 	bl	80117d8 <uxr_run_session_until_confirm_delivery>
 800e78a:	4020      	ands	r0, r4
 800e78c:	b2c4      	uxtb	r4, r0
 800e78e:	f084 0001 	eor.w	r0, r4, #1
 800e792:	b2c0      	uxtb	r0, r0
 800e794:	b00e      	add	sp, #56	@ 0x38
 800e796:	bd70      	pop	{r4, r5, r6, pc}
 800e798:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e79c:	6918      	ldr	r0, [r3, #16]
 800e79e:	9b05      	ldr	r3, [sp, #20]
 800e7a0:	9300      	str	r3, [sp, #0]
 800e7a2:	4b0b      	ldr	r3, [pc, #44]	@ (800e7d0 <rmw_publish+0xbc>)
 800e7a4:	9301      	str	r3, [sp, #4]
 800e7a6:	9602      	str	r6, [sp, #8]
 800e7a8:	6972      	ldr	r2, [r6, #20]
 800e7aa:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e7ac:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e7b0:	ab06      	add	r3, sp, #24
 800e7b2:	f004 fabf 	bl	8012d34 <uxr_prepare_output_stream_fragmented>
 800e7b6:	2800      	cmp	r0, #0
 800e7b8:	d1d2      	bne.n	800e760 <rmw_publish+0x4c>
 800e7ba:	2001      	movs	r0, #1
 800e7bc:	b00e      	add	sp, #56	@ 0x38
 800e7be:	bd70      	pop	{r4, r5, r6, pc}
 800e7c0:	2001      	movs	r0, #1
 800e7c2:	4770      	bx	lr
 800e7c4:	6918      	ldr	r0, [r3, #16]
 800e7c6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e7ca:	f002 fc45 	bl	8011058 <uxr_flash_output_streams>
 800e7ce:	e7de      	b.n	800e78e <rmw_publish+0x7a>
 800e7d0:	0800e70d 	.word	0x0800e70d

0800e7d4 <rmw_create_publisher>:
 800e7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7d8:	b087      	sub	sp, #28
 800e7da:	2800      	cmp	r0, #0
 800e7dc:	f000 80cc 	beq.w	800e978 <rmw_create_publisher+0x1a4>
 800e7e0:	460e      	mov	r6, r1
 800e7e2:	2900      	cmp	r1, #0
 800e7e4:	f000 80c8 	beq.w	800e978 <rmw_create_publisher+0x1a4>
 800e7e8:	4604      	mov	r4, r0
 800e7ea:	6800      	ldr	r0, [r0, #0]
 800e7ec:	4615      	mov	r5, r2
 800e7ee:	4698      	mov	r8, r3
 800e7f0:	f000 fe34 	bl	800f45c <is_uxrce_rmw_identifier_valid>
 800e7f4:	2800      	cmp	r0, #0
 800e7f6:	f000 80bf 	beq.w	800e978 <rmw_create_publisher+0x1a4>
 800e7fa:	2d00      	cmp	r5, #0
 800e7fc:	f000 80bc 	beq.w	800e978 <rmw_create_publisher+0x1a4>
 800e800:	782b      	ldrb	r3, [r5, #0]
 800e802:	2b00      	cmp	r3, #0
 800e804:	f000 80b8 	beq.w	800e978 <rmw_create_publisher+0x1a4>
 800e808:	f1b8 0f00 	cmp.w	r8, #0
 800e80c:	f000 80b4 	beq.w	800e978 <rmw_create_publisher+0x1a4>
 800e810:	485c      	ldr	r0, [pc, #368]	@ (800e984 <rmw_create_publisher+0x1b0>)
 800e812:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e816:	f009 f8b3 	bl	8017980 <get_memory>
 800e81a:	2800      	cmp	r0, #0
 800e81c:	f000 80ac 	beq.w	800e978 <rmw_create_publisher+0x1a4>
 800e820:	6884      	ldr	r4, [r0, #8]
 800e822:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800e826:	f009 f913 	bl	8017a50 <rmw_get_implementation_identifier>
 800e82a:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800e82e:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800e832:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800e836:	4628      	mov	r0, r5
 800e838:	f7f1 fcfc 	bl	8000234 <strlen>
 800e83c:	3001      	adds	r0, #1
 800e83e:	283c      	cmp	r0, #60	@ 0x3c
 800e840:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800e844:	f200 8091 	bhi.w	800e96a <rmw_create_publisher+0x196>
 800e848:	4a4f      	ldr	r2, [pc, #316]	@ (800e988 <rmw_create_publisher+0x1b4>)
 800e84a:	462b      	mov	r3, r5
 800e84c:	213c      	movs	r1, #60	@ 0x3c
 800e84e:	4650      	mov	r0, sl
 800e850:	f00b fae0 	bl	8019e14 <sniprintf>
 800e854:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e858:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800e85a:	4641      	mov	r1, r8
 800e85c:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800e860:	2250      	movs	r2, #80	@ 0x50
 800e862:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800e866:	f00b fc78 	bl	801a15a <memcpy>
 800e86a:	f898 3008 	ldrb.w	r3, [r8, #8]
 800e86e:	4947      	ldr	r1, [pc, #284]	@ (800e98c <rmw_create_publisher+0x1b8>)
 800e870:	2b02      	cmp	r3, #2
 800e872:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e876:	bf0c      	ite	eq
 800e878:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800e87c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800e880:	67a3      	str	r3, [r4, #120]	@ 0x78
 800e882:	2300      	movs	r3, #0
 800e884:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800e888:	4630      	mov	r0, r6
 800e88a:	f000 fdf5 	bl	800f478 <get_message_typesupport_handle>
 800e88e:	2800      	cmp	r0, #0
 800e890:	d06b      	beq.n	800e96a <rmw_create_publisher+0x196>
 800e892:	6842      	ldr	r2, [r0, #4]
 800e894:	61a2      	str	r2, [r4, #24]
 800e896:	2a00      	cmp	r2, #0
 800e898:	d067      	beq.n	800e96a <rmw_create_publisher+0x196>
 800e89a:	4629      	mov	r1, r5
 800e89c:	4643      	mov	r3, r8
 800e89e:	4648      	mov	r0, r9
 800e8a0:	f009 f8dc 	bl	8017a5c <create_topic>
 800e8a4:	6260      	str	r0, [r4, #36]	@ 0x24
 800e8a6:	2800      	cmp	r0, #0
 800e8a8:	d063      	beq.n	800e972 <rmw_create_publisher+0x19e>
 800e8aa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e8ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e8b2:	2103      	movs	r1, #3
 800e8b4:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800e8b8:	1c42      	adds	r2, r0, #1
 800e8ba:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800e8be:	f002 f94d 	bl	8010b5c <uxr_object_id>
 800e8c2:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800e8c6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e8ca:	6120      	str	r0, [r4, #16]
 800e8cc:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800e8d0:	6910      	ldr	r0, [r2, #16]
 800e8d2:	2506      	movs	r5, #6
 800e8d4:	9500      	str	r5, [sp, #0]
 800e8d6:	6819      	ldr	r1, [r3, #0]
 800e8d8:	6922      	ldr	r2, [r4, #16]
 800e8da:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800e8de:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e8e2:	f001 ff2b 	bl	801073c <uxr_buffer_create_publisher_bin>
 800e8e6:	4602      	mov	r2, r0
 800e8e8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e8ec:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e8f0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e8f4:	f000 fd32 	bl	800f35c <run_xrce_session>
 800e8f8:	b3b8      	cbz	r0, 800e96a <rmw_create_publisher+0x196>
 800e8fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e8fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e902:	2105      	movs	r1, #5
 800e904:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800e908:	1c42      	adds	r2, r0, #1
 800e90a:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800e90e:	f002 f925 	bl	8010b5c <uxr_object_id>
 800e912:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e916:	6160      	str	r0, [r4, #20]
 800e918:	691e      	ldr	r6, [r3, #16]
 800e91a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e91e:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800e922:	f10d 0a10 	add.w	sl, sp, #16
 800e926:	4641      	mov	r1, r8
 800e928:	4650      	mov	r0, sl
 800e92a:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800e92e:	f000 fd31 	bl	800f394 <convert_qos_profile>
 800e932:	9503      	str	r5, [sp, #12]
 800e934:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800e938:	9001      	str	r0, [sp, #4]
 800e93a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800e93e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800e942:	9300      	str	r3, [sp, #0]
 800e944:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800e948:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800e94c:	f8d8 1000 	ldr.w	r1, [r8]
 800e950:	4630      	mov	r0, r6
 800e952:	f001 ff53 	bl	80107fc <uxr_buffer_create_datawriter_bin>
 800e956:	4602      	mov	r2, r0
 800e958:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800e95c:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e960:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e964:	f000 fcfa 	bl	800f35c <run_xrce_session>
 800e968:	b938      	cbnz	r0, 800e97a <rmw_create_publisher+0x1a6>
 800e96a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e96c:	b108      	cbz	r0, 800e972 <rmw_create_publisher+0x19e>
 800e96e:	f000 fbf5 	bl	800f15c <rmw_uxrce_fini_topic_memory>
 800e972:	4638      	mov	r0, r7
 800e974:	f000 fb9a 	bl	800f0ac <rmw_uxrce_fini_publisher_memory>
 800e978:	2700      	movs	r7, #0
 800e97a:	4638      	mov	r0, r7
 800e97c:	b007      	add	sp, #28
 800e97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e982:	bf00      	nop
 800e984:	2000adfc 	.word	0x2000adfc
 800e988:	0801b248 	.word	0x0801b248
 800e98c:	0801b214 	.word	0x0801b214

0800e990 <rmw_publisher_get_actual_qos>:
 800e990:	b150      	cbz	r0, 800e9a8 <rmw_publisher_get_actual_qos+0x18>
 800e992:	b508      	push	{r3, lr}
 800e994:	460b      	mov	r3, r1
 800e996:	b149      	cbz	r1, 800e9ac <rmw_publisher_get_actual_qos+0x1c>
 800e998:	6841      	ldr	r1, [r0, #4]
 800e99a:	2250      	movs	r2, #80	@ 0x50
 800e99c:	3128      	adds	r1, #40	@ 0x28
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f00b fbdb 	bl	801a15a <memcpy>
 800e9a4:	2000      	movs	r0, #0
 800e9a6:	bd08      	pop	{r3, pc}
 800e9a8:	200b      	movs	r0, #11
 800e9aa:	4770      	bx	lr
 800e9ac:	200b      	movs	r0, #11
 800e9ae:	bd08      	pop	{r3, pc}

0800e9b0 <rmw_destroy_publisher>:
 800e9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9b2:	b128      	cbz	r0, 800e9c0 <rmw_destroy_publisher+0x10>
 800e9b4:	4604      	mov	r4, r0
 800e9b6:	6800      	ldr	r0, [r0, #0]
 800e9b8:	460d      	mov	r5, r1
 800e9ba:	f000 fd4f 	bl	800f45c <is_uxrce_rmw_identifier_valid>
 800e9be:	b910      	cbnz	r0, 800e9c6 <rmw_destroy_publisher+0x16>
 800e9c0:	2401      	movs	r4, #1
 800e9c2:	4620      	mov	r0, r4
 800e9c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9c6:	6863      	ldr	r3, [r4, #4]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d0f9      	beq.n	800e9c0 <rmw_destroy_publisher+0x10>
 800e9cc:	2d00      	cmp	r5, #0
 800e9ce:	d0f7      	beq.n	800e9c0 <rmw_destroy_publisher+0x10>
 800e9d0:	6828      	ldr	r0, [r5, #0]
 800e9d2:	f000 fd43 	bl	800f45c <is_uxrce_rmw_identifier_valid>
 800e9d6:	2800      	cmp	r0, #0
 800e9d8:	d0f2      	beq.n	800e9c0 <rmw_destroy_publisher+0x10>
 800e9da:	686c      	ldr	r4, [r5, #4]
 800e9dc:	2c00      	cmp	r4, #0
 800e9de:	d0ef      	beq.n	800e9c0 <rmw_destroy_publisher+0x10>
 800e9e0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800e9e2:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800e9e6:	f009 f889 	bl	8017afc <destroy_topic>
 800e9ea:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e9ee:	6962      	ldr	r2, [r4, #20]
 800e9f0:	6918      	ldr	r0, [r3, #16]
 800e9f2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e9f6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e9fa:	6819      	ldr	r1, [r3, #0]
 800e9fc:	f001 fdea 	bl	80105d4 <uxr_buffer_delete_entity>
 800ea00:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ea04:	6922      	ldr	r2, [r4, #16]
 800ea06:	691b      	ldr	r3, [r3, #16]
 800ea08:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800ea0c:	4604      	mov	r4, r0
 800ea0e:	6809      	ldr	r1, [r1, #0]
 800ea10:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800ea14:	f001 fdde 	bl	80105d4 <uxr_buffer_delete_entity>
 800ea18:	693e      	ldr	r6, [r7, #16]
 800ea1a:	4622      	mov	r2, r4
 800ea1c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800ea20:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800ea24:	4604      	mov	r4, r0
 800ea26:	4630      	mov	r0, r6
 800ea28:	f000 fc98 	bl	800f35c <run_xrce_session>
 800ea2c:	693e      	ldr	r6, [r7, #16]
 800ea2e:	4622      	mov	r2, r4
 800ea30:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800ea34:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800ea38:	4604      	mov	r4, r0
 800ea3a:	4630      	mov	r0, r6
 800ea3c:	f000 fc8e 	bl	800f35c <run_xrce_session>
 800ea40:	b12c      	cbz	r4, 800ea4e <rmw_destroy_publisher+0x9e>
 800ea42:	b120      	cbz	r0, 800ea4e <rmw_destroy_publisher+0x9e>
 800ea44:	2400      	movs	r4, #0
 800ea46:	4628      	mov	r0, r5
 800ea48:	f000 fb30 	bl	800f0ac <rmw_uxrce_fini_publisher_memory>
 800ea4c:	e7b9      	b.n	800e9c2 <rmw_destroy_publisher+0x12>
 800ea4e:	2402      	movs	r4, #2
 800ea50:	e7f9      	b.n	800ea46 <rmw_destroy_publisher+0x96>
 800ea52:	bf00      	nop

0800ea54 <rmw_destroy_service>:
 800ea54:	b570      	push	{r4, r5, r6, lr}
 800ea56:	b128      	cbz	r0, 800ea64 <rmw_destroy_service+0x10>
 800ea58:	4604      	mov	r4, r0
 800ea5a:	6800      	ldr	r0, [r0, #0]
 800ea5c:	460d      	mov	r5, r1
 800ea5e:	f000 fcfd 	bl	800f45c <is_uxrce_rmw_identifier_valid>
 800ea62:	b910      	cbnz	r0, 800ea6a <rmw_destroy_service+0x16>
 800ea64:	2401      	movs	r4, #1
 800ea66:	4620      	mov	r0, r4
 800ea68:	bd70      	pop	{r4, r5, r6, pc}
 800ea6a:	6863      	ldr	r3, [r4, #4]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d0f9      	beq.n	800ea64 <rmw_destroy_service+0x10>
 800ea70:	2d00      	cmp	r5, #0
 800ea72:	d0f7      	beq.n	800ea64 <rmw_destroy_service+0x10>
 800ea74:	6828      	ldr	r0, [r5, #0]
 800ea76:	f000 fcf1 	bl	800f45c <is_uxrce_rmw_identifier_valid>
 800ea7a:	2800      	cmp	r0, #0
 800ea7c:	d0f2      	beq.n	800ea64 <rmw_destroy_service+0x10>
 800ea7e:	686e      	ldr	r6, [r5, #4]
 800ea80:	2e00      	cmp	r6, #0
 800ea82:	d0ef      	beq.n	800ea64 <rmw_destroy_service+0x10>
 800ea84:	6864      	ldr	r4, [r4, #4]
 800ea86:	6932      	ldr	r2, [r6, #16]
 800ea88:	6920      	ldr	r0, [r4, #16]
 800ea8a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ea8e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ea92:	6819      	ldr	r1, [r3, #0]
 800ea94:	f002 f8cc 	bl	8010c30 <uxr_buffer_cancel_data>
 800ea98:	4602      	mov	r2, r0
 800ea9a:	6920      	ldr	r0, [r4, #16]
 800ea9c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800eaa0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800eaa4:	f000 fc5a 	bl	800f35c <run_xrce_session>
 800eaa8:	6920      	ldr	r0, [r4, #16]
 800eaaa:	6932      	ldr	r2, [r6, #16]
 800eaac:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800eab0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800eab4:	6819      	ldr	r1, [r3, #0]
 800eab6:	f001 fd8d 	bl	80105d4 <uxr_buffer_delete_entity>
 800eaba:	4602      	mov	r2, r0
 800eabc:	6920      	ldr	r0, [r4, #16]
 800eabe:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800eac2:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800eac6:	f000 fc49 	bl	800f35c <run_xrce_session>
 800eaca:	2800      	cmp	r0, #0
 800eacc:	4628      	mov	r0, r5
 800eace:	bf14      	ite	ne
 800ead0:	2400      	movne	r4, #0
 800ead2:	2402      	moveq	r4, #2
 800ead4:	f000 fb16 	bl	800f104 <rmw_uxrce_fini_service_memory>
 800ead8:	e7c5      	b.n	800ea66 <rmw_destroy_service+0x12>
 800eada:	bf00      	nop

0800eadc <rmw_create_subscription>:
 800eadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eae0:	b08d      	sub	sp, #52	@ 0x34
 800eae2:	2800      	cmp	r0, #0
 800eae4:	f000 80d1 	beq.w	800ec8a <rmw_create_subscription+0x1ae>
 800eae8:	460e      	mov	r6, r1
 800eaea:	2900      	cmp	r1, #0
 800eaec:	f000 80cd 	beq.w	800ec8a <rmw_create_subscription+0x1ae>
 800eaf0:	4604      	mov	r4, r0
 800eaf2:	6800      	ldr	r0, [r0, #0]
 800eaf4:	4615      	mov	r5, r2
 800eaf6:	4698      	mov	r8, r3
 800eaf8:	f000 fcb0 	bl	800f45c <is_uxrce_rmw_identifier_valid>
 800eafc:	2800      	cmp	r0, #0
 800eafe:	f000 80c4 	beq.w	800ec8a <rmw_create_subscription+0x1ae>
 800eb02:	2d00      	cmp	r5, #0
 800eb04:	f000 80c1 	beq.w	800ec8a <rmw_create_subscription+0x1ae>
 800eb08:	782b      	ldrb	r3, [r5, #0]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	f000 80bd 	beq.w	800ec8a <rmw_create_subscription+0x1ae>
 800eb10:	f1b8 0f00 	cmp.w	r8, #0
 800eb14:	f000 80b9 	beq.w	800ec8a <rmw_create_subscription+0x1ae>
 800eb18:	485e      	ldr	r0, [pc, #376]	@ (800ec94 <rmw_create_subscription+0x1b8>)
 800eb1a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800eb1e:	f008 ff2f 	bl	8017980 <get_memory>
 800eb22:	4604      	mov	r4, r0
 800eb24:	2800      	cmp	r0, #0
 800eb26:	f000 80b1 	beq.w	800ec8c <rmw_create_subscription+0x1b0>
 800eb2a:	6887      	ldr	r7, [r0, #8]
 800eb2c:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800eb30:	f008 ff8e 	bl	8017a50 <rmw_get_implementation_identifier>
 800eb34:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 800eb38:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800eb3a:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800eb3e:	4628      	mov	r0, r5
 800eb40:	f7f1 fb78 	bl	8000234 <strlen>
 800eb44:	3001      	adds	r0, #1
 800eb46:	283c      	cmp	r0, #60	@ 0x3c
 800eb48:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800eb4c:	f200 8096 	bhi.w	800ec7c <rmw_create_subscription+0x1a0>
 800eb50:	4a51      	ldr	r2, [pc, #324]	@ (800ec98 <rmw_create_subscription+0x1bc>)
 800eb52:	462b      	mov	r3, r5
 800eb54:	213c      	movs	r1, #60	@ 0x3c
 800eb56:	4650      	mov	r0, sl
 800eb58:	f00b f95c 	bl	8019e14 <sniprintf>
 800eb5c:	4641      	mov	r1, r8
 800eb5e:	f8c7 9020 	str.w	r9, [r7, #32]
 800eb62:	2250      	movs	r2, #80	@ 0x50
 800eb64:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800eb68:	f00b faf7 	bl	801a15a <memcpy>
 800eb6c:	494b      	ldr	r1, [pc, #300]	@ (800ec9c <rmw_create_subscription+0x1c0>)
 800eb6e:	4630      	mov	r0, r6
 800eb70:	f000 fc82 	bl	800f478 <get_message_typesupport_handle>
 800eb74:	2800      	cmp	r0, #0
 800eb76:	f000 8081 	beq.w	800ec7c <rmw_create_subscription+0x1a0>
 800eb7a:	6842      	ldr	r2, [r0, #4]
 800eb7c:	61ba      	str	r2, [r7, #24]
 800eb7e:	2a00      	cmp	r2, #0
 800eb80:	d07c      	beq.n	800ec7c <rmw_create_subscription+0x1a0>
 800eb82:	4629      	mov	r1, r5
 800eb84:	4643      	mov	r3, r8
 800eb86:	4648      	mov	r0, r9
 800eb88:	f008 ff68 	bl	8017a5c <create_topic>
 800eb8c:	61f8      	str	r0, [r7, #28]
 800eb8e:	2800      	cmp	r0, #0
 800eb90:	d078      	beq.n	800ec84 <rmw_create_subscription+0x1a8>
 800eb92:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eb96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eb9a:	2104      	movs	r1, #4
 800eb9c:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 800eba0:	1c42      	adds	r2, r0, #1
 800eba2:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 800eba6:	f001 ffd9 	bl	8010b5c <uxr_object_id>
 800ebaa:	6138      	str	r0, [r7, #16]
 800ebac:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ebb0:	2506      	movs	r5, #6
 800ebb2:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 800ebb6:	9500      	str	r5, [sp, #0]
 800ebb8:	6819      	ldr	r1, [r3, #0]
 800ebba:	693a      	ldr	r2, [r7, #16]
 800ebbc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ebc0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ebc4:	f001 fdea 	bl	801079c <uxr_buffer_create_subscriber_bin>
 800ebc8:	4602      	mov	r2, r0
 800ebca:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ebce:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ebd2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ebd6:	f000 fbc1 	bl	800f35c <run_xrce_session>
 800ebda:	2800      	cmp	r0, #0
 800ebdc:	d04e      	beq.n	800ec7c <rmw_create_subscription+0x1a0>
 800ebde:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ebe2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ebe6:	4629      	mov	r1, r5
 800ebe8:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 800ebec:	1c42      	adds	r2, r0, #1
 800ebee:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 800ebf2:	f001 ffb3 	bl	8010b5c <uxr_object_id>
 800ebf6:	ae08      	add	r6, sp, #32
 800ebf8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ebfc:	69fb      	ldr	r3, [r7, #28]
 800ebfe:	6178      	str	r0, [r7, #20]
 800ec00:	4641      	mov	r1, r8
 800ec02:	4630      	mov	r0, r6
 800ec04:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800ec08:	9305      	str	r3, [sp, #20]
 800ec0a:	f000 fbc3 	bl	800f394 <convert_qos_profile>
 800ec0e:	9503      	str	r5, [sp, #12]
 800ec10:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ec14:	9b05      	ldr	r3, [sp, #20]
 800ec16:	9001      	str	r0, [sp, #4]
 800ec18:	f8ad 1008 	strh.w	r1, [sp, #8]
 800ec1c:	691b      	ldr	r3, [r3, #16]
 800ec1e:	9300      	str	r3, [sp, #0]
 800ec20:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800ec24:	f8db 1000 	ldr.w	r1, [fp]
 800ec28:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800ec2c:	f001 fe5c 	bl	80108e8 <uxr_buffer_create_datareader_bin>
 800ec30:	4602      	mov	r2, r0
 800ec32:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ec36:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ec3a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ec3e:	f000 fb8d 	bl	800f35c <run_xrce_session>
 800ec42:	b1d8      	cbz	r0, 800ec7c <rmw_create_subscription+0x1a0>
 800ec44:	f898 3008 	ldrb.w	r3, [r8, #8]
 800ec48:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ec4c:	2b02      	cmp	r3, #2
 800ec4e:	bf0c      	ite	eq
 800ec50:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800ec54:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800ec58:	9307      	str	r3, [sp, #28]
 800ec5a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800ec5e:	2200      	movs	r2, #0
 800ec60:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800ec64:	ab0a      	add	r3, sp, #40	@ 0x28
 800ec66:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ec6a:	9300      	str	r3, [sp, #0]
 800ec6c:	697a      	ldr	r2, [r7, #20]
 800ec6e:	9b07      	ldr	r3, [sp, #28]
 800ec70:	6809      	ldr	r1, [r1, #0]
 800ec72:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ec76:	f001 ffa1 	bl	8010bbc <uxr_buffer_request_data>
 800ec7a:	e007      	b.n	800ec8c <rmw_create_subscription+0x1b0>
 800ec7c:	69f8      	ldr	r0, [r7, #28]
 800ec7e:	b108      	cbz	r0, 800ec84 <rmw_create_subscription+0x1a8>
 800ec80:	f000 fa6c 	bl	800f15c <rmw_uxrce_fini_topic_memory>
 800ec84:	4620      	mov	r0, r4
 800ec86:	f000 fa27 	bl	800f0d8 <rmw_uxrce_fini_subscription_memory>
 800ec8a:	2400      	movs	r4, #0
 800ec8c:	4620      	mov	r0, r4
 800ec8e:	b00d      	add	sp, #52	@ 0x34
 800ec90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec94:	2000ae3c 	.word	0x2000ae3c
 800ec98:	0801b248 	.word	0x0801b248
 800ec9c:	0801b214 	.word	0x0801b214

0800eca0 <rmw_subscription_get_actual_qos>:
 800eca0:	b150      	cbz	r0, 800ecb8 <rmw_subscription_get_actual_qos+0x18>
 800eca2:	b508      	push	{r3, lr}
 800eca4:	460b      	mov	r3, r1
 800eca6:	b149      	cbz	r1, 800ecbc <rmw_subscription_get_actual_qos+0x1c>
 800eca8:	6841      	ldr	r1, [r0, #4]
 800ecaa:	2250      	movs	r2, #80	@ 0x50
 800ecac:	3128      	adds	r1, #40	@ 0x28
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f00b fa53 	bl	801a15a <memcpy>
 800ecb4:	2000      	movs	r0, #0
 800ecb6:	bd08      	pop	{r3, pc}
 800ecb8:	200b      	movs	r0, #11
 800ecba:	4770      	bx	lr
 800ecbc:	200b      	movs	r0, #11
 800ecbe:	bd08      	pop	{r3, pc}

0800ecc0 <rmw_destroy_subscription>:
 800ecc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecc2:	b128      	cbz	r0, 800ecd0 <rmw_destroy_subscription+0x10>
 800ecc4:	4604      	mov	r4, r0
 800ecc6:	6800      	ldr	r0, [r0, #0]
 800ecc8:	460d      	mov	r5, r1
 800ecca:	f000 fbc7 	bl	800f45c <is_uxrce_rmw_identifier_valid>
 800ecce:	b910      	cbnz	r0, 800ecd6 <rmw_destroy_subscription+0x16>
 800ecd0:	2401      	movs	r4, #1
 800ecd2:	4620      	mov	r0, r4
 800ecd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecd6:	6863      	ldr	r3, [r4, #4]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d0f9      	beq.n	800ecd0 <rmw_destroy_subscription+0x10>
 800ecdc:	2d00      	cmp	r5, #0
 800ecde:	d0f7      	beq.n	800ecd0 <rmw_destroy_subscription+0x10>
 800ece0:	6828      	ldr	r0, [r5, #0]
 800ece2:	f000 fbbb 	bl	800f45c <is_uxrce_rmw_identifier_valid>
 800ece6:	2800      	cmp	r0, #0
 800ece8:	d0f2      	beq.n	800ecd0 <rmw_destroy_subscription+0x10>
 800ecea:	686c      	ldr	r4, [r5, #4]
 800ecec:	2c00      	cmp	r4, #0
 800ecee:	d0ef      	beq.n	800ecd0 <rmw_destroy_subscription+0x10>
 800ecf0:	6a26      	ldr	r6, [r4, #32]
 800ecf2:	6962      	ldr	r2, [r4, #20]
 800ecf4:	6930      	ldr	r0, [r6, #16]
 800ecf6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ecfa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ecfe:	6819      	ldr	r1, [r3, #0]
 800ed00:	f001 ff96 	bl	8010c30 <uxr_buffer_cancel_data>
 800ed04:	4602      	mov	r2, r0
 800ed06:	6930      	ldr	r0, [r6, #16]
 800ed08:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ed0c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ed10:	f000 fb24 	bl	800f35c <run_xrce_session>
 800ed14:	69e0      	ldr	r0, [r4, #28]
 800ed16:	f008 fef1 	bl	8017afc <destroy_topic>
 800ed1a:	6a23      	ldr	r3, [r4, #32]
 800ed1c:	6962      	ldr	r2, [r4, #20]
 800ed1e:	6918      	ldr	r0, [r3, #16]
 800ed20:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ed24:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ed28:	6819      	ldr	r1, [r3, #0]
 800ed2a:	f001 fc53 	bl	80105d4 <uxr_buffer_delete_entity>
 800ed2e:	6a23      	ldr	r3, [r4, #32]
 800ed30:	6922      	ldr	r2, [r4, #16]
 800ed32:	691b      	ldr	r3, [r3, #16]
 800ed34:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800ed38:	4604      	mov	r4, r0
 800ed3a:	6809      	ldr	r1, [r1, #0]
 800ed3c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800ed40:	f001 fc48 	bl	80105d4 <uxr_buffer_delete_entity>
 800ed44:	6937      	ldr	r7, [r6, #16]
 800ed46:	4622      	mov	r2, r4
 800ed48:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800ed4c:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800ed50:	4604      	mov	r4, r0
 800ed52:	4638      	mov	r0, r7
 800ed54:	f000 fb02 	bl	800f35c <run_xrce_session>
 800ed58:	6936      	ldr	r6, [r6, #16]
 800ed5a:	4622      	mov	r2, r4
 800ed5c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800ed60:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800ed64:	4604      	mov	r4, r0
 800ed66:	4630      	mov	r0, r6
 800ed68:	f000 faf8 	bl	800f35c <run_xrce_session>
 800ed6c:	b12c      	cbz	r4, 800ed7a <rmw_destroy_subscription+0xba>
 800ed6e:	b120      	cbz	r0, 800ed7a <rmw_destroy_subscription+0xba>
 800ed70:	2400      	movs	r4, #0
 800ed72:	4628      	mov	r0, r5
 800ed74:	f000 f9b0 	bl	800f0d8 <rmw_uxrce_fini_subscription_memory>
 800ed78:	e7ab      	b.n	800ecd2 <rmw_destroy_subscription+0x12>
 800ed7a:	2402      	movs	r4, #2
 800ed7c:	e7f9      	b.n	800ed72 <rmw_destroy_subscription+0xb2>
 800ed7e:	bf00      	nop

0800ed80 <rmw_uxrce_transport_init>:
 800ed80:	b508      	push	{r3, lr}
 800ed82:	b108      	cbz	r0, 800ed88 <rmw_uxrce_transport_init+0x8>
 800ed84:	f100 0210 	add.w	r2, r0, #16
 800ed88:	b139      	cbz	r1, 800ed9a <rmw_uxrce_transport_init+0x1a>
 800ed8a:	6949      	ldr	r1, [r1, #20]
 800ed8c:	4610      	mov	r0, r2
 800ed8e:	f001 fead 	bl	8010aec <uxr_init_custom_transport>
 800ed92:	f080 0001 	eor.w	r0, r0, #1
 800ed96:	b2c0      	uxtb	r0, r0
 800ed98:	bd08      	pop	{r3, pc}
 800ed9a:	4b04      	ldr	r3, [pc, #16]	@ (800edac <rmw_uxrce_transport_init+0x2c>)
 800ed9c:	4610      	mov	r0, r2
 800ed9e:	6859      	ldr	r1, [r3, #4]
 800eda0:	f001 fea4 	bl	8010aec <uxr_init_custom_transport>
 800eda4:	f080 0001 	eor.w	r0, r0, #1
 800eda8:	b2c0      	uxtb	r0, r0
 800edaa:	bd08      	pop	{r3, pc}
 800edac:	200064c4 	.word	0x200064c4

0800edb0 <rmw_uxrce_init_service_memory>:
 800edb0:	b1e2      	cbz	r2, 800edec <rmw_uxrce_init_service_memory+0x3c>
 800edb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edb6:	7b05      	ldrb	r5, [r0, #12]
 800edb8:	4606      	mov	r6, r0
 800edba:	b9ad      	cbnz	r5, 800ede8 <rmw_uxrce_init_service_memory+0x38>
 800edbc:	23c8      	movs	r3, #200	@ 0xc8
 800edbe:	e9c0 5500 	strd	r5, r5, [r0]
 800edc2:	6083      	str	r3, [r0, #8]
 800edc4:	f240 1301 	movw	r3, #257	@ 0x101
 800edc8:	4617      	mov	r7, r2
 800edca:	8183      	strh	r3, [r0, #12]
 800edcc:	460c      	mov	r4, r1
 800edce:	46a8      	mov	r8, r5
 800edd0:	4621      	mov	r1, r4
 800edd2:	4630      	mov	r0, r6
 800edd4:	3501      	adds	r5, #1
 800edd6:	f008 fde3 	bl	80179a0 <put_memory>
 800edda:	42af      	cmp	r7, r5
 800eddc:	60a4      	str	r4, [r4, #8]
 800edde:	f884 800c 	strb.w	r8, [r4, #12]
 800ede2:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ede6:	d1f3      	bne.n	800edd0 <rmw_uxrce_init_service_memory+0x20>
 800ede8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edec:	4770      	bx	lr
 800edee:	bf00      	nop

0800edf0 <rmw_uxrce_init_client_memory>:
 800edf0:	b1e2      	cbz	r2, 800ee2c <rmw_uxrce_init_client_memory+0x3c>
 800edf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edf6:	7b05      	ldrb	r5, [r0, #12]
 800edf8:	4606      	mov	r6, r0
 800edfa:	b9ad      	cbnz	r5, 800ee28 <rmw_uxrce_init_client_memory+0x38>
 800edfc:	23c8      	movs	r3, #200	@ 0xc8
 800edfe:	e9c0 5500 	strd	r5, r5, [r0]
 800ee02:	6083      	str	r3, [r0, #8]
 800ee04:	f240 1301 	movw	r3, #257	@ 0x101
 800ee08:	4617      	mov	r7, r2
 800ee0a:	8183      	strh	r3, [r0, #12]
 800ee0c:	460c      	mov	r4, r1
 800ee0e:	46a8      	mov	r8, r5
 800ee10:	4621      	mov	r1, r4
 800ee12:	4630      	mov	r0, r6
 800ee14:	3501      	adds	r5, #1
 800ee16:	f008 fdc3 	bl	80179a0 <put_memory>
 800ee1a:	42af      	cmp	r7, r5
 800ee1c:	60a4      	str	r4, [r4, #8]
 800ee1e:	f884 800c 	strb.w	r8, [r4, #12]
 800ee22:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ee26:	d1f3      	bne.n	800ee10 <rmw_uxrce_init_client_memory+0x20>
 800ee28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee2c:	4770      	bx	lr
 800ee2e:	bf00      	nop

0800ee30 <rmw_uxrce_init_publisher_memory>:
 800ee30:	b1e2      	cbz	r2, 800ee6c <rmw_uxrce_init_publisher_memory+0x3c>
 800ee32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee36:	7b05      	ldrb	r5, [r0, #12]
 800ee38:	4606      	mov	r6, r0
 800ee3a:	b9ad      	cbnz	r5, 800ee68 <rmw_uxrce_init_publisher_memory+0x38>
 800ee3c:	23d8      	movs	r3, #216	@ 0xd8
 800ee3e:	e9c0 5500 	strd	r5, r5, [r0]
 800ee42:	6083      	str	r3, [r0, #8]
 800ee44:	f240 1301 	movw	r3, #257	@ 0x101
 800ee48:	4617      	mov	r7, r2
 800ee4a:	8183      	strh	r3, [r0, #12]
 800ee4c:	460c      	mov	r4, r1
 800ee4e:	46a8      	mov	r8, r5
 800ee50:	4621      	mov	r1, r4
 800ee52:	4630      	mov	r0, r6
 800ee54:	3501      	adds	r5, #1
 800ee56:	f008 fda3 	bl	80179a0 <put_memory>
 800ee5a:	42af      	cmp	r7, r5
 800ee5c:	60a4      	str	r4, [r4, #8]
 800ee5e:	f884 800c 	strb.w	r8, [r4, #12]
 800ee62:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ee66:	d1f3      	bne.n	800ee50 <rmw_uxrce_init_publisher_memory+0x20>
 800ee68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee6c:	4770      	bx	lr
 800ee6e:	bf00      	nop

0800ee70 <rmw_uxrce_init_subscription_memory>:
 800ee70:	b1e2      	cbz	r2, 800eeac <rmw_uxrce_init_subscription_memory+0x3c>
 800ee72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee76:	7b05      	ldrb	r5, [r0, #12]
 800ee78:	4606      	mov	r6, r0
 800ee7a:	b9ad      	cbnz	r5, 800eea8 <rmw_uxrce_init_subscription_memory+0x38>
 800ee7c:	23d8      	movs	r3, #216	@ 0xd8
 800ee7e:	e9c0 5500 	strd	r5, r5, [r0]
 800ee82:	6083      	str	r3, [r0, #8]
 800ee84:	f240 1301 	movw	r3, #257	@ 0x101
 800ee88:	4617      	mov	r7, r2
 800ee8a:	8183      	strh	r3, [r0, #12]
 800ee8c:	460c      	mov	r4, r1
 800ee8e:	46a8      	mov	r8, r5
 800ee90:	4621      	mov	r1, r4
 800ee92:	4630      	mov	r0, r6
 800ee94:	3501      	adds	r5, #1
 800ee96:	f008 fd83 	bl	80179a0 <put_memory>
 800ee9a:	42af      	cmp	r7, r5
 800ee9c:	60a4      	str	r4, [r4, #8]
 800ee9e:	f884 800c 	strb.w	r8, [r4, #12]
 800eea2:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800eea6:	d1f3      	bne.n	800ee90 <rmw_uxrce_init_subscription_memory+0x20>
 800eea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeac:	4770      	bx	lr
 800eeae:	bf00      	nop

0800eeb0 <rmw_uxrce_init_node_memory>:
 800eeb0:	b1e2      	cbz	r2, 800eeec <rmw_uxrce_init_node_memory+0x3c>
 800eeb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eeb6:	7b05      	ldrb	r5, [r0, #12]
 800eeb8:	4606      	mov	r6, r0
 800eeba:	b9ad      	cbnz	r5, 800eee8 <rmw_uxrce_init_node_memory+0x38>
 800eebc:	23a4      	movs	r3, #164	@ 0xa4
 800eebe:	e9c0 5500 	strd	r5, r5, [r0]
 800eec2:	6083      	str	r3, [r0, #8]
 800eec4:	f240 1301 	movw	r3, #257	@ 0x101
 800eec8:	4617      	mov	r7, r2
 800eeca:	8183      	strh	r3, [r0, #12]
 800eecc:	460c      	mov	r4, r1
 800eece:	46a8      	mov	r8, r5
 800eed0:	4621      	mov	r1, r4
 800eed2:	4630      	mov	r0, r6
 800eed4:	3501      	adds	r5, #1
 800eed6:	f008 fd63 	bl	80179a0 <put_memory>
 800eeda:	42af      	cmp	r7, r5
 800eedc:	60a4      	str	r4, [r4, #8]
 800eede:	f884 800c 	strb.w	r8, [r4, #12]
 800eee2:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800eee6:	d1f3      	bne.n	800eed0 <rmw_uxrce_init_node_memory+0x20>
 800eee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeec:	4770      	bx	lr
 800eeee:	bf00      	nop

0800eef0 <rmw_uxrce_init_session_memory>:
 800eef0:	b1ea      	cbz	r2, 800ef2e <rmw_uxrce_init_session_memory+0x3e>
 800eef2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eef6:	7b05      	ldrb	r5, [r0, #12]
 800eef8:	4606      	mov	r6, r0
 800eefa:	b9b5      	cbnz	r5, 800ef2a <rmw_uxrce_init_session_memory+0x3a>
 800eefc:	e9c0 5500 	strd	r5, r5, [r0]
 800ef00:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800ef04:	f240 1301 	movw	r3, #257	@ 0x101
 800ef08:	4617      	mov	r7, r2
 800ef0a:	f8c0 8008 	str.w	r8, [r0, #8]
 800ef0e:	460c      	mov	r4, r1
 800ef10:	8183      	strh	r3, [r0, #12]
 800ef12:	46a9      	mov	r9, r5
 800ef14:	4621      	mov	r1, r4
 800ef16:	4630      	mov	r0, r6
 800ef18:	3501      	adds	r5, #1
 800ef1a:	f008 fd41 	bl	80179a0 <put_memory>
 800ef1e:	42af      	cmp	r7, r5
 800ef20:	60a4      	str	r4, [r4, #8]
 800ef22:	f884 900c 	strb.w	r9, [r4, #12]
 800ef26:	4444      	add	r4, r8
 800ef28:	d1f4      	bne.n	800ef14 <rmw_uxrce_init_session_memory+0x24>
 800ef2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef2e:	4770      	bx	lr

0800ef30 <rmw_uxrce_init_topic_memory>:
 800ef30:	b1e2      	cbz	r2, 800ef6c <rmw_uxrce_init_topic_memory+0x3c>
 800ef32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef36:	7b05      	ldrb	r5, [r0, #12]
 800ef38:	4606      	mov	r6, r0
 800ef3a:	b9ad      	cbnz	r5, 800ef68 <rmw_uxrce_init_topic_memory+0x38>
 800ef3c:	231c      	movs	r3, #28
 800ef3e:	e9c0 5500 	strd	r5, r5, [r0]
 800ef42:	6083      	str	r3, [r0, #8]
 800ef44:	f240 1301 	movw	r3, #257	@ 0x101
 800ef48:	4617      	mov	r7, r2
 800ef4a:	8183      	strh	r3, [r0, #12]
 800ef4c:	460c      	mov	r4, r1
 800ef4e:	46a8      	mov	r8, r5
 800ef50:	4621      	mov	r1, r4
 800ef52:	4630      	mov	r0, r6
 800ef54:	3501      	adds	r5, #1
 800ef56:	f008 fd23 	bl	80179a0 <put_memory>
 800ef5a:	42af      	cmp	r7, r5
 800ef5c:	60a4      	str	r4, [r4, #8]
 800ef5e:	f884 800c 	strb.w	r8, [r4, #12]
 800ef62:	f104 041c 	add.w	r4, r4, #28
 800ef66:	d1f3      	bne.n	800ef50 <rmw_uxrce_init_topic_memory+0x20>
 800ef68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef6c:	4770      	bx	lr
 800ef6e:	bf00      	nop

0800ef70 <rmw_uxrce_init_static_input_buffer_memory>:
 800ef70:	b1ea      	cbz	r2, 800efae <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800ef72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef76:	7b05      	ldrb	r5, [r0, #12]
 800ef78:	4606      	mov	r6, r0
 800ef7a:	b9b5      	cbnz	r5, 800efaa <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800ef7c:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800ef80:	e9c0 5500 	strd	r5, r5, [r0]
 800ef84:	6083      	str	r3, [r0, #8]
 800ef86:	f240 1301 	movw	r3, #257	@ 0x101
 800ef8a:	4617      	mov	r7, r2
 800ef8c:	8183      	strh	r3, [r0, #12]
 800ef8e:	460c      	mov	r4, r1
 800ef90:	46a8      	mov	r8, r5
 800ef92:	4621      	mov	r1, r4
 800ef94:	4630      	mov	r0, r6
 800ef96:	3501      	adds	r5, #1
 800ef98:	f008 fd02 	bl	80179a0 <put_memory>
 800ef9c:	42af      	cmp	r7, r5
 800ef9e:	60a4      	str	r4, [r4, #8]
 800efa0:	f884 800c 	strb.w	r8, [r4, #12]
 800efa4:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800efa8:	d1f3      	bne.n	800ef92 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800efaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efae:	4770      	bx	lr

0800efb0 <rmw_uxrce_init_init_options_impl_memory>:
 800efb0:	b1e2      	cbz	r2, 800efec <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800efb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efb6:	7b05      	ldrb	r5, [r0, #12]
 800efb8:	4606      	mov	r6, r0
 800efba:	b9ad      	cbnz	r5, 800efe8 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800efbc:	232c      	movs	r3, #44	@ 0x2c
 800efbe:	e9c0 5500 	strd	r5, r5, [r0]
 800efc2:	6083      	str	r3, [r0, #8]
 800efc4:	f240 1301 	movw	r3, #257	@ 0x101
 800efc8:	4617      	mov	r7, r2
 800efca:	8183      	strh	r3, [r0, #12]
 800efcc:	460c      	mov	r4, r1
 800efce:	46a8      	mov	r8, r5
 800efd0:	4621      	mov	r1, r4
 800efd2:	4630      	mov	r0, r6
 800efd4:	3501      	adds	r5, #1
 800efd6:	f008 fce3 	bl	80179a0 <put_memory>
 800efda:	42af      	cmp	r7, r5
 800efdc:	60a4      	str	r4, [r4, #8]
 800efde:	f884 800c 	strb.w	r8, [r4, #12]
 800efe2:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800efe6:	d1f3      	bne.n	800efd0 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800efe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efec:	4770      	bx	lr
 800efee:	bf00      	nop

0800eff0 <rmw_uxrce_init_wait_set_memory>:
 800eff0:	b1e2      	cbz	r2, 800f02c <rmw_uxrce_init_wait_set_memory+0x3c>
 800eff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eff6:	7b05      	ldrb	r5, [r0, #12]
 800eff8:	4606      	mov	r6, r0
 800effa:	b9ad      	cbnz	r5, 800f028 <rmw_uxrce_init_wait_set_memory+0x38>
 800effc:	231c      	movs	r3, #28
 800effe:	e9c0 5500 	strd	r5, r5, [r0]
 800f002:	6083      	str	r3, [r0, #8]
 800f004:	f240 1301 	movw	r3, #257	@ 0x101
 800f008:	4617      	mov	r7, r2
 800f00a:	8183      	strh	r3, [r0, #12]
 800f00c:	460c      	mov	r4, r1
 800f00e:	46a8      	mov	r8, r5
 800f010:	4621      	mov	r1, r4
 800f012:	4630      	mov	r0, r6
 800f014:	3501      	adds	r5, #1
 800f016:	f008 fcc3 	bl	80179a0 <put_memory>
 800f01a:	42af      	cmp	r7, r5
 800f01c:	60a4      	str	r4, [r4, #8]
 800f01e:	f884 800c 	strb.w	r8, [r4, #12]
 800f022:	f104 041c 	add.w	r4, r4, #28
 800f026:	d1f3      	bne.n	800f010 <rmw_uxrce_init_wait_set_memory+0x20>
 800f028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f02c:	4770      	bx	lr
 800f02e:	bf00      	nop

0800f030 <rmw_uxrce_init_guard_condition_memory>:
 800f030:	b1e2      	cbz	r2, 800f06c <rmw_uxrce_init_guard_condition_memory+0x3c>
 800f032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f036:	7b05      	ldrb	r5, [r0, #12]
 800f038:	4606      	mov	r6, r0
 800f03a:	b9ad      	cbnz	r5, 800f068 <rmw_uxrce_init_guard_condition_memory+0x38>
 800f03c:	2320      	movs	r3, #32
 800f03e:	e9c0 5500 	strd	r5, r5, [r0]
 800f042:	6083      	str	r3, [r0, #8]
 800f044:	f240 1301 	movw	r3, #257	@ 0x101
 800f048:	4617      	mov	r7, r2
 800f04a:	8183      	strh	r3, [r0, #12]
 800f04c:	460c      	mov	r4, r1
 800f04e:	46a8      	mov	r8, r5
 800f050:	4621      	mov	r1, r4
 800f052:	4630      	mov	r0, r6
 800f054:	3501      	adds	r5, #1
 800f056:	f008 fca3 	bl	80179a0 <put_memory>
 800f05a:	42af      	cmp	r7, r5
 800f05c:	60a4      	str	r4, [r4, #8]
 800f05e:	f884 800c 	strb.w	r8, [r4, #12]
 800f062:	f104 0420 	add.w	r4, r4, #32
 800f066:	d1f3      	bne.n	800f050 <rmw_uxrce_init_guard_condition_memory+0x20>
 800f068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f06c:	4770      	bx	lr
 800f06e:	bf00      	nop

0800f070 <rmw_uxrce_fini_session_memory>:
 800f070:	4601      	mov	r1, r0
 800f072:	4801      	ldr	r0, [pc, #4]	@ (800f078 <rmw_uxrce_fini_session_memory+0x8>)
 800f074:	f008 bc94 	b.w	80179a0 <put_memory>
 800f078:	2000ae1c 	.word	0x2000ae1c

0800f07c <rmw_uxrce_fini_node_memory>:
 800f07c:	b538      	push	{r3, r4, r5, lr}
 800f07e:	4604      	mov	r4, r0
 800f080:	6800      	ldr	r0, [r0, #0]
 800f082:	b128      	cbz	r0, 800f090 <rmw_uxrce_fini_node_memory+0x14>
 800f084:	4b07      	ldr	r3, [pc, #28]	@ (800f0a4 <rmw_uxrce_fini_node_memory+0x28>)
 800f086:	6819      	ldr	r1, [r3, #0]
 800f088:	f7f1 f8ca 	bl	8000220 <strcmp>
 800f08c:	b940      	cbnz	r0, 800f0a0 <rmw_uxrce_fini_node_memory+0x24>
 800f08e:	6020      	str	r0, [r4, #0]
 800f090:	6861      	ldr	r1, [r4, #4]
 800f092:	b129      	cbz	r1, 800f0a0 <rmw_uxrce_fini_node_memory+0x24>
 800f094:	2500      	movs	r5, #0
 800f096:	4804      	ldr	r0, [pc, #16]	@ (800f0a8 <rmw_uxrce_fini_node_memory+0x2c>)
 800f098:	610d      	str	r5, [r1, #16]
 800f09a:	f008 fc81 	bl	80179a0 <put_memory>
 800f09e:	6065      	str	r5, [r4, #4]
 800f0a0:	bd38      	pop	{r3, r4, r5, pc}
 800f0a2:	bf00      	nop
 800f0a4:	0801bb60 	.word	0x0801bb60
 800f0a8:	2000adec 	.word	0x2000adec

0800f0ac <rmw_uxrce_fini_publisher_memory>:
 800f0ac:	b510      	push	{r4, lr}
 800f0ae:	4604      	mov	r4, r0
 800f0b0:	6800      	ldr	r0, [r0, #0]
 800f0b2:	b128      	cbz	r0, 800f0c0 <rmw_uxrce_fini_publisher_memory+0x14>
 800f0b4:	4b06      	ldr	r3, [pc, #24]	@ (800f0d0 <rmw_uxrce_fini_publisher_memory+0x24>)
 800f0b6:	6819      	ldr	r1, [r3, #0]
 800f0b8:	f7f1 f8b2 	bl	8000220 <strcmp>
 800f0bc:	b938      	cbnz	r0, 800f0ce <rmw_uxrce_fini_publisher_memory+0x22>
 800f0be:	6020      	str	r0, [r4, #0]
 800f0c0:	6861      	ldr	r1, [r4, #4]
 800f0c2:	b121      	cbz	r1, 800f0ce <rmw_uxrce_fini_publisher_memory+0x22>
 800f0c4:	4803      	ldr	r0, [pc, #12]	@ (800f0d4 <rmw_uxrce_fini_publisher_memory+0x28>)
 800f0c6:	f008 fc6b 	bl	80179a0 <put_memory>
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	6063      	str	r3, [r4, #4]
 800f0ce:	bd10      	pop	{r4, pc}
 800f0d0:	0801bb60 	.word	0x0801bb60
 800f0d4:	2000adfc 	.word	0x2000adfc

0800f0d8 <rmw_uxrce_fini_subscription_memory>:
 800f0d8:	b510      	push	{r4, lr}
 800f0da:	4604      	mov	r4, r0
 800f0dc:	6800      	ldr	r0, [r0, #0]
 800f0de:	b128      	cbz	r0, 800f0ec <rmw_uxrce_fini_subscription_memory+0x14>
 800f0e0:	4b06      	ldr	r3, [pc, #24]	@ (800f0fc <rmw_uxrce_fini_subscription_memory+0x24>)
 800f0e2:	6819      	ldr	r1, [r3, #0]
 800f0e4:	f7f1 f89c 	bl	8000220 <strcmp>
 800f0e8:	b938      	cbnz	r0, 800f0fa <rmw_uxrce_fini_subscription_memory+0x22>
 800f0ea:	6020      	str	r0, [r4, #0]
 800f0ec:	6861      	ldr	r1, [r4, #4]
 800f0ee:	b121      	cbz	r1, 800f0fa <rmw_uxrce_fini_subscription_memory+0x22>
 800f0f0:	4803      	ldr	r0, [pc, #12]	@ (800f100 <rmw_uxrce_fini_subscription_memory+0x28>)
 800f0f2:	f008 fc55 	bl	80179a0 <put_memory>
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	6063      	str	r3, [r4, #4]
 800f0fa:	bd10      	pop	{r4, pc}
 800f0fc:	0801bb60 	.word	0x0801bb60
 800f100:	2000ae3c 	.word	0x2000ae3c

0800f104 <rmw_uxrce_fini_service_memory>:
 800f104:	b510      	push	{r4, lr}
 800f106:	4604      	mov	r4, r0
 800f108:	6800      	ldr	r0, [r0, #0]
 800f10a:	b128      	cbz	r0, 800f118 <rmw_uxrce_fini_service_memory+0x14>
 800f10c:	4b06      	ldr	r3, [pc, #24]	@ (800f128 <rmw_uxrce_fini_service_memory+0x24>)
 800f10e:	6819      	ldr	r1, [r3, #0]
 800f110:	f7f1 f886 	bl	8000220 <strcmp>
 800f114:	b938      	cbnz	r0, 800f126 <rmw_uxrce_fini_service_memory+0x22>
 800f116:	6020      	str	r0, [r4, #0]
 800f118:	6861      	ldr	r1, [r4, #4]
 800f11a:	b121      	cbz	r1, 800f126 <rmw_uxrce_fini_service_memory+0x22>
 800f11c:	4803      	ldr	r0, [pc, #12]	@ (800f12c <rmw_uxrce_fini_service_memory+0x28>)
 800f11e:	f008 fc3f 	bl	80179a0 <put_memory>
 800f122:	2300      	movs	r3, #0
 800f124:	6063      	str	r3, [r4, #4]
 800f126:	bd10      	pop	{r4, pc}
 800f128:	0801bb60 	.word	0x0801bb60
 800f12c:	2000ae0c 	.word	0x2000ae0c

0800f130 <rmw_uxrce_fini_client_memory>:
 800f130:	b510      	push	{r4, lr}
 800f132:	4604      	mov	r4, r0
 800f134:	6800      	ldr	r0, [r0, #0]
 800f136:	b128      	cbz	r0, 800f144 <rmw_uxrce_fini_client_memory+0x14>
 800f138:	4b06      	ldr	r3, [pc, #24]	@ (800f154 <rmw_uxrce_fini_client_memory+0x24>)
 800f13a:	6819      	ldr	r1, [r3, #0]
 800f13c:	f7f1 f870 	bl	8000220 <strcmp>
 800f140:	b938      	cbnz	r0, 800f152 <rmw_uxrce_fini_client_memory+0x22>
 800f142:	6020      	str	r0, [r4, #0]
 800f144:	6861      	ldr	r1, [r4, #4]
 800f146:	b121      	cbz	r1, 800f152 <rmw_uxrce_fini_client_memory+0x22>
 800f148:	4803      	ldr	r0, [pc, #12]	@ (800f158 <rmw_uxrce_fini_client_memory+0x28>)
 800f14a:	f008 fc29 	bl	80179a0 <put_memory>
 800f14e:	2300      	movs	r3, #0
 800f150:	6063      	str	r3, [r4, #4]
 800f152:	bd10      	pop	{r4, pc}
 800f154:	0801bb60 	.word	0x0801bb60
 800f158:	2000651c 	.word	0x2000651c

0800f15c <rmw_uxrce_fini_topic_memory>:
 800f15c:	b510      	push	{r4, lr}
 800f15e:	4604      	mov	r4, r0
 800f160:	4621      	mov	r1, r4
 800f162:	4803      	ldr	r0, [pc, #12]	@ (800f170 <rmw_uxrce_fini_topic_memory+0x14>)
 800f164:	f008 fc1c 	bl	80179a0 <put_memory>
 800f168:	2300      	movs	r3, #0
 800f16a:	61a3      	str	r3, [r4, #24]
 800f16c:	bd10      	pop	{r4, pc}
 800f16e:	bf00      	nop
 800f170:	2000ae4c 	.word	0x2000ae4c

0800f174 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800f174:	b082      	sub	sp, #8
 800f176:	b530      	push	{r4, r5, lr}
 800f178:	4925      	ldr	r1, [pc, #148]	@ (800f210 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800f17a:	680d      	ldr	r5, [r1, #0]
 800f17c:	ac03      	add	r4, sp, #12
 800f17e:	e884 000c 	stmia.w	r4, {r2, r3}
 800f182:	461c      	mov	r4, r3
 800f184:	2d00      	cmp	r5, #0
 800f186:	d041      	beq.n	800f20c <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800f188:	462b      	mov	r3, r5
 800f18a:	2100      	movs	r1, #0
 800f18c:	689a      	ldr	r2, [r3, #8]
 800f18e:	685b      	ldr	r3, [r3, #4]
 800f190:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800f194:	4290      	cmp	r0, r2
 800f196:	bf08      	it	eq
 800f198:	3101      	addeq	r1, #1
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d1f6      	bne.n	800f18c <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800f19e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800f1a2:	2b02      	cmp	r3, #2
 800f1a4:	d029      	beq.n	800f1fa <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800f1a6:	d907      	bls.n	800f1b8 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800f1a8:	2b03      	cmp	r3, #3
 800f1aa:	d005      	beq.n	800f1b8 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800f1ac:	2100      	movs	r1, #0
 800f1ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1b2:	4608      	mov	r0, r1
 800f1b4:	b002      	add	sp, #8
 800f1b6:	4770      	bx	lr
 800f1b8:	b314      	cbz	r4, 800f200 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800f1ba:	428c      	cmp	r4, r1
 800f1bc:	d820      	bhi.n	800f200 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800f1be:	2d00      	cmp	r5, #0
 800f1c0:	d0f4      	beq.n	800f1ac <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800f1c2:	2100      	movs	r1, #0
 800f1c4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800f1c8:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800f1cc:	e002      	b.n	800f1d4 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800f1ce:	686d      	ldr	r5, [r5, #4]
 800f1d0:	2d00      	cmp	r5, #0
 800f1d2:	d0ec      	beq.n	800f1ae <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800f1d4:	68ab      	ldr	r3, [r5, #8]
 800f1d6:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800f1da:	4290      	cmp	r0, r2
 800f1dc:	d1f7      	bne.n	800f1ce <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800f1de:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800f1e2:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800f1e6:	4562      	cmp	r2, ip
 800f1e8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800f1ec:	eb73 0e04 	sbcs.w	lr, r3, r4
 800f1f0:	daed      	bge.n	800f1ce <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800f1f2:	4694      	mov	ip, r2
 800f1f4:	461c      	mov	r4, r3
 800f1f6:	4629      	mov	r1, r5
 800f1f8:	e7e9      	b.n	800f1ce <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800f1fa:	b10c      	cbz	r4, 800f200 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800f1fc:	428c      	cmp	r4, r1
 800f1fe:	d9d5      	bls.n	800f1ac <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800f200:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f204:	4802      	ldr	r0, [pc, #8]	@ (800f210 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800f206:	b002      	add	sp, #8
 800f208:	f008 bbba 	b.w	8017980 <get_memory>
 800f20c:	4629      	mov	r1, r5
 800f20e:	e7c6      	b.n	800f19e <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800f210:	2000ae2c 	.word	0x2000ae2c

0800f214 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800f214:	4b11      	ldr	r3, [pc, #68]	@ (800f25c <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	b530      	push	{r4, r5, lr}
 800f21a:	b1e3      	cbz	r3, 800f256 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800f21c:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800f220:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800f224:	2400      	movs	r4, #0
 800f226:	e001      	b.n	800f22c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800f228:	685b      	ldr	r3, [r3, #4]
 800f22a:	b193      	cbz	r3, 800f252 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800f22c:	689a      	ldr	r2, [r3, #8]
 800f22e:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800f232:	4288      	cmp	r0, r1
 800f234:	d1f8      	bne.n	800f228 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800f236:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800f23a:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800f23e:	4571      	cmp	r1, lr
 800f240:	eb72 050c 	sbcs.w	r5, r2, ip
 800f244:	daf0      	bge.n	800f228 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800f246:	461c      	mov	r4, r3
 800f248:	685b      	ldr	r3, [r3, #4]
 800f24a:	468e      	mov	lr, r1
 800f24c:	4694      	mov	ip, r2
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d1ec      	bne.n	800f22c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800f252:	4620      	mov	r0, r4
 800f254:	bd30      	pop	{r4, r5, pc}
 800f256:	461c      	mov	r4, r3
 800f258:	4620      	mov	r0, r4
 800f25a:	bd30      	pop	{r4, r5, pc}
 800f25c:	2000ae2c 	.word	0x2000ae2c

0800f260 <rmw_uxrce_clean_expired_static_input_buffer>:
 800f260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f264:	4b3c      	ldr	r3, [pc, #240]	@ (800f358 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800f266:	ed2d 8b06 	vpush	{d8-d10}
 800f26a:	681f      	ldr	r7, [r3, #0]
 800f26c:	b08d      	sub	sp, #52	@ 0x34
 800f26e:	f008 ffa3 	bl	80181b8 <rmw_uros_epoch_nanos>
 800f272:	2f00      	cmp	r7, #0
 800f274:	d05d      	beq.n	800f332 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800f276:	46b8      	mov	r8, r7
 800f278:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800f340 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800f27c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f280:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800f284:	2b04      	cmp	r3, #4
 800f286:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800f348 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800f28a:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800f350 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800f28e:	4681      	mov	r9, r0
 800f290:	468a      	mov	sl, r1
 800f292:	ac04      	add	r4, sp, #16
 800f294:	d03f      	beq.n	800f316 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800f296:	2b05      	cmp	r3, #5
 800f298:	d044      	beq.n	800f324 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800f29a:	2b03      	cmp	r3, #3
 800f29c:	d03b      	beq.n	800f316 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800f29e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f2a2:	ed8d ab06 	vstr	d10, [sp, #24]
 800f2a6:	ed8d 8b08 	vstr	d8, [sp, #32]
 800f2aa:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800f2ae:	ab08      	add	r3, sp, #32
 800f2b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f2b2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f2b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f2ba:	f008 f8ad 	bl	8017418 <rmw_time_equal>
 800f2be:	b118      	cbz	r0, 800f2c8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800f2c0:	ed8d 9b04 	vstr	d9, [sp, #16]
 800f2c4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800f2c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f2cc:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800f2d0:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800f2d4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800f2d8:	f008 f8f2 	bl	80174c0 <rmw_time_total_nsec>
 800f2dc:	1830      	adds	r0, r6, r0
 800f2de:	eb47 0101 	adc.w	r1, r7, r1
 800f2e2:	4548      	cmp	r0, r9
 800f2e4:	eb71 030a 	sbcs.w	r3, r1, sl
 800f2e8:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800f2ec:	db05      	blt.n	800f2fa <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800f2ee:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800f2f2:	4591      	cmp	r9, r2
 800f2f4:	eb7a 0303 	sbcs.w	r3, sl, r3
 800f2f8:	da03      	bge.n	800f302 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800f2fa:	4817      	ldr	r0, [pc, #92]	@ (800f358 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800f2fc:	4641      	mov	r1, r8
 800f2fe:	f008 fb4f 	bl	80179a0 <put_memory>
 800f302:	f1bb 0f00 	cmp.w	fp, #0
 800f306:	d014      	beq.n	800f332 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800f308:	46d8      	mov	r8, fp
 800f30a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f30e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800f312:	2b04      	cmp	r3, #4
 800f314:	d1bf      	bne.n	800f296 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800f316:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800f31a:	3340      	adds	r3, #64	@ 0x40
 800f31c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f31e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f322:	e7c0      	b.n	800f2a6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800f324:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800f328:	3348      	adds	r3, #72	@ 0x48
 800f32a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f32c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f330:	e7b9      	b.n	800f2a6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800f332:	b00d      	add	sp, #52	@ 0x34
 800f334:	ecbd 8b06 	vpop	{d8-d10}
 800f338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f33c:	f3af 8000 	nop.w
	...
 800f348:	00000001 	.word	0x00000001
 800f34c:	00000000 	.word	0x00000000
 800f350:	0000001e 	.word	0x0000001e
 800f354:	00000000 	.word	0x00000000
 800f358:	2000ae2c 	.word	0x2000ae2c

0800f35c <run_xrce_session>:
 800f35c:	b510      	push	{r4, lr}
 800f35e:	788c      	ldrb	r4, [r1, #2]
 800f360:	b086      	sub	sp, #24
 800f362:	2c01      	cmp	r4, #1
 800f364:	f8ad 200e 	strh.w	r2, [sp, #14]
 800f368:	d00c      	beq.n	800f384 <run_xrce_session+0x28>
 800f36a:	4619      	mov	r1, r3
 800f36c:	2301      	movs	r3, #1
 800f36e:	9300      	str	r3, [sp, #0]
 800f370:	f10d 020e 	add.w	r2, sp, #14
 800f374:	f10d 0317 	add.w	r3, sp, #23
 800f378:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f37c:	f002 fa52 	bl	8011824 <uxr_run_session_until_all_status>
 800f380:	b006      	add	sp, #24
 800f382:	bd10      	pop	{r4, pc}
 800f384:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f388:	f001 fe66 	bl	8011058 <uxr_flash_output_streams>
 800f38c:	4620      	mov	r0, r4
 800f38e:	b006      	add	sp, #24
 800f390:	bd10      	pop	{r4, pc}
 800f392:	bf00      	nop

0800f394 <convert_qos_profile>:
 800f394:	7a4a      	ldrb	r2, [r1, #9]
 800f396:	f891 c008 	ldrb.w	ip, [r1, #8]
 800f39a:	2a02      	cmp	r2, #2
 800f39c:	bf18      	it	ne
 800f39e:	2200      	movne	r2, #0
 800f3a0:	7002      	strb	r2, [r0, #0]
 800f3a2:	780a      	ldrb	r2, [r1, #0]
 800f3a4:	8889      	ldrh	r1, [r1, #4]
 800f3a6:	8081      	strh	r1, [r0, #4]
 800f3a8:	f1ac 0c02 	sub.w	ip, ip, #2
 800f3ac:	f1a2 0202 	sub.w	r2, r2, #2
 800f3b0:	fabc fc8c 	clz	ip, ip
 800f3b4:	fab2 f282 	clz	r2, r2
 800f3b8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800f3bc:	0952      	lsrs	r2, r2, #5
 800f3be:	f880 c001 	strb.w	ip, [r0, #1]
 800f3c2:	7082      	strb	r2, [r0, #2]
 800f3c4:	4770      	bx	lr
 800f3c6:	bf00      	nop

0800f3c8 <generate_type_name>:
 800f3c8:	b530      	push	{r4, r5, lr}
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	700b      	strb	r3, [r1, #0]
 800f3ce:	6803      	ldr	r3, [r0, #0]
 800f3d0:	b087      	sub	sp, #28
 800f3d2:	4614      	mov	r4, r2
 800f3d4:	b1d3      	cbz	r3, 800f40c <generate_type_name+0x44>
 800f3d6:	4a0f      	ldr	r2, [pc, #60]	@ (800f414 <generate_type_name+0x4c>)
 800f3d8:	4615      	mov	r5, r2
 800f3da:	9203      	str	r2, [sp, #12]
 800f3dc:	9500      	str	r5, [sp, #0]
 800f3de:	6842      	ldr	r2, [r0, #4]
 800f3e0:	480d      	ldr	r0, [pc, #52]	@ (800f418 <generate_type_name+0x50>)
 800f3e2:	9001      	str	r0, [sp, #4]
 800f3e4:	4608      	mov	r0, r1
 800f3e6:	490d      	ldr	r1, [pc, #52]	@ (800f41c <generate_type_name+0x54>)
 800f3e8:	9204      	str	r2, [sp, #16]
 800f3ea:	9105      	str	r1, [sp, #20]
 800f3ec:	9102      	str	r1, [sp, #8]
 800f3ee:	4a0c      	ldr	r2, [pc, #48]	@ (800f420 <generate_type_name+0x58>)
 800f3f0:	4621      	mov	r1, r4
 800f3f2:	f00a fd0f 	bl	8019e14 <sniprintf>
 800f3f6:	2800      	cmp	r0, #0
 800f3f8:	db05      	blt.n	800f406 <generate_type_name+0x3e>
 800f3fa:	4284      	cmp	r4, r0
 800f3fc:	bfd4      	ite	le
 800f3fe:	2000      	movle	r0, #0
 800f400:	2001      	movgt	r0, #1
 800f402:	b007      	add	sp, #28
 800f404:	bd30      	pop	{r4, r5, pc}
 800f406:	2000      	movs	r0, #0
 800f408:	b007      	add	sp, #28
 800f40a:	bd30      	pop	{r4, r5, pc}
 800f40c:	4b05      	ldr	r3, [pc, #20]	@ (800f424 <generate_type_name+0x5c>)
 800f40e:	4a01      	ldr	r2, [pc, #4]	@ (800f414 <generate_type_name+0x4c>)
 800f410:	461d      	mov	r5, r3
 800f412:	e7e2      	b.n	800f3da <generate_type_name+0x12>
 800f414:	0801b238 	.word	0x0801b238
 800f418:	0801b250 	.word	0x0801b250
 800f41c:	0801b24c 	.word	0x0801b24c
 800f420:	0801b23c 	.word	0x0801b23c
 800f424:	0801b938 	.word	0x0801b938

0800f428 <generate_topic_name>:
 800f428:	b510      	push	{r4, lr}
 800f42a:	b082      	sub	sp, #8
 800f42c:	4614      	mov	r4, r2
 800f42e:	9000      	str	r0, [sp, #0]
 800f430:	4b08      	ldr	r3, [pc, #32]	@ (800f454 <generate_topic_name+0x2c>)
 800f432:	4a09      	ldr	r2, [pc, #36]	@ (800f458 <generate_topic_name+0x30>)
 800f434:	4608      	mov	r0, r1
 800f436:	4621      	mov	r1, r4
 800f438:	f00a fcec 	bl	8019e14 <sniprintf>
 800f43c:	2800      	cmp	r0, #0
 800f43e:	db05      	blt.n	800f44c <generate_topic_name+0x24>
 800f440:	4284      	cmp	r4, r0
 800f442:	bfd4      	ite	le
 800f444:	2000      	movle	r0, #0
 800f446:	2001      	movgt	r0, #1
 800f448:	b002      	add	sp, #8
 800f44a:	bd10      	pop	{r4, pc}
 800f44c:	2000      	movs	r0, #0
 800f44e:	b002      	add	sp, #8
 800f450:	bd10      	pop	{r4, pc}
 800f452:	bf00      	nop
 800f454:	0801b25c 	.word	0x0801b25c
 800f458:	0801b254 	.word	0x0801b254

0800f45c <is_uxrce_rmw_identifier_valid>:
 800f45c:	b510      	push	{r4, lr}
 800f45e:	4604      	mov	r4, r0
 800f460:	b140      	cbz	r0, 800f474 <is_uxrce_rmw_identifier_valid+0x18>
 800f462:	f008 faf5 	bl	8017a50 <rmw_get_implementation_identifier>
 800f466:	4601      	mov	r1, r0
 800f468:	4620      	mov	r0, r4
 800f46a:	f7f0 fed9 	bl	8000220 <strcmp>
 800f46e:	fab0 f080 	clz	r0, r0
 800f472:	0940      	lsrs	r0, r0, #5
 800f474:	bd10      	pop	{r4, pc}
 800f476:	bf00      	nop

0800f478 <get_message_typesupport_handle>:
 800f478:	6883      	ldr	r3, [r0, #8]
 800f47a:	4718      	bx	r3

0800f47c <get_message_typesupport_handle_function>:
 800f47c:	b510      	push	{r4, lr}
 800f47e:	4604      	mov	r4, r0
 800f480:	6800      	ldr	r0, [r0, #0]
 800f482:	f7f0 fecd 	bl	8000220 <strcmp>
 800f486:	2800      	cmp	r0, #0
 800f488:	bf0c      	ite	eq
 800f48a:	4620      	moveq	r0, r4
 800f48c:	2000      	movne	r0, #0
 800f48e:	bd10      	pop	{r4, pc}

0800f490 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800f490:	4b04      	ldr	r3, [pc, #16]	@ (800f4a4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f492:	681a      	ldr	r2, [r3, #0]
 800f494:	b10a      	cbz	r2, 800f49a <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800f496:	4803      	ldr	r0, [pc, #12]	@ (800f4a4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f498:	4770      	bx	lr
 800f49a:	4a03      	ldr	r2, [pc, #12]	@ (800f4a8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800f49c:	4801      	ldr	r0, [pc, #4]	@ (800f4a4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f49e:	6812      	ldr	r2, [r2, #0]
 800f4a0:	601a      	str	r2, [r3, #0]
 800f4a2:	4770      	bx	lr
 800f4a4:	20000030 	.word	0x20000030
 800f4a8:	200000ac 	.word	0x200000ac

0800f4ac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800f4ac:	4a02      	ldr	r2, [pc, #8]	@ (800f4b8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800f4ae:	4b03      	ldr	r3, [pc, #12]	@ (800f4bc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800f4b0:	6812      	ldr	r2, [r2, #0]
 800f4b2:	601a      	str	r2, [r3, #0]
 800f4b4:	4770      	bx	lr
 800f4b6:	bf00      	nop
 800f4b8:	200000ac 	.word	0x200000ac
 800f4bc:	20000030 	.word	0x20000030

0800f4c0 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800f4c0:	f008 beb6 	b.w	8018230 <std_msgs__msg__Int32__init>

0800f4c4 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800f4c4:	f008 beb8 	b.w	8018238 <std_msgs__msg__Int32__fini>

0800f4c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800f4c8:	4b04      	ldr	r3, [pc, #16]	@ (800f4dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f4ca:	681a      	ldr	r2, [r3, #0]
 800f4cc:	b10a      	cbz	r2, 800f4d2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800f4ce:	4803      	ldr	r0, [pc, #12]	@ (800f4dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f4d0:	4770      	bx	lr
 800f4d2:	4a03      	ldr	r2, [pc, #12]	@ (800f4e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800f4d4:	4801      	ldr	r0, [pc, #4]	@ (800f4dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800f4d6:	6812      	ldr	r2, [r2, #0]
 800f4d8:	601a      	str	r2, [r3, #0]
 800f4da:	4770      	bx	lr
 800f4dc:	20000078 	.word	0x20000078
 800f4e0:	200000b0 	.word	0x200000b0

0800f4e4 <_Int32__max_serialized_size>:
 800f4e4:	b508      	push	{r3, lr}
 800f4e6:	2104      	movs	r1, #4
 800f4e8:	2000      	movs	r0, #0
 800f4ea:	f001 f807 	bl	80104fc <ucdr_alignment>
 800f4ee:	3004      	adds	r0, #4
 800f4f0:	bd08      	pop	{r3, pc}
 800f4f2:	bf00      	nop

0800f4f4 <_Int32__cdr_deserialize>:
 800f4f4:	b109      	cbz	r1, 800f4fa <_Int32__cdr_deserialize+0x6>
 800f4f6:	f000 bf19 	b.w	801032c <ucdr_deserialize_int32_t>
 800f4fa:	4608      	mov	r0, r1
 800f4fc:	4770      	bx	lr
 800f4fe:	bf00      	nop

0800f500 <get_serialized_size_std_msgs__msg__Int32>:
 800f500:	b138      	cbz	r0, 800f512 <get_serialized_size_std_msgs__msg__Int32+0x12>
 800f502:	b508      	push	{r3, lr}
 800f504:	460b      	mov	r3, r1
 800f506:	4618      	mov	r0, r3
 800f508:	2104      	movs	r1, #4
 800f50a:	f000 fff7 	bl	80104fc <ucdr_alignment>
 800f50e:	3004      	adds	r0, #4
 800f510:	bd08      	pop	{r3, pc}
 800f512:	4770      	bx	lr

0800f514 <_Int32__cdr_serialize>:
 800f514:	460a      	mov	r2, r1
 800f516:	b118      	cbz	r0, 800f520 <_Int32__cdr_serialize+0xc>
 800f518:	6801      	ldr	r1, [r0, #0]
 800f51a:	4610      	mov	r0, r2
 800f51c:	f000 be6e 	b.w	80101fc <ucdr_serialize_int32_t>
 800f520:	4770      	bx	lr
 800f522:	bf00      	nop

0800f524 <_Int32__get_serialized_size>:
 800f524:	b130      	cbz	r0, 800f534 <_Int32__get_serialized_size+0x10>
 800f526:	b508      	push	{r3, lr}
 800f528:	2104      	movs	r1, #4
 800f52a:	2000      	movs	r0, #0
 800f52c:	f000 ffe6 	bl	80104fc <ucdr_alignment>
 800f530:	3004      	adds	r0, #4
 800f532:	bd08      	pop	{r3, pc}
 800f534:	4770      	bx	lr
 800f536:	bf00      	nop

0800f538 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800f538:	4800      	ldr	r0, [pc, #0]	@ (800f53c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800f53a:	4770      	bx	lr
 800f53c:	20000084 	.word	0x20000084

0800f540 <ucdr_serialize_bool>:
 800f540:	b538      	push	{r3, r4, r5, lr}
 800f542:	460d      	mov	r5, r1
 800f544:	2101      	movs	r1, #1
 800f546:	4604      	mov	r4, r0
 800f548:	f000 ff8c 	bl	8010464 <ucdr_check_final_buffer_behavior>
 800f54c:	b148      	cbz	r0, 800f562 <ucdr_serialize_bool+0x22>
 800f54e:	68a3      	ldr	r3, [r4, #8]
 800f550:	701d      	strb	r5, [r3, #0]
 800f552:	68a2      	ldr	r2, [r4, #8]
 800f554:	6923      	ldr	r3, [r4, #16]
 800f556:	2101      	movs	r1, #1
 800f558:	440a      	add	r2, r1
 800f55a:	440b      	add	r3, r1
 800f55c:	60a2      	str	r2, [r4, #8]
 800f55e:	6123      	str	r3, [r4, #16]
 800f560:	7561      	strb	r1, [r4, #21]
 800f562:	7da0      	ldrb	r0, [r4, #22]
 800f564:	f080 0001 	eor.w	r0, r0, #1
 800f568:	bd38      	pop	{r3, r4, r5, pc}
 800f56a:	bf00      	nop

0800f56c <ucdr_deserialize_bool>:
 800f56c:	b538      	push	{r3, r4, r5, lr}
 800f56e:	460d      	mov	r5, r1
 800f570:	2101      	movs	r1, #1
 800f572:	4604      	mov	r4, r0
 800f574:	f000 ff76 	bl	8010464 <ucdr_check_final_buffer_behavior>
 800f578:	b160      	cbz	r0, 800f594 <ucdr_deserialize_bool+0x28>
 800f57a:	68a2      	ldr	r2, [r4, #8]
 800f57c:	6923      	ldr	r3, [r4, #16]
 800f57e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800f582:	3900      	subs	r1, #0
 800f584:	bf18      	it	ne
 800f586:	2101      	movne	r1, #1
 800f588:	7029      	strb	r1, [r5, #0]
 800f58a:	3301      	adds	r3, #1
 800f58c:	2101      	movs	r1, #1
 800f58e:	60a2      	str	r2, [r4, #8]
 800f590:	6123      	str	r3, [r4, #16]
 800f592:	7561      	strb	r1, [r4, #21]
 800f594:	7da0      	ldrb	r0, [r4, #22]
 800f596:	f080 0001 	eor.w	r0, r0, #1
 800f59a:	bd38      	pop	{r3, r4, r5, pc}

0800f59c <ucdr_serialize_uint8_t>:
 800f59c:	b538      	push	{r3, r4, r5, lr}
 800f59e:	460d      	mov	r5, r1
 800f5a0:	2101      	movs	r1, #1
 800f5a2:	4604      	mov	r4, r0
 800f5a4:	f000 ff5e 	bl	8010464 <ucdr_check_final_buffer_behavior>
 800f5a8:	b148      	cbz	r0, 800f5be <ucdr_serialize_uint8_t+0x22>
 800f5aa:	68a3      	ldr	r3, [r4, #8]
 800f5ac:	701d      	strb	r5, [r3, #0]
 800f5ae:	68a2      	ldr	r2, [r4, #8]
 800f5b0:	6923      	ldr	r3, [r4, #16]
 800f5b2:	2101      	movs	r1, #1
 800f5b4:	440a      	add	r2, r1
 800f5b6:	440b      	add	r3, r1
 800f5b8:	60a2      	str	r2, [r4, #8]
 800f5ba:	6123      	str	r3, [r4, #16]
 800f5bc:	7561      	strb	r1, [r4, #21]
 800f5be:	7da0      	ldrb	r0, [r4, #22]
 800f5c0:	f080 0001 	eor.w	r0, r0, #1
 800f5c4:	bd38      	pop	{r3, r4, r5, pc}
 800f5c6:	bf00      	nop

0800f5c8 <ucdr_deserialize_uint8_t>:
 800f5c8:	b538      	push	{r3, r4, r5, lr}
 800f5ca:	460d      	mov	r5, r1
 800f5cc:	2101      	movs	r1, #1
 800f5ce:	4604      	mov	r4, r0
 800f5d0:	f000 ff48 	bl	8010464 <ucdr_check_final_buffer_behavior>
 800f5d4:	b150      	cbz	r0, 800f5ec <ucdr_deserialize_uint8_t+0x24>
 800f5d6:	68a3      	ldr	r3, [r4, #8]
 800f5d8:	781b      	ldrb	r3, [r3, #0]
 800f5da:	702b      	strb	r3, [r5, #0]
 800f5dc:	68a2      	ldr	r2, [r4, #8]
 800f5de:	6923      	ldr	r3, [r4, #16]
 800f5e0:	2101      	movs	r1, #1
 800f5e2:	440a      	add	r2, r1
 800f5e4:	440b      	add	r3, r1
 800f5e6:	60a2      	str	r2, [r4, #8]
 800f5e8:	6123      	str	r3, [r4, #16]
 800f5ea:	7561      	strb	r1, [r4, #21]
 800f5ec:	7da0      	ldrb	r0, [r4, #22]
 800f5ee:	f080 0001 	eor.w	r0, r0, #1
 800f5f2:	bd38      	pop	{r3, r4, r5, pc}

0800f5f4 <ucdr_serialize_uint16_t>:
 800f5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5f8:	b082      	sub	sp, #8
 800f5fa:	460b      	mov	r3, r1
 800f5fc:	2102      	movs	r1, #2
 800f5fe:	4604      	mov	r4, r0
 800f600:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f604:	f000 ff82 	bl	801050c <ucdr_buffer_alignment>
 800f608:	4601      	mov	r1, r0
 800f60a:	4620      	mov	r0, r4
 800f60c:	7d67      	ldrb	r7, [r4, #21]
 800f60e:	f000 ffc1 	bl	8010594 <ucdr_advance_buffer>
 800f612:	2102      	movs	r1, #2
 800f614:	4620      	mov	r0, r4
 800f616:	f000 ff19 	bl	801044c <ucdr_check_buffer_available_for>
 800f61a:	bb78      	cbnz	r0, 800f67c <ucdr_serialize_uint16_t+0x88>
 800f61c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f620:	42ab      	cmp	r3, r5
 800f622:	d926      	bls.n	800f672 <ucdr_serialize_uint16_t+0x7e>
 800f624:	1b5e      	subs	r6, r3, r5
 800f626:	60a3      	str	r3, [r4, #8]
 800f628:	6923      	ldr	r3, [r4, #16]
 800f62a:	f1c6 0802 	rsb	r8, r6, #2
 800f62e:	4433      	add	r3, r6
 800f630:	6123      	str	r3, [r4, #16]
 800f632:	4641      	mov	r1, r8
 800f634:	4620      	mov	r0, r4
 800f636:	f000 ff15 	bl	8010464 <ucdr_check_final_buffer_behavior>
 800f63a:	2800      	cmp	r0, #0
 800f63c:	d03b      	beq.n	800f6b6 <ucdr_serialize_uint16_t+0xc2>
 800f63e:	7d23      	ldrb	r3, [r4, #20]
 800f640:	2b01      	cmp	r3, #1
 800f642:	d04a      	beq.n	800f6da <ucdr_serialize_uint16_t+0xe6>
 800f644:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f648:	702b      	strb	r3, [r5, #0]
 800f64a:	2e00      	cmp	r6, #0
 800f64c:	d040      	beq.n	800f6d0 <ucdr_serialize_uint16_t+0xdc>
 800f64e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f652:	706b      	strb	r3, [r5, #1]
 800f654:	6923      	ldr	r3, [r4, #16]
 800f656:	68a2      	ldr	r2, [r4, #8]
 800f658:	7da0      	ldrb	r0, [r4, #22]
 800f65a:	3302      	adds	r3, #2
 800f65c:	1b9e      	subs	r6, r3, r6
 800f65e:	4442      	add	r2, r8
 800f660:	2302      	movs	r3, #2
 800f662:	f080 0001 	eor.w	r0, r0, #1
 800f666:	60a2      	str	r2, [r4, #8]
 800f668:	6126      	str	r6, [r4, #16]
 800f66a:	7563      	strb	r3, [r4, #21]
 800f66c:	b002      	add	sp, #8
 800f66e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f672:	2102      	movs	r1, #2
 800f674:	4620      	mov	r0, r4
 800f676:	f000 fef5 	bl	8010464 <ucdr_check_final_buffer_behavior>
 800f67a:	b190      	cbz	r0, 800f6a2 <ucdr_serialize_uint16_t+0xae>
 800f67c:	7d23      	ldrb	r3, [r4, #20]
 800f67e:	2b01      	cmp	r3, #1
 800f680:	68a3      	ldr	r3, [r4, #8]
 800f682:	d014      	beq.n	800f6ae <ucdr_serialize_uint16_t+0xba>
 800f684:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f688:	701a      	strb	r2, [r3, #0]
 800f68a:	68a3      	ldr	r3, [r4, #8]
 800f68c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f690:	705a      	strb	r2, [r3, #1]
 800f692:	68a2      	ldr	r2, [r4, #8]
 800f694:	6923      	ldr	r3, [r4, #16]
 800f696:	3202      	adds	r2, #2
 800f698:	3302      	adds	r3, #2
 800f69a:	2102      	movs	r1, #2
 800f69c:	60a2      	str	r2, [r4, #8]
 800f69e:	6123      	str	r3, [r4, #16]
 800f6a0:	7561      	strb	r1, [r4, #21]
 800f6a2:	7da0      	ldrb	r0, [r4, #22]
 800f6a4:	f080 0001 	eor.w	r0, r0, #1
 800f6a8:	b002      	add	sp, #8
 800f6aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6ae:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f6b2:	801a      	strh	r2, [r3, #0]
 800f6b4:	e7ed      	b.n	800f692 <ucdr_serialize_uint16_t+0x9e>
 800f6b6:	68a2      	ldr	r2, [r4, #8]
 800f6b8:	6923      	ldr	r3, [r4, #16]
 800f6ba:	7da0      	ldrb	r0, [r4, #22]
 800f6bc:	7567      	strb	r7, [r4, #21]
 800f6be:	1b92      	subs	r2, r2, r6
 800f6c0:	1b9b      	subs	r3, r3, r6
 800f6c2:	f080 0001 	eor.w	r0, r0, #1
 800f6c6:	60a2      	str	r2, [r4, #8]
 800f6c8:	6123      	str	r3, [r4, #16]
 800f6ca:	b002      	add	sp, #8
 800f6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6d0:	68a3      	ldr	r3, [r4, #8]
 800f6d2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f6d6:	701a      	strb	r2, [r3, #0]
 800f6d8:	e7bc      	b.n	800f654 <ucdr_serialize_uint16_t+0x60>
 800f6da:	4628      	mov	r0, r5
 800f6dc:	f10d 0506 	add.w	r5, sp, #6
 800f6e0:	4629      	mov	r1, r5
 800f6e2:	4632      	mov	r2, r6
 800f6e4:	f00a fd39 	bl	801a15a <memcpy>
 800f6e8:	68a0      	ldr	r0, [r4, #8]
 800f6ea:	4642      	mov	r2, r8
 800f6ec:	19a9      	adds	r1, r5, r6
 800f6ee:	f00a fd34 	bl	801a15a <memcpy>
 800f6f2:	e7af      	b.n	800f654 <ucdr_serialize_uint16_t+0x60>

0800f6f4 <ucdr_serialize_endian_uint16_t>:
 800f6f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f6f8:	b083      	sub	sp, #12
 800f6fa:	460d      	mov	r5, r1
 800f6fc:	2102      	movs	r1, #2
 800f6fe:	4604      	mov	r4, r0
 800f700:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f704:	f000 ff02 	bl	801050c <ucdr_buffer_alignment>
 800f708:	4601      	mov	r1, r0
 800f70a:	4620      	mov	r0, r4
 800f70c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f710:	f000 ff40 	bl	8010594 <ucdr_advance_buffer>
 800f714:	2102      	movs	r1, #2
 800f716:	4620      	mov	r0, r4
 800f718:	f000 fe98 	bl	801044c <ucdr_check_buffer_available_for>
 800f71c:	bb70      	cbnz	r0, 800f77c <ucdr_serialize_endian_uint16_t+0x88>
 800f71e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f722:	42be      	cmp	r6, r7
 800f724:	d925      	bls.n	800f772 <ucdr_serialize_endian_uint16_t+0x7e>
 800f726:	6923      	ldr	r3, [r4, #16]
 800f728:	60a6      	str	r6, [r4, #8]
 800f72a:	1bf6      	subs	r6, r6, r7
 800f72c:	4433      	add	r3, r6
 800f72e:	f1c6 0902 	rsb	r9, r6, #2
 800f732:	6123      	str	r3, [r4, #16]
 800f734:	4649      	mov	r1, r9
 800f736:	4620      	mov	r0, r4
 800f738:	f000 fe94 	bl	8010464 <ucdr_check_final_buffer_behavior>
 800f73c:	2800      	cmp	r0, #0
 800f73e:	d039      	beq.n	800f7b4 <ucdr_serialize_endian_uint16_t+0xc0>
 800f740:	2d01      	cmp	r5, #1
 800f742:	d04a      	beq.n	800f7da <ucdr_serialize_endian_uint16_t+0xe6>
 800f744:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f748:	703b      	strb	r3, [r7, #0]
 800f74a:	2e00      	cmp	r6, #0
 800f74c:	d040      	beq.n	800f7d0 <ucdr_serialize_endian_uint16_t+0xdc>
 800f74e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f752:	707b      	strb	r3, [r7, #1]
 800f754:	6923      	ldr	r3, [r4, #16]
 800f756:	68a2      	ldr	r2, [r4, #8]
 800f758:	7da0      	ldrb	r0, [r4, #22]
 800f75a:	3302      	adds	r3, #2
 800f75c:	444a      	add	r2, r9
 800f75e:	1b9b      	subs	r3, r3, r6
 800f760:	2102      	movs	r1, #2
 800f762:	f080 0001 	eor.w	r0, r0, #1
 800f766:	60a2      	str	r2, [r4, #8]
 800f768:	6123      	str	r3, [r4, #16]
 800f76a:	7561      	strb	r1, [r4, #21]
 800f76c:	b003      	add	sp, #12
 800f76e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f772:	2102      	movs	r1, #2
 800f774:	4620      	mov	r0, r4
 800f776:	f000 fe75 	bl	8010464 <ucdr_check_final_buffer_behavior>
 800f77a:	b188      	cbz	r0, 800f7a0 <ucdr_serialize_endian_uint16_t+0xac>
 800f77c:	2d01      	cmp	r5, #1
 800f77e:	68a3      	ldr	r3, [r4, #8]
 800f780:	d014      	beq.n	800f7ac <ucdr_serialize_endian_uint16_t+0xb8>
 800f782:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f786:	701a      	strb	r2, [r3, #0]
 800f788:	68a3      	ldr	r3, [r4, #8]
 800f78a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f78e:	705a      	strb	r2, [r3, #1]
 800f790:	68a2      	ldr	r2, [r4, #8]
 800f792:	6923      	ldr	r3, [r4, #16]
 800f794:	3202      	adds	r2, #2
 800f796:	3302      	adds	r3, #2
 800f798:	2102      	movs	r1, #2
 800f79a:	60a2      	str	r2, [r4, #8]
 800f79c:	6123      	str	r3, [r4, #16]
 800f79e:	7561      	strb	r1, [r4, #21]
 800f7a0:	7da0      	ldrb	r0, [r4, #22]
 800f7a2:	f080 0001 	eor.w	r0, r0, #1
 800f7a6:	b003      	add	sp, #12
 800f7a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7ac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f7b0:	801a      	strh	r2, [r3, #0]
 800f7b2:	e7ed      	b.n	800f790 <ucdr_serialize_endian_uint16_t+0x9c>
 800f7b4:	68a2      	ldr	r2, [r4, #8]
 800f7b6:	6923      	ldr	r3, [r4, #16]
 800f7b8:	7da0      	ldrb	r0, [r4, #22]
 800f7ba:	f884 8015 	strb.w	r8, [r4, #21]
 800f7be:	1b92      	subs	r2, r2, r6
 800f7c0:	1b9b      	subs	r3, r3, r6
 800f7c2:	f080 0001 	eor.w	r0, r0, #1
 800f7c6:	60a2      	str	r2, [r4, #8]
 800f7c8:	6123      	str	r3, [r4, #16]
 800f7ca:	b003      	add	sp, #12
 800f7cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7d0:	68a3      	ldr	r3, [r4, #8]
 800f7d2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f7d6:	701a      	strb	r2, [r3, #0]
 800f7d8:	e7bc      	b.n	800f754 <ucdr_serialize_endian_uint16_t+0x60>
 800f7da:	f10d 0506 	add.w	r5, sp, #6
 800f7de:	4629      	mov	r1, r5
 800f7e0:	4632      	mov	r2, r6
 800f7e2:	4638      	mov	r0, r7
 800f7e4:	f00a fcb9 	bl	801a15a <memcpy>
 800f7e8:	68a0      	ldr	r0, [r4, #8]
 800f7ea:	464a      	mov	r2, r9
 800f7ec:	19a9      	adds	r1, r5, r6
 800f7ee:	f00a fcb4 	bl	801a15a <memcpy>
 800f7f2:	e7af      	b.n	800f754 <ucdr_serialize_endian_uint16_t+0x60>

0800f7f4 <ucdr_deserialize_uint16_t>:
 800f7f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7f8:	460d      	mov	r5, r1
 800f7fa:	2102      	movs	r1, #2
 800f7fc:	4604      	mov	r4, r0
 800f7fe:	f000 fe85 	bl	801050c <ucdr_buffer_alignment>
 800f802:	4601      	mov	r1, r0
 800f804:	4620      	mov	r0, r4
 800f806:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f80a:	f000 fec3 	bl	8010594 <ucdr_advance_buffer>
 800f80e:	2102      	movs	r1, #2
 800f810:	4620      	mov	r0, r4
 800f812:	f000 fe1b 	bl	801044c <ucdr_check_buffer_available_for>
 800f816:	bb60      	cbnz	r0, 800f872 <ucdr_deserialize_uint16_t+0x7e>
 800f818:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f81c:	42be      	cmp	r6, r7
 800f81e:	d923      	bls.n	800f868 <ucdr_deserialize_uint16_t+0x74>
 800f820:	6923      	ldr	r3, [r4, #16]
 800f822:	60a6      	str	r6, [r4, #8]
 800f824:	1bf6      	subs	r6, r6, r7
 800f826:	4433      	add	r3, r6
 800f828:	f1c6 0902 	rsb	r9, r6, #2
 800f82c:	6123      	str	r3, [r4, #16]
 800f82e:	4649      	mov	r1, r9
 800f830:	4620      	mov	r0, r4
 800f832:	f000 fe17 	bl	8010464 <ucdr_check_final_buffer_behavior>
 800f836:	2800      	cmp	r0, #0
 800f838:	d034      	beq.n	800f8a4 <ucdr_deserialize_uint16_t+0xb0>
 800f83a:	7d23      	ldrb	r3, [r4, #20]
 800f83c:	2b01      	cmp	r3, #1
 800f83e:	d042      	beq.n	800f8c6 <ucdr_deserialize_uint16_t+0xd2>
 800f840:	787b      	ldrb	r3, [r7, #1]
 800f842:	702b      	strb	r3, [r5, #0]
 800f844:	2e00      	cmp	r6, #0
 800f846:	d03a      	beq.n	800f8be <ucdr_deserialize_uint16_t+0xca>
 800f848:	783b      	ldrb	r3, [r7, #0]
 800f84a:	706b      	strb	r3, [r5, #1]
 800f84c:	6923      	ldr	r3, [r4, #16]
 800f84e:	68a2      	ldr	r2, [r4, #8]
 800f850:	7da0      	ldrb	r0, [r4, #22]
 800f852:	2102      	movs	r1, #2
 800f854:	3302      	adds	r3, #2
 800f856:	444a      	add	r2, r9
 800f858:	1b9b      	subs	r3, r3, r6
 800f85a:	7561      	strb	r1, [r4, #21]
 800f85c:	60a2      	str	r2, [r4, #8]
 800f85e:	6123      	str	r3, [r4, #16]
 800f860:	f080 0001 	eor.w	r0, r0, #1
 800f864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f868:	2102      	movs	r1, #2
 800f86a:	4620      	mov	r0, r4
 800f86c:	f000 fdfa 	bl	8010464 <ucdr_check_final_buffer_behavior>
 800f870:	b180      	cbz	r0, 800f894 <ucdr_deserialize_uint16_t+0xa0>
 800f872:	7d23      	ldrb	r3, [r4, #20]
 800f874:	2b01      	cmp	r3, #1
 800f876:	68a3      	ldr	r3, [r4, #8]
 800f878:	d011      	beq.n	800f89e <ucdr_deserialize_uint16_t+0xaa>
 800f87a:	785b      	ldrb	r3, [r3, #1]
 800f87c:	702b      	strb	r3, [r5, #0]
 800f87e:	68a3      	ldr	r3, [r4, #8]
 800f880:	781b      	ldrb	r3, [r3, #0]
 800f882:	706b      	strb	r3, [r5, #1]
 800f884:	68a2      	ldr	r2, [r4, #8]
 800f886:	6923      	ldr	r3, [r4, #16]
 800f888:	3202      	adds	r2, #2
 800f88a:	3302      	adds	r3, #2
 800f88c:	2102      	movs	r1, #2
 800f88e:	60a2      	str	r2, [r4, #8]
 800f890:	6123      	str	r3, [r4, #16]
 800f892:	7561      	strb	r1, [r4, #21]
 800f894:	7da0      	ldrb	r0, [r4, #22]
 800f896:	f080 0001 	eor.w	r0, r0, #1
 800f89a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f89e:	881b      	ldrh	r3, [r3, #0]
 800f8a0:	802b      	strh	r3, [r5, #0]
 800f8a2:	e7ef      	b.n	800f884 <ucdr_deserialize_uint16_t+0x90>
 800f8a4:	68a2      	ldr	r2, [r4, #8]
 800f8a6:	6923      	ldr	r3, [r4, #16]
 800f8a8:	7da0      	ldrb	r0, [r4, #22]
 800f8aa:	f884 8015 	strb.w	r8, [r4, #21]
 800f8ae:	1b92      	subs	r2, r2, r6
 800f8b0:	1b9b      	subs	r3, r3, r6
 800f8b2:	60a2      	str	r2, [r4, #8]
 800f8b4:	6123      	str	r3, [r4, #16]
 800f8b6:	f080 0001 	eor.w	r0, r0, #1
 800f8ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8be:	68a3      	ldr	r3, [r4, #8]
 800f8c0:	781b      	ldrb	r3, [r3, #0]
 800f8c2:	706b      	strb	r3, [r5, #1]
 800f8c4:	e7c2      	b.n	800f84c <ucdr_deserialize_uint16_t+0x58>
 800f8c6:	4639      	mov	r1, r7
 800f8c8:	4632      	mov	r2, r6
 800f8ca:	4628      	mov	r0, r5
 800f8cc:	f00a fc45 	bl	801a15a <memcpy>
 800f8d0:	68a1      	ldr	r1, [r4, #8]
 800f8d2:	464a      	mov	r2, r9
 800f8d4:	19a8      	adds	r0, r5, r6
 800f8d6:	f00a fc40 	bl	801a15a <memcpy>
 800f8da:	e7b7      	b.n	800f84c <ucdr_deserialize_uint16_t+0x58>

0800f8dc <ucdr_deserialize_endian_uint16_t>:
 800f8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8e0:	460e      	mov	r6, r1
 800f8e2:	2102      	movs	r1, #2
 800f8e4:	4604      	mov	r4, r0
 800f8e6:	4615      	mov	r5, r2
 800f8e8:	f000 fe10 	bl	801050c <ucdr_buffer_alignment>
 800f8ec:	4601      	mov	r1, r0
 800f8ee:	4620      	mov	r0, r4
 800f8f0:	f894 9015 	ldrb.w	r9, [r4, #21]
 800f8f4:	f000 fe4e 	bl	8010594 <ucdr_advance_buffer>
 800f8f8:	2102      	movs	r1, #2
 800f8fa:	4620      	mov	r0, r4
 800f8fc:	f000 fda6 	bl	801044c <ucdr_check_buffer_available_for>
 800f900:	bb70      	cbnz	r0, 800f960 <ucdr_deserialize_endian_uint16_t+0x84>
 800f902:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800f906:	4547      	cmp	r7, r8
 800f908:	d925      	bls.n	800f956 <ucdr_deserialize_endian_uint16_t+0x7a>
 800f90a:	6923      	ldr	r3, [r4, #16]
 800f90c:	60a7      	str	r7, [r4, #8]
 800f90e:	eba7 0708 	sub.w	r7, r7, r8
 800f912:	443b      	add	r3, r7
 800f914:	f1c7 0a02 	rsb	sl, r7, #2
 800f918:	6123      	str	r3, [r4, #16]
 800f91a:	4651      	mov	r1, sl
 800f91c:	4620      	mov	r0, r4
 800f91e:	f000 fda1 	bl	8010464 <ucdr_check_final_buffer_behavior>
 800f922:	2800      	cmp	r0, #0
 800f924:	d034      	beq.n	800f990 <ucdr_deserialize_endian_uint16_t+0xb4>
 800f926:	2e01      	cmp	r6, #1
 800f928:	d043      	beq.n	800f9b2 <ucdr_deserialize_endian_uint16_t+0xd6>
 800f92a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f92e:	702b      	strb	r3, [r5, #0]
 800f930:	2f00      	cmp	r7, #0
 800f932:	d03a      	beq.n	800f9aa <ucdr_deserialize_endian_uint16_t+0xce>
 800f934:	f898 3000 	ldrb.w	r3, [r8]
 800f938:	706b      	strb	r3, [r5, #1]
 800f93a:	6923      	ldr	r3, [r4, #16]
 800f93c:	68a2      	ldr	r2, [r4, #8]
 800f93e:	7da0      	ldrb	r0, [r4, #22]
 800f940:	2102      	movs	r1, #2
 800f942:	3302      	adds	r3, #2
 800f944:	4452      	add	r2, sl
 800f946:	1bdb      	subs	r3, r3, r7
 800f948:	7561      	strb	r1, [r4, #21]
 800f94a:	60a2      	str	r2, [r4, #8]
 800f94c:	6123      	str	r3, [r4, #16]
 800f94e:	f080 0001 	eor.w	r0, r0, #1
 800f952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f956:	2102      	movs	r1, #2
 800f958:	4620      	mov	r0, r4
 800f95a:	f000 fd83 	bl	8010464 <ucdr_check_final_buffer_behavior>
 800f95e:	b178      	cbz	r0, 800f980 <ucdr_deserialize_endian_uint16_t+0xa4>
 800f960:	2e01      	cmp	r6, #1
 800f962:	68a3      	ldr	r3, [r4, #8]
 800f964:	d011      	beq.n	800f98a <ucdr_deserialize_endian_uint16_t+0xae>
 800f966:	785b      	ldrb	r3, [r3, #1]
 800f968:	702b      	strb	r3, [r5, #0]
 800f96a:	68a3      	ldr	r3, [r4, #8]
 800f96c:	781b      	ldrb	r3, [r3, #0]
 800f96e:	706b      	strb	r3, [r5, #1]
 800f970:	68a2      	ldr	r2, [r4, #8]
 800f972:	6923      	ldr	r3, [r4, #16]
 800f974:	3202      	adds	r2, #2
 800f976:	3302      	adds	r3, #2
 800f978:	2102      	movs	r1, #2
 800f97a:	60a2      	str	r2, [r4, #8]
 800f97c:	6123      	str	r3, [r4, #16]
 800f97e:	7561      	strb	r1, [r4, #21]
 800f980:	7da0      	ldrb	r0, [r4, #22]
 800f982:	f080 0001 	eor.w	r0, r0, #1
 800f986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f98a:	881b      	ldrh	r3, [r3, #0]
 800f98c:	802b      	strh	r3, [r5, #0]
 800f98e:	e7ef      	b.n	800f970 <ucdr_deserialize_endian_uint16_t+0x94>
 800f990:	68a2      	ldr	r2, [r4, #8]
 800f992:	6923      	ldr	r3, [r4, #16]
 800f994:	7da0      	ldrb	r0, [r4, #22]
 800f996:	f884 9015 	strb.w	r9, [r4, #21]
 800f99a:	1bd2      	subs	r2, r2, r7
 800f99c:	1bdb      	subs	r3, r3, r7
 800f99e:	60a2      	str	r2, [r4, #8]
 800f9a0:	6123      	str	r3, [r4, #16]
 800f9a2:	f080 0001 	eor.w	r0, r0, #1
 800f9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9aa:	68a3      	ldr	r3, [r4, #8]
 800f9ac:	781b      	ldrb	r3, [r3, #0]
 800f9ae:	706b      	strb	r3, [r5, #1]
 800f9b0:	e7c3      	b.n	800f93a <ucdr_deserialize_endian_uint16_t+0x5e>
 800f9b2:	4641      	mov	r1, r8
 800f9b4:	463a      	mov	r2, r7
 800f9b6:	4628      	mov	r0, r5
 800f9b8:	f00a fbcf 	bl	801a15a <memcpy>
 800f9bc:	68a1      	ldr	r1, [r4, #8]
 800f9be:	4652      	mov	r2, sl
 800f9c0:	19e8      	adds	r0, r5, r7
 800f9c2:	f00a fbca 	bl	801a15a <memcpy>
 800f9c6:	e7b8      	b.n	800f93a <ucdr_deserialize_endian_uint16_t+0x5e>

0800f9c8 <ucdr_serialize_uint32_t>:
 800f9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9cc:	b082      	sub	sp, #8
 800f9ce:	4604      	mov	r4, r0
 800f9d0:	9101      	str	r1, [sp, #4]
 800f9d2:	2104      	movs	r1, #4
 800f9d4:	f000 fd9a 	bl	801050c <ucdr_buffer_alignment>
 800f9d8:	4601      	mov	r1, r0
 800f9da:	4620      	mov	r0, r4
 800f9dc:	7d67      	ldrb	r7, [r4, #21]
 800f9de:	f000 fdd9 	bl	8010594 <ucdr_advance_buffer>
 800f9e2:	2104      	movs	r1, #4
 800f9e4:	4620      	mov	r0, r4
 800f9e6:	f000 fd31 	bl	801044c <ucdr_check_buffer_available_for>
 800f9ea:	2800      	cmp	r0, #0
 800f9ec:	d139      	bne.n	800fa62 <ucdr_serialize_uint32_t+0x9a>
 800f9ee:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f9f2:	42ab      	cmp	r3, r5
 800f9f4:	d930      	bls.n	800fa58 <ucdr_serialize_uint32_t+0x90>
 800f9f6:	1b5e      	subs	r6, r3, r5
 800f9f8:	60a3      	str	r3, [r4, #8]
 800f9fa:	6923      	ldr	r3, [r4, #16]
 800f9fc:	f1c6 0804 	rsb	r8, r6, #4
 800fa00:	4433      	add	r3, r6
 800fa02:	6123      	str	r3, [r4, #16]
 800fa04:	4641      	mov	r1, r8
 800fa06:	4620      	mov	r0, r4
 800fa08:	f000 fd2c 	bl	8010464 <ucdr_check_final_buffer_behavior>
 800fa0c:	2800      	cmp	r0, #0
 800fa0e:	d04c      	beq.n	800faaa <ucdr_serialize_uint32_t+0xe2>
 800fa10:	7d23      	ldrb	r3, [r4, #20]
 800fa12:	2b01      	cmp	r3, #1
 800fa14:	d063      	beq.n	800fade <ucdr_serialize_uint32_t+0x116>
 800fa16:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fa1a:	702b      	strb	r3, [r5, #0]
 800fa1c:	2e00      	cmp	r6, #0
 800fa1e:	d051      	beq.n	800fac4 <ucdr_serialize_uint32_t+0xfc>
 800fa20:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fa24:	706b      	strb	r3, [r5, #1]
 800fa26:	2e01      	cmp	r6, #1
 800fa28:	d050      	beq.n	800facc <ucdr_serialize_uint32_t+0x104>
 800fa2a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fa2e:	70ab      	strb	r3, [r5, #2]
 800fa30:	2e02      	cmp	r6, #2
 800fa32:	d04f      	beq.n	800fad4 <ucdr_serialize_uint32_t+0x10c>
 800fa34:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fa38:	70eb      	strb	r3, [r5, #3]
 800fa3a:	6923      	ldr	r3, [r4, #16]
 800fa3c:	68a2      	ldr	r2, [r4, #8]
 800fa3e:	7da0      	ldrb	r0, [r4, #22]
 800fa40:	3304      	adds	r3, #4
 800fa42:	1b9e      	subs	r6, r3, r6
 800fa44:	4442      	add	r2, r8
 800fa46:	2304      	movs	r3, #4
 800fa48:	f080 0001 	eor.w	r0, r0, #1
 800fa4c:	60a2      	str	r2, [r4, #8]
 800fa4e:	6126      	str	r6, [r4, #16]
 800fa50:	7563      	strb	r3, [r4, #21]
 800fa52:	b002      	add	sp, #8
 800fa54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa58:	2104      	movs	r1, #4
 800fa5a:	4620      	mov	r0, r4
 800fa5c:	f000 fd02 	bl	8010464 <ucdr_check_final_buffer_behavior>
 800fa60:	b1d0      	cbz	r0, 800fa98 <ucdr_serialize_uint32_t+0xd0>
 800fa62:	7d23      	ldrb	r3, [r4, #20]
 800fa64:	2b01      	cmp	r3, #1
 800fa66:	68a3      	ldr	r3, [r4, #8]
 800fa68:	d01c      	beq.n	800faa4 <ucdr_serialize_uint32_t+0xdc>
 800fa6a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fa6e:	701a      	strb	r2, [r3, #0]
 800fa70:	68a3      	ldr	r3, [r4, #8]
 800fa72:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fa76:	705a      	strb	r2, [r3, #1]
 800fa78:	68a3      	ldr	r3, [r4, #8]
 800fa7a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fa7e:	709a      	strb	r2, [r3, #2]
 800fa80:	68a3      	ldr	r3, [r4, #8]
 800fa82:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fa86:	70da      	strb	r2, [r3, #3]
 800fa88:	68a2      	ldr	r2, [r4, #8]
 800fa8a:	6923      	ldr	r3, [r4, #16]
 800fa8c:	3204      	adds	r2, #4
 800fa8e:	3304      	adds	r3, #4
 800fa90:	2104      	movs	r1, #4
 800fa92:	60a2      	str	r2, [r4, #8]
 800fa94:	6123      	str	r3, [r4, #16]
 800fa96:	7561      	strb	r1, [r4, #21]
 800fa98:	7da0      	ldrb	r0, [r4, #22]
 800fa9a:	f080 0001 	eor.w	r0, r0, #1
 800fa9e:	b002      	add	sp, #8
 800faa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800faa4:	9a01      	ldr	r2, [sp, #4]
 800faa6:	601a      	str	r2, [r3, #0]
 800faa8:	e7ee      	b.n	800fa88 <ucdr_serialize_uint32_t+0xc0>
 800faaa:	68a2      	ldr	r2, [r4, #8]
 800faac:	6923      	ldr	r3, [r4, #16]
 800faae:	7da0      	ldrb	r0, [r4, #22]
 800fab0:	7567      	strb	r7, [r4, #21]
 800fab2:	1b92      	subs	r2, r2, r6
 800fab4:	1b9b      	subs	r3, r3, r6
 800fab6:	f080 0001 	eor.w	r0, r0, #1
 800faba:	60a2      	str	r2, [r4, #8]
 800fabc:	6123      	str	r3, [r4, #16]
 800fabe:	b002      	add	sp, #8
 800fac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fac4:	68a3      	ldr	r3, [r4, #8]
 800fac6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800faca:	701a      	strb	r2, [r3, #0]
 800facc:	68a3      	ldr	r3, [r4, #8]
 800face:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fad2:	701a      	strb	r2, [r3, #0]
 800fad4:	68a3      	ldr	r3, [r4, #8]
 800fad6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fada:	701a      	strb	r2, [r3, #0]
 800fadc:	e7ad      	b.n	800fa3a <ucdr_serialize_uint32_t+0x72>
 800fade:	4628      	mov	r0, r5
 800fae0:	ad01      	add	r5, sp, #4
 800fae2:	4629      	mov	r1, r5
 800fae4:	4632      	mov	r2, r6
 800fae6:	f00a fb38 	bl	801a15a <memcpy>
 800faea:	68a0      	ldr	r0, [r4, #8]
 800faec:	4642      	mov	r2, r8
 800faee:	19a9      	adds	r1, r5, r6
 800faf0:	f00a fb33 	bl	801a15a <memcpy>
 800faf4:	e7a1      	b.n	800fa3a <ucdr_serialize_uint32_t+0x72>
 800faf6:	bf00      	nop

0800faf8 <ucdr_serialize_endian_uint32_t>:
 800faf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fafc:	b083      	sub	sp, #12
 800fafe:	460d      	mov	r5, r1
 800fb00:	2104      	movs	r1, #4
 800fb02:	4604      	mov	r4, r0
 800fb04:	9201      	str	r2, [sp, #4]
 800fb06:	f000 fd01 	bl	801050c <ucdr_buffer_alignment>
 800fb0a:	4601      	mov	r1, r0
 800fb0c:	4620      	mov	r0, r4
 800fb0e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fb12:	f000 fd3f 	bl	8010594 <ucdr_advance_buffer>
 800fb16:	2104      	movs	r1, #4
 800fb18:	4620      	mov	r0, r4
 800fb1a:	f000 fc97 	bl	801044c <ucdr_check_buffer_available_for>
 800fb1e:	2800      	cmp	r0, #0
 800fb20:	d138      	bne.n	800fb94 <ucdr_serialize_endian_uint32_t+0x9c>
 800fb22:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800fb26:	42b7      	cmp	r7, r6
 800fb28:	d92f      	bls.n	800fb8a <ucdr_serialize_endian_uint32_t+0x92>
 800fb2a:	6923      	ldr	r3, [r4, #16]
 800fb2c:	60a7      	str	r7, [r4, #8]
 800fb2e:	1bbf      	subs	r7, r7, r6
 800fb30:	443b      	add	r3, r7
 800fb32:	f1c7 0904 	rsb	r9, r7, #4
 800fb36:	6123      	str	r3, [r4, #16]
 800fb38:	4649      	mov	r1, r9
 800fb3a:	4620      	mov	r0, r4
 800fb3c:	f000 fc92 	bl	8010464 <ucdr_check_final_buffer_behavior>
 800fb40:	2800      	cmp	r0, #0
 800fb42:	d04a      	beq.n	800fbda <ucdr_serialize_endian_uint32_t+0xe2>
 800fb44:	2d01      	cmp	r5, #1
 800fb46:	d063      	beq.n	800fc10 <ucdr_serialize_endian_uint32_t+0x118>
 800fb48:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fb4c:	7033      	strb	r3, [r6, #0]
 800fb4e:	2f00      	cmp	r7, #0
 800fb50:	d051      	beq.n	800fbf6 <ucdr_serialize_endian_uint32_t+0xfe>
 800fb52:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fb56:	7073      	strb	r3, [r6, #1]
 800fb58:	2f01      	cmp	r7, #1
 800fb5a:	d050      	beq.n	800fbfe <ucdr_serialize_endian_uint32_t+0x106>
 800fb5c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fb60:	70b3      	strb	r3, [r6, #2]
 800fb62:	2f02      	cmp	r7, #2
 800fb64:	d04f      	beq.n	800fc06 <ucdr_serialize_endian_uint32_t+0x10e>
 800fb66:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fb6a:	70f3      	strb	r3, [r6, #3]
 800fb6c:	6923      	ldr	r3, [r4, #16]
 800fb6e:	68a2      	ldr	r2, [r4, #8]
 800fb70:	7da0      	ldrb	r0, [r4, #22]
 800fb72:	3304      	adds	r3, #4
 800fb74:	444a      	add	r2, r9
 800fb76:	1bdb      	subs	r3, r3, r7
 800fb78:	2104      	movs	r1, #4
 800fb7a:	f080 0001 	eor.w	r0, r0, #1
 800fb7e:	60a2      	str	r2, [r4, #8]
 800fb80:	6123      	str	r3, [r4, #16]
 800fb82:	7561      	strb	r1, [r4, #21]
 800fb84:	b003      	add	sp, #12
 800fb86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb8a:	2104      	movs	r1, #4
 800fb8c:	4620      	mov	r0, r4
 800fb8e:	f000 fc69 	bl	8010464 <ucdr_check_final_buffer_behavior>
 800fb92:	b1c8      	cbz	r0, 800fbc8 <ucdr_serialize_endian_uint32_t+0xd0>
 800fb94:	2d01      	cmp	r5, #1
 800fb96:	68a3      	ldr	r3, [r4, #8]
 800fb98:	d01c      	beq.n	800fbd4 <ucdr_serialize_endian_uint32_t+0xdc>
 800fb9a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fb9e:	701a      	strb	r2, [r3, #0]
 800fba0:	68a3      	ldr	r3, [r4, #8]
 800fba2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fba6:	705a      	strb	r2, [r3, #1]
 800fba8:	68a3      	ldr	r3, [r4, #8]
 800fbaa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fbae:	709a      	strb	r2, [r3, #2]
 800fbb0:	68a3      	ldr	r3, [r4, #8]
 800fbb2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fbb6:	70da      	strb	r2, [r3, #3]
 800fbb8:	68a2      	ldr	r2, [r4, #8]
 800fbba:	6923      	ldr	r3, [r4, #16]
 800fbbc:	3204      	adds	r2, #4
 800fbbe:	3304      	adds	r3, #4
 800fbc0:	2104      	movs	r1, #4
 800fbc2:	60a2      	str	r2, [r4, #8]
 800fbc4:	6123      	str	r3, [r4, #16]
 800fbc6:	7561      	strb	r1, [r4, #21]
 800fbc8:	7da0      	ldrb	r0, [r4, #22]
 800fbca:	f080 0001 	eor.w	r0, r0, #1
 800fbce:	b003      	add	sp, #12
 800fbd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbd4:	9a01      	ldr	r2, [sp, #4]
 800fbd6:	601a      	str	r2, [r3, #0]
 800fbd8:	e7ee      	b.n	800fbb8 <ucdr_serialize_endian_uint32_t+0xc0>
 800fbda:	68a2      	ldr	r2, [r4, #8]
 800fbdc:	6923      	ldr	r3, [r4, #16]
 800fbde:	7da0      	ldrb	r0, [r4, #22]
 800fbe0:	f884 8015 	strb.w	r8, [r4, #21]
 800fbe4:	1bd2      	subs	r2, r2, r7
 800fbe6:	1bdb      	subs	r3, r3, r7
 800fbe8:	f080 0001 	eor.w	r0, r0, #1
 800fbec:	60a2      	str	r2, [r4, #8]
 800fbee:	6123      	str	r3, [r4, #16]
 800fbf0:	b003      	add	sp, #12
 800fbf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbf6:	68a3      	ldr	r3, [r4, #8]
 800fbf8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fbfc:	701a      	strb	r2, [r3, #0]
 800fbfe:	68a3      	ldr	r3, [r4, #8]
 800fc00:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fc04:	701a      	strb	r2, [r3, #0]
 800fc06:	68a3      	ldr	r3, [r4, #8]
 800fc08:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fc0c:	701a      	strb	r2, [r3, #0]
 800fc0e:	e7ad      	b.n	800fb6c <ucdr_serialize_endian_uint32_t+0x74>
 800fc10:	ad01      	add	r5, sp, #4
 800fc12:	4629      	mov	r1, r5
 800fc14:	463a      	mov	r2, r7
 800fc16:	4630      	mov	r0, r6
 800fc18:	f00a fa9f 	bl	801a15a <memcpy>
 800fc1c:	68a0      	ldr	r0, [r4, #8]
 800fc1e:	464a      	mov	r2, r9
 800fc20:	19e9      	adds	r1, r5, r7
 800fc22:	f00a fa9a 	bl	801a15a <memcpy>
 800fc26:	e7a1      	b.n	800fb6c <ucdr_serialize_endian_uint32_t+0x74>

0800fc28 <ucdr_deserialize_uint32_t>:
 800fc28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc2c:	460d      	mov	r5, r1
 800fc2e:	2104      	movs	r1, #4
 800fc30:	4604      	mov	r4, r0
 800fc32:	f000 fc6b 	bl	801050c <ucdr_buffer_alignment>
 800fc36:	4601      	mov	r1, r0
 800fc38:	4620      	mov	r0, r4
 800fc3a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fc3e:	f000 fca9 	bl	8010594 <ucdr_advance_buffer>
 800fc42:	2104      	movs	r1, #4
 800fc44:	4620      	mov	r0, r4
 800fc46:	f000 fc01 	bl	801044c <ucdr_check_buffer_available_for>
 800fc4a:	2800      	cmp	r0, #0
 800fc4c:	d138      	bne.n	800fcc0 <ucdr_deserialize_uint32_t+0x98>
 800fc4e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800fc52:	42b7      	cmp	r7, r6
 800fc54:	d92f      	bls.n	800fcb6 <ucdr_deserialize_uint32_t+0x8e>
 800fc56:	6923      	ldr	r3, [r4, #16]
 800fc58:	60a7      	str	r7, [r4, #8]
 800fc5a:	1bbf      	subs	r7, r7, r6
 800fc5c:	443b      	add	r3, r7
 800fc5e:	f1c7 0904 	rsb	r9, r7, #4
 800fc62:	6123      	str	r3, [r4, #16]
 800fc64:	4649      	mov	r1, r9
 800fc66:	4620      	mov	r0, r4
 800fc68:	f000 fbfc 	bl	8010464 <ucdr_check_final_buffer_behavior>
 800fc6c:	2800      	cmp	r0, #0
 800fc6e:	d046      	beq.n	800fcfe <ucdr_deserialize_uint32_t+0xd6>
 800fc70:	7d23      	ldrb	r3, [r4, #20]
 800fc72:	2b01      	cmp	r3, #1
 800fc74:	d05c      	beq.n	800fd30 <ucdr_deserialize_uint32_t+0x108>
 800fc76:	78f3      	ldrb	r3, [r6, #3]
 800fc78:	702b      	strb	r3, [r5, #0]
 800fc7a:	2f00      	cmp	r7, #0
 800fc7c:	d04c      	beq.n	800fd18 <ucdr_deserialize_uint32_t+0xf0>
 800fc7e:	78b3      	ldrb	r3, [r6, #2]
 800fc80:	706b      	strb	r3, [r5, #1]
 800fc82:	2f01      	cmp	r7, #1
 800fc84:	f105 0302 	add.w	r3, r5, #2
 800fc88:	d04a      	beq.n	800fd20 <ucdr_deserialize_uint32_t+0xf8>
 800fc8a:	7873      	ldrb	r3, [r6, #1]
 800fc8c:	70ab      	strb	r3, [r5, #2]
 800fc8e:	2f02      	cmp	r7, #2
 800fc90:	f105 0303 	add.w	r3, r5, #3
 800fc94:	d048      	beq.n	800fd28 <ucdr_deserialize_uint32_t+0x100>
 800fc96:	7833      	ldrb	r3, [r6, #0]
 800fc98:	70eb      	strb	r3, [r5, #3]
 800fc9a:	6923      	ldr	r3, [r4, #16]
 800fc9c:	68a2      	ldr	r2, [r4, #8]
 800fc9e:	7da0      	ldrb	r0, [r4, #22]
 800fca0:	2104      	movs	r1, #4
 800fca2:	3304      	adds	r3, #4
 800fca4:	444a      	add	r2, r9
 800fca6:	1bdb      	subs	r3, r3, r7
 800fca8:	7561      	strb	r1, [r4, #21]
 800fcaa:	60a2      	str	r2, [r4, #8]
 800fcac:	6123      	str	r3, [r4, #16]
 800fcae:	f080 0001 	eor.w	r0, r0, #1
 800fcb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcb6:	2104      	movs	r1, #4
 800fcb8:	4620      	mov	r0, r4
 800fcba:	f000 fbd3 	bl	8010464 <ucdr_check_final_buffer_behavior>
 800fcbe:	b1b0      	cbz	r0, 800fcee <ucdr_deserialize_uint32_t+0xc6>
 800fcc0:	7d23      	ldrb	r3, [r4, #20]
 800fcc2:	2b01      	cmp	r3, #1
 800fcc4:	68a3      	ldr	r3, [r4, #8]
 800fcc6:	d017      	beq.n	800fcf8 <ucdr_deserialize_uint32_t+0xd0>
 800fcc8:	78db      	ldrb	r3, [r3, #3]
 800fcca:	702b      	strb	r3, [r5, #0]
 800fccc:	68a3      	ldr	r3, [r4, #8]
 800fcce:	789b      	ldrb	r3, [r3, #2]
 800fcd0:	706b      	strb	r3, [r5, #1]
 800fcd2:	68a3      	ldr	r3, [r4, #8]
 800fcd4:	785b      	ldrb	r3, [r3, #1]
 800fcd6:	70ab      	strb	r3, [r5, #2]
 800fcd8:	68a3      	ldr	r3, [r4, #8]
 800fcda:	781b      	ldrb	r3, [r3, #0]
 800fcdc:	70eb      	strb	r3, [r5, #3]
 800fcde:	68a2      	ldr	r2, [r4, #8]
 800fce0:	6923      	ldr	r3, [r4, #16]
 800fce2:	3204      	adds	r2, #4
 800fce4:	3304      	adds	r3, #4
 800fce6:	2104      	movs	r1, #4
 800fce8:	60a2      	str	r2, [r4, #8]
 800fcea:	6123      	str	r3, [r4, #16]
 800fcec:	7561      	strb	r1, [r4, #21]
 800fcee:	7da0      	ldrb	r0, [r4, #22]
 800fcf0:	f080 0001 	eor.w	r0, r0, #1
 800fcf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	602b      	str	r3, [r5, #0]
 800fcfc:	e7ef      	b.n	800fcde <ucdr_deserialize_uint32_t+0xb6>
 800fcfe:	68a2      	ldr	r2, [r4, #8]
 800fd00:	6923      	ldr	r3, [r4, #16]
 800fd02:	7da0      	ldrb	r0, [r4, #22]
 800fd04:	f884 8015 	strb.w	r8, [r4, #21]
 800fd08:	1bd2      	subs	r2, r2, r7
 800fd0a:	1bdb      	subs	r3, r3, r7
 800fd0c:	60a2      	str	r2, [r4, #8]
 800fd0e:	6123      	str	r3, [r4, #16]
 800fd10:	f080 0001 	eor.w	r0, r0, #1
 800fd14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd18:	68a3      	ldr	r3, [r4, #8]
 800fd1a:	789b      	ldrb	r3, [r3, #2]
 800fd1c:	706b      	strb	r3, [r5, #1]
 800fd1e:	1cab      	adds	r3, r5, #2
 800fd20:	68a2      	ldr	r2, [r4, #8]
 800fd22:	7852      	ldrb	r2, [r2, #1]
 800fd24:	f803 2b01 	strb.w	r2, [r3], #1
 800fd28:	68a2      	ldr	r2, [r4, #8]
 800fd2a:	7812      	ldrb	r2, [r2, #0]
 800fd2c:	701a      	strb	r2, [r3, #0]
 800fd2e:	e7b4      	b.n	800fc9a <ucdr_deserialize_uint32_t+0x72>
 800fd30:	4631      	mov	r1, r6
 800fd32:	463a      	mov	r2, r7
 800fd34:	4628      	mov	r0, r5
 800fd36:	f00a fa10 	bl	801a15a <memcpy>
 800fd3a:	68a1      	ldr	r1, [r4, #8]
 800fd3c:	464a      	mov	r2, r9
 800fd3e:	19e8      	adds	r0, r5, r7
 800fd40:	f00a fa0b 	bl	801a15a <memcpy>
 800fd44:	e7a9      	b.n	800fc9a <ucdr_deserialize_uint32_t+0x72>
 800fd46:	bf00      	nop

0800fd48 <ucdr_deserialize_endian_uint32_t>:
 800fd48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd4c:	460e      	mov	r6, r1
 800fd4e:	2104      	movs	r1, #4
 800fd50:	4604      	mov	r4, r0
 800fd52:	4615      	mov	r5, r2
 800fd54:	f000 fbda 	bl	801050c <ucdr_buffer_alignment>
 800fd58:	4601      	mov	r1, r0
 800fd5a:	4620      	mov	r0, r4
 800fd5c:	f894 9015 	ldrb.w	r9, [r4, #21]
 800fd60:	f000 fc18 	bl	8010594 <ucdr_advance_buffer>
 800fd64:	2104      	movs	r1, #4
 800fd66:	4620      	mov	r0, r4
 800fd68:	f000 fb70 	bl	801044c <ucdr_check_buffer_available_for>
 800fd6c:	2800      	cmp	r0, #0
 800fd6e:	d13c      	bne.n	800fdea <ucdr_deserialize_endian_uint32_t+0xa2>
 800fd70:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800fd74:	42bb      	cmp	r3, r7
 800fd76:	d933      	bls.n	800fde0 <ucdr_deserialize_endian_uint32_t+0x98>
 800fd78:	eba3 0807 	sub.w	r8, r3, r7
 800fd7c:	60a3      	str	r3, [r4, #8]
 800fd7e:	6923      	ldr	r3, [r4, #16]
 800fd80:	f1c8 0a04 	rsb	sl, r8, #4
 800fd84:	4443      	add	r3, r8
 800fd86:	6123      	str	r3, [r4, #16]
 800fd88:	4651      	mov	r1, sl
 800fd8a:	4620      	mov	r0, r4
 800fd8c:	f000 fb6a 	bl	8010464 <ucdr_check_final_buffer_behavior>
 800fd90:	2800      	cmp	r0, #0
 800fd92:	d048      	beq.n	800fe26 <ucdr_deserialize_endian_uint32_t+0xde>
 800fd94:	2e01      	cmp	r6, #1
 800fd96:	d061      	beq.n	800fe5c <ucdr_deserialize_endian_uint32_t+0x114>
 800fd98:	78fb      	ldrb	r3, [r7, #3]
 800fd9a:	702b      	strb	r3, [r5, #0]
 800fd9c:	f1b8 0f00 	cmp.w	r8, #0
 800fda0:	d050      	beq.n	800fe44 <ucdr_deserialize_endian_uint32_t+0xfc>
 800fda2:	78bb      	ldrb	r3, [r7, #2]
 800fda4:	706b      	strb	r3, [r5, #1]
 800fda6:	f1b8 0f01 	cmp.w	r8, #1
 800fdaa:	f105 0302 	add.w	r3, r5, #2
 800fdae:	d04d      	beq.n	800fe4c <ucdr_deserialize_endian_uint32_t+0x104>
 800fdb0:	787b      	ldrb	r3, [r7, #1]
 800fdb2:	70ab      	strb	r3, [r5, #2]
 800fdb4:	f1b8 0f02 	cmp.w	r8, #2
 800fdb8:	f105 0303 	add.w	r3, r5, #3
 800fdbc:	d04a      	beq.n	800fe54 <ucdr_deserialize_endian_uint32_t+0x10c>
 800fdbe:	783b      	ldrb	r3, [r7, #0]
 800fdc0:	70eb      	strb	r3, [r5, #3]
 800fdc2:	6923      	ldr	r3, [r4, #16]
 800fdc4:	68a2      	ldr	r2, [r4, #8]
 800fdc6:	7da0      	ldrb	r0, [r4, #22]
 800fdc8:	2104      	movs	r1, #4
 800fdca:	3304      	adds	r3, #4
 800fdcc:	4452      	add	r2, sl
 800fdce:	eba3 0308 	sub.w	r3, r3, r8
 800fdd2:	7561      	strb	r1, [r4, #21]
 800fdd4:	60a2      	str	r2, [r4, #8]
 800fdd6:	6123      	str	r3, [r4, #16]
 800fdd8:	f080 0001 	eor.w	r0, r0, #1
 800fddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fde0:	2104      	movs	r1, #4
 800fde2:	4620      	mov	r0, r4
 800fde4:	f000 fb3e 	bl	8010464 <ucdr_check_final_buffer_behavior>
 800fde8:	b1a8      	cbz	r0, 800fe16 <ucdr_deserialize_endian_uint32_t+0xce>
 800fdea:	2e01      	cmp	r6, #1
 800fdec:	68a3      	ldr	r3, [r4, #8]
 800fdee:	d017      	beq.n	800fe20 <ucdr_deserialize_endian_uint32_t+0xd8>
 800fdf0:	78db      	ldrb	r3, [r3, #3]
 800fdf2:	702b      	strb	r3, [r5, #0]
 800fdf4:	68a3      	ldr	r3, [r4, #8]
 800fdf6:	789b      	ldrb	r3, [r3, #2]
 800fdf8:	706b      	strb	r3, [r5, #1]
 800fdfa:	68a3      	ldr	r3, [r4, #8]
 800fdfc:	785b      	ldrb	r3, [r3, #1]
 800fdfe:	70ab      	strb	r3, [r5, #2]
 800fe00:	68a3      	ldr	r3, [r4, #8]
 800fe02:	781b      	ldrb	r3, [r3, #0]
 800fe04:	70eb      	strb	r3, [r5, #3]
 800fe06:	68a2      	ldr	r2, [r4, #8]
 800fe08:	6923      	ldr	r3, [r4, #16]
 800fe0a:	3204      	adds	r2, #4
 800fe0c:	3304      	adds	r3, #4
 800fe0e:	2104      	movs	r1, #4
 800fe10:	60a2      	str	r2, [r4, #8]
 800fe12:	6123      	str	r3, [r4, #16]
 800fe14:	7561      	strb	r1, [r4, #21]
 800fe16:	7da0      	ldrb	r0, [r4, #22]
 800fe18:	f080 0001 	eor.w	r0, r0, #1
 800fe1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	602b      	str	r3, [r5, #0]
 800fe24:	e7ef      	b.n	800fe06 <ucdr_deserialize_endian_uint32_t+0xbe>
 800fe26:	68a2      	ldr	r2, [r4, #8]
 800fe28:	6923      	ldr	r3, [r4, #16]
 800fe2a:	7da0      	ldrb	r0, [r4, #22]
 800fe2c:	f884 9015 	strb.w	r9, [r4, #21]
 800fe30:	eba2 0208 	sub.w	r2, r2, r8
 800fe34:	eba3 0308 	sub.w	r3, r3, r8
 800fe38:	60a2      	str	r2, [r4, #8]
 800fe3a:	6123      	str	r3, [r4, #16]
 800fe3c:	f080 0001 	eor.w	r0, r0, #1
 800fe40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe44:	68a3      	ldr	r3, [r4, #8]
 800fe46:	789b      	ldrb	r3, [r3, #2]
 800fe48:	706b      	strb	r3, [r5, #1]
 800fe4a:	1cab      	adds	r3, r5, #2
 800fe4c:	68a2      	ldr	r2, [r4, #8]
 800fe4e:	7852      	ldrb	r2, [r2, #1]
 800fe50:	f803 2b01 	strb.w	r2, [r3], #1
 800fe54:	68a2      	ldr	r2, [r4, #8]
 800fe56:	7812      	ldrb	r2, [r2, #0]
 800fe58:	701a      	strb	r2, [r3, #0]
 800fe5a:	e7b2      	b.n	800fdc2 <ucdr_deserialize_endian_uint32_t+0x7a>
 800fe5c:	4639      	mov	r1, r7
 800fe5e:	4642      	mov	r2, r8
 800fe60:	4628      	mov	r0, r5
 800fe62:	f00a f97a 	bl	801a15a <memcpy>
 800fe66:	68a1      	ldr	r1, [r4, #8]
 800fe68:	4652      	mov	r2, sl
 800fe6a:	eb05 0008 	add.w	r0, r5, r8
 800fe6e:	f00a f974 	bl	801a15a <memcpy>
 800fe72:	e7a6      	b.n	800fdc2 <ucdr_deserialize_endian_uint32_t+0x7a>

0800fe74 <ucdr_serialize_uint64_t>:
 800fe74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe78:	2108      	movs	r1, #8
 800fe7a:	b082      	sub	sp, #8
 800fe7c:	4604      	mov	r4, r0
 800fe7e:	e9cd 2300 	strd	r2, r3, [sp]
 800fe82:	f000 fb43 	bl	801050c <ucdr_buffer_alignment>
 800fe86:	4601      	mov	r1, r0
 800fe88:	4620      	mov	r0, r4
 800fe8a:	7d67      	ldrb	r7, [r4, #21]
 800fe8c:	f000 fb82 	bl	8010594 <ucdr_advance_buffer>
 800fe90:	2108      	movs	r1, #8
 800fe92:	4620      	mov	r0, r4
 800fe94:	f000 fada 	bl	801044c <ucdr_check_buffer_available_for>
 800fe98:	2800      	cmp	r0, #0
 800fe9a:	d14e      	bne.n	800ff3a <ucdr_serialize_uint64_t+0xc6>
 800fe9c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fea0:	42ab      	cmp	r3, r5
 800fea2:	d945      	bls.n	800ff30 <ucdr_serialize_uint64_t+0xbc>
 800fea4:	1b5e      	subs	r6, r3, r5
 800fea6:	60a3      	str	r3, [r4, #8]
 800fea8:	6923      	ldr	r3, [r4, #16]
 800feaa:	f1c6 0808 	rsb	r8, r6, #8
 800feae:	4433      	add	r3, r6
 800feb0:	6123      	str	r3, [r4, #16]
 800feb2:	4641      	mov	r1, r8
 800feb4:	4620      	mov	r0, r4
 800feb6:	f000 fad5 	bl	8010464 <ucdr_check_final_buffer_behavior>
 800feba:	2800      	cmp	r0, #0
 800febc:	d074      	beq.n	800ffa8 <ucdr_serialize_uint64_t+0x134>
 800febe:	7d23      	ldrb	r3, [r4, #20]
 800fec0:	2b01      	cmp	r3, #1
 800fec2:	f000 809b 	beq.w	800fffc <ucdr_serialize_uint64_t+0x188>
 800fec6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800feca:	702b      	strb	r3, [r5, #0]
 800fecc:	2e00      	cmp	r6, #0
 800fece:	d078      	beq.n	800ffc2 <ucdr_serialize_uint64_t+0x14e>
 800fed0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fed4:	706b      	strb	r3, [r5, #1]
 800fed6:	2e01      	cmp	r6, #1
 800fed8:	d077      	beq.n	800ffca <ucdr_serialize_uint64_t+0x156>
 800feda:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fede:	70ab      	strb	r3, [r5, #2]
 800fee0:	2e02      	cmp	r6, #2
 800fee2:	d076      	beq.n	800ffd2 <ucdr_serialize_uint64_t+0x15e>
 800fee4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fee8:	70eb      	strb	r3, [r5, #3]
 800feea:	2e03      	cmp	r6, #3
 800feec:	d075      	beq.n	800ffda <ucdr_serialize_uint64_t+0x166>
 800feee:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800fef2:	712b      	strb	r3, [r5, #4]
 800fef4:	2e04      	cmp	r6, #4
 800fef6:	d074      	beq.n	800ffe2 <ucdr_serialize_uint64_t+0x16e>
 800fef8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800fefc:	716b      	strb	r3, [r5, #5]
 800fefe:	2e05      	cmp	r6, #5
 800ff00:	d073      	beq.n	800ffea <ucdr_serialize_uint64_t+0x176>
 800ff02:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800ff06:	71ab      	strb	r3, [r5, #6]
 800ff08:	2e06      	cmp	r6, #6
 800ff0a:	d072      	beq.n	800fff2 <ucdr_serialize_uint64_t+0x17e>
 800ff0c:	f89d 3000 	ldrb.w	r3, [sp]
 800ff10:	71eb      	strb	r3, [r5, #7]
 800ff12:	6923      	ldr	r3, [r4, #16]
 800ff14:	68a2      	ldr	r2, [r4, #8]
 800ff16:	7da0      	ldrb	r0, [r4, #22]
 800ff18:	3308      	adds	r3, #8
 800ff1a:	1b9e      	subs	r6, r3, r6
 800ff1c:	4442      	add	r2, r8
 800ff1e:	2308      	movs	r3, #8
 800ff20:	f080 0001 	eor.w	r0, r0, #1
 800ff24:	60a2      	str	r2, [r4, #8]
 800ff26:	6126      	str	r6, [r4, #16]
 800ff28:	7563      	strb	r3, [r4, #21]
 800ff2a:	b002      	add	sp, #8
 800ff2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff30:	2108      	movs	r1, #8
 800ff32:	4620      	mov	r0, r4
 800ff34:	f000 fa96 	bl	8010464 <ucdr_check_final_buffer_behavior>
 800ff38:	b350      	cbz	r0, 800ff90 <ucdr_serialize_uint64_t+0x11c>
 800ff3a:	7d23      	ldrb	r3, [r4, #20]
 800ff3c:	2b01      	cmp	r3, #1
 800ff3e:	d02d      	beq.n	800ff9c <ucdr_serialize_uint64_t+0x128>
 800ff40:	68a3      	ldr	r3, [r4, #8]
 800ff42:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ff46:	701a      	strb	r2, [r3, #0]
 800ff48:	68a3      	ldr	r3, [r4, #8]
 800ff4a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ff4e:	705a      	strb	r2, [r3, #1]
 800ff50:	68a3      	ldr	r3, [r4, #8]
 800ff52:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ff56:	709a      	strb	r2, [r3, #2]
 800ff58:	68a3      	ldr	r3, [r4, #8]
 800ff5a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ff5e:	70da      	strb	r2, [r3, #3]
 800ff60:	68a3      	ldr	r3, [r4, #8]
 800ff62:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ff66:	711a      	strb	r2, [r3, #4]
 800ff68:	68a3      	ldr	r3, [r4, #8]
 800ff6a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ff6e:	715a      	strb	r2, [r3, #5]
 800ff70:	68a3      	ldr	r3, [r4, #8]
 800ff72:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800ff76:	719a      	strb	r2, [r3, #6]
 800ff78:	68a3      	ldr	r3, [r4, #8]
 800ff7a:	f89d 2000 	ldrb.w	r2, [sp]
 800ff7e:	71da      	strb	r2, [r3, #7]
 800ff80:	68a2      	ldr	r2, [r4, #8]
 800ff82:	6923      	ldr	r3, [r4, #16]
 800ff84:	3208      	adds	r2, #8
 800ff86:	3308      	adds	r3, #8
 800ff88:	2108      	movs	r1, #8
 800ff8a:	60a2      	str	r2, [r4, #8]
 800ff8c:	6123      	str	r3, [r4, #16]
 800ff8e:	7561      	strb	r1, [r4, #21]
 800ff90:	7da0      	ldrb	r0, [r4, #22]
 800ff92:	f080 0001 	eor.w	r0, r0, #1
 800ff96:	b002      	add	sp, #8
 800ff98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff9c:	466b      	mov	r3, sp
 800ff9e:	cb03      	ldmia	r3!, {r0, r1}
 800ffa0:	68a3      	ldr	r3, [r4, #8]
 800ffa2:	6018      	str	r0, [r3, #0]
 800ffa4:	6059      	str	r1, [r3, #4]
 800ffa6:	e7eb      	b.n	800ff80 <ucdr_serialize_uint64_t+0x10c>
 800ffa8:	68a2      	ldr	r2, [r4, #8]
 800ffaa:	6923      	ldr	r3, [r4, #16]
 800ffac:	7da0      	ldrb	r0, [r4, #22]
 800ffae:	7567      	strb	r7, [r4, #21]
 800ffb0:	1b92      	subs	r2, r2, r6
 800ffb2:	1b9b      	subs	r3, r3, r6
 800ffb4:	f080 0001 	eor.w	r0, r0, #1
 800ffb8:	60a2      	str	r2, [r4, #8]
 800ffba:	6123      	str	r3, [r4, #16]
 800ffbc:	b002      	add	sp, #8
 800ffbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffc2:	68a3      	ldr	r3, [r4, #8]
 800ffc4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ffc8:	701a      	strb	r2, [r3, #0]
 800ffca:	68a3      	ldr	r3, [r4, #8]
 800ffcc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ffd0:	701a      	strb	r2, [r3, #0]
 800ffd2:	68a3      	ldr	r3, [r4, #8]
 800ffd4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ffd8:	701a      	strb	r2, [r3, #0]
 800ffda:	68a3      	ldr	r3, [r4, #8]
 800ffdc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800ffe0:	701a      	strb	r2, [r3, #0]
 800ffe2:	68a3      	ldr	r3, [r4, #8]
 800ffe4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800ffe8:	701a      	strb	r2, [r3, #0]
 800ffea:	68a3      	ldr	r3, [r4, #8]
 800ffec:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800fff0:	701a      	strb	r2, [r3, #0]
 800fff2:	68a3      	ldr	r3, [r4, #8]
 800fff4:	f89d 2000 	ldrb.w	r2, [sp]
 800fff8:	701a      	strb	r2, [r3, #0]
 800fffa:	e78a      	b.n	800ff12 <ucdr_serialize_uint64_t+0x9e>
 800fffc:	4628      	mov	r0, r5
 800fffe:	466d      	mov	r5, sp
 8010000:	4629      	mov	r1, r5
 8010002:	4632      	mov	r2, r6
 8010004:	f00a f8a9 	bl	801a15a <memcpy>
 8010008:	68a0      	ldr	r0, [r4, #8]
 801000a:	4642      	mov	r2, r8
 801000c:	19a9      	adds	r1, r5, r6
 801000e:	f00a f8a4 	bl	801a15a <memcpy>
 8010012:	e77e      	b.n	800ff12 <ucdr_serialize_uint64_t+0x9e>

08010014 <ucdr_serialize_int16_t>:
 8010014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010018:	b082      	sub	sp, #8
 801001a:	460b      	mov	r3, r1
 801001c:	2102      	movs	r1, #2
 801001e:	4604      	mov	r4, r0
 8010020:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010024:	f000 fa72 	bl	801050c <ucdr_buffer_alignment>
 8010028:	4601      	mov	r1, r0
 801002a:	4620      	mov	r0, r4
 801002c:	7d67      	ldrb	r7, [r4, #21]
 801002e:	f000 fab1 	bl	8010594 <ucdr_advance_buffer>
 8010032:	2102      	movs	r1, #2
 8010034:	4620      	mov	r0, r4
 8010036:	f000 fa09 	bl	801044c <ucdr_check_buffer_available_for>
 801003a:	bb78      	cbnz	r0, 801009c <ucdr_serialize_int16_t+0x88>
 801003c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010040:	42ab      	cmp	r3, r5
 8010042:	d926      	bls.n	8010092 <ucdr_serialize_int16_t+0x7e>
 8010044:	1b5e      	subs	r6, r3, r5
 8010046:	60a3      	str	r3, [r4, #8]
 8010048:	6923      	ldr	r3, [r4, #16]
 801004a:	f1c6 0802 	rsb	r8, r6, #2
 801004e:	4433      	add	r3, r6
 8010050:	6123      	str	r3, [r4, #16]
 8010052:	4641      	mov	r1, r8
 8010054:	4620      	mov	r0, r4
 8010056:	f000 fa05 	bl	8010464 <ucdr_check_final_buffer_behavior>
 801005a:	2800      	cmp	r0, #0
 801005c:	d03b      	beq.n	80100d6 <ucdr_serialize_int16_t+0xc2>
 801005e:	7d23      	ldrb	r3, [r4, #20]
 8010060:	2b01      	cmp	r3, #1
 8010062:	d04a      	beq.n	80100fa <ucdr_serialize_int16_t+0xe6>
 8010064:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010068:	702b      	strb	r3, [r5, #0]
 801006a:	2e00      	cmp	r6, #0
 801006c:	d040      	beq.n	80100f0 <ucdr_serialize_int16_t+0xdc>
 801006e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010072:	706b      	strb	r3, [r5, #1]
 8010074:	6923      	ldr	r3, [r4, #16]
 8010076:	68a2      	ldr	r2, [r4, #8]
 8010078:	7da0      	ldrb	r0, [r4, #22]
 801007a:	3302      	adds	r3, #2
 801007c:	1b9e      	subs	r6, r3, r6
 801007e:	4442      	add	r2, r8
 8010080:	2302      	movs	r3, #2
 8010082:	f080 0001 	eor.w	r0, r0, #1
 8010086:	60a2      	str	r2, [r4, #8]
 8010088:	6126      	str	r6, [r4, #16]
 801008a:	7563      	strb	r3, [r4, #21]
 801008c:	b002      	add	sp, #8
 801008e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010092:	2102      	movs	r1, #2
 8010094:	4620      	mov	r0, r4
 8010096:	f000 f9e5 	bl	8010464 <ucdr_check_final_buffer_behavior>
 801009a:	b190      	cbz	r0, 80100c2 <ucdr_serialize_int16_t+0xae>
 801009c:	7d23      	ldrb	r3, [r4, #20]
 801009e:	2b01      	cmp	r3, #1
 80100a0:	68a3      	ldr	r3, [r4, #8]
 80100a2:	d014      	beq.n	80100ce <ucdr_serialize_int16_t+0xba>
 80100a4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80100a8:	701a      	strb	r2, [r3, #0]
 80100aa:	68a3      	ldr	r3, [r4, #8]
 80100ac:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80100b0:	705a      	strb	r2, [r3, #1]
 80100b2:	68a2      	ldr	r2, [r4, #8]
 80100b4:	6923      	ldr	r3, [r4, #16]
 80100b6:	3202      	adds	r2, #2
 80100b8:	3302      	adds	r3, #2
 80100ba:	2102      	movs	r1, #2
 80100bc:	60a2      	str	r2, [r4, #8]
 80100be:	6123      	str	r3, [r4, #16]
 80100c0:	7561      	strb	r1, [r4, #21]
 80100c2:	7da0      	ldrb	r0, [r4, #22]
 80100c4:	f080 0001 	eor.w	r0, r0, #1
 80100c8:	b002      	add	sp, #8
 80100ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100ce:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80100d2:	801a      	strh	r2, [r3, #0]
 80100d4:	e7ed      	b.n	80100b2 <ucdr_serialize_int16_t+0x9e>
 80100d6:	68a2      	ldr	r2, [r4, #8]
 80100d8:	6923      	ldr	r3, [r4, #16]
 80100da:	7da0      	ldrb	r0, [r4, #22]
 80100dc:	7567      	strb	r7, [r4, #21]
 80100de:	1b92      	subs	r2, r2, r6
 80100e0:	1b9b      	subs	r3, r3, r6
 80100e2:	f080 0001 	eor.w	r0, r0, #1
 80100e6:	60a2      	str	r2, [r4, #8]
 80100e8:	6123      	str	r3, [r4, #16]
 80100ea:	b002      	add	sp, #8
 80100ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100f0:	68a3      	ldr	r3, [r4, #8]
 80100f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80100f6:	701a      	strb	r2, [r3, #0]
 80100f8:	e7bc      	b.n	8010074 <ucdr_serialize_int16_t+0x60>
 80100fa:	4628      	mov	r0, r5
 80100fc:	f10d 0506 	add.w	r5, sp, #6
 8010100:	4629      	mov	r1, r5
 8010102:	4632      	mov	r2, r6
 8010104:	f00a f829 	bl	801a15a <memcpy>
 8010108:	68a0      	ldr	r0, [r4, #8]
 801010a:	4642      	mov	r2, r8
 801010c:	19a9      	adds	r1, r5, r6
 801010e:	f00a f824 	bl	801a15a <memcpy>
 8010112:	e7af      	b.n	8010074 <ucdr_serialize_int16_t+0x60>

08010114 <ucdr_deserialize_int16_t>:
 8010114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010118:	460d      	mov	r5, r1
 801011a:	2102      	movs	r1, #2
 801011c:	4604      	mov	r4, r0
 801011e:	f000 f9f5 	bl	801050c <ucdr_buffer_alignment>
 8010122:	4601      	mov	r1, r0
 8010124:	4620      	mov	r0, r4
 8010126:	f894 8015 	ldrb.w	r8, [r4, #21]
 801012a:	f000 fa33 	bl	8010594 <ucdr_advance_buffer>
 801012e:	2102      	movs	r1, #2
 8010130:	4620      	mov	r0, r4
 8010132:	f000 f98b 	bl	801044c <ucdr_check_buffer_available_for>
 8010136:	bb60      	cbnz	r0, 8010192 <ucdr_deserialize_int16_t+0x7e>
 8010138:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801013c:	42be      	cmp	r6, r7
 801013e:	d923      	bls.n	8010188 <ucdr_deserialize_int16_t+0x74>
 8010140:	6923      	ldr	r3, [r4, #16]
 8010142:	60a6      	str	r6, [r4, #8]
 8010144:	1bf6      	subs	r6, r6, r7
 8010146:	4433      	add	r3, r6
 8010148:	f1c6 0902 	rsb	r9, r6, #2
 801014c:	6123      	str	r3, [r4, #16]
 801014e:	4649      	mov	r1, r9
 8010150:	4620      	mov	r0, r4
 8010152:	f000 f987 	bl	8010464 <ucdr_check_final_buffer_behavior>
 8010156:	2800      	cmp	r0, #0
 8010158:	d034      	beq.n	80101c4 <ucdr_deserialize_int16_t+0xb0>
 801015a:	7d23      	ldrb	r3, [r4, #20]
 801015c:	2b01      	cmp	r3, #1
 801015e:	d042      	beq.n	80101e6 <ucdr_deserialize_int16_t+0xd2>
 8010160:	787b      	ldrb	r3, [r7, #1]
 8010162:	702b      	strb	r3, [r5, #0]
 8010164:	2e00      	cmp	r6, #0
 8010166:	d03a      	beq.n	80101de <ucdr_deserialize_int16_t+0xca>
 8010168:	783b      	ldrb	r3, [r7, #0]
 801016a:	706b      	strb	r3, [r5, #1]
 801016c:	6923      	ldr	r3, [r4, #16]
 801016e:	68a2      	ldr	r2, [r4, #8]
 8010170:	7da0      	ldrb	r0, [r4, #22]
 8010172:	2102      	movs	r1, #2
 8010174:	3302      	adds	r3, #2
 8010176:	444a      	add	r2, r9
 8010178:	1b9b      	subs	r3, r3, r6
 801017a:	7561      	strb	r1, [r4, #21]
 801017c:	60a2      	str	r2, [r4, #8]
 801017e:	6123      	str	r3, [r4, #16]
 8010180:	f080 0001 	eor.w	r0, r0, #1
 8010184:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010188:	2102      	movs	r1, #2
 801018a:	4620      	mov	r0, r4
 801018c:	f000 f96a 	bl	8010464 <ucdr_check_final_buffer_behavior>
 8010190:	b180      	cbz	r0, 80101b4 <ucdr_deserialize_int16_t+0xa0>
 8010192:	7d23      	ldrb	r3, [r4, #20]
 8010194:	2b01      	cmp	r3, #1
 8010196:	68a3      	ldr	r3, [r4, #8]
 8010198:	d011      	beq.n	80101be <ucdr_deserialize_int16_t+0xaa>
 801019a:	785b      	ldrb	r3, [r3, #1]
 801019c:	702b      	strb	r3, [r5, #0]
 801019e:	68a3      	ldr	r3, [r4, #8]
 80101a0:	781b      	ldrb	r3, [r3, #0]
 80101a2:	706b      	strb	r3, [r5, #1]
 80101a4:	68a2      	ldr	r2, [r4, #8]
 80101a6:	6923      	ldr	r3, [r4, #16]
 80101a8:	3202      	adds	r2, #2
 80101aa:	3302      	adds	r3, #2
 80101ac:	2102      	movs	r1, #2
 80101ae:	60a2      	str	r2, [r4, #8]
 80101b0:	6123      	str	r3, [r4, #16]
 80101b2:	7561      	strb	r1, [r4, #21]
 80101b4:	7da0      	ldrb	r0, [r4, #22]
 80101b6:	f080 0001 	eor.w	r0, r0, #1
 80101ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101be:	881b      	ldrh	r3, [r3, #0]
 80101c0:	802b      	strh	r3, [r5, #0]
 80101c2:	e7ef      	b.n	80101a4 <ucdr_deserialize_int16_t+0x90>
 80101c4:	68a2      	ldr	r2, [r4, #8]
 80101c6:	6923      	ldr	r3, [r4, #16]
 80101c8:	7da0      	ldrb	r0, [r4, #22]
 80101ca:	f884 8015 	strb.w	r8, [r4, #21]
 80101ce:	1b92      	subs	r2, r2, r6
 80101d0:	1b9b      	subs	r3, r3, r6
 80101d2:	60a2      	str	r2, [r4, #8]
 80101d4:	6123      	str	r3, [r4, #16]
 80101d6:	f080 0001 	eor.w	r0, r0, #1
 80101da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101de:	68a3      	ldr	r3, [r4, #8]
 80101e0:	781b      	ldrb	r3, [r3, #0]
 80101e2:	706b      	strb	r3, [r5, #1]
 80101e4:	e7c2      	b.n	801016c <ucdr_deserialize_int16_t+0x58>
 80101e6:	4639      	mov	r1, r7
 80101e8:	4632      	mov	r2, r6
 80101ea:	4628      	mov	r0, r5
 80101ec:	f009 ffb5 	bl	801a15a <memcpy>
 80101f0:	68a1      	ldr	r1, [r4, #8]
 80101f2:	464a      	mov	r2, r9
 80101f4:	19a8      	adds	r0, r5, r6
 80101f6:	f009 ffb0 	bl	801a15a <memcpy>
 80101fa:	e7b7      	b.n	801016c <ucdr_deserialize_int16_t+0x58>

080101fc <ucdr_serialize_int32_t>:
 80101fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010200:	b082      	sub	sp, #8
 8010202:	4604      	mov	r4, r0
 8010204:	9101      	str	r1, [sp, #4]
 8010206:	2104      	movs	r1, #4
 8010208:	f000 f980 	bl	801050c <ucdr_buffer_alignment>
 801020c:	4601      	mov	r1, r0
 801020e:	4620      	mov	r0, r4
 8010210:	7d67      	ldrb	r7, [r4, #21]
 8010212:	f000 f9bf 	bl	8010594 <ucdr_advance_buffer>
 8010216:	2104      	movs	r1, #4
 8010218:	4620      	mov	r0, r4
 801021a:	f000 f917 	bl	801044c <ucdr_check_buffer_available_for>
 801021e:	2800      	cmp	r0, #0
 8010220:	d139      	bne.n	8010296 <ucdr_serialize_int32_t+0x9a>
 8010222:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010226:	42ab      	cmp	r3, r5
 8010228:	d930      	bls.n	801028c <ucdr_serialize_int32_t+0x90>
 801022a:	1b5e      	subs	r6, r3, r5
 801022c:	60a3      	str	r3, [r4, #8]
 801022e:	6923      	ldr	r3, [r4, #16]
 8010230:	f1c6 0804 	rsb	r8, r6, #4
 8010234:	4433      	add	r3, r6
 8010236:	6123      	str	r3, [r4, #16]
 8010238:	4641      	mov	r1, r8
 801023a:	4620      	mov	r0, r4
 801023c:	f000 f912 	bl	8010464 <ucdr_check_final_buffer_behavior>
 8010240:	2800      	cmp	r0, #0
 8010242:	d04c      	beq.n	80102de <ucdr_serialize_int32_t+0xe2>
 8010244:	7d23      	ldrb	r3, [r4, #20]
 8010246:	2b01      	cmp	r3, #1
 8010248:	d063      	beq.n	8010312 <ucdr_serialize_int32_t+0x116>
 801024a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801024e:	702b      	strb	r3, [r5, #0]
 8010250:	2e00      	cmp	r6, #0
 8010252:	d051      	beq.n	80102f8 <ucdr_serialize_int32_t+0xfc>
 8010254:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010258:	706b      	strb	r3, [r5, #1]
 801025a:	2e01      	cmp	r6, #1
 801025c:	d050      	beq.n	8010300 <ucdr_serialize_int32_t+0x104>
 801025e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010262:	70ab      	strb	r3, [r5, #2]
 8010264:	2e02      	cmp	r6, #2
 8010266:	d04f      	beq.n	8010308 <ucdr_serialize_int32_t+0x10c>
 8010268:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801026c:	70eb      	strb	r3, [r5, #3]
 801026e:	6923      	ldr	r3, [r4, #16]
 8010270:	68a2      	ldr	r2, [r4, #8]
 8010272:	7da0      	ldrb	r0, [r4, #22]
 8010274:	3304      	adds	r3, #4
 8010276:	1b9e      	subs	r6, r3, r6
 8010278:	4442      	add	r2, r8
 801027a:	2304      	movs	r3, #4
 801027c:	f080 0001 	eor.w	r0, r0, #1
 8010280:	60a2      	str	r2, [r4, #8]
 8010282:	6126      	str	r6, [r4, #16]
 8010284:	7563      	strb	r3, [r4, #21]
 8010286:	b002      	add	sp, #8
 8010288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801028c:	2104      	movs	r1, #4
 801028e:	4620      	mov	r0, r4
 8010290:	f000 f8e8 	bl	8010464 <ucdr_check_final_buffer_behavior>
 8010294:	b1d0      	cbz	r0, 80102cc <ucdr_serialize_int32_t+0xd0>
 8010296:	7d23      	ldrb	r3, [r4, #20]
 8010298:	2b01      	cmp	r3, #1
 801029a:	68a3      	ldr	r3, [r4, #8]
 801029c:	d01c      	beq.n	80102d8 <ucdr_serialize_int32_t+0xdc>
 801029e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80102a2:	701a      	strb	r2, [r3, #0]
 80102a4:	68a3      	ldr	r3, [r4, #8]
 80102a6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80102aa:	705a      	strb	r2, [r3, #1]
 80102ac:	68a3      	ldr	r3, [r4, #8]
 80102ae:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80102b2:	709a      	strb	r2, [r3, #2]
 80102b4:	68a3      	ldr	r3, [r4, #8]
 80102b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80102ba:	70da      	strb	r2, [r3, #3]
 80102bc:	68a2      	ldr	r2, [r4, #8]
 80102be:	6923      	ldr	r3, [r4, #16]
 80102c0:	3204      	adds	r2, #4
 80102c2:	3304      	adds	r3, #4
 80102c4:	2104      	movs	r1, #4
 80102c6:	60a2      	str	r2, [r4, #8]
 80102c8:	6123      	str	r3, [r4, #16]
 80102ca:	7561      	strb	r1, [r4, #21]
 80102cc:	7da0      	ldrb	r0, [r4, #22]
 80102ce:	f080 0001 	eor.w	r0, r0, #1
 80102d2:	b002      	add	sp, #8
 80102d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102d8:	9a01      	ldr	r2, [sp, #4]
 80102da:	601a      	str	r2, [r3, #0]
 80102dc:	e7ee      	b.n	80102bc <ucdr_serialize_int32_t+0xc0>
 80102de:	68a2      	ldr	r2, [r4, #8]
 80102e0:	6923      	ldr	r3, [r4, #16]
 80102e2:	7da0      	ldrb	r0, [r4, #22]
 80102e4:	7567      	strb	r7, [r4, #21]
 80102e6:	1b92      	subs	r2, r2, r6
 80102e8:	1b9b      	subs	r3, r3, r6
 80102ea:	f080 0001 	eor.w	r0, r0, #1
 80102ee:	60a2      	str	r2, [r4, #8]
 80102f0:	6123      	str	r3, [r4, #16]
 80102f2:	b002      	add	sp, #8
 80102f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102f8:	68a3      	ldr	r3, [r4, #8]
 80102fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80102fe:	701a      	strb	r2, [r3, #0]
 8010300:	68a3      	ldr	r3, [r4, #8]
 8010302:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010306:	701a      	strb	r2, [r3, #0]
 8010308:	68a3      	ldr	r3, [r4, #8]
 801030a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801030e:	701a      	strb	r2, [r3, #0]
 8010310:	e7ad      	b.n	801026e <ucdr_serialize_int32_t+0x72>
 8010312:	4628      	mov	r0, r5
 8010314:	ad01      	add	r5, sp, #4
 8010316:	4629      	mov	r1, r5
 8010318:	4632      	mov	r2, r6
 801031a:	f009 ff1e 	bl	801a15a <memcpy>
 801031e:	68a0      	ldr	r0, [r4, #8]
 8010320:	4642      	mov	r2, r8
 8010322:	19a9      	adds	r1, r5, r6
 8010324:	f009 ff19 	bl	801a15a <memcpy>
 8010328:	e7a1      	b.n	801026e <ucdr_serialize_int32_t+0x72>
 801032a:	bf00      	nop

0801032c <ucdr_deserialize_int32_t>:
 801032c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010330:	460d      	mov	r5, r1
 8010332:	2104      	movs	r1, #4
 8010334:	4604      	mov	r4, r0
 8010336:	f000 f8e9 	bl	801050c <ucdr_buffer_alignment>
 801033a:	4601      	mov	r1, r0
 801033c:	4620      	mov	r0, r4
 801033e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010342:	f000 f927 	bl	8010594 <ucdr_advance_buffer>
 8010346:	2104      	movs	r1, #4
 8010348:	4620      	mov	r0, r4
 801034a:	f000 f87f 	bl	801044c <ucdr_check_buffer_available_for>
 801034e:	2800      	cmp	r0, #0
 8010350:	d138      	bne.n	80103c4 <ucdr_deserialize_int32_t+0x98>
 8010352:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8010356:	42b7      	cmp	r7, r6
 8010358:	d92f      	bls.n	80103ba <ucdr_deserialize_int32_t+0x8e>
 801035a:	6923      	ldr	r3, [r4, #16]
 801035c:	60a7      	str	r7, [r4, #8]
 801035e:	1bbf      	subs	r7, r7, r6
 8010360:	443b      	add	r3, r7
 8010362:	f1c7 0904 	rsb	r9, r7, #4
 8010366:	6123      	str	r3, [r4, #16]
 8010368:	4649      	mov	r1, r9
 801036a:	4620      	mov	r0, r4
 801036c:	f000 f87a 	bl	8010464 <ucdr_check_final_buffer_behavior>
 8010370:	2800      	cmp	r0, #0
 8010372:	d046      	beq.n	8010402 <ucdr_deserialize_int32_t+0xd6>
 8010374:	7d23      	ldrb	r3, [r4, #20]
 8010376:	2b01      	cmp	r3, #1
 8010378:	d05c      	beq.n	8010434 <ucdr_deserialize_int32_t+0x108>
 801037a:	78f3      	ldrb	r3, [r6, #3]
 801037c:	702b      	strb	r3, [r5, #0]
 801037e:	2f00      	cmp	r7, #0
 8010380:	d04c      	beq.n	801041c <ucdr_deserialize_int32_t+0xf0>
 8010382:	78b3      	ldrb	r3, [r6, #2]
 8010384:	706b      	strb	r3, [r5, #1]
 8010386:	2f01      	cmp	r7, #1
 8010388:	f105 0302 	add.w	r3, r5, #2
 801038c:	d04a      	beq.n	8010424 <ucdr_deserialize_int32_t+0xf8>
 801038e:	7873      	ldrb	r3, [r6, #1]
 8010390:	70ab      	strb	r3, [r5, #2]
 8010392:	2f02      	cmp	r7, #2
 8010394:	f105 0303 	add.w	r3, r5, #3
 8010398:	d048      	beq.n	801042c <ucdr_deserialize_int32_t+0x100>
 801039a:	7833      	ldrb	r3, [r6, #0]
 801039c:	70eb      	strb	r3, [r5, #3]
 801039e:	6923      	ldr	r3, [r4, #16]
 80103a0:	68a2      	ldr	r2, [r4, #8]
 80103a2:	7da0      	ldrb	r0, [r4, #22]
 80103a4:	2104      	movs	r1, #4
 80103a6:	3304      	adds	r3, #4
 80103a8:	444a      	add	r2, r9
 80103aa:	1bdb      	subs	r3, r3, r7
 80103ac:	7561      	strb	r1, [r4, #21]
 80103ae:	60a2      	str	r2, [r4, #8]
 80103b0:	6123      	str	r3, [r4, #16]
 80103b2:	f080 0001 	eor.w	r0, r0, #1
 80103b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103ba:	2104      	movs	r1, #4
 80103bc:	4620      	mov	r0, r4
 80103be:	f000 f851 	bl	8010464 <ucdr_check_final_buffer_behavior>
 80103c2:	b1b0      	cbz	r0, 80103f2 <ucdr_deserialize_int32_t+0xc6>
 80103c4:	7d23      	ldrb	r3, [r4, #20]
 80103c6:	2b01      	cmp	r3, #1
 80103c8:	68a3      	ldr	r3, [r4, #8]
 80103ca:	d017      	beq.n	80103fc <ucdr_deserialize_int32_t+0xd0>
 80103cc:	78db      	ldrb	r3, [r3, #3]
 80103ce:	702b      	strb	r3, [r5, #0]
 80103d0:	68a3      	ldr	r3, [r4, #8]
 80103d2:	789b      	ldrb	r3, [r3, #2]
 80103d4:	706b      	strb	r3, [r5, #1]
 80103d6:	68a3      	ldr	r3, [r4, #8]
 80103d8:	785b      	ldrb	r3, [r3, #1]
 80103da:	70ab      	strb	r3, [r5, #2]
 80103dc:	68a3      	ldr	r3, [r4, #8]
 80103de:	781b      	ldrb	r3, [r3, #0]
 80103e0:	70eb      	strb	r3, [r5, #3]
 80103e2:	68a2      	ldr	r2, [r4, #8]
 80103e4:	6923      	ldr	r3, [r4, #16]
 80103e6:	3204      	adds	r2, #4
 80103e8:	3304      	adds	r3, #4
 80103ea:	2104      	movs	r1, #4
 80103ec:	60a2      	str	r2, [r4, #8]
 80103ee:	6123      	str	r3, [r4, #16]
 80103f0:	7561      	strb	r1, [r4, #21]
 80103f2:	7da0      	ldrb	r0, [r4, #22]
 80103f4:	f080 0001 	eor.w	r0, r0, #1
 80103f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	602b      	str	r3, [r5, #0]
 8010400:	e7ef      	b.n	80103e2 <ucdr_deserialize_int32_t+0xb6>
 8010402:	68a2      	ldr	r2, [r4, #8]
 8010404:	6923      	ldr	r3, [r4, #16]
 8010406:	7da0      	ldrb	r0, [r4, #22]
 8010408:	f884 8015 	strb.w	r8, [r4, #21]
 801040c:	1bd2      	subs	r2, r2, r7
 801040e:	1bdb      	subs	r3, r3, r7
 8010410:	60a2      	str	r2, [r4, #8]
 8010412:	6123      	str	r3, [r4, #16]
 8010414:	f080 0001 	eor.w	r0, r0, #1
 8010418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801041c:	68a3      	ldr	r3, [r4, #8]
 801041e:	789b      	ldrb	r3, [r3, #2]
 8010420:	706b      	strb	r3, [r5, #1]
 8010422:	1cab      	adds	r3, r5, #2
 8010424:	68a2      	ldr	r2, [r4, #8]
 8010426:	7852      	ldrb	r2, [r2, #1]
 8010428:	f803 2b01 	strb.w	r2, [r3], #1
 801042c:	68a2      	ldr	r2, [r4, #8]
 801042e:	7812      	ldrb	r2, [r2, #0]
 8010430:	701a      	strb	r2, [r3, #0]
 8010432:	e7b4      	b.n	801039e <ucdr_deserialize_int32_t+0x72>
 8010434:	4631      	mov	r1, r6
 8010436:	463a      	mov	r2, r7
 8010438:	4628      	mov	r0, r5
 801043a:	f009 fe8e 	bl	801a15a <memcpy>
 801043e:	68a1      	ldr	r1, [r4, #8]
 8010440:	464a      	mov	r2, r9
 8010442:	19e8      	adds	r0, r5, r7
 8010444:	f009 fe89 	bl	801a15a <memcpy>
 8010448:	e7a9      	b.n	801039e <ucdr_deserialize_int32_t+0x72>
 801044a:	bf00      	nop

0801044c <ucdr_check_buffer_available_for>:
 801044c:	7d83      	ldrb	r3, [r0, #22]
 801044e:	b93b      	cbnz	r3, 8010460 <ucdr_check_buffer_available_for+0x14>
 8010450:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8010454:	4419      	add	r1, r3
 8010456:	4288      	cmp	r0, r1
 8010458:	bf34      	ite	cc
 801045a:	2000      	movcc	r0, #0
 801045c:	2001      	movcs	r0, #1
 801045e:	4770      	bx	lr
 8010460:	2000      	movs	r0, #0
 8010462:	4770      	bx	lr

08010464 <ucdr_check_final_buffer_behavior>:
 8010464:	7d83      	ldrb	r3, [r0, #22]
 8010466:	b943      	cbnz	r3, 801047a <ucdr_check_final_buffer_behavior+0x16>
 8010468:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 801046c:	4291      	cmp	r1, r2
 801046e:	b510      	push	{r4, lr}
 8010470:	4604      	mov	r4, r0
 8010472:	d205      	bcs.n	8010480 <ucdr_check_final_buffer_behavior+0x1c>
 8010474:	2301      	movs	r3, #1
 8010476:	4618      	mov	r0, r3
 8010478:	bd10      	pop	{r4, pc}
 801047a:	2300      	movs	r3, #0
 801047c:	4618      	mov	r0, r3
 801047e:	4770      	bx	lr
 8010480:	6982      	ldr	r2, [r0, #24]
 8010482:	b13a      	cbz	r2, 8010494 <ucdr_check_final_buffer_behavior+0x30>
 8010484:	69c1      	ldr	r1, [r0, #28]
 8010486:	4790      	blx	r2
 8010488:	f080 0301 	eor.w	r3, r0, #1
 801048c:	b2db      	uxtb	r3, r3
 801048e:	75a0      	strb	r0, [r4, #22]
 8010490:	4618      	mov	r0, r3
 8010492:	bd10      	pop	{r4, pc}
 8010494:	2001      	movs	r0, #1
 8010496:	75a0      	strb	r0, [r4, #22]
 8010498:	e7fa      	b.n	8010490 <ucdr_check_final_buffer_behavior+0x2c>
 801049a:	bf00      	nop

0801049c <ucdr_set_on_full_buffer_callback>:
 801049c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 80104a0:	4770      	bx	lr
 80104a2:	bf00      	nop

080104a4 <ucdr_init_buffer_origin_offset_endian>:
 80104a4:	b410      	push	{r4}
 80104a6:	9c01      	ldr	r4, [sp, #4]
 80104a8:	6001      	str	r1, [r0, #0]
 80104aa:	440a      	add	r2, r1
 80104ac:	6042      	str	r2, [r0, #4]
 80104ae:	190a      	adds	r2, r1, r4
 80104b0:	441c      	add	r4, r3
 80104b2:	e9c0 3403 	strd	r3, r4, [r0, #12]
 80104b6:	6082      	str	r2, [r0, #8]
 80104b8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80104bc:	7503      	strb	r3, [r0, #20]
 80104be:	2200      	movs	r2, #0
 80104c0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80104c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104c8:	7542      	strb	r2, [r0, #21]
 80104ca:	7582      	strb	r2, [r0, #22]
 80104cc:	4770      	bx	lr
 80104ce:	bf00      	nop

080104d0 <ucdr_init_buffer_origin_offset>:
 80104d0:	b510      	push	{r4, lr}
 80104d2:	b082      	sub	sp, #8
 80104d4:	9c04      	ldr	r4, [sp, #16]
 80104d6:	9400      	str	r4, [sp, #0]
 80104d8:	2401      	movs	r4, #1
 80104da:	9401      	str	r4, [sp, #4]
 80104dc:	f7ff ffe2 	bl	80104a4 <ucdr_init_buffer_origin_offset_endian>
 80104e0:	b002      	add	sp, #8
 80104e2:	bd10      	pop	{r4, pc}

080104e4 <ucdr_init_buffer_origin>:
 80104e4:	b510      	push	{r4, lr}
 80104e6:	b082      	sub	sp, #8
 80104e8:	2400      	movs	r4, #0
 80104ea:	9400      	str	r4, [sp, #0]
 80104ec:	f7ff fff0 	bl	80104d0 <ucdr_init_buffer_origin_offset>
 80104f0:	b002      	add	sp, #8
 80104f2:	bd10      	pop	{r4, pc}

080104f4 <ucdr_init_buffer>:
 80104f4:	2300      	movs	r3, #0
 80104f6:	f7ff bff5 	b.w	80104e4 <ucdr_init_buffer_origin>
 80104fa:	bf00      	nop

080104fc <ucdr_alignment>:
 80104fc:	fbb0 f3f1 	udiv	r3, r0, r1
 8010500:	fb03 0011 	mls	r0, r3, r1, r0
 8010504:	1a08      	subs	r0, r1, r0
 8010506:	3901      	subs	r1, #1
 8010508:	4008      	ands	r0, r1
 801050a:	4770      	bx	lr

0801050c <ucdr_buffer_alignment>:
 801050c:	7d43      	ldrb	r3, [r0, #21]
 801050e:	428b      	cmp	r3, r1
 8010510:	d208      	bcs.n	8010524 <ucdr_buffer_alignment+0x18>
 8010512:	6900      	ldr	r0, [r0, #16]
 8010514:	fbb0 f3f1 	udiv	r3, r0, r1
 8010518:	fb01 0013 	mls	r0, r1, r3, r0
 801051c:	1a08      	subs	r0, r1, r0
 801051e:	3901      	subs	r1, #1
 8010520:	4008      	ands	r0, r1
 8010522:	4770      	bx	lr
 8010524:	2000      	movs	r0, #0
 8010526:	4770      	bx	lr

08010528 <ucdr_align_to>:
 8010528:	b538      	push	{r3, r4, r5, lr}
 801052a:	4604      	mov	r4, r0
 801052c:	460d      	mov	r5, r1
 801052e:	f7ff ffed 	bl	801050c <ucdr_buffer_alignment>
 8010532:	68a3      	ldr	r3, [r4, #8]
 8010534:	6921      	ldr	r1, [r4, #16]
 8010536:	7565      	strb	r5, [r4, #21]
 8010538:	181a      	adds	r2, r3, r0
 801053a:	6863      	ldr	r3, [r4, #4]
 801053c:	4293      	cmp	r3, r2
 801053e:	4408      	add	r0, r1
 8010540:	bf28      	it	cs
 8010542:	4613      	movcs	r3, r2
 8010544:	6120      	str	r0, [r4, #16]
 8010546:	60a3      	str	r3, [r4, #8]
 8010548:	bd38      	pop	{r3, r4, r5, pc}
 801054a:	bf00      	nop

0801054c <ucdr_buffer_length>:
 801054c:	6882      	ldr	r2, [r0, #8]
 801054e:	6800      	ldr	r0, [r0, #0]
 8010550:	1a10      	subs	r0, r2, r0
 8010552:	4770      	bx	lr

08010554 <ucdr_buffer_remaining>:
 8010554:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8010558:	1a10      	subs	r0, r2, r0
 801055a:	4770      	bx	lr

0801055c <ucdr_check_final_buffer_behavior_array>:
 801055c:	b538      	push	{r3, r4, r5, lr}
 801055e:	7d83      	ldrb	r3, [r0, #22]
 8010560:	b963      	cbnz	r3, 801057c <ucdr_check_final_buffer_behavior_array+0x20>
 8010562:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8010566:	429a      	cmp	r2, r3
 8010568:	4604      	mov	r4, r0
 801056a:	460d      	mov	r5, r1
 801056c:	d308      	bcc.n	8010580 <ucdr_check_final_buffer_behavior_array+0x24>
 801056e:	b139      	cbz	r1, 8010580 <ucdr_check_final_buffer_behavior_array+0x24>
 8010570:	6983      	ldr	r3, [r0, #24]
 8010572:	b163      	cbz	r3, 801058e <ucdr_check_final_buffer_behavior_array+0x32>
 8010574:	69c1      	ldr	r1, [r0, #28]
 8010576:	4798      	blx	r3
 8010578:	75a0      	strb	r0, [r4, #22]
 801057a:	b108      	cbz	r0, 8010580 <ucdr_check_final_buffer_behavior_array+0x24>
 801057c:	2000      	movs	r0, #0
 801057e:	bd38      	pop	{r3, r4, r5, pc}
 8010580:	4620      	mov	r0, r4
 8010582:	f7ff ffe7 	bl	8010554 <ucdr_buffer_remaining>
 8010586:	42a8      	cmp	r0, r5
 8010588:	bf28      	it	cs
 801058a:	4628      	movcs	r0, r5
 801058c:	bd38      	pop	{r3, r4, r5, pc}
 801058e:	2301      	movs	r3, #1
 8010590:	7583      	strb	r3, [r0, #22]
 8010592:	e7f3      	b.n	801057c <ucdr_check_final_buffer_behavior_array+0x20>

08010594 <ucdr_advance_buffer>:
 8010594:	b538      	push	{r3, r4, r5, lr}
 8010596:	4604      	mov	r4, r0
 8010598:	460d      	mov	r5, r1
 801059a:	f7ff ff57 	bl	801044c <ucdr_check_buffer_available_for>
 801059e:	b178      	cbz	r0, 80105c0 <ucdr_advance_buffer+0x2c>
 80105a0:	6923      	ldr	r3, [r4, #16]
 80105a2:	68a2      	ldr	r2, [r4, #8]
 80105a4:	442b      	add	r3, r5
 80105a6:	6123      	str	r3, [r4, #16]
 80105a8:	2301      	movs	r3, #1
 80105aa:	442a      	add	r2, r5
 80105ac:	7563      	strb	r3, [r4, #21]
 80105ae:	60a2      	str	r2, [r4, #8]
 80105b0:	bd38      	pop	{r3, r4, r5, pc}
 80105b2:	68a2      	ldr	r2, [r4, #8]
 80105b4:	6923      	ldr	r3, [r4, #16]
 80105b6:	4402      	add	r2, r0
 80105b8:	4403      	add	r3, r0
 80105ba:	1a2d      	subs	r5, r5, r0
 80105bc:	60a2      	str	r2, [r4, #8]
 80105be:	6123      	str	r3, [r4, #16]
 80105c0:	4629      	mov	r1, r5
 80105c2:	2201      	movs	r2, #1
 80105c4:	4620      	mov	r0, r4
 80105c6:	f7ff ffc9 	bl	801055c <ucdr_check_final_buffer_behavior_array>
 80105ca:	2800      	cmp	r0, #0
 80105cc:	d1f1      	bne.n	80105b2 <ucdr_advance_buffer+0x1e>
 80105ce:	2301      	movs	r3, #1
 80105d0:	7563      	strb	r3, [r4, #21]
 80105d2:	bd38      	pop	{r3, r4, r5, pc}

080105d4 <uxr_buffer_delete_entity>:
 80105d4:	b510      	push	{r4, lr}
 80105d6:	2300      	movs	r3, #0
 80105d8:	b08e      	sub	sp, #56	@ 0x38
 80105da:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80105de:	2303      	movs	r3, #3
 80105e0:	9300      	str	r3, [sp, #0]
 80105e2:	2204      	movs	r2, #4
 80105e4:	ab06      	add	r3, sp, #24
 80105e6:	4604      	mov	r4, r0
 80105e8:	9103      	str	r1, [sp, #12]
 80105ea:	f001 fb43 	bl	8011c74 <uxr_prepare_stream_to_write_submessage>
 80105ee:	b918      	cbnz	r0, 80105f8 <uxr_buffer_delete_entity+0x24>
 80105f0:	4604      	mov	r4, r0
 80105f2:	4620      	mov	r0, r4
 80105f4:	b00e      	add	sp, #56	@ 0x38
 80105f6:	bd10      	pop	{r4, pc}
 80105f8:	9902      	ldr	r1, [sp, #8]
 80105fa:	aa05      	add	r2, sp, #20
 80105fc:	4620      	mov	r0, r4
 80105fe:	f001 fc6f 	bl	8011ee0 <uxr_init_base_object_request>
 8010602:	a905      	add	r1, sp, #20
 8010604:	4604      	mov	r4, r0
 8010606:	a806      	add	r0, sp, #24
 8010608:	f003 fb52 	bl	8013cb0 <uxr_serialize_DELETE_Payload>
 801060c:	4620      	mov	r0, r4
 801060e:	b00e      	add	sp, #56	@ 0x38
 8010610:	bd10      	pop	{r4, pc}
 8010612:	bf00      	nop

08010614 <uxr_common_create_entity>:
 8010614:	b510      	push	{r4, lr}
 8010616:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801061a:	b08c      	sub	sp, #48	@ 0x30
 801061c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010620:	f1bc 0f01 	cmp.w	ip, #1
 8010624:	bf0c      	ite	eq
 8010626:	f003 0201 	andeq.w	r2, r3, #1
 801062a:	2200      	movne	r2, #0
 801062c:	330e      	adds	r3, #14
 801062e:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8010632:	9101      	str	r1, [sp, #4]
 8010634:	441a      	add	r2, r3
 8010636:	2301      	movs	r3, #1
 8010638:	9300      	str	r3, [sp, #0]
 801063a:	9903      	ldr	r1, [sp, #12]
 801063c:	ab04      	add	r3, sp, #16
 801063e:	b292      	uxth	r2, r2
 8010640:	4604      	mov	r4, r0
 8010642:	f001 fb17 	bl	8011c74 <uxr_prepare_stream_to_write_submessage>
 8010646:	b918      	cbnz	r0, 8010650 <uxr_common_create_entity+0x3c>
 8010648:	4604      	mov	r4, r0
 801064a:	4620      	mov	r0, r4
 801064c:	b00c      	add	sp, #48	@ 0x30
 801064e:	bd10      	pop	{r4, pc}
 8010650:	9902      	ldr	r1, [sp, #8]
 8010652:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010654:	4620      	mov	r0, r4
 8010656:	f001 fc43 	bl	8011ee0 <uxr_init_base_object_request>
 801065a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801065c:	4604      	mov	r4, r0
 801065e:	a804      	add	r0, sp, #16
 8010660:	f003 fa82 	bl	8013b68 <uxr_serialize_CREATE_Payload>
 8010664:	4620      	mov	r0, r4
 8010666:	b00c      	add	sp, #48	@ 0x30
 8010668:	bd10      	pop	{r4, pc}
 801066a:	bf00      	nop

0801066c <uxr_buffer_create_participant_bin>:
 801066c:	b570      	push	{r4, r5, r6, lr}
 801066e:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8010672:	ac11      	add	r4, sp, #68	@ 0x44
 8010674:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8010678:	2303      	movs	r3, #3
 801067a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801067e:	7223      	strb	r3, [r4, #8]
 8010680:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8010682:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8010686:	2201      	movs	r2, #1
 8010688:	2100      	movs	r1, #0
 801068a:	4605      	mov	r5, r0
 801068c:	7122      	strb	r2, [r4, #4]
 801068e:	f88d 1014 	strb.w	r1, [sp, #20]
 8010692:	b1cb      	cbz	r3, 80106c8 <uxr_buffer_create_participant_bin+0x5c>
 8010694:	f88d 201c 	strb.w	r2, [sp, #28]
 8010698:	9308      	str	r3, [sp, #32]
 801069a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801069e:	a915      	add	r1, sp, #84	@ 0x54
 80106a0:	a809      	add	r0, sp, #36	@ 0x24
 80106a2:	f7ff ff27 	bl	80104f4 <ucdr_init_buffer>
 80106a6:	a905      	add	r1, sp, #20
 80106a8:	a809      	add	r0, sp, #36	@ 0x24
 80106aa:	f002 fe3f 	bl	801332c <uxr_serialize_OBJK_DomainParticipant_Binary>
 80106ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80106b0:	9600      	str	r6, [sp, #0]
 80106b2:	9401      	str	r4, [sp, #4]
 80106b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80106b8:	60e3      	str	r3, [r4, #12]
 80106ba:	4628      	mov	r0, r5
 80106bc:	b29b      	uxth	r3, r3
 80106be:	f7ff ffa9 	bl	8010614 <uxr_common_create_entity>
 80106c2:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 80106c6:	bd70      	pop	{r4, r5, r6, pc}
 80106c8:	f88d 301c 	strb.w	r3, [sp, #28]
 80106cc:	e7e5      	b.n	801069a <uxr_buffer_create_participant_bin+0x2e>
 80106ce:	bf00      	nop

080106d0 <uxr_buffer_create_topic_bin>:
 80106d0:	b570      	push	{r4, r5, r6, lr}
 80106d2:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 80106d6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80106da:	9105      	str	r1, [sp, #20]
 80106dc:	4605      	mov	r5, r0
 80106de:	a997      	add	r1, sp, #604	@ 0x25c
 80106e0:	4618      	mov	r0, r3
 80106e2:	2302      	movs	r3, #2
 80106e4:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 80106e8:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 80106ec:	f000 fa58 	bl	8010ba0 <uxr_object_id_to_raw>
 80106f0:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 80106f2:	9306      	str	r3, [sp, #24]
 80106f4:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 80106f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80106f8:	2303      	movs	r3, #3
 80106fa:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80106fe:	2301      	movs	r3, #1
 8010700:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010704:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8010708:	a917      	add	r1, sp, #92	@ 0x5c
 801070a:	2300      	movs	r3, #0
 801070c:	a80b      	add	r0, sp, #44	@ 0x2c
 801070e:	f88d 301c 	strb.w	r3, [sp, #28]
 8010712:	f7ff feef 	bl	80104f4 <ucdr_init_buffer>
 8010716:	a906      	add	r1, sp, #24
 8010718:	a80b      	add	r0, sp, #44	@ 0x2c
 801071a:	f002 fe29 	bl	8013370 <uxr_serialize_OBJK_Topic_Binary>
 801071e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010720:	9316      	str	r3, [sp, #88]	@ 0x58
 8010722:	ac13      	add	r4, sp, #76	@ 0x4c
 8010724:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010728:	9600      	str	r6, [sp, #0]
 801072a:	9401      	str	r4, [sp, #4]
 801072c:	b29b      	uxth	r3, r3
 801072e:	4628      	mov	r0, r5
 8010730:	f7ff ff70 	bl	8010614 <uxr_common_create_entity>
 8010734:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8010738:	bd70      	pop	{r4, r5, r6, pc}
 801073a:	bf00      	nop

0801073c <uxr_buffer_create_publisher_bin>:
 801073c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801073e:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8010742:	4605      	mov	r5, r0
 8010744:	9105      	str	r1, [sp, #20]
 8010746:	4618      	mov	r0, r3
 8010748:	2603      	movs	r6, #3
 801074a:	a992      	add	r1, sp, #584	@ 0x248
 801074c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010750:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8010754:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8010758:	f000 fa22 	bl	8010ba0 <uxr_object_id_to_raw>
 801075c:	2300      	movs	r3, #0
 801075e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010762:	a912      	add	r1, sp, #72	@ 0x48
 8010764:	a806      	add	r0, sp, #24
 8010766:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 801076a:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 801076e:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8010772:	f7ff febf 	bl	80104f4 <ucdr_init_buffer>
 8010776:	a993      	add	r1, sp, #588	@ 0x24c
 8010778:	a806      	add	r0, sp, #24
 801077a:	f002 fead 	bl	80134d8 <uxr_serialize_OBJK_Publisher_Binary>
 801077e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010780:	9311      	str	r3, [sp, #68]	@ 0x44
 8010782:	ac0e      	add	r4, sp, #56	@ 0x38
 8010784:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010788:	9700      	str	r7, [sp, #0]
 801078a:	9401      	str	r4, [sp, #4]
 801078c:	b29b      	uxth	r3, r3
 801078e:	4628      	mov	r0, r5
 8010790:	f7ff ff40 	bl	8010614 <uxr_common_create_entity>
 8010794:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8010798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801079a:	bf00      	nop

0801079c <uxr_buffer_create_subscriber_bin>:
 801079c:	b570      	push	{r4, r5, r6, lr}
 801079e:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 80107a2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80107a6:	9105      	str	r1, [sp, #20]
 80107a8:	4605      	mov	r5, r0
 80107aa:	a992      	add	r1, sp, #584	@ 0x248
 80107ac:	4618      	mov	r0, r3
 80107ae:	2304      	movs	r3, #4
 80107b0:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 80107b4:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 80107b8:	f000 f9f2 	bl	8010ba0 <uxr_object_id_to_raw>
 80107bc:	2300      	movs	r3, #0
 80107be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80107c2:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 80107c6:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 80107ca:	a912      	add	r1, sp, #72	@ 0x48
 80107cc:	2303      	movs	r3, #3
 80107ce:	a806      	add	r0, sp, #24
 80107d0:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 80107d4:	f7ff fe8e 	bl	80104f4 <ucdr_init_buffer>
 80107d8:	a993      	add	r1, sp, #588	@ 0x24c
 80107da:	a806      	add	r0, sp, #24
 80107dc:	f002 ff2c 	bl	8013638 <uxr_serialize_OBJK_Subscriber_Binary>
 80107e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80107e2:	9311      	str	r3, [sp, #68]	@ 0x44
 80107e4:	ac0e      	add	r4, sp, #56	@ 0x38
 80107e6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80107ea:	9600      	str	r6, [sp, #0]
 80107ec:	9401      	str	r4, [sp, #4]
 80107ee:	b29b      	uxth	r3, r3
 80107f0:	4628      	mov	r0, r5
 80107f2:	f7ff ff0f 	bl	8010614 <uxr_common_create_entity>
 80107f6:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 80107fa:	bd70      	pop	{r4, r5, r6, pc}

080107fc <uxr_buffer_create_datawriter_bin>:
 80107fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010800:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8010804:	ac1d      	add	r4, sp, #116	@ 0x74
 8010806:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801080a:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 801080e:	9105      	str	r1, [sp, #20]
 8010810:	4606      	mov	r6, r0
 8010812:	a9a1      	add	r1, sp, #644	@ 0x284
 8010814:	4618      	mov	r0, r3
 8010816:	2305      	movs	r3, #5
 8010818:	7123      	strb	r3, [r4, #4]
 801081a:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 801081e:	2703      	movs	r7, #3
 8010820:	f000 f9be 	bl	8010ba0 <uxr_object_id_to_raw>
 8010824:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8010826:	7227      	strb	r7, [r4, #8]
 8010828:	a90e      	add	r1, sp, #56	@ 0x38
 801082a:	f000 f9b9 	bl	8010ba0 <uxr_object_id_to_raw>
 801082e:	2300      	movs	r3, #0
 8010830:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8010834:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8010838:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801083c:	3d00      	subs	r5, #0
 801083e:	bf18      	it	ne
 8010840:	2501      	movne	r5, #1
 8010842:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8010846:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 801084a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801084e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010852:	2301      	movs	r3, #1
 8010854:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8010858:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 801085c:	bb8a      	cbnz	r2, 80108c2 <uxr_buffer_create_datawriter_bin+0xc6>
 801085e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010862:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8010866:	f04f 0c13 	mov.w	ip, #19
 801086a:	250b      	movs	r5, #11
 801086c:	2221      	movs	r2, #33	@ 0x21
 801086e:	2111      	movs	r1, #17
 8010870:	2009      	movs	r0, #9
 8010872:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8010876:	b923      	cbnz	r3, 8010882 <uxr_buffer_create_datawriter_bin+0x86>
 8010878:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 801087c:	4672      	mov	r2, lr
 801087e:	4661      	mov	r1, ip
 8010880:	4628      	mov	r0, r5
 8010882:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8010886:	2b01      	cmp	r3, #1
 8010888:	d025      	beq.n	80108d6 <uxr_buffer_create_datawriter_bin+0xda>
 801088a:	2b03      	cmp	r3, #3
 801088c:	d029      	beq.n	80108e2 <uxr_buffer_create_datawriter_bin+0xe6>
 801088e:	b32b      	cbz	r3, 80108dc <uxr_buffer_create_datawriter_bin+0xe0>
 8010890:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010894:	a921      	add	r1, sp, #132	@ 0x84
 8010896:	a806      	add	r0, sp, #24
 8010898:	f7ff fe2c 	bl	80104f4 <ucdr_init_buffer>
 801089c:	a90e      	add	r1, sp, #56	@ 0x38
 801089e:	a806      	add	r0, sp, #24
 80108a0:	f002 ff7c 	bl	801379c <uxr_serialize_OBJK_DataWriter_Binary>
 80108a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80108a6:	f8cd 8000 	str.w	r8, [sp]
 80108aa:	9401      	str	r4, [sp, #4]
 80108ac:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80108b0:	60e3      	str	r3, [r4, #12]
 80108b2:	4630      	mov	r0, r6
 80108b4:	b29b      	uxth	r3, r3
 80108b6:	f7ff fead 	bl	8010614 <uxr_common_create_entity>
 80108ba:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80108be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108c2:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80108c6:	f04f 0c12 	mov.w	ip, #18
 80108ca:	250a      	movs	r5, #10
 80108cc:	2220      	movs	r2, #32
 80108ce:	2110      	movs	r1, #16
 80108d0:	2008      	movs	r0, #8
 80108d2:	2702      	movs	r7, #2
 80108d4:	e7cd      	b.n	8010872 <uxr_buffer_create_datawriter_bin+0x76>
 80108d6:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80108da:	e7d9      	b.n	8010890 <uxr_buffer_create_datawriter_bin+0x94>
 80108dc:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80108e0:	e7d6      	b.n	8010890 <uxr_buffer_create_datawriter_bin+0x94>
 80108e2:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80108e6:	e7d3      	b.n	8010890 <uxr_buffer_create_datawriter_bin+0x94>

080108e8 <uxr_buffer_create_datareader_bin>:
 80108e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108ec:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80108f0:	ac1f      	add	r4, sp, #124	@ 0x7c
 80108f2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80108f6:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 80108fa:	9105      	str	r1, [sp, #20]
 80108fc:	4606      	mov	r6, r0
 80108fe:	a9a3      	add	r1, sp, #652	@ 0x28c
 8010900:	4618      	mov	r0, r3
 8010902:	2306      	movs	r3, #6
 8010904:	7123      	strb	r3, [r4, #4]
 8010906:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 801090a:	2703      	movs	r7, #3
 801090c:	f000 f948 	bl	8010ba0 <uxr_object_id_to_raw>
 8010910:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 8010912:	7227      	strb	r7, [r4, #8]
 8010914:	a90e      	add	r1, sp, #56	@ 0x38
 8010916:	f000 f943 	bl	8010ba0 <uxr_object_id_to_raw>
 801091a:	2300      	movs	r3, #0
 801091c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8010920:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 8010924:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 8010928:	3d00      	subs	r5, #0
 801092a:	bf18      	it	ne
 801092c:	2501      	movne	r5, #1
 801092e:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8010932:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8010936:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 801093a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801093e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010942:	2301      	movs	r3, #1
 8010944:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8010948:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 801094c:	bb8a      	cbnz	r2, 80109b2 <uxr_buffer_create_datareader_bin+0xca>
 801094e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010952:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8010956:	f04f 0c13 	mov.w	ip, #19
 801095a:	250b      	movs	r5, #11
 801095c:	2221      	movs	r2, #33	@ 0x21
 801095e:	2111      	movs	r1, #17
 8010960:	2009      	movs	r0, #9
 8010962:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 8010966:	b923      	cbnz	r3, 8010972 <uxr_buffer_create_datareader_bin+0x8a>
 8010968:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 801096c:	4672      	mov	r2, lr
 801096e:	4661      	mov	r1, ip
 8010970:	4628      	mov	r0, r5
 8010972:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 8010976:	2b01      	cmp	r3, #1
 8010978:	d025      	beq.n	80109c6 <uxr_buffer_create_datareader_bin+0xde>
 801097a:	2b03      	cmp	r3, #3
 801097c:	d029      	beq.n	80109d2 <uxr_buffer_create_datareader_bin+0xea>
 801097e:	b32b      	cbz	r3, 80109cc <uxr_buffer_create_datareader_bin+0xe4>
 8010980:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010984:	a923      	add	r1, sp, #140	@ 0x8c
 8010986:	a806      	add	r0, sp, #24
 8010988:	f7ff fdb4 	bl	80104f4 <ucdr_init_buffer>
 801098c:	a90e      	add	r1, sp, #56	@ 0x38
 801098e:	a806      	add	r0, sp, #24
 8010990:	f002 fec8 	bl	8013724 <uxr_serialize_OBJK_DataReader_Binary>
 8010994:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010996:	f8cd 8000 	str.w	r8, [sp]
 801099a:	9401      	str	r4, [sp, #4]
 801099c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80109a0:	60e3      	str	r3, [r4, #12]
 80109a2:	4630      	mov	r0, r6
 80109a4:	b29b      	uxth	r3, r3
 80109a6:	f7ff fe35 	bl	8010614 <uxr_common_create_entity>
 80109aa:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80109ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109b2:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80109b6:	f04f 0c12 	mov.w	ip, #18
 80109ba:	250a      	movs	r5, #10
 80109bc:	2220      	movs	r2, #32
 80109be:	2110      	movs	r1, #16
 80109c0:	2008      	movs	r0, #8
 80109c2:	2702      	movs	r7, #2
 80109c4:	e7cd      	b.n	8010962 <uxr_buffer_create_datareader_bin+0x7a>
 80109c6:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80109ca:	e7d9      	b.n	8010980 <uxr_buffer_create_datareader_bin+0x98>
 80109cc:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80109d0:	e7d6      	b.n	8010980 <uxr_buffer_create_datareader_bin+0x98>
 80109d2:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80109d6:	e7d3      	b.n	8010980 <uxr_buffer_create_datareader_bin+0x98>

080109d8 <get_custom_error>:
 80109d8:	4b01      	ldr	r3, [pc, #4]	@ (80109e0 <get_custom_error+0x8>)
 80109da:	7818      	ldrb	r0, [r3, #0]
 80109dc:	4770      	bx	lr
 80109de:	bf00      	nop
 80109e0:	2000ae6c 	.word	0x2000ae6c

080109e4 <recv_custom_msg>:
 80109e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109e8:	4693      	mov	fp, r2
 80109ea:	b089      	sub	sp, #36	@ 0x24
 80109ec:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 80109f0:	9305      	str	r3, [sp, #20]
 80109f2:	468a      	mov	sl, r1
 80109f4:	2100      	movs	r1, #0
 80109f6:	4604      	mov	r4, r0
 80109f8:	f88d 101e 	strb.w	r1, [sp, #30]
 80109fc:	b322      	cbz	r2, 8010a48 <recv_custom_msg+0x64>
 80109fe:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8010a02:	f10d 081f 	add.w	r8, sp, #31
 8010a06:	af05      	add	r7, sp, #20
 8010a08:	f10d 061e 	add.w	r6, sp, #30
 8010a0c:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8010a10:	e002      	b.n	8010a18 <recv_custom_msg+0x34>
 8010a12:	9b05      	ldr	r3, [sp, #20]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	dd0f      	ble.n	8010a38 <recv_custom_msg+0x54>
 8010a18:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8010a1c:	4623      	mov	r3, r4
 8010a1e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8010a22:	e9cd 5600 	strd	r5, r6, [sp]
 8010a26:	4622      	mov	r2, r4
 8010a28:	4648      	mov	r0, r9
 8010a2a:	f001 fc87 	bl	801233c <uxr_read_framed_msg>
 8010a2e:	2800      	cmp	r0, #0
 8010a30:	d0ef      	beq.n	8010a12 <recv_custom_msg+0x2e>
 8010a32:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8010a36:	b1b3      	cbz	r3, 8010a66 <recv_custom_msg+0x82>
 8010a38:	4b0f      	ldr	r3, [pc, #60]	@ (8010a78 <recv_custom_msg+0x94>)
 8010a3a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8010a3e:	701a      	strb	r2, [r3, #0]
 8010a40:	2000      	movs	r0, #0
 8010a42:	b009      	add	sp, #36	@ 0x24
 8010a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a48:	f10d 021f 	add.w	r2, sp, #31
 8010a4c:	9200      	str	r2, [sp, #0]
 8010a4e:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8010a52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010a56:	4601      	mov	r1, r0
 8010a58:	47a8      	blx	r5
 8010a5a:	2800      	cmp	r0, #0
 8010a5c:	d0ec      	beq.n	8010a38 <recv_custom_msg+0x54>
 8010a5e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d1e8      	bne.n	8010a38 <recv_custom_msg+0x54>
 8010a66:	f8cb 0000 	str.w	r0, [fp]
 8010a6a:	2001      	movs	r0, #1
 8010a6c:	f8ca 4000 	str.w	r4, [sl]
 8010a70:	b009      	add	sp, #36	@ 0x24
 8010a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a76:	bf00      	nop
 8010a78:	2000ae6c 	.word	0x2000ae6c

08010a7c <send_custom_msg>:
 8010a7c:	b530      	push	{r4, r5, lr}
 8010a7e:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 8010a82:	b087      	sub	sp, #28
 8010a84:	4615      	mov	r5, r2
 8010a86:	b974      	cbnz	r4, 8010aa6 <send_custom_msg+0x2a>
 8010a88:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8010a8c:	f10d 0317 	add.w	r3, sp, #23
 8010a90:	47a0      	blx	r4
 8010a92:	b108      	cbz	r0, 8010a98 <send_custom_msg+0x1c>
 8010a94:	42a8      	cmp	r0, r5
 8010a96:	d015      	beq.n	8010ac4 <send_custom_msg+0x48>
 8010a98:	4b0c      	ldr	r3, [pc, #48]	@ (8010acc <send_custom_msg+0x50>)
 8010a9a:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8010a9e:	701a      	strb	r2, [r3, #0]
 8010aa0:	2000      	movs	r0, #0
 8010aa2:	b007      	add	sp, #28
 8010aa4:	bd30      	pop	{r4, r5, pc}
 8010aa6:	460b      	mov	r3, r1
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	f10d 0117 	add.w	r1, sp, #23
 8010aae:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8010ab2:	4602      	mov	r2, r0
 8010ab4:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8010ab8:	9500      	str	r5, [sp, #0]
 8010aba:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8010abe:	f001 fa45 	bl	8011f4c <uxr_write_framed_msg>
 8010ac2:	e7e6      	b.n	8010a92 <send_custom_msg+0x16>
 8010ac4:	2001      	movs	r0, #1
 8010ac6:	b007      	add	sp, #28
 8010ac8:	bd30      	pop	{r4, r5, pc}
 8010aca:	bf00      	nop
 8010acc:	2000ae6c 	.word	0x2000ae6c

08010ad0 <uxr_set_custom_transport_callbacks>:
 8010ad0:	b410      	push	{r4}
 8010ad2:	9c01      	ldr	r4, [sp, #4]
 8010ad4:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 8010ad8:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8010adc:	9b02      	ldr	r3, [sp, #8]
 8010ade:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8010ae2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ae6:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8010aea:	4770      	bx	lr

08010aec <uxr_init_custom_transport>:
 8010aec:	b538      	push	{r3, r4, r5, lr}
 8010aee:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8010af2:	b303      	cbz	r3, 8010b36 <uxr_init_custom_transport+0x4a>
 8010af4:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8010af8:	4604      	mov	r4, r0
 8010afa:	b1e2      	cbz	r2, 8010b36 <uxr_init_custom_transport+0x4a>
 8010afc:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8010b00:	b1ca      	cbz	r2, 8010b36 <uxr_init_custom_transport+0x4a>
 8010b02:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8010b06:	b1b2      	cbz	r2, 8010b36 <uxr_init_custom_transport+0x4a>
 8010b08:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8010b0c:	4798      	blx	r3
 8010b0e:	4605      	mov	r5, r0
 8010b10:	b188      	cbz	r0, 8010b36 <uxr_init_custom_transport+0x4a>
 8010b12:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8010b16:	b98b      	cbnz	r3, 8010b3c <uxr_init_custom_transport+0x50>
 8010b18:	490b      	ldr	r1, [pc, #44]	@ (8010b48 <uxr_init_custom_transport+0x5c>)
 8010b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8010b4c <uxr_init_custom_transport+0x60>)
 8010b1c:	4a0c      	ldr	r2, [pc, #48]	@ (8010b50 <uxr_init_custom_transport+0x64>)
 8010b1e:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8010b22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010b26:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8010b2a:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8010b2e:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8010b32:	4628      	mov	r0, r5
 8010b34:	bd38      	pop	{r3, r4, r5, pc}
 8010b36:	2500      	movs	r5, #0
 8010b38:	4628      	mov	r0, r5
 8010b3a:	bd38      	pop	{r3, r4, r5, pc}
 8010b3c:	2100      	movs	r1, #0
 8010b3e:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8010b42:	f001 f9fd 	bl	8011f40 <uxr_init_framing_io>
 8010b46:	e7e7      	b.n	8010b18 <uxr_init_custom_transport+0x2c>
 8010b48:	08010a7d 	.word	0x08010a7d
 8010b4c:	080109e5 	.word	0x080109e5
 8010b50:	080109d9 	.word	0x080109d9

08010b54 <uxr_close_custom_transport>:
 8010b54:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8010b58:	4718      	bx	r3
 8010b5a:	bf00      	nop

08010b5c <uxr_object_id>:
 8010b5c:	b082      	sub	sp, #8
 8010b5e:	2300      	movs	r3, #0
 8010b60:	f88d 1006 	strb.w	r1, [sp, #6]
 8010b64:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010b68:	f360 030f 	bfi	r3, r0, #0, #16
 8010b6c:	f362 431f 	bfi	r3, r2, #16, #16
 8010b70:	4618      	mov	r0, r3
 8010b72:	b002      	add	sp, #8
 8010b74:	4770      	bx	lr
 8010b76:	bf00      	nop

08010b78 <uxr_object_id_from_raw>:
 8010b78:	7843      	ldrb	r3, [r0, #1]
 8010b7a:	7801      	ldrb	r1, [r0, #0]
 8010b7c:	b082      	sub	sp, #8
 8010b7e:	f003 020f 	and.w	r2, r3, #15
 8010b82:	f88d 2006 	strb.w	r2, [sp, #6]
 8010b86:	091b      	lsrs	r3, r3, #4
 8010b88:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010b8c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8010b90:	2000      	movs	r0, #0
 8010b92:	f363 000f 	bfi	r0, r3, #0, #16
 8010b96:	f362 401f 	bfi	r0, r2, #16, #16
 8010b9a:	b002      	add	sp, #8
 8010b9c:	4770      	bx	lr
 8010b9e:	bf00      	nop

08010ba0 <uxr_object_id_to_raw>:
 8010ba0:	4602      	mov	r2, r0
 8010ba2:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8010ba6:	b082      	sub	sp, #8
 8010ba8:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8010bac:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8010bb0:	f881 c000 	strb.w	ip, [r1]
 8010bb4:	7048      	strb	r0, [r1, #1]
 8010bb6:	b002      	add	sp, #8
 8010bb8:	4770      	bx	lr
 8010bba:	bf00      	nop

08010bbc <uxr_buffer_request_data>:
 8010bbc:	b530      	push	{r4, r5, lr}
 8010bbe:	b095      	sub	sp, #84	@ 0x54
 8010bc0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010bc4:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8010bc6:	9303      	str	r3, [sp, #12]
 8010bc8:	2200      	movs	r2, #0
 8010bca:	2d00      	cmp	r5, #0
 8010bcc:	bf14      	ite	ne
 8010bce:	2101      	movne	r1, #1
 8010bd0:	4611      	moveq	r1, r2
 8010bd2:	4604      	mov	r4, r0
 8010bd4:	f88d 301c 	strb.w	r3, [sp, #28]
 8010bd8:	f88d 201d 	strb.w	r2, [sp, #29]
 8010bdc:	f88d 201e 	strb.w	r2, [sp, #30]
 8010be0:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8010be4:	d021      	beq.n	8010c2a <uxr_buffer_request_data+0x6e>
 8010be6:	682a      	ldr	r2, [r5, #0]
 8010be8:	686b      	ldr	r3, [r5, #4]
 8010bea:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 8010bee:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8010bf2:	2210      	movs	r2, #16
 8010bf4:	2308      	movs	r3, #8
 8010bf6:	2100      	movs	r1, #0
 8010bf8:	e9cd 3100 	strd	r3, r1, [sp]
 8010bfc:	4620      	mov	r0, r4
 8010bfe:	9905      	ldr	r1, [sp, #20]
 8010c00:	ab0c      	add	r3, sp, #48	@ 0x30
 8010c02:	f001 f837 	bl	8011c74 <uxr_prepare_stream_to_write_submessage>
 8010c06:	b918      	cbnz	r0, 8010c10 <uxr_buffer_request_data+0x54>
 8010c08:	4604      	mov	r4, r0
 8010c0a:	4620      	mov	r0, r4
 8010c0c:	b015      	add	sp, #84	@ 0x54
 8010c0e:	bd30      	pop	{r4, r5, pc}
 8010c10:	9904      	ldr	r1, [sp, #16]
 8010c12:	aa06      	add	r2, sp, #24
 8010c14:	4620      	mov	r0, r4
 8010c16:	f001 f963 	bl	8011ee0 <uxr_init_base_object_request>
 8010c1a:	a906      	add	r1, sp, #24
 8010c1c:	4604      	mov	r4, r0
 8010c1e:	a80c      	add	r0, sp, #48	@ 0x30
 8010c20:	f003 f8f0 	bl	8013e04 <uxr_serialize_READ_DATA_Payload>
 8010c24:	4620      	mov	r0, r4
 8010c26:	b015      	add	sp, #84	@ 0x54
 8010c28:	bd30      	pop	{r4, r5, pc}
 8010c2a:	2208      	movs	r2, #8
 8010c2c:	e7e2      	b.n	8010bf4 <uxr_buffer_request_data+0x38>
 8010c2e:	bf00      	nop

08010c30 <uxr_buffer_cancel_data>:
 8010c30:	b510      	push	{r4, lr}
 8010c32:	b094      	sub	sp, #80	@ 0x50
 8010c34:	2300      	movs	r3, #0
 8010c36:	9202      	str	r2, [sp, #8]
 8010c38:	9205      	str	r2, [sp, #20]
 8010c3a:	9301      	str	r3, [sp, #4]
 8010c3c:	2201      	movs	r2, #1
 8010c3e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010c42:	f88d 301e 	strb.w	r3, [sp, #30]
 8010c46:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8010c4a:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 8010c4e:	2308      	movs	r3, #8
 8010c50:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 8010c54:	9300      	str	r3, [sp, #0]
 8010c56:	2210      	movs	r2, #16
 8010c58:	ab0c      	add	r3, sp, #48	@ 0x30
 8010c5a:	4604      	mov	r4, r0
 8010c5c:	9103      	str	r1, [sp, #12]
 8010c5e:	f001 f809 	bl	8011c74 <uxr_prepare_stream_to_write_submessage>
 8010c62:	b918      	cbnz	r0, 8010c6c <uxr_buffer_cancel_data+0x3c>
 8010c64:	4604      	mov	r4, r0
 8010c66:	4620      	mov	r0, r4
 8010c68:	b014      	add	sp, #80	@ 0x50
 8010c6a:	bd10      	pop	{r4, pc}
 8010c6c:	9905      	ldr	r1, [sp, #20]
 8010c6e:	aa06      	add	r2, sp, #24
 8010c70:	4620      	mov	r0, r4
 8010c72:	f001 f935 	bl	8011ee0 <uxr_init_base_object_request>
 8010c76:	a906      	add	r1, sp, #24
 8010c78:	4604      	mov	r4, r0
 8010c7a:	a80c      	add	r0, sp, #48	@ 0x30
 8010c7c:	f003 f8c2 	bl	8013e04 <uxr_serialize_READ_DATA_Payload>
 8010c80:	4620      	mov	r0, r4
 8010c82:	b014      	add	sp, #80	@ 0x50
 8010c84:	bd10      	pop	{r4, pc}
 8010c86:	bf00      	nop

08010c88 <read_submessage_format>:
 8010c88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c8c:	b095      	sub	sp, #84	@ 0x54
 8010c8e:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8010c92:	b113      	cbz	r3, 8010c9a <read_submessage_format+0x12>
 8010c94:	b015      	add	sp, #84	@ 0x54
 8010c96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c9a:	460c      	mov	r4, r1
 8010c9c:	4615      	mov	r5, r2
 8010c9e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8010ca2:	4607      	mov	r7, r0
 8010ca4:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8010ca6:	9004      	str	r0, [sp, #16]
 8010ca8:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8010caa:	9005      	str	r0, [sp, #20]
 8010cac:	1a52      	subs	r2, r2, r1
 8010cae:	a80c      	add	r0, sp, #48	@ 0x30
 8010cb0:	4699      	mov	r9, r3
 8010cb2:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8010cb6:	f7ff fc1d 	bl	80104f4 <ucdr_init_buffer>
 8010cba:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010cbe:	a80c      	add	r0, sp, #48	@ 0x30
 8010cc0:	f7ff fbec 	bl	801049c <ucdr_set_on_full_buffer_callback>
 8010cc4:	69e2      	ldr	r2, [r4, #28]
 8010cc6:	b19a      	cbz	r2, 8010cf0 <read_submessage_format+0x68>
 8010cc8:	f1b8 0f07 	cmp.w	r8, #7
 8010ccc:	f882 9014 	strb.w	r9, [r2, #20]
 8010cd0:	d040      	beq.n	8010d54 <read_submessage_format+0xcc>
 8010cd2:	f1b8 0f08 	cmp.w	r8, #8
 8010cd6:	d02e      	beq.n	8010d36 <read_submessage_format+0xae>
 8010cd8:	f1b8 0f06 	cmp.w	r8, #6
 8010cdc:	d011      	beq.n	8010d02 <read_submessage_format+0x7a>
 8010cde:	2301      	movs	r3, #1
 8010ce0:	7513      	strb	r3, [r2, #20]
 8010ce2:	4629      	mov	r1, r5
 8010ce4:	4620      	mov	r0, r4
 8010ce6:	f7ff fc55 	bl	8010594 <ucdr_advance_buffer>
 8010cea:	b015      	add	sp, #84	@ 0x54
 8010cec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010cf0:	f1b8 0f07 	cmp.w	r8, #7
 8010cf4:	d02e      	beq.n	8010d54 <read_submessage_format+0xcc>
 8010cf6:	f1b8 0f08 	cmp.w	r8, #8
 8010cfa:	d01c      	beq.n	8010d36 <read_submessage_format+0xae>
 8010cfc:	f1b8 0f06 	cmp.w	r8, #6
 8010d00:	d1ef      	bne.n	8010ce2 <read_submessage_format+0x5a>
 8010d02:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 8010d06:	f1b8 0f00 	cmp.w	r8, #0
 8010d0a:	d011      	beq.n	8010d30 <read_submessage_format+0xa8>
 8010d0c:	ab0c      	add	r3, sp, #48	@ 0x30
 8010d0e:	e9cd 3500 	strd	r3, r5, [sp]
 8010d12:	2306      	movs	r3, #6
 8010d14:	f88d 3016 	strb.w	r3, [sp, #22]
 8010d18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010d1c:	9302      	str	r3, [sp, #8]
 8010d1e:	4632      	mov	r2, r6
 8010d20:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8010d24:	4638      	mov	r0, r7
 8010d26:	47c0      	blx	r8
 8010d28:	2301      	movs	r3, #1
 8010d2a:	69e2      	ldr	r2, [r4, #28]
 8010d2c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010d30:	2a00      	cmp	r2, #0
 8010d32:	d1d4      	bne.n	8010cde <read_submessage_format+0x56>
 8010d34:	e7d5      	b.n	8010ce2 <read_submessage_format+0x5a>
 8010d36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d0f8      	beq.n	8010d30 <read_submessage_format+0xa8>
 8010d3e:	a906      	add	r1, sp, #24
 8010d40:	a80c      	add	r0, sp, #48	@ 0x30
 8010d42:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8010d46:	f003 f923 	bl	8013f90 <uxr_deserialize_SampleIdentity>
 8010d4a:	b9a0      	cbnz	r0, 8010d76 <read_submessage_format+0xee>
 8010d4c:	69e2      	ldr	r2, [r4, #28]
 8010d4e:	2a00      	cmp	r2, #0
 8010d50:	d1c5      	bne.n	8010cde <read_submessage_format+0x56>
 8010d52:	e7c6      	b.n	8010ce2 <read_submessage_format+0x5a>
 8010d54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010d58:	b13b      	cbz	r3, 8010d6a <read_submessage_format+0xe2>
 8010d5a:	a906      	add	r1, sp, #24
 8010d5c:	a80c      	add	r0, sp, #48	@ 0x30
 8010d5e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8010d62:	f002 fde9 	bl	8013938 <uxr_deserialize_BaseObjectRequest>
 8010d66:	bb60      	cbnz	r0, 8010dc2 <read_submessage_format+0x13a>
 8010d68:	69e2      	ldr	r2, [r4, #28]
 8010d6a:	68a3      	ldr	r3, [r4, #8]
 8010d6c:	442b      	add	r3, r5
 8010d6e:	60a3      	str	r3, [r4, #8]
 8010d70:	2a00      	cmp	r2, #0
 8010d72:	d1b4      	bne.n	8010cde <read_submessage_format+0x56>
 8010d74:	e7b5      	b.n	8010ce2 <read_submessage_format+0x5a>
 8010d76:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8010d7a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010d7c:	1a52      	subs	r2, r2, r1
 8010d7e:	eba8 0803 	sub.w	r8, r8, r3
 8010d82:	a80c      	add	r0, sp, #48	@ 0x30
 8010d84:	f7ff fbb6 	bl	80104f4 <ucdr_init_buffer>
 8010d88:	44a8      	add	r8, r5
 8010d8a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010d8e:	a80c      	add	r0, sp, #48	@ 0x30
 8010d90:	f7ff fb84 	bl	801049c <ucdr_set_on_full_buffer_callback>
 8010d94:	fa1f f888 	uxth.w	r8, r8
 8010d98:	ab0c      	add	r3, sp, #48	@ 0x30
 8010d9a:	9300      	str	r3, [sp, #0]
 8010d9c:	f8cd 8004 	str.w	r8, [sp, #4]
 8010da0:	2108      	movs	r1, #8
 8010da2:	f88d 1016 	strb.w	r1, [sp, #22]
 8010da6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8010daa:	9102      	str	r1, [sp, #8]
 8010dac:	ab06      	add	r3, sp, #24
 8010dae:	4632      	mov	r2, r6
 8010db0:	9905      	ldr	r1, [sp, #20]
 8010db2:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 8010db6:	4638      	mov	r0, r7
 8010db8:	47b0      	blx	r6
 8010dba:	2301      	movs	r3, #1
 8010dbc:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010dc0:	e7c4      	b.n	8010d4c <read_submessage_format+0xc4>
 8010dc2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8010dc6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010dc8:	1a52      	subs	r2, r2, r1
 8010dca:	a80c      	add	r0, sp, #48	@ 0x30
 8010dcc:	eba8 0803 	sub.w	r8, r8, r3
 8010dd0:	f7ff fb90 	bl	80104f4 <ucdr_init_buffer>
 8010dd4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010dd8:	a80c      	add	r0, sp, #48	@ 0x30
 8010dda:	f7ff fb5f 	bl	801049c <ucdr_set_on_full_buffer_callback>
 8010dde:	ab0c      	add	r3, sp, #48	@ 0x30
 8010de0:	9300      	str	r3, [sp, #0]
 8010de2:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8010de6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010dea:	44a8      	add	r8, r5
 8010dec:	fa1f f888 	uxth.w	r8, r8
 8010df0:	f8cd 8004 	str.w	r8, [sp, #4]
 8010df4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010df8:	2107      	movs	r1, #7
 8010dfa:	f88d 1016 	strb.w	r1, [sp, #22]
 8010dfe:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8010e02:	9102      	str	r1, [sp, #8]
 8010e04:	4632      	mov	r2, r6
 8010e06:	b29b      	uxth	r3, r3
 8010e08:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 8010e0c:	9905      	ldr	r1, [sp, #20]
 8010e0e:	4638      	mov	r0, r7
 8010e10:	47b0      	blx	r6
 8010e12:	2301      	movs	r3, #1
 8010e14:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010e18:	e7a6      	b.n	8010d68 <read_submessage_format+0xe0>
 8010e1a:	bf00      	nop

08010e1c <on_get_fragmentation_info>:
 8010e1c:	b500      	push	{lr}
 8010e1e:	b08b      	sub	sp, #44	@ 0x2c
 8010e20:	4601      	mov	r1, r0
 8010e22:	2204      	movs	r2, #4
 8010e24:	a802      	add	r0, sp, #8
 8010e26:	f7ff fb65 	bl	80104f4 <ucdr_init_buffer>
 8010e2a:	f10d 0305 	add.w	r3, sp, #5
 8010e2e:	f10d 0206 	add.w	r2, sp, #6
 8010e32:	a901      	add	r1, sp, #4
 8010e34:	a802      	add	r0, sp, #8
 8010e36:	f001 fe67 	bl	8012b08 <uxr_read_submessage_header>
 8010e3a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010e3e:	2b0d      	cmp	r3, #13
 8010e40:	d003      	beq.n	8010e4a <on_get_fragmentation_info+0x2e>
 8010e42:	2000      	movs	r0, #0
 8010e44:	b00b      	add	sp, #44	@ 0x2c
 8010e46:	f85d fb04 	ldr.w	pc, [sp], #4
 8010e4a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010e4e:	f013 0f02 	tst.w	r3, #2
 8010e52:	bf14      	ite	ne
 8010e54:	2002      	movne	r0, #2
 8010e56:	2001      	moveq	r0, #1
 8010e58:	b00b      	add	sp, #44	@ 0x2c
 8010e5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8010e5e:	bf00      	nop

08010e60 <read_submessage_get_info>:
 8010e60:	b570      	push	{r4, r5, r6, lr}
 8010e62:	2500      	movs	r5, #0
 8010e64:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8010e68:	4604      	mov	r4, r0
 8010e6a:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8010e6e:	460e      	mov	r6, r1
 8010e70:	a810      	add	r0, sp, #64	@ 0x40
 8010e72:	4629      	mov	r1, r5
 8010e74:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8010e78:	f009 f8a6 	bl	8019fc8 <memset>
 8010e7c:	a903      	add	r1, sp, #12
 8010e7e:	4630      	mov	r0, r6
 8010e80:	f002 ff02 	bl	8013c88 <uxr_deserialize_GET_INFO_Payload>
 8010e84:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010e88:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010e8c:	4620      	mov	r0, r4
 8010e8e:	f001 f81f 	bl	8011ed0 <uxr_session_header_offset>
 8010e92:	462b      	mov	r3, r5
 8010e94:	9000      	str	r0, [sp, #0]
 8010e96:	220c      	movs	r2, #12
 8010e98:	a905      	add	r1, sp, #20
 8010e9a:	a808      	add	r0, sp, #32
 8010e9c:	f7ff fb18 	bl	80104d0 <ucdr_init_buffer_origin_offset>
 8010ea0:	a910      	add	r1, sp, #64	@ 0x40
 8010ea2:	a808      	add	r0, sp, #32
 8010ea4:	f002 ff62 	bl	8013d6c <uxr_serialize_INFO_Payload>
 8010ea8:	9b08      	ldr	r3, [sp, #32]
 8010eaa:	462a      	mov	r2, r5
 8010eac:	4629      	mov	r1, r5
 8010eae:	4620      	mov	r0, r4
 8010eb0:	f000 ffb8 	bl	8011e24 <uxr_stamp_session_header>
 8010eb4:	a808      	add	r0, sp, #32
 8010eb6:	f7ff fb49 	bl	801054c <ucdr_buffer_length>
 8010eba:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8010ebc:	4602      	mov	r2, r0
 8010ebe:	a905      	add	r1, sp, #20
 8010ec0:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010ec4:	47a0      	blx	r4
 8010ec6:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8010eca:	bd70      	pop	{r4, r5, r6, pc}

08010ecc <write_submessage_acknack.isra.0>:
 8010ecc:	b570      	push	{r4, r5, r6, lr}
 8010ece:	b092      	sub	sp, #72	@ 0x48
 8010ed0:	4605      	mov	r5, r0
 8010ed2:	460e      	mov	r6, r1
 8010ed4:	4614      	mov	r4, r2
 8010ed6:	f000 fffb 	bl	8011ed0 <uxr_session_header_offset>
 8010eda:	a905      	add	r1, sp, #20
 8010edc:	9000      	str	r0, [sp, #0]
 8010ede:	2300      	movs	r3, #0
 8010ee0:	a80a      	add	r0, sp, #40	@ 0x28
 8010ee2:	2211      	movs	r2, #17
 8010ee4:	f7ff faf4 	bl	80104d0 <ucdr_init_buffer_origin_offset>
 8010ee8:	2218      	movs	r2, #24
 8010eea:	fb02 5404 	mla	r4, r2, r4, r5
 8010eee:	2300      	movs	r3, #0
 8010ef0:	2205      	movs	r2, #5
 8010ef2:	3450      	adds	r4, #80	@ 0x50
 8010ef4:	210a      	movs	r1, #10
 8010ef6:	a80a      	add	r0, sp, #40	@ 0x28
 8010ef8:	f001 fdec 	bl	8012ad4 <uxr_buffer_submessage_header>
 8010efc:	a903      	add	r1, sp, #12
 8010efe:	4620      	mov	r0, r4
 8010f00:	f007 fcda 	bl	80188b8 <uxr_compute_acknack>
 8010f04:	ba40      	rev16	r0, r0
 8010f06:	f8ad 000e 	strh.w	r0, [sp, #14]
 8010f0a:	a903      	add	r1, sp, #12
 8010f0c:	a80a      	add	r0, sp, #40	@ 0x28
 8010f0e:	f88d 6010 	strb.w	r6, [sp, #16]
 8010f12:	f002 ff9b 	bl	8013e4c <uxr_serialize_ACKNACK_Payload>
 8010f16:	2200      	movs	r2, #0
 8010f18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f1a:	4611      	mov	r1, r2
 8010f1c:	4628      	mov	r0, r5
 8010f1e:	f000 ff81 	bl	8011e24 <uxr_stamp_session_header>
 8010f22:	a80a      	add	r0, sp, #40	@ 0x28
 8010f24:	f7ff fb12 	bl	801054c <ucdr_buffer_length>
 8010f28:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8010f2a:	4602      	mov	r2, r0
 8010f2c:	a905      	add	r1, sp, #20
 8010f2e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010f32:	47a0      	blx	r4
 8010f34:	b012      	add	sp, #72	@ 0x48
 8010f36:	bd70      	pop	{r4, r5, r6, pc}

08010f38 <uxr_init_session>:
 8010f38:	b510      	push	{r4, lr}
 8010f3a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8010f70 <uxr_init_session+0x38>
 8010f3e:	2300      	movs	r3, #0
 8010f40:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8010f44:	4604      	mov	r4, r0
 8010f46:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8010f4a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8010f4e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8010f52:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8010f56:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8010f5a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8010f5e:	2181      	movs	r1, #129	@ 0x81
 8010f60:	f000 fecc 	bl	8011cfc <uxr_init_session_info>
 8010f64:	f104 0008 	add.w	r0, r4, #8
 8010f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f6c:	f001 bcce 	b.w	801290c <uxr_init_stream_storage>
	...

08010f78 <uxr_set_status_callback>:
 8010f78:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8010f7c:	4770      	bx	lr
 8010f7e:	bf00      	nop

08010f80 <uxr_set_topic_callback>:
 8010f80:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8010f84:	4770      	bx	lr
 8010f86:	bf00      	nop

08010f88 <uxr_set_request_callback>:
 8010f88:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8010f8c:	4770      	bx	lr
 8010f8e:	bf00      	nop

08010f90 <uxr_set_reply_callback>:
 8010f90:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8010f94:	4770      	bx	lr
 8010f96:	bf00      	nop

08010f98 <uxr_create_output_best_effort_stream>:
 8010f98:	b510      	push	{r4, lr}
 8010f9a:	b084      	sub	sp, #16
 8010f9c:	e9cd 2100 	strd	r2, r1, [sp]
 8010fa0:	4604      	mov	r4, r0
 8010fa2:	f000 ff95 	bl	8011ed0 <uxr_session_header_offset>
 8010fa6:	e9dd 2100 	ldrd	r2, r1, [sp]
 8010faa:	4603      	mov	r3, r0
 8010fac:	f104 0008 	add.w	r0, r4, #8
 8010fb0:	b004      	add	sp, #16
 8010fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010fb6:	f001 bcf3 	b.w	80129a0 <uxr_add_output_best_effort_buffer>
 8010fba:	bf00      	nop

08010fbc <uxr_create_output_reliable_stream>:
 8010fbc:	b510      	push	{r4, lr}
 8010fbe:	b088      	sub	sp, #32
 8010fc0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010fc4:	4604      	mov	r4, r0
 8010fc6:	9303      	str	r3, [sp, #12]
 8010fc8:	f000 ff82 	bl	8011ed0 <uxr_session_header_offset>
 8010fcc:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8010fd0:	9000      	str	r0, [sp, #0]
 8010fd2:	9905      	ldr	r1, [sp, #20]
 8010fd4:	f104 0008 	add.w	r0, r4, #8
 8010fd8:	f001 fcf6 	bl	80129c8 <uxr_add_output_reliable_buffer>
 8010fdc:	2200      	movs	r2, #0
 8010fde:	b2c3      	uxtb	r3, r0
 8010fe0:	f363 0207 	bfi	r2, r3, #0, #8
 8010fe4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010fe8:	f363 220f 	bfi	r2, r3, #8, #8
 8010fec:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010ff0:	f363 4217 	bfi	r2, r3, #16, #8
 8010ff4:	0e03      	lsrs	r3, r0, #24
 8010ff6:	f363 621f 	bfi	r2, r3, #24, #8
 8010ffa:	4610      	mov	r0, r2
 8010ffc:	b008      	add	sp, #32
 8010ffe:	bd10      	pop	{r4, pc}

08011000 <uxr_create_input_best_effort_stream>:
 8011000:	b082      	sub	sp, #8
 8011002:	3008      	adds	r0, #8
 8011004:	b002      	add	sp, #8
 8011006:	f001 bcf9 	b.w	80129fc <uxr_add_input_best_effort_buffer>
 801100a:	bf00      	nop

0801100c <uxr_create_input_reliable_stream>:
 801100c:	b510      	push	{r4, lr}
 801100e:	b084      	sub	sp, #16
 8011010:	4c0b      	ldr	r4, [pc, #44]	@ (8011040 <uxr_create_input_reliable_stream+0x34>)
 8011012:	9400      	str	r4, [sp, #0]
 8011014:	3008      	adds	r0, #8
 8011016:	f001 fd07 	bl	8012a28 <uxr_add_input_reliable_buffer>
 801101a:	2200      	movs	r2, #0
 801101c:	b2c3      	uxtb	r3, r0
 801101e:	f363 0207 	bfi	r2, r3, #0, #8
 8011022:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011026:	f363 220f 	bfi	r2, r3, #8, #8
 801102a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801102e:	f363 4217 	bfi	r2, r3, #16, #8
 8011032:	0e03      	lsrs	r3, r0, #24
 8011034:	f363 621f 	bfi	r2, r3, #24, #8
 8011038:	4610      	mov	r0, r2
 801103a:	b004      	add	sp, #16
 801103c:	bd10      	pop	{r4, pc}
 801103e:	bf00      	nop
 8011040:	08010e1d 	.word	0x08010e1d

08011044 <uxr_epoch_nanos>:
 8011044:	b510      	push	{r4, lr}
 8011046:	4604      	mov	r4, r0
 8011048:	f001 fda4 	bl	8012b94 <uxr_nanos>
 801104c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8011050:	1ac0      	subs	r0, r0, r3
 8011052:	eb61 0102 	sbc.w	r1, r1, r2
 8011056:	bd10      	pop	{r4, pc}

08011058 <uxr_flash_output_streams>:
 8011058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801105c:	7e03      	ldrb	r3, [r0, #24]
 801105e:	b084      	sub	sp, #16
 8011060:	4604      	mov	r4, r0
 8011062:	2b00      	cmp	r3, #0
 8011064:	d035      	beq.n	80110d2 <uxr_flash_output_streams+0x7a>
 8011066:	f04f 0900 	mov.w	r9, #0
 801106a:	4648      	mov	r0, r9
 801106c:	f10d 0802 	add.w	r8, sp, #2
 8011070:	af03      	add	r7, sp, #12
 8011072:	ae02      	add	r6, sp, #8
 8011074:	e006      	b.n	8011084 <uxr_flash_output_streams+0x2c>
 8011076:	7e23      	ldrb	r3, [r4, #24]
 8011078:	f109 0901 	add.w	r9, r9, #1
 801107c:	fa5f f089 	uxtb.w	r0, r9
 8011080:	4283      	cmp	r3, r0
 8011082:	d926      	bls.n	80110d2 <uxr_flash_output_streams+0x7a>
 8011084:	2201      	movs	r2, #1
 8011086:	4611      	mov	r1, r2
 8011088:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801108c:	f001 fbea 	bl	8012864 <uxr_stream_id>
 8011090:	3508      	adds	r5, #8
 8011092:	4684      	mov	ip, r0
 8011094:	4643      	mov	r3, r8
 8011096:	463a      	mov	r2, r7
 8011098:	4631      	mov	r1, r6
 801109a:	4628      	mov	r0, r5
 801109c:	f8cd c004 	str.w	ip, [sp, #4]
 80110a0:	f007 fc90 	bl	80189c4 <uxr_prepare_best_effort_buffer_to_send>
 80110a4:	2800      	cmp	r0, #0
 80110a6:	d0e6      	beq.n	8011076 <uxr_flash_output_streams+0x1e>
 80110a8:	9b02      	ldr	r3, [sp, #8]
 80110aa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80110ae:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80110b2:	4620      	mov	r0, r4
 80110b4:	f000 feb6 	bl	8011e24 <uxr_stamp_session_header>
 80110b8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80110ba:	9a03      	ldr	r2, [sp, #12]
 80110bc:	685d      	ldr	r5, [r3, #4]
 80110be:	6818      	ldr	r0, [r3, #0]
 80110c0:	9902      	ldr	r1, [sp, #8]
 80110c2:	47a8      	blx	r5
 80110c4:	f109 0901 	add.w	r9, r9, #1
 80110c8:	7e23      	ldrb	r3, [r4, #24]
 80110ca:	fa5f f089 	uxtb.w	r0, r9
 80110ce:	4283      	cmp	r3, r0
 80110d0:	d8d8      	bhi.n	8011084 <uxr_flash_output_streams+0x2c>
 80110d2:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80110d6:	b38b      	cbz	r3, 801113c <uxr_flash_output_streams+0xe4>
 80110d8:	f04f 0900 	mov.w	r9, #0
 80110dc:	f10d 0802 	add.w	r8, sp, #2
 80110e0:	af03      	add	r7, sp, #12
 80110e2:	ae02      	add	r6, sp, #8
 80110e4:	4648      	mov	r0, r9
 80110e6:	2201      	movs	r2, #1
 80110e8:	2102      	movs	r1, #2
 80110ea:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80110ee:	f001 fbb9 	bl	8012864 <uxr_stream_id>
 80110f2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80110f6:	3520      	adds	r5, #32
 80110f8:	9001      	str	r0, [sp, #4]
 80110fa:	e00d      	b.n	8011118 <uxr_flash_output_streams+0xc0>
 80110fc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011100:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011104:	9b02      	ldr	r3, [sp, #8]
 8011106:	f000 fe8d 	bl	8011e24 <uxr_stamp_session_header>
 801110a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801110c:	9a03      	ldr	r2, [sp, #12]
 801110e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8011112:	9902      	ldr	r1, [sp, #8]
 8011114:	6818      	ldr	r0, [r3, #0]
 8011116:	47d0      	blx	sl
 8011118:	4643      	mov	r3, r8
 801111a:	463a      	mov	r2, r7
 801111c:	4631      	mov	r1, r6
 801111e:	4628      	mov	r0, r5
 8011120:	f007 fe6e 	bl	8018e00 <uxr_prepare_next_reliable_buffer_to_send>
 8011124:	4603      	mov	r3, r0
 8011126:	4620      	mov	r0, r4
 8011128:	2b00      	cmp	r3, #0
 801112a:	d1e7      	bne.n	80110fc <uxr_flash_output_streams+0xa4>
 801112c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8011130:	f109 0901 	add.w	r9, r9, #1
 8011134:	fa5f f089 	uxtb.w	r0, r9
 8011138:	4283      	cmp	r3, r0
 801113a:	d8d4      	bhi.n	80110e6 <uxr_flash_output_streams+0x8e>
 801113c:	b004      	add	sp, #16
 801113e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011142:	bf00      	nop

08011144 <read_submessage_info>:
 8011144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011148:	460d      	mov	r5, r1
 801114a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801114e:	4669      	mov	r1, sp
 8011150:	4607      	mov	r7, r0
 8011152:	4628      	mov	r0, r5
 8011154:	f002 fca6 	bl	8013aa4 <uxr_deserialize_BaseObjectReply>
 8011158:	a902      	add	r1, sp, #8
 801115a:	4604      	mov	r4, r0
 801115c:	4628      	mov	r0, r5
 801115e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8011162:	f7fe fa03 	bl	800f56c <ucdr_deserialize_bool>
 8011166:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801116a:	4004      	ands	r4, r0
 801116c:	b2e4      	uxtb	r4, r4
 801116e:	b95b      	cbnz	r3, 8011188 <read_submessage_info+0x44>
 8011170:	a987      	add	r1, sp, #540	@ 0x21c
 8011172:	4628      	mov	r0, r5
 8011174:	f7fe f9fa 	bl	800f56c <ucdr_deserialize_bool>
 8011178:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 801117c:	4606      	mov	r6, r0
 801117e:	b94b      	cbnz	r3, 8011194 <read_submessage_info+0x50>
 8011180:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8011184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011188:	a903      	add	r1, sp, #12
 801118a:	4628      	mov	r0, r5
 801118c:	f002 fb32 	bl	80137f4 <uxr_deserialize_ObjectVariant>
 8011190:	4004      	ands	r4, r0
 8011192:	e7ed      	b.n	8011170 <read_submessage_info+0x2c>
 8011194:	a988      	add	r1, sp, #544	@ 0x220
 8011196:	4628      	mov	r0, r5
 8011198:	f7fe fa16 	bl	800f5c8 <ucdr_deserialize_uint8_t>
 801119c:	4234      	tst	r4, r6
 801119e:	d0ef      	beq.n	8011180 <read_submessage_info+0x3c>
 80111a0:	2800      	cmp	r0, #0
 80111a2:	d0ed      	beq.n	8011180 <read_submessage_info+0x3c>
 80111a4:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 80111a8:	2b0d      	cmp	r3, #13
 80111aa:	d1e9      	bne.n	8011180 <read_submessage_info+0x3c>
 80111ac:	a98a      	add	r1, sp, #552	@ 0x228
 80111ae:	4628      	mov	r0, r5
 80111b0:	f7fe ffb0 	bl	8010114 <ucdr_deserialize_int16_t>
 80111b4:	b140      	cbz	r0, 80111c8 <read_submessage_info+0x84>
 80111b6:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	dd07      	ble.n	80111ce <read_submessage_info+0x8a>
 80111be:	f1b8 0f00 	cmp.w	r8, #0
 80111c2:	bf14      	ite	ne
 80111c4:	2001      	movne	r0, #1
 80111c6:	2002      	moveq	r0, #2
 80111c8:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 80111cc:	e7d8      	b.n	8011180 <read_submessage_info+0x3c>
 80111ce:	2000      	movs	r0, #0
 80111d0:	e7fa      	b.n	80111c8 <read_submessage_info+0x84>
 80111d2:	bf00      	nop

080111d4 <read_submessage_list>:
 80111d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111d8:	b097      	sub	sp, #92	@ 0x5c
 80111da:	4ec1      	ldr	r6, [pc, #772]	@ (80114e0 <read_submessage_list+0x30c>)
 80111dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80111de:	4604      	mov	r4, r0
 80111e0:	460d      	mov	r5, r1
 80111e2:	f04f 0801 	mov.w	r8, #1
 80111e6:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 80111ea:	aa0c      	add	r2, sp, #48	@ 0x30
 80111ec:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 80111f0:	4628      	mov	r0, r5
 80111f2:	f001 fc89 	bl	8012b08 <uxr_read_submessage_header>
 80111f6:	2800      	cmp	r0, #0
 80111f8:	f000 813e 	beq.w	8011478 <read_submessage_list+0x2a4>
 80111fc:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8011200:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8011204:	3b02      	subs	r3, #2
 8011206:	2b0d      	cmp	r3, #13
 8011208:	d8ed      	bhi.n	80111e6 <read_submessage_list+0x12>
 801120a:	a101      	add	r1, pc, #4	@ (adr r1, 8011210 <read_submessage_list+0x3c>)
 801120c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011210:	0801146f 	.word	0x0801146f
 8011214:	080111e7 	.word	0x080111e7
 8011218:	0801145f 	.word	0x0801145f
 801121c:	080113fd 	.word	0x080113fd
 8011220:	080113f3 	.word	0x080113f3
 8011224:	080111e7 	.word	0x080111e7
 8011228:	080111e7 	.word	0x080111e7
 801122c:	08011353 	.word	0x08011353
 8011230:	080112e3 	.word	0x080112e3
 8011234:	080112a3 	.word	0x080112a3
 8011238:	080111e7 	.word	0x080111e7
 801123c:	080111e7 	.word	0x080111e7
 8011240:	080111e7 	.word	0x080111e7
 8011244:	08011249 	.word	0x08011249
 8011248:	a910      	add	r1, sp, #64	@ 0x40
 801124a:	4628      	mov	r0, r5
 801124c:	f002 fe4e 	bl	8013eec <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8011250:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 8011254:	f1b9 0f00 	cmp.w	r9, #0
 8011258:	f000 8116 	beq.w	8011488 <read_submessage_list+0x2b4>
 801125c:	f001 fc9a 	bl	8012b94 <uxr_nanos>
 8011260:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8011262:	4602      	mov	r2, r0
 8011264:	460b      	mov	r3, r1
 8011266:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8011268:	2100      	movs	r1, #0
 801126a:	468c      	mov	ip, r1
 801126c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8011270:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8011274:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8011276:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8011278:	468c      	mov	ip, r1
 801127a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 801127e:	46e2      	mov	sl, ip
 8011280:	46bc      	mov	ip, r7
 8011282:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8011286:	fbc0 7106 	smlal	r7, r1, r0, r6
 801128a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 801128e:	e9cd 7100 	strd	r7, r1, [sp]
 8011292:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8011296:	9106      	str	r1, [sp, #24]
 8011298:	4620      	mov	r0, r4
 801129a:	47c8      	blx	r9
 801129c:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 80112a0:	e7a1      	b.n	80111e6 <read_submessage_list+0x12>
 80112a2:	a910      	add	r1, sp, #64	@ 0x40
 80112a4:	4628      	mov	r0, r5
 80112a6:	f002 fe0f 	bl	8013ec8 <uxr_deserialize_HEARTBEAT_Payload>
 80112aa:	2100      	movs	r1, #0
 80112ac:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80112b0:	f001 fb02 	bl	80128b8 <uxr_stream_id_from_raw>
 80112b4:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80112b8:	900f      	str	r0, [sp, #60]	@ 0x3c
 80112ba:	4639      	mov	r1, r7
 80112bc:	f104 0008 	add.w	r0, r4, #8
 80112c0:	f001 fbe8 	bl	8012a94 <uxr_get_input_reliable_stream>
 80112c4:	2800      	cmp	r0, #0
 80112c6:	d08e      	beq.n	80111e6 <read_submessage_list+0x12>
 80112c8:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 80112cc:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 80112d0:	f007 fae6 	bl	80188a0 <uxr_process_heartbeat>
 80112d4:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 80112d8:	463a      	mov	r2, r7
 80112da:	4620      	mov	r0, r4
 80112dc:	f7ff fdf6 	bl	8010ecc <write_submessage_acknack.isra.0>
 80112e0:	e781      	b.n	80111e6 <read_submessage_list+0x12>
 80112e2:	a910      	add	r1, sp, #64	@ 0x40
 80112e4:	4628      	mov	r0, r5
 80112e6:	f002 fdc7 	bl	8013e78 <uxr_deserialize_ACKNACK_Payload>
 80112ea:	2100      	movs	r1, #0
 80112ec:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80112f0:	f001 fae2 	bl	80128b8 <uxr_stream_id_from_raw>
 80112f4:	900d      	str	r0, [sp, #52]	@ 0x34
 80112f6:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80112fa:	f104 0008 	add.w	r0, r4, #8
 80112fe:	f001 fbb5 	bl	8012a6c <uxr_get_output_reliable_stream>
 8011302:	4607      	mov	r7, r0
 8011304:	2800      	cmp	r0, #0
 8011306:	f43f af6e 	beq.w	80111e6 <read_submessage_list+0x12>
 801130a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 801130e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8011312:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8011316:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801131a:	b289      	uxth	r1, r1
 801131c:	f007 fe1a 	bl	8018f54 <uxr_process_acknack>
 8011320:	4638      	mov	r0, r7
 8011322:	f007 fdd7 	bl	8018ed4 <uxr_begin_output_nack_buffer_it>
 8011326:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801132a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 801132e:	e006      	b.n	801133e <read_submessage_list+0x16a>
 8011330:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011332:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011334:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8011338:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801133a:	6818      	ldr	r0, [r3, #0]
 801133c:	47c8      	blx	r9
 801133e:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8011342:	aa0f      	add	r2, sp, #60	@ 0x3c
 8011344:	4651      	mov	r1, sl
 8011346:	4638      	mov	r0, r7
 8011348:	f007 fdc6 	bl	8018ed8 <uxr_next_reliable_nack_buffer_to_send>
 801134c:	2800      	cmp	r0, #0
 801134e:	d1ef      	bne.n	8011330 <read_submessage_list+0x15c>
 8011350:	e749      	b.n	80111e6 <read_submessage_list+0x12>
 8011352:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8011356:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 801135a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 801135e:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8011362:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8011366:	4651      	mov	r1, sl
 8011368:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801136c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8011370:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8011374:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8011378:	4628      	mov	r0, r5
 801137a:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 801137e:	f002 fadb 	bl	8013938 <uxr_deserialize_BaseObjectRequest>
 8011382:	4650      	mov	r0, sl
 8011384:	a90f      	add	r1, sp, #60	@ 0x3c
 8011386:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801138a:	f000 fdc7 	bl	8011f1c <uxr_parse_base_object_request>
 801138e:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8011392:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011394:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8011398:	9110      	str	r1, [sp, #64]	@ 0x40
 801139a:	3f04      	subs	r7, #4
 801139c:	f009 090e 	and.w	r9, r9, #14
 80113a0:	b2bf      	uxth	r7, r7
 80113a2:	f1bb 0f00 	cmp.w	fp, #0
 80113a6:	d006      	beq.n	80113b6 <read_submessage_list+0x1e2>
 80113a8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80113ac:	9300      	str	r3, [sp, #0]
 80113ae:	4652      	mov	r2, sl
 80113b0:	2300      	movs	r3, #0
 80113b2:	4620      	mov	r0, r4
 80113b4:	47d8      	blx	fp
 80113b6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80113b8:	b16a      	cbz	r2, 80113d6 <read_submessage_list+0x202>
 80113ba:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80113bc:	2100      	movs	r1, #0
 80113be:	3802      	subs	r0, #2
 80113c0:	e002      	b.n	80113c8 <read_submessage_list+0x1f4>
 80113c2:	3101      	adds	r1, #1
 80113c4:	4291      	cmp	r1, r2
 80113c6:	d006      	beq.n	80113d6 <read_submessage_list+0x202>
 80113c8:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80113cc:	4553      	cmp	r3, sl
 80113ce:	d1f8      	bne.n	80113c2 <read_submessage_list+0x1ee>
 80113d0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80113d2:	2200      	movs	r2, #0
 80113d4:	545a      	strb	r2, [r3, r1]
 80113d6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 80113da:	9102      	str	r1, [sp, #8]
 80113dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80113de:	9101      	str	r1, [sp, #4]
 80113e0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80113e2:	9100      	str	r1, [sp, #0]
 80113e4:	464b      	mov	r3, r9
 80113e6:	463a      	mov	r2, r7
 80113e8:	4629      	mov	r1, r5
 80113ea:	4620      	mov	r0, r4
 80113ec:	f7ff fc4c 	bl	8010c88 <read_submessage_format>
 80113f0:	e6f9      	b.n	80111e6 <read_submessage_list+0x12>
 80113f2:	4629      	mov	r1, r5
 80113f4:	4620      	mov	r0, r4
 80113f6:	f7ff fea5 	bl	8011144 <read_submessage_info>
 80113fa:	e6f4      	b.n	80111e6 <read_submessage_list+0x12>
 80113fc:	2a00      	cmp	r2, #0
 80113fe:	d03e      	beq.n	801147e <read_submessage_list+0x2aa>
 8011400:	a910      	add	r1, sp, #64	@ 0x40
 8011402:	4628      	mov	r0, r5
 8011404:	f002 fc94 	bl	8013d30 <uxr_deserialize_STATUS_Payload>
 8011408:	a90e      	add	r1, sp, #56	@ 0x38
 801140a:	aa0d      	add	r2, sp, #52	@ 0x34
 801140c:	a810      	add	r0, sp, #64	@ 0x40
 801140e:	f000 fd85 	bl	8011f1c <uxr_parse_base_object_request>
 8011412:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8011416:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011418:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 801141c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8011420:	910f      	str	r1, [sp, #60]	@ 0x3c
 8011422:	f1ba 0f00 	cmp.w	sl, #0
 8011426:	d006      	beq.n	8011436 <read_submessage_list+0x262>
 8011428:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 801142c:	9300      	str	r3, [sp, #0]
 801142e:	463a      	mov	r2, r7
 8011430:	464b      	mov	r3, r9
 8011432:	4620      	mov	r0, r4
 8011434:	47d0      	blx	sl
 8011436:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8011438:	2a00      	cmp	r2, #0
 801143a:	f43f aed4 	beq.w	80111e6 <read_submessage_list+0x12>
 801143e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8011440:	2100      	movs	r1, #0
 8011442:	3802      	subs	r0, #2
 8011444:	e003      	b.n	801144e <read_submessage_list+0x27a>
 8011446:	3101      	adds	r1, #1
 8011448:	4291      	cmp	r1, r2
 801144a:	f43f aecc 	beq.w	80111e6 <read_submessage_list+0x12>
 801144e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8011452:	42bb      	cmp	r3, r7
 8011454:	d1f7      	bne.n	8011446 <read_submessage_list+0x272>
 8011456:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8011458:	f803 9001 	strb.w	r9, [r3, r1]
 801145c:	e6c3      	b.n	80111e6 <read_submessage_list+0x12>
 801145e:	2a00      	cmp	r2, #0
 8011460:	f47f aec1 	bne.w	80111e6 <read_submessage_list+0x12>
 8011464:	4629      	mov	r1, r5
 8011466:	4620      	mov	r0, r4
 8011468:	f000 fc9e 	bl	8011da8 <uxr_read_create_session_status>
 801146c:	e6bb      	b.n	80111e6 <read_submessage_list+0x12>
 801146e:	4629      	mov	r1, r5
 8011470:	4620      	mov	r0, r4
 8011472:	f7ff fcf5 	bl	8010e60 <read_submessage_get_info>
 8011476:	e6b6      	b.n	80111e6 <read_submessage_list+0x12>
 8011478:	b017      	add	sp, #92	@ 0x5c
 801147a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801147e:	4629      	mov	r1, r5
 8011480:	4620      	mov	r0, r4
 8011482:	f000 fc9d 	bl	8011dc0 <uxr_read_delete_session_status>
 8011486:	e6ae      	b.n	80111e6 <read_submessage_list+0x12>
 8011488:	f001 fb84 	bl	8012b94 <uxr_nanos>
 801148c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801148e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8011490:	464f      	mov	r7, r9
 8011492:	fbc3 2706 	smlal	r2, r7, r3, r6
 8011496:	1812      	adds	r2, r2, r0
 8011498:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801149a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801149c:	eb47 0101 	adc.w	r1, r7, r1
 80114a0:	464f      	mov	r7, r9
 80114a2:	fbc3 0706 	smlal	r0, r7, r3, r6
 80114a6:	463b      	mov	r3, r7
 80114a8:	4684      	mov	ip, r0
 80114aa:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 80114ae:	fbc7 0906 	smlal	r0, r9, r7, r6
 80114b2:	eb1c 0c00 	adds.w	ip, ip, r0
 80114b6:	464f      	mov	r7, r9
 80114b8:	eb43 0307 	adc.w	r3, r3, r7
 80114bc:	ebb2 0c0c 	subs.w	ip, r2, ip
 80114c0:	eb61 0303 	sbc.w	r3, r1, r3
 80114c4:	0fda      	lsrs	r2, r3, #31
 80114c6:	eb12 020c 	adds.w	r2, r2, ip
 80114ca:	f143 0300 	adc.w	r3, r3, #0
 80114ce:	0852      	lsrs	r2, r2, #1
 80114d0:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 80114d4:	105b      	asrs	r3, r3, #1
 80114d6:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 80114da:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 80114de:	e6dd      	b.n	801129c <read_submessage_list+0xc8>
 80114e0:	3b9aca00 	.word	0x3b9aca00

080114e4 <listen_message_reliably>:
 80114e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114e8:	1e0b      	subs	r3, r1, #0
 80114ea:	b09d      	sub	sp, #116	@ 0x74
 80114ec:	bfb8      	it	lt
 80114ee:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 80114f2:	4680      	mov	r8, r0
 80114f4:	9305      	str	r3, [sp, #20]
 80114f6:	f001 fb33 	bl	8012b60 <uxr_millis>
 80114fa:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 80114fe:	4681      	mov	r9, r0
 8011500:	2a00      	cmp	r2, #0
 8011502:	f000 80a1 	beq.w	8011648 <listen_message_reliably+0x164>
 8011506:	2600      	movs	r6, #0
 8011508:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801150c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8011510:	9303      	str	r3, [sp, #12]
 8011512:	4630      	mov	r0, r6
 8011514:	460f      	mov	r7, r1
 8011516:	e00f      	b.n	8011538 <listen_message_reliably+0x54>
 8011518:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 801151c:	9903      	ldr	r1, [sp, #12]
 801151e:	455a      	cmp	r2, fp
 8011520:	f106 0601 	add.w	r6, r6, #1
 8011524:	eb73 0101 	sbcs.w	r1, r3, r1
 8011528:	b2f0      	uxtb	r0, r6
 801152a:	da01      	bge.n	8011530 <listen_message_reliably+0x4c>
 801152c:	4693      	mov	fp, r2
 801152e:	9303      	str	r3, [sp, #12]
 8011530:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8011534:	4283      	cmp	r3, r0
 8011536:	d960      	bls.n	80115fa <listen_message_reliably+0x116>
 8011538:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 801153c:	2102      	movs	r1, #2
 801153e:	2201      	movs	r2, #1
 8011540:	f001 f990 	bl	8012864 <uxr_stream_id>
 8011544:	00e4      	lsls	r4, r4, #3
 8011546:	f104 0520 	add.w	r5, r4, #32
 801154a:	4445      	add	r5, r8
 801154c:	4601      	mov	r1, r0
 801154e:	463b      	mov	r3, r7
 8011550:	464a      	mov	r2, r9
 8011552:	4628      	mov	r0, r5
 8011554:	9109      	str	r1, [sp, #36]	@ 0x24
 8011556:	f007 fc93 	bl	8018e80 <uxr_update_output_stream_heartbeat_timestamp>
 801155a:	eb08 0304 	add.w	r3, r8, r4
 801155e:	2800      	cmp	r0, #0
 8011560:	d0da      	beq.n	8011518 <listen_message_reliably+0x34>
 8011562:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8011566:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 801156a:	9304      	str	r3, [sp, #16]
 801156c:	4640      	mov	r0, r8
 801156e:	f000 fcaf 	bl	8011ed0 <uxr_session_header_offset>
 8011572:	3501      	adds	r5, #1
 8011574:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8011578:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801157c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8011580:	2300      	movs	r3, #0
 8011582:	2211      	movs	r2, #17
 8011584:	9000      	str	r0, [sp, #0]
 8011586:	a90c      	add	r1, sp, #48	@ 0x30
 8011588:	4650      	mov	r0, sl
 801158a:	f7fe ffa1 	bl	80104d0 <ucdr_init_buffer_origin_offset>
 801158e:	2300      	movs	r3, #0
 8011590:	2205      	movs	r2, #5
 8011592:	210b      	movs	r1, #11
 8011594:	4650      	mov	r0, sl
 8011596:	f001 fa9d 	bl	8012ad4 <uxr_buffer_submessage_header>
 801159a:	8968      	ldrh	r0, [r5, #10]
 801159c:	2101      	movs	r1, #1
 801159e:	f007 fd31 	bl	8019004 <uxr_seq_num_add>
 80115a2:	892b      	ldrh	r3, [r5, #8]
 80115a4:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80115a8:	4602      	mov	r2, r0
 80115aa:	9b04      	ldr	r3, [sp, #16]
 80115ac:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 80115b0:	a90a      	add	r1, sp, #40	@ 0x28
 80115b2:	4650      	mov	r0, sl
 80115b4:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80115b8:	f002 fc72 	bl	8013ea0 <uxr_serialize_HEARTBEAT_Payload>
 80115bc:	2200      	movs	r2, #0
 80115be:	4611      	mov	r1, r2
 80115c0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80115c2:	4640      	mov	r0, r8
 80115c4:	f000 fc2e 	bl	8011e24 <uxr_stamp_session_header>
 80115c8:	4650      	mov	r0, sl
 80115ca:	f7fe ffbf 	bl	801054c <ucdr_buffer_length>
 80115ce:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 80115d2:	4602      	mov	r2, r0
 80115d4:	a90c      	add	r1, sp, #48	@ 0x30
 80115d6:	e9d3 0500 	ldrd	r0, r5, [r3]
 80115da:	4444      	add	r4, r8
 80115dc:	47a8      	blx	r5
 80115de:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 80115e2:	9903      	ldr	r1, [sp, #12]
 80115e4:	455a      	cmp	r2, fp
 80115e6:	f106 0601 	add.w	r6, r6, #1
 80115ea:	eb73 0101 	sbcs.w	r1, r3, r1
 80115ee:	b2f0      	uxtb	r0, r6
 80115f0:	db9c      	blt.n	801152c <listen_message_reliably+0x48>
 80115f2:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 80115f6:	4283      	cmp	r3, r0
 80115f8:	d89e      	bhi.n	8011538 <listen_message_reliably+0x54>
 80115fa:	9a03      	ldr	r2, [sp, #12]
 80115fc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011600:	429a      	cmp	r2, r3
 8011602:	bf08      	it	eq
 8011604:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8011608:	d01e      	beq.n	8011648 <listen_message_reliably+0x164>
 801160a:	ebab 0309 	sub.w	r3, fp, r9
 801160e:	9905      	ldr	r1, [sp, #20]
 8011610:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8011614:	2b00      	cmp	r3, #0
 8011616:	bf08      	it	eq
 8011618:	2301      	moveq	r3, #1
 801161a:	4299      	cmp	r1, r3
 801161c:	bfa8      	it	ge
 801161e:	4619      	movge	r1, r3
 8011620:	6894      	ldr	r4, [r2, #8]
 8011622:	6810      	ldr	r0, [r2, #0]
 8011624:	4689      	mov	r9, r1
 8011626:	460b      	mov	r3, r1
 8011628:	aa08      	add	r2, sp, #32
 801162a:	a907      	add	r1, sp, #28
 801162c:	47a0      	blx	r4
 801162e:	b968      	cbnz	r0, 801164c <listen_message_reliably+0x168>
 8011630:	9b05      	ldr	r3, [sp, #20]
 8011632:	eba3 0309 	sub.w	r3, r3, r9
 8011636:	2b00      	cmp	r3, #0
 8011638:	9305      	str	r3, [sp, #20]
 801163a:	f73f af5c 	bgt.w	80114f6 <listen_message_reliably+0x12>
 801163e:	4604      	mov	r4, r0
 8011640:	4620      	mov	r0, r4
 8011642:	b01d      	add	sp, #116	@ 0x74
 8011644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011648:	9b05      	ldr	r3, [sp, #20]
 801164a:	e7e0      	b.n	801160e <listen_message_reliably+0x12a>
 801164c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011650:	4604      	mov	r4, r0
 8011652:	a80c      	add	r0, sp, #48	@ 0x30
 8011654:	f7fe ff4e 	bl	80104f4 <ucdr_init_buffer>
 8011658:	2500      	movs	r5, #0
 801165a:	f10d 031a 	add.w	r3, sp, #26
 801165e:	aa06      	add	r2, sp, #24
 8011660:	a90c      	add	r1, sp, #48	@ 0x30
 8011662:	4640      	mov	r0, r8
 8011664:	f88d 5018 	strb.w	r5, [sp, #24]
 8011668:	f000 fbf0 	bl	8011e4c <uxr_read_session_header>
 801166c:	b918      	cbnz	r0, 8011676 <listen_message_reliably+0x192>
 801166e:	4620      	mov	r0, r4
 8011670:	b01d      	add	sp, #116	@ 0x74
 8011672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011676:	4629      	mov	r1, r5
 8011678:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801167c:	f001 f91c 	bl	80128b8 <uxr_stream_id_from_raw>
 8011680:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8011684:	2d01      	cmp	r5, #1
 8011686:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 801168a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 801168e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011692:	d04b      	beq.n	801172c <listen_message_reliably+0x248>
 8011694:	2d02      	cmp	r5, #2
 8011696:	d00f      	beq.n	80116b8 <listen_message_reliably+0x1d4>
 8011698:	2d00      	cmp	r5, #0
 801169a:	d1e8      	bne.n	801166e <listen_message_reliably+0x18a>
 801169c:	4629      	mov	r1, r5
 801169e:	4628      	mov	r0, r5
 80116a0:	f001 f90a 	bl	80128b8 <uxr_stream_id_from_raw>
 80116a4:	a90c      	add	r1, sp, #48	@ 0x30
 80116a6:	4602      	mov	r2, r0
 80116a8:	4640      	mov	r0, r8
 80116aa:	920a      	str	r2, [sp, #40]	@ 0x28
 80116ac:	f7ff fd92 	bl	80111d4 <read_submessage_list>
 80116b0:	4620      	mov	r0, r4
 80116b2:	b01d      	add	sp, #116	@ 0x74
 80116b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116b8:	4631      	mov	r1, r6
 80116ba:	f108 0008 	add.w	r0, r8, #8
 80116be:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 80116c2:	f001 f9e7 	bl	8012a94 <uxr_get_input_reliable_stream>
 80116c6:	4607      	mov	r7, r0
 80116c8:	b338      	cbz	r0, 801171a <listen_message_reliably+0x236>
 80116ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80116cc:	9203      	str	r2, [sp, #12]
 80116ce:	a80c      	add	r0, sp, #48	@ 0x30
 80116d0:	f7fe ff40 	bl	8010554 <ucdr_buffer_remaining>
 80116d4:	4603      	mov	r3, r0
 80116d6:	f10d 0019 	add.w	r0, sp, #25
 80116da:	9000      	str	r0, [sp, #0]
 80116dc:	9a03      	ldr	r2, [sp, #12]
 80116de:	4651      	mov	r1, sl
 80116e0:	4638      	mov	r0, r7
 80116e2:	f006 ffe3 	bl	80186ac <uxr_receive_reliable_message>
 80116e6:	b1c0      	cbz	r0, 801171a <listen_message_reliably+0x236>
 80116e8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80116ec:	b393      	cbz	r3, 8011754 <listen_message_reliably+0x270>
 80116ee:	ad14      	add	r5, sp, #80	@ 0x50
 80116f0:	f04f 0a02 	mov.w	sl, #2
 80116f4:	e00a      	b.n	801170c <listen_message_reliably+0x228>
 80116f6:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 80116fa:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 80116fe:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8011702:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011704:	4629      	mov	r1, r5
 8011706:	4640      	mov	r0, r8
 8011708:	f7ff fd64 	bl	80111d4 <read_submessage_list>
 801170c:	2204      	movs	r2, #4
 801170e:	4629      	mov	r1, r5
 8011710:	4638      	mov	r0, r7
 8011712:	f007 f84b 	bl	80187ac <uxr_next_input_reliable_buffer_available>
 8011716:	2800      	cmp	r0, #0
 8011718:	d1ed      	bne.n	80116f6 <listen_message_reliably+0x212>
 801171a:	4640      	mov	r0, r8
 801171c:	4632      	mov	r2, r6
 801171e:	4649      	mov	r1, r9
 8011720:	f7ff fbd4 	bl	8010ecc <write_submessage_acknack.isra.0>
 8011724:	4620      	mov	r0, r4
 8011726:	b01d      	add	sp, #116	@ 0x74
 8011728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801172c:	4631      	mov	r1, r6
 801172e:	f108 0008 	add.w	r0, r8, #8
 8011732:	f001 f9a5 	bl	8012a80 <uxr_get_input_best_effort_stream>
 8011736:	2800      	cmp	r0, #0
 8011738:	d099      	beq.n	801166e <listen_message_reliably+0x18a>
 801173a:	4651      	mov	r1, sl
 801173c:	f006 ff22 	bl	8018584 <uxr_receive_best_effort_message>
 8011740:	2800      	cmp	r0, #0
 8011742:	d094      	beq.n	801166e <listen_message_reliably+0x18a>
 8011744:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8011748:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801174a:	a90c      	add	r1, sp, #48	@ 0x30
 801174c:	4640      	mov	r0, r8
 801174e:	f7ff fd41 	bl	80111d4 <read_submessage_list>
 8011752:	e78c      	b.n	801166e <listen_message_reliably+0x18a>
 8011754:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8011758:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801175a:	a90c      	add	r1, sp, #48	@ 0x30
 801175c:	4640      	mov	r0, r8
 801175e:	f7ff fd39 	bl	80111d4 <read_submessage_list>
 8011762:	e7c4      	b.n	80116ee <listen_message_reliably+0x20a>

08011764 <uxr_run_session_timeout>:
 8011764:	b570      	push	{r4, r5, r6, lr}
 8011766:	4604      	mov	r4, r0
 8011768:	460d      	mov	r5, r1
 801176a:	f001 f9f9 	bl	8012b60 <uxr_millis>
 801176e:	4606      	mov	r6, r0
 8011770:	4620      	mov	r0, r4
 8011772:	f7ff fc71 	bl	8011058 <uxr_flash_output_streams>
 8011776:	4629      	mov	r1, r5
 8011778:	4620      	mov	r0, r4
 801177a:	f7ff feb3 	bl	80114e4 <listen_message_reliably>
 801177e:	f001 f9ef 	bl	8012b60 <uxr_millis>
 8011782:	1b83      	subs	r3, r0, r6
 8011784:	1ae9      	subs	r1, r5, r3
 8011786:	2900      	cmp	r1, #0
 8011788:	dcf6      	bgt.n	8011778 <uxr_run_session_timeout+0x14>
 801178a:	f104 0008 	add.w	r0, r4, #8
 801178e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011792:	f001 b989 	b.w	8012aa8 <uxr_output_streams_confirmed>
 8011796:	bf00      	nop

08011798 <uxr_run_session_until_data>:
 8011798:	b570      	push	{r4, r5, r6, lr}
 801179a:	4604      	mov	r4, r0
 801179c:	460d      	mov	r5, r1
 801179e:	f001 f9df 	bl	8012b60 <uxr_millis>
 80117a2:	4606      	mov	r6, r0
 80117a4:	4620      	mov	r0, r4
 80117a6:	f7ff fc57 	bl	8011058 <uxr_flash_output_streams>
 80117aa:	2300      	movs	r3, #0
 80117ac:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 80117b0:	4629      	mov	r1, r5
 80117b2:	e005      	b.n	80117c0 <uxr_run_session_until_data+0x28>
 80117b4:	f001 f9d4 	bl	8012b60 <uxr_millis>
 80117b8:	1b83      	subs	r3, r0, r6
 80117ba:	1ae9      	subs	r1, r5, r3
 80117bc:	2900      	cmp	r1, #0
 80117be:	dd07      	ble.n	80117d0 <uxr_run_session_until_data+0x38>
 80117c0:	4620      	mov	r0, r4
 80117c2:	f7ff fe8f 	bl	80114e4 <listen_message_reliably>
 80117c6:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80117ca:	2800      	cmp	r0, #0
 80117cc:	d0f2      	beq.n	80117b4 <uxr_run_session_until_data+0x1c>
 80117ce:	bd70      	pop	{r4, r5, r6, pc}
 80117d0:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80117d4:	bd70      	pop	{r4, r5, r6, pc}
 80117d6:	bf00      	nop

080117d8 <uxr_run_session_until_confirm_delivery>:
 80117d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117dc:	4606      	mov	r6, r0
 80117de:	460d      	mov	r5, r1
 80117e0:	f001 f9be 	bl	8012b60 <uxr_millis>
 80117e4:	4607      	mov	r7, r0
 80117e6:	4630      	mov	r0, r6
 80117e8:	f7ff fc36 	bl	8011058 <uxr_flash_output_streams>
 80117ec:	2d00      	cmp	r5, #0
 80117ee:	f106 0808 	add.w	r8, r6, #8
 80117f2:	bfa8      	it	ge
 80117f4:	462c      	movge	r4, r5
 80117f6:	da07      	bge.n	8011808 <uxr_run_session_until_confirm_delivery+0x30>
 80117f8:	e00e      	b.n	8011818 <uxr_run_session_until_confirm_delivery+0x40>
 80117fa:	f7ff fe73 	bl	80114e4 <listen_message_reliably>
 80117fe:	f001 f9af 	bl	8012b60 <uxr_millis>
 8011802:	1bc3      	subs	r3, r0, r7
 8011804:	1aec      	subs	r4, r5, r3
 8011806:	d407      	bmi.n	8011818 <uxr_run_session_until_confirm_delivery+0x40>
 8011808:	4640      	mov	r0, r8
 801180a:	f001 f94d 	bl	8012aa8 <uxr_output_streams_confirmed>
 801180e:	4603      	mov	r3, r0
 8011810:	4621      	mov	r1, r4
 8011812:	4630      	mov	r0, r6
 8011814:	2b00      	cmp	r3, #0
 8011816:	d0f0      	beq.n	80117fa <uxr_run_session_until_confirm_delivery+0x22>
 8011818:	4640      	mov	r0, r8
 801181a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801181e:	f001 b943 	b.w	8012aa8 <uxr_output_streams_confirmed>
 8011822:	bf00      	nop

08011824 <uxr_run_session_until_all_status>:
 8011824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011828:	9c08      	ldr	r4, [sp, #32]
 801182a:	4606      	mov	r6, r0
 801182c:	460f      	mov	r7, r1
 801182e:	4691      	mov	r9, r2
 8011830:	461d      	mov	r5, r3
 8011832:	f7ff fc11 	bl	8011058 <uxr_flash_output_streams>
 8011836:	b124      	cbz	r4, 8011842 <uxr_run_session_until_all_status+0x1e>
 8011838:	4622      	mov	r2, r4
 801183a:	21ff      	movs	r1, #255	@ 0xff
 801183c:	4628      	mov	r0, r5
 801183e:	f008 fbc3 	bl	8019fc8 <memset>
 8011842:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8011846:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8011848:	f001 f98a 	bl	8012b60 <uxr_millis>
 801184c:	3d01      	subs	r5, #1
 801184e:	f1a9 0902 	sub.w	r9, r9, #2
 8011852:	4680      	mov	r8, r0
 8011854:	4639      	mov	r1, r7
 8011856:	4630      	mov	r0, r6
 8011858:	f7ff fe44 	bl	80114e4 <listen_message_reliably>
 801185c:	f001 f980 	bl	8012b60 <uxr_millis>
 8011860:	eba0 0008 	sub.w	r0, r0, r8
 8011864:	1a39      	subs	r1, r7, r0
 8011866:	b344      	cbz	r4, 80118ba <uxr_run_session_until_all_status+0x96>
 8011868:	4628      	mov	r0, r5
 801186a:	46ac      	mov	ip, r5
 801186c:	2301      	movs	r3, #1
 801186e:	e002      	b.n	8011876 <uxr_run_session_until_all_status+0x52>
 8011870:	42a3      	cmp	r3, r4
 8011872:	d20d      	bcs.n	8011890 <uxr_run_session_until_all_status+0x6c>
 8011874:	3301      	adds	r3, #1
 8011876:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 801187a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801187e:	d1f7      	bne.n	8011870 <uxr_run_session_until_all_status+0x4c>
 8011880:	42a3      	cmp	r3, r4
 8011882:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8011886:	d213      	bcs.n	80118b0 <uxr_run_session_until_all_status+0x8c>
 8011888:	2a00      	cmp	r2, #0
 801188a:	d0f3      	beq.n	8011874 <uxr_run_session_until_all_status+0x50>
 801188c:	2900      	cmp	r1, #0
 801188e:	dce2      	bgt.n	8011856 <uxr_run_session_until_all_status+0x32>
 8011890:	2300      	movs	r3, #0
 8011892:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8011894:	442c      	add	r4, r5
 8011896:	e001      	b.n	801189c <uxr_run_session_until_all_status+0x78>
 8011898:	2b01      	cmp	r3, #1
 801189a:	d812      	bhi.n	80118c2 <uxr_run_session_until_all_status+0x9e>
 801189c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80118a0:	4284      	cmp	r4, r0
 80118a2:	d1f9      	bne.n	8011898 <uxr_run_session_until_all_status+0x74>
 80118a4:	2b01      	cmp	r3, #1
 80118a6:	bf8c      	ite	hi
 80118a8:	2000      	movhi	r0, #0
 80118aa:	2001      	movls	r0, #1
 80118ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118b0:	2900      	cmp	r1, #0
 80118b2:	dded      	ble.n	8011890 <uxr_run_session_until_all_status+0x6c>
 80118b4:	2a00      	cmp	r2, #0
 80118b6:	d1ce      	bne.n	8011856 <uxr_run_session_until_all_status+0x32>
 80118b8:	e7ea      	b.n	8011890 <uxr_run_session_until_all_status+0x6c>
 80118ba:	67f4      	str	r4, [r6, #124]	@ 0x7c
 80118bc:	2001      	movs	r0, #1
 80118be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118c2:	2000      	movs	r0, #0
 80118c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080118c8 <wait_session_status>:
 80118c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118cc:	4604      	mov	r4, r0
 80118ce:	b09d      	sub	sp, #116	@ 0x74
 80118d0:	20ff      	movs	r0, #255	@ 0xff
 80118d2:	7160      	strb	r0, [r4, #5]
 80118d4:	9303      	str	r3, [sp, #12]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	f000 80b6 	beq.w	8011a48 <wait_session_status+0x180>
 80118dc:	468a      	mov	sl, r1
 80118de:	4691      	mov	r9, r2
 80118e0:	f04f 0b00 	mov.w	fp, #0
 80118e4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80118e6:	464a      	mov	r2, r9
 80118e8:	e9d3 0500 	ldrd	r0, r5, [r3]
 80118ec:	4651      	mov	r1, sl
 80118ee:	47a8      	blx	r5
 80118f0:	f001 f936 	bl	8012b60 <uxr_millis>
 80118f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80118f8:	4605      	mov	r5, r0
 80118fa:	e009      	b.n	8011910 <wait_session_status+0x48>
 80118fc:	f001 f930 	bl	8012b60 <uxr_millis>
 8011900:	1b40      	subs	r0, r0, r5
 8011902:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011906:	2b00      	cmp	r3, #0
 8011908:	dd40      	ble.n	801198c <wait_session_status+0xc4>
 801190a:	7960      	ldrb	r0, [r4, #5]
 801190c:	28ff      	cmp	r0, #255	@ 0xff
 801190e:	d145      	bne.n	801199c <wait_session_status+0xd4>
 8011910:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8011912:	a908      	add	r1, sp, #32
 8011914:	6896      	ldr	r6, [r2, #8]
 8011916:	6810      	ldr	r0, [r2, #0]
 8011918:	aa09      	add	r2, sp, #36	@ 0x24
 801191a:	47b0      	blx	r6
 801191c:	2800      	cmp	r0, #0
 801191e:	d0ed      	beq.n	80118fc <wait_session_status+0x34>
 8011920:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8011924:	a80c      	add	r0, sp, #48	@ 0x30
 8011926:	f7fe fde5 	bl	80104f4 <ucdr_init_buffer>
 801192a:	2600      	movs	r6, #0
 801192c:	f10d 031e 	add.w	r3, sp, #30
 8011930:	aa07      	add	r2, sp, #28
 8011932:	a90c      	add	r1, sp, #48	@ 0x30
 8011934:	4620      	mov	r0, r4
 8011936:	f88d 601c 	strb.w	r6, [sp, #28]
 801193a:	f000 fa87 	bl	8011e4c <uxr_read_session_header>
 801193e:	2800      	cmp	r0, #0
 8011940:	d0dc      	beq.n	80118fc <wait_session_status+0x34>
 8011942:	4631      	mov	r1, r6
 8011944:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8011948:	f000 ffb6 	bl	80128b8 <uxr_stream_id_from_raw>
 801194c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011950:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8011954:	9302      	str	r3, [sp, #8]
 8011956:	2f01      	cmp	r7, #1
 8011958:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 801195c:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011960:	d05c      	beq.n	8011a1c <wait_session_status+0x154>
 8011962:	2f02      	cmp	r7, #2
 8011964:	d020      	beq.n	80119a8 <wait_session_status+0xe0>
 8011966:	2f00      	cmp	r7, #0
 8011968:	d1c8      	bne.n	80118fc <wait_session_status+0x34>
 801196a:	4639      	mov	r1, r7
 801196c:	4638      	mov	r0, r7
 801196e:	f000 ffa3 	bl	80128b8 <uxr_stream_id_from_raw>
 8011972:	a90c      	add	r1, sp, #48	@ 0x30
 8011974:	4602      	mov	r2, r0
 8011976:	900b      	str	r0, [sp, #44]	@ 0x2c
 8011978:	4620      	mov	r0, r4
 801197a:	f7ff fc2b 	bl	80111d4 <read_submessage_list>
 801197e:	f001 f8ef 	bl	8012b60 <uxr_millis>
 8011982:	1b40      	subs	r0, r0, r5
 8011984:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011988:	2b00      	cmp	r3, #0
 801198a:	dcbe      	bgt.n	801190a <wait_session_status+0x42>
 801198c:	9b03      	ldr	r3, [sp, #12]
 801198e:	7960      	ldrb	r0, [r4, #5]
 8011990:	f10b 0b01 	add.w	fp, fp, #1
 8011994:	455b      	cmp	r3, fp
 8011996:	d001      	beq.n	801199c <wait_session_status+0xd4>
 8011998:	28ff      	cmp	r0, #255	@ 0xff
 801199a:	d0a3      	beq.n	80118e4 <wait_session_status+0x1c>
 801199c:	38ff      	subs	r0, #255	@ 0xff
 801199e:	bf18      	it	ne
 80119a0:	2001      	movne	r0, #1
 80119a2:	b01d      	add	sp, #116	@ 0x74
 80119a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119a8:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80119ac:	9304      	str	r3, [sp, #16]
 80119ae:	4631      	mov	r1, r6
 80119b0:	f104 0008 	add.w	r0, r4, #8
 80119b4:	f001 f86e 	bl	8012a94 <uxr_get_input_reliable_stream>
 80119b8:	4680      	mov	r8, r0
 80119ba:	b348      	cbz	r0, 8011a10 <wait_session_status+0x148>
 80119bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80119be:	9205      	str	r2, [sp, #20]
 80119c0:	a80c      	add	r0, sp, #48	@ 0x30
 80119c2:	f7fe fdc7 	bl	8010554 <ucdr_buffer_remaining>
 80119c6:	4603      	mov	r3, r0
 80119c8:	f10d 001d 	add.w	r0, sp, #29
 80119cc:	9000      	str	r0, [sp, #0]
 80119ce:	9a05      	ldr	r2, [sp, #20]
 80119d0:	9902      	ldr	r1, [sp, #8]
 80119d2:	4640      	mov	r0, r8
 80119d4:	f006 fe6a 	bl	80186ac <uxr_receive_reliable_message>
 80119d8:	b1d0      	cbz	r0, 8011a10 <wait_session_status+0x148>
 80119da:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d03a      	beq.n	8011a58 <wait_session_status+0x190>
 80119e2:	9f04      	ldr	r7, [sp, #16]
 80119e4:	e00a      	b.n	80119fc <wait_session_status+0x134>
 80119e6:	f04f 0302 	mov.w	r3, #2
 80119ea:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 80119ee:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 80119f2:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 80119f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80119f8:	f7ff fbec 	bl	80111d4 <read_submessage_list>
 80119fc:	a914      	add	r1, sp, #80	@ 0x50
 80119fe:	2204      	movs	r2, #4
 8011a00:	4640      	mov	r0, r8
 8011a02:	f006 fed3 	bl	80187ac <uxr_next_input_reliable_buffer_available>
 8011a06:	4603      	mov	r3, r0
 8011a08:	a914      	add	r1, sp, #80	@ 0x50
 8011a0a:	4620      	mov	r0, r4
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d1ea      	bne.n	80119e6 <wait_session_status+0x11e>
 8011a10:	9904      	ldr	r1, [sp, #16]
 8011a12:	4632      	mov	r2, r6
 8011a14:	4620      	mov	r0, r4
 8011a16:	f7ff fa59 	bl	8010ecc <write_submessage_acknack.isra.0>
 8011a1a:	e76f      	b.n	80118fc <wait_session_status+0x34>
 8011a1c:	4631      	mov	r1, r6
 8011a1e:	f104 0008 	add.w	r0, r4, #8
 8011a22:	f001 f82d 	bl	8012a80 <uxr_get_input_best_effort_stream>
 8011a26:	2800      	cmp	r0, #0
 8011a28:	f43f af68 	beq.w	80118fc <wait_session_status+0x34>
 8011a2c:	9902      	ldr	r1, [sp, #8]
 8011a2e:	f006 fda9 	bl	8018584 <uxr_receive_best_effort_message>
 8011a32:	2800      	cmp	r0, #0
 8011a34:	f43f af62 	beq.w	80118fc <wait_session_status+0x34>
 8011a38:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8011a3c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011a3e:	a90c      	add	r1, sp, #48	@ 0x30
 8011a40:	4620      	mov	r0, r4
 8011a42:	f7ff fbc7 	bl	80111d4 <read_submessage_list>
 8011a46:	e759      	b.n	80118fc <wait_session_status+0x34>
 8011a48:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011a4a:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011a4e:	47a0      	blx	r4
 8011a50:	2001      	movs	r0, #1
 8011a52:	b01d      	add	sp, #116	@ 0x74
 8011a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a58:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8011a5c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011a5e:	a90c      	add	r1, sp, #48	@ 0x30
 8011a60:	4620      	mov	r0, r4
 8011a62:	f7ff fbb7 	bl	80111d4 <read_submessage_list>
 8011a66:	e7bc      	b.n	80119e2 <wait_session_status+0x11a>

08011a68 <uxr_delete_session_retries>:
 8011a68:	b530      	push	{r4, r5, lr}
 8011a6a:	b08f      	sub	sp, #60	@ 0x3c
 8011a6c:	4604      	mov	r4, r0
 8011a6e:	460d      	mov	r5, r1
 8011a70:	f000 fa2e 	bl	8011ed0 <uxr_session_header_offset>
 8011a74:	2300      	movs	r3, #0
 8011a76:	2210      	movs	r2, #16
 8011a78:	9000      	str	r0, [sp, #0]
 8011a7a:	a902      	add	r1, sp, #8
 8011a7c:	a806      	add	r0, sp, #24
 8011a7e:	f7fe fd27 	bl	80104d0 <ucdr_init_buffer_origin_offset>
 8011a82:	a906      	add	r1, sp, #24
 8011a84:	4620      	mov	r0, r4
 8011a86:	f000 f973 	bl	8011d70 <uxr_buffer_delete_session>
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	4611      	mov	r1, r2
 8011a8e:	9b06      	ldr	r3, [sp, #24]
 8011a90:	4620      	mov	r0, r4
 8011a92:	f000 f9c7 	bl	8011e24 <uxr_stamp_session_header>
 8011a96:	a806      	add	r0, sp, #24
 8011a98:	f7fe fd58 	bl	801054c <ucdr_buffer_length>
 8011a9c:	462b      	mov	r3, r5
 8011a9e:	4602      	mov	r2, r0
 8011aa0:	a902      	add	r1, sp, #8
 8011aa2:	4620      	mov	r0, r4
 8011aa4:	f7ff ff10 	bl	80118c8 <wait_session_status>
 8011aa8:	b118      	cbz	r0, 8011ab2 <uxr_delete_session_retries+0x4a>
 8011aaa:	7960      	ldrb	r0, [r4, #5]
 8011aac:	fab0 f080 	clz	r0, r0
 8011ab0:	0940      	lsrs	r0, r0, #5
 8011ab2:	b00f      	add	sp, #60	@ 0x3c
 8011ab4:	bd30      	pop	{r4, r5, pc}
 8011ab6:	bf00      	nop

08011ab8 <uxr_create_session>:
 8011ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011abc:	f100 0b08 	add.w	fp, r0, #8
 8011ac0:	b0ab      	sub	sp, #172	@ 0xac
 8011ac2:	4604      	mov	r4, r0
 8011ac4:	4658      	mov	r0, fp
 8011ac6:	f000 ff2b 	bl	8012920 <uxr_reset_stream_storage>
 8011aca:	4620      	mov	r0, r4
 8011acc:	f000 fa00 	bl	8011ed0 <uxr_session_header_offset>
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	9000      	str	r0, [sp, #0]
 8011ad4:	221c      	movs	r2, #28
 8011ad6:	a90b      	add	r1, sp, #44	@ 0x2c
 8011ad8:	a812      	add	r0, sp, #72	@ 0x48
 8011ada:	f7fe fcf9 	bl	80104d0 <ucdr_init_buffer_origin_offset>
 8011ade:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011ae0:	8a1a      	ldrh	r2, [r3, #16]
 8011ae2:	3a04      	subs	r2, #4
 8011ae4:	b292      	uxth	r2, r2
 8011ae6:	a912      	add	r1, sp, #72	@ 0x48
 8011ae8:	4620      	mov	r0, r4
 8011aea:	f000 f917 	bl	8011d1c <uxr_buffer_create_session>
 8011aee:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8011af0:	4620      	mov	r0, r4
 8011af2:	f000 f983 	bl	8011dfc <uxr_stamp_create_session_header>
 8011af6:	a812      	add	r0, sp, #72	@ 0x48
 8011af8:	f7fe fd28 	bl	801054c <ucdr_buffer_length>
 8011afc:	23ff      	movs	r3, #255	@ 0xff
 8011afe:	7163      	strb	r3, [r4, #5]
 8011b00:	230a      	movs	r3, #10
 8011b02:	46da      	mov	sl, fp
 8011b04:	9303      	str	r3, [sp, #12]
 8011b06:	4683      	mov	fp, r0
 8011b08:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011b0a:	465a      	mov	r2, fp
 8011b0c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011b10:	a90b      	add	r1, sp, #44	@ 0x2c
 8011b12:	47a8      	blx	r5
 8011b14:	f001 f824 	bl	8012b60 <uxr_millis>
 8011b18:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011b1c:	4605      	mov	r5, r0
 8011b1e:	e009      	b.n	8011b34 <uxr_create_session+0x7c>
 8011b20:	f001 f81e 	bl	8012b60 <uxr_millis>
 8011b24:	1b40      	subs	r0, r0, r5
 8011b26:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	7962      	ldrb	r2, [r4, #5]
 8011b2e:	dd38      	ble.n	8011ba2 <uxr_create_session+0xea>
 8011b30:	2aff      	cmp	r2, #255	@ 0xff
 8011b32:	d13c      	bne.n	8011bae <uxr_create_session+0xf6>
 8011b34:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8011b36:	a907      	add	r1, sp, #28
 8011b38:	6896      	ldr	r6, [r2, #8]
 8011b3a:	6810      	ldr	r0, [r2, #0]
 8011b3c:	aa08      	add	r2, sp, #32
 8011b3e:	47b0      	blx	r6
 8011b40:	2800      	cmp	r0, #0
 8011b42:	d0ed      	beq.n	8011b20 <uxr_create_session+0x68>
 8011b44:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011b48:	a81a      	add	r0, sp, #104	@ 0x68
 8011b4a:	f7fe fcd3 	bl	80104f4 <ucdr_init_buffer>
 8011b4e:	2600      	movs	r6, #0
 8011b50:	f10d 031a 	add.w	r3, sp, #26
 8011b54:	aa06      	add	r2, sp, #24
 8011b56:	a91a      	add	r1, sp, #104	@ 0x68
 8011b58:	4620      	mov	r0, r4
 8011b5a:	f88d 6018 	strb.w	r6, [sp, #24]
 8011b5e:	f000 f975 	bl	8011e4c <uxr_read_session_header>
 8011b62:	2800      	cmp	r0, #0
 8011b64:	d0dc      	beq.n	8011b20 <uxr_create_session+0x68>
 8011b66:	4631      	mov	r1, r6
 8011b68:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011b6c:	f000 fea4 	bl	80128b8 <uxr_stream_id_from_raw>
 8011b70:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8011b74:	2e01      	cmp	r6, #1
 8011b76:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8011b7a:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8011b7e:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8011b82:	d053      	beq.n	8011c2c <uxr_create_session+0x174>
 8011b84:	2e02      	cmp	r6, #2
 8011b86:	d018      	beq.n	8011bba <uxr_create_session+0x102>
 8011b88:	2e00      	cmp	r6, #0
 8011b8a:	d1c9      	bne.n	8011b20 <uxr_create_session+0x68>
 8011b8c:	4631      	mov	r1, r6
 8011b8e:	4630      	mov	r0, r6
 8011b90:	f000 fe92 	bl	80128b8 <uxr_stream_id_from_raw>
 8011b94:	a91a      	add	r1, sp, #104	@ 0x68
 8011b96:	4602      	mov	r2, r0
 8011b98:	900a      	str	r0, [sp, #40]	@ 0x28
 8011b9a:	4620      	mov	r0, r4
 8011b9c:	f7ff fb1a 	bl	80111d4 <read_submessage_list>
 8011ba0:	e7be      	b.n	8011b20 <uxr_create_session+0x68>
 8011ba2:	9b03      	ldr	r3, [sp, #12]
 8011ba4:	3b01      	subs	r3, #1
 8011ba6:	9303      	str	r3, [sp, #12]
 8011ba8:	d001      	beq.n	8011bae <uxr_create_session+0xf6>
 8011baa:	2aff      	cmp	r2, #255	@ 0xff
 8011bac:	d0ac      	beq.n	8011b08 <uxr_create_session+0x50>
 8011bae:	2a00      	cmp	r2, #0
 8011bb0:	d051      	beq.n	8011c56 <uxr_create_session+0x19e>
 8011bb2:	2000      	movs	r0, #0
 8011bb4:	b02b      	add	sp, #172	@ 0xac
 8011bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bba:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8011bbe:	9304      	str	r3, [sp, #16]
 8011bc0:	4639      	mov	r1, r7
 8011bc2:	4650      	mov	r0, sl
 8011bc4:	f000 ff66 	bl	8012a94 <uxr_get_input_reliable_stream>
 8011bc8:	4680      	mov	r8, r0
 8011bca:	b348      	cbz	r0, 8011c20 <uxr_create_session+0x168>
 8011bcc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8011bce:	9205      	str	r2, [sp, #20]
 8011bd0:	a81a      	add	r0, sp, #104	@ 0x68
 8011bd2:	f7fe fcbf 	bl	8010554 <ucdr_buffer_remaining>
 8011bd6:	4603      	mov	r3, r0
 8011bd8:	f10d 0019 	add.w	r0, sp, #25
 8011bdc:	9000      	str	r0, [sp, #0]
 8011bde:	9a05      	ldr	r2, [sp, #20]
 8011be0:	4649      	mov	r1, r9
 8011be2:	4640      	mov	r0, r8
 8011be4:	f006 fd62 	bl	80186ac <uxr_receive_reliable_message>
 8011be8:	b1d0      	cbz	r0, 8011c20 <uxr_create_session+0x168>
 8011bea:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d038      	beq.n	8011c64 <uxr_create_session+0x1ac>
 8011bf2:	9e04      	ldr	r6, [sp, #16]
 8011bf4:	e00a      	b.n	8011c0c <uxr_create_session+0x154>
 8011bf6:	f04f 0302 	mov.w	r3, #2
 8011bfa:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 8011bfe:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 8011c02:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011c06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011c08:	f7ff fae4 	bl	80111d4 <read_submessage_list>
 8011c0c:	a922      	add	r1, sp, #136	@ 0x88
 8011c0e:	2204      	movs	r2, #4
 8011c10:	4640      	mov	r0, r8
 8011c12:	f006 fdcb 	bl	80187ac <uxr_next_input_reliable_buffer_available>
 8011c16:	4603      	mov	r3, r0
 8011c18:	a922      	add	r1, sp, #136	@ 0x88
 8011c1a:	4620      	mov	r0, r4
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d1ea      	bne.n	8011bf6 <uxr_create_session+0x13e>
 8011c20:	9904      	ldr	r1, [sp, #16]
 8011c22:	463a      	mov	r2, r7
 8011c24:	4620      	mov	r0, r4
 8011c26:	f7ff f951 	bl	8010ecc <write_submessage_acknack.isra.0>
 8011c2a:	e779      	b.n	8011b20 <uxr_create_session+0x68>
 8011c2c:	4639      	mov	r1, r7
 8011c2e:	4650      	mov	r0, sl
 8011c30:	f000 ff26 	bl	8012a80 <uxr_get_input_best_effort_stream>
 8011c34:	2800      	cmp	r0, #0
 8011c36:	f43f af73 	beq.w	8011b20 <uxr_create_session+0x68>
 8011c3a:	4649      	mov	r1, r9
 8011c3c:	f006 fca2 	bl	8018584 <uxr_receive_best_effort_message>
 8011c40:	2800      	cmp	r0, #0
 8011c42:	f43f af6d 	beq.w	8011b20 <uxr_create_session+0x68>
 8011c46:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011c4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011c4c:	a91a      	add	r1, sp, #104	@ 0x68
 8011c4e:	4620      	mov	r0, r4
 8011c50:	f7ff fac0 	bl	80111d4 <read_submessage_list>
 8011c54:	e764      	b.n	8011b20 <uxr_create_session+0x68>
 8011c56:	4650      	mov	r0, sl
 8011c58:	f000 fe62 	bl	8012920 <uxr_reset_stream_storage>
 8011c5c:	2001      	movs	r0, #1
 8011c5e:	b02b      	add	sp, #172	@ 0xac
 8011c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c64:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011c68:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011c6a:	a91a      	add	r1, sp, #104	@ 0x68
 8011c6c:	4620      	mov	r0, r4
 8011c6e:	f7ff fab1 	bl	80111d4 <read_submessage_list>
 8011c72:	e7be      	b.n	8011bf2 <uxr_create_session+0x13a>

08011c74 <uxr_prepare_stream_to_write_submessage>:
 8011c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c78:	b082      	sub	sp, #8
 8011c7a:	4682      	mov	sl, r0
 8011c7c:	4610      	mov	r0, r2
 8011c7e:	4615      	mov	r5, r2
 8011c80:	461e      	mov	r6, r3
 8011c82:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8011c86:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8011c8a:	9101      	str	r1, [sp, #4]
 8011c8c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8011c90:	f000 ff60 	bl	8012b54 <uxr_submessage_padding>
 8011c94:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011c98:	f105 0904 	add.w	r9, r5, #4
 8011c9c:	2b01      	cmp	r3, #1
 8011c9e:	4481      	add	r9, r0
 8011ca0:	d01d      	beq.n	8011cde <uxr_prepare_stream_to_write_submessage+0x6a>
 8011ca2:	2b02      	cmp	r3, #2
 8011ca4:	d116      	bne.n	8011cd4 <uxr_prepare_stream_to_write_submessage+0x60>
 8011ca6:	4621      	mov	r1, r4
 8011ca8:	f10a 0008 	add.w	r0, sl, #8
 8011cac:	f000 fede 	bl	8012a6c <uxr_get_output_reliable_stream>
 8011cb0:	4604      	mov	r4, r0
 8011cb2:	b158      	cbz	r0, 8011ccc <uxr_prepare_stream_to_write_submessage+0x58>
 8011cb4:	4649      	mov	r1, r9
 8011cb6:	4632      	mov	r2, r6
 8011cb8:	f006 ff34 	bl	8018b24 <uxr_prepare_reliable_buffer_to_write>
 8011cbc:	4604      	mov	r4, r0
 8011cbe:	b12c      	cbz	r4, 8011ccc <uxr_prepare_stream_to_write_submessage+0x58>
 8011cc0:	4643      	mov	r3, r8
 8011cc2:	b2aa      	uxth	r2, r5
 8011cc4:	4639      	mov	r1, r7
 8011cc6:	4630      	mov	r0, r6
 8011cc8:	f000 ff04 	bl	8012ad4 <uxr_buffer_submessage_header>
 8011ccc:	4620      	mov	r0, r4
 8011cce:	b002      	add	sp, #8
 8011cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cd4:	2400      	movs	r4, #0
 8011cd6:	4620      	mov	r0, r4
 8011cd8:	b002      	add	sp, #8
 8011cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cde:	4621      	mov	r1, r4
 8011ce0:	f10a 0008 	add.w	r0, sl, #8
 8011ce4:	f000 feba 	bl	8012a5c <uxr_get_output_best_effort_stream>
 8011ce8:	4604      	mov	r4, r0
 8011cea:	2800      	cmp	r0, #0
 8011cec:	d0ee      	beq.n	8011ccc <uxr_prepare_stream_to_write_submessage+0x58>
 8011cee:	4649      	mov	r1, r9
 8011cf0:	4632      	mov	r2, r6
 8011cf2:	f006 fe47 	bl	8018984 <uxr_prepare_best_effort_buffer_to_write>
 8011cf6:	4604      	mov	r4, r0
 8011cf8:	e7e1      	b.n	8011cbe <uxr_prepare_stream_to_write_submessage+0x4a>
 8011cfa:	bf00      	nop

08011cfc <uxr_init_session_info>:
 8011cfc:	0e13      	lsrs	r3, r2, #24
 8011cfe:	7043      	strb	r3, [r0, #1]
 8011d00:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8011d04:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8011d08:	7001      	strb	r1, [r0, #0]
 8011d0a:	70c3      	strb	r3, [r0, #3]
 8011d0c:	2109      	movs	r1, #9
 8011d0e:	23ff      	movs	r3, #255	@ 0xff
 8011d10:	f880 c002 	strb.w	ip, [r0, #2]
 8011d14:	7102      	strb	r2, [r0, #4]
 8011d16:	80c1      	strh	r1, [r0, #6]
 8011d18:	7143      	strb	r3, [r0, #5]
 8011d1a:	4770      	bx	lr

08011d1c <uxr_buffer_create_session>:
 8011d1c:	b530      	push	{r4, r5, lr}
 8011d1e:	b089      	sub	sp, #36	@ 0x24
 8011d20:	2300      	movs	r3, #0
 8011d22:	4d12      	ldr	r5, [pc, #72]	@ (8011d6c <uxr_buffer_create_session+0x50>)
 8011d24:	9307      	str	r3, [sp, #28]
 8011d26:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011d2a:	2201      	movs	r2, #1
 8011d2c:	9301      	str	r3, [sp, #4]
 8011d2e:	80c2      	strh	r2, [r0, #6]
 8011d30:	f88d 2004 	strb.w	r2, [sp, #4]
 8011d34:	682a      	ldr	r2, [r5, #0]
 8011d36:	9200      	str	r2, [sp, #0]
 8011d38:	88aa      	ldrh	r2, [r5, #4]
 8011d3a:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011d3e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8011d42:	9202      	str	r2, [sp, #8]
 8011d44:	460c      	mov	r4, r1
 8011d46:	7802      	ldrb	r2, [r0, #0]
 8011d48:	9303      	str	r3, [sp, #12]
 8011d4a:	4619      	mov	r1, r3
 8011d4c:	f88d 200c 	strb.w	r2, [sp, #12]
 8011d50:	4620      	mov	r0, r4
 8011d52:	2210      	movs	r2, #16
 8011d54:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8011d58:	9306      	str	r3, [sp, #24]
 8011d5a:	f000 febb 	bl	8012ad4 <uxr_buffer_submessage_header>
 8011d5e:	4669      	mov	r1, sp
 8011d60:	4620      	mov	r0, r4
 8011d62:	f001 feff 	bl	8013b64 <uxr_serialize_CREATE_CLIENT_Payload>
 8011d66:	b009      	add	sp, #36	@ 0x24
 8011d68:	bd30      	pop	{r4, r5, pc}
 8011d6a:	bf00      	nop
 8011d6c:	0801aff0 	.word	0x0801aff0

08011d70 <uxr_buffer_delete_session>:
 8011d70:	b510      	push	{r4, lr}
 8011d72:	4b0c      	ldr	r3, [pc, #48]	@ (8011da4 <uxr_buffer_delete_session+0x34>)
 8011d74:	b082      	sub	sp, #8
 8011d76:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8011d7a:	f8ad c006 	strh.w	ip, [sp, #6]
 8011d7e:	460c      	mov	r4, r1
 8011d80:	2202      	movs	r2, #2
 8011d82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011d86:	80c2      	strh	r2, [r0, #6]
 8011d88:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011d8c:	2204      	movs	r2, #4
 8011d8e:	2300      	movs	r3, #0
 8011d90:	2103      	movs	r1, #3
 8011d92:	4620      	mov	r0, r4
 8011d94:	f000 fe9e 	bl	8012ad4 <uxr_buffer_submessage_header>
 8011d98:	a901      	add	r1, sp, #4
 8011d9a:	4620      	mov	r0, r4
 8011d9c:	f001 ff88 	bl	8013cb0 <uxr_serialize_DELETE_Payload>
 8011da0:	b002      	add	sp, #8
 8011da2:	bd10      	pop	{r4, pc}
 8011da4:	0801aff0 	.word	0x0801aff0

08011da8 <uxr_read_create_session_status>:
 8011da8:	b510      	push	{r4, lr}
 8011daa:	b088      	sub	sp, #32
 8011dac:	4604      	mov	r4, r0
 8011dae:	4608      	mov	r0, r1
 8011db0:	a901      	add	r1, sp, #4
 8011db2:	f001 ff8d 	bl	8013cd0 <uxr_deserialize_STATUS_AGENT_Payload>
 8011db6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011dba:	7163      	strb	r3, [r4, #5]
 8011dbc:	b008      	add	sp, #32
 8011dbe:	bd10      	pop	{r4, pc}

08011dc0 <uxr_read_delete_session_status>:
 8011dc0:	b510      	push	{r4, lr}
 8011dc2:	4604      	mov	r4, r0
 8011dc4:	b084      	sub	sp, #16
 8011dc6:	4608      	mov	r0, r1
 8011dc8:	a902      	add	r1, sp, #8
 8011dca:	f001 ffb1 	bl	8013d30 <uxr_deserialize_STATUS_Payload>
 8011dce:	88e3      	ldrh	r3, [r4, #6]
 8011dd0:	2b02      	cmp	r3, #2
 8011dd2:	d001      	beq.n	8011dd8 <uxr_read_delete_session_status+0x18>
 8011dd4:	b004      	add	sp, #16
 8011dd6:	bd10      	pop	{r4, pc}
 8011dd8:	f10d 000a 	add.w	r0, sp, #10
 8011ddc:	f7fe fecc 	bl	8010b78 <uxr_object_id_from_raw>
 8011de0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8011de4:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8011de8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011dec:	b29b      	uxth	r3, r3
 8011dee:	2b02      	cmp	r3, #2
 8011df0:	bf04      	itt	eq
 8011df2:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8011df6:	7163      	strbeq	r3, [r4, #5]
 8011df8:	b004      	add	sp, #16
 8011dfa:	bd10      	pop	{r4, pc}

08011dfc <uxr_stamp_create_session_header>:
 8011dfc:	b510      	push	{r4, lr}
 8011dfe:	2208      	movs	r2, #8
 8011e00:	b08a      	sub	sp, #40	@ 0x28
 8011e02:	4604      	mov	r4, r0
 8011e04:	eb0d 0002 	add.w	r0, sp, r2
 8011e08:	f7fe fb74 	bl	80104f4 <ucdr_init_buffer>
 8011e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e10:	9400      	str	r4, [sp, #0]
 8011e12:	2300      	movs	r3, #0
 8011e14:	461a      	mov	r2, r3
 8011e16:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8011e1a:	a802      	add	r0, sp, #8
 8011e1c:	f001 f854 	bl	8012ec8 <uxr_serialize_message_header>
 8011e20:	b00a      	add	sp, #40	@ 0x28
 8011e22:	bd10      	pop	{r4, pc}

08011e24 <uxr_stamp_session_header>:
 8011e24:	b530      	push	{r4, r5, lr}
 8011e26:	b08d      	sub	sp, #52	@ 0x34
 8011e28:	4604      	mov	r4, r0
 8011e2a:	460d      	mov	r5, r1
 8011e2c:	9203      	str	r2, [sp, #12]
 8011e2e:	4619      	mov	r1, r3
 8011e30:	a804      	add	r0, sp, #16
 8011e32:	2208      	movs	r2, #8
 8011e34:	f7fe fb5e 	bl	80104f4 <ucdr_init_buffer>
 8011e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e3c:	9b03      	ldr	r3, [sp, #12]
 8011e3e:	9400      	str	r4, [sp, #0]
 8011e40:	462a      	mov	r2, r5
 8011e42:	a804      	add	r0, sp, #16
 8011e44:	f001 f840 	bl	8012ec8 <uxr_serialize_message_header>
 8011e48:	b00d      	add	sp, #52	@ 0x34
 8011e4a:	bd30      	pop	{r4, r5, pc}

08011e4c <uxr_read_session_header>:
 8011e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e50:	4607      	mov	r7, r0
 8011e52:	b084      	sub	sp, #16
 8011e54:	4608      	mov	r0, r1
 8011e56:	460c      	mov	r4, r1
 8011e58:	4615      	mov	r5, r2
 8011e5a:	461e      	mov	r6, r3
 8011e5c:	f7fe fb7a 	bl	8010554 <ucdr_buffer_remaining>
 8011e60:	2808      	cmp	r0, #8
 8011e62:	d803      	bhi.n	8011e6c <uxr_read_session_header+0x20>
 8011e64:	2000      	movs	r0, #0
 8011e66:	b004      	add	sp, #16
 8011e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e6c:	f10d 080c 	add.w	r8, sp, #12
 8011e70:	4633      	mov	r3, r6
 8011e72:	462a      	mov	r2, r5
 8011e74:	f8cd 8000 	str.w	r8, [sp]
 8011e78:	4620      	mov	r0, r4
 8011e7a:	f10d 010b 	add.w	r1, sp, #11
 8011e7e:	f001 f841 	bl	8012f04 <uxr_deserialize_message_header>
 8011e82:	783a      	ldrb	r2, [r7, #0]
 8011e84:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8011e88:	4293      	cmp	r3, r2
 8011e8a:	d1eb      	bne.n	8011e64 <uxr_read_session_header+0x18>
 8011e8c:	061b      	lsls	r3, r3, #24
 8011e8e:	d41c      	bmi.n	8011eca <uxr_read_session_header+0x7e>
 8011e90:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8011e94:	787b      	ldrb	r3, [r7, #1]
 8011e96:	429a      	cmp	r2, r3
 8011e98:	d003      	beq.n	8011ea2 <uxr_read_session_header+0x56>
 8011e9a:	2001      	movs	r0, #1
 8011e9c:	f080 0001 	eor.w	r0, r0, #1
 8011ea0:	e7e1      	b.n	8011e66 <uxr_read_session_header+0x1a>
 8011ea2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8011ea6:	78bb      	ldrb	r3, [r7, #2]
 8011ea8:	429a      	cmp	r2, r3
 8011eaa:	f107 0102 	add.w	r1, r7, #2
 8011eae:	d1f4      	bne.n	8011e9a <uxr_read_session_header+0x4e>
 8011eb0:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8011eb4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011eb8:	429a      	cmp	r2, r3
 8011eba:	d1ee      	bne.n	8011e9a <uxr_read_session_header+0x4e>
 8011ebc:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011ec0:	784b      	ldrb	r3, [r1, #1]
 8011ec2:	429a      	cmp	r2, r3
 8011ec4:	d1e9      	bne.n	8011e9a <uxr_read_session_header+0x4e>
 8011ec6:	2000      	movs	r0, #0
 8011ec8:	e7e8      	b.n	8011e9c <uxr_read_session_header+0x50>
 8011eca:	2001      	movs	r0, #1
 8011ecc:	e7cb      	b.n	8011e66 <uxr_read_session_header+0x1a>
 8011ece:	bf00      	nop

08011ed0 <uxr_session_header_offset>:
 8011ed0:	f990 3000 	ldrsb.w	r3, [r0]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	bfac      	ite	ge
 8011ed8:	2008      	movge	r0, #8
 8011eda:	2004      	movlt	r0, #4
 8011edc:	4770      	bx	lr
 8011ede:	bf00      	nop

08011ee0 <uxr_init_base_object_request>:
 8011ee0:	b510      	push	{r4, lr}
 8011ee2:	88c3      	ldrh	r3, [r0, #6]
 8011ee4:	b082      	sub	sp, #8
 8011ee6:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8011eea:	9101      	str	r1, [sp, #4]
 8011eec:	f1a3 010a 	sub.w	r1, r3, #10
 8011ef0:	b289      	uxth	r1, r1
 8011ef2:	42a1      	cmp	r1, r4
 8011ef4:	d80e      	bhi.n	8011f14 <uxr_init_base_object_request+0x34>
 8011ef6:	3301      	adds	r3, #1
 8011ef8:	b29c      	uxth	r4, r3
 8011efa:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011efe:	b2db      	uxtb	r3, r3
 8011f00:	80c4      	strh	r4, [r0, #6]
 8011f02:	9801      	ldr	r0, [sp, #4]
 8011f04:	7011      	strb	r1, [r2, #0]
 8011f06:	7053      	strb	r3, [r2, #1]
 8011f08:	1c91      	adds	r1, r2, #2
 8011f0a:	f7fe fe49 	bl	8010ba0 <uxr_object_id_to_raw>
 8011f0e:	4620      	mov	r0, r4
 8011f10:	b002      	add	sp, #8
 8011f12:	bd10      	pop	{r4, pc}
 8011f14:	230a      	movs	r3, #10
 8011f16:	2100      	movs	r1, #0
 8011f18:	461c      	mov	r4, r3
 8011f1a:	e7f1      	b.n	8011f00 <uxr_init_base_object_request+0x20>

08011f1c <uxr_parse_base_object_request>:
 8011f1c:	b570      	push	{r4, r5, r6, lr}
 8011f1e:	4604      	mov	r4, r0
 8011f20:	3002      	adds	r0, #2
 8011f22:	460d      	mov	r5, r1
 8011f24:	4616      	mov	r6, r2
 8011f26:	f7fe fe27 	bl	8010b78 <uxr_object_id_from_raw>
 8011f2a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8011f2e:	8028      	strh	r0, [r5, #0]
 8011f30:	806b      	strh	r3, [r5, #2]
 8011f32:	7822      	ldrb	r2, [r4, #0]
 8011f34:	7863      	ldrb	r3, [r4, #1]
 8011f36:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011f3a:	8033      	strh	r3, [r6, #0]
 8011f3c:	bd70      	pop	{r4, r5, r6, pc}
 8011f3e:	bf00      	nop

08011f40 <uxr_init_framing_io>:
 8011f40:	2300      	movs	r3, #0
 8011f42:	7041      	strb	r1, [r0, #1]
 8011f44:	7003      	strb	r3, [r0, #0]
 8011f46:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8011f48:	4770      	bx	lr
 8011f4a:	bf00      	nop

08011f4c <uxr_write_framed_msg>:
 8011f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f50:	4617      	mov	r7, r2
 8011f52:	7842      	ldrb	r2, [r0, #1]
 8011f54:	b083      	sub	sp, #12
 8011f56:	460e      	mov	r6, r1
 8011f58:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 8011f5c:	469a      	mov	sl, r3
 8011f5e:	2901      	cmp	r1, #1
 8011f60:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 8011f64:	4604      	mov	r4, r0
 8011f66:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8011f6a:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 8011f6e:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8011f72:	f240 8137 	bls.w	80121e4 <uxr_write_framed_msg+0x298>
 8011f76:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8011f7a:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 8011f7e:	2901      	cmp	r1, #1
 8011f80:	f04f 0202 	mov.w	r2, #2
 8011f84:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011f88:	f240 808f 	bls.w	80120aa <uxr_write_framed_msg+0x15e>
 8011f8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011f8e:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 8011f92:	b2dd      	uxtb	r5, r3
 8011f94:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8011f98:	2203      	movs	r2, #3
 8011f9a:	2901      	cmp	r1, #1
 8011f9c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011fa0:	f240 809a 	bls.w	80120d8 <uxr_write_framed_msg+0x18c>
 8011fa4:	18a1      	adds	r1, r4, r2
 8011fa6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011fa8:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 8011fac:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011fb0:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8011fb4:	3201      	adds	r2, #1
 8011fb6:	2801      	cmp	r0, #1
 8011fb8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011fbc:	f240 80a0 	bls.w	8012100 <uxr_write_framed_msg+0x1b4>
 8011fc0:	18a0      	adds	r0, r4, r2
 8011fc2:	3201      	adds	r2, #1
 8011fc4:	b2d2      	uxtb	r2, r2
 8011fc6:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8011fca:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	f000 80a9 	beq.w	8012126 <uxr_write_framed_msg+0x1da>
 8011fd4:	f04f 0900 	mov.w	r9, #0
 8011fd8:	46c8      	mov	r8, r9
 8011fda:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8011fde:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8011fe2:	2901      	cmp	r1, #1
 8011fe4:	f240 80c3 	bls.w	801216e <uxr_write_framed_msg+0x222>
 8011fe8:	2a29      	cmp	r2, #41	@ 0x29
 8011fea:	f200 809f 	bhi.w	801212c <uxr_write_framed_msg+0x1e0>
 8011fee:	18a1      	adds	r1, r4, r2
 8011ff0:	3201      	adds	r2, #1
 8011ff2:	b2d2      	uxtb	r2, r2
 8011ff4:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8011ff8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8011ffc:	ea89 0303 	eor.w	r3, r9, r3
 8012000:	498c      	ldr	r1, [pc, #560]	@ (8012234 <uxr_write_framed_msg+0x2e8>)
 8012002:	b2db      	uxtb	r3, r3
 8012004:	f108 0801 	add.w	r8, r8, #1
 8012008:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801200c:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8012010:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012012:	4543      	cmp	r3, r8
 8012014:	d8e1      	bhi.n	8011fda <uxr_write_framed_msg+0x8e>
 8012016:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801201a:	fa5f f889 	uxtb.w	r8, r9
 801201e:	9301      	str	r3, [sp, #4]
 8012020:	f04f 0900 	mov.w	r9, #0
 8012024:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8012028:	fa5f f18a 	uxtb.w	r1, sl
 801202c:	2901      	cmp	r1, #1
 801202e:	d921      	bls.n	8012074 <uxr_write_framed_msg+0x128>
 8012030:	2a29      	cmp	r2, #41	@ 0x29
 8012032:	f240 80af 	bls.w	8012194 <uxr_write_framed_msg+0x248>
 8012036:	2500      	movs	r5, #0
 8012038:	e000      	b.n	801203c <uxr_write_framed_msg+0xf0>
 801203a:	b160      	cbz	r0, 8012056 <uxr_write_framed_msg+0x10a>
 801203c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8012040:	1b52      	subs	r2, r2, r5
 8012042:	465b      	mov	r3, fp
 8012044:	4421      	add	r1, r4
 8012046:	4638      	mov	r0, r7
 8012048:	47b0      	blx	r6
 801204a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801204e:	4405      	add	r5, r0
 8012050:	4295      	cmp	r5, r2
 8012052:	d3f2      	bcc.n	801203a <uxr_write_framed_msg+0xee>
 8012054:	d003      	beq.n	801205e <uxr_write_framed_msg+0x112>
 8012056:	2000      	movs	r0, #0
 8012058:	b003      	add	sp, #12
 801205a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801205e:	fa5f f18a 	uxtb.w	r1, sl
 8012062:	f04f 0300 	mov.w	r3, #0
 8012066:	2901      	cmp	r1, #1
 8012068:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801206c:	f04f 0200 	mov.w	r2, #0
 8012070:	f200 8090 	bhi.w	8012194 <uxr_write_framed_msg+0x248>
 8012074:	1c51      	adds	r1, r2, #1
 8012076:	b2c9      	uxtb	r1, r1
 8012078:	2929      	cmp	r1, #41	@ 0x29
 801207a:	d8dc      	bhi.n	8012036 <uxr_write_framed_msg+0xea>
 801207c:	18a5      	adds	r5, r4, r2
 801207e:	4421      	add	r1, r4
 8012080:	3202      	adds	r2, #2
 8012082:	f088 0820 	eor.w	r8, r8, #32
 8012086:	4648      	mov	r0, r9
 8012088:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 801208c:	b2d2      	uxtb	r2, r2
 801208e:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 8012092:	f04f 0901 	mov.w	r9, #1
 8012096:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 801209a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801209e:	2800      	cmp	r0, #0
 80120a0:	f040 8085 	bne.w	80121ae <uxr_write_framed_msg+0x262>
 80120a4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80120a8:	e7bc      	b.n	8012024 <uxr_write_framed_msg+0xd8>
 80120aa:	4611      	mov	r1, r2
 80120ac:	f04f 0c03 	mov.w	ip, #3
 80120b0:	2204      	movs	r2, #4
 80120b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80120b4:	4421      	add	r1, r4
 80120b6:	b2dd      	uxtb	r5, r3
 80120b8:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 80120bc:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 80120c0:	44a4      	add	ip, r4
 80120c2:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80120c6:	f080 0020 	eor.w	r0, r0, #32
 80120ca:	2901      	cmp	r1, #1
 80120cc:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 80120d0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80120d4:	f63f af66 	bhi.w	8011fa4 <uxr_write_framed_msg+0x58>
 80120d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80120da:	18a0      	adds	r0, r4, r2
 80120dc:	f085 0520 	eor.w	r5, r5, #32
 80120e0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80120e4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80120e8:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 80120ec:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 80120f0:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 80120f4:	3202      	adds	r2, #2
 80120f6:	2801      	cmp	r0, #1
 80120f8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80120fc:	f63f af60 	bhi.w	8011fc0 <uxr_write_framed_msg+0x74>
 8012100:	1c50      	adds	r0, r2, #1
 8012102:	18a5      	adds	r5, r4, r2
 8012104:	fa54 f080 	uxtab	r0, r4, r0
 8012108:	3202      	adds	r2, #2
 801210a:	f081 0120 	eor.w	r1, r1, #32
 801210e:	b2d2      	uxtb	r2, r2
 8012110:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8012114:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8012118:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801211c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012120:	2b00      	cmp	r3, #0
 8012122:	f47f af57 	bne.w	8011fd4 <uxr_write_framed_msg+0x88>
 8012126:	9301      	str	r3, [sp, #4]
 8012128:	4698      	mov	r8, r3
 801212a:	e779      	b.n	8012020 <uxr_write_framed_msg+0xd4>
 801212c:	2500      	movs	r5, #0
 801212e:	e001      	b.n	8012134 <uxr_write_framed_msg+0x1e8>
 8012130:	2800      	cmp	r0, #0
 8012132:	d090      	beq.n	8012056 <uxr_write_framed_msg+0x10a>
 8012134:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8012138:	1b52      	subs	r2, r2, r5
 801213a:	465b      	mov	r3, fp
 801213c:	4421      	add	r1, r4
 801213e:	4638      	mov	r0, r7
 8012140:	47b0      	blx	r6
 8012142:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8012146:	4405      	add	r5, r0
 8012148:	4295      	cmp	r5, r2
 801214a:	d3f1      	bcc.n	8012130 <uxr_write_framed_msg+0x1e4>
 801214c:	d183      	bne.n	8012056 <uxr_write_framed_msg+0x10a>
 801214e:	f04f 0300 	mov.w	r3, #0
 8012152:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8012156:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012158:	4543      	cmp	r3, r8
 801215a:	d964      	bls.n	8012226 <uxr_write_framed_msg+0x2da>
 801215c:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8012160:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8012164:	2901      	cmp	r1, #1
 8012166:	f04f 0200 	mov.w	r2, #0
 801216a:	f63f af3d 	bhi.w	8011fe8 <uxr_write_framed_msg+0x9c>
 801216e:	1c51      	adds	r1, r2, #1
 8012170:	b2c9      	uxtb	r1, r1
 8012172:	2929      	cmp	r1, #41	@ 0x29
 8012174:	d8da      	bhi.n	801212c <uxr_write_framed_msg+0x1e0>
 8012176:	18a0      	adds	r0, r4, r2
 8012178:	4421      	add	r1, r4
 801217a:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 801217e:	3202      	adds	r2, #2
 8012180:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8012184:	b2d2      	uxtb	r2, r2
 8012186:	f083 0020 	eor.w	r0, r3, #32
 801218a:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 801218e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012192:	e733      	b.n	8011ffc <uxr_write_framed_msg+0xb0>
 8012194:	18a1      	adds	r1, r4, r2
 8012196:	3201      	adds	r2, #1
 8012198:	4648      	mov	r0, r9
 801219a:	b2d2      	uxtb	r2, r2
 801219c:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 80121a0:	f04f 0901 	mov.w	r9, #1
 80121a4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80121a8:	2800      	cmp	r0, #0
 80121aa:	f43f af7b 	beq.w	80120a4 <uxr_write_framed_msg+0x158>
 80121ae:	2500      	movs	r5, #0
 80121b0:	e002      	b.n	80121b8 <uxr_write_framed_msg+0x26c>
 80121b2:	2800      	cmp	r0, #0
 80121b4:	f43f af4f 	beq.w	8012056 <uxr_write_framed_msg+0x10a>
 80121b8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80121bc:	1b52      	subs	r2, r2, r5
 80121be:	465b      	mov	r3, fp
 80121c0:	4421      	add	r1, r4
 80121c2:	4638      	mov	r0, r7
 80121c4:	47b0      	blx	r6
 80121c6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80121ca:	4405      	add	r5, r0
 80121cc:	4295      	cmp	r5, r2
 80121ce:	d3f0      	bcc.n	80121b2 <uxr_write_framed_msg+0x266>
 80121d0:	f47f af41 	bne.w	8012056 <uxr_write_framed_msg+0x10a>
 80121d4:	2300      	movs	r3, #0
 80121d6:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80121da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80121dc:	b298      	uxth	r0, r3
 80121de:	b003      	add	sp, #12
 80121e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121e4:	217d      	movs	r1, #125	@ 0x7d
 80121e6:	f082 0220 	eor.w	r2, r2, #32
 80121ea:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 80121ee:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80121f2:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 80121f6:	2901      	cmp	r1, #1
 80121f8:	f04f 0203 	mov.w	r2, #3
 80121fc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012200:	d804      	bhi.n	801220c <uxr_write_framed_msg+0x2c0>
 8012202:	4611      	mov	r1, r2
 8012204:	f04f 0c04 	mov.w	ip, #4
 8012208:	2205      	movs	r2, #5
 801220a:	e752      	b.n	80120b2 <uxr_write_framed_msg+0x166>
 801220c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801220e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8012212:	b2dd      	uxtb	r5, r3
 8012214:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8012218:	2204      	movs	r2, #4
 801221a:	2901      	cmp	r1, #1
 801221c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012220:	f63f aec0 	bhi.w	8011fa4 <uxr_write_framed_msg+0x58>
 8012224:	e758      	b.n	80120d8 <uxr_write_framed_msg+0x18c>
 8012226:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801222a:	fa5f f889 	uxtb.w	r8, r9
 801222e:	9301      	str	r3, [sp, #4]
 8012230:	2200      	movs	r2, #0
 8012232:	e6f5      	b.n	8012020 <uxr_write_framed_msg+0xd4>
 8012234:	0801b3b0 	.word	0x0801b3b0

08012238 <uxr_framing_read_transport>:
 8012238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801223c:	4604      	mov	r4, r0
 801223e:	b083      	sub	sp, #12
 8012240:	461f      	mov	r7, r3
 8012242:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8012246:	4689      	mov	r9, r1
 8012248:	4692      	mov	sl, r2
 801224a:	f000 fc89 	bl	8012b60 <uxr_millis>
 801224e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012252:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 8012256:	42b3      	cmp	r3, r6
 8012258:	4680      	mov	r8, r0
 801225a:	d061      	beq.n	8012320 <uxr_framing_read_transport+0xe8>
 801225c:	d81c      	bhi.n	8012298 <uxr_framing_read_transport+0x60>
 801225e:	1e75      	subs	r5, r6, #1
 8012260:	1aed      	subs	r5, r5, r3
 8012262:	b2ed      	uxtb	r5, r5
 8012264:	2600      	movs	r6, #0
 8012266:	455d      	cmp	r5, fp
 8012268:	d81f      	bhi.n	80122aa <uxr_framing_read_transport+0x72>
 801226a:	19ab      	adds	r3, r5, r6
 801226c:	455b      	cmp	r3, fp
 801226e:	bf84      	itt	hi
 8012270:	ebab 0605 	subhi.w	r6, fp, r5
 8012274:	b2f6      	uxtbhi	r6, r6
 8012276:	b9ed      	cbnz	r5, 80122b4 <uxr_framing_read_transport+0x7c>
 8012278:	f04f 0b00 	mov.w	fp, #0
 801227c:	f000 fc70 	bl	8012b60 <uxr_millis>
 8012280:	683b      	ldr	r3, [r7, #0]
 8012282:	eba0 0808 	sub.w	r8, r0, r8
 8012286:	eba3 0308 	sub.w	r3, r3, r8
 801228a:	4658      	mov	r0, fp
 801228c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012290:	603b      	str	r3, [r7, #0]
 8012292:	b003      	add	sp, #12
 8012294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012298:	2e00      	cmp	r6, #0
 801229a:	d049      	beq.n	8012330 <uxr_framing_read_transport+0xf8>
 801229c:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 80122a0:	b2ed      	uxtb	r5, r5
 80122a2:	3e01      	subs	r6, #1
 80122a4:	455d      	cmp	r5, fp
 80122a6:	b2f6      	uxtb	r6, r6
 80122a8:	d9df      	bls.n	801226a <uxr_framing_read_transport+0x32>
 80122aa:	fa5f f58b 	uxtb.w	r5, fp
 80122ae:	2600      	movs	r6, #0
 80122b0:	2d00      	cmp	r5, #0
 80122b2:	d0e1      	beq.n	8012278 <uxr_framing_read_transport+0x40>
 80122b4:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80122b8:	3102      	adds	r1, #2
 80122ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80122bc:	9300      	str	r3, [sp, #0]
 80122be:	683b      	ldr	r3, [r7, #0]
 80122c0:	4421      	add	r1, r4
 80122c2:	462a      	mov	r2, r5
 80122c4:	4650      	mov	r0, sl
 80122c6:	47c8      	blx	r9
 80122c8:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80122cc:	4a1a      	ldr	r2, [pc, #104]	@ (8012338 <uxr_framing_read_transport+0x100>)
 80122ce:	4403      	add	r3, r0
 80122d0:	0859      	lsrs	r1, r3, #1
 80122d2:	fba2 2101 	umull	r2, r1, r2, r1
 80122d6:	0889      	lsrs	r1, r1, #2
 80122d8:	222a      	movs	r2, #42	@ 0x2a
 80122da:	fb02 3111 	mls	r1, r2, r1, r3
 80122de:	4683      	mov	fp, r0
 80122e0:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 80122e4:	2800      	cmp	r0, #0
 80122e6:	d0c7      	beq.n	8012278 <uxr_framing_read_transport+0x40>
 80122e8:	42a8      	cmp	r0, r5
 80122ea:	d1c7      	bne.n	801227c <uxr_framing_read_transport+0x44>
 80122ec:	2e00      	cmp	r6, #0
 80122ee:	d0c5      	beq.n	801227c <uxr_framing_read_transport+0x44>
 80122f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80122f2:	9300      	str	r3, [sp, #0]
 80122f4:	3102      	adds	r1, #2
 80122f6:	4632      	mov	r2, r6
 80122f8:	4421      	add	r1, r4
 80122fa:	2300      	movs	r3, #0
 80122fc:	4650      	mov	r0, sl
 80122fe:	47c8      	blx	r9
 8012300:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012304:	4a0c      	ldr	r2, [pc, #48]	@ (8012338 <uxr_framing_read_transport+0x100>)
 8012306:	180b      	adds	r3, r1, r0
 8012308:	0859      	lsrs	r1, r3, #1
 801230a:	fba2 1201 	umull	r1, r2, r2, r1
 801230e:	0892      	lsrs	r2, r2, #2
 8012310:	212a      	movs	r1, #42	@ 0x2a
 8012312:	fb01 3312 	mls	r3, r1, r2, r3
 8012316:	eb00 0b05 	add.w	fp, r0, r5
 801231a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801231e:	e7ad      	b.n	801227c <uxr_framing_read_transport+0x44>
 8012320:	2600      	movs	r6, #0
 8012322:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8012326:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8012328:	d9bf      	bls.n	80122aa <uxr_framing_read_transport+0x72>
 801232a:	2102      	movs	r1, #2
 801232c:	2529      	movs	r5, #41	@ 0x29
 801232e:	e7c4      	b.n	80122ba <uxr_framing_read_transport+0x82>
 8012330:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8012334:	b2ed      	uxtb	r5, r5
 8012336:	e796      	b.n	8012266 <uxr_framing_read_transport+0x2e>
 8012338:	30c30c31 	.word	0x30c30c31

0801233c <uxr_read_framed_msg>:
 801233c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012340:	461e      	mov	r6, r3
 8012342:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8012346:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801234a:	429d      	cmp	r5, r3
 801234c:	b083      	sub	sp, #12
 801234e:	4604      	mov	r4, r0
 8012350:	4688      	mov	r8, r1
 8012352:	4691      	mov	r9, r2
 8012354:	f000 8188 	beq.w	8012668 <uxr_read_framed_msg+0x32c>
 8012358:	7823      	ldrb	r3, [r4, #0]
 801235a:	4dc1      	ldr	r5, [pc, #772]	@ (8012660 <uxr_read_framed_msg+0x324>)
 801235c:	4fc1      	ldr	r7, [pc, #772]	@ (8012664 <uxr_read_framed_msg+0x328>)
 801235e:	2b07      	cmp	r3, #7
 8012360:	d8fd      	bhi.n	801235e <uxr_read_framed_msg+0x22>
 8012362:	e8df f013 	tbh	[pc, r3, lsl #1]
 8012366:	0115      	.short	0x0115
 8012368:	00d600f6 	.word	0x00d600f6
 801236c:	009000b9 	.word	0x009000b9
 8012370:	0030004d 	.word	0x0030004d
 8012374:	0008      	.short	0x0008
 8012376:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801237a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801237e:	4299      	cmp	r1, r3
 8012380:	f000 814a 	beq.w	8012618 <uxr_read_framed_msg+0x2dc>
 8012384:	18e2      	adds	r2, r4, r3
 8012386:	7892      	ldrb	r2, [r2, #2]
 8012388:	2a7d      	cmp	r2, #125	@ 0x7d
 801238a:	f000 8199 	beq.w	80126c0 <uxr_read_framed_msg+0x384>
 801238e:	3301      	adds	r3, #1
 8012390:	0858      	lsrs	r0, r3, #1
 8012392:	fba5 1000 	umull	r1, r0, r5, r0
 8012396:	0880      	lsrs	r0, r0, #2
 8012398:	212a      	movs	r1, #42	@ 0x2a
 801239a:	fb01 3310 	mls	r3, r1, r0, r3
 801239e:	2a7e      	cmp	r2, #126	@ 0x7e
 80123a0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80123a4:	f000 8252 	beq.w	801284c <uxr_read_framed_msg+0x510>
 80123a8:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80123aa:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 80123ac:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80123b0:	b29b      	uxth	r3, r3
 80123b2:	2200      	movs	r2, #0
 80123b4:	4299      	cmp	r1, r3
 80123b6:	86a3      	strh	r3, [r4, #52]	@ 0x34
 80123b8:	7022      	strb	r2, [r4, #0]
 80123ba:	f000 8179 	beq.w	80126b0 <uxr_read_framed_msg+0x374>
 80123be:	2000      	movs	r0, #0
 80123c0:	b003      	add	sp, #12
 80123c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123c6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80123ca:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80123ce:	4299      	cmp	r1, r3
 80123d0:	f000 8131 	beq.w	8012636 <uxr_read_framed_msg+0x2fa>
 80123d4:	18e2      	adds	r2, r4, r3
 80123d6:	7890      	ldrb	r0, [r2, #2]
 80123d8:	287d      	cmp	r0, #125	@ 0x7d
 80123da:	f000 8190 	beq.w	80126fe <uxr_read_framed_msg+0x3c2>
 80123de:	3301      	adds	r3, #1
 80123e0:	085a      	lsrs	r2, r3, #1
 80123e2:	fba5 1202 	umull	r1, r2, r5, r2
 80123e6:	0892      	lsrs	r2, r2, #2
 80123e8:	212a      	movs	r1, #42	@ 0x2a
 80123ea:	fb01 3312 	mls	r3, r1, r2, r3
 80123ee:	287e      	cmp	r0, #126	@ 0x7e
 80123f0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80123f4:	f000 821a 	beq.w	801282c <uxr_read_framed_msg+0x4f0>
 80123f8:	2307      	movs	r3, #7
 80123fa:	86a0      	strh	r0, [r4, #52]	@ 0x34
 80123fc:	7023      	strb	r3, [r4, #0]
 80123fe:	e7ae      	b.n	801235e <uxr_read_framed_msg+0x22>
 8012400:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8012402:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8012406:	459e      	cmp	lr, r3
 8012408:	d938      	bls.n	801247c <uxr_read_framed_msg+0x140>
 801240a:	ee07 8a90 	vmov	s15, r8
 801240e:	212a      	movs	r1, #42	@ 0x2a
 8012410:	e020      	b.n	8012454 <uxr_read_framed_msg+0x118>
 8012412:	f89b c002 	ldrb.w	ip, [fp, #2]
 8012416:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801241a:	f000 80d4 	beq.w	80125c6 <uxr_read_framed_msg+0x28a>
 801241e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8012422:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012426:	f000 8219 	beq.w	801285c <uxr_read_framed_msg+0x520>
 801242a:	f806 c003 	strb.w	ip, [r6, r3]
 801242e:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8012432:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8012434:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8012438:	ea8a 000c 	eor.w	r0, sl, ip
 801243c:	b2c0      	uxtb	r0, r0
 801243e:	3301      	adds	r3, #1
 8012440:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8012444:	b29b      	uxth	r3, r3
 8012446:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 801244a:	4573      	cmp	r3, lr
 801244c:	8663      	strh	r3, [r4, #50]	@ 0x32
 801244e:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8012450:	f080 8120 	bcs.w	8012694 <uxr_read_framed_msg+0x358>
 8012454:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8012458:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801245c:	f100 0c01 	add.w	ip, r0, #1
 8012460:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012464:	fba5 8202 	umull	r8, r2, r5, r2
 8012468:	0892      	lsrs	r2, r2, #2
 801246a:	4582      	cmp	sl, r0
 801246c:	eb04 0b00 	add.w	fp, r4, r0
 8012470:	fb01 c212 	mls	r2, r1, r2, ip
 8012474:	d1cd      	bne.n	8012412 <uxr_read_framed_msg+0xd6>
 8012476:	ee17 8a90 	vmov	r8, s15
 801247a:	459e      	cmp	lr, r3
 801247c:	f040 8111 	bne.w	80126a2 <uxr_read_framed_msg+0x366>
 8012480:	2306      	movs	r3, #6
 8012482:	7023      	strb	r3, [r4, #0]
 8012484:	e76b      	b.n	801235e <uxr_read_framed_msg+0x22>
 8012486:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801248a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801248e:	4298      	cmp	r0, r3
 8012490:	f000 80c2 	beq.w	8012618 <uxr_read_framed_msg+0x2dc>
 8012494:	18e2      	adds	r2, r4, r3
 8012496:	7891      	ldrb	r1, [r2, #2]
 8012498:	297d      	cmp	r1, #125	@ 0x7d
 801249a:	f000 814c 	beq.w	8012736 <uxr_read_framed_msg+0x3fa>
 801249e:	3301      	adds	r3, #1
 80124a0:	085a      	lsrs	r2, r3, #1
 80124a2:	fba5 0202 	umull	r0, r2, r5, r2
 80124a6:	0892      	lsrs	r2, r2, #2
 80124a8:	202a      	movs	r0, #42	@ 0x2a
 80124aa:	fb00 3312 	mls	r3, r0, r2, r3
 80124ae:	297e      	cmp	r1, #126	@ 0x7e
 80124b0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80124b4:	f000 81ca 	beq.w	801284c <uxr_read_framed_msg+0x510>
 80124b8:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80124ba:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80124be:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80124c0:	b29b      	uxth	r3, r3
 80124c2:	2000      	movs	r0, #0
 80124c4:	428b      	cmp	r3, r1
 80124c6:	8623      	strh	r3, [r4, #48]	@ 0x30
 80124c8:	8660      	strh	r0, [r4, #50]	@ 0x32
 80124ca:	86e0      	strh	r0, [r4, #54]	@ 0x36
 80124cc:	f240 80df 	bls.w	801268e <uxr_read_framed_msg+0x352>
 80124d0:	7020      	strb	r0, [r4, #0]
 80124d2:	b003      	add	sp, #12
 80124d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124d8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80124dc:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80124e0:	4299      	cmp	r1, r3
 80124e2:	f000 80a8 	beq.w	8012636 <uxr_read_framed_msg+0x2fa>
 80124e6:	18e2      	adds	r2, r4, r3
 80124e8:	7890      	ldrb	r0, [r2, #2]
 80124ea:	287d      	cmp	r0, #125	@ 0x7d
 80124ec:	f000 8164 	beq.w	80127b8 <uxr_read_framed_msg+0x47c>
 80124f0:	3301      	adds	r3, #1
 80124f2:	085a      	lsrs	r2, r3, #1
 80124f4:	fba5 1202 	umull	r1, r2, r5, r2
 80124f8:	0892      	lsrs	r2, r2, #2
 80124fa:	212a      	movs	r1, #42	@ 0x2a
 80124fc:	fb01 3312 	mls	r3, r1, r2, r3
 8012500:	287e      	cmp	r0, #126	@ 0x7e
 8012502:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012506:	f000 8191 	beq.w	801282c <uxr_read_framed_msg+0x4f0>
 801250a:	2304      	movs	r3, #4
 801250c:	8620      	strh	r0, [r4, #48]	@ 0x30
 801250e:	7023      	strb	r3, [r4, #0]
 8012510:	e725      	b.n	801235e <uxr_read_framed_msg+0x22>
 8012512:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8012516:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801251a:	4290      	cmp	r0, r2
 801251c:	f000 80b3 	beq.w	8012686 <uxr_read_framed_msg+0x34a>
 8012520:	18a3      	adds	r3, r4, r2
 8012522:	7899      	ldrb	r1, [r3, #2]
 8012524:	297d      	cmp	r1, #125	@ 0x7d
 8012526:	f000 8164 	beq.w	80127f2 <uxr_read_framed_msg+0x4b6>
 801252a:	3201      	adds	r2, #1
 801252c:	0850      	lsrs	r0, r2, #1
 801252e:	fba5 3000 	umull	r3, r0, r5, r0
 8012532:	0880      	lsrs	r0, r0, #2
 8012534:	232a      	movs	r3, #42	@ 0x2a
 8012536:	fb03 2210 	mls	r2, r3, r0, r2
 801253a:	297e      	cmp	r1, #126	@ 0x7e
 801253c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012540:	f000 8188 	beq.w	8012854 <uxr_read_framed_msg+0x518>
 8012544:	7863      	ldrb	r3, [r4, #1]
 8012546:	428b      	cmp	r3, r1
 8012548:	bf0c      	ite	eq
 801254a:	2303      	moveq	r3, #3
 801254c:	2300      	movne	r3, #0
 801254e:	7023      	strb	r3, [r4, #0]
 8012550:	e705      	b.n	801235e <uxr_read_framed_msg+0x22>
 8012552:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012556:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801255a:	2200      	movs	r2, #0
 801255c:	4299      	cmp	r1, r3
 801255e:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8012562:	d06c      	beq.n	801263e <uxr_read_framed_msg+0x302>
 8012564:	18e2      	adds	r2, r4, r3
 8012566:	7890      	ldrb	r0, [r2, #2]
 8012568:	287d      	cmp	r0, #125	@ 0x7d
 801256a:	f000 8101 	beq.w	8012770 <uxr_read_framed_msg+0x434>
 801256e:	3301      	adds	r3, #1
 8012570:	085a      	lsrs	r2, r3, #1
 8012572:	fba5 1202 	umull	r1, r2, r5, r2
 8012576:	0892      	lsrs	r2, r2, #2
 8012578:	212a      	movs	r1, #42	@ 0x2a
 801257a:	fb01 3312 	mls	r3, r1, r2, r3
 801257e:	287e      	cmp	r0, #126	@ 0x7e
 8012580:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8012584:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012588:	d059      	beq.n	801263e <uxr_read_framed_msg+0x302>
 801258a:	2302      	movs	r3, #2
 801258c:	7023      	strb	r3, [r4, #0]
 801258e:	e6e6      	b.n	801235e <uxr_read_framed_msg+0x22>
 8012590:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8012594:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012598:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 801259c:	1c51      	adds	r1, r2, #1
 801259e:	084b      	lsrs	r3, r1, #1
 80125a0:	fba5 c303 	umull	ip, r3, r5, r3
 80125a4:	089b      	lsrs	r3, r3, #2
 80125a6:	fb0e 1313 	mls	r3, lr, r3, r1
 80125aa:	4592      	cmp	sl, r2
 80125ac:	eb04 0002 	add.w	r0, r4, r2
 80125b0:	b2da      	uxtb	r2, r3
 80125b2:	f43f af04 	beq.w	80123be <uxr_read_framed_msg+0x82>
 80125b6:	7883      	ldrb	r3, [r0, #2]
 80125b8:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80125bc:	2b7e      	cmp	r3, #126	@ 0x7e
 80125be:	d1ed      	bne.n	801259c <uxr_read_framed_msg+0x260>
 80125c0:	2301      	movs	r3, #1
 80125c2:	7023      	strb	r3, [r4, #0]
 80125c4:	e6cb      	b.n	801235e <uxr_read_framed_msg+0x22>
 80125c6:	f100 0c01 	add.w	ip, r0, #1
 80125ca:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80125ce:	fba5 8202 	umull	r8, r2, r5, r2
 80125d2:	0892      	lsrs	r2, r2, #2
 80125d4:	fb01 c212 	mls	r2, r1, r2, ip
 80125d8:	eb04 0c02 	add.w	ip, r4, r2
 80125dc:	b2d2      	uxtb	r2, r2
 80125de:	4592      	cmp	sl, r2
 80125e0:	f100 0002 	add.w	r0, r0, #2
 80125e4:	f43f af47 	beq.w	8012476 <uxr_read_framed_msg+0x13a>
 80125e8:	0842      	lsrs	r2, r0, #1
 80125ea:	f89c a002 	ldrb.w	sl, [ip, #2]
 80125ee:	fba5 8202 	umull	r8, r2, r5, r2
 80125f2:	0892      	lsrs	r2, r2, #2
 80125f4:	fb01 0012 	mls	r0, r1, r2, r0
 80125f8:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 80125fc:	f08a 0c20 	eor.w	ip, sl, #32
 8012600:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8012604:	f47f af11 	bne.w	801242a <uxr_read_framed_msg+0xee>
 8012608:	459e      	cmp	lr, r3
 801260a:	ee17 8a90 	vmov	r8, s15
 801260e:	f43f af37 	beq.w	8012480 <uxr_read_framed_msg+0x144>
 8012612:	2301      	movs	r3, #1
 8012614:	7023      	strb	r3, [r4, #0]
 8012616:	e6a2      	b.n	801235e <uxr_read_framed_msg+0x22>
 8012618:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801261a:	9300      	str	r3, [sp, #0]
 801261c:	2301      	movs	r3, #1
 801261e:	9301      	str	r3, [sp, #4]
 8012620:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012622:	464a      	mov	r2, r9
 8012624:	4641      	mov	r1, r8
 8012626:	4620      	mov	r0, r4
 8012628:	f7ff fe06 	bl	8012238 <uxr_framing_read_transport>
 801262c:	2800      	cmp	r0, #0
 801262e:	f43f aec6 	beq.w	80123be <uxr_read_framed_msg+0x82>
 8012632:	7823      	ldrb	r3, [r4, #0]
 8012634:	e693      	b.n	801235e <uxr_read_framed_msg+0x22>
 8012636:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012638:	9300      	str	r3, [sp, #0]
 801263a:	2302      	movs	r3, #2
 801263c:	e7ef      	b.n	801261e <uxr_read_framed_msg+0x2e2>
 801263e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012640:	9300      	str	r3, [sp, #0]
 8012642:	2304      	movs	r3, #4
 8012644:	9301      	str	r3, [sp, #4]
 8012646:	464a      	mov	r2, r9
 8012648:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801264a:	4641      	mov	r1, r8
 801264c:	4620      	mov	r0, r4
 801264e:	f7ff fdf3 	bl	8012238 <uxr_framing_read_transport>
 8012652:	2800      	cmp	r0, #0
 8012654:	d1ed      	bne.n	8012632 <uxr_read_framed_msg+0x2f6>
 8012656:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801265a:	2b7e      	cmp	r3, #126	@ 0x7e
 801265c:	d0e9      	beq.n	8012632 <uxr_read_framed_msg+0x2f6>
 801265e:	e6ae      	b.n	80123be <uxr_read_framed_msg+0x82>
 8012660:	30c30c31 	.word	0x30c30c31
 8012664:	0801b3b0 	.word	0x0801b3b0
 8012668:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801266a:	9300      	str	r3, [sp, #0]
 801266c:	2305      	movs	r3, #5
 801266e:	9301      	str	r3, [sp, #4]
 8012670:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012672:	f7ff fde1 	bl	8012238 <uxr_framing_read_transport>
 8012676:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801267a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801267e:	429a      	cmp	r2, r3
 8012680:	f43f ae9d 	beq.w	80123be <uxr_read_framed_msg+0x82>
 8012684:	e668      	b.n	8012358 <uxr_read_framed_msg+0x1c>
 8012686:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012688:	9300      	str	r3, [sp, #0]
 801268a:	2303      	movs	r3, #3
 801268c:	e7c7      	b.n	801261e <uxr_read_framed_msg+0x2e2>
 801268e:	2305      	movs	r3, #5
 8012690:	7023      	strb	r3, [r4, #0]
 8012692:	e664      	b.n	801235e <uxr_read_framed_msg+0x22>
 8012694:	ee17 8a90 	vmov	r8, s15
 8012698:	f43f aef2 	beq.w	8012480 <uxr_read_framed_msg+0x144>
 801269c:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80126a0:	d08e      	beq.n	80125c0 <uxr_read_framed_msg+0x284>
 80126a2:	ebae 0303 	sub.w	r3, lr, r3
 80126a6:	3302      	adds	r3, #2
 80126a8:	9301      	str	r3, [sp, #4]
 80126aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80126ac:	9300      	str	r3, [sp, #0]
 80126ae:	e7b7      	b.n	8012620 <uxr_read_framed_msg+0x2e4>
 80126b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80126b2:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80126b6:	7013      	strb	r3, [r2, #0]
 80126b8:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80126ba:	b003      	add	sp, #12
 80126bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126c0:	f103 0c01 	add.w	ip, r3, #1
 80126c4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80126c8:	fba5 0202 	umull	r0, r2, r5, r2
 80126cc:	0892      	lsrs	r2, r2, #2
 80126ce:	202a      	movs	r0, #42	@ 0x2a
 80126d0:	fb00 c212 	mls	r2, r0, r2, ip
 80126d4:	fa5f fc82 	uxtb.w	ip, r2
 80126d8:	4561      	cmp	r1, ip
 80126da:	d09d      	beq.n	8012618 <uxr_read_framed_msg+0x2dc>
 80126dc:	3302      	adds	r3, #2
 80126de:	4422      	add	r2, r4
 80126e0:	0859      	lsrs	r1, r3, #1
 80126e2:	7892      	ldrb	r2, [r2, #2]
 80126e4:	fba5 c101 	umull	ip, r1, r5, r1
 80126e8:	0889      	lsrs	r1, r1, #2
 80126ea:	fb00 3311 	mls	r3, r0, r1, r3
 80126ee:	2a7e      	cmp	r2, #126	@ 0x7e
 80126f0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80126f4:	f000 80aa 	beq.w	801284c <uxr_read_framed_msg+0x510>
 80126f8:	f082 0220 	eor.w	r2, r2, #32
 80126fc:	e654      	b.n	80123a8 <uxr_read_framed_msg+0x6c>
 80126fe:	1c58      	adds	r0, r3, #1
 8012700:	0842      	lsrs	r2, r0, #1
 8012702:	fba5 c202 	umull	ip, r2, r5, r2
 8012706:	0892      	lsrs	r2, r2, #2
 8012708:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801270c:	fb0c 0212 	mls	r2, ip, r2, r0
 8012710:	b2d0      	uxtb	r0, r2
 8012712:	4281      	cmp	r1, r0
 8012714:	d08f      	beq.n	8012636 <uxr_read_framed_msg+0x2fa>
 8012716:	4422      	add	r2, r4
 8012718:	3302      	adds	r3, #2
 801271a:	7890      	ldrb	r0, [r2, #2]
 801271c:	085a      	lsrs	r2, r3, #1
 801271e:	fba5 1202 	umull	r1, r2, r5, r2
 8012722:	0892      	lsrs	r2, r2, #2
 8012724:	fb0c 3312 	mls	r3, ip, r2, r3
 8012728:	287e      	cmp	r0, #126	@ 0x7e
 801272a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801272e:	d07d      	beq.n	801282c <uxr_read_framed_msg+0x4f0>
 8012730:	f080 0020 	eor.w	r0, r0, #32
 8012734:	e660      	b.n	80123f8 <uxr_read_framed_msg+0xbc>
 8012736:	1c59      	adds	r1, r3, #1
 8012738:	084a      	lsrs	r2, r1, #1
 801273a:	fba5 c202 	umull	ip, r2, r5, r2
 801273e:	0892      	lsrs	r2, r2, #2
 8012740:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012744:	fb0c 1212 	mls	r2, ip, r2, r1
 8012748:	b2d1      	uxtb	r1, r2
 801274a:	4288      	cmp	r0, r1
 801274c:	f43f af64 	beq.w	8012618 <uxr_read_framed_msg+0x2dc>
 8012750:	4422      	add	r2, r4
 8012752:	3302      	adds	r3, #2
 8012754:	7891      	ldrb	r1, [r2, #2]
 8012756:	085a      	lsrs	r2, r3, #1
 8012758:	fba5 0202 	umull	r0, r2, r5, r2
 801275c:	0892      	lsrs	r2, r2, #2
 801275e:	fb0c 3312 	mls	r3, ip, r2, r3
 8012762:	297e      	cmp	r1, #126	@ 0x7e
 8012764:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012768:	d070      	beq.n	801284c <uxr_read_framed_msg+0x510>
 801276a:	f081 0120 	eor.w	r1, r1, #32
 801276e:	e6a3      	b.n	80124b8 <uxr_read_framed_msg+0x17c>
 8012770:	f103 0c01 	add.w	ip, r3, #1
 8012774:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012778:	fba5 0202 	umull	r0, r2, r5, r2
 801277c:	0892      	lsrs	r2, r2, #2
 801277e:	202a      	movs	r0, #42	@ 0x2a
 8012780:	fb00 c212 	mls	r2, r0, r2, ip
 8012784:	fa5f fc82 	uxtb.w	ip, r2
 8012788:	4561      	cmp	r1, ip
 801278a:	f43f af58 	beq.w	801263e <uxr_read_framed_msg+0x302>
 801278e:	4422      	add	r2, r4
 8012790:	3302      	adds	r3, #2
 8012792:	7891      	ldrb	r1, [r2, #2]
 8012794:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8012798:	085a      	lsrs	r2, r3, #1
 801279a:	fba5 c202 	umull	ip, r2, r5, r2
 801279e:	0892      	lsrs	r2, r2, #2
 80127a0:	fb00 3312 	mls	r3, r0, r2, r3
 80127a4:	297e      	cmp	r1, #126	@ 0x7e
 80127a6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80127aa:	f43f af48 	beq.w	801263e <uxr_read_framed_msg+0x302>
 80127ae:	f081 0120 	eor.w	r1, r1, #32
 80127b2:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80127b6:	e6e8      	b.n	801258a <uxr_read_framed_msg+0x24e>
 80127b8:	1c58      	adds	r0, r3, #1
 80127ba:	0842      	lsrs	r2, r0, #1
 80127bc:	fba5 c202 	umull	ip, r2, r5, r2
 80127c0:	0892      	lsrs	r2, r2, #2
 80127c2:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80127c6:	fb0c 0212 	mls	r2, ip, r2, r0
 80127ca:	b2d0      	uxtb	r0, r2
 80127cc:	4281      	cmp	r1, r0
 80127ce:	f43f af32 	beq.w	8012636 <uxr_read_framed_msg+0x2fa>
 80127d2:	4422      	add	r2, r4
 80127d4:	3302      	adds	r3, #2
 80127d6:	7890      	ldrb	r0, [r2, #2]
 80127d8:	085a      	lsrs	r2, r3, #1
 80127da:	fba5 1202 	umull	r1, r2, r5, r2
 80127de:	0892      	lsrs	r2, r2, #2
 80127e0:	fb0c 3312 	mls	r3, ip, r2, r3
 80127e4:	287e      	cmp	r0, #126	@ 0x7e
 80127e6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80127ea:	d01f      	beq.n	801282c <uxr_read_framed_msg+0x4f0>
 80127ec:	f080 0020 	eor.w	r0, r0, #32
 80127f0:	e68b      	b.n	801250a <uxr_read_framed_msg+0x1ce>
 80127f2:	1c51      	adds	r1, r2, #1
 80127f4:	084b      	lsrs	r3, r1, #1
 80127f6:	fba5 c303 	umull	ip, r3, r5, r3
 80127fa:	089b      	lsrs	r3, r3, #2
 80127fc:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012800:	fb0c 1313 	mls	r3, ip, r3, r1
 8012804:	b2d9      	uxtb	r1, r3
 8012806:	4288      	cmp	r0, r1
 8012808:	f43f af3d 	beq.w	8012686 <uxr_read_framed_msg+0x34a>
 801280c:	3202      	adds	r2, #2
 801280e:	4423      	add	r3, r4
 8012810:	0850      	lsrs	r0, r2, #1
 8012812:	789b      	ldrb	r3, [r3, #2]
 8012814:	fba5 1000 	umull	r1, r0, r5, r0
 8012818:	0880      	lsrs	r0, r0, #2
 801281a:	fb0c 2210 	mls	r2, ip, r0, r2
 801281e:	2b7e      	cmp	r3, #126	@ 0x7e
 8012820:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012824:	d016      	beq.n	8012854 <uxr_read_framed_msg+0x518>
 8012826:	f083 0120 	eor.w	r1, r3, #32
 801282a:	e68b      	b.n	8012544 <uxr_read_framed_msg+0x208>
 801282c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801282e:	9300      	str	r3, [sp, #0]
 8012830:	2302      	movs	r3, #2
 8012832:	9301      	str	r3, [sp, #4]
 8012834:	464a      	mov	r2, r9
 8012836:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012838:	4641      	mov	r1, r8
 801283a:	4620      	mov	r0, r4
 801283c:	f7ff fcfc 	bl	8012238 <uxr_framing_read_transport>
 8012840:	2800      	cmp	r0, #0
 8012842:	f47f aef6 	bne.w	8012632 <uxr_read_framed_msg+0x2f6>
 8012846:	2301      	movs	r3, #1
 8012848:	7023      	strb	r3, [r4, #0]
 801284a:	e588      	b.n	801235e <uxr_read_framed_msg+0x22>
 801284c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801284e:	9300      	str	r3, [sp, #0]
 8012850:	2301      	movs	r3, #1
 8012852:	e7ee      	b.n	8012832 <uxr_read_framed_msg+0x4f6>
 8012854:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012856:	9300      	str	r3, [sp, #0]
 8012858:	2303      	movs	r3, #3
 801285a:	e7ea      	b.n	8012832 <uxr_read_framed_msg+0x4f6>
 801285c:	ee17 8a90 	vmov	r8, s15
 8012860:	e6ae      	b.n	80125c0 <uxr_read_framed_msg+0x284>
 8012862:	bf00      	nop

08012864 <uxr_stream_id>:
 8012864:	2901      	cmp	r1, #1
 8012866:	b082      	sub	sp, #8
 8012868:	d01d      	beq.n	80128a6 <uxr_stream_id+0x42>
 801286a:	2902      	cmp	r1, #2
 801286c:	f04f 0c00 	mov.w	ip, #0
 8012870:	d01e      	beq.n	80128b0 <uxr_stream_id+0x4c>
 8012872:	2300      	movs	r3, #0
 8012874:	f36c 0307 	bfi	r3, ip, #0, #8
 8012878:	f360 230f 	bfi	r3, r0, #8, #8
 801287c:	f361 4317 	bfi	r3, r1, #16, #8
 8012880:	f362 631f 	bfi	r3, r2, #24, #8
 8012884:	b2da      	uxtb	r2, r3
 8012886:	2000      	movs	r0, #0
 8012888:	f362 0007 	bfi	r0, r2, #0, #8
 801288c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012890:	f362 200f 	bfi	r0, r2, #8, #8
 8012894:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8012898:	f362 4017 	bfi	r0, r2, #16, #8
 801289c:	0e1b      	lsrs	r3, r3, #24
 801289e:	f363 601f 	bfi	r0, r3, #24, #8
 80128a2:	b002      	add	sp, #8
 80128a4:	4770      	bx	lr
 80128a6:	f100 0c01 	add.w	ip, r0, #1
 80128aa:	fa5f fc8c 	uxtb.w	ip, ip
 80128ae:	e7e0      	b.n	8012872 <uxr_stream_id+0xe>
 80128b0:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 80128b4:	e7dd      	b.n	8012872 <uxr_stream_id+0xe>
 80128b6:	bf00      	nop

080128b8 <uxr_stream_id_from_raw>:
 80128b8:	b082      	sub	sp, #8
 80128ba:	b130      	cbz	r0, 80128ca <uxr_stream_id_from_raw+0x12>
 80128bc:	0603      	lsls	r3, r0, #24
 80128be:	d420      	bmi.n	8012902 <uxr_stream_id_from_raw+0x4a>
 80128c0:	1e42      	subs	r2, r0, #1
 80128c2:	b2d2      	uxtb	r2, r2
 80128c4:	f04f 0c01 	mov.w	ip, #1
 80128c8:	e001      	b.n	80128ce <uxr_stream_id_from_raw+0x16>
 80128ca:	4684      	mov	ip, r0
 80128cc:	4602      	mov	r2, r0
 80128ce:	2300      	movs	r3, #0
 80128d0:	f360 0307 	bfi	r3, r0, #0, #8
 80128d4:	f362 230f 	bfi	r3, r2, #8, #8
 80128d8:	f36c 4317 	bfi	r3, ip, #16, #8
 80128dc:	f361 631f 	bfi	r3, r1, #24, #8
 80128e0:	b2da      	uxtb	r2, r3
 80128e2:	2000      	movs	r0, #0
 80128e4:	f362 0007 	bfi	r0, r2, #0, #8
 80128e8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80128ec:	f362 200f 	bfi	r0, r2, #8, #8
 80128f0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80128f4:	f362 4017 	bfi	r0, r2, #16, #8
 80128f8:	0e1b      	lsrs	r3, r3, #24
 80128fa:	f363 601f 	bfi	r0, r3, #24, #8
 80128fe:	b002      	add	sp, #8
 8012900:	4770      	bx	lr
 8012902:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8012906:	f04f 0c02 	mov.w	ip, #2
 801290a:	e7e0      	b.n	80128ce <uxr_stream_id_from_raw+0x16>

0801290c <uxr_init_stream_storage>:
 801290c:	2300      	movs	r3, #0
 801290e:	7403      	strb	r3, [r0, #16]
 8012910:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8012914:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8012918:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 801291c:	4770      	bx	lr
 801291e:	bf00      	nop

08012920 <uxr_reset_stream_storage>:
 8012920:	b570      	push	{r4, r5, r6, lr}
 8012922:	7c03      	ldrb	r3, [r0, #16]
 8012924:	4604      	mov	r4, r0
 8012926:	b153      	cbz	r3, 801293e <uxr_reset_stream_storage+0x1e>
 8012928:	4606      	mov	r6, r0
 801292a:	2500      	movs	r5, #0
 801292c:	4630      	mov	r0, r6
 801292e:	f006 f823 	bl	8018978 <uxr_reset_output_best_effort_stream>
 8012932:	7c23      	ldrb	r3, [r4, #16]
 8012934:	3501      	adds	r5, #1
 8012936:	42ab      	cmp	r3, r5
 8012938:	f106 0610 	add.w	r6, r6, #16
 801293c:	d8f6      	bhi.n	801292c <uxr_reset_stream_storage+0xc>
 801293e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012942:	b163      	cbz	r3, 801295e <uxr_reset_stream_storage+0x3e>
 8012944:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012948:	2500      	movs	r5, #0
 801294a:	4630      	mov	r0, r6
 801294c:	f005 fe16 	bl	801857c <uxr_reset_input_best_effort_stream>
 8012950:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012954:	3501      	adds	r5, #1
 8012956:	42ab      	cmp	r3, r5
 8012958:	f106 0602 	add.w	r6, r6, #2
 801295c:	d8f5      	bhi.n	801294a <uxr_reset_stream_storage+0x2a>
 801295e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8012962:	b163      	cbz	r3, 801297e <uxr_reset_stream_storage+0x5e>
 8012964:	f104 0618 	add.w	r6, r4, #24
 8012968:	2500      	movs	r5, #0
 801296a:	4630      	mov	r0, r6
 801296c:	f006 f8b0 	bl	8018ad0 <uxr_reset_output_reliable_stream>
 8012970:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8012974:	3501      	adds	r5, #1
 8012976:	42ab      	cmp	r3, r5
 8012978:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 801297c:	d8f5      	bhi.n	801296a <uxr_reset_stream_storage+0x4a>
 801297e:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8012982:	b163      	cbz	r3, 801299e <uxr_reset_stream_storage+0x7e>
 8012984:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8012988:	2500      	movs	r5, #0
 801298a:	4630      	mov	r0, r6
 801298c:	f005 fe6a 	bl	8018664 <uxr_reset_input_reliable_stream>
 8012990:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8012994:	3501      	adds	r5, #1
 8012996:	42ab      	cmp	r3, r5
 8012998:	f106 0618 	add.w	r6, r6, #24
 801299c:	d8f5      	bhi.n	801298a <uxr_reset_stream_storage+0x6a>
 801299e:	bd70      	pop	{r4, r5, r6, pc}

080129a0 <uxr_add_output_best_effort_buffer>:
 80129a0:	b510      	push	{r4, lr}
 80129a2:	7c04      	ldrb	r4, [r0, #16]
 80129a4:	f104 0c01 	add.w	ip, r4, #1
 80129a8:	b082      	sub	sp, #8
 80129aa:	f880 c010 	strb.w	ip, [r0, #16]
 80129ae:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80129b2:	f005 ffd7 	bl	8018964 <uxr_init_output_best_effort_stream>
 80129b6:	2201      	movs	r2, #1
 80129b8:	4611      	mov	r1, r2
 80129ba:	4620      	mov	r0, r4
 80129bc:	b002      	add	sp, #8
 80129be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129c2:	f7ff bf4f 	b.w	8012864 <uxr_stream_id>
 80129c6:	bf00      	nop

080129c8 <uxr_add_output_reliable_buffer>:
 80129c8:	b510      	push	{r4, lr}
 80129ca:	b084      	sub	sp, #16
 80129cc:	4684      	mov	ip, r0
 80129ce:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80129d2:	9000      	str	r0, [sp, #0]
 80129d4:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 80129d8:	2028      	movs	r0, #40	@ 0x28
 80129da:	fb00 c004 	mla	r0, r0, r4, ip
 80129de:	f104 0e01 	add.w	lr, r4, #1
 80129e2:	3018      	adds	r0, #24
 80129e4:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 80129e8:	f006 f83a 	bl	8018a60 <uxr_init_output_reliable_stream>
 80129ec:	2201      	movs	r2, #1
 80129ee:	2102      	movs	r1, #2
 80129f0:	4620      	mov	r0, r4
 80129f2:	b004      	add	sp, #16
 80129f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129f8:	f7ff bf34 	b.w	8012864 <uxr_stream_id>

080129fc <uxr_add_input_best_effort_buffer>:
 80129fc:	b510      	push	{r4, lr}
 80129fe:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8012a02:	4603      	mov	r3, r0
 8012a04:	1c62      	adds	r2, r4, #1
 8012a06:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8012a0a:	b082      	sub	sp, #8
 8012a0c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8012a10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012a14:	f005 fdae 	bl	8018574 <uxr_init_input_best_effort_stream>
 8012a18:	2200      	movs	r2, #0
 8012a1a:	2101      	movs	r1, #1
 8012a1c:	4620      	mov	r0, r4
 8012a1e:	b002      	add	sp, #8
 8012a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a24:	f7ff bf1e 	b.w	8012864 <uxr_stream_id>

08012a28 <uxr_add_input_reliable_buffer>:
 8012a28:	b510      	push	{r4, lr}
 8012a2a:	b084      	sub	sp, #16
 8012a2c:	4684      	mov	ip, r0
 8012a2e:	9806      	ldr	r0, [sp, #24]
 8012a30:	9000      	str	r0, [sp, #0]
 8012a32:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8012a36:	2018      	movs	r0, #24
 8012a38:	fb00 c004 	mla	r0, r0, r4, ip
 8012a3c:	f104 0e01 	add.w	lr, r4, #1
 8012a40:	3048      	adds	r0, #72	@ 0x48
 8012a42:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8012a46:	f005 fde1 	bl	801860c <uxr_init_input_reliable_stream>
 8012a4a:	2200      	movs	r2, #0
 8012a4c:	2102      	movs	r1, #2
 8012a4e:	4620      	mov	r0, r4
 8012a50:	b004      	add	sp, #16
 8012a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a56:	f7ff bf05 	b.w	8012864 <uxr_stream_id>
 8012a5a:	bf00      	nop

08012a5c <uxr_get_output_best_effort_stream>:
 8012a5c:	7c03      	ldrb	r3, [r0, #16]
 8012a5e:	428b      	cmp	r3, r1
 8012a60:	bf8c      	ite	hi
 8012a62:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8012a66:	2000      	movls	r0, #0
 8012a68:	4770      	bx	lr
 8012a6a:	bf00      	nop

08012a6c <uxr_get_output_reliable_stream>:
 8012a6c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8012a70:	428b      	cmp	r3, r1
 8012a72:	bf83      	ittte	hi
 8012a74:	2328      	movhi	r3, #40	@ 0x28
 8012a76:	fb03 0001 	mlahi	r0, r3, r1, r0
 8012a7a:	3018      	addhi	r0, #24
 8012a7c:	2000      	movls	r0, #0
 8012a7e:	4770      	bx	lr

08012a80 <uxr_get_input_best_effort_stream>:
 8012a80:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8012a84:	428b      	cmp	r3, r1
 8012a86:	bf86      	itte	hi
 8012a88:	3121      	addhi	r1, #33	@ 0x21
 8012a8a:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8012a8e:	2000      	movls	r0, #0
 8012a90:	4770      	bx	lr
 8012a92:	bf00      	nop

08012a94 <uxr_get_input_reliable_stream>:
 8012a94:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8012a98:	428b      	cmp	r3, r1
 8012a9a:	bf83      	ittte	hi
 8012a9c:	2318      	movhi	r3, #24
 8012a9e:	fb03 0001 	mlahi	r0, r3, r1, r0
 8012aa2:	3048      	addhi	r0, #72	@ 0x48
 8012aa4:	2000      	movls	r0, #0
 8012aa6:	4770      	bx	lr

08012aa8 <uxr_output_streams_confirmed>:
 8012aa8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8012aac:	b183      	cbz	r3, 8012ad0 <uxr_output_streams_confirmed+0x28>
 8012aae:	b570      	push	{r4, r5, r6, lr}
 8012ab0:	4606      	mov	r6, r0
 8012ab2:	f100 0518 	add.w	r5, r0, #24
 8012ab6:	2400      	movs	r4, #0
 8012ab8:	e001      	b.n	8012abe <uxr_output_streams_confirmed+0x16>
 8012aba:	3528      	adds	r5, #40	@ 0x28
 8012abc:	b138      	cbz	r0, 8012ace <uxr_output_streams_confirmed+0x26>
 8012abe:	4628      	mov	r0, r5
 8012ac0:	f006 fa76 	bl	8018fb0 <uxr_is_output_up_to_date>
 8012ac4:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8012ac8:	3401      	adds	r4, #1
 8012aca:	42a3      	cmp	r3, r4
 8012acc:	d8f5      	bhi.n	8012aba <uxr_output_streams_confirmed+0x12>
 8012ace:	bd70      	pop	{r4, r5, r6, pc}
 8012ad0:	2001      	movs	r0, #1
 8012ad2:	4770      	bx	lr

08012ad4 <uxr_buffer_submessage_header>:
 8012ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ad6:	4604      	mov	r4, r0
 8012ad8:	460e      	mov	r6, r1
 8012ada:	2104      	movs	r1, #4
 8012adc:	4615      	mov	r5, r2
 8012ade:	461f      	mov	r7, r3
 8012ae0:	f7fd fd22 	bl	8010528 <ucdr_align_to>
 8012ae4:	2301      	movs	r3, #1
 8012ae6:	ea47 0203 	orr.w	r2, r7, r3
 8012aea:	4631      	mov	r1, r6
 8012aec:	7523      	strb	r3, [r4, #20]
 8012aee:	4620      	mov	r0, r4
 8012af0:	462b      	mov	r3, r5
 8012af2:	f000 fa27 	bl	8012f44 <uxr_serialize_submessage_header>
 8012af6:	4620      	mov	r0, r4
 8012af8:	f7fd fd2c 	bl	8010554 <ucdr_buffer_remaining>
 8012afc:	42a8      	cmp	r0, r5
 8012afe:	bf34      	ite	cc
 8012b00:	2000      	movcc	r0, #0
 8012b02:	2001      	movcs	r0, #1
 8012b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b06:	bf00      	nop

08012b08 <uxr_read_submessage_header>:
 8012b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b0c:	4604      	mov	r4, r0
 8012b0e:	460d      	mov	r5, r1
 8012b10:	2104      	movs	r1, #4
 8012b12:	4616      	mov	r6, r2
 8012b14:	4698      	mov	r8, r3
 8012b16:	f7fd fd07 	bl	8010528 <ucdr_align_to>
 8012b1a:	4620      	mov	r0, r4
 8012b1c:	f7fd fd1a 	bl	8010554 <ucdr_buffer_remaining>
 8012b20:	2803      	cmp	r0, #3
 8012b22:	bf8c      	ite	hi
 8012b24:	2701      	movhi	r7, #1
 8012b26:	2700      	movls	r7, #0
 8012b28:	d802      	bhi.n	8012b30 <uxr_read_submessage_header+0x28>
 8012b2a:	4638      	mov	r0, r7
 8012b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b30:	4633      	mov	r3, r6
 8012b32:	4642      	mov	r2, r8
 8012b34:	4620      	mov	r0, r4
 8012b36:	4629      	mov	r1, r5
 8012b38:	f000 fa18 	bl	8012f6c <uxr_deserialize_submessage_header>
 8012b3c:	f898 3000 	ldrb.w	r3, [r8]
 8012b40:	f003 0201 	and.w	r2, r3, #1
 8012b44:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8012b48:	f888 3000 	strb.w	r3, [r8]
 8012b4c:	7522      	strb	r2, [r4, #20]
 8012b4e:	4638      	mov	r0, r7
 8012b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012b54 <uxr_submessage_padding>:
 8012b54:	f010 0003 	ands.w	r0, r0, #3
 8012b58:	bf18      	it	ne
 8012b5a:	f1c0 0004 	rsbne	r0, r0, #4
 8012b5e:	4770      	bx	lr

08012b60 <uxr_millis>:
 8012b60:	b510      	push	{r4, lr}
 8012b62:	b084      	sub	sp, #16
 8012b64:	4669      	mov	r1, sp
 8012b66:	2001      	movs	r0, #1
 8012b68:	f7f0 faba 	bl	80030e0 <clock_gettime>
 8012b6c:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8012b70:	4906      	ldr	r1, [pc, #24]	@ (8012b8c <uxr_millis+0x2c>)
 8012b72:	fba0 0301 	umull	r0, r3, r0, r1
 8012b76:	1900      	adds	r0, r0, r4
 8012b78:	fb01 3102 	mla	r1, r1, r2, r3
 8012b7c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8012b80:	4a03      	ldr	r2, [pc, #12]	@ (8012b90 <uxr_millis+0x30>)
 8012b82:	2300      	movs	r3, #0
 8012b84:	f7ed ffa2 	bl	8000acc <__aeabi_ldivmod>
 8012b88:	b004      	add	sp, #16
 8012b8a:	bd10      	pop	{r4, pc}
 8012b8c:	3b9aca00 	.word	0x3b9aca00
 8012b90:	000f4240 	.word	0x000f4240

08012b94 <uxr_nanos>:
 8012b94:	b510      	push	{r4, lr}
 8012b96:	b084      	sub	sp, #16
 8012b98:	4669      	mov	r1, sp
 8012b9a:	2001      	movs	r0, #1
 8012b9c:	f7f0 faa0 	bl	80030e0 <clock_gettime>
 8012ba0:	4a06      	ldr	r2, [pc, #24]	@ (8012bbc <uxr_nanos+0x28>)
 8012ba2:	9800      	ldr	r0, [sp, #0]
 8012ba4:	9902      	ldr	r1, [sp, #8]
 8012ba6:	9c01      	ldr	r4, [sp, #4]
 8012ba8:	fba0 0302 	umull	r0, r3, r0, r2
 8012bac:	1840      	adds	r0, r0, r1
 8012bae:	fb02 3304 	mla	r3, r2, r4, r3
 8012bb2:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8012bb6:	b004      	add	sp, #16
 8012bb8:	bd10      	pop	{r4, pc}
 8012bba:	bf00      	nop
 8012bbc:	3b9aca00 	.word	0x3b9aca00

08012bc0 <on_full_output_buffer_fragmented>:
 8012bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bc4:	460c      	mov	r4, r1
 8012bc6:	b08a      	sub	sp, #40	@ 0x28
 8012bc8:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8012bcc:	4606      	mov	r6, r0
 8012bce:	f104 0008 	add.w	r0, r4, #8
 8012bd2:	f7ff ff4b 	bl	8012a6c <uxr_get_output_reliable_stream>
 8012bd6:	4605      	mov	r5, r0
 8012bd8:	f006 f9f4 	bl	8018fc4 <get_available_free_slots>
 8012bdc:	b968      	cbnz	r0, 8012bfa <on_full_output_buffer_fragmented+0x3a>
 8012bde:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8012be2:	4620      	mov	r0, r4
 8012be4:	4798      	blx	r3
 8012be6:	b918      	cbnz	r0, 8012bf0 <on_full_output_buffer_fragmented+0x30>
 8012be8:	2001      	movs	r0, #1
 8012bea:	b00a      	add	sp, #40	@ 0x28
 8012bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bf0:	4628      	mov	r0, r5
 8012bf2:	f006 f9e7 	bl	8018fc4 <get_available_free_slots>
 8012bf6:	2800      	cmp	r0, #0
 8012bf8:	d0f6      	beq.n	8012be8 <on_full_output_buffer_fragmented+0x28>
 8012bfa:	8929      	ldrh	r1, [r5, #8]
 8012bfc:	89eb      	ldrh	r3, [r5, #14]
 8012bfe:	7b28      	ldrb	r0, [r5, #12]
 8012c00:	686a      	ldr	r2, [r5, #4]
 8012c02:	fbb2 f8f1 	udiv	r8, r2, r1
 8012c06:	fbb3 f2f1 	udiv	r2, r3, r1
 8012c0a:	fb01 3112 	mls	r1, r1, r2, r3
 8012c0e:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8012c12:	b289      	uxth	r1, r1
 8012c14:	fb08 f101 	mul.w	r1, r8, r1
 8012c18:	30fc      	adds	r0, #252	@ 0xfc
 8012c1a:	f1a8 0804 	sub.w	r8, r8, #4
 8012c1e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8012c22:	4440      	add	r0, r8
 8012c24:	b287      	uxth	r7, r0
 8012c26:	1bdb      	subs	r3, r3, r7
 8012c28:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8012c2c:	682b      	ldr	r3, [r5, #0]
 8012c2e:	3104      	adds	r1, #4
 8012c30:	4419      	add	r1, r3
 8012c32:	4642      	mov	r2, r8
 8012c34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c38:	9300      	str	r3, [sp, #0]
 8012c3a:	a802      	add	r0, sp, #8
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	f7fd fc47 	bl	80104d0 <ucdr_init_buffer_origin_offset>
 8012c42:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8012c46:	f102 0308 	add.w	r3, r2, #8
 8012c4a:	4543      	cmp	r3, r8
 8012c4c:	d928      	bls.n	8012ca0 <on_full_output_buffer_fragmented+0xe0>
 8012c4e:	463a      	mov	r2, r7
 8012c50:	2300      	movs	r3, #0
 8012c52:	210d      	movs	r1, #13
 8012c54:	a802      	add	r0, sp, #8
 8012c56:	f7ff ff3d 	bl	8012ad4 <uxr_buffer_submessage_header>
 8012c5a:	8929      	ldrh	r1, [r5, #8]
 8012c5c:	89eb      	ldrh	r3, [r5, #14]
 8012c5e:	fbb3 f2f1 	udiv	r2, r3, r1
 8012c62:	fb01 3312 	mls	r3, r1, r2, r3
 8012c66:	b29b      	uxth	r3, r3
 8012c68:	686a      	ldr	r2, [r5, #4]
 8012c6a:	fbb2 f2f1 	udiv	r2, r2, r1
 8012c6e:	fb02 f303 	mul.w	r3, r2, r3
 8012c72:	682a      	ldr	r2, [r5, #0]
 8012c74:	f842 8003 	str.w	r8, [r2, r3]
 8012c78:	89e8      	ldrh	r0, [r5, #14]
 8012c7a:	2101      	movs	r1, #1
 8012c7c:	f006 f9c2 	bl	8019004 <uxr_seq_num_add>
 8012c80:	9904      	ldr	r1, [sp, #16]
 8012c82:	9a03      	ldr	r2, [sp, #12]
 8012c84:	81e8      	strh	r0, [r5, #14]
 8012c86:	1a52      	subs	r2, r2, r1
 8012c88:	4630      	mov	r0, r6
 8012c8a:	f7fd fc33 	bl	80104f4 <ucdr_init_buffer>
 8012c8e:	4630      	mov	r0, r6
 8012c90:	490f      	ldr	r1, [pc, #60]	@ (8012cd0 <on_full_output_buffer_fragmented+0x110>)
 8012c92:	4622      	mov	r2, r4
 8012c94:	f7fd fc02 	bl	801049c <ucdr_set_on_full_buffer_callback>
 8012c98:	2000      	movs	r0, #0
 8012c9a:	b00a      	add	sp, #40	@ 0x28
 8012c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ca0:	b292      	uxth	r2, r2
 8012ca2:	2302      	movs	r3, #2
 8012ca4:	210d      	movs	r1, #13
 8012ca6:	a802      	add	r0, sp, #8
 8012ca8:	f7ff ff14 	bl	8012ad4 <uxr_buffer_submessage_header>
 8012cac:	8928      	ldrh	r0, [r5, #8]
 8012cae:	89eb      	ldrh	r3, [r5, #14]
 8012cb0:	fbb3 f1f0 	udiv	r1, r3, r0
 8012cb4:	fb00 3311 	mls	r3, r0, r1, r3
 8012cb8:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8012cbc:	6869      	ldr	r1, [r5, #4]
 8012cbe:	fbb1 f1f0 	udiv	r1, r1, r0
 8012cc2:	b29b      	uxth	r3, r3
 8012cc4:	fb01 f303 	mul.w	r3, r1, r3
 8012cc8:	6829      	ldr	r1, [r5, #0]
 8012cca:	3208      	adds	r2, #8
 8012ccc:	50ca      	str	r2, [r1, r3]
 8012cce:	e7d3      	b.n	8012c78 <on_full_output_buffer_fragmented+0xb8>
 8012cd0:	08012bc1 	.word	0x08012bc1

08012cd4 <uxr_prepare_output_stream>:
 8012cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012cd6:	b087      	sub	sp, #28
 8012cd8:	2707      	movs	r7, #7
 8012cda:	9202      	str	r2, [sp, #8]
 8012cdc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8012cde:	9103      	str	r1, [sp, #12]
 8012ce0:	2500      	movs	r5, #0
 8012ce2:	3204      	adds	r2, #4
 8012ce4:	e9cd 7500 	strd	r7, r5, [sp]
 8012ce8:	461c      	mov	r4, r3
 8012cea:	4606      	mov	r6, r0
 8012cec:	f7fe ffc2 	bl	8011c74 <uxr_prepare_stream_to_write_submessage>
 8012cf0:	f080 0201 	eor.w	r2, r0, #1
 8012cf4:	b2d2      	uxtb	r2, r2
 8012cf6:	75a2      	strb	r2, [r4, #22]
 8012cf8:	b112      	cbz	r2, 8012d00 <uxr_prepare_output_stream+0x2c>
 8012cfa:	4628      	mov	r0, r5
 8012cfc:	b007      	add	sp, #28
 8012cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d00:	aa05      	add	r2, sp, #20
 8012d02:	9902      	ldr	r1, [sp, #8]
 8012d04:	4630      	mov	r0, r6
 8012d06:	f7ff f8eb 	bl	8011ee0 <uxr_init_base_object_request>
 8012d0a:	a905      	add	r1, sp, #20
 8012d0c:	4605      	mov	r5, r0
 8012d0e:	4620      	mov	r0, r4
 8012d10:	f001 f88c 	bl	8013e2c <uxr_serialize_WRITE_DATA_Payload_Data>
 8012d14:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8012d18:	69a6      	ldr	r6, [r4, #24]
 8012d1a:	69e7      	ldr	r7, [r4, #28]
 8012d1c:	1a52      	subs	r2, r2, r1
 8012d1e:	4620      	mov	r0, r4
 8012d20:	f7fd fbe8 	bl	80104f4 <ucdr_init_buffer>
 8012d24:	4620      	mov	r0, r4
 8012d26:	463a      	mov	r2, r7
 8012d28:	4631      	mov	r1, r6
 8012d2a:	f7fd fbb7 	bl	801049c <ucdr_set_on_full_buffer_callback>
 8012d2e:	4628      	mov	r0, r5
 8012d30:	b007      	add	sp, #28
 8012d32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012d34 <uxr_prepare_output_stream_fragmented>:
 8012d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d38:	b091      	sub	sp, #68	@ 0x44
 8012d3a:	4605      	mov	r5, r0
 8012d3c:	9105      	str	r1, [sp, #20]
 8012d3e:	3008      	adds	r0, #8
 8012d40:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8012d44:	461e      	mov	r6, r3
 8012d46:	9204      	str	r2, [sp, #16]
 8012d48:	f7ff fe90 	bl	8012a6c <uxr_get_output_reliable_stream>
 8012d4c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8012d50:	2b01      	cmp	r3, #1
 8012d52:	f000 8091 	beq.w	8012e78 <uxr_prepare_output_stream_fragmented+0x144>
 8012d56:	4604      	mov	r4, r0
 8012d58:	2800      	cmp	r0, #0
 8012d5a:	f000 808d 	beq.w	8012e78 <uxr_prepare_output_stream_fragmented+0x144>
 8012d5e:	f006 f931 	bl	8018fc4 <get_available_free_slots>
 8012d62:	2800      	cmp	r0, #0
 8012d64:	f000 8083 	beq.w	8012e6e <uxr_prepare_output_stream_fragmented+0x13a>
 8012d68:	8922      	ldrh	r2, [r4, #8]
 8012d6a:	89e7      	ldrh	r7, [r4, #14]
 8012d6c:	fbb7 f9f2 	udiv	r9, r7, r2
 8012d70:	fb02 7919 	mls	r9, r2, r9, r7
 8012d74:	fa1f f989 	uxth.w	r9, r9
 8012d78:	6863      	ldr	r3, [r4, #4]
 8012d7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8012d7e:	6823      	ldr	r3, [r4, #0]
 8012d80:	9203      	str	r2, [sp, #12]
 8012d82:	fb02 f909 	mul.w	r9, r2, r9
 8012d86:	f109 0904 	add.w	r9, r9, #4
 8012d8a:	4499      	add	r9, r3
 8012d8c:	7b23      	ldrb	r3, [r4, #12]
 8012d8e:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8012d92:	4543      	cmp	r3, r8
 8012d94:	f1a2 0b04 	sub.w	fp, r2, #4
 8012d98:	d37a      	bcc.n	8012e90 <uxr_prepare_output_stream_fragmented+0x15c>
 8012d9a:	f1ab 0a04 	sub.w	sl, fp, #4
 8012d9e:	ebaa 0a03 	sub.w	sl, sl, r3
 8012da2:	465a      	mov	r2, fp
 8012da4:	2300      	movs	r3, #0
 8012da6:	4649      	mov	r1, r9
 8012da8:	a808      	add	r0, sp, #32
 8012daa:	f8cd 8000 	str.w	r8, [sp]
 8012dae:	f7fd fb8f 	bl	80104d0 <ucdr_init_buffer_origin_offset>
 8012db2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8012db4:	fa1f fa8a 	uxth.w	sl, sl
 8012db8:	4652      	mov	r2, sl
 8012dba:	f103 0a08 	add.w	sl, r3, #8
 8012dbe:	45da      	cmp	sl, fp
 8012dc0:	bf34      	ite	cc
 8012dc2:	2302      	movcc	r3, #2
 8012dc4:	2300      	movcs	r3, #0
 8012dc6:	210d      	movs	r1, #13
 8012dc8:	a808      	add	r0, sp, #32
 8012dca:	f7ff fe83 	bl	8012ad4 <uxr_buffer_submessage_header>
 8012dce:	8921      	ldrh	r1, [r4, #8]
 8012dd0:	fbb7 f2f1 	udiv	r2, r7, r1
 8012dd4:	fb01 7212 	mls	r2, r1, r2, r7
 8012dd8:	b292      	uxth	r2, r2
 8012dda:	6863      	ldr	r3, [r4, #4]
 8012ddc:	fbb3 f3f1 	udiv	r3, r3, r1
 8012de0:	fb02 f303 	mul.w	r3, r2, r3
 8012de4:	6822      	ldr	r2, [r4, #0]
 8012de6:	4638      	mov	r0, r7
 8012de8:	f842 b003 	str.w	fp, [r2, r3]
 8012dec:	2101      	movs	r1, #1
 8012dee:	f006 f909 	bl	8019004 <uxr_seq_num_add>
 8012df2:	9b03      	ldr	r3, [sp, #12]
 8012df4:	f108 0104 	add.w	r1, r8, #4
 8012df8:	f1a3 0208 	sub.w	r2, r3, #8
 8012dfc:	eba2 0208 	sub.w	r2, r2, r8
 8012e00:	4449      	add	r1, r9
 8012e02:	4607      	mov	r7, r0
 8012e04:	4630      	mov	r0, r6
 8012e06:	f7fd fb75 	bl	80104f4 <ucdr_init_buffer>
 8012e0a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8012e0c:	81e7      	strh	r7, [r4, #14]
 8012e0e:	1d1a      	adds	r2, r3, #4
 8012e10:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8012e14:	bf28      	it	cs
 8012e16:	2200      	movcs	r2, #0
 8012e18:	2300      	movs	r3, #0
 8012e1a:	b292      	uxth	r2, r2
 8012e1c:	2107      	movs	r1, #7
 8012e1e:	4630      	mov	r0, r6
 8012e20:	f7ff fe58 	bl	8012ad4 <uxr_buffer_submessage_header>
 8012e24:	9904      	ldr	r1, [sp, #16]
 8012e26:	aa07      	add	r2, sp, #28
 8012e28:	4628      	mov	r0, r5
 8012e2a:	f7ff f859 	bl	8011ee0 <uxr_init_base_object_request>
 8012e2e:	4604      	mov	r4, r0
 8012e30:	b318      	cbz	r0, 8012e7a <uxr_prepare_output_stream_fragmented+0x146>
 8012e32:	a907      	add	r1, sp, #28
 8012e34:	4630      	mov	r0, r6
 8012e36:	f000 fff9 	bl	8013e2c <uxr_serialize_WRITE_DATA_Payload_Data>
 8012e3a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8012e3e:	4630      	mov	r0, r6
 8012e40:	1a52      	subs	r2, r2, r1
 8012e42:	f7fd fb57 	bl	80104f4 <ucdr_init_buffer>
 8012e46:	9b05      	ldr	r3, [sp, #20]
 8012e48:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8012e4c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8012e4e:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8012e52:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8012e54:	491b      	ldr	r1, [pc, #108]	@ (8012ec4 <uxr_prepare_output_stream_fragmented+0x190>)
 8012e56:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8012e5a:	4630      	mov	r0, r6
 8012e5c:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8012e60:	462a      	mov	r2, r5
 8012e62:	f7fd fb1b 	bl	801049c <ucdr_set_on_full_buffer_callback>
 8012e66:	4620      	mov	r0, r4
 8012e68:	b011      	add	sp, #68	@ 0x44
 8012e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e6e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8012e70:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8012e72:	4628      	mov	r0, r5
 8012e74:	4798      	blx	r3
 8012e76:	b920      	cbnz	r0, 8012e82 <uxr_prepare_output_stream_fragmented+0x14e>
 8012e78:	2400      	movs	r4, #0
 8012e7a:	4620      	mov	r0, r4
 8012e7c:	b011      	add	sp, #68	@ 0x44
 8012e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e82:	4620      	mov	r0, r4
 8012e84:	f006 f89e 	bl	8018fc4 <get_available_free_slots>
 8012e88:	2800      	cmp	r0, #0
 8012e8a:	f47f af6d 	bne.w	8012d68 <uxr_prepare_output_stream_fragmented+0x34>
 8012e8e:	e7f3      	b.n	8012e78 <uxr_prepare_output_stream_fragmented+0x144>
 8012e90:	4638      	mov	r0, r7
 8012e92:	2101      	movs	r1, #1
 8012e94:	f006 f8b6 	bl	8019004 <uxr_seq_num_add>
 8012e98:	8921      	ldrh	r1, [r4, #8]
 8012e9a:	fbb0 f2f1 	udiv	r2, r0, r1
 8012e9e:	fb01 0912 	mls	r9, r1, r2, r0
 8012ea2:	fa1f f289 	uxth.w	r2, r9
 8012ea6:	6863      	ldr	r3, [r4, #4]
 8012ea8:	fbb3 f9f1 	udiv	r9, r3, r1
 8012eac:	6823      	ldr	r3, [r4, #0]
 8012eae:	fb02 f909 	mul.w	r9, r2, r9
 8012eb2:	f109 0904 	add.w	r9, r9, #4
 8012eb6:	4499      	add	r9, r3
 8012eb8:	4607      	mov	r7, r0
 8012eba:	7b23      	ldrb	r3, [r4, #12]
 8012ebc:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8012ec0:	e76b      	b.n	8012d9a <uxr_prepare_output_stream_fragmented+0x66>
 8012ec2:	bf00      	nop
 8012ec4:	08012bc1 	.word	0x08012bc1

08012ec8 <uxr_serialize_message_header>:
 8012ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012eca:	b083      	sub	sp, #12
 8012ecc:	4616      	mov	r6, r2
 8012ece:	4604      	mov	r4, r0
 8012ed0:	9301      	str	r3, [sp, #4]
 8012ed2:	460d      	mov	r5, r1
 8012ed4:	9f08      	ldr	r7, [sp, #32]
 8012ed6:	f7fc fb61 	bl	800f59c <ucdr_serialize_uint8_t>
 8012eda:	4631      	mov	r1, r6
 8012edc:	4620      	mov	r0, r4
 8012ede:	f7fc fb5d 	bl	800f59c <ucdr_serialize_uint8_t>
 8012ee2:	9a01      	ldr	r2, [sp, #4]
 8012ee4:	2101      	movs	r1, #1
 8012ee6:	4620      	mov	r0, r4
 8012ee8:	f7fc fc04 	bl	800f6f4 <ucdr_serialize_endian_uint16_t>
 8012eec:	062b      	lsls	r3, r5, #24
 8012eee:	d501      	bpl.n	8012ef4 <uxr_serialize_message_header+0x2c>
 8012ef0:	b003      	add	sp, #12
 8012ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ef4:	2204      	movs	r2, #4
 8012ef6:	4639      	mov	r1, r7
 8012ef8:	4620      	mov	r0, r4
 8012efa:	b003      	add	sp, #12
 8012efc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012f00:	f005 ba00 	b.w	8018304 <ucdr_serialize_array_uint8_t>

08012f04 <uxr_deserialize_message_header>:
 8012f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f06:	b083      	sub	sp, #12
 8012f08:	4616      	mov	r6, r2
 8012f0a:	4604      	mov	r4, r0
 8012f0c:	9301      	str	r3, [sp, #4]
 8012f0e:	460d      	mov	r5, r1
 8012f10:	9f08      	ldr	r7, [sp, #32]
 8012f12:	f7fc fb59 	bl	800f5c8 <ucdr_deserialize_uint8_t>
 8012f16:	4631      	mov	r1, r6
 8012f18:	4620      	mov	r0, r4
 8012f1a:	f7fc fb55 	bl	800f5c8 <ucdr_deserialize_uint8_t>
 8012f1e:	9a01      	ldr	r2, [sp, #4]
 8012f20:	2101      	movs	r1, #1
 8012f22:	4620      	mov	r0, r4
 8012f24:	f7fc fcda 	bl	800f8dc <ucdr_deserialize_endian_uint16_t>
 8012f28:	f995 3000 	ldrsb.w	r3, [r5]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	da01      	bge.n	8012f34 <uxr_deserialize_message_header+0x30>
 8012f30:	b003      	add	sp, #12
 8012f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f34:	2204      	movs	r2, #4
 8012f36:	4639      	mov	r1, r7
 8012f38:	4620      	mov	r0, r4
 8012f3a:	b003      	add	sp, #12
 8012f3c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012f40:	f005 ba44 	b.w	80183cc <ucdr_deserialize_array_uint8_t>

08012f44 <uxr_serialize_submessage_header>:
 8012f44:	b530      	push	{r4, r5, lr}
 8012f46:	b083      	sub	sp, #12
 8012f48:	4615      	mov	r5, r2
 8012f4a:	4604      	mov	r4, r0
 8012f4c:	9301      	str	r3, [sp, #4]
 8012f4e:	f7fc fb25 	bl	800f59c <ucdr_serialize_uint8_t>
 8012f52:	4629      	mov	r1, r5
 8012f54:	4620      	mov	r0, r4
 8012f56:	f7fc fb21 	bl	800f59c <ucdr_serialize_uint8_t>
 8012f5a:	9a01      	ldr	r2, [sp, #4]
 8012f5c:	2101      	movs	r1, #1
 8012f5e:	4620      	mov	r0, r4
 8012f60:	b003      	add	sp, #12
 8012f62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012f66:	f7fc bbc5 	b.w	800f6f4 <ucdr_serialize_endian_uint16_t>
 8012f6a:	bf00      	nop

08012f6c <uxr_deserialize_submessage_header>:
 8012f6c:	b530      	push	{r4, r5, lr}
 8012f6e:	b083      	sub	sp, #12
 8012f70:	4615      	mov	r5, r2
 8012f72:	4604      	mov	r4, r0
 8012f74:	9301      	str	r3, [sp, #4]
 8012f76:	f7fc fb27 	bl	800f5c8 <ucdr_deserialize_uint8_t>
 8012f7a:	4629      	mov	r1, r5
 8012f7c:	4620      	mov	r0, r4
 8012f7e:	f7fc fb23 	bl	800f5c8 <ucdr_deserialize_uint8_t>
 8012f82:	9a01      	ldr	r2, [sp, #4]
 8012f84:	2101      	movs	r1, #1
 8012f86:	4620      	mov	r0, r4
 8012f88:	b003      	add	sp, #12
 8012f8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012f8e:	f7fc bca5 	b.w	800f8dc <ucdr_deserialize_endian_uint16_t>
 8012f92:	bf00      	nop

08012f94 <uxr_serialize_CLIENT_Representation>:
 8012f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f98:	2204      	movs	r2, #4
 8012f9a:	460e      	mov	r6, r1
 8012f9c:	4605      	mov	r5, r0
 8012f9e:	f005 f9b1 	bl	8018304 <ucdr_serialize_array_uint8_t>
 8012fa2:	2202      	movs	r2, #2
 8012fa4:	4607      	mov	r7, r0
 8012fa6:	1d31      	adds	r1, r6, #4
 8012fa8:	4628      	mov	r0, r5
 8012faa:	f005 f9ab 	bl	8018304 <ucdr_serialize_array_uint8_t>
 8012fae:	4038      	ands	r0, r7
 8012fb0:	2202      	movs	r2, #2
 8012fb2:	1db1      	adds	r1, r6, #6
 8012fb4:	b2c7      	uxtb	r7, r0
 8012fb6:	4628      	mov	r0, r5
 8012fb8:	f005 f9a4 	bl	8018304 <ucdr_serialize_array_uint8_t>
 8012fbc:	2204      	movs	r2, #4
 8012fbe:	4007      	ands	r7, r0
 8012fc0:	f106 0108 	add.w	r1, r6, #8
 8012fc4:	4628      	mov	r0, r5
 8012fc6:	f005 f99d 	bl	8018304 <ucdr_serialize_array_uint8_t>
 8012fca:	7b31      	ldrb	r1, [r6, #12]
 8012fcc:	4007      	ands	r7, r0
 8012fce:	4628      	mov	r0, r5
 8012fd0:	f7fc fae4 	bl	800f59c <ucdr_serialize_uint8_t>
 8012fd4:	7b71      	ldrb	r1, [r6, #13]
 8012fd6:	4007      	ands	r7, r0
 8012fd8:	4628      	mov	r0, r5
 8012fda:	f7fc fab1 	bl	800f540 <ucdr_serialize_bool>
 8012fde:	7b73      	ldrb	r3, [r6, #13]
 8012fe0:	ea07 0800 	and.w	r8, r7, r0
 8012fe4:	b93b      	cbnz	r3, 8012ff6 <uxr_serialize_CLIENT_Representation+0x62>
 8012fe6:	8bb1      	ldrh	r1, [r6, #28]
 8012fe8:	4628      	mov	r0, r5
 8012fea:	f7fc fb03 	bl	800f5f4 <ucdr_serialize_uint16_t>
 8012fee:	ea08 0000 	and.w	r0, r8, r0
 8012ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ff6:	6931      	ldr	r1, [r6, #16]
 8012ff8:	4628      	mov	r0, r5
 8012ffa:	f7fc fce5 	bl	800f9c8 <ucdr_serialize_uint32_t>
 8012ffe:	6933      	ldr	r3, [r6, #16]
 8013000:	b1e3      	cbz	r3, 801303c <uxr_serialize_CLIENT_Representation+0xa8>
 8013002:	b1c0      	cbz	r0, 8013036 <uxr_serialize_CLIENT_Representation+0xa2>
 8013004:	4637      	mov	r7, r6
 8013006:	f04f 0900 	mov.w	r9, #0
 801300a:	e001      	b.n	8013010 <uxr_serialize_CLIENT_Representation+0x7c>
 801300c:	3708      	adds	r7, #8
 801300e:	b194      	cbz	r4, 8013036 <uxr_serialize_CLIENT_Representation+0xa2>
 8013010:	6979      	ldr	r1, [r7, #20]
 8013012:	4628      	mov	r0, r5
 8013014:	f005 fa96 	bl	8018544 <ucdr_serialize_string>
 8013018:	69b9      	ldr	r1, [r7, #24]
 801301a:	4604      	mov	r4, r0
 801301c:	4628      	mov	r0, r5
 801301e:	f005 fa91 	bl	8018544 <ucdr_serialize_string>
 8013022:	6933      	ldr	r3, [r6, #16]
 8013024:	f109 0901 	add.w	r9, r9, #1
 8013028:	4004      	ands	r4, r0
 801302a:	4599      	cmp	r9, r3
 801302c:	b2e4      	uxtb	r4, r4
 801302e:	d3ed      	bcc.n	801300c <uxr_serialize_CLIENT_Representation+0x78>
 8013030:	ea08 0804 	and.w	r8, r8, r4
 8013034:	e7d7      	b.n	8012fe6 <uxr_serialize_CLIENT_Representation+0x52>
 8013036:	f04f 0800 	mov.w	r8, #0
 801303a:	e7d4      	b.n	8012fe6 <uxr_serialize_CLIENT_Representation+0x52>
 801303c:	ea08 0800 	and.w	r8, r8, r0
 8013040:	e7d1      	b.n	8012fe6 <uxr_serialize_CLIENT_Representation+0x52>
 8013042:	bf00      	nop

08013044 <uxr_deserialize_CLIENT_Representation>:
 8013044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013048:	2204      	movs	r2, #4
 801304a:	460c      	mov	r4, r1
 801304c:	4605      	mov	r5, r0
 801304e:	f005 f9bd 	bl	80183cc <ucdr_deserialize_array_uint8_t>
 8013052:	2202      	movs	r2, #2
 8013054:	4607      	mov	r7, r0
 8013056:	1d21      	adds	r1, r4, #4
 8013058:	4628      	mov	r0, r5
 801305a:	f005 f9b7 	bl	80183cc <ucdr_deserialize_array_uint8_t>
 801305e:	4038      	ands	r0, r7
 8013060:	2202      	movs	r2, #2
 8013062:	1da1      	adds	r1, r4, #6
 8013064:	b2c6      	uxtb	r6, r0
 8013066:	4628      	mov	r0, r5
 8013068:	f005 f9b0 	bl	80183cc <ucdr_deserialize_array_uint8_t>
 801306c:	2204      	movs	r2, #4
 801306e:	4006      	ands	r6, r0
 8013070:	f104 0108 	add.w	r1, r4, #8
 8013074:	4628      	mov	r0, r5
 8013076:	f005 f9a9 	bl	80183cc <ucdr_deserialize_array_uint8_t>
 801307a:	f104 010c 	add.w	r1, r4, #12
 801307e:	4006      	ands	r6, r0
 8013080:	4628      	mov	r0, r5
 8013082:	f7fc faa1 	bl	800f5c8 <ucdr_deserialize_uint8_t>
 8013086:	f104 010d 	add.w	r1, r4, #13
 801308a:	ea06 0700 	and.w	r7, r6, r0
 801308e:	4628      	mov	r0, r5
 8013090:	f7fc fa6c 	bl	800f56c <ucdr_deserialize_bool>
 8013094:	7b63      	ldrb	r3, [r4, #13]
 8013096:	4007      	ands	r7, r0
 8013098:	b93b      	cbnz	r3, 80130aa <uxr_deserialize_CLIENT_Representation+0x66>
 801309a:	f104 011c 	add.w	r1, r4, #28
 801309e:	4628      	mov	r0, r5
 80130a0:	f7fc fba8 	bl	800f7f4 <ucdr_deserialize_uint16_t>
 80130a4:	4038      	ands	r0, r7
 80130a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130aa:	f104 0110 	add.w	r1, r4, #16
 80130ae:	4628      	mov	r0, r5
 80130b0:	f7fc fdba 	bl	800fc28 <ucdr_deserialize_uint32_t>
 80130b4:	6923      	ldr	r3, [r4, #16]
 80130b6:	2b01      	cmp	r3, #1
 80130b8:	d903      	bls.n	80130c2 <uxr_deserialize_CLIENT_Representation+0x7e>
 80130ba:	2301      	movs	r3, #1
 80130bc:	75ab      	strb	r3, [r5, #22]
 80130be:	2700      	movs	r7, #0
 80130c0:	e7eb      	b.n	801309a <uxr_deserialize_CLIENT_Representation+0x56>
 80130c2:	b30b      	cbz	r3, 8013108 <uxr_deserialize_CLIENT_Representation+0xc4>
 80130c4:	2800      	cmp	r0, #0
 80130c6:	d0fa      	beq.n	80130be <uxr_deserialize_CLIENT_Representation+0x7a>
 80130c8:	46a0      	mov	r8, r4
 80130ca:	f04f 0900 	mov.w	r9, #0
 80130ce:	e001      	b.n	80130d4 <uxr_deserialize_CLIENT_Representation+0x90>
 80130d0:	2e00      	cmp	r6, #0
 80130d2:	d0f4      	beq.n	80130be <uxr_deserialize_CLIENT_Representation+0x7a>
 80130d4:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80130d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80130dc:	4628      	mov	r0, r5
 80130de:	f005 fa41 	bl	8018564 <ucdr_deserialize_string>
 80130e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80130e6:	4606      	mov	r6, r0
 80130e8:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80130ec:	4628      	mov	r0, r5
 80130ee:	f005 fa39 	bl	8018564 <ucdr_deserialize_string>
 80130f2:	6923      	ldr	r3, [r4, #16]
 80130f4:	f109 0901 	add.w	r9, r9, #1
 80130f8:	4006      	ands	r6, r0
 80130fa:	4599      	cmp	r9, r3
 80130fc:	f108 0808 	add.w	r8, r8, #8
 8013100:	b2f6      	uxtb	r6, r6
 8013102:	d3e5      	bcc.n	80130d0 <uxr_deserialize_CLIENT_Representation+0x8c>
 8013104:	4037      	ands	r7, r6
 8013106:	e7c8      	b.n	801309a <uxr_deserialize_CLIENT_Representation+0x56>
 8013108:	4007      	ands	r7, r0
 801310a:	e7c6      	b.n	801309a <uxr_deserialize_CLIENT_Representation+0x56>

0801310c <uxr_serialize_AGENT_Representation>:
 801310c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013110:	2204      	movs	r2, #4
 8013112:	460f      	mov	r7, r1
 8013114:	4605      	mov	r5, r0
 8013116:	f005 f8f5 	bl	8018304 <ucdr_serialize_array_uint8_t>
 801311a:	2202      	movs	r2, #2
 801311c:	4604      	mov	r4, r0
 801311e:	1d39      	adds	r1, r7, #4
 8013120:	4628      	mov	r0, r5
 8013122:	f005 f8ef 	bl	8018304 <ucdr_serialize_array_uint8_t>
 8013126:	4020      	ands	r0, r4
 8013128:	2202      	movs	r2, #2
 801312a:	1db9      	adds	r1, r7, #6
 801312c:	b2c4      	uxtb	r4, r0
 801312e:	4628      	mov	r0, r5
 8013130:	f005 f8e8 	bl	8018304 <ucdr_serialize_array_uint8_t>
 8013134:	7a39      	ldrb	r1, [r7, #8]
 8013136:	4004      	ands	r4, r0
 8013138:	4628      	mov	r0, r5
 801313a:	f7fc fa01 	bl	800f540 <ucdr_serialize_bool>
 801313e:	7a3b      	ldrb	r3, [r7, #8]
 8013140:	ea00 0804 	and.w	r8, r0, r4
 8013144:	b913      	cbnz	r3, 801314c <uxr_serialize_AGENT_Representation+0x40>
 8013146:	4640      	mov	r0, r8
 8013148:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801314c:	68f9      	ldr	r1, [r7, #12]
 801314e:	4628      	mov	r0, r5
 8013150:	f7fc fc3a 	bl	800f9c8 <ucdr_serialize_uint32_t>
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	b303      	cbz	r3, 801319a <uxr_serialize_AGENT_Representation+0x8e>
 8013158:	b1d0      	cbz	r0, 8013190 <uxr_serialize_AGENT_Representation+0x84>
 801315a:	463e      	mov	r6, r7
 801315c:	f04f 0900 	mov.w	r9, #0
 8013160:	e001      	b.n	8013166 <uxr_serialize_AGENT_Representation+0x5a>
 8013162:	3608      	adds	r6, #8
 8013164:	b1a4      	cbz	r4, 8013190 <uxr_serialize_AGENT_Representation+0x84>
 8013166:	6931      	ldr	r1, [r6, #16]
 8013168:	4628      	mov	r0, r5
 801316a:	f005 f9eb 	bl	8018544 <ucdr_serialize_string>
 801316e:	6971      	ldr	r1, [r6, #20]
 8013170:	4604      	mov	r4, r0
 8013172:	4628      	mov	r0, r5
 8013174:	f005 f9e6 	bl	8018544 <ucdr_serialize_string>
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	f109 0901 	add.w	r9, r9, #1
 801317e:	4004      	ands	r4, r0
 8013180:	4599      	cmp	r9, r3
 8013182:	b2e4      	uxtb	r4, r4
 8013184:	d3ed      	bcc.n	8013162 <uxr_serialize_AGENT_Representation+0x56>
 8013186:	ea08 0804 	and.w	r8, r8, r4
 801318a:	4640      	mov	r0, r8
 801318c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013190:	f04f 0800 	mov.w	r8, #0
 8013194:	4640      	mov	r0, r8
 8013196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801319a:	ea08 0800 	and.w	r8, r8, r0
 801319e:	e7d2      	b.n	8013146 <uxr_serialize_AGENT_Representation+0x3a>

080131a0 <uxr_serialize_DATAWRITER_Representation>:
 80131a0:	b570      	push	{r4, r5, r6, lr}
 80131a2:	460d      	mov	r5, r1
 80131a4:	7809      	ldrb	r1, [r1, #0]
 80131a6:	4606      	mov	r6, r0
 80131a8:	f7fc f9f8 	bl	800f59c <ucdr_serialize_uint8_t>
 80131ac:	4604      	mov	r4, r0
 80131ae:	b130      	cbz	r0, 80131be <uxr_serialize_DATAWRITER_Representation+0x1e>
 80131b0:	782b      	ldrb	r3, [r5, #0]
 80131b2:	2b02      	cmp	r3, #2
 80131b4:	d00c      	beq.n	80131d0 <uxr_serialize_DATAWRITER_Representation+0x30>
 80131b6:	2b03      	cmp	r3, #3
 80131b8:	d010      	beq.n	80131dc <uxr_serialize_DATAWRITER_Representation+0x3c>
 80131ba:	2b01      	cmp	r3, #1
 80131bc:	d008      	beq.n	80131d0 <uxr_serialize_DATAWRITER_Representation+0x30>
 80131be:	2202      	movs	r2, #2
 80131c0:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80131c4:	4630      	mov	r0, r6
 80131c6:	f005 f89d 	bl	8018304 <ucdr_serialize_array_uint8_t>
 80131ca:	4020      	ands	r0, r4
 80131cc:	b2c0      	uxtb	r0, r0
 80131ce:	bd70      	pop	{r4, r5, r6, pc}
 80131d0:	6869      	ldr	r1, [r5, #4]
 80131d2:	4630      	mov	r0, r6
 80131d4:	f005 f9b6 	bl	8018544 <ucdr_serialize_string>
 80131d8:	4604      	mov	r4, r0
 80131da:	e7f0      	b.n	80131be <uxr_serialize_DATAWRITER_Representation+0x1e>
 80131dc:	4629      	mov	r1, r5
 80131de:	4630      	mov	r0, r6
 80131e0:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80131e4:	3104      	adds	r1, #4
 80131e6:	f005 f981 	bl	80184ec <ucdr_serialize_sequence_uint8_t>
 80131ea:	4604      	mov	r4, r0
 80131ec:	e7e7      	b.n	80131be <uxr_serialize_DATAWRITER_Representation+0x1e>
 80131ee:	bf00      	nop

080131f0 <uxr_serialize_ObjectVariant.part.0>:
 80131f0:	b570      	push	{r4, r5, r6, lr}
 80131f2:	780b      	ldrb	r3, [r1, #0]
 80131f4:	3b01      	subs	r3, #1
 80131f6:	460c      	mov	r4, r1
 80131f8:	4605      	mov	r5, r0
 80131fa:	2b0d      	cmp	r3, #13
 80131fc:	d854      	bhi.n	80132a8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80131fe:	e8df f003 	tbb	[pc, r3]
 8013202:	0730      	.short	0x0730
 8013204:	07071b1b 	.word	0x07071b1b
 8013208:	0c530707 	.word	0x0c530707
 801320c:	494e0c0c 	.word	0x494e0c0c
 8013210:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013214:	3104      	adds	r1, #4
 8013216:	f7ff bfc3 	b.w	80131a0 <uxr_serialize_DATAWRITER_Representation>
 801321a:	7909      	ldrb	r1, [r1, #4]
 801321c:	f7fc f9be 	bl	800f59c <ucdr_serialize_uint8_t>
 8013220:	b1e8      	cbz	r0, 801325e <uxr_serialize_ObjectVariant.part.0+0x6e>
 8013222:	7923      	ldrb	r3, [r4, #4]
 8013224:	2b01      	cmp	r3, #1
 8013226:	d001      	beq.n	801322c <uxr_serialize_ObjectVariant.part.0+0x3c>
 8013228:	2b02      	cmp	r3, #2
 801322a:	d13d      	bne.n	80132a8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801322c:	68a1      	ldr	r1, [r4, #8]
 801322e:	4628      	mov	r0, r5
 8013230:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013234:	f005 b986 	b.w	8018544 <ucdr_serialize_string>
 8013238:	7909      	ldrb	r1, [r1, #4]
 801323a:	f7fc f9af 	bl	800f59c <ucdr_serialize_uint8_t>
 801323e:	4606      	mov	r6, r0
 8013240:	b120      	cbz	r0, 801324c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8013242:	7923      	ldrb	r3, [r4, #4]
 8013244:	2b02      	cmp	r3, #2
 8013246:	d039      	beq.n	80132bc <uxr_serialize_ObjectVariant.part.0+0xcc>
 8013248:	2b03      	cmp	r3, #3
 801324a:	d02f      	beq.n	80132ac <uxr_serialize_ObjectVariant.part.0+0xbc>
 801324c:	2202      	movs	r2, #2
 801324e:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8013252:	4628      	mov	r0, r5
 8013254:	f005 f856 	bl	8018304 <ucdr_serialize_array_uint8_t>
 8013258:	4030      	ands	r0, r6
 801325a:	b2c0      	uxtb	r0, r0
 801325c:	bd70      	pop	{r4, r5, r6, pc}
 801325e:	2000      	movs	r0, #0
 8013260:	bd70      	pop	{r4, r5, r6, pc}
 8013262:	7909      	ldrb	r1, [r1, #4]
 8013264:	f7fc f99a 	bl	800f59c <ucdr_serialize_uint8_t>
 8013268:	4606      	mov	r6, r0
 801326a:	b158      	cbz	r0, 8013284 <uxr_serialize_ObjectVariant.part.0+0x94>
 801326c:	7923      	ldrb	r3, [r4, #4]
 801326e:	2b02      	cmp	r3, #2
 8013270:	d003      	beq.n	801327a <uxr_serialize_ObjectVariant.part.0+0x8a>
 8013272:	2b03      	cmp	r3, #3
 8013274:	d028      	beq.n	80132c8 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8013276:	2b01      	cmp	r3, #1
 8013278:	d104      	bne.n	8013284 <uxr_serialize_ObjectVariant.part.0+0x94>
 801327a:	68a1      	ldr	r1, [r4, #8]
 801327c:	4628      	mov	r0, r5
 801327e:	f005 f961 	bl	8018544 <ucdr_serialize_string>
 8013282:	4606      	mov	r6, r0
 8013284:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8013288:	4628      	mov	r0, r5
 801328a:	f7fc fec3 	bl	8010014 <ucdr_serialize_int16_t>
 801328e:	4030      	ands	r0, r6
 8013290:	b2c0      	uxtb	r0, r0
 8013292:	bd70      	pop	{r4, r5, r6, pc}
 8013294:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013298:	3104      	adds	r1, #4
 801329a:	f7ff be7b 	b.w	8012f94 <uxr_serialize_CLIENT_Representation>
 801329e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80132a2:	3104      	adds	r1, #4
 80132a4:	f7ff bf32 	b.w	801310c <uxr_serialize_AGENT_Representation>
 80132a8:	2001      	movs	r0, #1
 80132aa:	bd70      	pop	{r4, r5, r6, pc}
 80132ac:	68a2      	ldr	r2, [r4, #8]
 80132ae:	f104 010c 	add.w	r1, r4, #12
 80132b2:	4628      	mov	r0, r5
 80132b4:	f005 f91a 	bl	80184ec <ucdr_serialize_sequence_uint8_t>
 80132b8:	4606      	mov	r6, r0
 80132ba:	e7c7      	b.n	801324c <uxr_serialize_ObjectVariant.part.0+0x5c>
 80132bc:	68a1      	ldr	r1, [r4, #8]
 80132be:	4628      	mov	r0, r5
 80132c0:	f005 f940 	bl	8018544 <ucdr_serialize_string>
 80132c4:	4606      	mov	r6, r0
 80132c6:	e7c1      	b.n	801324c <uxr_serialize_ObjectVariant.part.0+0x5c>
 80132c8:	68a2      	ldr	r2, [r4, #8]
 80132ca:	f104 010c 	add.w	r1, r4, #12
 80132ce:	4628      	mov	r0, r5
 80132d0:	f005 f90c 	bl	80184ec <ucdr_serialize_sequence_uint8_t>
 80132d4:	4606      	mov	r6, r0
 80132d6:	e7d5      	b.n	8013284 <uxr_serialize_ObjectVariant.part.0+0x94>

080132d8 <uxr_deserialize_DATAWRITER_Representation>:
 80132d8:	b570      	push	{r4, r5, r6, lr}
 80132da:	4606      	mov	r6, r0
 80132dc:	460d      	mov	r5, r1
 80132de:	f7fc f973 	bl	800f5c8 <ucdr_deserialize_uint8_t>
 80132e2:	4604      	mov	r4, r0
 80132e4:	b130      	cbz	r0, 80132f4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80132e6:	782b      	ldrb	r3, [r5, #0]
 80132e8:	2b02      	cmp	r3, #2
 80132ea:	d00c      	beq.n	8013306 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80132ec:	2b03      	cmp	r3, #3
 80132ee:	d012      	beq.n	8013316 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80132f0:	2b01      	cmp	r3, #1
 80132f2:	d008      	beq.n	8013306 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80132f4:	2202      	movs	r2, #2
 80132f6:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80132fa:	4630      	mov	r0, r6
 80132fc:	f005 f866 	bl	80183cc <ucdr_deserialize_array_uint8_t>
 8013300:	4020      	ands	r0, r4
 8013302:	b2c0      	uxtb	r0, r0
 8013304:	bd70      	pop	{r4, r5, r6, pc}
 8013306:	6869      	ldr	r1, [r5, #4]
 8013308:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801330c:	4630      	mov	r0, r6
 801330e:	f005 f929 	bl	8018564 <ucdr_deserialize_string>
 8013312:	4604      	mov	r4, r0
 8013314:	e7ee      	b.n	80132f4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013316:	1d2b      	adds	r3, r5, #4
 8013318:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801331c:	f105 0108 	add.w	r1, r5, #8
 8013320:	4630      	mov	r0, r6
 8013322:	f005 f8f5 	bl	8018510 <ucdr_deserialize_sequence_uint8_t>
 8013326:	4604      	mov	r4, r0
 8013328:	e7e4      	b.n	80132f4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801332a:	bf00      	nop

0801332c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801332c:	b570      	push	{r4, r5, r6, lr}
 801332e:	460d      	mov	r5, r1
 8013330:	7809      	ldrb	r1, [r1, #0]
 8013332:	4606      	mov	r6, r0
 8013334:	f7fc f904 	bl	800f540 <ucdr_serialize_bool>
 8013338:	782b      	ldrb	r3, [r5, #0]
 801333a:	4604      	mov	r4, r0
 801333c:	b94b      	cbnz	r3, 8013352 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801333e:	7a29      	ldrb	r1, [r5, #8]
 8013340:	4630      	mov	r0, r6
 8013342:	f7fc f8fd 	bl	800f540 <ucdr_serialize_bool>
 8013346:	7a2b      	ldrb	r3, [r5, #8]
 8013348:	4004      	ands	r4, r0
 801334a:	b2e4      	uxtb	r4, r4
 801334c:	b943      	cbnz	r3, 8013360 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801334e:	4620      	mov	r0, r4
 8013350:	bd70      	pop	{r4, r5, r6, pc}
 8013352:	6869      	ldr	r1, [r5, #4]
 8013354:	4630      	mov	r0, r6
 8013356:	f005 f8f5 	bl	8018544 <ucdr_serialize_string>
 801335a:	4004      	ands	r4, r0
 801335c:	b2e4      	uxtb	r4, r4
 801335e:	e7ee      	b.n	801333e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8013360:	68e9      	ldr	r1, [r5, #12]
 8013362:	4630      	mov	r0, r6
 8013364:	f005 f8ee 	bl	8018544 <ucdr_serialize_string>
 8013368:	4004      	ands	r4, r0
 801336a:	4620      	mov	r0, r4
 801336c:	bd70      	pop	{r4, r5, r6, pc}
 801336e:	bf00      	nop

08013370 <uxr_serialize_OBJK_Topic_Binary>:
 8013370:	b570      	push	{r4, r5, r6, lr}
 8013372:	460d      	mov	r5, r1
 8013374:	6809      	ldr	r1, [r1, #0]
 8013376:	4606      	mov	r6, r0
 8013378:	f005 f8e4 	bl	8018544 <ucdr_serialize_string>
 801337c:	7929      	ldrb	r1, [r5, #4]
 801337e:	4604      	mov	r4, r0
 8013380:	4630      	mov	r0, r6
 8013382:	f7fc f8dd 	bl	800f540 <ucdr_serialize_bool>
 8013386:	792b      	ldrb	r3, [r5, #4]
 8013388:	4004      	ands	r4, r0
 801338a:	b2e4      	uxtb	r4, r4
 801338c:	b943      	cbnz	r3, 80133a0 <uxr_serialize_OBJK_Topic_Binary+0x30>
 801338e:	7b29      	ldrb	r1, [r5, #12]
 8013390:	4630      	mov	r0, r6
 8013392:	f7fc f8d5 	bl	800f540 <ucdr_serialize_bool>
 8013396:	7b2b      	ldrb	r3, [r5, #12]
 8013398:	4004      	ands	r4, r0
 801339a:	b93b      	cbnz	r3, 80133ac <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801339c:	4620      	mov	r0, r4
 801339e:	bd70      	pop	{r4, r5, r6, pc}
 80133a0:	68a9      	ldr	r1, [r5, #8]
 80133a2:	4630      	mov	r0, r6
 80133a4:	f005 f8ce 	bl	8018544 <ucdr_serialize_string>
 80133a8:	4004      	ands	r4, r0
 80133aa:	e7f0      	b.n	801338e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80133ac:	6929      	ldr	r1, [r5, #16]
 80133ae:	4630      	mov	r0, r6
 80133b0:	f005 f8c8 	bl	8018544 <ucdr_serialize_string>
 80133b4:	4004      	ands	r4, r0
 80133b6:	b2e4      	uxtb	r4, r4
 80133b8:	4620      	mov	r0, r4
 80133ba:	bd70      	pop	{r4, r5, r6, pc}

080133bc <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80133bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133c0:	460c      	mov	r4, r1
 80133c2:	7809      	ldrb	r1, [r1, #0]
 80133c4:	4606      	mov	r6, r0
 80133c6:	f7fc f8bb 	bl	800f540 <ucdr_serialize_bool>
 80133ca:	7823      	ldrb	r3, [r4, #0]
 80133cc:	4605      	mov	r5, r0
 80133ce:	b96b      	cbnz	r3, 80133ec <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80133d0:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80133d4:	4630      	mov	r0, r6
 80133d6:	f7fc f8b3 	bl	800f540 <ucdr_serialize_bool>
 80133da:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80133de:	4005      	ands	r5, r0
 80133e0:	b2ed      	uxtb	r5, r5
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d169      	bne.n	80134ba <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 80133e6:	4628      	mov	r0, r5
 80133e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133ec:	6861      	ldr	r1, [r4, #4]
 80133ee:	4630      	mov	r0, r6
 80133f0:	f7fc faea 	bl	800f9c8 <ucdr_serialize_uint32_t>
 80133f4:	6863      	ldr	r3, [r4, #4]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d06b      	beq.n	80134d2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 80133fa:	2800      	cmp	r0, #0
 80133fc:	d067      	beq.n	80134ce <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80133fe:	68a1      	ldr	r1, [r4, #8]
 8013400:	4630      	mov	r0, r6
 8013402:	f005 f89f 	bl	8018544 <ucdr_serialize_string>
 8013406:	6863      	ldr	r3, [r4, #4]
 8013408:	2b01      	cmp	r3, #1
 801340a:	d953      	bls.n	80134b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801340c:	2800      	cmp	r0, #0
 801340e:	d05e      	beq.n	80134ce <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013410:	68e1      	ldr	r1, [r4, #12]
 8013412:	4630      	mov	r0, r6
 8013414:	f005 f896 	bl	8018544 <ucdr_serialize_string>
 8013418:	6863      	ldr	r3, [r4, #4]
 801341a:	2b02      	cmp	r3, #2
 801341c:	d94a      	bls.n	80134b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801341e:	2800      	cmp	r0, #0
 8013420:	d055      	beq.n	80134ce <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013422:	6921      	ldr	r1, [r4, #16]
 8013424:	4630      	mov	r0, r6
 8013426:	f005 f88d 	bl	8018544 <ucdr_serialize_string>
 801342a:	6863      	ldr	r3, [r4, #4]
 801342c:	2b03      	cmp	r3, #3
 801342e:	d941      	bls.n	80134b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013430:	2800      	cmp	r0, #0
 8013432:	d04c      	beq.n	80134ce <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013434:	6961      	ldr	r1, [r4, #20]
 8013436:	4630      	mov	r0, r6
 8013438:	f005 f884 	bl	8018544 <ucdr_serialize_string>
 801343c:	6863      	ldr	r3, [r4, #4]
 801343e:	2b04      	cmp	r3, #4
 8013440:	d938      	bls.n	80134b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013442:	2800      	cmp	r0, #0
 8013444:	d043      	beq.n	80134ce <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013446:	69a1      	ldr	r1, [r4, #24]
 8013448:	4630      	mov	r0, r6
 801344a:	f005 f87b 	bl	8018544 <ucdr_serialize_string>
 801344e:	6863      	ldr	r3, [r4, #4]
 8013450:	2b05      	cmp	r3, #5
 8013452:	d92f      	bls.n	80134b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013454:	2800      	cmp	r0, #0
 8013456:	d03a      	beq.n	80134ce <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013458:	69e1      	ldr	r1, [r4, #28]
 801345a:	4630      	mov	r0, r6
 801345c:	f005 f872 	bl	8018544 <ucdr_serialize_string>
 8013460:	6863      	ldr	r3, [r4, #4]
 8013462:	2b06      	cmp	r3, #6
 8013464:	d926      	bls.n	80134b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013466:	b390      	cbz	r0, 80134ce <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013468:	6a21      	ldr	r1, [r4, #32]
 801346a:	4630      	mov	r0, r6
 801346c:	f005 f86a 	bl	8018544 <ucdr_serialize_string>
 8013470:	6863      	ldr	r3, [r4, #4]
 8013472:	2b07      	cmp	r3, #7
 8013474:	d91e      	bls.n	80134b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013476:	b350      	cbz	r0, 80134ce <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013478:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801347a:	4630      	mov	r0, r6
 801347c:	f005 f862 	bl	8018544 <ucdr_serialize_string>
 8013480:	6863      	ldr	r3, [r4, #4]
 8013482:	2b08      	cmp	r3, #8
 8013484:	d916      	bls.n	80134b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013486:	b310      	cbz	r0, 80134ce <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013488:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801348a:	4630      	mov	r0, r6
 801348c:	f005 f85a 	bl	8018544 <ucdr_serialize_string>
 8013490:	6863      	ldr	r3, [r4, #4]
 8013492:	2b09      	cmp	r3, #9
 8013494:	d90e      	bls.n	80134b4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013496:	b1d0      	cbz	r0, 80134ce <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013498:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 801349c:	2709      	movs	r7, #9
 801349e:	e000      	b.n	80134a2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80134a0:	b1a8      	cbz	r0, 80134ce <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80134a2:	f858 1b04 	ldr.w	r1, [r8], #4
 80134a6:	4630      	mov	r0, r6
 80134a8:	f005 f84c 	bl	8018544 <ucdr_serialize_string>
 80134ac:	6862      	ldr	r2, [r4, #4]
 80134ae:	3701      	adds	r7, #1
 80134b0:	4297      	cmp	r7, r2
 80134b2:	d3f5      	bcc.n	80134a0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80134b4:	4005      	ands	r5, r0
 80134b6:	b2ed      	uxtb	r5, r5
 80134b8:	e78a      	b.n	80133d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80134ba:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80134bc:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80134c0:	4630      	mov	r0, r6
 80134c2:	f005 f813 	bl	80184ec <ucdr_serialize_sequence_uint8_t>
 80134c6:	4005      	ands	r5, r0
 80134c8:	4628      	mov	r0, r5
 80134ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134ce:	2500      	movs	r5, #0
 80134d0:	e77e      	b.n	80133d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80134d2:	4028      	ands	r0, r5
 80134d4:	b2c5      	uxtb	r5, r0
 80134d6:	e77b      	b.n	80133d0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

080134d8 <uxr_serialize_OBJK_Publisher_Binary>:
 80134d8:	b570      	push	{r4, r5, r6, lr}
 80134da:	460d      	mov	r5, r1
 80134dc:	7809      	ldrb	r1, [r1, #0]
 80134de:	4606      	mov	r6, r0
 80134e0:	f7fc f82e 	bl	800f540 <ucdr_serialize_bool>
 80134e4:	782b      	ldrb	r3, [r5, #0]
 80134e6:	4604      	mov	r4, r0
 80134e8:	b94b      	cbnz	r3, 80134fe <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80134ea:	7a29      	ldrb	r1, [r5, #8]
 80134ec:	4630      	mov	r0, r6
 80134ee:	f7fc f827 	bl	800f540 <ucdr_serialize_bool>
 80134f2:	7a2b      	ldrb	r3, [r5, #8]
 80134f4:	4004      	ands	r4, r0
 80134f6:	b2e4      	uxtb	r4, r4
 80134f8:	b943      	cbnz	r3, 801350c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80134fa:	4620      	mov	r0, r4
 80134fc:	bd70      	pop	{r4, r5, r6, pc}
 80134fe:	6869      	ldr	r1, [r5, #4]
 8013500:	4630      	mov	r0, r6
 8013502:	f005 f81f 	bl	8018544 <ucdr_serialize_string>
 8013506:	4004      	ands	r4, r0
 8013508:	b2e4      	uxtb	r4, r4
 801350a:	e7ee      	b.n	80134ea <uxr_serialize_OBJK_Publisher_Binary+0x12>
 801350c:	f105 010c 	add.w	r1, r5, #12
 8013510:	4630      	mov	r0, r6
 8013512:	f7ff ff53 	bl	80133bc <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8013516:	4004      	ands	r4, r0
 8013518:	4620      	mov	r0, r4
 801351a:	bd70      	pop	{r4, r5, r6, pc}

0801351c <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 801351c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013520:	460c      	mov	r4, r1
 8013522:	7809      	ldrb	r1, [r1, #0]
 8013524:	4606      	mov	r6, r0
 8013526:	f7fc f80b 	bl	800f540 <ucdr_serialize_bool>
 801352a:	7823      	ldrb	r3, [r4, #0]
 801352c:	4605      	mov	r5, r0
 801352e:	b96b      	cbnz	r3, 801354c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8013530:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8013534:	4630      	mov	r0, r6
 8013536:	f7fc f803 	bl	800f540 <ucdr_serialize_bool>
 801353a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801353e:	4005      	ands	r5, r0
 8013540:	b2ed      	uxtb	r5, r5
 8013542:	2b00      	cmp	r3, #0
 8013544:	d169      	bne.n	801361a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8013546:	4628      	mov	r0, r5
 8013548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801354c:	6861      	ldr	r1, [r4, #4]
 801354e:	4630      	mov	r0, r6
 8013550:	f7fc fa3a 	bl	800f9c8 <ucdr_serialize_uint32_t>
 8013554:	6863      	ldr	r3, [r4, #4]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d06b      	beq.n	8013632 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801355a:	2800      	cmp	r0, #0
 801355c:	d067      	beq.n	801362e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801355e:	68a1      	ldr	r1, [r4, #8]
 8013560:	4630      	mov	r0, r6
 8013562:	f004 ffef 	bl	8018544 <ucdr_serialize_string>
 8013566:	6863      	ldr	r3, [r4, #4]
 8013568:	2b01      	cmp	r3, #1
 801356a:	d953      	bls.n	8013614 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801356c:	2800      	cmp	r0, #0
 801356e:	d05e      	beq.n	801362e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013570:	68e1      	ldr	r1, [r4, #12]
 8013572:	4630      	mov	r0, r6
 8013574:	f004 ffe6 	bl	8018544 <ucdr_serialize_string>
 8013578:	6863      	ldr	r3, [r4, #4]
 801357a:	2b02      	cmp	r3, #2
 801357c:	d94a      	bls.n	8013614 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801357e:	2800      	cmp	r0, #0
 8013580:	d055      	beq.n	801362e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013582:	6921      	ldr	r1, [r4, #16]
 8013584:	4630      	mov	r0, r6
 8013586:	f004 ffdd 	bl	8018544 <ucdr_serialize_string>
 801358a:	6863      	ldr	r3, [r4, #4]
 801358c:	2b03      	cmp	r3, #3
 801358e:	d941      	bls.n	8013614 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013590:	2800      	cmp	r0, #0
 8013592:	d04c      	beq.n	801362e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013594:	6961      	ldr	r1, [r4, #20]
 8013596:	4630      	mov	r0, r6
 8013598:	f004 ffd4 	bl	8018544 <ucdr_serialize_string>
 801359c:	6863      	ldr	r3, [r4, #4]
 801359e:	2b04      	cmp	r3, #4
 80135a0:	d938      	bls.n	8013614 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80135a2:	2800      	cmp	r0, #0
 80135a4:	d043      	beq.n	801362e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80135a6:	69a1      	ldr	r1, [r4, #24]
 80135a8:	4630      	mov	r0, r6
 80135aa:	f004 ffcb 	bl	8018544 <ucdr_serialize_string>
 80135ae:	6863      	ldr	r3, [r4, #4]
 80135b0:	2b05      	cmp	r3, #5
 80135b2:	d92f      	bls.n	8013614 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80135b4:	2800      	cmp	r0, #0
 80135b6:	d03a      	beq.n	801362e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80135b8:	69e1      	ldr	r1, [r4, #28]
 80135ba:	4630      	mov	r0, r6
 80135bc:	f004 ffc2 	bl	8018544 <ucdr_serialize_string>
 80135c0:	6863      	ldr	r3, [r4, #4]
 80135c2:	2b06      	cmp	r3, #6
 80135c4:	d926      	bls.n	8013614 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80135c6:	b390      	cbz	r0, 801362e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80135c8:	6a21      	ldr	r1, [r4, #32]
 80135ca:	4630      	mov	r0, r6
 80135cc:	f004 ffba 	bl	8018544 <ucdr_serialize_string>
 80135d0:	6863      	ldr	r3, [r4, #4]
 80135d2:	2b07      	cmp	r3, #7
 80135d4:	d91e      	bls.n	8013614 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80135d6:	b350      	cbz	r0, 801362e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80135d8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80135da:	4630      	mov	r0, r6
 80135dc:	f004 ffb2 	bl	8018544 <ucdr_serialize_string>
 80135e0:	6863      	ldr	r3, [r4, #4]
 80135e2:	2b08      	cmp	r3, #8
 80135e4:	d916      	bls.n	8013614 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80135e6:	b310      	cbz	r0, 801362e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80135e8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80135ea:	4630      	mov	r0, r6
 80135ec:	f004 ffaa 	bl	8018544 <ucdr_serialize_string>
 80135f0:	6863      	ldr	r3, [r4, #4]
 80135f2:	2b09      	cmp	r3, #9
 80135f4:	d90e      	bls.n	8013614 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80135f6:	b1d0      	cbz	r0, 801362e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80135f8:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80135fc:	2709      	movs	r7, #9
 80135fe:	e000      	b.n	8013602 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8013600:	b1a8      	cbz	r0, 801362e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013602:	f858 1b04 	ldr.w	r1, [r8], #4
 8013606:	4630      	mov	r0, r6
 8013608:	f004 ff9c 	bl	8018544 <ucdr_serialize_string>
 801360c:	6862      	ldr	r2, [r4, #4]
 801360e:	3701      	adds	r7, #1
 8013610:	4297      	cmp	r7, r2
 8013612:	d3f5      	bcc.n	8013600 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8013614:	4005      	ands	r5, r0
 8013616:	b2ed      	uxtb	r5, r5
 8013618:	e78a      	b.n	8013530 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801361a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801361c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8013620:	4630      	mov	r0, r6
 8013622:	f004 ff63 	bl	80184ec <ucdr_serialize_sequence_uint8_t>
 8013626:	4005      	ands	r5, r0
 8013628:	4628      	mov	r0, r5
 801362a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801362e:	2500      	movs	r5, #0
 8013630:	e77e      	b.n	8013530 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8013632:	4028      	ands	r0, r5
 8013634:	b2c5      	uxtb	r5, r0
 8013636:	e77b      	b.n	8013530 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08013638 <uxr_serialize_OBJK_Subscriber_Binary>:
 8013638:	b570      	push	{r4, r5, r6, lr}
 801363a:	460d      	mov	r5, r1
 801363c:	7809      	ldrb	r1, [r1, #0]
 801363e:	4606      	mov	r6, r0
 8013640:	f7fb ff7e 	bl	800f540 <ucdr_serialize_bool>
 8013644:	782b      	ldrb	r3, [r5, #0]
 8013646:	4604      	mov	r4, r0
 8013648:	b94b      	cbnz	r3, 801365e <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801364a:	7a29      	ldrb	r1, [r5, #8]
 801364c:	4630      	mov	r0, r6
 801364e:	f7fb ff77 	bl	800f540 <ucdr_serialize_bool>
 8013652:	7a2b      	ldrb	r3, [r5, #8]
 8013654:	4004      	ands	r4, r0
 8013656:	b2e4      	uxtb	r4, r4
 8013658:	b943      	cbnz	r3, 801366c <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801365a:	4620      	mov	r0, r4
 801365c:	bd70      	pop	{r4, r5, r6, pc}
 801365e:	6869      	ldr	r1, [r5, #4]
 8013660:	4630      	mov	r0, r6
 8013662:	f004 ff6f 	bl	8018544 <ucdr_serialize_string>
 8013666:	4004      	ands	r4, r0
 8013668:	b2e4      	uxtb	r4, r4
 801366a:	e7ee      	b.n	801364a <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801366c:	f105 010c 	add.w	r1, r5, #12
 8013670:	4630      	mov	r0, r6
 8013672:	f7ff ff53 	bl	801351c <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8013676:	4004      	ands	r4, r0
 8013678:	4620      	mov	r0, r4
 801367a:	bd70      	pop	{r4, r5, r6, pc}

0801367c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801367c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8013680:	4688      	mov	r8, r1
 8013682:	8809      	ldrh	r1, [r1, #0]
 8013684:	4681      	mov	r9, r0
 8013686:	f7fb ffb5 	bl	800f5f4 <ucdr_serialize_uint16_t>
 801368a:	f898 1002 	ldrb.w	r1, [r8, #2]
 801368e:	4606      	mov	r6, r0
 8013690:	4648      	mov	r0, r9
 8013692:	f7fb ff55 	bl	800f540 <ucdr_serialize_bool>
 8013696:	f898 3002 	ldrb.w	r3, [r8, #2]
 801369a:	4006      	ands	r6, r0
 801369c:	b2f5      	uxtb	r5, r6
 801369e:	b9eb      	cbnz	r3, 80136dc <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 80136a0:	f898 1006 	ldrb.w	r1, [r8, #6]
 80136a4:	4648      	mov	r0, r9
 80136a6:	f7fb ff4b 	bl	800f540 <ucdr_serialize_bool>
 80136aa:	f898 3006 	ldrb.w	r3, [r8, #6]
 80136ae:	4005      	ands	r5, r0
 80136b0:	bb7b      	cbnz	r3, 8013712 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80136b2:	f898 100c 	ldrb.w	r1, [r8, #12]
 80136b6:	4648      	mov	r0, r9
 80136b8:	f7fb ff42 	bl	800f540 <ucdr_serialize_bool>
 80136bc:	f898 300c 	ldrb.w	r3, [r8, #12]
 80136c0:	4005      	ands	r5, r0
 80136c2:	b9f3      	cbnz	r3, 8013702 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80136c4:	f898 1014 	ldrb.w	r1, [r8, #20]
 80136c8:	4648      	mov	r0, r9
 80136ca:	f7fb ff39 	bl	800f540 <ucdr_serialize_bool>
 80136ce:	f898 3014 	ldrb.w	r3, [r8, #20]
 80136d2:	4005      	ands	r5, r0
 80136d4:	b94b      	cbnz	r3, 80136ea <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80136d6:	4628      	mov	r0, r5
 80136d8:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80136dc:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80136e0:	4648      	mov	r0, r9
 80136e2:	f7fb ff87 	bl	800f5f4 <ucdr_serialize_uint16_t>
 80136e6:	4005      	ands	r5, r0
 80136e8:	e7da      	b.n	80136a0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80136ea:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80136ee:	f108 011c 	add.w	r1, r8, #28
 80136f2:	4648      	mov	r0, r9
 80136f4:	f004 fefa 	bl	80184ec <ucdr_serialize_sequence_uint8_t>
 80136f8:	4028      	ands	r0, r5
 80136fa:	b2c5      	uxtb	r5, r0
 80136fc:	4628      	mov	r0, r5
 80136fe:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8013702:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013706:	4648      	mov	r0, r9
 8013708:	f7fc f95e 	bl	800f9c8 <ucdr_serialize_uint32_t>
 801370c:	4028      	ands	r0, r5
 801370e:	b2c5      	uxtb	r5, r0
 8013710:	e7d8      	b.n	80136c4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8013712:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8013716:	4648      	mov	r0, r9
 8013718:	f7fc f956 	bl	800f9c8 <ucdr_serialize_uint32_t>
 801371c:	4028      	ands	r0, r5
 801371e:	b2c5      	uxtb	r5, r0
 8013720:	e7c7      	b.n	80136b2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8013722:	bf00      	nop

08013724 <uxr_serialize_OBJK_DataReader_Binary>:
 8013724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013726:	2202      	movs	r2, #2
 8013728:	460c      	mov	r4, r1
 801372a:	4606      	mov	r6, r0
 801372c:	f004 fdea 	bl	8018304 <ucdr_serialize_array_uint8_t>
 8013730:	78a1      	ldrb	r1, [r4, #2]
 8013732:	4605      	mov	r5, r0
 8013734:	4630      	mov	r0, r6
 8013736:	f7fb ff03 	bl	800f540 <ucdr_serialize_bool>
 801373a:	78a3      	ldrb	r3, [r4, #2]
 801373c:	4005      	ands	r5, r0
 801373e:	b2ed      	uxtb	r5, r5
 8013740:	b90b      	cbnz	r3, 8013746 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8013742:	4628      	mov	r0, r5
 8013744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013746:	f104 0108 	add.w	r1, r4, #8
 801374a:	4630      	mov	r0, r6
 801374c:	f7ff ff96 	bl	801367c <uxr_serialize_OBJK_Endpoint_QosBinary>
 8013750:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8013754:	4607      	mov	r7, r0
 8013756:	4630      	mov	r0, r6
 8013758:	f7fb fef2 	bl	800f540 <ucdr_serialize_bool>
 801375c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8013760:	4038      	ands	r0, r7
 8013762:	b2c7      	uxtb	r7, r0
 8013764:	b95b      	cbnz	r3, 801377e <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8013766:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 801376a:	4630      	mov	r0, r6
 801376c:	f7fb fee8 	bl	800f540 <ucdr_serialize_bool>
 8013770:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8013774:	4007      	ands	r7, r0
 8013776:	b94b      	cbnz	r3, 801378c <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8013778:	403d      	ands	r5, r7
 801377a:	4628      	mov	r0, r5
 801377c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801377e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8013782:	4630      	mov	r0, r6
 8013784:	f7fc fb76 	bl	800fe74 <ucdr_serialize_uint64_t>
 8013788:	4007      	ands	r7, r0
 801378a:	e7ec      	b.n	8013766 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801378c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801378e:	4630      	mov	r0, r6
 8013790:	f004 fed8 	bl	8018544 <ucdr_serialize_string>
 8013794:	4007      	ands	r7, r0
 8013796:	b2ff      	uxtb	r7, r7
 8013798:	e7ee      	b.n	8013778 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801379a:	bf00      	nop

0801379c <uxr_serialize_OBJK_DataWriter_Binary>:
 801379c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801379e:	2202      	movs	r2, #2
 80137a0:	460d      	mov	r5, r1
 80137a2:	4606      	mov	r6, r0
 80137a4:	f004 fdae 	bl	8018304 <ucdr_serialize_array_uint8_t>
 80137a8:	78a9      	ldrb	r1, [r5, #2]
 80137aa:	4604      	mov	r4, r0
 80137ac:	4630      	mov	r0, r6
 80137ae:	f7fb fec7 	bl	800f540 <ucdr_serialize_bool>
 80137b2:	78ab      	ldrb	r3, [r5, #2]
 80137b4:	4004      	ands	r4, r0
 80137b6:	b2e4      	uxtb	r4, r4
 80137b8:	b90b      	cbnz	r3, 80137be <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80137ba:	4620      	mov	r0, r4
 80137bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137be:	f105 0108 	add.w	r1, r5, #8
 80137c2:	4630      	mov	r0, r6
 80137c4:	f7ff ff5a 	bl	801367c <uxr_serialize_OBJK_Endpoint_QosBinary>
 80137c8:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 80137cc:	4607      	mov	r7, r0
 80137ce:	4630      	mov	r0, r6
 80137d0:	f7fb feb6 	bl	800f540 <ucdr_serialize_bool>
 80137d4:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 80137d8:	4038      	ands	r0, r7
 80137da:	b2c7      	uxtb	r7, r0
 80137dc:	b913      	cbnz	r3, 80137e4 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80137de:	403c      	ands	r4, r7
 80137e0:	4620      	mov	r0, r4
 80137e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137e4:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 80137e8:	4630      	mov	r0, r6
 80137ea:	f7fc fb43 	bl	800fe74 <ucdr_serialize_uint64_t>
 80137ee:	4007      	ands	r7, r0
 80137f0:	e7f5      	b.n	80137de <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80137f2:	bf00      	nop

080137f4 <uxr_deserialize_ObjectVariant>:
 80137f4:	b570      	push	{r4, r5, r6, lr}
 80137f6:	4605      	mov	r5, r0
 80137f8:	460e      	mov	r6, r1
 80137fa:	f7fb fee5 	bl	800f5c8 <ucdr_deserialize_uint8_t>
 80137fe:	b168      	cbz	r0, 801381c <uxr_deserialize_ObjectVariant+0x28>
 8013800:	7833      	ldrb	r3, [r6, #0]
 8013802:	3b01      	subs	r3, #1
 8013804:	4604      	mov	r4, r0
 8013806:	2b0d      	cmp	r3, #13
 8013808:	d809      	bhi.n	801381e <uxr_deserialize_ObjectVariant+0x2a>
 801380a:	e8df f003 	tbb	[pc, r3]
 801380e:	0a41      	.short	0x0a41
 8013810:	0a0a2323 	.word	0x0a0a2323
 8013814:	10080a0a 	.word	0x10080a0a
 8013818:	565c1010 	.word	0x565c1010
 801381c:	2400      	movs	r4, #0
 801381e:	4620      	mov	r0, r4
 8013820:	bd70      	pop	{r4, r5, r6, pc}
 8013822:	1d31      	adds	r1, r6, #4
 8013824:	4628      	mov	r0, r5
 8013826:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801382a:	f7ff bd55 	b.w	80132d8 <uxr_deserialize_DATAWRITER_Representation>
 801382e:	1d31      	adds	r1, r6, #4
 8013830:	4628      	mov	r0, r5
 8013832:	f7fb fec9 	bl	800f5c8 <ucdr_deserialize_uint8_t>
 8013836:	2800      	cmp	r0, #0
 8013838:	d0f0      	beq.n	801381c <uxr_deserialize_ObjectVariant+0x28>
 801383a:	7933      	ldrb	r3, [r6, #4]
 801383c:	2b01      	cmp	r3, #1
 801383e:	d001      	beq.n	8013844 <uxr_deserialize_ObjectVariant+0x50>
 8013840:	2b02      	cmp	r3, #2
 8013842:	d1ec      	bne.n	801381e <uxr_deserialize_ObjectVariant+0x2a>
 8013844:	68b1      	ldr	r1, [r6, #8]
 8013846:	4628      	mov	r0, r5
 8013848:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801384c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013850:	f004 be88 	b.w	8018564 <ucdr_deserialize_string>
 8013854:	1d31      	adds	r1, r6, #4
 8013856:	4628      	mov	r0, r5
 8013858:	f7fb feb6 	bl	800f5c8 <ucdr_deserialize_uint8_t>
 801385c:	4604      	mov	r4, r0
 801385e:	b170      	cbz	r0, 801387e <uxr_deserialize_ObjectVariant+0x8a>
 8013860:	7933      	ldrb	r3, [r6, #4]
 8013862:	2b02      	cmp	r3, #2
 8013864:	d04c      	beq.n	8013900 <uxr_deserialize_ObjectVariant+0x10c>
 8013866:	2b03      	cmp	r3, #3
 8013868:	d109      	bne.n	801387e <uxr_deserialize_ObjectVariant+0x8a>
 801386a:	f106 0308 	add.w	r3, r6, #8
 801386e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013872:	f106 010c 	add.w	r1, r6, #12
 8013876:	4628      	mov	r0, r5
 8013878:	f004 fe4a 	bl	8018510 <ucdr_deserialize_sequence_uint8_t>
 801387c:	4604      	mov	r4, r0
 801387e:	2202      	movs	r2, #2
 8013880:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8013884:	4628      	mov	r0, r5
 8013886:	f004 fda1 	bl	80183cc <ucdr_deserialize_array_uint8_t>
 801388a:	4020      	ands	r0, r4
 801388c:	b2c4      	uxtb	r4, r0
 801388e:	e7c6      	b.n	801381e <uxr_deserialize_ObjectVariant+0x2a>
 8013890:	1d31      	adds	r1, r6, #4
 8013892:	4628      	mov	r0, r5
 8013894:	f7fb fe98 	bl	800f5c8 <ucdr_deserialize_uint8_t>
 8013898:	4604      	mov	r4, r0
 801389a:	b130      	cbz	r0, 80138aa <uxr_deserialize_ObjectVariant+0xb6>
 801389c:	7933      	ldrb	r3, [r6, #4]
 801389e:	2b02      	cmp	r3, #2
 80138a0:	d036      	beq.n	8013910 <uxr_deserialize_ObjectVariant+0x11c>
 80138a2:	2b03      	cmp	r3, #3
 80138a4:	d03c      	beq.n	8013920 <uxr_deserialize_ObjectVariant+0x12c>
 80138a6:	2b01      	cmp	r3, #1
 80138a8:	d032      	beq.n	8013910 <uxr_deserialize_ObjectVariant+0x11c>
 80138aa:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80138ae:	4628      	mov	r0, r5
 80138b0:	f7fc fc30 	bl	8010114 <ucdr_deserialize_int16_t>
 80138b4:	4020      	ands	r0, r4
 80138b6:	b2c4      	uxtb	r4, r0
 80138b8:	e7b1      	b.n	801381e <uxr_deserialize_ObjectVariant+0x2a>
 80138ba:	1d31      	adds	r1, r6, #4
 80138bc:	4628      	mov	r0, r5
 80138be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80138c2:	f7ff bbbf 	b.w	8013044 <uxr_deserialize_CLIENT_Representation>
 80138c6:	2204      	movs	r2, #4
 80138c8:	18b1      	adds	r1, r6, r2
 80138ca:	4628      	mov	r0, r5
 80138cc:	f004 fd7e 	bl	80183cc <ucdr_deserialize_array_uint8_t>
 80138d0:	2202      	movs	r2, #2
 80138d2:	f106 0108 	add.w	r1, r6, #8
 80138d6:	4604      	mov	r4, r0
 80138d8:	4628      	mov	r0, r5
 80138da:	f004 fd77 	bl	80183cc <ucdr_deserialize_array_uint8_t>
 80138de:	2202      	movs	r2, #2
 80138e0:	4004      	ands	r4, r0
 80138e2:	f106 010a 	add.w	r1, r6, #10
 80138e6:	4628      	mov	r0, r5
 80138e8:	f004 fd70 	bl	80183cc <ucdr_deserialize_array_uint8_t>
 80138ec:	b2e4      	uxtb	r4, r4
 80138ee:	4603      	mov	r3, r0
 80138f0:	f106 010c 	add.w	r1, r6, #12
 80138f4:	4628      	mov	r0, r5
 80138f6:	401c      	ands	r4, r3
 80138f8:	f7fb fe38 	bl	800f56c <ucdr_deserialize_bool>
 80138fc:	4004      	ands	r4, r0
 80138fe:	e78e      	b.n	801381e <uxr_deserialize_ObjectVariant+0x2a>
 8013900:	68b1      	ldr	r1, [r6, #8]
 8013902:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013906:	4628      	mov	r0, r5
 8013908:	f004 fe2c 	bl	8018564 <ucdr_deserialize_string>
 801390c:	4604      	mov	r4, r0
 801390e:	e7b6      	b.n	801387e <uxr_deserialize_ObjectVariant+0x8a>
 8013910:	68b1      	ldr	r1, [r6, #8]
 8013912:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013916:	4628      	mov	r0, r5
 8013918:	f004 fe24 	bl	8018564 <ucdr_deserialize_string>
 801391c:	4604      	mov	r4, r0
 801391e:	e7c4      	b.n	80138aa <uxr_deserialize_ObjectVariant+0xb6>
 8013920:	f106 0308 	add.w	r3, r6, #8
 8013924:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013928:	f106 010c 	add.w	r1, r6, #12
 801392c:	4628      	mov	r0, r5
 801392e:	f004 fdef 	bl	8018510 <ucdr_deserialize_sequence_uint8_t>
 8013932:	4604      	mov	r4, r0
 8013934:	e7b9      	b.n	80138aa <uxr_deserialize_ObjectVariant+0xb6>
 8013936:	bf00      	nop

08013938 <uxr_deserialize_BaseObjectRequest>:
 8013938:	b570      	push	{r4, r5, r6, lr}
 801393a:	2202      	movs	r2, #2
 801393c:	4605      	mov	r5, r0
 801393e:	460e      	mov	r6, r1
 8013940:	f004 fd44 	bl	80183cc <ucdr_deserialize_array_uint8_t>
 8013944:	2202      	movs	r2, #2
 8013946:	4604      	mov	r4, r0
 8013948:	18b1      	adds	r1, r6, r2
 801394a:	4628      	mov	r0, r5
 801394c:	f004 fd3e 	bl	80183cc <ucdr_deserialize_array_uint8_t>
 8013950:	4020      	ands	r0, r4
 8013952:	b2c0      	uxtb	r0, r0
 8013954:	bd70      	pop	{r4, r5, r6, pc}
 8013956:	bf00      	nop

08013958 <uxr_serialize_ActivityInfoVariant>:
 8013958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801395c:	460d      	mov	r5, r1
 801395e:	7809      	ldrb	r1, [r1, #0]
 8013960:	4607      	mov	r7, r0
 8013962:	f7fb fe1b 	bl	800f59c <ucdr_serialize_uint8_t>
 8013966:	4681      	mov	r9, r0
 8013968:	b138      	cbz	r0, 801397a <uxr_serialize_ActivityInfoVariant+0x22>
 801396a:	782b      	ldrb	r3, [r5, #0]
 801396c:	2b06      	cmp	r3, #6
 801396e:	f000 8082 	beq.w	8013a76 <uxr_serialize_ActivityInfoVariant+0x11e>
 8013972:	2b0d      	cmp	r3, #13
 8013974:	d016      	beq.n	80139a4 <uxr_serialize_ActivityInfoVariant+0x4c>
 8013976:	2b05      	cmp	r3, #5
 8013978:	d002      	beq.n	8013980 <uxr_serialize_ActivityInfoVariant+0x28>
 801397a:	4648      	mov	r0, r9
 801397c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013980:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013984:	4638      	mov	r0, r7
 8013986:	f7fc fb45 	bl	8010014 <ucdr_serialize_int16_t>
 801398a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 801398e:	4681      	mov	r9, r0
 8013990:	4638      	mov	r0, r7
 8013992:	f7fc fa6f 	bl	800fe74 <ucdr_serialize_uint64_t>
 8013996:	ea09 0000 	and.w	r0, r9, r0
 801399a:	fa5f f980 	uxtb.w	r9, r0
 801399e:	4648      	mov	r0, r9
 80139a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139a4:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80139a8:	4638      	mov	r0, r7
 80139aa:	f7fc fb33 	bl	8010014 <ucdr_serialize_int16_t>
 80139ae:	68e9      	ldr	r1, [r5, #12]
 80139b0:	4681      	mov	r9, r0
 80139b2:	4638      	mov	r0, r7
 80139b4:	f7fc f808 	bl	800f9c8 <ucdr_serialize_uint32_t>
 80139b8:	68eb      	ldr	r3, [r5, #12]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d0eb      	beq.n	8013996 <uxr_serialize_ActivityInfoVariant+0x3e>
 80139be:	b320      	cbz	r0, 8013a0a <uxr_serialize_ActivityInfoVariant+0xb2>
 80139c0:	f105 080c 	add.w	r8, r5, #12
 80139c4:	2600      	movs	r6, #0
 80139c6:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 80139ca:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 80139ce:	f89a 1010 	ldrb.w	r1, [sl, #16]
 80139d2:	4638      	mov	r0, r7
 80139d4:	f7fb fde2 	bl	800f59c <ucdr_serialize_uint8_t>
 80139d8:	2800      	cmp	r0, #0
 80139da:	d053      	beq.n	8013a84 <uxr_serialize_ActivityInfoVariant+0x12c>
 80139dc:	f89a 3010 	ldrb.w	r3, [sl, #16]
 80139e0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80139e4:	0074      	lsls	r4, r6, #1
 80139e6:	00c9      	lsls	r1, r1, #3
 80139e8:	2b03      	cmp	r3, #3
 80139ea:	d854      	bhi.n	8013a96 <uxr_serialize_ActivityInfoVariant+0x13e>
 80139ec:	e8df f003 	tbb	[pc, r3]
 80139f0:	02102132 	.word	0x02102132
 80139f4:	4441      	add	r1, r8
 80139f6:	4638      	mov	r0, r7
 80139f8:	6889      	ldr	r1, [r1, #8]
 80139fa:	f004 fda3 	bl	8018544 <ucdr_serialize_string>
 80139fe:	68ea      	ldr	r2, [r5, #12]
 8013a00:	3601      	adds	r6, #1
 8013a02:	4296      	cmp	r6, r2
 8013a04:	d242      	bcs.n	8013a8c <uxr_serialize_ActivityInfoVariant+0x134>
 8013a06:	2800      	cmp	r0, #0
 8013a08:	d1dd      	bne.n	80139c6 <uxr_serialize_ActivityInfoVariant+0x6e>
 8013a0a:	f04f 0900 	mov.w	r9, #0
 8013a0e:	e7b4      	b.n	801397a <uxr_serialize_ActivityInfoVariant+0x22>
 8013a10:	3108      	adds	r1, #8
 8013a12:	4441      	add	r1, r8
 8013a14:	2210      	movs	r2, #16
 8013a16:	4638      	mov	r0, r7
 8013a18:	f004 fc74 	bl	8018304 <ucdr_serialize_array_uint8_t>
 8013a1c:	4434      	add	r4, r6
 8013a1e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8013a22:	4604      	mov	r4, r0
 8013a24:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013a26:	4638      	mov	r0, r7
 8013a28:	f7fb ffce 	bl	800f9c8 <ucdr_serialize_uint32_t>
 8013a2c:	4020      	ands	r0, r4
 8013a2e:	b2c0      	uxtb	r0, r0
 8013a30:	e7e5      	b.n	80139fe <uxr_serialize_ActivityInfoVariant+0xa6>
 8013a32:	3108      	adds	r1, #8
 8013a34:	4441      	add	r1, r8
 8013a36:	2204      	movs	r2, #4
 8013a38:	4638      	mov	r0, r7
 8013a3a:	f004 fc63 	bl	8018304 <ucdr_serialize_array_uint8_t>
 8013a3e:	4434      	add	r4, r6
 8013a40:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8013a44:	4604      	mov	r4, r0
 8013a46:	8b19      	ldrh	r1, [r3, #24]
 8013a48:	4638      	mov	r0, r7
 8013a4a:	f7fb fdd3 	bl	800f5f4 <ucdr_serialize_uint16_t>
 8013a4e:	4020      	ands	r0, r4
 8013a50:	b2c0      	uxtb	r0, r0
 8013a52:	e7d4      	b.n	80139fe <uxr_serialize_ActivityInfoVariant+0xa6>
 8013a54:	3108      	adds	r1, #8
 8013a56:	4441      	add	r1, r8
 8013a58:	2202      	movs	r2, #2
 8013a5a:	4638      	mov	r0, r7
 8013a5c:	f004 fc52 	bl	8018304 <ucdr_serialize_array_uint8_t>
 8013a60:	4434      	add	r4, r6
 8013a62:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8013a66:	4604      	mov	r4, r0
 8013a68:	7d99      	ldrb	r1, [r3, #22]
 8013a6a:	4638      	mov	r0, r7
 8013a6c:	f7fb fd96 	bl	800f59c <ucdr_serialize_uint8_t>
 8013a70:	4020      	ands	r0, r4
 8013a72:	b2c0      	uxtb	r0, r0
 8013a74:	e7c3      	b.n	80139fe <uxr_serialize_ActivityInfoVariant+0xa6>
 8013a76:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013a7a:	4638      	mov	r0, r7
 8013a7c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a80:	f7fc bac8 	b.w	8010014 <ucdr_serialize_int16_t>
 8013a84:	68ea      	ldr	r2, [r5, #12]
 8013a86:	3601      	adds	r6, #1
 8013a88:	42b2      	cmp	r2, r6
 8013a8a:	d8be      	bhi.n	8013a0a <uxr_serialize_ActivityInfoVariant+0xb2>
 8013a8c:	ea09 0900 	and.w	r9, r9, r0
 8013a90:	fa5f f989 	uxtb.w	r9, r9
 8013a94:	e771      	b.n	801397a <uxr_serialize_ActivityInfoVariant+0x22>
 8013a96:	68eb      	ldr	r3, [r5, #12]
 8013a98:	3601      	adds	r6, #1
 8013a9a:	429e      	cmp	r6, r3
 8013a9c:	f10a 0a18 	add.w	sl, sl, #24
 8013aa0:	d395      	bcc.n	80139ce <uxr_serialize_ActivityInfoVariant+0x76>
 8013aa2:	e76a      	b.n	801397a <uxr_serialize_ActivityInfoVariant+0x22>

08013aa4 <uxr_deserialize_BaseObjectReply>:
 8013aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013aa8:	2202      	movs	r2, #2
 8013aaa:	4606      	mov	r6, r0
 8013aac:	460f      	mov	r7, r1
 8013aae:	f004 fc8d 	bl	80183cc <ucdr_deserialize_array_uint8_t>
 8013ab2:	2202      	movs	r2, #2
 8013ab4:	18b9      	adds	r1, r7, r2
 8013ab6:	4605      	mov	r5, r0
 8013ab8:	4630      	mov	r0, r6
 8013aba:	f004 fc87 	bl	80183cc <ucdr_deserialize_array_uint8_t>
 8013abe:	1d39      	adds	r1, r7, #4
 8013ac0:	4680      	mov	r8, r0
 8013ac2:	4630      	mov	r0, r6
 8013ac4:	f7fb fd80 	bl	800f5c8 <ucdr_deserialize_uint8_t>
 8013ac8:	1d79      	adds	r1, r7, #5
 8013aca:	4604      	mov	r4, r0
 8013acc:	4630      	mov	r0, r6
 8013ace:	f7fb fd7b 	bl	800f5c8 <ucdr_deserialize_uint8_t>
 8013ad2:	ea05 0508 	and.w	r5, r5, r8
 8013ad6:	402c      	ands	r4, r5
 8013ad8:	4020      	ands	r0, r4
 8013ada:	b2c0      	uxtb	r0, r0
 8013adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013ae0 <uxr_serialize_ReadSpecification>:
 8013ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ae4:	460e      	mov	r6, r1
 8013ae6:	7809      	ldrb	r1, [r1, #0]
 8013ae8:	4607      	mov	r7, r0
 8013aea:	f7fb fd57 	bl	800f59c <ucdr_serialize_uint8_t>
 8013aee:	7871      	ldrb	r1, [r6, #1]
 8013af0:	4604      	mov	r4, r0
 8013af2:	4638      	mov	r0, r7
 8013af4:	f7fb fd52 	bl	800f59c <ucdr_serialize_uint8_t>
 8013af8:	78b1      	ldrb	r1, [r6, #2]
 8013afa:	4004      	ands	r4, r0
 8013afc:	4638      	mov	r0, r7
 8013afe:	f7fb fd1f 	bl	800f540 <ucdr_serialize_bool>
 8013b02:	78b3      	ldrb	r3, [r6, #2]
 8013b04:	b2e4      	uxtb	r4, r4
 8013b06:	4004      	ands	r4, r0
 8013b08:	b94b      	cbnz	r3, 8013b1e <uxr_serialize_ReadSpecification+0x3e>
 8013b0a:	7a31      	ldrb	r1, [r6, #8]
 8013b0c:	4638      	mov	r0, r7
 8013b0e:	f7fb fd17 	bl	800f540 <ucdr_serialize_bool>
 8013b12:	7a33      	ldrb	r3, [r6, #8]
 8013b14:	4004      	ands	r4, r0
 8013b16:	b943      	cbnz	r3, 8013b2a <uxr_serialize_ReadSpecification+0x4a>
 8013b18:	4620      	mov	r0, r4
 8013b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b1e:	6871      	ldr	r1, [r6, #4]
 8013b20:	4638      	mov	r0, r7
 8013b22:	f004 fd0f 	bl	8018544 <ucdr_serialize_string>
 8013b26:	4004      	ands	r4, r0
 8013b28:	e7ef      	b.n	8013b0a <uxr_serialize_ReadSpecification+0x2a>
 8013b2a:	8971      	ldrh	r1, [r6, #10]
 8013b2c:	4638      	mov	r0, r7
 8013b2e:	f7fb fd61 	bl	800f5f4 <ucdr_serialize_uint16_t>
 8013b32:	89b1      	ldrh	r1, [r6, #12]
 8013b34:	4605      	mov	r5, r0
 8013b36:	4638      	mov	r0, r7
 8013b38:	f7fb fd5c 	bl	800f5f4 <ucdr_serialize_uint16_t>
 8013b3c:	89f1      	ldrh	r1, [r6, #14]
 8013b3e:	4005      	ands	r5, r0
 8013b40:	4638      	mov	r0, r7
 8013b42:	f7fb fd57 	bl	800f5f4 <ucdr_serialize_uint16_t>
 8013b46:	8a31      	ldrh	r1, [r6, #16]
 8013b48:	4680      	mov	r8, r0
 8013b4a:	4638      	mov	r0, r7
 8013b4c:	f7fb fd52 	bl	800f5f4 <ucdr_serialize_uint16_t>
 8013b50:	b2ed      	uxtb	r5, r5
 8013b52:	4025      	ands	r5, r4
 8013b54:	ea08 0505 	and.w	r5, r8, r5
 8013b58:	ea00 0405 	and.w	r4, r0, r5
 8013b5c:	4620      	mov	r0, r4
 8013b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b62:	bf00      	nop

08013b64 <uxr_serialize_CREATE_CLIENT_Payload>:
 8013b64:	f7ff ba16 	b.w	8012f94 <uxr_serialize_CLIENT_Representation>

08013b68 <uxr_serialize_CREATE_Payload>:
 8013b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b6a:	2202      	movs	r2, #2
 8013b6c:	4607      	mov	r7, r0
 8013b6e:	460e      	mov	r6, r1
 8013b70:	f004 fbc8 	bl	8018304 <ucdr_serialize_array_uint8_t>
 8013b74:	2202      	movs	r2, #2
 8013b76:	18b1      	adds	r1, r6, r2
 8013b78:	4605      	mov	r5, r0
 8013b7a:	4638      	mov	r0, r7
 8013b7c:	f004 fbc2 	bl	8018304 <ucdr_serialize_array_uint8_t>
 8013b80:	7931      	ldrb	r1, [r6, #4]
 8013b82:	4604      	mov	r4, r0
 8013b84:	4638      	mov	r0, r7
 8013b86:	f7fb fd09 	bl	800f59c <ucdr_serialize_uint8_t>
 8013b8a:	b170      	cbz	r0, 8013baa <uxr_serialize_CREATE_Payload+0x42>
 8013b8c:	7933      	ldrb	r3, [r6, #4]
 8013b8e:	402c      	ands	r4, r5
 8013b90:	3b01      	subs	r3, #1
 8013b92:	b2e4      	uxtb	r4, r4
 8013b94:	2b0d      	cmp	r3, #13
 8013b96:	d809      	bhi.n	8013bac <uxr_serialize_CREATE_Payload+0x44>
 8013b98:	e8df f003 	tbb	[pc, r3]
 8013b9c:	23230a4c 	.word	0x23230a4c
 8013ba0:	0a0a0a0a 	.word	0x0a0a0a0a
 8013ba4:	12121208 	.word	0x12121208
 8013ba8:	3e45      	.short	0x3e45
 8013baa:	2400      	movs	r4, #0
 8013bac:	4620      	mov	r0, r4
 8013bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013bb0:	f106 0108 	add.w	r1, r6, #8
 8013bb4:	4638      	mov	r0, r7
 8013bb6:	f7ff faf3 	bl	80131a0 <uxr_serialize_DATAWRITER_Representation>
 8013bba:	4004      	ands	r4, r0
 8013bbc:	4620      	mov	r0, r4
 8013bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013bc0:	7a31      	ldrb	r1, [r6, #8]
 8013bc2:	4638      	mov	r0, r7
 8013bc4:	f7fb fcea 	bl	800f59c <ucdr_serialize_uint8_t>
 8013bc8:	2800      	cmp	r0, #0
 8013bca:	d0ee      	beq.n	8013baa <uxr_serialize_CREATE_Payload+0x42>
 8013bcc:	7a33      	ldrb	r3, [r6, #8]
 8013bce:	2b01      	cmp	r3, #1
 8013bd0:	d001      	beq.n	8013bd6 <uxr_serialize_CREATE_Payload+0x6e>
 8013bd2:	2b02      	cmp	r3, #2
 8013bd4:	d1ea      	bne.n	8013bac <uxr_serialize_CREATE_Payload+0x44>
 8013bd6:	68f1      	ldr	r1, [r6, #12]
 8013bd8:	4638      	mov	r0, r7
 8013bda:	f004 fcb3 	bl	8018544 <ucdr_serialize_string>
 8013bde:	4004      	ands	r4, r0
 8013be0:	e7e4      	b.n	8013bac <uxr_serialize_CREATE_Payload+0x44>
 8013be2:	7a31      	ldrb	r1, [r6, #8]
 8013be4:	4638      	mov	r0, r7
 8013be6:	f7fb fcd9 	bl	800f59c <ucdr_serialize_uint8_t>
 8013bea:	4605      	mov	r5, r0
 8013bec:	b158      	cbz	r0, 8013c06 <uxr_serialize_CREATE_Payload+0x9e>
 8013bee:	7a33      	ldrb	r3, [r6, #8]
 8013bf0:	2b02      	cmp	r3, #2
 8013bf2:	d034      	beq.n	8013c5e <uxr_serialize_CREATE_Payload+0xf6>
 8013bf4:	2b03      	cmp	r3, #3
 8013bf6:	d106      	bne.n	8013c06 <uxr_serialize_CREATE_Payload+0x9e>
 8013bf8:	68f2      	ldr	r2, [r6, #12]
 8013bfa:	f106 0110 	add.w	r1, r6, #16
 8013bfe:	4638      	mov	r0, r7
 8013c00:	f004 fc74 	bl	80184ec <ucdr_serialize_sequence_uint8_t>
 8013c04:	4605      	mov	r5, r0
 8013c06:	2202      	movs	r2, #2
 8013c08:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8013c0c:	4638      	mov	r0, r7
 8013c0e:	f004 fb79 	bl	8018304 <ucdr_serialize_array_uint8_t>
 8013c12:	4028      	ands	r0, r5
 8013c14:	4004      	ands	r4, r0
 8013c16:	e7c9      	b.n	8013bac <uxr_serialize_CREATE_Payload+0x44>
 8013c18:	f106 0108 	add.w	r1, r6, #8
 8013c1c:	4638      	mov	r0, r7
 8013c1e:	f7ff f9b9 	bl	8012f94 <uxr_serialize_CLIENT_Representation>
 8013c22:	4004      	ands	r4, r0
 8013c24:	e7c2      	b.n	8013bac <uxr_serialize_CREATE_Payload+0x44>
 8013c26:	f106 0108 	add.w	r1, r6, #8
 8013c2a:	4638      	mov	r0, r7
 8013c2c:	f7ff fa6e 	bl	801310c <uxr_serialize_AGENT_Representation>
 8013c30:	4004      	ands	r4, r0
 8013c32:	e7bb      	b.n	8013bac <uxr_serialize_CREATE_Payload+0x44>
 8013c34:	7a31      	ldrb	r1, [r6, #8]
 8013c36:	4638      	mov	r0, r7
 8013c38:	f7fb fcb0 	bl	800f59c <ucdr_serialize_uint8_t>
 8013c3c:	4605      	mov	r5, r0
 8013c3e:	b130      	cbz	r0, 8013c4e <uxr_serialize_CREATE_Payload+0xe6>
 8013c40:	7a33      	ldrb	r3, [r6, #8]
 8013c42:	2b02      	cmp	r3, #2
 8013c44:	d011      	beq.n	8013c6a <uxr_serialize_CREATE_Payload+0x102>
 8013c46:	2b03      	cmp	r3, #3
 8013c48:	d015      	beq.n	8013c76 <uxr_serialize_CREATE_Payload+0x10e>
 8013c4a:	2b01      	cmp	r3, #1
 8013c4c:	d00d      	beq.n	8013c6a <uxr_serialize_CREATE_Payload+0x102>
 8013c4e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8013c52:	4638      	mov	r0, r7
 8013c54:	f7fc f9de 	bl	8010014 <ucdr_serialize_int16_t>
 8013c58:	4028      	ands	r0, r5
 8013c5a:	4004      	ands	r4, r0
 8013c5c:	e7a6      	b.n	8013bac <uxr_serialize_CREATE_Payload+0x44>
 8013c5e:	68f1      	ldr	r1, [r6, #12]
 8013c60:	4638      	mov	r0, r7
 8013c62:	f004 fc6f 	bl	8018544 <ucdr_serialize_string>
 8013c66:	4605      	mov	r5, r0
 8013c68:	e7cd      	b.n	8013c06 <uxr_serialize_CREATE_Payload+0x9e>
 8013c6a:	68f1      	ldr	r1, [r6, #12]
 8013c6c:	4638      	mov	r0, r7
 8013c6e:	f004 fc69 	bl	8018544 <ucdr_serialize_string>
 8013c72:	4605      	mov	r5, r0
 8013c74:	e7eb      	b.n	8013c4e <uxr_serialize_CREATE_Payload+0xe6>
 8013c76:	68f2      	ldr	r2, [r6, #12]
 8013c78:	f106 0110 	add.w	r1, r6, #16
 8013c7c:	4638      	mov	r0, r7
 8013c7e:	f004 fc35 	bl	80184ec <ucdr_serialize_sequence_uint8_t>
 8013c82:	4605      	mov	r5, r0
 8013c84:	e7e3      	b.n	8013c4e <uxr_serialize_CREATE_Payload+0xe6>
 8013c86:	bf00      	nop

08013c88 <uxr_deserialize_GET_INFO_Payload>:
 8013c88:	b570      	push	{r4, r5, r6, lr}
 8013c8a:	2202      	movs	r2, #2
 8013c8c:	4605      	mov	r5, r0
 8013c8e:	460e      	mov	r6, r1
 8013c90:	f004 fb9c 	bl	80183cc <ucdr_deserialize_array_uint8_t>
 8013c94:	2202      	movs	r2, #2
 8013c96:	18b1      	adds	r1, r6, r2
 8013c98:	4604      	mov	r4, r0
 8013c9a:	4628      	mov	r0, r5
 8013c9c:	f004 fb96 	bl	80183cc <ucdr_deserialize_array_uint8_t>
 8013ca0:	1d31      	adds	r1, r6, #4
 8013ca2:	4004      	ands	r4, r0
 8013ca4:	4628      	mov	r0, r5
 8013ca6:	f7fb ffbf 	bl	800fc28 <ucdr_deserialize_uint32_t>
 8013caa:	b2e4      	uxtb	r4, r4
 8013cac:	4020      	ands	r0, r4
 8013cae:	bd70      	pop	{r4, r5, r6, pc}

08013cb0 <uxr_serialize_DELETE_Payload>:
 8013cb0:	b570      	push	{r4, r5, r6, lr}
 8013cb2:	2202      	movs	r2, #2
 8013cb4:	4605      	mov	r5, r0
 8013cb6:	460e      	mov	r6, r1
 8013cb8:	f004 fb24 	bl	8018304 <ucdr_serialize_array_uint8_t>
 8013cbc:	2202      	movs	r2, #2
 8013cbe:	4604      	mov	r4, r0
 8013cc0:	18b1      	adds	r1, r6, r2
 8013cc2:	4628      	mov	r0, r5
 8013cc4:	f004 fb1e 	bl	8018304 <ucdr_serialize_array_uint8_t>
 8013cc8:	4020      	ands	r0, r4
 8013cca:	b2c0      	uxtb	r0, r0
 8013ccc:	bd70      	pop	{r4, r5, r6, pc}
 8013cce:	bf00      	nop

08013cd0 <uxr_deserialize_STATUS_AGENT_Payload>:
 8013cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cd4:	4605      	mov	r5, r0
 8013cd6:	460e      	mov	r6, r1
 8013cd8:	f7fb fc76 	bl	800f5c8 <ucdr_deserialize_uint8_t>
 8013cdc:	1c71      	adds	r1, r6, #1
 8013cde:	4604      	mov	r4, r0
 8013ce0:	4628      	mov	r0, r5
 8013ce2:	f7fb fc71 	bl	800f5c8 <ucdr_deserialize_uint8_t>
 8013ce6:	2204      	movs	r2, #4
 8013ce8:	18b1      	adds	r1, r6, r2
 8013cea:	4680      	mov	r8, r0
 8013cec:	4628      	mov	r0, r5
 8013cee:	f004 fb6d 	bl	80183cc <ucdr_deserialize_array_uint8_t>
 8013cf2:	f106 0108 	add.w	r1, r6, #8
 8013cf6:	4607      	mov	r7, r0
 8013cf8:	2202      	movs	r2, #2
 8013cfa:	4628      	mov	r0, r5
 8013cfc:	f004 fb66 	bl	80183cc <ucdr_deserialize_array_uint8_t>
 8013d00:	ea04 0308 	and.w	r3, r4, r8
 8013d04:	b2db      	uxtb	r3, r3
 8013d06:	ea03 0407 	and.w	r4, r3, r7
 8013d0a:	2202      	movs	r2, #2
 8013d0c:	4607      	mov	r7, r0
 8013d0e:	f106 010a 	add.w	r1, r6, #10
 8013d12:	4628      	mov	r0, r5
 8013d14:	f004 fb5a 	bl	80183cc <ucdr_deserialize_array_uint8_t>
 8013d18:	f106 010c 	add.w	r1, r6, #12
 8013d1c:	4603      	mov	r3, r0
 8013d1e:	4628      	mov	r0, r5
 8013d20:	461d      	mov	r5, r3
 8013d22:	f7fb fc23 	bl	800f56c <ucdr_deserialize_bool>
 8013d26:	403c      	ands	r4, r7
 8013d28:	4025      	ands	r5, r4
 8013d2a:	4028      	ands	r0, r5
 8013d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013d30 <uxr_deserialize_STATUS_Payload>:
 8013d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d34:	2202      	movs	r2, #2
 8013d36:	4606      	mov	r6, r0
 8013d38:	460f      	mov	r7, r1
 8013d3a:	f004 fb47 	bl	80183cc <ucdr_deserialize_array_uint8_t>
 8013d3e:	2202      	movs	r2, #2
 8013d40:	18b9      	adds	r1, r7, r2
 8013d42:	4605      	mov	r5, r0
 8013d44:	4630      	mov	r0, r6
 8013d46:	f004 fb41 	bl	80183cc <ucdr_deserialize_array_uint8_t>
 8013d4a:	1d39      	adds	r1, r7, #4
 8013d4c:	4680      	mov	r8, r0
 8013d4e:	4630      	mov	r0, r6
 8013d50:	f7fb fc3a 	bl	800f5c8 <ucdr_deserialize_uint8_t>
 8013d54:	1d79      	adds	r1, r7, #5
 8013d56:	4604      	mov	r4, r0
 8013d58:	4630      	mov	r0, r6
 8013d5a:	f7fb fc35 	bl	800f5c8 <ucdr_deserialize_uint8_t>
 8013d5e:	ea05 0508 	and.w	r5, r5, r8
 8013d62:	402c      	ands	r4, r5
 8013d64:	4020      	ands	r0, r4
 8013d66:	b2c0      	uxtb	r0, r0
 8013d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013d6c <uxr_serialize_INFO_Payload>:
 8013d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d70:	2202      	movs	r2, #2
 8013d72:	460c      	mov	r4, r1
 8013d74:	4605      	mov	r5, r0
 8013d76:	f004 fac5 	bl	8018304 <ucdr_serialize_array_uint8_t>
 8013d7a:	2202      	movs	r2, #2
 8013d7c:	18a1      	adds	r1, r4, r2
 8013d7e:	4680      	mov	r8, r0
 8013d80:	4628      	mov	r0, r5
 8013d82:	f004 fabf 	bl	8018304 <ucdr_serialize_array_uint8_t>
 8013d86:	7921      	ldrb	r1, [r4, #4]
 8013d88:	4607      	mov	r7, r0
 8013d8a:	4628      	mov	r0, r5
 8013d8c:	f7fb fc06 	bl	800f59c <ucdr_serialize_uint8_t>
 8013d90:	7961      	ldrb	r1, [r4, #5]
 8013d92:	4606      	mov	r6, r0
 8013d94:	4628      	mov	r0, r5
 8013d96:	f7fb fc01 	bl	800f59c <ucdr_serialize_uint8_t>
 8013d9a:	ea08 0807 	and.w	r8, r8, r7
 8013d9e:	ea06 0608 	and.w	r6, r6, r8
 8013da2:	4006      	ands	r6, r0
 8013da4:	7a21      	ldrb	r1, [r4, #8]
 8013da6:	4628      	mov	r0, r5
 8013da8:	f7fb fbca 	bl	800f540 <ucdr_serialize_bool>
 8013dac:	7a23      	ldrb	r3, [r4, #8]
 8013dae:	b2f7      	uxtb	r7, r6
 8013db0:	4606      	mov	r6, r0
 8013db2:	b96b      	cbnz	r3, 8013dd0 <uxr_serialize_INFO_Payload+0x64>
 8013db4:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8013db8:	4628      	mov	r0, r5
 8013dba:	f7fb fbc1 	bl	800f540 <ucdr_serialize_bool>
 8013dbe:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8013dc2:	4030      	ands	r0, r6
 8013dc4:	b2c6      	uxtb	r6, r0
 8013dc6:	b983      	cbnz	r3, 8013dea <uxr_serialize_INFO_Payload+0x7e>
 8013dc8:	ea06 0007 	and.w	r0, r6, r7
 8013dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dd0:	7b21      	ldrb	r1, [r4, #12]
 8013dd2:	4628      	mov	r0, r5
 8013dd4:	f7fb fbe2 	bl	800f59c <ucdr_serialize_uint8_t>
 8013dd8:	b188      	cbz	r0, 8013dfe <uxr_serialize_INFO_Payload+0x92>
 8013dda:	f104 010c 	add.w	r1, r4, #12
 8013dde:	4628      	mov	r0, r5
 8013de0:	f7ff fa06 	bl	80131f0 <uxr_serialize_ObjectVariant.part.0>
 8013de4:	4030      	ands	r0, r6
 8013de6:	b2c6      	uxtb	r6, r0
 8013de8:	e7e4      	b.n	8013db4 <uxr_serialize_INFO_Payload+0x48>
 8013dea:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8013dee:	4628      	mov	r0, r5
 8013df0:	f7ff fdb2 	bl	8013958 <uxr_serialize_ActivityInfoVariant>
 8013df4:	4006      	ands	r6, r0
 8013df6:	ea06 0007 	and.w	r0, r6, r7
 8013dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dfe:	4606      	mov	r6, r0
 8013e00:	e7d8      	b.n	8013db4 <uxr_serialize_INFO_Payload+0x48>
 8013e02:	bf00      	nop

08013e04 <uxr_serialize_READ_DATA_Payload>:
 8013e04:	b570      	push	{r4, r5, r6, lr}
 8013e06:	2202      	movs	r2, #2
 8013e08:	4605      	mov	r5, r0
 8013e0a:	460e      	mov	r6, r1
 8013e0c:	f004 fa7a 	bl	8018304 <ucdr_serialize_array_uint8_t>
 8013e10:	2202      	movs	r2, #2
 8013e12:	18b1      	adds	r1, r6, r2
 8013e14:	4604      	mov	r4, r0
 8013e16:	4628      	mov	r0, r5
 8013e18:	f004 fa74 	bl	8018304 <ucdr_serialize_array_uint8_t>
 8013e1c:	1d31      	adds	r1, r6, #4
 8013e1e:	4004      	ands	r4, r0
 8013e20:	4628      	mov	r0, r5
 8013e22:	f7ff fe5d 	bl	8013ae0 <uxr_serialize_ReadSpecification>
 8013e26:	b2e4      	uxtb	r4, r4
 8013e28:	4020      	ands	r0, r4
 8013e2a:	bd70      	pop	{r4, r5, r6, pc}

08013e2c <uxr_serialize_WRITE_DATA_Payload_Data>:
 8013e2c:	b570      	push	{r4, r5, r6, lr}
 8013e2e:	2202      	movs	r2, #2
 8013e30:	4605      	mov	r5, r0
 8013e32:	460e      	mov	r6, r1
 8013e34:	f004 fa66 	bl	8018304 <ucdr_serialize_array_uint8_t>
 8013e38:	2202      	movs	r2, #2
 8013e3a:	4604      	mov	r4, r0
 8013e3c:	18b1      	adds	r1, r6, r2
 8013e3e:	4628      	mov	r0, r5
 8013e40:	f004 fa60 	bl	8018304 <ucdr_serialize_array_uint8_t>
 8013e44:	4020      	ands	r0, r4
 8013e46:	b2c0      	uxtb	r0, r0
 8013e48:	bd70      	pop	{r4, r5, r6, pc}
 8013e4a:	bf00      	nop

08013e4c <uxr_serialize_ACKNACK_Payload>:
 8013e4c:	b570      	push	{r4, r5, r6, lr}
 8013e4e:	460c      	mov	r4, r1
 8013e50:	460e      	mov	r6, r1
 8013e52:	f834 1b02 	ldrh.w	r1, [r4], #2
 8013e56:	4605      	mov	r5, r0
 8013e58:	f7fb fbcc 	bl	800f5f4 <ucdr_serialize_uint16_t>
 8013e5c:	2202      	movs	r2, #2
 8013e5e:	4621      	mov	r1, r4
 8013e60:	4604      	mov	r4, r0
 8013e62:	4628      	mov	r0, r5
 8013e64:	f004 fa4e 	bl	8018304 <ucdr_serialize_array_uint8_t>
 8013e68:	7931      	ldrb	r1, [r6, #4]
 8013e6a:	4004      	ands	r4, r0
 8013e6c:	4628      	mov	r0, r5
 8013e6e:	f7fb fb95 	bl	800f59c <ucdr_serialize_uint8_t>
 8013e72:	b2e4      	uxtb	r4, r4
 8013e74:	4020      	ands	r0, r4
 8013e76:	bd70      	pop	{r4, r5, r6, pc}

08013e78 <uxr_deserialize_ACKNACK_Payload>:
 8013e78:	b570      	push	{r4, r5, r6, lr}
 8013e7a:	4605      	mov	r5, r0
 8013e7c:	460e      	mov	r6, r1
 8013e7e:	f7fb fcb9 	bl	800f7f4 <ucdr_deserialize_uint16_t>
 8013e82:	2202      	movs	r2, #2
 8013e84:	18b1      	adds	r1, r6, r2
 8013e86:	4604      	mov	r4, r0
 8013e88:	4628      	mov	r0, r5
 8013e8a:	f004 fa9f 	bl	80183cc <ucdr_deserialize_array_uint8_t>
 8013e8e:	1d31      	adds	r1, r6, #4
 8013e90:	4004      	ands	r4, r0
 8013e92:	4628      	mov	r0, r5
 8013e94:	f7fb fb98 	bl	800f5c8 <ucdr_deserialize_uint8_t>
 8013e98:	b2e4      	uxtb	r4, r4
 8013e9a:	4020      	ands	r0, r4
 8013e9c:	bd70      	pop	{r4, r5, r6, pc}
 8013e9e:	bf00      	nop

08013ea0 <uxr_serialize_HEARTBEAT_Payload>:
 8013ea0:	b570      	push	{r4, r5, r6, lr}
 8013ea2:	460d      	mov	r5, r1
 8013ea4:	8809      	ldrh	r1, [r1, #0]
 8013ea6:	4606      	mov	r6, r0
 8013ea8:	f7fb fba4 	bl	800f5f4 <ucdr_serialize_uint16_t>
 8013eac:	8869      	ldrh	r1, [r5, #2]
 8013eae:	4604      	mov	r4, r0
 8013eb0:	4630      	mov	r0, r6
 8013eb2:	f7fb fb9f 	bl	800f5f4 <ucdr_serialize_uint16_t>
 8013eb6:	7929      	ldrb	r1, [r5, #4]
 8013eb8:	4004      	ands	r4, r0
 8013eba:	4630      	mov	r0, r6
 8013ebc:	f7fb fb6e 	bl	800f59c <ucdr_serialize_uint8_t>
 8013ec0:	b2e4      	uxtb	r4, r4
 8013ec2:	4020      	ands	r0, r4
 8013ec4:	bd70      	pop	{r4, r5, r6, pc}
 8013ec6:	bf00      	nop

08013ec8 <uxr_deserialize_HEARTBEAT_Payload>:
 8013ec8:	b570      	push	{r4, r5, r6, lr}
 8013eca:	4605      	mov	r5, r0
 8013ecc:	460e      	mov	r6, r1
 8013ece:	f7fb fc91 	bl	800f7f4 <ucdr_deserialize_uint16_t>
 8013ed2:	1cb1      	adds	r1, r6, #2
 8013ed4:	4604      	mov	r4, r0
 8013ed6:	4628      	mov	r0, r5
 8013ed8:	f7fb fc8c 	bl	800f7f4 <ucdr_deserialize_uint16_t>
 8013edc:	1d31      	adds	r1, r6, #4
 8013ede:	4004      	ands	r4, r0
 8013ee0:	4628      	mov	r0, r5
 8013ee2:	f7fb fb71 	bl	800f5c8 <ucdr_deserialize_uint8_t>
 8013ee6:	b2e4      	uxtb	r4, r4
 8013ee8:	4020      	ands	r0, r4
 8013eea:	bd70      	pop	{r4, r5, r6, pc}

08013eec <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8013eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ef0:	4605      	mov	r5, r0
 8013ef2:	460e      	mov	r6, r1
 8013ef4:	f7fc fa1a 	bl	801032c <ucdr_deserialize_int32_t>
 8013ef8:	1d31      	adds	r1, r6, #4
 8013efa:	4607      	mov	r7, r0
 8013efc:	4628      	mov	r0, r5
 8013efe:	f7fb fe93 	bl	800fc28 <ucdr_deserialize_uint32_t>
 8013f02:	f106 0108 	add.w	r1, r6, #8
 8013f06:	4680      	mov	r8, r0
 8013f08:	4628      	mov	r0, r5
 8013f0a:	f7fc fa0f 	bl	801032c <ucdr_deserialize_int32_t>
 8013f0e:	f106 010c 	add.w	r1, r6, #12
 8013f12:	4604      	mov	r4, r0
 8013f14:	4628      	mov	r0, r5
 8013f16:	f7fb fe87 	bl	800fc28 <ucdr_deserialize_uint32_t>
 8013f1a:	ea07 0708 	and.w	r7, r7, r8
 8013f1e:	403c      	ands	r4, r7
 8013f20:	f106 0110 	add.w	r1, r6, #16
 8013f24:	4004      	ands	r4, r0
 8013f26:	4628      	mov	r0, r5
 8013f28:	f7fc fa00 	bl	801032c <ucdr_deserialize_int32_t>
 8013f2c:	f106 0114 	add.w	r1, r6, #20
 8013f30:	4607      	mov	r7, r0
 8013f32:	4628      	mov	r0, r5
 8013f34:	f7fb fe78 	bl	800fc28 <ucdr_deserialize_uint32_t>
 8013f38:	b2e4      	uxtb	r4, r4
 8013f3a:	403c      	ands	r4, r7
 8013f3c:	4020      	ands	r0, r4
 8013f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f42:	bf00      	nop

08013f44 <uxr_serialize_SampleIdentity>:
 8013f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f48:	220c      	movs	r2, #12
 8013f4a:	4604      	mov	r4, r0
 8013f4c:	460d      	mov	r5, r1
 8013f4e:	f004 f9d9 	bl	8018304 <ucdr_serialize_array_uint8_t>
 8013f52:	2203      	movs	r2, #3
 8013f54:	f105 010c 	add.w	r1, r5, #12
 8013f58:	4607      	mov	r7, r0
 8013f5a:	4620      	mov	r0, r4
 8013f5c:	f004 f9d2 	bl	8018304 <ucdr_serialize_array_uint8_t>
 8013f60:	7be9      	ldrb	r1, [r5, #15]
 8013f62:	4680      	mov	r8, r0
 8013f64:	4620      	mov	r0, r4
 8013f66:	f7fb fb19 	bl	800f59c <ucdr_serialize_uint8_t>
 8013f6a:	6929      	ldr	r1, [r5, #16]
 8013f6c:	4606      	mov	r6, r0
 8013f6e:	4620      	mov	r0, r4
 8013f70:	f7fc f944 	bl	80101fc <ucdr_serialize_int32_t>
 8013f74:	6969      	ldr	r1, [r5, #20]
 8013f76:	4603      	mov	r3, r0
 8013f78:	4620      	mov	r0, r4
 8013f7a:	ea07 0708 	and.w	r7, r7, r8
 8013f7e:	461c      	mov	r4, r3
 8013f80:	f7fb fd22 	bl	800f9c8 <ucdr_serialize_uint32_t>
 8013f84:	403e      	ands	r6, r7
 8013f86:	4034      	ands	r4, r6
 8013f88:	4020      	ands	r0, r4
 8013f8a:	b2c0      	uxtb	r0, r0
 8013f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013f90 <uxr_deserialize_SampleIdentity>:
 8013f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f94:	220c      	movs	r2, #12
 8013f96:	4604      	mov	r4, r0
 8013f98:	460d      	mov	r5, r1
 8013f9a:	f004 fa17 	bl	80183cc <ucdr_deserialize_array_uint8_t>
 8013f9e:	2203      	movs	r2, #3
 8013fa0:	f105 010c 	add.w	r1, r5, #12
 8013fa4:	4607      	mov	r7, r0
 8013fa6:	4620      	mov	r0, r4
 8013fa8:	f004 fa10 	bl	80183cc <ucdr_deserialize_array_uint8_t>
 8013fac:	f105 010f 	add.w	r1, r5, #15
 8013fb0:	4680      	mov	r8, r0
 8013fb2:	4620      	mov	r0, r4
 8013fb4:	f7fb fb08 	bl	800f5c8 <ucdr_deserialize_uint8_t>
 8013fb8:	f105 0110 	add.w	r1, r5, #16
 8013fbc:	4606      	mov	r6, r0
 8013fbe:	4620      	mov	r0, r4
 8013fc0:	f7fc f9b4 	bl	801032c <ucdr_deserialize_int32_t>
 8013fc4:	f105 0114 	add.w	r1, r5, #20
 8013fc8:	4603      	mov	r3, r0
 8013fca:	4620      	mov	r0, r4
 8013fcc:	ea07 0708 	and.w	r7, r7, r8
 8013fd0:	461c      	mov	r4, r3
 8013fd2:	f7fb fe29 	bl	800fc28 <ucdr_deserialize_uint32_t>
 8013fd6:	403e      	ands	r6, r7
 8013fd8:	4034      	ands	r4, r6
 8013fda:	4020      	ands	r0, r4
 8013fdc:	b2c0      	uxtb	r0, r0
 8013fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fe2:	bf00      	nop

08013fe4 <rcl_client_get_rmw_handle>:
 8013fe4:	b118      	cbz	r0, 8013fee <rcl_client_get_rmw_handle+0xa>
 8013fe6:	6800      	ldr	r0, [r0, #0]
 8013fe8:	b108      	cbz	r0, 8013fee <rcl_client_get_rmw_handle+0xa>
 8013fea:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8013fee:	4770      	bx	lr

08013ff0 <rcl_send_request>:
 8013ff0:	b570      	push	{r4, r5, r6, lr}
 8013ff2:	b082      	sub	sp, #8
 8013ff4:	b1e8      	cbz	r0, 8014032 <rcl_send_request+0x42>
 8013ff6:	4604      	mov	r4, r0
 8013ff8:	6800      	ldr	r0, [r0, #0]
 8013ffa:	b1d0      	cbz	r0, 8014032 <rcl_send_request+0x42>
 8013ffc:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8014000:	b1bb      	cbz	r3, 8014032 <rcl_send_request+0x42>
 8014002:	460e      	mov	r6, r1
 8014004:	b1d1      	cbz	r1, 801403c <rcl_send_request+0x4c>
 8014006:	4615      	mov	r5, r2
 8014008:	b1c2      	cbz	r2, 801403c <rcl_send_request+0x4c>
 801400a:	2105      	movs	r1, #5
 801400c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8014010:	f002 fe82 	bl	8016d18 <__atomic_load_8>
 8014014:	6823      	ldr	r3, [r4, #0]
 8014016:	e9c5 0100 	strd	r0, r1, [r5]
 801401a:	462a      	mov	r2, r5
 801401c:	4631      	mov	r1, r6
 801401e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8014022:	f003 fd8d 	bl	8017b40 <rmw_send_request>
 8014026:	4606      	mov	r6, r0
 8014028:	b160      	cbz	r0, 8014044 <rcl_send_request+0x54>
 801402a:	2601      	movs	r6, #1
 801402c:	4630      	mov	r0, r6
 801402e:	b002      	add	sp, #8
 8014030:	bd70      	pop	{r4, r5, r6, pc}
 8014032:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8014036:	4630      	mov	r0, r6
 8014038:	b002      	add	sp, #8
 801403a:	bd70      	pop	{r4, r5, r6, pc}
 801403c:	260b      	movs	r6, #11
 801403e:	4630      	mov	r0, r6
 8014040:	b002      	add	sp, #8
 8014042:	bd70      	pop	{r4, r5, r6, pc}
 8014044:	6820      	ldr	r0, [r4, #0]
 8014046:	2105      	movs	r1, #5
 8014048:	e9d5 2300 	ldrd	r2, r3, [r5]
 801404c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8014050:	9100      	str	r1, [sp, #0]
 8014052:	f002 fecd 	bl	8016df0 <__atomic_exchange_8>
 8014056:	4630      	mov	r0, r6
 8014058:	b002      	add	sp, #8
 801405a:	bd70      	pop	{r4, r5, r6, pc}
 801405c:	0000      	movs	r0, r0
	...

08014060 <rcl_take_response>:
 8014060:	b570      	push	{r4, r5, r6, lr}
 8014062:	468e      	mov	lr, r1
 8014064:	460c      	mov	r4, r1
 8014066:	4616      	mov	r6, r2
 8014068:	4605      	mov	r5, r0
 801406a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801406e:	b08c      	sub	sp, #48	@ 0x30
 8014070:	f10d 0c18 	add.w	ip, sp, #24
 8014074:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014078:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801407c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014080:	b35d      	cbz	r5, 80140da <rcl_take_response+0x7a>
 8014082:	682b      	ldr	r3, [r5, #0]
 8014084:	b34b      	cbz	r3, 80140da <rcl_take_response+0x7a>
 8014086:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801408a:	b330      	cbz	r0, 80140da <rcl_take_response+0x7a>
 801408c:	b346      	cbz	r6, 80140e0 <rcl_take_response+0x80>
 801408e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80140e8 <rcl_take_response+0x88>
 8014092:	2300      	movs	r3, #0
 8014094:	f88d 3007 	strb.w	r3, [sp, #7]
 8014098:	4632      	mov	r2, r6
 801409a:	f10d 0307 	add.w	r3, sp, #7
 801409e:	a902      	add	r1, sp, #8
 80140a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80140a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80140a8:	f003 fe52 	bl	8017d50 <rmw_take_response>
 80140ac:	4605      	mov	r5, r0
 80140ae:	b9c8      	cbnz	r0, 80140e4 <rcl_take_response+0x84>
 80140b0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80140b4:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80140b8:	2a00      	cmp	r2, #0
 80140ba:	bf08      	it	eq
 80140bc:	461d      	moveq	r5, r3
 80140be:	f10d 0e18 	add.w	lr, sp, #24
 80140c2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80140c6:	46a4      	mov	ip, r4
 80140c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80140cc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80140d0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80140d4:	4628      	mov	r0, r5
 80140d6:	b00c      	add	sp, #48	@ 0x30
 80140d8:	bd70      	pop	{r4, r5, r6, pc}
 80140da:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 80140de:	e7ee      	b.n	80140be <rcl_take_response+0x5e>
 80140e0:	250b      	movs	r5, #11
 80140e2:	e7ec      	b.n	80140be <rcl_take_response+0x5e>
 80140e4:	2501      	movs	r5, #1
 80140e6:	e7ea      	b.n	80140be <rcl_take_response+0x5e>
	...

080140f0 <rcl_client_is_valid>:
 80140f0:	b130      	cbz	r0, 8014100 <rcl_client_is_valid+0x10>
 80140f2:	6800      	ldr	r0, [r0, #0]
 80140f4:	b120      	cbz	r0, 8014100 <rcl_client_is_valid+0x10>
 80140f6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80140fa:	3800      	subs	r0, #0
 80140fc:	bf18      	it	ne
 80140fe:	2001      	movne	r0, #1
 8014100:	4770      	bx	lr
 8014102:	bf00      	nop

08014104 <rcl_convert_rmw_ret_to_rcl_ret>:
 8014104:	280b      	cmp	r0, #11
 8014106:	dc0d      	bgt.n	8014124 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8014108:	2800      	cmp	r0, #0
 801410a:	db09      	blt.n	8014120 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801410c:	280b      	cmp	r0, #11
 801410e:	d807      	bhi.n	8014120 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8014110:	e8df f000 	tbb	[pc, r0]
 8014114:	07060607 	.word	0x07060607
 8014118:	06060606 	.word	0x06060606
 801411c:	07070606 	.word	0x07070606
 8014120:	2001      	movs	r0, #1
 8014122:	4770      	bx	lr
 8014124:	28cb      	cmp	r0, #203	@ 0xcb
 8014126:	bf18      	it	ne
 8014128:	2001      	movne	r0, #1
 801412a:	4770      	bx	lr

0801412c <rcl_get_zero_initialized_context>:
 801412c:	4a03      	ldr	r2, [pc, #12]	@ (801413c <rcl_get_zero_initialized_context+0x10>)
 801412e:	4603      	mov	r3, r0
 8014130:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014134:	e883 0003 	stmia.w	r3, {r0, r1}
 8014138:	4618      	mov	r0, r3
 801413a:	4770      	bx	lr
 801413c:	0801b5b0 	.word	0x0801b5b0

08014140 <rcl_context_is_valid>:
 8014140:	b118      	cbz	r0, 801414a <rcl_context_is_valid+0xa>
 8014142:	6840      	ldr	r0, [r0, #4]
 8014144:	3800      	subs	r0, #0
 8014146:	bf18      	it	ne
 8014148:	2001      	movne	r0, #1
 801414a:	4770      	bx	lr

0801414c <__cleanup_context>:
 801414c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014150:	4606      	mov	r6, r0
 8014152:	6800      	ldr	r0, [r0, #0]
 8014154:	2300      	movs	r3, #0
 8014156:	6073      	str	r3, [r6, #4]
 8014158:	2800      	cmp	r0, #0
 801415a:	d049      	beq.n	80141f0 <__cleanup_context+0xa4>
 801415c:	6947      	ldr	r7, [r0, #20]
 801415e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8014162:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8014166:	b137      	cbz	r7, 8014176 <__cleanup_context+0x2a>
 8014168:	3014      	adds	r0, #20
 801416a:	f7f8 fd55 	bl	800cc18 <rcl_init_options_fini>
 801416e:	4607      	mov	r7, r0
 8014170:	2800      	cmp	r0, #0
 8014172:	d144      	bne.n	80141fe <__cleanup_context+0xb2>
 8014174:	6830      	ldr	r0, [r6, #0]
 8014176:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014178:	b143      	cbz	r3, 801418c <__cleanup_context+0x40>
 801417a:	3028      	adds	r0, #40	@ 0x28
 801417c:	f7fa f980 	bl	800e480 <rmw_context_fini>
 8014180:	b118      	cbz	r0, 801418a <__cleanup_context+0x3e>
 8014182:	2f00      	cmp	r7, #0
 8014184:	d03e      	beq.n	8014204 <__cleanup_context+0xb8>
 8014186:	f7f9 feb3 	bl	800def0 <rcutils_reset_error>
 801418a:	6830      	ldr	r0, [r6, #0]
 801418c:	6a03      	ldr	r3, [r0, #32]
 801418e:	b1db      	cbz	r3, 80141c8 <__cleanup_context+0x7c>
 8014190:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8014194:	2a01      	cmp	r2, #1
 8014196:	f17c 0100 	sbcs.w	r1, ip, #0
 801419a:	db11      	blt.n	80141c0 <__cleanup_context+0x74>
 801419c:	2400      	movs	r4, #0
 801419e:	4625      	mov	r5, r4
 80141a0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80141a4:	4649      	mov	r1, r9
 80141a6:	b1b8      	cbz	r0, 80141d8 <__cleanup_context+0x8c>
 80141a8:	47c0      	blx	r8
 80141aa:	6833      	ldr	r3, [r6, #0]
 80141ac:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80141b0:	3401      	adds	r4, #1
 80141b2:	f145 0500 	adc.w	r5, r5, #0
 80141b6:	4294      	cmp	r4, r2
 80141b8:	eb75 010c 	sbcs.w	r1, r5, ip
 80141bc:	6a1b      	ldr	r3, [r3, #32]
 80141be:	dbef      	blt.n	80141a0 <__cleanup_context+0x54>
 80141c0:	4618      	mov	r0, r3
 80141c2:	4649      	mov	r1, r9
 80141c4:	47c0      	blx	r8
 80141c6:	6830      	ldr	r0, [r6, #0]
 80141c8:	4649      	mov	r1, r9
 80141ca:	47c0      	blx	r8
 80141cc:	2300      	movs	r3, #0
 80141ce:	e9c6 3300 	strd	r3, r3, [r6]
 80141d2:	4638      	mov	r0, r7
 80141d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80141d8:	3401      	adds	r4, #1
 80141da:	f145 0500 	adc.w	r5, r5, #0
 80141de:	4294      	cmp	r4, r2
 80141e0:	eb75 010c 	sbcs.w	r1, r5, ip
 80141e4:	dbdc      	blt.n	80141a0 <__cleanup_context+0x54>
 80141e6:	4618      	mov	r0, r3
 80141e8:	4649      	mov	r1, r9
 80141ea:	47c0      	blx	r8
 80141ec:	6830      	ldr	r0, [r6, #0]
 80141ee:	e7eb      	b.n	80141c8 <__cleanup_context+0x7c>
 80141f0:	4607      	mov	r7, r0
 80141f2:	2300      	movs	r3, #0
 80141f4:	e9c6 3300 	strd	r3, r3, [r6]
 80141f8:	4638      	mov	r0, r7
 80141fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80141fe:	f7f9 fe77 	bl	800def0 <rcutils_reset_error>
 8014202:	e7b7      	b.n	8014174 <__cleanup_context+0x28>
 8014204:	f7ff ff7e 	bl	8014104 <rcl_convert_rmw_ret_to_rcl_ret>
 8014208:	4607      	mov	r7, r0
 801420a:	e7bc      	b.n	8014186 <__cleanup_context+0x3a>

0801420c <rcl_init>:
 801420c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014210:	1e05      	subs	r5, r0, #0
 8014212:	b09e      	sub	sp, #120	@ 0x78
 8014214:	460e      	mov	r6, r1
 8014216:	4690      	mov	r8, r2
 8014218:	461f      	mov	r7, r3
 801421a:	f340 809c 	ble.w	8014356 <rcl_init+0x14a>
 801421e:	2900      	cmp	r1, #0
 8014220:	f000 809c 	beq.w	801435c <rcl_init+0x150>
 8014224:	f1a1 0e04 	sub.w	lr, r1, #4
 8014228:	f04f 0c00 	mov.w	ip, #0
 801422c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8014230:	f10c 0c01 	add.w	ip, ip, #1
 8014234:	2c00      	cmp	r4, #0
 8014236:	f000 8091 	beq.w	801435c <rcl_init+0x150>
 801423a:	4565      	cmp	r5, ip
 801423c:	d1f6      	bne.n	801422c <rcl_init+0x20>
 801423e:	f1b8 0f00 	cmp.w	r8, #0
 8014242:	f000 808b 	beq.w	801435c <rcl_init+0x150>
 8014246:	f8d8 4000 	ldr.w	r4, [r8]
 801424a:	2c00      	cmp	r4, #0
 801424c:	f000 8086 	beq.w	801435c <rcl_init+0x150>
 8014250:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014252:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8014256:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801425a:	6823      	ldr	r3, [r4, #0]
 801425c:	f8cc 3000 	str.w	r3, [ip]
 8014260:	a819      	add	r0, sp, #100	@ 0x64
 8014262:	f7f9 fe1f 	bl	800dea4 <rcutils_allocator_is_valid>
 8014266:	2800      	cmp	r0, #0
 8014268:	d078      	beq.n	801435c <rcl_init+0x150>
 801426a:	2f00      	cmp	r7, #0
 801426c:	d076      	beq.n	801435c <rcl_init+0x150>
 801426e:	683b      	ldr	r3, [r7, #0]
 8014270:	2b00      	cmp	r3, #0
 8014272:	d178      	bne.n	8014366 <rcl_init+0x15a>
 8014274:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8014278:	2178      	movs	r1, #120	@ 0x78
 801427a:	2001      	movs	r0, #1
 801427c:	4798      	blx	r3
 801427e:	4604      	mov	r4, r0
 8014280:	6038      	str	r0, [r7, #0]
 8014282:	2800      	cmp	r0, #0
 8014284:	f000 80b6 	beq.w	80143f4 <rcl_init+0x1e8>
 8014288:	a802      	add	r0, sp, #8
 801428a:	f003 f895 	bl	80173b8 <rmw_get_zero_initialized_context>
 801428e:	a902      	add	r1, sp, #8
 8014290:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8014294:	2250      	movs	r2, #80	@ 0x50
 8014296:	ac19      	add	r4, sp, #100	@ 0x64
 8014298:	f005 ff5f 	bl	801a15a <memcpy>
 801429c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801429e:	f8d7 e000 	ldr.w	lr, [r7]
 80142a2:	46f4      	mov	ip, lr
 80142a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80142a8:	6823      	ldr	r3, [r4, #0]
 80142aa:	f8cc 3000 	str.w	r3, [ip]
 80142ae:	f10e 0114 	add.w	r1, lr, #20
 80142b2:	4640      	mov	r0, r8
 80142b4:	f7f8 fcda 	bl	800cc6c <rcl_init_options_copy>
 80142b8:	4604      	mov	r4, r0
 80142ba:	2800      	cmp	r0, #0
 80142bc:	d144      	bne.n	8014348 <rcl_init+0x13c>
 80142be:	f8d7 9000 	ldr.w	r9, [r7]
 80142c2:	ea4f 78e5 	mov.w	r8, r5, asr #31
 80142c6:	f8c9 0020 	str.w	r0, [r9, #32]
 80142ca:	f8c9 5018 	str.w	r5, [r9, #24]
 80142ce:	f8c9 801c 	str.w	r8, [r9, #28]
 80142d2:	2d00      	cmp	r5, #0
 80142d4:	d04e      	beq.n	8014374 <rcl_init+0x168>
 80142d6:	2e00      	cmp	r6, #0
 80142d8:	d04c      	beq.n	8014374 <rcl_init+0x168>
 80142da:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80142de:	2104      	movs	r1, #4
 80142e0:	4628      	mov	r0, r5
 80142e2:	4798      	blx	r3
 80142e4:	f8c9 0020 	str.w	r0, [r9, #32]
 80142e8:	f8d7 9000 	ldr.w	r9, [r7]
 80142ec:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80142f0:	46ca      	mov	sl, r9
 80142f2:	b343      	cbz	r3, 8014346 <rcl_init+0x13a>
 80142f4:	2d01      	cmp	r5, #1
 80142f6:	f178 0300 	sbcs.w	r3, r8, #0
 80142fa:	db3b      	blt.n	8014374 <rcl_init+0x168>
 80142fc:	2400      	movs	r4, #0
 80142fe:	3e04      	subs	r6, #4
 8014300:	46a1      	mov	r9, r4
 8014302:	e00b      	b.n	801431c <rcl_init+0x110>
 8014304:	6831      	ldr	r1, [r6, #0]
 8014306:	f005 ff28 	bl	801a15a <memcpy>
 801430a:	3401      	adds	r4, #1
 801430c:	f149 0900 	adc.w	r9, r9, #0
 8014310:	45c8      	cmp	r8, r9
 8014312:	bf08      	it	eq
 8014314:	42a5      	cmpeq	r5, r4
 8014316:	d02b      	beq.n	8014370 <rcl_init+0x164>
 8014318:	f8d7 a000 	ldr.w	sl, [r7]
 801431c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8014320:	f7eb ff88 	bl	8000234 <strlen>
 8014324:	1c42      	adds	r2, r0, #1
 8014326:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014328:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801432a:	f8da a020 	ldr.w	sl, [sl, #32]
 801432e:	9201      	str	r2, [sp, #4]
 8014330:	4610      	mov	r0, r2
 8014332:	4798      	blx	r3
 8014334:	683b      	ldr	r3, [r7, #0]
 8014336:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801433a:	6a1b      	ldr	r3, [r3, #32]
 801433c:	9a01      	ldr	r2, [sp, #4]
 801433e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014342:	2800      	cmp	r0, #0
 8014344:	d1de      	bne.n	8014304 <rcl_init+0xf8>
 8014346:	240a      	movs	r4, #10
 8014348:	4638      	mov	r0, r7
 801434a:	f7ff feff 	bl	801414c <__cleanup_context>
 801434e:	4620      	mov	r0, r4
 8014350:	b01e      	add	sp, #120	@ 0x78
 8014352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014356:	2900      	cmp	r1, #0
 8014358:	f43f af71 	beq.w	801423e <rcl_init+0x32>
 801435c:	240b      	movs	r4, #11
 801435e:	4620      	mov	r0, r4
 8014360:	b01e      	add	sp, #120	@ 0x78
 8014362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014366:	2464      	movs	r4, #100	@ 0x64
 8014368:	4620      	mov	r0, r4
 801436a:	b01e      	add	sp, #120	@ 0x78
 801436c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014370:	f8d7 9000 	ldr.w	r9, [r7]
 8014374:	4926      	ldr	r1, [pc, #152]	@ (8014410 <rcl_init+0x204>)
 8014376:	680b      	ldr	r3, [r1, #0]
 8014378:	3301      	adds	r3, #1
 801437a:	d036      	beq.n	80143ea <rcl_init+0x1de>
 801437c:	600b      	str	r3, [r1, #0]
 801437e:	461a      	mov	r2, r3
 8014380:	2400      	movs	r4, #0
 8014382:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8014386:	607b      	str	r3, [r7, #4]
 8014388:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801438a:	3301      	adds	r3, #1
 801438c:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8014390:	d034      	beq.n	80143fc <rcl_init+0x1f0>
 8014392:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8014396:	b93b      	cbnz	r3, 80143a8 <rcl_init+0x19c>
 8014398:	3030      	adds	r0, #48	@ 0x30
 801439a:	f000 f83b 	bl	8014414 <rcl_get_localhost_only>
 801439e:	4604      	mov	r4, r0
 80143a0:	2800      	cmp	r0, #0
 80143a2:	d1d1      	bne.n	8014348 <rcl_init+0x13c>
 80143a4:	683b      	ldr	r3, [r7, #0]
 80143a6:	6958      	ldr	r0, [r3, #20]
 80143a8:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 80143aa:	aa18      	add	r2, sp, #96	@ 0x60
 80143ac:	a917      	add	r1, sp, #92	@ 0x5c
 80143ae:	f001 f94d 	bl	801564c <rcl_validate_enclave_name>
 80143b2:	4604      	mov	r4, r0
 80143b4:	2800      	cmp	r0, #0
 80143b6:	d1c7      	bne.n	8014348 <rcl_init+0x13c>
 80143b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80143ba:	b9eb      	cbnz	r3, 80143f8 <rcl_init+0x1ec>
 80143bc:	6839      	ldr	r1, [r7, #0]
 80143be:	694b      	ldr	r3, [r1, #20]
 80143c0:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80143c2:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80143c6:	f000 fb3f 	bl	8014a48 <rcl_get_security_options_from_environment>
 80143ca:	4604      	mov	r4, r0
 80143cc:	2800      	cmp	r0, #0
 80143ce:	d1bb      	bne.n	8014348 <rcl_init+0x13c>
 80143d0:	6839      	ldr	r1, [r7, #0]
 80143d2:	6948      	ldr	r0, [r1, #20]
 80143d4:	3128      	adds	r1, #40	@ 0x28
 80143d6:	3018      	adds	r0, #24
 80143d8:	f7f9 ff1c 	bl	800e214 <rmw_init>
 80143dc:	4604      	mov	r4, r0
 80143de:	2800      	cmp	r0, #0
 80143e0:	d0bd      	beq.n	801435e <rcl_init+0x152>
 80143e2:	f7ff fe8f 	bl	8014104 <rcl_convert_rmw_ret_to_rcl_ret>
 80143e6:	4604      	mov	r4, r0
 80143e8:	e7ae      	b.n	8014348 <rcl_init+0x13c>
 80143ea:	2201      	movs	r2, #1
 80143ec:	461c      	mov	r4, r3
 80143ee:	600a      	str	r2, [r1, #0]
 80143f0:	4613      	mov	r3, r2
 80143f2:	e7c6      	b.n	8014382 <rcl_init+0x176>
 80143f4:	240a      	movs	r4, #10
 80143f6:	e7b2      	b.n	801435e <rcl_init+0x152>
 80143f8:	2401      	movs	r4, #1
 80143fa:	e7a5      	b.n	8014348 <rcl_init+0x13c>
 80143fc:	3024      	adds	r0, #36	@ 0x24
 80143fe:	f004 fe21 	bl	8019044 <rcl_get_default_domain_id>
 8014402:	4604      	mov	r4, r0
 8014404:	2800      	cmp	r0, #0
 8014406:	d19f      	bne.n	8014348 <rcl_init+0x13c>
 8014408:	683b      	ldr	r3, [r7, #0]
 801440a:	6958      	ldr	r0, [r3, #20]
 801440c:	e7c1      	b.n	8014392 <rcl_init+0x186>
 801440e:	bf00      	nop
 8014410:	2000ae70 	.word	0x2000ae70

08014414 <rcl_get_localhost_only>:
 8014414:	b510      	push	{r4, lr}
 8014416:	b082      	sub	sp, #8
 8014418:	2300      	movs	r3, #0
 801441a:	9301      	str	r3, [sp, #4]
 801441c:	b1b8      	cbz	r0, 801444e <rcl_get_localhost_only+0x3a>
 801441e:	4604      	mov	r4, r0
 8014420:	a901      	add	r1, sp, #4
 8014422:	480c      	ldr	r0, [pc, #48]	@ (8014454 <rcl_get_localhost_only+0x40>)
 8014424:	f002 fd1c 	bl	8016e60 <rcutils_get_env>
 8014428:	b110      	cbz	r0, 8014430 <rcl_get_localhost_only+0x1c>
 801442a:	2001      	movs	r0, #1
 801442c:	b002      	add	sp, #8
 801442e:	bd10      	pop	{r4, pc}
 8014430:	9b01      	ldr	r3, [sp, #4]
 8014432:	b113      	cbz	r3, 801443a <rcl_get_localhost_only+0x26>
 8014434:	781a      	ldrb	r2, [r3, #0]
 8014436:	2a31      	cmp	r2, #49	@ 0x31
 8014438:	d004      	beq.n	8014444 <rcl_get_localhost_only+0x30>
 801443a:	2302      	movs	r3, #2
 801443c:	2000      	movs	r0, #0
 801443e:	7023      	strb	r3, [r4, #0]
 8014440:	b002      	add	sp, #8
 8014442:	bd10      	pop	{r4, pc}
 8014444:	785b      	ldrb	r3, [r3, #1]
 8014446:	2b00      	cmp	r3, #0
 8014448:	d1f7      	bne.n	801443a <rcl_get_localhost_only+0x26>
 801444a:	2301      	movs	r3, #1
 801444c:	e7f6      	b.n	801443c <rcl_get_localhost_only+0x28>
 801444e:	200b      	movs	r0, #11
 8014450:	b002      	add	sp, #8
 8014452:	bd10      	pop	{r4, pc}
 8014454:	0801b5b8 	.word	0x0801b5b8

08014458 <rcl_get_zero_initialized_node>:
 8014458:	4a03      	ldr	r2, [pc, #12]	@ (8014468 <rcl_get_zero_initialized_node+0x10>)
 801445a:	4603      	mov	r3, r0
 801445c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014460:	e883 0003 	stmia.w	r3, {r0, r1}
 8014464:	4618      	mov	r0, r3
 8014466:	4770      	bx	lr
 8014468:	0801b5d4 	.word	0x0801b5d4

0801446c <rcl_node_init>:
 801446c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014470:	b0a9      	sub	sp, #164	@ 0xa4
 8014472:	4604      	mov	r4, r0
 8014474:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8014478:	a823      	add	r0, sp, #140	@ 0x8c
 801447a:	460e      	mov	r6, r1
 801447c:	4615      	mov	r5, r2
 801447e:	461f      	mov	r7, r3
 8014480:	f005 f854 	bl	801952c <rcl_guard_condition_get_default_options>
 8014484:	f1b8 0f00 	cmp.w	r8, #0
 8014488:	f000 80e6 	beq.w	8014658 <rcl_node_init+0x1ec>
 801448c:	4640      	mov	r0, r8
 801448e:	f7f9 fd09 	bl	800dea4 <rcutils_allocator_is_valid>
 8014492:	2800      	cmp	r0, #0
 8014494:	f000 80e0 	beq.w	8014658 <rcl_node_init+0x1ec>
 8014498:	2e00      	cmp	r6, #0
 801449a:	f000 80dd 	beq.w	8014658 <rcl_node_init+0x1ec>
 801449e:	2d00      	cmp	r5, #0
 80144a0:	f000 80da 	beq.w	8014658 <rcl_node_init+0x1ec>
 80144a4:	2c00      	cmp	r4, #0
 80144a6:	f000 80d7 	beq.w	8014658 <rcl_node_init+0x1ec>
 80144aa:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80144ae:	f1b9 0f00 	cmp.w	r9, #0
 80144b2:	f040 80fd 	bne.w	80146b0 <rcl_node_init+0x244>
 80144b6:	2f00      	cmp	r7, #0
 80144b8:	f000 80ce 	beq.w	8014658 <rcl_node_init+0x1ec>
 80144bc:	4638      	mov	r0, r7
 80144be:	f7ff fe3f 	bl	8014140 <rcl_context_is_valid>
 80144c2:	4682      	mov	sl, r0
 80144c4:	2800      	cmp	r0, #0
 80144c6:	f000 80cd 	beq.w	8014664 <rcl_node_init+0x1f8>
 80144ca:	464a      	mov	r2, r9
 80144cc:	a922      	add	r1, sp, #136	@ 0x88
 80144ce:	4630      	mov	r0, r6
 80144d0:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 80144d4:	f003 f90e 	bl	80176f4 <rmw_validate_node_name>
 80144d8:	4681      	mov	r9, r0
 80144da:	2800      	cmp	r0, #0
 80144dc:	f040 80be 	bne.w	801465c <rcl_node_init+0x1f0>
 80144e0:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80144e2:	2800      	cmp	r0, #0
 80144e4:	f040 80f0 	bne.w	80146c8 <rcl_node_init+0x25c>
 80144e8:	4628      	mov	r0, r5
 80144ea:	f7eb fea3 	bl	8000234 <strlen>
 80144ee:	2800      	cmp	r0, #0
 80144f0:	f040 80bb 	bne.w	801466a <rcl_node_init+0x1fe>
 80144f4:	4d7c      	ldr	r5, [pc, #496]	@ (80146e8 <rcl_node_init+0x27c>)
 80144f6:	a922      	add	r1, sp, #136	@ 0x88
 80144f8:	2200      	movs	r2, #0
 80144fa:	4628      	mov	r0, r5
 80144fc:	f003 f8dc 	bl	80176b8 <rmw_validate_namespace>
 8014500:	4681      	mov	r9, r0
 8014502:	2800      	cmp	r0, #0
 8014504:	f040 80aa 	bne.w	801465c <rcl_node_init+0x1f0>
 8014508:	4682      	mov	sl, r0
 801450a:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801450c:	2800      	cmp	r0, #0
 801450e:	f040 80e0 	bne.w	80146d2 <rcl_node_init+0x266>
 8014512:	f8d8 3000 	ldr.w	r3, [r8]
 8014516:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801451a:	2078      	movs	r0, #120	@ 0x78
 801451c:	4798      	blx	r3
 801451e:	4681      	mov	r9, r0
 8014520:	6060      	str	r0, [r4, #4]
 8014522:	2800      	cmp	r0, #0
 8014524:	f000 80ca 	beq.w	80146bc <rcl_node_init+0x250>
 8014528:	2200      	movs	r2, #0
 801452a:	2300      	movs	r3, #0
 801452c:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8014530:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8014534:	a808      	add	r0, sp, #32
 8014536:	f000 f907 	bl	8014748 <rcl_node_get_default_options>
 801453a:	a908      	add	r1, sp, #32
 801453c:	4648      	mov	r0, r9
 801453e:	2268      	movs	r2, #104	@ 0x68
 8014540:	f005 fe0b 	bl	801a15a <memcpy>
 8014544:	6861      	ldr	r1, [r4, #4]
 8014546:	6027      	str	r7, [r4, #0]
 8014548:	4640      	mov	r0, r8
 801454a:	f000 f90b 	bl	8014764 <rcl_node_options_copy>
 801454e:	2800      	cmp	r0, #0
 8014550:	d158      	bne.n	8014604 <rcl_node_init+0x198>
 8014552:	4628      	mov	r0, r5
 8014554:	f7eb fe6e 	bl	8000234 <strlen>
 8014558:	4428      	add	r0, r5
 801455a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801455e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8014562:	2b2f      	cmp	r3, #47	@ 0x2f
 8014564:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014568:	9300      	str	r3, [sp, #0]
 801456a:	bf0c      	ite	eq
 801456c:	4b5f      	ldreq	r3, [pc, #380]	@ (80146ec <rcl_node_init+0x280>)
 801456e:	4b60      	ldrne	r3, [pc, #384]	@ (80146f0 <rcl_node_init+0x284>)
 8014570:	9302      	str	r3, [sp, #8]
 8014572:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014576:	9301      	str	r3, [sp, #4]
 8014578:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801457c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8014580:	f002 fc96 	bl	8016eb0 <rcutils_format_string_limit>
 8014584:	6823      	ldr	r3, [r4, #0]
 8014586:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 801458a:	6818      	ldr	r0, [r3, #0]
 801458c:	4631      	mov	r1, r6
 801458e:	3028      	adds	r0, #40	@ 0x28
 8014590:	462a      	mov	r2, r5
 8014592:	6866      	ldr	r6, [r4, #4]
 8014594:	f7fa f820 	bl	800e5d8 <rmw_create_node>
 8014598:	6863      	ldr	r3, [r4, #4]
 801459a:	66b0      	str	r0, [r6, #104]	@ 0x68
 801459c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801459e:	2800      	cmp	r0, #0
 80145a0:	d032      	beq.n	8014608 <rcl_node_init+0x19c>
 80145a2:	f7fa f8ad 	bl	800e700 <rmw_node_get_graph_guard_condition>
 80145a6:	4681      	mov	r9, r0
 80145a8:	b360      	cbz	r0, 8014604 <rcl_node_init+0x198>
 80145aa:	f8d8 3000 	ldr.w	r3, [r8]
 80145ae:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80145b2:	6866      	ldr	r6, [r4, #4]
 80145b4:	2008      	movs	r0, #8
 80145b6:	4798      	blx	r3
 80145b8:	6863      	ldr	r3, [r4, #4]
 80145ba:	66f0      	str	r0, [r6, #108]	@ 0x6c
 80145bc:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 80145c0:	f1bb 0f00 	cmp.w	fp, #0
 80145c4:	d020      	beq.n	8014608 <rcl_node_init+0x19c>
 80145c6:	a806      	add	r0, sp, #24
 80145c8:	f004 fed4 	bl	8019374 <rcl_get_zero_initialized_guard_condition>
 80145cc:	a806      	add	r0, sp, #24
 80145ce:	c803      	ldmia	r0, {r0, r1}
 80145d0:	6863      	ldr	r3, [r4, #4]
 80145d2:	46c4      	mov	ip, r8
 80145d4:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 80145d8:	e88b 0003 	stmia.w	fp, {r0, r1}
 80145dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80145e0:	ae23      	add	r6, sp, #140	@ 0x8c
 80145e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80145e4:	f8dc 3000 	ldr.w	r3, [ip]
 80145e8:	6033      	str	r3, [r6, #0]
 80145ea:	ab28      	add	r3, sp, #160	@ 0xa0
 80145ec:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80145f0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80145f4:	4649      	mov	r1, r9
 80145f6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80145f8:	463a      	mov	r2, r7
 80145fa:	4670      	mov	r0, lr
 80145fc:	f004 ff10 	bl	8019420 <rcl_guard_condition_init_from_rmw>
 8014600:	4681      	mov	r9, r0
 8014602:	b328      	cbz	r0, 8014650 <rcl_node_init+0x1e4>
 8014604:	6863      	ldr	r3, [r4, #4]
 8014606:	b1f3      	cbz	r3, 8014646 <rcl_node_init+0x1da>
 8014608:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801460a:	b128      	cbz	r0, 8014618 <rcl_node_init+0x1ac>
 801460c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014610:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014614:	4798      	blx	r3
 8014616:	6863      	ldr	r3, [r4, #4]
 8014618:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801461a:	b110      	cbz	r0, 8014622 <rcl_node_init+0x1b6>
 801461c:	f7f9 fff4 	bl	800e608 <rmw_destroy_node>
 8014620:	6863      	ldr	r3, [r4, #4]
 8014622:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8014624:	b148      	cbz	r0, 801463a <rcl_node_init+0x1ce>
 8014626:	f004 ff5b 	bl	80194e0 <rcl_guard_condition_fini>
 801462a:	6863      	ldr	r3, [r4, #4]
 801462c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014630:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8014632:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014636:	4798      	blx	r3
 8014638:	6863      	ldr	r3, [r4, #4]
 801463a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801463e:	4618      	mov	r0, r3
 8014640:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014644:	4798      	blx	r3
 8014646:	2300      	movs	r3, #0
 8014648:	e9c4 3300 	strd	r3, r3, [r4]
 801464c:	f04f 0901 	mov.w	r9, #1
 8014650:	f1ba 0f00 	cmp.w	sl, #0
 8014654:	d125      	bne.n	80146a2 <rcl_node_init+0x236>
 8014656:	e001      	b.n	801465c <rcl_node_init+0x1f0>
 8014658:	f04f 090b 	mov.w	r9, #11
 801465c:	4648      	mov	r0, r9
 801465e:	b029      	add	sp, #164	@ 0xa4
 8014660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014664:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8014668:	e7f8      	b.n	801465c <rcl_node_init+0x1f0>
 801466a:	782b      	ldrb	r3, [r5, #0]
 801466c:	2b2f      	cmp	r3, #47	@ 0x2f
 801466e:	f43f af42 	beq.w	80144f6 <rcl_node_init+0x8a>
 8014672:	9503      	str	r5, [sp, #12]
 8014674:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014678:	9300      	str	r3, [sp, #0]
 801467a:	4b1e      	ldr	r3, [pc, #120]	@ (80146f4 <rcl_node_init+0x288>)
 801467c:	9302      	str	r3, [sp, #8]
 801467e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014682:	9301      	str	r3, [sp, #4]
 8014684:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8014688:	f002 fc12 	bl	8016eb0 <rcutils_format_string_limit>
 801468c:	4605      	mov	r5, r0
 801468e:	b340      	cbz	r0, 80146e2 <rcl_node_init+0x276>
 8014690:	2200      	movs	r2, #0
 8014692:	a922      	add	r1, sp, #136	@ 0x88
 8014694:	9222      	str	r2, [sp, #136]	@ 0x88
 8014696:	f003 f80f 	bl	80176b8 <rmw_validate_namespace>
 801469a:	4681      	mov	r9, r0
 801469c:	2800      	cmp	r0, #0
 801469e:	f43f af34 	beq.w	801450a <rcl_node_init+0x9e>
 80146a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80146a6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80146aa:	4628      	mov	r0, r5
 80146ac:	4798      	blx	r3
 80146ae:	e7d5      	b.n	801465c <rcl_node_init+0x1f0>
 80146b0:	f04f 0964 	mov.w	r9, #100	@ 0x64
 80146b4:	4648      	mov	r0, r9
 80146b6:	b029      	add	sp, #164	@ 0xa4
 80146b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146bc:	f04f 090a 	mov.w	r9, #10
 80146c0:	f1ba 0f00 	cmp.w	sl, #0
 80146c4:	d1ed      	bne.n	80146a2 <rcl_node_init+0x236>
 80146c6:	e7c9      	b.n	801465c <rcl_node_init+0x1f0>
 80146c8:	f003 f866 	bl	8017798 <rmw_node_name_validation_result_string>
 80146cc:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 80146d0:	e7c4      	b.n	801465c <rcl_node_init+0x1f0>
 80146d2:	f003 f803 	bl	80176dc <rmw_namespace_validation_result_string>
 80146d6:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 80146da:	f1ba 0f00 	cmp.w	sl, #0
 80146de:	d1e0      	bne.n	80146a2 <rcl_node_init+0x236>
 80146e0:	e7bc      	b.n	801465c <rcl_node_init+0x1f0>
 80146e2:	f04f 090a 	mov.w	r9, #10
 80146e6:	e7b9      	b.n	801465c <rcl_node_init+0x1f0>
 80146e8:	0801b208 	.word	0x0801b208
 80146ec:	0801b254 	.word	0x0801b254
 80146f0:	0801b20c 	.word	0x0801b20c
 80146f4:	0801b5d0 	.word	0x0801b5d0

080146f8 <rcl_node_is_valid>:
 80146f8:	b130      	cbz	r0, 8014708 <rcl_node_is_valid+0x10>
 80146fa:	6843      	ldr	r3, [r0, #4]
 80146fc:	b123      	cbz	r3, 8014708 <rcl_node_is_valid+0x10>
 80146fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014700:	b113      	cbz	r3, 8014708 <rcl_node_is_valid+0x10>
 8014702:	6800      	ldr	r0, [r0, #0]
 8014704:	f7ff bd1c 	b.w	8014140 <rcl_context_is_valid>
 8014708:	2000      	movs	r0, #0
 801470a:	4770      	bx	lr

0801470c <rcl_node_get_name>:
 801470c:	b120      	cbz	r0, 8014718 <rcl_node_get_name+0xc>
 801470e:	6840      	ldr	r0, [r0, #4]
 8014710:	b110      	cbz	r0, 8014718 <rcl_node_get_name+0xc>
 8014712:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014714:	b100      	cbz	r0, 8014718 <rcl_node_get_name+0xc>
 8014716:	6880      	ldr	r0, [r0, #8]
 8014718:	4770      	bx	lr
 801471a:	bf00      	nop

0801471c <rcl_node_get_namespace>:
 801471c:	b120      	cbz	r0, 8014728 <rcl_node_get_namespace+0xc>
 801471e:	6840      	ldr	r0, [r0, #4]
 8014720:	b110      	cbz	r0, 8014728 <rcl_node_get_namespace+0xc>
 8014722:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014724:	b100      	cbz	r0, 8014728 <rcl_node_get_namespace+0xc>
 8014726:	68c0      	ldr	r0, [r0, #12]
 8014728:	4770      	bx	lr
 801472a:	bf00      	nop

0801472c <rcl_node_get_options>:
 801472c:	b128      	cbz	r0, 801473a <rcl_node_get_options+0xe>
 801472e:	6840      	ldr	r0, [r0, #4]
 8014730:	b118      	cbz	r0, 801473a <rcl_node_get_options+0xe>
 8014732:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8014734:	2b00      	cmp	r3, #0
 8014736:	bf08      	it	eq
 8014738:	2000      	moveq	r0, #0
 801473a:	4770      	bx	lr

0801473c <rcl_node_get_rmw_handle>:
 801473c:	b110      	cbz	r0, 8014744 <rcl_node_get_rmw_handle+0x8>
 801473e:	6840      	ldr	r0, [r0, #4]
 8014740:	b100      	cbz	r0, 8014744 <rcl_node_get_rmw_handle+0x8>
 8014742:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014744:	4770      	bx	lr
 8014746:	bf00      	nop

08014748 <rcl_node_get_default_options>:
 8014748:	b510      	push	{r4, lr}
 801474a:	2268      	movs	r2, #104	@ 0x68
 801474c:	4604      	mov	r4, r0
 801474e:	2100      	movs	r1, #0
 8014750:	f005 fc3a 	bl	8019fc8 <memset>
 8014754:	4620      	mov	r0, r4
 8014756:	f7f9 fb97 	bl	800de88 <rcutils_get_default_allocator>
 801475a:	2301      	movs	r3, #1
 801475c:	7523      	strb	r3, [r4, #20]
 801475e:	4620      	mov	r0, r4
 8014760:	bd10      	pop	{r4, pc}
 8014762:	bf00      	nop

08014764 <rcl_node_options_copy>:
 8014764:	b1d0      	cbz	r0, 801479c <rcl_node_options_copy+0x38>
 8014766:	b570      	push	{r4, r5, r6, lr}
 8014768:	460c      	mov	r4, r1
 801476a:	b1a9      	cbz	r1, 8014798 <rcl_node_options_copy+0x34>
 801476c:	4288      	cmp	r0, r1
 801476e:	4684      	mov	ip, r0
 8014770:	d012      	beq.n	8014798 <rcl_node_options_copy+0x34>
 8014772:	4605      	mov	r5, r0
 8014774:	8a86      	ldrh	r6, [r0, #20]
 8014776:	468e      	mov	lr, r1
 8014778:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801477a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801477e:	682b      	ldr	r3, [r5, #0]
 8014780:	f8ce 3000 	str.w	r3, [lr]
 8014784:	f10c 0118 	add.w	r1, ip, #24
 8014788:	2250      	movs	r2, #80	@ 0x50
 801478a:	82a6      	strh	r6, [r4, #20]
 801478c:	f104 0018 	add.w	r0, r4, #24
 8014790:	f005 fce3 	bl	801a15a <memcpy>
 8014794:	2000      	movs	r0, #0
 8014796:	bd70      	pop	{r4, r5, r6, pc}
 8014798:	200b      	movs	r0, #11
 801479a:	bd70      	pop	{r4, r5, r6, pc}
 801479c:	200b      	movs	r0, #11
 801479e:	4770      	bx	lr

080147a0 <rcl_node_resolve_name>:
 80147a0:	b082      	sub	sp, #8
 80147a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147a6:	b091      	sub	sp, #68	@ 0x44
 80147a8:	ac1a      	add	r4, sp, #104	@ 0x68
 80147aa:	e884 000c 	stmia.w	r4, {r2, r3}
 80147ae:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 80147b2:	2800      	cmp	r0, #0
 80147b4:	d03b      	beq.n	801482e <rcl_node_resolve_name+0x8e>
 80147b6:	460c      	mov	r4, r1
 80147b8:	4605      	mov	r5, r0
 80147ba:	f7ff ffb7 	bl	801472c <rcl_node_get_options>
 80147be:	2800      	cmp	r0, #0
 80147c0:	d037      	beq.n	8014832 <rcl_node_resolve_name+0x92>
 80147c2:	4628      	mov	r0, r5
 80147c4:	f7ff ffa2 	bl	801470c <rcl_node_get_name>
 80147c8:	4606      	mov	r6, r0
 80147ca:	4628      	mov	r0, r5
 80147cc:	f7ff ffa6 	bl	801471c <rcl_node_get_namespace>
 80147d0:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 80147d4:	4681      	mov	r9, r0
 80147d6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80147da:	ad0b      	add	r5, sp, #44	@ 0x2c
 80147dc:	46ac      	mov	ip, r5
 80147de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80147e2:	f8de 3000 	ldr.w	r3, [lr]
 80147e6:	f8cc 3000 	str.w	r3, [ip]
 80147ea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80147ec:	b1fb      	cbz	r3, 801482e <rcl_node_resolve_name+0x8e>
 80147ee:	468a      	mov	sl, r1
 80147f0:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 80147f4:	f002 fcb4 	bl	8017160 <rcutils_get_zero_initialized_string_map>
 80147f8:	ab10      	add	r3, sp, #64	@ 0x40
 80147fa:	9008      	str	r0, [sp, #32]
 80147fc:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8014800:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014804:	2100      	movs	r1, #0
 8014806:	e895 000c 	ldmia.w	r5, {r2, r3}
 801480a:	a808      	add	r0, sp, #32
 801480c:	f002 fd20 	bl	8017250 <rcutils_string_map_init>
 8014810:	4607      	mov	r7, r0
 8014812:	b180      	cbz	r0, 8014836 <rcl_node_resolve_name+0x96>
 8014814:	f7f9 fb54 	bl	800dec0 <rcutils_get_error_string>
 8014818:	f7f9 fb6a 	bl	800def0 <rcutils_reset_error>
 801481c:	2f0a      	cmp	r7, #10
 801481e:	bf18      	it	ne
 8014820:	2701      	movne	r7, #1
 8014822:	4638      	mov	r0, r7
 8014824:	b011      	add	sp, #68	@ 0x44
 8014826:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801482a:	b002      	add	sp, #8
 801482c:	4770      	bx	lr
 801482e:	270b      	movs	r7, #11
 8014830:	e7f7      	b.n	8014822 <rcl_node_resolve_name+0x82>
 8014832:	2701      	movs	r7, #1
 8014834:	e7f5      	b.n	8014822 <rcl_node_resolve_name+0x82>
 8014836:	9009      	str	r0, [sp, #36]	@ 0x24
 8014838:	9007      	str	r0, [sp, #28]
 801483a:	a808      	add	r0, sp, #32
 801483c:	f004 fd94 	bl	8019368 <rcl_get_default_topic_name_substitutions>
 8014840:	4607      	mov	r7, r0
 8014842:	b1a8      	cbz	r0, 8014870 <rcl_node_resolve_name+0xd0>
 8014844:	280a      	cmp	r0, #10
 8014846:	9c07      	ldr	r4, [sp, #28]
 8014848:	d000      	beq.n	801484c <rcl_node_resolve_name+0xac>
 801484a:	2701      	movs	r7, #1
 801484c:	a808      	add	r0, sp, #32
 801484e:	f002 fd3f 	bl	80172d0 <rcutils_string_map_fini>
 8014852:	2800      	cmp	r0, #0
 8014854:	d13d      	bne.n	80148d2 <rcl_node_resolve_name+0x132>
 8014856:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014858:	4659      	mov	r1, fp
 801485a:	47d0      	blx	sl
 801485c:	4659      	mov	r1, fp
 801485e:	4620      	mov	r0, r4
 8014860:	47d0      	blx	sl
 8014862:	f1b8 0f00 	cmp.w	r8, #0
 8014866:	d0dc      	beq.n	8014822 <rcl_node_resolve_name+0x82>
 8014868:	2f67      	cmp	r7, #103	@ 0x67
 801486a:	bf08      	it	eq
 801486c:	2768      	moveq	r7, #104	@ 0x68
 801486e:	e7d8      	b.n	8014822 <rcl_node_resolve_name+0x82>
 8014870:	ab09      	add	r3, sp, #36	@ 0x24
 8014872:	9305      	str	r3, [sp, #20]
 8014874:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014876:	46ec      	mov	ip, sp
 8014878:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801487c:	682b      	ldr	r3, [r5, #0]
 801487e:	f8cc 3000 	str.w	r3, [ip]
 8014882:	464a      	mov	r2, r9
 8014884:	4631      	mov	r1, r6
 8014886:	4620      	mov	r0, r4
 8014888:	ab08      	add	r3, sp, #32
 801488a:	f004 fc0f 	bl	80190ac <rcl_expand_topic_name>
 801488e:	4607      	mov	r7, r0
 8014890:	b9b8      	cbnz	r0, 80148c2 <rcl_node_resolve_name+0x122>
 8014892:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8014894:	9009      	str	r0, [sp, #36]	@ 0x24
 8014896:	4602      	mov	r2, r0
 8014898:	a90a      	add	r1, sp, #40	@ 0x28
 801489a:	4620      	mov	r0, r4
 801489c:	f002 fe48 	bl	8017530 <rmw_validate_full_topic_name>
 80148a0:	b988      	cbnz	r0, 80148c6 <rcl_node_resolve_name+0x126>
 80148a2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80148a4:	b9d5      	cbnz	r5, 80148dc <rcl_node_resolve_name+0x13c>
 80148a6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80148a8:	a808      	add	r0, sp, #32
 80148aa:	601c      	str	r4, [r3, #0]
 80148ac:	f002 fd10 	bl	80172d0 <rcutils_string_map_fini>
 80148b0:	4607      	mov	r7, r0
 80148b2:	b1a8      	cbz	r0, 80148e0 <rcl_node_resolve_name+0x140>
 80148b4:	f7f9 fb04 	bl	800dec0 <rcutils_get_error_string>
 80148b8:	462c      	mov	r4, r5
 80148ba:	f7f9 fb19 	bl	800def0 <rcutils_reset_error>
 80148be:	2701      	movs	r7, #1
 80148c0:	e7c9      	b.n	8014856 <rcl_node_resolve_name+0xb6>
 80148c2:	9c07      	ldr	r4, [sp, #28]
 80148c4:	e7c2      	b.n	801484c <rcl_node_resolve_name+0xac>
 80148c6:	f7f9 fafb 	bl	800dec0 <rcutils_get_error_string>
 80148ca:	2701      	movs	r7, #1
 80148cc:	f7f9 fb10 	bl	800def0 <rcutils_reset_error>
 80148d0:	e7bc      	b.n	801484c <rcl_node_resolve_name+0xac>
 80148d2:	f7f9 faf5 	bl	800dec0 <rcutils_get_error_string>
 80148d6:	f7f9 fb0b 	bl	800def0 <rcutils_reset_error>
 80148da:	e7bc      	b.n	8014856 <rcl_node_resolve_name+0xb6>
 80148dc:	2767      	movs	r7, #103	@ 0x67
 80148de:	e7b5      	b.n	801484c <rcl_node_resolve_name+0xac>
 80148e0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80148e2:	4659      	mov	r1, fp
 80148e4:	47d0      	blx	sl
 80148e6:	4659      	mov	r1, fp
 80148e8:	4638      	mov	r0, r7
 80148ea:	47d0      	blx	sl
 80148ec:	e799      	b.n	8014822 <rcl_node_resolve_name+0x82>
 80148ee:	bf00      	nop

080148f0 <exact_match_lookup>:
 80148f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80148f2:	f102 0708 	add.w	r7, r2, #8
 80148f6:	460b      	mov	r3, r1
 80148f8:	4614      	mov	r4, r2
 80148fa:	4606      	mov	r6, r0
 80148fc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8014900:	b085      	sub	sp, #20
 8014902:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014906:	4618      	mov	r0, r3
 8014908:	4919      	ldr	r1, [pc, #100]	@ (8014970 <exact_match_lookup+0x80>)
 801490a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801490e:	f002 fac1 	bl	8016e94 <rcutils_join_path>
 8014912:	7833      	ldrb	r3, [r6, #0]
 8014914:	2b2f      	cmp	r3, #47	@ 0x2f
 8014916:	4605      	mov	r5, r0
 8014918:	d023      	beq.n	8014962 <exact_match_lookup+0x72>
 801491a:	f104 030c 	add.w	r3, r4, #12
 801491e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014922:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014926:	1c70      	adds	r0, r6, #1
 8014928:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801492c:	f002 fab8 	bl	8016ea0 <rcutils_to_native_path>
 8014930:	4606      	mov	r6, r0
 8014932:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8014936:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801493a:	4631      	mov	r1, r6
 801493c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8014940:	4628      	mov	r0, r5
 8014942:	f002 faa7 	bl	8016e94 <rcutils_join_path>
 8014946:	6862      	ldr	r2, [r4, #4]
 8014948:	6921      	ldr	r1, [r4, #16]
 801494a:	4603      	mov	r3, r0
 801494c:	4630      	mov	r0, r6
 801494e:	461e      	mov	r6, r3
 8014950:	4790      	blx	r2
 8014952:	4628      	mov	r0, r5
 8014954:	6863      	ldr	r3, [r4, #4]
 8014956:	6921      	ldr	r1, [r4, #16]
 8014958:	4798      	blx	r3
 801495a:	4635      	mov	r5, r6
 801495c:	4628      	mov	r0, r5
 801495e:	b005      	add	sp, #20
 8014960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014962:	7873      	ldrb	r3, [r6, #1]
 8014964:	2b00      	cmp	r3, #0
 8014966:	d1d8      	bne.n	801491a <exact_match_lookup+0x2a>
 8014968:	4628      	mov	r0, r5
 801496a:	b005      	add	sp, #20
 801496c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801496e:	bf00      	nop
 8014970:	0801b618 	.word	0x0801b618

08014974 <rcl_get_secure_root>:
 8014974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014978:	b085      	sub	sp, #20
 801497a:	b168      	cbz	r0, 8014998 <rcl_get_secure_root+0x24>
 801497c:	4607      	mov	r7, r0
 801497e:	4608      	mov	r0, r1
 8014980:	460c      	mov	r4, r1
 8014982:	f7f9 fa8f 	bl	800dea4 <rcutils_allocator_is_valid>
 8014986:	b138      	cbz	r0, 8014998 <rcl_get_secure_root+0x24>
 8014988:	2300      	movs	r3, #0
 801498a:	482d      	ldr	r0, [pc, #180]	@ (8014a40 <rcl_get_secure_root+0xcc>)
 801498c:	9303      	str	r3, [sp, #12]
 801498e:	a903      	add	r1, sp, #12
 8014990:	f002 fa66 	bl	8016e60 <rcutils_get_env>
 8014994:	4605      	mov	r5, r0
 8014996:	b120      	cbz	r0, 80149a2 <rcl_get_secure_root+0x2e>
 8014998:	2500      	movs	r5, #0
 801499a:	4628      	mov	r0, r5
 801499c:	b005      	add	sp, #20
 801499e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80149a2:	9b03      	ldr	r3, [sp, #12]
 80149a4:	781a      	ldrb	r2, [r3, #0]
 80149a6:	2a00      	cmp	r2, #0
 80149a8:	d0f6      	beq.n	8014998 <rcl_get_secure_root+0x24>
 80149aa:	f104 090c 	add.w	r9, r4, #12
 80149ae:	e899 0003 	ldmia.w	r9, {r0, r1}
 80149b2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80149b6:	4618      	mov	r0, r3
 80149b8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80149bc:	f002 fb92 	bl	80170e4 <rcutils_strdup>
 80149c0:	4680      	mov	r8, r0
 80149c2:	2800      	cmp	r0, #0
 80149c4:	d0e8      	beq.n	8014998 <rcl_get_secure_root+0x24>
 80149c6:	481f      	ldr	r0, [pc, #124]	@ (8014a44 <rcl_get_secure_root+0xd0>)
 80149c8:	9503      	str	r5, [sp, #12]
 80149ca:	a903      	add	r1, sp, #12
 80149cc:	f002 fa48 	bl	8016e60 <rcutils_get_env>
 80149d0:	b160      	cbz	r0, 80149ec <rcl_get_secure_root+0x78>
 80149d2:	2600      	movs	r6, #0
 80149d4:	6863      	ldr	r3, [r4, #4]
 80149d6:	6921      	ldr	r1, [r4, #16]
 80149d8:	4630      	mov	r0, r6
 80149da:	4798      	blx	r3
 80149dc:	4640      	mov	r0, r8
 80149de:	6863      	ldr	r3, [r4, #4]
 80149e0:	6921      	ldr	r1, [r4, #16]
 80149e2:	4798      	blx	r3
 80149e4:	4628      	mov	r0, r5
 80149e6:	b005      	add	sp, #20
 80149e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80149ec:	9b03      	ldr	r3, [sp, #12]
 80149ee:	781e      	ldrb	r6, [r3, #0]
 80149f0:	b1f6      	cbz	r6, 8014a30 <rcl_get_secure_root+0xbc>
 80149f2:	e899 0003 	ldmia.w	r9, {r0, r1}
 80149f6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80149fa:	4618      	mov	r0, r3
 80149fc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014a00:	f002 fb70 	bl	80170e4 <rcutils_strdup>
 8014a04:	4606      	mov	r6, r0
 8014a06:	2800      	cmp	r0, #0
 8014a08:	d0e3      	beq.n	80149d2 <rcl_get_secure_root+0x5e>
 8014a0a:	4622      	mov	r2, r4
 8014a0c:	4641      	mov	r1, r8
 8014a0e:	f7ff ff6f 	bl	80148f0 <exact_match_lookup>
 8014a12:	4605      	mov	r5, r0
 8014a14:	2d00      	cmp	r5, #0
 8014a16:	d0dd      	beq.n	80149d4 <rcl_get_secure_root+0x60>
 8014a18:	4628      	mov	r0, r5
 8014a1a:	f002 fa39 	bl	8016e90 <rcutils_is_directory>
 8014a1e:	4603      	mov	r3, r0
 8014a20:	2800      	cmp	r0, #0
 8014a22:	d1d7      	bne.n	80149d4 <rcl_get_secure_root+0x60>
 8014a24:	4628      	mov	r0, r5
 8014a26:	6921      	ldr	r1, [r4, #16]
 8014a28:	461d      	mov	r5, r3
 8014a2a:	6863      	ldr	r3, [r4, #4]
 8014a2c:	4798      	blx	r3
 8014a2e:	e7d1      	b.n	80149d4 <rcl_get_secure_root+0x60>
 8014a30:	4622      	mov	r2, r4
 8014a32:	4638      	mov	r0, r7
 8014a34:	4641      	mov	r1, r8
 8014a36:	f7ff ff5b 	bl	80148f0 <exact_match_lookup>
 8014a3a:	4605      	mov	r5, r0
 8014a3c:	e7ea      	b.n	8014a14 <rcl_get_secure_root+0xa0>
 8014a3e:	bf00      	nop
 8014a40:	0801b624 	.word	0x0801b624
 8014a44:	0801b63c 	.word	0x0801b63c

08014a48 <rcl_get_security_options_from_environment>:
 8014a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a4c:	b082      	sub	sp, #8
 8014a4e:	2300      	movs	r3, #0
 8014a50:	4606      	mov	r6, r0
 8014a52:	460f      	mov	r7, r1
 8014a54:	4820      	ldr	r0, [pc, #128]	@ (8014ad8 <rcl_get_security_options_from_environment+0x90>)
 8014a56:	9301      	str	r3, [sp, #4]
 8014a58:	a901      	add	r1, sp, #4
 8014a5a:	4690      	mov	r8, r2
 8014a5c:	f002 fa00 	bl	8016e60 <rcutils_get_env>
 8014a60:	b120      	cbz	r0, 8014a6c <rcl_get_security_options_from_environment+0x24>
 8014a62:	2501      	movs	r5, #1
 8014a64:	4628      	mov	r0, r5
 8014a66:	b002      	add	sp, #8
 8014a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a6c:	491b      	ldr	r1, [pc, #108]	@ (8014adc <rcl_get_security_options_from_environment+0x94>)
 8014a6e:	4604      	mov	r4, r0
 8014a70:	9801      	ldr	r0, [sp, #4]
 8014a72:	f7eb fbd5 	bl	8000220 <strcmp>
 8014a76:	4605      	mov	r5, r0
 8014a78:	b9e8      	cbnz	r0, 8014ab6 <rcl_get_security_options_from_environment+0x6e>
 8014a7a:	9001      	str	r0, [sp, #4]
 8014a7c:	f1b8 0f00 	cmp.w	r8, #0
 8014a80:	d020      	beq.n	8014ac4 <rcl_get_security_options_from_environment+0x7c>
 8014a82:	4817      	ldr	r0, [pc, #92]	@ (8014ae0 <rcl_get_security_options_from_environment+0x98>)
 8014a84:	a901      	add	r1, sp, #4
 8014a86:	f002 f9eb 	bl	8016e60 <rcutils_get_env>
 8014a8a:	2800      	cmp	r0, #0
 8014a8c:	d1e9      	bne.n	8014a62 <rcl_get_security_options_from_environment+0x1a>
 8014a8e:	4915      	ldr	r1, [pc, #84]	@ (8014ae4 <rcl_get_security_options_from_environment+0x9c>)
 8014a90:	9801      	ldr	r0, [sp, #4]
 8014a92:	f7eb fbc5 	bl	8000220 <strcmp>
 8014a96:	fab0 f080 	clz	r0, r0
 8014a9a:	0940      	lsrs	r0, r0, #5
 8014a9c:	f888 0000 	strb.w	r0, [r8]
 8014aa0:	4639      	mov	r1, r7
 8014aa2:	4630      	mov	r0, r6
 8014aa4:	f7ff ff66 	bl	8014974 <rcl_get_secure_root>
 8014aa8:	b170      	cbz	r0, 8014ac8 <rcl_get_security_options_from_environment+0x80>
 8014aaa:	f8c8 0004 	str.w	r0, [r8, #4]
 8014aae:	4628      	mov	r0, r5
 8014ab0:	b002      	add	sp, #8
 8014ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ab6:	4625      	mov	r5, r4
 8014ab8:	4628      	mov	r0, r5
 8014aba:	f888 4000 	strb.w	r4, [r8]
 8014abe:	b002      	add	sp, #8
 8014ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ac4:	250b      	movs	r5, #11
 8014ac6:	e7cd      	b.n	8014a64 <rcl_get_security_options_from_environment+0x1c>
 8014ac8:	f898 5000 	ldrb.w	r5, [r8]
 8014acc:	f1a5 0501 	sub.w	r5, r5, #1
 8014ad0:	fab5 f585 	clz	r5, r5
 8014ad4:	096d      	lsrs	r5, r5, #5
 8014ad6:	e7c5      	b.n	8014a64 <rcl_get_security_options_from_environment+0x1c>
 8014ad8:	0801b5dc 	.word	0x0801b5dc
 8014adc:	0801b5f0 	.word	0x0801b5f0
 8014ae0:	0801b5f8 	.word	0x0801b5f8
 8014ae4:	0801b610 	.word	0x0801b610

08014ae8 <rcl_service_get_rmw_handle>:
 8014ae8:	b118      	cbz	r0, 8014af2 <rcl_service_get_rmw_handle+0xa>
 8014aea:	6800      	ldr	r0, [r0, #0]
 8014aec:	b108      	cbz	r0, 8014af2 <rcl_service_get_rmw_handle+0xa>
 8014aee:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014af2:	4770      	bx	lr

08014af4 <rcl_take_request>:
 8014af4:	b570      	push	{r4, r5, r6, lr}
 8014af6:	468e      	mov	lr, r1
 8014af8:	460c      	mov	r4, r1
 8014afa:	4616      	mov	r6, r2
 8014afc:	4605      	mov	r5, r0
 8014afe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014b02:	b08c      	sub	sp, #48	@ 0x30
 8014b04:	f10d 0c18 	add.w	ip, sp, #24
 8014b08:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014b0c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014b10:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014b14:	b30d      	cbz	r5, 8014b5a <rcl_take_request+0x66>
 8014b16:	682b      	ldr	r3, [r5, #0]
 8014b18:	b1fb      	cbz	r3, 8014b5a <rcl_take_request+0x66>
 8014b1a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8014b1e:	b1e0      	cbz	r0, 8014b5a <rcl_take_request+0x66>
 8014b20:	b336      	cbz	r6, 8014b70 <rcl_take_request+0x7c>
 8014b22:	2300      	movs	r3, #0
 8014b24:	f88d 3007 	strb.w	r3, [sp, #7]
 8014b28:	4632      	mov	r2, r6
 8014b2a:	f10d 0307 	add.w	r3, sp, #7
 8014b2e:	a902      	add	r1, sp, #8
 8014b30:	f003 f854 	bl	8017bdc <rmw_take_request>
 8014b34:	4605      	mov	r5, r0
 8014b36:	b198      	cbz	r0, 8014b60 <rcl_take_request+0x6c>
 8014b38:	280a      	cmp	r0, #10
 8014b3a:	bf18      	it	ne
 8014b3c:	2501      	movne	r5, #1
 8014b3e:	f10d 0e18 	add.w	lr, sp, #24
 8014b42:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014b46:	46a4      	mov	ip, r4
 8014b48:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014b4c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014b50:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014b54:	4628      	mov	r0, r5
 8014b56:	b00c      	add	sp, #48	@ 0x30
 8014b58:	bd70      	pop	{r4, r5, r6, pc}
 8014b5a:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8014b5e:	e7ee      	b.n	8014b3e <rcl_take_request+0x4a>
 8014b60:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014b64:	f240 2359 	movw	r3, #601	@ 0x259
 8014b68:	2a00      	cmp	r2, #0
 8014b6a:	bf08      	it	eq
 8014b6c:	461d      	moveq	r5, r3
 8014b6e:	e7e6      	b.n	8014b3e <rcl_take_request+0x4a>
 8014b70:	250b      	movs	r5, #11
 8014b72:	e7e4      	b.n	8014b3e <rcl_take_request+0x4a>

08014b74 <rcl_send_response>:
 8014b74:	b170      	cbz	r0, 8014b94 <rcl_send_response+0x20>
 8014b76:	6800      	ldr	r0, [r0, #0]
 8014b78:	b160      	cbz	r0, 8014b94 <rcl_send_response+0x20>
 8014b7a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014b7e:	b148      	cbz	r0, 8014b94 <rcl_send_response+0x20>
 8014b80:	b159      	cbz	r1, 8014b9a <rcl_send_response+0x26>
 8014b82:	b510      	push	{r4, lr}
 8014b84:	b15a      	cbz	r2, 8014b9e <rcl_send_response+0x2a>
 8014b86:	f003 f887 	bl	8017c98 <rmw_send_response>
 8014b8a:	b110      	cbz	r0, 8014b92 <rcl_send_response+0x1e>
 8014b8c:	2802      	cmp	r0, #2
 8014b8e:	bf18      	it	ne
 8014b90:	2001      	movne	r0, #1
 8014b92:	bd10      	pop	{r4, pc}
 8014b94:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8014b98:	4770      	bx	lr
 8014b9a:	200b      	movs	r0, #11
 8014b9c:	4770      	bx	lr
 8014b9e:	200b      	movs	r0, #11
 8014ba0:	bd10      	pop	{r4, pc}
 8014ba2:	bf00      	nop

08014ba4 <rcl_service_is_valid>:
 8014ba4:	b130      	cbz	r0, 8014bb4 <rcl_service_is_valid+0x10>
 8014ba6:	6800      	ldr	r0, [r0, #0]
 8014ba8:	b120      	cbz	r0, 8014bb4 <rcl_service_is_valid+0x10>
 8014baa:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014bae:	3800      	subs	r0, #0
 8014bb0:	bf18      	it	ne
 8014bb2:	2001      	movne	r0, #1
 8014bb4:	4770      	bx	lr
 8014bb6:	bf00      	nop

08014bb8 <rcl_get_zero_initialized_subscription>:
 8014bb8:	4b01      	ldr	r3, [pc, #4]	@ (8014bc0 <rcl_get_zero_initialized_subscription+0x8>)
 8014bba:	6818      	ldr	r0, [r3, #0]
 8014bbc:	4770      	bx	lr
 8014bbe:	bf00      	nop
 8014bc0:	0801b65c 	.word	0x0801b65c

08014bc4 <rcl_subscription_init>:
 8014bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014bc8:	b089      	sub	sp, #36	@ 0x24
 8014bca:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8014bcc:	b1d6      	cbz	r6, 8014c04 <rcl_subscription_init+0x40>
 8014bce:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 8014bd2:	4604      	mov	r4, r0
 8014bd4:	4648      	mov	r0, r9
 8014bd6:	460d      	mov	r5, r1
 8014bd8:	4690      	mov	r8, r2
 8014bda:	461f      	mov	r7, r3
 8014bdc:	f7f9 f962 	bl	800dea4 <rcutils_allocator_is_valid>
 8014be0:	b180      	cbz	r0, 8014c04 <rcl_subscription_init+0x40>
 8014be2:	b17c      	cbz	r4, 8014c04 <rcl_subscription_init+0x40>
 8014be4:	4628      	mov	r0, r5
 8014be6:	f7ff fd87 	bl	80146f8 <rcl_node_is_valid>
 8014bea:	2800      	cmp	r0, #0
 8014bec:	d054      	beq.n	8014c98 <rcl_subscription_init+0xd4>
 8014bee:	f1b8 0f00 	cmp.w	r8, #0
 8014bf2:	d007      	beq.n	8014c04 <rcl_subscription_init+0x40>
 8014bf4:	b137      	cbz	r7, 8014c04 <rcl_subscription_init+0x40>
 8014bf6:	6823      	ldr	r3, [r4, #0]
 8014bf8:	b14b      	cbz	r3, 8014c0e <rcl_subscription_init+0x4a>
 8014bfa:	2764      	movs	r7, #100	@ 0x64
 8014bfc:	4638      	mov	r0, r7
 8014bfe:	b009      	add	sp, #36	@ 0x24
 8014c00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c04:	270b      	movs	r7, #11
 8014c06:	4638      	mov	r0, r7
 8014c08:	b009      	add	sp, #36	@ 0x24
 8014c0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c0e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8014c12:	aa07      	add	r2, sp, #28
 8014c14:	9205      	str	r2, [sp, #20]
 8014c16:	9307      	str	r3, [sp, #28]
 8014c18:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 8014c1c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014c20:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014c24:	4639      	mov	r1, r7
 8014c26:	e899 000c 	ldmia.w	r9, {r2, r3}
 8014c2a:	4628      	mov	r0, r5
 8014c2c:	f7ff fdb8 	bl	80147a0 <rcl_node_resolve_name>
 8014c30:	4607      	mov	r7, r0
 8014c32:	2800      	cmp	r0, #0
 8014c34:	d15f      	bne.n	8014cf6 <rcl_subscription_init+0x132>
 8014c36:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 8014c3a:	21c8      	movs	r1, #200	@ 0xc8
 8014c3c:	2001      	movs	r0, #1
 8014c3e:	4798      	blx	r3
 8014c40:	6020      	str	r0, [r4, #0]
 8014c42:	2800      	cmp	r0, #0
 8014c44:	d05d      	beq.n	8014d02 <rcl_subscription_init+0x13e>
 8014c46:	4628      	mov	r0, r5
 8014c48:	f7ff fd78 	bl	801473c <rcl_node_get_rmw_handle>
 8014c4c:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8014c50:	9300      	str	r3, [sp, #0]
 8014c52:	9a07      	ldr	r2, [sp, #28]
 8014c54:	6827      	ldr	r7, [r4, #0]
 8014c56:	4641      	mov	r1, r8
 8014c58:	4633      	mov	r3, r6
 8014c5a:	f7f9 ff3f 	bl	800eadc <rmw_create_subscription>
 8014c5e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 8014c62:	6827      	ldr	r7, [r4, #0]
 8014c64:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8014c68:	b348      	cbz	r0, 8014cbe <rcl_subscription_init+0xfa>
 8014c6a:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8014c6e:	f7fa f817 	bl	800eca0 <rmw_subscription_get_actual_qos>
 8014c72:	4607      	mov	r7, r0
 8014c74:	b9a8      	cbnz	r0, 8014ca2 <rcl_subscription_init+0xde>
 8014c76:	6820      	ldr	r0, [r4, #0]
 8014c78:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8014c7c:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 8014c80:	2270      	movs	r2, #112	@ 0x70
 8014c82:	4631      	mov	r1, r6
 8014c84:	f005 fa69 	bl	801a15a <memcpy>
 8014c88:	9807      	ldr	r0, [sp, #28]
 8014c8a:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8014c8c:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8014c8e:	4798      	blx	r3
 8014c90:	4638      	mov	r0, r7
 8014c92:	b009      	add	sp, #36	@ 0x24
 8014c94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c98:	27c8      	movs	r7, #200	@ 0xc8
 8014c9a:	4638      	mov	r0, r7
 8014c9c:	b009      	add	sp, #36	@ 0x24
 8014c9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014ca2:	6827      	ldr	r7, [r4, #0]
 8014ca4:	b32f      	cbz	r7, 8014cf2 <rcl_subscription_init+0x12e>
 8014ca6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8014caa:	b14b      	cbz	r3, 8014cc0 <rcl_subscription_init+0xfc>
 8014cac:	4628      	mov	r0, r5
 8014cae:	f7ff fd45 	bl	801473c <rcl_node_get_rmw_handle>
 8014cb2:	6823      	ldr	r3, [r4, #0]
 8014cb4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8014cb8:	f7fa f802 	bl	800ecc0 <rmw_destroy_subscription>
 8014cbc:	6827      	ldr	r7, [r4, #0]
 8014cbe:	b197      	cbz	r7, 8014ce6 <rcl_subscription_init+0x122>
 8014cc0:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8014cc4:	4628      	mov	r0, r5
 8014cc6:	f7f9 f8ed 	bl	800dea4 <rcutils_allocator_is_valid>
 8014cca:	b158      	cbz	r0, 8014ce4 <rcl_subscription_init+0x120>
 8014ccc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8014cce:	b148      	cbz	r0, 8014ce4 <rcl_subscription_init+0x120>
 8014cd0:	4629      	mov	r1, r5
 8014cd2:	f002 fb81 	bl	80173d8 <rmw_subscription_content_filter_options_fini>
 8014cd6:	4605      	mov	r5, r0
 8014cd8:	b9b8      	cbnz	r0, 8014d0a <rcl_subscription_init+0x146>
 8014cda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014cdc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8014cde:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8014ce0:	4798      	blx	r3
 8014ce2:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8014ce4:	6827      	ldr	r7, [r4, #0]
 8014ce6:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8014ce8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8014cea:	4638      	mov	r0, r7
 8014cec:	4798      	blx	r3
 8014cee:	2300      	movs	r3, #0
 8014cf0:	6023      	str	r3, [r4, #0]
 8014cf2:	2701      	movs	r7, #1
 8014cf4:	e7c8      	b.n	8014c88 <rcl_subscription_init+0xc4>
 8014cf6:	2867      	cmp	r0, #103	@ 0x67
 8014cf8:	d0c6      	beq.n	8014c88 <rcl_subscription_init+0xc4>
 8014cfa:	2869      	cmp	r0, #105	@ 0x69
 8014cfc:	d003      	beq.n	8014d06 <rcl_subscription_init+0x142>
 8014cfe:	280a      	cmp	r0, #10
 8014d00:	d1f7      	bne.n	8014cf2 <rcl_subscription_init+0x12e>
 8014d02:	270a      	movs	r7, #10
 8014d04:	e7c0      	b.n	8014c88 <rcl_subscription_init+0xc4>
 8014d06:	2767      	movs	r7, #103	@ 0x67
 8014d08:	e7be      	b.n	8014c88 <rcl_subscription_init+0xc4>
 8014d0a:	f7ff f9fb 	bl	8014104 <rcl_convert_rmw_ret_to_rcl_ret>
 8014d0e:	6827      	ldr	r7, [r4, #0]
 8014d10:	e7e9      	b.n	8014ce6 <rcl_subscription_init+0x122>
 8014d12:	bf00      	nop

08014d14 <rcl_subscription_get_default_options>:
 8014d14:	b570      	push	{r4, r5, r6, lr}
 8014d16:	4d14      	ldr	r5, [pc, #80]	@ (8014d68 <rcl_subscription_get_default_options+0x54>)
 8014d18:	4914      	ldr	r1, [pc, #80]	@ (8014d6c <rcl_subscription_get_default_options+0x58>)
 8014d1a:	b08a      	sub	sp, #40	@ 0x28
 8014d1c:	4604      	mov	r4, r0
 8014d1e:	2250      	movs	r2, #80	@ 0x50
 8014d20:	4628      	mov	r0, r5
 8014d22:	f005 fa1a 	bl	801a15a <memcpy>
 8014d26:	a804      	add	r0, sp, #16
 8014d28:	f7f9 f8ae 	bl	800de88 <rcutils_get_default_allocator>
 8014d2c:	f10d 0c10 	add.w	ip, sp, #16
 8014d30:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014d34:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8014d38:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014d3c:	466e      	mov	r6, sp
 8014d3e:	f8dc 3000 	ldr.w	r3, [ip]
 8014d42:	f8ce 3000 	str.w	r3, [lr]
 8014d46:	4630      	mov	r0, r6
 8014d48:	f002 fb60 	bl	801740c <rmw_get_default_subscription_options>
 8014d4c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8014d50:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8014d54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014d58:	2270      	movs	r2, #112	@ 0x70
 8014d5a:	4629      	mov	r1, r5
 8014d5c:	4620      	mov	r0, r4
 8014d5e:	f005 f9fc 	bl	801a15a <memcpy>
 8014d62:	4620      	mov	r0, r4
 8014d64:	b00a      	add	sp, #40	@ 0x28
 8014d66:	bd70      	pop	{r4, r5, r6, pc}
 8014d68:	2000ae78 	.word	0x2000ae78
 8014d6c:	0801b660 	.word	0x0801b660

08014d70 <rcl_take>:
 8014d70:	2800      	cmp	r0, #0
 8014d72:	d04a      	beq.n	8014e0a <rcl_take+0x9a>
 8014d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d78:	4604      	mov	r4, r0
 8014d7a:	6800      	ldr	r0, [r0, #0]
 8014d7c:	b0a4      	sub	sp, #144	@ 0x90
 8014d7e:	2800      	cmp	r0, #0
 8014d80:	d03b      	beq.n	8014dfa <rcl_take+0x8a>
 8014d82:	461f      	mov	r7, r3
 8014d84:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d036      	beq.n	8014dfa <rcl_take+0x8a>
 8014d8c:	460e      	mov	r6, r1
 8014d8e:	2900      	cmp	r1, #0
 8014d90:	d039      	beq.n	8014e06 <rcl_take+0x96>
 8014d92:	4615      	mov	r5, r2
 8014d94:	2a00      	cmp	r2, #0
 8014d96:	d03c      	beq.n	8014e12 <rcl_take+0xa2>
 8014d98:	a802      	add	r0, sp, #8
 8014d9a:	f002 fbc1 	bl	8017520 <rmw_get_zero_initialized_message_info>
 8014d9e:	f10d 0c08 	add.w	ip, sp, #8
 8014da2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014da6:	46ae      	mov	lr, r5
 8014da8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014dac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014db0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014db4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014db8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014dbc:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8014dc0:	f04f 0800 	mov.w	r8, #0
 8014dc4:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8014dc8:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8014dcc:	6822      	ldr	r2, [r4, #0]
 8014dce:	462b      	mov	r3, r5
 8014dd0:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8014dd4:	9700      	str	r7, [sp, #0]
 8014dd6:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8014dda:	4631      	mov	r1, r6
 8014ddc:	f003 f802 	bl	8017de4 <rmw_take_with_info>
 8014de0:	4603      	mov	r3, r0
 8014de2:	b9c0      	cbnz	r0, 8014e16 <rcl_take+0xa6>
 8014de4:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8014de8:	f240 1291 	movw	r2, #401	@ 0x191
 8014dec:	2900      	cmp	r1, #0
 8014dee:	bf08      	it	eq
 8014df0:	4613      	moveq	r3, r2
 8014df2:	4618      	mov	r0, r3
 8014df4:	b024      	add	sp, #144	@ 0x90
 8014df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dfa:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8014dfe:	4618      	mov	r0, r3
 8014e00:	b024      	add	sp, #144	@ 0x90
 8014e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e06:	230b      	movs	r3, #11
 8014e08:	e7f3      	b.n	8014df2 <rcl_take+0x82>
 8014e0a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8014e0e:	4618      	mov	r0, r3
 8014e10:	4770      	bx	lr
 8014e12:	ad14      	add	r5, sp, #80	@ 0x50
 8014e14:	e7c0      	b.n	8014d98 <rcl_take+0x28>
 8014e16:	f7ff f975 	bl	8014104 <rcl_convert_rmw_ret_to_rcl_ret>
 8014e1a:	4603      	mov	r3, r0
 8014e1c:	e7e9      	b.n	8014df2 <rcl_take+0x82>
 8014e1e:	bf00      	nop

08014e20 <rcl_subscription_get_rmw_handle>:
 8014e20:	b118      	cbz	r0, 8014e2a <rcl_subscription_get_rmw_handle+0xa>
 8014e22:	6800      	ldr	r0, [r0, #0]
 8014e24:	b108      	cbz	r0, 8014e2a <rcl_subscription_get_rmw_handle+0xa>
 8014e26:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8014e2a:	4770      	bx	lr

08014e2c <rcl_subscription_is_valid>:
 8014e2c:	b130      	cbz	r0, 8014e3c <rcl_subscription_is_valid+0x10>
 8014e2e:	6800      	ldr	r0, [r0, #0]
 8014e30:	b120      	cbz	r0, 8014e3c <rcl_subscription_is_valid+0x10>
 8014e32:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8014e36:	3800      	subs	r0, #0
 8014e38:	bf18      	it	ne
 8014e3a:	2001      	movne	r0, #1
 8014e3c:	4770      	bx	lr
 8014e3e:	bf00      	nop

08014e40 <rcl_get_system_time>:
 8014e40:	4608      	mov	r0, r1
 8014e42:	f7f9 b871 	b.w	800df28 <rcutils_system_time_now>
 8014e46:	bf00      	nop

08014e48 <rcl_get_steady_time>:
 8014e48:	4608      	mov	r0, r1
 8014e4a:	f7f9 b895 	b.w	800df78 <rcutils_steady_time_now>
 8014e4e:	bf00      	nop

08014e50 <rcl_get_ros_time>:
 8014e50:	7a03      	ldrb	r3, [r0, #8]
 8014e52:	b510      	push	{r4, lr}
 8014e54:	460c      	mov	r4, r1
 8014e56:	b133      	cbz	r3, 8014e66 <rcl_get_ros_time+0x16>
 8014e58:	2105      	movs	r1, #5
 8014e5a:	f001 ff5d 	bl	8016d18 <__atomic_load_8>
 8014e5e:	e9c4 0100 	strd	r0, r1, [r4]
 8014e62:	2000      	movs	r0, #0
 8014e64:	bd10      	pop	{r4, pc}
 8014e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e6a:	4608      	mov	r0, r1
 8014e6c:	f7f9 b85c 	b.w	800df28 <rcutils_system_time_now>

08014e70 <rcl_clock_init>:
 8014e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e72:	4605      	mov	r5, r0
 8014e74:	4610      	mov	r0, r2
 8014e76:	4614      	mov	r4, r2
 8014e78:	460e      	mov	r6, r1
 8014e7a:	f7f9 f813 	bl	800dea4 <rcutils_allocator_is_valid>
 8014e7e:	b128      	cbz	r0, 8014e8c <rcl_clock_init+0x1c>
 8014e80:	2d03      	cmp	r5, #3
 8014e82:	d803      	bhi.n	8014e8c <rcl_clock_init+0x1c>
 8014e84:	e8df f005 	tbb	[pc, r5]
 8014e88:	06532e1d 	.word	0x06532e1d
 8014e8c:	f04f 0c0b 	mov.w	ip, #11
 8014e90:	4660      	mov	r0, ip
 8014e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e94:	2e00      	cmp	r6, #0
 8014e96:	d0f9      	beq.n	8014e8c <rcl_clock_init+0x1c>
 8014e98:	2c00      	cmp	r4, #0
 8014e9a:	d0f7      	beq.n	8014e8c <rcl_clock_init+0x1c>
 8014e9c:	2300      	movs	r3, #0
 8014e9e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014ea2:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8014f58 <rcl_clock_init+0xe8>
 8014ea6:	6133      	str	r3, [r6, #16]
 8014ea8:	f106 0514 	add.w	r5, r6, #20
 8014eac:	469c      	mov	ip, r3
 8014eae:	2703      	movs	r7, #3
 8014eb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014eb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014eb4:	6823      	ldr	r3, [r4, #0]
 8014eb6:	602b      	str	r3, [r5, #0]
 8014eb8:	7037      	strb	r7, [r6, #0]
 8014eba:	f8c6 e00c 	str.w	lr, [r6, #12]
 8014ebe:	4660      	mov	r0, ip
 8014ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ec2:	2e00      	cmp	r6, #0
 8014ec4:	d0e2      	beq.n	8014e8c <rcl_clock_init+0x1c>
 8014ec6:	2300      	movs	r3, #0
 8014ec8:	7033      	strb	r3, [r6, #0]
 8014eca:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014ece:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8014ed2:	469c      	mov	ip, r3
 8014ed4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014ed6:	f106 0514 	add.w	r5, r6, #20
 8014eda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014edc:	6823      	ldr	r3, [r4, #0]
 8014ede:	602b      	str	r3, [r5, #0]
 8014ee0:	4660      	mov	r0, ip
 8014ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ee4:	2e00      	cmp	r6, #0
 8014ee6:	d0d1      	beq.n	8014e8c <rcl_clock_init+0x1c>
 8014ee8:	2c00      	cmp	r4, #0
 8014eea:	d0cf      	beq.n	8014e8c <rcl_clock_init+0x1c>
 8014eec:	2700      	movs	r7, #0
 8014eee:	7037      	strb	r7, [r6, #0]
 8014ef0:	46a4      	mov	ip, r4
 8014ef2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014ef6:	f106 0514 	add.w	r5, r6, #20
 8014efa:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8014efe:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8014f02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014f04:	f8dc 3000 	ldr.w	r3, [ip]
 8014f08:	602b      	str	r3, [r5, #0]
 8014f0a:	6921      	ldr	r1, [r4, #16]
 8014f0c:	6823      	ldr	r3, [r4, #0]
 8014f0e:	2010      	movs	r0, #16
 8014f10:	4798      	blx	r3
 8014f12:	6130      	str	r0, [r6, #16]
 8014f14:	b1d0      	cbz	r0, 8014f4c <rcl_clock_init+0xdc>
 8014f16:	2200      	movs	r2, #0
 8014f18:	2300      	movs	r3, #0
 8014f1a:	e9c0 2300 	strd	r2, r3, [r0]
 8014f1e:	2301      	movs	r3, #1
 8014f20:	7207      	strb	r7, [r0, #8]
 8014f22:	4a0c      	ldr	r2, [pc, #48]	@ (8014f54 <rcl_clock_init+0xe4>)
 8014f24:	7033      	strb	r3, [r6, #0]
 8014f26:	46bc      	mov	ip, r7
 8014f28:	60f2      	str	r2, [r6, #12]
 8014f2a:	4660      	mov	r0, ip
 8014f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f2e:	2e00      	cmp	r6, #0
 8014f30:	d0ac      	beq.n	8014e8c <rcl_clock_init+0x1c>
 8014f32:	2c00      	cmp	r4, #0
 8014f34:	d0aa      	beq.n	8014e8c <rcl_clock_init+0x1c>
 8014f36:	2300      	movs	r3, #0
 8014f38:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014f3c:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8014f5c <rcl_clock_init+0xec>
 8014f40:	6133      	str	r3, [r6, #16]
 8014f42:	f106 0514 	add.w	r5, r6, #20
 8014f46:	469c      	mov	ip, r3
 8014f48:	2702      	movs	r7, #2
 8014f4a:	e7b1      	b.n	8014eb0 <rcl_clock_init+0x40>
 8014f4c:	f04f 0c0a 	mov.w	ip, #10
 8014f50:	e79e      	b.n	8014e90 <rcl_clock_init+0x20>
 8014f52:	bf00      	nop
 8014f54:	08014e51 	.word	0x08014e51
 8014f58:	08014e49 	.word	0x08014e49
 8014f5c:	08014e41 	.word	0x08014e41

08014f60 <rcl_clock_get_now>:
 8014f60:	b140      	cbz	r0, 8014f74 <rcl_clock_get_now+0x14>
 8014f62:	b139      	cbz	r1, 8014f74 <rcl_clock_get_now+0x14>
 8014f64:	7803      	ldrb	r3, [r0, #0]
 8014f66:	b11b      	cbz	r3, 8014f70 <rcl_clock_get_now+0x10>
 8014f68:	68c3      	ldr	r3, [r0, #12]
 8014f6a:	b10b      	cbz	r3, 8014f70 <rcl_clock_get_now+0x10>
 8014f6c:	6900      	ldr	r0, [r0, #16]
 8014f6e:	4718      	bx	r3
 8014f70:	2001      	movs	r0, #1
 8014f72:	4770      	bx	lr
 8014f74:	200b      	movs	r0, #11
 8014f76:	4770      	bx	lr

08014f78 <rcl_clock_add_jump_callback>:
 8014f78:	b082      	sub	sp, #8
 8014f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f7e:	a906      	add	r1, sp, #24
 8014f80:	e881 000c 	stmia.w	r1, {r2, r3}
 8014f84:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8014f88:	b320      	cbz	r0, 8014fd4 <rcl_clock_add_jump_callback+0x5c>
 8014f8a:	4604      	mov	r4, r0
 8014f8c:	3014      	adds	r0, #20
 8014f8e:	f7f8 ff89 	bl	800dea4 <rcutils_allocator_is_valid>
 8014f92:	b1f8      	cbz	r0, 8014fd4 <rcl_clock_add_jump_callback+0x5c>
 8014f94:	b1f6      	cbz	r6, 8014fd4 <rcl_clock_add_jump_callback+0x5c>
 8014f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	db1b      	blt.n	8014fd4 <rcl_clock_add_jump_callback+0x5c>
 8014f9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8014fa0:	2a01      	cmp	r2, #1
 8014fa2:	f173 0300 	sbcs.w	r3, r3, #0
 8014fa6:	da15      	bge.n	8014fd4 <rcl_clock_add_jump_callback+0x5c>
 8014fa8:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8014fac:	2f00      	cmp	r7, #0
 8014fae:	d042      	beq.n	8015036 <rcl_clock_add_jump_callback+0xbe>
 8014fb0:	2300      	movs	r3, #0
 8014fb2:	4602      	mov	r2, r0
 8014fb4:	e003      	b.n	8014fbe <rcl_clock_add_jump_callback+0x46>
 8014fb6:	42bb      	cmp	r3, r7
 8014fb8:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8014fbc:	d011      	beq.n	8014fe2 <rcl_clock_add_jump_callback+0x6a>
 8014fbe:	6811      	ldr	r1, [r2, #0]
 8014fc0:	42b1      	cmp	r1, r6
 8014fc2:	f103 0301 	add.w	r3, r3, #1
 8014fc6:	d1f6      	bne.n	8014fb6 <rcl_clock_add_jump_callback+0x3e>
 8014fc8:	6a11      	ldr	r1, [r2, #32]
 8014fca:	42a9      	cmp	r1, r5
 8014fcc:	d1f3      	bne.n	8014fb6 <rcl_clock_add_jump_callback+0x3e>
 8014fce:	f04f 0e01 	mov.w	lr, #1
 8014fd2:	e001      	b.n	8014fd8 <rcl_clock_add_jump_callback+0x60>
 8014fd4:	f04f 0e0b 	mov.w	lr, #11
 8014fd8:	4670      	mov	r0, lr
 8014fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014fde:	b002      	add	sp, #8
 8014fe0:	4770      	bx	lr
 8014fe2:	3301      	adds	r3, #1
 8014fe4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014fe8:	00d9      	lsls	r1, r3, #3
 8014fea:	69e3      	ldr	r3, [r4, #28]
 8014fec:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8014fee:	4798      	blx	r3
 8014ff0:	b1f0      	cbz	r0, 8015030 <rcl_clock_add_jump_callback+0xb8>
 8014ff2:	68a3      	ldr	r3, [r4, #8]
 8014ff4:	6060      	str	r0, [r4, #4]
 8014ff6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8014ffa:	f10d 0c18 	add.w	ip, sp, #24
 8014ffe:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8015002:	f103 0801 	add.w	r8, r3, #1
 8015006:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 801500a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801500e:	f106 0708 	add.w	r7, r6, #8
 8015012:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015014:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8015018:	f04f 0e00 	mov.w	lr, #0
 801501c:	e887 0003 	stmia.w	r7, {r0, r1}
 8015020:	6235      	str	r5, [r6, #32]
 8015022:	4670      	mov	r0, lr
 8015024:	f8c4 8008 	str.w	r8, [r4, #8]
 8015028:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801502c:	b002      	add	sp, #8
 801502e:	4770      	bx	lr
 8015030:	f04f 0e0a 	mov.w	lr, #10
 8015034:	e7d0      	b.n	8014fd8 <rcl_clock_add_jump_callback+0x60>
 8015036:	2128      	movs	r1, #40	@ 0x28
 8015038:	e7d7      	b.n	8014fea <rcl_clock_add_jump_callback+0x72>
 801503a:	bf00      	nop

0801503c <rcl_clock_remove_jump_callback>:
 801503c:	2800      	cmp	r0, #0
 801503e:	d057      	beq.n	80150f0 <rcl_clock_remove_jump_callback+0xb4>
 8015040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015044:	4605      	mov	r5, r0
 8015046:	3014      	adds	r0, #20
 8015048:	4688      	mov	r8, r1
 801504a:	4692      	mov	sl, r2
 801504c:	f7f8 ff2a 	bl	800dea4 <rcutils_allocator_is_valid>
 8015050:	2800      	cmp	r0, #0
 8015052:	d03b      	beq.n	80150cc <rcl_clock_remove_jump_callback+0x90>
 8015054:	f1b8 0f00 	cmp.w	r8, #0
 8015058:	d038      	beq.n	80150cc <rcl_clock_remove_jump_callback+0x90>
 801505a:	68ae      	ldr	r6, [r5, #8]
 801505c:	b166      	cbz	r6, 8015078 <rcl_clock_remove_jump_callback+0x3c>
 801505e:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8015062:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8015066:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 801506a:	464c      	mov	r4, r9
 801506c:	6823      	ldr	r3, [r4, #0]
 801506e:	4543      	cmp	r3, r8
 8015070:	d005      	beq.n	801507e <rcl_clock_remove_jump_callback+0x42>
 8015072:	3428      	adds	r4, #40	@ 0x28
 8015074:	42a7      	cmp	r7, r4
 8015076:	d1f9      	bne.n	801506c <rcl_clock_remove_jump_callback+0x30>
 8015078:	2001      	movs	r0, #1
 801507a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801507e:	6a23      	ldr	r3, [r4, #32]
 8015080:	3428      	adds	r4, #40	@ 0x28
 8015082:	42bc      	cmp	r4, r7
 8015084:	d02d      	beq.n	80150e2 <rcl_clock_remove_jump_callback+0xa6>
 8015086:	4553      	cmp	r3, sl
 8015088:	d1f0      	bne.n	801506c <rcl_clock_remove_jump_callback+0x30>
 801508a:	46a6      	mov	lr, r4
 801508c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015090:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8015094:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015098:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801509c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80150a0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80150a4:	3428      	adds	r4, #40	@ 0x28
 80150a6:	42a7      	cmp	r7, r4
 80150a8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80150ac:	d1ed      	bne.n	801508a <rcl_clock_remove_jump_callback+0x4e>
 80150ae:	3e01      	subs	r6, #1
 80150b0:	60ae      	str	r6, [r5, #8]
 80150b2:	b176      	cbz	r6, 80150d2 <rcl_clock_remove_jump_callback+0x96>
 80150b4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80150b8:	69eb      	ldr	r3, [r5, #28]
 80150ba:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80150bc:	00f1      	lsls	r1, r6, #3
 80150be:	4648      	mov	r0, r9
 80150c0:	4798      	blx	r3
 80150c2:	b1b8      	cbz	r0, 80150f4 <rcl_clock_remove_jump_callback+0xb8>
 80150c4:	6068      	str	r0, [r5, #4]
 80150c6:	2000      	movs	r0, #0
 80150c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150cc:	200b      	movs	r0, #11
 80150ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150d2:	4648      	mov	r0, r9
 80150d4:	69ab      	ldr	r3, [r5, #24]
 80150d6:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 80150d8:	4798      	blx	r3
 80150da:	606e      	str	r6, [r5, #4]
 80150dc:	4630      	mov	r0, r6
 80150de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150e2:	4553      	cmp	r3, sl
 80150e4:	d1c8      	bne.n	8015078 <rcl_clock_remove_jump_callback+0x3c>
 80150e6:	3e01      	subs	r6, #1
 80150e8:	60ae      	str	r6, [r5, #8]
 80150ea:	2e00      	cmp	r6, #0
 80150ec:	d1e2      	bne.n	80150b4 <rcl_clock_remove_jump_callback+0x78>
 80150ee:	e7f0      	b.n	80150d2 <rcl_clock_remove_jump_callback+0x96>
 80150f0:	200b      	movs	r0, #11
 80150f2:	4770      	bx	lr
 80150f4:	200a      	movs	r0, #10
 80150f6:	e7ea      	b.n	80150ce <rcl_clock_remove_jump_callback+0x92>

080150f8 <_rcl_timer_time_jump>:
 80150f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80150fc:	4605      	mov	r5, r0
 80150fe:	b084      	sub	sp, #16
 8015100:	4614      	mov	r4, r2
 8015102:	b131      	cbz	r1, 8015112 <_rcl_timer_time_jump+0x1a>
 8015104:	7803      	ldrb	r3, [r0, #0]
 8015106:	3b02      	subs	r3, #2
 8015108:	2b01      	cmp	r3, #1
 801510a:	d93f      	bls.n	801518c <_rcl_timer_time_jump+0x94>
 801510c:	b004      	add	sp, #16
 801510e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015112:	6813      	ldr	r3, [r2, #0]
 8015114:	a902      	add	r1, sp, #8
 8015116:	6818      	ldr	r0, [r3, #0]
 8015118:	f7ff ff22 	bl	8014f60 <rcl_clock_get_now>
 801511c:	2800      	cmp	r0, #0
 801511e:	d1f5      	bne.n	801510c <_rcl_timer_time_jump+0x14>
 8015120:	6820      	ldr	r0, [r4, #0]
 8015122:	2105      	movs	r1, #5
 8015124:	3020      	adds	r0, #32
 8015126:	f001 fdf7 	bl	8016d18 <__atomic_load_8>
 801512a:	6823      	ldr	r3, [r4, #0]
 801512c:	4681      	mov	r9, r0
 801512e:	4688      	mov	r8, r1
 8015130:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8015134:	2105      	movs	r1, #5
 8015136:	f001 fdef 	bl	8016d18 <__atomic_load_8>
 801513a:	4607      	mov	r7, r0
 801513c:	6820      	ldr	r0, [r4, #0]
 801513e:	460e      	mov	r6, r1
 8015140:	3018      	adds	r0, #24
 8015142:	2105      	movs	r1, #5
 8015144:	f001 fde8 	bl	8016d18 <__atomic_load_8>
 8015148:	782b      	ldrb	r3, [r5, #0]
 801514a:	9a02      	ldr	r2, [sp, #8]
 801514c:	3b02      	subs	r3, #2
 801514e:	2b01      	cmp	r3, #1
 8015150:	460d      	mov	r5, r1
 8015152:	9b03      	ldr	r3, [sp, #12]
 8015154:	4682      	mov	sl, r0
 8015156:	d937      	bls.n	80151c8 <_rcl_timer_time_jump+0xd0>
 8015158:	42ba      	cmp	r2, r7
 801515a:	eb73 0106 	sbcs.w	r1, r3, r6
 801515e:	da5f      	bge.n	8015220 <_rcl_timer_time_jump+0x128>
 8015160:	454a      	cmp	r2, r9
 8015162:	eb73 0108 	sbcs.w	r1, r3, r8
 8015166:	dad1      	bge.n	801510c <_rcl_timer_time_jump+0x14>
 8015168:	6820      	ldr	r0, [r4, #0]
 801516a:	eb1a 0202 	adds.w	r2, sl, r2
 801516e:	eb43 0305 	adc.w	r3, r3, r5
 8015172:	2505      	movs	r5, #5
 8015174:	3028      	adds	r0, #40	@ 0x28
 8015176:	9500      	str	r5, [sp, #0]
 8015178:	f001 fe04 	bl	8016d84 <__atomic_store_8>
 801517c:	6820      	ldr	r0, [r4, #0]
 801517e:	9500      	str	r5, [sp, #0]
 8015180:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015184:	3020      	adds	r0, #32
 8015186:	f001 fdfd 	bl	8016d84 <__atomic_store_8>
 801518a:	e7bf      	b.n	801510c <_rcl_timer_time_jump+0x14>
 801518c:	6813      	ldr	r3, [r2, #0]
 801518e:	a902      	add	r1, sp, #8
 8015190:	6818      	ldr	r0, [r3, #0]
 8015192:	f7ff fee5 	bl	8014f60 <rcl_clock_get_now>
 8015196:	2800      	cmp	r0, #0
 8015198:	d1b8      	bne.n	801510c <_rcl_timer_time_jump+0x14>
 801519a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801519e:	4313      	orrs	r3, r2
 80151a0:	d0b4      	beq.n	801510c <_rcl_timer_time_jump+0x14>
 80151a2:	6820      	ldr	r0, [r4, #0]
 80151a4:	2105      	movs	r1, #5
 80151a6:	3028      	adds	r0, #40	@ 0x28
 80151a8:	f001 fdb6 	bl	8016d18 <__atomic_load_8>
 80151ac:	9d02      	ldr	r5, [sp, #8]
 80151ae:	9b03      	ldr	r3, [sp, #12]
 80151b0:	4602      	mov	r2, r0
 80151b2:	6820      	ldr	r0, [r4, #0]
 80151b4:	1b52      	subs	r2, r2, r5
 80151b6:	f04f 0405 	mov.w	r4, #5
 80151ba:	9400      	str	r4, [sp, #0]
 80151bc:	eb61 0303 	sbc.w	r3, r1, r3
 80151c0:	3030      	adds	r0, #48	@ 0x30
 80151c2:	f001 fddf 	bl	8016d84 <__atomic_store_8>
 80151c6:	e7a1      	b.n	801510c <_rcl_timer_time_jump+0x14>
 80151c8:	4313      	orrs	r3, r2
 80151ca:	d09f      	beq.n	801510c <_rcl_timer_time_jump+0x14>
 80151cc:	6820      	ldr	r0, [r4, #0]
 80151ce:	f04f 0805 	mov.w	r8, #5
 80151d2:	2300      	movs	r3, #0
 80151d4:	f8cd 8000 	str.w	r8, [sp]
 80151d8:	3030      	adds	r0, #48	@ 0x30
 80151da:	2200      	movs	r2, #0
 80151dc:	f001 fe08 	bl	8016df0 <__atomic_exchange_8>
 80151e0:	ea51 0300 	orrs.w	r3, r1, r0
 80151e4:	4606      	mov	r6, r0
 80151e6:	460f      	mov	r7, r1
 80151e8:	d090      	beq.n	801510c <_rcl_timer_time_jump+0x14>
 80151ea:	9a02      	ldr	r2, [sp, #8]
 80151ec:	9b03      	ldr	r3, [sp, #12]
 80151ee:	f8cd 8000 	str.w	r8, [sp]
 80151f2:	1a12      	subs	r2, r2, r0
 80151f4:	6820      	ldr	r0, [r4, #0]
 80151f6:	eb63 0301 	sbc.w	r3, r3, r1
 80151fa:	eb12 020a 	adds.w	r2, r2, sl
 80151fe:	eb43 0305 	adc.w	r3, r3, r5
 8015202:	3028      	adds	r0, #40	@ 0x28
 8015204:	f001 fdbe 	bl	8016d84 <__atomic_store_8>
 8015208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801520c:	f8cd 8000 	str.w	r8, [sp]
 8015210:	6820      	ldr	r0, [r4, #0]
 8015212:	1b92      	subs	r2, r2, r6
 8015214:	eb63 0307 	sbc.w	r3, r3, r7
 8015218:	3020      	adds	r0, #32
 801521a:	f001 fdb3 	bl	8016d84 <__atomic_store_8>
 801521e:	e775      	b.n	801510c <_rcl_timer_time_jump+0x14>
 8015220:	6820      	ldr	r0, [r4, #0]
 8015222:	3008      	adds	r0, #8
 8015224:	f004 f99e 	bl	8019564 <rcl_trigger_guard_condition>
 8015228:	e770      	b.n	801510c <_rcl_timer_time_jump+0x14>
 801522a:	bf00      	nop

0801522c <rcl_get_zero_initialized_timer>:
 801522c:	4b01      	ldr	r3, [pc, #4]	@ (8015234 <rcl_get_zero_initialized_timer+0x8>)
 801522e:	6818      	ldr	r0, [r3, #0]
 8015230:	4770      	bx	lr
 8015232:	bf00      	nop
 8015234:	0801b6b0 	.word	0x0801b6b0

08015238 <rcl_timer_init>:
 8015238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801523c:	b0aa      	sub	sp, #168	@ 0xa8
 801523e:	4604      	mov	r4, r0
 8015240:	a835      	add	r0, sp, #212	@ 0xd4
 8015242:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 8015246:	460d      	mov	r5, r1
 8015248:	4692      	mov	sl, r2
 801524a:	f7f8 fe2b 	bl	800dea4 <rcutils_allocator_is_valid>
 801524e:	2800      	cmp	r0, #0
 8015250:	d064      	beq.n	801531c <rcl_timer_init+0xe4>
 8015252:	2c00      	cmp	r4, #0
 8015254:	d062      	beq.n	801531c <rcl_timer_init+0xe4>
 8015256:	2d00      	cmp	r5, #0
 8015258:	d060      	beq.n	801531c <rcl_timer_init+0xe4>
 801525a:	2f00      	cmp	r7, #0
 801525c:	db5e      	blt.n	801531c <rcl_timer_init+0xe4>
 801525e:	6823      	ldr	r3, [r4, #0]
 8015260:	b123      	cbz	r3, 801526c <rcl_timer_init+0x34>
 8015262:	2664      	movs	r6, #100	@ 0x64
 8015264:	4630      	mov	r0, r6
 8015266:	b02a      	add	sp, #168	@ 0xa8
 8015268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801526c:	a908      	add	r1, sp, #32
 801526e:	4628      	mov	r0, r5
 8015270:	f7ff fe76 	bl	8014f60 <rcl_clock_get_now>
 8015274:	4606      	mov	r6, r0
 8015276:	2800      	cmp	r0, #0
 8015278:	d1f4      	bne.n	8015264 <rcl_timer_init+0x2c>
 801527a:	ae06      	add	r6, sp, #24
 801527c:	4630      	mov	r0, r6
 801527e:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 8015282:	f004 f877 	bl	8019374 <rcl_get_zero_initialized_guard_condition>
 8015286:	e896 0003 	ldmia.w	r6, {r0, r1}
 801528a:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 801528e:	ae0b      	add	r6, sp, #44	@ 0x2c
 8015290:	e889 0003 	stmia.w	r9, {r0, r1}
 8015294:	4630      	mov	r0, r6
 8015296:	f004 f949 	bl	801952c <rcl_guard_condition_get_default_options>
 801529a:	ab0d      	add	r3, sp, #52	@ 0x34
 801529c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80152a0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80152a4:	4651      	mov	r1, sl
 80152a6:	e896 000c 	ldmia.w	r6, {r2, r3}
 80152aa:	4648      	mov	r0, r9
 80152ac:	f004 f86c 	bl	8019388 <rcl_guard_condition_init>
 80152b0:	4606      	mov	r6, r0
 80152b2:	2800      	cmp	r0, #0
 80152b4:	d1d6      	bne.n	8015264 <rcl_timer_init+0x2c>
 80152b6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80152b8:	781b      	ldrb	r3, [r3, #0]
 80152ba:	2b01      	cmp	r3, #1
 80152bc:	d033      	beq.n	8015326 <rcl_timer_init+0xee>
 80152be:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 80152c0:	911a      	str	r1, [sp, #104]	@ 0x68
 80152c2:	4642      	mov	r2, r8
 80152c4:	463b      	mov	r3, r7
 80152c6:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 80152ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80152ce:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8015380 <rcl_timer_init+0x148>
 80152d2:	eb12 0008 	adds.w	r0, r2, r8
 80152d6:	eb47 0103 	adc.w	r1, r7, r3
 80152da:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 80152de:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 80152e2:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 80152e6:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 80152ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80152ee:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 80152f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80152f6:	f8de 3000 	ldr.w	r3, [lr]
 80152fa:	f8cc 3000 	str.w	r3, [ip]
 80152fe:	f04f 0a00 	mov.w	sl, #0
 8015302:	4619      	mov	r1, r3
 8015304:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8015308:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 801530a:	2050      	movs	r0, #80	@ 0x50
 801530c:	4798      	blx	r3
 801530e:	6020      	str	r0, [r4, #0]
 8015310:	b358      	cbz	r0, 801536a <rcl_timer_init+0x132>
 8015312:	2250      	movs	r2, #80	@ 0x50
 8015314:	a916      	add	r1, sp, #88	@ 0x58
 8015316:	f004 ff20 	bl	801a15a <memcpy>
 801531a:	e7a3      	b.n	8015264 <rcl_timer_init+0x2c>
 801531c:	260b      	movs	r6, #11
 801531e:	4630      	mov	r0, r6
 8015320:	b02a      	add	sp, #168	@ 0xa8
 8015322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015326:	2001      	movs	r0, #1
 8015328:	2100      	movs	r1, #0
 801532a:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 801532e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015332:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8015336:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 801533a:	4a13      	ldr	r2, [pc, #76]	@ (8015388 <rcl_timer_init+0x150>)
 801533c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8015340:	9405      	str	r4, [sp, #20]
 8015342:	9204      	str	r2, [sp, #16]
 8015344:	ab12      	add	r3, sp, #72	@ 0x48
 8015346:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015348:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801534c:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8015350:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8015354:	4628      	mov	r0, r5
 8015356:	f7ff fe0f 	bl	8014f78 <rcl_clock_add_jump_callback>
 801535a:	4682      	mov	sl, r0
 801535c:	2800      	cmp	r0, #0
 801535e:	d0ae      	beq.n	80152be <rcl_timer_init+0x86>
 8015360:	4648      	mov	r0, r9
 8015362:	f004 f8bd 	bl	80194e0 <rcl_guard_condition_fini>
 8015366:	4656      	mov	r6, sl
 8015368:	e77c      	b.n	8015264 <rcl_timer_init+0x2c>
 801536a:	4648      	mov	r0, r9
 801536c:	f004 f8b8 	bl	80194e0 <rcl_guard_condition_fini>
 8015370:	4905      	ldr	r1, [pc, #20]	@ (8015388 <rcl_timer_init+0x150>)
 8015372:	4622      	mov	r2, r4
 8015374:	4628      	mov	r0, r5
 8015376:	f7ff fe61 	bl	801503c <rcl_clock_remove_jump_callback>
 801537a:	260a      	movs	r6, #10
 801537c:	e772      	b.n	8015264 <rcl_timer_init+0x2c>
 801537e:	bf00      	nop
	...
 8015388:	080150f9 	.word	0x080150f9

0801538c <rcl_timer_call>:
 801538c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015390:	b087      	sub	sp, #28
 8015392:	2800      	cmp	r0, #0
 8015394:	d06d      	beq.n	8015472 <rcl_timer_call+0xe6>
 8015396:	6803      	ldr	r3, [r0, #0]
 8015398:	4604      	mov	r4, r0
 801539a:	2b00      	cmp	r3, #0
 801539c:	d063      	beq.n	8015466 <rcl_timer_call+0xda>
 801539e:	f3bf 8f5b 	dmb	ish
 80153a2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80153a6:	f3bf 8f5b 	dmb	ish
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d150      	bne.n	8015450 <rcl_timer_call+0xc4>
 80153ae:	6803      	ldr	r3, [r0, #0]
 80153b0:	a904      	add	r1, sp, #16
 80153b2:	6818      	ldr	r0, [r3, #0]
 80153b4:	f7ff fdd4 	bl	8014f60 <rcl_clock_get_now>
 80153b8:	4605      	mov	r5, r0
 80153ba:	2800      	cmp	r0, #0
 80153bc:	d14a      	bne.n	8015454 <rcl_timer_call+0xc8>
 80153be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	db4a      	blt.n	801545c <rcl_timer_call+0xd0>
 80153c6:	6820      	ldr	r0, [r4, #0]
 80153c8:	f04f 0a05 	mov.w	sl, #5
 80153cc:	f8cd a000 	str.w	sl, [sp]
 80153d0:	3020      	adds	r0, #32
 80153d2:	f001 fd0d 	bl	8016df0 <__atomic_exchange_8>
 80153d6:	6823      	ldr	r3, [r4, #0]
 80153d8:	f3bf 8f5b 	dmb	ish
 80153dc:	4680      	mov	r8, r0
 80153de:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80153e2:	f3bf 8f5b 	dmb	ish
 80153e6:	6820      	ldr	r0, [r4, #0]
 80153e8:	4689      	mov	r9, r1
 80153ea:	3028      	adds	r0, #40	@ 0x28
 80153ec:	4651      	mov	r1, sl
 80153ee:	f001 fc93 	bl	8016d18 <__atomic_load_8>
 80153f2:	4606      	mov	r6, r0
 80153f4:	6820      	ldr	r0, [r4, #0]
 80153f6:	460f      	mov	r7, r1
 80153f8:	3018      	adds	r0, #24
 80153fa:	4651      	mov	r1, sl
 80153fc:	f001 fc8c 	bl	8016d18 <__atomic_load_8>
 8015400:	1836      	adds	r6, r6, r0
 8015402:	4602      	mov	r2, r0
 8015404:	4682      	mov	sl, r0
 8015406:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 801540a:	eb47 0701 	adc.w	r7, r7, r1
 801540e:	4286      	cmp	r6, r0
 8015410:	460b      	mov	r3, r1
 8015412:	eb77 010c 	sbcs.w	r1, r7, ip
 8015416:	da04      	bge.n	8015422 <rcl_timer_call+0x96>
 8015418:	ea53 0102 	orrs.w	r1, r3, r2
 801541c:	d12e      	bne.n	801547c <rcl_timer_call+0xf0>
 801541e:	4606      	mov	r6, r0
 8015420:	4667      	mov	r7, ip
 8015422:	6820      	ldr	r0, [r4, #0]
 8015424:	2105      	movs	r1, #5
 8015426:	4632      	mov	r2, r6
 8015428:	463b      	mov	r3, r7
 801542a:	3028      	adds	r0, #40	@ 0x28
 801542c:	9100      	str	r1, [sp, #0]
 801542e:	f001 fca9 	bl	8016d84 <__atomic_store_8>
 8015432:	f1bb 0f00 	cmp.w	fp, #0
 8015436:	d00d      	beq.n	8015454 <rcl_timer_call+0xc8>
 8015438:	9a04      	ldr	r2, [sp, #16]
 801543a:	9b05      	ldr	r3, [sp, #20]
 801543c:	ebb2 0208 	subs.w	r2, r2, r8
 8015440:	4620      	mov	r0, r4
 8015442:	eb63 0309 	sbc.w	r3, r3, r9
 8015446:	47d8      	blx	fp
 8015448:	4628      	mov	r0, r5
 801544a:	b007      	add	sp, #28
 801544c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015450:	f240 3521 	movw	r5, #801	@ 0x321
 8015454:	4628      	mov	r0, r5
 8015456:	b007      	add	sp, #28
 8015458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801545c:	2501      	movs	r5, #1
 801545e:	4628      	mov	r0, r5
 8015460:	b007      	add	sp, #28
 8015462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015466:	f44f 7548 	mov.w	r5, #800	@ 0x320
 801546a:	4628      	mov	r0, r5
 801546c:	b007      	add	sp, #28
 801546e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015472:	250b      	movs	r5, #11
 8015474:	4628      	mov	r0, r5
 8015476:	b007      	add	sp, #28
 8015478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801547c:	1b80      	subs	r0, r0, r6
 801547e:	eb6c 0107 	sbc.w	r1, ip, r7
 8015482:	3801      	subs	r0, #1
 8015484:	f161 0100 	sbc.w	r1, r1, #0
 8015488:	e9cd 3202 	strd	r3, r2, [sp, #8]
 801548c:	f7eb fb1e 	bl	8000acc <__aeabi_ldivmod>
 8015490:	9b02      	ldr	r3, [sp, #8]
 8015492:	3001      	adds	r0, #1
 8015494:	f141 0100 	adc.w	r1, r1, #0
 8015498:	fb00 f303 	mul.w	r3, r0, r3
 801549c:	fb01 330a 	mla	r3, r1, sl, r3
 80154a0:	fba0 0a0a 	umull	r0, sl, r0, sl
 80154a4:	1986      	adds	r6, r0, r6
 80154a6:	4453      	add	r3, sl
 80154a8:	eb43 0707 	adc.w	r7, r3, r7
 80154ac:	e7b9      	b.n	8015422 <rcl_timer_call+0x96>
 80154ae:	bf00      	nop

080154b0 <rcl_timer_is_ready>:
 80154b0:	b570      	push	{r4, r5, r6, lr}
 80154b2:	b082      	sub	sp, #8
 80154b4:	b378      	cbz	r0, 8015516 <rcl_timer_is_ready+0x66>
 80154b6:	6803      	ldr	r3, [r0, #0]
 80154b8:	4604      	mov	r4, r0
 80154ba:	b383      	cbz	r3, 801551e <rcl_timer_is_ready+0x6e>
 80154bc:	460d      	mov	r5, r1
 80154be:	b351      	cbz	r1, 8015516 <rcl_timer_is_ready+0x66>
 80154c0:	f3bf 8f5b 	dmb	ish
 80154c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80154c8:	f3bf 8f5b 	dmb	ish
 80154cc:	b953      	cbnz	r3, 80154e4 <rcl_timer_is_ready+0x34>
 80154ce:	6803      	ldr	r3, [r0, #0]
 80154d0:	4669      	mov	r1, sp
 80154d2:	6818      	ldr	r0, [r3, #0]
 80154d4:	f7ff fd44 	bl	8014f60 <rcl_clock_get_now>
 80154d8:	4606      	mov	r6, r0
 80154da:	b140      	cbz	r0, 80154ee <rcl_timer_is_ready+0x3e>
 80154dc:	f240 3321 	movw	r3, #801	@ 0x321
 80154e0:	4298      	cmp	r0, r3
 80154e2:	d101      	bne.n	80154e8 <rcl_timer_is_ready+0x38>
 80154e4:	2600      	movs	r6, #0
 80154e6:	702e      	strb	r6, [r5, #0]
 80154e8:	4630      	mov	r0, r6
 80154ea:	b002      	add	sp, #8
 80154ec:	bd70      	pop	{r4, r5, r6, pc}
 80154ee:	6820      	ldr	r0, [r4, #0]
 80154f0:	2105      	movs	r1, #5
 80154f2:	3028      	adds	r0, #40	@ 0x28
 80154f4:	f001 fc10 	bl	8016d18 <__atomic_load_8>
 80154f8:	9b00      	ldr	r3, [sp, #0]
 80154fa:	1ac0      	subs	r0, r0, r3
 80154fc:	9b01      	ldr	r3, [sp, #4]
 80154fe:	eb61 0103 	sbc.w	r1, r1, r3
 8015502:	2801      	cmp	r0, #1
 8015504:	f171 0300 	sbcs.w	r3, r1, #0
 8015508:	bfb4      	ite	lt
 801550a:	2301      	movlt	r3, #1
 801550c:	2300      	movge	r3, #0
 801550e:	4630      	mov	r0, r6
 8015510:	702b      	strb	r3, [r5, #0]
 8015512:	b002      	add	sp, #8
 8015514:	bd70      	pop	{r4, r5, r6, pc}
 8015516:	260b      	movs	r6, #11
 8015518:	4630      	mov	r0, r6
 801551a:	b002      	add	sp, #8
 801551c:	bd70      	pop	{r4, r5, r6, pc}
 801551e:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8015522:	e7e1      	b.n	80154e8 <rcl_timer_is_ready+0x38>

08015524 <rcl_timer_get_time_until_next_call>:
 8015524:	b570      	push	{r4, r5, r6, lr}
 8015526:	b082      	sub	sp, #8
 8015528:	b330      	cbz	r0, 8015578 <rcl_timer_get_time_until_next_call+0x54>
 801552a:	6803      	ldr	r3, [r0, #0]
 801552c:	4604      	mov	r4, r0
 801552e:	b33b      	cbz	r3, 8015580 <rcl_timer_get_time_until_next_call+0x5c>
 8015530:	460d      	mov	r5, r1
 8015532:	b309      	cbz	r1, 8015578 <rcl_timer_get_time_until_next_call+0x54>
 8015534:	f3bf 8f5b 	dmb	ish
 8015538:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801553c:	f3bf 8f5b 	dmb	ish
 8015540:	b9ab      	cbnz	r3, 801556e <rcl_timer_get_time_until_next_call+0x4a>
 8015542:	6803      	ldr	r3, [r0, #0]
 8015544:	4669      	mov	r1, sp
 8015546:	6818      	ldr	r0, [r3, #0]
 8015548:	f7ff fd0a 	bl	8014f60 <rcl_clock_get_now>
 801554c:	4606      	mov	r6, r0
 801554e:	b958      	cbnz	r0, 8015568 <rcl_timer_get_time_until_next_call+0x44>
 8015550:	6820      	ldr	r0, [r4, #0]
 8015552:	2105      	movs	r1, #5
 8015554:	3028      	adds	r0, #40	@ 0x28
 8015556:	f001 fbdf 	bl	8016d18 <__atomic_load_8>
 801555a:	9b00      	ldr	r3, [sp, #0]
 801555c:	1ac0      	subs	r0, r0, r3
 801555e:	9b01      	ldr	r3, [sp, #4]
 8015560:	6028      	str	r0, [r5, #0]
 8015562:	eb61 0103 	sbc.w	r1, r1, r3
 8015566:	6069      	str	r1, [r5, #4]
 8015568:	4630      	mov	r0, r6
 801556a:	b002      	add	sp, #8
 801556c:	bd70      	pop	{r4, r5, r6, pc}
 801556e:	f240 3621 	movw	r6, #801	@ 0x321
 8015572:	4630      	mov	r0, r6
 8015574:	b002      	add	sp, #8
 8015576:	bd70      	pop	{r4, r5, r6, pc}
 8015578:	260b      	movs	r6, #11
 801557a:	4630      	mov	r0, r6
 801557c:	b002      	add	sp, #8
 801557e:	bd70      	pop	{r4, r5, r6, pc}
 8015580:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8015584:	e7f0      	b.n	8015568 <rcl_timer_get_time_until_next_call+0x44>
 8015586:	bf00      	nop

08015588 <rcl_timer_get_guard_condition>:
 8015588:	b130      	cbz	r0, 8015598 <rcl_timer_get_guard_condition+0x10>
 801558a:	6800      	ldr	r0, [r0, #0]
 801558c:	b120      	cbz	r0, 8015598 <rcl_timer_get_guard_condition+0x10>
 801558e:	68c3      	ldr	r3, [r0, #12]
 8015590:	b10b      	cbz	r3, 8015596 <rcl_timer_get_guard_condition+0xe>
 8015592:	3008      	adds	r0, #8
 8015594:	4770      	bx	lr
 8015596:	4618      	mov	r0, r3
 8015598:	4770      	bx	lr
 801559a:	bf00      	nop

0801559c <rcl_validate_enclave_name_with_size>:
 801559c:	b378      	cbz	r0, 80155fe <rcl_validate_enclave_name_with_size+0x62>
 801559e:	b570      	push	{r4, r5, r6, lr}
 80155a0:	4615      	mov	r5, r2
 80155a2:	b0c2      	sub	sp, #264	@ 0x108
 80155a4:	b302      	cbz	r2, 80155e8 <rcl_validate_enclave_name_with_size+0x4c>
 80155a6:	461e      	mov	r6, r3
 80155a8:	466a      	mov	r2, sp
 80155aa:	ab01      	add	r3, sp, #4
 80155ac:	460c      	mov	r4, r1
 80155ae:	f002 f835 	bl	801761c <rmw_validate_namespace_with_size>
 80155b2:	4684      	mov	ip, r0
 80155b4:	b9e8      	cbnz	r0, 80155f2 <rcl_validate_enclave_name_with_size+0x56>
 80155b6:	9b00      	ldr	r3, [sp, #0]
 80155b8:	b923      	cbnz	r3, 80155c4 <rcl_validate_enclave_name_with_size+0x28>
 80155ba:	2300      	movs	r3, #0
 80155bc:	602b      	str	r3, [r5, #0]
 80155be:	4660      	mov	r0, ip
 80155c0:	b042      	add	sp, #264	@ 0x108
 80155c2:	bd70      	pop	{r4, r5, r6, pc}
 80155c4:	2b07      	cmp	r3, #7
 80155c6:	d007      	beq.n	80155d8 <rcl_validate_enclave_name_with_size+0x3c>
 80155c8:	1e5a      	subs	r2, r3, #1
 80155ca:	2a05      	cmp	r2, #5
 80155cc:	d833      	bhi.n	8015636 <rcl_validate_enclave_name_with_size+0x9a>
 80155ce:	e8df f002 	tbb	[pc, r2]
 80155d2:	2c2f      	.short	0x2c2f
 80155d4:	1a232629 	.word	0x1a232629
 80155d8:	2cff      	cmp	r4, #255	@ 0xff
 80155da:	d9ee      	bls.n	80155ba <rcl_validate_enclave_name_with_size+0x1e>
 80155dc:	602b      	str	r3, [r5, #0]
 80155de:	2e00      	cmp	r6, #0
 80155e0:	d0ed      	beq.n	80155be <rcl_validate_enclave_name_with_size+0x22>
 80155e2:	23fe      	movs	r3, #254	@ 0xfe
 80155e4:	6033      	str	r3, [r6, #0]
 80155e6:	e7ea      	b.n	80155be <rcl_validate_enclave_name_with_size+0x22>
 80155e8:	f04f 0c0b 	mov.w	ip, #11
 80155ec:	4660      	mov	r0, ip
 80155ee:	b042      	add	sp, #264	@ 0x108
 80155f0:	bd70      	pop	{r4, r5, r6, pc}
 80155f2:	f7fe fd87 	bl	8014104 <rcl_convert_rmw_ret_to_rcl_ret>
 80155f6:	4684      	mov	ip, r0
 80155f8:	4660      	mov	r0, ip
 80155fa:	b042      	add	sp, #264	@ 0x108
 80155fc:	bd70      	pop	{r4, r5, r6, pc}
 80155fe:	f04f 0c0b 	mov.w	ip, #11
 8015602:	4660      	mov	r0, ip
 8015604:	4770      	bx	lr
 8015606:	2306      	movs	r3, #6
 8015608:	602b      	str	r3, [r5, #0]
 801560a:	2e00      	cmp	r6, #0
 801560c:	d0d7      	beq.n	80155be <rcl_validate_enclave_name_with_size+0x22>
 801560e:	9b01      	ldr	r3, [sp, #4]
 8015610:	6033      	str	r3, [r6, #0]
 8015612:	4660      	mov	r0, ip
 8015614:	b042      	add	sp, #264	@ 0x108
 8015616:	bd70      	pop	{r4, r5, r6, pc}
 8015618:	2305      	movs	r3, #5
 801561a:	602b      	str	r3, [r5, #0]
 801561c:	e7f5      	b.n	801560a <rcl_validate_enclave_name_with_size+0x6e>
 801561e:	2304      	movs	r3, #4
 8015620:	602b      	str	r3, [r5, #0]
 8015622:	e7f2      	b.n	801560a <rcl_validate_enclave_name_with_size+0x6e>
 8015624:	2303      	movs	r3, #3
 8015626:	602b      	str	r3, [r5, #0]
 8015628:	e7ef      	b.n	801560a <rcl_validate_enclave_name_with_size+0x6e>
 801562a:	2302      	movs	r3, #2
 801562c:	602b      	str	r3, [r5, #0]
 801562e:	e7ec      	b.n	801560a <rcl_validate_enclave_name_with_size+0x6e>
 8015630:	2301      	movs	r3, #1
 8015632:	602b      	str	r3, [r5, #0]
 8015634:	e7e9      	b.n	801560a <rcl_validate_enclave_name_with_size+0x6e>
 8015636:	4a04      	ldr	r2, [pc, #16]	@ (8015648 <rcl_validate_enclave_name_with_size+0xac>)
 8015638:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801563c:	a802      	add	r0, sp, #8
 801563e:	f001 fd25 	bl	801708c <rcutils_snprintf>
 8015642:	f04f 0c01 	mov.w	ip, #1
 8015646:	e7ba      	b.n	80155be <rcl_validate_enclave_name_with_size+0x22>
 8015648:	0801b6b4 	.word	0x0801b6b4

0801564c <rcl_validate_enclave_name>:
 801564c:	b168      	cbz	r0, 801566a <rcl_validate_enclave_name+0x1e>
 801564e:	b570      	push	{r4, r5, r6, lr}
 8015650:	460d      	mov	r5, r1
 8015652:	4616      	mov	r6, r2
 8015654:	4604      	mov	r4, r0
 8015656:	f7ea fded 	bl	8000234 <strlen>
 801565a:	4633      	mov	r3, r6
 801565c:	4601      	mov	r1, r0
 801565e:	462a      	mov	r2, r5
 8015660:	4620      	mov	r0, r4
 8015662:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015666:	f7ff bf99 	b.w	801559c <rcl_validate_enclave_name_with_size>
 801566a:	200b      	movs	r0, #11
 801566c:	4770      	bx	lr
 801566e:	bf00      	nop

08015670 <rcl_get_zero_initialized_wait_set>:
 8015670:	b510      	push	{r4, lr}
 8015672:	4c08      	ldr	r4, [pc, #32]	@ (8015694 <rcl_get_zero_initialized_wait_set+0x24>)
 8015674:	4686      	mov	lr, r0
 8015676:	4684      	mov	ip, r0
 8015678:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801567a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801567e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015680:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015686:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801568a:	6823      	ldr	r3, [r4, #0]
 801568c:	f8cc 3000 	str.w	r3, [ip]
 8015690:	4670      	mov	r0, lr
 8015692:	bd10      	pop	{r4, pc}
 8015694:	0801b714 	.word	0x0801b714

08015698 <rcl_wait_set_is_valid>:
 8015698:	b118      	cbz	r0, 80156a2 <rcl_wait_set_is_valid+0xa>
 801569a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801569c:	3800      	subs	r0, #0
 801569e:	bf18      	it	ne
 80156a0:	2001      	movne	r0, #1
 80156a2:	4770      	bx	lr

080156a4 <rcl_wait_set_fini>:
 80156a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156a8:	b082      	sub	sp, #8
 80156aa:	2800      	cmp	r0, #0
 80156ac:	f000 8095 	beq.w	80157da <rcl_wait_set_fini+0x136>
 80156b0:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80156b2:	4604      	mov	r4, r0
 80156b4:	2e00      	cmp	r6, #0
 80156b6:	f000 808c 	beq.w	80157d2 <rcl_wait_set_fini+0x12e>
 80156ba:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 80156bc:	f002 fd68 	bl	8018190 <rmw_destroy_wait_set>
 80156c0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80156c2:	1e06      	subs	r6, r0, #0
 80156c4:	bf18      	it	ne
 80156c6:	f44f 7661 	movne.w	r6, #900	@ 0x384
 80156ca:	2d00      	cmp	r5, #0
 80156cc:	f000 8081 	beq.w	80157d2 <rcl_wait_set_fini+0x12e>
 80156d0:	6820      	ldr	r0, [r4, #0]
 80156d2:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80156d6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80156d8:	2700      	movs	r7, #0
 80156da:	6067      	str	r7, [r4, #4]
 80156dc:	602f      	str	r7, [r5, #0]
 80156de:	b120      	cbz	r0, 80156ea <rcl_wait_set_fini+0x46>
 80156e0:	9101      	str	r1, [sp, #4]
 80156e2:	47c0      	blx	r8
 80156e4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80156e6:	9901      	ldr	r1, [sp, #4]
 80156e8:	6027      	str	r7, [r4, #0]
 80156ea:	68a8      	ldr	r0, [r5, #8]
 80156ec:	b120      	cbz	r0, 80156f8 <rcl_wait_set_fini+0x54>
 80156ee:	47c0      	blx	r8
 80156f0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80156f2:	2300      	movs	r3, #0
 80156f4:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80156f8:	68a0      	ldr	r0, [r4, #8]
 80156fa:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80156fc:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80156fe:	f04f 0800 	mov.w	r8, #0
 8015702:	f8c4 800c 	str.w	r8, [r4, #12]
 8015706:	f8c5 800c 	str.w	r8, [r5, #12]
 801570a:	b128      	cbz	r0, 8015718 <rcl_wait_set_fini+0x74>
 801570c:	47b8      	blx	r7
 801570e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015710:	f8c4 8008 	str.w	r8, [r4, #8]
 8015714:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8015716:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015718:	6968      	ldr	r0, [r5, #20]
 801571a:	f04f 0800 	mov.w	r8, #0
 801571e:	f8c5 8010 	str.w	r8, [r5, #16]
 8015722:	b128      	cbz	r0, 8015730 <rcl_wait_set_fini+0x8c>
 8015724:	47b8      	blx	r7
 8015726:	f8c5 8014 	str.w	r8, [r5, #20]
 801572a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801572c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801572e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015730:	6920      	ldr	r0, [r4, #16]
 8015732:	f04f 0800 	mov.w	r8, #0
 8015736:	f8c4 8014 	str.w	r8, [r4, #20]
 801573a:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 801573e:	b128      	cbz	r0, 801574c <rcl_wait_set_fini+0xa8>
 8015740:	47b8      	blx	r7
 8015742:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015744:	f8c4 8010 	str.w	r8, [r4, #16]
 8015748:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801574a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801574c:	69a0      	ldr	r0, [r4, #24]
 801574e:	f04f 0800 	mov.w	r8, #0
 8015752:	f8c4 801c 	str.w	r8, [r4, #28]
 8015756:	f8c5 8018 	str.w	r8, [r5, #24]
 801575a:	b128      	cbz	r0, 8015768 <rcl_wait_set_fini+0xc4>
 801575c:	9101      	str	r1, [sp, #4]
 801575e:	47b8      	blx	r7
 8015760:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015762:	9901      	ldr	r1, [sp, #4]
 8015764:	f8c4 8018 	str.w	r8, [r4, #24]
 8015768:	6a28      	ldr	r0, [r5, #32]
 801576a:	b120      	cbz	r0, 8015776 <rcl_wait_set_fini+0xd2>
 801576c:	47b8      	blx	r7
 801576e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015770:	2300      	movs	r3, #0
 8015772:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8015776:	6a20      	ldr	r0, [r4, #32]
 8015778:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801577c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801577e:	2700      	movs	r7, #0
 8015780:	6267      	str	r7, [r4, #36]	@ 0x24
 8015782:	626f      	str	r7, [r5, #36]	@ 0x24
 8015784:	b120      	cbz	r0, 8015790 <rcl_wait_set_fini+0xec>
 8015786:	9101      	str	r1, [sp, #4]
 8015788:	47c0      	blx	r8
 801578a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801578c:	9901      	ldr	r1, [sp, #4]
 801578e:	6227      	str	r7, [r4, #32]
 8015790:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8015792:	b120      	cbz	r0, 801579e <rcl_wait_set_fini+0xfa>
 8015794:	47c0      	blx	r8
 8015796:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015798:	2300      	movs	r3, #0
 801579a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801579e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80157a0:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80157a4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80157a6:	2700      	movs	r7, #0
 80157a8:	62e7      	str	r7, [r4, #44]	@ 0x2c
 80157aa:	632f      	str	r7, [r5, #48]	@ 0x30
 80157ac:	b120      	cbz	r0, 80157b8 <rcl_wait_set_fini+0x114>
 80157ae:	9101      	str	r1, [sp, #4]
 80157b0:	47c0      	blx	r8
 80157b2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80157b4:	9901      	ldr	r1, [sp, #4]
 80157b6:	62a7      	str	r7, [r4, #40]	@ 0x28
 80157b8:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80157ba:	b120      	cbz	r0, 80157c6 <rcl_wait_set_fini+0x122>
 80157bc:	47c0      	blx	r8
 80157be:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80157c0:	2300      	movs	r3, #0
 80157c2:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 80157c6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80157c8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80157ca:	4628      	mov	r0, r5
 80157cc:	4798      	blx	r3
 80157ce:	2300      	movs	r3, #0
 80157d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80157d2:	4630      	mov	r0, r6
 80157d4:	b002      	add	sp, #8
 80157d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157da:	260b      	movs	r6, #11
 80157dc:	4630      	mov	r0, r6
 80157de:	b002      	add	sp, #8
 80157e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080157e4 <rcl_wait_set_add_subscription>:
 80157e4:	b318      	cbz	r0, 801582e <rcl_wait_set_add_subscription+0x4a>
 80157e6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80157e8:	b570      	push	{r4, r5, r6, lr}
 80157ea:	4604      	mov	r4, r0
 80157ec:	b30b      	cbz	r3, 8015832 <rcl_wait_set_add_subscription+0x4e>
 80157ee:	b319      	cbz	r1, 8015838 <rcl_wait_set_add_subscription+0x54>
 80157f0:	681d      	ldr	r5, [r3, #0]
 80157f2:	6840      	ldr	r0, [r0, #4]
 80157f4:	4285      	cmp	r5, r0
 80157f6:	d217      	bcs.n	8015828 <rcl_wait_set_add_subscription+0x44>
 80157f8:	6820      	ldr	r0, [r4, #0]
 80157fa:	1c6e      	adds	r6, r5, #1
 80157fc:	601e      	str	r6, [r3, #0]
 80157fe:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015802:	b102      	cbz	r2, 8015806 <rcl_wait_set_add_subscription+0x22>
 8015804:	6015      	str	r5, [r2, #0]
 8015806:	4608      	mov	r0, r1
 8015808:	f7ff fb0a 	bl	8014e20 <rcl_subscription_get_rmw_handle>
 801580c:	b150      	cbz	r0, 8015824 <rcl_wait_set_add_subscription+0x40>
 801580e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015810:	6842      	ldr	r2, [r0, #4]
 8015812:	689b      	ldr	r3, [r3, #8]
 8015814:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015818:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801581a:	6853      	ldr	r3, [r2, #4]
 801581c:	3301      	adds	r3, #1
 801581e:	2000      	movs	r0, #0
 8015820:	6053      	str	r3, [r2, #4]
 8015822:	bd70      	pop	{r4, r5, r6, pc}
 8015824:	2001      	movs	r0, #1
 8015826:	bd70      	pop	{r4, r5, r6, pc}
 8015828:	f240 3086 	movw	r0, #902	@ 0x386
 801582c:	bd70      	pop	{r4, r5, r6, pc}
 801582e:	200b      	movs	r0, #11
 8015830:	4770      	bx	lr
 8015832:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015836:	bd70      	pop	{r4, r5, r6, pc}
 8015838:	200b      	movs	r0, #11
 801583a:	bd70      	pop	{r4, r5, r6, pc}

0801583c <rcl_wait_set_clear>:
 801583c:	2800      	cmp	r0, #0
 801583e:	d073      	beq.n	8015928 <rcl_wait_set_clear+0xec>
 8015840:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015842:	b510      	push	{r4, lr}
 8015844:	4604      	mov	r4, r0
 8015846:	2b00      	cmp	r3, #0
 8015848:	d070      	beq.n	801592c <rcl_wait_set_clear+0xf0>
 801584a:	6800      	ldr	r0, [r0, #0]
 801584c:	b138      	cbz	r0, 801585e <rcl_wait_set_clear+0x22>
 801584e:	6862      	ldr	r2, [r4, #4]
 8015850:	2100      	movs	r1, #0
 8015852:	0092      	lsls	r2, r2, #2
 8015854:	f004 fbb8 	bl	8019fc8 <memset>
 8015858:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801585a:	2200      	movs	r2, #0
 801585c:	601a      	str	r2, [r3, #0]
 801585e:	68a0      	ldr	r0, [r4, #8]
 8015860:	b138      	cbz	r0, 8015872 <rcl_wait_set_clear+0x36>
 8015862:	68e2      	ldr	r2, [r4, #12]
 8015864:	2100      	movs	r1, #0
 8015866:	0092      	lsls	r2, r2, #2
 8015868:	f004 fbae 	bl	8019fc8 <memset>
 801586c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801586e:	2200      	movs	r2, #0
 8015870:	60da      	str	r2, [r3, #12]
 8015872:	69a0      	ldr	r0, [r4, #24]
 8015874:	b138      	cbz	r0, 8015886 <rcl_wait_set_clear+0x4a>
 8015876:	69e2      	ldr	r2, [r4, #28]
 8015878:	2100      	movs	r1, #0
 801587a:	0092      	lsls	r2, r2, #2
 801587c:	f004 fba4 	bl	8019fc8 <memset>
 8015880:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015882:	2200      	movs	r2, #0
 8015884:	619a      	str	r2, [r3, #24]
 8015886:	6a20      	ldr	r0, [r4, #32]
 8015888:	b138      	cbz	r0, 801589a <rcl_wait_set_clear+0x5e>
 801588a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801588c:	2100      	movs	r1, #0
 801588e:	0092      	lsls	r2, r2, #2
 8015890:	f004 fb9a 	bl	8019fc8 <memset>
 8015894:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015896:	2200      	movs	r2, #0
 8015898:	625a      	str	r2, [r3, #36]	@ 0x24
 801589a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801589c:	b138      	cbz	r0, 80158ae <rcl_wait_set_clear+0x72>
 801589e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80158a0:	2100      	movs	r1, #0
 80158a2:	0092      	lsls	r2, r2, #2
 80158a4:	f004 fb90 	bl	8019fc8 <memset>
 80158a8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80158aa:	2200      	movs	r2, #0
 80158ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80158ae:	6920      	ldr	r0, [r4, #16]
 80158b0:	b138      	cbz	r0, 80158c2 <rcl_wait_set_clear+0x86>
 80158b2:	6962      	ldr	r2, [r4, #20]
 80158b4:	2100      	movs	r1, #0
 80158b6:	0092      	lsls	r2, r2, #2
 80158b8:	f004 fb86 	bl	8019fc8 <memset>
 80158bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80158be:	2200      	movs	r2, #0
 80158c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80158c2:	6898      	ldr	r0, [r3, #8]
 80158c4:	b138      	cbz	r0, 80158d6 <rcl_wait_set_clear+0x9a>
 80158c6:	685a      	ldr	r2, [r3, #4]
 80158c8:	2100      	movs	r1, #0
 80158ca:	0092      	lsls	r2, r2, #2
 80158cc:	f004 fb7c 	bl	8019fc8 <memset>
 80158d0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80158d2:	2200      	movs	r2, #0
 80158d4:	605a      	str	r2, [r3, #4]
 80158d6:	6958      	ldr	r0, [r3, #20]
 80158d8:	b138      	cbz	r0, 80158ea <rcl_wait_set_clear+0xae>
 80158da:	691a      	ldr	r2, [r3, #16]
 80158dc:	2100      	movs	r1, #0
 80158de:	0092      	lsls	r2, r2, #2
 80158e0:	f004 fb72 	bl	8019fc8 <memset>
 80158e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80158e6:	2200      	movs	r2, #0
 80158e8:	611a      	str	r2, [r3, #16]
 80158ea:	6a18      	ldr	r0, [r3, #32]
 80158ec:	b138      	cbz	r0, 80158fe <rcl_wait_set_clear+0xc2>
 80158ee:	69da      	ldr	r2, [r3, #28]
 80158f0:	2100      	movs	r1, #0
 80158f2:	0092      	lsls	r2, r2, #2
 80158f4:	f004 fb68 	bl	8019fc8 <memset>
 80158f8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80158fa:	2200      	movs	r2, #0
 80158fc:	61da      	str	r2, [r3, #28]
 80158fe:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8015900:	b138      	cbz	r0, 8015912 <rcl_wait_set_clear+0xd6>
 8015902:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015904:	2100      	movs	r1, #0
 8015906:	0092      	lsls	r2, r2, #2
 8015908:	f004 fb5e 	bl	8019fc8 <memset>
 801590c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801590e:	2200      	movs	r2, #0
 8015910:	629a      	str	r2, [r3, #40]	@ 0x28
 8015912:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8015914:	b138      	cbz	r0, 8015926 <rcl_wait_set_clear+0xea>
 8015916:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015918:	2100      	movs	r1, #0
 801591a:	0092      	lsls	r2, r2, #2
 801591c:	f004 fb54 	bl	8019fc8 <memset>
 8015920:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015922:	2000      	movs	r0, #0
 8015924:	6358      	str	r0, [r3, #52]	@ 0x34
 8015926:	bd10      	pop	{r4, pc}
 8015928:	200b      	movs	r0, #11
 801592a:	4770      	bx	lr
 801592c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015930:	bd10      	pop	{r4, pc}
 8015932:	bf00      	nop

08015934 <rcl_wait_set_resize>:
 8015934:	2800      	cmp	r0, #0
 8015936:	f000 8185 	beq.w	8015c44 <rcl_wait_set_resize+0x310>
 801593a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801593e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8015940:	b083      	sub	sp, #12
 8015942:	4605      	mov	r5, r0
 8015944:	2c00      	cmp	r4, #0
 8015946:	f000 817f 	beq.w	8015c48 <rcl_wait_set_resize+0x314>
 801594a:	f04f 0900 	mov.w	r9, #0
 801594e:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8015952:	461f      	mov	r7, r3
 8015954:	4688      	mov	r8, r1
 8015956:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 801595a:	4616      	mov	r6, r2
 801595c:	f8c0 9004 	str.w	r9, [r0, #4]
 8015960:	f8c4 9000 	str.w	r9, [r4]
 8015964:	2900      	cmp	r1, #0
 8015966:	f000 80bd 	beq.w	8015ae4 <rcl_wait_set_resize+0x1b0>
 801596a:	008c      	lsls	r4, r1, #2
 801596c:	6800      	ldr	r0, [r0, #0]
 801596e:	9301      	str	r3, [sp, #4]
 8015970:	4652      	mov	r2, sl
 8015972:	4621      	mov	r1, r4
 8015974:	4798      	blx	r3
 8015976:	9b01      	ldr	r3, [sp, #4]
 8015978:	6028      	str	r0, [r5, #0]
 801597a:	2800      	cmp	r0, #0
 801597c:	f000 80cb 	beq.w	8015b16 <rcl_wait_set_resize+0x1e2>
 8015980:	4622      	mov	r2, r4
 8015982:	4649      	mov	r1, r9
 8015984:	9301      	str	r3, [sp, #4]
 8015986:	f004 fb1f 	bl	8019fc8 <memset>
 801598a:	f8c5 8004 	str.w	r8, [r5, #4]
 801598e:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8015992:	9b01      	ldr	r3, [sp, #4]
 8015994:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8015998:	f8c8 9004 	str.w	r9, [r8, #4]
 801599c:	4652      	mov	r2, sl
 801599e:	4621      	mov	r1, r4
 80159a0:	4798      	blx	r3
 80159a2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80159a4:	f8c8 0008 	str.w	r0, [r8, #8]
 80159a8:	689b      	ldr	r3, [r3, #8]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	f000 80ac 	beq.w	8015b08 <rcl_wait_set_resize+0x1d4>
 80159b0:	4622      	mov	r2, r4
 80159b2:	4649      	mov	r1, r9
 80159b4:	4618      	mov	r0, r3
 80159b6:	f004 fb07 	bl	8019fc8 <memset>
 80159ba:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80159bc:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80159c0:	f04f 0800 	mov.w	r8, #0
 80159c4:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 80159c8:	f8c5 800c 	str.w	r8, [r5, #12]
 80159cc:	f8c4 800c 	str.w	r8, [r4, #12]
 80159d0:	2e00      	cmp	r6, #0
 80159d2:	f040 80a4 	bne.w	8015b1e <rcl_wait_set_resize+0x1ea>
 80159d6:	68a8      	ldr	r0, [r5, #8]
 80159d8:	b128      	cbz	r0, 80159e6 <rcl_wait_set_resize+0xb2>
 80159da:	4649      	mov	r1, r9
 80159dc:	4790      	blx	r2
 80159de:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80159e0:	60ae      	str	r6, [r5, #8]
 80159e2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80159e6:	f04f 0800 	mov.w	r8, #0
 80159ea:	19f6      	adds	r6, r6, r7
 80159ec:	f8c4 8010 	str.w	r8, [r4, #16]
 80159f0:	f040 80ac 	bne.w	8015b4c <rcl_wait_set_resize+0x218>
 80159f4:	6960      	ldr	r0, [r4, #20]
 80159f6:	b130      	cbz	r0, 8015a06 <rcl_wait_set_resize+0xd2>
 80159f8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80159fa:	4649      	mov	r1, r9
 80159fc:	4798      	blx	r3
 80159fe:	6166      	str	r6, [r4, #20]
 8015a00:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015a02:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015a06:	2600      	movs	r6, #0
 8015a08:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8015a0c:	616e      	str	r6, [r5, #20]
 8015a0e:	6426      	str	r6, [r4, #64]	@ 0x40
 8015a10:	2f00      	cmp	r7, #0
 8015a12:	f040 80ad 	bne.w	8015b70 <rcl_wait_set_resize+0x23c>
 8015a16:	6928      	ldr	r0, [r5, #16]
 8015a18:	b138      	cbz	r0, 8015a2a <rcl_wait_set_resize+0xf6>
 8015a1a:	4649      	mov	r1, r9
 8015a1c:	47d0      	blx	sl
 8015a1e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015a20:	612f      	str	r7, [r5, #16]
 8015a22:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8015a26:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015a2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015a2c:	2600      	movs	r6, #0
 8015a2e:	61ee      	str	r6, [r5, #28]
 8015a30:	61a6      	str	r6, [r4, #24]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	f040 80af 	bne.w	8015b96 <rcl_wait_set_resize+0x262>
 8015a38:	69a8      	ldr	r0, [r5, #24]
 8015a3a:	b120      	cbz	r0, 8015a46 <rcl_wait_set_resize+0x112>
 8015a3c:	4649      	mov	r1, r9
 8015a3e:	47d0      	blx	sl
 8015a40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015a42:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015a44:	61ab      	str	r3, [r5, #24]
 8015a46:	6a20      	ldr	r0, [r4, #32]
 8015a48:	b128      	cbz	r0, 8015a56 <rcl_wait_set_resize+0x122>
 8015a4a:	4649      	mov	r1, r9
 8015a4c:	47d0      	blx	sl
 8015a4e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015a50:	2300      	movs	r3, #0
 8015a52:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8015a56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015a58:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8015a5a:	2600      	movs	r6, #0
 8015a5c:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8015a60:	626e      	str	r6, [r5, #36]	@ 0x24
 8015a62:	6266      	str	r6, [r4, #36]	@ 0x24
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	f000 80b6 	beq.w	8015bd6 <rcl_wait_set_resize+0x2a2>
 8015a6a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8015a6e:	6a28      	ldr	r0, [r5, #32]
 8015a70:	463a      	mov	r2, r7
 8015a72:	4651      	mov	r1, sl
 8015a74:	47c8      	blx	r9
 8015a76:	6228      	str	r0, [r5, #32]
 8015a78:	2800      	cmp	r0, #0
 8015a7a:	d04c      	beq.n	8015b16 <rcl_wait_set_resize+0x1e2>
 8015a7c:	4652      	mov	r2, sl
 8015a7e:	4631      	mov	r1, r6
 8015a80:	f004 faa2 	bl	8019fc8 <memset>
 8015a84:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015a86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015a88:	626b      	str	r3, [r5, #36]	@ 0x24
 8015a8a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8015a8c:	62a6      	str	r6, [r4, #40]	@ 0x28
 8015a8e:	463a      	mov	r2, r7
 8015a90:	4651      	mov	r1, sl
 8015a92:	47c8      	blx	r9
 8015a94:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015a96:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8015a98:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8015a9a:	2c00      	cmp	r4, #0
 8015a9c:	f000 80f0 	beq.w	8015c80 <rcl_wait_set_resize+0x34c>
 8015aa0:	4620      	mov	r0, r4
 8015aa2:	4652      	mov	r2, sl
 8015aa4:	4631      	mov	r1, r6
 8015aa6:	f004 fa8f 	bl	8019fc8 <memset>
 8015aaa:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015aac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015aae:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8015ab0:	2600      	movs	r6, #0
 8015ab2:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8015ab6:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8015ab8:	6326      	str	r6, [r4, #48]	@ 0x30
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	f040 809d 	bne.w	8015bfa <rcl_wait_set_resize+0x2c6>
 8015ac0:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8015ac2:	b120      	cbz	r0, 8015ace <rcl_wait_set_resize+0x19a>
 8015ac4:	4639      	mov	r1, r7
 8015ac6:	47c0      	blx	r8
 8015ac8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015aca:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015acc:	62ab      	str	r3, [r5, #40]	@ 0x28
 8015ace:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015ad0:	b310      	cbz	r0, 8015b18 <rcl_wait_set_resize+0x1e4>
 8015ad2:	4639      	mov	r1, r7
 8015ad4:	47c0      	blx	r8
 8015ad6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015ad8:	2000      	movs	r0, #0
 8015ada:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8015ade:	b003      	add	sp, #12
 8015ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ae4:	6800      	ldr	r0, [r0, #0]
 8015ae6:	b120      	cbz	r0, 8015af2 <rcl_wait_set_resize+0x1be>
 8015ae8:	4651      	mov	r1, sl
 8015aea:	47d8      	blx	fp
 8015aec:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015aee:	f8c5 8000 	str.w	r8, [r5]
 8015af2:	68a0      	ldr	r0, [r4, #8]
 8015af4:	2800      	cmp	r0, #0
 8015af6:	f43f af61 	beq.w	80159bc <rcl_wait_set_resize+0x88>
 8015afa:	4651      	mov	r1, sl
 8015afc:	47d8      	blx	fp
 8015afe:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015b00:	2300      	movs	r3, #0
 8015b02:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8015b06:	e759      	b.n	80159bc <rcl_wait_set_resize+0x88>
 8015b08:	6828      	ldr	r0, [r5, #0]
 8015b0a:	9301      	str	r3, [sp, #4]
 8015b0c:	4651      	mov	r1, sl
 8015b0e:	47d8      	blx	fp
 8015b10:	9b01      	ldr	r3, [sp, #4]
 8015b12:	e9c5 3300 	strd	r3, r3, [r5]
 8015b16:	200a      	movs	r0, #10
 8015b18:	b003      	add	sp, #12
 8015b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b1e:	00b4      	lsls	r4, r6, #2
 8015b20:	68a8      	ldr	r0, [r5, #8]
 8015b22:	464a      	mov	r2, r9
 8015b24:	4621      	mov	r1, r4
 8015b26:	4798      	blx	r3
 8015b28:	60a8      	str	r0, [r5, #8]
 8015b2a:	2800      	cmp	r0, #0
 8015b2c:	d0f3      	beq.n	8015b16 <rcl_wait_set_resize+0x1e2>
 8015b2e:	4622      	mov	r2, r4
 8015b30:	4641      	mov	r1, r8
 8015b32:	f004 fa49 	bl	8019fc8 <memset>
 8015b36:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015b38:	60ee      	str	r6, [r5, #12]
 8015b3a:	f04f 0800 	mov.w	r8, #0
 8015b3e:	19f6      	adds	r6, r6, r7
 8015b40:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015b44:	f8c4 8010 	str.w	r8, [r4, #16]
 8015b48:	f43f af54 	beq.w	80159f4 <rcl_wait_set_resize+0xc0>
 8015b4c:	00b6      	lsls	r6, r6, #2
 8015b4e:	464a      	mov	r2, r9
 8015b50:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8015b52:	6960      	ldr	r0, [r4, #20]
 8015b54:	4631      	mov	r1, r6
 8015b56:	4798      	blx	r3
 8015b58:	4681      	mov	r9, r0
 8015b5a:	6160      	str	r0, [r4, #20]
 8015b5c:	2800      	cmp	r0, #0
 8015b5e:	d076      	beq.n	8015c4e <rcl_wait_set_resize+0x31a>
 8015b60:	4632      	mov	r2, r6
 8015b62:	4641      	mov	r1, r8
 8015b64:	f004 fa30 	bl	8019fc8 <memset>
 8015b68:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015b6a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015b6e:	e74a      	b.n	8015a06 <rcl_wait_set_resize+0xd2>
 8015b70:	00bc      	lsls	r4, r7, #2
 8015b72:	6928      	ldr	r0, [r5, #16]
 8015b74:	464a      	mov	r2, r9
 8015b76:	4621      	mov	r1, r4
 8015b78:	47c0      	blx	r8
 8015b7a:	6128      	str	r0, [r5, #16]
 8015b7c:	2800      	cmp	r0, #0
 8015b7e:	d0ca      	beq.n	8015b16 <rcl_wait_set_resize+0x1e2>
 8015b80:	4622      	mov	r2, r4
 8015b82:	4631      	mov	r1, r6
 8015b84:	f004 fa20 	bl	8019fc8 <memset>
 8015b88:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015b8a:	616f      	str	r7, [r5, #20]
 8015b8c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8015b90:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015b94:	e749      	b.n	8015a2a <rcl_wait_set_resize+0xf6>
 8015b96:	009c      	lsls	r4, r3, #2
 8015b98:	69a8      	ldr	r0, [r5, #24]
 8015b9a:	464a      	mov	r2, r9
 8015b9c:	4621      	mov	r1, r4
 8015b9e:	47c0      	blx	r8
 8015ba0:	61a8      	str	r0, [r5, #24]
 8015ba2:	2800      	cmp	r0, #0
 8015ba4:	d0b7      	beq.n	8015b16 <rcl_wait_set_resize+0x1e2>
 8015ba6:	4622      	mov	r2, r4
 8015ba8:	4631      	mov	r1, r6
 8015baa:	f004 fa0d 	bl	8019fc8 <memset>
 8015bae:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8015bb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015bb2:	61eb      	str	r3, [r5, #28]
 8015bb4:	6a38      	ldr	r0, [r7, #32]
 8015bb6:	61fe      	str	r6, [r7, #28]
 8015bb8:	464a      	mov	r2, r9
 8015bba:	4621      	mov	r1, r4
 8015bbc:	47c0      	blx	r8
 8015bbe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015bc0:	6238      	str	r0, [r7, #32]
 8015bc2:	6a1f      	ldr	r7, [r3, #32]
 8015bc4:	2f00      	cmp	r7, #0
 8015bc6:	d054      	beq.n	8015c72 <rcl_wait_set_resize+0x33e>
 8015bc8:	4622      	mov	r2, r4
 8015bca:	4631      	mov	r1, r6
 8015bcc:	4638      	mov	r0, r7
 8015bce:	f004 f9fb 	bl	8019fc8 <memset>
 8015bd2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015bd4:	e73f      	b.n	8015a56 <rcl_wait_set_resize+0x122>
 8015bd6:	6a28      	ldr	r0, [r5, #32]
 8015bd8:	b120      	cbz	r0, 8015be4 <rcl_wait_set_resize+0x2b0>
 8015bda:	4639      	mov	r1, r7
 8015bdc:	47c0      	blx	r8
 8015bde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015be0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015be2:	622b      	str	r3, [r5, #32]
 8015be4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8015be6:	2800      	cmp	r0, #0
 8015be8:	f43f af60 	beq.w	8015aac <rcl_wait_set_resize+0x178>
 8015bec:	4639      	mov	r1, r7
 8015bee:	47c0      	blx	r8
 8015bf0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015bf2:	2300      	movs	r3, #0
 8015bf4:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8015bf8:	e758      	b.n	8015aac <rcl_wait_set_resize+0x178>
 8015bfa:	009c      	lsls	r4, r3, #2
 8015bfc:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8015bfe:	463a      	mov	r2, r7
 8015c00:	4621      	mov	r1, r4
 8015c02:	47c8      	blx	r9
 8015c04:	62a8      	str	r0, [r5, #40]	@ 0x28
 8015c06:	2800      	cmp	r0, #0
 8015c08:	d085      	beq.n	8015b16 <rcl_wait_set_resize+0x1e2>
 8015c0a:	4622      	mov	r2, r4
 8015c0c:	4631      	mov	r1, r6
 8015c0e:	f004 f9db 	bl	8019fc8 <memset>
 8015c12:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8015c16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015c18:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8015c1a:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8015c1e:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8015c22:	463a      	mov	r2, r7
 8015c24:	4621      	mov	r1, r4
 8015c26:	47c8      	blx	r9
 8015c28:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015c2a:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8015c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015c30:	b36b      	cbz	r3, 8015c8e <rcl_wait_set_resize+0x35a>
 8015c32:	4622      	mov	r2, r4
 8015c34:	4631      	mov	r1, r6
 8015c36:	4618      	mov	r0, r3
 8015c38:	f004 f9c6 	bl	8019fc8 <memset>
 8015c3c:	4630      	mov	r0, r6
 8015c3e:	b003      	add	sp, #12
 8015c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c44:	200b      	movs	r0, #11
 8015c46:	4770      	bx	lr
 8015c48:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015c4c:	e764      	b.n	8015b18 <rcl_wait_set_resize+0x1e4>
 8015c4e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015c50:	68a8      	ldr	r0, [r5, #8]
 8015c52:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8015c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015c56:	4798      	blx	r3
 8015c58:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015c5a:	6928      	ldr	r0, [r5, #16]
 8015c5c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015c5e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8015c60:	f8c5 900c 	str.w	r9, [r5, #12]
 8015c64:	f8c5 9008 	str.w	r9, [r5, #8]
 8015c68:	4790      	blx	r2
 8015c6a:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8015c6e:	200a      	movs	r0, #10
 8015c70:	e752      	b.n	8015b18 <rcl_wait_set_resize+0x1e4>
 8015c72:	69a8      	ldr	r0, [r5, #24]
 8015c74:	4649      	mov	r1, r9
 8015c76:	47d0      	blx	sl
 8015c78:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8015c7c:	200a      	movs	r0, #10
 8015c7e:	e74b      	b.n	8015b18 <rcl_wait_set_resize+0x1e4>
 8015c80:	6a28      	ldr	r0, [r5, #32]
 8015c82:	4639      	mov	r1, r7
 8015c84:	47c0      	blx	r8
 8015c86:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8015c8a:	200a      	movs	r0, #10
 8015c8c:	e744      	b.n	8015b18 <rcl_wait_set_resize+0x1e4>
 8015c8e:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8015c90:	9301      	str	r3, [sp, #4]
 8015c92:	4639      	mov	r1, r7
 8015c94:	47c0      	blx	r8
 8015c96:	9b01      	ldr	r3, [sp, #4]
 8015c98:	200a      	movs	r0, #10
 8015c9a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8015c9e:	e73b      	b.n	8015b18 <rcl_wait_set_resize+0x1e4>

08015ca0 <rcl_wait_set_init>:
 8015ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ca4:	b084      	sub	sp, #16
 8015ca6:	4604      	mov	r4, r0
 8015ca8:	a810      	add	r0, sp, #64	@ 0x40
 8015caa:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8015cae:	460f      	mov	r7, r1
 8015cb0:	4690      	mov	r8, r2
 8015cb2:	4699      	mov	r9, r3
 8015cb4:	f7f8 f8f6 	bl	800dea4 <rcutils_allocator_is_valid>
 8015cb8:	2800      	cmp	r0, #0
 8015cba:	d06b      	beq.n	8015d94 <rcl_wait_set_init+0xf4>
 8015cbc:	2c00      	cmp	r4, #0
 8015cbe:	d069      	beq.n	8015d94 <rcl_wait_set_init+0xf4>
 8015cc0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015cc2:	b125      	cbz	r5, 8015cce <rcl_wait_set_init+0x2e>
 8015cc4:	2564      	movs	r5, #100	@ 0x64
 8015cc6:	4628      	mov	r0, r5
 8015cc8:	b004      	add	sp, #16
 8015cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015cce:	f1ba 0f00 	cmp.w	sl, #0
 8015cd2:	d05f      	beq.n	8015d94 <rcl_wait_set_init+0xf4>
 8015cd4:	4650      	mov	r0, sl
 8015cd6:	f7fe fa33 	bl	8014140 <rcl_context_is_valid>
 8015cda:	2800      	cmp	r0, #0
 8015cdc:	d067      	beq.n	8015dae <rcl_wait_set_init+0x10e>
 8015cde:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015ce0:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8015ce2:	205c      	movs	r0, #92	@ 0x5c
 8015ce4:	4798      	blx	r3
 8015ce6:	6320      	str	r0, [r4, #48]	@ 0x30
 8015ce8:	2800      	cmp	r0, #0
 8015cea:	d062      	beq.n	8015db2 <rcl_wait_set_init+0x112>
 8015cec:	4629      	mov	r1, r5
 8015cee:	225c      	movs	r2, #92	@ 0x5c
 8015cf0:	f004 f96a 	bl	8019fc8 <memset>
 8015cf4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8015cf8:	eb03 0e02 	add.w	lr, r3, r2
 8015cfc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015cfe:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8015d00:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8015d04:	449e      	add	lr, r3
 8015d06:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015d0a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8015d0e:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8015d12:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8015d16:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8015d1a:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8015d1e:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8015d22:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8015d26:	f8da a000 	ldr.w	sl, [sl]
 8015d2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015d2c:	44c6      	add	lr, r8
 8015d2e:	f8dc 3000 	ldr.w	r3, [ip]
 8015d32:	602b      	str	r3, [r5, #0]
 8015d34:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8015d38:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8015d3c:	f002 fa1e 	bl	801817c <rmw_create_wait_set>
 8015d40:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015d42:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8015d44:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015d46:	b350      	cbz	r0, 8015d9e <rcl_wait_set_init+0xfe>
 8015d48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015d4a:	9302      	str	r3, [sp, #8]
 8015d4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015d4e:	9301      	str	r3, [sp, #4]
 8015d50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015d52:	9300      	str	r3, [sp, #0]
 8015d54:	4642      	mov	r2, r8
 8015d56:	464b      	mov	r3, r9
 8015d58:	4639      	mov	r1, r7
 8015d5a:	4620      	mov	r0, r4
 8015d5c:	f7ff fdea 	bl	8015934 <rcl_wait_set_resize>
 8015d60:	4605      	mov	r5, r0
 8015d62:	2800      	cmp	r0, #0
 8015d64:	d0af      	beq.n	8015cc6 <rcl_wait_set_init+0x26>
 8015d66:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015d68:	bb2b      	cbnz	r3, 8015db6 <rcl_wait_set_init+0x116>
 8015d6a:	2600      	movs	r6, #0
 8015d6c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8015d70:	9600      	str	r6, [sp, #0]
 8015d72:	4633      	mov	r3, r6
 8015d74:	4632      	mov	r2, r6
 8015d76:	4631      	mov	r1, r6
 8015d78:	4620      	mov	r0, r4
 8015d7a:	f7ff fddb 	bl	8015934 <rcl_wait_set_resize>
 8015d7e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8015d80:	2800      	cmp	r0, #0
 8015d82:	d0a0      	beq.n	8015cc6 <rcl_wait_set_init+0x26>
 8015d84:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8015d86:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8015d88:	4798      	blx	r3
 8015d8a:	4628      	mov	r0, r5
 8015d8c:	6326      	str	r6, [r4, #48]	@ 0x30
 8015d8e:	b004      	add	sp, #16
 8015d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d94:	250b      	movs	r5, #11
 8015d96:	4628      	mov	r0, r5
 8015d98:	b004      	add	sp, #16
 8015d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d9e:	2501      	movs	r5, #1
 8015da0:	f002 f9f6 	bl	8018190 <rmw_destroy_wait_set>
 8015da4:	2800      	cmp	r0, #0
 8015da6:	bf18      	it	ne
 8015da8:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8015dac:	e7dd      	b.n	8015d6a <rcl_wait_set_init+0xca>
 8015dae:	2565      	movs	r5, #101	@ 0x65
 8015db0:	e789      	b.n	8015cc6 <rcl_wait_set_init+0x26>
 8015db2:	250a      	movs	r5, #10
 8015db4:	e787      	b.n	8015cc6 <rcl_wait_set_init+0x26>
 8015db6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015db8:	e7f2      	b.n	8015da0 <rcl_wait_set_init+0x100>
 8015dba:	bf00      	nop

08015dbc <rcl_wait_set_add_guard_condition>:
 8015dbc:	b318      	cbz	r0, 8015e06 <rcl_wait_set_add_guard_condition+0x4a>
 8015dbe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015dc0:	b570      	push	{r4, r5, r6, lr}
 8015dc2:	4604      	mov	r4, r0
 8015dc4:	b30b      	cbz	r3, 8015e0a <rcl_wait_set_add_guard_condition+0x4e>
 8015dc6:	b319      	cbz	r1, 8015e10 <rcl_wait_set_add_guard_condition+0x54>
 8015dc8:	68dd      	ldr	r5, [r3, #12]
 8015dca:	68c0      	ldr	r0, [r0, #12]
 8015dcc:	4285      	cmp	r5, r0
 8015dce:	d217      	bcs.n	8015e00 <rcl_wait_set_add_guard_condition+0x44>
 8015dd0:	68a0      	ldr	r0, [r4, #8]
 8015dd2:	1c6e      	adds	r6, r5, #1
 8015dd4:	60de      	str	r6, [r3, #12]
 8015dd6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015dda:	b102      	cbz	r2, 8015dde <rcl_wait_set_add_guard_condition+0x22>
 8015ddc:	6015      	str	r5, [r2, #0]
 8015dde:	4608      	mov	r0, r1
 8015de0:	f003 fbd0 	bl	8019584 <rcl_guard_condition_get_rmw_handle>
 8015de4:	b150      	cbz	r0, 8015dfc <rcl_wait_set_add_guard_condition+0x40>
 8015de6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015de8:	6842      	ldr	r2, [r0, #4]
 8015dea:	695b      	ldr	r3, [r3, #20]
 8015dec:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015df0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015df2:	6913      	ldr	r3, [r2, #16]
 8015df4:	3301      	adds	r3, #1
 8015df6:	2000      	movs	r0, #0
 8015df8:	6113      	str	r3, [r2, #16]
 8015dfa:	bd70      	pop	{r4, r5, r6, pc}
 8015dfc:	2001      	movs	r0, #1
 8015dfe:	bd70      	pop	{r4, r5, r6, pc}
 8015e00:	f240 3086 	movw	r0, #902	@ 0x386
 8015e04:	bd70      	pop	{r4, r5, r6, pc}
 8015e06:	200b      	movs	r0, #11
 8015e08:	4770      	bx	lr
 8015e0a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015e0e:	bd70      	pop	{r4, r5, r6, pc}
 8015e10:	200b      	movs	r0, #11
 8015e12:	bd70      	pop	{r4, r5, r6, pc}

08015e14 <rcl_wait_set_add_timer>:
 8015e14:	b328      	cbz	r0, 8015e62 <rcl_wait_set_add_timer+0x4e>
 8015e16:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015e18:	b570      	push	{r4, r5, r6, lr}
 8015e1a:	4604      	mov	r4, r0
 8015e1c:	b31b      	cbz	r3, 8015e66 <rcl_wait_set_add_timer+0x52>
 8015e1e:	b329      	cbz	r1, 8015e6c <rcl_wait_set_add_timer+0x58>
 8015e20:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8015e22:	6965      	ldr	r5, [r4, #20]
 8015e24:	42a8      	cmp	r0, r5
 8015e26:	d219      	bcs.n	8015e5c <rcl_wait_set_add_timer+0x48>
 8015e28:	6925      	ldr	r5, [r4, #16]
 8015e2a:	1c46      	adds	r6, r0, #1
 8015e2c:	641e      	str	r6, [r3, #64]	@ 0x40
 8015e2e:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8015e32:	b102      	cbz	r2, 8015e36 <rcl_wait_set_add_timer+0x22>
 8015e34:	6010      	str	r0, [r2, #0]
 8015e36:	4608      	mov	r0, r1
 8015e38:	f7ff fba6 	bl	8015588 <rcl_timer_get_guard_condition>
 8015e3c:	b168      	cbz	r0, 8015e5a <rcl_wait_set_add_timer+0x46>
 8015e3e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015e40:	68e3      	ldr	r3, [r4, #12]
 8015e42:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8015e44:	3b01      	subs	r3, #1
 8015e46:	441d      	add	r5, r3
 8015e48:	f003 fb9c 	bl	8019584 <rcl_guard_condition_get_rmw_handle>
 8015e4c:	b180      	cbz	r0, 8015e70 <rcl_wait_set_add_timer+0x5c>
 8015e4e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e50:	6842      	ldr	r2, [r0, #4]
 8015e52:	695b      	ldr	r3, [r3, #20]
 8015e54:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015e58:	2000      	movs	r0, #0
 8015e5a:	bd70      	pop	{r4, r5, r6, pc}
 8015e5c:	f240 3086 	movw	r0, #902	@ 0x386
 8015e60:	bd70      	pop	{r4, r5, r6, pc}
 8015e62:	200b      	movs	r0, #11
 8015e64:	4770      	bx	lr
 8015e66:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015e6a:	bd70      	pop	{r4, r5, r6, pc}
 8015e6c:	200b      	movs	r0, #11
 8015e6e:	bd70      	pop	{r4, r5, r6, pc}
 8015e70:	2001      	movs	r0, #1
 8015e72:	bd70      	pop	{r4, r5, r6, pc}

08015e74 <rcl_wait_set_add_client>:
 8015e74:	b318      	cbz	r0, 8015ebe <rcl_wait_set_add_client+0x4a>
 8015e76:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015e78:	b570      	push	{r4, r5, r6, lr}
 8015e7a:	4604      	mov	r4, r0
 8015e7c:	b30b      	cbz	r3, 8015ec2 <rcl_wait_set_add_client+0x4e>
 8015e7e:	b319      	cbz	r1, 8015ec8 <rcl_wait_set_add_client+0x54>
 8015e80:	699d      	ldr	r5, [r3, #24]
 8015e82:	69c0      	ldr	r0, [r0, #28]
 8015e84:	4285      	cmp	r5, r0
 8015e86:	d217      	bcs.n	8015eb8 <rcl_wait_set_add_client+0x44>
 8015e88:	69a0      	ldr	r0, [r4, #24]
 8015e8a:	1c6e      	adds	r6, r5, #1
 8015e8c:	619e      	str	r6, [r3, #24]
 8015e8e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015e92:	b102      	cbz	r2, 8015e96 <rcl_wait_set_add_client+0x22>
 8015e94:	6015      	str	r5, [r2, #0]
 8015e96:	4608      	mov	r0, r1
 8015e98:	f7fe f8a4 	bl	8013fe4 <rcl_client_get_rmw_handle>
 8015e9c:	b150      	cbz	r0, 8015eb4 <rcl_wait_set_add_client+0x40>
 8015e9e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015ea0:	6842      	ldr	r2, [r0, #4]
 8015ea2:	6a1b      	ldr	r3, [r3, #32]
 8015ea4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015ea8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015eaa:	69d3      	ldr	r3, [r2, #28]
 8015eac:	3301      	adds	r3, #1
 8015eae:	2000      	movs	r0, #0
 8015eb0:	61d3      	str	r3, [r2, #28]
 8015eb2:	bd70      	pop	{r4, r5, r6, pc}
 8015eb4:	2001      	movs	r0, #1
 8015eb6:	bd70      	pop	{r4, r5, r6, pc}
 8015eb8:	f240 3086 	movw	r0, #902	@ 0x386
 8015ebc:	bd70      	pop	{r4, r5, r6, pc}
 8015ebe:	200b      	movs	r0, #11
 8015ec0:	4770      	bx	lr
 8015ec2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015ec6:	bd70      	pop	{r4, r5, r6, pc}
 8015ec8:	200b      	movs	r0, #11
 8015eca:	bd70      	pop	{r4, r5, r6, pc}

08015ecc <rcl_wait_set_add_service>:
 8015ecc:	b318      	cbz	r0, 8015f16 <rcl_wait_set_add_service+0x4a>
 8015ece:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015ed0:	b570      	push	{r4, r5, r6, lr}
 8015ed2:	4604      	mov	r4, r0
 8015ed4:	b30b      	cbz	r3, 8015f1a <rcl_wait_set_add_service+0x4e>
 8015ed6:	b319      	cbz	r1, 8015f20 <rcl_wait_set_add_service+0x54>
 8015ed8:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8015eda:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8015edc:	4285      	cmp	r5, r0
 8015ede:	d217      	bcs.n	8015f10 <rcl_wait_set_add_service+0x44>
 8015ee0:	6a20      	ldr	r0, [r4, #32]
 8015ee2:	1c6e      	adds	r6, r5, #1
 8015ee4:	625e      	str	r6, [r3, #36]	@ 0x24
 8015ee6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015eea:	b102      	cbz	r2, 8015eee <rcl_wait_set_add_service+0x22>
 8015eec:	6015      	str	r5, [r2, #0]
 8015eee:	4608      	mov	r0, r1
 8015ef0:	f7fe fdfa 	bl	8014ae8 <rcl_service_get_rmw_handle>
 8015ef4:	b150      	cbz	r0, 8015f0c <rcl_wait_set_add_service+0x40>
 8015ef6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015ef8:	6842      	ldr	r2, [r0, #4]
 8015efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015efc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015f00:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015f02:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8015f04:	3301      	adds	r3, #1
 8015f06:	2000      	movs	r0, #0
 8015f08:	6293      	str	r3, [r2, #40]	@ 0x28
 8015f0a:	bd70      	pop	{r4, r5, r6, pc}
 8015f0c:	2001      	movs	r0, #1
 8015f0e:	bd70      	pop	{r4, r5, r6, pc}
 8015f10:	f240 3086 	movw	r0, #902	@ 0x386
 8015f14:	bd70      	pop	{r4, r5, r6, pc}
 8015f16:	200b      	movs	r0, #11
 8015f18:	4770      	bx	lr
 8015f1a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015f1e:	bd70      	pop	{r4, r5, r6, pc}
 8015f20:	200b      	movs	r0, #11
 8015f22:	bd70      	pop	{r4, r5, r6, pc}
 8015f24:	0000      	movs	r0, r0
	...

08015f28 <rcl_wait>:
 8015f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f2c:	ed2d 8b02 	vpush	{d8}
 8015f30:	b08d      	sub	sp, #52	@ 0x34
 8015f32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015f36:	2800      	cmp	r0, #0
 8015f38:	f000 8143 	beq.w	80161c2 <rcl_wait+0x29a>
 8015f3c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8015f3e:	4605      	mov	r5, r0
 8015f40:	2e00      	cmp	r6, #0
 8015f42:	f000 8112 	beq.w	801616a <rcl_wait+0x242>
 8015f46:	6843      	ldr	r3, [r0, #4]
 8015f48:	b983      	cbnz	r3, 8015f6c <rcl_wait+0x44>
 8015f4a:	68eb      	ldr	r3, [r5, #12]
 8015f4c:	b973      	cbnz	r3, 8015f6c <rcl_wait+0x44>
 8015f4e:	696b      	ldr	r3, [r5, #20]
 8015f50:	b963      	cbnz	r3, 8015f6c <rcl_wait+0x44>
 8015f52:	69eb      	ldr	r3, [r5, #28]
 8015f54:	b953      	cbnz	r3, 8015f6c <rcl_wait+0x44>
 8015f56:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8015f58:	b943      	cbnz	r3, 8015f6c <rcl_wait+0x44>
 8015f5a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8015f5c:	b933      	cbnz	r3, 8015f6c <rcl_wait+0x44>
 8015f5e:	f240 3085 	movw	r0, #901	@ 0x385
 8015f62:	b00d      	add	sp, #52	@ 0x34
 8015f64:	ecbd 8b02 	vpop	{d8}
 8015f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f6c:	9b04      	ldr	r3, [sp, #16]
 8015f6e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8015f70:	2b01      	cmp	r3, #1
 8015f72:	9b05      	ldr	r3, [sp, #20]
 8015f74:	f173 0300 	sbcs.w	r3, r3, #0
 8015f78:	f2c0 80f0 	blt.w	801615c <rcl_wait+0x234>
 8015f7c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8015f80:	4643      	mov	r3, r8
 8015f82:	2a00      	cmp	r2, #0
 8015f84:	f000 8133 	beq.w	80161ee <rcl_wait+0x2c6>
 8015f88:	2400      	movs	r4, #0
 8015f8a:	4613      	mov	r3, r2
 8015f8c:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8016200 <rcl_wait+0x2d8>
 8015f90:	46a2      	mov	sl, r4
 8015f92:	46a3      	mov	fp, r4
 8015f94:	f240 3921 	movw	r9, #801	@ 0x321
 8015f98:	4632      	mov	r2, r6
 8015f9a:	e014      	b.n	8015fc6 <rcl_wait+0x9e>
 8015f9c:	2800      	cmp	r0, #0
 8015f9e:	d1e0      	bne.n	8015f62 <rcl_wait+0x3a>
 8015fa0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015fa4:	4542      	cmp	r2, r8
 8015fa6:	eb73 0107 	sbcs.w	r1, r3, r7
 8015faa:	da03      	bge.n	8015fb4 <rcl_wait+0x8c>
 8015fac:	4690      	mov	r8, r2
 8015fae:	461f      	mov	r7, r3
 8015fb0:	f04f 0b01 	mov.w	fp, #1
 8015fb4:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8015fb6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8015fb8:	3401      	adds	r4, #1
 8015fba:	f14a 0a00 	adc.w	sl, sl, #0
 8015fbe:	429c      	cmp	r4, r3
 8015fc0:	f17a 0100 	sbcs.w	r1, sl, #0
 8015fc4:	d228      	bcs.n	8016018 <rcl_wait+0xf0>
 8015fc6:	6928      	ldr	r0, [r5, #16]
 8015fc8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8015fcc:	a908      	add	r1, sp, #32
 8015fce:	00a6      	lsls	r6, r4, #2
 8015fd0:	2800      	cmp	r0, #0
 8015fd2:	d0f1      	beq.n	8015fb8 <rcl_wait+0x90>
 8015fd4:	68eb      	ldr	r3, [r5, #12]
 8015fd6:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8015fda:	4423      	add	r3, r4
 8015fdc:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8015fe0:	f1be 0f00 	cmp.w	lr, #0
 8015fe4:	d006      	beq.n	8015ff4 <rcl_wait+0xcc>
 8015fe6:	6913      	ldr	r3, [r2, #16]
 8015fe8:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8015fec:	3301      	adds	r3, #1
 8015fee:	6113      	str	r3, [r2, #16]
 8015ff0:	692b      	ldr	r3, [r5, #16]
 8015ff2:	5998      	ldr	r0, [r3, r6]
 8015ff4:	ed8d 8b08 	vstr	d8, [sp, #32]
 8015ff8:	f7ff fa94 	bl	8015524 <rcl_timer_get_time_until_next_call>
 8015ffc:	4548      	cmp	r0, r9
 8015ffe:	d1cd      	bne.n	8015f9c <rcl_wait+0x74>
 8016000:	692b      	ldr	r3, [r5, #16]
 8016002:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8016004:	2100      	movs	r1, #0
 8016006:	5199      	str	r1, [r3, r6]
 8016008:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801600a:	3401      	adds	r4, #1
 801600c:	f14a 0a00 	adc.w	sl, sl, #0
 8016010:	429c      	cmp	r4, r3
 8016012:	f17a 0100 	sbcs.w	r1, sl, #0
 8016016:	d3d6      	bcc.n	8015fc6 <rcl_wait+0x9e>
 8016018:	4616      	mov	r6, r2
 801601a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801601e:	4313      	orrs	r3, r2
 8016020:	46d9      	mov	r9, fp
 8016022:	f040 80a9 	bne.w	8016178 <rcl_wait+0x250>
 8016026:	2300      	movs	r3, #0
 8016028:	2200      	movs	r2, #0
 801602a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801602e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8016032:	ab08      	add	r3, sp, #32
 8016034:	9302      	str	r3, [sp, #8]
 8016036:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8016038:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 801603c:	e9cd 3200 	strd	r3, r2, [sp]
 8016040:	f106 0110 	add.w	r1, r6, #16
 8016044:	f106 031c 	add.w	r3, r6, #28
 8016048:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 801604c:	1d30      	adds	r0, r6, #4
 801604e:	f001 ff1d 	bl	8017e8c <rmw_wait>
 8016052:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016054:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016056:	4680      	mov	r8, r0
 8016058:	b1ca      	cbz	r2, 801608e <rcl_wait+0x166>
 801605a:	2400      	movs	r4, #0
 801605c:	4627      	mov	r7, r4
 801605e:	692a      	ldr	r2, [r5, #16]
 8016060:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8016064:	f10d 011f 	add.w	r1, sp, #31
 8016068:	00a6      	lsls	r6, r4, #2
 801606a:	b160      	cbz	r0, 8016086 <rcl_wait+0x15e>
 801606c:	f88d 701f 	strb.w	r7, [sp, #31]
 8016070:	f7ff fa1e 	bl	80154b0 <rcl_timer_is_ready>
 8016074:	2800      	cmp	r0, #0
 8016076:	f47f af74 	bne.w	8015f62 <rcl_wait+0x3a>
 801607a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801607e:	b90b      	cbnz	r3, 8016084 <rcl_wait+0x15c>
 8016080:	692a      	ldr	r2, [r5, #16]
 8016082:	5193      	str	r3, [r2, r6]
 8016084:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016086:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016088:	3401      	adds	r4, #1
 801608a:	42a2      	cmp	r2, r4
 801608c:	d8e7      	bhi.n	801605e <rcl_wait+0x136>
 801608e:	f038 0002 	bics.w	r0, r8, #2
 8016092:	f040 8090 	bne.w	80161b6 <rcl_wait+0x28e>
 8016096:	686e      	ldr	r6, [r5, #4]
 8016098:	4602      	mov	r2, r0
 801609a:	b91e      	cbnz	r6, 80160a4 <rcl_wait+0x17c>
 801609c:	e00d      	b.n	80160ba <rcl_wait+0x192>
 801609e:	3201      	adds	r2, #1
 80160a0:	42b2      	cmp	r2, r6
 80160a2:	d00a      	beq.n	80160ba <rcl_wait+0x192>
 80160a4:	6899      	ldr	r1, [r3, #8]
 80160a6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80160aa:	2900      	cmp	r1, #0
 80160ac:	d1f7      	bne.n	801609e <rcl_wait+0x176>
 80160ae:	682c      	ldr	r4, [r5, #0]
 80160b0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80160b4:	3201      	adds	r2, #1
 80160b6:	42b2      	cmp	r2, r6
 80160b8:	d1f4      	bne.n	80160a4 <rcl_wait+0x17c>
 80160ba:	68ee      	ldr	r6, [r5, #12]
 80160bc:	2200      	movs	r2, #0
 80160be:	b91e      	cbnz	r6, 80160c8 <rcl_wait+0x1a0>
 80160c0:	e00d      	b.n	80160de <rcl_wait+0x1b6>
 80160c2:	3201      	adds	r2, #1
 80160c4:	42b2      	cmp	r2, r6
 80160c6:	d00a      	beq.n	80160de <rcl_wait+0x1b6>
 80160c8:	6959      	ldr	r1, [r3, #20]
 80160ca:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80160ce:	2900      	cmp	r1, #0
 80160d0:	d1f7      	bne.n	80160c2 <rcl_wait+0x19a>
 80160d2:	68ac      	ldr	r4, [r5, #8]
 80160d4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80160d8:	3201      	adds	r2, #1
 80160da:	42b2      	cmp	r2, r6
 80160dc:	d1f4      	bne.n	80160c8 <rcl_wait+0x1a0>
 80160de:	69ee      	ldr	r6, [r5, #28]
 80160e0:	2200      	movs	r2, #0
 80160e2:	b91e      	cbnz	r6, 80160ec <rcl_wait+0x1c4>
 80160e4:	e00d      	b.n	8016102 <rcl_wait+0x1da>
 80160e6:	3201      	adds	r2, #1
 80160e8:	42b2      	cmp	r2, r6
 80160ea:	d00a      	beq.n	8016102 <rcl_wait+0x1da>
 80160ec:	6a19      	ldr	r1, [r3, #32]
 80160ee:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80160f2:	2900      	cmp	r1, #0
 80160f4:	d1f7      	bne.n	80160e6 <rcl_wait+0x1be>
 80160f6:	69ac      	ldr	r4, [r5, #24]
 80160f8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80160fc:	3201      	adds	r2, #1
 80160fe:	42b2      	cmp	r2, r6
 8016100:	d1f4      	bne.n	80160ec <rcl_wait+0x1c4>
 8016102:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8016104:	2200      	movs	r2, #0
 8016106:	b91e      	cbnz	r6, 8016110 <rcl_wait+0x1e8>
 8016108:	e00d      	b.n	8016126 <rcl_wait+0x1fe>
 801610a:	3201      	adds	r2, #1
 801610c:	4296      	cmp	r6, r2
 801610e:	d00a      	beq.n	8016126 <rcl_wait+0x1fe>
 8016110:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8016112:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016116:	2900      	cmp	r1, #0
 8016118:	d1f7      	bne.n	801610a <rcl_wait+0x1e2>
 801611a:	6a2c      	ldr	r4, [r5, #32]
 801611c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016120:	3201      	adds	r2, #1
 8016122:	4296      	cmp	r6, r2
 8016124:	d1f4      	bne.n	8016110 <rcl_wait+0x1e8>
 8016126:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8016128:	2200      	movs	r2, #0
 801612a:	b91e      	cbnz	r6, 8016134 <rcl_wait+0x20c>
 801612c:	e00d      	b.n	801614a <rcl_wait+0x222>
 801612e:	3201      	adds	r2, #1
 8016130:	42b2      	cmp	r2, r6
 8016132:	d00a      	beq.n	801614a <rcl_wait+0x222>
 8016134:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8016136:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801613a:	2900      	cmp	r1, #0
 801613c:	d1f7      	bne.n	801612e <rcl_wait+0x206>
 801613e:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8016140:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016144:	3201      	adds	r2, #1
 8016146:	42b2      	cmp	r2, r6
 8016148:	d1f4      	bne.n	8016134 <rcl_wait+0x20c>
 801614a:	f1b8 0f02 	cmp.w	r8, #2
 801614e:	f47f af08 	bne.w	8015f62 <rcl_wait+0x3a>
 8016152:	464b      	mov	r3, r9
 8016154:	2b00      	cmp	r3, #0
 8016156:	bf08      	it	eq
 8016158:	2002      	moveq	r0, #2
 801615a:	e702      	b.n	8015f62 <rcl_wait+0x3a>
 801615c:	2a00      	cmp	r2, #0
 801615e:	d03a      	beq.n	80161d6 <rcl_wait+0x2ae>
 8016160:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8016164:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8016168:	e70e      	b.n	8015f88 <rcl_wait+0x60>
 801616a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801616e:	b00d      	add	sp, #52	@ 0x34
 8016170:	ecbd 8b02 	vpop	{d8}
 8016174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016178:	9b04      	ldr	r3, [sp, #16]
 801617a:	2b01      	cmp	r3, #1
 801617c:	9b05      	ldr	r3, [sp, #20]
 801617e:	f173 0300 	sbcs.w	r3, r3, #0
 8016182:	db24      	blt.n	80161ce <rcl_wait+0x2a6>
 8016184:	2f00      	cmp	r7, #0
 8016186:	bfbc      	itt	lt
 8016188:	f04f 0800 	movlt.w	r8, #0
 801618c:	4647      	movlt	r7, r8
 801618e:	a31e      	add	r3, pc, #120	@ (adr r3, 8016208 <rcl_wait+0x2e0>)
 8016190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016194:	4640      	mov	r0, r8
 8016196:	4639      	mov	r1, r7
 8016198:	f7ea fc98 	bl	8000acc <__aeabi_ldivmod>
 801619c:	a31a      	add	r3, pc, #104	@ (adr r3, 8016208 <rcl_wait+0x2e0>)
 801619e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161a2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80161a6:	4640      	mov	r0, r8
 80161a8:	4639      	mov	r1, r7
 80161aa:	f7ea fc8f 	bl	8000acc <__aeabi_ldivmod>
 80161ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80161b2:	ab08      	add	r3, sp, #32
 80161b4:	e73e      	b.n	8016034 <rcl_wait+0x10c>
 80161b6:	2001      	movs	r0, #1
 80161b8:	b00d      	add	sp, #52	@ 0x34
 80161ba:	ecbd 8b02 	vpop	{d8}
 80161be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161c2:	200b      	movs	r0, #11
 80161c4:	b00d      	add	sp, #52	@ 0x34
 80161c6:	ecbd 8b02 	vpop	{d8}
 80161ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161ce:	465b      	mov	r3, fp
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d1d7      	bne.n	8016184 <rcl_wait+0x25c>
 80161d4:	e72e      	b.n	8016034 <rcl_wait+0x10c>
 80161d6:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80161da:	430b      	orrs	r3, r1
 80161dc:	bf08      	it	eq
 80161de:	4691      	moveq	r9, r2
 80161e0:	f43f af21 	beq.w	8016026 <rcl_wait+0xfe>
 80161e4:	9b04      	ldr	r3, [sp, #16]
 80161e6:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80161ea:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80161ee:	2b01      	cmp	r3, #1
 80161f0:	9b05      	ldr	r3, [sp, #20]
 80161f2:	f173 0300 	sbcs.w	r3, r3, #0
 80161f6:	f04f 0300 	mov.w	r3, #0
 80161fa:	4699      	mov	r9, r3
 80161fc:	dac2      	bge.n	8016184 <rcl_wait+0x25c>
 80161fe:	e719      	b.n	8016034 <rcl_wait+0x10c>
 8016200:	ffffffff 	.word	0xffffffff
 8016204:	7fffffff 	.word	0x7fffffff
 8016208:	3b9aca00 	.word	0x3b9aca00
 801620c:	00000000 	.word	0x00000000

08016210 <rcl_action_take_goal_response>:
 8016210:	2800      	cmp	r0, #0
 8016212:	d039      	beq.n	8016288 <rcl_action_take_goal_response+0x78>
 8016214:	b570      	push	{r4, r5, r6, lr}
 8016216:	4604      	mov	r4, r0
 8016218:	6800      	ldr	r0, [r0, #0]
 801621a:	b380      	cbz	r0, 801627e <rcl_action_take_goal_response+0x6e>
 801621c:	460d      	mov	r5, r1
 801621e:	4616      	mov	r6, r2
 8016220:	f7fd ff66 	bl	80140f0 <rcl_client_is_valid>
 8016224:	b330      	cbz	r0, 8016274 <rcl_action_take_goal_response+0x64>
 8016226:	6820      	ldr	r0, [r4, #0]
 8016228:	3004      	adds	r0, #4
 801622a:	f7fd ff61 	bl	80140f0 <rcl_client_is_valid>
 801622e:	b308      	cbz	r0, 8016274 <rcl_action_take_goal_response+0x64>
 8016230:	6820      	ldr	r0, [r4, #0]
 8016232:	3008      	adds	r0, #8
 8016234:	f7fd ff5c 	bl	80140f0 <rcl_client_is_valid>
 8016238:	b1e0      	cbz	r0, 8016274 <rcl_action_take_goal_response+0x64>
 801623a:	6820      	ldr	r0, [r4, #0]
 801623c:	300c      	adds	r0, #12
 801623e:	f7fe fdf5 	bl	8014e2c <rcl_subscription_is_valid>
 8016242:	b1b8      	cbz	r0, 8016274 <rcl_action_take_goal_response+0x64>
 8016244:	6820      	ldr	r0, [r4, #0]
 8016246:	3010      	adds	r0, #16
 8016248:	f7fe fdf0 	bl	8014e2c <rcl_subscription_is_valid>
 801624c:	b190      	cbz	r0, 8016274 <rcl_action_take_goal_response+0x64>
 801624e:	b1cd      	cbz	r5, 8016284 <rcl_action_take_goal_response+0x74>
 8016250:	b1c6      	cbz	r6, 8016284 <rcl_action_take_goal_response+0x74>
 8016252:	6820      	ldr	r0, [r4, #0]
 8016254:	4632      	mov	r2, r6
 8016256:	4629      	mov	r1, r5
 8016258:	f7fd ff02 	bl	8014060 <rcl_take_response>
 801625c:	b148      	cbz	r0, 8016272 <rcl_action_take_goal_response+0x62>
 801625e:	280a      	cmp	r0, #10
 8016260:	d007      	beq.n	8016272 <rcl_action_take_goal_response+0x62>
 8016262:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8016266:	f640 0337 	movw	r3, #2103	@ 0x837
 801626a:	4290      	cmp	r0, r2
 801626c:	bf0c      	ite	eq
 801626e:	4618      	moveq	r0, r3
 8016270:	2001      	movne	r0, #1
 8016272:	bd70      	pop	{r4, r5, r6, pc}
 8016274:	f7f7 fe3c 	bl	800def0 <rcutils_reset_error>
 8016278:	f640 0036 	movw	r0, #2102	@ 0x836
 801627c:	bd70      	pop	{r4, r5, r6, pc}
 801627e:	f640 0036 	movw	r0, #2102	@ 0x836
 8016282:	bd70      	pop	{r4, r5, r6, pc}
 8016284:	200b      	movs	r0, #11
 8016286:	bd70      	pop	{r4, r5, r6, pc}
 8016288:	f640 0036 	movw	r0, #2102	@ 0x836
 801628c:	4770      	bx	lr
 801628e:	bf00      	nop

08016290 <rcl_action_send_result_request>:
 8016290:	b390      	cbz	r0, 80162f8 <rcl_action_send_result_request+0x68>
 8016292:	b570      	push	{r4, r5, r6, lr}
 8016294:	4604      	mov	r4, r0
 8016296:	6800      	ldr	r0, [r0, #0]
 8016298:	b348      	cbz	r0, 80162ee <rcl_action_send_result_request+0x5e>
 801629a:	460d      	mov	r5, r1
 801629c:	4616      	mov	r6, r2
 801629e:	f7fd ff27 	bl	80140f0 <rcl_client_is_valid>
 80162a2:	b1f8      	cbz	r0, 80162e4 <rcl_action_send_result_request+0x54>
 80162a4:	6820      	ldr	r0, [r4, #0]
 80162a6:	3004      	adds	r0, #4
 80162a8:	f7fd ff22 	bl	80140f0 <rcl_client_is_valid>
 80162ac:	b1d0      	cbz	r0, 80162e4 <rcl_action_send_result_request+0x54>
 80162ae:	6820      	ldr	r0, [r4, #0]
 80162b0:	3008      	adds	r0, #8
 80162b2:	f7fd ff1d 	bl	80140f0 <rcl_client_is_valid>
 80162b6:	b1a8      	cbz	r0, 80162e4 <rcl_action_send_result_request+0x54>
 80162b8:	6820      	ldr	r0, [r4, #0]
 80162ba:	300c      	adds	r0, #12
 80162bc:	f7fe fdb6 	bl	8014e2c <rcl_subscription_is_valid>
 80162c0:	b180      	cbz	r0, 80162e4 <rcl_action_send_result_request+0x54>
 80162c2:	6820      	ldr	r0, [r4, #0]
 80162c4:	3010      	adds	r0, #16
 80162c6:	f7fe fdb1 	bl	8014e2c <rcl_subscription_is_valid>
 80162ca:	b158      	cbz	r0, 80162e4 <rcl_action_send_result_request+0x54>
 80162cc:	b195      	cbz	r5, 80162f4 <rcl_action_send_result_request+0x64>
 80162ce:	b18e      	cbz	r6, 80162f4 <rcl_action_send_result_request+0x64>
 80162d0:	6820      	ldr	r0, [r4, #0]
 80162d2:	4632      	mov	r2, r6
 80162d4:	4629      	mov	r1, r5
 80162d6:	3008      	adds	r0, #8
 80162d8:	f7fd fe8a 	bl	8013ff0 <rcl_send_request>
 80162dc:	3800      	subs	r0, #0
 80162de:	bf18      	it	ne
 80162e0:	2001      	movne	r0, #1
 80162e2:	bd70      	pop	{r4, r5, r6, pc}
 80162e4:	f7f7 fe04 	bl	800def0 <rcutils_reset_error>
 80162e8:	f640 0036 	movw	r0, #2102	@ 0x836
 80162ec:	bd70      	pop	{r4, r5, r6, pc}
 80162ee:	f640 0036 	movw	r0, #2102	@ 0x836
 80162f2:	bd70      	pop	{r4, r5, r6, pc}
 80162f4:	200b      	movs	r0, #11
 80162f6:	bd70      	pop	{r4, r5, r6, pc}
 80162f8:	f640 0036 	movw	r0, #2102	@ 0x836
 80162fc:	4770      	bx	lr
 80162fe:	bf00      	nop

08016300 <rcl_action_take_result_response>:
 8016300:	2800      	cmp	r0, #0
 8016302:	d03a      	beq.n	801637a <rcl_action_take_result_response+0x7a>
 8016304:	b570      	push	{r4, r5, r6, lr}
 8016306:	4604      	mov	r4, r0
 8016308:	6800      	ldr	r0, [r0, #0]
 801630a:	b388      	cbz	r0, 8016370 <rcl_action_take_result_response+0x70>
 801630c:	460d      	mov	r5, r1
 801630e:	4616      	mov	r6, r2
 8016310:	f7fd feee 	bl	80140f0 <rcl_client_is_valid>
 8016314:	b338      	cbz	r0, 8016366 <rcl_action_take_result_response+0x66>
 8016316:	6820      	ldr	r0, [r4, #0]
 8016318:	3004      	adds	r0, #4
 801631a:	f7fd fee9 	bl	80140f0 <rcl_client_is_valid>
 801631e:	b310      	cbz	r0, 8016366 <rcl_action_take_result_response+0x66>
 8016320:	6820      	ldr	r0, [r4, #0]
 8016322:	3008      	adds	r0, #8
 8016324:	f7fd fee4 	bl	80140f0 <rcl_client_is_valid>
 8016328:	b1e8      	cbz	r0, 8016366 <rcl_action_take_result_response+0x66>
 801632a:	6820      	ldr	r0, [r4, #0]
 801632c:	300c      	adds	r0, #12
 801632e:	f7fe fd7d 	bl	8014e2c <rcl_subscription_is_valid>
 8016332:	b1c0      	cbz	r0, 8016366 <rcl_action_take_result_response+0x66>
 8016334:	6820      	ldr	r0, [r4, #0]
 8016336:	3010      	adds	r0, #16
 8016338:	f7fe fd78 	bl	8014e2c <rcl_subscription_is_valid>
 801633c:	b198      	cbz	r0, 8016366 <rcl_action_take_result_response+0x66>
 801633e:	b1d5      	cbz	r5, 8016376 <rcl_action_take_result_response+0x76>
 8016340:	b1ce      	cbz	r6, 8016376 <rcl_action_take_result_response+0x76>
 8016342:	6820      	ldr	r0, [r4, #0]
 8016344:	4632      	mov	r2, r6
 8016346:	4629      	mov	r1, r5
 8016348:	3008      	adds	r0, #8
 801634a:	f7fd fe89 	bl	8014060 <rcl_take_response>
 801634e:	b148      	cbz	r0, 8016364 <rcl_action_take_result_response+0x64>
 8016350:	280a      	cmp	r0, #10
 8016352:	d007      	beq.n	8016364 <rcl_action_take_result_response+0x64>
 8016354:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8016358:	f640 0337 	movw	r3, #2103	@ 0x837
 801635c:	4290      	cmp	r0, r2
 801635e:	bf0c      	ite	eq
 8016360:	4618      	moveq	r0, r3
 8016362:	2001      	movne	r0, #1
 8016364:	bd70      	pop	{r4, r5, r6, pc}
 8016366:	f7f7 fdc3 	bl	800def0 <rcutils_reset_error>
 801636a:	f640 0036 	movw	r0, #2102	@ 0x836
 801636e:	bd70      	pop	{r4, r5, r6, pc}
 8016370:	f640 0036 	movw	r0, #2102	@ 0x836
 8016374:	bd70      	pop	{r4, r5, r6, pc}
 8016376:	200b      	movs	r0, #11
 8016378:	bd70      	pop	{r4, r5, r6, pc}
 801637a:	f640 0036 	movw	r0, #2102	@ 0x836
 801637e:	4770      	bx	lr

08016380 <rcl_action_take_cancel_response>:
 8016380:	2800      	cmp	r0, #0
 8016382:	d03a      	beq.n	80163fa <rcl_action_take_cancel_response+0x7a>
 8016384:	b570      	push	{r4, r5, r6, lr}
 8016386:	4604      	mov	r4, r0
 8016388:	6800      	ldr	r0, [r0, #0]
 801638a:	b388      	cbz	r0, 80163f0 <rcl_action_take_cancel_response+0x70>
 801638c:	460d      	mov	r5, r1
 801638e:	4616      	mov	r6, r2
 8016390:	f7fd feae 	bl	80140f0 <rcl_client_is_valid>
 8016394:	b338      	cbz	r0, 80163e6 <rcl_action_take_cancel_response+0x66>
 8016396:	6820      	ldr	r0, [r4, #0]
 8016398:	3004      	adds	r0, #4
 801639a:	f7fd fea9 	bl	80140f0 <rcl_client_is_valid>
 801639e:	b310      	cbz	r0, 80163e6 <rcl_action_take_cancel_response+0x66>
 80163a0:	6820      	ldr	r0, [r4, #0]
 80163a2:	3008      	adds	r0, #8
 80163a4:	f7fd fea4 	bl	80140f0 <rcl_client_is_valid>
 80163a8:	b1e8      	cbz	r0, 80163e6 <rcl_action_take_cancel_response+0x66>
 80163aa:	6820      	ldr	r0, [r4, #0]
 80163ac:	300c      	adds	r0, #12
 80163ae:	f7fe fd3d 	bl	8014e2c <rcl_subscription_is_valid>
 80163b2:	b1c0      	cbz	r0, 80163e6 <rcl_action_take_cancel_response+0x66>
 80163b4:	6820      	ldr	r0, [r4, #0]
 80163b6:	3010      	adds	r0, #16
 80163b8:	f7fe fd38 	bl	8014e2c <rcl_subscription_is_valid>
 80163bc:	b198      	cbz	r0, 80163e6 <rcl_action_take_cancel_response+0x66>
 80163be:	b1d5      	cbz	r5, 80163f6 <rcl_action_take_cancel_response+0x76>
 80163c0:	b1ce      	cbz	r6, 80163f6 <rcl_action_take_cancel_response+0x76>
 80163c2:	6820      	ldr	r0, [r4, #0]
 80163c4:	4632      	mov	r2, r6
 80163c6:	4629      	mov	r1, r5
 80163c8:	3004      	adds	r0, #4
 80163ca:	f7fd fe49 	bl	8014060 <rcl_take_response>
 80163ce:	b148      	cbz	r0, 80163e4 <rcl_action_take_cancel_response+0x64>
 80163d0:	280a      	cmp	r0, #10
 80163d2:	d007      	beq.n	80163e4 <rcl_action_take_cancel_response+0x64>
 80163d4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80163d8:	f640 0337 	movw	r3, #2103	@ 0x837
 80163dc:	4290      	cmp	r0, r2
 80163de:	bf0c      	ite	eq
 80163e0:	4618      	moveq	r0, r3
 80163e2:	2001      	movne	r0, #1
 80163e4:	bd70      	pop	{r4, r5, r6, pc}
 80163e6:	f7f7 fd83 	bl	800def0 <rcutils_reset_error>
 80163ea:	f640 0036 	movw	r0, #2102	@ 0x836
 80163ee:	bd70      	pop	{r4, r5, r6, pc}
 80163f0:	f640 0036 	movw	r0, #2102	@ 0x836
 80163f4:	bd70      	pop	{r4, r5, r6, pc}
 80163f6:	200b      	movs	r0, #11
 80163f8:	bd70      	pop	{r4, r5, r6, pc}
 80163fa:	f640 0036 	movw	r0, #2102	@ 0x836
 80163fe:	4770      	bx	lr

08016400 <rcl_action_take_feedback>:
 8016400:	2800      	cmp	r0, #0
 8016402:	d038      	beq.n	8016476 <rcl_action_take_feedback+0x76>
 8016404:	b530      	push	{r4, r5, lr}
 8016406:	4604      	mov	r4, r0
 8016408:	6800      	ldr	r0, [r0, #0]
 801640a:	b091      	sub	sp, #68	@ 0x44
 801640c:	b378      	cbz	r0, 801646e <rcl_action_take_feedback+0x6e>
 801640e:	460d      	mov	r5, r1
 8016410:	f7fd fe6e 	bl	80140f0 <rcl_client_is_valid>
 8016414:	b328      	cbz	r0, 8016462 <rcl_action_take_feedback+0x62>
 8016416:	6820      	ldr	r0, [r4, #0]
 8016418:	3004      	adds	r0, #4
 801641a:	f7fd fe69 	bl	80140f0 <rcl_client_is_valid>
 801641e:	b300      	cbz	r0, 8016462 <rcl_action_take_feedback+0x62>
 8016420:	6820      	ldr	r0, [r4, #0]
 8016422:	3008      	adds	r0, #8
 8016424:	f7fd fe64 	bl	80140f0 <rcl_client_is_valid>
 8016428:	b1d8      	cbz	r0, 8016462 <rcl_action_take_feedback+0x62>
 801642a:	6820      	ldr	r0, [r4, #0]
 801642c:	300c      	adds	r0, #12
 801642e:	f7fe fcfd 	bl	8014e2c <rcl_subscription_is_valid>
 8016432:	b1b0      	cbz	r0, 8016462 <rcl_action_take_feedback+0x62>
 8016434:	6820      	ldr	r0, [r4, #0]
 8016436:	3010      	adds	r0, #16
 8016438:	f7fe fcf8 	bl	8014e2c <rcl_subscription_is_valid>
 801643c:	b188      	cbz	r0, 8016462 <rcl_action_take_feedback+0x62>
 801643e:	b1ed      	cbz	r5, 801647c <rcl_action_take_feedback+0x7c>
 8016440:	6820      	ldr	r0, [r4, #0]
 8016442:	2300      	movs	r3, #0
 8016444:	466a      	mov	r2, sp
 8016446:	4629      	mov	r1, r5
 8016448:	300c      	adds	r0, #12
 801644a:	f7fe fc91 	bl	8014d70 <rcl_take>
 801644e:	b160      	cbz	r0, 801646a <rcl_action_take_feedback+0x6a>
 8016450:	f240 1391 	movw	r3, #401	@ 0x191
 8016454:	4298      	cmp	r0, r3
 8016456:	d014      	beq.n	8016482 <rcl_action_take_feedback+0x82>
 8016458:	280a      	cmp	r0, #10
 801645a:	bf18      	it	ne
 801645c:	2001      	movne	r0, #1
 801645e:	b011      	add	sp, #68	@ 0x44
 8016460:	bd30      	pop	{r4, r5, pc}
 8016462:	f7f7 fd45 	bl	800def0 <rcutils_reset_error>
 8016466:	f640 0036 	movw	r0, #2102	@ 0x836
 801646a:	b011      	add	sp, #68	@ 0x44
 801646c:	bd30      	pop	{r4, r5, pc}
 801646e:	f640 0036 	movw	r0, #2102	@ 0x836
 8016472:	b011      	add	sp, #68	@ 0x44
 8016474:	bd30      	pop	{r4, r5, pc}
 8016476:	f640 0036 	movw	r0, #2102	@ 0x836
 801647a:	4770      	bx	lr
 801647c:	200b      	movs	r0, #11
 801647e:	b011      	add	sp, #68	@ 0x44
 8016480:	bd30      	pop	{r4, r5, pc}
 8016482:	f640 0037 	movw	r0, #2103	@ 0x837
 8016486:	e7f0      	b.n	801646a <rcl_action_take_feedback+0x6a>

08016488 <rcl_action_wait_set_add_action_client>:
 8016488:	2800      	cmp	r0, #0
 801648a:	d048      	beq.n	801651e <rcl_action_wait_set_add_action_client+0x96>
 801648c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801648e:	460c      	mov	r4, r1
 8016490:	2900      	cmp	r1, #0
 8016492:	d03c      	beq.n	801650e <rcl_action_wait_set_add_action_client+0x86>
 8016494:	4605      	mov	r5, r0
 8016496:	6808      	ldr	r0, [r1, #0]
 8016498:	2800      	cmp	r0, #0
 801649a:	d038      	beq.n	801650e <rcl_action_wait_set_add_action_client+0x86>
 801649c:	4617      	mov	r7, r2
 801649e:	461e      	mov	r6, r3
 80164a0:	f7fd fe26 	bl	80140f0 <rcl_client_is_valid>
 80164a4:	b3b0      	cbz	r0, 8016514 <rcl_action_wait_set_add_action_client+0x8c>
 80164a6:	6820      	ldr	r0, [r4, #0]
 80164a8:	3004      	adds	r0, #4
 80164aa:	f7fd fe21 	bl	80140f0 <rcl_client_is_valid>
 80164ae:	b388      	cbz	r0, 8016514 <rcl_action_wait_set_add_action_client+0x8c>
 80164b0:	6820      	ldr	r0, [r4, #0]
 80164b2:	3008      	adds	r0, #8
 80164b4:	f7fd fe1c 	bl	80140f0 <rcl_client_is_valid>
 80164b8:	b360      	cbz	r0, 8016514 <rcl_action_wait_set_add_action_client+0x8c>
 80164ba:	6820      	ldr	r0, [r4, #0]
 80164bc:	300c      	adds	r0, #12
 80164be:	f7fe fcb5 	bl	8014e2c <rcl_subscription_is_valid>
 80164c2:	b338      	cbz	r0, 8016514 <rcl_action_wait_set_add_action_client+0x8c>
 80164c4:	6820      	ldr	r0, [r4, #0]
 80164c6:	3010      	adds	r0, #16
 80164c8:	f7fe fcb0 	bl	8014e2c <rcl_subscription_is_valid>
 80164cc:	b310      	cbz	r0, 8016514 <rcl_action_wait_set_add_action_client+0x8c>
 80164ce:	6821      	ldr	r1, [r4, #0]
 80164d0:	4628      	mov	r0, r5
 80164d2:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 80164d6:	f7ff fccd 	bl	8015e74 <rcl_wait_set_add_client>
 80164da:	b9b8      	cbnz	r0, 801650c <rcl_action_wait_set_add_action_client+0x84>
 80164dc:	6821      	ldr	r1, [r4, #0]
 80164de:	4628      	mov	r0, r5
 80164e0:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 80164e4:	3104      	adds	r1, #4
 80164e6:	f7ff fcc5 	bl	8015e74 <rcl_wait_set_add_client>
 80164ea:	b978      	cbnz	r0, 801650c <rcl_action_wait_set_add_action_client+0x84>
 80164ec:	6821      	ldr	r1, [r4, #0]
 80164ee:	4628      	mov	r0, r5
 80164f0:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 80164f4:	3108      	adds	r1, #8
 80164f6:	f7ff fcbd 	bl	8015e74 <rcl_wait_set_add_client>
 80164fa:	b938      	cbnz	r0, 801650c <rcl_action_wait_set_add_action_client+0x84>
 80164fc:	6821      	ldr	r1, [r4, #0]
 80164fe:	4628      	mov	r0, r5
 8016500:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8016504:	310c      	adds	r1, #12
 8016506:	f7ff f96d 	bl	80157e4 <rcl_wait_set_add_subscription>
 801650a:	b158      	cbz	r0, 8016524 <rcl_action_wait_set_add_action_client+0x9c>
 801650c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801650e:	f640 0036 	movw	r0, #2102	@ 0x836
 8016512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016514:	f7f7 fcec 	bl	800def0 <rcutils_reset_error>
 8016518:	f640 0036 	movw	r0, #2102	@ 0x836
 801651c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801651e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016522:	4770      	bx	lr
 8016524:	6821      	ldr	r1, [r4, #0]
 8016526:	4628      	mov	r0, r5
 8016528:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801652c:	3110      	adds	r1, #16
 801652e:	f7ff f959 	bl	80157e4 <rcl_wait_set_add_subscription>
 8016532:	2800      	cmp	r0, #0
 8016534:	d1ea      	bne.n	801650c <rcl_action_wait_set_add_action_client+0x84>
 8016536:	b11f      	cbz	r7, 8016540 <rcl_action_wait_set_add_action_client+0xb8>
 8016538:	6823      	ldr	r3, [r4, #0]
 801653a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801653e:	603b      	str	r3, [r7, #0]
 8016540:	2e00      	cmp	r6, #0
 8016542:	d0e3      	beq.n	801650c <rcl_action_wait_set_add_action_client+0x84>
 8016544:	6823      	ldr	r3, [r4, #0]
 8016546:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801654a:	6033      	str	r3, [r6, #0]
 801654c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801654e:	bf00      	nop

08016550 <rcl_action_client_wait_set_get_entities_ready>:
 8016550:	2800      	cmp	r0, #0
 8016552:	f000 808d 	beq.w	8016670 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8016556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801655a:	460c      	mov	r4, r1
 801655c:	2900      	cmp	r1, #0
 801655e:	d077      	beq.n	8016650 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016560:	4605      	mov	r5, r0
 8016562:	6808      	ldr	r0, [r1, #0]
 8016564:	2800      	cmp	r0, #0
 8016566:	d073      	beq.n	8016650 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016568:	4616      	mov	r6, r2
 801656a:	461f      	mov	r7, r3
 801656c:	f7fd fdc0 	bl	80140f0 <rcl_client_is_valid>
 8016570:	2800      	cmp	r0, #0
 8016572:	d071      	beq.n	8016658 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016574:	6820      	ldr	r0, [r4, #0]
 8016576:	3004      	adds	r0, #4
 8016578:	f7fd fdba 	bl	80140f0 <rcl_client_is_valid>
 801657c:	2800      	cmp	r0, #0
 801657e:	d06b      	beq.n	8016658 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016580:	6820      	ldr	r0, [r4, #0]
 8016582:	3008      	adds	r0, #8
 8016584:	f7fd fdb4 	bl	80140f0 <rcl_client_is_valid>
 8016588:	2800      	cmp	r0, #0
 801658a:	d065      	beq.n	8016658 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801658c:	6820      	ldr	r0, [r4, #0]
 801658e:	300c      	adds	r0, #12
 8016590:	f7fe fc4c 	bl	8014e2c <rcl_subscription_is_valid>
 8016594:	2800      	cmp	r0, #0
 8016596:	d05f      	beq.n	8016658 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016598:	6820      	ldr	r0, [r4, #0]
 801659a:	3010      	adds	r0, #16
 801659c:	f7fe fc46 	bl	8014e2c <rcl_subscription_is_valid>
 80165a0:	2800      	cmp	r0, #0
 80165a2:	d059      	beq.n	8016658 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80165a4:	2e00      	cmp	r6, #0
 80165a6:	d060      	beq.n	801666a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80165a8:	2f00      	cmp	r7, #0
 80165aa:	d05e      	beq.n	801666a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80165ac:	9b06      	ldr	r3, [sp, #24]
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d05b      	beq.n	801666a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80165b2:	9b07      	ldr	r3, [sp, #28]
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d058      	beq.n	801666a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80165b8:	9b08      	ldr	r3, [sp, #32]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d055      	beq.n	801666a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 80165be:	6823      	ldr	r3, [r4, #0]
 80165c0:	686a      	ldr	r2, [r5, #4]
 80165c2:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 80165c6:	428a      	cmp	r2, r1
 80165c8:	d94c      	bls.n	8016664 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80165ca:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 80165ce:	4282      	cmp	r2, r0
 80165d0:	d948      	bls.n	8016664 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80165d2:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 80165d6:	69ea      	ldr	r2, [r5, #28]
 80165d8:	42a2      	cmp	r2, r4
 80165da:	d943      	bls.n	8016664 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80165dc:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 80165e0:	4562      	cmp	r2, ip
 80165e2:	d93f      	bls.n	8016664 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80165e4:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 80165e8:	4572      	cmp	r2, lr
 80165ea:	d93b      	bls.n	8016664 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80165ec:	69aa      	ldr	r2, [r5, #24]
 80165ee:	682d      	ldr	r5, [r5, #0]
 80165f0:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 80165f4:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80165f8:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80165fc:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8016600:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 8016604:	f103 0c0c 	add.w	ip, r3, #12
 8016608:	eba5 050c 	sub.w	r5, r5, ip
 801660c:	fab5 f585 	clz	r5, r5
 8016610:	096d      	lsrs	r5, r5, #5
 8016612:	7035      	strb	r5, [r6, #0]
 8016614:	f103 0510 	add.w	r5, r3, #16
 8016618:	1b64      	subs	r4, r4, r5
 801661a:	fab4 f484 	clz	r4, r4
 801661e:	0964      	lsrs	r4, r4, #5
 8016620:	703c      	strb	r4, [r7, #0]
 8016622:	eba3 0008 	sub.w	r0, r3, r8
 8016626:	1d1c      	adds	r4, r3, #4
 8016628:	3308      	adds	r3, #8
 801662a:	1ad3      	subs	r3, r2, r3
 801662c:	fab0 f080 	clz	r0, r0
 8016630:	9a06      	ldr	r2, [sp, #24]
 8016632:	0940      	lsrs	r0, r0, #5
 8016634:	1b09      	subs	r1, r1, r4
 8016636:	7010      	strb	r0, [r2, #0]
 8016638:	fab1 f181 	clz	r1, r1
 801663c:	9a07      	ldr	r2, [sp, #28]
 801663e:	0949      	lsrs	r1, r1, #5
 8016640:	7011      	strb	r1, [r2, #0]
 8016642:	fab3 f383 	clz	r3, r3
 8016646:	9a08      	ldr	r2, [sp, #32]
 8016648:	095b      	lsrs	r3, r3, #5
 801664a:	2000      	movs	r0, #0
 801664c:	7013      	strb	r3, [r2, #0]
 801664e:	e001      	b.n	8016654 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8016650:	f640 0036 	movw	r0, #2102	@ 0x836
 8016654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016658:	f7f7 fc4a 	bl	800def0 <rcutils_reset_error>
 801665c:	f640 0036 	movw	r0, #2102	@ 0x836
 8016660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016664:	2001      	movs	r0, #1
 8016666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801666a:	200b      	movs	r0, #11
 801666c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016670:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016674:	4770      	bx	lr
 8016676:	bf00      	nop

08016678 <rcl_action_take_goal_request>:
 8016678:	2800      	cmp	r0, #0
 801667a:	d039      	beq.n	80166f0 <rcl_action_take_goal_request+0x78>
 801667c:	b570      	push	{r4, r5, r6, lr}
 801667e:	4604      	mov	r4, r0
 8016680:	6800      	ldr	r0, [r0, #0]
 8016682:	b380      	cbz	r0, 80166e6 <rcl_action_take_goal_request+0x6e>
 8016684:	460d      	mov	r5, r1
 8016686:	4616      	mov	r6, r2
 8016688:	f7fe fa8c 	bl	8014ba4 <rcl_service_is_valid>
 801668c:	b330      	cbz	r0, 80166dc <rcl_action_take_goal_request+0x64>
 801668e:	6820      	ldr	r0, [r4, #0]
 8016690:	3004      	adds	r0, #4
 8016692:	f7fe fa87 	bl	8014ba4 <rcl_service_is_valid>
 8016696:	b308      	cbz	r0, 80166dc <rcl_action_take_goal_request+0x64>
 8016698:	6820      	ldr	r0, [r4, #0]
 801669a:	3008      	adds	r0, #8
 801669c:	f7fe fa82 	bl	8014ba4 <rcl_service_is_valid>
 80166a0:	b1e0      	cbz	r0, 80166dc <rcl_action_take_goal_request+0x64>
 80166a2:	6820      	ldr	r0, [r4, #0]
 80166a4:	300c      	adds	r0, #12
 80166a6:	f7f6 fc43 	bl	800cf30 <rcl_publisher_is_valid>
 80166aa:	b1b8      	cbz	r0, 80166dc <rcl_action_take_goal_request+0x64>
 80166ac:	6820      	ldr	r0, [r4, #0]
 80166ae:	3010      	adds	r0, #16
 80166b0:	f7f6 fc3e 	bl	800cf30 <rcl_publisher_is_valid>
 80166b4:	b190      	cbz	r0, 80166dc <rcl_action_take_goal_request+0x64>
 80166b6:	b1cd      	cbz	r5, 80166ec <rcl_action_take_goal_request+0x74>
 80166b8:	b1c6      	cbz	r6, 80166ec <rcl_action_take_goal_request+0x74>
 80166ba:	6820      	ldr	r0, [r4, #0]
 80166bc:	4632      	mov	r2, r6
 80166be:	4629      	mov	r1, r5
 80166c0:	f7fe fa18 	bl	8014af4 <rcl_take_request>
 80166c4:	b148      	cbz	r0, 80166da <rcl_action_take_goal_request+0x62>
 80166c6:	280a      	cmp	r0, #10
 80166c8:	d007      	beq.n	80166da <rcl_action_take_goal_request+0x62>
 80166ca:	f240 2259 	movw	r2, #601	@ 0x259
 80166ce:	f640 0399 	movw	r3, #2201	@ 0x899
 80166d2:	4290      	cmp	r0, r2
 80166d4:	bf0c      	ite	eq
 80166d6:	4618      	moveq	r0, r3
 80166d8:	2001      	movne	r0, #1
 80166da:	bd70      	pop	{r4, r5, r6, pc}
 80166dc:	f7f7 fc08 	bl	800def0 <rcutils_reset_error>
 80166e0:	f640 0098 	movw	r0, #2200	@ 0x898
 80166e4:	bd70      	pop	{r4, r5, r6, pc}
 80166e6:	f640 0098 	movw	r0, #2200	@ 0x898
 80166ea:	bd70      	pop	{r4, r5, r6, pc}
 80166ec:	200b      	movs	r0, #11
 80166ee:	bd70      	pop	{r4, r5, r6, pc}
 80166f0:	f640 0098 	movw	r0, #2200	@ 0x898
 80166f4:	4770      	bx	lr
 80166f6:	bf00      	nop

080166f8 <rcl_action_send_goal_response>:
 80166f8:	b390      	cbz	r0, 8016760 <rcl_action_send_goal_response+0x68>
 80166fa:	b570      	push	{r4, r5, r6, lr}
 80166fc:	4604      	mov	r4, r0
 80166fe:	6800      	ldr	r0, [r0, #0]
 8016700:	b348      	cbz	r0, 8016756 <rcl_action_send_goal_response+0x5e>
 8016702:	460d      	mov	r5, r1
 8016704:	4616      	mov	r6, r2
 8016706:	f7fe fa4d 	bl	8014ba4 <rcl_service_is_valid>
 801670a:	b1f8      	cbz	r0, 801674c <rcl_action_send_goal_response+0x54>
 801670c:	6820      	ldr	r0, [r4, #0]
 801670e:	3004      	adds	r0, #4
 8016710:	f7fe fa48 	bl	8014ba4 <rcl_service_is_valid>
 8016714:	b1d0      	cbz	r0, 801674c <rcl_action_send_goal_response+0x54>
 8016716:	6820      	ldr	r0, [r4, #0]
 8016718:	3008      	adds	r0, #8
 801671a:	f7fe fa43 	bl	8014ba4 <rcl_service_is_valid>
 801671e:	b1a8      	cbz	r0, 801674c <rcl_action_send_goal_response+0x54>
 8016720:	6820      	ldr	r0, [r4, #0]
 8016722:	300c      	adds	r0, #12
 8016724:	f7f6 fc04 	bl	800cf30 <rcl_publisher_is_valid>
 8016728:	b180      	cbz	r0, 801674c <rcl_action_send_goal_response+0x54>
 801672a:	6820      	ldr	r0, [r4, #0]
 801672c:	3010      	adds	r0, #16
 801672e:	f7f6 fbff 	bl	800cf30 <rcl_publisher_is_valid>
 8016732:	b158      	cbz	r0, 801674c <rcl_action_send_goal_response+0x54>
 8016734:	b195      	cbz	r5, 801675c <rcl_action_send_goal_response+0x64>
 8016736:	b18e      	cbz	r6, 801675c <rcl_action_send_goal_response+0x64>
 8016738:	6820      	ldr	r0, [r4, #0]
 801673a:	4632      	mov	r2, r6
 801673c:	4629      	mov	r1, r5
 801673e:	f7fe fa19 	bl	8014b74 <rcl_send_response>
 8016742:	b110      	cbz	r0, 801674a <rcl_action_send_goal_response+0x52>
 8016744:	2802      	cmp	r0, #2
 8016746:	bf18      	it	ne
 8016748:	2001      	movne	r0, #1
 801674a:	bd70      	pop	{r4, r5, r6, pc}
 801674c:	f7f7 fbd0 	bl	800def0 <rcutils_reset_error>
 8016750:	f640 0098 	movw	r0, #2200	@ 0x898
 8016754:	bd70      	pop	{r4, r5, r6, pc}
 8016756:	f640 0098 	movw	r0, #2200	@ 0x898
 801675a:	bd70      	pop	{r4, r5, r6, pc}
 801675c:	200b      	movs	r0, #11
 801675e:	bd70      	pop	{r4, r5, r6, pc}
 8016760:	f640 0098 	movw	r0, #2200	@ 0x898
 8016764:	4770      	bx	lr
 8016766:	bf00      	nop

08016768 <rcl_action_take_result_request>:
 8016768:	2800      	cmp	r0, #0
 801676a:	d03a      	beq.n	80167e2 <rcl_action_take_result_request+0x7a>
 801676c:	b570      	push	{r4, r5, r6, lr}
 801676e:	4604      	mov	r4, r0
 8016770:	6800      	ldr	r0, [r0, #0]
 8016772:	b388      	cbz	r0, 80167d8 <rcl_action_take_result_request+0x70>
 8016774:	460d      	mov	r5, r1
 8016776:	4616      	mov	r6, r2
 8016778:	f7fe fa14 	bl	8014ba4 <rcl_service_is_valid>
 801677c:	b338      	cbz	r0, 80167ce <rcl_action_take_result_request+0x66>
 801677e:	6820      	ldr	r0, [r4, #0]
 8016780:	3004      	adds	r0, #4
 8016782:	f7fe fa0f 	bl	8014ba4 <rcl_service_is_valid>
 8016786:	b310      	cbz	r0, 80167ce <rcl_action_take_result_request+0x66>
 8016788:	6820      	ldr	r0, [r4, #0]
 801678a:	3008      	adds	r0, #8
 801678c:	f7fe fa0a 	bl	8014ba4 <rcl_service_is_valid>
 8016790:	b1e8      	cbz	r0, 80167ce <rcl_action_take_result_request+0x66>
 8016792:	6820      	ldr	r0, [r4, #0]
 8016794:	300c      	adds	r0, #12
 8016796:	f7f6 fbcb 	bl	800cf30 <rcl_publisher_is_valid>
 801679a:	b1c0      	cbz	r0, 80167ce <rcl_action_take_result_request+0x66>
 801679c:	6820      	ldr	r0, [r4, #0]
 801679e:	3010      	adds	r0, #16
 80167a0:	f7f6 fbc6 	bl	800cf30 <rcl_publisher_is_valid>
 80167a4:	b198      	cbz	r0, 80167ce <rcl_action_take_result_request+0x66>
 80167a6:	b1d5      	cbz	r5, 80167de <rcl_action_take_result_request+0x76>
 80167a8:	b1ce      	cbz	r6, 80167de <rcl_action_take_result_request+0x76>
 80167aa:	6820      	ldr	r0, [r4, #0]
 80167ac:	4632      	mov	r2, r6
 80167ae:	4629      	mov	r1, r5
 80167b0:	3008      	adds	r0, #8
 80167b2:	f7fe f99f 	bl	8014af4 <rcl_take_request>
 80167b6:	b148      	cbz	r0, 80167cc <rcl_action_take_result_request+0x64>
 80167b8:	280a      	cmp	r0, #10
 80167ba:	d007      	beq.n	80167cc <rcl_action_take_result_request+0x64>
 80167bc:	f240 2259 	movw	r2, #601	@ 0x259
 80167c0:	f640 0399 	movw	r3, #2201	@ 0x899
 80167c4:	4290      	cmp	r0, r2
 80167c6:	bf0c      	ite	eq
 80167c8:	4618      	moveq	r0, r3
 80167ca:	2001      	movne	r0, #1
 80167cc:	bd70      	pop	{r4, r5, r6, pc}
 80167ce:	f7f7 fb8f 	bl	800def0 <rcutils_reset_error>
 80167d2:	f640 0098 	movw	r0, #2200	@ 0x898
 80167d6:	bd70      	pop	{r4, r5, r6, pc}
 80167d8:	f640 0098 	movw	r0, #2200	@ 0x898
 80167dc:	bd70      	pop	{r4, r5, r6, pc}
 80167de:	200b      	movs	r0, #11
 80167e0:	bd70      	pop	{r4, r5, r6, pc}
 80167e2:	f640 0098 	movw	r0, #2200	@ 0x898
 80167e6:	4770      	bx	lr

080167e8 <rcl_action_take_cancel_request>:
 80167e8:	2800      	cmp	r0, #0
 80167ea:	d03a      	beq.n	8016862 <rcl_action_take_cancel_request+0x7a>
 80167ec:	b570      	push	{r4, r5, r6, lr}
 80167ee:	4604      	mov	r4, r0
 80167f0:	6800      	ldr	r0, [r0, #0]
 80167f2:	b388      	cbz	r0, 8016858 <rcl_action_take_cancel_request+0x70>
 80167f4:	460d      	mov	r5, r1
 80167f6:	4616      	mov	r6, r2
 80167f8:	f7fe f9d4 	bl	8014ba4 <rcl_service_is_valid>
 80167fc:	b338      	cbz	r0, 801684e <rcl_action_take_cancel_request+0x66>
 80167fe:	6820      	ldr	r0, [r4, #0]
 8016800:	3004      	adds	r0, #4
 8016802:	f7fe f9cf 	bl	8014ba4 <rcl_service_is_valid>
 8016806:	b310      	cbz	r0, 801684e <rcl_action_take_cancel_request+0x66>
 8016808:	6820      	ldr	r0, [r4, #0]
 801680a:	3008      	adds	r0, #8
 801680c:	f7fe f9ca 	bl	8014ba4 <rcl_service_is_valid>
 8016810:	b1e8      	cbz	r0, 801684e <rcl_action_take_cancel_request+0x66>
 8016812:	6820      	ldr	r0, [r4, #0]
 8016814:	300c      	adds	r0, #12
 8016816:	f7f6 fb8b 	bl	800cf30 <rcl_publisher_is_valid>
 801681a:	b1c0      	cbz	r0, 801684e <rcl_action_take_cancel_request+0x66>
 801681c:	6820      	ldr	r0, [r4, #0]
 801681e:	3010      	adds	r0, #16
 8016820:	f7f6 fb86 	bl	800cf30 <rcl_publisher_is_valid>
 8016824:	b198      	cbz	r0, 801684e <rcl_action_take_cancel_request+0x66>
 8016826:	b1d5      	cbz	r5, 801685e <rcl_action_take_cancel_request+0x76>
 8016828:	b1ce      	cbz	r6, 801685e <rcl_action_take_cancel_request+0x76>
 801682a:	6820      	ldr	r0, [r4, #0]
 801682c:	4632      	mov	r2, r6
 801682e:	4629      	mov	r1, r5
 8016830:	3004      	adds	r0, #4
 8016832:	f7fe f95f 	bl	8014af4 <rcl_take_request>
 8016836:	b148      	cbz	r0, 801684c <rcl_action_take_cancel_request+0x64>
 8016838:	280a      	cmp	r0, #10
 801683a:	d007      	beq.n	801684c <rcl_action_take_cancel_request+0x64>
 801683c:	f240 2259 	movw	r2, #601	@ 0x259
 8016840:	f640 0399 	movw	r3, #2201	@ 0x899
 8016844:	4290      	cmp	r0, r2
 8016846:	bf0c      	ite	eq
 8016848:	4618      	moveq	r0, r3
 801684a:	2001      	movne	r0, #1
 801684c:	bd70      	pop	{r4, r5, r6, pc}
 801684e:	f7f7 fb4f 	bl	800def0 <rcutils_reset_error>
 8016852:	f640 0098 	movw	r0, #2200	@ 0x898
 8016856:	bd70      	pop	{r4, r5, r6, pc}
 8016858:	f640 0098 	movw	r0, #2200	@ 0x898
 801685c:	bd70      	pop	{r4, r5, r6, pc}
 801685e:	200b      	movs	r0, #11
 8016860:	bd70      	pop	{r4, r5, r6, pc}
 8016862:	f640 0098 	movw	r0, #2200	@ 0x898
 8016866:	4770      	bx	lr

08016868 <rcl_action_send_cancel_response>:
 8016868:	b398      	cbz	r0, 80168d2 <rcl_action_send_cancel_response+0x6a>
 801686a:	b570      	push	{r4, r5, r6, lr}
 801686c:	4604      	mov	r4, r0
 801686e:	6800      	ldr	r0, [r0, #0]
 8016870:	b350      	cbz	r0, 80168c8 <rcl_action_send_cancel_response+0x60>
 8016872:	460d      	mov	r5, r1
 8016874:	4616      	mov	r6, r2
 8016876:	f7fe f995 	bl	8014ba4 <rcl_service_is_valid>
 801687a:	b300      	cbz	r0, 80168be <rcl_action_send_cancel_response+0x56>
 801687c:	6820      	ldr	r0, [r4, #0]
 801687e:	3004      	adds	r0, #4
 8016880:	f7fe f990 	bl	8014ba4 <rcl_service_is_valid>
 8016884:	b1d8      	cbz	r0, 80168be <rcl_action_send_cancel_response+0x56>
 8016886:	6820      	ldr	r0, [r4, #0]
 8016888:	3008      	adds	r0, #8
 801688a:	f7fe f98b 	bl	8014ba4 <rcl_service_is_valid>
 801688e:	b1b0      	cbz	r0, 80168be <rcl_action_send_cancel_response+0x56>
 8016890:	6820      	ldr	r0, [r4, #0]
 8016892:	300c      	adds	r0, #12
 8016894:	f7f6 fb4c 	bl	800cf30 <rcl_publisher_is_valid>
 8016898:	b188      	cbz	r0, 80168be <rcl_action_send_cancel_response+0x56>
 801689a:	6820      	ldr	r0, [r4, #0]
 801689c:	3010      	adds	r0, #16
 801689e:	f7f6 fb47 	bl	800cf30 <rcl_publisher_is_valid>
 80168a2:	b160      	cbz	r0, 80168be <rcl_action_send_cancel_response+0x56>
 80168a4:	b19d      	cbz	r5, 80168ce <rcl_action_send_cancel_response+0x66>
 80168a6:	b196      	cbz	r6, 80168ce <rcl_action_send_cancel_response+0x66>
 80168a8:	6820      	ldr	r0, [r4, #0]
 80168aa:	4632      	mov	r2, r6
 80168ac:	4629      	mov	r1, r5
 80168ae:	3004      	adds	r0, #4
 80168b0:	f7fe f960 	bl	8014b74 <rcl_send_response>
 80168b4:	b110      	cbz	r0, 80168bc <rcl_action_send_cancel_response+0x54>
 80168b6:	2802      	cmp	r0, #2
 80168b8:	bf18      	it	ne
 80168ba:	2001      	movne	r0, #1
 80168bc:	bd70      	pop	{r4, r5, r6, pc}
 80168be:	f7f7 fb17 	bl	800def0 <rcutils_reset_error>
 80168c2:	f640 0098 	movw	r0, #2200	@ 0x898
 80168c6:	bd70      	pop	{r4, r5, r6, pc}
 80168c8:	f640 0098 	movw	r0, #2200	@ 0x898
 80168cc:	bd70      	pop	{r4, r5, r6, pc}
 80168ce:	200b      	movs	r0, #11
 80168d0:	bd70      	pop	{r4, r5, r6, pc}
 80168d2:	f640 0098 	movw	r0, #2200	@ 0x898
 80168d6:	4770      	bx	lr

080168d8 <rcl_action_wait_set_add_action_server>:
 80168d8:	2800      	cmp	r0, #0
 80168da:	d04d      	beq.n	8016978 <rcl_action_wait_set_add_action_server+0xa0>
 80168dc:	b570      	push	{r4, r5, r6, lr}
 80168de:	460c      	mov	r4, r1
 80168e0:	b159      	cbz	r1, 80168fa <rcl_action_wait_set_add_action_server+0x22>
 80168e2:	4605      	mov	r5, r0
 80168e4:	6808      	ldr	r0, [r1, #0]
 80168e6:	b140      	cbz	r0, 80168fa <rcl_action_wait_set_add_action_server+0x22>
 80168e8:	4616      	mov	r6, r2
 80168ea:	f7fe f95b 	bl	8014ba4 <rcl_service_is_valid>
 80168ee:	b120      	cbz	r0, 80168fa <rcl_action_wait_set_add_action_server+0x22>
 80168f0:	6820      	ldr	r0, [r4, #0]
 80168f2:	3004      	adds	r0, #4
 80168f4:	f7fe f956 	bl	8014ba4 <rcl_service_is_valid>
 80168f8:	b910      	cbnz	r0, 8016900 <rcl_action_wait_set_add_action_server+0x28>
 80168fa:	f640 0098 	movw	r0, #2200	@ 0x898
 80168fe:	bd70      	pop	{r4, r5, r6, pc}
 8016900:	6820      	ldr	r0, [r4, #0]
 8016902:	3008      	adds	r0, #8
 8016904:	f7fe f94e 	bl	8014ba4 <rcl_service_is_valid>
 8016908:	2800      	cmp	r0, #0
 801690a:	d0f6      	beq.n	80168fa <rcl_action_wait_set_add_action_server+0x22>
 801690c:	6820      	ldr	r0, [r4, #0]
 801690e:	300c      	adds	r0, #12
 8016910:	f7f6 fb26 	bl	800cf60 <rcl_publisher_is_valid_except_context>
 8016914:	2800      	cmp	r0, #0
 8016916:	d0f0      	beq.n	80168fa <rcl_action_wait_set_add_action_server+0x22>
 8016918:	6820      	ldr	r0, [r4, #0]
 801691a:	3010      	adds	r0, #16
 801691c:	f7f6 fb20 	bl	800cf60 <rcl_publisher_is_valid_except_context>
 8016920:	2800      	cmp	r0, #0
 8016922:	d0ea      	beq.n	80168fa <rcl_action_wait_set_add_action_server+0x22>
 8016924:	6821      	ldr	r1, [r4, #0]
 8016926:	4628      	mov	r0, r5
 8016928:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801692c:	f7ff face 	bl	8015ecc <rcl_wait_set_add_service>
 8016930:	2800      	cmp	r0, #0
 8016932:	d1e4      	bne.n	80168fe <rcl_action_wait_set_add_action_server+0x26>
 8016934:	6821      	ldr	r1, [r4, #0]
 8016936:	4628      	mov	r0, r5
 8016938:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801693c:	3104      	adds	r1, #4
 801693e:	f7ff fac5 	bl	8015ecc <rcl_wait_set_add_service>
 8016942:	2800      	cmp	r0, #0
 8016944:	d1db      	bne.n	80168fe <rcl_action_wait_set_add_action_server+0x26>
 8016946:	6821      	ldr	r1, [r4, #0]
 8016948:	4628      	mov	r0, r5
 801694a:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801694e:	3108      	adds	r1, #8
 8016950:	f7ff fabc 	bl	8015ecc <rcl_wait_set_add_service>
 8016954:	2800      	cmp	r0, #0
 8016956:	d1d2      	bne.n	80168fe <rcl_action_wait_set_add_action_server+0x26>
 8016958:	6821      	ldr	r1, [r4, #0]
 801695a:	4628      	mov	r0, r5
 801695c:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8016960:	3114      	adds	r1, #20
 8016962:	f7ff fa57 	bl	8015e14 <rcl_wait_set_add_timer>
 8016966:	2800      	cmp	r0, #0
 8016968:	d1c9      	bne.n	80168fe <rcl_action_wait_set_add_action_server+0x26>
 801696a:	2e00      	cmp	r6, #0
 801696c:	d0c7      	beq.n	80168fe <rcl_action_wait_set_add_action_server+0x26>
 801696e:	6823      	ldr	r3, [r4, #0]
 8016970:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8016974:	6033      	str	r3, [r6, #0]
 8016976:	bd70      	pop	{r4, r5, r6, pc}
 8016978:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801697c:	4770      	bx	lr
 801697e:	bf00      	nop

08016980 <rcl_action_server_wait_set_get_entities_ready>:
 8016980:	2800      	cmp	r0, #0
 8016982:	d05a      	beq.n	8016a3a <rcl_action_server_wait_set_get_entities_ready+0xba>
 8016984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016986:	460c      	mov	r4, r1
 8016988:	b161      	cbz	r1, 80169a4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801698a:	4605      	mov	r5, r0
 801698c:	6808      	ldr	r0, [r1, #0]
 801698e:	b148      	cbz	r0, 80169a4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016990:	4616      	mov	r6, r2
 8016992:	461f      	mov	r7, r3
 8016994:	f7fe f906 	bl	8014ba4 <rcl_service_is_valid>
 8016998:	b120      	cbz	r0, 80169a4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801699a:	6820      	ldr	r0, [r4, #0]
 801699c:	3004      	adds	r0, #4
 801699e:	f7fe f901 	bl	8014ba4 <rcl_service_is_valid>
 80169a2:	b910      	cbnz	r0, 80169aa <rcl_action_server_wait_set_get_entities_ready+0x2a>
 80169a4:	f640 0098 	movw	r0, #2200	@ 0x898
 80169a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169aa:	6820      	ldr	r0, [r4, #0]
 80169ac:	3008      	adds	r0, #8
 80169ae:	f7fe f8f9 	bl	8014ba4 <rcl_service_is_valid>
 80169b2:	2800      	cmp	r0, #0
 80169b4:	d0f6      	beq.n	80169a4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80169b6:	6820      	ldr	r0, [r4, #0]
 80169b8:	300c      	adds	r0, #12
 80169ba:	f7f6 fad1 	bl	800cf60 <rcl_publisher_is_valid_except_context>
 80169be:	2800      	cmp	r0, #0
 80169c0:	d0f0      	beq.n	80169a4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80169c2:	6820      	ldr	r0, [r4, #0]
 80169c4:	3010      	adds	r0, #16
 80169c6:	f7f6 facb 	bl	800cf60 <rcl_publisher_is_valid_except_context>
 80169ca:	2800      	cmp	r0, #0
 80169cc:	d0ea      	beq.n	80169a4 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80169ce:	b3be      	cbz	r6, 8016a40 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80169d0:	b3b7      	cbz	r7, 8016a40 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80169d2:	9b06      	ldr	r3, [sp, #24]
 80169d4:	b3a3      	cbz	r3, 8016a40 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80169d6:	9b07      	ldr	r3, [sp, #28]
 80169d8:	b393      	cbz	r3, 8016a40 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80169da:	6821      	ldr	r1, [r4, #0]
 80169dc:	692a      	ldr	r2, [r5, #16]
 80169de:	6a2c      	ldr	r4, [r5, #32]
 80169e0:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 80169e4:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80169e8:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80169ec:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 80169f0:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 80169f4:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80169f8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80169fc:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8016a00:	1a64      	subs	r4, r4, r1
 8016a02:	fab4 f484 	clz	r4, r4
 8016a06:	0964      	lsrs	r4, r4, #5
 8016a08:	7034      	strb	r4, [r6, #0]
 8016a0a:	1d0c      	adds	r4, r1, #4
 8016a0c:	1b1b      	subs	r3, r3, r4
 8016a0e:	fab3 f383 	clz	r3, r3
 8016a12:	095b      	lsrs	r3, r3, #5
 8016a14:	f101 0408 	add.w	r4, r1, #8
 8016a18:	703b      	strb	r3, [r7, #0]
 8016a1a:	f101 0314 	add.w	r3, r1, #20
 8016a1e:	1b01      	subs	r1, r0, r4
 8016a20:	1ad3      	subs	r3, r2, r3
 8016a22:	fab1 f181 	clz	r1, r1
 8016a26:	9a06      	ldr	r2, [sp, #24]
 8016a28:	0949      	lsrs	r1, r1, #5
 8016a2a:	7011      	strb	r1, [r2, #0]
 8016a2c:	fab3 f383 	clz	r3, r3
 8016a30:	9a07      	ldr	r2, [sp, #28]
 8016a32:	095b      	lsrs	r3, r3, #5
 8016a34:	2000      	movs	r0, #0
 8016a36:	7013      	strb	r3, [r2, #0]
 8016a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a3a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016a3e:	4770      	bx	lr
 8016a40:	200b      	movs	r0, #11
 8016a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016a44 <_execute_event_handler>:
 8016a44:	2002      	movs	r0, #2
 8016a46:	4770      	bx	lr

08016a48 <_cancel_goal_event_handler>:
 8016a48:	2003      	movs	r0, #3
 8016a4a:	4770      	bx	lr

08016a4c <_succeed_event_handler>:
 8016a4c:	2004      	movs	r0, #4
 8016a4e:	4770      	bx	lr

08016a50 <_abort_event_handler>:
 8016a50:	2006      	movs	r0, #6
 8016a52:	4770      	bx	lr

08016a54 <_canceled_event_handler>:
 8016a54:	2005      	movs	r0, #5
 8016a56:	4770      	bx	lr

08016a58 <rcl_action_transition_goal_state>:
 8016a58:	b2c2      	uxtb	r2, r0
 8016a5a:	2a06      	cmp	r2, #6
 8016a5c:	d80c      	bhi.n	8016a78 <rcl_action_transition_goal_state+0x20>
 8016a5e:	2904      	cmp	r1, #4
 8016a60:	d80a      	bhi.n	8016a78 <rcl_action_transition_goal_state+0x20>
 8016a62:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8016a66:	b410      	push	{r4}
 8016a68:	1853      	adds	r3, r2, r1
 8016a6a:	4c06      	ldr	r4, [pc, #24]	@ (8016a84 <rcl_action_transition_goal_state+0x2c>)
 8016a6c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8016a70:	b123      	cbz	r3, 8016a7c <rcl_action_transition_goal_state+0x24>
 8016a72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016a76:	4718      	bx	r3
 8016a78:	2000      	movs	r0, #0
 8016a7a:	4770      	bx	lr
 8016a7c:	2000      	movs	r0, #0
 8016a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016a82:	4770      	bx	lr
 8016a84:	0801b748 	.word	0x0801b748

08016a88 <rcl_action_get_zero_initialized_cancel_response>:
 8016a88:	b510      	push	{r4, lr}
 8016a8a:	4c07      	ldr	r4, [pc, #28]	@ (8016aa8 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8016a8c:	4686      	mov	lr, r0
 8016a8e:	4684      	mov	ip, r0
 8016a90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016a92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016a96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016a98:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016a9c:	6823      	ldr	r3, [r4, #0]
 8016a9e:	f8cc 3000 	str.w	r3, [ip]
 8016aa2:	4670      	mov	r0, lr
 8016aa4:	bd10      	pop	{r4, pc}
 8016aa6:	bf00      	nop
 8016aa8:	0801b7d4 	.word	0x0801b7d4

08016aac <rclc_action_send_result_request>:
 8016aac:	b1d0      	cbz	r0, 8016ae4 <rclc_action_send_result_request+0x38>
 8016aae:	b500      	push	{lr}
 8016ab0:	4684      	mov	ip, r0
 8016ab2:	b087      	sub	sp, #28
 8016ab4:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8016ab8:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8016abc:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8016ac0:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8016ac4:	f10d 0e08 	add.w	lr, sp, #8
 8016ac8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016acc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8016ad0:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8016ad4:	a902      	add	r1, sp, #8
 8016ad6:	3010      	adds	r0, #16
 8016ad8:	f7ff fbda 	bl	8016290 <rcl_action_send_result_request>
 8016adc:	b920      	cbnz	r0, 8016ae8 <rclc_action_send_result_request+0x3c>
 8016ade:	b007      	add	sp, #28
 8016ae0:	f85d fb04 	ldr.w	pc, [sp], #4
 8016ae4:	200b      	movs	r0, #11
 8016ae6:	4770      	bx	lr
 8016ae8:	9001      	str	r0, [sp, #4]
 8016aea:	f7f7 fa01 	bl	800def0 <rcutils_reset_error>
 8016aee:	9801      	ldr	r0, [sp, #4]
 8016af0:	b007      	add	sp, #28
 8016af2:	f85d fb04 	ldr.w	pc, [sp], #4
 8016af6:	bf00      	nop

08016af8 <rclc_action_take_goal_handle>:
 8016af8:	b160      	cbz	r0, 8016b14 <rclc_action_take_goal_handle+0x1c>
 8016afa:	6883      	ldr	r3, [r0, #8]
 8016afc:	b143      	cbz	r3, 8016b10 <rclc_action_take_goal_handle+0x18>
 8016afe:	6819      	ldr	r1, [r3, #0]
 8016b00:	6081      	str	r1, [r0, #8]
 8016b02:	2200      	movs	r2, #0
 8016b04:	721a      	strb	r2, [r3, #8]
 8016b06:	68c1      	ldr	r1, [r0, #12]
 8016b08:	6019      	str	r1, [r3, #0]
 8016b0a:	621a      	str	r2, [r3, #32]
 8016b0c:	849a      	strh	r2, [r3, #36]	@ 0x24
 8016b0e:	60c3      	str	r3, [r0, #12]
 8016b10:	4618      	mov	r0, r3
 8016b12:	4770      	bx	lr
 8016b14:	4603      	mov	r3, r0
 8016b16:	e7fb      	b.n	8016b10 <rclc_action_take_goal_handle+0x18>

08016b18 <rclc_action_remove_used_goal_handle>:
 8016b18:	b180      	cbz	r0, 8016b3c <rclc_action_remove_used_goal_handle+0x24>
 8016b1a:	b179      	cbz	r1, 8016b3c <rclc_action_remove_used_goal_handle+0x24>
 8016b1c:	68c3      	ldr	r3, [r0, #12]
 8016b1e:	4299      	cmp	r1, r3
 8016b20:	d00d      	beq.n	8016b3e <rclc_action_remove_used_goal_handle+0x26>
 8016b22:	b12b      	cbz	r3, 8016b30 <rclc_action_remove_used_goal_handle+0x18>
 8016b24:	681a      	ldr	r2, [r3, #0]
 8016b26:	4291      	cmp	r1, r2
 8016b28:	d003      	beq.n	8016b32 <rclc_action_remove_used_goal_handle+0x1a>
 8016b2a:	4613      	mov	r3, r2
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d1f9      	bne.n	8016b24 <rclc_action_remove_used_goal_handle+0xc>
 8016b30:	4770      	bx	lr
 8016b32:	680a      	ldr	r2, [r1, #0]
 8016b34:	601a      	str	r2, [r3, #0]
 8016b36:	6883      	ldr	r3, [r0, #8]
 8016b38:	600b      	str	r3, [r1, #0]
 8016b3a:	6081      	str	r1, [r0, #8]
 8016b3c:	4770      	bx	lr
 8016b3e:	680b      	ldr	r3, [r1, #0]
 8016b40:	60c3      	str	r3, [r0, #12]
 8016b42:	e7f8      	b.n	8016b36 <rclc_action_remove_used_goal_handle+0x1e>

08016b44 <rclc_action_find_goal_handle_by_uuid>:
 8016b44:	b538      	push	{r3, r4, r5, lr}
 8016b46:	b180      	cbz	r0, 8016b6a <rclc_action_find_goal_handle_by_uuid+0x26>
 8016b48:	460d      	mov	r5, r1
 8016b4a:	b181      	cbz	r1, 8016b6e <rclc_action_find_goal_handle_by_uuid+0x2a>
 8016b4c:	68c4      	ldr	r4, [r0, #12]
 8016b4e:	b914      	cbnz	r4, 8016b56 <rclc_action_find_goal_handle_by_uuid+0x12>
 8016b50:	e009      	b.n	8016b66 <rclc_action_find_goal_handle_by_uuid+0x22>
 8016b52:	6824      	ldr	r4, [r4, #0]
 8016b54:	b13c      	cbz	r4, 8016b66 <rclc_action_find_goal_handle_by_uuid+0x22>
 8016b56:	f104 0009 	add.w	r0, r4, #9
 8016b5a:	2210      	movs	r2, #16
 8016b5c:	4629      	mov	r1, r5
 8016b5e:	f003 fa09 	bl	8019f74 <memcmp>
 8016b62:	2800      	cmp	r0, #0
 8016b64:	d1f5      	bne.n	8016b52 <rclc_action_find_goal_handle_by_uuid+0xe>
 8016b66:	4620      	mov	r0, r4
 8016b68:	bd38      	pop	{r3, r4, r5, pc}
 8016b6a:	4604      	mov	r4, r0
 8016b6c:	e7fb      	b.n	8016b66 <rclc_action_find_goal_handle_by_uuid+0x22>
 8016b6e:	460c      	mov	r4, r1
 8016b70:	e7f9      	b.n	8016b66 <rclc_action_find_goal_handle_by_uuid+0x22>
 8016b72:	bf00      	nop

08016b74 <rclc_action_find_first_handle_by_status>:
 8016b74:	b140      	cbz	r0, 8016b88 <rclc_action_find_first_handle_by_status+0x14>
 8016b76:	68c0      	ldr	r0, [r0, #12]
 8016b78:	b910      	cbnz	r0, 8016b80 <rclc_action_find_first_handle_by_status+0xc>
 8016b7a:	e005      	b.n	8016b88 <rclc_action_find_first_handle_by_status+0x14>
 8016b7c:	6800      	ldr	r0, [r0, #0]
 8016b7e:	b118      	cbz	r0, 8016b88 <rclc_action_find_first_handle_by_status+0x14>
 8016b80:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8016b84:	428b      	cmp	r3, r1
 8016b86:	d1f9      	bne.n	8016b7c <rclc_action_find_first_handle_by_status+0x8>
 8016b88:	4770      	bx	lr
 8016b8a:	bf00      	nop

08016b8c <rclc_action_find_first_terminated_handle>:
 8016b8c:	b140      	cbz	r0, 8016ba0 <rclc_action_find_first_terminated_handle+0x14>
 8016b8e:	68c0      	ldr	r0, [r0, #12]
 8016b90:	b910      	cbnz	r0, 8016b98 <rclc_action_find_first_terminated_handle+0xc>
 8016b92:	e005      	b.n	8016ba0 <rclc_action_find_first_terminated_handle+0x14>
 8016b94:	6800      	ldr	r0, [r0, #0]
 8016b96:	b118      	cbz	r0, 8016ba0 <rclc_action_find_first_terminated_handle+0x14>
 8016b98:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8016b9c:	2b03      	cmp	r3, #3
 8016b9e:	ddf9      	ble.n	8016b94 <rclc_action_find_first_terminated_handle+0x8>
 8016ba0:	4770      	bx	lr
 8016ba2:	bf00      	nop

08016ba4 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8016ba4:	b170      	cbz	r0, 8016bc4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8016ba6:	68c0      	ldr	r0, [r0, #12]
 8016ba8:	b160      	cbz	r0, 8016bc4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8016baa:	b410      	push	{r4}
 8016bac:	e001      	b.n	8016bb2 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8016bae:	6800      	ldr	r0, [r0, #0]
 8016bb0:	b128      	cbz	r0, 8016bbe <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8016bb2:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8016bb6:	4299      	cmp	r1, r3
 8016bb8:	bf08      	it	eq
 8016bba:	4294      	cmpeq	r4, r2
 8016bbc:	d1f7      	bne.n	8016bae <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8016bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016bc2:	4770      	bx	lr
 8016bc4:	4770      	bx	lr
 8016bc6:	bf00      	nop

08016bc8 <rclc_action_find_handle_by_result_request_sequence_number>:
 8016bc8:	b170      	cbz	r0, 8016be8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8016bca:	68c0      	ldr	r0, [r0, #12]
 8016bcc:	b160      	cbz	r0, 8016be8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8016bce:	b410      	push	{r4}
 8016bd0:	e001      	b.n	8016bd6 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8016bd2:	6800      	ldr	r0, [r0, #0]
 8016bd4:	b128      	cbz	r0, 8016be2 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8016bd6:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8016bda:	4299      	cmp	r1, r3
 8016bdc:	bf08      	it	eq
 8016bde:	4294      	cmpeq	r4, r2
 8016be0:	d1f7      	bne.n	8016bd2 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8016be2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016be6:	4770      	bx	lr
 8016be8:	4770      	bx	lr
 8016bea:	bf00      	nop

08016bec <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8016bec:	b170      	cbz	r0, 8016c0c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8016bee:	68c0      	ldr	r0, [r0, #12]
 8016bf0:	b160      	cbz	r0, 8016c0c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8016bf2:	b410      	push	{r4}
 8016bf4:	e001      	b.n	8016bfa <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8016bf6:	6800      	ldr	r0, [r0, #0]
 8016bf8:	b128      	cbz	r0, 8016c06 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8016bfa:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8016bfe:	4299      	cmp	r1, r3
 8016c00:	bf08      	it	eq
 8016c02:	4294      	cmpeq	r4, r2
 8016c04:	d1f7      	bne.n	8016bf6 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8016c06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016c0a:	4770      	bx	lr
 8016c0c:	4770      	bx	lr
 8016c0e:	bf00      	nop

08016c10 <rclc_action_find_first_handle_with_goal_response>:
 8016c10:	b140      	cbz	r0, 8016c24 <rclc_action_find_first_handle_with_goal_response+0x14>
 8016c12:	68c0      	ldr	r0, [r0, #12]
 8016c14:	b910      	cbnz	r0, 8016c1c <rclc_action_find_first_handle_with_goal_response+0xc>
 8016c16:	e005      	b.n	8016c24 <rclc_action_find_first_handle_with_goal_response+0x14>
 8016c18:	6800      	ldr	r0, [r0, #0]
 8016c1a:	b118      	cbz	r0, 8016c24 <rclc_action_find_first_handle_with_goal_response+0x14>
 8016c1c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d0f9      	beq.n	8016c18 <rclc_action_find_first_handle_with_goal_response+0x8>
 8016c24:	4770      	bx	lr
 8016c26:	bf00      	nop

08016c28 <rclc_action_find_first_handle_with_result_response>:
 8016c28:	b140      	cbz	r0, 8016c3c <rclc_action_find_first_handle_with_result_response+0x14>
 8016c2a:	68c0      	ldr	r0, [r0, #12]
 8016c2c:	b910      	cbnz	r0, 8016c34 <rclc_action_find_first_handle_with_result_response+0xc>
 8016c2e:	e005      	b.n	8016c3c <rclc_action_find_first_handle_with_result_response+0x14>
 8016c30:	6800      	ldr	r0, [r0, #0]
 8016c32:	b118      	cbz	r0, 8016c3c <rclc_action_find_first_handle_with_result_response+0x14>
 8016c34:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d0f9      	beq.n	8016c30 <rclc_action_find_first_handle_with_result_response+0x8>
 8016c3c:	4770      	bx	lr
 8016c3e:	bf00      	nop

08016c40 <rclc_action_server_response_goal_request>:
 8016c40:	b198      	cbz	r0, 8016c6a <rclc_action_server_response_goal_request+0x2a>
 8016c42:	b510      	push	{r4, lr}
 8016c44:	6844      	ldr	r4, [r0, #4]
 8016c46:	b086      	sub	sp, #24
 8016c48:	2200      	movs	r2, #0
 8016c4a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8016c4e:	460b      	mov	r3, r1
 8016c50:	9205      	str	r2, [sp, #20]
 8016c52:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8016c56:	aa03      	add	r2, sp, #12
 8016c58:	f104 0010 	add.w	r0, r4, #16
 8016c5c:	f88d 300c 	strb.w	r3, [sp, #12]
 8016c60:	f7ff fd4a 	bl	80166f8 <rcl_action_send_goal_response>
 8016c64:	b918      	cbnz	r0, 8016c6e <rclc_action_server_response_goal_request+0x2e>
 8016c66:	b006      	add	sp, #24
 8016c68:	bd10      	pop	{r4, pc}
 8016c6a:	200b      	movs	r0, #11
 8016c6c:	4770      	bx	lr
 8016c6e:	9001      	str	r0, [sp, #4]
 8016c70:	f7f7 f93e 	bl	800def0 <rcutils_reset_error>
 8016c74:	9801      	ldr	r0, [sp, #4]
 8016c76:	b006      	add	sp, #24
 8016c78:	bd10      	pop	{r4, pc}
 8016c7a:	bf00      	nop
 8016c7c:	0000      	movs	r0, r0
	...

08016c80 <rclc_action_server_goal_cancel_accept>:
 8016c80:	b310      	cbz	r0, 8016cc8 <rclc_action_server_goal_cancel_accept+0x48>
 8016c82:	b510      	push	{r4, lr}
 8016c84:	b090      	sub	sp, #64	@ 0x40
 8016c86:	4604      	mov	r4, r0
 8016c88:	a806      	add	r0, sp, #24
 8016c8a:	f7ff fefd 	bl	8016a88 <rcl_action_get_zero_initialized_cancel_response>
 8016c8e:	2300      	movs	r3, #0
 8016c90:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8016c94:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8016c98:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8016c9c:	f88d 3018 	strb.w	r3, [sp, #24]
 8016ca0:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8016ca4:	f8cd d01c 	str.w	sp, [sp, #28]
 8016ca8:	46ec      	mov	ip, sp
 8016caa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016cae:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8016cd0 <rclc_action_server_goal_cancel_accept+0x50>
 8016cb2:	6860      	ldr	r0, [r4, #4]
 8016cb4:	aa06      	add	r2, sp, #24
 8016cb6:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8016cba:	3010      	adds	r0, #16
 8016cbc:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016cc0:	f7ff fdd2 	bl	8016868 <rcl_action_send_cancel_response>
 8016cc4:	b010      	add	sp, #64	@ 0x40
 8016cc6:	bd10      	pop	{r4, pc}
 8016cc8:	200b      	movs	r0, #11
 8016cca:	4770      	bx	lr
 8016ccc:	f3af 8000 	nop.w
 8016cd0:	00000001 	.word	0x00000001
 8016cd4:	00000001 	.word	0x00000001

08016cd8 <rclc_action_server_goal_cancel_reject>:
 8016cd8:	b082      	sub	sp, #8
 8016cda:	b530      	push	{r4, r5, lr}
 8016cdc:	b08b      	sub	sp, #44	@ 0x2c
 8016cde:	ac0e      	add	r4, sp, #56	@ 0x38
 8016ce0:	e884 000c 	stmia.w	r4, {r2, r3}
 8016ce4:	b188      	cbz	r0, 8016d0a <rclc_action_server_goal_cancel_reject+0x32>
 8016ce6:	4604      	mov	r4, r0
 8016ce8:	a801      	add	r0, sp, #4
 8016cea:	460d      	mov	r5, r1
 8016cec:	f7ff fecc 	bl	8016a88 <rcl_action_get_zero_initialized_cancel_response>
 8016cf0:	aa01      	add	r2, sp, #4
 8016cf2:	a90e      	add	r1, sp, #56	@ 0x38
 8016cf4:	f104 0010 	add.w	r0, r4, #16
 8016cf8:	f88d 5004 	strb.w	r5, [sp, #4]
 8016cfc:	f7ff fdb4 	bl	8016868 <rcl_action_send_cancel_response>
 8016d00:	b00b      	add	sp, #44	@ 0x2c
 8016d02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016d06:	b002      	add	sp, #8
 8016d08:	4770      	bx	lr
 8016d0a:	200b      	movs	r0, #11
 8016d0c:	b00b      	add	sp, #44	@ 0x2c
 8016d0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016d12:	b002      	add	sp, #8
 8016d14:	4770      	bx	lr
 8016d16:	bf00      	nop

08016d18 <__atomic_load_8>:
 8016d18:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8016d1c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8016d20:	4a15      	ldr	r2, [pc, #84]	@ (8016d78 <__atomic_load_8+0x60>)
 8016d22:	4b16      	ldr	r3, [pc, #88]	@ (8016d7c <__atomic_load_8+0x64>)
 8016d24:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8016d28:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8016d2c:	fb02 f101 	mul.w	r1, r2, r1
 8016d30:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8016d34:	fba3 2301 	umull	r2, r3, r3, r1
 8016d38:	091b      	lsrs	r3, r3, #4
 8016d3a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8016d3e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8016d42:	b4d0      	push	{r4, r6, r7}
 8016d44:	4c0e      	ldr	r4, [pc, #56]	@ (8016d80 <__atomic_load_8+0x68>)
 8016d46:	1ac9      	subs	r1, r1, r3
 8016d48:	1862      	adds	r2, r4, r1
 8016d4a:	f04f 0c01 	mov.w	ip, #1
 8016d4e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8016d52:	e8c2 cf46 	strexb	r6, ip, [r2]
 8016d56:	2e00      	cmp	r6, #0
 8016d58:	d1f9      	bne.n	8016d4e <__atomic_load_8+0x36>
 8016d5a:	f3bf 8f5b 	dmb	ish
 8016d5e:	b2db      	uxtb	r3, r3
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d1f4      	bne.n	8016d4e <__atomic_load_8+0x36>
 8016d64:	e9d0 6700 	ldrd	r6, r7, [r0]
 8016d68:	f3bf 8f5b 	dmb	ish
 8016d6c:	5463      	strb	r3, [r4, r1]
 8016d6e:	4630      	mov	r0, r6
 8016d70:	4639      	mov	r1, r7
 8016d72:	bcd0      	pop	{r4, r6, r7}
 8016d74:	4770      	bx	lr
 8016d76:	bf00      	nop
 8016d78:	27d4eb2d 	.word	0x27d4eb2d
 8016d7c:	b21642c9 	.word	0xb21642c9
 8016d80:	2000aee8 	.word	0x2000aee8

08016d84 <__atomic_store_8>:
 8016d84:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8016d88:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8016d8c:	b570      	push	{r4, r5, r6, lr}
 8016d8e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8016d92:	4c14      	ldr	r4, [pc, #80]	@ (8016de4 <__atomic_store_8+0x60>)
 8016d94:	4d14      	ldr	r5, [pc, #80]	@ (8016de8 <__atomic_store_8+0x64>)
 8016d96:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8016d9a:	fb04 f101 	mul.w	r1, r4, r1
 8016d9e:	4c13      	ldr	r4, [pc, #76]	@ (8016dec <__atomic_store_8+0x68>)
 8016da0:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8016da4:	fba4 4e01 	umull	r4, lr, r4, r1
 8016da8:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8016dac:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8016db0:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8016db4:	eba1 0e0e 	sub.w	lr, r1, lr
 8016db8:	eb05 0c0e 	add.w	ip, r5, lr
 8016dbc:	f04f 0401 	mov.w	r4, #1
 8016dc0:	e8dc 1f4f 	ldrexb	r1, [ip]
 8016dc4:	e8cc 4f46 	strexb	r6, r4, [ip]
 8016dc8:	2e00      	cmp	r6, #0
 8016dca:	d1f9      	bne.n	8016dc0 <__atomic_store_8+0x3c>
 8016dcc:	f3bf 8f5b 	dmb	ish
 8016dd0:	b2c9      	uxtb	r1, r1
 8016dd2:	2900      	cmp	r1, #0
 8016dd4:	d1f4      	bne.n	8016dc0 <__atomic_store_8+0x3c>
 8016dd6:	e9c0 2300 	strd	r2, r3, [r0]
 8016dda:	f3bf 8f5b 	dmb	ish
 8016dde:	f805 100e 	strb.w	r1, [r5, lr]
 8016de2:	bd70      	pop	{r4, r5, r6, pc}
 8016de4:	27d4eb2d 	.word	0x27d4eb2d
 8016de8:	2000aee8 	.word	0x2000aee8
 8016dec:	b21642c9 	.word	0xb21642c9

08016df0 <__atomic_exchange_8>:
 8016df0:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8016df4:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8016df8:	4916      	ldr	r1, [pc, #88]	@ (8016e54 <__atomic_exchange_8+0x64>)
 8016dfa:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8016dfe:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8016e02:	fb01 fc0c 	mul.w	ip, r1, ip
 8016e06:	4914      	ldr	r1, [pc, #80]	@ (8016e58 <__atomic_exchange_8+0x68>)
 8016e08:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8016e0c:	b570      	push	{r4, r5, r6, lr}
 8016e0e:	4605      	mov	r5, r0
 8016e10:	fba1 010c 	umull	r0, r1, r1, ip
 8016e14:	0909      	lsrs	r1, r1, #4
 8016e16:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8016e1a:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8016e1e:	4e0f      	ldr	r6, [pc, #60]	@ (8016e5c <__atomic_exchange_8+0x6c>)
 8016e20:	ebac 0c01 	sub.w	ip, ip, r1
 8016e24:	eb06 010c 	add.w	r1, r6, ip
 8016e28:	f04f 0e01 	mov.w	lr, #1
 8016e2c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8016e30:	e8c1 ef40 	strexb	r0, lr, [r1]
 8016e34:	2800      	cmp	r0, #0
 8016e36:	d1f9      	bne.n	8016e2c <__atomic_exchange_8+0x3c>
 8016e38:	f3bf 8f5b 	dmb	ish
 8016e3c:	b2e4      	uxtb	r4, r4
 8016e3e:	2c00      	cmp	r4, #0
 8016e40:	d1f4      	bne.n	8016e2c <__atomic_exchange_8+0x3c>
 8016e42:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016e46:	e9c5 2300 	strd	r2, r3, [r5]
 8016e4a:	f3bf 8f5b 	dmb	ish
 8016e4e:	f806 400c 	strb.w	r4, [r6, ip]
 8016e52:	bd70      	pop	{r4, r5, r6, pc}
 8016e54:	27d4eb2d 	.word	0x27d4eb2d
 8016e58:	b21642c9 	.word	0xb21642c9
 8016e5c:	2000aee8 	.word	0x2000aee8

08016e60 <rcutils_get_env>:
 8016e60:	b168      	cbz	r0, 8016e7e <rcutils_get_env+0x1e>
 8016e62:	b510      	push	{r4, lr}
 8016e64:	460c      	mov	r4, r1
 8016e66:	b129      	cbz	r1, 8016e74 <rcutils_get_env+0x14>
 8016e68:	f002 fce0 	bl	801982c <getenv>
 8016e6c:	b120      	cbz	r0, 8016e78 <rcutils_get_env+0x18>
 8016e6e:	6020      	str	r0, [r4, #0]
 8016e70:	2000      	movs	r0, #0
 8016e72:	bd10      	pop	{r4, pc}
 8016e74:	4803      	ldr	r0, [pc, #12]	@ (8016e84 <rcutils_get_env+0x24>)
 8016e76:	bd10      	pop	{r4, pc}
 8016e78:	4b03      	ldr	r3, [pc, #12]	@ (8016e88 <rcutils_get_env+0x28>)
 8016e7a:	6023      	str	r3, [r4, #0]
 8016e7c:	bd10      	pop	{r4, pc}
 8016e7e:	4803      	ldr	r0, [pc, #12]	@ (8016e8c <rcutils_get_env+0x2c>)
 8016e80:	4770      	bx	lr
 8016e82:	bf00      	nop
 8016e84:	0801b814 	.word	0x0801b814
 8016e88:	0801b938 	.word	0x0801b938
 8016e8c:	0801b7f8 	.word	0x0801b7f8

08016e90 <rcutils_is_directory>:
 8016e90:	2000      	movs	r0, #0
 8016e92:	4770      	bx	lr

08016e94 <rcutils_join_path>:
 8016e94:	b082      	sub	sp, #8
 8016e96:	e88d 000c 	stmia.w	sp, {r2, r3}
 8016e9a:	2000      	movs	r0, #0
 8016e9c:	b002      	add	sp, #8
 8016e9e:	4770      	bx	lr

08016ea0 <rcutils_to_native_path>:
 8016ea0:	b084      	sub	sp, #16
 8016ea2:	a801      	add	r0, sp, #4
 8016ea4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8016ea8:	b004      	add	sp, #16
 8016eaa:	2000      	movs	r0, #0
 8016eac:	4770      	bx	lr
 8016eae:	bf00      	nop

08016eb0 <rcutils_format_string_limit>:
 8016eb0:	b40f      	push	{r0, r1, r2, r3}
 8016eb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016eb4:	b083      	sub	sp, #12
 8016eb6:	ac08      	add	r4, sp, #32
 8016eb8:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8016eba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016ebe:	b34e      	cbz	r6, 8016f14 <rcutils_format_string_limit+0x64>
 8016ec0:	a808      	add	r0, sp, #32
 8016ec2:	f7f6 ffef 	bl	800dea4 <rcutils_allocator_is_valid>
 8016ec6:	b328      	cbz	r0, 8016f14 <rcutils_format_string_limit+0x64>
 8016ec8:	2100      	movs	r1, #0
 8016eca:	ab0f      	add	r3, sp, #60	@ 0x3c
 8016ecc:	4632      	mov	r2, r6
 8016ece:	4608      	mov	r0, r1
 8016ed0:	e9cd 3300 	strd	r3, r3, [sp]
 8016ed4:	f000 f8f4 	bl	80170c0 <rcutils_vsnprintf>
 8016ed8:	1c43      	adds	r3, r0, #1
 8016eda:	4605      	mov	r5, r0
 8016edc:	d01a      	beq.n	8016f14 <rcutils_format_string_limit+0x64>
 8016ede:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016ee0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016ee2:	1c47      	adds	r7, r0, #1
 8016ee4:	429f      	cmp	r7, r3
 8016ee6:	bf84      	itt	hi
 8016ee8:	461f      	movhi	r7, r3
 8016eea:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8016eee:	4638      	mov	r0, r7
 8016ef0:	9b08      	ldr	r3, [sp, #32]
 8016ef2:	4798      	blx	r3
 8016ef4:	4604      	mov	r4, r0
 8016ef6:	b168      	cbz	r0, 8016f14 <rcutils_format_string_limit+0x64>
 8016ef8:	9b01      	ldr	r3, [sp, #4]
 8016efa:	4632      	mov	r2, r6
 8016efc:	4639      	mov	r1, r7
 8016efe:	f000 f8df 	bl	80170c0 <rcutils_vsnprintf>
 8016f02:	2800      	cmp	r0, #0
 8016f04:	db02      	blt.n	8016f0c <rcutils_format_string_limit+0x5c>
 8016f06:	2300      	movs	r3, #0
 8016f08:	5563      	strb	r3, [r4, r5]
 8016f0a:	e004      	b.n	8016f16 <rcutils_format_string_limit+0x66>
 8016f0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016f0e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016f10:	4620      	mov	r0, r4
 8016f12:	4798      	blx	r3
 8016f14:	2400      	movs	r4, #0
 8016f16:	4620      	mov	r0, r4
 8016f18:	b003      	add	sp, #12
 8016f1a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016f1e:	b004      	add	sp, #16
 8016f20:	4770      	bx	lr
 8016f22:	bf00      	nop

08016f24 <rcutils_repl_str>:
 8016f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f28:	ed2d 8b02 	vpush	{d8}
 8016f2c:	b087      	sub	sp, #28
 8016f2e:	4680      	mov	r8, r0
 8016f30:	4608      	mov	r0, r1
 8016f32:	f8cd 8004 	str.w	r8, [sp, #4]
 8016f36:	ee08 2a10 	vmov	s16, r2
 8016f3a:	468a      	mov	sl, r1
 8016f3c:	4699      	mov	r9, r3
 8016f3e:	f7e9 f979 	bl	8000234 <strlen>
 8016f42:	2600      	movs	r6, #0
 8016f44:	4647      	mov	r7, r8
 8016f46:	9002      	str	r0, [sp, #8]
 8016f48:	46b3      	mov	fp, r6
 8016f4a:	2510      	movs	r5, #16
 8016f4c:	46b0      	mov	r8, r6
 8016f4e:	e01d      	b.n	8016f8c <rcutils_repl_str+0x68>
 8016f50:	f10b 0b01 	add.w	fp, fp, #1
 8016f54:	455e      	cmp	r6, fp
 8016f56:	d211      	bcs.n	8016f7c <rcutils_repl_str+0x58>
 8016f58:	442e      	add	r6, r5
 8016f5a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016f5e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8016f62:	00b1      	lsls	r1, r6, #2
 8016f64:	4798      	blx	r3
 8016f66:	2800      	cmp	r0, #0
 8016f68:	f000 8088 	beq.w	801707c <rcutils_repl_str+0x158>
 8016f6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016f70:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8016f74:	4680      	mov	r8, r0
 8016f76:	bf28      	it	cs
 8016f78:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8016f7c:	9a01      	ldr	r2, [sp, #4]
 8016f7e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8016f82:	1aa2      	subs	r2, r4, r2
 8016f84:	f843 2c04 	str.w	r2, [r3, #-4]
 8016f88:	9b02      	ldr	r3, [sp, #8]
 8016f8a:	18e7      	adds	r7, r4, r3
 8016f8c:	4651      	mov	r1, sl
 8016f8e:	4638      	mov	r0, r7
 8016f90:	f003 f841 	bl	801a016 <strstr>
 8016f94:	4604      	mov	r4, r0
 8016f96:	4640      	mov	r0, r8
 8016f98:	2c00      	cmp	r4, #0
 8016f9a:	d1d9      	bne.n	8016f50 <rcutils_repl_str+0x2c>
 8016f9c:	46b8      	mov	r8, r7
 8016f9e:	4607      	mov	r7, r0
 8016fa0:	4640      	mov	r0, r8
 8016fa2:	f7e9 f947 	bl	8000234 <strlen>
 8016fa6:	9b01      	ldr	r3, [sp, #4]
 8016fa8:	eba8 0303 	sub.w	r3, r8, r3
 8016fac:	181c      	adds	r4, r3, r0
 8016fae:	9404      	str	r4, [sp, #16]
 8016fb0:	f1bb 0f00 	cmp.w	fp, #0
 8016fb4:	d04a      	beq.n	801704c <rcutils_repl_str+0x128>
 8016fb6:	ee18 0a10 	vmov	r0, s16
 8016fba:	f7e9 f93b 	bl	8000234 <strlen>
 8016fbe:	9b02      	ldr	r3, [sp, #8]
 8016fc0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016fc4:	1ac3      	subs	r3, r0, r3
 8016fc6:	fb0b 4303 	mla	r3, fp, r3, r4
 8016fca:	461a      	mov	r2, r3
 8016fcc:	9305      	str	r3, [sp, #20]
 8016fce:	4606      	mov	r6, r0
 8016fd0:	f8d9 3000 	ldr.w	r3, [r9]
 8016fd4:	1c50      	adds	r0, r2, #1
 8016fd6:	4798      	blx	r3
 8016fd8:	9003      	str	r0, [sp, #12]
 8016fda:	2800      	cmp	r0, #0
 8016fdc:	d04f      	beq.n	801707e <rcutils_repl_str+0x15a>
 8016fde:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016fe2:	683a      	ldr	r2, [r7, #0]
 8016fe4:	4641      	mov	r1, r8
 8016fe6:	f003 f8b8 	bl	801a15a <memcpy>
 8016fea:	683d      	ldr	r5, [r7, #0]
 8016fec:	9b03      	ldr	r3, [sp, #12]
 8016fee:	9701      	str	r7, [sp, #4]
 8016ff0:	46ba      	mov	sl, r7
 8016ff2:	441d      	add	r5, r3
 8016ff4:	9f02      	ldr	r7, [sp, #8]
 8016ff6:	f8cd 9008 	str.w	r9, [sp, #8]
 8016ffa:	2401      	movs	r4, #1
 8016ffc:	46d1      	mov	r9, sl
 8016ffe:	ee18 aa10 	vmov	sl, s16
 8017002:	e00a      	b.n	801701a <rcutils_repl_str+0xf6>
 8017004:	f8d9 5000 	ldr.w	r5, [r9]
 8017008:	1aaa      	subs	r2, r5, r2
 801700a:	1885      	adds	r5, r0, r2
 801700c:	f003 f8a5 	bl	801a15a <memcpy>
 8017010:	45a3      	cmp	fp, r4
 8017012:	f104 0201 	add.w	r2, r4, #1
 8017016:	d935      	bls.n	8017084 <rcutils_repl_str+0x160>
 8017018:	4614      	mov	r4, r2
 801701a:	4632      	mov	r2, r6
 801701c:	4651      	mov	r1, sl
 801701e:	4628      	mov	r0, r5
 8017020:	f003 f89b 	bl	801a15a <memcpy>
 8017024:	f859 2b04 	ldr.w	r2, [r9], #4
 8017028:	45a3      	cmp	fp, r4
 801702a:	443a      	add	r2, r7
 801702c:	eb05 0006 	add.w	r0, r5, r6
 8017030:	eb08 0102 	add.w	r1, r8, r2
 8017034:	d1e6      	bne.n	8017004 <rcutils_repl_str+0xe0>
 8017036:	9b04      	ldr	r3, [sp, #16]
 8017038:	1a9a      	subs	r2, r3, r2
 801703a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 801703e:	f003 f88c 	bl	801a15a <memcpy>
 8017042:	9a03      	ldr	r2, [sp, #12]
 8017044:	9905      	ldr	r1, [sp, #20]
 8017046:	2300      	movs	r3, #0
 8017048:	5453      	strb	r3, [r2, r1]
 801704a:	e00b      	b.n	8017064 <rcutils_repl_str+0x140>
 801704c:	4620      	mov	r0, r4
 801704e:	f8d9 3000 	ldr.w	r3, [r9]
 8017052:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8017056:	3001      	adds	r0, #1
 8017058:	4798      	blx	r3
 801705a:	9003      	str	r0, [sp, #12]
 801705c:	b110      	cbz	r0, 8017064 <rcutils_repl_str+0x140>
 801705e:	9901      	ldr	r1, [sp, #4]
 8017060:	f003 f873 	bl	801a14a <strcpy>
 8017064:	4638      	mov	r0, r7
 8017066:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801706a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801706e:	4798      	blx	r3
 8017070:	9803      	ldr	r0, [sp, #12]
 8017072:	b007      	add	sp, #28
 8017074:	ecbd 8b02 	vpop	{d8}
 8017078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801707c:	4647      	mov	r7, r8
 801707e:	2300      	movs	r3, #0
 8017080:	9303      	str	r3, [sp, #12]
 8017082:	e7ef      	b.n	8017064 <rcutils_repl_str+0x140>
 8017084:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8017088:	e7db      	b.n	8017042 <rcutils_repl_str+0x11e>
 801708a:	bf00      	nop

0801708c <rcutils_snprintf>:
 801708c:	b40c      	push	{r2, r3}
 801708e:	b530      	push	{r4, r5, lr}
 8017090:	b083      	sub	sp, #12
 8017092:	ab06      	add	r3, sp, #24
 8017094:	f853 2b04 	ldr.w	r2, [r3], #4
 8017098:	9301      	str	r3, [sp, #4]
 801709a:	b152      	cbz	r2, 80170b2 <rcutils_snprintf+0x26>
 801709c:	b138      	cbz	r0, 80170ae <rcutils_snprintf+0x22>
 801709e:	b141      	cbz	r1, 80170b2 <rcutils_snprintf+0x26>
 80170a0:	f002 ff5a 	bl	8019f58 <vsniprintf>
 80170a4:	b003      	add	sp, #12
 80170a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80170aa:	b002      	add	sp, #8
 80170ac:	4770      	bx	lr
 80170ae:	2900      	cmp	r1, #0
 80170b0:	d0f6      	beq.n	80170a0 <rcutils_snprintf+0x14>
 80170b2:	f003 f81d 	bl	801a0f0 <__errno>
 80170b6:	2316      	movs	r3, #22
 80170b8:	6003      	str	r3, [r0, #0]
 80170ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80170be:	e7f1      	b.n	80170a4 <rcutils_snprintf+0x18>

080170c0 <rcutils_vsnprintf>:
 80170c0:	b570      	push	{r4, r5, r6, lr}
 80170c2:	b13a      	cbz	r2, 80170d4 <rcutils_vsnprintf+0x14>
 80170c4:	b120      	cbz	r0, 80170d0 <rcutils_vsnprintf+0x10>
 80170c6:	b129      	cbz	r1, 80170d4 <rcutils_vsnprintf+0x14>
 80170c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80170cc:	f002 bf44 	b.w	8019f58 <vsniprintf>
 80170d0:	2900      	cmp	r1, #0
 80170d2:	d0f9      	beq.n	80170c8 <rcutils_vsnprintf+0x8>
 80170d4:	f003 f80c 	bl	801a0f0 <__errno>
 80170d8:	2316      	movs	r3, #22
 80170da:	6003      	str	r3, [r0, #0]
 80170dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80170e0:	bd70      	pop	{r4, r5, r6, pc}
 80170e2:	bf00      	nop

080170e4 <rcutils_strdup>:
 80170e4:	b084      	sub	sp, #16
 80170e6:	b570      	push	{r4, r5, r6, lr}
 80170e8:	b082      	sub	sp, #8
 80170ea:	ac07      	add	r4, sp, #28
 80170ec:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80170f0:	4605      	mov	r5, r0
 80170f2:	b1b0      	cbz	r0, 8017122 <rcutils_strdup+0x3e>
 80170f4:	f7e9 f89e 	bl	8000234 <strlen>
 80170f8:	1c42      	adds	r2, r0, #1
 80170fa:	9b07      	ldr	r3, [sp, #28]
 80170fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80170fe:	9201      	str	r2, [sp, #4]
 8017100:	4606      	mov	r6, r0
 8017102:	4610      	mov	r0, r2
 8017104:	4798      	blx	r3
 8017106:	4604      	mov	r4, r0
 8017108:	b128      	cbz	r0, 8017116 <rcutils_strdup+0x32>
 801710a:	9a01      	ldr	r2, [sp, #4]
 801710c:	4629      	mov	r1, r5
 801710e:	f003 f824 	bl	801a15a <memcpy>
 8017112:	2300      	movs	r3, #0
 8017114:	55a3      	strb	r3, [r4, r6]
 8017116:	4620      	mov	r0, r4
 8017118:	b002      	add	sp, #8
 801711a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801711e:	b004      	add	sp, #16
 8017120:	4770      	bx	lr
 8017122:	4604      	mov	r4, r0
 8017124:	e7f7      	b.n	8017116 <rcutils_strdup+0x32>
 8017126:	bf00      	nop

08017128 <rcutils_strndup>:
 8017128:	b082      	sub	sp, #8
 801712a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801712c:	ac06      	add	r4, sp, #24
 801712e:	e884 000c 	stmia.w	r4, {r2, r3}
 8017132:	4605      	mov	r5, r0
 8017134:	b188      	cbz	r0, 801715a <rcutils_strndup+0x32>
 8017136:	1c4f      	adds	r7, r1, #1
 8017138:	460e      	mov	r6, r1
 801713a:	4638      	mov	r0, r7
 801713c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801713e:	4790      	blx	r2
 8017140:	4604      	mov	r4, r0
 8017142:	b128      	cbz	r0, 8017150 <rcutils_strndup+0x28>
 8017144:	463a      	mov	r2, r7
 8017146:	4629      	mov	r1, r5
 8017148:	f003 f807 	bl	801a15a <memcpy>
 801714c:	2300      	movs	r3, #0
 801714e:	55a3      	strb	r3, [r4, r6]
 8017150:	4620      	mov	r0, r4
 8017152:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017156:	b002      	add	sp, #8
 8017158:	4770      	bx	lr
 801715a:	4604      	mov	r4, r0
 801715c:	e7f8      	b.n	8017150 <rcutils_strndup+0x28>
 801715e:	bf00      	nop

08017160 <rcutils_get_zero_initialized_string_map>:
 8017160:	4b01      	ldr	r3, [pc, #4]	@ (8017168 <rcutils_get_zero_initialized_string_map+0x8>)
 8017162:	2000      	movs	r0, #0
 8017164:	6018      	str	r0, [r3, #0]
 8017166:	4770      	bx	lr
 8017168:	2000af00 	.word	0x2000af00

0801716c <rcutils_string_map_reserve>:
 801716c:	2800      	cmp	r0, #0
 801716e:	d05f      	beq.n	8017230 <rcutils_string_map_reserve+0xc4>
 8017170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017174:	460c      	mov	r4, r1
 8017176:	6801      	ldr	r1, [r0, #0]
 8017178:	b082      	sub	sp, #8
 801717a:	4605      	mov	r5, r0
 801717c:	b129      	cbz	r1, 801718a <rcutils_string_map_reserve+0x1e>
 801717e:	68cb      	ldr	r3, [r1, #12]
 8017180:	42a3      	cmp	r3, r4
 8017182:	d906      	bls.n	8017192 <rcutils_string_map_reserve+0x26>
 8017184:	461c      	mov	r4, r3
 8017186:	2900      	cmp	r1, #0
 8017188:	d1f9      	bne.n	801717e <rcutils_string_map_reserve+0x12>
 801718a:	201f      	movs	r0, #31
 801718c:	b002      	add	sp, #8
 801718e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017192:	688b      	ldr	r3, [r1, #8]
 8017194:	42a3      	cmp	r3, r4
 8017196:	d047      	beq.n	8017228 <rcutils_string_map_reserve+0xbc>
 8017198:	6a0e      	ldr	r6, [r1, #32]
 801719a:	2c00      	cmp	r4, #0
 801719c:	d034      	beq.n	8017208 <rcutils_string_map_reserve+0x9c>
 801719e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80171a2:	d243      	bcs.n	801722c <rcutils_string_map_reserve+0xc0>
 80171a4:	00a7      	lsls	r7, r4, #2
 80171a6:	f8d1 8018 	ldr.w	r8, [r1, #24]
 80171aa:	6808      	ldr	r0, [r1, #0]
 80171ac:	4632      	mov	r2, r6
 80171ae:	4639      	mov	r1, r7
 80171b0:	47c0      	blx	r8
 80171b2:	2800      	cmp	r0, #0
 80171b4:	d03a      	beq.n	801722c <rcutils_string_map_reserve+0xc0>
 80171b6:	682b      	ldr	r3, [r5, #0]
 80171b8:	4632      	mov	r2, r6
 80171ba:	6018      	str	r0, [r3, #0]
 80171bc:	4639      	mov	r1, r7
 80171be:	6858      	ldr	r0, [r3, #4]
 80171c0:	47c0      	blx	r8
 80171c2:	2800      	cmp	r0, #0
 80171c4:	d032      	beq.n	801722c <rcutils_string_map_reserve+0xc0>
 80171c6:	682d      	ldr	r5, [r5, #0]
 80171c8:	68ab      	ldr	r3, [r5, #8]
 80171ca:	6068      	str	r0, [r5, #4]
 80171cc:	42a3      	cmp	r3, r4
 80171ce:	d226      	bcs.n	801721e <rcutils_string_map_reserve+0xb2>
 80171d0:	682a      	ldr	r2, [r5, #0]
 80171d2:	eb00 0c07 	add.w	ip, r0, r7
 80171d6:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80171da:	45e6      	cmp	lr, ip
 80171dc:	ea4f 0183 	mov.w	r1, r3, lsl #2
 80171e0:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80171e4:	d203      	bcs.n	80171ee <rcutils_string_map_reserve+0x82>
 80171e6:	eb02 0c07 	add.w	ip, r2, r7
 80171ea:	4566      	cmp	r6, ip
 80171ec:	d322      	bcc.n	8017234 <rcutils_string_map_reserve+0xc8>
 80171ee:	1ae3      	subs	r3, r4, r3
 80171f0:	009a      	lsls	r2, r3, #2
 80171f2:	4670      	mov	r0, lr
 80171f4:	2100      	movs	r1, #0
 80171f6:	9201      	str	r2, [sp, #4]
 80171f8:	f002 fee6 	bl	8019fc8 <memset>
 80171fc:	9a01      	ldr	r2, [sp, #4]
 80171fe:	2100      	movs	r1, #0
 8017200:	4630      	mov	r0, r6
 8017202:	f002 fee1 	bl	8019fc8 <memset>
 8017206:	e00a      	b.n	801721e <rcutils_string_map_reserve+0xb2>
 8017208:	694f      	ldr	r7, [r1, #20]
 801720a:	6808      	ldr	r0, [r1, #0]
 801720c:	4631      	mov	r1, r6
 801720e:	47b8      	blx	r7
 8017210:	682b      	ldr	r3, [r5, #0]
 8017212:	4631      	mov	r1, r6
 8017214:	6858      	ldr	r0, [r3, #4]
 8017216:	601c      	str	r4, [r3, #0]
 8017218:	47b8      	blx	r7
 801721a:	682d      	ldr	r5, [r5, #0]
 801721c:	606c      	str	r4, [r5, #4]
 801721e:	2000      	movs	r0, #0
 8017220:	60ac      	str	r4, [r5, #8]
 8017222:	b002      	add	sp, #8
 8017224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017228:	2000      	movs	r0, #0
 801722a:	e7af      	b.n	801718c <rcutils_string_map_reserve+0x20>
 801722c:	200a      	movs	r0, #10
 801722e:	e7ad      	b.n	801718c <rcutils_string_map_reserve+0x20>
 8017230:	200b      	movs	r0, #11
 8017232:	4770      	bx	lr
 8017234:	1f0b      	subs	r3, r1, #4
 8017236:	4418      	add	r0, r3
 8017238:	4413      	add	r3, r2
 801723a:	3a04      	subs	r2, #4
 801723c:	4417      	add	r7, r2
 801723e:	2200      	movs	r2, #0
 8017240:	f843 2f04 	str.w	r2, [r3, #4]!
 8017244:	42bb      	cmp	r3, r7
 8017246:	f840 2f04 	str.w	r2, [r0, #4]!
 801724a:	d1f9      	bne.n	8017240 <rcutils_string_map_reserve+0xd4>
 801724c:	e7e7      	b.n	801721e <rcutils_string_map_reserve+0xb2>
 801724e:	bf00      	nop

08017250 <rcutils_string_map_init>:
 8017250:	b082      	sub	sp, #8
 8017252:	b570      	push	{r4, r5, r6, lr}
 8017254:	ac04      	add	r4, sp, #16
 8017256:	e884 000c 	stmia.w	r4, {r2, r3}
 801725a:	b380      	cbz	r0, 80172be <rcutils_string_map_init+0x6e>
 801725c:	6806      	ldr	r6, [r0, #0]
 801725e:	4604      	mov	r4, r0
 8017260:	b12e      	cbz	r6, 801726e <rcutils_string_map_init+0x1e>
 8017262:	251e      	movs	r5, #30
 8017264:	4628      	mov	r0, r5
 8017266:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801726a:	b002      	add	sp, #8
 801726c:	4770      	bx	lr
 801726e:	a804      	add	r0, sp, #16
 8017270:	460d      	mov	r5, r1
 8017272:	f7f6 fe17 	bl	800dea4 <rcutils_allocator_is_valid>
 8017276:	b310      	cbz	r0, 80172be <rcutils_string_map_init+0x6e>
 8017278:	9b04      	ldr	r3, [sp, #16]
 801727a:	9908      	ldr	r1, [sp, #32]
 801727c:	2024      	movs	r0, #36	@ 0x24
 801727e:	4798      	blx	r3
 8017280:	6020      	str	r0, [r4, #0]
 8017282:	b310      	cbz	r0, 80172ca <rcutils_string_map_init+0x7a>
 8017284:	f10d 0e10 	add.w	lr, sp, #16
 8017288:	e9c0 6600 	strd	r6, r6, [r0]
 801728c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8017290:	f100 0c10 	add.w	ip, r0, #16
 8017294:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017298:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801729c:	f8de 3000 	ldr.w	r3, [lr]
 80172a0:	f8cc 3000 	str.w	r3, [ip]
 80172a4:	4629      	mov	r1, r5
 80172a6:	4620      	mov	r0, r4
 80172a8:	f7ff ff60 	bl	801716c <rcutils_string_map_reserve>
 80172ac:	4605      	mov	r5, r0
 80172ae:	2800      	cmp	r0, #0
 80172b0:	d0d8      	beq.n	8017264 <rcutils_string_map_init+0x14>
 80172b2:	9b05      	ldr	r3, [sp, #20]
 80172b4:	9908      	ldr	r1, [sp, #32]
 80172b6:	6820      	ldr	r0, [r4, #0]
 80172b8:	4798      	blx	r3
 80172ba:	6026      	str	r6, [r4, #0]
 80172bc:	e7d2      	b.n	8017264 <rcutils_string_map_init+0x14>
 80172be:	250b      	movs	r5, #11
 80172c0:	4628      	mov	r0, r5
 80172c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80172c6:	b002      	add	sp, #8
 80172c8:	4770      	bx	lr
 80172ca:	250a      	movs	r5, #10
 80172cc:	e7ca      	b.n	8017264 <rcutils_string_map_init+0x14>
 80172ce:	bf00      	nop

080172d0 <rcutils_string_map_fini>:
 80172d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172d4:	b082      	sub	sp, #8
 80172d6:	2800      	cmp	r0, #0
 80172d8:	d03a      	beq.n	8017350 <rcutils_string_map_fini+0x80>
 80172da:	6804      	ldr	r4, [r0, #0]
 80172dc:	4606      	mov	r6, r0
 80172de:	2c00      	cmp	r4, #0
 80172e0:	d032      	beq.n	8017348 <rcutils_string_map_fini+0x78>
 80172e2:	68a3      	ldr	r3, [r4, #8]
 80172e4:	b32b      	cbz	r3, 8017332 <rcutils_string_map_fini+0x62>
 80172e6:	2500      	movs	r5, #0
 80172e8:	6822      	ldr	r2, [r4, #0]
 80172ea:	462f      	mov	r7, r5
 80172ec:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80172f0:	b1e0      	cbz	r0, 801732c <rcutils_string_map_fini+0x5c>
 80172f2:	6a21      	ldr	r1, [r4, #32]
 80172f4:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80172f8:	9101      	str	r1, [sp, #4]
 80172fa:	47c0      	blx	r8
 80172fc:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017300:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8017304:	9901      	ldr	r1, [sp, #4]
 8017306:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801730a:	47c0      	blx	r8
 801730c:	68e3      	ldr	r3, [r4, #12]
 801730e:	6862      	ldr	r2, [r4, #4]
 8017310:	3b01      	subs	r3, #1
 8017312:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8017316:	60e3      	str	r3, [r4, #12]
 8017318:	6834      	ldr	r4, [r6, #0]
 801731a:	68a3      	ldr	r3, [r4, #8]
 801731c:	3501      	adds	r5, #1
 801731e:	429d      	cmp	r5, r3
 8017320:	d207      	bcs.n	8017332 <rcutils_string_map_fini+0x62>
 8017322:	6822      	ldr	r2, [r4, #0]
 8017324:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8017328:	2800      	cmp	r0, #0
 801732a:	d1e2      	bne.n	80172f2 <rcutils_string_map_fini+0x22>
 801732c:	3501      	adds	r5, #1
 801732e:	429d      	cmp	r5, r3
 8017330:	d3dc      	bcc.n	80172ec <rcutils_string_map_fini+0x1c>
 8017332:	2100      	movs	r1, #0
 8017334:	4630      	mov	r0, r6
 8017336:	f7ff ff19 	bl	801716c <rcutils_string_map_reserve>
 801733a:	4604      	mov	r4, r0
 801733c:	b920      	cbnz	r0, 8017348 <rcutils_string_map_fini+0x78>
 801733e:	6830      	ldr	r0, [r6, #0]
 8017340:	6943      	ldr	r3, [r0, #20]
 8017342:	6a01      	ldr	r1, [r0, #32]
 8017344:	4798      	blx	r3
 8017346:	6034      	str	r4, [r6, #0]
 8017348:	4620      	mov	r0, r4
 801734a:	b002      	add	sp, #8
 801734c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017350:	240b      	movs	r4, #11
 8017352:	4620      	mov	r0, r4
 8017354:	b002      	add	sp, #8
 8017356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801735a:	bf00      	nop

0801735c <rcutils_string_map_getn>:
 801735c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017360:	b300      	cbz	r0, 80173a4 <rcutils_string_map_getn+0x48>
 8017362:	6807      	ldr	r7, [r0, #0]
 8017364:	b1ff      	cbz	r7, 80173a6 <rcutils_string_map_getn+0x4a>
 8017366:	4688      	mov	r8, r1
 8017368:	b1e1      	cbz	r1, 80173a4 <rcutils_string_map_getn+0x48>
 801736a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801736e:	683e      	ldr	r6, [r7, #0]
 8017370:	f1ba 0f00 	cmp.w	sl, #0
 8017374:	d016      	beq.n	80173a4 <rcutils_string_map_getn+0x48>
 8017376:	4691      	mov	r9, r2
 8017378:	3e04      	subs	r6, #4
 801737a:	2400      	movs	r4, #0
 801737c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8017380:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017384:	4628      	mov	r0, r5
 8017386:	3401      	adds	r4, #1
 8017388:	b155      	cbz	r5, 80173a0 <rcutils_string_map_getn+0x44>
 801738a:	f7e8 ff53 	bl	8000234 <strlen>
 801738e:	4548      	cmp	r0, r9
 8017390:	4602      	mov	r2, r0
 8017392:	4629      	mov	r1, r5
 8017394:	bf38      	it	cc
 8017396:	464a      	movcc	r2, r9
 8017398:	4640      	mov	r0, r8
 801739a:	f002 fe2a 	bl	8019ff2 <strncmp>
 801739e:	b128      	cbz	r0, 80173ac <rcutils_string_map_getn+0x50>
 80173a0:	45a2      	cmp	sl, r4
 80173a2:	d1eb      	bne.n	801737c <rcutils_string_map_getn+0x20>
 80173a4:	2700      	movs	r7, #0
 80173a6:	4638      	mov	r0, r7
 80173a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	f853 700b 	ldr.w	r7, [r3, fp]
 80173b2:	4638      	mov	r0, r7
 80173b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080173b8 <rmw_get_zero_initialized_context>:
 80173b8:	b510      	push	{r4, lr}
 80173ba:	4604      	mov	r4, r0
 80173bc:	3010      	adds	r0, #16
 80173be:	f7f6 fe03 	bl	800dfc8 <rmw_get_zero_initialized_init_options>
 80173c2:	2300      	movs	r3, #0
 80173c4:	2000      	movs	r0, #0
 80173c6:	2100      	movs	r1, #0
 80173c8:	e9c4 0100 	strd	r0, r1, [r4]
 80173cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 80173d0:	60a3      	str	r3, [r4, #8]
 80173d2:	4620      	mov	r0, r4
 80173d4:	bd10      	pop	{r4, pc}
 80173d6:	bf00      	nop

080173d8 <rmw_subscription_content_filter_options_fini>:
 80173d8:	b1b0      	cbz	r0, 8017408 <rmw_subscription_content_filter_options_fini+0x30>
 80173da:	b538      	push	{r3, r4, r5, lr}
 80173dc:	4604      	mov	r4, r0
 80173de:	4608      	mov	r0, r1
 80173e0:	460d      	mov	r5, r1
 80173e2:	f7f6 fd5f 	bl	800dea4 <rcutils_allocator_is_valid>
 80173e6:	b168      	cbz	r0, 8017404 <rmw_subscription_content_filter_options_fini+0x2c>
 80173e8:	6820      	ldr	r0, [r4, #0]
 80173ea:	b120      	cbz	r0, 80173f6 <rmw_subscription_content_filter_options_fini+0x1e>
 80173ec:	686b      	ldr	r3, [r5, #4]
 80173ee:	6929      	ldr	r1, [r5, #16]
 80173f0:	4798      	blx	r3
 80173f2:	2300      	movs	r3, #0
 80173f4:	6023      	str	r3, [r4, #0]
 80173f6:	1d20      	adds	r0, r4, #4
 80173f8:	f002 f99c 	bl	8019734 <rcutils_string_array_fini>
 80173fc:	3800      	subs	r0, #0
 80173fe:	bf18      	it	ne
 8017400:	2001      	movne	r0, #1
 8017402:	bd38      	pop	{r3, r4, r5, pc}
 8017404:	200b      	movs	r0, #11
 8017406:	bd38      	pop	{r3, r4, r5, pc}
 8017408:	200b      	movs	r0, #11
 801740a:	4770      	bx	lr

0801740c <rmw_get_default_subscription_options>:
 801740c:	2200      	movs	r2, #0
 801740e:	e9c0 2200 	strd	r2, r2, [r0]
 8017412:	6082      	str	r2, [r0, #8]
 8017414:	4770      	bx	lr
 8017416:	bf00      	nop

08017418 <rmw_time_equal>:
 8017418:	b4f0      	push	{r4, r5, r6, r7}
 801741a:	b084      	sub	sp, #16
 801741c:	ac04      	add	r4, sp, #16
 801741e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8017422:	4603      	mov	r3, r0
 8017424:	4924      	ldr	r1, [pc, #144]	@ (80174b8 <rmw_time_equal+0xa0>)
 8017426:	9e03      	ldr	r6, [sp, #12]
 8017428:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801742c:	2202      	movs	r2, #2
 801742e:	4299      	cmp	r1, r3
 8017430:	41aa      	sbcs	r2, r5
 8017432:	d330      	bcc.n	8017496 <rmw_time_equal+0x7e>
 8017434:	4c21      	ldr	r4, [pc, #132]	@ (80174bc <rmw_time_equal+0xa4>)
 8017436:	fba3 3204 	umull	r3, r2, r3, r4
 801743a:	fb04 2205 	mla	r2, r4, r5, r2
 801743e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017442:	43dd      	mvns	r5, r3
 8017444:	1a8c      	subs	r4, r1, r2
 8017446:	4285      	cmp	r5, r0
 8017448:	41b4      	sbcs	r4, r6
 801744a:	d332      	bcc.n	80174b2 <rmw_time_equal+0x9a>
 801744c:	eb10 0c03 	adds.w	ip, r0, r3
 8017450:	eb42 0106 	adc.w	r1, r2, r6
 8017454:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8017458:	4817      	ldr	r0, [pc, #92]	@ (80174b8 <rmw_time_equal+0xa0>)
 801745a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801745c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801745e:	2202      	movs	r2, #2
 8017460:	4298      	cmp	r0, r3
 8017462:	41b2      	sbcs	r2, r6
 8017464:	d31c      	bcc.n	80174a0 <rmw_time_equal+0x88>
 8017466:	4c15      	ldr	r4, [pc, #84]	@ (80174bc <rmw_time_equal+0xa4>)
 8017468:	fba3 3204 	umull	r3, r2, r3, r4
 801746c:	fb04 2206 	mla	r2, r4, r6, r2
 8017470:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8017474:	43de      	mvns	r6, r3
 8017476:	1a84      	subs	r4, r0, r2
 8017478:	42ae      	cmp	r6, r5
 801747a:	41bc      	sbcs	r4, r7
 801747c:	d315      	bcc.n	80174aa <rmw_time_equal+0x92>
 801747e:	195b      	adds	r3, r3, r5
 8017480:	eb42 0207 	adc.w	r2, r2, r7
 8017484:	428a      	cmp	r2, r1
 8017486:	bf08      	it	eq
 8017488:	4563      	cmpeq	r3, ip
 801748a:	bf0c      	ite	eq
 801748c:	2001      	moveq	r0, #1
 801748e:	2000      	movne	r0, #0
 8017490:	b004      	add	sp, #16
 8017492:	bcf0      	pop	{r4, r5, r6, r7}
 8017494:	4770      	bx	lr
 8017496:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801749a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801749e:	e7d9      	b.n	8017454 <rmw_time_equal+0x3c>
 80174a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80174a4:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80174a8:	e7ec      	b.n	8017484 <rmw_time_equal+0x6c>
 80174aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80174ae:	4602      	mov	r2, r0
 80174b0:	e7e8      	b.n	8017484 <rmw_time_equal+0x6c>
 80174b2:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80174b6:	e7cd      	b.n	8017454 <rmw_time_equal+0x3c>
 80174b8:	25c17d04 	.word	0x25c17d04
 80174bc:	3b9aca00 	.word	0x3b9aca00

080174c0 <rmw_time_total_nsec>:
 80174c0:	b470      	push	{r4, r5, r6}
 80174c2:	b085      	sub	sp, #20
 80174c4:	ac04      	add	r4, sp, #16
 80174c6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80174ca:	4603      	mov	r3, r0
 80174cc:	4912      	ldr	r1, [pc, #72]	@ (8017518 <rmw_time_total_nsec+0x58>)
 80174ce:	9e03      	ldr	r6, [sp, #12]
 80174d0:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80174d4:	2202      	movs	r2, #2
 80174d6:	4299      	cmp	r1, r3
 80174d8:	41aa      	sbcs	r2, r5
 80174da:	d311      	bcc.n	8017500 <rmw_time_total_nsec+0x40>
 80174dc:	4c0f      	ldr	r4, [pc, #60]	@ (801751c <rmw_time_total_nsec+0x5c>)
 80174de:	fba3 3204 	umull	r3, r2, r3, r4
 80174e2:	fb04 2205 	mla	r2, r4, r5, r2
 80174e6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80174ea:	43dd      	mvns	r5, r3
 80174ec:	1a8c      	subs	r4, r1, r2
 80174ee:	4285      	cmp	r5, r0
 80174f0:	41b4      	sbcs	r4, r6
 80174f2:	d30c      	bcc.n	801750e <rmw_time_total_nsec+0x4e>
 80174f4:	1818      	adds	r0, r3, r0
 80174f6:	eb42 0106 	adc.w	r1, r2, r6
 80174fa:	b005      	add	sp, #20
 80174fc:	bc70      	pop	{r4, r5, r6}
 80174fe:	4770      	bx	lr
 8017500:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017504:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017508:	b005      	add	sp, #20
 801750a:	bc70      	pop	{r4, r5, r6}
 801750c:	4770      	bx	lr
 801750e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017512:	b005      	add	sp, #20
 8017514:	bc70      	pop	{r4, r5, r6}
 8017516:	4770      	bx	lr
 8017518:	25c17d04 	.word	0x25c17d04
 801751c:	3b9aca00 	.word	0x3b9aca00

08017520 <rmw_get_zero_initialized_message_info>:
 8017520:	b510      	push	{r4, lr}
 8017522:	2240      	movs	r2, #64	@ 0x40
 8017524:	4604      	mov	r4, r0
 8017526:	2100      	movs	r1, #0
 8017528:	f002 fd4e 	bl	8019fc8 <memset>
 801752c:	4620      	mov	r0, r4
 801752e:	bd10      	pop	{r4, pc}

08017530 <rmw_validate_full_topic_name>:
 8017530:	2800      	cmp	r0, #0
 8017532:	d057      	beq.n	80175e4 <rmw_validate_full_topic_name+0xb4>
 8017534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017538:	460d      	mov	r5, r1
 801753a:	2900      	cmp	r1, #0
 801753c:	d054      	beq.n	80175e8 <rmw_validate_full_topic_name+0xb8>
 801753e:	4616      	mov	r6, r2
 8017540:	4604      	mov	r4, r0
 8017542:	f7e8 fe77 	bl	8000234 <strlen>
 8017546:	b148      	cbz	r0, 801755c <rmw_validate_full_topic_name+0x2c>
 8017548:	7823      	ldrb	r3, [r4, #0]
 801754a:	2b2f      	cmp	r3, #47	@ 0x2f
 801754c:	d00d      	beq.n	801756a <rmw_validate_full_topic_name+0x3a>
 801754e:	2302      	movs	r3, #2
 8017550:	602b      	str	r3, [r5, #0]
 8017552:	b13e      	cbz	r6, 8017564 <rmw_validate_full_topic_name+0x34>
 8017554:	2000      	movs	r0, #0
 8017556:	6030      	str	r0, [r6, #0]
 8017558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801755c:	2301      	movs	r3, #1
 801755e:	602b      	str	r3, [r5, #0]
 8017560:	2e00      	cmp	r6, #0
 8017562:	d1f7      	bne.n	8017554 <rmw_validate_full_topic_name+0x24>
 8017564:	2000      	movs	r0, #0
 8017566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801756a:	1e43      	subs	r3, r0, #1
 801756c:	5ce2      	ldrb	r2, [r4, r3]
 801756e:	2a2f      	cmp	r2, #47	@ 0x2f
 8017570:	d03c      	beq.n	80175ec <rmw_validate_full_topic_name+0xbc>
 8017572:	1e63      	subs	r3, r4, #1
 8017574:	eb03 0800 	add.w	r8, r3, r0
 8017578:	f1c4 0e01 	rsb	lr, r4, #1
 801757c:	eb0e 0703 	add.w	r7, lr, r3
 8017580:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8017584:	f021 0220 	bic.w	r2, r1, #32
 8017588:	3a41      	subs	r2, #65	@ 0x41
 801758a:	2a19      	cmp	r2, #25
 801758c:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8017590:	d90b      	bls.n	80175aa <rmw_validate_full_topic_name+0x7a>
 8017592:	295f      	cmp	r1, #95	@ 0x5f
 8017594:	d009      	beq.n	80175aa <rmw_validate_full_topic_name+0x7a>
 8017596:	f1bc 0f0a 	cmp.w	ip, #10
 801759a:	d906      	bls.n	80175aa <rmw_validate_full_topic_name+0x7a>
 801759c:	2304      	movs	r3, #4
 801759e:	602b      	str	r3, [r5, #0]
 80175a0:	2e00      	cmp	r6, #0
 80175a2:	d0df      	beq.n	8017564 <rmw_validate_full_topic_name+0x34>
 80175a4:	6037      	str	r7, [r6, #0]
 80175a6:	2000      	movs	r0, #0
 80175a8:	e7d6      	b.n	8017558 <rmw_validate_full_topic_name+0x28>
 80175aa:	4543      	cmp	r3, r8
 80175ac:	d1e6      	bne.n	801757c <rmw_validate_full_topic_name+0x4c>
 80175ae:	4f1a      	ldr	r7, [pc, #104]	@ (8017618 <rmw_validate_full_topic_name+0xe8>)
 80175b0:	2301      	movs	r3, #1
 80175b2:	e004      	b.n	80175be <rmw_validate_full_topic_name+0x8e>
 80175b4:	4298      	cmp	r0, r3
 80175b6:	f104 0401 	add.w	r4, r4, #1
 80175ba:	d91c      	bls.n	80175f6 <rmw_validate_full_topic_name+0xc6>
 80175bc:	4613      	mov	r3, r2
 80175be:	4298      	cmp	r0, r3
 80175c0:	f103 0201 	add.w	r2, r3, #1
 80175c4:	d0f6      	beq.n	80175b4 <rmw_validate_full_topic_name+0x84>
 80175c6:	7821      	ldrb	r1, [r4, #0]
 80175c8:	292f      	cmp	r1, #47	@ 0x2f
 80175ca:	d1f3      	bne.n	80175b4 <rmw_validate_full_topic_name+0x84>
 80175cc:	7861      	ldrb	r1, [r4, #1]
 80175ce:	292f      	cmp	r1, #47	@ 0x2f
 80175d0:	d01c      	beq.n	801760c <rmw_validate_full_topic_name+0xdc>
 80175d2:	5dc9      	ldrb	r1, [r1, r7]
 80175d4:	0749      	lsls	r1, r1, #29
 80175d6:	d5ed      	bpl.n	80175b4 <rmw_validate_full_topic_name+0x84>
 80175d8:	2206      	movs	r2, #6
 80175da:	602a      	str	r2, [r5, #0]
 80175dc:	2e00      	cmp	r6, #0
 80175de:	d0c1      	beq.n	8017564 <rmw_validate_full_topic_name+0x34>
 80175e0:	6033      	str	r3, [r6, #0]
 80175e2:	e7bf      	b.n	8017564 <rmw_validate_full_topic_name+0x34>
 80175e4:	200b      	movs	r0, #11
 80175e6:	4770      	bx	lr
 80175e8:	200b      	movs	r0, #11
 80175ea:	e7b5      	b.n	8017558 <rmw_validate_full_topic_name+0x28>
 80175ec:	2203      	movs	r2, #3
 80175ee:	602a      	str	r2, [r5, #0]
 80175f0:	2e00      	cmp	r6, #0
 80175f2:	d1f5      	bne.n	80175e0 <rmw_validate_full_topic_name+0xb0>
 80175f4:	e7b6      	b.n	8017564 <rmw_validate_full_topic_name+0x34>
 80175f6:	28f7      	cmp	r0, #247	@ 0xf7
 80175f8:	d802      	bhi.n	8017600 <rmw_validate_full_topic_name+0xd0>
 80175fa:	2000      	movs	r0, #0
 80175fc:	6028      	str	r0, [r5, #0]
 80175fe:	e7ab      	b.n	8017558 <rmw_validate_full_topic_name+0x28>
 8017600:	2307      	movs	r3, #7
 8017602:	602b      	str	r3, [r5, #0]
 8017604:	2e00      	cmp	r6, #0
 8017606:	d0ad      	beq.n	8017564 <rmw_validate_full_topic_name+0x34>
 8017608:	23f6      	movs	r3, #246	@ 0xf6
 801760a:	e7e9      	b.n	80175e0 <rmw_validate_full_topic_name+0xb0>
 801760c:	2205      	movs	r2, #5
 801760e:	602a      	str	r2, [r5, #0]
 8017610:	2e00      	cmp	r6, #0
 8017612:	d1e5      	bne.n	80175e0 <rmw_validate_full_topic_name+0xb0>
 8017614:	e7a6      	b.n	8017564 <rmw_validate_full_topic_name+0x34>
 8017616:	bf00      	nop
 8017618:	0801bc28 	.word	0x0801bc28

0801761c <rmw_validate_namespace_with_size>:
 801761c:	b340      	cbz	r0, 8017670 <rmw_validate_namespace_with_size+0x54>
 801761e:	b570      	push	{r4, r5, r6, lr}
 8017620:	4614      	mov	r4, r2
 8017622:	b0c2      	sub	sp, #264	@ 0x108
 8017624:	b332      	cbz	r2, 8017674 <rmw_validate_namespace_with_size+0x58>
 8017626:	2901      	cmp	r1, #1
 8017628:	460d      	mov	r5, r1
 801762a:	461e      	mov	r6, r3
 801762c:	d102      	bne.n	8017634 <rmw_validate_namespace_with_size+0x18>
 801762e:	7803      	ldrb	r3, [r0, #0]
 8017630:	2b2f      	cmp	r3, #47	@ 0x2f
 8017632:	d012      	beq.n	801765a <rmw_validate_namespace_with_size+0x3e>
 8017634:	aa01      	add	r2, sp, #4
 8017636:	4669      	mov	r1, sp
 8017638:	f7ff ff7a 	bl	8017530 <rmw_validate_full_topic_name>
 801763c:	b978      	cbnz	r0, 801765e <rmw_validate_namespace_with_size+0x42>
 801763e:	9b00      	ldr	r3, [sp, #0]
 8017640:	b14b      	cbz	r3, 8017656 <rmw_validate_namespace_with_size+0x3a>
 8017642:	2b07      	cmp	r3, #7
 8017644:	d007      	beq.n	8017656 <rmw_validate_namespace_with_size+0x3a>
 8017646:	1e5a      	subs	r2, r3, #1
 8017648:	2a05      	cmp	r2, #5
 801764a:	d82b      	bhi.n	80176a4 <rmw_validate_namespace_with_size+0x88>
 801764c:	e8df f002 	tbb	[pc, r2]
 8017650:	1e212427 	.word	0x1e212427
 8017654:	141b      	.short	0x141b
 8017656:	2df5      	cmp	r5, #245	@ 0xf5
 8017658:	d803      	bhi.n	8017662 <rmw_validate_namespace_with_size+0x46>
 801765a:	2000      	movs	r0, #0
 801765c:	6020      	str	r0, [r4, #0]
 801765e:	b042      	add	sp, #264	@ 0x108
 8017660:	bd70      	pop	{r4, r5, r6, pc}
 8017662:	2307      	movs	r3, #7
 8017664:	6023      	str	r3, [r4, #0]
 8017666:	2e00      	cmp	r6, #0
 8017668:	d0f9      	beq.n	801765e <rmw_validate_namespace_with_size+0x42>
 801766a:	23f4      	movs	r3, #244	@ 0xf4
 801766c:	6033      	str	r3, [r6, #0]
 801766e:	e7f6      	b.n	801765e <rmw_validate_namespace_with_size+0x42>
 8017670:	200b      	movs	r0, #11
 8017672:	4770      	bx	lr
 8017674:	200b      	movs	r0, #11
 8017676:	e7f2      	b.n	801765e <rmw_validate_namespace_with_size+0x42>
 8017678:	2306      	movs	r3, #6
 801767a:	6023      	str	r3, [r4, #0]
 801767c:	2e00      	cmp	r6, #0
 801767e:	d0ee      	beq.n	801765e <rmw_validate_namespace_with_size+0x42>
 8017680:	9b01      	ldr	r3, [sp, #4]
 8017682:	6033      	str	r3, [r6, #0]
 8017684:	e7eb      	b.n	801765e <rmw_validate_namespace_with_size+0x42>
 8017686:	2305      	movs	r3, #5
 8017688:	6023      	str	r3, [r4, #0]
 801768a:	e7f7      	b.n	801767c <rmw_validate_namespace_with_size+0x60>
 801768c:	2304      	movs	r3, #4
 801768e:	6023      	str	r3, [r4, #0]
 8017690:	e7f4      	b.n	801767c <rmw_validate_namespace_with_size+0x60>
 8017692:	2303      	movs	r3, #3
 8017694:	6023      	str	r3, [r4, #0]
 8017696:	e7f1      	b.n	801767c <rmw_validate_namespace_with_size+0x60>
 8017698:	2302      	movs	r3, #2
 801769a:	6023      	str	r3, [r4, #0]
 801769c:	e7ee      	b.n	801767c <rmw_validate_namespace_with_size+0x60>
 801769e:	2301      	movs	r3, #1
 80176a0:	6023      	str	r3, [r4, #0]
 80176a2:	e7eb      	b.n	801767c <rmw_validate_namespace_with_size+0x60>
 80176a4:	4a03      	ldr	r2, [pc, #12]	@ (80176b4 <rmw_validate_namespace_with_size+0x98>)
 80176a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80176aa:	a802      	add	r0, sp, #8
 80176ac:	f7ff fcee 	bl	801708c <rcutils_snprintf>
 80176b0:	2001      	movs	r0, #1
 80176b2:	e7d4      	b.n	801765e <rmw_validate_namespace_with_size+0x42>
 80176b4:	0801b830 	.word	0x0801b830

080176b8 <rmw_validate_namespace>:
 80176b8:	b168      	cbz	r0, 80176d6 <rmw_validate_namespace+0x1e>
 80176ba:	b570      	push	{r4, r5, r6, lr}
 80176bc:	460d      	mov	r5, r1
 80176be:	4616      	mov	r6, r2
 80176c0:	4604      	mov	r4, r0
 80176c2:	f7e8 fdb7 	bl	8000234 <strlen>
 80176c6:	4633      	mov	r3, r6
 80176c8:	4601      	mov	r1, r0
 80176ca:	462a      	mov	r2, r5
 80176cc:	4620      	mov	r0, r4
 80176ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80176d2:	f7ff bfa3 	b.w	801761c <rmw_validate_namespace_with_size>
 80176d6:	200b      	movs	r0, #11
 80176d8:	4770      	bx	lr
 80176da:	bf00      	nop

080176dc <rmw_namespace_validation_result_string>:
 80176dc:	2807      	cmp	r0, #7
 80176de:	bf9a      	itte	ls
 80176e0:	4b02      	ldrls	r3, [pc, #8]	@ (80176ec <rmw_namespace_validation_result_string+0x10>)
 80176e2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80176e6:	4802      	ldrhi	r0, [pc, #8]	@ (80176f0 <rmw_namespace_validation_result_string+0x14>)
 80176e8:	4770      	bx	lr
 80176ea:	bf00      	nop
 80176ec:	0801ba28 	.word	0x0801ba28
 80176f0:	0801b880 	.word	0x0801b880

080176f4 <rmw_validate_node_name>:
 80176f4:	2800      	cmp	r0, #0
 80176f6:	d03b      	beq.n	8017770 <rmw_validate_node_name+0x7c>
 80176f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176fc:	460d      	mov	r5, r1
 80176fe:	2900      	cmp	r1, #0
 8017700:	d038      	beq.n	8017774 <rmw_validate_node_name+0x80>
 8017702:	4616      	mov	r6, r2
 8017704:	4604      	mov	r4, r0
 8017706:	f7e8 fd95 	bl	8000234 <strlen>
 801770a:	b1e0      	cbz	r0, 8017746 <rmw_validate_node_name+0x52>
 801770c:	1e63      	subs	r3, r4, #1
 801770e:	eb03 0800 	add.w	r8, r3, r0
 8017712:	f1c4 0101 	rsb	r1, r4, #1
 8017716:	18cf      	adds	r7, r1, r3
 8017718:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801771c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8017720:	f02e 0c20 	bic.w	ip, lr, #32
 8017724:	2a09      	cmp	r2, #9
 8017726:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801772a:	d914      	bls.n	8017756 <rmw_validate_node_name+0x62>
 801772c:	f1bc 0f19 	cmp.w	ip, #25
 8017730:	d911      	bls.n	8017756 <rmw_validate_node_name+0x62>
 8017732:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8017736:	d00e      	beq.n	8017756 <rmw_validate_node_name+0x62>
 8017738:	2302      	movs	r3, #2
 801773a:	602b      	str	r3, [r5, #0]
 801773c:	b106      	cbz	r6, 8017740 <rmw_validate_node_name+0x4c>
 801773e:	6037      	str	r7, [r6, #0]
 8017740:	2000      	movs	r0, #0
 8017742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017746:	2301      	movs	r3, #1
 8017748:	602b      	str	r3, [r5, #0]
 801774a:	2e00      	cmp	r6, #0
 801774c:	d0f8      	beq.n	8017740 <rmw_validate_node_name+0x4c>
 801774e:	2000      	movs	r0, #0
 8017750:	6030      	str	r0, [r6, #0]
 8017752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017756:	4543      	cmp	r3, r8
 8017758:	d1dd      	bne.n	8017716 <rmw_validate_node_name+0x22>
 801775a:	7822      	ldrb	r2, [r4, #0]
 801775c:	4b0d      	ldr	r3, [pc, #52]	@ (8017794 <rmw_validate_node_name+0xa0>)
 801775e:	5cd3      	ldrb	r3, [r2, r3]
 8017760:	f013 0304 	ands.w	r3, r3, #4
 8017764:	d110      	bne.n	8017788 <rmw_validate_node_name+0x94>
 8017766:	28ff      	cmp	r0, #255	@ 0xff
 8017768:	d806      	bhi.n	8017778 <rmw_validate_node_name+0x84>
 801776a:	602b      	str	r3, [r5, #0]
 801776c:	4618      	mov	r0, r3
 801776e:	e7e8      	b.n	8017742 <rmw_validate_node_name+0x4e>
 8017770:	200b      	movs	r0, #11
 8017772:	4770      	bx	lr
 8017774:	200b      	movs	r0, #11
 8017776:	e7e4      	b.n	8017742 <rmw_validate_node_name+0x4e>
 8017778:	2204      	movs	r2, #4
 801777a:	602a      	str	r2, [r5, #0]
 801777c:	2e00      	cmp	r6, #0
 801777e:	d0df      	beq.n	8017740 <rmw_validate_node_name+0x4c>
 8017780:	22fe      	movs	r2, #254	@ 0xfe
 8017782:	6032      	str	r2, [r6, #0]
 8017784:	4618      	mov	r0, r3
 8017786:	e7dc      	b.n	8017742 <rmw_validate_node_name+0x4e>
 8017788:	2303      	movs	r3, #3
 801778a:	602b      	str	r3, [r5, #0]
 801778c:	2e00      	cmp	r6, #0
 801778e:	d1de      	bne.n	801774e <rmw_validate_node_name+0x5a>
 8017790:	e7d6      	b.n	8017740 <rmw_validate_node_name+0x4c>
 8017792:	bf00      	nop
 8017794:	0801bc28 	.word	0x0801bc28

08017798 <rmw_node_name_validation_result_string>:
 8017798:	2804      	cmp	r0, #4
 801779a:	bf9a      	itte	ls
 801779c:	4b02      	ldrls	r3, [pc, #8]	@ (80177a8 <rmw_node_name_validation_result_string+0x10>)
 801779e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80177a2:	4802      	ldrhi	r0, [pc, #8]	@ (80177ac <rmw_node_name_validation_result_string+0x14>)
 80177a4:	4770      	bx	lr
 80177a6:	bf00      	nop
 80177a8:	0801bb34 	.word	0x0801bb34
 80177ac:	0801ba48 	.word	0x0801ba48

080177b0 <on_status>:
 80177b0:	b082      	sub	sp, #8
 80177b2:	b002      	add	sp, #8
 80177b4:	4770      	bx	lr
 80177b6:	bf00      	nop

080177b8 <on_topic>:
 80177b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177bc:	4a22      	ldr	r2, [pc, #136]	@ (8017848 <on_topic+0x90>)
 80177be:	b094      	sub	sp, #80	@ 0x50
 80177c0:	6812      	ldr	r2, [r2, #0]
 80177c2:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 80177c4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80177c8:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 80177cc:	b3c2      	cbz	r2, 8017840 <on_topic+0x88>
 80177ce:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 80177d2:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 80177d6:	e001      	b.n	80177dc <on_topic+0x24>
 80177d8:	6852      	ldr	r2, [r2, #4]
 80177da:	b38a      	cbz	r2, 8017840 <on_topic+0x88>
 80177dc:	6894      	ldr	r4, [r2, #8]
 80177de:	8aa3      	ldrh	r3, [r4, #20]
 80177e0:	428b      	cmp	r3, r1
 80177e2:	d1f9      	bne.n	80177d8 <on_topic+0x20>
 80177e4:	7da3      	ldrb	r3, [r4, #22]
 80177e6:	4283      	cmp	r3, r0
 80177e8:	d1f6      	bne.n	80177d8 <on_topic+0x20>
 80177ea:	2248      	movs	r2, #72	@ 0x48
 80177ec:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80177f0:	4668      	mov	r0, sp
 80177f2:	f002 fcb2 	bl	801a15a <memcpy>
 80177f6:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80177fa:	cb0c      	ldmia	r3, {r2, r3}
 80177fc:	4620      	mov	r0, r4
 80177fe:	f7f7 fcb9 	bl	800f174 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017802:	4607      	mov	r7, r0
 8017804:	b1e0      	cbz	r0, 8017840 <on_topic+0x88>
 8017806:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801780a:	4632      	mov	r2, r6
 801780c:	4628      	mov	r0, r5
 801780e:	f108 0110 	add.w	r1, r8, #16
 8017812:	f000 fddb 	bl	80183cc <ucdr_deserialize_array_uint8_t>
 8017816:	b930      	cbnz	r0, 8017826 <on_topic+0x6e>
 8017818:	480c      	ldr	r0, [pc, #48]	@ (801784c <on_topic+0x94>)
 801781a:	4639      	mov	r1, r7
 801781c:	b014      	add	sp, #80	@ 0x50
 801781e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017822:	f000 b8bd 	b.w	80179a0 <put_memory>
 8017826:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801782a:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801782e:	f000 fcc3 	bl	80181b8 <rmw_uros_epoch_nanos>
 8017832:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 8017836:	2305      	movs	r3, #5
 8017838:	e942 0102 	strd	r0, r1, [r2, #-8]
 801783c:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8017840:	b014      	add	sp, #80	@ 0x50
 8017842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017846:	bf00      	nop
 8017848:	2000ae3c 	.word	0x2000ae3c
 801784c:	2000ae2c 	.word	0x2000ae2c

08017850 <on_request>:
 8017850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017854:	4823      	ldr	r0, [pc, #140]	@ (80178e4 <on_request+0x94>)
 8017856:	b094      	sub	sp, #80	@ 0x50
 8017858:	6800      	ldr	r0, [r0, #0]
 801785a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801785c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8017860:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017862:	2800      	cmp	r0, #0
 8017864:	d03b      	beq.n	80178de <on_request+0x8e>
 8017866:	461d      	mov	r5, r3
 8017868:	e001      	b.n	801786e <on_request+0x1e>
 801786a:	6840      	ldr	r0, [r0, #4]
 801786c:	b3b8      	cbz	r0, 80178de <on_request+0x8e>
 801786e:	6884      	ldr	r4, [r0, #8]
 8017870:	8b21      	ldrh	r1, [r4, #24]
 8017872:	4291      	cmp	r1, r2
 8017874:	d1f9      	bne.n	801786a <on_request+0x1a>
 8017876:	2248      	movs	r2, #72	@ 0x48
 8017878:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801787c:	4668      	mov	r0, sp
 801787e:	f002 fc6c 	bl	801a15a <memcpy>
 8017882:	f104 0320 	add.w	r3, r4, #32
 8017886:	cb0c      	ldmia	r3, {r2, r3}
 8017888:	4620      	mov	r0, r4
 801788a:	f7f7 fc73 	bl	800f174 <rmw_uxrce_get_static_input_buffer_for_entity>
 801788e:	4680      	mov	r8, r0
 8017890:	b328      	cbz	r0, 80178de <on_request+0x8e>
 8017892:	4638      	mov	r0, r7
 8017894:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8017898:	4632      	mov	r2, r6
 801789a:	f107 0110 	add.w	r1, r7, #16
 801789e:	f000 fd95 	bl	80183cc <ucdr_deserialize_array_uint8_t>
 80178a2:	b930      	cbnz	r0, 80178b2 <on_request+0x62>
 80178a4:	4810      	ldr	r0, [pc, #64]	@ (80178e8 <on_request+0x98>)
 80178a6:	4641      	mov	r1, r8
 80178a8:	b014      	add	sp, #80	@ 0x50
 80178aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80178ae:	f000 b877 	b.w	80179a0 <put_memory>
 80178b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80178b4:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 80178b8:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80178bc:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80178c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80178c4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80178c8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80178cc:	f000 fc74 	bl	80181b8 <rmw_uros_epoch_nanos>
 80178d0:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80178d4:	2303      	movs	r3, #3
 80178d6:	e942 0102 	strd	r0, r1, [r2, #-8]
 80178da:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80178de:	b014      	add	sp, #80	@ 0x50
 80178e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178e4:	2000ae0c 	.word	0x2000ae0c
 80178e8:	2000ae2c 	.word	0x2000ae2c

080178ec <on_reply>:
 80178ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178f0:	4821      	ldr	r0, [pc, #132]	@ (8017978 <on_reply+0x8c>)
 80178f2:	b094      	sub	sp, #80	@ 0x50
 80178f4:	6800      	ldr	r0, [r0, #0]
 80178f6:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80178f8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80178fc:	9113      	str	r1, [sp, #76]	@ 0x4c
 80178fe:	b3b8      	cbz	r0, 8017970 <on_reply+0x84>
 8017900:	461d      	mov	r5, r3
 8017902:	e001      	b.n	8017908 <on_reply+0x1c>
 8017904:	6840      	ldr	r0, [r0, #4]
 8017906:	b398      	cbz	r0, 8017970 <on_reply+0x84>
 8017908:	6884      	ldr	r4, [r0, #8]
 801790a:	8b21      	ldrh	r1, [r4, #24]
 801790c:	4291      	cmp	r1, r2
 801790e:	d1f9      	bne.n	8017904 <on_reply+0x18>
 8017910:	2248      	movs	r2, #72	@ 0x48
 8017912:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8017916:	4668      	mov	r0, sp
 8017918:	f002 fc1f 	bl	801a15a <memcpy>
 801791c:	f104 0320 	add.w	r3, r4, #32
 8017920:	cb0c      	ldmia	r3, {r2, r3}
 8017922:	4620      	mov	r0, r4
 8017924:	f7f7 fc26 	bl	800f174 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017928:	4680      	mov	r8, r0
 801792a:	b308      	cbz	r0, 8017970 <on_reply+0x84>
 801792c:	4638      	mov	r0, r7
 801792e:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8017932:	4632      	mov	r2, r6
 8017934:	f107 0110 	add.w	r1, r7, #16
 8017938:	f000 fd48 	bl	80183cc <ucdr_deserialize_array_uint8_t>
 801793c:	b930      	cbnz	r0, 801794c <on_reply+0x60>
 801793e:	480f      	ldr	r0, [pc, #60]	@ (801797c <on_reply+0x90>)
 8017940:	4641      	mov	r1, r8
 8017942:	b014      	add	sp, #80	@ 0x50
 8017944:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017948:	f000 b82a 	b.w	80179a0 <put_memory>
 801794c:	2200      	movs	r2, #0
 801794e:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 8017952:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8017956:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801795a:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801795e:	f000 fc2b 	bl	80181b8 <rmw_uros_epoch_nanos>
 8017962:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8017966:	2304      	movs	r3, #4
 8017968:	e942 0102 	strd	r0, r1, [r2, #-8]
 801796c:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8017970:	b014      	add	sp, #80	@ 0x50
 8017972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017976:	bf00      	nop
 8017978:	2000651c 	.word	0x2000651c
 801797c:	2000ae2c 	.word	0x2000ae2c

08017980 <get_memory>:
 8017980:	4603      	mov	r3, r0
 8017982:	6840      	ldr	r0, [r0, #4]
 8017984:	b158      	cbz	r0, 801799e <get_memory+0x1e>
 8017986:	6842      	ldr	r2, [r0, #4]
 8017988:	605a      	str	r2, [r3, #4]
 801798a:	b10a      	cbz	r2, 8017990 <get_memory+0x10>
 801798c:	2100      	movs	r1, #0
 801798e:	6011      	str	r1, [r2, #0]
 8017990:	681a      	ldr	r2, [r3, #0]
 8017992:	6042      	str	r2, [r0, #4]
 8017994:	b102      	cbz	r2, 8017998 <get_memory+0x18>
 8017996:	6010      	str	r0, [r2, #0]
 8017998:	2200      	movs	r2, #0
 801799a:	6002      	str	r2, [r0, #0]
 801799c:	6018      	str	r0, [r3, #0]
 801799e:	4770      	bx	lr

080179a0 <put_memory>:
 80179a0:	680b      	ldr	r3, [r1, #0]
 80179a2:	b10b      	cbz	r3, 80179a8 <put_memory+0x8>
 80179a4:	684a      	ldr	r2, [r1, #4]
 80179a6:	605a      	str	r2, [r3, #4]
 80179a8:	684a      	ldr	r2, [r1, #4]
 80179aa:	b102      	cbz	r2, 80179ae <put_memory+0xe>
 80179ac:	6013      	str	r3, [r2, #0]
 80179ae:	6803      	ldr	r3, [r0, #0]
 80179b0:	428b      	cmp	r3, r1
 80179b2:	6843      	ldr	r3, [r0, #4]
 80179b4:	bf08      	it	eq
 80179b6:	6002      	streq	r2, [r0, #0]
 80179b8:	604b      	str	r3, [r1, #4]
 80179ba:	b103      	cbz	r3, 80179be <put_memory+0x1e>
 80179bc:	6019      	str	r1, [r3, #0]
 80179be:	2300      	movs	r3, #0
 80179c0:	600b      	str	r3, [r1, #0]
 80179c2:	6041      	str	r1, [r0, #4]
 80179c4:	4770      	bx	lr
 80179c6:	bf00      	nop

080179c8 <rmw_destroy_client>:
 80179c8:	b570      	push	{r4, r5, r6, lr}
 80179ca:	b128      	cbz	r0, 80179d8 <rmw_destroy_client+0x10>
 80179cc:	4604      	mov	r4, r0
 80179ce:	6800      	ldr	r0, [r0, #0]
 80179d0:	460d      	mov	r5, r1
 80179d2:	f7f7 fd43 	bl	800f45c <is_uxrce_rmw_identifier_valid>
 80179d6:	b910      	cbnz	r0, 80179de <rmw_destroy_client+0x16>
 80179d8:	2401      	movs	r4, #1
 80179da:	4620      	mov	r0, r4
 80179dc:	bd70      	pop	{r4, r5, r6, pc}
 80179de:	6863      	ldr	r3, [r4, #4]
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d0f9      	beq.n	80179d8 <rmw_destroy_client+0x10>
 80179e4:	2d00      	cmp	r5, #0
 80179e6:	d0f7      	beq.n	80179d8 <rmw_destroy_client+0x10>
 80179e8:	6828      	ldr	r0, [r5, #0]
 80179ea:	f7f7 fd37 	bl	800f45c <is_uxrce_rmw_identifier_valid>
 80179ee:	2800      	cmp	r0, #0
 80179f0:	d0f2      	beq.n	80179d8 <rmw_destroy_client+0x10>
 80179f2:	686e      	ldr	r6, [r5, #4]
 80179f4:	2e00      	cmp	r6, #0
 80179f6:	d0ef      	beq.n	80179d8 <rmw_destroy_client+0x10>
 80179f8:	6864      	ldr	r4, [r4, #4]
 80179fa:	6932      	ldr	r2, [r6, #16]
 80179fc:	6920      	ldr	r0, [r4, #16]
 80179fe:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017a02:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017a06:	6819      	ldr	r1, [r3, #0]
 8017a08:	f7f9 f912 	bl	8010c30 <uxr_buffer_cancel_data>
 8017a0c:	4602      	mov	r2, r0
 8017a0e:	6920      	ldr	r0, [r4, #16]
 8017a10:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017a14:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017a18:	f7f7 fca0 	bl	800f35c <run_xrce_session>
 8017a1c:	6920      	ldr	r0, [r4, #16]
 8017a1e:	6932      	ldr	r2, [r6, #16]
 8017a20:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017a24:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017a28:	6819      	ldr	r1, [r3, #0]
 8017a2a:	f7f8 fdd3 	bl	80105d4 <uxr_buffer_delete_entity>
 8017a2e:	4602      	mov	r2, r0
 8017a30:	6920      	ldr	r0, [r4, #16]
 8017a32:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017a36:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017a3a:	f7f7 fc8f 	bl	800f35c <run_xrce_session>
 8017a3e:	2800      	cmp	r0, #0
 8017a40:	4628      	mov	r0, r5
 8017a42:	bf14      	ite	ne
 8017a44:	2400      	movne	r4, #0
 8017a46:	2402      	moveq	r4, #2
 8017a48:	f7f7 fb72 	bl	800f130 <rmw_uxrce_fini_client_memory>
 8017a4c:	e7c5      	b.n	80179da <rmw_destroy_client+0x12>
 8017a4e:	bf00      	nop

08017a50 <rmw_get_implementation_identifier>:
 8017a50:	4b01      	ldr	r3, [pc, #4]	@ (8017a58 <rmw_get_implementation_identifier+0x8>)
 8017a52:	6818      	ldr	r0, [r3, #0]
 8017a54:	4770      	bx	lr
 8017a56:	bf00      	nop
 8017a58:	0801bb60 	.word	0x0801bb60

08017a5c <create_topic>:
 8017a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a60:	4605      	mov	r5, r0
 8017a62:	b084      	sub	sp, #16
 8017a64:	4822      	ldr	r0, [pc, #136]	@ (8017af0 <create_topic+0x94>)
 8017a66:	460f      	mov	r7, r1
 8017a68:	4616      	mov	r6, r2
 8017a6a:	f7ff ff89 	bl	8017980 <get_memory>
 8017a6e:	4604      	mov	r4, r0
 8017a70:	2800      	cmp	r0, #0
 8017a72:	d039      	beq.n	8017ae8 <create_topic+0x8c>
 8017a74:	692b      	ldr	r3, [r5, #16]
 8017a76:	6884      	ldr	r4, [r0, #8]
 8017a78:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8017af8 <create_topic+0x9c>
 8017a7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017a80:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8017a84:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8017a88:	1c42      	adds	r2, r0, #1
 8017a8a:	2102      	movs	r1, #2
 8017a8c:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8017a90:	f7f9 f864 	bl	8010b5c <uxr_object_id>
 8017a94:	223c      	movs	r2, #60	@ 0x3c
 8017a96:	6120      	str	r0, [r4, #16]
 8017a98:	4641      	mov	r1, r8
 8017a9a:	4638      	mov	r0, r7
 8017a9c:	f7f7 fcc4 	bl	800f428 <generate_topic_name>
 8017aa0:	b1f0      	cbz	r0, 8017ae0 <create_topic+0x84>
 8017aa2:	4f14      	ldr	r7, [pc, #80]	@ (8017af4 <create_topic+0x98>)
 8017aa4:	4630      	mov	r0, r6
 8017aa6:	2264      	movs	r2, #100	@ 0x64
 8017aa8:	4639      	mov	r1, r7
 8017aaa:	f7f7 fc8d 	bl	800f3c8 <generate_type_name>
 8017aae:	b1b8      	cbz	r0, 8017ae0 <create_topic+0x84>
 8017ab0:	6928      	ldr	r0, [r5, #16]
 8017ab2:	2306      	movs	r3, #6
 8017ab4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8017ab8:	f8cd 8000 	str.w	r8, [sp]
 8017abc:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8017ac0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017ac4:	6811      	ldr	r1, [r2, #0]
 8017ac6:	696b      	ldr	r3, [r5, #20]
 8017ac8:	6922      	ldr	r2, [r4, #16]
 8017aca:	f7f8 fe01 	bl	80106d0 <uxr_buffer_create_topic_bin>
 8017ace:	4602      	mov	r2, r0
 8017ad0:	6928      	ldr	r0, [r5, #16]
 8017ad2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8017ad6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8017ada:	f7f7 fc3f 	bl	800f35c <run_xrce_session>
 8017ade:	b918      	cbnz	r0, 8017ae8 <create_topic+0x8c>
 8017ae0:	4620      	mov	r0, r4
 8017ae2:	f7f7 fb3b 	bl	800f15c <rmw_uxrce_fini_topic_memory>
 8017ae6:	2400      	movs	r4, #0
 8017ae8:	4620      	mov	r0, r4
 8017aea:	b004      	add	sp, #16
 8017aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017af0:	2000ae4c 	.word	0x2000ae4c
 8017af4:	2000af40 	.word	0x2000af40
 8017af8:	2000af04 	.word	0x2000af04

08017afc <destroy_topic>:
 8017afc:	b538      	push	{r3, r4, r5, lr}
 8017afe:	6985      	ldr	r5, [r0, #24]
 8017b00:	b1d5      	cbz	r5, 8017b38 <destroy_topic+0x3c>
 8017b02:	4604      	mov	r4, r0
 8017b04:	6928      	ldr	r0, [r5, #16]
 8017b06:	6922      	ldr	r2, [r4, #16]
 8017b08:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017b0c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017b10:	6819      	ldr	r1, [r3, #0]
 8017b12:	f7f8 fd5f 	bl	80105d4 <uxr_buffer_delete_entity>
 8017b16:	4602      	mov	r2, r0
 8017b18:	6928      	ldr	r0, [r5, #16]
 8017b1a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017b1e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017b22:	f7f7 fc1b 	bl	800f35c <run_xrce_session>
 8017b26:	2800      	cmp	r0, #0
 8017b28:	4620      	mov	r0, r4
 8017b2a:	bf14      	ite	ne
 8017b2c:	2400      	movne	r4, #0
 8017b2e:	2402      	moveq	r4, #2
 8017b30:	f7f7 fb14 	bl	800f15c <rmw_uxrce_fini_topic_memory>
 8017b34:	4620      	mov	r0, r4
 8017b36:	bd38      	pop	{r3, r4, r5, pc}
 8017b38:	2401      	movs	r4, #1
 8017b3a:	4620      	mov	r0, r4
 8017b3c:	bd38      	pop	{r3, r4, r5, pc}
 8017b3e:	bf00      	nop

08017b40 <rmw_send_request>:
 8017b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b44:	4604      	mov	r4, r0
 8017b46:	6800      	ldr	r0, [r0, #0]
 8017b48:	b08b      	sub	sp, #44	@ 0x2c
 8017b4a:	460e      	mov	r6, r1
 8017b4c:	4615      	mov	r5, r2
 8017b4e:	b128      	cbz	r0, 8017b5c <rmw_send_request+0x1c>
 8017b50:	4b21      	ldr	r3, [pc, #132]	@ (8017bd8 <rmw_send_request+0x98>)
 8017b52:	6819      	ldr	r1, [r3, #0]
 8017b54:	f7e8 fb64 	bl	8000220 <strcmp>
 8017b58:	2800      	cmp	r0, #0
 8017b5a:	d139      	bne.n	8017bd0 <rmw_send_request+0x90>
 8017b5c:	6864      	ldr	r4, [r4, #4]
 8017b5e:	6963      	ldr	r3, [r4, #20]
 8017b60:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8017b64:	689b      	ldr	r3, [r3, #8]
 8017b66:	4798      	blx	r3
 8017b68:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8017b6c:	4630      	mov	r0, r6
 8017b6e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017b72:	4798      	blx	r3
 8017b74:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8017b78:	9000      	str	r0, [sp, #0]
 8017b7a:	6922      	ldr	r2, [r4, #16]
 8017b7c:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8017b7e:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8017b82:	ab02      	add	r3, sp, #8
 8017b84:	f7fb f8a6 	bl	8012cd4 <uxr_prepare_output_stream>
 8017b88:	2700      	movs	r7, #0
 8017b8a:	6028      	str	r0, [r5, #0]
 8017b8c:	606f      	str	r7, [r5, #4]
 8017b8e:	b198      	cbz	r0, 8017bb8 <rmw_send_request+0x78>
 8017b90:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8017b94:	a902      	add	r1, sp, #8
 8017b96:	4630      	mov	r0, r6
 8017b98:	4798      	blx	r3
 8017b9a:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8017b9e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8017ba2:	2b01      	cmp	r3, #1
 8017ba4:	d00c      	beq.n	8017bc0 <rmw_send_request+0x80>
 8017ba6:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8017ba8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017bac:	f7f9 fe14 	bl	80117d8 <uxr_run_session_until_confirm_delivery>
 8017bb0:	4638      	mov	r0, r7
 8017bb2:	b00b      	add	sp, #44	@ 0x2c
 8017bb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017bb8:	2001      	movs	r0, #1
 8017bba:	b00b      	add	sp, #44	@ 0x2c
 8017bbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017bc0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017bc4:	f7f9 fa48 	bl	8011058 <uxr_flash_output_streams>
 8017bc8:	4638      	mov	r0, r7
 8017bca:	b00b      	add	sp, #44	@ 0x2c
 8017bcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017bd0:	200c      	movs	r0, #12
 8017bd2:	b00b      	add	sp, #44	@ 0x2c
 8017bd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017bd8:	0801bb60 	.word	0x0801bb60

08017bdc <rmw_take_request>:
 8017bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017be0:	4605      	mov	r5, r0
 8017be2:	6800      	ldr	r0, [r0, #0]
 8017be4:	b089      	sub	sp, #36	@ 0x24
 8017be6:	460c      	mov	r4, r1
 8017be8:	4690      	mov	r8, r2
 8017bea:	461e      	mov	r6, r3
 8017bec:	b128      	cbz	r0, 8017bfa <rmw_take_request+0x1e>
 8017bee:	4b28      	ldr	r3, [pc, #160]	@ (8017c90 <rmw_take_request+0xb4>)
 8017bf0:	6819      	ldr	r1, [r3, #0]
 8017bf2:	f7e8 fb15 	bl	8000220 <strcmp>
 8017bf6:	2800      	cmp	r0, #0
 8017bf8:	d146      	bne.n	8017c88 <rmw_take_request+0xac>
 8017bfa:	b10e      	cbz	r6, 8017c00 <rmw_take_request+0x24>
 8017bfc:	2300      	movs	r3, #0
 8017bfe:	7033      	strb	r3, [r6, #0]
 8017c00:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8017c04:	f7f7 fb2c 	bl	800f260 <rmw_uxrce_clean_expired_static_input_buffer>
 8017c08:	4648      	mov	r0, r9
 8017c0a:	f7f7 fb03 	bl	800f214 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017c0e:	4607      	mov	r7, r0
 8017c10:	b3b0      	cbz	r0, 8017c80 <rmw_take_request+0xa4>
 8017c12:	6885      	ldr	r5, [r0, #8]
 8017c14:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8017c18:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8017c1c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8017c20:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8017c24:	7423      	strb	r3, [r4, #16]
 8017c26:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8017c2a:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8017c2e:	74e2      	strb	r2, [r4, #19]
 8017c30:	f8a4 3011 	strh.w	r3, [r4, #17]
 8017c34:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8017c38:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8017c3c:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8017c40:	61e1      	str	r1, [r4, #28]
 8017c42:	6162      	str	r2, [r4, #20]
 8017c44:	61a3      	str	r3, [r4, #24]
 8017c46:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8017c4a:	689b      	ldr	r3, [r3, #8]
 8017c4c:	4798      	blx	r3
 8017c4e:	6844      	ldr	r4, [r0, #4]
 8017c50:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8017c54:	f105 0110 	add.w	r1, r5, #16
 8017c58:	4668      	mov	r0, sp
 8017c5a:	f7f8 fc4b 	bl	80104f4 <ucdr_init_buffer>
 8017c5e:	68e3      	ldr	r3, [r4, #12]
 8017c60:	4641      	mov	r1, r8
 8017c62:	4668      	mov	r0, sp
 8017c64:	4798      	blx	r3
 8017c66:	4639      	mov	r1, r7
 8017c68:	4604      	mov	r4, r0
 8017c6a:	480a      	ldr	r0, [pc, #40]	@ (8017c94 <rmw_take_request+0xb8>)
 8017c6c:	f7ff fe98 	bl	80179a0 <put_memory>
 8017c70:	b106      	cbz	r6, 8017c74 <rmw_take_request+0x98>
 8017c72:	7034      	strb	r4, [r6, #0]
 8017c74:	f084 0001 	eor.w	r0, r4, #1
 8017c78:	b2c0      	uxtb	r0, r0
 8017c7a:	b009      	add	sp, #36	@ 0x24
 8017c7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c80:	2001      	movs	r0, #1
 8017c82:	b009      	add	sp, #36	@ 0x24
 8017c84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c88:	200c      	movs	r0, #12
 8017c8a:	b009      	add	sp, #36	@ 0x24
 8017c8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c90:	0801bb60 	.word	0x0801bb60
 8017c94:	2000ae2c 	.word	0x2000ae2c

08017c98 <rmw_send_response>:
 8017c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c9a:	4605      	mov	r5, r0
 8017c9c:	6800      	ldr	r0, [r0, #0]
 8017c9e:	b091      	sub	sp, #68	@ 0x44
 8017ca0:	460c      	mov	r4, r1
 8017ca2:	4616      	mov	r6, r2
 8017ca4:	b128      	cbz	r0, 8017cb2 <rmw_send_response+0x1a>
 8017ca6:	4b29      	ldr	r3, [pc, #164]	@ (8017d4c <rmw_send_response+0xb4>)
 8017ca8:	6819      	ldr	r1, [r3, #0]
 8017caa:	f7e8 fab9 	bl	8000220 <strcmp>
 8017cae:	2800      	cmp	r0, #0
 8017cb0:	d141      	bne.n	8017d36 <rmw_send_response+0x9e>
 8017cb2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8017cb6:	9306      	str	r3, [sp, #24]
 8017cb8:	4623      	mov	r3, r4
 8017cba:	9207      	str	r2, [sp, #28]
 8017cbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017cc0:	686d      	ldr	r5, [r5, #4]
 8017cc2:	789b      	ldrb	r3, [r3, #2]
 8017cc4:	68a1      	ldr	r1, [r4, #8]
 8017cc6:	f88d 2017 	strb.w	r2, [sp, #23]
 8017cca:	f88d 3016 	strb.w	r3, [sp, #22]
 8017cce:	68e2      	ldr	r2, [r4, #12]
 8017cd0:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8017cd4:	6860      	ldr	r0, [r4, #4]
 8017cd6:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017cda:	ab02      	add	r3, sp, #8
 8017cdc:	c307      	stmia	r3!, {r0, r1, r2}
 8017cde:	696b      	ldr	r3, [r5, #20]
 8017ce0:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8017ce2:	68db      	ldr	r3, [r3, #12]
 8017ce4:	4798      	blx	r3
 8017ce6:	6844      	ldr	r4, [r0, #4]
 8017ce8:	4630      	mov	r0, r6
 8017cea:	6923      	ldr	r3, [r4, #16]
 8017cec:	4798      	blx	r3
 8017cee:	f100 0318 	add.w	r3, r0, #24
 8017cf2:	6938      	ldr	r0, [r7, #16]
 8017cf4:	9300      	str	r3, [sp, #0]
 8017cf6:	692a      	ldr	r2, [r5, #16]
 8017cf8:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8017cfa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017cfe:	ab08      	add	r3, sp, #32
 8017d00:	f7fa ffe8 	bl	8012cd4 <uxr_prepare_output_stream>
 8017d04:	b910      	cbnz	r0, 8017d0c <rmw_send_response+0x74>
 8017d06:	2001      	movs	r0, #1
 8017d08:	b011      	add	sp, #68	@ 0x44
 8017d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d0c:	a902      	add	r1, sp, #8
 8017d0e:	a808      	add	r0, sp, #32
 8017d10:	f7fc f918 	bl	8013f44 <uxr_serialize_SampleIdentity>
 8017d14:	68a3      	ldr	r3, [r4, #8]
 8017d16:	a908      	add	r1, sp, #32
 8017d18:	4630      	mov	r0, r6
 8017d1a:	4798      	blx	r3
 8017d1c:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8017d20:	6938      	ldr	r0, [r7, #16]
 8017d22:	2b01      	cmp	r3, #1
 8017d24:	d00a      	beq.n	8017d3c <rmw_send_response+0xa4>
 8017d26:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8017d28:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017d2c:	f7f9 fd54 	bl	80117d8 <uxr_run_session_until_confirm_delivery>
 8017d30:	2000      	movs	r0, #0
 8017d32:	b011      	add	sp, #68	@ 0x44
 8017d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d36:	200c      	movs	r0, #12
 8017d38:	b011      	add	sp, #68	@ 0x44
 8017d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d3c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017d40:	f7f9 f98a 	bl	8011058 <uxr_flash_output_streams>
 8017d44:	2000      	movs	r0, #0
 8017d46:	b011      	add	sp, #68	@ 0x44
 8017d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d4a:	bf00      	nop
 8017d4c:	0801bb60 	.word	0x0801bb60

08017d50 <rmw_take_response>:
 8017d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d54:	4604      	mov	r4, r0
 8017d56:	6800      	ldr	r0, [r0, #0]
 8017d58:	b088      	sub	sp, #32
 8017d5a:	4688      	mov	r8, r1
 8017d5c:	4617      	mov	r7, r2
 8017d5e:	461d      	mov	r5, r3
 8017d60:	b120      	cbz	r0, 8017d6c <rmw_take_response+0x1c>
 8017d62:	4b1e      	ldr	r3, [pc, #120]	@ (8017ddc <rmw_take_response+0x8c>)
 8017d64:	6819      	ldr	r1, [r3, #0]
 8017d66:	f7e8 fa5b 	bl	8000220 <strcmp>
 8017d6a:	bb78      	cbnz	r0, 8017dcc <rmw_take_response+0x7c>
 8017d6c:	b10d      	cbz	r5, 8017d72 <rmw_take_response+0x22>
 8017d6e:	2300      	movs	r3, #0
 8017d70:	702b      	strb	r3, [r5, #0]
 8017d72:	6864      	ldr	r4, [r4, #4]
 8017d74:	f7f7 fa74 	bl	800f260 <rmw_uxrce_clean_expired_static_input_buffer>
 8017d78:	4620      	mov	r0, r4
 8017d7a:	f7f7 fa4b 	bl	800f214 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017d7e:	4606      	mov	r6, r0
 8017d80:	b340      	cbz	r0, 8017dd4 <rmw_take_response+0x84>
 8017d82:	6963      	ldr	r3, [r4, #20]
 8017d84:	6884      	ldr	r4, [r0, #8]
 8017d86:	68db      	ldr	r3, [r3, #12]
 8017d88:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8017d8c:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8017d90:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8017d94:	4798      	blx	r3
 8017d96:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8017d9a:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8017d9e:	f104 0110 	add.w	r1, r4, #16
 8017da2:	4668      	mov	r0, sp
 8017da4:	f7f8 fba6 	bl	80104f4 <ucdr_init_buffer>
 8017da8:	4639      	mov	r1, r7
 8017daa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017dae:	4668      	mov	r0, sp
 8017db0:	4798      	blx	r3
 8017db2:	4631      	mov	r1, r6
 8017db4:	4604      	mov	r4, r0
 8017db6:	480a      	ldr	r0, [pc, #40]	@ (8017de0 <rmw_take_response+0x90>)
 8017db8:	f7ff fdf2 	bl	80179a0 <put_memory>
 8017dbc:	b105      	cbz	r5, 8017dc0 <rmw_take_response+0x70>
 8017dbe:	702c      	strb	r4, [r5, #0]
 8017dc0:	f084 0001 	eor.w	r0, r4, #1
 8017dc4:	b2c0      	uxtb	r0, r0
 8017dc6:	b008      	add	sp, #32
 8017dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017dcc:	200c      	movs	r0, #12
 8017dce:	b008      	add	sp, #32
 8017dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017dd4:	2001      	movs	r0, #1
 8017dd6:	b008      	add	sp, #32
 8017dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ddc:	0801bb60 	.word	0x0801bb60
 8017de0:	2000ae2c 	.word	0x2000ae2c

08017de4 <rmw_take_with_info>:
 8017de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017de6:	4604      	mov	r4, r0
 8017de8:	6800      	ldr	r0, [r0, #0]
 8017dea:	b089      	sub	sp, #36	@ 0x24
 8017dec:	460f      	mov	r7, r1
 8017dee:	4615      	mov	r5, r2
 8017df0:	b128      	cbz	r0, 8017dfe <rmw_take_with_info+0x1a>
 8017df2:	4b24      	ldr	r3, [pc, #144]	@ (8017e84 <rmw_take_with_info+0xa0>)
 8017df4:	6819      	ldr	r1, [r3, #0]
 8017df6:	f7e8 fa13 	bl	8000220 <strcmp>
 8017dfa:	2800      	cmp	r0, #0
 8017dfc:	d13e      	bne.n	8017e7c <rmw_take_with_info+0x98>
 8017dfe:	b305      	cbz	r5, 8017e42 <rmw_take_with_info+0x5e>
 8017e00:	6864      	ldr	r4, [r4, #4]
 8017e02:	2300      	movs	r3, #0
 8017e04:	702b      	strb	r3, [r5, #0]
 8017e06:	f7f7 fa2b 	bl	800f260 <rmw_uxrce_clean_expired_static_input_buffer>
 8017e0a:	4620      	mov	r0, r4
 8017e0c:	f7f7 fa02 	bl	800f214 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017e10:	4606      	mov	r6, r0
 8017e12:	b1f0      	cbz	r0, 8017e52 <rmw_take_with_info+0x6e>
 8017e14:	6881      	ldr	r1, [r0, #8]
 8017e16:	4668      	mov	r0, sp
 8017e18:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8017e1c:	3110      	adds	r1, #16
 8017e1e:	f7f8 fb69 	bl	80104f4 <ucdr_init_buffer>
 8017e22:	69a3      	ldr	r3, [r4, #24]
 8017e24:	4639      	mov	r1, r7
 8017e26:	68db      	ldr	r3, [r3, #12]
 8017e28:	4668      	mov	r0, sp
 8017e2a:	4798      	blx	r3
 8017e2c:	4631      	mov	r1, r6
 8017e2e:	4604      	mov	r4, r0
 8017e30:	4815      	ldr	r0, [pc, #84]	@ (8017e88 <rmw_take_with_info+0xa4>)
 8017e32:	f7ff fdb5 	bl	80179a0 <put_memory>
 8017e36:	702c      	strb	r4, [r5, #0]
 8017e38:	f084 0001 	eor.w	r0, r4, #1
 8017e3c:	b2c0      	uxtb	r0, r0
 8017e3e:	b009      	add	sp, #36	@ 0x24
 8017e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e42:	6864      	ldr	r4, [r4, #4]
 8017e44:	f7f7 fa0c 	bl	800f260 <rmw_uxrce_clean_expired_static_input_buffer>
 8017e48:	4620      	mov	r0, r4
 8017e4a:	f7f7 f9e3 	bl	800f214 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017e4e:	4605      	mov	r5, r0
 8017e50:	b910      	cbnz	r0, 8017e58 <rmw_take_with_info+0x74>
 8017e52:	2001      	movs	r0, #1
 8017e54:	b009      	add	sp, #36	@ 0x24
 8017e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e58:	68a9      	ldr	r1, [r5, #8]
 8017e5a:	4668      	mov	r0, sp
 8017e5c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8017e60:	3110      	adds	r1, #16
 8017e62:	f7f8 fb47 	bl	80104f4 <ucdr_init_buffer>
 8017e66:	69a3      	ldr	r3, [r4, #24]
 8017e68:	4639      	mov	r1, r7
 8017e6a:	68db      	ldr	r3, [r3, #12]
 8017e6c:	4668      	mov	r0, sp
 8017e6e:	4798      	blx	r3
 8017e70:	4629      	mov	r1, r5
 8017e72:	4604      	mov	r4, r0
 8017e74:	4804      	ldr	r0, [pc, #16]	@ (8017e88 <rmw_take_with_info+0xa4>)
 8017e76:	f7ff fd93 	bl	80179a0 <put_memory>
 8017e7a:	e7dd      	b.n	8017e38 <rmw_take_with_info+0x54>
 8017e7c:	200c      	movs	r0, #12
 8017e7e:	b009      	add	sp, #36	@ 0x24
 8017e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e82:	bf00      	nop
 8017e84:	0801bb60 	.word	0x0801bb60
 8017e88:	2000ae2c 	.word	0x2000ae2c

08017e8c <rmw_wait>:
 8017e8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017e90:	b089      	sub	sp, #36	@ 0x24
 8017e92:	4605      	mov	r5, r0
 8017e94:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8017e96:	460e      	mov	r6, r1
 8017e98:	4698      	mov	r8, r3
 8017e9a:	4691      	mov	r9, r2
 8017e9c:	2a00      	cmp	r2, #0
 8017e9e:	f000 810a 	beq.w	80180b6 <rmw_wait+0x22a>
 8017ea2:	b16c      	cbz	r4, 8017ec0 <rmw_wait+0x34>
 8017ea4:	4bae      	ldr	r3, [pc, #696]	@ (8018160 <rmw_wait+0x2d4>)
 8017ea6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017ea8:	af04      	add	r7, sp, #16
 8017eaa:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8017eae:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8017eb2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017eb6:	f7ff faaf 	bl	8017418 <rmw_time_equal>
 8017eba:	2800      	cmp	r0, #0
 8017ebc:	f000 8127 	beq.w	801810e <rmw_wait+0x282>
 8017ec0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8017ec4:	f7f7 f9cc 	bl	800f260 <rmw_uxrce_clean_expired_static_input_buffer>
 8017ec8:	4ba6      	ldr	r3, [pc, #664]	@ (8018164 <rmw_wait+0x2d8>)
 8017eca:	681c      	ldr	r4, [r3, #0]
 8017ecc:	b14c      	cbz	r4, 8017ee2 <rmw_wait+0x56>
 8017ece:	4623      	mov	r3, r4
 8017ed0:	2100      	movs	r1, #0
 8017ed2:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8017ed6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017eda:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d1f7      	bne.n	8017ed2 <rmw_wait+0x46>
 8017ee2:	f1b9 0f00 	cmp.w	r9, #0
 8017ee6:	d011      	beq.n	8017f0c <rmw_wait+0x80>
 8017ee8:	f8d9 1000 	ldr.w	r1, [r9]
 8017eec:	b171      	cbz	r1, 8017f0c <rmw_wait+0x80>
 8017eee:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8017ef2:	2300      	movs	r3, #0
 8017ef4:	2001      	movs	r0, #1
 8017ef6:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017efa:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017efc:	6912      	ldr	r2, [r2, #16]
 8017efe:	3301      	adds	r3, #1
 8017f00:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017f04:	4299      	cmp	r1, r3
 8017f06:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017f0a:	d1f4      	bne.n	8017ef6 <rmw_wait+0x6a>
 8017f0c:	f1b8 0f00 	cmp.w	r8, #0
 8017f10:	d011      	beq.n	8017f36 <rmw_wait+0xaa>
 8017f12:	f8d8 1000 	ldr.w	r1, [r8]
 8017f16:	b171      	cbz	r1, 8017f36 <rmw_wait+0xaa>
 8017f18:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8017f1c:	2300      	movs	r3, #0
 8017f1e:	2001      	movs	r0, #1
 8017f20:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017f24:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017f26:	6912      	ldr	r2, [r2, #16]
 8017f28:	3301      	adds	r3, #1
 8017f2a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017f2e:	4299      	cmp	r1, r3
 8017f30:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017f34:	d1f4      	bne.n	8017f20 <rmw_wait+0x94>
 8017f36:	b185      	cbz	r5, 8017f5a <rmw_wait+0xce>
 8017f38:	6829      	ldr	r1, [r5, #0]
 8017f3a:	b171      	cbz	r1, 8017f5a <rmw_wait+0xce>
 8017f3c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8017f40:	2300      	movs	r3, #0
 8017f42:	2001      	movs	r0, #1
 8017f44:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017f48:	6a12      	ldr	r2, [r2, #32]
 8017f4a:	6912      	ldr	r2, [r2, #16]
 8017f4c:	3301      	adds	r3, #1
 8017f4e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017f52:	4299      	cmp	r1, r3
 8017f54:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017f58:	d1f4      	bne.n	8017f44 <rmw_wait+0xb8>
 8017f5a:	b34c      	cbz	r4, 8017fb0 <rmw_wait+0x124>
 8017f5c:	4622      	mov	r2, r4
 8017f5e:	2300      	movs	r3, #0
 8017f60:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8017f64:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8017f68:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8017f6c:	440b      	add	r3, r1
 8017f6e:	b2db      	uxtb	r3, r3
 8017f70:	2a00      	cmp	r2, #0
 8017f72:	d1f5      	bne.n	8017f60 <rmw_wait+0xd4>
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	f000 8084 	beq.w	8018082 <rmw_wait+0x1f6>
 8017f7a:	1c7a      	adds	r2, r7, #1
 8017f7c:	d00d      	beq.n	8017f9a <rmw_wait+0x10e>
 8017f7e:	ee07 7a90 	vmov	s15, r7
 8017f82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017f86:	ee07 3a90 	vmov	s15, r3
 8017f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017f92:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8017f96:	ee17 7a90 	vmov	r7, s15
 8017f9a:	68a0      	ldr	r0, [r4, #8]
 8017f9c:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8017fa0:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	f040 8090 	bne.w	80180ca <rmw_wait+0x23e>
 8017faa:	6864      	ldr	r4, [r4, #4]
 8017fac:	2c00      	cmp	r4, #0
 8017fae:	d1f4      	bne.n	8017f9a <rmw_wait+0x10e>
 8017fb0:	f1b9 0f00 	cmp.w	r9, #0
 8017fb4:	f000 80bc 	beq.w	8018130 <rmw_wait+0x2a4>
 8017fb8:	f8d9 7000 	ldr.w	r7, [r9]
 8017fbc:	2f00      	cmp	r7, #0
 8017fbe:	f000 808e 	beq.w	80180de <rmw_wait+0x252>
 8017fc2:	2400      	movs	r4, #0
 8017fc4:	4627      	mov	r7, r4
 8017fc6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8017fca:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017fce:	f7f7 f921 	bl	800f214 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017fd2:	2800      	cmp	r0, #0
 8017fd4:	d05f      	beq.n	8018096 <rmw_wait+0x20a>
 8017fd6:	f8d9 3000 	ldr.w	r3, [r9]
 8017fda:	3401      	adds	r4, #1
 8017fdc:	42a3      	cmp	r3, r4
 8017fde:	f04f 0701 	mov.w	r7, #1
 8017fe2:	d8f0      	bhi.n	8017fc6 <rmw_wait+0x13a>
 8017fe4:	f1b8 0f00 	cmp.w	r8, #0
 8017fe8:	d012      	beq.n	8018010 <rmw_wait+0x184>
 8017fea:	f8d8 3000 	ldr.w	r3, [r8]
 8017fee:	b17b      	cbz	r3, 8018010 <rmw_wait+0x184>
 8017ff0:	2400      	movs	r4, #0
 8017ff2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017ff6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017ffa:	f7f7 f90b 	bl	800f214 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017ffe:	2800      	cmp	r0, #0
 8018000:	d051      	beq.n	80180a6 <rmw_wait+0x21a>
 8018002:	f8d8 3000 	ldr.w	r3, [r8]
 8018006:	3401      	adds	r4, #1
 8018008:	42a3      	cmp	r3, r4
 801800a:	f04f 0701 	mov.w	r7, #1
 801800e:	d8f0      	bhi.n	8017ff2 <rmw_wait+0x166>
 8018010:	b1dd      	cbz	r5, 801804a <rmw_wait+0x1be>
 8018012:	682b      	ldr	r3, [r5, #0]
 8018014:	b1cb      	cbz	r3, 801804a <rmw_wait+0x1be>
 8018016:	2400      	movs	r4, #0
 8018018:	686b      	ldr	r3, [r5, #4]
 801801a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801801e:	f7f7 f8f9 	bl	800f214 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018022:	b158      	cbz	r0, 801803c <rmw_wait+0x1b0>
 8018024:	682b      	ldr	r3, [r5, #0]
 8018026:	3401      	adds	r4, #1
 8018028:	42a3      	cmp	r3, r4
 801802a:	d969      	bls.n	8018100 <rmw_wait+0x274>
 801802c:	686b      	ldr	r3, [r5, #4]
 801802e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018032:	2701      	movs	r7, #1
 8018034:	f7f7 f8ee 	bl	800f214 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018038:	2800      	cmp	r0, #0
 801803a:	d1f3      	bne.n	8018024 <rmw_wait+0x198>
 801803c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8018040:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8018044:	3401      	adds	r4, #1
 8018046:	42a3      	cmp	r3, r4
 8018048:	d8e6      	bhi.n	8018018 <rmw_wait+0x18c>
 801804a:	b1a6      	cbz	r6, 8018076 <rmw_wait+0x1ea>
 801804c:	6834      	ldr	r4, [r6, #0]
 801804e:	b194      	cbz	r4, 8018076 <rmw_wait+0x1ea>
 8018050:	2300      	movs	r3, #0
 8018052:	461d      	mov	r5, r3
 8018054:	e004      	b.n	8018060 <rmw_wait+0x1d4>
 8018056:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801805a:	3301      	adds	r3, #1
 801805c:	42a3      	cmp	r3, r4
 801805e:	d00a      	beq.n	8018076 <rmw_wait+0x1ea>
 8018060:	6870      	ldr	r0, [r6, #4]
 8018062:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8018066:	7c0a      	ldrb	r2, [r1, #16]
 8018068:	2a00      	cmp	r2, #0
 801806a:	d0f4      	beq.n	8018056 <rmw_wait+0x1ca>
 801806c:	3301      	adds	r3, #1
 801806e:	42a3      	cmp	r3, r4
 8018070:	740d      	strb	r5, [r1, #16]
 8018072:	4617      	mov	r7, r2
 8018074:	d1f4      	bne.n	8018060 <rmw_wait+0x1d4>
 8018076:	2f00      	cmp	r7, #0
 8018078:	d03e      	beq.n	80180f8 <rmw_wait+0x26c>
 801807a:	2000      	movs	r0, #0
 801807c:	b009      	add	sp, #36	@ 0x24
 801807e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018082:	68a0      	ldr	r0, [r4, #8]
 8018084:	2100      	movs	r1, #0
 8018086:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801808a:	f7f9 fb6b 	bl	8011764 <uxr_run_session_timeout>
 801808e:	6864      	ldr	r4, [r4, #4]
 8018090:	2c00      	cmp	r4, #0
 8018092:	d1f6      	bne.n	8018082 <rmw_wait+0x1f6>
 8018094:	e78c      	b.n	8017fb0 <rmw_wait+0x124>
 8018096:	e9d9 3200 	ldrd	r3, r2, [r9]
 801809a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801809e:	3401      	adds	r4, #1
 80180a0:	42a3      	cmp	r3, r4
 80180a2:	d890      	bhi.n	8017fc6 <rmw_wait+0x13a>
 80180a4:	e79e      	b.n	8017fe4 <rmw_wait+0x158>
 80180a6:	e9d8 3200 	ldrd	r3, r2, [r8]
 80180aa:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80180ae:	3401      	adds	r4, #1
 80180b0:	429c      	cmp	r4, r3
 80180b2:	d39e      	bcc.n	8017ff2 <rmw_wait+0x166>
 80180b4:	e7ac      	b.n	8018010 <rmw_wait+0x184>
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	f47f aef3 	bne.w	8017ea2 <rmw_wait+0x16>
 80180bc:	2800      	cmp	r0, #0
 80180be:	f47f aef0 	bne.w	8017ea2 <rmw_wait+0x16>
 80180c2:	2900      	cmp	r1, #0
 80180c4:	f47f aeed 	bne.w	8017ea2 <rmw_wait+0x16>
 80180c8:	e7d7      	b.n	801807a <rmw_wait+0x1ee>
 80180ca:	4639      	mov	r1, r7
 80180cc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80180d0:	f7f9 fb62 	bl	8011798 <uxr_run_session_until_data>
 80180d4:	6864      	ldr	r4, [r4, #4]
 80180d6:	2c00      	cmp	r4, #0
 80180d8:	f47f af5f 	bne.w	8017f9a <rmw_wait+0x10e>
 80180dc:	e768      	b.n	8017fb0 <rmw_wait+0x124>
 80180de:	f1b8 0f00 	cmp.w	r8, #0
 80180e2:	d032      	beq.n	801814a <rmw_wait+0x2be>
 80180e4:	f8d8 3000 	ldr.w	r3, [r8]
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	d181      	bne.n	8017ff0 <rmw_wait+0x164>
 80180ec:	461f      	mov	r7, r3
 80180ee:	2d00      	cmp	r5, #0
 80180f0:	d18f      	bne.n	8018012 <rmw_wait+0x186>
 80180f2:	462f      	mov	r7, r5
 80180f4:	2e00      	cmp	r6, #0
 80180f6:	d1a9      	bne.n	801804c <rmw_wait+0x1c0>
 80180f8:	2002      	movs	r0, #2
 80180fa:	b009      	add	sp, #36	@ 0x24
 80180fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018100:	2e00      	cmp	r6, #0
 8018102:	d0ba      	beq.n	801807a <rmw_wait+0x1ee>
 8018104:	6834      	ldr	r4, [r6, #0]
 8018106:	2701      	movs	r7, #1
 8018108:	2c00      	cmp	r4, #0
 801810a:	d1a1      	bne.n	8018050 <rmw_wait+0x1c4>
 801810c:	e7b5      	b.n	801807a <rmw_wait+0x1ee>
 801810e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8018112:	f7ff f9d5 	bl	80174c0 <rmw_time_total_nsec>
 8018116:	2300      	movs	r3, #0
 8018118:	4a13      	ldr	r2, [pc, #76]	@ (8018168 <rmw_wait+0x2dc>)
 801811a:	f7e8 fd27 	bl	8000b6c <__aeabi_uldivmod>
 801811e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8018122:	f171 0300 	sbcs.w	r3, r1, #0
 8018126:	4607      	mov	r7, r0
 8018128:	bfa8      	it	ge
 801812a:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801812e:	e6c9      	b.n	8017ec4 <rmw_wait+0x38>
 8018130:	f1b8 0f00 	cmp.w	r8, #0
 8018134:	d009      	beq.n	801814a <rmw_wait+0x2be>
 8018136:	f8d8 3000 	ldr.w	r3, [r8]
 801813a:	464f      	mov	r7, r9
 801813c:	2b00      	cmp	r3, #0
 801813e:	f47f af57 	bne.w	8017ff0 <rmw_wait+0x164>
 8018142:	2d00      	cmp	r5, #0
 8018144:	f47f af65 	bne.w	8018012 <rmw_wait+0x186>
 8018148:	e7d3      	b.n	80180f2 <rmw_wait+0x266>
 801814a:	b17d      	cbz	r5, 801816c <rmw_wait+0x2e0>
 801814c:	682b      	ldr	r3, [r5, #0]
 801814e:	4647      	mov	r7, r8
 8018150:	2b00      	cmp	r3, #0
 8018152:	f47f af60 	bne.w	8018016 <rmw_wait+0x18a>
 8018156:	2e00      	cmp	r6, #0
 8018158:	f47f af78 	bne.w	801804c <rmw_wait+0x1c0>
 801815c:	e7cc      	b.n	80180f8 <rmw_wait+0x26c>
 801815e:	bf00      	nop
 8018160:	0801b000 	.word	0x0801b000
 8018164:	2000ae1c 	.word	0x2000ae1c
 8018168:	000f4240 	.word	0x000f4240
 801816c:	2e00      	cmp	r6, #0
 801816e:	d0c3      	beq.n	80180f8 <rmw_wait+0x26c>
 8018170:	6834      	ldr	r4, [r6, #0]
 8018172:	462f      	mov	r7, r5
 8018174:	2c00      	cmp	r4, #0
 8018176:	f47f af6b 	bne.w	8018050 <rmw_wait+0x1c4>
 801817a:	e7bd      	b.n	80180f8 <rmw_wait+0x26c>

0801817c <rmw_create_wait_set>:
 801817c:	b508      	push	{r3, lr}
 801817e:	4803      	ldr	r0, [pc, #12]	@ (801818c <rmw_create_wait_set+0x10>)
 8018180:	f7ff fbfe 	bl	8017980 <get_memory>
 8018184:	b108      	cbz	r0, 801818a <rmw_create_wait_set+0xe>
 8018186:	6880      	ldr	r0, [r0, #8]
 8018188:	3010      	adds	r0, #16
 801818a:	bd08      	pop	{r3, pc}
 801818c:	2000ae5c 	.word	0x2000ae5c

08018190 <rmw_destroy_wait_set>:
 8018190:	b508      	push	{r3, lr}
 8018192:	4b08      	ldr	r3, [pc, #32]	@ (80181b4 <rmw_destroy_wait_set+0x24>)
 8018194:	6819      	ldr	r1, [r3, #0]
 8018196:	b911      	cbnz	r1, 801819e <rmw_destroy_wait_set+0xe>
 8018198:	e00a      	b.n	80181b0 <rmw_destroy_wait_set+0x20>
 801819a:	6849      	ldr	r1, [r1, #4]
 801819c:	b141      	cbz	r1, 80181b0 <rmw_destroy_wait_set+0x20>
 801819e:	688b      	ldr	r3, [r1, #8]
 80181a0:	3310      	adds	r3, #16
 80181a2:	4298      	cmp	r0, r3
 80181a4:	d1f9      	bne.n	801819a <rmw_destroy_wait_set+0xa>
 80181a6:	4803      	ldr	r0, [pc, #12]	@ (80181b4 <rmw_destroy_wait_set+0x24>)
 80181a8:	f7ff fbfa 	bl	80179a0 <put_memory>
 80181ac:	2000      	movs	r0, #0
 80181ae:	bd08      	pop	{r3, pc}
 80181b0:	2001      	movs	r0, #1
 80181b2:	bd08      	pop	{r3, pc}
 80181b4:	2000ae5c 	.word	0x2000ae5c

080181b8 <rmw_uros_epoch_nanos>:
 80181b8:	4b05      	ldr	r3, [pc, #20]	@ (80181d0 <rmw_uros_epoch_nanos+0x18>)
 80181ba:	681b      	ldr	r3, [r3, #0]
 80181bc:	b123      	cbz	r3, 80181c8 <rmw_uros_epoch_nanos+0x10>
 80181be:	6898      	ldr	r0, [r3, #8]
 80181c0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80181c4:	f7f8 bf3e 	b.w	8011044 <uxr_epoch_nanos>
 80181c8:	2000      	movs	r0, #0
 80181ca:	2100      	movs	r1, #0
 80181cc:	4770      	bx	lr
 80181ce:	bf00      	nop
 80181d0:	2000ae1c 	.word	0x2000ae1c

080181d4 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80181d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181d8:	6805      	ldr	r5, [r0, #0]
 80181da:	4604      	mov	r4, r0
 80181dc:	4628      	mov	r0, r5
 80181de:	460e      	mov	r6, r1
 80181e0:	f7e8 f81e 	bl	8000220 <strcmp>
 80181e4:	b1c8      	cbz	r0, 801821a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 80181e6:	4b11      	ldr	r3, [pc, #68]	@ (801822c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 80181e8:	681b      	ldr	r3, [r3, #0]
 80181ea:	429d      	cmp	r5, r3
 80181ec:	d112      	bne.n	8018214 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80181ee:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80181f2:	f8d8 4000 	ldr.w	r4, [r8]
 80181f6:	b16c      	cbz	r4, 8018214 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80181f8:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80181fc:	2700      	movs	r7, #0
 80181fe:	3d04      	subs	r5, #4
 8018200:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8018204:	4631      	mov	r1, r6
 8018206:	f7e8 f80b 	bl	8000220 <strcmp>
 801820a:	00bb      	lsls	r3, r7, #2
 801820c:	b140      	cbz	r0, 8018220 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801820e:	3701      	adds	r7, #1
 8018210:	42bc      	cmp	r4, r7
 8018212:	d1f5      	bne.n	8018200 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8018214:	2000      	movs	r0, #0
 8018216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801821a:	4620      	mov	r0, r4
 801821c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018220:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018224:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018228:	58d3      	ldr	r3, [r2, r3]
 801822a:	4718      	bx	r3
 801822c:	200000ac 	.word	0x200000ac

08018230 <std_msgs__msg__Int32__init>:
 8018230:	3800      	subs	r0, #0
 8018232:	bf18      	it	ne
 8018234:	2001      	movne	r0, #1
 8018236:	4770      	bx	lr

08018238 <std_msgs__msg__Int32__fini>:
 8018238:	4770      	bx	lr
 801823a:	bf00      	nop

0801823c <ucdr_serialize_endian_array_char>:
 801823c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018240:	4619      	mov	r1, r3
 8018242:	461f      	mov	r7, r3
 8018244:	4605      	mov	r5, r0
 8018246:	4690      	mov	r8, r2
 8018248:	f7f8 f900 	bl	801044c <ucdr_check_buffer_available_for>
 801824c:	b9e0      	cbnz	r0, 8018288 <ucdr_serialize_endian_array_char+0x4c>
 801824e:	463e      	mov	r6, r7
 8018250:	e009      	b.n	8018266 <ucdr_serialize_endian_array_char+0x2a>
 8018252:	68a8      	ldr	r0, [r5, #8]
 8018254:	f001 ff81 	bl	801a15a <memcpy>
 8018258:	68ab      	ldr	r3, [r5, #8]
 801825a:	6928      	ldr	r0, [r5, #16]
 801825c:	4423      	add	r3, r4
 801825e:	4420      	add	r0, r4
 8018260:	1b36      	subs	r6, r6, r4
 8018262:	60ab      	str	r3, [r5, #8]
 8018264:	6128      	str	r0, [r5, #16]
 8018266:	4631      	mov	r1, r6
 8018268:	2201      	movs	r2, #1
 801826a:	4628      	mov	r0, r5
 801826c:	f7f8 f976 	bl	801055c <ucdr_check_final_buffer_behavior_array>
 8018270:	1bb9      	subs	r1, r7, r6
 8018272:	4441      	add	r1, r8
 8018274:	4604      	mov	r4, r0
 8018276:	4602      	mov	r2, r0
 8018278:	2800      	cmp	r0, #0
 801827a:	d1ea      	bne.n	8018252 <ucdr_serialize_endian_array_char+0x16>
 801827c:	2301      	movs	r3, #1
 801827e:	7da8      	ldrb	r0, [r5, #22]
 8018280:	756b      	strb	r3, [r5, #21]
 8018282:	4058      	eors	r0, r3
 8018284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018288:	463a      	mov	r2, r7
 801828a:	68a8      	ldr	r0, [r5, #8]
 801828c:	4641      	mov	r1, r8
 801828e:	f001 ff64 	bl	801a15a <memcpy>
 8018292:	68aa      	ldr	r2, [r5, #8]
 8018294:	692b      	ldr	r3, [r5, #16]
 8018296:	443a      	add	r2, r7
 8018298:	443b      	add	r3, r7
 801829a:	60aa      	str	r2, [r5, #8]
 801829c:	612b      	str	r3, [r5, #16]
 801829e:	e7ed      	b.n	801827c <ucdr_serialize_endian_array_char+0x40>

080182a0 <ucdr_deserialize_endian_array_char>:
 80182a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182a4:	4619      	mov	r1, r3
 80182a6:	461f      	mov	r7, r3
 80182a8:	4605      	mov	r5, r0
 80182aa:	4690      	mov	r8, r2
 80182ac:	f7f8 f8ce 	bl	801044c <ucdr_check_buffer_available_for>
 80182b0:	b9e0      	cbnz	r0, 80182ec <ucdr_deserialize_endian_array_char+0x4c>
 80182b2:	463e      	mov	r6, r7
 80182b4:	e009      	b.n	80182ca <ucdr_deserialize_endian_array_char+0x2a>
 80182b6:	68a9      	ldr	r1, [r5, #8]
 80182b8:	f001 ff4f 	bl	801a15a <memcpy>
 80182bc:	68ab      	ldr	r3, [r5, #8]
 80182be:	6928      	ldr	r0, [r5, #16]
 80182c0:	4423      	add	r3, r4
 80182c2:	4420      	add	r0, r4
 80182c4:	1b36      	subs	r6, r6, r4
 80182c6:	60ab      	str	r3, [r5, #8]
 80182c8:	6128      	str	r0, [r5, #16]
 80182ca:	2201      	movs	r2, #1
 80182cc:	4631      	mov	r1, r6
 80182ce:	4628      	mov	r0, r5
 80182d0:	f7f8 f944 	bl	801055c <ucdr_check_final_buffer_behavior_array>
 80182d4:	4604      	mov	r4, r0
 80182d6:	1bb8      	subs	r0, r7, r6
 80182d8:	4440      	add	r0, r8
 80182da:	4622      	mov	r2, r4
 80182dc:	2c00      	cmp	r4, #0
 80182de:	d1ea      	bne.n	80182b6 <ucdr_deserialize_endian_array_char+0x16>
 80182e0:	2301      	movs	r3, #1
 80182e2:	7da8      	ldrb	r0, [r5, #22]
 80182e4:	756b      	strb	r3, [r5, #21]
 80182e6:	4058      	eors	r0, r3
 80182e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182ec:	463a      	mov	r2, r7
 80182ee:	68a9      	ldr	r1, [r5, #8]
 80182f0:	4640      	mov	r0, r8
 80182f2:	f001 ff32 	bl	801a15a <memcpy>
 80182f6:	68aa      	ldr	r2, [r5, #8]
 80182f8:	692b      	ldr	r3, [r5, #16]
 80182fa:	443a      	add	r2, r7
 80182fc:	443b      	add	r3, r7
 80182fe:	60aa      	str	r2, [r5, #8]
 8018300:	612b      	str	r3, [r5, #16]
 8018302:	e7ed      	b.n	80182e0 <ucdr_deserialize_endian_array_char+0x40>

08018304 <ucdr_serialize_array_uint8_t>:
 8018304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018308:	4688      	mov	r8, r1
 801830a:	4611      	mov	r1, r2
 801830c:	4617      	mov	r7, r2
 801830e:	4605      	mov	r5, r0
 8018310:	f7f8 f89c 	bl	801044c <ucdr_check_buffer_available_for>
 8018314:	b9e0      	cbnz	r0, 8018350 <ucdr_serialize_array_uint8_t+0x4c>
 8018316:	463e      	mov	r6, r7
 8018318:	e009      	b.n	801832e <ucdr_serialize_array_uint8_t+0x2a>
 801831a:	68a8      	ldr	r0, [r5, #8]
 801831c:	f001 ff1d 	bl	801a15a <memcpy>
 8018320:	68aa      	ldr	r2, [r5, #8]
 8018322:	692b      	ldr	r3, [r5, #16]
 8018324:	4422      	add	r2, r4
 8018326:	4423      	add	r3, r4
 8018328:	1b36      	subs	r6, r6, r4
 801832a:	60aa      	str	r2, [r5, #8]
 801832c:	612b      	str	r3, [r5, #16]
 801832e:	4631      	mov	r1, r6
 8018330:	2201      	movs	r2, #1
 8018332:	4628      	mov	r0, r5
 8018334:	f7f8 f912 	bl	801055c <ucdr_check_final_buffer_behavior_array>
 8018338:	1bb9      	subs	r1, r7, r6
 801833a:	4441      	add	r1, r8
 801833c:	4604      	mov	r4, r0
 801833e:	4602      	mov	r2, r0
 8018340:	2800      	cmp	r0, #0
 8018342:	d1ea      	bne.n	801831a <ucdr_serialize_array_uint8_t+0x16>
 8018344:	2301      	movs	r3, #1
 8018346:	7da8      	ldrb	r0, [r5, #22]
 8018348:	756b      	strb	r3, [r5, #21]
 801834a:	4058      	eors	r0, r3
 801834c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018350:	463a      	mov	r2, r7
 8018352:	68a8      	ldr	r0, [r5, #8]
 8018354:	4641      	mov	r1, r8
 8018356:	f001 ff00 	bl	801a15a <memcpy>
 801835a:	68aa      	ldr	r2, [r5, #8]
 801835c:	692b      	ldr	r3, [r5, #16]
 801835e:	443a      	add	r2, r7
 8018360:	443b      	add	r3, r7
 8018362:	60aa      	str	r2, [r5, #8]
 8018364:	612b      	str	r3, [r5, #16]
 8018366:	e7ed      	b.n	8018344 <ucdr_serialize_array_uint8_t+0x40>

08018368 <ucdr_serialize_endian_array_uint8_t>:
 8018368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801836c:	4619      	mov	r1, r3
 801836e:	461f      	mov	r7, r3
 8018370:	4605      	mov	r5, r0
 8018372:	4690      	mov	r8, r2
 8018374:	f7f8 f86a 	bl	801044c <ucdr_check_buffer_available_for>
 8018378:	b9e0      	cbnz	r0, 80183b4 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801837a:	463e      	mov	r6, r7
 801837c:	e009      	b.n	8018392 <ucdr_serialize_endian_array_uint8_t+0x2a>
 801837e:	68a8      	ldr	r0, [r5, #8]
 8018380:	f001 feeb 	bl	801a15a <memcpy>
 8018384:	68ab      	ldr	r3, [r5, #8]
 8018386:	6928      	ldr	r0, [r5, #16]
 8018388:	4423      	add	r3, r4
 801838a:	4420      	add	r0, r4
 801838c:	1b36      	subs	r6, r6, r4
 801838e:	60ab      	str	r3, [r5, #8]
 8018390:	6128      	str	r0, [r5, #16]
 8018392:	4631      	mov	r1, r6
 8018394:	2201      	movs	r2, #1
 8018396:	4628      	mov	r0, r5
 8018398:	f7f8 f8e0 	bl	801055c <ucdr_check_final_buffer_behavior_array>
 801839c:	1bb9      	subs	r1, r7, r6
 801839e:	4441      	add	r1, r8
 80183a0:	4604      	mov	r4, r0
 80183a2:	4602      	mov	r2, r0
 80183a4:	2800      	cmp	r0, #0
 80183a6:	d1ea      	bne.n	801837e <ucdr_serialize_endian_array_uint8_t+0x16>
 80183a8:	2301      	movs	r3, #1
 80183aa:	7da8      	ldrb	r0, [r5, #22]
 80183ac:	756b      	strb	r3, [r5, #21]
 80183ae:	4058      	eors	r0, r3
 80183b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183b4:	463a      	mov	r2, r7
 80183b6:	68a8      	ldr	r0, [r5, #8]
 80183b8:	4641      	mov	r1, r8
 80183ba:	f001 fece 	bl	801a15a <memcpy>
 80183be:	68aa      	ldr	r2, [r5, #8]
 80183c0:	692b      	ldr	r3, [r5, #16]
 80183c2:	443a      	add	r2, r7
 80183c4:	443b      	add	r3, r7
 80183c6:	60aa      	str	r2, [r5, #8]
 80183c8:	612b      	str	r3, [r5, #16]
 80183ca:	e7ed      	b.n	80183a8 <ucdr_serialize_endian_array_uint8_t+0x40>

080183cc <ucdr_deserialize_array_uint8_t>:
 80183cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183d0:	4688      	mov	r8, r1
 80183d2:	4611      	mov	r1, r2
 80183d4:	4617      	mov	r7, r2
 80183d6:	4605      	mov	r5, r0
 80183d8:	f7f8 f838 	bl	801044c <ucdr_check_buffer_available_for>
 80183dc:	b9e0      	cbnz	r0, 8018418 <ucdr_deserialize_array_uint8_t+0x4c>
 80183de:	463e      	mov	r6, r7
 80183e0:	e009      	b.n	80183f6 <ucdr_deserialize_array_uint8_t+0x2a>
 80183e2:	68a9      	ldr	r1, [r5, #8]
 80183e4:	f001 feb9 	bl	801a15a <memcpy>
 80183e8:	68aa      	ldr	r2, [r5, #8]
 80183ea:	692b      	ldr	r3, [r5, #16]
 80183ec:	4422      	add	r2, r4
 80183ee:	4423      	add	r3, r4
 80183f0:	1b36      	subs	r6, r6, r4
 80183f2:	60aa      	str	r2, [r5, #8]
 80183f4:	612b      	str	r3, [r5, #16]
 80183f6:	2201      	movs	r2, #1
 80183f8:	4631      	mov	r1, r6
 80183fa:	4628      	mov	r0, r5
 80183fc:	f7f8 f8ae 	bl	801055c <ucdr_check_final_buffer_behavior_array>
 8018400:	4604      	mov	r4, r0
 8018402:	1bb8      	subs	r0, r7, r6
 8018404:	4440      	add	r0, r8
 8018406:	4622      	mov	r2, r4
 8018408:	2c00      	cmp	r4, #0
 801840a:	d1ea      	bne.n	80183e2 <ucdr_deserialize_array_uint8_t+0x16>
 801840c:	2301      	movs	r3, #1
 801840e:	7da8      	ldrb	r0, [r5, #22]
 8018410:	756b      	strb	r3, [r5, #21]
 8018412:	4058      	eors	r0, r3
 8018414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018418:	463a      	mov	r2, r7
 801841a:	68a9      	ldr	r1, [r5, #8]
 801841c:	4640      	mov	r0, r8
 801841e:	f001 fe9c 	bl	801a15a <memcpy>
 8018422:	68aa      	ldr	r2, [r5, #8]
 8018424:	692b      	ldr	r3, [r5, #16]
 8018426:	443a      	add	r2, r7
 8018428:	443b      	add	r3, r7
 801842a:	60aa      	str	r2, [r5, #8]
 801842c:	612b      	str	r3, [r5, #16]
 801842e:	e7ed      	b.n	801840c <ucdr_deserialize_array_uint8_t+0x40>

08018430 <ucdr_deserialize_endian_array_uint8_t>:
 8018430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018434:	4619      	mov	r1, r3
 8018436:	461f      	mov	r7, r3
 8018438:	4605      	mov	r5, r0
 801843a:	4690      	mov	r8, r2
 801843c:	f7f8 f806 	bl	801044c <ucdr_check_buffer_available_for>
 8018440:	b9e0      	cbnz	r0, 801847c <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8018442:	463e      	mov	r6, r7
 8018444:	e009      	b.n	801845a <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8018446:	68a9      	ldr	r1, [r5, #8]
 8018448:	f001 fe87 	bl	801a15a <memcpy>
 801844c:	68ab      	ldr	r3, [r5, #8]
 801844e:	6928      	ldr	r0, [r5, #16]
 8018450:	4423      	add	r3, r4
 8018452:	4420      	add	r0, r4
 8018454:	1b36      	subs	r6, r6, r4
 8018456:	60ab      	str	r3, [r5, #8]
 8018458:	6128      	str	r0, [r5, #16]
 801845a:	2201      	movs	r2, #1
 801845c:	4631      	mov	r1, r6
 801845e:	4628      	mov	r0, r5
 8018460:	f7f8 f87c 	bl	801055c <ucdr_check_final_buffer_behavior_array>
 8018464:	4604      	mov	r4, r0
 8018466:	1bb8      	subs	r0, r7, r6
 8018468:	4440      	add	r0, r8
 801846a:	4622      	mov	r2, r4
 801846c:	2c00      	cmp	r4, #0
 801846e:	d1ea      	bne.n	8018446 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8018470:	2301      	movs	r3, #1
 8018472:	7da8      	ldrb	r0, [r5, #22]
 8018474:	756b      	strb	r3, [r5, #21]
 8018476:	4058      	eors	r0, r3
 8018478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801847c:	463a      	mov	r2, r7
 801847e:	68a9      	ldr	r1, [r5, #8]
 8018480:	4640      	mov	r0, r8
 8018482:	f001 fe6a 	bl	801a15a <memcpy>
 8018486:	68aa      	ldr	r2, [r5, #8]
 8018488:	692b      	ldr	r3, [r5, #16]
 801848a:	443a      	add	r2, r7
 801848c:	443b      	add	r3, r7
 801848e:	60aa      	str	r2, [r5, #8]
 8018490:	612b      	str	r3, [r5, #16]
 8018492:	e7ed      	b.n	8018470 <ucdr_deserialize_endian_array_uint8_t+0x40>

08018494 <ucdr_serialize_sequence_char>:
 8018494:	b570      	push	{r4, r5, r6, lr}
 8018496:	4615      	mov	r5, r2
 8018498:	460e      	mov	r6, r1
 801849a:	7d01      	ldrb	r1, [r0, #20]
 801849c:	4604      	mov	r4, r0
 801849e:	f7f7 fb2b 	bl	800faf8 <ucdr_serialize_endian_uint32_t>
 80184a2:	b90d      	cbnz	r5, 80184a8 <ucdr_serialize_sequence_char+0x14>
 80184a4:	2001      	movs	r0, #1
 80184a6:	bd70      	pop	{r4, r5, r6, pc}
 80184a8:	7d21      	ldrb	r1, [r4, #20]
 80184aa:	462b      	mov	r3, r5
 80184ac:	4632      	mov	r2, r6
 80184ae:	4620      	mov	r0, r4
 80184b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80184b4:	f7ff bec2 	b.w	801823c <ucdr_serialize_endian_array_char>

080184b8 <ucdr_deserialize_sequence_char>:
 80184b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184bc:	461d      	mov	r5, r3
 80184be:	4616      	mov	r6, r2
 80184c0:	460f      	mov	r7, r1
 80184c2:	461a      	mov	r2, r3
 80184c4:	7d01      	ldrb	r1, [r0, #20]
 80184c6:	4604      	mov	r4, r0
 80184c8:	f7f7 fc3e 	bl	800fd48 <ucdr_deserialize_endian_uint32_t>
 80184cc:	682b      	ldr	r3, [r5, #0]
 80184ce:	429e      	cmp	r6, r3
 80184d0:	bf3c      	itt	cc
 80184d2:	2201      	movcc	r2, #1
 80184d4:	75a2      	strbcc	r2, [r4, #22]
 80184d6:	b913      	cbnz	r3, 80184de <ucdr_deserialize_sequence_char+0x26>
 80184d8:	2001      	movs	r0, #1
 80184da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184de:	7d21      	ldrb	r1, [r4, #20]
 80184e0:	463a      	mov	r2, r7
 80184e2:	4620      	mov	r0, r4
 80184e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80184e8:	f7ff beda 	b.w	80182a0 <ucdr_deserialize_endian_array_char>

080184ec <ucdr_serialize_sequence_uint8_t>:
 80184ec:	b570      	push	{r4, r5, r6, lr}
 80184ee:	4615      	mov	r5, r2
 80184f0:	460e      	mov	r6, r1
 80184f2:	7d01      	ldrb	r1, [r0, #20]
 80184f4:	4604      	mov	r4, r0
 80184f6:	f7f7 faff 	bl	800faf8 <ucdr_serialize_endian_uint32_t>
 80184fa:	b90d      	cbnz	r5, 8018500 <ucdr_serialize_sequence_uint8_t+0x14>
 80184fc:	2001      	movs	r0, #1
 80184fe:	bd70      	pop	{r4, r5, r6, pc}
 8018500:	7d21      	ldrb	r1, [r4, #20]
 8018502:	462b      	mov	r3, r5
 8018504:	4632      	mov	r2, r6
 8018506:	4620      	mov	r0, r4
 8018508:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801850c:	f7ff bf2c 	b.w	8018368 <ucdr_serialize_endian_array_uint8_t>

08018510 <ucdr_deserialize_sequence_uint8_t>:
 8018510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018514:	461d      	mov	r5, r3
 8018516:	4616      	mov	r6, r2
 8018518:	460f      	mov	r7, r1
 801851a:	461a      	mov	r2, r3
 801851c:	7d01      	ldrb	r1, [r0, #20]
 801851e:	4604      	mov	r4, r0
 8018520:	f7f7 fc12 	bl	800fd48 <ucdr_deserialize_endian_uint32_t>
 8018524:	682b      	ldr	r3, [r5, #0]
 8018526:	429e      	cmp	r6, r3
 8018528:	bf3c      	itt	cc
 801852a:	2201      	movcc	r2, #1
 801852c:	75a2      	strbcc	r2, [r4, #22]
 801852e:	b913      	cbnz	r3, 8018536 <ucdr_deserialize_sequence_uint8_t+0x26>
 8018530:	2001      	movs	r0, #1
 8018532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018536:	7d21      	ldrb	r1, [r4, #20]
 8018538:	463a      	mov	r2, r7
 801853a:	4620      	mov	r0, r4
 801853c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018540:	f7ff bf76 	b.w	8018430 <ucdr_deserialize_endian_array_uint8_t>

08018544 <ucdr_serialize_string>:
 8018544:	b510      	push	{r4, lr}
 8018546:	b082      	sub	sp, #8
 8018548:	4604      	mov	r4, r0
 801854a:	4608      	mov	r0, r1
 801854c:	9101      	str	r1, [sp, #4]
 801854e:	f7e7 fe71 	bl	8000234 <strlen>
 8018552:	9901      	ldr	r1, [sp, #4]
 8018554:	1c42      	adds	r2, r0, #1
 8018556:	4620      	mov	r0, r4
 8018558:	b002      	add	sp, #8
 801855a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801855e:	f7ff bf99 	b.w	8018494 <ucdr_serialize_sequence_char>
 8018562:	bf00      	nop

08018564 <ucdr_deserialize_string>:
 8018564:	b500      	push	{lr}
 8018566:	b083      	sub	sp, #12
 8018568:	ab01      	add	r3, sp, #4
 801856a:	f7ff ffa5 	bl	80184b8 <ucdr_deserialize_sequence_char>
 801856e:	b003      	add	sp, #12
 8018570:	f85d fb04 	ldr.w	pc, [sp], #4

08018574 <uxr_init_input_best_effort_stream>:
 8018574:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018578:	8003      	strh	r3, [r0, #0]
 801857a:	4770      	bx	lr

0801857c <uxr_reset_input_best_effort_stream>:
 801857c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018580:	8003      	strh	r3, [r0, #0]
 8018582:	4770      	bx	lr

08018584 <uxr_receive_best_effort_message>:
 8018584:	b538      	push	{r3, r4, r5, lr}
 8018586:	4604      	mov	r4, r0
 8018588:	8800      	ldrh	r0, [r0, #0]
 801858a:	460d      	mov	r5, r1
 801858c:	f000 fd42 	bl	8019014 <uxr_seq_num_cmp>
 8018590:	4603      	mov	r3, r0
 8018592:	2b00      	cmp	r3, #0
 8018594:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8018598:	bfb8      	it	lt
 801859a:	8025      	strhlt	r5, [r4, #0]
 801859c:	bd38      	pop	{r3, r4, r5, pc}
 801859e:	bf00      	nop

080185a0 <on_full_input_buffer>:
 80185a0:	b570      	push	{r4, r5, r6, lr}
 80185a2:	4605      	mov	r5, r0
 80185a4:	460c      	mov	r4, r1
 80185a6:	682b      	ldr	r3, [r5, #0]
 80185a8:	6809      	ldr	r1, [r1, #0]
 80185aa:	8920      	ldrh	r0, [r4, #8]
 80185ac:	6862      	ldr	r2, [r4, #4]
 80185ae:	fbb2 f2f0 	udiv	r2, r2, r0
 80185b2:	eba3 0c01 	sub.w	ip, r3, r1
 80185b6:	fbbc fcf2 	udiv	ip, ip, r2
 80185ba:	f10c 0c01 	add.w	ip, ip, #1
 80185be:	fa1f f38c 	uxth.w	r3, ip
 80185c2:	fbb3 f6f0 	udiv	r6, r3, r0
 80185c6:	fb00 3316 	mls	r3, r0, r6, r3
 80185ca:	b29b      	uxth	r3, r3
 80185cc:	fb02 f303 	mul.w	r3, r2, r3
 80185d0:	1d18      	adds	r0, r3, #4
 80185d2:	4408      	add	r0, r1
 80185d4:	7d26      	ldrb	r6, [r4, #20]
 80185d6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80185da:	b116      	cbz	r6, 80185e2 <on_full_input_buffer+0x42>
 80185dc:	2600      	movs	r6, #0
 80185de:	f840 6c04 	str.w	r6, [r0, #-4]
 80185e2:	2a03      	cmp	r2, #3
 80185e4:	d801      	bhi.n	80185ea <on_full_input_buffer+0x4a>
 80185e6:	2001      	movs	r0, #1
 80185e8:	bd70      	pop	{r4, r5, r6, pc}
 80185ea:	3308      	adds	r3, #8
 80185ec:	4419      	add	r1, r3
 80185ee:	4628      	mov	r0, r5
 80185f0:	692b      	ldr	r3, [r5, #16]
 80185f2:	3a04      	subs	r2, #4
 80185f4:	f7f7 ff76 	bl	80104e4 <ucdr_init_buffer_origin>
 80185f8:	4628      	mov	r0, r5
 80185fa:	4903      	ldr	r1, [pc, #12]	@ (8018608 <on_full_input_buffer+0x68>)
 80185fc:	4622      	mov	r2, r4
 80185fe:	f7f7 ff4d 	bl	801049c <ucdr_set_on_full_buffer_callback>
 8018602:	2000      	movs	r0, #0
 8018604:	bd70      	pop	{r4, r5, r6, pc}
 8018606:	bf00      	nop
 8018608:	080185a1 	.word	0x080185a1

0801860c <uxr_init_input_reliable_stream>:
 801860c:	b500      	push	{lr}
 801860e:	e9c0 1200 	strd	r1, r2, [r0]
 8018612:	f04f 0e00 	mov.w	lr, #0
 8018616:	9a01      	ldr	r2, [sp, #4]
 8018618:	8103      	strh	r3, [r0, #8]
 801861a:	6102      	str	r2, [r0, #16]
 801861c:	f880 e014 	strb.w	lr, [r0, #20]
 8018620:	b1d3      	cbz	r3, 8018658 <uxr_init_input_reliable_stream+0x4c>
 8018622:	f8c1 e000 	str.w	lr, [r1]
 8018626:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801862a:	f1bc 0f01 	cmp.w	ip, #1
 801862e:	d913      	bls.n	8018658 <uxr_init_input_reliable_stream+0x4c>
 8018630:	2301      	movs	r3, #1
 8018632:	fbb3 f1fc 	udiv	r1, r3, ip
 8018636:	fb0c 3111 	mls	r1, ip, r1, r3
 801863a:	b289      	uxth	r1, r1
 801863c:	6842      	ldr	r2, [r0, #4]
 801863e:	fbb2 f2fc 	udiv	r2, r2, ip
 8018642:	fb01 f202 	mul.w	r2, r1, r2
 8018646:	6801      	ldr	r1, [r0, #0]
 8018648:	f841 e002 	str.w	lr, [r1, r2]
 801864c:	3301      	adds	r3, #1
 801864e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018652:	b29b      	uxth	r3, r3
 8018654:	459c      	cmp	ip, r3
 8018656:	d8ec      	bhi.n	8018632 <uxr_init_input_reliable_stream+0x26>
 8018658:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801865c:	60c3      	str	r3, [r0, #12]
 801865e:	f85d fb04 	ldr.w	pc, [sp], #4
 8018662:	bf00      	nop

08018664 <uxr_reset_input_reliable_stream>:
 8018664:	8901      	ldrh	r1, [r0, #8]
 8018666:	b1e9      	cbz	r1, 80186a4 <uxr_reset_input_reliable_stream+0x40>
 8018668:	f04f 0c00 	mov.w	ip, #0
 801866c:	b500      	push	{lr}
 801866e:	4663      	mov	r3, ip
 8018670:	46e6      	mov	lr, ip
 8018672:	fbb3 f2f1 	udiv	r2, r3, r1
 8018676:	fb01 3312 	mls	r3, r1, r2, r3
 801867a:	b29b      	uxth	r3, r3
 801867c:	6842      	ldr	r2, [r0, #4]
 801867e:	fbb2 f2f1 	udiv	r2, r2, r1
 8018682:	fb02 f303 	mul.w	r3, r2, r3
 8018686:	6802      	ldr	r2, [r0, #0]
 8018688:	f842 e003 	str.w	lr, [r2, r3]
 801868c:	f10c 0c01 	add.w	ip, ip, #1
 8018690:	8901      	ldrh	r1, [r0, #8]
 8018692:	fa1f f38c 	uxth.w	r3, ip
 8018696:	4299      	cmp	r1, r3
 8018698:	d8eb      	bhi.n	8018672 <uxr_reset_input_reliable_stream+0xe>
 801869a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801869e:	60c3      	str	r3, [r0, #12]
 80186a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80186a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80186a8:	60c3      	str	r3, [r0, #12]
 80186aa:	4770      	bx	lr

080186ac <uxr_receive_reliable_message>:
 80186ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80186b0:	4604      	mov	r4, r0
 80186b2:	460d      	mov	r5, r1
 80186b4:	8901      	ldrh	r1, [r0, #8]
 80186b6:	8980      	ldrh	r0, [r0, #12]
 80186b8:	4690      	mov	r8, r2
 80186ba:	461f      	mov	r7, r3
 80186bc:	f000 fca2 	bl	8019004 <uxr_seq_num_add>
 80186c0:	4629      	mov	r1, r5
 80186c2:	4606      	mov	r6, r0
 80186c4:	89a0      	ldrh	r0, [r4, #12]
 80186c6:	f000 fca5 	bl	8019014 <uxr_seq_num_cmp>
 80186ca:	2800      	cmp	r0, #0
 80186cc:	db0a      	blt.n	80186e4 <uxr_receive_reliable_message+0x38>
 80186ce:	2600      	movs	r6, #0
 80186d0:	89e0      	ldrh	r0, [r4, #14]
 80186d2:	4629      	mov	r1, r5
 80186d4:	f000 fc9e 	bl	8019014 <uxr_seq_num_cmp>
 80186d8:	2800      	cmp	r0, #0
 80186da:	da00      	bge.n	80186de <uxr_receive_reliable_message+0x32>
 80186dc:	81e5      	strh	r5, [r4, #14]
 80186de:	4630      	mov	r0, r6
 80186e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80186e4:	4630      	mov	r0, r6
 80186e6:	4629      	mov	r1, r5
 80186e8:	f000 fc94 	bl	8019014 <uxr_seq_num_cmp>
 80186ec:	2800      	cmp	r0, #0
 80186ee:	dbee      	blt.n	80186ce <uxr_receive_reliable_message+0x22>
 80186f0:	6923      	ldr	r3, [r4, #16]
 80186f2:	4640      	mov	r0, r8
 80186f4:	4798      	blx	r3
 80186f6:	2101      	movs	r1, #1
 80186f8:	4681      	mov	r9, r0
 80186fa:	89a0      	ldrh	r0, [r4, #12]
 80186fc:	f000 fc82 	bl	8019004 <uxr_seq_num_add>
 8018700:	f1b9 0f00 	cmp.w	r9, #0
 8018704:	d101      	bne.n	801870a <uxr_receive_reliable_message+0x5e>
 8018706:	4285      	cmp	r5, r0
 8018708:	d047      	beq.n	801879a <uxr_receive_reliable_message+0xee>
 801870a:	8922      	ldrh	r2, [r4, #8]
 801870c:	fbb5 f0f2 	udiv	r0, r5, r2
 8018710:	fb02 5010 	mls	r0, r2, r0, r5
 8018714:	b280      	uxth	r0, r0
 8018716:	6863      	ldr	r3, [r4, #4]
 8018718:	fbb3 f3f2 	udiv	r3, r3, r2
 801871c:	fb00 f303 	mul.w	r3, r0, r3
 8018720:	6820      	ldr	r0, [r4, #0]
 8018722:	3304      	adds	r3, #4
 8018724:	4418      	add	r0, r3
 8018726:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801872a:	2b00      	cmp	r3, #0
 801872c:	d1cf      	bne.n	80186ce <uxr_receive_reliable_message+0x22>
 801872e:	4641      	mov	r1, r8
 8018730:	463a      	mov	r2, r7
 8018732:	f001 fd12 	bl	801a15a <memcpy>
 8018736:	8921      	ldrh	r1, [r4, #8]
 8018738:	fbb5 f2f1 	udiv	r2, r5, r1
 801873c:	fb01 5212 	mls	r2, r1, r2, r5
 8018740:	b292      	uxth	r2, r2
 8018742:	6863      	ldr	r3, [r4, #4]
 8018744:	fbb3 f3f1 	udiv	r3, r3, r1
 8018748:	fb02 f303 	mul.w	r3, r2, r3
 801874c:	6822      	ldr	r2, [r4, #0]
 801874e:	50d7      	str	r7, [r2, r3]
 8018750:	9a08      	ldr	r2, [sp, #32]
 8018752:	2301      	movs	r3, #1
 8018754:	7013      	strb	r3, [r2, #0]
 8018756:	f1b9 0f00 	cmp.w	r9, #0
 801875a:	d0b8      	beq.n	80186ce <uxr_receive_reliable_message+0x22>
 801875c:	89a6      	ldrh	r6, [r4, #12]
 801875e:	4630      	mov	r0, r6
 8018760:	2101      	movs	r1, #1
 8018762:	f000 fc4f 	bl	8019004 <uxr_seq_num_add>
 8018766:	8922      	ldrh	r2, [r4, #8]
 8018768:	6863      	ldr	r3, [r4, #4]
 801876a:	fbb3 f3f2 	udiv	r3, r3, r2
 801876e:	4606      	mov	r6, r0
 8018770:	fbb0 f0f2 	udiv	r0, r0, r2
 8018774:	fb02 6010 	mls	r0, r2, r0, r6
 8018778:	b280      	uxth	r0, r0
 801877a:	fb00 f303 	mul.w	r3, r0, r3
 801877e:	6820      	ldr	r0, [r4, #0]
 8018780:	3304      	adds	r3, #4
 8018782:	4418      	add	r0, r3
 8018784:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018788:	2b00      	cmp	r3, #0
 801878a:	d0a0      	beq.n	80186ce <uxr_receive_reliable_message+0x22>
 801878c:	6923      	ldr	r3, [r4, #16]
 801878e:	4798      	blx	r3
 8018790:	2802      	cmp	r0, #2
 8018792:	d008      	beq.n	80187a6 <uxr_receive_reliable_message+0xfa>
 8018794:	2801      	cmp	r0, #1
 8018796:	d0e2      	beq.n	801875e <uxr_receive_reliable_message+0xb2>
 8018798:	e799      	b.n	80186ce <uxr_receive_reliable_message+0x22>
 801879a:	9b08      	ldr	r3, [sp, #32]
 801879c:	81a5      	strh	r5, [r4, #12]
 801879e:	2601      	movs	r6, #1
 80187a0:	f883 9000 	strb.w	r9, [r3]
 80187a4:	e794      	b.n	80186d0 <uxr_receive_reliable_message+0x24>
 80187a6:	2601      	movs	r6, #1
 80187a8:	e792      	b.n	80186d0 <uxr_receive_reliable_message+0x24>
 80187aa:	bf00      	nop

080187ac <uxr_next_input_reliable_buffer_available>:
 80187ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80187b0:	4604      	mov	r4, r0
 80187b2:	460f      	mov	r7, r1
 80187b4:	8980      	ldrh	r0, [r0, #12]
 80187b6:	2101      	movs	r1, #1
 80187b8:	4690      	mov	r8, r2
 80187ba:	f000 fc23 	bl	8019004 <uxr_seq_num_add>
 80187be:	8922      	ldrh	r2, [r4, #8]
 80187c0:	fbb0 f6f2 	udiv	r6, r0, r2
 80187c4:	fb02 0616 	mls	r6, r2, r6, r0
 80187c8:	b2b6      	uxth	r6, r6
 80187ca:	6863      	ldr	r3, [r4, #4]
 80187cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80187d0:	fb06 f303 	mul.w	r3, r6, r3
 80187d4:	6826      	ldr	r6, [r4, #0]
 80187d6:	3304      	adds	r3, #4
 80187d8:	441e      	add	r6, r3
 80187da:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80187de:	f1b9 0f00 	cmp.w	r9, #0
 80187e2:	d023      	beq.n	801882c <uxr_next_input_reliable_buffer_available+0x80>
 80187e4:	6923      	ldr	r3, [r4, #16]
 80187e6:	4605      	mov	r5, r0
 80187e8:	4630      	mov	r0, r6
 80187ea:	4798      	blx	r3
 80187ec:	4682      	mov	sl, r0
 80187ee:	b300      	cbz	r0, 8018832 <uxr_next_input_reliable_buffer_available+0x86>
 80187f0:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80187f4:	2101      	movs	r1, #1
 80187f6:	4650      	mov	r0, sl
 80187f8:	f000 fc04 	bl	8019004 <uxr_seq_num_add>
 80187fc:	8921      	ldrh	r1, [r4, #8]
 80187fe:	fbb0 f2f1 	udiv	r2, r0, r1
 8018802:	4682      	mov	sl, r0
 8018804:	fb01 0212 	mls	r2, r1, r2, r0
 8018808:	e9d4 0300 	ldrd	r0, r3, [r4]
 801880c:	b292      	uxth	r2, r2
 801880e:	fbb3 f3f1 	udiv	r3, r3, r1
 8018812:	fb02 f303 	mul.w	r3, r2, r3
 8018816:	3304      	adds	r3, #4
 8018818:	4418      	add	r0, r3
 801881a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801881e:	b12b      	cbz	r3, 801882c <uxr_next_input_reliable_buffer_available+0x80>
 8018820:	6923      	ldr	r3, [r4, #16]
 8018822:	4798      	blx	r3
 8018824:	2802      	cmp	r0, #2
 8018826:	d01b      	beq.n	8018860 <uxr_next_input_reliable_buffer_available+0xb4>
 8018828:	2801      	cmp	r0, #1
 801882a:	d0e3      	beq.n	80187f4 <uxr_next_input_reliable_buffer_available+0x48>
 801882c:	2000      	movs	r0, #0
 801882e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018832:	464a      	mov	r2, r9
 8018834:	4631      	mov	r1, r6
 8018836:	4638      	mov	r0, r7
 8018838:	f7f7 fe5c 	bl	80104f4 <ucdr_init_buffer>
 801883c:	8921      	ldrh	r1, [r4, #8]
 801883e:	fbb5 f2f1 	udiv	r2, r5, r1
 8018842:	fb01 5212 	mls	r2, r1, r2, r5
 8018846:	b292      	uxth	r2, r2
 8018848:	6863      	ldr	r3, [r4, #4]
 801884a:	fbb3 f3f1 	udiv	r3, r3, r1
 801884e:	fb02 f303 	mul.w	r3, r2, r3
 8018852:	6822      	ldr	r2, [r4, #0]
 8018854:	f842 a003 	str.w	sl, [r2, r3]
 8018858:	2001      	movs	r0, #1
 801885a:	81a5      	strh	r5, [r4, #12]
 801885c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018860:	8920      	ldrh	r0, [r4, #8]
 8018862:	fbb5 f3f0 	udiv	r3, r5, r0
 8018866:	fb00 5513 	mls	r5, r0, r3, r5
 801886a:	b2ad      	uxth	r5, r5
 801886c:	6863      	ldr	r3, [r4, #4]
 801886e:	fbb3 f3f0 	udiv	r3, r3, r0
 8018872:	fb03 f505 	mul.w	r5, r3, r5
 8018876:	6823      	ldr	r3, [r4, #0]
 8018878:	2000      	movs	r0, #0
 801887a:	5158      	str	r0, [r3, r5]
 801887c:	eb06 0108 	add.w	r1, r6, r8
 8018880:	eba9 0208 	sub.w	r2, r9, r8
 8018884:	4638      	mov	r0, r7
 8018886:	f7f7 fe35 	bl	80104f4 <ucdr_init_buffer>
 801888a:	4638      	mov	r0, r7
 801888c:	4903      	ldr	r1, [pc, #12]	@ (801889c <uxr_next_input_reliable_buffer_available+0xf0>)
 801888e:	4622      	mov	r2, r4
 8018890:	f7f7 fe04 	bl	801049c <ucdr_set_on_full_buffer_callback>
 8018894:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8018898:	2001      	movs	r0, #1
 801889a:	e7c8      	b.n	801882e <uxr_next_input_reliable_buffer_available+0x82>
 801889c:	080185a1 	.word	0x080185a1

080188a0 <uxr_process_heartbeat>:
 80188a0:	b538      	push	{r3, r4, r5, lr}
 80188a2:	4611      	mov	r1, r2
 80188a4:	4604      	mov	r4, r0
 80188a6:	89c0      	ldrh	r0, [r0, #14]
 80188a8:	4615      	mov	r5, r2
 80188aa:	f000 fbb3 	bl	8019014 <uxr_seq_num_cmp>
 80188ae:	2800      	cmp	r0, #0
 80188b0:	bfb8      	it	lt
 80188b2:	81e5      	strhlt	r5, [r4, #14]
 80188b4:	bd38      	pop	{r3, r4, r5, pc}
 80188b6:	bf00      	nop

080188b8 <uxr_compute_acknack>:
 80188b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80188bc:	8903      	ldrh	r3, [r0, #8]
 80188be:	8985      	ldrh	r5, [r0, #12]
 80188c0:	4604      	mov	r4, r0
 80188c2:	460e      	mov	r6, r1
 80188c4:	b1d3      	cbz	r3, 80188fc <uxr_compute_acknack+0x44>
 80188c6:	4628      	mov	r0, r5
 80188c8:	2701      	movs	r7, #1
 80188ca:	e003      	b.n	80188d4 <uxr_compute_acknack+0x1c>
 80188cc:	4567      	cmp	r7, ip
 80188ce:	d215      	bcs.n	80188fc <uxr_compute_acknack+0x44>
 80188d0:	89a0      	ldrh	r0, [r4, #12]
 80188d2:	3701      	adds	r7, #1
 80188d4:	b2b9      	uxth	r1, r7
 80188d6:	f000 fb95 	bl	8019004 <uxr_seq_num_add>
 80188da:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80188de:	fbb0 f3fc 	udiv	r3, r0, ip
 80188e2:	fb0c 0313 	mls	r3, ip, r3, r0
 80188e6:	b29a      	uxth	r2, r3
 80188e8:	e9d4 1300 	ldrd	r1, r3, [r4]
 80188ec:	fbb3 f3fc 	udiv	r3, r3, ip
 80188f0:	fb02 f303 	mul.w	r3, r2, r3
 80188f4:	58cb      	ldr	r3, [r1, r3]
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	d1e8      	bne.n	80188cc <uxr_compute_acknack+0x14>
 80188fa:	4605      	mov	r5, r0
 80188fc:	8035      	strh	r5, [r6, #0]
 80188fe:	2101      	movs	r1, #1
 8018900:	4628      	mov	r0, r5
 8018902:	89e7      	ldrh	r7, [r4, #14]
 8018904:	f000 fb82 	bl	801900c <uxr_seq_num_sub>
 8018908:	4601      	mov	r1, r0
 801890a:	4638      	mov	r0, r7
 801890c:	f000 fb7e 	bl	801900c <uxr_seq_num_sub>
 8018910:	4605      	mov	r5, r0
 8018912:	b318      	cbz	r0, 801895c <uxr_compute_acknack+0xa4>
 8018914:	f04f 0900 	mov.w	r9, #0
 8018918:	464f      	mov	r7, r9
 801891a:	f04f 0801 	mov.w	r8, #1
 801891e:	fa1f f189 	uxth.w	r1, r9
 8018922:	8830      	ldrh	r0, [r6, #0]
 8018924:	f000 fb6e 	bl	8019004 <uxr_seq_num_add>
 8018928:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801892c:	fbb0 f3fc 	udiv	r3, r0, ip
 8018930:	e9d4 1200 	ldrd	r1, r2, [r4]
 8018934:	fb03 001c 	mls	r0, r3, ip, r0
 8018938:	b283      	uxth	r3, r0
 801893a:	fbb2 f2fc 	udiv	r2, r2, ip
 801893e:	fb02 f303 	mul.w	r3, r2, r3
 8018942:	fa08 f209 	lsl.w	r2, r8, r9
 8018946:	58cb      	ldr	r3, [r1, r3]
 8018948:	f109 0901 	add.w	r9, r9, #1
 801894c:	b90b      	cbnz	r3, 8018952 <uxr_compute_acknack+0x9a>
 801894e:	4317      	orrs	r7, r2
 8018950:	b2bf      	uxth	r7, r7
 8018952:	454d      	cmp	r5, r9
 8018954:	d1e3      	bne.n	801891e <uxr_compute_acknack+0x66>
 8018956:	4638      	mov	r0, r7
 8018958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801895c:	4607      	mov	r7, r0
 801895e:	4638      	mov	r0, r7
 8018960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018964 <uxr_init_output_best_effort_stream>:
 8018964:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8018968:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801896c:	6001      	str	r1, [r0, #0]
 801896e:	7303      	strb	r3, [r0, #12]
 8018970:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8018974:	4770      	bx	lr
 8018976:	bf00      	nop

08018978 <uxr_reset_output_best_effort_stream>:
 8018978:	7b02      	ldrb	r2, [r0, #12]
 801897a:	6042      	str	r2, [r0, #4]
 801897c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018980:	81c3      	strh	r3, [r0, #14]
 8018982:	4770      	bx	lr

08018984 <uxr_prepare_best_effort_buffer_to_write>:
 8018984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018986:	4604      	mov	r4, r0
 8018988:	b083      	sub	sp, #12
 801898a:	6840      	ldr	r0, [r0, #4]
 801898c:	460d      	mov	r5, r1
 801898e:	4616      	mov	r6, r2
 8018990:	f7fa f8e0 	bl	8012b54 <uxr_submessage_padding>
 8018994:	6863      	ldr	r3, [r4, #4]
 8018996:	4418      	add	r0, r3
 8018998:	68a3      	ldr	r3, [r4, #8]
 801899a:	1942      	adds	r2, r0, r5
 801899c:	4293      	cmp	r3, r2
 801899e:	bf2c      	ite	cs
 80189a0:	2701      	movcs	r7, #1
 80189a2:	2700      	movcc	r7, #0
 80189a4:	d202      	bcs.n	80189ac <uxr_prepare_best_effort_buffer_to_write+0x28>
 80189a6:	4638      	mov	r0, r7
 80189a8:	b003      	add	sp, #12
 80189aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80189ac:	9000      	str	r0, [sp, #0]
 80189ae:	6821      	ldr	r1, [r4, #0]
 80189b0:	4630      	mov	r0, r6
 80189b2:	2300      	movs	r3, #0
 80189b4:	f7f7 fd8c 	bl	80104d0 <ucdr_init_buffer_origin_offset>
 80189b8:	6861      	ldr	r1, [r4, #4]
 80189ba:	4638      	mov	r0, r7
 80189bc:	4429      	add	r1, r5
 80189be:	6061      	str	r1, [r4, #4]
 80189c0:	b003      	add	sp, #12
 80189c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080189c4 <uxr_prepare_best_effort_buffer_to_send>:
 80189c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189c8:	4604      	mov	r4, r0
 80189ca:	461d      	mov	r5, r3
 80189cc:	6840      	ldr	r0, [r0, #4]
 80189ce:	7b23      	ldrb	r3, [r4, #12]
 80189d0:	4298      	cmp	r0, r3
 80189d2:	bf8c      	ite	hi
 80189d4:	2601      	movhi	r6, #1
 80189d6:	2600      	movls	r6, #0
 80189d8:	d802      	bhi.n	80189e0 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80189da:	4630      	mov	r0, r6
 80189dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80189e0:	4688      	mov	r8, r1
 80189e2:	89e0      	ldrh	r0, [r4, #14]
 80189e4:	2101      	movs	r1, #1
 80189e6:	4617      	mov	r7, r2
 80189e8:	f000 fb0c 	bl	8019004 <uxr_seq_num_add>
 80189ec:	6823      	ldr	r3, [r4, #0]
 80189ee:	81e0      	strh	r0, [r4, #14]
 80189f0:	8028      	strh	r0, [r5, #0]
 80189f2:	f8c8 3000 	str.w	r3, [r8]
 80189f6:	6863      	ldr	r3, [r4, #4]
 80189f8:	603b      	str	r3, [r7, #0]
 80189fa:	7b23      	ldrb	r3, [r4, #12]
 80189fc:	6063      	str	r3, [r4, #4]
 80189fe:	4630      	mov	r0, r6
 8018a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018a04 <on_full_output_buffer>:
 8018a04:	b538      	push	{r3, r4, r5, lr}
 8018a06:	6802      	ldr	r2, [r0, #0]
 8018a08:	460c      	mov	r4, r1
 8018a0a:	6809      	ldr	r1, [r1, #0]
 8018a0c:	8923      	ldrh	r3, [r4, #8]
 8018a0e:	eba2 0c01 	sub.w	ip, r2, r1
 8018a12:	6862      	ldr	r2, [r4, #4]
 8018a14:	fbb2 f2f3 	udiv	r2, r2, r3
 8018a18:	fbbc fcf2 	udiv	ip, ip, r2
 8018a1c:	f10c 0c01 	add.w	ip, ip, #1
 8018a20:	fa1f fc8c 	uxth.w	ip, ip
 8018a24:	fbbc fef3 	udiv	lr, ip, r3
 8018a28:	fb03 c31e 	mls	r3, r3, lr, ip
 8018a2c:	b29b      	uxth	r3, r3
 8018a2e:	fb02 f303 	mul.w	r3, r2, r3
 8018a32:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8018a36:	58ca      	ldr	r2, [r1, r3]
 8018a38:	4463      	add	r3, ip
 8018a3a:	eba2 020c 	sub.w	r2, r2, ip
 8018a3e:	3308      	adds	r3, #8
 8018a40:	4605      	mov	r5, r0
 8018a42:	4419      	add	r1, r3
 8018a44:	3a04      	subs	r2, #4
 8018a46:	6903      	ldr	r3, [r0, #16]
 8018a48:	f7f7 fd4c 	bl	80104e4 <ucdr_init_buffer_origin>
 8018a4c:	4628      	mov	r0, r5
 8018a4e:	4903      	ldr	r1, [pc, #12]	@ (8018a5c <on_full_output_buffer+0x58>)
 8018a50:	4622      	mov	r2, r4
 8018a52:	f7f7 fd23 	bl	801049c <ucdr_set_on_full_buffer_callback>
 8018a56:	2000      	movs	r0, #0
 8018a58:	bd38      	pop	{r3, r4, r5, pc}
 8018a5a:	bf00      	nop
 8018a5c:	08018a05 	.word	0x08018a05

08018a60 <uxr_init_output_reliable_stream>:
 8018a60:	b410      	push	{r4}
 8018a62:	f89d c004 	ldrb.w	ip, [sp, #4]
 8018a66:	8103      	strh	r3, [r0, #8]
 8018a68:	e9c0 1200 	strd	r1, r2, [r0]
 8018a6c:	f880 c00c 	strb.w	ip, [r0, #12]
 8018a70:	b1d3      	cbz	r3, 8018aa8 <uxr_init_output_reliable_stream+0x48>
 8018a72:	f8c1 c000 	str.w	ip, [r1]
 8018a76:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018a7a:	f1bc 0f01 	cmp.w	ip, #1
 8018a7e:	d913      	bls.n	8018aa8 <uxr_init_output_reliable_stream+0x48>
 8018a80:	2301      	movs	r3, #1
 8018a82:	fbb3 f1fc 	udiv	r1, r3, ip
 8018a86:	fb0c 3111 	mls	r1, ip, r1, r3
 8018a8a:	b289      	uxth	r1, r1
 8018a8c:	6842      	ldr	r2, [r0, #4]
 8018a8e:	6804      	ldr	r4, [r0, #0]
 8018a90:	fbb2 f2fc 	udiv	r2, r2, ip
 8018a94:	fb01 f202 	mul.w	r2, r1, r2
 8018a98:	7b01      	ldrb	r1, [r0, #12]
 8018a9a:	50a1      	str	r1, [r4, r2]
 8018a9c:	3301      	adds	r3, #1
 8018a9e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018aa2:	b29b      	uxth	r3, r3
 8018aa4:	459c      	cmp	ip, r3
 8018aa6:	d8ec      	bhi.n	8018a82 <uxr_init_output_reliable_stream+0x22>
 8018aa8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018aac:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018ab0:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8018ab4:	4905      	ldr	r1, [pc, #20]	@ (8018acc <uxr_init_output_reliable_stream+0x6c>)
 8018ab6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018aba:	f8c0 100e 	str.w	r1, [r0, #14]
 8018abe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018ac2:	2300      	movs	r3, #0
 8018ac4:	8242      	strh	r2, [r0, #18]
 8018ac6:	8403      	strh	r3, [r0, #32]
 8018ac8:	4770      	bx	lr
 8018aca:	bf00      	nop
 8018acc:	ffff0000 	.word	0xffff0000

08018ad0 <uxr_reset_output_reliable_stream>:
 8018ad0:	8901      	ldrh	r1, [r0, #8]
 8018ad2:	b1b1      	cbz	r1, 8018b02 <uxr_reset_output_reliable_stream+0x32>
 8018ad4:	f04f 0c00 	mov.w	ip, #0
 8018ad8:	4663      	mov	r3, ip
 8018ada:	fbb3 f2f1 	udiv	r2, r3, r1
 8018ade:	fb01 3312 	mls	r3, r1, r2, r3
 8018ae2:	b29b      	uxth	r3, r3
 8018ae4:	6842      	ldr	r2, [r0, #4]
 8018ae6:	fbb2 f2f1 	udiv	r2, r2, r1
 8018aea:	6801      	ldr	r1, [r0, #0]
 8018aec:	fb02 f303 	mul.w	r3, r2, r3
 8018af0:	7b02      	ldrb	r2, [r0, #12]
 8018af2:	50ca      	str	r2, [r1, r3]
 8018af4:	f10c 0c01 	add.w	ip, ip, #1
 8018af8:	8901      	ldrh	r1, [r0, #8]
 8018afa:	fa1f f38c 	uxth.w	r3, ip
 8018afe:	4299      	cmp	r1, r3
 8018b00:	d8eb      	bhi.n	8018ada <uxr_reset_output_reliable_stream+0xa>
 8018b02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018b06:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018b0a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8018b0e:	4904      	ldr	r1, [pc, #16]	@ (8018b20 <uxr_reset_output_reliable_stream+0x50>)
 8018b10:	f8c0 100e 	str.w	r1, [r0, #14]
 8018b14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018b18:	2300      	movs	r3, #0
 8018b1a:	8242      	strh	r2, [r0, #18]
 8018b1c:	8403      	strh	r3, [r0, #32]
 8018b1e:	4770      	bx	lr
 8018b20:	ffff0000 	.word	0xffff0000

08018b24 <uxr_prepare_reliable_buffer_to_write>:
 8018b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b28:	4604      	mov	r4, r0
 8018b2a:	b091      	sub	sp, #68	@ 0x44
 8018b2c:	8900      	ldrh	r0, [r0, #8]
 8018b2e:	89e6      	ldrh	r6, [r4, #14]
 8018b30:	6823      	ldr	r3, [r4, #0]
 8018b32:	9204      	str	r2, [sp, #16]
 8018b34:	fbb6 f2f0 	udiv	r2, r6, r0
 8018b38:	fb00 6212 	mls	r2, r0, r2, r6
 8018b3c:	b292      	uxth	r2, r2
 8018b3e:	6865      	ldr	r5, [r4, #4]
 8018b40:	fbb5 f5f0 	udiv	r5, r5, r0
 8018b44:	fb05 3202 	mla	r2, r5, r2, r3
 8018b48:	3204      	adds	r2, #4
 8018b4a:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8018b4e:	f894 900c 	ldrb.w	r9, [r4, #12]
 8018b52:	9203      	str	r2, [sp, #12]
 8018b54:	468b      	mov	fp, r1
 8018b56:	1f2f      	subs	r7, r5, #4
 8018b58:	2800      	cmp	r0, #0
 8018b5a:	f000 814c 	beq.w	8018df6 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8018b5e:	f04f 0c00 	mov.w	ip, #0
 8018b62:	46e2      	mov	sl, ip
 8018b64:	4661      	mov	r1, ip
 8018b66:	fbb1 f2f0 	udiv	r2, r1, r0
 8018b6a:	fb00 1212 	mls	r2, r0, r2, r1
 8018b6e:	b292      	uxth	r2, r2
 8018b70:	fb05 f202 	mul.w	r2, r5, r2
 8018b74:	f10c 0c01 	add.w	ip, ip, #1
 8018b78:	589a      	ldr	r2, [r3, r2]
 8018b7a:	454a      	cmp	r2, r9
 8018b7c:	bf08      	it	eq
 8018b7e:	f10a 0a01 	addeq.w	sl, sl, #1
 8018b82:	fa1f f18c 	uxth.w	r1, ip
 8018b86:	bf08      	it	eq
 8018b88:	fa1f fa8a 	uxtheq.w	sl, sl
 8018b8c:	4281      	cmp	r1, r0
 8018b8e:	d3ea      	bcc.n	8018b66 <uxr_prepare_reliable_buffer_to_write+0x42>
 8018b90:	4640      	mov	r0, r8
 8018b92:	2104      	movs	r1, #4
 8018b94:	f8cd a014 	str.w	sl, [sp, #20]
 8018b98:	f7f7 fcb0 	bl	80104fc <ucdr_alignment>
 8018b9c:	4480      	add	r8, r0
 8018b9e:	eb08 020b 	add.w	r2, r8, fp
 8018ba2:	42ba      	cmp	r2, r7
 8018ba4:	f240 80cd 	bls.w	8018d42 <uxr_prepare_reliable_buffer_to_write+0x21e>
 8018ba8:	7b22      	ldrb	r2, [r4, #12]
 8018baa:	445a      	add	r2, fp
 8018bac:	42ba      	cmp	r2, r7
 8018bae:	f240 80b5 	bls.w	8018d1c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8018bb2:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8018bb6:	33fc      	adds	r3, #252	@ 0xfc
 8018bb8:	b2ba      	uxth	r2, r7
 8018bba:	4413      	add	r3, r2
 8018bbc:	b29b      	uxth	r3, r3
 8018bbe:	fb0a f903 	mul.w	r9, sl, r3
 8018bc2:	45d9      	cmp	r9, fp
 8018bc4:	9305      	str	r3, [sp, #20]
 8018bc6:	9306      	str	r3, [sp, #24]
 8018bc8:	f0c0 80b7 	bcc.w	8018d3a <uxr_prepare_reliable_buffer_to_write+0x216>
 8018bcc:	f108 0304 	add.w	r3, r8, #4
 8018bd0:	42bb      	cmp	r3, r7
 8018bd2:	f080 80db 	bcs.w	8018d8c <uxr_prepare_reliable_buffer_to_write+0x268>
 8018bd6:	f1a2 0904 	sub.w	r9, r2, #4
 8018bda:	eba9 0908 	sub.w	r9, r9, r8
 8018bde:	9b05      	ldr	r3, [sp, #20]
 8018be0:	fa1f f989 	uxth.w	r9, r9
 8018be4:	ebab 0b09 	sub.w	fp, fp, r9
 8018be8:	fbbb f2f3 	udiv	r2, fp, r3
 8018bec:	fb03 b312 	mls	r3, r3, r2, fp
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	f000 80c8 	beq.w	8018d86 <uxr_prepare_reliable_buffer_to_write+0x262>
 8018bf6:	3201      	adds	r2, #1
 8018bf8:	b292      	uxth	r2, r2
 8018bfa:	9306      	str	r3, [sp, #24]
 8018bfc:	4552      	cmp	r2, sl
 8018bfe:	f200 809c 	bhi.w	8018d3a <uxr_prepare_reliable_buffer_to_write+0x216>
 8018c02:	f10d 0b20 	add.w	fp, sp, #32
 8018c06:	2a00      	cmp	r2, #0
 8018c08:	d042      	beq.n	8018c90 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8018c0a:	f8cd 801c 	str.w	r8, [sp, #28]
 8018c0e:	f04f 0a00 	mov.w	sl, #0
 8018c12:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8018c16:	9505      	str	r5, [sp, #20]
 8018c18:	f10d 0b20 	add.w	fp, sp, #32
 8018c1c:	4615      	mov	r5, r2
 8018c1e:	e000      	b.n	8018c22 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8018c20:	46c1      	mov	r9, r8
 8018c22:	8920      	ldrh	r0, [r4, #8]
 8018c24:	fbb6 f2f0 	udiv	r2, r6, r0
 8018c28:	fb00 6112 	mls	r1, r0, r2, r6
 8018c2c:	b28a      	uxth	r2, r1
 8018c2e:	6863      	ldr	r3, [r4, #4]
 8018c30:	fbb3 f1f0 	udiv	r1, r3, r0
 8018c34:	6823      	ldr	r3, [r4, #0]
 8018c36:	fb02 f101 	mul.w	r1, r2, r1
 8018c3a:	3104      	adds	r1, #4
 8018c3c:	4419      	add	r1, r3
 8018c3e:	4658      	mov	r0, fp
 8018c40:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8018c44:	9200      	str	r2, [sp, #0]
 8018c46:	2300      	movs	r3, #0
 8018c48:	463a      	mov	r2, r7
 8018c4a:	f7f7 fc41 	bl	80104d0 <ucdr_init_buffer_origin_offset>
 8018c4e:	464a      	mov	r2, r9
 8018c50:	2300      	movs	r3, #0
 8018c52:	210d      	movs	r1, #13
 8018c54:	4658      	mov	r0, fp
 8018c56:	f7f9 ff3d 	bl	8012ad4 <uxr_buffer_submessage_header>
 8018c5a:	8921      	ldrh	r1, [r4, #8]
 8018c5c:	fbb6 f2f1 	udiv	r2, r6, r1
 8018c60:	fb01 6212 	mls	r2, r1, r2, r6
 8018c64:	b292      	uxth	r2, r2
 8018c66:	6863      	ldr	r3, [r4, #4]
 8018c68:	fbb3 f3f1 	udiv	r3, r3, r1
 8018c6c:	fb02 f303 	mul.w	r3, r2, r3
 8018c70:	6822      	ldr	r2, [r4, #0]
 8018c72:	4630      	mov	r0, r6
 8018c74:	50d7      	str	r7, [r2, r3]
 8018c76:	2101      	movs	r1, #1
 8018c78:	f000 f9c4 	bl	8019004 <uxr_seq_num_add>
 8018c7c:	f10a 0a01 	add.w	sl, sl, #1
 8018c80:	fa1f f38a 	uxth.w	r3, sl
 8018c84:	429d      	cmp	r5, r3
 8018c86:	4606      	mov	r6, r0
 8018c88:	d8ca      	bhi.n	8018c20 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8018c8a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8018c8e:	9d05      	ldr	r5, [sp, #20]
 8018c90:	8920      	ldrh	r0, [r4, #8]
 8018c92:	fbb6 f3f0 	udiv	r3, r6, r0
 8018c96:	fb00 6313 	mls	r3, r0, r3, r6
 8018c9a:	b299      	uxth	r1, r3
 8018c9c:	6863      	ldr	r3, [r4, #4]
 8018c9e:	fbb3 f3f0 	udiv	r3, r3, r0
 8018ca2:	fb01 f303 	mul.w	r3, r1, r3
 8018ca6:	6821      	ldr	r1, [r4, #0]
 8018ca8:	3304      	adds	r3, #4
 8018caa:	4419      	add	r1, r3
 8018cac:	463a      	mov	r2, r7
 8018cae:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8018cb2:	9000      	str	r0, [sp, #0]
 8018cb4:	2300      	movs	r3, #0
 8018cb6:	4658      	mov	r0, fp
 8018cb8:	f7f7 fc0a 	bl	80104d0 <ucdr_init_buffer_origin_offset>
 8018cbc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8018cc0:	4658      	mov	r0, fp
 8018cc2:	fa1f f289 	uxth.w	r2, r9
 8018cc6:	2302      	movs	r3, #2
 8018cc8:	210d      	movs	r1, #13
 8018cca:	f7f9 ff03 	bl	8012ad4 <uxr_buffer_submessage_header>
 8018cce:	9b03      	ldr	r3, [sp, #12]
 8018cd0:	8927      	ldrh	r7, [r4, #8]
 8018cd2:	7b20      	ldrb	r0, [r4, #12]
 8018cd4:	f108 0104 	add.w	r1, r8, #4
 8018cd8:	440b      	add	r3, r1
 8018cda:	4619      	mov	r1, r3
 8018cdc:	fbb6 f3f7 	udiv	r3, r6, r7
 8018ce0:	fb07 6313 	mls	r3, r7, r3, r6
 8018ce4:	f1a5 0208 	sub.w	r2, r5, #8
 8018ce8:	b29d      	uxth	r5, r3
 8018cea:	3004      	adds	r0, #4
 8018cec:	6863      	ldr	r3, [r4, #4]
 8018cee:	fbb3 f3f7 	udiv	r3, r3, r7
 8018cf2:	fb05 f303 	mul.w	r3, r5, r3
 8018cf6:	6825      	ldr	r5, [r4, #0]
 8018cf8:	4448      	add	r0, r9
 8018cfa:	50e8      	str	r0, [r5, r3]
 8018cfc:	9d04      	ldr	r5, [sp, #16]
 8018cfe:	eba2 0208 	sub.w	r2, r2, r8
 8018d02:	4628      	mov	r0, r5
 8018d04:	f7f7 fbf6 	bl	80104f4 <ucdr_init_buffer>
 8018d08:	4628      	mov	r0, r5
 8018d0a:	493c      	ldr	r1, [pc, #240]	@ (8018dfc <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8018d0c:	4622      	mov	r2, r4
 8018d0e:	f7f7 fbc5 	bl	801049c <ucdr_set_on_full_buffer_callback>
 8018d12:	2001      	movs	r0, #1
 8018d14:	81e6      	strh	r6, [r4, #14]
 8018d16:	b011      	add	sp, #68	@ 0x44
 8018d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d1c:	2101      	movs	r1, #1
 8018d1e:	89e0      	ldrh	r0, [r4, #14]
 8018d20:	f000 f970 	bl	8019004 <uxr_seq_num_add>
 8018d24:	8921      	ldrh	r1, [r4, #8]
 8018d26:	4605      	mov	r5, r0
 8018d28:	8a60      	ldrh	r0, [r4, #18]
 8018d2a:	f000 f96b 	bl	8019004 <uxr_seq_num_add>
 8018d2e:	4601      	mov	r1, r0
 8018d30:	4628      	mov	r0, r5
 8018d32:	f000 f96f 	bl	8019014 <uxr_seq_num_cmp>
 8018d36:	2800      	cmp	r0, #0
 8018d38:	dd42      	ble.n	8018dc0 <uxr_prepare_reliable_buffer_to_write+0x29c>
 8018d3a:	2000      	movs	r0, #0
 8018d3c:	b011      	add	sp, #68	@ 0x44
 8018d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d42:	8921      	ldrh	r1, [r4, #8]
 8018d44:	8a60      	ldrh	r0, [r4, #18]
 8018d46:	9205      	str	r2, [sp, #20]
 8018d48:	f000 f95c 	bl	8019004 <uxr_seq_num_add>
 8018d4c:	4601      	mov	r1, r0
 8018d4e:	4630      	mov	r0, r6
 8018d50:	f000 f960 	bl	8019014 <uxr_seq_num_cmp>
 8018d54:	2800      	cmp	r0, #0
 8018d56:	9a05      	ldr	r2, [sp, #20]
 8018d58:	dcef      	bgt.n	8018d3a <uxr_prepare_reliable_buffer_to_write+0x216>
 8018d5a:	8927      	ldrh	r7, [r4, #8]
 8018d5c:	fbb6 f3f7 	udiv	r3, r6, r7
 8018d60:	fb07 6313 	mls	r3, r7, r3, r6
 8018d64:	b29d      	uxth	r5, r3
 8018d66:	6863      	ldr	r3, [r4, #4]
 8018d68:	6824      	ldr	r4, [r4, #0]
 8018d6a:	fbb3 f3f7 	udiv	r3, r3, r7
 8018d6e:	fb05 f303 	mul.w	r3, r5, r3
 8018d72:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8018d76:	50e2      	str	r2, [r4, r3]
 8018d78:	2300      	movs	r3, #0
 8018d7a:	f8cd 8000 	str.w	r8, [sp]
 8018d7e:	f7f7 fba7 	bl	80104d0 <ucdr_init_buffer_origin_offset>
 8018d82:	2001      	movs	r0, #1
 8018d84:	e7da      	b.n	8018d3c <uxr_prepare_reliable_buffer_to_write+0x218>
 8018d86:	b293      	uxth	r3, r2
 8018d88:	461a      	mov	r2, r3
 8018d8a:	e737      	b.n	8018bfc <uxr_prepare_reliable_buffer_to_write+0xd8>
 8018d8c:	4630      	mov	r0, r6
 8018d8e:	2101      	movs	r1, #1
 8018d90:	9207      	str	r2, [sp, #28]
 8018d92:	f000 f937 	bl	8019004 <uxr_seq_num_add>
 8018d96:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018d9a:	fbb0 f1fc 	udiv	r1, r0, ip
 8018d9e:	fb0c 0111 	mls	r1, ip, r1, r0
 8018da2:	4606      	mov	r6, r0
 8018da4:	b288      	uxth	r0, r1
 8018da6:	6863      	ldr	r3, [r4, #4]
 8018da8:	fbb3 f1fc 	udiv	r1, r3, ip
 8018dac:	6823      	ldr	r3, [r4, #0]
 8018dae:	9a07      	ldr	r2, [sp, #28]
 8018db0:	fb00 f101 	mul.w	r1, r0, r1
 8018db4:	3104      	adds	r1, #4
 8018db6:	440b      	add	r3, r1
 8018db8:	9303      	str	r3, [sp, #12]
 8018dba:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8018dbe:	e70a      	b.n	8018bd6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8018dc0:	8921      	ldrh	r1, [r4, #8]
 8018dc2:	fbb5 f3f1 	udiv	r3, r5, r1
 8018dc6:	fb01 5313 	mls	r3, r1, r3, r5
 8018dca:	b29a      	uxth	r2, r3
 8018dcc:	6863      	ldr	r3, [r4, #4]
 8018dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8018dd2:	6821      	ldr	r1, [r4, #0]
 8018dd4:	9804      	ldr	r0, [sp, #16]
 8018dd6:	fb02 f303 	mul.w	r3, r2, r3
 8018dda:	3304      	adds	r3, #4
 8018ddc:	7b22      	ldrb	r2, [r4, #12]
 8018dde:	4419      	add	r1, r3
 8018de0:	445a      	add	r2, fp
 8018de2:	f841 2c04 	str.w	r2, [r1, #-4]
 8018de6:	7b23      	ldrb	r3, [r4, #12]
 8018de8:	9300      	str	r3, [sp, #0]
 8018dea:	2300      	movs	r3, #0
 8018dec:	f7f7 fb70 	bl	80104d0 <ucdr_init_buffer_origin_offset>
 8018df0:	81e5      	strh	r5, [r4, #14]
 8018df2:	2001      	movs	r0, #1
 8018df4:	e7a2      	b.n	8018d3c <uxr_prepare_reliable_buffer_to_write+0x218>
 8018df6:	4682      	mov	sl, r0
 8018df8:	e6ca      	b.n	8018b90 <uxr_prepare_reliable_buffer_to_write+0x6c>
 8018dfa:	bf00      	nop
 8018dfc:	08018a05 	.word	0x08018a05

08018e00 <uxr_prepare_next_reliable_buffer_to_send>:
 8018e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e02:	4604      	mov	r4, r0
 8018e04:	460f      	mov	r7, r1
 8018e06:	8a00      	ldrh	r0, [r0, #16]
 8018e08:	2101      	movs	r1, #1
 8018e0a:	4616      	mov	r6, r2
 8018e0c:	461d      	mov	r5, r3
 8018e0e:	f000 f8f9 	bl	8019004 <uxr_seq_num_add>
 8018e12:	8028      	strh	r0, [r5, #0]
 8018e14:	8922      	ldrh	r2, [r4, #8]
 8018e16:	fbb0 f3f2 	udiv	r3, r0, r2
 8018e1a:	fb02 0c13 	mls	ip, r2, r3, r0
 8018e1e:	fa1f fc8c 	uxth.w	ip, ip
 8018e22:	6863      	ldr	r3, [r4, #4]
 8018e24:	fbb3 f3f2 	udiv	r3, r3, r2
 8018e28:	fb0c fc03 	mul.w	ip, ip, r3
 8018e2c:	6823      	ldr	r3, [r4, #0]
 8018e2e:	89e1      	ldrh	r1, [r4, #14]
 8018e30:	f10c 0c04 	add.w	ip, ip, #4
 8018e34:	4463      	add	r3, ip
 8018e36:	603b      	str	r3, [r7, #0]
 8018e38:	6823      	ldr	r3, [r4, #0]
 8018e3a:	449c      	add	ip, r3
 8018e3c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8018e40:	6033      	str	r3, [r6, #0]
 8018e42:	f000 f8e7 	bl	8019014 <uxr_seq_num_cmp>
 8018e46:	2800      	cmp	r0, #0
 8018e48:	dd01      	ble.n	8018e4e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8018e4a:	2000      	movs	r0, #0
 8018e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018e4e:	7b23      	ldrb	r3, [r4, #12]
 8018e50:	6832      	ldr	r2, [r6, #0]
 8018e52:	429a      	cmp	r2, r3
 8018e54:	d9f9      	bls.n	8018e4a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018e56:	8a61      	ldrh	r1, [r4, #18]
 8018e58:	8a20      	ldrh	r0, [r4, #16]
 8018e5a:	f000 f8d7 	bl	801900c <uxr_seq_num_sub>
 8018e5e:	8923      	ldrh	r3, [r4, #8]
 8018e60:	4283      	cmp	r3, r0
 8018e62:	d0f2      	beq.n	8018e4a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018e64:	8828      	ldrh	r0, [r5, #0]
 8018e66:	89e3      	ldrh	r3, [r4, #14]
 8018e68:	8220      	strh	r0, [r4, #16]
 8018e6a:	4298      	cmp	r0, r3
 8018e6c:	d001      	beq.n	8018e72 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8018e6e:	2001      	movs	r0, #1
 8018e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018e72:	2101      	movs	r1, #1
 8018e74:	f000 f8c6 	bl	8019004 <uxr_seq_num_add>
 8018e78:	81e0      	strh	r0, [r4, #14]
 8018e7a:	2001      	movs	r0, #1
 8018e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018e7e:	bf00      	nop

08018e80 <uxr_update_output_stream_heartbeat_timestamp>:
 8018e80:	b570      	push	{r4, r5, r6, lr}
 8018e82:	8a01      	ldrh	r1, [r0, #16]
 8018e84:	4604      	mov	r4, r0
 8018e86:	8a40      	ldrh	r0, [r0, #18]
 8018e88:	4615      	mov	r5, r2
 8018e8a:	461e      	mov	r6, r3
 8018e8c:	f000 f8c2 	bl	8019014 <uxr_seq_num_cmp>
 8018e90:	2800      	cmp	r0, #0
 8018e92:	db07      	blt.n	8018ea4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8018e94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018e98:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018e9c:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8018ea0:	2000      	movs	r0, #0
 8018ea2:	bd70      	pop	{r4, r5, r6, pc}
 8018ea4:	f894 0020 	ldrb.w	r0, [r4, #32]
 8018ea8:	b940      	cbnz	r0, 8018ebc <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8018eaa:	2301      	movs	r3, #1
 8018eac:	f884 3020 	strb.w	r3, [r4, #32]
 8018eb0:	3564      	adds	r5, #100	@ 0x64
 8018eb2:	f146 0600 	adc.w	r6, r6, #0
 8018eb6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8018eba:	bd70      	pop	{r4, r5, r6, pc}
 8018ebc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8018ec0:	4295      	cmp	r5, r2
 8018ec2:	eb76 0303 	sbcs.w	r3, r6, r3
 8018ec6:	bfa5      	ittet	ge
 8018ec8:	3001      	addge	r0, #1
 8018eca:	f884 0020 	strbge.w	r0, [r4, #32]
 8018ece:	2000      	movlt	r0, #0
 8018ed0:	2001      	movge	r0, #1
 8018ed2:	e7ed      	b.n	8018eb0 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08018ed4 <uxr_begin_output_nack_buffer_it>:
 8018ed4:	8a40      	ldrh	r0, [r0, #18]
 8018ed6:	4770      	bx	lr

08018ed8 <uxr_next_reliable_nack_buffer_to_send>:
 8018ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018edc:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8018ee0:	b082      	sub	sp, #8
 8018ee2:	f1b8 0f00 	cmp.w	r8, #0
 8018ee6:	d011      	beq.n	8018f0c <uxr_next_reliable_nack_buffer_to_send+0x34>
 8018ee8:	4604      	mov	r4, r0
 8018eea:	8818      	ldrh	r0, [r3, #0]
 8018eec:	460e      	mov	r6, r1
 8018eee:	4617      	mov	r7, r2
 8018ef0:	461d      	mov	r5, r3
 8018ef2:	2101      	movs	r1, #1
 8018ef4:	f000 f886 	bl	8019004 <uxr_seq_num_add>
 8018ef8:	8028      	strh	r0, [r5, #0]
 8018efa:	8a21      	ldrh	r1, [r4, #16]
 8018efc:	f000 f88a 	bl	8019014 <uxr_seq_num_cmp>
 8018f00:	2800      	cmp	r0, #0
 8018f02:	dd07      	ble.n	8018f14 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8018f04:	f04f 0800 	mov.w	r8, #0
 8018f08:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8018f0c:	4640      	mov	r0, r8
 8018f0e:	b002      	add	sp, #8
 8018f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f14:	8921      	ldrh	r1, [r4, #8]
 8018f16:	8828      	ldrh	r0, [r5, #0]
 8018f18:	6823      	ldr	r3, [r4, #0]
 8018f1a:	fbb0 f2f1 	udiv	r2, r0, r1
 8018f1e:	fb01 0c12 	mls	ip, r1, r2, r0
 8018f22:	fa1f f28c 	uxth.w	r2, ip
 8018f26:	9301      	str	r3, [sp, #4]
 8018f28:	6863      	ldr	r3, [r4, #4]
 8018f2a:	fbb3 fcf1 	udiv	ip, r3, r1
 8018f2e:	9b01      	ldr	r3, [sp, #4]
 8018f30:	fb02 fc0c 	mul.w	ip, r2, ip
 8018f34:	f10c 0c04 	add.w	ip, ip, #4
 8018f38:	4463      	add	r3, ip
 8018f3a:	6033      	str	r3, [r6, #0]
 8018f3c:	6823      	ldr	r3, [r4, #0]
 8018f3e:	4463      	add	r3, ip
 8018f40:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8018f44:	603b      	str	r3, [r7, #0]
 8018f46:	7b22      	ldrb	r2, [r4, #12]
 8018f48:	429a      	cmp	r2, r3
 8018f4a:	d0d2      	beq.n	8018ef2 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8018f4c:	4640      	mov	r0, r8
 8018f4e:	b002      	add	sp, #8
 8018f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018f54 <uxr_process_acknack>:
 8018f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f56:	4604      	mov	r4, r0
 8018f58:	460e      	mov	r6, r1
 8018f5a:	4610      	mov	r0, r2
 8018f5c:	2101      	movs	r1, #1
 8018f5e:	f000 f855 	bl	801900c <uxr_seq_num_sub>
 8018f62:	8a61      	ldrh	r1, [r4, #18]
 8018f64:	f000 f852 	bl	801900c <uxr_seq_num_sub>
 8018f68:	b1c0      	cbz	r0, 8018f9c <uxr_process_acknack+0x48>
 8018f6a:	4605      	mov	r5, r0
 8018f6c:	2700      	movs	r7, #0
 8018f6e:	2101      	movs	r1, #1
 8018f70:	8a60      	ldrh	r0, [r4, #18]
 8018f72:	f000 f847 	bl	8019004 <uxr_seq_num_add>
 8018f76:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018f7a:	fbb0 f1fc 	udiv	r1, r0, ip
 8018f7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018f82:	fb0c 0111 	mls	r1, ip, r1, r0
 8018f86:	b289      	uxth	r1, r1
 8018f88:	3701      	adds	r7, #1
 8018f8a:	fbb3 f3fc 	udiv	r3, r3, ip
 8018f8e:	fb01 f303 	mul.w	r3, r1, r3
 8018f92:	42bd      	cmp	r5, r7
 8018f94:	7b21      	ldrb	r1, [r4, #12]
 8018f96:	8260      	strh	r0, [r4, #18]
 8018f98:	50d1      	str	r1, [r2, r3]
 8018f9a:	d1e8      	bne.n	8018f6e <uxr_process_acknack+0x1a>
 8018f9c:	3e00      	subs	r6, #0
 8018f9e:	f04f 0300 	mov.w	r3, #0
 8018fa2:	bf18      	it	ne
 8018fa4:	2601      	movne	r6, #1
 8018fa6:	f884 3020 	strb.w	r3, [r4, #32]
 8018faa:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8018fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018fb0 <uxr_is_output_up_to_date>:
 8018fb0:	8a01      	ldrh	r1, [r0, #16]
 8018fb2:	8a40      	ldrh	r0, [r0, #18]
 8018fb4:	b508      	push	{r3, lr}
 8018fb6:	f000 f82d 	bl	8019014 <uxr_seq_num_cmp>
 8018fba:	fab0 f080 	clz	r0, r0
 8018fbe:	0940      	lsrs	r0, r0, #5
 8018fc0:	bd08      	pop	{r3, pc}
 8018fc2:	bf00      	nop

08018fc4 <get_available_free_slots>:
 8018fc4:	8902      	ldrh	r2, [r0, #8]
 8018fc6:	b1da      	cbz	r2, 8019000 <get_available_free_slots+0x3c>
 8018fc8:	b530      	push	{r4, r5, lr}
 8018fca:	2100      	movs	r1, #0
 8018fcc:	6843      	ldr	r3, [r0, #4]
 8018fce:	6805      	ldr	r5, [r0, #0]
 8018fd0:	7b04      	ldrb	r4, [r0, #12]
 8018fd2:	fbb3 fef2 	udiv	lr, r3, r2
 8018fd6:	4608      	mov	r0, r1
 8018fd8:	460b      	mov	r3, r1
 8018fda:	fbb3 fcf2 	udiv	ip, r3, r2
 8018fde:	fb02 331c 	mls	r3, r2, ip, r3
 8018fe2:	b29b      	uxth	r3, r3
 8018fe4:	fb0e f303 	mul.w	r3, lr, r3
 8018fe8:	3101      	adds	r1, #1
 8018fea:	f855 c003 	ldr.w	ip, [r5, r3]
 8018fee:	4564      	cmp	r4, ip
 8018ff0:	bf08      	it	eq
 8018ff2:	3001      	addeq	r0, #1
 8018ff4:	b28b      	uxth	r3, r1
 8018ff6:	bf08      	it	eq
 8018ff8:	b280      	uxtheq	r0, r0
 8018ffa:	4293      	cmp	r3, r2
 8018ffc:	d3ed      	bcc.n	8018fda <get_available_free_slots+0x16>
 8018ffe:	bd30      	pop	{r4, r5, pc}
 8019000:	4610      	mov	r0, r2
 8019002:	4770      	bx	lr

08019004 <uxr_seq_num_add>:
 8019004:	4408      	add	r0, r1
 8019006:	b280      	uxth	r0, r0
 8019008:	4770      	bx	lr
 801900a:	bf00      	nop

0801900c <uxr_seq_num_sub>:
 801900c:	1a40      	subs	r0, r0, r1
 801900e:	b280      	uxth	r0, r0
 8019010:	4770      	bx	lr
 8019012:	bf00      	nop

08019014 <uxr_seq_num_cmp>:
 8019014:	4288      	cmp	r0, r1
 8019016:	d011      	beq.n	801903c <uxr_seq_num_cmp+0x28>
 8019018:	d309      	bcc.n	801902e <uxr_seq_num_cmp+0x1a>
 801901a:	4288      	cmp	r0, r1
 801901c:	d910      	bls.n	8019040 <uxr_seq_num_cmp+0x2c>
 801901e:	1a40      	subs	r0, r0, r1
 8019020:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8019024:	bfd4      	ite	le
 8019026:	2001      	movle	r0, #1
 8019028:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801902c:	4770      	bx	lr
 801902e:	1a0b      	subs	r3, r1, r0
 8019030:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8019034:	daf1      	bge.n	801901a <uxr_seq_num_cmp+0x6>
 8019036:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801903a:	4770      	bx	lr
 801903c:	2000      	movs	r0, #0
 801903e:	4770      	bx	lr
 8019040:	2001      	movs	r0, #1
 8019042:	4770      	bx	lr

08019044 <rcl_get_default_domain_id>:
 8019044:	b530      	push	{r4, r5, lr}
 8019046:	b083      	sub	sp, #12
 8019048:	2300      	movs	r3, #0
 801904a:	9300      	str	r3, [sp, #0]
 801904c:	b1d0      	cbz	r0, 8019084 <rcl_get_default_domain_id+0x40>
 801904e:	4604      	mov	r4, r0
 8019050:	4669      	mov	r1, sp
 8019052:	4815      	ldr	r0, [pc, #84]	@ (80190a8 <rcl_get_default_domain_id+0x64>)
 8019054:	f7fd ff04 	bl	8016e60 <rcutils_get_env>
 8019058:	4602      	mov	r2, r0
 801905a:	b110      	cbz	r0, 8019062 <rcl_get_default_domain_id+0x1e>
 801905c:	2001      	movs	r0, #1
 801905e:	b003      	add	sp, #12
 8019060:	bd30      	pop	{r4, r5, pc}
 8019062:	9b00      	ldr	r3, [sp, #0]
 8019064:	b18b      	cbz	r3, 801908a <rcl_get_default_domain_id+0x46>
 8019066:	7818      	ldrb	r0, [r3, #0]
 8019068:	2800      	cmp	r0, #0
 801906a:	d0f8      	beq.n	801905e <rcl_get_default_domain_id+0x1a>
 801906c:	a901      	add	r1, sp, #4
 801906e:	4618      	mov	r0, r3
 8019070:	9201      	str	r2, [sp, #4]
 8019072:	f000 fdf1 	bl	8019c58 <strtoul>
 8019076:	4605      	mov	r5, r0
 8019078:	b150      	cbz	r0, 8019090 <rcl_get_default_domain_id+0x4c>
 801907a:	1c43      	adds	r3, r0, #1
 801907c:	d00d      	beq.n	801909a <rcl_get_default_domain_id+0x56>
 801907e:	6025      	str	r5, [r4, #0]
 8019080:	2000      	movs	r0, #0
 8019082:	e7ec      	b.n	801905e <rcl_get_default_domain_id+0x1a>
 8019084:	200b      	movs	r0, #11
 8019086:	b003      	add	sp, #12
 8019088:	bd30      	pop	{r4, r5, pc}
 801908a:	4618      	mov	r0, r3
 801908c:	b003      	add	sp, #12
 801908e:	bd30      	pop	{r4, r5, pc}
 8019090:	9b01      	ldr	r3, [sp, #4]
 8019092:	781b      	ldrb	r3, [r3, #0]
 8019094:	2b00      	cmp	r3, #0
 8019096:	d0f2      	beq.n	801907e <rcl_get_default_domain_id+0x3a>
 8019098:	e7e0      	b.n	801905c <rcl_get_default_domain_id+0x18>
 801909a:	f001 f829 	bl	801a0f0 <__errno>
 801909e:	6803      	ldr	r3, [r0, #0]
 80190a0:	2b22      	cmp	r3, #34	@ 0x22
 80190a2:	d1ec      	bne.n	801907e <rcl_get_default_domain_id+0x3a>
 80190a4:	e7da      	b.n	801905c <rcl_get_default_domain_id+0x18>
 80190a6:	bf00      	nop
 80190a8:	0801bb7c 	.word	0x0801bb7c

080190ac <rcl_expand_topic_name>:
 80190ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190b0:	b08b      	sub	sp, #44	@ 0x2c
 80190b2:	9306      	str	r3, [sp, #24]
 80190b4:	2800      	cmp	r0, #0
 80190b6:	f000 80ad 	beq.w	8019214 <rcl_expand_topic_name+0x168>
 80190ba:	460e      	mov	r6, r1
 80190bc:	2900      	cmp	r1, #0
 80190be:	f000 80a9 	beq.w	8019214 <rcl_expand_topic_name+0x168>
 80190c2:	4617      	mov	r7, r2
 80190c4:	2a00      	cmp	r2, #0
 80190c6:	f000 80a5 	beq.w	8019214 <rcl_expand_topic_name+0x168>
 80190ca:	2b00      	cmp	r3, #0
 80190cc:	f000 80a2 	beq.w	8019214 <rcl_expand_topic_name+0x168>
 80190d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80190d2:	2b00      	cmp	r3, #0
 80190d4:	f000 809e 	beq.w	8019214 <rcl_expand_topic_name+0x168>
 80190d8:	2200      	movs	r2, #0
 80190da:	a909      	add	r1, sp, #36	@ 0x24
 80190dc:	4680      	mov	r8, r0
 80190de:	f000 fa57 	bl	8019590 <rcl_validate_topic_name>
 80190e2:	4604      	mov	r4, r0
 80190e4:	2800      	cmp	r0, #0
 80190e6:	f040 8096 	bne.w	8019216 <rcl_expand_topic_name+0x16a>
 80190ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	f040 809a 	bne.w	8019226 <rcl_expand_topic_name+0x17a>
 80190f2:	4602      	mov	r2, r0
 80190f4:	a909      	add	r1, sp, #36	@ 0x24
 80190f6:	4630      	mov	r0, r6
 80190f8:	f7fe fafc 	bl	80176f4 <rmw_validate_node_name>
 80190fc:	2800      	cmp	r0, #0
 80190fe:	f040 808e 	bne.w	801921e <rcl_expand_topic_name+0x172>
 8019102:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019104:	2a00      	cmp	r2, #0
 8019106:	f040 8093 	bne.w	8019230 <rcl_expand_topic_name+0x184>
 801910a:	a909      	add	r1, sp, #36	@ 0x24
 801910c:	4638      	mov	r0, r7
 801910e:	f7fe fad3 	bl	80176b8 <rmw_validate_namespace>
 8019112:	2800      	cmp	r0, #0
 8019114:	f040 8083 	bne.w	801921e <rcl_expand_topic_name+0x172>
 8019118:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801911a:	2c00      	cmp	r4, #0
 801911c:	f040 80ed 	bne.w	80192fa <rcl_expand_topic_name+0x24e>
 8019120:	217b      	movs	r1, #123	@ 0x7b
 8019122:	4640      	mov	r0, r8
 8019124:	f000 ff58 	bl	8019fd8 <strchr>
 8019128:	f898 3000 	ldrb.w	r3, [r8]
 801912c:	2b2f      	cmp	r3, #47	@ 0x2f
 801912e:	4605      	mov	r5, r0
 8019130:	f000 809e 	beq.w	8019270 <rcl_expand_topic_name+0x1c4>
 8019134:	2b7e      	cmp	r3, #126	@ 0x7e
 8019136:	f040 80a2 	bne.w	801927e <rcl_expand_topic_name+0x1d2>
 801913a:	4638      	mov	r0, r7
 801913c:	f7e7 f87a 	bl	8000234 <strlen>
 8019140:	4a82      	ldr	r2, [pc, #520]	@ (801934c <rcl_expand_topic_name+0x2a0>)
 8019142:	4b83      	ldr	r3, [pc, #524]	@ (8019350 <rcl_expand_topic_name+0x2a4>)
 8019144:	2801      	cmp	r0, #1
 8019146:	bf18      	it	ne
 8019148:	4613      	movne	r3, r2
 801914a:	9302      	str	r3, [sp, #8]
 801914c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801914e:	9300      	str	r3, [sp, #0]
 8019150:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8019154:	f108 0301 	add.w	r3, r8, #1
 8019158:	9305      	str	r3, [sp, #20]
 801915a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801915e:	9301      	str	r3, [sp, #4]
 8019160:	ab14      	add	r3, sp, #80	@ 0x50
 8019162:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019164:	f7fd fea4 	bl	8016eb0 <rcutils_format_string_limit>
 8019168:	4682      	mov	sl, r0
 801916a:	2800      	cmp	r0, #0
 801916c:	f000 80c7 	beq.w	80192fe <rcl_expand_topic_name+0x252>
 8019170:	2d00      	cmp	r5, #0
 8019172:	f000 80a2 	beq.w	80192ba <rcl_expand_topic_name+0x20e>
 8019176:	217b      	movs	r1, #123	@ 0x7b
 8019178:	f000 ff2e 	bl	8019fd8 <strchr>
 801917c:	46d1      	mov	r9, sl
 801917e:	4605      	mov	r5, r0
 8019180:	9407      	str	r4, [sp, #28]
 8019182:	46d3      	mov	fp, sl
 8019184:	464c      	mov	r4, r9
 8019186:	2d00      	cmp	r5, #0
 8019188:	f000 80be 	beq.w	8019308 <rcl_expand_topic_name+0x25c>
 801918c:	217d      	movs	r1, #125	@ 0x7d
 801918e:	4620      	mov	r0, r4
 8019190:	f000 ff22 	bl	8019fd8 <strchr>
 8019194:	eba0 0905 	sub.w	r9, r0, r5
 8019198:	f109 0a01 	add.w	sl, r9, #1
 801919c:	486d      	ldr	r0, [pc, #436]	@ (8019354 <rcl_expand_topic_name+0x2a8>)
 801919e:	4652      	mov	r2, sl
 80191a0:	4629      	mov	r1, r5
 80191a2:	f000 ff26 	bl	8019ff2 <strncmp>
 80191a6:	2800      	cmp	r0, #0
 80191a8:	d067      	beq.n	801927a <rcl_expand_topic_name+0x1ce>
 80191aa:	486b      	ldr	r0, [pc, #428]	@ (8019358 <rcl_expand_topic_name+0x2ac>)
 80191ac:	4652      	mov	r2, sl
 80191ae:	4629      	mov	r1, r5
 80191b0:	f000 ff1f 	bl	8019ff2 <strncmp>
 80191b4:	b130      	cbz	r0, 80191c4 <rcl_expand_topic_name+0x118>
 80191b6:	4869      	ldr	r0, [pc, #420]	@ (801935c <rcl_expand_topic_name+0x2b0>)
 80191b8:	4652      	mov	r2, sl
 80191ba:	4629      	mov	r1, r5
 80191bc:	f000 ff19 	bl	8019ff2 <strncmp>
 80191c0:	2800      	cmp	r0, #0
 80191c2:	d137      	bne.n	8019234 <rcl_expand_topic_name+0x188>
 80191c4:	46b9      	mov	r9, r7
 80191c6:	ab16      	add	r3, sp, #88	@ 0x58
 80191c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80191cc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80191d0:	ab14      	add	r3, sp, #80	@ 0x50
 80191d2:	4628      	mov	r0, r5
 80191d4:	cb0c      	ldmia	r3, {r2, r3}
 80191d6:	4651      	mov	r1, sl
 80191d8:	f7fd ffa6 	bl	8017128 <rcutils_strndup>
 80191dc:	4605      	mov	r5, r0
 80191de:	2800      	cmp	r0, #0
 80191e0:	f000 809c 	beq.w	801931c <rcl_expand_topic_name+0x270>
 80191e4:	464a      	mov	r2, r9
 80191e6:	4620      	mov	r0, r4
 80191e8:	ab14      	add	r3, sp, #80	@ 0x50
 80191ea:	4629      	mov	r1, r5
 80191ec:	f7fd fe9a 	bl	8016f24 <rcutils_repl_str>
 80191f0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80191f2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80191f4:	4604      	mov	r4, r0
 80191f6:	4628      	mov	r0, r5
 80191f8:	4798      	blx	r3
 80191fa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80191fc:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80191fe:	4658      	mov	r0, fp
 8019200:	4798      	blx	r3
 8019202:	2c00      	cmp	r4, #0
 8019204:	d07b      	beq.n	80192fe <rcl_expand_topic_name+0x252>
 8019206:	217b      	movs	r1, #123	@ 0x7b
 8019208:	4620      	mov	r0, r4
 801920a:	f000 fee5 	bl	8019fd8 <strchr>
 801920e:	46a3      	mov	fp, r4
 8019210:	4605      	mov	r5, r0
 8019212:	e7b8      	b.n	8019186 <rcl_expand_topic_name+0xda>
 8019214:	240b      	movs	r4, #11
 8019216:	4620      	mov	r0, r4
 8019218:	b00b      	add	sp, #44	@ 0x2c
 801921a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801921e:	f7fa ff71 	bl	8014104 <rcl_convert_rmw_ret_to_rcl_ret>
 8019222:	4604      	mov	r4, r0
 8019224:	e7f7      	b.n	8019216 <rcl_expand_topic_name+0x16a>
 8019226:	2467      	movs	r4, #103	@ 0x67
 8019228:	4620      	mov	r0, r4
 801922a:	b00b      	add	sp, #44	@ 0x2c
 801922c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019230:	24c9      	movs	r4, #201	@ 0xc9
 8019232:	e7f0      	b.n	8019216 <rcl_expand_topic_name+0x16a>
 8019234:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8019238:	9806      	ldr	r0, [sp, #24]
 801923a:	1c69      	adds	r1, r5, #1
 801923c:	f7fe f88e 	bl	801735c <rcutils_string_map_getn>
 8019240:	4681      	mov	r9, r0
 8019242:	2800      	cmp	r0, #0
 8019244:	d1bf      	bne.n	80191c6 <rcl_expand_topic_name+0x11a>
 8019246:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019248:	aa16      	add	r2, sp, #88	@ 0x58
 801924a:	6018      	str	r0, [r3, #0]
 801924c:	ca07      	ldmia	r2, {r0, r1, r2}
 801924e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8019252:	ab14      	add	r3, sp, #80	@ 0x50
 8019254:	cb0c      	ldmia	r3, {r2, r3}
 8019256:	4651      	mov	r1, sl
 8019258:	4628      	mov	r0, r5
 801925a:	f7fd ff65 	bl	8017128 <rcutils_strndup>
 801925e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019260:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019262:	4798      	blx	r3
 8019264:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019266:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019268:	4658      	mov	r0, fp
 801926a:	2469      	movs	r4, #105	@ 0x69
 801926c:	4798      	blx	r3
 801926e:	e7d2      	b.n	8019216 <rcl_expand_topic_name+0x16a>
 8019270:	2800      	cmp	r0, #0
 8019272:	d05b      	beq.n	801932c <rcl_expand_topic_name+0x280>
 8019274:	46c1      	mov	r9, r8
 8019276:	46a2      	mov	sl, r4
 8019278:	e782      	b.n	8019180 <rcl_expand_topic_name+0xd4>
 801927a:	46b1      	mov	r9, r6
 801927c:	e7a3      	b.n	80191c6 <rcl_expand_topic_name+0x11a>
 801927e:	2800      	cmp	r0, #0
 8019280:	d1f8      	bne.n	8019274 <rcl_expand_topic_name+0x1c8>
 8019282:	4638      	mov	r0, r7
 8019284:	f7e6 ffd6 	bl	8000234 <strlen>
 8019288:	4a35      	ldr	r2, [pc, #212]	@ (8019360 <rcl_expand_topic_name+0x2b4>)
 801928a:	4b36      	ldr	r3, [pc, #216]	@ (8019364 <rcl_expand_topic_name+0x2b8>)
 801928c:	f8cd 8010 	str.w	r8, [sp, #16]
 8019290:	2801      	cmp	r0, #1
 8019292:	bf18      	it	ne
 8019294:	4613      	movne	r3, r2
 8019296:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801929a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801929e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80192a0:	9703      	str	r7, [sp, #12]
 80192a2:	9200      	str	r2, [sp, #0]
 80192a4:	ab14      	add	r3, sp, #80	@ 0x50
 80192a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80192a8:	f7fd fe02 	bl	8016eb0 <rcutils_format_string_limit>
 80192ac:	4682      	mov	sl, r0
 80192ae:	4653      	mov	r3, sl
 80192b0:	b32b      	cbz	r3, 80192fe <rcl_expand_topic_name+0x252>
 80192b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80192b4:	f8c3 a000 	str.w	sl, [r3]
 80192b8:	e7ad      	b.n	8019216 <rcl_expand_topic_name+0x16a>
 80192ba:	f89a 3000 	ldrb.w	r3, [sl]
 80192be:	2b2f      	cmp	r3, #47	@ 0x2f
 80192c0:	d0f7      	beq.n	80192b2 <rcl_expand_topic_name+0x206>
 80192c2:	4638      	mov	r0, r7
 80192c4:	f7e6 ffb6 	bl	8000234 <strlen>
 80192c8:	4a25      	ldr	r2, [pc, #148]	@ (8019360 <rcl_expand_topic_name+0x2b4>)
 80192ca:	4b26      	ldr	r3, [pc, #152]	@ (8019364 <rcl_expand_topic_name+0x2b8>)
 80192cc:	f8cd a010 	str.w	sl, [sp, #16]
 80192d0:	2801      	cmp	r0, #1
 80192d2:	bf18      	it	ne
 80192d4:	4613      	movne	r3, r2
 80192d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80192da:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80192de:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80192e0:	9703      	str	r7, [sp, #12]
 80192e2:	9200      	str	r2, [sp, #0]
 80192e4:	ab14      	add	r3, sp, #80	@ 0x50
 80192e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80192e8:	f7fd fde2 	bl	8016eb0 <rcutils_format_string_limit>
 80192ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80192ee:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80192f0:	4605      	mov	r5, r0
 80192f2:	4650      	mov	r0, sl
 80192f4:	4798      	blx	r3
 80192f6:	46aa      	mov	sl, r5
 80192f8:	e7d9      	b.n	80192ae <rcl_expand_topic_name+0x202>
 80192fa:	24ca      	movs	r4, #202	@ 0xca
 80192fc:	e78b      	b.n	8019216 <rcl_expand_topic_name+0x16a>
 80192fe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019300:	2300      	movs	r3, #0
 8019302:	6013      	str	r3, [r2, #0]
 8019304:	240a      	movs	r4, #10
 8019306:	e786      	b.n	8019216 <rcl_expand_topic_name+0x16a>
 8019308:	465b      	mov	r3, fp
 801930a:	9c07      	ldr	r4, [sp, #28]
 801930c:	46da      	mov	sl, fp
 801930e:	2b00      	cmp	r3, #0
 8019310:	d1d3      	bne.n	80192ba <rcl_expand_topic_name+0x20e>
 8019312:	f898 3000 	ldrb.w	r3, [r8]
 8019316:	2b2f      	cmp	r3, #47	@ 0x2f
 8019318:	d0cb      	beq.n	80192b2 <rcl_expand_topic_name+0x206>
 801931a:	e7b2      	b.n	8019282 <rcl_expand_topic_name+0x1d6>
 801931c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8019320:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019322:	6015      	str	r5, [r2, #0]
 8019324:	4658      	mov	r0, fp
 8019326:	4798      	blx	r3
 8019328:	240a      	movs	r4, #10
 801932a:	e774      	b.n	8019216 <rcl_expand_topic_name+0x16a>
 801932c:	ab17      	add	r3, sp, #92	@ 0x5c
 801932e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019332:	e88d 0003 	stmia.w	sp, {r0, r1}
 8019336:	ab14      	add	r3, sp, #80	@ 0x50
 8019338:	cb0e      	ldmia	r3, {r1, r2, r3}
 801933a:	4640      	mov	r0, r8
 801933c:	f7fd fed2 	bl	80170e4 <rcutils_strdup>
 8019340:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019342:	2800      	cmp	r0, #0
 8019344:	6018      	str	r0, [r3, #0]
 8019346:	bf08      	it	eq
 8019348:	240a      	moveq	r4, #10
 801934a:	e764      	b.n	8019216 <rcl_expand_topic_name+0x16a>
 801934c:	0801bb8c 	.word	0x0801bb8c
 8019350:	0801b244 	.word	0x0801b244
 8019354:	0801bb94 	.word	0x0801bb94
 8019358:	0801bb9c 	.word	0x0801bb9c
 801935c:	0801bba4 	.word	0x0801bba4
 8019360:	0801b20c 	.word	0x0801b20c
 8019364:	0801b254 	.word	0x0801b254

08019368 <rcl_get_default_topic_name_substitutions>:
 8019368:	2800      	cmp	r0, #0
 801936a:	bf0c      	ite	eq
 801936c:	200b      	moveq	r0, #11
 801936e:	2000      	movne	r0, #0
 8019370:	4770      	bx	lr
 8019372:	bf00      	nop

08019374 <rcl_get_zero_initialized_guard_condition>:
 8019374:	4a03      	ldr	r2, [pc, #12]	@ (8019384 <rcl_get_zero_initialized_guard_condition+0x10>)
 8019376:	4603      	mov	r3, r0
 8019378:	e892 0003 	ldmia.w	r2, {r0, r1}
 801937c:	e883 0003 	stmia.w	r3, {r0, r1}
 8019380:	4618      	mov	r0, r3
 8019382:	4770      	bx	lr
 8019384:	0801bbb0 	.word	0x0801bbb0

08019388 <rcl_guard_condition_init>:
 8019388:	b082      	sub	sp, #8
 801938a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801938c:	b087      	sub	sp, #28
 801938e:	ac0c      	add	r4, sp, #48	@ 0x30
 8019390:	e884 000c 	stmia.w	r4, {r2, r3}
 8019394:	46a6      	mov	lr, r4
 8019396:	460d      	mov	r5, r1
 8019398:	4604      	mov	r4, r0
 801939a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801939e:	f10d 0c04 	add.w	ip, sp, #4
 80193a2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80193a6:	f8de 3000 	ldr.w	r3, [lr]
 80193aa:	f8cc 3000 	str.w	r3, [ip]
 80193ae:	a801      	add	r0, sp, #4
 80193b0:	f7f4 fd78 	bl	800dea4 <rcutils_allocator_is_valid>
 80193b4:	b338      	cbz	r0, 8019406 <rcl_guard_condition_init+0x7e>
 80193b6:	b334      	cbz	r4, 8019406 <rcl_guard_condition_init+0x7e>
 80193b8:	6866      	ldr	r6, [r4, #4]
 80193ba:	b9ee      	cbnz	r6, 80193f8 <rcl_guard_condition_init+0x70>
 80193bc:	b31d      	cbz	r5, 8019406 <rcl_guard_condition_init+0x7e>
 80193be:	4628      	mov	r0, r5
 80193c0:	f7fa febe 	bl	8014140 <rcl_context_is_valid>
 80193c4:	b308      	cbz	r0, 801940a <rcl_guard_condition_init+0x82>
 80193c6:	9b01      	ldr	r3, [sp, #4]
 80193c8:	9905      	ldr	r1, [sp, #20]
 80193ca:	201c      	movs	r0, #28
 80193cc:	4798      	blx	r3
 80193ce:	4607      	mov	r7, r0
 80193d0:	6060      	str	r0, [r4, #4]
 80193d2:	b310      	cbz	r0, 801941a <rcl_guard_condition_init+0x92>
 80193d4:	6828      	ldr	r0, [r5, #0]
 80193d6:	3028      	adds	r0, #40	@ 0x28
 80193d8:	f000 f9d4 	bl	8019784 <rmw_create_guard_condition>
 80193dc:	6038      	str	r0, [r7, #0]
 80193de:	6860      	ldr	r0, [r4, #4]
 80193e0:	6805      	ldr	r5, [r0, #0]
 80193e2:	b1a5      	cbz	r5, 801940e <rcl_guard_condition_init+0x86>
 80193e4:	2301      	movs	r3, #1
 80193e6:	ac01      	add	r4, sp, #4
 80193e8:	7103      	strb	r3, [r0, #4]
 80193ea:	f100 0708 	add.w	r7, r0, #8
 80193ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80193f0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80193f2:	6823      	ldr	r3, [r4, #0]
 80193f4:	603b      	str	r3, [r7, #0]
 80193f6:	e000      	b.n	80193fa <rcl_guard_condition_init+0x72>
 80193f8:	2664      	movs	r6, #100	@ 0x64
 80193fa:	4630      	mov	r0, r6
 80193fc:	b007      	add	sp, #28
 80193fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019402:	b002      	add	sp, #8
 8019404:	4770      	bx	lr
 8019406:	260b      	movs	r6, #11
 8019408:	e7f7      	b.n	80193fa <rcl_guard_condition_init+0x72>
 801940a:	2665      	movs	r6, #101	@ 0x65
 801940c:	e7f5      	b.n	80193fa <rcl_guard_condition_init+0x72>
 801940e:	9b02      	ldr	r3, [sp, #8]
 8019410:	9905      	ldr	r1, [sp, #20]
 8019412:	4798      	blx	r3
 8019414:	2601      	movs	r6, #1
 8019416:	6065      	str	r5, [r4, #4]
 8019418:	e7ef      	b.n	80193fa <rcl_guard_condition_init+0x72>
 801941a:	260a      	movs	r6, #10
 801941c:	e7ed      	b.n	80193fa <rcl_guard_condition_init+0x72>
 801941e:	bf00      	nop

08019420 <rcl_guard_condition_init_from_rmw>:
 8019420:	b082      	sub	sp, #8
 8019422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019426:	b086      	sub	sp, #24
 8019428:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801942c:	4604      	mov	r4, r0
 801942e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8019432:	460e      	mov	r6, r1
 8019434:	4617      	mov	r7, r2
 8019436:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801943a:	f10d 0e04 	add.w	lr, sp, #4
 801943e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019442:	f8dc 3000 	ldr.w	r3, [ip]
 8019446:	f8ce 3000 	str.w	r3, [lr]
 801944a:	a801      	add	r0, sp, #4
 801944c:	f7f4 fd2a 	bl	800dea4 <rcutils_allocator_is_valid>
 8019450:	b350      	cbz	r0, 80194a8 <rcl_guard_condition_init_from_rmw+0x88>
 8019452:	b34c      	cbz	r4, 80194a8 <rcl_guard_condition_init_from_rmw+0x88>
 8019454:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8019458:	f1b8 0f00 	cmp.w	r8, #0
 801945c:	d11e      	bne.n	801949c <rcl_guard_condition_init_from_rmw+0x7c>
 801945e:	b31f      	cbz	r7, 80194a8 <rcl_guard_condition_init_from_rmw+0x88>
 8019460:	4638      	mov	r0, r7
 8019462:	f7fa fe6d 	bl	8014140 <rcl_context_is_valid>
 8019466:	b328      	cbz	r0, 80194b4 <rcl_guard_condition_init_from_rmw+0x94>
 8019468:	9b01      	ldr	r3, [sp, #4]
 801946a:	9905      	ldr	r1, [sp, #20]
 801946c:	201c      	movs	r0, #28
 801946e:	4798      	blx	r3
 8019470:	4605      	mov	r5, r0
 8019472:	6060      	str	r0, [r4, #4]
 8019474:	b358      	cbz	r0, 80194ce <rcl_guard_condition_init_from_rmw+0xae>
 8019476:	b1fe      	cbz	r6, 80194b8 <rcl_guard_condition_init_from_rmw+0x98>
 8019478:	6006      	str	r6, [r0, #0]
 801947a:	f880 8004 	strb.w	r8, [r0, #4]
 801947e:	ac01      	add	r4, sp, #4
 8019480:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019482:	f105 0c08 	add.w	ip, r5, #8
 8019486:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801948a:	6823      	ldr	r3, [r4, #0]
 801948c:	f8cc 3000 	str.w	r3, [ip]
 8019490:	2000      	movs	r0, #0
 8019492:	b006      	add	sp, #24
 8019494:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019498:	b002      	add	sp, #8
 801949a:	4770      	bx	lr
 801949c:	2064      	movs	r0, #100	@ 0x64
 801949e:	b006      	add	sp, #24
 80194a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80194a4:	b002      	add	sp, #8
 80194a6:	4770      	bx	lr
 80194a8:	200b      	movs	r0, #11
 80194aa:	b006      	add	sp, #24
 80194ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80194b0:	b002      	add	sp, #8
 80194b2:	4770      	bx	lr
 80194b4:	2065      	movs	r0, #101	@ 0x65
 80194b6:	e7f2      	b.n	801949e <rcl_guard_condition_init_from_rmw+0x7e>
 80194b8:	6838      	ldr	r0, [r7, #0]
 80194ba:	3028      	adds	r0, #40	@ 0x28
 80194bc:	f000 f962 	bl	8019784 <rmw_create_guard_condition>
 80194c0:	6028      	str	r0, [r5, #0]
 80194c2:	6865      	ldr	r5, [r4, #4]
 80194c4:	682e      	ldr	r6, [r5, #0]
 80194c6:	b126      	cbz	r6, 80194d2 <rcl_guard_condition_init_from_rmw+0xb2>
 80194c8:	2301      	movs	r3, #1
 80194ca:	712b      	strb	r3, [r5, #4]
 80194cc:	e7d7      	b.n	801947e <rcl_guard_condition_init_from_rmw+0x5e>
 80194ce:	200a      	movs	r0, #10
 80194d0:	e7e5      	b.n	801949e <rcl_guard_condition_init_from_rmw+0x7e>
 80194d2:	4628      	mov	r0, r5
 80194d4:	9b02      	ldr	r3, [sp, #8]
 80194d6:	9905      	ldr	r1, [sp, #20]
 80194d8:	4798      	blx	r3
 80194da:	6066      	str	r6, [r4, #4]
 80194dc:	2001      	movs	r0, #1
 80194de:	e7de      	b.n	801949e <rcl_guard_condition_init_from_rmw+0x7e>

080194e0 <rcl_guard_condition_fini>:
 80194e0:	b570      	push	{r4, r5, r6, lr}
 80194e2:	b082      	sub	sp, #8
 80194e4:	b1f0      	cbz	r0, 8019524 <rcl_guard_condition_fini+0x44>
 80194e6:	6843      	ldr	r3, [r0, #4]
 80194e8:	4604      	mov	r4, r0
 80194ea:	b163      	cbz	r3, 8019506 <rcl_guard_condition_fini+0x26>
 80194ec:	6818      	ldr	r0, [r3, #0]
 80194ee:	68de      	ldr	r6, [r3, #12]
 80194f0:	6999      	ldr	r1, [r3, #24]
 80194f2:	b160      	cbz	r0, 801950e <rcl_guard_condition_fini+0x2e>
 80194f4:	791d      	ldrb	r5, [r3, #4]
 80194f6:	b965      	cbnz	r5, 8019512 <rcl_guard_condition_fini+0x32>
 80194f8:	4618      	mov	r0, r3
 80194fa:	47b0      	blx	r6
 80194fc:	2300      	movs	r3, #0
 80194fe:	4628      	mov	r0, r5
 8019500:	6063      	str	r3, [r4, #4]
 8019502:	b002      	add	sp, #8
 8019504:	bd70      	pop	{r4, r5, r6, pc}
 8019506:	461d      	mov	r5, r3
 8019508:	4628      	mov	r0, r5
 801950a:	b002      	add	sp, #8
 801950c:	bd70      	pop	{r4, r5, r6, pc}
 801950e:	4605      	mov	r5, r0
 8019510:	e7f2      	b.n	80194f8 <rcl_guard_condition_fini+0x18>
 8019512:	9101      	str	r1, [sp, #4]
 8019514:	f000 f94a 	bl	80197ac <rmw_destroy_guard_condition>
 8019518:	1e05      	subs	r5, r0, #0
 801951a:	6863      	ldr	r3, [r4, #4]
 801951c:	9901      	ldr	r1, [sp, #4]
 801951e:	bf18      	it	ne
 8019520:	2501      	movne	r5, #1
 8019522:	e7e9      	b.n	80194f8 <rcl_guard_condition_fini+0x18>
 8019524:	250b      	movs	r5, #11
 8019526:	4628      	mov	r0, r5
 8019528:	b002      	add	sp, #8
 801952a:	bd70      	pop	{r4, r5, r6, pc}

0801952c <rcl_guard_condition_get_default_options>:
 801952c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801952e:	b087      	sub	sp, #28
 8019530:	4606      	mov	r6, r0
 8019532:	4668      	mov	r0, sp
 8019534:	f7f4 fca8 	bl	800de88 <rcutils_get_default_allocator>
 8019538:	4b09      	ldr	r3, [pc, #36]	@ (8019560 <rcl_guard_condition_get_default_options+0x34>)
 801953a:	46ee      	mov	lr, sp
 801953c:	469c      	mov	ip, r3
 801953e:	461d      	mov	r5, r3
 8019540:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019544:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801954a:	4634      	mov	r4, r6
 801954c:	f8de 7000 	ldr.w	r7, [lr]
 8019550:	f8cc 7000 	str.w	r7, [ip]
 8019554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019556:	4630      	mov	r0, r6
 8019558:	6027      	str	r7, [r4, #0]
 801955a:	b007      	add	sp, #28
 801955c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801955e:	bf00      	nop
 8019560:	2000afa4 	.word	0x2000afa4

08019564 <rcl_trigger_guard_condition>:
 8019564:	b148      	cbz	r0, 801957a <rcl_trigger_guard_condition+0x16>
 8019566:	b508      	push	{r3, lr}
 8019568:	6843      	ldr	r3, [r0, #4]
 801956a:	b143      	cbz	r3, 801957e <rcl_trigger_guard_condition+0x1a>
 801956c:	6818      	ldr	r0, [r3, #0]
 801956e:	f000 f931 	bl	80197d4 <rmw_trigger_guard_condition>
 8019572:	3800      	subs	r0, #0
 8019574:	bf18      	it	ne
 8019576:	2001      	movne	r0, #1
 8019578:	bd08      	pop	{r3, pc}
 801957a:	200b      	movs	r0, #11
 801957c:	4770      	bx	lr
 801957e:	200b      	movs	r0, #11
 8019580:	bd08      	pop	{r3, pc}
 8019582:	bf00      	nop

08019584 <rcl_guard_condition_get_rmw_handle>:
 8019584:	b110      	cbz	r0, 801958c <rcl_guard_condition_get_rmw_handle+0x8>
 8019586:	6840      	ldr	r0, [r0, #4]
 8019588:	b100      	cbz	r0, 801958c <rcl_guard_condition_get_rmw_handle+0x8>
 801958a:	6800      	ldr	r0, [r0, #0]
 801958c:	4770      	bx	lr
 801958e:	bf00      	nop

08019590 <rcl_validate_topic_name>:
 8019590:	2800      	cmp	r0, #0
 8019592:	d07a      	beq.n	801968a <rcl_validate_topic_name+0xfa>
 8019594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019598:	460e      	mov	r6, r1
 801959a:	2900      	cmp	r1, #0
 801959c:	d07c      	beq.n	8019698 <rcl_validate_topic_name+0x108>
 801959e:	4617      	mov	r7, r2
 80195a0:	4605      	mov	r5, r0
 80195a2:	f7e6 fe47 	bl	8000234 <strlen>
 80195a6:	b1b0      	cbz	r0, 80195d6 <rcl_validate_topic_name+0x46>
 80195a8:	f895 9000 	ldrb.w	r9, [r5]
 80195ac:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8019730 <rcl_validate_topic_name+0x1a0>
 80195b0:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80195b4:	f013 0304 	ands.w	r3, r3, #4
 80195b8:	d169      	bne.n	801968e <rcl_validate_topic_name+0xfe>
 80195ba:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80195be:	f815 2008 	ldrb.w	r2, [r5, r8]
 80195c2:	2a2f      	cmp	r2, #47	@ 0x2f
 80195c4:	d10e      	bne.n	80195e4 <rcl_validate_topic_name+0x54>
 80195c6:	2202      	movs	r2, #2
 80195c8:	6032      	str	r2, [r6, #0]
 80195ca:	b36f      	cbz	r7, 8019628 <rcl_validate_topic_name+0x98>
 80195cc:	f8c7 8000 	str.w	r8, [r7]
 80195d0:	4618      	mov	r0, r3
 80195d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80195d6:	2301      	movs	r3, #1
 80195d8:	6033      	str	r3, [r6, #0]
 80195da:	b32f      	cbz	r7, 8019628 <rcl_validate_topic_name+0x98>
 80195dc:	2000      	movs	r0, #0
 80195de:	6038      	str	r0, [r7, #0]
 80195e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80195e4:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 80195e8:	461c      	mov	r4, r3
 80195ea:	4619      	mov	r1, r3
 80195ec:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 80195f0:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80195f4:	f1be 0f09 	cmp.w	lr, #9
 80195f8:	d919      	bls.n	801962e <rcl_validate_topic_name+0x9e>
 80195fa:	f022 0e20 	bic.w	lr, r2, #32
 80195fe:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8019602:	f1be 0f19 	cmp.w	lr, #25
 8019606:	d912      	bls.n	801962e <rcl_validate_topic_name+0x9e>
 8019608:	2a5f      	cmp	r2, #95	@ 0x5f
 801960a:	d019      	beq.n	8019640 <rcl_validate_topic_name+0xb0>
 801960c:	2a2f      	cmp	r2, #47	@ 0x2f
 801960e:	d051      	beq.n	80196b4 <rcl_validate_topic_name+0x124>
 8019610:	2a7e      	cmp	r2, #126	@ 0x7e
 8019612:	d048      	beq.n	80196a6 <rcl_validate_topic_name+0x116>
 8019614:	2a7b      	cmp	r2, #123	@ 0x7b
 8019616:	d054      	beq.n	80196c2 <rcl_validate_topic_name+0x132>
 8019618:	2a7d      	cmp	r2, #125	@ 0x7d
 801961a:	d161      	bne.n	80196e0 <rcl_validate_topic_name+0x150>
 801961c:	2c00      	cmp	r4, #0
 801961e:	d155      	bne.n	80196cc <rcl_validate_topic_name+0x13c>
 8019620:	2305      	movs	r3, #5
 8019622:	6033      	str	r3, [r6, #0]
 8019624:	b107      	cbz	r7, 8019628 <rcl_validate_topic_name+0x98>
 8019626:	6039      	str	r1, [r7, #0]
 8019628:	2000      	movs	r0, #0
 801962a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801962e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019632:	0752      	lsls	r2, r2, #29
 8019634:	d504      	bpl.n	8019640 <rcl_validate_topic_name+0xb0>
 8019636:	b11c      	cbz	r4, 8019640 <rcl_validate_topic_name+0xb0>
 8019638:	b111      	cbz	r1, 8019640 <rcl_validate_topic_name+0xb0>
 801963a:	1e4a      	subs	r2, r1, #1
 801963c:	429a      	cmp	r2, r3
 801963e:	d02d      	beq.n	801969c <rcl_validate_topic_name+0x10c>
 8019640:	3101      	adds	r1, #1
 8019642:	4288      	cmp	r0, r1
 8019644:	d1d2      	bne.n	80195ec <rcl_validate_topic_name+0x5c>
 8019646:	2c00      	cmp	r4, #0
 8019648:	d145      	bne.n	80196d6 <rcl_validate_topic_name+0x146>
 801964a:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801964e:	d04f      	beq.n	80196f0 <rcl_validate_topic_name+0x160>
 8019650:	4620      	mov	r0, r4
 8019652:	2301      	movs	r3, #1
 8019654:	e006      	b.n	8019664 <rcl_validate_topic_name+0xd4>
 8019656:	428b      	cmp	r3, r1
 8019658:	f105 0501 	add.w	r5, r5, #1
 801965c:	f103 0201 	add.w	r2, r3, #1
 8019660:	d236      	bcs.n	80196d0 <rcl_validate_topic_name+0x140>
 8019662:	4613      	mov	r3, r2
 8019664:	4580      	cmp	r8, r0
 8019666:	f100 0001 	add.w	r0, r0, #1
 801966a:	d0f4      	beq.n	8019656 <rcl_validate_topic_name+0xc6>
 801966c:	782a      	ldrb	r2, [r5, #0]
 801966e:	2a2f      	cmp	r2, #47	@ 0x2f
 8019670:	d1f1      	bne.n	8019656 <rcl_validate_topic_name+0xc6>
 8019672:	786a      	ldrb	r2, [r5, #1]
 8019674:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019678:	0754      	lsls	r4, r2, #29
 801967a:	d5ec      	bpl.n	8019656 <rcl_validate_topic_name+0xc6>
 801967c:	2204      	movs	r2, #4
 801967e:	6032      	str	r2, [r6, #0]
 8019680:	2f00      	cmp	r7, #0
 8019682:	d0d1      	beq.n	8019628 <rcl_validate_topic_name+0x98>
 8019684:	603b      	str	r3, [r7, #0]
 8019686:	2000      	movs	r0, #0
 8019688:	e7aa      	b.n	80195e0 <rcl_validate_topic_name+0x50>
 801968a:	200b      	movs	r0, #11
 801968c:	4770      	bx	lr
 801968e:	2304      	movs	r3, #4
 8019690:	6033      	str	r3, [r6, #0]
 8019692:	2f00      	cmp	r7, #0
 8019694:	d1a2      	bne.n	80195dc <rcl_validate_topic_name+0x4c>
 8019696:	e7c7      	b.n	8019628 <rcl_validate_topic_name+0x98>
 8019698:	200b      	movs	r0, #11
 801969a:	e7a1      	b.n	80195e0 <rcl_validate_topic_name+0x50>
 801969c:	2309      	movs	r3, #9
 801969e:	6033      	str	r3, [r6, #0]
 80196a0:	2f00      	cmp	r7, #0
 80196a2:	d1c0      	bne.n	8019626 <rcl_validate_topic_name+0x96>
 80196a4:	e7c0      	b.n	8019628 <rcl_validate_topic_name+0x98>
 80196a6:	2900      	cmp	r1, #0
 80196a8:	d0ca      	beq.n	8019640 <rcl_validate_topic_name+0xb0>
 80196aa:	2306      	movs	r3, #6
 80196ac:	6033      	str	r3, [r6, #0]
 80196ae:	2f00      	cmp	r7, #0
 80196b0:	d1b9      	bne.n	8019626 <rcl_validate_topic_name+0x96>
 80196b2:	e7b9      	b.n	8019628 <rcl_validate_topic_name+0x98>
 80196b4:	2c00      	cmp	r4, #0
 80196b6:	d0c3      	beq.n	8019640 <rcl_validate_topic_name+0xb0>
 80196b8:	2308      	movs	r3, #8
 80196ba:	6033      	str	r3, [r6, #0]
 80196bc:	2f00      	cmp	r7, #0
 80196be:	d1b2      	bne.n	8019626 <rcl_validate_topic_name+0x96>
 80196c0:	e7b2      	b.n	8019628 <rcl_validate_topic_name+0x98>
 80196c2:	2c00      	cmp	r4, #0
 80196c4:	d1f8      	bne.n	80196b8 <rcl_validate_topic_name+0x128>
 80196c6:	460b      	mov	r3, r1
 80196c8:	2401      	movs	r4, #1
 80196ca:	e7b9      	b.n	8019640 <rcl_validate_topic_name+0xb0>
 80196cc:	2400      	movs	r4, #0
 80196ce:	e7b7      	b.n	8019640 <rcl_validate_topic_name+0xb0>
 80196d0:	2000      	movs	r0, #0
 80196d2:	6030      	str	r0, [r6, #0]
 80196d4:	e784      	b.n	80195e0 <rcl_validate_topic_name+0x50>
 80196d6:	2205      	movs	r2, #5
 80196d8:	6032      	str	r2, [r6, #0]
 80196da:	2f00      	cmp	r7, #0
 80196dc:	d1d2      	bne.n	8019684 <rcl_validate_topic_name+0xf4>
 80196de:	e7a3      	b.n	8019628 <rcl_validate_topic_name+0x98>
 80196e0:	2c00      	cmp	r4, #0
 80196e2:	bf14      	ite	ne
 80196e4:	2308      	movne	r3, #8
 80196e6:	2303      	moveq	r3, #3
 80196e8:	6033      	str	r3, [r6, #0]
 80196ea:	2f00      	cmp	r7, #0
 80196ec:	d19b      	bne.n	8019626 <rcl_validate_topic_name+0x96>
 80196ee:	e79b      	b.n	8019628 <rcl_validate_topic_name+0x98>
 80196f0:	2301      	movs	r3, #1
 80196f2:	e00a      	b.n	801970a <rcl_validate_topic_name+0x17a>
 80196f4:	2c01      	cmp	r4, #1
 80196f6:	d013      	beq.n	8019720 <rcl_validate_topic_name+0x190>
 80196f8:	4299      	cmp	r1, r3
 80196fa:	f104 0401 	add.w	r4, r4, #1
 80196fe:	f105 0501 	add.w	r5, r5, #1
 8019702:	f103 0201 	add.w	r2, r3, #1
 8019706:	d9e3      	bls.n	80196d0 <rcl_validate_topic_name+0x140>
 8019708:	4613      	mov	r3, r2
 801970a:	45a0      	cmp	r8, r4
 801970c:	d0f4      	beq.n	80196f8 <rcl_validate_topic_name+0x168>
 801970e:	782a      	ldrb	r2, [r5, #0]
 8019710:	2a2f      	cmp	r2, #47	@ 0x2f
 8019712:	d1ef      	bne.n	80196f4 <rcl_validate_topic_name+0x164>
 8019714:	786a      	ldrb	r2, [r5, #1]
 8019716:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801971a:	0752      	lsls	r2, r2, #29
 801971c:	d5ec      	bpl.n	80196f8 <rcl_validate_topic_name+0x168>
 801971e:	e7ad      	b.n	801967c <rcl_validate_topic_name+0xec>
 8019720:	2307      	movs	r3, #7
 8019722:	6033      	str	r3, [r6, #0]
 8019724:	2f00      	cmp	r7, #0
 8019726:	f43f af7f 	beq.w	8019628 <rcl_validate_topic_name+0x98>
 801972a:	603c      	str	r4, [r7, #0]
 801972c:	2000      	movs	r0, #0
 801972e:	e757      	b.n	80195e0 <rcl_validate_topic_name+0x50>
 8019730:	0801bc28 	.word	0x0801bc28

08019734 <rcutils_string_array_fini>:
 8019734:	b320      	cbz	r0, 8019780 <rcutils_string_array_fini+0x4c>
 8019736:	b570      	push	{r4, r5, r6, lr}
 8019738:	4604      	mov	r4, r0
 801973a:	6840      	ldr	r0, [r0, #4]
 801973c:	b1d8      	cbz	r0, 8019776 <rcutils_string_array_fini+0x42>
 801973e:	f104 0008 	add.w	r0, r4, #8
 8019742:	f7f4 fbaf 	bl	800dea4 <rcutils_allocator_is_valid>
 8019746:	b1b8      	cbz	r0, 8019778 <rcutils_string_array_fini+0x44>
 8019748:	6823      	ldr	r3, [r4, #0]
 801974a:	b1bb      	cbz	r3, 801977c <rcutils_string_array_fini+0x48>
 801974c:	2500      	movs	r5, #0
 801974e:	6860      	ldr	r0, [r4, #4]
 8019750:	462e      	mov	r6, r5
 8019752:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8019756:	68e3      	ldr	r3, [r4, #12]
 8019758:	69a1      	ldr	r1, [r4, #24]
 801975a:	4798      	blx	r3
 801975c:	e9d4 3000 	ldrd	r3, r0, [r4]
 8019760:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8019764:	3501      	adds	r5, #1
 8019766:	429d      	cmp	r5, r3
 8019768:	d3f3      	bcc.n	8019752 <rcutils_string_array_fini+0x1e>
 801976a:	68e3      	ldr	r3, [r4, #12]
 801976c:	69a1      	ldr	r1, [r4, #24]
 801976e:	4798      	blx	r3
 8019770:	2000      	movs	r0, #0
 8019772:	e9c4 0000 	strd	r0, r0, [r4]
 8019776:	bd70      	pop	{r4, r5, r6, pc}
 8019778:	200b      	movs	r0, #11
 801977a:	bd70      	pop	{r4, r5, r6, pc}
 801977c:	6860      	ldr	r0, [r4, #4]
 801977e:	e7f4      	b.n	801976a <rcutils_string_array_fini+0x36>
 8019780:	200b      	movs	r0, #11
 8019782:	4770      	bx	lr

08019784 <rmw_create_guard_condition>:
 8019784:	b538      	push	{r3, r4, r5, lr}
 8019786:	4605      	mov	r5, r0
 8019788:	4807      	ldr	r0, [pc, #28]	@ (80197a8 <rmw_create_guard_condition+0x24>)
 801978a:	f7fe f8f9 	bl	8017980 <get_memory>
 801978e:	b148      	cbz	r0, 80197a4 <rmw_create_guard_condition+0x20>
 8019790:	6884      	ldr	r4, [r0, #8]
 8019792:	2300      	movs	r3, #0
 8019794:	7423      	strb	r3, [r4, #16]
 8019796:	61e5      	str	r5, [r4, #28]
 8019798:	f7fe f95a 	bl	8017a50 <rmw_get_implementation_identifier>
 801979c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80197a0:	f104 0014 	add.w	r0, r4, #20
 80197a4:	bd38      	pop	{r3, r4, r5, pc}
 80197a6:	bf00      	nop
 80197a8:	2000adcc 	.word	0x2000adcc

080197ac <rmw_destroy_guard_condition>:
 80197ac:	b508      	push	{r3, lr}
 80197ae:	4b08      	ldr	r3, [pc, #32]	@ (80197d0 <rmw_destroy_guard_condition+0x24>)
 80197b0:	6819      	ldr	r1, [r3, #0]
 80197b2:	b911      	cbnz	r1, 80197ba <rmw_destroy_guard_condition+0xe>
 80197b4:	e00a      	b.n	80197cc <rmw_destroy_guard_condition+0x20>
 80197b6:	6849      	ldr	r1, [r1, #4]
 80197b8:	b141      	cbz	r1, 80197cc <rmw_destroy_guard_condition+0x20>
 80197ba:	688b      	ldr	r3, [r1, #8]
 80197bc:	3314      	adds	r3, #20
 80197be:	4298      	cmp	r0, r3
 80197c0:	d1f9      	bne.n	80197b6 <rmw_destroy_guard_condition+0xa>
 80197c2:	4803      	ldr	r0, [pc, #12]	@ (80197d0 <rmw_destroy_guard_condition+0x24>)
 80197c4:	f7fe f8ec 	bl	80179a0 <put_memory>
 80197c8:	2000      	movs	r0, #0
 80197ca:	bd08      	pop	{r3, pc}
 80197cc:	2001      	movs	r0, #1
 80197ce:	bd08      	pop	{r3, pc}
 80197d0:	2000adcc 	.word	0x2000adcc

080197d4 <rmw_trigger_guard_condition>:
 80197d4:	b160      	cbz	r0, 80197f0 <rmw_trigger_guard_condition+0x1c>
 80197d6:	b510      	push	{r4, lr}
 80197d8:	4604      	mov	r4, r0
 80197da:	6800      	ldr	r0, [r0, #0]
 80197dc:	f7f5 fe3e 	bl	800f45c <is_uxrce_rmw_identifier_valid>
 80197e0:	b908      	cbnz	r0, 80197e6 <rmw_trigger_guard_condition+0x12>
 80197e2:	2001      	movs	r0, #1
 80197e4:	bd10      	pop	{r4, pc}
 80197e6:	6863      	ldr	r3, [r4, #4]
 80197e8:	2201      	movs	r2, #1
 80197ea:	741a      	strb	r2, [r3, #16]
 80197ec:	2000      	movs	r0, #0
 80197ee:	bd10      	pop	{r4, pc}
 80197f0:	2001      	movs	r0, #1
 80197f2:	4770      	bx	lr

080197f4 <calloc>:
 80197f4:	4b02      	ldr	r3, [pc, #8]	@ (8019800 <calloc+0xc>)
 80197f6:	460a      	mov	r2, r1
 80197f8:	4601      	mov	r1, r0
 80197fa:	6818      	ldr	r0, [r3, #0]
 80197fc:	f000 b802 	b.w	8019804 <_calloc_r>
 8019800:	200000c0 	.word	0x200000c0

08019804 <_calloc_r>:
 8019804:	b570      	push	{r4, r5, r6, lr}
 8019806:	fba1 5402 	umull	r5, r4, r1, r2
 801980a:	b93c      	cbnz	r4, 801981c <_calloc_r+0x18>
 801980c:	4629      	mov	r1, r5
 801980e:	f000 f887 	bl	8019920 <_malloc_r>
 8019812:	4606      	mov	r6, r0
 8019814:	b928      	cbnz	r0, 8019822 <_calloc_r+0x1e>
 8019816:	2600      	movs	r6, #0
 8019818:	4630      	mov	r0, r6
 801981a:	bd70      	pop	{r4, r5, r6, pc}
 801981c:	220c      	movs	r2, #12
 801981e:	6002      	str	r2, [r0, #0]
 8019820:	e7f9      	b.n	8019816 <_calloc_r+0x12>
 8019822:	462a      	mov	r2, r5
 8019824:	4621      	mov	r1, r4
 8019826:	f000 fbcf 	bl	8019fc8 <memset>
 801982a:	e7f5      	b.n	8019818 <_calloc_r+0x14>

0801982c <getenv>:
 801982c:	b507      	push	{r0, r1, r2, lr}
 801982e:	4b04      	ldr	r3, [pc, #16]	@ (8019840 <getenv+0x14>)
 8019830:	4601      	mov	r1, r0
 8019832:	aa01      	add	r2, sp, #4
 8019834:	6818      	ldr	r0, [r3, #0]
 8019836:	f000 f805 	bl	8019844 <_findenv_r>
 801983a:	b003      	add	sp, #12
 801983c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019840:	200000c0 	.word	0x200000c0

08019844 <_findenv_r>:
 8019844:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019848:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80198b8 <_findenv_r+0x74>
 801984c:	4606      	mov	r6, r0
 801984e:	4689      	mov	r9, r1
 8019850:	4617      	mov	r7, r2
 8019852:	f000 fcaf 	bl	801a1b4 <__env_lock>
 8019856:	f8da 4000 	ldr.w	r4, [sl]
 801985a:	b134      	cbz	r4, 801986a <_findenv_r+0x26>
 801985c:	464b      	mov	r3, r9
 801985e:	4698      	mov	r8, r3
 8019860:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019864:	b13a      	cbz	r2, 8019876 <_findenv_r+0x32>
 8019866:	2a3d      	cmp	r2, #61	@ 0x3d
 8019868:	d1f9      	bne.n	801985e <_findenv_r+0x1a>
 801986a:	4630      	mov	r0, r6
 801986c:	f000 fca8 	bl	801a1c0 <__env_unlock>
 8019870:	2000      	movs	r0, #0
 8019872:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019876:	eba8 0809 	sub.w	r8, r8, r9
 801987a:	46a3      	mov	fp, r4
 801987c:	f854 0b04 	ldr.w	r0, [r4], #4
 8019880:	2800      	cmp	r0, #0
 8019882:	d0f2      	beq.n	801986a <_findenv_r+0x26>
 8019884:	4642      	mov	r2, r8
 8019886:	4649      	mov	r1, r9
 8019888:	f000 fbb3 	bl	8019ff2 <strncmp>
 801988c:	2800      	cmp	r0, #0
 801988e:	d1f4      	bne.n	801987a <_findenv_r+0x36>
 8019890:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019894:	eb03 0508 	add.w	r5, r3, r8
 8019898:	f813 3008 	ldrb.w	r3, [r3, r8]
 801989c:	2b3d      	cmp	r3, #61	@ 0x3d
 801989e:	d1ec      	bne.n	801987a <_findenv_r+0x36>
 80198a0:	f8da 3000 	ldr.w	r3, [sl]
 80198a4:	ebab 0303 	sub.w	r3, fp, r3
 80198a8:	109b      	asrs	r3, r3, #2
 80198aa:	4630      	mov	r0, r6
 80198ac:	603b      	str	r3, [r7, #0]
 80198ae:	f000 fc87 	bl	801a1c0 <__env_unlock>
 80198b2:	1c68      	adds	r0, r5, #1
 80198b4:	e7dd      	b.n	8019872 <_findenv_r+0x2e>
 80198b6:	bf00      	nop
 80198b8:	20000000 	.word	0x20000000

080198bc <malloc>:
 80198bc:	4b02      	ldr	r3, [pc, #8]	@ (80198c8 <malloc+0xc>)
 80198be:	4601      	mov	r1, r0
 80198c0:	6818      	ldr	r0, [r3, #0]
 80198c2:	f000 b82d 	b.w	8019920 <_malloc_r>
 80198c6:	bf00      	nop
 80198c8:	200000c0 	.word	0x200000c0

080198cc <free>:
 80198cc:	4b02      	ldr	r3, [pc, #8]	@ (80198d8 <free+0xc>)
 80198ce:	4601      	mov	r1, r0
 80198d0:	6818      	ldr	r0, [r3, #0]
 80198d2:	f000 bc7b 	b.w	801a1cc <_free_r>
 80198d6:	bf00      	nop
 80198d8:	200000c0 	.word	0x200000c0

080198dc <sbrk_aligned>:
 80198dc:	b570      	push	{r4, r5, r6, lr}
 80198de:	4e0f      	ldr	r6, [pc, #60]	@ (801991c <sbrk_aligned+0x40>)
 80198e0:	460c      	mov	r4, r1
 80198e2:	6831      	ldr	r1, [r6, #0]
 80198e4:	4605      	mov	r5, r0
 80198e6:	b911      	cbnz	r1, 80198ee <sbrk_aligned+0x12>
 80198e8:	f000 fbe0 	bl	801a0ac <_sbrk_r>
 80198ec:	6030      	str	r0, [r6, #0]
 80198ee:	4621      	mov	r1, r4
 80198f0:	4628      	mov	r0, r5
 80198f2:	f000 fbdb 	bl	801a0ac <_sbrk_r>
 80198f6:	1c43      	adds	r3, r0, #1
 80198f8:	d103      	bne.n	8019902 <sbrk_aligned+0x26>
 80198fa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80198fe:	4620      	mov	r0, r4
 8019900:	bd70      	pop	{r4, r5, r6, pc}
 8019902:	1cc4      	adds	r4, r0, #3
 8019904:	f024 0403 	bic.w	r4, r4, #3
 8019908:	42a0      	cmp	r0, r4
 801990a:	d0f8      	beq.n	80198fe <sbrk_aligned+0x22>
 801990c:	1a21      	subs	r1, r4, r0
 801990e:	4628      	mov	r0, r5
 8019910:	f000 fbcc 	bl	801a0ac <_sbrk_r>
 8019914:	3001      	adds	r0, #1
 8019916:	d1f2      	bne.n	80198fe <sbrk_aligned+0x22>
 8019918:	e7ef      	b.n	80198fa <sbrk_aligned+0x1e>
 801991a:	bf00      	nop
 801991c:	2000afb8 	.word	0x2000afb8

08019920 <_malloc_r>:
 8019920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019924:	1ccd      	adds	r5, r1, #3
 8019926:	f025 0503 	bic.w	r5, r5, #3
 801992a:	3508      	adds	r5, #8
 801992c:	2d0c      	cmp	r5, #12
 801992e:	bf38      	it	cc
 8019930:	250c      	movcc	r5, #12
 8019932:	2d00      	cmp	r5, #0
 8019934:	4606      	mov	r6, r0
 8019936:	db01      	blt.n	801993c <_malloc_r+0x1c>
 8019938:	42a9      	cmp	r1, r5
 801993a:	d904      	bls.n	8019946 <_malloc_r+0x26>
 801993c:	230c      	movs	r3, #12
 801993e:	6033      	str	r3, [r6, #0]
 8019940:	2000      	movs	r0, #0
 8019942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019946:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019a1c <_malloc_r+0xfc>
 801994a:	f000 f869 	bl	8019a20 <__malloc_lock>
 801994e:	f8d8 3000 	ldr.w	r3, [r8]
 8019952:	461c      	mov	r4, r3
 8019954:	bb44      	cbnz	r4, 80199a8 <_malloc_r+0x88>
 8019956:	4629      	mov	r1, r5
 8019958:	4630      	mov	r0, r6
 801995a:	f7ff ffbf 	bl	80198dc <sbrk_aligned>
 801995e:	1c43      	adds	r3, r0, #1
 8019960:	4604      	mov	r4, r0
 8019962:	d158      	bne.n	8019a16 <_malloc_r+0xf6>
 8019964:	f8d8 4000 	ldr.w	r4, [r8]
 8019968:	4627      	mov	r7, r4
 801996a:	2f00      	cmp	r7, #0
 801996c:	d143      	bne.n	80199f6 <_malloc_r+0xd6>
 801996e:	2c00      	cmp	r4, #0
 8019970:	d04b      	beq.n	8019a0a <_malloc_r+0xea>
 8019972:	6823      	ldr	r3, [r4, #0]
 8019974:	4639      	mov	r1, r7
 8019976:	4630      	mov	r0, r6
 8019978:	eb04 0903 	add.w	r9, r4, r3
 801997c:	f000 fb96 	bl	801a0ac <_sbrk_r>
 8019980:	4581      	cmp	r9, r0
 8019982:	d142      	bne.n	8019a0a <_malloc_r+0xea>
 8019984:	6821      	ldr	r1, [r4, #0]
 8019986:	1a6d      	subs	r5, r5, r1
 8019988:	4629      	mov	r1, r5
 801998a:	4630      	mov	r0, r6
 801998c:	f7ff ffa6 	bl	80198dc <sbrk_aligned>
 8019990:	3001      	adds	r0, #1
 8019992:	d03a      	beq.n	8019a0a <_malloc_r+0xea>
 8019994:	6823      	ldr	r3, [r4, #0]
 8019996:	442b      	add	r3, r5
 8019998:	6023      	str	r3, [r4, #0]
 801999a:	f8d8 3000 	ldr.w	r3, [r8]
 801999e:	685a      	ldr	r2, [r3, #4]
 80199a0:	bb62      	cbnz	r2, 80199fc <_malloc_r+0xdc>
 80199a2:	f8c8 7000 	str.w	r7, [r8]
 80199a6:	e00f      	b.n	80199c8 <_malloc_r+0xa8>
 80199a8:	6822      	ldr	r2, [r4, #0]
 80199aa:	1b52      	subs	r2, r2, r5
 80199ac:	d420      	bmi.n	80199f0 <_malloc_r+0xd0>
 80199ae:	2a0b      	cmp	r2, #11
 80199b0:	d917      	bls.n	80199e2 <_malloc_r+0xc2>
 80199b2:	1961      	adds	r1, r4, r5
 80199b4:	42a3      	cmp	r3, r4
 80199b6:	6025      	str	r5, [r4, #0]
 80199b8:	bf18      	it	ne
 80199ba:	6059      	strne	r1, [r3, #4]
 80199bc:	6863      	ldr	r3, [r4, #4]
 80199be:	bf08      	it	eq
 80199c0:	f8c8 1000 	streq.w	r1, [r8]
 80199c4:	5162      	str	r2, [r4, r5]
 80199c6:	604b      	str	r3, [r1, #4]
 80199c8:	4630      	mov	r0, r6
 80199ca:	f000 f82f 	bl	8019a2c <__malloc_unlock>
 80199ce:	f104 000b 	add.w	r0, r4, #11
 80199d2:	1d23      	adds	r3, r4, #4
 80199d4:	f020 0007 	bic.w	r0, r0, #7
 80199d8:	1ac2      	subs	r2, r0, r3
 80199da:	bf1c      	itt	ne
 80199dc:	1a1b      	subne	r3, r3, r0
 80199de:	50a3      	strne	r3, [r4, r2]
 80199e0:	e7af      	b.n	8019942 <_malloc_r+0x22>
 80199e2:	6862      	ldr	r2, [r4, #4]
 80199e4:	42a3      	cmp	r3, r4
 80199e6:	bf0c      	ite	eq
 80199e8:	f8c8 2000 	streq.w	r2, [r8]
 80199ec:	605a      	strne	r2, [r3, #4]
 80199ee:	e7eb      	b.n	80199c8 <_malloc_r+0xa8>
 80199f0:	4623      	mov	r3, r4
 80199f2:	6864      	ldr	r4, [r4, #4]
 80199f4:	e7ae      	b.n	8019954 <_malloc_r+0x34>
 80199f6:	463c      	mov	r4, r7
 80199f8:	687f      	ldr	r7, [r7, #4]
 80199fa:	e7b6      	b.n	801996a <_malloc_r+0x4a>
 80199fc:	461a      	mov	r2, r3
 80199fe:	685b      	ldr	r3, [r3, #4]
 8019a00:	42a3      	cmp	r3, r4
 8019a02:	d1fb      	bne.n	80199fc <_malloc_r+0xdc>
 8019a04:	2300      	movs	r3, #0
 8019a06:	6053      	str	r3, [r2, #4]
 8019a08:	e7de      	b.n	80199c8 <_malloc_r+0xa8>
 8019a0a:	230c      	movs	r3, #12
 8019a0c:	6033      	str	r3, [r6, #0]
 8019a0e:	4630      	mov	r0, r6
 8019a10:	f000 f80c 	bl	8019a2c <__malloc_unlock>
 8019a14:	e794      	b.n	8019940 <_malloc_r+0x20>
 8019a16:	6005      	str	r5, [r0, #0]
 8019a18:	e7d6      	b.n	80199c8 <_malloc_r+0xa8>
 8019a1a:	bf00      	nop
 8019a1c:	2000afbc 	.word	0x2000afbc

08019a20 <__malloc_lock>:
 8019a20:	4801      	ldr	r0, [pc, #4]	@ (8019a28 <__malloc_lock+0x8>)
 8019a22:	f000 bb90 	b.w	801a146 <__retarget_lock_acquire_recursive>
 8019a26:	bf00      	nop
 8019a28:	2000b101 	.word	0x2000b101

08019a2c <__malloc_unlock>:
 8019a2c:	4801      	ldr	r0, [pc, #4]	@ (8019a34 <__malloc_unlock+0x8>)
 8019a2e:	f000 bb8b 	b.w	801a148 <__retarget_lock_release_recursive>
 8019a32:	bf00      	nop
 8019a34:	2000b101 	.word	0x2000b101

08019a38 <srand>:
 8019a38:	b538      	push	{r3, r4, r5, lr}
 8019a3a:	4b10      	ldr	r3, [pc, #64]	@ (8019a7c <srand+0x44>)
 8019a3c:	681d      	ldr	r5, [r3, #0]
 8019a3e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8019a40:	4604      	mov	r4, r0
 8019a42:	b9b3      	cbnz	r3, 8019a72 <srand+0x3a>
 8019a44:	2018      	movs	r0, #24
 8019a46:	f7ff ff39 	bl	80198bc <malloc>
 8019a4a:	4602      	mov	r2, r0
 8019a4c:	6328      	str	r0, [r5, #48]	@ 0x30
 8019a4e:	b920      	cbnz	r0, 8019a5a <srand+0x22>
 8019a50:	4b0b      	ldr	r3, [pc, #44]	@ (8019a80 <srand+0x48>)
 8019a52:	480c      	ldr	r0, [pc, #48]	@ (8019a84 <srand+0x4c>)
 8019a54:	2146      	movs	r1, #70	@ 0x46
 8019a56:	f000 fb8f 	bl	801a178 <__assert_func>
 8019a5a:	490b      	ldr	r1, [pc, #44]	@ (8019a88 <srand+0x50>)
 8019a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8019a8c <srand+0x54>)
 8019a5e:	e9c0 1300 	strd	r1, r3, [r0]
 8019a62:	4b0b      	ldr	r3, [pc, #44]	@ (8019a90 <srand+0x58>)
 8019a64:	6083      	str	r3, [r0, #8]
 8019a66:	230b      	movs	r3, #11
 8019a68:	8183      	strh	r3, [r0, #12]
 8019a6a:	2100      	movs	r1, #0
 8019a6c:	2001      	movs	r0, #1
 8019a6e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019a72:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8019a74:	2200      	movs	r2, #0
 8019a76:	611c      	str	r4, [r3, #16]
 8019a78:	615a      	str	r2, [r3, #20]
 8019a7a:	bd38      	pop	{r3, r4, r5, pc}
 8019a7c:	200000c0 	.word	0x200000c0
 8019a80:	0801bbb8 	.word	0x0801bbb8
 8019a84:	0801bbcf 	.word	0x0801bbcf
 8019a88:	abcd330e 	.word	0xabcd330e
 8019a8c:	e66d1234 	.word	0xe66d1234
 8019a90:	0005deec 	.word	0x0005deec

08019a94 <rand>:
 8019a94:	4b16      	ldr	r3, [pc, #88]	@ (8019af0 <rand+0x5c>)
 8019a96:	b510      	push	{r4, lr}
 8019a98:	681c      	ldr	r4, [r3, #0]
 8019a9a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019a9c:	b9b3      	cbnz	r3, 8019acc <rand+0x38>
 8019a9e:	2018      	movs	r0, #24
 8019aa0:	f7ff ff0c 	bl	80198bc <malloc>
 8019aa4:	4602      	mov	r2, r0
 8019aa6:	6320      	str	r0, [r4, #48]	@ 0x30
 8019aa8:	b920      	cbnz	r0, 8019ab4 <rand+0x20>
 8019aaa:	4b12      	ldr	r3, [pc, #72]	@ (8019af4 <rand+0x60>)
 8019aac:	4812      	ldr	r0, [pc, #72]	@ (8019af8 <rand+0x64>)
 8019aae:	2152      	movs	r1, #82	@ 0x52
 8019ab0:	f000 fb62 	bl	801a178 <__assert_func>
 8019ab4:	4911      	ldr	r1, [pc, #68]	@ (8019afc <rand+0x68>)
 8019ab6:	4b12      	ldr	r3, [pc, #72]	@ (8019b00 <rand+0x6c>)
 8019ab8:	e9c0 1300 	strd	r1, r3, [r0]
 8019abc:	4b11      	ldr	r3, [pc, #68]	@ (8019b04 <rand+0x70>)
 8019abe:	6083      	str	r3, [r0, #8]
 8019ac0:	230b      	movs	r3, #11
 8019ac2:	8183      	strh	r3, [r0, #12]
 8019ac4:	2100      	movs	r1, #0
 8019ac6:	2001      	movs	r0, #1
 8019ac8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019acc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8019ace:	480e      	ldr	r0, [pc, #56]	@ (8019b08 <rand+0x74>)
 8019ad0:	690b      	ldr	r3, [r1, #16]
 8019ad2:	694c      	ldr	r4, [r1, #20]
 8019ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8019b0c <rand+0x78>)
 8019ad6:	4358      	muls	r0, r3
 8019ad8:	fb02 0004 	mla	r0, r2, r4, r0
 8019adc:	fba3 3202 	umull	r3, r2, r3, r2
 8019ae0:	3301      	adds	r3, #1
 8019ae2:	eb40 0002 	adc.w	r0, r0, r2
 8019ae6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8019aea:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8019aee:	bd10      	pop	{r4, pc}
 8019af0:	200000c0 	.word	0x200000c0
 8019af4:	0801bbb8 	.word	0x0801bbb8
 8019af8:	0801bbcf 	.word	0x0801bbcf
 8019afc:	abcd330e 	.word	0xabcd330e
 8019b00:	e66d1234 	.word	0xe66d1234
 8019b04:	0005deec 	.word	0x0005deec
 8019b08:	5851f42d 	.word	0x5851f42d
 8019b0c:	4c957f2d 	.word	0x4c957f2d

08019b10 <realloc>:
 8019b10:	4b02      	ldr	r3, [pc, #8]	@ (8019b1c <realloc+0xc>)
 8019b12:	460a      	mov	r2, r1
 8019b14:	4601      	mov	r1, r0
 8019b16:	6818      	ldr	r0, [r3, #0]
 8019b18:	f000 b802 	b.w	8019b20 <_realloc_r>
 8019b1c:	200000c0 	.word	0x200000c0

08019b20 <_realloc_r>:
 8019b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b24:	4680      	mov	r8, r0
 8019b26:	4615      	mov	r5, r2
 8019b28:	460c      	mov	r4, r1
 8019b2a:	b921      	cbnz	r1, 8019b36 <_realloc_r+0x16>
 8019b2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019b30:	4611      	mov	r1, r2
 8019b32:	f7ff bef5 	b.w	8019920 <_malloc_r>
 8019b36:	b92a      	cbnz	r2, 8019b44 <_realloc_r+0x24>
 8019b38:	f000 fb48 	bl	801a1cc <_free_r>
 8019b3c:	2400      	movs	r4, #0
 8019b3e:	4620      	mov	r0, r4
 8019b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b44:	f000 fb8c 	bl	801a260 <_malloc_usable_size_r>
 8019b48:	4285      	cmp	r5, r0
 8019b4a:	4606      	mov	r6, r0
 8019b4c:	d802      	bhi.n	8019b54 <_realloc_r+0x34>
 8019b4e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8019b52:	d8f4      	bhi.n	8019b3e <_realloc_r+0x1e>
 8019b54:	4629      	mov	r1, r5
 8019b56:	4640      	mov	r0, r8
 8019b58:	f7ff fee2 	bl	8019920 <_malloc_r>
 8019b5c:	4607      	mov	r7, r0
 8019b5e:	2800      	cmp	r0, #0
 8019b60:	d0ec      	beq.n	8019b3c <_realloc_r+0x1c>
 8019b62:	42b5      	cmp	r5, r6
 8019b64:	462a      	mov	r2, r5
 8019b66:	4621      	mov	r1, r4
 8019b68:	bf28      	it	cs
 8019b6a:	4632      	movcs	r2, r6
 8019b6c:	f000 faf5 	bl	801a15a <memcpy>
 8019b70:	4621      	mov	r1, r4
 8019b72:	4640      	mov	r0, r8
 8019b74:	f000 fb2a 	bl	801a1cc <_free_r>
 8019b78:	463c      	mov	r4, r7
 8019b7a:	e7e0      	b.n	8019b3e <_realloc_r+0x1e>

08019b7c <_strtoul_l.constprop.0>:
 8019b7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019b80:	4e34      	ldr	r6, [pc, #208]	@ (8019c54 <_strtoul_l.constprop.0+0xd8>)
 8019b82:	4686      	mov	lr, r0
 8019b84:	460d      	mov	r5, r1
 8019b86:	4628      	mov	r0, r5
 8019b88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019b8c:	5d37      	ldrb	r7, [r6, r4]
 8019b8e:	f017 0708 	ands.w	r7, r7, #8
 8019b92:	d1f8      	bne.n	8019b86 <_strtoul_l.constprop.0+0xa>
 8019b94:	2c2d      	cmp	r4, #45	@ 0x2d
 8019b96:	d12f      	bne.n	8019bf8 <_strtoul_l.constprop.0+0x7c>
 8019b98:	782c      	ldrb	r4, [r5, #0]
 8019b9a:	2701      	movs	r7, #1
 8019b9c:	1c85      	adds	r5, r0, #2
 8019b9e:	f033 0010 	bics.w	r0, r3, #16
 8019ba2:	d109      	bne.n	8019bb8 <_strtoul_l.constprop.0+0x3c>
 8019ba4:	2c30      	cmp	r4, #48	@ 0x30
 8019ba6:	d12c      	bne.n	8019c02 <_strtoul_l.constprop.0+0x86>
 8019ba8:	7828      	ldrb	r0, [r5, #0]
 8019baa:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8019bae:	2858      	cmp	r0, #88	@ 0x58
 8019bb0:	d127      	bne.n	8019c02 <_strtoul_l.constprop.0+0x86>
 8019bb2:	786c      	ldrb	r4, [r5, #1]
 8019bb4:	2310      	movs	r3, #16
 8019bb6:	3502      	adds	r5, #2
 8019bb8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8019bbc:	2600      	movs	r6, #0
 8019bbe:	fbb8 f8f3 	udiv	r8, r8, r3
 8019bc2:	fb03 f908 	mul.w	r9, r3, r8
 8019bc6:	ea6f 0909 	mvn.w	r9, r9
 8019bca:	4630      	mov	r0, r6
 8019bcc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8019bd0:	f1bc 0f09 	cmp.w	ip, #9
 8019bd4:	d81c      	bhi.n	8019c10 <_strtoul_l.constprop.0+0x94>
 8019bd6:	4664      	mov	r4, ip
 8019bd8:	42a3      	cmp	r3, r4
 8019bda:	dd2a      	ble.n	8019c32 <_strtoul_l.constprop.0+0xb6>
 8019bdc:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8019be0:	d007      	beq.n	8019bf2 <_strtoul_l.constprop.0+0x76>
 8019be2:	4580      	cmp	r8, r0
 8019be4:	d322      	bcc.n	8019c2c <_strtoul_l.constprop.0+0xb0>
 8019be6:	d101      	bne.n	8019bec <_strtoul_l.constprop.0+0x70>
 8019be8:	45a1      	cmp	r9, r4
 8019bea:	db1f      	blt.n	8019c2c <_strtoul_l.constprop.0+0xb0>
 8019bec:	fb00 4003 	mla	r0, r0, r3, r4
 8019bf0:	2601      	movs	r6, #1
 8019bf2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019bf6:	e7e9      	b.n	8019bcc <_strtoul_l.constprop.0+0x50>
 8019bf8:	2c2b      	cmp	r4, #43	@ 0x2b
 8019bfa:	bf04      	itt	eq
 8019bfc:	782c      	ldrbeq	r4, [r5, #0]
 8019bfe:	1c85      	addeq	r5, r0, #2
 8019c00:	e7cd      	b.n	8019b9e <_strtoul_l.constprop.0+0x22>
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	d1d8      	bne.n	8019bb8 <_strtoul_l.constprop.0+0x3c>
 8019c06:	2c30      	cmp	r4, #48	@ 0x30
 8019c08:	bf0c      	ite	eq
 8019c0a:	2308      	moveq	r3, #8
 8019c0c:	230a      	movne	r3, #10
 8019c0e:	e7d3      	b.n	8019bb8 <_strtoul_l.constprop.0+0x3c>
 8019c10:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8019c14:	f1bc 0f19 	cmp.w	ip, #25
 8019c18:	d801      	bhi.n	8019c1e <_strtoul_l.constprop.0+0xa2>
 8019c1a:	3c37      	subs	r4, #55	@ 0x37
 8019c1c:	e7dc      	b.n	8019bd8 <_strtoul_l.constprop.0+0x5c>
 8019c1e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8019c22:	f1bc 0f19 	cmp.w	ip, #25
 8019c26:	d804      	bhi.n	8019c32 <_strtoul_l.constprop.0+0xb6>
 8019c28:	3c57      	subs	r4, #87	@ 0x57
 8019c2a:	e7d5      	b.n	8019bd8 <_strtoul_l.constprop.0+0x5c>
 8019c2c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8019c30:	e7df      	b.n	8019bf2 <_strtoul_l.constprop.0+0x76>
 8019c32:	1c73      	adds	r3, r6, #1
 8019c34:	d106      	bne.n	8019c44 <_strtoul_l.constprop.0+0xc8>
 8019c36:	2322      	movs	r3, #34	@ 0x22
 8019c38:	f8ce 3000 	str.w	r3, [lr]
 8019c3c:	4630      	mov	r0, r6
 8019c3e:	b932      	cbnz	r2, 8019c4e <_strtoul_l.constprop.0+0xd2>
 8019c40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019c44:	b107      	cbz	r7, 8019c48 <_strtoul_l.constprop.0+0xcc>
 8019c46:	4240      	negs	r0, r0
 8019c48:	2a00      	cmp	r2, #0
 8019c4a:	d0f9      	beq.n	8019c40 <_strtoul_l.constprop.0+0xc4>
 8019c4c:	b106      	cbz	r6, 8019c50 <_strtoul_l.constprop.0+0xd4>
 8019c4e:	1e69      	subs	r1, r5, #1
 8019c50:	6011      	str	r1, [r2, #0]
 8019c52:	e7f5      	b.n	8019c40 <_strtoul_l.constprop.0+0xc4>
 8019c54:	0801bc28 	.word	0x0801bc28

08019c58 <strtoul>:
 8019c58:	4613      	mov	r3, r2
 8019c5a:	460a      	mov	r2, r1
 8019c5c:	4601      	mov	r1, r0
 8019c5e:	4802      	ldr	r0, [pc, #8]	@ (8019c68 <strtoul+0x10>)
 8019c60:	6800      	ldr	r0, [r0, #0]
 8019c62:	f7ff bf8b 	b.w	8019b7c <_strtoul_l.constprop.0>
 8019c66:	bf00      	nop
 8019c68:	200000c0 	.word	0x200000c0

08019c6c <std>:
 8019c6c:	2300      	movs	r3, #0
 8019c6e:	b510      	push	{r4, lr}
 8019c70:	4604      	mov	r4, r0
 8019c72:	e9c0 3300 	strd	r3, r3, [r0]
 8019c76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019c7a:	6083      	str	r3, [r0, #8]
 8019c7c:	8181      	strh	r1, [r0, #12]
 8019c7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8019c80:	81c2      	strh	r2, [r0, #14]
 8019c82:	6183      	str	r3, [r0, #24]
 8019c84:	4619      	mov	r1, r3
 8019c86:	2208      	movs	r2, #8
 8019c88:	305c      	adds	r0, #92	@ 0x5c
 8019c8a:	f000 f99d 	bl	8019fc8 <memset>
 8019c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8019cc4 <std+0x58>)
 8019c90:	6263      	str	r3, [r4, #36]	@ 0x24
 8019c92:	4b0d      	ldr	r3, [pc, #52]	@ (8019cc8 <std+0x5c>)
 8019c94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8019c96:	4b0d      	ldr	r3, [pc, #52]	@ (8019ccc <std+0x60>)
 8019c98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8019c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8019cd0 <std+0x64>)
 8019c9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8019c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8019cd4 <std+0x68>)
 8019ca0:	6224      	str	r4, [r4, #32]
 8019ca2:	429c      	cmp	r4, r3
 8019ca4:	d006      	beq.n	8019cb4 <std+0x48>
 8019ca6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8019caa:	4294      	cmp	r4, r2
 8019cac:	d002      	beq.n	8019cb4 <std+0x48>
 8019cae:	33d0      	adds	r3, #208	@ 0xd0
 8019cb0:	429c      	cmp	r4, r3
 8019cb2:	d105      	bne.n	8019cc0 <std+0x54>
 8019cb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019cbc:	f000 ba42 	b.w	801a144 <__retarget_lock_init_recursive>
 8019cc0:	bd10      	pop	{r4, pc}
 8019cc2:	bf00      	nop
 8019cc4:	08019e7d 	.word	0x08019e7d
 8019cc8:	08019e9f 	.word	0x08019e9f
 8019ccc:	08019ed7 	.word	0x08019ed7
 8019cd0:	08019efb 	.word	0x08019efb
 8019cd4:	2000afc0 	.word	0x2000afc0

08019cd8 <stdio_exit_handler>:
 8019cd8:	4a02      	ldr	r2, [pc, #8]	@ (8019ce4 <stdio_exit_handler+0xc>)
 8019cda:	4903      	ldr	r1, [pc, #12]	@ (8019ce8 <stdio_exit_handler+0x10>)
 8019cdc:	4803      	ldr	r0, [pc, #12]	@ (8019cec <stdio_exit_handler+0x14>)
 8019cde:	f000 b869 	b.w	8019db4 <_fwalk_sglue>
 8019ce2:	bf00      	nop
 8019ce4:	200000b4 	.word	0x200000b4
 8019ce8:	0801abc9 	.word	0x0801abc9
 8019cec:	200000c4 	.word	0x200000c4

08019cf0 <cleanup_stdio>:
 8019cf0:	6841      	ldr	r1, [r0, #4]
 8019cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8019d24 <cleanup_stdio+0x34>)
 8019cf4:	4299      	cmp	r1, r3
 8019cf6:	b510      	push	{r4, lr}
 8019cf8:	4604      	mov	r4, r0
 8019cfa:	d001      	beq.n	8019d00 <cleanup_stdio+0x10>
 8019cfc:	f000 ff64 	bl	801abc8 <_fflush_r>
 8019d00:	68a1      	ldr	r1, [r4, #8]
 8019d02:	4b09      	ldr	r3, [pc, #36]	@ (8019d28 <cleanup_stdio+0x38>)
 8019d04:	4299      	cmp	r1, r3
 8019d06:	d002      	beq.n	8019d0e <cleanup_stdio+0x1e>
 8019d08:	4620      	mov	r0, r4
 8019d0a:	f000 ff5d 	bl	801abc8 <_fflush_r>
 8019d0e:	68e1      	ldr	r1, [r4, #12]
 8019d10:	4b06      	ldr	r3, [pc, #24]	@ (8019d2c <cleanup_stdio+0x3c>)
 8019d12:	4299      	cmp	r1, r3
 8019d14:	d004      	beq.n	8019d20 <cleanup_stdio+0x30>
 8019d16:	4620      	mov	r0, r4
 8019d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d1c:	f000 bf54 	b.w	801abc8 <_fflush_r>
 8019d20:	bd10      	pop	{r4, pc}
 8019d22:	bf00      	nop
 8019d24:	2000afc0 	.word	0x2000afc0
 8019d28:	2000b028 	.word	0x2000b028
 8019d2c:	2000b090 	.word	0x2000b090

08019d30 <global_stdio_init.part.0>:
 8019d30:	b510      	push	{r4, lr}
 8019d32:	4b0b      	ldr	r3, [pc, #44]	@ (8019d60 <global_stdio_init.part.0+0x30>)
 8019d34:	4c0b      	ldr	r4, [pc, #44]	@ (8019d64 <global_stdio_init.part.0+0x34>)
 8019d36:	4a0c      	ldr	r2, [pc, #48]	@ (8019d68 <global_stdio_init.part.0+0x38>)
 8019d38:	601a      	str	r2, [r3, #0]
 8019d3a:	4620      	mov	r0, r4
 8019d3c:	2200      	movs	r2, #0
 8019d3e:	2104      	movs	r1, #4
 8019d40:	f7ff ff94 	bl	8019c6c <std>
 8019d44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8019d48:	2201      	movs	r2, #1
 8019d4a:	2109      	movs	r1, #9
 8019d4c:	f7ff ff8e 	bl	8019c6c <std>
 8019d50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8019d54:	2202      	movs	r2, #2
 8019d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d5a:	2112      	movs	r1, #18
 8019d5c:	f7ff bf86 	b.w	8019c6c <std>
 8019d60:	2000b0f8 	.word	0x2000b0f8
 8019d64:	2000afc0 	.word	0x2000afc0
 8019d68:	08019cd9 	.word	0x08019cd9

08019d6c <__sfp_lock_acquire>:
 8019d6c:	4801      	ldr	r0, [pc, #4]	@ (8019d74 <__sfp_lock_acquire+0x8>)
 8019d6e:	f000 b9ea 	b.w	801a146 <__retarget_lock_acquire_recursive>
 8019d72:	bf00      	nop
 8019d74:	2000b102 	.word	0x2000b102

08019d78 <__sfp_lock_release>:
 8019d78:	4801      	ldr	r0, [pc, #4]	@ (8019d80 <__sfp_lock_release+0x8>)
 8019d7a:	f000 b9e5 	b.w	801a148 <__retarget_lock_release_recursive>
 8019d7e:	bf00      	nop
 8019d80:	2000b102 	.word	0x2000b102

08019d84 <__sinit>:
 8019d84:	b510      	push	{r4, lr}
 8019d86:	4604      	mov	r4, r0
 8019d88:	f7ff fff0 	bl	8019d6c <__sfp_lock_acquire>
 8019d8c:	6a23      	ldr	r3, [r4, #32]
 8019d8e:	b11b      	cbz	r3, 8019d98 <__sinit+0x14>
 8019d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d94:	f7ff bff0 	b.w	8019d78 <__sfp_lock_release>
 8019d98:	4b04      	ldr	r3, [pc, #16]	@ (8019dac <__sinit+0x28>)
 8019d9a:	6223      	str	r3, [r4, #32]
 8019d9c:	4b04      	ldr	r3, [pc, #16]	@ (8019db0 <__sinit+0x2c>)
 8019d9e:	681b      	ldr	r3, [r3, #0]
 8019da0:	2b00      	cmp	r3, #0
 8019da2:	d1f5      	bne.n	8019d90 <__sinit+0xc>
 8019da4:	f7ff ffc4 	bl	8019d30 <global_stdio_init.part.0>
 8019da8:	e7f2      	b.n	8019d90 <__sinit+0xc>
 8019daa:	bf00      	nop
 8019dac:	08019cf1 	.word	0x08019cf1
 8019db0:	2000b0f8 	.word	0x2000b0f8

08019db4 <_fwalk_sglue>:
 8019db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019db8:	4607      	mov	r7, r0
 8019dba:	4688      	mov	r8, r1
 8019dbc:	4614      	mov	r4, r2
 8019dbe:	2600      	movs	r6, #0
 8019dc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019dc4:	f1b9 0901 	subs.w	r9, r9, #1
 8019dc8:	d505      	bpl.n	8019dd6 <_fwalk_sglue+0x22>
 8019dca:	6824      	ldr	r4, [r4, #0]
 8019dcc:	2c00      	cmp	r4, #0
 8019dce:	d1f7      	bne.n	8019dc0 <_fwalk_sglue+0xc>
 8019dd0:	4630      	mov	r0, r6
 8019dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019dd6:	89ab      	ldrh	r3, [r5, #12]
 8019dd8:	2b01      	cmp	r3, #1
 8019dda:	d907      	bls.n	8019dec <_fwalk_sglue+0x38>
 8019ddc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019de0:	3301      	adds	r3, #1
 8019de2:	d003      	beq.n	8019dec <_fwalk_sglue+0x38>
 8019de4:	4629      	mov	r1, r5
 8019de6:	4638      	mov	r0, r7
 8019de8:	47c0      	blx	r8
 8019dea:	4306      	orrs	r6, r0
 8019dec:	3568      	adds	r5, #104	@ 0x68
 8019dee:	e7e9      	b.n	8019dc4 <_fwalk_sglue+0x10>

08019df0 <iprintf>:
 8019df0:	b40f      	push	{r0, r1, r2, r3}
 8019df2:	b507      	push	{r0, r1, r2, lr}
 8019df4:	4906      	ldr	r1, [pc, #24]	@ (8019e10 <iprintf+0x20>)
 8019df6:	ab04      	add	r3, sp, #16
 8019df8:	6808      	ldr	r0, [r1, #0]
 8019dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8019dfe:	6881      	ldr	r1, [r0, #8]
 8019e00:	9301      	str	r3, [sp, #4]
 8019e02:	f000 fbb7 	bl	801a574 <_vfiprintf_r>
 8019e06:	b003      	add	sp, #12
 8019e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8019e0c:	b004      	add	sp, #16
 8019e0e:	4770      	bx	lr
 8019e10:	200000c0 	.word	0x200000c0

08019e14 <sniprintf>:
 8019e14:	b40c      	push	{r2, r3}
 8019e16:	b530      	push	{r4, r5, lr}
 8019e18:	4b17      	ldr	r3, [pc, #92]	@ (8019e78 <sniprintf+0x64>)
 8019e1a:	1e0c      	subs	r4, r1, #0
 8019e1c:	681d      	ldr	r5, [r3, #0]
 8019e1e:	b09d      	sub	sp, #116	@ 0x74
 8019e20:	da08      	bge.n	8019e34 <sniprintf+0x20>
 8019e22:	238b      	movs	r3, #139	@ 0x8b
 8019e24:	602b      	str	r3, [r5, #0]
 8019e26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019e2a:	b01d      	add	sp, #116	@ 0x74
 8019e2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019e30:	b002      	add	sp, #8
 8019e32:	4770      	bx	lr
 8019e34:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019e38:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019e3c:	bf14      	ite	ne
 8019e3e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8019e42:	4623      	moveq	r3, r4
 8019e44:	9304      	str	r3, [sp, #16]
 8019e46:	9307      	str	r3, [sp, #28]
 8019e48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019e4c:	9002      	str	r0, [sp, #8]
 8019e4e:	9006      	str	r0, [sp, #24]
 8019e50:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019e54:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019e56:	ab21      	add	r3, sp, #132	@ 0x84
 8019e58:	a902      	add	r1, sp, #8
 8019e5a:	4628      	mov	r0, r5
 8019e5c:	9301      	str	r3, [sp, #4]
 8019e5e:	f000 fa63 	bl	801a328 <_svfiprintf_r>
 8019e62:	1c43      	adds	r3, r0, #1
 8019e64:	bfbc      	itt	lt
 8019e66:	238b      	movlt	r3, #139	@ 0x8b
 8019e68:	602b      	strlt	r3, [r5, #0]
 8019e6a:	2c00      	cmp	r4, #0
 8019e6c:	d0dd      	beq.n	8019e2a <sniprintf+0x16>
 8019e6e:	9b02      	ldr	r3, [sp, #8]
 8019e70:	2200      	movs	r2, #0
 8019e72:	701a      	strb	r2, [r3, #0]
 8019e74:	e7d9      	b.n	8019e2a <sniprintf+0x16>
 8019e76:	bf00      	nop
 8019e78:	200000c0 	.word	0x200000c0

08019e7c <__sread>:
 8019e7c:	b510      	push	{r4, lr}
 8019e7e:	460c      	mov	r4, r1
 8019e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019e84:	f000 f900 	bl	801a088 <_read_r>
 8019e88:	2800      	cmp	r0, #0
 8019e8a:	bfab      	itete	ge
 8019e8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8019e8e:	89a3      	ldrhlt	r3, [r4, #12]
 8019e90:	181b      	addge	r3, r3, r0
 8019e92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8019e96:	bfac      	ite	ge
 8019e98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8019e9a:	81a3      	strhlt	r3, [r4, #12]
 8019e9c:	bd10      	pop	{r4, pc}

08019e9e <__swrite>:
 8019e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ea2:	461f      	mov	r7, r3
 8019ea4:	898b      	ldrh	r3, [r1, #12]
 8019ea6:	05db      	lsls	r3, r3, #23
 8019ea8:	4605      	mov	r5, r0
 8019eaa:	460c      	mov	r4, r1
 8019eac:	4616      	mov	r6, r2
 8019eae:	d505      	bpl.n	8019ebc <__swrite+0x1e>
 8019eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019eb4:	2302      	movs	r3, #2
 8019eb6:	2200      	movs	r2, #0
 8019eb8:	f000 f8d4 	bl	801a064 <_lseek_r>
 8019ebc:	89a3      	ldrh	r3, [r4, #12]
 8019ebe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019ec2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8019ec6:	81a3      	strh	r3, [r4, #12]
 8019ec8:	4632      	mov	r2, r6
 8019eca:	463b      	mov	r3, r7
 8019ecc:	4628      	mov	r0, r5
 8019ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019ed2:	f000 b8fb 	b.w	801a0cc <_write_r>

08019ed6 <__sseek>:
 8019ed6:	b510      	push	{r4, lr}
 8019ed8:	460c      	mov	r4, r1
 8019eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019ede:	f000 f8c1 	bl	801a064 <_lseek_r>
 8019ee2:	1c43      	adds	r3, r0, #1
 8019ee4:	89a3      	ldrh	r3, [r4, #12]
 8019ee6:	bf15      	itete	ne
 8019ee8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8019eea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8019eee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8019ef2:	81a3      	strheq	r3, [r4, #12]
 8019ef4:	bf18      	it	ne
 8019ef6:	81a3      	strhne	r3, [r4, #12]
 8019ef8:	bd10      	pop	{r4, pc}

08019efa <__sclose>:
 8019efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019efe:	f000 b8a1 	b.w	801a044 <_close_r>

08019f02 <_vsniprintf_r>:
 8019f02:	b530      	push	{r4, r5, lr}
 8019f04:	4614      	mov	r4, r2
 8019f06:	2c00      	cmp	r4, #0
 8019f08:	b09b      	sub	sp, #108	@ 0x6c
 8019f0a:	4605      	mov	r5, r0
 8019f0c:	461a      	mov	r2, r3
 8019f0e:	da05      	bge.n	8019f1c <_vsniprintf_r+0x1a>
 8019f10:	238b      	movs	r3, #139	@ 0x8b
 8019f12:	6003      	str	r3, [r0, #0]
 8019f14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019f18:	b01b      	add	sp, #108	@ 0x6c
 8019f1a:	bd30      	pop	{r4, r5, pc}
 8019f1c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019f20:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019f24:	bf14      	ite	ne
 8019f26:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8019f2a:	4623      	moveq	r3, r4
 8019f2c:	9302      	str	r3, [sp, #8]
 8019f2e:	9305      	str	r3, [sp, #20]
 8019f30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019f34:	9100      	str	r1, [sp, #0]
 8019f36:	9104      	str	r1, [sp, #16]
 8019f38:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019f3c:	4669      	mov	r1, sp
 8019f3e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8019f40:	f000 f9f2 	bl	801a328 <_svfiprintf_r>
 8019f44:	1c43      	adds	r3, r0, #1
 8019f46:	bfbc      	itt	lt
 8019f48:	238b      	movlt	r3, #139	@ 0x8b
 8019f4a:	602b      	strlt	r3, [r5, #0]
 8019f4c:	2c00      	cmp	r4, #0
 8019f4e:	d0e3      	beq.n	8019f18 <_vsniprintf_r+0x16>
 8019f50:	9b00      	ldr	r3, [sp, #0]
 8019f52:	2200      	movs	r2, #0
 8019f54:	701a      	strb	r2, [r3, #0]
 8019f56:	e7df      	b.n	8019f18 <_vsniprintf_r+0x16>

08019f58 <vsniprintf>:
 8019f58:	b507      	push	{r0, r1, r2, lr}
 8019f5a:	9300      	str	r3, [sp, #0]
 8019f5c:	4613      	mov	r3, r2
 8019f5e:	460a      	mov	r2, r1
 8019f60:	4601      	mov	r1, r0
 8019f62:	4803      	ldr	r0, [pc, #12]	@ (8019f70 <vsniprintf+0x18>)
 8019f64:	6800      	ldr	r0, [r0, #0]
 8019f66:	f7ff ffcc 	bl	8019f02 <_vsniprintf_r>
 8019f6a:	b003      	add	sp, #12
 8019f6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019f70:	200000c0 	.word	0x200000c0

08019f74 <memcmp>:
 8019f74:	b510      	push	{r4, lr}
 8019f76:	3901      	subs	r1, #1
 8019f78:	4402      	add	r2, r0
 8019f7a:	4290      	cmp	r0, r2
 8019f7c:	d101      	bne.n	8019f82 <memcmp+0xe>
 8019f7e:	2000      	movs	r0, #0
 8019f80:	e005      	b.n	8019f8e <memcmp+0x1a>
 8019f82:	7803      	ldrb	r3, [r0, #0]
 8019f84:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019f88:	42a3      	cmp	r3, r4
 8019f8a:	d001      	beq.n	8019f90 <memcmp+0x1c>
 8019f8c:	1b18      	subs	r0, r3, r4
 8019f8e:	bd10      	pop	{r4, pc}
 8019f90:	3001      	adds	r0, #1
 8019f92:	e7f2      	b.n	8019f7a <memcmp+0x6>

08019f94 <memmove>:
 8019f94:	4288      	cmp	r0, r1
 8019f96:	b510      	push	{r4, lr}
 8019f98:	eb01 0402 	add.w	r4, r1, r2
 8019f9c:	d902      	bls.n	8019fa4 <memmove+0x10>
 8019f9e:	4284      	cmp	r4, r0
 8019fa0:	4623      	mov	r3, r4
 8019fa2:	d807      	bhi.n	8019fb4 <memmove+0x20>
 8019fa4:	1e43      	subs	r3, r0, #1
 8019fa6:	42a1      	cmp	r1, r4
 8019fa8:	d008      	beq.n	8019fbc <memmove+0x28>
 8019faa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019fae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019fb2:	e7f8      	b.n	8019fa6 <memmove+0x12>
 8019fb4:	4402      	add	r2, r0
 8019fb6:	4601      	mov	r1, r0
 8019fb8:	428a      	cmp	r2, r1
 8019fba:	d100      	bne.n	8019fbe <memmove+0x2a>
 8019fbc:	bd10      	pop	{r4, pc}
 8019fbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019fc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019fc6:	e7f7      	b.n	8019fb8 <memmove+0x24>

08019fc8 <memset>:
 8019fc8:	4402      	add	r2, r0
 8019fca:	4603      	mov	r3, r0
 8019fcc:	4293      	cmp	r3, r2
 8019fce:	d100      	bne.n	8019fd2 <memset+0xa>
 8019fd0:	4770      	bx	lr
 8019fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8019fd6:	e7f9      	b.n	8019fcc <memset+0x4>

08019fd8 <strchr>:
 8019fd8:	b2c9      	uxtb	r1, r1
 8019fda:	4603      	mov	r3, r0
 8019fdc:	4618      	mov	r0, r3
 8019fde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019fe2:	b112      	cbz	r2, 8019fea <strchr+0x12>
 8019fe4:	428a      	cmp	r2, r1
 8019fe6:	d1f9      	bne.n	8019fdc <strchr+0x4>
 8019fe8:	4770      	bx	lr
 8019fea:	2900      	cmp	r1, #0
 8019fec:	bf18      	it	ne
 8019fee:	2000      	movne	r0, #0
 8019ff0:	4770      	bx	lr

08019ff2 <strncmp>:
 8019ff2:	b510      	push	{r4, lr}
 8019ff4:	b16a      	cbz	r2, 801a012 <strncmp+0x20>
 8019ff6:	3901      	subs	r1, #1
 8019ff8:	1884      	adds	r4, r0, r2
 8019ffa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019ffe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801a002:	429a      	cmp	r2, r3
 801a004:	d103      	bne.n	801a00e <strncmp+0x1c>
 801a006:	42a0      	cmp	r0, r4
 801a008:	d001      	beq.n	801a00e <strncmp+0x1c>
 801a00a:	2a00      	cmp	r2, #0
 801a00c:	d1f5      	bne.n	8019ffa <strncmp+0x8>
 801a00e:	1ad0      	subs	r0, r2, r3
 801a010:	bd10      	pop	{r4, pc}
 801a012:	4610      	mov	r0, r2
 801a014:	e7fc      	b.n	801a010 <strncmp+0x1e>

0801a016 <strstr>:
 801a016:	780a      	ldrb	r2, [r1, #0]
 801a018:	b570      	push	{r4, r5, r6, lr}
 801a01a:	b96a      	cbnz	r2, 801a038 <strstr+0x22>
 801a01c:	bd70      	pop	{r4, r5, r6, pc}
 801a01e:	429a      	cmp	r2, r3
 801a020:	d109      	bne.n	801a036 <strstr+0x20>
 801a022:	460c      	mov	r4, r1
 801a024:	4605      	mov	r5, r0
 801a026:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	d0f6      	beq.n	801a01c <strstr+0x6>
 801a02e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801a032:	429e      	cmp	r6, r3
 801a034:	d0f7      	beq.n	801a026 <strstr+0x10>
 801a036:	3001      	adds	r0, #1
 801a038:	7803      	ldrb	r3, [r0, #0]
 801a03a:	2b00      	cmp	r3, #0
 801a03c:	d1ef      	bne.n	801a01e <strstr+0x8>
 801a03e:	4618      	mov	r0, r3
 801a040:	e7ec      	b.n	801a01c <strstr+0x6>
	...

0801a044 <_close_r>:
 801a044:	b538      	push	{r3, r4, r5, lr}
 801a046:	4d06      	ldr	r5, [pc, #24]	@ (801a060 <_close_r+0x1c>)
 801a048:	2300      	movs	r3, #0
 801a04a:	4604      	mov	r4, r0
 801a04c:	4608      	mov	r0, r1
 801a04e:	602b      	str	r3, [r5, #0]
 801a050:	f7e8 fc8c 	bl	800296c <_close>
 801a054:	1c43      	adds	r3, r0, #1
 801a056:	d102      	bne.n	801a05e <_close_r+0x1a>
 801a058:	682b      	ldr	r3, [r5, #0]
 801a05a:	b103      	cbz	r3, 801a05e <_close_r+0x1a>
 801a05c:	6023      	str	r3, [r4, #0]
 801a05e:	bd38      	pop	{r3, r4, r5, pc}
 801a060:	2000b0fc 	.word	0x2000b0fc

0801a064 <_lseek_r>:
 801a064:	b538      	push	{r3, r4, r5, lr}
 801a066:	4d07      	ldr	r5, [pc, #28]	@ (801a084 <_lseek_r+0x20>)
 801a068:	4604      	mov	r4, r0
 801a06a:	4608      	mov	r0, r1
 801a06c:	4611      	mov	r1, r2
 801a06e:	2200      	movs	r2, #0
 801a070:	602a      	str	r2, [r5, #0]
 801a072:	461a      	mov	r2, r3
 801a074:	f7e8 fca1 	bl	80029ba <_lseek>
 801a078:	1c43      	adds	r3, r0, #1
 801a07a:	d102      	bne.n	801a082 <_lseek_r+0x1e>
 801a07c:	682b      	ldr	r3, [r5, #0]
 801a07e:	b103      	cbz	r3, 801a082 <_lseek_r+0x1e>
 801a080:	6023      	str	r3, [r4, #0]
 801a082:	bd38      	pop	{r3, r4, r5, pc}
 801a084:	2000b0fc 	.word	0x2000b0fc

0801a088 <_read_r>:
 801a088:	b538      	push	{r3, r4, r5, lr}
 801a08a:	4d07      	ldr	r5, [pc, #28]	@ (801a0a8 <_read_r+0x20>)
 801a08c:	4604      	mov	r4, r0
 801a08e:	4608      	mov	r0, r1
 801a090:	4611      	mov	r1, r2
 801a092:	2200      	movs	r2, #0
 801a094:	602a      	str	r2, [r5, #0]
 801a096:	461a      	mov	r2, r3
 801a098:	f7e8 fc2f 	bl	80028fa <_read>
 801a09c:	1c43      	adds	r3, r0, #1
 801a09e:	d102      	bne.n	801a0a6 <_read_r+0x1e>
 801a0a0:	682b      	ldr	r3, [r5, #0]
 801a0a2:	b103      	cbz	r3, 801a0a6 <_read_r+0x1e>
 801a0a4:	6023      	str	r3, [r4, #0]
 801a0a6:	bd38      	pop	{r3, r4, r5, pc}
 801a0a8:	2000b0fc 	.word	0x2000b0fc

0801a0ac <_sbrk_r>:
 801a0ac:	b538      	push	{r3, r4, r5, lr}
 801a0ae:	4d06      	ldr	r5, [pc, #24]	@ (801a0c8 <_sbrk_r+0x1c>)
 801a0b0:	2300      	movs	r3, #0
 801a0b2:	4604      	mov	r4, r0
 801a0b4:	4608      	mov	r0, r1
 801a0b6:	602b      	str	r3, [r5, #0]
 801a0b8:	f7e8 fc8c 	bl	80029d4 <_sbrk>
 801a0bc:	1c43      	adds	r3, r0, #1
 801a0be:	d102      	bne.n	801a0c6 <_sbrk_r+0x1a>
 801a0c0:	682b      	ldr	r3, [r5, #0]
 801a0c2:	b103      	cbz	r3, 801a0c6 <_sbrk_r+0x1a>
 801a0c4:	6023      	str	r3, [r4, #0]
 801a0c6:	bd38      	pop	{r3, r4, r5, pc}
 801a0c8:	2000b0fc 	.word	0x2000b0fc

0801a0cc <_write_r>:
 801a0cc:	b538      	push	{r3, r4, r5, lr}
 801a0ce:	4d07      	ldr	r5, [pc, #28]	@ (801a0ec <_write_r+0x20>)
 801a0d0:	4604      	mov	r4, r0
 801a0d2:	4608      	mov	r0, r1
 801a0d4:	4611      	mov	r1, r2
 801a0d6:	2200      	movs	r2, #0
 801a0d8:	602a      	str	r2, [r5, #0]
 801a0da:	461a      	mov	r2, r3
 801a0dc:	f7e8 fc2a 	bl	8002934 <_write>
 801a0e0:	1c43      	adds	r3, r0, #1
 801a0e2:	d102      	bne.n	801a0ea <_write_r+0x1e>
 801a0e4:	682b      	ldr	r3, [r5, #0]
 801a0e6:	b103      	cbz	r3, 801a0ea <_write_r+0x1e>
 801a0e8:	6023      	str	r3, [r4, #0]
 801a0ea:	bd38      	pop	{r3, r4, r5, pc}
 801a0ec:	2000b0fc 	.word	0x2000b0fc

0801a0f0 <__errno>:
 801a0f0:	4b01      	ldr	r3, [pc, #4]	@ (801a0f8 <__errno+0x8>)
 801a0f2:	6818      	ldr	r0, [r3, #0]
 801a0f4:	4770      	bx	lr
 801a0f6:	bf00      	nop
 801a0f8:	200000c0 	.word	0x200000c0

0801a0fc <__libc_init_array>:
 801a0fc:	b570      	push	{r4, r5, r6, lr}
 801a0fe:	4d0d      	ldr	r5, [pc, #52]	@ (801a134 <__libc_init_array+0x38>)
 801a100:	4c0d      	ldr	r4, [pc, #52]	@ (801a138 <__libc_init_array+0x3c>)
 801a102:	1b64      	subs	r4, r4, r5
 801a104:	10a4      	asrs	r4, r4, #2
 801a106:	2600      	movs	r6, #0
 801a108:	42a6      	cmp	r6, r4
 801a10a:	d109      	bne.n	801a120 <__libc_init_array+0x24>
 801a10c:	4d0b      	ldr	r5, [pc, #44]	@ (801a13c <__libc_init_array+0x40>)
 801a10e:	4c0c      	ldr	r4, [pc, #48]	@ (801a140 <__libc_init_array+0x44>)
 801a110:	f000 fef8 	bl	801af04 <_init>
 801a114:	1b64      	subs	r4, r4, r5
 801a116:	10a4      	asrs	r4, r4, #2
 801a118:	2600      	movs	r6, #0
 801a11a:	42a6      	cmp	r6, r4
 801a11c:	d105      	bne.n	801a12a <__libc_init_array+0x2e>
 801a11e:	bd70      	pop	{r4, r5, r6, pc}
 801a120:	f855 3b04 	ldr.w	r3, [r5], #4
 801a124:	4798      	blx	r3
 801a126:	3601      	adds	r6, #1
 801a128:	e7ee      	b.n	801a108 <__libc_init_array+0xc>
 801a12a:	f855 3b04 	ldr.w	r3, [r5], #4
 801a12e:	4798      	blx	r3
 801a130:	3601      	adds	r6, #1
 801a132:	e7f2      	b.n	801a11a <__libc_init_array+0x1e>
 801a134:	0801bda0 	.word	0x0801bda0
 801a138:	0801bda0 	.word	0x0801bda0
 801a13c:	0801bda0 	.word	0x0801bda0
 801a140:	0801bda8 	.word	0x0801bda8

0801a144 <__retarget_lock_init_recursive>:
 801a144:	4770      	bx	lr

0801a146 <__retarget_lock_acquire_recursive>:
 801a146:	4770      	bx	lr

0801a148 <__retarget_lock_release_recursive>:
 801a148:	4770      	bx	lr

0801a14a <strcpy>:
 801a14a:	4603      	mov	r3, r0
 801a14c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a150:	f803 2b01 	strb.w	r2, [r3], #1
 801a154:	2a00      	cmp	r2, #0
 801a156:	d1f9      	bne.n	801a14c <strcpy+0x2>
 801a158:	4770      	bx	lr

0801a15a <memcpy>:
 801a15a:	440a      	add	r2, r1
 801a15c:	4291      	cmp	r1, r2
 801a15e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801a162:	d100      	bne.n	801a166 <memcpy+0xc>
 801a164:	4770      	bx	lr
 801a166:	b510      	push	{r4, lr}
 801a168:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a16c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a170:	4291      	cmp	r1, r2
 801a172:	d1f9      	bne.n	801a168 <memcpy+0xe>
 801a174:	bd10      	pop	{r4, pc}
	...

0801a178 <__assert_func>:
 801a178:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a17a:	4614      	mov	r4, r2
 801a17c:	461a      	mov	r2, r3
 801a17e:	4b09      	ldr	r3, [pc, #36]	@ (801a1a4 <__assert_func+0x2c>)
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	4605      	mov	r5, r0
 801a184:	68d8      	ldr	r0, [r3, #12]
 801a186:	b954      	cbnz	r4, 801a19e <__assert_func+0x26>
 801a188:	4b07      	ldr	r3, [pc, #28]	@ (801a1a8 <__assert_func+0x30>)
 801a18a:	461c      	mov	r4, r3
 801a18c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a190:	9100      	str	r1, [sp, #0]
 801a192:	462b      	mov	r3, r5
 801a194:	4905      	ldr	r1, [pc, #20]	@ (801a1ac <__assert_func+0x34>)
 801a196:	f000 fd3f 	bl	801ac18 <fiprintf>
 801a19a:	f000 fde3 	bl	801ad64 <abort>
 801a19e:	4b04      	ldr	r3, [pc, #16]	@ (801a1b0 <__assert_func+0x38>)
 801a1a0:	e7f4      	b.n	801a18c <__assert_func+0x14>
 801a1a2:	bf00      	nop
 801a1a4:	200000c0 	.word	0x200000c0
 801a1a8:	0801bd63 	.word	0x0801bd63
 801a1ac:	0801bd35 	.word	0x0801bd35
 801a1b0:	0801bd28 	.word	0x0801bd28

0801a1b4 <__env_lock>:
 801a1b4:	4801      	ldr	r0, [pc, #4]	@ (801a1bc <__env_lock+0x8>)
 801a1b6:	f7ff bfc6 	b.w	801a146 <__retarget_lock_acquire_recursive>
 801a1ba:	bf00      	nop
 801a1bc:	2000b100 	.word	0x2000b100

0801a1c0 <__env_unlock>:
 801a1c0:	4801      	ldr	r0, [pc, #4]	@ (801a1c8 <__env_unlock+0x8>)
 801a1c2:	f7ff bfc1 	b.w	801a148 <__retarget_lock_release_recursive>
 801a1c6:	bf00      	nop
 801a1c8:	2000b100 	.word	0x2000b100

0801a1cc <_free_r>:
 801a1cc:	b538      	push	{r3, r4, r5, lr}
 801a1ce:	4605      	mov	r5, r0
 801a1d0:	2900      	cmp	r1, #0
 801a1d2:	d041      	beq.n	801a258 <_free_r+0x8c>
 801a1d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a1d8:	1f0c      	subs	r4, r1, #4
 801a1da:	2b00      	cmp	r3, #0
 801a1dc:	bfb8      	it	lt
 801a1de:	18e4      	addlt	r4, r4, r3
 801a1e0:	f7ff fc1e 	bl	8019a20 <__malloc_lock>
 801a1e4:	4a1d      	ldr	r2, [pc, #116]	@ (801a25c <_free_r+0x90>)
 801a1e6:	6813      	ldr	r3, [r2, #0]
 801a1e8:	b933      	cbnz	r3, 801a1f8 <_free_r+0x2c>
 801a1ea:	6063      	str	r3, [r4, #4]
 801a1ec:	6014      	str	r4, [r2, #0]
 801a1ee:	4628      	mov	r0, r5
 801a1f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a1f4:	f7ff bc1a 	b.w	8019a2c <__malloc_unlock>
 801a1f8:	42a3      	cmp	r3, r4
 801a1fa:	d908      	bls.n	801a20e <_free_r+0x42>
 801a1fc:	6820      	ldr	r0, [r4, #0]
 801a1fe:	1821      	adds	r1, r4, r0
 801a200:	428b      	cmp	r3, r1
 801a202:	bf01      	itttt	eq
 801a204:	6819      	ldreq	r1, [r3, #0]
 801a206:	685b      	ldreq	r3, [r3, #4]
 801a208:	1809      	addeq	r1, r1, r0
 801a20a:	6021      	streq	r1, [r4, #0]
 801a20c:	e7ed      	b.n	801a1ea <_free_r+0x1e>
 801a20e:	461a      	mov	r2, r3
 801a210:	685b      	ldr	r3, [r3, #4]
 801a212:	b10b      	cbz	r3, 801a218 <_free_r+0x4c>
 801a214:	42a3      	cmp	r3, r4
 801a216:	d9fa      	bls.n	801a20e <_free_r+0x42>
 801a218:	6811      	ldr	r1, [r2, #0]
 801a21a:	1850      	adds	r0, r2, r1
 801a21c:	42a0      	cmp	r0, r4
 801a21e:	d10b      	bne.n	801a238 <_free_r+0x6c>
 801a220:	6820      	ldr	r0, [r4, #0]
 801a222:	4401      	add	r1, r0
 801a224:	1850      	adds	r0, r2, r1
 801a226:	4283      	cmp	r3, r0
 801a228:	6011      	str	r1, [r2, #0]
 801a22a:	d1e0      	bne.n	801a1ee <_free_r+0x22>
 801a22c:	6818      	ldr	r0, [r3, #0]
 801a22e:	685b      	ldr	r3, [r3, #4]
 801a230:	6053      	str	r3, [r2, #4]
 801a232:	4408      	add	r0, r1
 801a234:	6010      	str	r0, [r2, #0]
 801a236:	e7da      	b.n	801a1ee <_free_r+0x22>
 801a238:	d902      	bls.n	801a240 <_free_r+0x74>
 801a23a:	230c      	movs	r3, #12
 801a23c:	602b      	str	r3, [r5, #0]
 801a23e:	e7d6      	b.n	801a1ee <_free_r+0x22>
 801a240:	6820      	ldr	r0, [r4, #0]
 801a242:	1821      	adds	r1, r4, r0
 801a244:	428b      	cmp	r3, r1
 801a246:	bf04      	itt	eq
 801a248:	6819      	ldreq	r1, [r3, #0]
 801a24a:	685b      	ldreq	r3, [r3, #4]
 801a24c:	6063      	str	r3, [r4, #4]
 801a24e:	bf04      	itt	eq
 801a250:	1809      	addeq	r1, r1, r0
 801a252:	6021      	streq	r1, [r4, #0]
 801a254:	6054      	str	r4, [r2, #4]
 801a256:	e7ca      	b.n	801a1ee <_free_r+0x22>
 801a258:	bd38      	pop	{r3, r4, r5, pc}
 801a25a:	bf00      	nop
 801a25c:	2000afbc 	.word	0x2000afbc

0801a260 <_malloc_usable_size_r>:
 801a260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a264:	1f18      	subs	r0, r3, #4
 801a266:	2b00      	cmp	r3, #0
 801a268:	bfbc      	itt	lt
 801a26a:	580b      	ldrlt	r3, [r1, r0]
 801a26c:	18c0      	addlt	r0, r0, r3
 801a26e:	4770      	bx	lr

0801a270 <__ssputs_r>:
 801a270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a274:	688e      	ldr	r6, [r1, #8]
 801a276:	461f      	mov	r7, r3
 801a278:	42be      	cmp	r6, r7
 801a27a:	680b      	ldr	r3, [r1, #0]
 801a27c:	4682      	mov	sl, r0
 801a27e:	460c      	mov	r4, r1
 801a280:	4690      	mov	r8, r2
 801a282:	d82d      	bhi.n	801a2e0 <__ssputs_r+0x70>
 801a284:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a288:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801a28c:	d026      	beq.n	801a2dc <__ssputs_r+0x6c>
 801a28e:	6965      	ldr	r5, [r4, #20]
 801a290:	6909      	ldr	r1, [r1, #16]
 801a292:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a296:	eba3 0901 	sub.w	r9, r3, r1
 801a29a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a29e:	1c7b      	adds	r3, r7, #1
 801a2a0:	444b      	add	r3, r9
 801a2a2:	106d      	asrs	r5, r5, #1
 801a2a4:	429d      	cmp	r5, r3
 801a2a6:	bf38      	it	cc
 801a2a8:	461d      	movcc	r5, r3
 801a2aa:	0553      	lsls	r3, r2, #21
 801a2ac:	d527      	bpl.n	801a2fe <__ssputs_r+0x8e>
 801a2ae:	4629      	mov	r1, r5
 801a2b0:	f7ff fb36 	bl	8019920 <_malloc_r>
 801a2b4:	4606      	mov	r6, r0
 801a2b6:	b360      	cbz	r0, 801a312 <__ssputs_r+0xa2>
 801a2b8:	6921      	ldr	r1, [r4, #16]
 801a2ba:	464a      	mov	r2, r9
 801a2bc:	f7ff ff4d 	bl	801a15a <memcpy>
 801a2c0:	89a3      	ldrh	r3, [r4, #12]
 801a2c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801a2c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a2ca:	81a3      	strh	r3, [r4, #12]
 801a2cc:	6126      	str	r6, [r4, #16]
 801a2ce:	6165      	str	r5, [r4, #20]
 801a2d0:	444e      	add	r6, r9
 801a2d2:	eba5 0509 	sub.w	r5, r5, r9
 801a2d6:	6026      	str	r6, [r4, #0]
 801a2d8:	60a5      	str	r5, [r4, #8]
 801a2da:	463e      	mov	r6, r7
 801a2dc:	42be      	cmp	r6, r7
 801a2de:	d900      	bls.n	801a2e2 <__ssputs_r+0x72>
 801a2e0:	463e      	mov	r6, r7
 801a2e2:	6820      	ldr	r0, [r4, #0]
 801a2e4:	4632      	mov	r2, r6
 801a2e6:	4641      	mov	r1, r8
 801a2e8:	f7ff fe54 	bl	8019f94 <memmove>
 801a2ec:	68a3      	ldr	r3, [r4, #8]
 801a2ee:	1b9b      	subs	r3, r3, r6
 801a2f0:	60a3      	str	r3, [r4, #8]
 801a2f2:	6823      	ldr	r3, [r4, #0]
 801a2f4:	4433      	add	r3, r6
 801a2f6:	6023      	str	r3, [r4, #0]
 801a2f8:	2000      	movs	r0, #0
 801a2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a2fe:	462a      	mov	r2, r5
 801a300:	f7ff fc0e 	bl	8019b20 <_realloc_r>
 801a304:	4606      	mov	r6, r0
 801a306:	2800      	cmp	r0, #0
 801a308:	d1e0      	bne.n	801a2cc <__ssputs_r+0x5c>
 801a30a:	6921      	ldr	r1, [r4, #16]
 801a30c:	4650      	mov	r0, sl
 801a30e:	f7ff ff5d 	bl	801a1cc <_free_r>
 801a312:	230c      	movs	r3, #12
 801a314:	f8ca 3000 	str.w	r3, [sl]
 801a318:	89a3      	ldrh	r3, [r4, #12]
 801a31a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a31e:	81a3      	strh	r3, [r4, #12]
 801a320:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a324:	e7e9      	b.n	801a2fa <__ssputs_r+0x8a>
	...

0801a328 <_svfiprintf_r>:
 801a328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a32c:	4698      	mov	r8, r3
 801a32e:	898b      	ldrh	r3, [r1, #12]
 801a330:	061b      	lsls	r3, r3, #24
 801a332:	b09d      	sub	sp, #116	@ 0x74
 801a334:	4607      	mov	r7, r0
 801a336:	460d      	mov	r5, r1
 801a338:	4614      	mov	r4, r2
 801a33a:	d510      	bpl.n	801a35e <_svfiprintf_r+0x36>
 801a33c:	690b      	ldr	r3, [r1, #16]
 801a33e:	b973      	cbnz	r3, 801a35e <_svfiprintf_r+0x36>
 801a340:	2140      	movs	r1, #64	@ 0x40
 801a342:	f7ff faed 	bl	8019920 <_malloc_r>
 801a346:	6028      	str	r0, [r5, #0]
 801a348:	6128      	str	r0, [r5, #16]
 801a34a:	b930      	cbnz	r0, 801a35a <_svfiprintf_r+0x32>
 801a34c:	230c      	movs	r3, #12
 801a34e:	603b      	str	r3, [r7, #0]
 801a350:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a354:	b01d      	add	sp, #116	@ 0x74
 801a356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a35a:	2340      	movs	r3, #64	@ 0x40
 801a35c:	616b      	str	r3, [r5, #20]
 801a35e:	2300      	movs	r3, #0
 801a360:	9309      	str	r3, [sp, #36]	@ 0x24
 801a362:	2320      	movs	r3, #32
 801a364:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a368:	f8cd 800c 	str.w	r8, [sp, #12]
 801a36c:	2330      	movs	r3, #48	@ 0x30
 801a36e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801a50c <_svfiprintf_r+0x1e4>
 801a372:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a376:	f04f 0901 	mov.w	r9, #1
 801a37a:	4623      	mov	r3, r4
 801a37c:	469a      	mov	sl, r3
 801a37e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a382:	b10a      	cbz	r2, 801a388 <_svfiprintf_r+0x60>
 801a384:	2a25      	cmp	r2, #37	@ 0x25
 801a386:	d1f9      	bne.n	801a37c <_svfiprintf_r+0x54>
 801a388:	ebba 0b04 	subs.w	fp, sl, r4
 801a38c:	d00b      	beq.n	801a3a6 <_svfiprintf_r+0x7e>
 801a38e:	465b      	mov	r3, fp
 801a390:	4622      	mov	r2, r4
 801a392:	4629      	mov	r1, r5
 801a394:	4638      	mov	r0, r7
 801a396:	f7ff ff6b 	bl	801a270 <__ssputs_r>
 801a39a:	3001      	adds	r0, #1
 801a39c:	f000 80a7 	beq.w	801a4ee <_svfiprintf_r+0x1c6>
 801a3a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a3a2:	445a      	add	r2, fp
 801a3a4:	9209      	str	r2, [sp, #36]	@ 0x24
 801a3a6:	f89a 3000 	ldrb.w	r3, [sl]
 801a3aa:	2b00      	cmp	r3, #0
 801a3ac:	f000 809f 	beq.w	801a4ee <_svfiprintf_r+0x1c6>
 801a3b0:	2300      	movs	r3, #0
 801a3b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a3b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a3ba:	f10a 0a01 	add.w	sl, sl, #1
 801a3be:	9304      	str	r3, [sp, #16]
 801a3c0:	9307      	str	r3, [sp, #28]
 801a3c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a3c6:	931a      	str	r3, [sp, #104]	@ 0x68
 801a3c8:	4654      	mov	r4, sl
 801a3ca:	2205      	movs	r2, #5
 801a3cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a3d0:	484e      	ldr	r0, [pc, #312]	@ (801a50c <_svfiprintf_r+0x1e4>)
 801a3d2:	f7e5 ff3d 	bl	8000250 <memchr>
 801a3d6:	9a04      	ldr	r2, [sp, #16]
 801a3d8:	b9d8      	cbnz	r0, 801a412 <_svfiprintf_r+0xea>
 801a3da:	06d0      	lsls	r0, r2, #27
 801a3dc:	bf44      	itt	mi
 801a3de:	2320      	movmi	r3, #32
 801a3e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a3e4:	0711      	lsls	r1, r2, #28
 801a3e6:	bf44      	itt	mi
 801a3e8:	232b      	movmi	r3, #43	@ 0x2b
 801a3ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a3ee:	f89a 3000 	ldrb.w	r3, [sl]
 801a3f2:	2b2a      	cmp	r3, #42	@ 0x2a
 801a3f4:	d015      	beq.n	801a422 <_svfiprintf_r+0xfa>
 801a3f6:	9a07      	ldr	r2, [sp, #28]
 801a3f8:	4654      	mov	r4, sl
 801a3fa:	2000      	movs	r0, #0
 801a3fc:	f04f 0c0a 	mov.w	ip, #10
 801a400:	4621      	mov	r1, r4
 801a402:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a406:	3b30      	subs	r3, #48	@ 0x30
 801a408:	2b09      	cmp	r3, #9
 801a40a:	d94b      	bls.n	801a4a4 <_svfiprintf_r+0x17c>
 801a40c:	b1b0      	cbz	r0, 801a43c <_svfiprintf_r+0x114>
 801a40e:	9207      	str	r2, [sp, #28]
 801a410:	e014      	b.n	801a43c <_svfiprintf_r+0x114>
 801a412:	eba0 0308 	sub.w	r3, r0, r8
 801a416:	fa09 f303 	lsl.w	r3, r9, r3
 801a41a:	4313      	orrs	r3, r2
 801a41c:	9304      	str	r3, [sp, #16]
 801a41e:	46a2      	mov	sl, r4
 801a420:	e7d2      	b.n	801a3c8 <_svfiprintf_r+0xa0>
 801a422:	9b03      	ldr	r3, [sp, #12]
 801a424:	1d19      	adds	r1, r3, #4
 801a426:	681b      	ldr	r3, [r3, #0]
 801a428:	9103      	str	r1, [sp, #12]
 801a42a:	2b00      	cmp	r3, #0
 801a42c:	bfbb      	ittet	lt
 801a42e:	425b      	neglt	r3, r3
 801a430:	f042 0202 	orrlt.w	r2, r2, #2
 801a434:	9307      	strge	r3, [sp, #28]
 801a436:	9307      	strlt	r3, [sp, #28]
 801a438:	bfb8      	it	lt
 801a43a:	9204      	strlt	r2, [sp, #16]
 801a43c:	7823      	ldrb	r3, [r4, #0]
 801a43e:	2b2e      	cmp	r3, #46	@ 0x2e
 801a440:	d10a      	bne.n	801a458 <_svfiprintf_r+0x130>
 801a442:	7863      	ldrb	r3, [r4, #1]
 801a444:	2b2a      	cmp	r3, #42	@ 0x2a
 801a446:	d132      	bne.n	801a4ae <_svfiprintf_r+0x186>
 801a448:	9b03      	ldr	r3, [sp, #12]
 801a44a:	1d1a      	adds	r2, r3, #4
 801a44c:	681b      	ldr	r3, [r3, #0]
 801a44e:	9203      	str	r2, [sp, #12]
 801a450:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a454:	3402      	adds	r4, #2
 801a456:	9305      	str	r3, [sp, #20]
 801a458:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801a51c <_svfiprintf_r+0x1f4>
 801a45c:	7821      	ldrb	r1, [r4, #0]
 801a45e:	2203      	movs	r2, #3
 801a460:	4650      	mov	r0, sl
 801a462:	f7e5 fef5 	bl	8000250 <memchr>
 801a466:	b138      	cbz	r0, 801a478 <_svfiprintf_r+0x150>
 801a468:	9b04      	ldr	r3, [sp, #16]
 801a46a:	eba0 000a 	sub.w	r0, r0, sl
 801a46e:	2240      	movs	r2, #64	@ 0x40
 801a470:	4082      	lsls	r2, r0
 801a472:	4313      	orrs	r3, r2
 801a474:	3401      	adds	r4, #1
 801a476:	9304      	str	r3, [sp, #16]
 801a478:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a47c:	4824      	ldr	r0, [pc, #144]	@ (801a510 <_svfiprintf_r+0x1e8>)
 801a47e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a482:	2206      	movs	r2, #6
 801a484:	f7e5 fee4 	bl	8000250 <memchr>
 801a488:	2800      	cmp	r0, #0
 801a48a:	d036      	beq.n	801a4fa <_svfiprintf_r+0x1d2>
 801a48c:	4b21      	ldr	r3, [pc, #132]	@ (801a514 <_svfiprintf_r+0x1ec>)
 801a48e:	bb1b      	cbnz	r3, 801a4d8 <_svfiprintf_r+0x1b0>
 801a490:	9b03      	ldr	r3, [sp, #12]
 801a492:	3307      	adds	r3, #7
 801a494:	f023 0307 	bic.w	r3, r3, #7
 801a498:	3308      	adds	r3, #8
 801a49a:	9303      	str	r3, [sp, #12]
 801a49c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a49e:	4433      	add	r3, r6
 801a4a0:	9309      	str	r3, [sp, #36]	@ 0x24
 801a4a2:	e76a      	b.n	801a37a <_svfiprintf_r+0x52>
 801a4a4:	fb0c 3202 	mla	r2, ip, r2, r3
 801a4a8:	460c      	mov	r4, r1
 801a4aa:	2001      	movs	r0, #1
 801a4ac:	e7a8      	b.n	801a400 <_svfiprintf_r+0xd8>
 801a4ae:	2300      	movs	r3, #0
 801a4b0:	3401      	adds	r4, #1
 801a4b2:	9305      	str	r3, [sp, #20]
 801a4b4:	4619      	mov	r1, r3
 801a4b6:	f04f 0c0a 	mov.w	ip, #10
 801a4ba:	4620      	mov	r0, r4
 801a4bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a4c0:	3a30      	subs	r2, #48	@ 0x30
 801a4c2:	2a09      	cmp	r2, #9
 801a4c4:	d903      	bls.n	801a4ce <_svfiprintf_r+0x1a6>
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	d0c6      	beq.n	801a458 <_svfiprintf_r+0x130>
 801a4ca:	9105      	str	r1, [sp, #20]
 801a4cc:	e7c4      	b.n	801a458 <_svfiprintf_r+0x130>
 801a4ce:	fb0c 2101 	mla	r1, ip, r1, r2
 801a4d2:	4604      	mov	r4, r0
 801a4d4:	2301      	movs	r3, #1
 801a4d6:	e7f0      	b.n	801a4ba <_svfiprintf_r+0x192>
 801a4d8:	ab03      	add	r3, sp, #12
 801a4da:	9300      	str	r3, [sp, #0]
 801a4dc:	462a      	mov	r2, r5
 801a4de:	4b0e      	ldr	r3, [pc, #56]	@ (801a518 <_svfiprintf_r+0x1f0>)
 801a4e0:	a904      	add	r1, sp, #16
 801a4e2:	4638      	mov	r0, r7
 801a4e4:	f3af 8000 	nop.w
 801a4e8:	1c42      	adds	r2, r0, #1
 801a4ea:	4606      	mov	r6, r0
 801a4ec:	d1d6      	bne.n	801a49c <_svfiprintf_r+0x174>
 801a4ee:	89ab      	ldrh	r3, [r5, #12]
 801a4f0:	065b      	lsls	r3, r3, #25
 801a4f2:	f53f af2d 	bmi.w	801a350 <_svfiprintf_r+0x28>
 801a4f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a4f8:	e72c      	b.n	801a354 <_svfiprintf_r+0x2c>
 801a4fa:	ab03      	add	r3, sp, #12
 801a4fc:	9300      	str	r3, [sp, #0]
 801a4fe:	462a      	mov	r2, r5
 801a500:	4b05      	ldr	r3, [pc, #20]	@ (801a518 <_svfiprintf_r+0x1f0>)
 801a502:	a904      	add	r1, sp, #16
 801a504:	4638      	mov	r0, r7
 801a506:	f000 f9bb 	bl	801a880 <_printf_i>
 801a50a:	e7ed      	b.n	801a4e8 <_svfiprintf_r+0x1c0>
 801a50c:	0801bd64 	.word	0x0801bd64
 801a510:	0801bd6e 	.word	0x0801bd6e
 801a514:	00000000 	.word	0x00000000
 801a518:	0801a271 	.word	0x0801a271
 801a51c:	0801bd6a 	.word	0x0801bd6a

0801a520 <__sfputc_r>:
 801a520:	6893      	ldr	r3, [r2, #8]
 801a522:	3b01      	subs	r3, #1
 801a524:	2b00      	cmp	r3, #0
 801a526:	b410      	push	{r4}
 801a528:	6093      	str	r3, [r2, #8]
 801a52a:	da08      	bge.n	801a53e <__sfputc_r+0x1e>
 801a52c:	6994      	ldr	r4, [r2, #24]
 801a52e:	42a3      	cmp	r3, r4
 801a530:	db01      	blt.n	801a536 <__sfputc_r+0x16>
 801a532:	290a      	cmp	r1, #10
 801a534:	d103      	bne.n	801a53e <__sfputc_r+0x1e>
 801a536:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a53a:	f000 bb7f 	b.w	801ac3c <__swbuf_r>
 801a53e:	6813      	ldr	r3, [r2, #0]
 801a540:	1c58      	adds	r0, r3, #1
 801a542:	6010      	str	r0, [r2, #0]
 801a544:	7019      	strb	r1, [r3, #0]
 801a546:	4608      	mov	r0, r1
 801a548:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a54c:	4770      	bx	lr

0801a54e <__sfputs_r>:
 801a54e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a550:	4606      	mov	r6, r0
 801a552:	460f      	mov	r7, r1
 801a554:	4614      	mov	r4, r2
 801a556:	18d5      	adds	r5, r2, r3
 801a558:	42ac      	cmp	r4, r5
 801a55a:	d101      	bne.n	801a560 <__sfputs_r+0x12>
 801a55c:	2000      	movs	r0, #0
 801a55e:	e007      	b.n	801a570 <__sfputs_r+0x22>
 801a560:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a564:	463a      	mov	r2, r7
 801a566:	4630      	mov	r0, r6
 801a568:	f7ff ffda 	bl	801a520 <__sfputc_r>
 801a56c:	1c43      	adds	r3, r0, #1
 801a56e:	d1f3      	bne.n	801a558 <__sfputs_r+0xa>
 801a570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a574 <_vfiprintf_r>:
 801a574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a578:	460d      	mov	r5, r1
 801a57a:	b09d      	sub	sp, #116	@ 0x74
 801a57c:	4614      	mov	r4, r2
 801a57e:	4698      	mov	r8, r3
 801a580:	4606      	mov	r6, r0
 801a582:	b118      	cbz	r0, 801a58c <_vfiprintf_r+0x18>
 801a584:	6a03      	ldr	r3, [r0, #32]
 801a586:	b90b      	cbnz	r3, 801a58c <_vfiprintf_r+0x18>
 801a588:	f7ff fbfc 	bl	8019d84 <__sinit>
 801a58c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a58e:	07d9      	lsls	r1, r3, #31
 801a590:	d405      	bmi.n	801a59e <_vfiprintf_r+0x2a>
 801a592:	89ab      	ldrh	r3, [r5, #12]
 801a594:	059a      	lsls	r2, r3, #22
 801a596:	d402      	bmi.n	801a59e <_vfiprintf_r+0x2a>
 801a598:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a59a:	f7ff fdd4 	bl	801a146 <__retarget_lock_acquire_recursive>
 801a59e:	89ab      	ldrh	r3, [r5, #12]
 801a5a0:	071b      	lsls	r3, r3, #28
 801a5a2:	d501      	bpl.n	801a5a8 <_vfiprintf_r+0x34>
 801a5a4:	692b      	ldr	r3, [r5, #16]
 801a5a6:	b99b      	cbnz	r3, 801a5d0 <_vfiprintf_r+0x5c>
 801a5a8:	4629      	mov	r1, r5
 801a5aa:	4630      	mov	r0, r6
 801a5ac:	f000 fb84 	bl	801acb8 <__swsetup_r>
 801a5b0:	b170      	cbz	r0, 801a5d0 <_vfiprintf_r+0x5c>
 801a5b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a5b4:	07dc      	lsls	r4, r3, #31
 801a5b6:	d504      	bpl.n	801a5c2 <_vfiprintf_r+0x4e>
 801a5b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a5bc:	b01d      	add	sp, #116	@ 0x74
 801a5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5c2:	89ab      	ldrh	r3, [r5, #12]
 801a5c4:	0598      	lsls	r0, r3, #22
 801a5c6:	d4f7      	bmi.n	801a5b8 <_vfiprintf_r+0x44>
 801a5c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a5ca:	f7ff fdbd 	bl	801a148 <__retarget_lock_release_recursive>
 801a5ce:	e7f3      	b.n	801a5b8 <_vfiprintf_r+0x44>
 801a5d0:	2300      	movs	r3, #0
 801a5d2:	9309      	str	r3, [sp, #36]	@ 0x24
 801a5d4:	2320      	movs	r3, #32
 801a5d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a5da:	f8cd 800c 	str.w	r8, [sp, #12]
 801a5de:	2330      	movs	r3, #48	@ 0x30
 801a5e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801a790 <_vfiprintf_r+0x21c>
 801a5e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a5e8:	f04f 0901 	mov.w	r9, #1
 801a5ec:	4623      	mov	r3, r4
 801a5ee:	469a      	mov	sl, r3
 801a5f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a5f4:	b10a      	cbz	r2, 801a5fa <_vfiprintf_r+0x86>
 801a5f6:	2a25      	cmp	r2, #37	@ 0x25
 801a5f8:	d1f9      	bne.n	801a5ee <_vfiprintf_r+0x7a>
 801a5fa:	ebba 0b04 	subs.w	fp, sl, r4
 801a5fe:	d00b      	beq.n	801a618 <_vfiprintf_r+0xa4>
 801a600:	465b      	mov	r3, fp
 801a602:	4622      	mov	r2, r4
 801a604:	4629      	mov	r1, r5
 801a606:	4630      	mov	r0, r6
 801a608:	f7ff ffa1 	bl	801a54e <__sfputs_r>
 801a60c:	3001      	adds	r0, #1
 801a60e:	f000 80a7 	beq.w	801a760 <_vfiprintf_r+0x1ec>
 801a612:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a614:	445a      	add	r2, fp
 801a616:	9209      	str	r2, [sp, #36]	@ 0x24
 801a618:	f89a 3000 	ldrb.w	r3, [sl]
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	f000 809f 	beq.w	801a760 <_vfiprintf_r+0x1ec>
 801a622:	2300      	movs	r3, #0
 801a624:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a628:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a62c:	f10a 0a01 	add.w	sl, sl, #1
 801a630:	9304      	str	r3, [sp, #16]
 801a632:	9307      	str	r3, [sp, #28]
 801a634:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a638:	931a      	str	r3, [sp, #104]	@ 0x68
 801a63a:	4654      	mov	r4, sl
 801a63c:	2205      	movs	r2, #5
 801a63e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a642:	4853      	ldr	r0, [pc, #332]	@ (801a790 <_vfiprintf_r+0x21c>)
 801a644:	f7e5 fe04 	bl	8000250 <memchr>
 801a648:	9a04      	ldr	r2, [sp, #16]
 801a64a:	b9d8      	cbnz	r0, 801a684 <_vfiprintf_r+0x110>
 801a64c:	06d1      	lsls	r1, r2, #27
 801a64e:	bf44      	itt	mi
 801a650:	2320      	movmi	r3, #32
 801a652:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a656:	0713      	lsls	r3, r2, #28
 801a658:	bf44      	itt	mi
 801a65a:	232b      	movmi	r3, #43	@ 0x2b
 801a65c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a660:	f89a 3000 	ldrb.w	r3, [sl]
 801a664:	2b2a      	cmp	r3, #42	@ 0x2a
 801a666:	d015      	beq.n	801a694 <_vfiprintf_r+0x120>
 801a668:	9a07      	ldr	r2, [sp, #28]
 801a66a:	4654      	mov	r4, sl
 801a66c:	2000      	movs	r0, #0
 801a66e:	f04f 0c0a 	mov.w	ip, #10
 801a672:	4621      	mov	r1, r4
 801a674:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a678:	3b30      	subs	r3, #48	@ 0x30
 801a67a:	2b09      	cmp	r3, #9
 801a67c:	d94b      	bls.n	801a716 <_vfiprintf_r+0x1a2>
 801a67e:	b1b0      	cbz	r0, 801a6ae <_vfiprintf_r+0x13a>
 801a680:	9207      	str	r2, [sp, #28]
 801a682:	e014      	b.n	801a6ae <_vfiprintf_r+0x13a>
 801a684:	eba0 0308 	sub.w	r3, r0, r8
 801a688:	fa09 f303 	lsl.w	r3, r9, r3
 801a68c:	4313      	orrs	r3, r2
 801a68e:	9304      	str	r3, [sp, #16]
 801a690:	46a2      	mov	sl, r4
 801a692:	e7d2      	b.n	801a63a <_vfiprintf_r+0xc6>
 801a694:	9b03      	ldr	r3, [sp, #12]
 801a696:	1d19      	adds	r1, r3, #4
 801a698:	681b      	ldr	r3, [r3, #0]
 801a69a:	9103      	str	r1, [sp, #12]
 801a69c:	2b00      	cmp	r3, #0
 801a69e:	bfbb      	ittet	lt
 801a6a0:	425b      	neglt	r3, r3
 801a6a2:	f042 0202 	orrlt.w	r2, r2, #2
 801a6a6:	9307      	strge	r3, [sp, #28]
 801a6a8:	9307      	strlt	r3, [sp, #28]
 801a6aa:	bfb8      	it	lt
 801a6ac:	9204      	strlt	r2, [sp, #16]
 801a6ae:	7823      	ldrb	r3, [r4, #0]
 801a6b0:	2b2e      	cmp	r3, #46	@ 0x2e
 801a6b2:	d10a      	bne.n	801a6ca <_vfiprintf_r+0x156>
 801a6b4:	7863      	ldrb	r3, [r4, #1]
 801a6b6:	2b2a      	cmp	r3, #42	@ 0x2a
 801a6b8:	d132      	bne.n	801a720 <_vfiprintf_r+0x1ac>
 801a6ba:	9b03      	ldr	r3, [sp, #12]
 801a6bc:	1d1a      	adds	r2, r3, #4
 801a6be:	681b      	ldr	r3, [r3, #0]
 801a6c0:	9203      	str	r2, [sp, #12]
 801a6c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a6c6:	3402      	adds	r4, #2
 801a6c8:	9305      	str	r3, [sp, #20]
 801a6ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801a7a0 <_vfiprintf_r+0x22c>
 801a6ce:	7821      	ldrb	r1, [r4, #0]
 801a6d0:	2203      	movs	r2, #3
 801a6d2:	4650      	mov	r0, sl
 801a6d4:	f7e5 fdbc 	bl	8000250 <memchr>
 801a6d8:	b138      	cbz	r0, 801a6ea <_vfiprintf_r+0x176>
 801a6da:	9b04      	ldr	r3, [sp, #16]
 801a6dc:	eba0 000a 	sub.w	r0, r0, sl
 801a6e0:	2240      	movs	r2, #64	@ 0x40
 801a6e2:	4082      	lsls	r2, r0
 801a6e4:	4313      	orrs	r3, r2
 801a6e6:	3401      	adds	r4, #1
 801a6e8:	9304      	str	r3, [sp, #16]
 801a6ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a6ee:	4829      	ldr	r0, [pc, #164]	@ (801a794 <_vfiprintf_r+0x220>)
 801a6f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a6f4:	2206      	movs	r2, #6
 801a6f6:	f7e5 fdab 	bl	8000250 <memchr>
 801a6fa:	2800      	cmp	r0, #0
 801a6fc:	d03f      	beq.n	801a77e <_vfiprintf_r+0x20a>
 801a6fe:	4b26      	ldr	r3, [pc, #152]	@ (801a798 <_vfiprintf_r+0x224>)
 801a700:	bb1b      	cbnz	r3, 801a74a <_vfiprintf_r+0x1d6>
 801a702:	9b03      	ldr	r3, [sp, #12]
 801a704:	3307      	adds	r3, #7
 801a706:	f023 0307 	bic.w	r3, r3, #7
 801a70a:	3308      	adds	r3, #8
 801a70c:	9303      	str	r3, [sp, #12]
 801a70e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a710:	443b      	add	r3, r7
 801a712:	9309      	str	r3, [sp, #36]	@ 0x24
 801a714:	e76a      	b.n	801a5ec <_vfiprintf_r+0x78>
 801a716:	fb0c 3202 	mla	r2, ip, r2, r3
 801a71a:	460c      	mov	r4, r1
 801a71c:	2001      	movs	r0, #1
 801a71e:	e7a8      	b.n	801a672 <_vfiprintf_r+0xfe>
 801a720:	2300      	movs	r3, #0
 801a722:	3401      	adds	r4, #1
 801a724:	9305      	str	r3, [sp, #20]
 801a726:	4619      	mov	r1, r3
 801a728:	f04f 0c0a 	mov.w	ip, #10
 801a72c:	4620      	mov	r0, r4
 801a72e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a732:	3a30      	subs	r2, #48	@ 0x30
 801a734:	2a09      	cmp	r2, #9
 801a736:	d903      	bls.n	801a740 <_vfiprintf_r+0x1cc>
 801a738:	2b00      	cmp	r3, #0
 801a73a:	d0c6      	beq.n	801a6ca <_vfiprintf_r+0x156>
 801a73c:	9105      	str	r1, [sp, #20]
 801a73e:	e7c4      	b.n	801a6ca <_vfiprintf_r+0x156>
 801a740:	fb0c 2101 	mla	r1, ip, r1, r2
 801a744:	4604      	mov	r4, r0
 801a746:	2301      	movs	r3, #1
 801a748:	e7f0      	b.n	801a72c <_vfiprintf_r+0x1b8>
 801a74a:	ab03      	add	r3, sp, #12
 801a74c:	9300      	str	r3, [sp, #0]
 801a74e:	462a      	mov	r2, r5
 801a750:	4b12      	ldr	r3, [pc, #72]	@ (801a79c <_vfiprintf_r+0x228>)
 801a752:	a904      	add	r1, sp, #16
 801a754:	4630      	mov	r0, r6
 801a756:	f3af 8000 	nop.w
 801a75a:	4607      	mov	r7, r0
 801a75c:	1c78      	adds	r0, r7, #1
 801a75e:	d1d6      	bne.n	801a70e <_vfiprintf_r+0x19a>
 801a760:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a762:	07d9      	lsls	r1, r3, #31
 801a764:	d405      	bmi.n	801a772 <_vfiprintf_r+0x1fe>
 801a766:	89ab      	ldrh	r3, [r5, #12]
 801a768:	059a      	lsls	r2, r3, #22
 801a76a:	d402      	bmi.n	801a772 <_vfiprintf_r+0x1fe>
 801a76c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a76e:	f7ff fceb 	bl	801a148 <__retarget_lock_release_recursive>
 801a772:	89ab      	ldrh	r3, [r5, #12]
 801a774:	065b      	lsls	r3, r3, #25
 801a776:	f53f af1f 	bmi.w	801a5b8 <_vfiprintf_r+0x44>
 801a77a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a77c:	e71e      	b.n	801a5bc <_vfiprintf_r+0x48>
 801a77e:	ab03      	add	r3, sp, #12
 801a780:	9300      	str	r3, [sp, #0]
 801a782:	462a      	mov	r2, r5
 801a784:	4b05      	ldr	r3, [pc, #20]	@ (801a79c <_vfiprintf_r+0x228>)
 801a786:	a904      	add	r1, sp, #16
 801a788:	4630      	mov	r0, r6
 801a78a:	f000 f879 	bl	801a880 <_printf_i>
 801a78e:	e7e4      	b.n	801a75a <_vfiprintf_r+0x1e6>
 801a790:	0801bd64 	.word	0x0801bd64
 801a794:	0801bd6e 	.word	0x0801bd6e
 801a798:	00000000 	.word	0x00000000
 801a79c:	0801a54f 	.word	0x0801a54f
 801a7a0:	0801bd6a 	.word	0x0801bd6a

0801a7a4 <_printf_common>:
 801a7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a7a8:	4616      	mov	r6, r2
 801a7aa:	4698      	mov	r8, r3
 801a7ac:	688a      	ldr	r2, [r1, #8]
 801a7ae:	690b      	ldr	r3, [r1, #16]
 801a7b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a7b4:	4293      	cmp	r3, r2
 801a7b6:	bfb8      	it	lt
 801a7b8:	4613      	movlt	r3, r2
 801a7ba:	6033      	str	r3, [r6, #0]
 801a7bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a7c0:	4607      	mov	r7, r0
 801a7c2:	460c      	mov	r4, r1
 801a7c4:	b10a      	cbz	r2, 801a7ca <_printf_common+0x26>
 801a7c6:	3301      	adds	r3, #1
 801a7c8:	6033      	str	r3, [r6, #0]
 801a7ca:	6823      	ldr	r3, [r4, #0]
 801a7cc:	0699      	lsls	r1, r3, #26
 801a7ce:	bf42      	ittt	mi
 801a7d0:	6833      	ldrmi	r3, [r6, #0]
 801a7d2:	3302      	addmi	r3, #2
 801a7d4:	6033      	strmi	r3, [r6, #0]
 801a7d6:	6825      	ldr	r5, [r4, #0]
 801a7d8:	f015 0506 	ands.w	r5, r5, #6
 801a7dc:	d106      	bne.n	801a7ec <_printf_common+0x48>
 801a7de:	f104 0a19 	add.w	sl, r4, #25
 801a7e2:	68e3      	ldr	r3, [r4, #12]
 801a7e4:	6832      	ldr	r2, [r6, #0]
 801a7e6:	1a9b      	subs	r3, r3, r2
 801a7e8:	42ab      	cmp	r3, r5
 801a7ea:	dc26      	bgt.n	801a83a <_printf_common+0x96>
 801a7ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a7f0:	6822      	ldr	r2, [r4, #0]
 801a7f2:	3b00      	subs	r3, #0
 801a7f4:	bf18      	it	ne
 801a7f6:	2301      	movne	r3, #1
 801a7f8:	0692      	lsls	r2, r2, #26
 801a7fa:	d42b      	bmi.n	801a854 <_printf_common+0xb0>
 801a7fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a800:	4641      	mov	r1, r8
 801a802:	4638      	mov	r0, r7
 801a804:	47c8      	blx	r9
 801a806:	3001      	adds	r0, #1
 801a808:	d01e      	beq.n	801a848 <_printf_common+0xa4>
 801a80a:	6823      	ldr	r3, [r4, #0]
 801a80c:	6922      	ldr	r2, [r4, #16]
 801a80e:	f003 0306 	and.w	r3, r3, #6
 801a812:	2b04      	cmp	r3, #4
 801a814:	bf02      	ittt	eq
 801a816:	68e5      	ldreq	r5, [r4, #12]
 801a818:	6833      	ldreq	r3, [r6, #0]
 801a81a:	1aed      	subeq	r5, r5, r3
 801a81c:	68a3      	ldr	r3, [r4, #8]
 801a81e:	bf0c      	ite	eq
 801a820:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a824:	2500      	movne	r5, #0
 801a826:	4293      	cmp	r3, r2
 801a828:	bfc4      	itt	gt
 801a82a:	1a9b      	subgt	r3, r3, r2
 801a82c:	18ed      	addgt	r5, r5, r3
 801a82e:	2600      	movs	r6, #0
 801a830:	341a      	adds	r4, #26
 801a832:	42b5      	cmp	r5, r6
 801a834:	d11a      	bne.n	801a86c <_printf_common+0xc8>
 801a836:	2000      	movs	r0, #0
 801a838:	e008      	b.n	801a84c <_printf_common+0xa8>
 801a83a:	2301      	movs	r3, #1
 801a83c:	4652      	mov	r2, sl
 801a83e:	4641      	mov	r1, r8
 801a840:	4638      	mov	r0, r7
 801a842:	47c8      	blx	r9
 801a844:	3001      	adds	r0, #1
 801a846:	d103      	bne.n	801a850 <_printf_common+0xac>
 801a848:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a84c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a850:	3501      	adds	r5, #1
 801a852:	e7c6      	b.n	801a7e2 <_printf_common+0x3e>
 801a854:	18e1      	adds	r1, r4, r3
 801a856:	1c5a      	adds	r2, r3, #1
 801a858:	2030      	movs	r0, #48	@ 0x30
 801a85a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a85e:	4422      	add	r2, r4
 801a860:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a864:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a868:	3302      	adds	r3, #2
 801a86a:	e7c7      	b.n	801a7fc <_printf_common+0x58>
 801a86c:	2301      	movs	r3, #1
 801a86e:	4622      	mov	r2, r4
 801a870:	4641      	mov	r1, r8
 801a872:	4638      	mov	r0, r7
 801a874:	47c8      	blx	r9
 801a876:	3001      	adds	r0, #1
 801a878:	d0e6      	beq.n	801a848 <_printf_common+0xa4>
 801a87a:	3601      	adds	r6, #1
 801a87c:	e7d9      	b.n	801a832 <_printf_common+0x8e>
	...

0801a880 <_printf_i>:
 801a880:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a884:	7e0f      	ldrb	r7, [r1, #24]
 801a886:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a888:	2f78      	cmp	r7, #120	@ 0x78
 801a88a:	4691      	mov	r9, r2
 801a88c:	4680      	mov	r8, r0
 801a88e:	460c      	mov	r4, r1
 801a890:	469a      	mov	sl, r3
 801a892:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a896:	d807      	bhi.n	801a8a8 <_printf_i+0x28>
 801a898:	2f62      	cmp	r7, #98	@ 0x62
 801a89a:	d80a      	bhi.n	801a8b2 <_printf_i+0x32>
 801a89c:	2f00      	cmp	r7, #0
 801a89e:	f000 80d2 	beq.w	801aa46 <_printf_i+0x1c6>
 801a8a2:	2f58      	cmp	r7, #88	@ 0x58
 801a8a4:	f000 80b9 	beq.w	801aa1a <_printf_i+0x19a>
 801a8a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a8ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a8b0:	e03a      	b.n	801a928 <_printf_i+0xa8>
 801a8b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a8b6:	2b15      	cmp	r3, #21
 801a8b8:	d8f6      	bhi.n	801a8a8 <_printf_i+0x28>
 801a8ba:	a101      	add	r1, pc, #4	@ (adr r1, 801a8c0 <_printf_i+0x40>)
 801a8bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a8c0:	0801a919 	.word	0x0801a919
 801a8c4:	0801a92d 	.word	0x0801a92d
 801a8c8:	0801a8a9 	.word	0x0801a8a9
 801a8cc:	0801a8a9 	.word	0x0801a8a9
 801a8d0:	0801a8a9 	.word	0x0801a8a9
 801a8d4:	0801a8a9 	.word	0x0801a8a9
 801a8d8:	0801a92d 	.word	0x0801a92d
 801a8dc:	0801a8a9 	.word	0x0801a8a9
 801a8e0:	0801a8a9 	.word	0x0801a8a9
 801a8e4:	0801a8a9 	.word	0x0801a8a9
 801a8e8:	0801a8a9 	.word	0x0801a8a9
 801a8ec:	0801aa2d 	.word	0x0801aa2d
 801a8f0:	0801a957 	.word	0x0801a957
 801a8f4:	0801a9e7 	.word	0x0801a9e7
 801a8f8:	0801a8a9 	.word	0x0801a8a9
 801a8fc:	0801a8a9 	.word	0x0801a8a9
 801a900:	0801aa4f 	.word	0x0801aa4f
 801a904:	0801a8a9 	.word	0x0801a8a9
 801a908:	0801a957 	.word	0x0801a957
 801a90c:	0801a8a9 	.word	0x0801a8a9
 801a910:	0801a8a9 	.word	0x0801a8a9
 801a914:	0801a9ef 	.word	0x0801a9ef
 801a918:	6833      	ldr	r3, [r6, #0]
 801a91a:	1d1a      	adds	r2, r3, #4
 801a91c:	681b      	ldr	r3, [r3, #0]
 801a91e:	6032      	str	r2, [r6, #0]
 801a920:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a924:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a928:	2301      	movs	r3, #1
 801a92a:	e09d      	b.n	801aa68 <_printf_i+0x1e8>
 801a92c:	6833      	ldr	r3, [r6, #0]
 801a92e:	6820      	ldr	r0, [r4, #0]
 801a930:	1d19      	adds	r1, r3, #4
 801a932:	6031      	str	r1, [r6, #0]
 801a934:	0606      	lsls	r6, r0, #24
 801a936:	d501      	bpl.n	801a93c <_printf_i+0xbc>
 801a938:	681d      	ldr	r5, [r3, #0]
 801a93a:	e003      	b.n	801a944 <_printf_i+0xc4>
 801a93c:	0645      	lsls	r5, r0, #25
 801a93e:	d5fb      	bpl.n	801a938 <_printf_i+0xb8>
 801a940:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a944:	2d00      	cmp	r5, #0
 801a946:	da03      	bge.n	801a950 <_printf_i+0xd0>
 801a948:	232d      	movs	r3, #45	@ 0x2d
 801a94a:	426d      	negs	r5, r5
 801a94c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a950:	4859      	ldr	r0, [pc, #356]	@ (801aab8 <_printf_i+0x238>)
 801a952:	230a      	movs	r3, #10
 801a954:	e011      	b.n	801a97a <_printf_i+0xfa>
 801a956:	6821      	ldr	r1, [r4, #0]
 801a958:	6833      	ldr	r3, [r6, #0]
 801a95a:	0608      	lsls	r0, r1, #24
 801a95c:	f853 5b04 	ldr.w	r5, [r3], #4
 801a960:	d402      	bmi.n	801a968 <_printf_i+0xe8>
 801a962:	0649      	lsls	r1, r1, #25
 801a964:	bf48      	it	mi
 801a966:	b2ad      	uxthmi	r5, r5
 801a968:	2f6f      	cmp	r7, #111	@ 0x6f
 801a96a:	4853      	ldr	r0, [pc, #332]	@ (801aab8 <_printf_i+0x238>)
 801a96c:	6033      	str	r3, [r6, #0]
 801a96e:	bf14      	ite	ne
 801a970:	230a      	movne	r3, #10
 801a972:	2308      	moveq	r3, #8
 801a974:	2100      	movs	r1, #0
 801a976:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a97a:	6866      	ldr	r6, [r4, #4]
 801a97c:	60a6      	str	r6, [r4, #8]
 801a97e:	2e00      	cmp	r6, #0
 801a980:	bfa2      	ittt	ge
 801a982:	6821      	ldrge	r1, [r4, #0]
 801a984:	f021 0104 	bicge.w	r1, r1, #4
 801a988:	6021      	strge	r1, [r4, #0]
 801a98a:	b90d      	cbnz	r5, 801a990 <_printf_i+0x110>
 801a98c:	2e00      	cmp	r6, #0
 801a98e:	d04b      	beq.n	801aa28 <_printf_i+0x1a8>
 801a990:	4616      	mov	r6, r2
 801a992:	fbb5 f1f3 	udiv	r1, r5, r3
 801a996:	fb03 5711 	mls	r7, r3, r1, r5
 801a99a:	5dc7      	ldrb	r7, [r0, r7]
 801a99c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a9a0:	462f      	mov	r7, r5
 801a9a2:	42bb      	cmp	r3, r7
 801a9a4:	460d      	mov	r5, r1
 801a9a6:	d9f4      	bls.n	801a992 <_printf_i+0x112>
 801a9a8:	2b08      	cmp	r3, #8
 801a9aa:	d10b      	bne.n	801a9c4 <_printf_i+0x144>
 801a9ac:	6823      	ldr	r3, [r4, #0]
 801a9ae:	07df      	lsls	r7, r3, #31
 801a9b0:	d508      	bpl.n	801a9c4 <_printf_i+0x144>
 801a9b2:	6923      	ldr	r3, [r4, #16]
 801a9b4:	6861      	ldr	r1, [r4, #4]
 801a9b6:	4299      	cmp	r1, r3
 801a9b8:	bfde      	ittt	le
 801a9ba:	2330      	movle	r3, #48	@ 0x30
 801a9bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a9c0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801a9c4:	1b92      	subs	r2, r2, r6
 801a9c6:	6122      	str	r2, [r4, #16]
 801a9c8:	f8cd a000 	str.w	sl, [sp]
 801a9cc:	464b      	mov	r3, r9
 801a9ce:	aa03      	add	r2, sp, #12
 801a9d0:	4621      	mov	r1, r4
 801a9d2:	4640      	mov	r0, r8
 801a9d4:	f7ff fee6 	bl	801a7a4 <_printf_common>
 801a9d8:	3001      	adds	r0, #1
 801a9da:	d14a      	bne.n	801aa72 <_printf_i+0x1f2>
 801a9dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a9e0:	b004      	add	sp, #16
 801a9e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a9e6:	6823      	ldr	r3, [r4, #0]
 801a9e8:	f043 0320 	orr.w	r3, r3, #32
 801a9ec:	6023      	str	r3, [r4, #0]
 801a9ee:	4833      	ldr	r0, [pc, #204]	@ (801aabc <_printf_i+0x23c>)
 801a9f0:	2778      	movs	r7, #120	@ 0x78
 801a9f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a9f6:	6823      	ldr	r3, [r4, #0]
 801a9f8:	6831      	ldr	r1, [r6, #0]
 801a9fa:	061f      	lsls	r7, r3, #24
 801a9fc:	f851 5b04 	ldr.w	r5, [r1], #4
 801aa00:	d402      	bmi.n	801aa08 <_printf_i+0x188>
 801aa02:	065f      	lsls	r7, r3, #25
 801aa04:	bf48      	it	mi
 801aa06:	b2ad      	uxthmi	r5, r5
 801aa08:	6031      	str	r1, [r6, #0]
 801aa0a:	07d9      	lsls	r1, r3, #31
 801aa0c:	bf44      	itt	mi
 801aa0e:	f043 0320 	orrmi.w	r3, r3, #32
 801aa12:	6023      	strmi	r3, [r4, #0]
 801aa14:	b11d      	cbz	r5, 801aa1e <_printf_i+0x19e>
 801aa16:	2310      	movs	r3, #16
 801aa18:	e7ac      	b.n	801a974 <_printf_i+0xf4>
 801aa1a:	4827      	ldr	r0, [pc, #156]	@ (801aab8 <_printf_i+0x238>)
 801aa1c:	e7e9      	b.n	801a9f2 <_printf_i+0x172>
 801aa1e:	6823      	ldr	r3, [r4, #0]
 801aa20:	f023 0320 	bic.w	r3, r3, #32
 801aa24:	6023      	str	r3, [r4, #0]
 801aa26:	e7f6      	b.n	801aa16 <_printf_i+0x196>
 801aa28:	4616      	mov	r6, r2
 801aa2a:	e7bd      	b.n	801a9a8 <_printf_i+0x128>
 801aa2c:	6833      	ldr	r3, [r6, #0]
 801aa2e:	6825      	ldr	r5, [r4, #0]
 801aa30:	6961      	ldr	r1, [r4, #20]
 801aa32:	1d18      	adds	r0, r3, #4
 801aa34:	6030      	str	r0, [r6, #0]
 801aa36:	062e      	lsls	r6, r5, #24
 801aa38:	681b      	ldr	r3, [r3, #0]
 801aa3a:	d501      	bpl.n	801aa40 <_printf_i+0x1c0>
 801aa3c:	6019      	str	r1, [r3, #0]
 801aa3e:	e002      	b.n	801aa46 <_printf_i+0x1c6>
 801aa40:	0668      	lsls	r0, r5, #25
 801aa42:	d5fb      	bpl.n	801aa3c <_printf_i+0x1bc>
 801aa44:	8019      	strh	r1, [r3, #0]
 801aa46:	2300      	movs	r3, #0
 801aa48:	6123      	str	r3, [r4, #16]
 801aa4a:	4616      	mov	r6, r2
 801aa4c:	e7bc      	b.n	801a9c8 <_printf_i+0x148>
 801aa4e:	6833      	ldr	r3, [r6, #0]
 801aa50:	1d1a      	adds	r2, r3, #4
 801aa52:	6032      	str	r2, [r6, #0]
 801aa54:	681e      	ldr	r6, [r3, #0]
 801aa56:	6862      	ldr	r2, [r4, #4]
 801aa58:	2100      	movs	r1, #0
 801aa5a:	4630      	mov	r0, r6
 801aa5c:	f7e5 fbf8 	bl	8000250 <memchr>
 801aa60:	b108      	cbz	r0, 801aa66 <_printf_i+0x1e6>
 801aa62:	1b80      	subs	r0, r0, r6
 801aa64:	6060      	str	r0, [r4, #4]
 801aa66:	6863      	ldr	r3, [r4, #4]
 801aa68:	6123      	str	r3, [r4, #16]
 801aa6a:	2300      	movs	r3, #0
 801aa6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801aa70:	e7aa      	b.n	801a9c8 <_printf_i+0x148>
 801aa72:	6923      	ldr	r3, [r4, #16]
 801aa74:	4632      	mov	r2, r6
 801aa76:	4649      	mov	r1, r9
 801aa78:	4640      	mov	r0, r8
 801aa7a:	47d0      	blx	sl
 801aa7c:	3001      	adds	r0, #1
 801aa7e:	d0ad      	beq.n	801a9dc <_printf_i+0x15c>
 801aa80:	6823      	ldr	r3, [r4, #0]
 801aa82:	079b      	lsls	r3, r3, #30
 801aa84:	d413      	bmi.n	801aaae <_printf_i+0x22e>
 801aa86:	68e0      	ldr	r0, [r4, #12]
 801aa88:	9b03      	ldr	r3, [sp, #12]
 801aa8a:	4298      	cmp	r0, r3
 801aa8c:	bfb8      	it	lt
 801aa8e:	4618      	movlt	r0, r3
 801aa90:	e7a6      	b.n	801a9e0 <_printf_i+0x160>
 801aa92:	2301      	movs	r3, #1
 801aa94:	4632      	mov	r2, r6
 801aa96:	4649      	mov	r1, r9
 801aa98:	4640      	mov	r0, r8
 801aa9a:	47d0      	blx	sl
 801aa9c:	3001      	adds	r0, #1
 801aa9e:	d09d      	beq.n	801a9dc <_printf_i+0x15c>
 801aaa0:	3501      	adds	r5, #1
 801aaa2:	68e3      	ldr	r3, [r4, #12]
 801aaa4:	9903      	ldr	r1, [sp, #12]
 801aaa6:	1a5b      	subs	r3, r3, r1
 801aaa8:	42ab      	cmp	r3, r5
 801aaaa:	dcf2      	bgt.n	801aa92 <_printf_i+0x212>
 801aaac:	e7eb      	b.n	801aa86 <_printf_i+0x206>
 801aaae:	2500      	movs	r5, #0
 801aab0:	f104 0619 	add.w	r6, r4, #25
 801aab4:	e7f5      	b.n	801aaa2 <_printf_i+0x222>
 801aab6:	bf00      	nop
 801aab8:	0801bd75 	.word	0x0801bd75
 801aabc:	0801bd86 	.word	0x0801bd86

0801aac0 <__sflush_r>:
 801aac0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801aac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aac8:	0716      	lsls	r6, r2, #28
 801aaca:	4605      	mov	r5, r0
 801aacc:	460c      	mov	r4, r1
 801aace:	d454      	bmi.n	801ab7a <__sflush_r+0xba>
 801aad0:	684b      	ldr	r3, [r1, #4]
 801aad2:	2b00      	cmp	r3, #0
 801aad4:	dc02      	bgt.n	801aadc <__sflush_r+0x1c>
 801aad6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801aad8:	2b00      	cmp	r3, #0
 801aada:	dd48      	ble.n	801ab6e <__sflush_r+0xae>
 801aadc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801aade:	2e00      	cmp	r6, #0
 801aae0:	d045      	beq.n	801ab6e <__sflush_r+0xae>
 801aae2:	2300      	movs	r3, #0
 801aae4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801aae8:	682f      	ldr	r7, [r5, #0]
 801aaea:	6a21      	ldr	r1, [r4, #32]
 801aaec:	602b      	str	r3, [r5, #0]
 801aaee:	d030      	beq.n	801ab52 <__sflush_r+0x92>
 801aaf0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801aaf2:	89a3      	ldrh	r3, [r4, #12]
 801aaf4:	0759      	lsls	r1, r3, #29
 801aaf6:	d505      	bpl.n	801ab04 <__sflush_r+0x44>
 801aaf8:	6863      	ldr	r3, [r4, #4]
 801aafa:	1ad2      	subs	r2, r2, r3
 801aafc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801aafe:	b10b      	cbz	r3, 801ab04 <__sflush_r+0x44>
 801ab00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ab02:	1ad2      	subs	r2, r2, r3
 801ab04:	2300      	movs	r3, #0
 801ab06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ab08:	6a21      	ldr	r1, [r4, #32]
 801ab0a:	4628      	mov	r0, r5
 801ab0c:	47b0      	blx	r6
 801ab0e:	1c43      	adds	r3, r0, #1
 801ab10:	89a3      	ldrh	r3, [r4, #12]
 801ab12:	d106      	bne.n	801ab22 <__sflush_r+0x62>
 801ab14:	6829      	ldr	r1, [r5, #0]
 801ab16:	291d      	cmp	r1, #29
 801ab18:	d82b      	bhi.n	801ab72 <__sflush_r+0xb2>
 801ab1a:	4a2a      	ldr	r2, [pc, #168]	@ (801abc4 <__sflush_r+0x104>)
 801ab1c:	410a      	asrs	r2, r1
 801ab1e:	07d6      	lsls	r6, r2, #31
 801ab20:	d427      	bmi.n	801ab72 <__sflush_r+0xb2>
 801ab22:	2200      	movs	r2, #0
 801ab24:	6062      	str	r2, [r4, #4]
 801ab26:	04d9      	lsls	r1, r3, #19
 801ab28:	6922      	ldr	r2, [r4, #16]
 801ab2a:	6022      	str	r2, [r4, #0]
 801ab2c:	d504      	bpl.n	801ab38 <__sflush_r+0x78>
 801ab2e:	1c42      	adds	r2, r0, #1
 801ab30:	d101      	bne.n	801ab36 <__sflush_r+0x76>
 801ab32:	682b      	ldr	r3, [r5, #0]
 801ab34:	b903      	cbnz	r3, 801ab38 <__sflush_r+0x78>
 801ab36:	6560      	str	r0, [r4, #84]	@ 0x54
 801ab38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ab3a:	602f      	str	r7, [r5, #0]
 801ab3c:	b1b9      	cbz	r1, 801ab6e <__sflush_r+0xae>
 801ab3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ab42:	4299      	cmp	r1, r3
 801ab44:	d002      	beq.n	801ab4c <__sflush_r+0x8c>
 801ab46:	4628      	mov	r0, r5
 801ab48:	f7ff fb40 	bl	801a1cc <_free_r>
 801ab4c:	2300      	movs	r3, #0
 801ab4e:	6363      	str	r3, [r4, #52]	@ 0x34
 801ab50:	e00d      	b.n	801ab6e <__sflush_r+0xae>
 801ab52:	2301      	movs	r3, #1
 801ab54:	4628      	mov	r0, r5
 801ab56:	47b0      	blx	r6
 801ab58:	4602      	mov	r2, r0
 801ab5a:	1c50      	adds	r0, r2, #1
 801ab5c:	d1c9      	bne.n	801aaf2 <__sflush_r+0x32>
 801ab5e:	682b      	ldr	r3, [r5, #0]
 801ab60:	2b00      	cmp	r3, #0
 801ab62:	d0c6      	beq.n	801aaf2 <__sflush_r+0x32>
 801ab64:	2b1d      	cmp	r3, #29
 801ab66:	d001      	beq.n	801ab6c <__sflush_r+0xac>
 801ab68:	2b16      	cmp	r3, #22
 801ab6a:	d11e      	bne.n	801abaa <__sflush_r+0xea>
 801ab6c:	602f      	str	r7, [r5, #0]
 801ab6e:	2000      	movs	r0, #0
 801ab70:	e022      	b.n	801abb8 <__sflush_r+0xf8>
 801ab72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ab76:	b21b      	sxth	r3, r3
 801ab78:	e01b      	b.n	801abb2 <__sflush_r+0xf2>
 801ab7a:	690f      	ldr	r7, [r1, #16]
 801ab7c:	2f00      	cmp	r7, #0
 801ab7e:	d0f6      	beq.n	801ab6e <__sflush_r+0xae>
 801ab80:	0793      	lsls	r3, r2, #30
 801ab82:	680e      	ldr	r6, [r1, #0]
 801ab84:	bf08      	it	eq
 801ab86:	694b      	ldreq	r3, [r1, #20]
 801ab88:	600f      	str	r7, [r1, #0]
 801ab8a:	bf18      	it	ne
 801ab8c:	2300      	movne	r3, #0
 801ab8e:	eba6 0807 	sub.w	r8, r6, r7
 801ab92:	608b      	str	r3, [r1, #8]
 801ab94:	f1b8 0f00 	cmp.w	r8, #0
 801ab98:	dde9      	ble.n	801ab6e <__sflush_r+0xae>
 801ab9a:	6a21      	ldr	r1, [r4, #32]
 801ab9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801ab9e:	4643      	mov	r3, r8
 801aba0:	463a      	mov	r2, r7
 801aba2:	4628      	mov	r0, r5
 801aba4:	47b0      	blx	r6
 801aba6:	2800      	cmp	r0, #0
 801aba8:	dc08      	bgt.n	801abbc <__sflush_r+0xfc>
 801abaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801abae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801abb2:	81a3      	strh	r3, [r4, #12]
 801abb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801abb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801abbc:	4407      	add	r7, r0
 801abbe:	eba8 0800 	sub.w	r8, r8, r0
 801abc2:	e7e7      	b.n	801ab94 <__sflush_r+0xd4>
 801abc4:	dfbffffe 	.word	0xdfbffffe

0801abc8 <_fflush_r>:
 801abc8:	b538      	push	{r3, r4, r5, lr}
 801abca:	690b      	ldr	r3, [r1, #16]
 801abcc:	4605      	mov	r5, r0
 801abce:	460c      	mov	r4, r1
 801abd0:	b913      	cbnz	r3, 801abd8 <_fflush_r+0x10>
 801abd2:	2500      	movs	r5, #0
 801abd4:	4628      	mov	r0, r5
 801abd6:	bd38      	pop	{r3, r4, r5, pc}
 801abd8:	b118      	cbz	r0, 801abe2 <_fflush_r+0x1a>
 801abda:	6a03      	ldr	r3, [r0, #32]
 801abdc:	b90b      	cbnz	r3, 801abe2 <_fflush_r+0x1a>
 801abde:	f7ff f8d1 	bl	8019d84 <__sinit>
 801abe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801abe6:	2b00      	cmp	r3, #0
 801abe8:	d0f3      	beq.n	801abd2 <_fflush_r+0xa>
 801abea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801abec:	07d0      	lsls	r0, r2, #31
 801abee:	d404      	bmi.n	801abfa <_fflush_r+0x32>
 801abf0:	0599      	lsls	r1, r3, #22
 801abf2:	d402      	bmi.n	801abfa <_fflush_r+0x32>
 801abf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801abf6:	f7ff faa6 	bl	801a146 <__retarget_lock_acquire_recursive>
 801abfa:	4628      	mov	r0, r5
 801abfc:	4621      	mov	r1, r4
 801abfe:	f7ff ff5f 	bl	801aac0 <__sflush_r>
 801ac02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ac04:	07da      	lsls	r2, r3, #31
 801ac06:	4605      	mov	r5, r0
 801ac08:	d4e4      	bmi.n	801abd4 <_fflush_r+0xc>
 801ac0a:	89a3      	ldrh	r3, [r4, #12]
 801ac0c:	059b      	lsls	r3, r3, #22
 801ac0e:	d4e1      	bmi.n	801abd4 <_fflush_r+0xc>
 801ac10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ac12:	f7ff fa99 	bl	801a148 <__retarget_lock_release_recursive>
 801ac16:	e7dd      	b.n	801abd4 <_fflush_r+0xc>

0801ac18 <fiprintf>:
 801ac18:	b40e      	push	{r1, r2, r3}
 801ac1a:	b503      	push	{r0, r1, lr}
 801ac1c:	4601      	mov	r1, r0
 801ac1e:	ab03      	add	r3, sp, #12
 801ac20:	4805      	ldr	r0, [pc, #20]	@ (801ac38 <fiprintf+0x20>)
 801ac22:	f853 2b04 	ldr.w	r2, [r3], #4
 801ac26:	6800      	ldr	r0, [r0, #0]
 801ac28:	9301      	str	r3, [sp, #4]
 801ac2a:	f7ff fca3 	bl	801a574 <_vfiprintf_r>
 801ac2e:	b002      	add	sp, #8
 801ac30:	f85d eb04 	ldr.w	lr, [sp], #4
 801ac34:	b003      	add	sp, #12
 801ac36:	4770      	bx	lr
 801ac38:	200000c0 	.word	0x200000c0

0801ac3c <__swbuf_r>:
 801ac3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac3e:	460e      	mov	r6, r1
 801ac40:	4614      	mov	r4, r2
 801ac42:	4605      	mov	r5, r0
 801ac44:	b118      	cbz	r0, 801ac4e <__swbuf_r+0x12>
 801ac46:	6a03      	ldr	r3, [r0, #32]
 801ac48:	b90b      	cbnz	r3, 801ac4e <__swbuf_r+0x12>
 801ac4a:	f7ff f89b 	bl	8019d84 <__sinit>
 801ac4e:	69a3      	ldr	r3, [r4, #24]
 801ac50:	60a3      	str	r3, [r4, #8]
 801ac52:	89a3      	ldrh	r3, [r4, #12]
 801ac54:	071a      	lsls	r2, r3, #28
 801ac56:	d501      	bpl.n	801ac5c <__swbuf_r+0x20>
 801ac58:	6923      	ldr	r3, [r4, #16]
 801ac5a:	b943      	cbnz	r3, 801ac6e <__swbuf_r+0x32>
 801ac5c:	4621      	mov	r1, r4
 801ac5e:	4628      	mov	r0, r5
 801ac60:	f000 f82a 	bl	801acb8 <__swsetup_r>
 801ac64:	b118      	cbz	r0, 801ac6e <__swbuf_r+0x32>
 801ac66:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801ac6a:	4638      	mov	r0, r7
 801ac6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ac6e:	6823      	ldr	r3, [r4, #0]
 801ac70:	6922      	ldr	r2, [r4, #16]
 801ac72:	1a98      	subs	r0, r3, r2
 801ac74:	6963      	ldr	r3, [r4, #20]
 801ac76:	b2f6      	uxtb	r6, r6
 801ac78:	4283      	cmp	r3, r0
 801ac7a:	4637      	mov	r7, r6
 801ac7c:	dc05      	bgt.n	801ac8a <__swbuf_r+0x4e>
 801ac7e:	4621      	mov	r1, r4
 801ac80:	4628      	mov	r0, r5
 801ac82:	f7ff ffa1 	bl	801abc8 <_fflush_r>
 801ac86:	2800      	cmp	r0, #0
 801ac88:	d1ed      	bne.n	801ac66 <__swbuf_r+0x2a>
 801ac8a:	68a3      	ldr	r3, [r4, #8]
 801ac8c:	3b01      	subs	r3, #1
 801ac8e:	60a3      	str	r3, [r4, #8]
 801ac90:	6823      	ldr	r3, [r4, #0]
 801ac92:	1c5a      	adds	r2, r3, #1
 801ac94:	6022      	str	r2, [r4, #0]
 801ac96:	701e      	strb	r6, [r3, #0]
 801ac98:	6962      	ldr	r2, [r4, #20]
 801ac9a:	1c43      	adds	r3, r0, #1
 801ac9c:	429a      	cmp	r2, r3
 801ac9e:	d004      	beq.n	801acaa <__swbuf_r+0x6e>
 801aca0:	89a3      	ldrh	r3, [r4, #12]
 801aca2:	07db      	lsls	r3, r3, #31
 801aca4:	d5e1      	bpl.n	801ac6a <__swbuf_r+0x2e>
 801aca6:	2e0a      	cmp	r6, #10
 801aca8:	d1df      	bne.n	801ac6a <__swbuf_r+0x2e>
 801acaa:	4621      	mov	r1, r4
 801acac:	4628      	mov	r0, r5
 801acae:	f7ff ff8b 	bl	801abc8 <_fflush_r>
 801acb2:	2800      	cmp	r0, #0
 801acb4:	d0d9      	beq.n	801ac6a <__swbuf_r+0x2e>
 801acb6:	e7d6      	b.n	801ac66 <__swbuf_r+0x2a>

0801acb8 <__swsetup_r>:
 801acb8:	b538      	push	{r3, r4, r5, lr}
 801acba:	4b29      	ldr	r3, [pc, #164]	@ (801ad60 <__swsetup_r+0xa8>)
 801acbc:	4605      	mov	r5, r0
 801acbe:	6818      	ldr	r0, [r3, #0]
 801acc0:	460c      	mov	r4, r1
 801acc2:	b118      	cbz	r0, 801accc <__swsetup_r+0x14>
 801acc4:	6a03      	ldr	r3, [r0, #32]
 801acc6:	b90b      	cbnz	r3, 801accc <__swsetup_r+0x14>
 801acc8:	f7ff f85c 	bl	8019d84 <__sinit>
 801accc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801acd0:	0719      	lsls	r1, r3, #28
 801acd2:	d422      	bmi.n	801ad1a <__swsetup_r+0x62>
 801acd4:	06da      	lsls	r2, r3, #27
 801acd6:	d407      	bmi.n	801ace8 <__swsetup_r+0x30>
 801acd8:	2209      	movs	r2, #9
 801acda:	602a      	str	r2, [r5, #0]
 801acdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ace0:	81a3      	strh	r3, [r4, #12]
 801ace2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ace6:	e033      	b.n	801ad50 <__swsetup_r+0x98>
 801ace8:	0758      	lsls	r0, r3, #29
 801acea:	d512      	bpl.n	801ad12 <__swsetup_r+0x5a>
 801acec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801acee:	b141      	cbz	r1, 801ad02 <__swsetup_r+0x4a>
 801acf0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801acf4:	4299      	cmp	r1, r3
 801acf6:	d002      	beq.n	801acfe <__swsetup_r+0x46>
 801acf8:	4628      	mov	r0, r5
 801acfa:	f7ff fa67 	bl	801a1cc <_free_r>
 801acfe:	2300      	movs	r3, #0
 801ad00:	6363      	str	r3, [r4, #52]	@ 0x34
 801ad02:	89a3      	ldrh	r3, [r4, #12]
 801ad04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801ad08:	81a3      	strh	r3, [r4, #12]
 801ad0a:	2300      	movs	r3, #0
 801ad0c:	6063      	str	r3, [r4, #4]
 801ad0e:	6923      	ldr	r3, [r4, #16]
 801ad10:	6023      	str	r3, [r4, #0]
 801ad12:	89a3      	ldrh	r3, [r4, #12]
 801ad14:	f043 0308 	orr.w	r3, r3, #8
 801ad18:	81a3      	strh	r3, [r4, #12]
 801ad1a:	6923      	ldr	r3, [r4, #16]
 801ad1c:	b94b      	cbnz	r3, 801ad32 <__swsetup_r+0x7a>
 801ad1e:	89a3      	ldrh	r3, [r4, #12]
 801ad20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801ad24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ad28:	d003      	beq.n	801ad32 <__swsetup_r+0x7a>
 801ad2a:	4621      	mov	r1, r4
 801ad2c:	4628      	mov	r0, r5
 801ad2e:	f000 f846 	bl	801adbe <__smakebuf_r>
 801ad32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ad36:	f013 0201 	ands.w	r2, r3, #1
 801ad3a:	d00a      	beq.n	801ad52 <__swsetup_r+0x9a>
 801ad3c:	2200      	movs	r2, #0
 801ad3e:	60a2      	str	r2, [r4, #8]
 801ad40:	6962      	ldr	r2, [r4, #20]
 801ad42:	4252      	negs	r2, r2
 801ad44:	61a2      	str	r2, [r4, #24]
 801ad46:	6922      	ldr	r2, [r4, #16]
 801ad48:	b942      	cbnz	r2, 801ad5c <__swsetup_r+0xa4>
 801ad4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801ad4e:	d1c5      	bne.n	801acdc <__swsetup_r+0x24>
 801ad50:	bd38      	pop	{r3, r4, r5, pc}
 801ad52:	0799      	lsls	r1, r3, #30
 801ad54:	bf58      	it	pl
 801ad56:	6962      	ldrpl	r2, [r4, #20]
 801ad58:	60a2      	str	r2, [r4, #8]
 801ad5a:	e7f4      	b.n	801ad46 <__swsetup_r+0x8e>
 801ad5c:	2000      	movs	r0, #0
 801ad5e:	e7f7      	b.n	801ad50 <__swsetup_r+0x98>
 801ad60:	200000c0 	.word	0x200000c0

0801ad64 <abort>:
 801ad64:	b508      	push	{r3, lr}
 801ad66:	2006      	movs	r0, #6
 801ad68:	f000 f88e 	bl	801ae88 <raise>
 801ad6c:	2001      	movs	r0, #1
 801ad6e:	f7e7 fdb9 	bl	80028e4 <_exit>

0801ad72 <__swhatbuf_r>:
 801ad72:	b570      	push	{r4, r5, r6, lr}
 801ad74:	460c      	mov	r4, r1
 801ad76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad7a:	2900      	cmp	r1, #0
 801ad7c:	b096      	sub	sp, #88	@ 0x58
 801ad7e:	4615      	mov	r5, r2
 801ad80:	461e      	mov	r6, r3
 801ad82:	da0d      	bge.n	801ada0 <__swhatbuf_r+0x2e>
 801ad84:	89a3      	ldrh	r3, [r4, #12]
 801ad86:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801ad8a:	f04f 0100 	mov.w	r1, #0
 801ad8e:	bf14      	ite	ne
 801ad90:	2340      	movne	r3, #64	@ 0x40
 801ad92:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801ad96:	2000      	movs	r0, #0
 801ad98:	6031      	str	r1, [r6, #0]
 801ad9a:	602b      	str	r3, [r5, #0]
 801ad9c:	b016      	add	sp, #88	@ 0x58
 801ad9e:	bd70      	pop	{r4, r5, r6, pc}
 801ada0:	466a      	mov	r2, sp
 801ada2:	f000 f879 	bl	801ae98 <_fstat_r>
 801ada6:	2800      	cmp	r0, #0
 801ada8:	dbec      	blt.n	801ad84 <__swhatbuf_r+0x12>
 801adaa:	9901      	ldr	r1, [sp, #4]
 801adac:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801adb0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801adb4:	4259      	negs	r1, r3
 801adb6:	4159      	adcs	r1, r3
 801adb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801adbc:	e7eb      	b.n	801ad96 <__swhatbuf_r+0x24>

0801adbe <__smakebuf_r>:
 801adbe:	898b      	ldrh	r3, [r1, #12]
 801adc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801adc2:	079d      	lsls	r5, r3, #30
 801adc4:	4606      	mov	r6, r0
 801adc6:	460c      	mov	r4, r1
 801adc8:	d507      	bpl.n	801adda <__smakebuf_r+0x1c>
 801adca:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801adce:	6023      	str	r3, [r4, #0]
 801add0:	6123      	str	r3, [r4, #16]
 801add2:	2301      	movs	r3, #1
 801add4:	6163      	str	r3, [r4, #20]
 801add6:	b003      	add	sp, #12
 801add8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801adda:	ab01      	add	r3, sp, #4
 801addc:	466a      	mov	r2, sp
 801adde:	f7ff ffc8 	bl	801ad72 <__swhatbuf_r>
 801ade2:	9f00      	ldr	r7, [sp, #0]
 801ade4:	4605      	mov	r5, r0
 801ade6:	4639      	mov	r1, r7
 801ade8:	4630      	mov	r0, r6
 801adea:	f7fe fd99 	bl	8019920 <_malloc_r>
 801adee:	b948      	cbnz	r0, 801ae04 <__smakebuf_r+0x46>
 801adf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801adf4:	059a      	lsls	r2, r3, #22
 801adf6:	d4ee      	bmi.n	801add6 <__smakebuf_r+0x18>
 801adf8:	f023 0303 	bic.w	r3, r3, #3
 801adfc:	f043 0302 	orr.w	r3, r3, #2
 801ae00:	81a3      	strh	r3, [r4, #12]
 801ae02:	e7e2      	b.n	801adca <__smakebuf_r+0xc>
 801ae04:	89a3      	ldrh	r3, [r4, #12]
 801ae06:	6020      	str	r0, [r4, #0]
 801ae08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ae0c:	81a3      	strh	r3, [r4, #12]
 801ae0e:	9b01      	ldr	r3, [sp, #4]
 801ae10:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801ae14:	b15b      	cbz	r3, 801ae2e <__smakebuf_r+0x70>
 801ae16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ae1a:	4630      	mov	r0, r6
 801ae1c:	f000 f84e 	bl	801aebc <_isatty_r>
 801ae20:	b128      	cbz	r0, 801ae2e <__smakebuf_r+0x70>
 801ae22:	89a3      	ldrh	r3, [r4, #12]
 801ae24:	f023 0303 	bic.w	r3, r3, #3
 801ae28:	f043 0301 	orr.w	r3, r3, #1
 801ae2c:	81a3      	strh	r3, [r4, #12]
 801ae2e:	89a3      	ldrh	r3, [r4, #12]
 801ae30:	431d      	orrs	r5, r3
 801ae32:	81a5      	strh	r5, [r4, #12]
 801ae34:	e7cf      	b.n	801add6 <__smakebuf_r+0x18>

0801ae36 <_raise_r>:
 801ae36:	291f      	cmp	r1, #31
 801ae38:	b538      	push	{r3, r4, r5, lr}
 801ae3a:	4605      	mov	r5, r0
 801ae3c:	460c      	mov	r4, r1
 801ae3e:	d904      	bls.n	801ae4a <_raise_r+0x14>
 801ae40:	2316      	movs	r3, #22
 801ae42:	6003      	str	r3, [r0, #0]
 801ae44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ae48:	bd38      	pop	{r3, r4, r5, pc}
 801ae4a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801ae4c:	b112      	cbz	r2, 801ae54 <_raise_r+0x1e>
 801ae4e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ae52:	b94b      	cbnz	r3, 801ae68 <_raise_r+0x32>
 801ae54:	4628      	mov	r0, r5
 801ae56:	f000 f853 	bl	801af00 <_getpid_r>
 801ae5a:	4622      	mov	r2, r4
 801ae5c:	4601      	mov	r1, r0
 801ae5e:	4628      	mov	r0, r5
 801ae60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ae64:	f000 b83a 	b.w	801aedc <_kill_r>
 801ae68:	2b01      	cmp	r3, #1
 801ae6a:	d00a      	beq.n	801ae82 <_raise_r+0x4c>
 801ae6c:	1c59      	adds	r1, r3, #1
 801ae6e:	d103      	bne.n	801ae78 <_raise_r+0x42>
 801ae70:	2316      	movs	r3, #22
 801ae72:	6003      	str	r3, [r0, #0]
 801ae74:	2001      	movs	r0, #1
 801ae76:	e7e7      	b.n	801ae48 <_raise_r+0x12>
 801ae78:	2100      	movs	r1, #0
 801ae7a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801ae7e:	4620      	mov	r0, r4
 801ae80:	4798      	blx	r3
 801ae82:	2000      	movs	r0, #0
 801ae84:	e7e0      	b.n	801ae48 <_raise_r+0x12>
	...

0801ae88 <raise>:
 801ae88:	4b02      	ldr	r3, [pc, #8]	@ (801ae94 <raise+0xc>)
 801ae8a:	4601      	mov	r1, r0
 801ae8c:	6818      	ldr	r0, [r3, #0]
 801ae8e:	f7ff bfd2 	b.w	801ae36 <_raise_r>
 801ae92:	bf00      	nop
 801ae94:	200000c0 	.word	0x200000c0

0801ae98 <_fstat_r>:
 801ae98:	b538      	push	{r3, r4, r5, lr}
 801ae9a:	4d07      	ldr	r5, [pc, #28]	@ (801aeb8 <_fstat_r+0x20>)
 801ae9c:	2300      	movs	r3, #0
 801ae9e:	4604      	mov	r4, r0
 801aea0:	4608      	mov	r0, r1
 801aea2:	4611      	mov	r1, r2
 801aea4:	602b      	str	r3, [r5, #0]
 801aea6:	f7e7 fd6d 	bl	8002984 <_fstat>
 801aeaa:	1c43      	adds	r3, r0, #1
 801aeac:	d102      	bne.n	801aeb4 <_fstat_r+0x1c>
 801aeae:	682b      	ldr	r3, [r5, #0]
 801aeb0:	b103      	cbz	r3, 801aeb4 <_fstat_r+0x1c>
 801aeb2:	6023      	str	r3, [r4, #0]
 801aeb4:	bd38      	pop	{r3, r4, r5, pc}
 801aeb6:	bf00      	nop
 801aeb8:	2000b0fc 	.word	0x2000b0fc

0801aebc <_isatty_r>:
 801aebc:	b538      	push	{r3, r4, r5, lr}
 801aebe:	4d06      	ldr	r5, [pc, #24]	@ (801aed8 <_isatty_r+0x1c>)
 801aec0:	2300      	movs	r3, #0
 801aec2:	4604      	mov	r4, r0
 801aec4:	4608      	mov	r0, r1
 801aec6:	602b      	str	r3, [r5, #0]
 801aec8:	f7e7 fd6c 	bl	80029a4 <_isatty>
 801aecc:	1c43      	adds	r3, r0, #1
 801aece:	d102      	bne.n	801aed6 <_isatty_r+0x1a>
 801aed0:	682b      	ldr	r3, [r5, #0]
 801aed2:	b103      	cbz	r3, 801aed6 <_isatty_r+0x1a>
 801aed4:	6023      	str	r3, [r4, #0]
 801aed6:	bd38      	pop	{r3, r4, r5, pc}
 801aed8:	2000b0fc 	.word	0x2000b0fc

0801aedc <_kill_r>:
 801aedc:	b538      	push	{r3, r4, r5, lr}
 801aede:	4d07      	ldr	r5, [pc, #28]	@ (801aefc <_kill_r+0x20>)
 801aee0:	2300      	movs	r3, #0
 801aee2:	4604      	mov	r4, r0
 801aee4:	4608      	mov	r0, r1
 801aee6:	4611      	mov	r1, r2
 801aee8:	602b      	str	r3, [r5, #0]
 801aeea:	f7e7 fceb 	bl	80028c4 <_kill>
 801aeee:	1c43      	adds	r3, r0, #1
 801aef0:	d102      	bne.n	801aef8 <_kill_r+0x1c>
 801aef2:	682b      	ldr	r3, [r5, #0]
 801aef4:	b103      	cbz	r3, 801aef8 <_kill_r+0x1c>
 801aef6:	6023      	str	r3, [r4, #0]
 801aef8:	bd38      	pop	{r3, r4, r5, pc}
 801aefa:	bf00      	nop
 801aefc:	2000b0fc 	.word	0x2000b0fc

0801af00 <_getpid_r>:
 801af00:	f7e7 bcd8 	b.w	80028b4 <_getpid>

0801af04 <_init>:
 801af04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af06:	bf00      	nop
 801af08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801af0a:	bc08      	pop	{r3}
 801af0c:	469e      	mov	lr, r3
 801af0e:	4770      	bx	lr

0801af10 <_fini>:
 801af10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af12:	bf00      	nop
 801af14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801af16:	bc08      	pop	{r3}
 801af18:	469e      	mov	lr, r3
 801af1a:	4770      	bx	lr
